uint64_t sub_41D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 4376) = v1;
  *(_QWORD *)(v2 + 4368) = a1;
  return swift_task_switch(sub_41EC, 0, 0);
}

uint64_t sub_41EC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 4376);
  v2 = v1[5];
  v3 = v1[6];
  sub_49F4(v1 + 2, v2);
  v4 = *(int **)(v3 + 16);
  v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v0 + 4384) = v5;
  *v5 = v0;
  v5[1] = sub_427C;
  return v7(v0 + 16, v2, v3);
}

uint64_t sub_427C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 4384);
  *(_QWORD *)(*(_QWORD *)v1 + 4392) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_4628;
  else
    v3 = sub_42E0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_42E0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;
  int *v9;

  v1 = (_QWORD *)v0[547];
  memcpy(v0 + 138, v0 + 2, 0x440uLL);
  v2 = v0[191];
  v3 = v1 + 12;
  v4 = v1[15];
  v5 = v1[16];
  sub_49F4(v3, v4);
  memcpy(v0 + 274, v0 + 138, 0x440uLL);
  v6 = *(int **)(v5 + 8);
  v9 = (int *)((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc(v6[1]);
  v0[550] = v7;
  *v7 = v0;
  v7[1] = sub_43A0;
  return ((uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))v9)(v0 + 274, v2, v4, v5);
}

uint64_t sub_43A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 4400);
  *(_QWORD *)(*v2 + 4408) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_4634;
  }
  else
  {
    *(_QWORD *)(v4 + 4416) = a1;
    v6 = sub_4414;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_4414()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  _QWORD *v9;
  int *v11;

  v1 = v0[552];
  v2 = (_QWORD *)v0[547];
  v3 = sub_4A18((uint64_t)&_swiftEmptyDictionarySingleton, v1);
  v4 = sub_4F54((uint64_t)v3);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v1);
  v5 = sub_58BC(v4);
  v0[553] = v5;
  swift_bridgeObjectRelease(v4);
  v6 = v2[10];
  v7 = v2[11];
  sub_49F4(v2 + 7, v6);
  memcpy(v0 + 410, v0 + 138, 0x440uLL);
  v8 = *(int **)(v7 + 8);
  v11 = (int *)((char *)v8 + *v8);
  v9 = (_QWORD *)swift_task_alloc(v8[1]);
  v0[554] = v9;
  *v9 = v0;
  v9[1] = sub_4510;
  return ((uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t))v11)(v5, v0 + 410, v6, v7);
}

uint64_t sub_4510(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 4432);
  *(_QWORD *)(*v2 + 4440) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_45E8;
  }
  else
  {
    *(_QWORD *)(v4 + 4448) = a1;
    v6 = sub_4584;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_4584()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 4448);
  v2 = *(_QWORD *)(v0 + 4424);
  sub_4668(v1, *(char **)(v0 + 4368));
  swift_bridgeObjectRelease(v1);
  swift_release(v2);
  sub_5B70(v0 + 1104);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_45E8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 4424));
  sub_5B70(v0 + 1104);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_4628()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_4634()
{
  uint64_t v0;

  sub_5B70(v0 + 1104);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_4668@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t result;
  int v5;
  char v6;
  char v7;
  char v8;

  result = sub_5FF8(a1);
  if ((v6 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
  {
    v7 = 2;
  }
  else
  {
    result = sub_5B18(result, v5, a1, &v8);
    v7 = v8;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_46E0()
{
  _QWORD *v0;

  sub_62F8(v0 + 2);
  sub_62F8(v0 + 7);
  sub_62F8(v0 + 12);
  return swift_deallocClassInstance(v0, 136, 7);
}

uint64_t type metadata accessor for MediaTypesMediaTypeRecommendationService()
{
  return objc_opt_self(_TtC20BooksPersonalization40MediaTypesMediaTypeRecommendationService);
}

__n128 sub_4734(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t sub_474C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 20))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_476C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 20) = v3;
  return result;
}

void type metadata accessor for Decimal(uint64_t a1)
{
  sub_632C(a1, &qword_1F0270, (uint64_t)&unk_1DAD88);
}

uint64_t sub_47AC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1F028C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_4814;
  v5[547] = v4;
  v5[546] = a1;
  return swift_task_switch(sub_41EC, 0, 0);
}

uint64_t sub_4814()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v0;
  v1 = *(_QWORD *)(v4 + 16);
  v2 = *v0;
  v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_485C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4[140] = a3;
  v4[139] = a2;
  v4[138] = a1;
  v4[141] = *v3;
  return swift_task_switch(sub_4884, 0, 0);
}

uint64_t sub_4884()
{
  _QWORD *v0;
  _QWORD *v1;
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  int *v8;

  v1 = (_QWORD *)v0[141];
  v2 = (const void *)v0[140];
  v3 = v1[10];
  v4 = v1[11];
  sub_49F4(v1 + 7, v3);
  memcpy(v0 + 2, v2, 0x440uLL);
  v5 = *(int **)(v4 + 8);
  v8 = (int *)((char *)v5 + *v5);
  v6 = (_QWORD *)swift_task_alloc(v5[1]);
  v0[142] = v6;
  *v6 = v0;
  v6[1] = sub_4930;
  return ((uint64_t (*)(_QWORD, _QWORD *, uint64_t, uint64_t))v8)(v0[139], v0 + 2, v3, v4);
}

uint64_t sub_4930(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 1136);
  *(_QWORD *)(*v2 + 1144) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_49E8;
  }
  else
  {
    *(_QWORD *)(v4 + 1152) = a1;
    v6 = sub_49A4;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_49A4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 1152);
  sub_4668(v1, *(char **)(v0 + 1104));
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_49E8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_49F4(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

_QWORD *sub_4A18(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  _QWORD *result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v18;
  int64_t v19;
  _QWORD v20[4];
  __int128 v21;
  _BYTE v22[552];
  _QWORD v23[70];
  uint64_t v24;

  v24 = a1;
  v3 = a2 + 64;
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = (_QWORD *)swift_bridgeObjectRetain(a2);
  v9 = 0;
  v21 = xmmword_1875E0;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    if (__OFADD__(v9++, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v9 >= v7)
      goto LABEL_24;
    v18 = *(_QWORD *)(v3 + 8 * v9);
    if (!v18)
      break;
LABEL_19:
    v6 = (v18 - 1) & v18;
    v11 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_5:
    memcpy(v23, (const void *)(*(_QWORD *)(a2 + 56) + 552 * v11), 0x221uLL);
    v12 = v23[1];
    memcpy(v22, v23, 0x221uLL);
    v13 = sub_5EDC(&qword_1F02B8);
    v14 = swift_allocObject(v13, 33, 7);
    *(_OWORD *)(v14 + 16) = v21;
    *(_BYTE *)(v14 + 32) = v12;
    sub_6100(v23);
    v15 = sub_89600(v14);
    swift_setDeallocating(v14);
    v16 = swift_deallocClassInstance(v14, 32, 7);
    __chkstk_darwin(v16);
    v20[2] = &v24;
    v20[3] = v22;
    sub_4C64((uint64_t (*)(char *))sub_61D4, (uint64_t)v20, v15);
    swift_bridgeObjectRelease(v15);
    result = sub_6228(v23);
  }
  v19 = v9 + 1;
  if (v9 + 1 >= v7)
    goto LABEL_24;
  v18 = *(_QWORD *)(v3 + 8 * v19);
  if (v18)
    goto LABEL_18;
  v19 = v9 + 2;
  if (v9 + 2 >= v7)
    goto LABEL_24;
  v18 = *(_QWORD *)(v3 + 8 * v19);
  if (v18)
    goto LABEL_18;
  v19 = v9 + 3;
  if (v9 + 3 >= v7)
    goto LABEL_24;
  v18 = *(_QWORD *)(v3 + 8 * v19);
  if (v18)
    goto LABEL_18;
  v19 = v9 + 4;
  if (v9 + 4 >= v7)
  {
LABEL_24:
    swift_release(a2);
    return (_QWORD *)v24;
  }
  v18 = *(_QWORD *)(v3 + 8 * v19);
  if (v18)
  {
LABEL_18:
    v9 = v19;
    goto LABEL_19;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v7)
      goto LABEL_24;
    v18 = *(_QWORD *)(v3 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_4C64(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  int64_t v17;
  char v18;

  v6 = a3 + 56;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain(a3);
  v12 = 0;
  while (v9)
  {
    v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v14 = v13 | (v12 << 6);
LABEL_5:
    v18 = *(_BYTE *)(*(_QWORD *)(a3 + 48) + v14);
    result = a1(&v18);
    if (v3)
      return swift_release(a3);
  }
  if (__OFADD__(v12++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v12 >= v10)
    return swift_release(a3);
  v16 = *(_QWORD *)(v6 + 8 * v12);
  if (v16)
  {
LABEL_19:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v12 << 6);
    goto LABEL_5;
  }
  v17 = v12 + 1;
  if (v12 + 1 >= v10)
    return swift_release(a3);
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
    goto LABEL_18;
  v17 = v12 + 2;
  if (v12 + 2 >= v10)
    return swift_release(a3);
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
    goto LABEL_18;
  v17 = v12 + 3;
  if (v12 + 3 >= v10)
    return swift_release(a3);
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
    goto LABEL_18;
  v17 = v12 + 4;
  if (v12 + 4 >= v10)
    return swift_release(a3);
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
LABEL_18:
    v12 = v17;
    goto LABEL_19;
  }
  while (1)
  {
    v12 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v12 >= v10)
      return swift_release(a3);
    v16 = *(_QWORD *)(v6 + 8 * v12);
    ++v17;
    if (v16)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_4DDC(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;

  v6 = a3 + 56;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain(a3);
  v12 = 0;
  while (v9)
  {
    v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v14 = v13 | (v12 << 6);
LABEL_5:
    v18 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v14);
    result = a1(&v18);
    if (v3)
      return swift_release(a3);
  }
  if (__OFADD__(v12++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v12 >= v10)
    return swift_release(a3);
  v16 = *(_QWORD *)(v6 + 8 * v12);
  if (v16)
  {
LABEL_19:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v12 << 6);
    goto LABEL_5;
  }
  v17 = v12 + 1;
  if (v12 + 1 >= v10)
    return swift_release(a3);
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
    goto LABEL_18;
  v17 = v12 + 2;
  if (v12 + 2 >= v10)
    return swift_release(a3);
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
    goto LABEL_18;
  v17 = v12 + 3;
  if (v12 + 3 >= v10)
    return swift_release(a3);
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
    goto LABEL_18;
  v17 = v12 + 4;
  if (v12 + 4 >= v10)
    return swift_release(a3);
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
LABEL_18:
    v12 = v17;
    goto LABEL_19;
  }
  while (1)
  {
    v12 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v12 >= v10)
      return swift_release(a3);
    v16 = *(_QWORD *)(v6 + 8 * v12);
    ++v17;
    if (v16)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_4F54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  int64_t v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void (*v46)(unint64_t, char *, uint64_t);
  char *v47;
  _QWORD *v48;
  int64_t v49;
  uint64_t v50;
  _QWORD v51[9];
  _QWORD *v52;

  v2 = sub_5EDC(&qword_1F02A0);
  __chkstk_darwin(v2);
  v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5EDC(&qword_1F0290);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v47 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v45 = (char *)&v43 - v9;
  v10 = *(_QWORD *)(a1 + 64);
  v50 = a1 + 64;
  v48 = &_swiftEmptyDictionarySingleton;
  v52 = &_swiftEmptyDictionarySingleton;
  v11 = -1 << *(_BYTE *)(a1 + 32);
  if (-v11 < 64)
    v12 = ~(-1 << -(char)v11);
  else
    v12 = -1;
  v13 = v12 & v10;
  v43 = -1 << *(_BYTE *)(a1 + 32);
  v49 = (unint64_t)(63 - v11) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v15 = 0;
  v44 = v6;
  if (!v13)
    goto LABEL_8;
LABEL_5:
  v16 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  v17 = v16 | (v15 << 6);
  while (1)
  {
    v18 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + v17);
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v17);
    v51[0] = v19;
    swift_bridgeObjectRetain_n(v19, 2);
    v20 = sub_5EDC(&qword_1F02A8);
    v21 = sub_5F1C();
    NonEmpty.init(_:)(v51, v20, v21);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      swift_bridgeObjectRelease(v19);
      result = sub_5FAC((uint64_t)v4);
      if (v13)
        goto LABEL_5;
    }
    else
    {
      v26 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      v27 = v45;
      v26(v45, v4, v5);
      v46 = (void (*)(unint64_t, char *, uint64_t))v26;
      v26(v47, v27, v5);
      v28 = v48;
      v29 = v48[2];
      if (v48[3] <= v29)
      {
        sub_15AC60(v29 + 1, 1);
        v28 = v52;
      }
      Hasher.init(_seed:)(v51, v28[5]);
      if (v18)
        v30 = 0x6F6F626F69647561;
      else
        v30 = 0x6B6F6F6265;
      if (v18)
        v31 = 0xE90000000000006BLL;
      else
        v31 = 0xE500000000000000;
      String.hash(into:)(v51, v30, v31);
      swift_bridgeObjectRelease(v31);
      result = Hasher._finalize()();
      v32 = v28 + 8;
      v48 = v28;
      v33 = -1 << *((_BYTE *)v28 + 32);
      v34 = result & ~v33;
      v35 = v34 >> 6;
      if (((-1 << v34) & ~v28[(v34 >> 6) + 8]) == 0)
      {
        v37 = 0;
        v38 = (unint64_t)(63 - v33) >> 6;
        v6 = v44;
        while (++v35 != v38 || (v37 & 1) == 0)
        {
          v39 = v35 == v38;
          if (v35 == v38)
            v35 = 0;
          v37 |= v39;
          v40 = v32[v35];
          if (v40 != -1)
          {
            v36 = __clz(__rbit64(~v40)) + (v35 << 6);
            goto LABEL_42;
          }
        }
        goto LABEL_46;
      }
      v36 = __clz(__rbit64((-1 << v34) & ~v28[(v34 >> 6) + 8])) | v34 & 0x7FFFFFFFFFFFFFC0;
      v6 = v44;
LABEL_42:
      *(_QWORD *)((char *)v32 + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v36;
      v41 = v47;
      v42 = v48;
      *(_BYTE *)(v48[6] + v36) = v18;
      v46(v42[7] + *(_QWORD *)(v6 + 72) * v36, v41, v5);
      ++v42[2];
      result = swift_bridgeObjectRelease(v19);
      if (v13)
        goto LABEL_5;
    }
LABEL_8:
    v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    if (v22 >= v49)
      goto LABEL_44;
    v23 = *(_QWORD *)(v50 + 8 * v22);
    v24 = v15 + 1;
    if (!v23)
    {
      v24 = v15 + 2;
      if (v15 + 2 >= v49)
        goto LABEL_44;
      v23 = *(_QWORD *)(v50 + 8 * v24);
      if (!v23)
      {
        v24 = v15 + 3;
        if (v15 + 3 >= v49)
          goto LABEL_44;
        v23 = *(_QWORD *)(v50 + 8 * v24);
        if (!v23)
        {
          v24 = v15 + 4;
          if (v15 + 4 >= v49)
            goto LABEL_44;
          v23 = *(_QWORD *)(v50 + 8 * v24);
          if (!v23)
            break;
        }
      }
    }
LABEL_23:
    v13 = (v23 - 1) & v23;
    v17 = __clz(__rbit64(v23)) + (v24 << 6);
    v15 = v24;
  }
  v25 = v15 + 5;
  if (v15 + 5 >= v49)
  {
LABEL_44:
    sub_5FEC(a1);
    return (uint64_t)v48;
  }
  v23 = *(_QWORD *)(v50 + 8 * v25);
  if (v23)
  {
    v24 = v15 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    v24 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v24 >= v49)
      goto LABEL_44;
    v23 = *(_QWORD *)(v50 + 8 * v24);
    ++v25;
    if (v23)
      goto LABEL_23;
  }
LABEL_47:
  __break(1u);
  return result;
}

_QWORD *sub_53D0(char a1, _QWORD *a2, _QWORD *a3)
{
  char v3;
  char v6;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *result;
  _QWORD v18[69];
  _QWORD __src[69];

  v6 = a1 & 1;
  sub_6100(a3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a2);
  __src[0] = *a2;
  v8 = __src[0];
  *a2 = 0x8000000000000000;
  v10 = sub_3933C(v6);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_10;
  }
  v3 = v9;
  if (*(_QWORD *)(v8 + 24) >= v13)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_6;
LABEL_10:
    sub_16B8C8();
    v8 = __src[0];
    goto LABEL_6;
  }
  sub_15A918(v13, isUniquelyReferenced_nonNull_native);
  v8 = __src[0];
  v14 = sub_3933C(v6);
  if ((v3 & 1) != (v15 & 1))
  {
    result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Book.MediaType);
    __break(1u);
    return result;
  }
  v10 = v14;
LABEL_6:
  v16 = *a2;
  *a2 = v8;
  swift_bridgeObjectRelease(v16);
  if ((v3 & 1) == 0)
    sub_170D40(v10, v6, (uint64_t)&_swiftEmptySetSingleton, (_QWORD *)*a2);
  sub_1629CC(__src, a3);
  memcpy(v18, __src, 0x221uLL);
  return sub_6228(v18);
}

uint64_t sub_5528(uint64_t a1, uint64_t a2)
{
  return sub_5748(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_5534(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_55A8(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_5624@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

uint64_t sub_5664@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_56A8@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_56D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_63B8(&qword_1F02E0, (uint64_t)&unk_187788);
  v3 = sub_63B8(&qword_1F02E8, (uint64_t)&unk_187728);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_573C(uint64_t a1, uint64_t a2)
{
  return sub_5748(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_5748(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_5784(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_57C4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_5834(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_58BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = sub_5EDC(&qword_1F0290);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5EDC(&qword_1F0298);
  result = static _DictionaryStorage.copy(original:)(a1);
  v7 = (_QWORD *)result;
  v8 = 0;
  v26 = a1;
  v9 = *(_QWORD *)(a1 + 64);
  v23 = a1 + 64;
  v10 = 1 << *(_BYTE *)(a1 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v24 = (unint64_t)(v10 + 63) >> 6;
  v25 = result + 64;
  if ((v11 & v9) == 0)
    goto LABEL_5;
LABEL_4:
  v13 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v13 | (v8 << 6); ; i = __clz(__rbit64(v16)) + (v8 << 6))
  {
    v18 = *(_BYTE *)(*(_QWORD *)(v26 + 48) + i);
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v26 + 56) + *(_QWORD *)(v3 + 72) * i, v2);
    NonEmpty.elements.getter(&v27, v2);
    result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    *(_QWORD *)(v25 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(_BYTE *)(v7[6] + i) = v18;
    *(_QWORD *)(v7[7] + 8 * i) = v27;
    v19 = v7[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v7[2] = v21;
    if (v12)
      goto LABEL_4;
LABEL_5:
    v15 = v8 + 1;
    if (__OFADD__(v8, 1))
      goto LABEL_24;
    if (v15 >= v24)
      return (uint64_t)v7;
    v16 = *(_QWORD *)(v23 + 8 * v15);
    ++v8;
    if (!v16)
    {
      v8 = v15 + 1;
      if (v15 + 1 >= v24)
        return (uint64_t)v7;
      v16 = *(_QWORD *)(v23 + 8 * v8);
      if (!v16)
      {
        v8 = v15 + 2;
        if (v15 + 2 >= v24)
          return (uint64_t)v7;
        v16 = *(_QWORD *)(v23 + 8 * v8);
        if (!v16)
          break;
      }
    }
LABEL_18:
    v12 = (v16 - 1) & v16;
  }
  v17 = v15 + 3;
  if (v17 >= v24)
    return (uint64_t)v7;
  v16 = *(_QWORD *)(v23 + 8 * v17);
  if (v16)
  {
    v8 = v17;
    goto LABEL_18;
  }
  while (1)
  {
    v8 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v8 >= v24)
      return (uint64_t)v7;
    v16 = *(_QWORD *)(v23 + 8 * v8);
    ++v17;
    if (v16)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_5B18@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, _BYTE *a4@<X8>)
{
  if (result < 0 || 1 << *(_BYTE *)(a3 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a3 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a3 + 36) == a2)
  {
    *a4 = *(_BYTE *)(*(_QWORD *)(a3 + 48) + result);
    return result;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_5B70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v45 = *(_QWORD *)(a1 + 80);
  v29 = *(_QWORD *)(a1 + 416);
  v22 = *(_QWORD *)(a1 + 456);
  v19 = *(_QWORD *)(a1 + 464);
  v15 = *(_QWORD *)(a1 + 472);
  v2 = *(_QWORD *)(a1 + 512);
  v3 = *(_QWORD *)(a1 + 544);
  v4 = *(_QWORD *)(a1 + 552);
  v5 = *(_QWORD *)(a1 + 568);
  v6 = *(_QWORD *)(a1 + 576);
  v7 = *(_QWORD *)(a1 + 600);
  v8 = *(_QWORD *)(a1 + 616);
  v9 = *(_QWORD *)(a1 + 664);
  v10 = *(_QWORD *)(a1 + 680);
  v42 = *(_QWORD *)(a1 + 712);
  v43 = *(_QWORD *)(a1 + 704);
  v40 = *(_QWORD *)(a1 + 728);
  v41 = *(_QWORD *)(a1 + 720);
  v38 = *(_QWORD *)(a1 + 744);
  v39 = *(_QWORD *)(a1 + 736);
  v36 = *(_QWORD *)(a1 + 760);
  v37 = *(_QWORD *)(a1 + 752);
  v20 = *(_OWORD *)(a1 + 784);
  v21 = *(_OWORD *)(a1 + 768);
  v17 = *(_OWORD *)(a1 + 816);
  v18 = *(_OWORD *)(a1 + 800);
  v16 = *(_OWORD *)(a1 + 832);
  v13 = *(_OWORD *)(a1 + 864);
  v14 = *(_OWORD *)(a1 + 848);
  v12 = *(_QWORD *)(a1 + 880);
  v27 = *(_QWORD *)(a1 + 896);
  v28 = *(_QWORD *)(a1 + 888);
  v25 = *(_QWORD *)(a1 + 912);
  v26 = *(_QWORD *)(a1 + 904);
  v23 = *(_QWORD *)(a1 + 928);
  v24 = *(_QWORD *)(a1 + 920);
  v34 = *(_QWORD *)(a1 + 944);
  v35 = *(_QWORD *)(a1 + 936);
  v33 = *(_QWORD *)(a1 + 952);
  v31 = *(_QWORD *)(a1 + 968);
  v32 = *(_QWORD *)(a1 + 960);
  v30 = *(_QWORD *)(a1 + 976);
  v44 = *(_QWORD *)(a1 + 1008);
  v52 = *(_QWORD *)(a1 + 1024);
  v53 = *(_QWORD *)(a1 + 1016);
  v50 = *(_QWORD *)(a1 + 1040);
  v51 = *(_QWORD *)(a1 + 1032);
  v48 = *(_QWORD *)(a1 + 1056);
  v49 = *(_QWORD *)(a1 + 1048);
  v46 = *(_QWORD *)(a1 + 1072);
  v47 = *(_QWORD *)(a1 + 1064);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 688));
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v45);
  sub_5DFC(v43, v42, v41, v40, v39, v38, v37, v36, v21, *((uint64_t *)&v21 + 1), v20, *((uint64_t *)&v20 + 1), v18, *((uint64_t *)&v18 + 1), v17, *((uint64_t *)&v17 + 1), v16, *((uint64_t *)&v16 + 1), v14,
    *((uint64_t *)&v14 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v12);
  sub_5E34(v28, v27, v26, v25, v24, v23);
  sub_5E70(v35, v34, v33, v32, v31, v30);
  swift_bridgeObjectRelease(v44);
  sub_5EA0(v53, v52, v51, v50, v49, v48, v47, v46);
  return a1;
}

uint64_t sub_5DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t result;

  result = a22;
  if (a22)
  {
    swift_bridgeObjectRelease(a22);
    return swift_bridgeObjectRelease(a23);
  }
  return result;
}

uint64_t sub_5E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a6);
  }
  return result;
}

uint64_t sub_5E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a6);
  }
  return result;
}

uint64_t sub_5EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    return swift_bridgeObjectRelease(a8);
  }
  return result;
}

uint64_t sub_5EDC(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_5F1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F02B0;
  if (!qword_1F02B0)
  {
    v1 = sub_5F68(&qword_1F02A8);
    result = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1F02B0);
  }
  return result;
}

uint64_t sub_5F68(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_5FAC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5EDC(&qword_1F02A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_5FEC(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_5FF8(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v1 = *(_QWORD *)(a1 + 88);
  if (v1)
  {
    v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4)
    v7 = 4;
  v8 = v7 - 4;
  v9 = (unint64_t *)(a1 + 96);
  v2 = 192;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

_QWORD *sub_60A8(char *a1, _QWORD *a2, void *__src)
{
  char v4;
  _QWORD __dst[69];

  v4 = *a1;
  memcpy(__dst, __src, 0x221uLL);
  return sub_53D0(v4, a2, __dst);
}

_QWORD *sub_6100(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v2 = a1[3];
  v3 = a1[11];
  v4 = a1[12];
  v5 = a1[13];
  v6 = a1[14];
  v7 = a1[15];
  v8 = a1[16];
  v10 = a1[10];
  v11 = a1[67];
  swift_bridgeObjectRetain(a1[2]);
  swift_bridgeObjectRetain(v2);
  sub_61A8(v10, v3, v4, v5, v6, v7, v8);
  swift_bridgeObjectRetain(v11);
  return a1;
}

uint64_t sub_61A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  if (a7 >> 1 != 0xFFFFFFFF)
    return sub_61C4(a1, a2, a3, a4, a5, a6, a7);
  return a1;
}

uint64_t sub_61C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  if (a7 >> 62 != 3)
    a1 = a2;
  return swift_bridgeObjectRetain(a1);
}

_QWORD *sub_61D4(char *a1)
{
  uint64_t v1;
  const void *v2;
  _QWORD *v3;
  char v4;
  _QWORD __dst[69];

  v3 = *(_QWORD **)(v1 + 16);
  v2 = *(const void **)(v1 + 24);
  v4 = *a1;
  memcpy(__dst, v2, 0x221uLL);
  return sub_53D0(v4, v3, __dst);
}

_QWORD *sub_6228(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v2 = a1[2];
  v3 = a1[11];
  v4 = a1[12];
  v5 = a1[13];
  v6 = a1[14];
  v7 = a1[15];
  v8 = a1[16];
  v10 = a1[10];
  v11 = a1[67];
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(v2);
  sub_62CC(v10, v3, v4, v5, v6, v7, v8);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t sub_62CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  if (a7 >> 1 != 0xFFFFFFFF)
    return sub_62E8(a1, a2, a3, a4, a5, a6, a7);
  return a1;
}

uint64_t sub_62E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  if (a7 >> 62 != 3)
    a1 = a2;
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_62F8(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
  sub_632C(a1, &qword_1F02C0, (uint64_t)&unk_1DADC8);
}

void sub_632C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_6370()
{
  return sub_63B8(&qword_1F02C8, (uint64_t)&unk_1876EC);
}

uint64_t sub_6394()
{
  return sub_63B8(&qword_1F02D0, (uint64_t)&unk_1876C0);
}

uint64_t sub_63B8(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for URLResourceKey(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_63F8()
{
  return sub_63B8(&qword_1F02D8, (uint64_t)&unk_18775C);
}

uint64_t Transport.SeedBook.bookId.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Transport.SeedBook.bookId.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Transport.Recommend.Input.xAppleRequestUUID.modify())()
{
  return AuthorRecommendationSource.id.getter;
}

unint64_t Transport.BookAffinity.affinity.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 8) | ((unint64_t)*(unsigned __int8 *)(v0 + 12) << 32);
}

uint64_t Transport.BookAffinity.affinity.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = result;
  *(_BYTE *)(v1 + 12) = BYTE4(result) & 1;
  return result;
}

uint64_t (*Transport.SeedBook.affinity.modify())()
{
  return AuthorRecommendationSource.id.getter;
}

uint64_t Transport.RecommendationBlockRequest.profileGenreDenylist.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
}

uint64_t Transport.RecommendationBlockRequest.profileGenreDenylist.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 16));
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*Transport.Recommend.Input.xAppleUserExperimentIds.modify())()
{
  return AuthorRecommendationSource.id.getter;
}

uint64_t Transport.BookAffinity.init(bookId:affinity:inferredFromAffinityForBookIds:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_QWORD *)a4 = result;
  *(_DWORD *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 12) = BYTE4(a2) & 1;
  *(_QWORD *)(a4 + 16) = a3;
  return result;
}

uint64_t Transport.BookAffinity.CodingKeys.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D6280;
  return sub_16848(a1, v2, a2);
}

uint64_t Transport.BookAffinity.CodingKeys.init(stringValue:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v5;

  result = Transport.BookAffinity.CodingKeys.init(rawValue:)(*(Swift::String *)&a1, &v5);
  *a2 = v5;
  return result;
}

uint64_t Transport.Diagnosis.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t Transport.BookAffinity.CodingKeys.rawValue.getter()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x7974696E69666661;
  if (*v0 != 1)
    v1 = 0xD00000000000001ELL;
  if (*v0)
    return v1;
  else
    return 0x64496B6F6F62;
}

uint64_t sub_6580(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_78D1C(*a1, *a2);
}

Swift::Int sub_658C()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE800000000000000;
  v3 = 0x7974696E69666661;
  if (v1 != 1)
  {
    v3 = 0xD00000000000001ELL;
    v2 = 0x800000000019EAB0;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x64496B6F6F62;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE600000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_662C(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE800000000000000;
  v3 = 0x7974696E69666661;
  if (*v1 != 1)
  {
    v3 = 0xD00000000000001ELL;
    v2 = 0x800000000019EAB0;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x64496B6F6F62;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE600000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_66A8(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE800000000000000;
  v4 = 0x7974696E69666661;
  if (v2 != 1)
  {
    v4 = 0xD00000000000001ELL;
    v3 = 0x800000000019EAB0;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x64496B6F6F62;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE600000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

uint64_t sub_6744@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Transport.BookAffinity.CodingKeys.init(rawValue:)(*a1, a2);
}

void sub_6750(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE600000000000000;
  v4 = 0xE800000000000000;
  v5 = 0x7974696E69666661;
  if (v2 != 1)
  {
    v5 = 0xD00000000000001ELL;
    v4 = 0x800000000019EAB0;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x64496B6F6F62;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_67B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1D5EC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_67D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1D5EC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void Transport.BookAffinity.hash(into:)()
{
  uint64_t v0;
  Swift::UInt32 v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt64 *v5;
  Swift::UInt64 v6;
  Swift::UInt32 v7;

  v1 = *(_DWORD *)(v0 + 8);
  v2 = *(unsigned __int8 *)(v0 + 12);
  v3 = *(_QWORD *)(v0 + 16);
  Hasher._combine(_:)(*(_QWORD *)v0);
  if (v2 != 1)
  {
    Hasher._combine(_:)(1u);
    if ((v1 & 0x7FFFFFFF) != 0)
      v7 = v1;
    else
      v7 = 0;
    Hasher._combine(_:)(v7);
    if (v3)
      goto LABEL_3;
LABEL_11:
    Hasher._combine(_:)(0);
    return;
  }
  Hasher._combine(_:)(0);
  if (!v3)
    goto LABEL_11;
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (Swift::UInt64 *)(v3 + 32);
    do
    {
      v6 = *v5++;
      Hasher._combine(_:)(v6);
      --v4;
    }
    while (v4);
  }
}

uint64_t Transport.BookAffinity.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  char v22;
  char v23;
  char v24;

  v4 = sub_5EDC(&qword_1F02F0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v18 = *((unsigned int *)v1 + 2);
  v20 = *((unsigned __int8 *)v1 + 12);
  v17 = v1[2];
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_1D5EC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Transport.BookAffinity.CodingKeys, &type metadata for Transport.BookAffinity.CodingKeys, v11, v9, v10);
  v24 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v8, &v24, v4);
  if (!v2)
  {
    v12 = v17;
    v23 = 1;
    v21 = v20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18 | ((unint64_t)v20 << 32), &v23, v4);
    v19 = v12;
    v22 = 2;
    v13 = sub_5EDC(&qword_1F0300);
    v14 = sub_1F298(&qword_1F0308, &qword_1F0300, (uint64_t)&protocol witness table for Int64, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v19, &v22, v4, v13, v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int Transport.BookAffinity.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt32 v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt64 *v6;
  Swift::UInt64 v7;
  Swift::UInt32 v8;
  _QWORD v10[9];

  v1 = *(_QWORD *)v0;
  v2 = *(_DWORD *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 12);
  v4 = *(_QWORD *)(v0 + 16);
  Hasher.init(_seed:)(v10, 0);
  Hasher._combine(_:)(v1);
  if (v3 != 1)
  {
    Hasher._combine(_:)(1u);
    if ((v2 & 0x7FFFFFFF) != 0)
      v8 = v2;
    else
      v8 = 0;
    Hasher._combine(_:)(v8);
    if (v4)
      goto LABEL_3;
LABEL_11:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  if (!v4)
    goto LABEL_11;
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v4 + 16));
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (Swift::UInt64 *)(v4 + 32);
    do
    {
      v7 = *v6++;
      Hasher._combine(_:)(v7);
      --v5;
    }
    while (v5);
  }
  return Hasher._finalize()();
}

uint64_t Transport.BookAffinity.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;

  v5 = sub_5EDC(&qword_1F0310);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_1D5EC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Transport.BookAffinity.CodingKeys, &type metadata for Transport.BookAffinity.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_62F8(a1);
    v18 = 0;
  }
  else
  {
    v23 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v23, v5);
    v22 = 1;
    v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v22, v5);
    v14 = sub_5EDC(&qword_1F0300);
    v21 = 2;
    v15 = sub_1F298(&qword_1F0318, &qword_1F0300, (uint64_t)&protocol witness table for Int64, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v20, v14, &v21, v5, v14, v15);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v16 = v20;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRelease(0);
    *(_QWORD *)a2 = v12;
    v17 = BYTE4(v19);
    *(_DWORD *)(a2 + 8) = v19;
    *(_BYTE *)(a2 + 12) = v17 & 1;
    *(_QWORD *)(a2 + 16) = v16;
    sub_62F8(a1);
    v18 = v16;
  }
  return swift_bridgeObjectRelease(v18);
}

uint64_t sub_6D1C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Transport.BookAffinity.init(from:)(a1, a2);
}

uint64_t sub_6D30(_QWORD *a1)
{
  return Transport.BookAffinity.encode(to:)(a1);
}

void sub_6D48()
{
  uint64_t v0;
  Swift::UInt32 v1;
  int v2;
  uint64_t v3;
  Swift::UInt v4;
  Swift::UInt64 *v5;
  Swift::UInt64 v6;
  Swift::UInt32 v7;

  v1 = *(_DWORD *)(v0 + 8);
  v2 = *(unsigned __int8 *)(v0 + 12);
  v3 = *(_QWORD *)(v0 + 16);
  Hasher._combine(_:)(*(_QWORD *)v0);
  if (v2 != 1)
  {
    Hasher._combine(_:)(1u);
    if ((v1 & 0x7FFFFFFF) != 0)
      v7 = v1;
    else
      v7 = 0;
    Hasher._combine(_:)(v7);
    if (v3)
      goto LABEL_3;
LABEL_11:
    Hasher._combine(_:)(0);
    return;
  }
  Hasher._combine(_:)(0);
  if (!v3)
    goto LABEL_11;
LABEL_3:
  Hasher._combine(_:)(1u);
  v4 = *(_QWORD *)(v3 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v5 = (Swift::UInt64 *)(v3 + 32);
    do
    {
      v6 = *v5++;
      Hasher._combine(_:)(v6);
      --v4;
    }
    while (v4);
  }
}

Swift::Int sub_6DE8(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt64 v2;
  Swift::UInt32 v3;
  int v4;
  uint64_t v5;
  Swift::UInt v6;
  Swift::UInt64 *v7;
  Swift::UInt64 v8;
  Swift::UInt32 v9;
  _QWORD v11[9];

  v2 = *(_QWORD *)v1;
  v3 = *(_DWORD *)(v1 + 8);
  v4 = *(unsigned __int8 *)(v1 + 12);
  v5 = *(_QWORD *)(v1 + 16);
  Hasher.init(_seed:)(v11, a1);
  Hasher._combine(_:)(v2);
  if (v4 != 1)
  {
    Hasher._combine(_:)(1u);
    if ((v3 & 0x7FFFFFFF) != 0)
      v9 = v3;
    else
      v9 = 0;
    Hasher._combine(_:)(v9);
    if (v5)
      goto LABEL_3;
LABEL_11:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  if (!v5)
    goto LABEL_11;
LABEL_3:
  Hasher._combine(_:)(1u);
  v6 = *(_QWORD *)(v5 + 16);
  Hasher._combine(_:)(v6);
  if (v6)
  {
    v7 = (Swift::UInt64 *)(v5 + 32);
    do
    {
      v8 = *v7++;
      Hasher._combine(_:)(v8);
      --v6;
    }
    while (v6);
  }
  return Hasher._finalize()();
}

uint64_t Transport.UserProfileV2.explicitAllowed.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t Transport.UserProfile.explicitAllowed.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t Transport.StoreAssetRequestDetails.profileGenreDenylist.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 8));
}

uint64_t Transport.StoreAssetRequestDetails.profileGenreDenylist.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 8));
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t Transport.UserProfileV2.init(explicitAllowed:seedBooks:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_BYTE *)a3 = result;
  *(_QWORD *)(a3 + 8) = a2;
  return result;
}

uint64_t Transport.UserProfile.CodingKeys.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D62E8;
  return sub_12620(a1, v2, a2);
}

uint64_t Transport.UserProfile.CodingKeys.init(stringValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D6338;
  return sub_12688(a1, v2, a2);
}

uint64_t Transport.UserProfile.CodingKeys.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x696666416B6F6F62;
  else
    return 0x746963696C707865;
}

uint64_t sub_6F78(char *a1, char *a2)
{
  return sub_78E2C(*a1, *a2);
}

Swift::Int sub_6F84()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x696666416B6F6F62;
  else
    v2 = 0x746963696C707865;
  if (v1)
    v3 = 0xEE0073656974696ELL;
  else
    v3 = 0xEF6465776F6C6C41;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_701C(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x696666416B6F6F62;
  else
    v2 = 0x746963696C707865;
  if (*v1)
    v3 = 0xEE0073656974696ELL;
  else
    v3 = 0xEF6465776F6C6C41;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_7090(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x696666416B6F6F62;
  else
    v3 = 0x746963696C707865;
  if (v2)
    v4 = 0xEE0073656974696ELL;
  else
    v4 = 0xEF6465776F6C6C41;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_7124@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Transport.UserProfile.CodingKeys.init(rawValue:)(*a1, a2);
}

void sub_7130(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x746963696C707865;
  if (*v1)
    v2 = 0x696666416B6F6F62;
  v3 = 0xEF6465776F6C6C41;
  if (*v1)
    v3 = 0xEE0073656974696ELL;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_718C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1D630();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_71B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1D630();
  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL static Transport.UserProfile.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (*a1 != *a2)
    return 0;
  v3 = *((_QWORD *)a1 + 1);
  v4 = *((_QWORD *)a2 + 1);
  if (v3)
    return v4 && (sub_9754(v3, v4) & 1) != 0;
  return !v4;
}

void Transport.UserProfile.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 8);
  Hasher._combine(_:)(*(_BYTE *)v2);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    sub_1BEE0(a1, v4);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t Transport.UserProfile.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v4 = sub_5EDC(&qword_1F0320);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v15 = *((_QWORD *)v1 + 1);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_1D630();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Transport.UserProfile.CodingKeys, &type metadata for Transport.UserProfile.CodingKeys, v11, v9, v10);
  v18 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v8, &v18, v4);
  if (!v2)
  {
    v16 = v15;
    v17 = 1;
    v12 = sub_5EDC(&qword_1F0330);
    v13 = sub_201AC(&qword_1F0338, &qword_1F0330, (void (*)(void))sub_1D674, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v16, &v17, v4, v12, v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int Transport.UserProfile.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt8 v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *(_BYTE *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)(v4, 0);
  Hasher._combine(_:)(v1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    sub_1BEE0((uint64_t)v4, v2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t Transport.UserProfile.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;

  v5 = sub_5EDC(&qword_1F0348);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_1D630();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Transport.UserProfile.CodingKeys, &type metadata for Transport.UserProfile.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_62F8(a1);
    v17 = 0;
  }
  else
  {
    v21 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v21, v5);
    v13 = sub_5EDC(&qword_1F0330);
    v20 = 1;
    v14 = sub_201AC(&qword_1F0350, &qword_1F0330, (void (*)(void))sub_1D6B8, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v19, v13, &v20, v5, v13, v14);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v16 = v19;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRelease(0);
    *(_BYTE *)a2 = v12 & 1;
    *(_QWORD *)(a2 + 8) = v16;
    sub_62F8(a1);
    v17 = v16;
  }
  return swift_bridgeObjectRelease(v17);
}

uint64_t sub_761C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Transport.UserProfile.init(from:)(a1, a2);
}

uint64_t sub_7630(_QWORD *a1)
{
  return Transport.UserProfile.encode(to:)(a1);
}

Swift::Int sub_7644(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt8 v2;
  uint64_t v3;
  _QWORD v5[9];

  v2 = *(_BYTE *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  Hasher.init(_seed:)(v5, a1);
  Hasher._combine(_:)(v2);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    sub_1BEE0((uint64_t)v5, v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t Transport.MediaType.init(_:)(uint64_t a1, unint64_t a2)
{
  return sub_1F6E8(a1, a2);
}

uint64_t Transport.MediaType.rawValue.getter(uint64_t a1, uint64_t a2)
{
  return sub_135D0(a1, a2, (void (*)(void))sub_26B38);
}

_UNKNOWN **static Transport.RecommendationBlockRequest.MediaTypePayload.allCases.getter()
{
  return &off_1D6388;
}

uint64_t sub_76E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_1F6E8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_7710@<X0>(uint64_t *a1@<X8>)
{
  return sub_13640((uint64_t (*)(void))sub_26B38, a1);
}

uint64_t sub_771C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_26A04();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_7778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_26A04();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_77C4(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_13734(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))sub_26B38);
}

Swift::Int sub_77D0(uint64_t a1, uint64_t a2)
{
  return sub_13838(a1, a2, (void (*)(uint64_t, unint64_t))sub_26B38);
}

uint64_t sub_77DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_138E8(a1, a2, a3, (void (*)(void))sub_26B38);
}

Swift::Int sub_77E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_13968(a1, a2, a3, (void (*)(uint64_t, unint64_t))sub_26B38);
}

uint64_t sub_77F4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = sub_1F6E8(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

void sub_7818(_QWORD *a1@<X8>)
{
  *a1 = &off_1D63C8;
}

uint64_t sub_7828(uint64_t a1, uint64_t a2)
{
  return sub_13A24(a1, a2, (void (*)(void))sub_26B38);
}

uint64_t Transport.RecommendationBlockRequest.SaleTypePayload.init(rawValue:)(uint64_t a1, unint64_t a2)
{
  return sub_1F7DC(a1, a2);
}

uint64_t Transport.RecommendationBlockRequest.SaleTypePayload.rawValue.getter(uint64_t a1, uint64_t a2)
{
  return sub_13A98(a1, a2, (void (*)(void))sub_26B3C);
}

_UNKNOWN **static Transport.RecommendationBlockRequest.SaleTypePayload.allCases.getter()
{
  return &off_1D6408;
}

uint64_t sub_7860@<X0>(uint64_t *a1@<X8>)
{
  return sub_13B48((uint64_t (*)(void))sub_26B3C, a1);
}

uint64_t sub_786C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_269C0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_78C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_269C0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_7914(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_13C50(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))sub_26B3C);
}

Swift::Int sub_7920(uint64_t a1, uint64_t a2)
{
  return sub_13D74(a1, a2, (void (*)(uint64_t, unint64_t))sub_26B3C);
}

uint64_t sub_792C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_13E38(a1, a2, a3, (void (*)(void))sub_26B3C);
}

Swift::Int sub_7938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_13ECC(a1, a2, a3, (void (*)(uint64_t, unint64_t))sub_26B3C);
}

void sub_7944(_QWORD *a1@<X8>)
{
  *a1 = &off_1D6458;
}

uint64_t sub_7954(uint64_t a1, uint64_t a2)
{
  return sub_13FC0(a1, a2, (void (*)(void))sub_26B3C);
}

uint64_t Transport.RecommendationBlockRequest.mediaType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_1E9F8(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t Transport.RecommendationBlockRequest.mediaType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1EA08(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  *(_QWORD *)v2 = a1;
  *(_QWORD *)(v2 + 8) = a2;
  return result;
}

uint64_t Transport.RecommendationBlockRequest.saleType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  sub_1F918(v1, *(_QWORD *)(v0 + 32));
  return v1;
}

uint64_t Transport.RecommendationBlockRequest.saleType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1F928(*(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*Transport.RecommendationBlockRequest.saleType.modify())()
{
  return AuthorRecommendationSource.id.getter;
}

unint64_t Transport.RecommendationBlockRequest.recommendationCount.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 40) | ((unint64_t)*(unsigned __int8 *)(v0 + 44) << 32);
}

uint64_t Transport.RecommendationBlockRequest.recommendationCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 40) = result;
  *(_BYTE *)(v1 + 44) = BYTE4(result) & 1;
  return result;
}

uint64_t (*Transport.RecommendationBlockRequest.recommendationCount.modify())()
{
  return AuthorRecommendationSource.id.getter;
}

uint64_t Transport.RecommendationBlockRequest.targetBookIds.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48));
}

uint64_t Transport.RecommendationBlockRequest.targetBookIds.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 48));
  *(_QWORD *)(v1 + 48) = a1;
  return result;
}

uint64_t (*Transport.Diagnosis.message.modify())()
{
  return AuthorRecommendationSource.id.getter;
}

uint64_t Transport.RecommendationBlockRequest.init(mediaType:profileGenreDenylist:saleType:recommendationCount:targetBookIds:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(_QWORD *)a8 = result;
  *(_QWORD *)(a8 + 8) = a2;
  *(_QWORD *)(a8 + 16) = a3;
  *(_QWORD *)(a8 + 24) = a4;
  *(_QWORD *)(a8 + 32) = a5;
  *(_DWORD *)(a8 + 40) = a6;
  *(_BYTE *)(a8 + 44) = BYTE4(a6) & 1;
  *(_QWORD *)(a8 + 48) = a7;
  return result;
}

uint64_t Transport.RecommendationBlockRequest.CodingKeys.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  unint64_t v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1D64A8, v3);
  result = swift_bridgeObjectRelease(object);
  v7 = 5;
  if (v5 < 5)
    v7 = v5;
  *a2 = v7;
  return result;
}

uint64_t Transport.RecommendationBlockRequest.CodingKeys.init(stringValue:)@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v4;

  result = Transport.RecommendationBlockRequest.CodingKeys.init(rawValue:)(a1, &v4);
  *a2 = v4;
  return result;
}

void Transport.RecommendationBlockRequest.CodingKeys.init(intValue:)(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t Transport.RecommendationBlockRequest.CodingKeys.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_7BA4 + 4 * byte_187820[*v0]))(0x707954616964656DLL, 0xE900000000000065);
}

unint64_t sub_7BA4()
{
  return 0xD000000000000014;
}

uint64_t sub_7BC4()
{
  return 0x65707954656C6173;
}

unint64_t sub_7BDC()
{
  return 0xD000000000000013;
}

uint64_t sub_7BF8()
{
  return 0x6F42746567726174;
}

uint64_t Transport.RecommendationBlockRequest.CodingKeys.stringValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_7C50 + 4 * byte_187825[*v0]))(0x707954616964656DLL, 0xE900000000000065);
}

unint64_t sub_7C50()
{
  return 0xD000000000000014;
}

uint64_t sub_7C70()
{
  return 0x65707954656C6173;
}

unint64_t sub_7C88()
{
  return 0xD000000000000013;
}

uint64_t sub_7CA4()
{
  return 0x6F42746567726174;
}

void sub_7CC8(char *a1)
{
  sub_77CBC(*a1);
}

void sub_7CD4()
{
  char *v0;

  sub_5239C(*v0);
}

void sub_7CDC(uint64_t a1)
{
  char *v1;

  sub_F85D8(a1, *v1);
}

void sub_7CE4(uint64_t a1)
{
  char *v1;

  sub_151EF4(a1, *v1);
}

uint64_t sub_7CEC@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Transport.RecommendationBlockRequest.CodingKeys.init(rawValue:)(*a1, a2);
}

uint64_t sub_7CF8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = Transport.RecommendationBlockRequest.CodingKeys.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_7D20(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1EA18();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_7D48(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1EA18();
  return CodingKey.debugDescription.getter(a1, v2);
}

void Transport.RecommendationBlockRequest.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  Swift::UInt32 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  Swift::UInt64 *v20;
  Swift::UInt64 v21;
  uint64_t v22;
  Swift::UInt64 *v23;
  Swift::UInt64 v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v2 = v1;
  v5 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(_QWORD *)(v2 + 32);
  v8 = *(_DWORD *)(v2 + 40);
  v9 = *(_BYTE *)(v2 + 44);
  v10 = *(_QWORD *)(v2 + 48);
  if (v5 == 2)
  {
    Hasher._combine(_:)(0);
    if (!v4)
    {
LABEL_3:
      Hasher._combine(_:)(0);
      goto LABEL_16;
    }
  }
  else
  {
    v11 = *(_QWORD *)v2;
    Hasher._combine(_:)(1u);
    v12 = 0xE90000000000004BLL;
    v13 = 0x4F4F424F49445541;
    if (v5 != 1)
    {
      v13 = v11;
      v12 = v5;
    }
    if (v5)
      v14 = v13;
    else
      v14 = 0x4B4F4F4245;
    v31 = v6;
    v15 = v10;
    v16 = v9;
    if (v5)
      v17 = v12;
    else
      v17 = 0xE500000000000000;
    sub_1F6D4(v11, v5);
    sub_1F6D4(v11, v5);
    sub_1F6D4(v11, v5);
    String.hash(into:)(a1, v14, v17);
    v18 = v17;
    v9 = v16;
    v10 = v15;
    v6 = v31;
    swift_bridgeObjectRelease(v18);
    sub_1EA08(v11, v5);
    sub_1EA08(v11, v5);
    if (!v4)
      goto LABEL_3;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v4 + 16));
  v19 = *(_QWORD *)(v4 + 16);
  if (v19)
  {
    v20 = (Swift::UInt64 *)(v4 + 32);
    do
    {
      v21 = *v20++;
      Hasher._combine(_:)(v21);
      --v19;
    }
    while (v19);
  }
LABEL_16:
  if (v7 == 3)
  {
    Hasher._combine(_:)(0);
    if ((v9 & 1) != 0)
      goto LABEL_18;
  }
  else
  {
    Hasher._combine(_:)(1u);
    v25 = 0xE400000000000000;
    v26 = 1145651536;
    v27 = 0xE300000000000000;
    v28 = 5852737;
    if (v7 != 2)
    {
      v28 = v6;
      v27 = v7;
    }
    if (v7 != 1)
    {
      v26 = v28;
      v25 = v27;
    }
    if (v7)
      v29 = v26;
    else
      v29 = 1162170950;
    if (v7)
      v30 = v25;
    else
      v30 = 0xE400000000000000;
    sub_1F904(v6, v7);
    sub_1F904(v6, v7);
    sub_1F904(v6, v7);
    String.hash(into:)(a1, v29, v30);
    swift_bridgeObjectRelease(v30);
    sub_1F928(v6, v7);
    sub_1F928(v6, v7);
    if ((v9 & 1) != 0)
    {
LABEL_18:
      Hasher._combine(_:)(0);
      if (v10)
        goto LABEL_19;
LABEL_35:
      Hasher._combine(_:)(0);
      return;
    }
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v8);
  if (!v10)
    goto LABEL_35;
LABEL_19:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v10 + 16));
  v22 = *(_QWORD *)(v10 + 16);
  if (v22)
  {
    v23 = (Swift::UInt64 *)(v10 + 32);
    do
    {
      v24 = *v23++;
      Hasher._combine(_:)(v24);
      --v22;
    }
    while (v22);
  }
}

uint64_t Transport.RecommendationBlockRequest.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _BYTE v31[4];

  v3 = sub_5EDC(&qword_1F0360);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = v1[2];
  v25 = v1[3];
  v26 = v9;
  v10 = v1[4];
  v23 = *((unsigned int *)v1 + 10);
  v24 = v10;
  v30 = *((unsigned __int8 *)v1 + 44);
  v22 = v1[6];
  v11 = a1[3];
  v12 = a1[4];
  sub_49F4(a1, v11);
  v13 = sub_1EA18();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Transport.RecommendationBlockRequest.CodingKeys, &type metadata for Transport.RecommendationBlockRequest.CodingKeys, v13, v11, v12);
  v28 = v7;
  v29 = v8;
  v31[0] = 0;
  v14 = sub_1EA5C();
  v15 = v27;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v28, v31, v3, &type metadata for Transport.RecommendationBlockRequest.MediaTypePayload, v14);
  if (!v15)
  {
    v16 = v24;
    v17 = v25;
    v28 = v26;
    v31[0] = 1;
    v18 = sub_5EDC(&qword_1F0300);
    v19 = sub_1F298(&qword_1F0308, &qword_1F0300, (uint64_t)&protocol witness table for Int64, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v28, v31, v3, v18, v19);
    v28 = v17;
    v29 = v16;
    v31[0] = 2;
    v20 = sub_1EAA0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v28, v31, v3, &type metadata for Transport.RecommendationBlockRequest.SaleTypePayload, v20);
    LOBYTE(v28) = 3;
    v31[0] = v30;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23 | ((unint64_t)v30 << 32), &v28, v3);
    v28 = v22;
    v31[0] = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v28, v31, v3, v18, v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Transport.RecommendationBlockRequest.hashValue.getter()
{
  __int128 *v0;
  uint64_t v1;
  int v2;
  char v3;
  uint64_t v4;
  __int128 v5;
  _QWORD v7[9];
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;

  v1 = *((_QWORD *)v0 + 4);
  v2 = *((_DWORD *)v0 + 10);
  v3 = *((_BYTE *)v0 + 44);
  v4 = *((_QWORD *)v0 + 6);
  v5 = v0[1];
  v8 = *v0;
  v9 = v5;
  v10 = v1;
  v11 = v2;
  v12 = v3;
  v13 = v4;
  Hasher.init(_seed:)(v7, 0);
  Transport.RecommendationBlockRequest.hash(into:)((uint64_t)v7);
  return Hasher._finalize()();
}

uint64_t Transport.RecommendationBlockRequest.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;

  v5 = sub_5EDC(&qword_1F0380);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_1EA18();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Transport.RecommendationBlockRequest.CodingKeys, &type metadata for Transport.RecommendationBlockRequest.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_62F8(a1);
    sub_1EA08(0, 2uLL);
    swift_bridgeObjectRelease(0);
    sub_1F928(0, 3uLL);
    v29 = 0;
  }
  else
  {
    v38 = 0;
    v12 = sub_1EAE4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v36, &type metadata for Transport.RecommendationBlockRequest.MediaTypePayload, &v38, v5, &type metadata for Transport.RecommendationBlockRequest.MediaTypePayload, v12);
    v15 = v36;
    v14 = v37;
    v16 = sub_5EDC(&qword_1F0300);
    v38 = 1;
    v34 = v14;
    v35 = v15;
    v17 = v14;
    v18 = v16;
    sub_1E9F8(v15, v17);
    v19 = sub_1F298(&qword_1F0318, &qword_1F0300, (uint64_t)&protocol witness table for Int64, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v36, v18, &v38, v5, v18, v19);
    v33 = v19;
    v20 = v36;
    v38 = 2;
    v21 = sub_1EB28();
    swift_bridgeObjectRetain(v20);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v36, &type metadata for Transport.RecommendationBlockRequest.SaleTypePayload, &v38, v5, &type metadata for Transport.RecommendationBlockRequest.SaleTypePayload, v21);
    v31 = a2;
    v32 = v18;
    v22 = v36;
    v23 = v37;
    LOBYTE(v36) = 3;
    sub_1F918(v22, v37);
    v30 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v36, v5);
    v38 = 4;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v36, v32, &v38, v5, v32, v33);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v24 = v36;
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRelease(0);
    v26 = v34;
    v25 = v35;
    sub_1E9F8(v35, v34);
    swift_bridgeObjectRetain(v20);
    sub_1F918(v22, v23);
    sub_1F928(v22, v23);
    swift_bridgeObjectRelease(v20);
    sub_1EA08(v25, v26);
    v27 = v30;
    v28 = v31;
    *v31 = v25;
    v28[1] = v26;
    v28[2] = v20;
    v28[3] = v22;
    v28[4] = v23;
    *((_DWORD *)v28 + 10) = v27;
    *((_BYTE *)v28 + 44) = BYTE4(v27) & 1;
    v28[6] = v24;
    sub_62F8(a1);
    sub_1EA08(v25, v26);
    swift_bridgeObjectRelease(v20);
    sub_1F928(v22, v23);
    v29 = v24;
  }
  return swift_bridgeObjectRelease(v29);
}

uint64_t sub_8690@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Transport.RecommendationBlockRequest.init(from:)(a1, a2);
}

uint64_t sub_86A4(_QWORD *a1)
{
  return Transport.RecommendationBlockRequest.encode(to:)(a1);
}

Swift::Int sub_86BC(uint64_t a1)
{
  __int128 *v1;
  uint64_t v2;
  int v3;
  char v4;
  uint64_t v5;
  __int128 v6;
  _QWORD v8[9];
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;

  v2 = *((_QWORD *)v1 + 4);
  v3 = *((_DWORD *)v1 + 10);
  v4 = *((_BYTE *)v1 + 44);
  v5 = *((_QWORD *)v1 + 6);
  v6 = v1[1];
  v9 = *v1;
  v10 = v6;
  v11 = v2;
  v12 = v3;
  v13 = v4;
  v14 = v5;
  Hasher.init(_seed:)(v8, a1);
  Transport.RecommendationBlockRequest.hash(into:)((uint64_t)v8);
  return Hasher._finalize()();
}

uint64_t Transport.RecommendationBlockResponse.CodingKeys.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D6540;
  return sub_18970(a1, v2, a2);
}

uint64_t Transport.RecommendationBlockResponse.CodingKeys.init(stringValue:)@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D6578;
  return sub_18970(a1, v2, a2);
}

unint64_t Transport.RecommendationBlockResponse.CodingKeys.rawValue.getter()
{
  return 0xD000000000000017;
}

uint64_t sub_8754()
{
  return 1;
}

Swift::Int sub_875C(uint64_t a1, uint64_t a2)
{
  return sub_18A04(a1, a2, 0xD000000000000017, 0x800000000019EB50);
}

uint64_t sub_8778(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD000000000000017, 0x800000000019EB50);
}

Swift::Int sub_8794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18A88(a1, a2, a3, 0xD000000000000017, 0x800000000019EB50);
}

uint64_t sub_87B0@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D65B0;
  return sub_18ADC(v2, a1, a2);
}

void sub_87BC(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000017;
  a1[1] = 0x800000000019EB50;
}

uint64_t sub_87DC@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D65E8;
  return sub_18B54(a1, v2, a2);
}

uint64_t sub_87E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1EB6C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_8810(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1EB6C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t static Transport.RecommendationBlockResponse.== infix(_:_:)(_QWORD *a1, uint64_t *a2)
{
  return sub_18C00(a1, a2, (uint64_t (*)(void))sub_9754);
}

void Transport.RecommendationBlockResponse.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  if (*v1)
  {
    Hasher._combine(_:)(1u);
    sub_1BEE0(a1, v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t Transport.RecommendationBlockResponse.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v3 = sub_5EDC(&qword_1F0398);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_49F4(a1, v8);
  v10 = sub_1EB6C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Transport.RecommendationBlockResponse.CodingKeys, &type metadata for Transport.RecommendationBlockResponse.CodingKeys, v10, v8, v9);
  v16 = v7;
  v11 = sub_5EDC(&qword_1F0330);
  v12 = sub_201AC(&qword_1F0338, &qword_1F0330, (void (*)(void))sub_1D674, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v16, v13, v3, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Transport.RecommendationBlockResponse.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    sub_1BEE0((uint64_t)v3, v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t Transport.RecommendationBlockResponse.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v5 = sub_5EDC(&qword_1F03A8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_1EB6C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Transport.RecommendationBlockResponse.CodingKeys, &type metadata for Transport.RecommendationBlockResponse.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_5EDC(&qword_1F0330);
    v13 = sub_201AC(&qword_1F0350, &qword_1F0330, (void (*)(void))sub_1D6B8, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v17, v12, v14, v5, v12, v13);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v17;
  }
  return sub_62F8(a1);
}

uint64_t sub_8B70@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return Transport.RecommendationBlockResponse.init(from:)(a1, a2);
}

uint64_t sub_8B84(_QWORD *a1)
{
  return Transport.RecommendationBlockResponse.encode(to:)(a1);
}

uint64_t sub_8B98(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_18FE4(a1, a2, a3, a4, (uint64_t (*)(void))sub_9754);
}

Swift::Int sub_8BA4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    sub_1BEE0((uint64_t)v4, v2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t Transport.Recommend.Input.xAppleRequestUUID.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t Transport.Recommend.Input.xAppleRequestUUID.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(v2[1]);
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t Transport.RecommendationRequest.userProfile.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *(_BYTE *)a1 = *(_BYTE *)(v1 + 16);
  *(_QWORD *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t Transport.RecommendationRequest.userProfile.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *((_QWORD *)a1 + 1);
  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 24));
  *(_BYTE *)(v1 + 16) = v2;
  *(_QWORD *)(v1 + 24) = v3;
  return result;
}

uint64_t Transport.RecommendationResponseV2.bookIdToMediaTypeEntries.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 32));
}

uint64_t Transport.RecommendationResponseV2.bookIdToMediaTypeEntries.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 32));
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t (*Transport.Recommend.Input.body.modify())()
{
  return AuthorRecommendationSource.id.getter;
}

uint64_t Transport.RecommendationResponseV2.bookAuthors.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
}

uint64_t Transport.RecommendationResponseV2.bookAuthors.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 40));
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t Transport.RecommendationRequest.init(storeFrontId:userProfile:recommendationBlockRequests:treatmentIds:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v6;
  uint64_t v7;

  v6 = *a3;
  v7 = *((_QWORD *)a3 + 1);
  *(_QWORD *)a6 = result;
  *(_QWORD *)(a6 + 8) = a2;
  *(_BYTE *)(a6 + 16) = v6;
  *(_QWORD *)(a6 + 24) = v7;
  *(_QWORD *)(a6 + 32) = a4;
  *(_QWORD *)(a6 + 40) = a5;
  return result;
}

uint64_t Transport.RecommendationRequest.CodingKeys.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D6620;
  return sub_1AD04(a1, v2, a2);
}

uint64_t Transport.RecommendationRequest.CodingKeys.init(stringValue:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v5;

  result = Transport.RecommendationRequest.CodingKeys.init(rawValue:)(*(Swift::String *)&a1, &v5);
  *a2 = v5;
  return result;
}

uint64_t Transport.RecommendationRequest.CodingKeys.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_8DB0 + 4 * byte_18782A[*v0]))(0x6F724665726F7473, 0xEC0000006449746ELL);
}

uint64_t sub_8DB0()
{
  return 0x666F725072657375;
}

unint64_t sub_8DD0()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_8DEC()
{
  return 0x6E656D7461657274;
}

uint64_t Transport.RecommendationRequest.CodingKeys.stringValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_8E44 + 4 * byte_18782E[*v0]))(0x6F724665726F7473, 0xEC0000006449746ELL);
}

uint64_t sub_8E44()
{
  return 0x666F725072657375;
}

unint64_t sub_8E64()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_8E80()
{
  return 0x6E656D7461657274;
}

void sub_8EA0(char *a1)
{
  sub_78654(*a1);
}

void sub_8EAC()
{
  char *v0;

  sub_52490(*v0);
}

void sub_8EB4()
{
  __asm { BR              X10 }
}

uint64_t sub_8EF8(uint64_t a1)
{
  String.hash(into:)(a1, 0x666F725072657375, 0xEB00000000656C69);
  return swift_bridgeObjectRelease(0xEB00000000656C69);
}

void sub_8F68(uint64_t a1)
{
  char *v1;

  sub_152234(a1, *v1);
}

uint64_t sub_8F70@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Transport.RecommendationRequest.CodingKeys.init(rawValue:)(*a1, a2);
}

uint64_t sub_8F7C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_8FB4 + 4 * byte_187836[*v0]))();
}

void sub_8FB4(_QWORD *a1@<X8>)
{
  *a1 = 0x666F725072657375;
  a1[1] = 0xEB00000000656C69;
}

void sub_8FD8(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001BLL;
  a1[1] = 0x800000000019EB90;
}

void sub_8FF8(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "treatmentIds");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t sub_901C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_9054 + 4 * byte_18783A[*v0]))(0x6F724665726F7473, 0xEC0000006449746ELL);
}

uint64_t sub_9054()
{
  return 0x666F725072657375;
}

unint64_t sub_9074()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_9090()
{
  return 0x6E656D7461657274;
}

uint64_t sub_90B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1EBB0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_90D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1EBB0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_9104(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = 0;
  v4 = a1 + 32;
  v5 = a2 + 32;
  do
  {
    v7 = v4 + (v3 << 6);
    v8 = *(_QWORD *)(v7 + 16);
    v9 = *(_QWORD *)(v7 + 56);
    v10 = v5 + (v3 << 6);
    v11 = *(_QWORD *)(v10 + 16);
    v12 = *(_QWORD *)(v10 + 56);
    if ((*(_BYTE *)(v7 + 8) & 1) != 0)
    {
      if (v8 == v11)
        v13 = *(_BYTE *)(v10 + 8);
      else
        v13 = 0;
      if ((v13 & 1) == 0)
        return 0;
    }
    else
    {
      if ((*(_BYTE *)(v10 + 8) & 1) != 0)
        return 0;
      result = 0;
      if (*(_QWORD *)v7 != *(_QWORD *)v10 || v8 != v11)
        return result;
    }
    if ((*(_BYTE *)(v7 + 32) & 1) != 0)
    {
      if (!*(_BYTE *)(v10 + 32))
        return 0;
    }
    else
    {
      if (*(_QWORD *)(v7 + 24) == *(_QWORD *)(v10 + 24))
        v14 = *(_BYTE *)(v10 + 32);
      else
        v14 = 1;
      if ((v14 & 1) != 0)
        return 0;
    }
    if ((*(_BYTE *)(v7 + 40) & 1) != 0)
    {
      if (!*(_BYTE *)(v10 + 40))
        return 0;
    }
    else
    {
      if (*(float *)(v7 + 36) == *(float *)(v10 + 36))
        v15 = *(_BYTE *)(v10 + 40);
      else
        v15 = 1;
      if ((v15 & 1) != 0)
        return 0;
    }
    if ((*(_BYTE *)(v7 + 48) & 1) != 0)
    {
      if (!*(_BYTE *)(v10 + 48))
        return 0;
    }
    else
    {
      if (*(float *)(v7 + 44) == *(float *)(v10 + 44))
        v16 = *(_BYTE *)(v10 + 48);
      else
        v16 = 1;
      if ((v16 & 1) != 0)
        return 0;
    }
    v17 = *(_QWORD *)(v9 + 16);
    if (v17 != *(_QWORD *)(v12 + 16))
      return 0;
    if (v17 && v9 != v12)
    {
      v41 = v5;
      v42 = v4;
      v43 = v3;
      v44 = v2;
      v18 = v9 + 32;
      v19 = v12 + 32;
      v49 = *(_QWORD *)(v7 + 56);
      swift_bridgeObjectRetain(v9);
      v50 = v12;
      swift_bridgeObjectRetain(v12);
      v20 = 0;
      v46 = v9 + 32;
      v47 = v17;
      v45 = v12 + 32;
      while (1)
      {
        v21 = v18 + 24 * v20;
        v22 = *(_QWORD *)(v21 + 16);
        v23 = v19 + 24 * v20;
        v24 = *(_QWORD *)(v23 + 16);
        if ((*(_BYTE *)(v21 + 8) & 1) != 0)
        {
          if ((*(_BYTE *)(v23 + 8) & 1) == 0)
            goto LABEL_86;
        }
        else if ((*(_BYTE *)(v23 + 8) & 1) != 0 || *(_QWORD *)v21 != *(_QWORD *)v23)
        {
LABEL_86:
          swift_bridgeObjectRelease(v49);
          swift_bridgeObjectRelease(v50);
          return 0;
        }
        if (v22)
        {
          if (!v24)
            goto LABEL_86;
          v25 = *(_QWORD *)(v22 + 16);
          if (v25 != *(_QWORD *)(v24 + 16))
            goto LABEL_86;
          if (v25)
            v26 = v22 == v24;
          else
            v26 = 1;
          if (!v26)
          {
            v48 = v20;
            swift_bridgeObjectRetain(v22);
            swift_bridgeObjectRetain(v24);
            v27 = 0;
            v51 = v24;
            while (1)
            {
              v29 = *(_QWORD *)(v22 + v27 + 32);
              v30 = *(_QWORD *)(v22 + v27 + 40);
              v31 = *(_QWORD *)(v24 + v27 + 32);
              v32 = *(_QWORD *)(v24 + v27 + 40);
              if (v30 == 1)
                v33 = 0xD000000000000012;
              else
                v33 = *(_QWORD *)(v22 + v27 + 32);
              v34 = 0x800000000019FA50;
              if (v30 != 1)
                v34 = *(_QWORD *)(v22 + v27 + 40);
              if (v30)
                v35 = v33;
              else
                v35 = 0x4148435255504F43;
              if (v30)
                v36 = v34;
              else
                v36 = 0xEA00000000004553;
              v37 = 0x800000000019FA50;
              if (v32 == 1)
                v38 = 0xD000000000000012;
              else
                v38 = *(_QWORD *)(v24 + v27 + 32);
              if (v32 != 1)
                v37 = *(_QWORD *)(v24 + v27 + 40);
              if (v32)
                v39 = v38;
              else
                v39 = 0x4148435255504F43;
              if (v32)
                v40 = v37;
              else
                v40 = 0xEA00000000004553;
              if (v35 == v39 && v36 == v40)
              {
                sub_1F6D4(*(_QWORD *)(v22 + v27 + 32), *(_QWORD *)(v22 + v27 + 40));
                sub_1F6D4(v31, v32);
                sub_1F6D4(v29, v30);
                sub_1F6D4(v31, v32);
                swift_bridgeObjectRelease_n(v36, 2);
                sub_26A48(v31, v32);
                sub_26A48(v29, v30);
              }
              else
              {
                v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v36, v39, v40, 0);
                sub_1F6D4(v29, v30);
                sub_1F6D4(v31, v32);
                sub_1F6D4(v29, v30);
                sub_1F6D4(v31, v32);
                swift_bridgeObjectRelease(v36);
                swift_bridgeObjectRelease(v40);
                sub_26A48(v31, v32);
                sub_26A48(v29, v30);
                if ((v28 & 1) == 0)
                {
                  swift_bridgeObjectRelease(v22);
                  swift_bridgeObjectRelease(v51);
                  goto LABEL_86;
                }
              }
              v27 += 16;
              --v25;
              v24 = v51;
              if (!v25)
              {
                swift_bridgeObjectRelease(v22);
                swift_bridgeObjectRelease(v51);
                v18 = v46;
                v17 = v47;
                v19 = v45;
                v20 = v48;
                break;
              }
            }
          }
        }
        else if (v24)
        {
          goto LABEL_86;
        }
        if (++v20 == v17)
        {
          swift_bridgeObjectRelease(v49);
          swift_bridgeObjectRelease(v50);
          v3 = v43;
          v2 = v44;
          v5 = v41;
          v4 = v42;
          break;
        }
      }
    }
    ++v3;
    result = 1;
  }
  while (v3 != v2);
  return result;
}

uint64_t sub_9500(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t *v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (unint64_t *)(a1 + 40);
    v4 = (unint64_t *)(a2 + 40);
    do
    {
      v6 = *(v3 - 1);
      v7 = *v3;
      v8 = *(v4 - 1);
      v9 = *v4;
      if (*v3 == 1)
        v10 = 0xD000000000000012;
      else
        v10 = *(v3 - 1);
      if (*v3 == 1)
        v11 = 0x800000000019FA50;
      else
        v11 = *v3;
      if (v7)
        v12 = v10;
      else
        v12 = 0x4148435255504F43;
      if (v7)
        v13 = v11;
      else
        v13 = 0xEA00000000004553;
      if (v9 == 1)
        v14 = 0xD000000000000012;
      else
        v14 = *(v4 - 1);
      if (v9 == 1)
        v15 = 0x800000000019FA50;
      else
        v15 = *v4;
      if (v9)
        v16 = v14;
      else
        v16 = 0x4148435255504F43;
      if (v9)
        v17 = v15;
      else
        v17 = 0xEA00000000004553;
      if (v12 == v16 && v13 == v17)
      {
        sub_1F6D4(*(v3 - 1), *v3);
        sub_1F6D4(v8, v9);
        sub_1F6D4(v6, v7);
        sub_1F6D4(v8, v9);
        swift_bridgeObjectRelease_n(v13, 2);
        sub_26A48(v8, v9);
        sub_26A48(v6, v7);
      }
      else
      {
        v5 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, v16, v17, 0);
        sub_1F6D4(v6, v7);
        sub_1F6D4(v8, v9);
        sub_1F6D4(v6, v7);
        sub_1F6D4(v8, v9);
        swift_bridgeObjectRelease(v13);
        swift_bridgeObjectRelease(v17);
        sub_26A48(v8, v9);
        sub_26A48(v6, v7);
        if ((v5 & 1) == 0)
          return 0;
      }
      v3 += 2;
      v4 += 2;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_96CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  char *i;
  char v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (_BYTE *)(a1 + 56);
    for (i = (char *)(a2 + 56);
          *((_QWORD *)v3 - 3) == *((_QWORD *)i - 3) && *((float *)v3 - 4) == *((float *)i - 4);
          i += 32)
    {
      v5 = *i;
      if ((*v3 & 1) != 0)
      {
        if (!*i)
          return 0;
      }
      else
      {
        if (*((_QWORD *)v3 - 1) != *((_QWORD *)i - 1))
          v5 = 1;
        if ((v5 & 1) != 0)
          return 0;
      }
      v3 += 32;
      if (!--v2)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t sub_9754(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = 0;
    v4 = a1 + 32;
    while (1)
    {
      v6 = v4 + 24 * v3;
      v7 = a2 + 32 + 24 * v3;
      if (*(_QWORD *)v6 != *(_QWORD *)v7)
        break;
      v8 = *(_QWORD **)(v6 + 16);
      v9 = *(_QWORD **)(v7 + 16);
      if ((*(_BYTE *)(v4 + 24 * v3 + 12) & 1) != 0)
      {
        if (!*(_BYTE *)(v7 + 12))
          return 0;
      }
      else
      {
        if (*(float *)(v6 + 8) == *(float *)(v7 + 8))
          v10 = *(_BYTE *)(v7 + 12);
        else
          v10 = 1;
        if ((v10 & 1) != 0)
          return 0;
      }
      if (v8)
      {
        if (!v9)
          return 0;
        v11 = v8[2];
        if (v11 != v9[2])
          return 0;
        if (v11)
          v12 = v8 == v9;
        else
          v12 = 1;
        if (!v12)
        {
          if (v8[4] != v9[4])
            return 0;
          v13 = v8 + 5;
          v14 = v9 + 5;
          for (i = v11 - 1; i; --i)
          {
            v17 = *v13++;
            v16 = v17;
            v18 = *v14++;
            if (v16 != v18)
              return 0;
          }
        }
      }
      else if (v9)
      {
        return 0;
      }
      ++v3;
      result = 1;
      if (v3 == v2)
        return result;
    }
    return 0;
  }
  return 1;
}

uint64_t sub_9854(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = 0;
  v4 = a1 + 32;
  v5 = a2 + 32;
  while (1)
  {
    v7 = *(_QWORD *)(v4 + 8 * v3);
    v8 = *(_QWORD *)(v5 + 8 * v3);
    if (v7)
      break;
    if (v8)
      return 0;
LABEL_7:
    ++v3;
    result = 1;
    if (v3 == v2)
      return result;
  }
  if (!v8)
    return 0;
  v9 = *(_QWORD *)(v7 + 16);
  if (v9 != *(_QWORD *)(v8 + 16))
    return 0;
  if (v9)
    v10 = v7 == v8;
  else
    v10 = 1;
  if (v10)
    goto LABEL_7;
  v11 = v7 + 32;
  v12 = v8 + 32;
  swift_bridgeObjectRetain_n(*(_QWORD *)(v5 + 8 * v3), 2);
  result = swift_bridgeObjectRetain_n(v7, 2);
  v13 = 0;
  while (1)
  {
    if (v13 >= *(_QWORD *)(v8 + 16))
    {
      __break(1u);
      return result;
    }
    v14 = v11 + (v13 << 6);
    result = *(_QWORD *)(v14 + 56);
    v15 = v12 + (v13 << 6);
    v16 = *(_QWORD *)(v15 + 56);
    if ((*(_BYTE *)(v14 + 8) & 1) != 0)
    {
      if ((*(_BYTE *)(v15 + 8) & 1) == 0)
        goto LABEL_88;
    }
    else if ((*(_BYTE *)(v15 + 8) & 1) != 0 || *(_QWORD *)v14 != *(_QWORD *)v15)
    {
LABEL_88:
      swift_bridgeObjectRelease(v7);
      v43 = v8;
      goto LABEL_91;
    }
    if (*(_QWORD *)(v14 + 16) != *(_QWORD *)(v15 + 16))
      goto LABEL_88;
    if ((*(_BYTE *)(v14 + 32) & 1) != 0)
    {
      if ((*(_BYTE *)(v15 + 32) & 1) == 0)
        goto LABEL_88;
    }
    else if ((*(_BYTE *)(v15 + 32) & 1) != 0 || *(_QWORD *)(v14 + 24) != *(_QWORD *)(v15 + 24))
    {
      goto LABEL_88;
    }
    if ((*(_BYTE *)(v14 + 40) & 1) != 0)
    {
      if ((*(_BYTE *)(v15 + 40) & 1) == 0)
        goto LABEL_88;
    }
    else if ((*(_BYTE *)(v15 + 40) & 1) != 0 || *(float *)(v14 + 36) != *(float *)(v15 + 36))
    {
      goto LABEL_88;
    }
    if ((*(_BYTE *)(v14 + 48) & 1) != 0)
    {
      if ((*(_BYTE *)(v15 + 48) & 1) == 0)
        goto LABEL_88;
    }
    else if ((*(_BYTE *)(v15 + 48) & 1) != 0 || *(float *)(v14 + 44) != *(float *)(v15 + 44))
    {
      goto LABEL_88;
    }
    v17 = *(_QWORD *)(result + 16);
    if (v17 != *(_QWORD *)(v16 + 16))
      goto LABEL_88;
    if (v17 && result != v16)
      break;
LABEL_86:
    if (++v13 == v9)
    {
      swift_bridgeObjectRelease_n(v7, 2);
      swift_bridgeObjectRelease_n(v8, 2);
      goto LABEL_7;
    }
  }
  v44 = v13;
  v45 = v5;
  v46 = v4;
  v47 = v3;
  v48 = v2;
  v56 = v7;
  v57 = v8;
  v18 = result + 32;
  v19 = v16 + 32;
  v55 = *(_QWORD *)(v14 + 56);
  v59 = *(_QWORD *)(result + 16);
  swift_bridgeObjectRetain(result);
  swift_bridgeObjectRetain(v16);
  v20 = v59;
  v21 = 0;
  v58 = v16;
  v52 = v11;
  v53 = v9;
  v50 = v18;
  v51 = v12;
  v49 = v16 + 32;
  while (2)
  {
    v22 = v18 + 24 * v21;
    v23 = *(_QWORD *)(v22 + 16);
    v24 = v19 + 24 * v21;
    v25 = *(_QWORD *)(v24 + 16);
    if ((*(_BYTE *)(v22 + 8) & 1) != 0)
    {
      if ((*(_BYTE *)(v24 + 8) & 1) == 0)
        break;
      goto LABEL_49;
    }
    if ((*(_BYTE *)(v24 + 8) & 1) == 0 && *(_QWORD *)v22 == *(_QWORD *)v24)
    {
LABEL_49:
      if (v23)
      {
        if (!v25)
          break;
        v26 = *(_QWORD *)(v23 + 16);
        if (v26 != *(_QWORD *)(v25 + 16))
          break;
        if (v26)
          v27 = v23 == v25;
        else
          v27 = 1;
        if (!v27)
        {
          v54 = v21;
          swift_bridgeObjectRetain(v23);
          swift_bridgeObjectRetain(v25);
          v28 = 0;
          v60 = v23;
          while (1)
          {
            v30 = *(_QWORD *)(v23 + v28 + 32);
            v31 = *(_QWORD *)(v23 + v28 + 40);
            v32 = v25;
            v33 = *(_QWORD *)(v25 + v28 + 32);
            v34 = *(_QWORD *)(v25 + v28 + 40);
            if (v31 == 1)
              v35 = 0xD000000000000012;
            else
              v35 = v30;
            v36 = 0x800000000019FA50;
            if (v31 != 1)
              v36 = v31;
            if (v31)
              v37 = v35;
            else
              v37 = 0x4148435255504F43;
            if (v31)
              v38 = v36;
            else
              v38 = 0xEA00000000004553;
            v39 = 0x800000000019FA50;
            if (v34 == 1)
              v40 = 0xD000000000000012;
            else
              v40 = *(_QWORD *)(v25 + v28 + 32);
            if (v34 != 1)
              v39 = *(_QWORD *)(v25 + v28 + 40);
            if (v34)
              v41 = v40;
            else
              v41 = 0x4148435255504F43;
            if (v34)
              v42 = v39;
            else
              v42 = 0xEA00000000004553;
            if (v37 == v41 && v38 == v42)
            {
              sub_1F6D4(v30, v31);
              sub_1F6D4(v33, v34);
              sub_1F6D4(v30, v31);
              sub_1F6D4(v33, v34);
              swift_bridgeObjectRelease_n(v38, 2);
              sub_26A48(v33, v34);
              sub_26A48(v30, v31);
            }
            else
            {
              v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v38, v41, v42, 0);
              sub_1F6D4(v30, v31);
              sub_1F6D4(v33, v34);
              sub_1F6D4(v30, v31);
              sub_1F6D4(v33, v34);
              swift_bridgeObjectRelease(v38);
              swift_bridgeObjectRelease(v42);
              sub_26A48(v33, v34);
              sub_26A48(v30, v31);
              if ((v29 & 1) == 0)
              {
                swift_bridgeObjectRelease(v60);
                swift_bridgeObjectRelease(v32);
                v16 = v58;
                goto LABEL_90;
              }
            }
            v28 += 16;
            --v26;
            v25 = v32;
            v23 = v60;
            if (!v26)
            {
              swift_bridgeObjectRelease(v60);
              swift_bridgeObjectRelease(v25);
              v16 = v58;
              v20 = v59;
              v11 = v52;
              v9 = v53;
              v18 = v50;
              v12 = v51;
              v19 = v49;
              v21 = v54;
              break;
            }
          }
        }
      }
      else if (v25)
      {
        break;
      }
      if (++v21 == v20)
      {
        swift_bridgeObjectRelease(v55);
        result = swift_bridgeObjectRelease(v16);
        v7 = v56;
        v8 = v57;
        v3 = v47;
        v2 = v48;
        v5 = v45;
        v4 = v46;
        v13 = v44;
        goto LABEL_86;
      }
      continue;
    }
    break;
  }
LABEL_90:
  v7 = v56;
  swift_bridgeObjectRelease(v56);
  v8 = v57;
  swift_bridgeObjectRelease(v57);
  swift_bridgeObjectRelease(v55);
  v43 = v16;
LABEL_91:
  swift_bridgeObjectRelease(v43);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  return 0;
}

uint64_t sub_9D34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = 0;
  v4 = a1 + 32;
  v5 = a2 + 32;
  while (1)
  {
    v6 = v4 + 24 * v3;
    v7 = *(_QWORD **)(v6 + 16);
    v8 = v5 + 24 * v3;
    v9 = *(_BYTE *)(v8 + 8);
    v10 = *(_QWORD **)(v8 + 16);
    if ((*(_BYTE *)(v6 + 8) & 1) != 0)
    {
      if (!*(_BYTE *)(v8 + 8))
        return 0;
    }
    else
    {
      if (*(_QWORD *)v6 != *(_QWORD *)v8)
        v9 = 1;
      if ((v9 & 1) != 0)
        return 0;
    }
    if (!v7)
    {
      if (v10)
        return 0;
      goto LABEL_6;
    }
    if (!v10)
      return 0;
    v11 = v7[2];
    if (v11 != v10[2])
      return 0;
    if (v11 && v7 != v10)
    {
      v13 = v7[4];
      v14 = v7[5];
      v15 = v10[4];
      v16 = v10[5];
      v17 = v13 == v15 && v14 == v16;
      if (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, v15, v16, 0) & 1) == 0)
        return 0;
      v18 = v11 - 1;
      if (v18)
        break;
    }
LABEL_6:
    if (++v3 == v2)
      return 1;
  }
  v19 = v10 + 7;
  v20 = v7 + 7;
  while (1)
  {
    v21 = *(v20 - 1);
    v22 = *v20;
    v23 = *(v19 - 1);
    v24 = *v19;
    v25 = v21 == v23 && v22 == v24;
    if (!v25 && (_stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, v23, v24, 0) & 1) == 0)
      return 0;
    v19 += 2;
    v20 += 2;
    if (!--v18)
      goto LABEL_6;
  }
}

uint64_t sub_9E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (_QWORD *)(a2 + 56);
    v4 = (uint64_t *)(a1 + 56);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      v7 = *((_BYTE *)v3 - 16);
      v8 = *(v3 - 1);
      v9 = *v3;
      if ((*(_BYTE *)(v4 - 2) & 1) != 0)
      {
        if (!*((_BYTE *)v3 - 16))
          return 0;
      }
      else
      {
        if (*(v4 - 3) != *(v3 - 3))
          v7 = 1;
        if ((v7 & 1) != 0)
          return 0;
      }
      if (v6)
      {
        if (!v9
          || (v5 != v8 || v6 != v9) && (_stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v8, v9, 0) & 1) == 0)
        {
          return 0;
        }
      }
      else if (v9)
      {
        return 0;
      }
      v3 += 4;
      v4 += 4;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_9F38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  char v5;
  char v6;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (_BYTE *)(a1 + 56);
    v4 = (_BYTE *)(a2 + 56);
    do
    {
      v6 = *(v4 - 16);
      if ((*(v3 - 16) & 1) != 0)
      {
        if (!*(v4 - 16))
          return 0;
      }
      else
      {
        if (*((_QWORD *)v3 - 3) != *((_QWORD *)v4 - 3))
          v6 = 1;
        if ((v6 & 1) != 0)
          return 0;
      }
      if ((*v3 & 1) != 0)
      {
        if (!*v4)
          return 0;
      }
      else
      {
        if (*((_QWORD *)v3 - 1) == *((_QWORD *)v4 - 1))
          v5 = *v4;
        else
          v5 = 1;
        if ((v5 & 1) != 0)
          return 0;
      }
      v3 += 32;
      v4 += 32;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_9FCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (unint64_t *)(a2 + 56);
    v4 = (unint64_t *)(a1 + 56);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      v7 = *((_BYTE *)v3 - 16);
      v9 = *(v3 - 1);
      v8 = *v3;
      if ((*(_BYTE *)(v4 - 2) & 1) != 0)
      {
        if (!*((_BYTE *)v3 - 16))
          return 0;
      }
      else
      {
        if (*(v4 - 3) != *(v3 - 3))
          v7 = 1;
        if ((v7 & 1) != 0)
          return 0;
      }
      if (v5 == 2)
      {
        if (v8 != 2)
          return 0;
        goto LABEL_6;
      }
      if (v8 == 2)
        return 0;
      v10 = 0x4F4F424F49445541;
      if (v5 != 1)
        v10 = *(v4 - 1);
      v11 = 0xE90000000000004BLL;
      if (v5 != 1)
        v11 = *v4;
      if (v5)
        v12 = v10;
      else
        v12 = 0x4B4F4F4245;
      if (v5)
        v13 = v11;
      else
        v13 = 0xE500000000000000;
      if (v8)
      {
        if (v8 == 1)
        {
          v14 = 0x4F4F424F49445541;
          v15 = 0xE90000000000004BLL;
          if (v12 != 0x4F4F424F49445541)
            goto LABEL_34;
        }
        else
        {
          v14 = *(v3 - 1);
          v15 = *v3;
          if (v12 != v9)
            goto LABEL_34;
        }
      }
      else
      {
        v15 = 0xE500000000000000;
        v14 = 0x4B4F4F4245;
        if (v12 != 0x4B4F4F4245)
          goto LABEL_34;
      }
      if (v13 == v15)
      {
        sub_1E9F8(*(v4 - 1), *v4);
        sub_1E9F8(v6, v5);
        sub_1E9F8(v9, v8);
        sub_1E9F8(v6, v5);
        sub_1E9F8(v9, v8);
        swift_bridgeObjectRelease_n(v13, 2);
        sub_1EA08(v9, v8);
        sub_1EA08(v6, v5);
        sub_1EA08(v6, v5);
        goto LABEL_6;
      }
LABEL_34:
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, v14, v15, 0);
      sub_1E9F8(v6, v5);
      sub_1E9F8(v6, v5);
      sub_1E9F8(v9, v8);
      sub_1E9F8(v6, v5);
      sub_1E9F8(v9, v8);
      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease(v15);
      sub_1EA08(v9, v8);
      sub_1EA08(v6, v5);
      sub_1EA08(v6, v5);
      if ((v16 & 1) == 0)
        return 0;
LABEL_6:
      v3 += 4;
      v4 += 4;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_A22C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  double *v13;
  double *v14;
  uint64_t i;
  double v16;
  double v17;
  double v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = 0;
    v4 = a1 + 32;
    result = 1;
    while (1)
    {
      v6 = v4 + 24 * v3;
      v7 = *(_QWORD *)(v6 + 16);
      v8 = a2 + 32 + 24 * v3;
      v9 = *(_BYTE *)(v8 + 8);
      v10 = *(_QWORD *)(v8 + 16);
      if ((*(_BYTE *)(v6 + 8) & 1) != 0)
      {
        if (!*(_BYTE *)(v8 + 8))
          return 0;
      }
      else
      {
        if (*(_QWORD *)v6 != *(_QWORD *)v8)
          v9 = 1;
        if ((v9 & 1) != 0)
          return 0;
      }
      if (v7)
      {
        if (!v10)
          return 0;
        v11 = *(_QWORD *)(v7 + 16);
        if (v11 != *(_QWORD *)(v10 + 16))
          return 0;
        if (v11)
          v12 = v7 == v10;
        else
          v12 = 1;
        if (!v12)
        {
          if (*(double *)(v7 + 32) != *(double *)(v10 + 32))
            return 0;
          v13 = (double *)(v7 + 40);
          v14 = (double *)(v10 + 40);
          for (i = v11 - 1; i; --i)
          {
            v16 = *v13++;
            v17 = v16;
            v18 = *v14++;
            if (v17 != v18)
              return 0;
          }
        }
      }
      else if (v10)
      {
        return 0;
      }
      if (++v3 == v2)
        return result;
    }
  }
  return 1;
}

uint64_t sub_A314(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  char *v37;
  char v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83[4];
  uint64_t v84[5];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    v3 = 0;
    v4 = a1 + 32;
    v5 = a2 + 32;
    v68 = a1 + 32;
    v69 = *(_QWORD *)(a1 + 16);
    v67 = v5;
    while (1)
    {
      v6 = (unsigned __int8 *)(v4 + 80 * v3);
      v7 = (unsigned __int8 *)(v5 + 80 * v3);
      if (*v6 != *v7)
        return 0;
      v8 = *((_QWORD *)v6 + 1);
      v9 = *((_QWORD *)v7 + 1);
      v10 = *(_QWORD *)(v8 + 16);
      if (v10 != *(_QWORD *)(v9 + 16))
        return 0;
      v11 = *((_QWORD *)v6 + 2);
      v82 = *((_QWORD *)v6 + 3);
      v13 = *((_QWORD *)v6 + 4);
      v12 = *((_QWORD *)v6 + 5);
      v14 = *((_QWORD *)v6 + 6);
      v15 = v6[56];
      v81 = *((_QWORD *)v6 + 8);
      v16 = *((_DWORD *)v6 + 18);
      v17 = *((_QWORD *)v7 + 2);
      v18 = *((_QWORD *)v7 + 3);
      v19 = *((_QWORD *)v7 + 4);
      v20 = *((_QWORD *)v7 + 5);
      v21 = *((_QWORD *)v7 + 6);
      v77 = v7[56];
      v22 = *((_QWORD *)v7 + 8);
      v23 = !v10 || v8 == v9;
      v24 = *((_DWORD *)v7 + 18);
      if (!v23)
        break;
LABEL_12:
      v76 = v9;
      v79 = v22;
      v80 = v17;
      v75 = v3;
      v73 = v24;
      v74 = v16;
      if (v11 == 1)
      {
        v25 = v13;
        v26 = v21;
        v27 = v19;
        v28 = v9;
        swift_bridgeObjectRetain(v8);
        v72 = v12;
        sub_1FAE4(1, v82, v25, v12, v14);
        swift_bridgeObjectRetain(v81);
        swift_bridgeObjectRetain(v28);
        if (v80 != 1)
        {
          v64 = v18;
          v65 = v20;
          v70 = v27;
          v66 = v26;
          sub_1FAE4(v80, v18, v27, v20, v26);
          swift_bridgeObjectRetain(v79);
          v56 = v80;
          v13 = v25;
          v11 = 1;
LABEL_54:
          sub_1FAE4(v56, v64, v70, v65, v66);
          sub_1FB40(v11, v82, v13, v12, v14);
          sub_1FB40(v56, v64, v70, v65, v66);
          swift_bridgeObjectRelease(v76);
          sub_1FB40(v56, v64, v70, v65, v66);
          swift_bridgeObjectRelease(v8);
          swift_bridgeObjectRelease(v79);
          v59 = v11;
          v60 = v82;
          v61 = v13;
          v62 = v12;
          v63 = v14;
          goto LABEL_58;
        }
        v29 = v18;
        v30 = v18;
        v31 = v26;
        sub_1FAE4(1, v30, v27, v20, v26);
        v32 = v79;
        swift_bridgeObjectRetain(v79);
        v33 = v25;
        v34 = v82;
        v71 = v14;
        v35 = v33;
        v11 = 1;
      }
      else
      {
        v70 = v19;
        v65 = v20;
        v66 = v21;
        v64 = v18;
        if (v17 == 1)
        {
          v57 = v19;
          v58 = v9;
          sub_1FAE4(v11, v82, v13, v12, v14);
          sub_1FAE4(v11, v82, v13, v12, v14);
          swift_bridgeObjectRetain(v8);
          sub_1FAE4(v11, v82, v13, v12, v14);
          swift_bridgeObjectRetain(v81);
          swift_bridgeObjectRetain(v58);
          sub_1FAE4(1, v18, v57, v20, v66);
          swift_bridgeObjectRetain(v79);
          swift_bridgeObjectRelease(v11);
          swift_bridgeObjectRelease(v82);
          sub_1F928(v13, v12);
          swift_bridgeObjectRelease(v14);
          v56 = 1;
          goto LABEL_54;
        }
        v40 = v12;
        v41 = v14;
        v35 = v13;
        v84[0] = v11;
        v84[1] = v82;
        v84[2] = v13;
        v84[3] = v40;
        v83[0] = v17;
        v83[1] = v18;
        v83[2] = v19;
        v83[3] = v20;
        v42 = v9;
        v43 = v17;
        sub_1FAE4(v11, v82, v13, v40, v41);
        sub_1FAE4(v11, v82, v13, v40, v41);
        swift_bridgeObjectRetain(v8);
        v44 = v40;
        v45 = v40;
        v46 = v15;
        sub_1FAE4(v11, v82, v35, v45, v41);
        swift_bridgeObjectRetain(v81);
        swift_bridgeObjectRetain(v42);
        v20 = v65;
        sub_1FAE4(v43, v18, v70, v65, v66);
        swift_bridgeObjectRetain(v79);
        if (!_s20BooksPersonalization9TransportO24StoreAssetRequestDetailsV2eeoiySbAE_AEtFZ_0(v84, v83))
        {
          v48 = v44;
LABEL_56:
          v49 = v82;
          v50 = v8;
LABEL_57:
          swift_bridgeObjectRelease(v11);
          swift_bridgeObjectRelease(v49);
          sub_1F928(v35, v48);
          swift_bridgeObjectRelease(v41);
          sub_1FB40(v11, v49, v35, v48, v41);
          swift_bridgeObjectRelease(v76);
          sub_1FB40(v80, v64, v70, v65, v66);
          swift_bridgeObjectRelease(v50);
          swift_bridgeObjectRelease(v79);
          v59 = v11;
          v60 = v49;
          v61 = v35;
          v62 = v48;
          v63 = v41;
LABEL_58:
          sub_1FB40(v59, v60, v61, v62, v63);
          swift_bridgeObjectRelease(v81);
          return 0;
        }
        if (v41)
        {
          if (!v66 || (v47 = *(_QWORD *)(v41 + 16), v47 != *(_QWORD *)(v66 + 16)))
          {
            v48 = v44;
            goto LABEL_56;
          }
          v48 = v44;
          v49 = v82;
          v50 = v8;
          if (v47 && v41 != v66)
          {
            if (*(_QWORD *)(v41 + 32) != *(_QWORD *)(v66 + 32))
              goto LABEL_57;
            v51 = 0;
            v52 = v47 - 1;
            while (v52 != v51)
            {
              v53 = *(_QWORD *)(v41 + 8 * v51 + 40);
              v54 = *(_QWORD *)(v66 + 40 + 8 * v51++);
              if (v53 != v54)
                goto LABEL_57;
            }
          }
        }
        else
        {
          v48 = v44;
          v41 = 0;
          v49 = v82;
          v50 = v8;
          if (v66)
          {
            v41 = 0;
            goto LABEL_57;
          }
        }
        if (v46 == 2)
        {
          if (v77 != 2)
            goto LABEL_57;
        }
        else if (v77 == 2 || ((((v46 & 1) == 0) ^ v77) & 1) == 0)
        {
          goto LABEL_57;
        }
        swift_bridgeObjectRelease(v11);
        swift_bridgeObjectRelease(v49);
        sub_1F928(v35, v48);
        swift_bridgeObjectRelease(v41);
        sub_1FB40(v11, v49, v35, v48, v41);
        v72 = v48;
        v34 = v49;
        v71 = v41;
        v32 = v79;
        v31 = v66;
        v27 = v70;
        v29 = v64;
      }
      v78 = sub_9500(v81, v32);
      swift_bridgeObjectRelease(v76);
      sub_1FB40(v80, v29, v27, v20, v31);
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v32);
      sub_1FB40(v11, v34, v35, v72, v71);
      swift_bridgeObjectRelease(v81);
      result = 0;
      if ((v78 & 1) != 0)
      {
        v4 = v68;
        v5 = v67;
        if (v74 == v73)
        {
          v3 = v75 + 1;
          result = 1;
          if (v75 + 1 != v69)
            continue;
        }
      }
      return result;
    }
    v36 = (_BYTE *)(v8 + 56);
    v37 = (char *)(v9 + 56);
    while (*((_QWORD *)v36 - 3) == *((_QWORD *)v37 - 3) && *((float *)v36 - 4) == *((float *)v37 - 4))
    {
      v39 = *v37;
      if ((*v36 & 1) != 0)
      {
        if (!*v37)
          return 0;
      }
      else
      {
        if (*((_QWORD *)v36 - 1) != *((_QWORD *)v37 - 1))
          v39 = 1;
        if ((v39 & 1) != 0)
          return 0;
      }
      v36 += 32;
      v37 += 32;
      if (!--v10)
        goto LABEL_12;
    }
  }
  return 0;
}

uint64_t sub_AA90(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4];
  v6 = a1[5];
  v7 = a2[4];
  v8 = a2[5];
  v9 = v5 == v7 && v6 == v8;
  if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0), result = 0, (v10 & 1) != 0))
  {
    v12 = v2 - 1;
    if (!v12)
      return 1;
    v13 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      v15 = *(i - 1);
      v16 = *i;
      v17 = *(v13 - 1);
      v18 = *v13;
      v19 = v15 == v17 && v16 == v18;
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0) & 1) == 0)
        break;
      v13 += 2;
      if (!--v12)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_AB54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = 0;
  v4 = a1 + 32;
  v5 = a2 + 32;
  while (1)
  {
    v7 = *(_QWORD *)(v4 + 8 * v3);
    v8 = *(_QWORD *)(v5 + 8 * v3);
    if (!v7)
    {
      if (v8)
        return 0;
      goto LABEL_8;
    }
    if (!v8)
      return 0;
    v9 = *(_QWORD *)(v7 + 16);
    if (v9 != *(_QWORD *)(v8 + 16))
      return 0;
    if (v9 && v7 != v8)
      break;
LABEL_8:
    ++v3;
    result = 1;
    if (v3 == v2)
      return result;
  }
  v11 = 0;
  v12 = v7 + 32;
  v13 = v8 + 32;
  while (1)
  {
    v14 = v12 + 24 * v11;
    v15 = v13 + 24 * v11;
    if (*(_QWORD *)v14 != *(_QWORD *)v15)
      return 0;
    v16 = *(_QWORD **)(v14 + 16);
    v17 = *(_QWORD **)(v15 + 16);
    if ((*(_BYTE *)(v12 + 24 * v11 + 12) & 1) != 0)
    {
      if (!*(_BYTE *)(v15 + 12))
        return 0;
    }
    else
    {
      if (*(float *)(v14 + 8) == *(float *)(v15 + 8))
        v18 = *(_BYTE *)(v15 + 12);
      else
        v18 = 1;
      if ((v18 & 1) != 0)
        return 0;
    }
    if (v16)
    {
      if (!v17)
        return 0;
      v19 = v16[2];
      if (v19 != v17[2])
        return 0;
      if (v19)
        v20 = v16 == v17;
      else
        v20 = 1;
      if (!v20)
      {
        if (v16[4] != v17[4])
          return 0;
        if (v19 != 1)
        {
          if (v16[5] != v17[5])
            return 0;
          v21 = v16 + 6;
          v22 = v17 + 6;
          for (i = v19 - 2; i; --i)
          {
            v25 = *v21++;
            v24 = v25;
            v26 = *v22++;
            if (v24 != v26)
              return 0;
          }
        }
      }
    }
    else if (v17)
    {
      return 0;
    }
    if (++v11 == v9)
      goto LABEL_8;
  }
}

BOOL sub_ACBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  __int128 v16;
  BOOL v17;
  BOOL v19;
  _OWORD v21[2];
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  _OWORD v26[2];
  uint64_t v27;
  int v28;
  char v29;
  uint64_t v30;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      return 1;
    }
    else
    {
      v5 = 0;
      v6 = v2 - 1;
      do
      {
        v7 = *(_QWORD *)(a1 + v5 + 64);
        v8 = *(_DWORD *)(a1 + v5 + 72);
        v9 = *(_BYTE *)(a1 + v5 + 76);
        v10 = *(_QWORD *)(a1 + v5 + 80);
        v11 = *(_OWORD *)(a1 + v5 + 48);
        v26[0] = *(_OWORD *)(a1 + v5 + 32);
        v26[1] = v11;
        v27 = v7;
        v28 = v8;
        v29 = v9;
        v30 = v10;
        v12 = *(_QWORD *)(a2 + v5 + 64);
        v13 = *(_DWORD *)(a2 + v5 + 72);
        v14 = *(_BYTE *)(a2 + v5 + 76);
        v15 = *(_QWORD *)(a2 + v5 + 80);
        v16 = *(_OWORD *)(a2 + v5 + 48);
        v21[0] = *(_OWORD *)(a2 + v5 + 32);
        v21[1] = v16;
        v22 = v12;
        v23 = v13;
        v24 = v14;
        v25 = v15;
        v17 = _s20BooksPersonalization9TransportO26RecommendationBlockRequestV2eeoiySbAE_AEtFZ_0((uint64_t)v26, (uint64_t)v21);
        v19 = v6-- != 0;
        if (!v17)
          break;
        v5 += 56;
      }
      while (v19);
    }
  }
  else
  {
    return 0;
  }
  return v17;
}

uint64_t sub_AD9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v35;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = 0;
    v4 = a1 + 32;
    v35 = a2 + 32;
    while (1)
    {
      v5 = v4 + 48 * v3;
      v6 = v35 + 48 * v3;
      if (*(_QWORD *)v5 != *(_QWORD *)v6)
        return 0;
      v8 = *(_QWORD **)(v5 + 24);
      v7 = *(_QWORD *)(v5 + 32);
      v9 = *(_QWORD *)(v5 + 40);
      v11 = *(_QWORD **)(v6 + 24);
      v10 = *(_QWORD *)(v6 + 32);
      v12 = *(_QWORD *)(v6 + 40);
      if ((*(_BYTE *)(v4 + 48 * v3 + 16) & 1) != 0)
      {
        if (!*(_BYTE *)(v6 + 16))
          return 0;
      }
      else
      {
        if (*(double *)(v5 + 8) == *(double *)(v6 + 8))
          v13 = *(_BYTE *)(v6 + 16);
        else
          v13 = 1;
        if ((v13 & 1) != 0)
          return 0;
      }
      v14 = v8[2];
      if (v14 != v11[2])
        return 0;
      if (v14)
        v15 = v8 == v11;
      else
        v15 = 1;
      if (!v15)
      {
        v16 = v8[4];
        v17 = v8[5];
        v18 = v11[4];
        v19 = v11[5];
        v20 = v16 == v18 && v17 == v19;
        if (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v18, v19, 0) & 1) == 0)
          return 0;
        if (v14 != 1)
        {
          v21 = v8[6];
          v22 = v8[7];
          v23 = v11[6];
          v24 = v11[7];
          v25 = v21 == v23 && v22 == v24;
          if (!v25 && (_stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, v23, v24, 0) & 1) == 0)
            return 0;
          v26 = v14 - 2;
          if (v26)
          {
            v27 = v11 + 9;
            v28 = v8 + 9;
            do
            {
              v29 = *(v28 - 1);
              v30 = *v28;
              v31 = *(v27 - 1);
              v32 = *v27;
              v33 = v29 == v31 && v30 == v32;
              if (!v33 && (_stringCompareWithSmolCheck(_:_:expecting:)(v29, v30, v31, v32, 0) & 1) == 0)
                return 0;
              v27 += 2;
              v28 += 2;
            }
            while (--v26);
          }
        }
      }
      if (v9)
      {
        if (!v12
          || (v7 != v10 || v9 != v12) && (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v12, 0) & 1) == 0)
        {
          return 0;
        }
      }
      else if (v12)
      {
        return 0;
      }
      if (++v3 == v2)
        return 1;
    }
  }
  return 1;
}

uint64_t sub_AF74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = 0;
    v4 = a1 + 32;
    v5 = a2 + 32;
    v31 = a1 + 32;
    v32 = *(_QWORD *)(a1 + 16);
    v30 = a2 + 32;
    do
    {
      v6 = v4 + 24 * v3;
      v7 = *(_QWORD *)(v6 + 16);
      v8 = v5 + 24 * v3;
      v9 = *(_BYTE *)(v8 + 8);
      v10 = *(_QWORD *)(v8 + 16);
      if ((*(_BYTE *)(v6 + 8) & 1) != 0)
      {
        if (!*(_BYTE *)(v8 + 8))
          return 0;
      }
      else
      {
        if (*(_QWORD *)v6 != *(_QWORD *)v8)
          v9 = 1;
        if ((v9 & 1) != 0)
          return 0;
      }
      if (v7)
      {
        if (!v10)
          return 0;
        v11 = *(_QWORD *)(v7 + 16);
        if (v11 != *(_QWORD *)(v10 + 16))
          return 0;
        if (v11)
          v12 = v7 == v10;
        else
          v12 = 1;
        if (!v12)
        {
          v33 = v3;
          swift_bridgeObjectRetain(v7);
          swift_bridgeObjectRetain(v10);
          v13 = 0;
          v34 = v7;
          while (1)
          {
            v15 = *(_QWORD *)(v7 + v13 + 32);
            v16 = *(_QWORD *)(v7 + v13 + 40);
            v17 = v10;
            v18 = v10 + v13;
            v19 = *(_QWORD *)(v10 + v13 + 32);
            v20 = *(_QWORD *)(v18 + 40);
            if (v16 == 1)
              v21 = 0xD000000000000012;
            else
              v21 = v15;
            v22 = 0x800000000019FA50;
            if (v16 != 1)
              v22 = v16;
            if (v16)
              v23 = v21;
            else
              v23 = 0x4148435255504F43;
            if (v16)
              v24 = v22;
            else
              v24 = 0xEA00000000004553;
            v25 = 0x800000000019FA50;
            if (v20 == 1)
              v26 = 0xD000000000000012;
            else
              v26 = v19;
            if (v20 != 1)
              v25 = v20;
            if (v20)
              v27 = v26;
            else
              v27 = 0x4148435255504F43;
            if (v20)
              v28 = v25;
            else
              v28 = 0xEA00000000004553;
            if (v23 == v27 && v24 == v28)
            {
              sub_1F6D4(v15, v16);
              sub_1F6D4(v19, v20);
              sub_1F6D4(v15, v16);
              sub_1F6D4(v19, v20);
              swift_bridgeObjectRelease_n(v24, 2);
              sub_26A48(v19, v20);
              sub_26A48(v15, v16);
              v10 = v17;
              v7 = v34;
            }
            else
            {
              v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v27, v28, 0);
              sub_1F6D4(v15, v16);
              sub_1F6D4(v19, v20);
              sub_1F6D4(v15, v16);
              sub_1F6D4(v19, v20);
              swift_bridgeObjectRelease(v24);
              swift_bridgeObjectRelease(v28);
              sub_26A48(v19, v20);
              sub_26A48(v15, v16);
              v10 = v17;
              v7 = v34;
              if ((v14 & 1) == 0)
              {
                swift_bridgeObjectRelease(v34);
                swift_bridgeObjectRelease(v10);
                return 0;
              }
            }
            v13 += 16;
            if (!--v11)
            {
              swift_bridgeObjectRelease(v7);
              swift_bridgeObjectRelease(v10);
              v2 = v32;
              v3 = v33;
              v5 = v30;
              v4 = v31;
              break;
            }
          }
        }
      }
      else if (v10)
      {
        return 0;
      }
      ++v3;
    }
    while (v3 != v2);
  }
  return 1;
}

BOOL sub_B230(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  uint64_t v5;
  _BOOL8 result;
  double v7;
  double v8;
  double v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32))
    return 0;
  v3 = (double *)(a1 + 40);
  v4 = (double *)(a2 + 40);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v7 = *v3++;
    v8 = v7;
    v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

uint64_t sub_B29C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t *v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (unint64_t *)(a1 + 40);
    v4 = (unint64_t *)(a2 + 40);
    do
    {
      v6 = *(v3 - 1);
      v7 = *v3;
      v8 = *(v4 - 1);
      v9 = *v4;
      if (*v3 == 1)
        v10 = 0x4F4F424F49445541;
      else
        v10 = *(v3 - 1);
      if (*v3 == 1)
        v11 = 0xE90000000000004BLL;
      else
        v11 = *v3;
      if (v7)
        v12 = v10;
      else
        v12 = 0x4B4F4F4245;
      if (v7)
        v13 = v11;
      else
        v13 = 0xE500000000000000;
      if (v9 == 1)
        v14 = 0x4F4F424F49445541;
      else
        v14 = *(v4 - 1);
      if (v9 == 1)
        v15 = 0xE90000000000004BLL;
      else
        v15 = *v4;
      if (v9)
        v16 = v14;
      else
        v16 = 0x4B4F4F4245;
      if (v9)
        v17 = v15;
      else
        v17 = 0xE500000000000000;
      if (v12 == v16 && v13 == v17)
      {
        sub_1F6D4(*(v3 - 1), *v3);
        sub_1F6D4(v8, v9);
        sub_1F6D4(v6, v7);
        sub_1F6D4(v8, v9);
        swift_bridgeObjectRelease_n(v13, 2);
        sub_26A48(v8, v9);
        sub_26A48(v6, v7);
      }
      else
      {
        v5 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, v16, v17, 0);
        sub_1F6D4(v6, v7);
        sub_1F6D4(v8, v9);
        sub_1F6D4(v6, v7);
        sub_1F6D4(v8, v9);
        swift_bridgeObjectRelease(v13);
        swift_bridgeObjectRelease(v17);
        sub_26A48(v8, v9);
        sub_26A48(v6, v7);
        if ((v5 & 1) == 0)
          return 0;
      }
      v3 += 2;
      v4 += 2;
      --v2;
    }
    while (v2);
  }
  return 1;
}

BOOL sub_B454(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  v3 = a1 + 5;
  v4 = a2 + 5;
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t sub_B4C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _QWORD v32[11];
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;

  v4 = type metadata accessor for CollectionRecommendation(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)v32 - v8;
  v10 = type metadata accessor for ScoredCollectionRecommendation(0);
  v11 = __chkstk_darwin(v10);
  v12 = __chkstk_darwin(v11);
  v36 = (char *)v32 - v13;
  v14 = __chkstk_darwin(v12);
  v16 = (char *)v32 - v15;
  v17 = __chkstk_darwin(v14);
  v18 = __chkstk_darwin(v17);
  v19 = __chkstk_darwin(v18);
  v25 = (char *)v32 - v22;
  v26 = *(_QWORD *)(a1 + 16);
  if (v26 != *(_QWORD *)(a2 + 16))
    return 0;
  v35 = v20;
  v33 = v9;
  if (v26)
  {
    if (a1 != a2)
    {
      v34 = v19;
      v37 = v24;
      v27 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
      v28 = *(_QWORD *)(v21 + 72);
      v32[4] = "http://localhost:18060";
      v32[5] = v28;
      v32[2] = "booksBySuggestedAuthors";
      v32[3] = "ry";
      v32[0] = "mangaYouMightLike";
      v32[1] = "booksYouMightLike";
      v32[7] = a2;
      v32[8] = v23;
      v32[9] = v16;
      v32[10] = v7;
      v32[6] = v4;
      sub_26A5C(a1 + v27, (uint64_t)v32 - v22, type metadata accessor for ScoredCollectionRecommendation);
      sub_26A5C(a2 + v27, v37, type metadata accessor for ScoredCollectionRecommendation);
      v29 = (uint64_t)v33;
      sub_26A5C((uint64_t)v25, (uint64_t)v33, type metadata accessor for CollectionRecommendation);
      v30 = (char *)&loc_B704 + 4 * byte_18783E[swift_getEnumCaseMultiPayload(v29, v4)];
      __asm { BR              X9 }
    }
  }
  return 1;
}

uint64_t sub_BFC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  int v19;
  char v21;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(a1 + v5 + 32);
      v7 = *(_QWORD *)(a1 + v5 + 40);
      v9 = *(double *)(a1 + v5 + 48);
      v8 = *(double *)(a1 + v5 + 56);
      v10 = *(double *)(a1 + v5 + 64);
      v11 = *(double *)(a1 + v5 + 72);
      v12 = *(_BYTE *)(a1 + v5 + 80);
      v13 = *(_QWORD *)(a2 + v5 + 32);
      v14 = *(_QWORD *)(a2 + v5 + 40);
      v16 = *(double *)(a2 + v5 + 48);
      v15 = *(double *)(a2 + v5 + 56);
      v17 = *(double *)(a2 + v5 + 64);
      v18 = *(double *)(a2 + v5 + 72);
      v19 = *(unsigned __int8 *)(a2 + v5 + 80);
      if (v6 == v13 && v7 == v14)
      {
        if (v9 != v16 || v8 != v15)
          return 0;
      }
      else
      {
        v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v13, v14, 0);
        result = 0;
        if ((v21 & 1) == 0)
          return result;
        if (v9 != v16 || v8 != v15)
          return result;
      }
      if ((v12 & 1) != 0)
      {
        if (!v19)
          return 0;
      }
      else
      {
        result = 0;
        if ((v19 & 1) != 0)
          return result;
        if (v10 != v17 || v11 != v18)
          return result;
      }
      v5 += 56;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_C0D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = 0;
    while (1)
    {
      v4 = (_QWORD *)(a1 + 32 + 16 * v3);
      v5 = (_QWORD *)(a2 + 32 + 16 * v3);
      if (*v4 != *v5)
        break;
      v6 = (_QWORD *)v4[1];
      v7 = (_QWORD *)v5[1];
      v8 = v6[2];
      if (v8 != v7[2])
        break;
      if (v8)
        v9 = v6 == v7;
      else
        v9 = 1;
      if (!v9)
      {
        if (v6[4] != v7[4])
          return 0;
        if (v8 != 1)
        {
          if (v6[5] != v7[5])
            return 0;
          v10 = v6 + 6;
          v11 = v7 + 6;
          for (i = v8 - 2; i; --i)
          {
            v14 = *v10++;
            v13 = v14;
            v15 = *v11++;
            if (v13 != v15)
              return 0;
          }
        }
      }
      if (++v3 == v2)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t sub_C1AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (uint64_t *)(a2 + 56);
    for (i = (uint64_t *)(a1 + 56); ; i += 4)
    {
      v5 = *(i - 3);
      v6 = *(i - 2);
      v7 = *(i - 1);
      v8 = *i;
      v9 = *(v3 - 3);
      v10 = *(v3 - 2);
      v11 = *(v3 - 1);
      v12 = *v3;
      v13 = v5 == v9 && v6 == v10;
      if (!v13 && (_stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v9, v10, 0) & 1) == 0)
        break;
      v14 = v7 == v11 && v8 == v12;
      if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v11, v12, 0) & 1) == 0)
        break;
      v3 += 4;
      if (!--v2)
        return 1;
    }
    return 0;
  }
  return 1;
}

void Transport.RecommendationRequest.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::UInt v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *v1;
  v4 = v1[1];
  v5 = *((_BYTE *)v1 + 16);
  v7 = v1[3];
  v6 = v1[4];
  v8 = v1[5];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  Hasher._combine(_:)(v5);
  if (v7)
  {
    Hasher._combine(_:)(1u);
    sub_1BEE0(a1, v7);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v9 = *(_QWORD *)(v6 + 16);
  Hasher._combine(_:)(v9);
  if (v9)
  {
    swift_bridgeObjectRetain(v6);
    v10 = v6 + 80;
    do
    {
      Transport.RecommendationBlockRequest.hash(into:)(a1);
      v10 += 56;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease(v6);
  }
  if (v8)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*(_QWORD *)(v8 + 16));
    v11 = *(_QWORD *)(v8 + 16);
    if (v11)
    {
      swift_bridgeObjectRetain(v8);
      v12 = (_QWORD *)(v8 + 40);
      do
      {
        v13 = *(v12 - 1);
        v14 = *v12;
        swift_bridgeObjectRetain(*v12);
        String.hash(into:)(a1, v13, v14);
        swift_bridgeObjectRelease(v14);
        v12 += 2;
        --v11;
      }
      while (v11);
      swift_bridgeObjectRelease(v8);
    }
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t Transport.RecommendationRequest.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  int v27;
  char v28;

  v3 = sub_5EDC(&qword_1F03B0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v27 = *((unsigned __int8 *)v1 + 16);
  v9 = v1[3];
  v23 = v1[4];
  v24 = v9;
  v22 = v1[5];
  v10 = a1[3];
  v11 = a1[4];
  sub_49F4(a1, v10);
  v12 = sub_1EBB0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Transport.RecommendationRequest.CodingKeys, &type metadata for Transport.RecommendationRequest.CodingKeys, v12, v10, v11);
  LOBYTE(v26[0]) = 0;
  v13 = v25;
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, v26, v3);
  if (!v13)
  {
    v15 = v22;
    v14 = v23;
    LOBYTE(v26[0]) = v27;
    v26[1] = v24;
    v28 = 1;
    v16 = sub_1EBF4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v26, &v28, v3, &type metadata for Transport.UserProfile, v16);
    v26[0] = v14;
    v28 = 2;
    v17 = sub_5EDC(&qword_1F03C8);
    v18 = sub_201AC(&qword_1F03D0, &qword_1F03C8, (void (*)(void))sub_1EC38, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v26, &v28, v3, v17, v18);
    v26[0] = v15;
    v28 = 3;
    v19 = sub_5EDC(&qword_1F03E0);
    v20 = sub_1F298(&qword_1F03E8, &qword_1F03E0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v26, &v28, v3, v19, v20);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Transport.RecommendationRequest.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  __int128 v3;
  uint64_t v4;
  _QWORD v6[11];
  char v7;
  __int128 v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_BYTE *)(v0 + 16);
  v3 = *(_OWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 40);
  v6[9] = *(_QWORD *)v0;
  v6[10] = v1;
  v7 = v2;
  v8 = v3;
  v9 = v4;
  Hasher.init(_seed:)(v6, 0);
  Transport.RecommendationRequest.hash(into:)((uint64_t)v6);
  return Hasher._finalize()();
}

uint64_t Transport.RecommendationRequest.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  int v31;
  char v32;

  v5 = sub_5EDC(&qword_1F03F0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_1EBB0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Transport.RecommendationRequest.CodingKeys, &type metadata for Transport.RecommendationRequest.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_62F8(a1);
    v25 = 0;
  }
  else
  {
    LOBYTE(v30[0]) = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(v30, v5);
    v15 = v14;
    v29 = v12;
    v32 = 1;
    v16 = sub_1EC7C();
    swift_bridgeObjectRetain(v15);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v30, &type metadata for Transport.UserProfile, &v32, v5, &type metadata for Transport.UserProfile, v16);
    v31 = LOBYTE(v30[0]);
    v17 = v30[1];
    v18 = sub_5EDC(&qword_1F03C8);
    v32 = 2;
    v19 = sub_201AC(&qword_1F0400, &qword_1F03C8, (void (*)(void))sub_1ECC0, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v28 = v17;
    swift_bridgeObjectRetain(v17);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v30, v18, &v32, v5, v18, v19);
    v20 = v30[0];
    v26 = sub_5EDC(&qword_1F03E0);
    v32 = 3;
    v21 = sub_1F298(&qword_1F0410, &qword_1F03E0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v27 = v20;
    swift_bridgeObjectRetain(v20);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v30, v26, &v32, v5, v26, v21);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v22 = v30[0];
    swift_bridgeObjectRetain(v30[0]);
    swift_bridgeObjectRelease(0);
    v23 = v28;
    *(_QWORD *)a2 = v29;
    *(_QWORD *)(a2 + 8) = v15;
    *(_BYTE *)(a2 + 16) = v31;
    v24 = v27;
    *(_QWORD *)(a2 + 24) = v23;
    *(_QWORD *)(a2 + 32) = v24;
    *(_QWORD *)(a2 + 40) = v22;
    sub_62F8(a1);
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v23);
    v25 = v15;
  }
  return swift_bridgeObjectRelease(v25);
}

uint64_t sub_CA0C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Transport.RecommendationRequest.init(from:)(a1, a2);
}

uint64_t sub_CA20(_QWORD *a1)
{
  return Transport.RecommendationRequest.encode(to:)(a1);
}

Swift::Int sub_CA38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  __int128 v4;
  uint64_t v5;
  _QWORD v7[11];
  char v8;
  __int128 v9;
  uint64_t v10;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  v4 = *(_OWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 40);
  v7[9] = *(_QWORD *)v1;
  v7[10] = v2;
  v8 = v3;
  v9 = v4;
  v10 = v5;
  Hasher.init(_seed:)(v7, a1);
  Transport.RecommendationRequest.hash(into:)((uint64_t)v7);
  return Hasher._finalize()();
}

uint64_t Transport.StoreAssetRequestDetails.mediaType.getter()
{
  _QWORD *v0;

  return swift_bridgeObjectRetain(*v0);
}

uint64_t Transport.StoreAssetRequestDetails.mediaType.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*v1);
  *v1 = a1;
  return result;
}

uint64_t Transport.RecommendationResponseV2.bookIdToSeriesIdEntries.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
}

uint64_t Transport.RecommendationResponseV2.bookIdToSeriesIdEntries.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 24));
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t Transport.RecommendationResponse.init(recommendationBlockResponses:bookIdToDeduplicationIdEntries:bookIdToSeriesIdEntries:bookAuthors:booksEmbeddings:bookGenres:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
  return result;
}

uint64_t Transport.RecommendationResponse.CodingKeys.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D66A0;
  return sub_E1E8(a1, v2, a2);
}

uint64_t Transport.RecommendationResponse.CodingKeys.init(stringValue:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v5;

  result = Transport.RecommendationResponse.CodingKeys.init(rawValue:)(*(Swift::String *)&a1, &v5);
  *a2 = v5;
  return result;
}

uint64_t Transport.RecommendationResponse.CodingKeys.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_CB7C + 4 * byte_187866[*v0]))(0xD00000000000001CLL, 0x800000000019EBC0);
}

uint64_t sub_CB7C@<X0>(uint64_t a1@<X8>)
{
  return a1 + 7;
}

unint64_t sub_CB94()
{
  return 0xD000000000000017;
}

uint64_t sub_CBB0()
{
  return 0x687475416B6F6F62;
}

uint64_t sub_CBD0()
{
  return 0x626D45736B6F6F62;
}

uint64_t sub_CBF4()
{
  return 0x726E65476B6F6F62;
}

uint64_t Transport.RecommendationResponse.CodingKeys.stringValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_CC48 + 4 * byte_18786C[*v0]))(0xD00000000000001CLL, 0x800000000019EBC0);
}

uint64_t sub_CC48@<X0>(uint64_t a1@<X8>)
{
  return a1 + 7;
}

unint64_t sub_CC60()
{
  return 0xD000000000000017;
}

uint64_t sub_CC7C()
{
  return 0x687475416B6F6F62;
}

uint64_t sub_CC9C()
{
  return 0x626D45736B6F6F62;
}

uint64_t sub_CCC0()
{
  return 0x726E65476B6F6F62;
}

void sub_CCDC(char *a1)
{
  sub_783B0(*a1);
}

void sub_CCE8()
{
  char *v0;

  sub_5256C(*v0);
}

void sub_CCF0(uint64_t a1)
{
  char *v1;

  sub_F87B8(a1, *v1);
}

void sub_CCF8(uint64_t a1)
{
  char *v1;

  sub_15211C(a1, *v1);
}

uint64_t sub_CD00@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Transport.RecommendationResponse.CodingKeys.init(rawValue:)(*a1, a2);
}

uint64_t sub_CD0C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = Transport.RecommendationResponse.CodingKeys.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_CD34(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1ED04();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_CD5C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1ED04();
  return CodingKey.debugDescription.getter(a1, v2);
}

void Transport.RecommendationResponse.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = v1[1];
  v5 = v1[2];
  v4 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  sub_1CED0(a1, *v1);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v3);
    sub_1C5EC(a1, v3);
    swift_bridgeObjectRelease(v3);
    if (v5)
      goto LABEL_3;
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v5)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      sub_1C540(a1, v5);
      if (v4)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  Hasher._combine(_:)(0);
  if (v4)
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    sub_1D0F0(a1, v4);
    if (v7)
      goto LABEL_5;
LABEL_10:
    Hasher._combine(_:)(0);
    if (v6)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_9:
  Hasher._combine(_:)(0);
  if (!v7)
    goto LABEL_10;
LABEL_5:
  Hasher._combine(_:)(1u);
  sub_1C314(a1, v7);
  if (v6)
  {
LABEL_6:
    Hasher._combine(_:)(1u);
    sub_1D0F0(a1, v6);
    return;
  }
LABEL_11:
  Hasher._combine(_:)(0);
}

uint64_t Transport.RecommendationResponse.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;

  v4 = sub_5EDC(&qword_1F0418);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v34 = v1[2];
  v35 = v8;
  v10 = v1[3];
  v32 = v1[4];
  v33 = v10;
  v31 = v1[5];
  v11 = a1[3];
  v12 = a1[4];
  sub_49F4(a1, v11);
  v13 = sub_1ED04();
  v14 = v12;
  v15 = v4;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Transport.RecommendationResponse.CodingKeys, &type metadata for Transport.RecommendationResponse.CodingKeys, v13, v11, v14);
  v37 = v9;
  v36 = 0;
  v16 = sub_5EDC(&qword_1F0428);
  v17 = sub_201AC(&qword_1F0430, &qword_1F0428, (void (*)(void))sub_1ED48, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v37, &v36, v4, v16, v17);
  if (!v2)
  {
    v18 = v33;
    v19 = v34;
    v37 = v35;
    v36 = 1;
    v20 = sub_5EDC(&qword_1F0440);
    v21 = sub_201AC(&qword_1F0448, &qword_1F0440, (void (*)(void))sub_1ED8C, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v37, &v36, v15, v20, v21);
    v37 = v19;
    v36 = 2;
    v22 = sub_5EDC(&qword_1F0458);
    v23 = sub_201AC(&qword_1F0460, &qword_1F0458, (void (*)(void))sub_1EDD0, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v37, &v36, v15, v22, v23);
    v37 = v18;
    v36 = 3;
    v24 = sub_5EDC(&qword_1F0470);
    v25 = sub_201AC(&qword_1F0478, &qword_1F0470, (void (*)(void))sub_1EE14, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v37, &v36, v15, v24, v25);
    v37 = v32;
    v36 = 4;
    v26 = sub_5EDC(&qword_1F0488);
    v27 = sub_201AC(&qword_1F0490, &qword_1F0488, (void (*)(void))sub_1EE58, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v37, &v36, v15, v26, v27);
    v37 = v31;
    v36 = 5;
    v28 = sub_5EDC(&qword_1F04A0);
    v29 = sub_201AC(&qword_1F04A8, &qword_1F04A0, (void (*)(void))sub_1EE9C, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v37, &v36, v15, v28, v29);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v15);
}

Swift::Int Transport.RecommendationResponse.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[10];
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 40);
  v3[9] = *(_QWORD *)v0;
  v4 = *(_OWORD *)(v0 + 8);
  v5 = *(_OWORD *)(v0 + 24);
  v6 = v1;
  Hasher.init(_seed:)(v3, 0);
  Transport.RecommendationResponse.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

uint64_t Transport.RecommendationResponse.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;

  v5 = sub_5EDC(&qword_1F04B8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_1ED04();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Transport.RecommendationResponse.CodingKeys, &type metadata for Transport.RecommendationResponse.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_62F8(a1);
    swift_bridgeObjectRelease(0);
    swift_bridgeObjectRelease(0);
    swift_bridgeObjectRelease(0);
    swift_bridgeObjectRelease(0);
    v34 = 0;
  }
  else
  {
    v12 = sub_5EDC(&qword_1F0428);
    v38 = 0;
    v13 = sub_201AC(&qword_1F04C0, &qword_1F0428, (void (*)(void))sub_1EEE0, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v39, v12, &v38, v5, v12, v13);
    v15 = v39;
    v16 = sub_5EDC(&qword_1F0440);
    v38 = 1;
    v17 = sub_201AC(&qword_1F04D0, &qword_1F0440, (void (*)(void))sub_1EF24, (uint64_t)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v15);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v39, v16, &v38, v5, v16, v17);
    v37 = v15;
    v18 = v39;
    v19 = sub_5EDC(&qword_1F0458);
    v38 = 2;
    v20 = sub_201AC(&qword_1F04E0, &qword_1F0458, (void (*)(void))sub_1EF68, (uint64_t)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v18);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v39, v19, &v38, v5, v19, v20);
    v36 = v18;
    v21 = v39;
    v22 = sub_5EDC(&qword_1F0470);
    v38 = 3;
    v23 = sub_201AC(&qword_1F04F0, &qword_1F0470, (void (*)(void))sub_1EFAC, (uint64_t)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v21);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v39, v22, &v38, v5, v22, v23);
    v35 = a2;
    v24 = v39;
    v25 = sub_5EDC(&qword_1F0488);
    v38 = 4;
    v26 = sub_201AC(&qword_1F0500, &qword_1F0488, (void (*)(void))sub_1EFF0, (uint64_t)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v24);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v39, v25, &v38, v5, v25, v26);
    v27 = v39;
    v28 = sub_5EDC(&qword_1F04A0);
    v38 = 5;
    v29 = sub_201AC(&qword_1F0510, &qword_1F04A0, (void (*)(void))sub_1F034, (uint64_t)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v27);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v39, v28, &v38, v5, v28, v29);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v30 = v39;
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRelease(0);
    v32 = v36;
    v31 = v37;
    v33 = v35;
    *v35 = v37;
    v33[1] = v32;
    v33[2] = v21;
    v33[3] = v24;
    v33[4] = v27;
    v33[5] = v30;
    sub_62F8(a1);
    swift_bridgeObjectRelease(v30);
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v32);
    v34 = v31;
  }
  return swift_bridgeObjectRelease(v34);
}

uint64_t sub_D804@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return Transport.RecommendationResponse.init(from:)(a1, a2);
}

uint64_t sub_D818(_QWORD *a1)
{
  return Transport.RecommendationResponse.encode(to:)(a1);
}

Swift::Int sub_D830(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[10];
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v1 + 40);
  v4[9] = *(_QWORD *)v1;
  v5 = *(_OWORD *)(v1 + 8);
  v6 = *(_OWORD *)(v1 + 24);
  v7 = v2;
  Hasher.init(_seed:)(v4, a1);
  Transport.RecommendationResponse.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

float Transport.SeedBook.affinity.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

void Transport.SeedBook.affinity.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 8) = a1;
}

uint64_t Transport.SeedBook.init(bookId:affinity:maxNumberOfCandidates:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, float a5@<S0>)
{
  *(_QWORD *)a4 = result;
  *(float *)(a4 + 8) = a5;
  *(_QWORD *)(a4 + 16) = a2;
  *(_BYTE *)(a4 + 24) = a3 & 1;
  return result;
}

uint64_t Transport.SeedBook.CodingKeys.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D6750;
  return sub_16848(a1, v2, a2);
}

uint64_t Transport.SeedBook.CodingKeys.init(stringValue:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v5;

  result = Transport.SeedBook.CodingKeys.init(rawValue:)(*(Swift::String *)&a1, &v5);
  *a2 = v5;
  return result;
}

uint64_t Transport.SeedBook.CodingKeys.rawValue.getter()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x7974696E69666661;
  if (*v0 != 1)
    v1 = 0xD000000000000015;
  if (*v0)
    return v1;
  else
    return 0x64496B6F6F62;
}

uint64_t sub_D950(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_77A10(*a1, *a2);
}

Swift::Int sub_D95C()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE800000000000000;
  v3 = 0x7974696E69666661;
  if (v1 != 1)
  {
    v3 = 0xD000000000000015;
    v2 = 0x800000000019EC40;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x64496B6F6F62;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE600000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_D9FC(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE800000000000000;
  v3 = 0x7974696E69666661;
  if (*v1 != 1)
  {
    v3 = 0xD000000000000015;
    v2 = 0x800000000019EC40;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x64496B6F6F62;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE600000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_DA78(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE800000000000000;
  v4 = 0x7974696E69666661;
  if (v2 != 1)
  {
    v4 = 0xD000000000000015;
    v3 = 0x800000000019EC40;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x64496B6F6F62;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE600000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

uint64_t sub_DB14@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Transport.SeedBook.CodingKeys.init(rawValue:)(*a1, a2);
}

void sub_DB20(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE600000000000000;
  v4 = 0xE800000000000000;
  v5 = 0x7974696E69666661;
  if (v2 != 1)
  {
    v5 = 0xD000000000000015;
    v4 = 0x800000000019EC40;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x64496B6F6F62;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_DB80(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1F078();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_DBA8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1F078();
  return CodingKey.debugDescription.getter(a1, v2);
}

void Transport.SeedBook.hash(into:)()
{
  uint64_t v0;
  Swift::UInt32 v1;
  Swift::UInt64 v2;
  int v3;
  Swift::UInt32 v4;

  v1 = *(_DWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(unsigned __int8 *)(v0 + 24);
  Hasher._combine(_:)(*(_QWORD *)v0);
  if ((v1 & 0x7FFFFFFF) != 0)
    v4 = v1;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  if (v3 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
}

uint64_t Transport.SeedBook.encode(to:)(_QWORD *a1)
{
  float *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;

  v4 = sub_5EDC(&qword_1F0520);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)v1;
  v9 = v1[2];
  v18 = *((_QWORD *)v1 + 2);
  v17 = *((unsigned __int8 *)v1 + 24);
  v11 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v11);
  v12 = sub_1F078();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Transport.SeedBook.CodingKeys, &type metadata for Transport.SeedBook.CodingKeys, v12, v11, v10);
  v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v8, &v21, v4);
  if (!v2)
  {
    v13 = v17;
    v14 = v18;
    v20 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v20, v4, v9);
    v19 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v13, &v19, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int Transport.SeedBook.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt32 v2;
  Swift::UInt64 v3;
  int v4;
  Swift::UInt32 v5;
  _QWORD v7[9];

  v1 = *(_QWORD *)v0;
  v2 = *(_DWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(unsigned __int8 *)(v0 + 24);
  Hasher.init(_seed:)(v7, 0);
  Hasher._combine(_:)(v1);
  if ((v2 & 0x7FFFFFFF) != 0)
    v5 = v2;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  if (v4 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  return Hasher._finalize()();
}

uint64_t Transport.SeedBook.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;

  v5 = sub_5EDC(&qword_1F0530);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_1F078();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Transport.SeedBook.CodingKeys, &type metadata for Transport.SeedBook.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v22 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v22, v5);
    v21 = 1;
    KeyedDecodingContainer.decode(_:forKey:)(&v21, v5);
    v14 = v13;
    v20 = 2;
    v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v20, v5);
    v18 = v17;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_QWORD *)a2 = v12;
    *(_DWORD *)(a2 + 8) = v14;
    *(_QWORD *)(a2 + 16) = v16;
    *(_BYTE *)(a2 + 24) = v18 & 1;
  }
  return sub_62F8(a1);
}

uint64_t sub_DFD8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Transport.SeedBook.init(from:)(a1, a2);
}

uint64_t sub_DFEC(_QWORD *a1)
{
  return Transport.SeedBook.encode(to:)(a1);
}

Swift::Int sub_E004(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt64 v2;
  Swift::UInt32 v3;
  Swift::UInt64 v4;
  int v5;
  Swift::UInt32 v6;
  _QWORD v8[9];

  v2 = *(_QWORD *)v1;
  v3 = *(_DWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(unsigned __int8 *)(v1 + 24);
  Hasher.init(_seed:)(v8, a1);
  Hasher._combine(_:)(v2);
  if ((v3 & 0x7FFFFFFF) != 0)
    v6 = v3;
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  if (v5 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }
  return Hasher._finalize()();
}

uint64_t Transport.RecommendedItem.authorId.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Transport.RecommendedItem.authorId.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t Transport.RecommendedItem.bookId.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t Transport.RecommendedItem.bookId.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t Transport.RecommendedItem.seriesId.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t Transport.RecommendedItem.seriesId.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = result;
  *(_BYTE *)(v2 + 32) = a2 & 1;
  return result;
}

unint64_t Transport.RecommendedItem.copurchaseAffinity.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 36) | ((unint64_t)*(unsigned __int8 *)(v0 + 40) << 32);
}

uint64_t Transport.RecommendedItem.copurchaseAffinity.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 36) = result;
  *(_BYTE *)(v1 + 40) = BYTE4(result) & 1;
  return result;
}

uint64_t (*Transport.RecommendedItem.copurchaseAffinity.modify())()
{
  return AuthorRecommendationSource.id.getter;
}

unint64_t Transport.RecommendedItem.contentSimilarityAffinity.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 44) | ((unint64_t)*(unsigned __int8 *)(v0 + 48) << 32);
}

uint64_t Transport.RecommendedItem.contentSimilarityAffinity.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 44) = result;
  *(_BYTE *)(v1 + 48) = BYTE4(result) & 1;
  return result;
}

uint64_t (*Transport.RecommendedItem.contentSimilarityAffinity.modify())()
{
  return AuthorRecommendationSource.id.getter;
}

uint64_t Transport.RecommendationResponseV2.bookGenres.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 56));
}

uint64_t Transport.RecommendationResponseV2.bookGenres.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 56));
  *(_QWORD *)(v1 + 56) = a1;
  return result;
}

uint64_t (*Transport.RecommendationResponseV2.bookGenres.modify())()
{
  return AuthorRecommendationSource.id.getter;
}

uint64_t Transport.RecommendedItem.init(authorId:bookId:seriesId:copurchaseAffinity:contentSimilarityAffinity:inferredFromAffinityForBookIds:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  *(_QWORD *)a9 = result;
  *(_BYTE *)(a9 + 8) = a2 & 1;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_BYTE *)(a9 + 32) = a5 & 1;
  *(_DWORD *)(a9 + 36) = a6;
  *(_BYTE *)(a9 + 40) = BYTE4(a6) & 1;
  *(_DWORD *)(a9 + 44) = a7;
  *(_BYTE *)(a9 + 48) = BYTE4(a7) & 1;
  *(_QWORD *)(a9 + 56) = a8;
  return result;
}

uint64_t Transport.RecommendedItem.CodingKeys.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D67B8;
  return sub_E1E8(a1, v2, a2);
}

uint64_t sub_E1E8@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X2>, char *a3@<X8>)
{
  void *object;
  Swift::String v4;
  unint64_t v7;
  uint64_t result;
  char v9;

  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  v7 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(object);
  v9 = 6;
  if (v7 < 6)
    v9 = v7;
  *a3 = v9;
  return result;
}

uint64_t Transport.RecommendedItem.CodingKeys.init(stringValue:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v5;

  result = Transport.RecommendedItem.CodingKeys.init(rawValue:)(*(Swift::String *)&a1, &v5);
  *a2 = v5;
  return result;
}

void Transport.RecommendedItem.CodingKeys.init(intValue:)(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t Transport.RecommendedItem.CodingKeys.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_E2AC + 4 * byte_187872[*v0]))(0x6449726F68747561, 0xE800000000000000);
}

uint64_t sub_E2AC()
{
  return 0x64496B6F6F62;
}

uint64_t sub_E2C0()
{
  return 0x6449736569726573;
}

unint64_t sub_E2D4()
{
  return 0xD000000000000012;
}

unint64_t sub_E2F0()
{
  return 0xD000000000000019;
}

uint64_t Transport.RecommendedItem.CodingKeys.stringValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_E358 + 4 * byte_187878[*v0]))(0x6449726F68747561, 0xE800000000000000);
}

uint64_t sub_E358()
{
  return 0x64496B6F6F62;
}

uint64_t sub_E36C()
{
  return 0x6449736569726573;
}

unint64_t sub_E380()
{
  return 0xD000000000000012;
}

unint64_t sub_E39C()
{
  return 0xD000000000000019;
}

void sub_E3D4(char *a1)
{
  sub_78A10(*a1);
}

void sub_E3E0()
{
  char *v0;

  sub_52688(*v0);
}

void sub_E3E8(uint64_t a1)
{
  char *v1;

  sub_F88A8(a1, *v1);
}

void sub_E3F0(uint64_t a1)
{
  char *v1;

  sub_1523D8(a1, *v1);
}

uint64_t sub_E3F8@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Transport.RecommendedItem.CodingKeys.init(rawValue:)(*a1, a2);
}

uint64_t sub_E404@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = Transport.RecommendedItem.CodingKeys.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_E42C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1F0BC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_E454(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1F0BC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Transport.RecommendedItem.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  int v6;
  Swift::UInt32 v7;
  int v8;
  Swift::UInt32 v9;
  int v10;
  uint64_t v11;
  Swift::UInt64 v12;
  Swift::UInt32 v13;
  Swift::UInt32 v14;

  v2 = v1;
  v5 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  v6 = *(unsigned __int8 *)(v2 + 32);
  v7 = *(_DWORD *)(v2 + 36);
  v8 = *(unsigned __int8 *)(v2 + 40);
  v9 = *(_DWORD *)(v2 + 44);
  v10 = *(unsigned __int8 *)(v2 + 48);
  v11 = *(_QWORD *)(v2 + 56);
  if (*(_BYTE *)(v2 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v12 = *(_QWORD *)v2;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v12);
  }
  Hasher._combine(_:)(v5);
  if (v6)
  {
    Hasher._combine(_:)(0);
    if (!v8)
      goto LABEL_6;
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
    if (!v8)
    {
LABEL_6:
      Hasher._combine(_:)(1u);
      if ((v7 & 0x7FFFFFFF) != 0)
        v13 = v7;
      else
        v13 = 0;
      Hasher._combine(_:)(v13);
      if (!v10)
        goto LABEL_10;
LABEL_16:
      Hasher._combine(_:)(0);
      goto LABEL_17;
    }
  }
  Hasher._combine(_:)(0);
  if (v10)
    goto LABEL_16;
LABEL_10:
  Hasher._combine(_:)(1u);
  if ((v9 & 0x7FFFFFFF) != 0)
    v14 = v9;
  else
    v14 = 0;
  Hasher._combine(_:)(v14);
LABEL_17:
  swift_bridgeObjectRetain(v11);
  sub_1BC5C(a1, v11);
  return swift_bridgeObjectRelease(v11);
}

uint64_t Transport.RecommendedItem.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  char v33[4];

  v3 = sub_5EDC(&qword_1F0538);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *((unsigned __int8 *)v1 + 8);
  v9 = v1[2];
  v28 = v1[3];
  v29 = v9;
  v32 = *((unsigned __int8 *)v1 + 32);
  v27 = *((unsigned int *)v1 + 9);
  v26 = *((unsigned __int8 *)v1 + 40);
  v25 = *((unsigned int *)v1 + 11);
  v24 = *((unsigned __int8 *)v1 + 48);
  v23 = v1[7];
  v10 = a1[3];
  v11 = a1[4];
  sub_49F4(a1, v10);
  v12 = sub_1F0BC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Transport.RecommendedItem.CodingKeys, &type metadata for Transport.RecommendedItem.CodingKeys, v12, v10, v11);
  LOBYTE(v31) = 0;
  v13 = v30;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v7, v8, &v31, v3);
  if (v13)
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v14 = v32;
  v16 = v27;
  v15 = v28;
  v17 = v26;
  LOBYTE(v31) = 1;
  KeyedEncodingContainer.encode(_:forKey:)(v29, &v31, v3);
  LOBYTE(v31) = 2;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v14, &v31, v3);
  LOBYTE(v31) = 3;
  v33[0] = v17;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16 | ((unint64_t)v17 << 32), &v31, v3);
  LOBYTE(v31) = 4;
  v33[0] = v24;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25 | ((unint64_t)v24 << 32), &v31, v3);
  v18 = v4;
  v31 = v23;
  v33[0] = 5;
  v19 = sub_5EDC(&qword_1F0548);
  v20 = sub_201AC(&qword_1F0550, &qword_1F0548, (void (*)(void))sub_1F100, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, v33, v3, v19, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v6, v3);
}

Swift::Int Transport.RecommendedItem.hashValue.getter()
{
  uint64_t v0;
  char v1;
  char v2;
  int v3;
  char v4;
  int v5;
  char v6;
  uint64_t v7;
  _QWORD v9[10];
  char v10;
  __int128 v11;
  char v12;
  int v13;
  char v14;
  int v15;
  char v16;
  uint64_t v17;

  v1 = *(_BYTE *)(v0 + 8);
  v2 = *(_BYTE *)(v0 + 32);
  v3 = *(_DWORD *)(v0 + 36);
  v4 = *(_BYTE *)(v0 + 40);
  v5 = *(_DWORD *)(v0 + 44);
  v6 = *(_BYTE *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 56);
  v9[9] = *(_QWORD *)v0;
  v10 = v1;
  v11 = *(_OWORD *)(v0 + 16);
  v12 = v2;
  v13 = v3;
  v14 = v4;
  v15 = v5;
  v16 = v6;
  v17 = v7;
  Hasher.init(_seed:)(v9, 0);
  Transport.RecommendedItem.hash(into:)((uint64_t)v9);
  return Hasher._finalize()();
}

uint64_t Transport.RecommendedItem.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;

  v5 = sub_5EDC(&qword_1F0560);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_1F0BC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Transport.RecommendedItem.CodingKeys, &type metadata for Transport.RecommendedItem.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_62F8(a1);
  v33 = 0;
  v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v33, v5);
  v14 = v13;
  v32 = 1;
  v26 = KeyedDecodingContainer.decode(_:forKey:)(&v32, v5);
  v31 = 2;
  v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v31, v5);
  v24 = v16;
  v25 = v15;
  v30 = 3;
  v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v30, v5);
  v29 = 4;
  v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v29, v5);
  v17 = sub_5EDC(&qword_1F0548);
  v28 = 5;
  v18 = sub_201AC(&qword_1F0568, &qword_1F0548, (void (*)(void))sub_1F144, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v27, v17, &v28, v5, v17, v18);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = v14 & 1;
  v19 = v27;
  v20 = v25;
  *(_QWORD *)(a2 + 16) = v26;
  *(_QWORD *)(a2 + 24) = v20;
  *(_BYTE *)(a2 + 32) = v24 & 1;
  BYTE4(v20) = BYTE4(v23);
  *(_DWORD *)(a2 + 36) = v23;
  *(_BYTE *)(a2 + 40) = BYTE4(v20) & 1;
  BYTE4(v20) = BYTE4(v22);
  *(_DWORD *)(a2 + 44) = v22;
  *(_BYTE *)(a2 + 48) = BYTE4(v20) & 1;
  *(_QWORD *)(a2 + 56) = v19;
  swift_bridgeObjectRetain(v19);
  sub_62F8(a1);
  return swift_bridgeObjectRelease(v19);
}

uint64_t sub_EB24@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Transport.RecommendedItem.init(from:)(a1, a2);
}

uint64_t sub_EB38(_QWORD *a1)
{
  return Transport.RecommendedItem.encode(to:)(a1);
}

Swift::Int sub_EB50(uint64_t a1)
{
  uint64_t v1;
  char v2;
  char v3;
  int v4;
  char v5;
  int v6;
  char v7;
  uint64_t v8;
  _QWORD v10[10];
  char v11;
  __int128 v12;
  char v13;
  int v14;
  char v15;
  int v16;
  char v17;
  uint64_t v18;

  v2 = *(_BYTE *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 32);
  v4 = *(_DWORD *)(v1 + 36);
  v5 = *(_BYTE *)(v1 + 40);
  v6 = *(_DWORD *)(v1 + 44);
  v7 = *(_BYTE *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);
  v10[9] = *(_QWORD *)v1;
  v11 = v2;
  v12 = *(_OWORD *)(v1 + 16);
  v13 = v3;
  v14 = v4;
  v15 = v5;
  v16 = v6;
  v17 = v7;
  v18 = v8;
  Hasher.init(_seed:)(v10, a1);
  Transport.RecommendedItem.hash(into:)((uint64_t)v10);
  return Hasher._finalize()();
}

uint64_t Transport.UserProfileV2.CodingKeys.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D6868;
  return sub_12620(a1, v2, a2);
}

uint64_t Transport.UserProfileV2.CodingKeys.init(stringValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D68B8;
  return sub_12688(a1, v2, a2);
}

uint64_t Transport.UserProfileV2.CodingKeys.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x6B6F6F4264656573;
  else
    return 0x746963696C707865;
}

uint64_t sub_EC38(char *a1, char *a2)
{
  return sub_78C68(*a1, *a2);
}

Swift::Int sub_EC44()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x6B6F6F4264656573;
  else
    v2 = 0x746963696C707865;
  if (v1)
    v3 = 0xE900000000000073;
  else
    v3 = 0xEF6465776F6C6C41;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_ECD4(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x6B6F6F4264656573;
  else
    v2 = 0x746963696C707865;
  if (*v1)
    v3 = 0xE900000000000073;
  else
    v3 = 0xEF6465776F6C6C41;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_ED40(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x6B6F6F4264656573;
  else
    v3 = 0x746963696C707865;
  if (v2)
    v4 = 0xE900000000000073;
  else
    v4 = 0xEF6465776F6C6C41;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_EDCC@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Transport.UserProfileV2.CodingKeys.init(rawValue:)(*a1, a2);
}

void sub_EDD8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x746963696C707865;
  if (*v1)
    v2 = 0x6B6F6F4264656573;
  v3 = 0xEF6465776F6C6C41;
  if (*v1)
    v3 = 0xE900000000000073;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_EE2C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1F188();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_EE54(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1F188();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t static Transport.UserProfileV2.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2)
    return sub_96CC(*((_QWORD *)a1 + 1), *((_QWORD *)a2 + 1));
  else
    return 0;
}

void Transport.UserProfileV2.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  Hasher._combine(_:)(*(_BYTE *)v1);
  sub_1C19C(a1, v3);
}

uint64_t Transport.UserProfileV2.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v4 = sub_5EDC(&qword_1F0578);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v15 = *((_QWORD *)v1 + 1);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_1F188();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Transport.UserProfileV2.CodingKeys, &type metadata for Transport.UserProfileV2.CodingKeys, v11, v9, v10);
  v18 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v8, &v18, v4);
  if (!v2)
  {
    v16 = v15;
    v17 = 1;
    v12 = sub_5EDC(&qword_1F0588);
    v13 = sub_201AC(&qword_1F0590, &qword_1F0588, (void (*)(void))sub_1F1CC, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, &v17, v4, v12, v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int Transport.UserProfileV2.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt8 v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *(_BYTE *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)(v4, 0);
  Hasher._combine(_:)(v1);
  sub_1C19C((uint64_t)v4, v2);
  return Hasher._finalize()();
}

uint64_t Transport.UserProfileV2.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v5 = sub_5EDC(&qword_1F05A0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_1F188();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Transport.UserProfileV2.CodingKeys, &type metadata for Transport.UserProfileV2.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v20 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v20, v5);
    v13 = sub_5EDC(&qword_1F0588);
    v19 = 1;
    v14 = sub_201AC(&qword_1F05A8, &qword_1F0588, (void (*)(void))sub_1F210, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v18, v13, &v19, v5, v13, v14);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v15 = v18;
    *(_BYTE *)a2 = v12 & 1;
    *(_QWORD *)(a2 + 8) = v15;
  }
  return sub_62F8(a1);
}

uint64_t sub_F238@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Transport.UserProfileV2.init(from:)(a1, a2);
}

uint64_t sub_F24C(_QWORD *a1)
{
  return Transport.UserProfileV2.encode(to:)(a1);
}

void sub_F260()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt v2;
  unsigned __int8 *v3;
  Swift::UInt32 v4;
  Swift::UInt64 v5;
  int v6;
  Swift::UInt32 v7;

  v1 = *(_QWORD *)(v0 + 8);
  Hasher._combine(_:)(*(_BYTE *)v0);
  v2 = *(_QWORD *)(v1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    v3 = (unsigned __int8 *)(v1 + 56);
    do
    {
      v4 = *((_DWORD *)v3 - 4);
      v5 = *((_QWORD *)v3 - 1);
      v6 = *v3;
      Hasher._combine(_:)(*((_QWORD *)v3 - 3));
      if ((v4 & 0x7FFFFFFF) != 0)
        v7 = v4;
      else
        v7 = 0;
      Hasher._combine(_:)(v7);
      if (v6 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v5);
      }
      v3 += 32;
      --v2;
    }
    while (v2);
  }
}

Swift::Int sub_F304(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt8 v2;
  uint64_t v3;
  _QWORD v5[9];

  v2 = *(_BYTE *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  Hasher.init(_seed:)(v5, a1);
  Hasher._combine(_:)(v2);
  sub_1C19C((uint64_t)v5, v3);
  return Hasher._finalize()();
}

uint64_t Transport.BookEmbeddings.init(bookId:embeddings:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = a2 & 1;
  *(_QWORD *)(a4 + 16) = a3;
  return result;
}

uint64_t Transport.BookEmbeddings.CodingKeys.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D6908;
  return sub_12620(a1, v2, a2);
}

uint64_t Transport.BookEmbeddings.CodingKeys.init(stringValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D6958;
  return sub_12688(a1, v2, a2);
}

uint64_t Transport.BookEmbeddings.CodingKeys.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E69646465626D65;
  else
    return 0x64496B6F6F62;
}

uint64_t sub_F3C4(char *a1, char *a2)
{
  return sub_78BC4(*a1, *a2);
}

Swift::Int sub_F3D0()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x6E69646465626D65;
  else
    v2 = 0x64496B6F6F62;
  if (v1)
    v3 = 0xEA00000000007367;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_F450(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x6E69646465626D65;
  else
    v2 = 0x64496B6F6F62;
  if (*v1)
    v3 = 0xEA00000000007367;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_F4AC(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x6E69646465626D65;
  else
    v3 = 0x64496B6F6F62;
  if (v2)
    v4 = 0xEA00000000007367;
  else
    v4 = 0xE600000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_F528@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Transport.BookEmbeddings.CodingKeys.init(rawValue:)(*a1, a2);
}

void sub_F534(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x64496B6F6F62;
  if (*v1)
    v2 = 0x6E69646465626D65;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xEA00000000007367;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_F578(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1F254();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F5A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1F254();
  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL static Transport.BookEmbeddings.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1E1CC(a1, a2, (uint64_t (*)(void))sub_B230);
}

void Transport.BookEmbeddings.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  Swift::UInt64 v5;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 16);
  if (*(_BYTE *)(v2 + 8) == 1)
  {
    Hasher._combine(_:)(0);
    if (v4)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      sub_1C148(a1, v4);
      return;
    }
  }
  else
  {
    v5 = *(_QWORD *)v2;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
    if (v4)
      goto LABEL_3;
  }
  Hasher._combine(_:)(0);
}

uint64_t Transport.BookEmbeddings.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v4 = sub_5EDC(&qword_1F05B8);
  v17 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *((unsigned __int8 *)v1 + 8);
  v16 = v1[2];
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_1F254();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Transport.BookEmbeddings.CodingKeys, &type metadata for Transport.BookEmbeddings.CodingKeys, v11, v9, v10);
  v20 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v7, v8, &v20, v4);
  if (!v2)
  {
    v18 = v16;
    v19 = 1;
    v12 = sub_5EDC(&qword_1F05C8);
    v13 = sub_1F298(&qword_1F05D0, &qword_1F05C8, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v18, &v19, v4, v12, v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v6, v4);
}

Swift::Int Transport.BookEmbeddings.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt64 v1;
  int v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  Hasher.init(_seed:)(v5, 0);
  if (v2 != 1)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
    if (v3)
      goto LABEL_3;
LABEL_5:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  if (!v3)
    goto LABEL_5;
LABEL_3:
  Hasher._combine(_:)(1u);
  sub_1C148((uint64_t)v5, v3);
  return Hasher._finalize()();
}

uint64_t Transport.BookEmbeddings.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;
  char v24;

  v5 = sub_5EDC(&qword_1F05D8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_1F254();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Transport.BookEmbeddings.CodingKeys, &type metadata for Transport.BookEmbeddings.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_62F8(a1);
    v17 = 0;
  }
  else
  {
    v24 = 0;
    v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v24, v5);
    v14 = v13;
    v21 = a2;
    v15 = sub_5EDC(&qword_1F05C8);
    v23 = 1;
    v16 = sub_1F298(&qword_1F05E0, &qword_1F05C8, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v22, v15, &v23, v5, v15, v16);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v19 = v22;
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRelease(0);
    v20 = v21;
    *v21 = v12;
    *((_BYTE *)v20 + 8) = v14 & 1;
    v20[2] = v19;
    sub_62F8(a1);
    v17 = v19;
  }
  return swift_bridgeObjectRelease(v17);
}

uint64_t sub_FA54@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Transport.BookEmbeddings.init(from:)(a1, a2);
}

uint64_t sub_FA68(_QWORD *a1)
{
  return Transport.BookEmbeddings.encode(to:)(a1);
}

Swift::Int sub_FA80(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt64 v2;
  int v3;
  uint64_t v4;
  _QWORD v6[9];

  v2 = *(_QWORD *)v1;
  v3 = *(unsigned __int8 *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  Hasher.init(_seed:)(v6, a1);
  if (v3 != 1)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
    if (v4)
      goto LABEL_3;
LABEL_5:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  if (!v4)
    goto LABEL_5;
LABEL_3:
  Hasher._combine(_:)(1u);
  sub_1C148((uint64_t)v6, v4);
  return Hasher._finalize()();
}

uint64_t Transport.InferredFromInfo.CodingKeys.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D69A8;
  return sub_12620(a1, v2, a2);
}

uint64_t Transport.InferredFromInfo.CodingKeys.init(stringValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D69F8;
  return sub_12688(a1, v2, a2);
}

uint64_t Transport.InferredFromInfo.CodingKeys.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C6F646F6874656DLL;
  else
    return 0x64496B6F6F62;
}

uint64_t sub_FB78(char *a1, char *a2)
{
  return sub_78964(*a1, *a2);
}

Swift::Int sub_FB84()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x6C6F646F6874656DLL;
  else
    v2 = 0x64496B6F6F62;
  if (v1)
    v3 = 0xED0000736569676FLL;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_FC0C(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x6C6F646F6874656DLL;
  else
    v2 = 0x64496B6F6F62;
  if (*v1)
    v3 = 0xED0000736569676FLL;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_FC70(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x6C6F646F6874656DLL;
  else
    v3 = 0x64496B6F6F62;
  if (v2)
    v4 = 0xED0000736569676FLL;
  else
    v4 = 0xE600000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_FCF4@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Transport.InferredFromInfo.CodingKeys.init(rawValue:)(*a1, a2);
}

void sub_FD00(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x64496B6F6F62;
  if (*v1)
    v2 = 0x6C6F646F6874656DLL;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xED0000736569676FLL;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_FD4C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1F2F4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_FD74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1F2F4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void Transport.InferredFromInfo.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  Swift::UInt64 v5;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 16);
  if (*(_BYTE *)(v2 + 8) == 1)
  {
    Hasher._combine(_:)(0);
    if (v4)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v4);
      sub_1BDF8(a1, v4);
      swift_bridgeObjectRelease(v4);
      return;
    }
  }
  else
  {
    v5 = *(_QWORD *)v2;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
    if (v4)
      goto LABEL_3;
  }
  Hasher._combine(_:)(0);
}

uint64_t Transport.InferredFromInfo.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v4 = sub_5EDC(&qword_1F05E8);
  v17 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *((unsigned __int8 *)v1 + 8);
  v16 = v1[2];
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_1F2F4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Transport.InferredFromInfo.CodingKeys, &type metadata for Transport.InferredFromInfo.CodingKeys, v11, v9, v10);
  v20 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v7, v8, &v20, v4);
  if (!v2)
  {
    v18 = v16;
    v19 = 1;
    v12 = sub_5EDC(&qword_1F05F8);
    v13 = sub_201AC(&qword_1F0600, &qword_1F05F8, (void (*)(void))sub_1F338, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v18, &v19, v4, v12, v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v6, v4);
}

Swift::Int Transport.InferredFromInfo.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt64 v1;
  int v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  Hasher.init(_seed:)(v5, 0);
  if (v2 != 1)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
    if (v3)
      goto LABEL_3;
LABEL_5:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  if (!v3)
    goto LABEL_5;
LABEL_3:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain(v3);
  sub_1BDF8((uint64_t)v5, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t Transport.InferredFromInfo.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;
  char v24;

  v5 = sub_5EDC(&qword_1F0610);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_1F2F4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Transport.InferredFromInfo.CodingKeys, &type metadata for Transport.InferredFromInfo.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_62F8(a1);
    v17 = 0;
  }
  else
  {
    v24 = 0;
    v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v24, v5);
    v14 = v13;
    v21 = a2;
    v15 = sub_5EDC(&qword_1F05F8);
    v23 = 1;
    v16 = sub_201AC(&qword_1F0618, &qword_1F05F8, (void (*)(void))sub_1F37C, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v22, v15, &v23, v5, v15, v16);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v19 = v22;
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRelease(0);
    v20 = v21;
    *v21 = v12;
    *((_BYTE *)v20 + 8) = v14 & 1;
    v20[2] = v19;
    sub_62F8(a1);
    v17 = v19;
  }
  return swift_bridgeObjectRelease(v17);
}

uint64_t sub_1022C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Transport.InferredFromInfo.init(from:)(a1, a2);
}

uint64_t sub_10240(_QWORD *a1)
{
  return Transport.InferredFromInfo.encode(to:)(a1);
}

Swift::Int sub_10258(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt64 v2;
  int v3;
  uint64_t v4;
  _QWORD v6[9];

  v2 = *(_QWORD *)v1;
  v3 = *(unsigned __int8 *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  Hasher.init(_seed:)(v6, a1);
  if (v3 != 1)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
    if (v4)
      goto LABEL_3;
LABEL_5:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  if (!v4)
    goto LABEL_5;
LABEL_3:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain(v4);
  sub_1BDF8((uint64_t)v6, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t Transport.BookAuthors.CodingKeys.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D6A48;
  return sub_12620(a1, v2, a2);
}

uint64_t Transport.BookAuthors.CodingKeys.init(stringValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D6A98;
  return sub_12688(a1, v2, a2);
}

uint64_t Transport.BookAuthors.CodingKeys.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x73726F68747561;
  else
    return 0x64496B6F6F62;
}

uint64_t sub_10354(char *a1, char *a2)
{
  return sub_78EE8(*a1, *a2);
}

Swift::Int sub_10360()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x73726F68747561;
  else
    v2 = 0x64496B6F6F62;
  if (v1)
    v3 = 0xE700000000000000;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_103DC(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x73726F68747561;
  else
    v2 = 0x64496B6F6F62;
  if (*v1)
    v3 = 0xE700000000000000;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10434(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x73726F68747561;
  else
    v3 = 0x64496B6F6F62;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE600000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_104AC@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Transport.BookAuthors.CodingKeys.init(rawValue:)(*a1, a2);
}

void sub_104B8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x64496B6F6F62;
  if (*v1)
    v2 = 0x73726F68747561;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xE700000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_104F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1F3C0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10520(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1F3C0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Transport.BookAuthors.encode(to:)(_QWORD *a1)
{
  return sub_10894(a1, &qword_1F0628, (uint64_t (*)(void))sub_1F3C0, (uint64_t)&type metadata for Transport.BookAuthors.CodingKeys);
}

uint64_t Transport.BookAuthors.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10AA4(a1, &qword_1F0638, (uint64_t (*)(void))sub_1F3C0, (uint64_t)&type metadata for Transport.BookAuthors.CodingKeys, a2);
}

uint64_t sub_105AC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Transport.BookAuthors.init(from:)(a1, a2);
}

uint64_t sub_105C0(_QWORD *a1)
{
  return Transport.BookAuthors.encode(to:)(a1);
}

BooksPersonalization::Transport::Server __swiftcall Transport.Server.init(url:)(BooksPersonalization::Transport::Server url)
{
  BooksPersonalization::Transport::Server *v1;

  *v1 = url;
  return url;
}

uint64_t Transport.BookGenres.CodingKeys.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D6AE8;
  return sub_12620(a1, v2, a2);
}

uint64_t Transport.BookGenres.CodingKeys.init(stringValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D6B38;
  return sub_12688(a1, v2, a2);
}

uint64_t Transport.BookGenres.CodingKeys.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x7365726E6567;
  else
    return 0x64496B6F6F62;
}

uint64_t sub_1062C(char *a1, char *a2)
{
  return sub_78F88(*a1, *a2);
}

Swift::Int sub_10638()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4, 0);
  if (v1)
    v2 = 0x7365726E6567;
  else
    v2 = 0x64496B6F6F62;
  String.hash(into:)(v4, v2, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

uint64_t sub_106A4(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;

  if (*v1)
    v2 = 0x7365726E6567;
  else
    v2 = 0x64496B6F6F62;
  String.hash(into:)(a1, v2, 0xE600000000000000);
  return swift_bridgeObjectRelease(0xE600000000000000);
}

Swift::Int sub_106E4(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  _QWORD v5[9];

  v2 = *v1;
  Hasher.init(_seed:)(v5, a1);
  if (v2)
    v3 = 0x7365726E6567;
  else
    v3 = 0x64496B6F6F62;
  String.hash(into:)(v5, v3, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1074C@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Transport.BookGenres.CodingKeys.init(rawValue:)(*a1, a2);
}

void sub_10758(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 0x64496B6F6F62;
  if (*v1)
    v2 = 0x7365726E6567;
  *a1 = v2;
  a1[1] = 0xE600000000000000;
}

uint64_t sub_1078C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1F404();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_107B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1F404();
  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL _s20BooksPersonalization9TransportO11BookAuthorsV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2 && sub_B454(*(_QWORD **)(a1 + 8), *(_QWORD **)(a2 + 8));
}

void Book.Metadata.GenreTreeNode.hash(into:)()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  uint64_t v2;
  Swift::UInt64 *v3;
  Swift::UInt64 v4;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(*(_QWORD *)(v1 + 16));
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = (Swift::UInt64 *)(v1 + 32);
    do
    {
      v4 = *v3++;
      Hasher._combine(_:)(v4);
      --v2;
    }
    while (v2);
  }
}

uint64_t Transport.BookGenres.encode(to:)(_QWORD *a1)
{
  return sub_10894(a1, &qword_1F0640, (uint64_t (*)(void))sub_1F404, (uint64_t)&type metadata for Transport.BookGenres.CodingKeys);
}

uint64_t sub_10894(_QWORD *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;

  v8 = sub_5EDC(a2);
  v20 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v4;
  v19[0] = v4[1];
  v13 = a1[3];
  v12 = a1[4];
  sub_49F4(a1, v13);
  v14 = a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)(a4, a4, v14, v13, v12);
  v23 = 0;
  v15 = v19[1];
  KeyedEncodingContainer.encode(_:forKey:)(v11, &v23, v8);
  if (!v15)
  {
    v21 = v19[0];
    v22 = 1;
    v16 = sub_5EDC(&qword_1F0300);
    v17 = sub_1F298(&qword_1F0308, &qword_1F0300, (uint64_t)&protocol witness table for Int64, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v22, v8, v16, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v10, v8);
}

Swift::Int Book.Metadata.GenreTreeNode.hashValue.getter()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  uint64_t v3;
  Swift::UInt64 *v4;
  Swift::UInt64 v5;
  _QWORD v7[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v7, 0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(*(_QWORD *)(v2 + 16));
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = (Swift::UInt64 *)(v2 + 32);
    do
    {
      v5 = *v4++;
      Hasher._combine(_:)(v5);
      --v3;
    }
    while (v3);
  }
  return Hasher._finalize()();
}

uint64_t Transport.BookGenres.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10AA4(a1, &qword_1F0650, (uint64_t (*)(void))sub_1F404, (uint64_t)&type metadata for Transport.BookGenres.CodingKeys, a2);
}

uint64_t sub_10AA4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;

  v24 = a5;
  v25 = sub_5EDC(a2);
  v9 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_49F4(a1, v12);
  v14 = a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)(a4, a4, v14, v12, v13);
  if (!v5)
  {
    v15 = v9;
    v17 = v24;
    v16 = v25;
    v28 = 0;
    v18 = KeyedDecodingContainer.decode(_:forKey:)(&v28, v25);
    v19 = sub_5EDC(&qword_1F0300);
    v27 = 1;
    v20 = sub_1F298(&qword_1F0318, &qword_1F0300, (uint64_t)&protocol witness table for Int64, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v26, v19, &v27, v16, v19, v20);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v11, v16);
    v21 = v26;
    *v17 = v18;
    v17[1] = v21;
  }
  return sub_62F8(a1);
}

uint64_t sub_10C3C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Transport.BookGenres.init(from:)(a1, a2);
}

uint64_t sub_10C50(_QWORD *a1)
{
  return Transport.BookGenres.encode(to:)(a1);
}

void sub_10C64()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt v2;
  Swift::UInt64 *v3;
  Swift::UInt64 v4;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  v2 = *(_QWORD *)(v1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    v3 = (Swift::UInt64 *)(v1 + 32);
    do
    {
      v4 = *v3++;
      Hasher._combine(_:)(v4);
      --v2;
    }
    while (v2);
  }
}

Swift::Int sub_10CB8(uint64_t a1)
{
  Swift::UInt64 *v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt v4;
  Swift::UInt64 *v5;
  Swift::UInt64 v6;
  _QWORD v8[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v8, a1);
  Hasher._combine(_:)(v2);
  v4 = *(_QWORD *)(v3 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v5 = (Swift::UInt64 *)(v3 + 32);
    do
    {
      v6 = *v5++;
      Hasher._combine(_:)(v6);
      --v4;
    }
    while (v4);
  }
  return Hasher._finalize()();
}

uint64_t Transport.Recommend.Input.xAppleUserExperimentIds.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t Transport.Recommend.Input.xAppleUserExperimentIds.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 24));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t Transport.BookIdToDeduplicationIdEntry.init(bookId:deduplicationId:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(_QWORD *)a5 = result;
  *(_BYTE *)(a5 + 8) = a2 & 1;
  *(_QWORD *)(a5 + 16) = a3;
  *(_QWORD *)(a5 + 24) = a4;
  return result;
}

uint64_t Transport.BookIdToDeduplicationIdEntry.CodingKeys.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D6B88;
  return sub_12620(a1, v2, a2);
}

uint64_t Transport.BookIdToDeduplicationIdEntry.CodingKeys.init(stringValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D6BD8;
  return sub_12688(a1, v2, a2);
}

uint64_t Transport.BookIdToDeduplicationIdEntry.CodingKeys.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x63696C7075646564;
  else
    return 0x64496B6F6F62;
}

uint64_t sub_10DFC(char *a1, char *a2)
{
  return sub_79110(*a1, *a2);
}

Swift::Int sub_10E08()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x63696C7075646564;
  else
    v2 = 0x64496B6F6F62;
  if (v1)
    v3 = 0xEF64496E6F697461;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10E90(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x63696C7075646564;
  else
    v2 = 0x64496B6F6F62;
  if (*v1)
    v3 = 0xEF64496E6F697461;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10EF4(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x63696C7075646564;
  else
    v3 = 0x64496B6F6F62;
  if (v2)
    v4 = 0xEF64496E6F697461;
  else
    v4 = 0xE600000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10F78@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Transport.BookIdToDeduplicationIdEntry.CodingKeys.init(rawValue:)(*a1, a2);
}

void sub_10F84(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x64496B6F6F62;
  if (*v1)
    v2 = 0x63696C7075646564;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xEF64496E6F697461;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10FD0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1F448();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10FF8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1F448();
  return CodingKey.debugDescription.getter(a1, v2);
}

void Transport.BookIdToDeduplicationIdEntry.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt64 v6;

  v2 = v1;
  v5 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  if (*(_BYTE *)(v2 + 8) == 1)
  {
    Hasher._combine(_:)(0);
    if (v4)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v4);
      String.hash(into:)(a1, v5, v4);
      swift_bridgeObjectRelease(v4);
      return;
    }
  }
  else
  {
    v6 = *(_QWORD *)v2;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
    if (v4)
      goto LABEL_3;
  }
  Hasher._combine(_:)(0);
}

uint64_t Transport.BookIdToDeduplicationIdEntry.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  v4 = sub_5EDC(&qword_1F0658);
  v17 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *((unsigned __int8 *)v1 + 8);
  v9 = v1[2];
  v15 = v1[3];
  v16 = v9;
  v10 = a1[3];
  v11 = a1[4];
  sub_49F4(a1, v10);
  v12 = sub_1F448();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Transport.BookIdToDeduplicationIdEntry.CodingKeys, &type metadata for Transport.BookIdToDeduplicationIdEntry.CodingKeys, v12, v10, v11);
  v19 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v7, v8, &v19, v4);
  if (!v2)
  {
    v18 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v15, &v18, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v6, v4);
}

Swift::Int Transport.BookIdToDeduplicationIdEntry.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt64 v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  Hasher.init(_seed:)(v6, 0);
  if (v2 != 1)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
    if (v3)
      goto LABEL_3;
LABEL_5:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  if (!v3)
    goto LABEL_5;
LABEL_3:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v6, v4, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t Transport.BookIdToDeduplicationIdEntry.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;

  v5 = sub_5EDC(&qword_1F0668);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_1F448();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Transport.BookIdToDeduplicationIdEntry.CodingKeys, &type metadata for Transport.BookIdToDeduplicationIdEntry.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_62F8(a1);
    v21 = 0;
  }
  else
  {
    v24 = 0;
    v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v24, v5);
    v14 = v13;
    v23 = 1;
    v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v23, v5);
    v18 = v17;
    v19 = *(void (**)(char *, uint64_t))(v6 + 8);
    v20 = v15;
    v19(v8, v5);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRelease(0);
    *(_QWORD *)a2 = v12;
    *(_BYTE *)(a2 + 8) = v14 & 1;
    *(_QWORD *)(a2 + 16) = v20;
    *(_QWORD *)(a2 + 24) = v18;
    sub_62F8(a1);
    v21 = v18;
  }
  return swift_bridgeObjectRelease(v21);
}

uint64_t sub_11430@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Transport.BookIdToDeduplicationIdEntry.init(from:)(a1, a2);
}

uint64_t sub_11444(_QWORD *a1)
{
  return Transport.BookIdToDeduplicationIdEntry.encode(to:)(a1);
}

Swift::Int sub_1145C(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt64 v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *(_QWORD *)v1;
  v3 = *(unsigned __int8 *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  Hasher.init(_seed:)(v7, a1);
  if (v3 != 1)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
    if (v4)
      goto LABEL_3;
LABEL_5:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  if (!v4)
    goto LABEL_5;
LABEL_3:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v7, v5, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t Transport.BookIdToSeriesIdEntry.seriesId.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t Transport.BookIdToSeriesIdEntry.seriesId.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t Transport.BookIdToSeriesIdEntry.init(bookId:seriesId:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  *(_QWORD *)a5 = result;
  *(_BYTE *)(a5 + 8) = a2 & 1;
  *(_QWORD *)(a5 + 16) = a3;
  *(_BYTE *)(a5 + 24) = a4 & 1;
  return result;
}

uint64_t Transport.BookIdToSeriesIdEntry.CodingKeys.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D6C28;
  return sub_12620(a1, v2, a2);
}

uint64_t Transport.BookIdToSeriesIdEntry.CodingKeys.init(stringValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D6C78;
  return sub_12688(a1, v2, a2);
}

void Transport.BookIdToSeriesIdEntry.CodingKeys.init(intValue:)(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t Transport.BookIdToSeriesIdEntry.CodingKeys.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x6449736569726573;
  else
    return 0x64496B6F6F62;
}

uint64_t sub_115A8(char *a1, char *a2)
{
  return sub_791BC(*a1, *a2);
}

Swift::Int sub_115B4()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x6449736569726573;
  else
    v2 = 0x64496B6F6F62;
  if (v1)
    v3 = 0xE800000000000000;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_11630(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x6449736569726573;
  else
    v2 = 0x64496B6F6F62;
  if (*v1)
    v3 = 0xE800000000000000;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_11688(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x6449736569726573;
  else
    v3 = 0x64496B6F6F62;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xE600000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_11700@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Transport.BookIdToSeriesIdEntry.CodingKeys.init(rawValue:)(*a1, a2);
}

void sub_1170C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x64496B6F6F62;
  if (*v1)
    v2 = 0x6449736569726573;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xE800000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1174C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1F48C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_11774(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1F48C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void Transport.BookIdToSeriesIdEntry.hash(into:)()
{
  uint64_t v0;
  Swift::UInt64 v1;
  int v2;
  Swift::UInt64 v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(unsigned __int8 *)(v0 + 24);
  if (*(_BYTE *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
    if (!v2)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v1);
      return;
    }
  }
  else
  {
    v3 = *(_QWORD *)v0;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
    if (!v2)
      goto LABEL_3;
  }
  Hasher._combine(_:)(0);
}

uint64_t Transport.BookIdToSeriesIdEntry.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  char v16;
  char v17;

  v4 = sub_5EDC(&qword_1F0670);
  v14 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *((unsigned __int8 *)v1 + 8);
  v13 = v1[2];
  v15 = *((unsigned __int8 *)v1 + 24);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_1F48C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Transport.BookIdToSeriesIdEntry.CodingKeys, &type metadata for Transport.BookIdToSeriesIdEntry.CodingKeys, v11, v9, v10);
  v17 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v7, v8, &v17, v4);
  if (!v2)
  {
    v16 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, v15, &v16, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v6, v4);
}

Swift::Int Transport.BookIdToSeriesIdEntry.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt64 v1;
  int v2;
  Swift::UInt64 v3;
  int v4;
  _QWORD v6[9];

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(unsigned __int8 *)(v0 + 24);
  Hasher.init(_seed:)(v6, 0);
  if (v2 != 1)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
    if (!v4)
      goto LABEL_3;
LABEL_5:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  if (v4)
    goto LABEL_5;
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t Transport.BookIdToSeriesIdEntry.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v16;
  char *v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;
  char v22;

  v5 = sub_5EDC(&qword_1F0680);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_1F48C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Transport.BookIdToSeriesIdEntry.CodingKeys, &type metadata for Transport.BookIdToSeriesIdEntry.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v22 = 0;
    v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v22, v5);
    v14 = v13;
    v21 = 1;
    v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v21, v5);
    v17 = v8;
    v19 = v18;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v17, v5);
    *(_QWORD *)a2 = v12;
    *(_BYTE *)(a2 + 8) = v14 & 1;
    *(_QWORD *)(a2 + 16) = v16;
    *(_BYTE *)(a2 + 24) = v19 & 1;
  }
  return sub_62F8(a1);
}

uint64_t sub_11B6C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Transport.BookIdToSeriesIdEntry.init(from:)(a1, a2);
}

uint64_t sub_11B80(_QWORD *a1)
{
  return Transport.BookIdToSeriesIdEntry.encode(to:)(a1);
}

Swift::Int sub_11B98(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt64 v2;
  int v3;
  Swift::UInt64 v4;
  int v5;
  _QWORD v7[9];

  v2 = *(_QWORD *)v1;
  v3 = *(unsigned __int8 *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(unsigned __int8 *)(v1 + 24);
  Hasher.init(_seed:)(v7, a1);
  if (v3 != 1)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
    if (!v5)
      goto LABEL_3;
LABEL_5:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  if (v5)
    goto LABEL_5;
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t Transport.BookIdToBisacCodesEntry.CodingKeys.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D6CC8;
  return sub_12620(a1, v2, a2);
}

uint64_t Transport.BookIdToBisacCodesEntry.CodingKeys.init(stringValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D6D18;
  return sub_12688(a1, v2, a2);
}

uint64_t Transport.BookIdToBisacCodesEntry.CodingKeys.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x646F436361736962;
  else
    return 0x64496B6F6F62;
}

uint64_t sub_11C94(char *a1, char *a2)
{
  return sub_7830C(*a1, *a2);
}

Swift::Int sub_11CA0()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x646F436361736962;
  else
    v2 = 0x64496B6F6F62;
  if (v1)
    v3 = 0xEA00000000007365;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_11D20(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x646F436361736962;
  else
    v2 = 0x64496B6F6F62;
  if (*v1)
    v3 = 0xEA00000000007365;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_11D7C(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x646F436361736962;
  else
    v3 = 0x64496B6F6F62;
  if (v2)
    v4 = 0xEA00000000007365;
  else
    v4 = 0xE600000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_11DF8@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Transport.BookIdToBisacCodesEntry.CodingKeys.init(rawValue:)(*a1, a2);
}

void sub_11E04(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x64496B6F6F62;
  if (*v1)
    v2 = 0x646F436361736962;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xEA00000000007365;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_11E48(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1F4D0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_11E70(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1F4D0();
  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL static Transport.BookIdToBisacCodesEntry.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1E1CC(a1, a2, (uint64_t (*)(void))sub_AA90);
}

void Transport.BookIdToBisacCodesEntry.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt64 v8;

  v3 = *(_QWORD *)(v1 + 16);
  if (*(_BYTE *)(v1 + 8) == 1)
  {
    Hasher._combine(_:)(0);
    if (v3)
      goto LABEL_3;
LABEL_8:
    Hasher._combine(_:)(0);
    return;
  }
  v8 = *(_QWORD *)v1;
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v8);
  if (!v3)
    goto LABEL_8;
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain(v3);
    v5 = (_QWORD *)(v3 + 40);
    do
    {
      v6 = *(v5 - 1);
      v7 = *v5;
      swift_bridgeObjectRetain(*v5);
      String.hash(into:)(a1, v6, v7);
      swift_bridgeObjectRelease(v7);
      v5 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease(v3);
  }
}

uint64_t Transport.BookIdToBisacCodesEntry.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v4 = sub_5EDC(&qword_1F0688);
  v17 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *((unsigned __int8 *)v1 + 8);
  v16 = v1[2];
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_1F4D0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Transport.BookIdToBisacCodesEntry.CodingKeys, &type metadata for Transport.BookIdToBisacCodesEntry.CodingKeys, v11, v9, v10);
  v20 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v7, v8, &v20, v4);
  if (!v2)
  {
    v18 = v16;
    v19 = 1;
    v12 = sub_5EDC(&qword_1F03E0);
    v13 = sub_1F298(&qword_1F03E8, &qword_1F03E0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v18, &v19, v4, v12, v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v6, v4);
}

Swift::Int Transport.BookIdToBisacCodesEntry.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt64 v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[9];

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  Hasher.init(_seed:)(v9, 0);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
    if (v3)
      goto LABEL_3;
LABEL_8:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v1);
  if (!v3)
    goto LABEL_8;
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain(v3);
    v5 = (_QWORD *)(v3 + 40);
    do
    {
      v6 = *(v5 - 1);
      v7 = *v5;
      swift_bridgeObjectRetain(*v5);
      String.hash(into:)(v9, v6, v7);
      swift_bridgeObjectRelease(v7);
      v5 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease(v3);
  }
  return Hasher._finalize()();
}

uint64_t Transport.BookIdToBisacCodesEntry.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;
  char v24;

  v5 = sub_5EDC(&qword_1F0698);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_1F4D0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Transport.BookIdToBisacCodesEntry.CodingKeys, &type metadata for Transport.BookIdToBisacCodesEntry.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_62F8(a1);
    v17 = 0;
  }
  else
  {
    v24 = 0;
    v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v24, v5);
    v14 = v13;
    v21 = a2;
    v15 = sub_5EDC(&qword_1F03E0);
    v23 = 1;
    v16 = sub_1F298(&qword_1F0410, &qword_1F03E0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v22, v15, &v23, v5, v15, v16);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v19 = v22;
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRelease(0);
    v20 = v21;
    *v21 = v12;
    *((_BYTE *)v20 + 8) = v14 & 1;
    v20[2] = v19;
    sub_62F8(a1);
    v17 = v19;
  }
  return swift_bridgeObjectRelease(v17);
}

uint64_t sub_123D8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Transport.BookIdToBisacCodesEntry.init(from:)(a1, a2);
}

uint64_t sub_123EC(_QWORD *a1)
{
  return Transport.BookIdToBisacCodesEntry.encode(to:)(a1);
}

void sub_12404(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  Swift::UInt v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt64 v8;

  v3 = *(_QWORD *)(v1 + 16);
  if (*(_BYTE *)(v1 + 8) == 1)
  {
    Hasher._combine(_:)(0);
    if (v3)
      goto LABEL_3;
LABEL_8:
    Hasher._combine(_:)(0);
    return;
  }
  v8 = *(_QWORD *)v1;
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v8);
  if (!v3)
    goto LABEL_8;
LABEL_3:
  Hasher._combine(_:)(1u);
  v4 = *(_QWORD *)(v3 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    swift_bridgeObjectRetain(v3);
    v5 = (_QWORD *)(v3 + 40);
    do
    {
      v6 = *(v5 - 1);
      v7 = *v5;
      swift_bridgeObjectRetain(*v5);
      String.hash(into:)(a1, v6, v7);
      swift_bridgeObjectRelease(v7);
      v5 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease(v3);
  }
}

Swift::Int sub_124E8(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt64 v2;
  int v3;
  uint64_t v4;
  Swift::UInt v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[9];

  v2 = *(_QWORD *)v1;
  v3 = *(unsigned __int8 *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  Hasher.init(_seed:)(v10, a1);
  if (v3 == 1)
  {
    Hasher._combine(_:)(0);
    if (v4)
      goto LABEL_3;
LABEL_8:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v2);
  if (!v4)
    goto LABEL_8;
LABEL_3:
  Hasher._combine(_:)(1u);
  v5 = *(_QWORD *)(v4 + 16);
  Hasher._combine(_:)(v5);
  if (v5)
  {
    swift_bridgeObjectRetain(v4);
    v6 = (_QWORD *)(v4 + 40);
    do
    {
      v7 = *(v6 - 1);
      v8 = *v6;
      swift_bridgeObjectRetain(*v6);
      String.hash(into:)(v10, v7, v8);
      swift_bridgeObjectRelease(v8);
      v6 += 2;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease(v4);
  }
  return Hasher._finalize()();
}

uint64_t Transport.BookIdToMediaTypeEntry.mediaType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_1E9F8(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t Transport.BookIdToMediaTypeEntry.mediaType.setter(uint64_t a1, uint64_t a2)
{
  return sub_1406C(a1, a2, sub_26BA4);
}

uint64_t Transport.BookIdToMediaTypeEntry.CodingKeys.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D6D68;
  return sub_12620(a1, v2, a2);
}

uint64_t sub_12620@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X2>, char *a3@<X8>)
{
  void *object;
  Swift::String v4;
  Swift::Int v7;
  uint64_t result;
  char v9;

  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  v7 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(object);
  if (v7 == 1)
    v9 = 1;
  else
    v9 = 2;
  if (!v7)
    v9 = 0;
  *a3 = v9;
  return result;
}

uint64_t Transport.BookIdToMediaTypeEntry.CodingKeys.init(stringValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D6DB8;
  return sub_12688(a1, v2, a2);
}

uint64_t sub_12688@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X2>, char *a3@<X8>)
{
  void *object;
  Swift::String v4;
  Swift::Int v7;
  uint64_t result;
  char v9;

  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  v7 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(object);
  if (v7)
  {
    if (v7 == 1)
      v9 = 1;
    else
      v9 = 2;
  }
  else
  {
    v9 = 0;
  }
  *a3 = v9;
  return result;
}

uint64_t Transport.BookIdToMediaTypeEntry.CodingKeys.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x707954616964656DLL;
  else
    return 0x64496B6F6F62;
}

uint64_t sub_1272C(char *a1, char *a2)
{
  return sub_785B0(*a1, *a2);
}

Swift::Int sub_12738()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x707954616964656DLL;
  else
    v2 = 0x64496B6F6F62;
  if (v1)
    v3 = 0xE900000000000065;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_127B8(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x707954616964656DLL;
  else
    v2 = 0x64496B6F6F62;
  if (*v1)
    v3 = 0xE900000000000065;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_12814(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x707954616964656DLL;
  else
    v3 = 0x64496B6F6F62;
  if (v2)
    v4 = 0xE900000000000065;
  else
    v4 = 0xE600000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_12890@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Transport.BookIdToMediaTypeEntry.CodingKeys.init(rawValue:)(*a1, a2);
}

void sub_1289C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x64496B6F6F62;
  if (*v1)
    v2 = 0x707954616964656DLL;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xE900000000000065;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_128E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1F514();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_12908(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1F514();
  return CodingKey.debugDescription.getter(a1, v2);
}

void Transport.BookIdToMediaTypeEntry.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::UInt64 v10;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  if (*(_BYTE *)(v2 + 8) != 1)
  {
    v10 = *(_QWORD *)v2;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v10);
    if (v5 != 2)
      goto LABEL_3;
LABEL_13:
    Hasher._combine(_:)(0);
    return;
  }
  Hasher._combine(_:)(0);
  if (v5 == 2)
    goto LABEL_13;
LABEL_3:
  Hasher._combine(_:)(1u);
  v6 = 0xE90000000000004BLL;
  v7 = 0x4F4F424F49445541;
  if (v5 != 1)
  {
    v7 = v4;
    v6 = v5;
  }
  if (v5)
    v8 = v7;
  else
    v8 = 0x4B4F4F4245;
  if (v5)
    v9 = v6;
  else
    v9 = 0xE500000000000000;
  sub_1F6D4(v4, v5);
  sub_1F6D4(v4, v5);
  sub_1F6D4(v4, v5);
  String.hash(into:)(a1, v8, v9);
  swift_bridgeObjectRelease(v9);
  sub_1EA08(v4, v5);
  sub_1EA08(v4, v5);
}

uint64_t Transport.BookIdToMediaTypeEntry.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  char v20;

  v4 = sub_5EDC(&qword_1F06A0);
  v18 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *((unsigned __int8 *)v1 + 8);
  v9 = v1[2];
  v16 = v1[3];
  v17 = v9;
  v10 = a1[3];
  v11 = a1[4];
  sub_49F4(a1, v10);
  v12 = sub_1F514();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Transport.BookIdToMediaTypeEntry.CodingKeys, &type metadata for Transport.BookIdToMediaTypeEntry.CodingKeys, v12, v10, v11);
  LOBYTE(v19[0]) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v7, v8, v19, v4);
  if (!v2)
  {
    v19[0] = v17;
    v19[1] = v16;
    v20 = 1;
    v13 = sub_1F558();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v19, &v20, v4, &type metadata for Transport.MediaType, v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v6, v4);
}

Swift::Int Transport.BookIdToMediaTypeEntry.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt64 v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v10[9];

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  Hasher.init(_seed:)(v10, 0);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  if (v4 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    v5 = 0xE90000000000004BLL;
    v6 = 0x4F4F424F49445541;
    if (v4 != 1)
    {
      v6 = v3;
      v5 = v4;
    }
    if (v4)
      v7 = v6;
    else
      v7 = 0x4B4F4F4245;
    if (v4)
      v8 = v5;
    else
      v8 = 0xE500000000000000;
    sub_1F6D4(v3, v4);
    sub_1F6D4(v3, v4);
    String.hash(into:)(v10, v7, v8);
    swift_bridgeObjectRelease(v8);
    sub_1EA08(v3, v4);
  }
  return Hasher._finalize()();
}

uint64_t Transport.BookIdToMediaTypeEntry.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;

  v5 = sub_5EDC(&qword_1F06B8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_1F514();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Transport.BookIdToMediaTypeEntry.CodingKeys, &type metadata for Transport.BookIdToMediaTypeEntry.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_62F8(a1);
    v16 = 0;
    v17 = 2;
  }
  else
  {
    LOBYTE(v21) = 0;
    v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v21, v5);
    v14 = v13;
    v23 = 1;
    v15 = sub_1F59C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v21, &type metadata for Transport.MediaType, &v23, v5, &type metadata for Transport.MediaType, v15);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v19 = v21;
    v20 = v22;
    sub_1E9F8(v21, v22);
    sub_1EA08(0, 2uLL);
    *(_QWORD *)a2 = v12;
    *(_BYTE *)(a2 + 8) = v14 & 1;
    *(_QWORD *)(a2 + 16) = v19;
    *(_QWORD *)(a2 + 24) = v20;
    sub_62F8(a1);
    v16 = v19;
    v17 = v20;
  }
  return sub_1EA08(v16, v17);
}

uint64_t sub_12E6C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Transport.BookIdToMediaTypeEntry.init(from:)(a1, a2);
}

uint64_t sub_12E80(_QWORD *a1)
{
  return Transport.BookIdToMediaTypeEntry.encode(to:)(a1);
}

void sub_12E98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::UInt64 v10;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  if (*(_BYTE *)(v2 + 8) != 1)
  {
    v10 = *(_QWORD *)v2;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v10);
    if (v5 != 2)
      goto LABEL_3;
LABEL_13:
    Hasher._combine(_:)(0);
    return;
  }
  Hasher._combine(_:)(0);
  if (v5 == 2)
    goto LABEL_13;
LABEL_3:
  Hasher._combine(_:)(1u);
  v6 = 0xE90000000000004BLL;
  v7 = 0x4F4F424F49445541;
  if (v5 != 1)
  {
    v7 = v4;
    v6 = v5;
  }
  if (v5)
    v8 = v7;
  else
    v8 = 0x4B4F4F4245;
  if (v5)
    v9 = v6;
  else
    v9 = 0xE500000000000000;
  sub_1F6D4(v4, v5);
  sub_1F6D4(v4, v5);
  String.hash(into:)(a1, v8, v9);
  swift_bridgeObjectRelease(v9);
  sub_1EA08(v4, v5);
}

Swift::Int sub_12FA0(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt64 v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v11[9];

  v2 = *(_QWORD *)v1;
  v3 = *(unsigned __int8 *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  Hasher.init(_seed:)(v11, a1);
  if (v3 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
  if (v5 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    v6 = 0xE90000000000004BLL;
    v7 = 0x4F4F424F49445541;
    if (v5 != 1)
    {
      v7 = v4;
      v6 = v5;
    }
    if (v5)
      v8 = v7;
    else
      v8 = 0x4B4F4F4245;
    if (v5)
      v9 = v6;
    else
      v9 = 0xE500000000000000;
    sub_1F6D4(v4, v5);
    sub_1F6D4(v4, v5);
    String.hash(into:)(v11, v8, v9);
    swift_bridgeObjectRelease(v9);
    sub_1EA08(v4, v5);
  }
  return Hasher._finalize()();
}

uint64_t Transport.Methodology.rawValue.getter(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = 0xD000000000000012;
  if (a2 != 1)
    v2 = a1;
  if (a2)
    v3 = v2;
  else
    v3 = 0x4148435255504F43;
  sub_1F6D4(a1, a2);
  return v3;
}

_UNKNOWN **static Transport.Methodology.allCases.getter()
{
  return &off_1D6E08;
}

uint64_t sub_13130@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = _s20BooksPersonalization9TransportO11MethodologyOyAESgSScfC_0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1315C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v2 = *v1;
  v3 = v1[1];
  v4 = 0xEA00000000004553;
  v5 = 0x4148435255504F43;
  v6 = 0x800000000019FA50;
  v7 = 0xD000000000000012;
  if (v3 != 1)
  {
    v7 = *v1;
    v6 = v1[1];
  }
  if (v3)
  {
    v5 = v7;
    v4 = v6;
  }
  *a1 = v5;
  a1[1] = v4;
  return sub_1F6D4(v2, v3);
}

uint64_t sub_131B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_2697C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1320C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_2697C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_13258(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;

  v2 = *a1;
  v3 = a1[1];
  v5 = *a2;
  v4 = a2[1];
  v6 = 0x800000000019FA50;
  v7 = 0xD000000000000012;
  if (v3 == 1)
  {
    v8 = 0x800000000019FA50;
  }
  else
  {
    v7 = *a1;
    v8 = a1[1];
  }
  if (v3)
    v9 = v7;
  else
    v9 = 0x4148435255504F43;
  if (v3)
    v10 = v8;
  else
    v10 = 0xEA00000000004553;
  v11 = 0xD000000000000012;
  if (v4 != 1)
  {
    v11 = *a2;
    v6 = a2[1];
  }
  if (v4)
    v12 = v11;
  else
    v12 = 0x4148435255504F43;
  if (v4)
    v13 = v6;
  else
    v13 = 0xEA00000000004553;
  if (v9 == v12 && v10 == v13)
    v14 = 1;
  else
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, v12, v13, 0);
  sub_1F6D4(v2, v3);
  sub_1F6D4(v5, v4);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v13);
  return v14 & 1;
}

Swift::Int sub_13350()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v8, 0);
  v3 = 0x800000000019FA50;
  v4 = 0xD000000000000012;
  if (v2 != 1)
  {
    v4 = v1;
    v3 = v2;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x4148435255504F43;
  if (v2)
    v6 = v3;
  else
    v6 = 0xEA00000000004553;
  sub_1F6D4(v1, v2);
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

uint64_t sub_133FC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = *v1;
  v4 = v1[1];
  v5 = 0x800000000019FA50;
  v6 = 0xD000000000000012;
  if (v4 != 1)
  {
    v6 = *v1;
    v5 = v1[1];
  }
  if (v4)
    v7 = v6;
  else
    v7 = 0x4148435255504F43;
  if (v4)
    v8 = v5;
  else
    v8 = 0xEA00000000004553;
  sub_1F6D4(v3, v4);
  String.hash(into:)(a1, v7, v8);
  return swift_bridgeObjectRelease(v8);
}

Swift::Int sub_13484(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v9, a1);
  v4 = 0x800000000019FA50;
  v5 = 0xD000000000000012;
  if (v3 != 1)
  {
    v5 = v2;
    v4 = v3;
  }
  if (v3)
    v6 = v5;
  else
    v6 = 0x4148435255504F43;
  if (v3)
    v7 = v4;
  else
    v7 = 0xEA00000000004553;
  sub_1F6D4(v2, v3);
  String.hash(into:)(v9, v6, v7);
  swift_bridgeObjectRelease(v7);
  return Hasher._finalize()();
}

uint64_t sub_1352C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = _s20BooksPersonalization9TransportO11MethodologyOyAESgSScfC_0(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

void sub_13550(_QWORD *a1@<X8>)
{
  *a1 = &off_1D6E48;
}

uint64_t sub_13560()
{
  uint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = v0[1];
  v2 = 0xD000000000000012;
  if (v1 != 1)
    v2 = *v0;
  if (v1)
    v3 = v2;
  else
    v3 = 0x4148435255504F43;
  sub_1F6D4(*v0, v1);
  return v3;
}

uint64_t sub_135D0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v3;
  uint64_t v4;

  v3 = 0x4F4F424F49445541;
  if (a2 != 1)
    v3 = a1;
  if (a2)
    v4 = v3;
  else
    v4 = 0x4B4F4F4245;
  a3();
  return v4;
}

_UNKNOWN **static Transport.MediaType.allCases.getter()
{
  return &off_1D6E88;
}

uint64_t sub_13640@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v3 = v2[1];
  v4 = 0xE500000000000000;
  v5 = 0x4B4F4F4245;
  v6 = 0xE90000000000004BLL;
  v7 = 0x4F4F424F49445541;
  if (v3 != 1)
  {
    v7 = *v2;
    v6 = v2[1];
  }
  if (v3)
  {
    v5 = v7;
    v4 = v6;
  }
  *a2 = v5;
  a2[1] = v4;
  return a1();
}

uint64_t sub_1368C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_26938();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_136E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_26938();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_13734(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = *a1;
  v7 = a1[1];
  v8 = *a2;
  v9 = a2[1];
  v10 = 0x4F4F424F49445541;
  v11 = 0xE90000000000004BLL;
  if (v7 != 1)
  {
    v10 = *a1;
    v11 = a1[1];
  }
  if (v7)
    v12 = v10;
  else
    v12 = 0x4B4F4F4245;
  if (v7)
    v13 = v11;
  else
    v13 = 0xE500000000000000;
  v14 = 0x4F4F424F49445541;
  v15 = 0xE90000000000004BLL;
  if (v9 != 1)
  {
    v14 = *a2;
    v15 = a2[1];
  }
  if (v9)
    v16 = v14;
  else
    v16 = 0x4B4F4F4245;
  if (v9)
    v17 = v15;
  else
    v17 = 0xE500000000000000;
  if (v12 == v16 && v13 == v17)
    v18 = 1;
  else
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, v16, v17, 0);
  a5(v6, v7);
  a5(v8, v9);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v17);
  return v18 & 1;
}

Swift::Int sub_13838(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, unint64_t))
{
  uint64_t *v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD v12[9];

  v6 = *v3;
  v5 = v3[1];
  Hasher.init(_seed:)(v12, 0);
  v7 = 0xE90000000000004BLL;
  v8 = 0x4F4F424F49445541;
  if (v5 != 1)
  {
    v8 = v6;
    v7 = v5;
  }
  if (v5)
    v9 = v8;
  else
    v9 = 0x4B4F4F4245;
  if (v5)
    v10 = v7;
  else
    v10 = 0xE500000000000000;
  a3(v6, v5);
  String.hash(into:)(v12, v9, v10);
  swift_bridgeObjectRelease(v10);
  return Hasher._finalize()();
}

uint64_t sub_138E8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v6 = v4[1];
  v7 = 0xE90000000000004BLL;
  v8 = 0x4F4F424F49445541;
  if (v6 != 1)
  {
    v8 = *v4;
    v7 = v4[1];
  }
  if (v6)
    v9 = v8;
  else
    v9 = 0x4B4F4F4245;
  if (v6)
    v10 = v7;
  else
    v10 = 0xE500000000000000;
  a4();
  String.hash(into:)(a1, v9, v10);
  return swift_bridgeObjectRelease(v10);
}

Swift::Int sub_13968(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, unint64_t))
{
  uint64_t *v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v13[9];

  v7 = *v4;
  v6 = v4[1];
  Hasher.init(_seed:)(v13, a1);
  v8 = 0xE90000000000004BLL;
  v9 = 0x4F4F424F49445541;
  if (v6 != 1)
  {
    v9 = v7;
    v8 = v6;
  }
  if (v6)
    v10 = v9;
  else
    v10 = 0x4B4F4F4245;
  if (v6)
    v11 = v8;
  else
    v11 = 0xE500000000000000;
  a4(v7, v6);
  String.hash(into:)(v13, v10, v11);
  swift_bridgeObjectRelease(v11);
  return Hasher._finalize()();
}

void sub_13A14(_QWORD *a1@<X8>)
{
  *a1 = &off_1D6EC8;
}

uint64_t sub_13A24(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = v3[1];
  v5 = 0x4F4F424F49445541;
  if (v4 != 1)
    v5 = *v3;
  if (v4)
    v6 = v5;
  else
    v6 = 0x4B4F4F4245;
  a3();
  return v6;
}

uint64_t Transport.StoreAssetRequestDetails.SaleTypePayload.rawValue.getter(uint64_t a1, uint64_t a2)
{
  return sub_13A98(a1, a2, (void (*)(void))sub_1F904);
}

uint64_t sub_13A98(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = 1145651536;
  v4 = 5852737;
  if (a2 != 2)
    v4 = a1;
  if (a2 != 1)
    v3 = v4;
  if (a2)
    v5 = v3;
  else
    v5 = 1162170950;
  a3();
  return v5;
}

_UNKNOWN **static Transport.StoreAssetRequestDetails.SaleTypePayload.allCases.getter()
{
  return &off_1D6F08;
}

uint64_t sub_13B10@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_1F7DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_13B3C@<X0>(uint64_t *a1@<X8>)
{
  return sub_13B48((uint64_t (*)(void))sub_1F904, a1);
}

uint64_t sub_13B48@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v3 = v2[1];
  v4 = 0xE400000000000000;
  v5 = 1162170950;
  v6 = 0xE400000000000000;
  v7 = 1145651536;
  v8 = 0xE300000000000000;
  v9 = 5852737;
  if (v3 != 2)
  {
    v9 = *v2;
    v8 = v2[1];
  }
  if (v3 != 1)
  {
    v7 = v9;
    v6 = v8;
  }
  if (v3)
  {
    v5 = v7;
    v4 = v6;
  }
  *a2 = v5;
  a2[1] = v4;
  return a1();
}

uint64_t sub_13B9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_268F4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_13BF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_268F4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_13C44(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_13C50(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))sub_1F904);
}

uint64_t sub_13C50(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;

  v6 = *a1;
  v7 = a1[1];
  v8 = *a2;
  v9 = a2[1];
  v10 = 0xE400000000000000;
  v11 = 1145651536;
  v12 = 0xE300000000000000;
  v13 = 5852737;
  if (v7 != 2)
  {
    v13 = *a1;
    v12 = a1[1];
  }
  if (v7 != 1)
  {
    v11 = v13;
    v10 = v12;
  }
  if (v7)
    v14 = v11;
  else
    v14 = 1162170950;
  if (v7)
    v15 = v10;
  else
    v15 = 0xE400000000000000;
  v16 = 0xE400000000000000;
  v17 = 1145651536;
  v18 = 0xE300000000000000;
  v19 = 5852737;
  if (v9 != 2)
  {
    v19 = *a2;
    v18 = a2[1];
  }
  if (v9 != 1)
  {
    v17 = v19;
    v16 = v18;
  }
  if (v9)
    v20 = v17;
  else
    v20 = 1162170950;
  if (v9)
    v21 = v16;
  else
    v21 = 0xE400000000000000;
  if (v14 == v20 && v15 == v21)
    v22 = 1;
  else
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v20, v21, 0);
  a5(v6, v7);
  a5(v8, v9);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v21);
  return v22 & 1;
}

Swift::Int sub_13D68(uint64_t a1, uint64_t a2)
{
  return sub_13D74(a1, a2, (void (*)(uint64_t, unint64_t))sub_1F904);
}

Swift::Int sub_13D74(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, unint64_t))
{
  uint64_t *v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD v14[9];

  v6 = *v3;
  v5 = v3[1];
  Hasher.init(_seed:)(v14, 0);
  v7 = 0xE400000000000000;
  v8 = 1145651536;
  v9 = 0xE300000000000000;
  v10 = 5852737;
  if (v5 != 2)
  {
    v10 = v6;
    v9 = v5;
  }
  if (v5 != 1)
  {
    v8 = v10;
    v7 = v9;
  }
  if (v5)
    v11 = v8;
  else
    v11 = 1162170950;
  if (v5)
    v12 = v7;
  else
    v12 = 0xE400000000000000;
  a3(v6, v5);
  String.hash(into:)(v14, v11, v12);
  swift_bridgeObjectRelease(v12);
  return Hasher._finalize()();
}

uint64_t sub_13E2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_13E38(a1, a2, a3, (void (*)(void))sub_1F904);
}

uint64_t sub_13E38(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v6 = v4[1];
  v7 = 0xE400000000000000;
  v8 = 1145651536;
  v9 = 0xE300000000000000;
  v10 = 5852737;
  if (v6 != 2)
  {
    v10 = *v4;
    v9 = v4[1];
  }
  if (v6 != 1)
  {
    v8 = v10;
    v7 = v9;
  }
  if (v6)
    v11 = v8;
  else
    v11 = 1162170950;
  if (v6)
    v12 = v7;
  else
    v12 = 0xE400000000000000;
  a4();
  String.hash(into:)(a1, v11, v12);
  return swift_bridgeObjectRelease(v12);
}

Swift::Int sub_13EC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_13ECC(a1, a2, a3, (void (*)(uint64_t, unint64_t))sub_1F904);
}

Swift::Int sub_13ECC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, unint64_t))
{
  uint64_t *v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v15[9];

  v7 = *v4;
  v6 = v4[1];
  Hasher.init(_seed:)(v15, a1);
  v8 = 0xE400000000000000;
  v9 = 1145651536;
  v10 = 0xE300000000000000;
  v11 = 5852737;
  if (v6 != 2)
  {
    v11 = v7;
    v10 = v6;
  }
  if (v6 != 1)
  {
    v9 = v11;
    v8 = v10;
  }
  if (v6)
    v12 = v9;
  else
    v12 = 1162170950;
  if (v6)
    v13 = v8;
  else
    v13 = 0xE400000000000000;
  a4(v7, v6);
  String.hash(into:)(v15, v12, v13);
  swift_bridgeObjectRelease(v13);
  return Hasher._finalize()();
}

uint64_t sub_13F80@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = sub_1F7DC(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

void sub_13FA4(_QWORD *a1@<X8>)
{
  *a1 = &off_1D6F58;
}

uint64_t sub_13FB4(uint64_t a1, uint64_t a2)
{
  return sub_13FC0(a1, a2, (void (*)(void))sub_1F904);
}

uint64_t sub_13FC0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = v3[1];
  v5 = 1145651536;
  v6 = 5852737;
  if (v4 != 2)
    v6 = *v3;
  if (v4 != 1)
    v5 = v6;
  if (v4)
    v7 = v5;
  else
    v7 = 1162170950;
  a3();
  return v7;
}

uint64_t Transport.StoreAssetRequestDetails.saleType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_1F918(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t Transport.StoreAssetRequestDetails.saleType.setter(uint64_t a1, uint64_t a2)
{
  return sub_1406C(a1, a2, sub_1F928);
}

uint64_t sub_1406C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  uint64_t v3;
  uint64_t result;

  result = a3(*(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  return result;
}

uint64_t Transport.StoreAssetRequestDetails.init(mediaType:profileGenreDenylist:saleType:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

uint64_t Transport.StoreAssetRequestDetails.CodingKeys.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D6FA8;
  return sub_16848(a1, v2, a2);
}

uint64_t Transport.StoreAssetRequestDetails.CodingKeys.init(stringValue:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v5;

  result = Transport.StoreAssetRequestDetails.CodingKeys.init(rawValue:)(*(Swift::String *)&a1, &v5);
  *a2 = v5;
  return result;
}

uint64_t Transport.StoreAssetRequestDetails.CodingKeys.rawValue.getter()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000014;
  if (*v0 != 1)
    v1 = 0x65707954656C6173;
  if (*v0)
    return v1;
  else
    return 0x707954616964656DLL;
}

uint64_t sub_14150(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_77E84(*a1, *a2);
}

Swift::Int sub_1415C()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0x800000000019EB00;
  v3 = 0xD000000000000014;
  if (v1 != 1)
  {
    v3 = 0x65707954656C6173;
    v2 = 0xE800000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x707954616964656DLL;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE900000000000065;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_14204(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0x800000000019EB00;
  v3 = 0xD000000000000014;
  if (*v1 != 1)
  {
    v3 = 0x65707954656C6173;
    v2 = 0xE800000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x707954616964656DLL;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE900000000000065;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_14288(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0x800000000019EB00;
  v4 = 0xD000000000000014;
  if (v2 != 1)
  {
    v4 = 0x65707954656C6173;
    v3 = 0xE800000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x707954616964656DLL;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE900000000000065;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

uint64_t sub_1432C@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Transport.StoreAssetRequestDetails.CodingKeys.init(rawValue:)(*a1, a2);
}

void sub_14338(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE900000000000065;
  v4 = 0x800000000019EB00;
  v5 = 0xD000000000000014;
  if (v2 != 1)
  {
    v5 = 0x65707954656C6173;
    v4 = 0xE800000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x707954616964656DLL;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_143A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1F94C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_143C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1F94C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void Transport.StoreAssetRequestDetails.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::UInt64 *v9;
  Swift::UInt64 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v2 = v1;
  v4 = *v2;
  v5 = v2[1];
  v6 = v2[2];
  v7 = v2[3];
  if (*v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v4);
    sub_1C234(a1, v4);
    swift_bridgeObjectRelease(v4);
    if (v5)
      goto LABEL_3;
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v5)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(_QWORD *)(v5 + 16));
      v8 = *(_QWORD *)(v5 + 16);
      if (v8)
      {
        v9 = (Swift::UInt64 *)(v5 + 32);
        do
        {
          v10 = *v9++;
          Hasher._combine(_:)(v10);
          --v8;
        }
        while (v8);
      }
      if (v7 == 3)
        goto LABEL_7;
      goto LABEL_10;
    }
  }
  Hasher._combine(_:)(0);
  if (v7 == 3)
  {
LABEL_7:
    Hasher._combine(_:)(0);
    return;
  }
LABEL_10:
  Hasher._combine(_:)(1u);
  v11 = 0xE400000000000000;
  v12 = 1145651536;
  v13 = 0xE300000000000000;
  v14 = 5852737;
  if (v7 != 2)
  {
    v14 = v6;
    v13 = v7;
  }
  if (v7 != 1)
  {
    v12 = v14;
    v11 = v13;
  }
  if (v7)
    v15 = v12;
  else
    v15 = 1162170950;
  if (v7)
    v16 = v11;
  else
    v16 = 0xE400000000000000;
  sub_1F904(v6, v7);
  sub_1F904(v6, v7);
  sub_1F904(v6, v7);
  String.hash(into:)(a1, v15, v16);
  swift_bridgeObjectRelease(v16);
  sub_1F928(v6, v7);
  sub_1F928(v6, v7);
}

uint64_t Transport.StoreAssetRequestDetails.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  char v26;

  v4 = sub_5EDC(&qword_1F06C8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v23 = v1[2];
  v24 = v8;
  v22 = v1[3];
  v10 = a1[3];
  v11 = a1[4];
  sub_49F4(a1, v10);
  v12 = sub_1F94C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Transport.StoreAssetRequestDetails.CodingKeys, &type metadata for Transport.StoreAssetRequestDetails.CodingKeys, v12, v10, v11);
  v25[0] = v9;
  v26 = 0;
  v13 = sub_5EDC(&qword_1F06D8);
  v14 = sub_201AC(&qword_1F06E0, &qword_1F06D8, (void (*)(void))sub_1F558, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v25, &v26, v4, v13, v14);
  if (!v2)
  {
    v16 = v22;
    v15 = v23;
    v25[0] = v24;
    v26 = 1;
    v17 = sub_5EDC(&qword_1F0300);
    v18 = sub_1F298(&qword_1F0308, &qword_1F0300, (uint64_t)&protocol witness table for Int64, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v25, &v26, v4, v17, v18);
    v25[0] = v15;
    v25[1] = v16;
    v26 = 2;
    v19 = sub_1F990();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v25, &v26, v4, &type metadata for Transport.StoreAssetRequestDetails.SaleTypePayload, v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int Transport.StoreAssetRequestDetails.hashValue.getter()
{
  __int128 *v0;
  __int128 v1;
  _QWORD v3[9];
  __int128 v4;
  __int128 v5;

  v1 = v0[1];
  v4 = *v0;
  v5 = v1;
  Hasher.init(_seed:)(v3, 0);
  Transport.StoreAssetRequestDetails.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

uint64_t Transport.StoreAssetRequestDetails.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;

  v5 = sub_5EDC(&qword_1F06F0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_1F94C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Transport.StoreAssetRequestDetails.CodingKeys, &type metadata for Transport.StoreAssetRequestDetails.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_62F8(a1);
    swift_bridgeObjectRelease(0);
    swift_bridgeObjectRelease(0);
    v22 = 0;
    v23 = 3;
  }
  else
  {
    v12 = sub_5EDC(&qword_1F06D8);
    v26 = 0;
    v13 = sub_201AC(&qword_1F06F8, &qword_1F06D8, (void (*)(void))sub_1F59C, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v24, v12, &v26, v5, v12, v13);
    v15 = v24;
    v16 = sub_5EDC(&qword_1F0300);
    v26 = 1;
    v17 = sub_1F298(&qword_1F0318, &qword_1F0300, (uint64_t)&protocol witness table for Int64, (uint64_t)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v15);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v24, v16, &v26, v5, v16, v17);
    v18 = v24;
    v26 = 2;
    v19 = sub_1F9D4();
    swift_bridgeObjectRetain(v18);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v24, &type metadata for Transport.StoreAssetRequestDetails.SaleTypePayload, &v26, v5, &type metadata for Transport.StoreAssetRequestDetails.SaleTypePayload, v19);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v20 = v24;
    v21 = v25;
    sub_1F918(v24, v25);
    sub_1F928(0, 3uLL);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v18);
    sub_1F918(v20, v21);
    sub_1F928(v20, v21);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v18);
    *a2 = v15;
    a2[1] = v18;
    a2[2] = v20;
    a2[3] = v21;
    sub_62F8(a1);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v15);
    v22 = v20;
    v23 = v21;
  }
  return sub_1F928(v22, v23);
}

uint64_t sub_14A94@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Transport.StoreAssetRequestDetails.init(from:)(a1, a2);
}

uint64_t sub_14AA8(_QWORD *a1)
{
  return Transport.StoreAssetRequestDetails.encode(to:)(a1);
}

Swift::Int sub_14AC0(uint64_t a1)
{
  __int128 *v1;
  __int128 v2;
  _QWORD v4[9];
  __int128 v5;
  __int128 v6;

  v2 = v1[1];
  v5 = *v1;
  v6 = v2;
  Hasher.init(_seed:)(v4, a1);
  Transport.StoreAssetRequestDetails.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t Transport.BooksRecommendationRequest.assetRequestDetails.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *v1;
  v2 = v1[1];
  v5 = v1[2];
  v4 = v1[3];
  *a1 = v3;
  a1[1] = v2;
  a1[2] = v5;
  a1[3] = v4;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return sub_1F918(v5, v4);
}

__n128 Transport.BooksRecommendationRequest.assetRequestDetails.setter(__n128 *a1)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 result;
  __n128 v8;

  v8 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u64[1];
  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  swift_bridgeObjectRelease(*v1);
  swift_bridgeObjectRelease(v4);
  sub_1F928(v5, v6);
  result = v8;
  *(__n128 *)v1 = v8;
  v1[2] = v2;
  v1[3] = v3;
  return result;
}

uint64_t Transport.BooksRecommendationRequest.applyBookDenylistToWorks.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t Transport.BooksRecommendationRequest.applyBookDenylistToWorks.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 40) = result;
  return result;
}

__n128 Transport.BooksRecommendationRequest.init(assetRequestDetails:bookDenylist:applyBookDenylistToWorks:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  __n128 result;
  __int128 v5;

  result = *(__n128 *)a1;
  v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_OWORD *)(a4 + 16) = v5;
  *(_QWORD *)(a4 + 32) = a2;
  *(_BYTE *)(a4 + 40) = a3;
  return result;
}

uint64_t Transport.BooksRecommendationRequest.CodingKeys.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D7010;
  return sub_16848(a1, v2, a2);
}

uint64_t Transport.BooksRecommendationRequest.CodingKeys.init(stringValue:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v5;

  result = Transport.BooksRecommendationRequest.CodingKeys.init(rawValue:)(*(Swift::String *)&a1, &v5);
  *a2 = v5;
  return result;
}

void Transport.BooksRecommendationRequest.CodingKeys.init(intValue:)(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

unint64_t Transport.BooksRecommendationRequest.CodingKeys.rawValue.getter()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x796E65446B6F6F62;
  if (*v0 != 1)
    v1 = 0xD000000000000018;
  if (*v0)
    return v1;
  else
    return 0xD000000000000013;
}

uint64_t sub_14C88(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_78FFC(*a1, *a2);
}

Swift::Int sub_14C94()
{
  char *v0;

  return sub_5277C(*v0);
}

uint64_t sub_14C9C(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = 0xEC0000007473696CLL;
  v3 = 0x796E65446B6F6F62;
  if (*v1 != 1)
  {
    v3 = 0xD000000000000018;
    v2 = 0x800000000019ED30;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0xD000000000000013;
  if (*v1)
    v5 = v2;
  else
    v5 = 0x800000000019ED00;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_14D24(uint64_t a1)
{
  char *v1;

  return sub_1524C8(a1, *v1);
}

uint64_t sub_14D2C@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Transport.BooksRecommendationRequest.CodingKeys.init(rawValue:)(*a1, a2);
}

void sub_14D38(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = 0xD000000000000013;
  v3 = 0xEC0000007473696CLL;
  v4 = 0x796E65446B6F6F62;
  if (*v1 != 1)
  {
    v4 = 0xD000000000000018;
    v3 = 0x800000000019ED30;
  }
  if (*v1)
  {
    v2 = v4;
    v5 = v3;
  }
  else
  {
    v5 = 0x800000000019ED00;
  }
  *a1 = v2;
  a1[1] = v5;
}

uint64_t sub_14DA4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1FA18();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_14DCC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1FA18();
  return CodingKey.debugDescription.getter(a1, v2);
}

void Transport.BooksRecommendationRequest.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  Swift::UInt64 *v5;
  Swift::UInt64 v6;
  Swift::UInt8 v7;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(unsigned __int8 *)(v1 + 40);
  Transport.StoreAssetRequestDetails.hash(into:)(a1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*(_QWORD *)(v2 + 16));
    v4 = *(_QWORD *)(v2 + 16);
    if (v4)
    {
      v5 = (Swift::UInt64 *)(v2 + 32);
      do
      {
        v6 = *v5++;
        Hasher._combine(_:)(v6);
        --v4;
      }
      while (v4);
    }
    if (v3 == 2)
      goto LABEL_6;
LABEL_8:
    v7 = v3 & 1;
    Hasher._combine(_:)(1u);
    goto LABEL_9;
  }
  Hasher._combine(_:)(0);
  if (v3 != 2)
    goto LABEL_8;
LABEL_6:
  v7 = 0;
LABEL_9:
  Hasher._combine(_:)(v7);
}

uint64_t Transport.BooksRecommendationRequest.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  char v26;

  v3 = sub_5EDC(&qword_1F0708);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *v1;
  v7 = *((_QWORD *)v1 + 2);
  v8 = *((_QWORD *)v1 + 3);
  v19 = *((_QWORD *)v1 + 4);
  v25 = *((unsigned __int8 *)v1 + 40);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_1FA18();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Transport.BooksRecommendationRequest.CodingKeys, &type metadata for Transport.BooksRecommendationRequest.CodingKeys, v11, v9, v10);
  v22 = v20;
  v23 = v7;
  v24 = v8;
  v26 = 0;
  v12 = sub_1FA5C();
  v13 = v21;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v26, v3, &type metadata for Transport.StoreAssetRequestDetails, v12);
  if (!v13)
  {
    v14 = v25;
    *(_QWORD *)&v22 = v19;
    v26 = 1;
    v15 = sub_5EDC(&qword_1F0300);
    v16 = sub_1F298(&qword_1F0308, &qword_1F0300, (uint64_t)&protocol witness table for Int64, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v22, &v26, v3, v15, v16);
    LOBYTE(v22) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, &v22, v3);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Transport.BooksRecommendationRequest.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  Swift::UInt64 *v4;
  Swift::UInt64 v5;
  Swift::UInt8 v6;
  _QWORD v8[9];

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(unsigned __int8 *)(v0 + 40);
  Hasher.init(_seed:)(v8, 0);
  Transport.StoreAssetRequestDetails.hash(into:)((uint64_t)v8);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*(_QWORD *)(v1 + 16));
    v3 = *(_QWORD *)(v1 + 16);
    if (v3)
    {
      v4 = (Swift::UInt64 *)(v1 + 32);
      do
      {
        v5 = *v4++;
        Hasher._combine(_:)(v5);
        --v3;
      }
      while (v3);
    }
    if (v2 == 2)
      goto LABEL_6;
LABEL_8:
    v6 = v2 & 1;
    Hasher._combine(_:)(1u);
    goto LABEL_9;
  }
  Hasher._combine(_:)(0);
  if (v2 != 2)
    goto LABEL_8;
LABEL_6:
  v6 = 0;
LABEL_9:
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

uint64_t Transport.BooksRecommendationRequest.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD v30[4];
  char v31;

  v5 = sub_5EDC(&qword_1F0720);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_1FA18();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Transport.BooksRecommendationRequest.CodingKeys, &type metadata for Transport.BooksRecommendationRequest.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_62F8(a1);
    v19 = 0;
  }
  else
  {
    v31 = 0;
    v12 = sub_1FAA0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v30, &type metadata for Transport.StoreAssetRequestDetails, &v31, v5, &type metadata for Transport.StoreAssetRequestDetails, v12);
    v25 = a2;
    v14 = v30[0];
    v15 = v30[1];
    v16 = v30[2];
    v17 = v30[3];
    v26 = sub_5EDC(&qword_1F0300);
    v27 = v15;
    v31 = 1;
    swift_bridgeObjectRetain(v15);
    v28 = v14;
    swift_bridgeObjectRetain(v14);
    v29 = v17;
    sub_1F918(v16, v17);
    v18 = sub_1F298(&qword_1F0318, &qword_1F0300, (uint64_t)&protocol witness table for Int64, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v30, v26, &v31, v5, v26, v18);
    v19 = v30[0];
    LOBYTE(v30[0]) = 2;
    swift_bridgeObjectRetain(v19);
    LOBYTE(v14) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v30, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v20 = v28;
    swift_bridgeObjectRetain(v28);
    v21 = v27;
    swift_bridgeObjectRetain(v27);
    v22 = v29;
    sub_1F918(v16, v29);
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v20);
    sub_1F928(v16, v22);
    v23 = v25;
    *v25 = v20;
    v23[1] = v21;
    v23[2] = v16;
    v23[3] = v22;
    v23[4] = v19;
    *((_BYTE *)v23 + 40) = v14;
    sub_62F8(a1);
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v20);
    sub_1F928(v16, v22);
  }
  return swift_bridgeObjectRelease(v19);
}

uint64_t sub_15488@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return Transport.BooksRecommendationRequest.init(from:)(a1, a2);
}

uint64_t sub_1549C(_QWORD *a1)
{
  return Transport.BooksRecommendationRequest.encode(to:)(a1);
}

Swift::Int sub_154B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  Swift::UInt v4;
  Swift::UInt64 *v5;
  Swift::UInt64 v6;
  Swift::UInt8 v7;
  _QWORD v9[9];

  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(unsigned __int8 *)(v1 + 40);
  Hasher.init(_seed:)(v9, a1);
  Transport.StoreAssetRequestDetails.hash(into:)((uint64_t)v9);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    v4 = *(_QWORD *)(v2 + 16);
    Hasher._combine(_:)(v4);
    if (v4)
    {
      v5 = (Swift::UInt64 *)(v2 + 32);
      do
      {
        v6 = *v5++;
        Hasher._combine(_:)(v6);
        --v4;
      }
      while (v4);
    }
    if (v3 == 2)
      goto LABEL_6;
LABEL_8:
    v7 = v3 & 1;
    Hasher._combine(_:)(1u);
    goto LABEL_9;
  }
  Hasher._combine(_:)(0);
  if (v3 != 2)
    goto LABEL_8;
LABEL_6:
  v7 = 0;
LABEL_9:
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

uint64_t Transport.RecommendationBlockRequestV2.userProfile.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 8);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t Transport.RecommendationBlockRequestV2.userProfile.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *((_QWORD *)a1 + 1);
  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 8));
  *(_BYTE *)v1 = v2;
  *(_QWORD *)(v1 + 8) = v3;
  return result;
}

uint64_t Transport.RecommendationBlockRequestV2.booksRequest.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(v1 + 56);
  return sub_1FAE4(v2, v3, v4, v5, v6);
}

__n128 Transport.RecommendationBlockRequestV2.booksRequest.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  __n128 result;
  __n128 v5;
  __int128 v6;

  v5 = (__n128)a1[1];
  v6 = *a1;
  v2 = *((_QWORD *)a1 + 4);
  v3 = *((_BYTE *)a1 + 40);
  sub_1FB40(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
  result = v5;
  *(_OWORD *)(v1 + 16) = v6;
  *(__n128 *)(v1 + 32) = v5;
  *(_QWORD *)(v1 + 48) = v2;
  *(_BYTE *)(v1 + 56) = v3;
  return result;
}

uint64_t Transport.RecommendationBlockRequestV2.methodologies.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 64));
}

uint64_t Transport.RecommendationBlockRequestV2.methodologies.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 64));
  *(_QWORD *)(v1 + 64) = a1;
  return result;
}

uint64_t (*Transport.RecommendationBlockRequestV2.methodologies.modify())()
{
  return AuthorRecommendationSource.id.getter;
}

uint64_t Transport.RecommendationBlockRequestV2.recommendationCount.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 72);
}

uint64_t Transport.RecommendationBlockRequestV2.recommendationCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 72) = result;
  return result;
}

uint64_t (*Transport.RecommendationBlockRequestV2.recommendationCount.modify())()
{
  return AuthorRecommendationSource.id.getter;
}

__n128 Transport.RecommendationBlockRequestV2.init(userProfile:booksRequest:methodologies:recommendationCount:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  __n128 result;
  __int128 v9;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_BYTE *)(a2 + 40);
  *(_BYTE *)a5 = *(_BYTE *)a1;
  *(_QWORD *)(a5 + 8) = v5;
  result = *(__n128 *)a2;
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a5 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(a5 + 32) = v9;
  *(_QWORD *)(a5 + 48) = v6;
  *(_BYTE *)(a5 + 56) = v7;
  *(_QWORD *)(a5 + 64) = a3;
  *(_DWORD *)(a5 + 72) = a4;
  return result;
}

uint64_t Transport.RecommendationBlockRequestV2.CodingKeys.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D7078;
  return sub_1AD04(a1, v2, a2);
}

uint64_t Transport.RecommendationBlockRequestV2.CodingKeys.init(stringValue:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v5;

  result = Transport.RecommendationBlockRequestV2.CodingKeys.init(rawValue:)(*(Swift::String *)&a1, &v5);
  *a2 = v5;
  return result;
}

uint64_t Transport.RecommendationBlockRequestV2.CodingKeys.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1577C + 4 * byte_18787E[*v0]))(0x666F725072657375, 0xEB00000000656C69);
}

uint64_t sub_1577C()
{
  return 0x716552736B6F6F62;
}

uint64_t sub_1579C()
{
  return 0x6C6F646F6874656DLL;
}

unint64_t sub_157C0()
{
  return 0xD000000000000013;
}

uint64_t Transport.RecommendationBlockRequestV2.CodingKeys.stringValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_15814 + 4 * byte_187882[*v0]))(0x666F725072657375, 0xEB00000000656C69);
}

uint64_t sub_15814()
{
  return 0x716552736B6F6F62;
}

uint64_t sub_15834()
{
  return 0x6C6F646F6874656DLL;
}

unint64_t sub_15858()
{
  return 0xD000000000000013;
}

void sub_15874(char *a1)
{
  sub_77B20(*a1);
}

void sub_15880()
{
  char *v0;

  sub_5282C(*v0);
}

void sub_15888()
{
  __asm { BR              X10 }
}

uint64_t sub_158CC(uint64_t a1)
{
  String.hash(into:)(a1, 0x716552736B6F6F62, 0xEC00000074736575);
  return swift_bridgeObjectRelease(0xEC00000074736575);
}

void sub_15940(uint64_t a1)
{
  char *v1;

  sub_151E18(a1, *v1);
}

uint64_t sub_15948@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Transport.RecommendationBlockRequestV2.CodingKeys.init(rawValue:)(*a1, a2);
}

uint64_t sub_15954()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1598C + 4 * byte_18788A[*v0]))();
}

void sub_1598C(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "booksRequest");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_159B0(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "methodologies");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_159D8(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000013;
  a1[1] = 0x800000000019EB20;
}

uint64_t sub_159F8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_15A30 + 4 * byte_18788E[*v0]))(0x666F725072657375, 0xEB00000000656C69);
}

uint64_t sub_15A30()
{
  return 0x716552736B6F6F62;
}

uint64_t sub_15A50()
{
  return 0x6C6F646F6874656DLL;
}

unint64_t sub_15A74()
{
  return 0xD000000000000013;
}

uint64_t sub_15A90(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1FC18();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_15AB8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1FC18();
  return CodingKey.debugDescription.getter(a1, v2);
}

void Transport.RecommendationBlockRequestV2.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt8 v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt32 v6;
  _BYTE v7[48];

  v3 = *(_BYTE *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  sub_1FB98(v1 + 16, (uint64_t)v7);
  v5 = *(_QWORD *)(v1 + 64);
  v6 = *(_DWORD *)(v1 + 72);
  Hasher._combine(_:)(v3);
  sub_1C19C(a1, v4);
  sub_1FBE0((uint64_t)v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1FAE4);
  sub_1B994(a1);
  sub_1FBE0((uint64_t)v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1FB40);
  swift_bridgeObjectRetain(v5);
  sub_1BDF8(a1, v5);
  swift_bridgeObjectRelease(v5);
  Hasher._combine(_:)(v6);
}

uint64_t Transport.RecommendationBlockRequestV2.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  int v37;
  char v38;

  v3 = sub_5EDC(&qword_1F0738);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v9 = *((_QWORD *)v1 + 1);
  v8 = *((_QWORD *)v1 + 2);
  v28 = *((_QWORD *)v1 + 3);
  v29 = v8;
  v10 = *((_QWORD *)v1 + 4);
  v26 = *((_QWORD *)v1 + 5);
  v27 = v10;
  v11 = *((_QWORD *)v1 + 6);
  v37 = v1[56];
  v24 = *((_QWORD *)v1 + 8);
  v25 = v11;
  HIDWORD(v23) = *((_DWORD *)v1 + 18);
  v12 = a1[3];
  v13 = a1[4];
  sub_49F4(a1, v12);
  v14 = sub_1FC18();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Transport.RecommendationBlockRequestV2.CodingKeys, &type metadata for Transport.RecommendationBlockRequestV2.CodingKeys, v14, v12, v13);
  LOBYTE(v31) = v7;
  v32 = v9;
  v38 = 0;
  v15 = sub_1FC5C();
  v16 = v30;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v38, v3, &type metadata for Transport.UserProfileV2, v15);
  if (!v16)
  {
    v17 = HIDWORD(v23);
    v31 = v29;
    v32 = v28;
    v33 = v27;
    v34 = v26;
    v18 = v24;
    v35 = v25;
    v36 = v37;
    v38 = 1;
    v19 = sub_1FCA0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v31, &v38, v3, &type metadata for Transport.BooksRecommendationRequest, v19);
    v31 = v18;
    v38 = 2;
    v20 = sub_5EDC(&qword_1F05F8);
    v21 = sub_201AC(&qword_1F0600, &qword_1F05F8, (void (*)(void))sub_1F338, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v38, v3, v20, v21);
    LOBYTE(v31) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v17, &v31, v3);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Transport.RecommendationBlockRequestV2.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt8 v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt32 v4;
  _QWORD v6[9];
  _BYTE v7[48];

  v1 = *(_BYTE *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  sub_1FB98(v0 + 16, (uint64_t)v7);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_DWORD *)(v0 + 72);
  Hasher.init(_seed:)(v6, 0);
  Hasher._combine(_:)(v1);
  sub_1C19C((uint64_t)v6, v2);
  sub_1FBE0((uint64_t)v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1FAE4);
  sub_1B994((uint64_t)v6);
  sub_1FBE0((uint64_t)v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1FB40);
  swift_bridgeObjectRetain(v3);
  sub_1BDF8((uint64_t)v6, v3);
  swift_bridgeObjectRelease(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t Transport.RecommendationBlockRequestV2.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  int v47;
  char v48;

  v5 = sub_5EDC(&qword_1F0758);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_1FC18();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Transport.RecommendationBlockRequestV2.CodingKeys, &type metadata for Transport.RecommendationBlockRequestV2.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_62F8(a1);
    return sub_1FB40(1, 0, 0, 0, 0);
  }
  else
  {
    v48 = 0;
    v12 = sub_1FCE4();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v41, &type metadata for Transport.UserProfileV2, &v48, v5, &type metadata for Transport.UserProfileV2, v12);
    v13 = v41;
    v14 = v42;
    v48 = 1;
    v15 = sub_1FD28();
    swift_bridgeObjectRetain(v14);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v41, &type metadata for Transport.BooksRecommendationRequest, &v48, v5, &type metadata for Transport.BooksRecommendationRequest, v15);
    v47 = v13;
    v37 = v14;
    v16 = v42;
    v17 = v44;
    v38 = v43;
    v39 = v45;
    v40 = v41;
    v18 = v46;
    v34 = sub_5EDC(&qword_1F05F8);
    v35 = v16;
    v48 = 2;
    v36 = v17;
    sub_1FAE4(v40, v16, v38, v17, v39);
    v19 = sub_201AC(&qword_1F0618, &qword_1F05F8, (void (*)(void))sub_1F37C, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v41, v34, &v48, v5, v34, v19);
    HIDWORD(v33) = v18;
    v20 = v41;
    LOBYTE(v41) = 3;
    swift_bridgeObjectRetain(v20);
    v21 = KeyedDecodingContainer.decode(_:forKey:)(&v41, v5);
    v23 = *(void (**)(char *, uint64_t))(v6 + 8);
    LODWORD(v34) = v21;
    v23(v8, v5);
    swift_bridgeObjectRetain(v37);
    v24 = v39;
    v25 = v40;
    v26 = v35;
    v27 = v38;
    sub_1FAE4(v40, v35, v38, v36, v39);
    v28 = v25;
    v29 = v36;
    sub_1FB40(v28, v26, v27, v36, v24);
    v30 = v37;
    swift_bridgeObjectRelease(v37);
    *(_BYTE *)a2 = v47;
    v31 = v39;
    v32 = v40;
    *(_QWORD *)(a2 + 8) = v30;
    *(_QWORD *)(a2 + 16) = v32;
    *(_QWORD *)(a2 + 24) = v26;
    *(_QWORD *)(a2 + 32) = v27;
    *(_QWORD *)(a2 + 40) = v29;
    *(_QWORD *)(a2 + 48) = v31;
    LODWORD(v31) = v34;
    *(_BYTE *)(a2 + 56) = BYTE4(v33);
    *(_QWORD *)(a2 + 64) = v20;
    *(_DWORD *)(a2 + 72) = v31;
    sub_62F8(a1);
    swift_bridgeObjectRelease(v37);
    sub_1FB40(v32, v26, v27, v29, v39);
    return swift_bridgeObjectRelease(v20);
  }
}

uint64_t sub_162EC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Transport.RecommendationBlockRequestV2.init(from:)(a1, a2);
}

uint64_t sub_16300(_QWORD *a1)
{
  return Transport.RecommendationBlockRequestV2.encode(to:)(a1);
}

Swift::Int sub_16318(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt8 v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt32 v6;
  _QWORD v8[9];
  _BYTE v9[48];

  v3 = *(_BYTE *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  sub_1FB98(v1 + 16, (uint64_t)v9);
  v5 = *(_QWORD *)(v1 + 64);
  v6 = *(_DWORD *)(v1 + 72);
  Hasher.init(_seed:)(v8, a1);
  Hasher._combine(_:)(v3);
  sub_1C19C((uint64_t)v8, v4);
  sub_1FBE0((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1FAE4);
  sub_1B994((uint64_t)v8);
  sub_1FBE0((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1FB40);
  swift_bridgeObjectRetain(v5);
  sub_1BDF8((uint64_t)v8, v5);
  swift_bridgeObjectRelease(v5);
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

uint64_t Transport.RecommendationBlockResponseV2.CodingKeys.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D70F8;
  return sub_18970(a1, v2, a2);
}

uint64_t Transport.RecommendationBlockResponseV2.CodingKeys.init(stringValue:)@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D7130;
  return sub_18970(a1, v2, a2);
}

unint64_t Transport.RecommendationBlockResponseV2.CodingKeys.rawValue.getter()
{
  return 0xD000000000000010;
}

Swift::Int sub_1641C(uint64_t a1, uint64_t a2)
{
  return sub_18A04(a1, a2, 0xD000000000000010, 0x800000000019ED60);
}

uint64_t sub_16438(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD000000000000010, 0x800000000019ED60);
}

Swift::Int sub_16454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18A88(a1, a2, a3, 0xD000000000000010, 0x800000000019ED60);
}

uint64_t sub_16470@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D7168;
  return sub_18ADC(v2, a1, a2);
}

void sub_1647C(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x800000000019ED60;
}

uint64_t sub_1649C@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D71A0;
  return sub_18B54(a1, v2, a2);
}

uint64_t sub_164A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1FD6C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_164D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1FD6C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t static Transport.RecommendationBlockResponseV2.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *a1;
  v3 = *a2;
  if (*a1)
  {
    if (v3)
    {
      swift_bridgeObjectRetain(*a2);
      v4 = swift_bridgeObjectRetain(v2);
      v5 = sub_9104(v4, v3);
      swift_bridgeObjectRelease(v2);
      swift_bridgeObjectRelease(v3);
      if ((v5 & 1) != 0)
        return 1;
    }
  }
  else if (!v3)
  {
    return 1;
  }
  return 0;
}

void Transport.RecommendationBlockResponseV2.hash(into:)(uint64_t a1)
{
  sub_18C48(a1, sub_1BAEC);
}

uint64_t Transport.RecommendationBlockResponseV2.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v3 = sub_5EDC(&qword_1F0770);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_49F4(a1, v8);
  v10 = sub_1FD6C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Transport.RecommendationBlockResponseV2.CodingKeys, &type metadata for Transport.RecommendationBlockResponseV2.CodingKeys, v10, v8, v9);
  v16 = v7;
  v11 = sub_5EDC(&qword_1F0780);
  v12 = sub_201AC(&qword_1F0788, &qword_1F0780, (void (*)(void))sub_1FDB0, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v16, v13, v3, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Transport.RecommendationBlockResponseV2.hashValue.getter()
{
  return sub_18DEC((void (*)(_QWORD *, uint64_t))sub_1BAEC);
}

uint64_t Transport.RecommendationBlockResponseV2.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v5 = sub_5EDC(&qword_1F0798);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_1FD6C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Transport.RecommendationBlockResponseV2.CodingKeys, &type metadata for Transport.RecommendationBlockResponseV2.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_5EDC(&qword_1F0780);
    v13 = sub_201AC(&qword_1F07A0, &qword_1F0780, (void (*)(void))sub_1FDF4, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v17, v12, v14, v5, v12, v13);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v17;
  }
  return sub_62F8(a1);
}

uint64_t sub_167F0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return Transport.RecommendationBlockResponseV2.init(from:)(a1, a2);
}

uint64_t sub_16804(_QWORD *a1)
{
  return Transport.RecommendationBlockResponseV2.encode(to:)(a1);
}

Swift::Int sub_16818(uint64_t a1, uint64_t a2)
{
  return sub_1902C(a1, a2, (void (*)(_QWORD *, uint64_t))sub_1BAEC);
}

void sub_16824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_190B4(a1, a2, a3, sub_1BAEC);
}

Swift::Int sub_16830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19130(a1, a2, a3, (void (*)(_QWORD *, uint64_t))sub_1BAEC);
}

uint64_t Transport.RecommendationRequestV2.CodingKeys.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D71D8;
  return sub_16848(a1, v2, a2);
}

uint64_t sub_16848@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X2>, char *a3@<X8>)
{
  void *object;
  Swift::String v4;
  unint64_t v7;
  uint64_t result;
  char v9;

  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  v7 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(object);
  v9 = 3;
  if (v7 < 3)
    v9 = v7;
  *a3 = v9;
  return result;
}

uint64_t Transport.RecommendationRequestV2.CodingKeys.init(stringValue:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v5;

  result = Transport.RecommendationRequestV2.CodingKeys.init(rawValue:)(*(Swift::String *)&a1, &v5);
  *a2 = v5;
  return result;
}

uint64_t Transport.RecommendationRequestV2.CodingKeys.rawValue.getter()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD00000000000001BLL;
  if (*v0 != 1)
    v1 = 0x6E656D7461657274;
  if (*v0)
    return v1;
  else
    return 0x6F724665726F7473;
}

uint64_t sub_16940(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_781DC(*a1, *a2);
}

Swift::Int sub_1694C()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0x800000000019EB90;
  v3 = 0xD00000000000001BLL;
  if (v1 != 1)
  {
    v3 = 0x6E656D7461657274;
    v2 = 0xEC00000073644974;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6F724665726F7473;
  if (v1)
    v5 = v2;
  else
    v5 = 0xEC0000006449746ELL;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_16A00(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0x800000000019EB90;
  v3 = 0xD00000000000001BLL;
  if (*v1 != 1)
  {
    v3 = 0x6E656D7461657274;
    v2 = 0xEC00000073644974;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6F724665726F7473;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xEC0000006449746ELL;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_16A90(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0x800000000019EB90;
  v4 = 0xD00000000000001BLL;
  if (v2 != 1)
  {
    v4 = 0x6E656D7461657274;
    v3 = 0xEC00000073644974;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x6F724665726F7473;
  if (v2)
    v6 = v3;
  else
    v6 = 0xEC0000006449746ELL;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

uint64_t sub_16B40@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Transport.RecommendationRequestV2.CodingKeys.init(rawValue:)(*a1, a2);
}

void sub_16B4C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEC0000006449746ELL;
  v4 = 0x800000000019EB90;
  v5 = 0xD00000000000001BLL;
  if (v2 != 1)
  {
    v5 = 0x6E656D7461657274;
    v4 = 0xEC00000073644974;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6F724665726F7473;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_16BC0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1FE38();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_16BE8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1FE38();
  return CodingKey.debugDescription.getter(a1, v2);
}

void Transport.RecommendationRequestV2.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v6);
  sub_1CAF8(a1, v6);
  swift_bridgeObjectRelease(v6);
  if (v5)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*(_QWORD *)(v5 + 16));
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      swift_bridgeObjectRetain(v5);
      v8 = (_QWORD *)(v5 + 40);
      do
      {
        v9 = *(v8 - 1);
        v10 = *v8;
        swift_bridgeObjectRetain(*v8);
        String.hash(into:)(a1, v9, v10);
        swift_bridgeObjectRelease(v10);
        v8 += 2;
        --v7;
      }
      while (v7);
      swift_bridgeObjectRelease(v5);
    }
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t Transport.RecommendationRequestV2.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v3 = sub_5EDC(&qword_1F07B0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = v1[2];
  v20 = v1[3];
  v21 = v9;
  v10 = a1[3];
  v11 = a1[4];
  sub_49F4(a1, v10);
  v12 = sub_1FE38();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Transport.RecommendationRequestV2.CodingKeys, &type metadata for Transport.RecommendationRequestV2.CodingKeys, v12, v10, v11);
  LOBYTE(v24) = 0;
  v13 = v22;
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, &v24, v3);
  if (!v13)
  {
    v14 = v20;
    v24 = v21;
    v23 = 1;
    v15 = sub_5EDC(&qword_1F07C0);
    v16 = sub_201AC(&qword_1F07C8, &qword_1F07C0, (void (*)(void))sub_1FE7C, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v24, &v23, v3, v15, v16);
    v24 = v14;
    v23 = 2;
    v17 = sub_5EDC(&qword_1F03E0);
    v18 = sub_1F298(&qword_1F03E8, &qword_1F03E0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v24, &v23, v3, v17, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Transport.RecommendationRequestV2.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[10];
  __int128 v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 24);
  v3[9] = *(_QWORD *)v0;
  v4 = *(_OWORD *)(v0 + 8);
  v5 = v1;
  Hasher.init(_seed:)(v3, 0);
  Transport.RecommendationRequestV2.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

uint64_t Transport.RecommendationRequestV2.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  char v28;
  uint64_t v29;

  v5 = sub_5EDC(&qword_1F07D8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_1FE38();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Transport.RecommendationRequestV2.CodingKeys, &type metadata for Transport.RecommendationRequestV2.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_62F8(a1);
    v24 = 0;
  }
  else
  {
    LOBYTE(v29) = 0;
    v13 = KeyedDecodingContainer.decode(_:forKey:)(&v29, v5);
    v15 = v14;
    v27 = a2;
    v16 = sub_5EDC(&qword_1F07C0);
    v28 = 1;
    v17 = sub_201AC(&qword_1F07E0, &qword_1F07C0, (void (*)(void))sub_1FEC0, (uint64_t)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v15);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v29, v16, &v28, v5, v16, v17);
    v18 = v29;
    v19 = sub_5EDC(&qword_1F03E0);
    v28 = 2;
    v20 = sub_1F298(&qword_1F0410, &qword_1F03E0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v26 = v18;
    swift_bridgeObjectRetain(v18);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v29, v19, &v28, v5, v19, v20);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v21 = v29;
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRelease(0);
    v23 = v26;
    v22 = v27;
    *v27 = v13;
    v22[1] = v15;
    v22[2] = v23;
    v22[3] = v21;
    sub_62F8(a1);
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v23);
    v24 = v15;
  }
  return swift_bridgeObjectRelease(v24);
}

uint64_t sub_171F4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Transport.RecommendationRequestV2.init(from:)(a1, a2);
}

uint64_t sub_17208(_QWORD *a1)
{
  return Transport.RecommendationRequestV2.encode(to:)(a1);
}

Swift::Int sub_17220(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[10];
  __int128 v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v1 + 24);
  v4[9] = *(_QWORD *)v1;
  v5 = *(_OWORD *)(v1 + 8);
  v6 = v2;
  Hasher.init(_seed:)(v4, a1);
  Transport.RecommendationRequestV2.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t Transport.Diagnosis.init(type:code:requestId:message:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  *a9 = result;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  return result;
}

uint64_t Transport.RecommendationResponseV2.CodingKeys.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  unint64_t v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1D7240, v3);
  result = swift_bridgeObjectRelease(object);
  v7 = 8;
  if (v5 < 8)
    v7 = v5;
  *a2 = v7;
  return result;
}

uint64_t Transport.RecommendationResponseV2.CodingKeys.init(stringValue:)@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v4;

  result = Transport.RecommendationResponseV2.CodingKeys.init(rawValue:)(a1, &v4);
  *a2 = v4;
  return result;
}

void Transport.RecommendationResponseV2.CodingKeys.init(intValue:)(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t Transport.RecommendationResponseV2.CodingKeys.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_17358 + 4 * byte_187892[*v0]))(0xD00000000000001CLL, 0x800000000019EBC0);
}

uint64_t sub_17358@<X0>(uint64_t a1@<X8>)
{
  return a1 + 2;
}

uint64_t sub_173AC()
{
  return 0x687475416B6F6F62;
}

uint64_t sub_173CC()
{
  return 0x626D45736B6F6F62;
}

uint64_t sub_173F0()
{
  return 0x726E65476B6F6F62;
}

uint64_t Transport.RecommendationResponseV2.CodingKeys.stringValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_17444 + 4 * byte_18789A[*v0]))(0xD00000000000001CLL, 0x800000000019EBC0);
}

uint64_t sub_17444@<X0>(uint64_t a1@<X8>)
{
  return a1 + 2;
}

uint64_t sub_17498()
{
  return 0x687475416B6F6F62;
}

uint64_t sub_174B8()
{
  return 0x626D45736B6F6F62;
}

uint64_t sub_174DC()
{
  return 0x726E65476B6F6F62;
}

void sub_174F8(char *a1)
{
  sub_77F9C(*a1);
}

void sub_17504()
{
  char *v0;

  sub_151FE4(0, *v0);
}

void sub_17510(uint64_t a1)
{
  char *v1;

  sub_F86A8(a1, *v1);
}

void sub_17518(uint64_t a1)
{
  char *v1;

  sub_151FE4(a1, *v1);
}

uint64_t sub_17520@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Transport.RecommendationResponseV2.CodingKeys.init(rawValue:)(*a1, a2);
}

uint64_t sub_1752C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = Transport.RecommendationResponseV2.CodingKeys.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_17554(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1FF04();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1757C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1FF04();
  return CodingKey.debugDescription.getter(a1, v2);
}

void Transport.RecommendationResponseV2.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = v1;
  v5 = *v2;
  v4 = v2[1];
  v7 = v2[2];
  v6 = v2[3];
  v9 = v2[4];
  v8 = v2[5];
  v11 = v2[6];
  v10 = v2[7];
  swift_bridgeObjectRetain(*v2);
  sub_1C7BC(a1, v5);
  swift_bridgeObjectRelease(v5);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v4);
    sub_1C6AC(a1, v4);
    swift_bridgeObjectRelease(v4);
    if (v7)
      goto LABEL_3;
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v7)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v7);
      sub_1C5EC(a1, v7);
      swift_bridgeObjectRelease(v7);
      if (v6)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  Hasher._combine(_:)(0);
  if (v6)
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    sub_1C540(a1, v6);
    if (v9)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  Hasher._combine(_:)(0);
  if (v9)
  {
LABEL_5:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v9);
    sub_1C3F4(a1, v9);
    swift_bridgeObjectRelease(v9);
    if (v8)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  Hasher._combine(_:)(0);
  if (v8)
  {
LABEL_6:
    Hasher._combine(_:)(1u);
    sub_1D0F0(a1, v8);
    if (v11)
      goto LABEL_7;
LABEL_14:
    Hasher._combine(_:)(0);
    if (v10)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_13:
  Hasher._combine(_:)(0);
  if (!v11)
    goto LABEL_14;
LABEL_7:
  Hasher._combine(_:)(1u);
  sub_1C314(a1, v11);
  if (v10)
  {
LABEL_8:
    Hasher._combine(_:)(1u);
    sub_1D0F0(a1, v10);
    return;
  }
LABEL_15:
  Hasher._combine(_:)(0);
}

uint64_t Transport.RecommendationResponseV2.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;

  v4 = sub_5EDC(&qword_1F07F0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v41 = v1[2];
  v42 = v8;
  v10 = v1[3];
  v39 = v1[4];
  v40 = v10;
  v11 = v1[5];
  v37 = v1[6];
  v38 = v11;
  v36 = v1[7];
  v12 = a1[3];
  v13 = a1[4];
  sub_49F4(a1, v12);
  v14 = sub_1FF04();
  v15 = v13;
  v16 = v4;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Transport.RecommendationResponseV2.CodingKeys, &type metadata for Transport.RecommendationResponseV2.CodingKeys, v14, v12, v15);
  v44 = v9;
  v43 = 0;
  v17 = sub_5EDC(&qword_1F0800);
  v18 = sub_201AC(&qword_1F0808, &qword_1F0800, (void (*)(void))sub_1FF48, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v44, &v43, v4, v17, v18);
  if (!v2)
  {
    v19 = v40;
    v20 = v41;
    v44 = v42;
    v43 = 1;
    v21 = sub_5EDC(&qword_1F0818);
    v22 = sub_201AC(&qword_1F0820, &qword_1F0818, (void (*)(void))sub_1FF8C, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v44, &v43, v16, v21, v22);
    v44 = v20;
    v43 = 2;
    v23 = sub_5EDC(&qword_1F0440);
    v24 = sub_201AC(&qword_1F0448, &qword_1F0440, (void (*)(void))sub_1ED8C, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v44, &v43, v16, v23, v24);
    v44 = v19;
    v43 = 3;
    v25 = sub_5EDC(&qword_1F0458);
    v26 = sub_201AC(&qword_1F0460, &qword_1F0458, (void (*)(void))sub_1EDD0, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v44, &v43, v16, v25, v26);
    v44 = v39;
    v43 = 4;
    v27 = sub_5EDC(&qword_1F0830);
    v28 = sub_201AC(&qword_1F0838, &qword_1F0830, (void (*)(void))sub_1FFD0, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v44, &v43, v16, v27, v28);
    v44 = v38;
    v43 = 5;
    v29 = sub_5EDC(&qword_1F0470);
    v30 = sub_201AC(&qword_1F0478, &qword_1F0470, (void (*)(void))sub_1EE14, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v44, &v43, v16, v29, v30);
    v44 = v37;
    v43 = 6;
    v31 = sub_5EDC(&qword_1F0488);
    v32 = sub_201AC(&qword_1F0490, &qword_1F0488, (void (*)(void))sub_1EE58, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v44, &v43, v16, v31, v32);
    v44 = v36;
    v43 = 7;
    v33 = sub_5EDC(&qword_1F04A0);
    v34 = sub_201AC(&qword_1F04A8, &qword_1F04A0, (void (*)(void))sub_1EE9C, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v44, &v43, v16, v33, v34);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v16);
}

Swift::Int Transport.RecommendationResponseV2.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[10];
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 56);
  v3[9] = *(_QWORD *)v0;
  v4 = *(_OWORD *)(v0 + 8);
  v5 = *(_OWORD *)(v0 + 24);
  v6 = *(_OWORD *)(v0 + 40);
  v7 = v1;
  Hasher.init(_seed:)(v3, 0);
  Transport.RecommendationResponseV2.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

uint64_t Transport.RecommendationResponseV2.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  char v47;
  uint64_t v48;

  v5 = sub_5EDC(&qword_1F0848);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_1FF04();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Transport.RecommendationResponseV2.CodingKeys, &type metadata for Transport.RecommendationResponseV2.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_62F8(a1);
    swift_bridgeObjectRelease(0);
    swift_bridgeObjectRelease(0);
    swift_bridgeObjectRelease(0);
    swift_bridgeObjectRelease(0);
    swift_bridgeObjectRelease(0);
    swift_bridgeObjectRelease(0);
    v41 = 0;
  }
  else
  {
    v12 = sub_5EDC(&qword_1F0800);
    v47 = 0;
    v13 = sub_201AC(&qword_1F0850, &qword_1F0800, (void (*)(void))sub_20014, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v48, v12, &v47, v5, v12, v13);
    v46 = a2;
    v15 = v48;
    v16 = sub_5EDC(&qword_1F0818);
    v47 = 1;
    v17 = sub_201AC(&qword_1F0860, &qword_1F0818, (void (*)(void))sub_20058, (uint64_t)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v15);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v48, v16, &v47, v5, v16, v17);
    v45 = v15;
    v18 = v48;
    v19 = sub_5EDC(&qword_1F0440);
    v47 = 2;
    v20 = sub_201AC(&qword_1F04D0, &qword_1F0440, (void (*)(void))sub_1EF24, (uint64_t)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v18);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v48, v19, &v47, v5, v19, v20);
    v44 = v18;
    v21 = v48;
    v22 = sub_5EDC(&qword_1F0458);
    v47 = 3;
    v23 = sub_201AC(&qword_1F04E0, &qword_1F0458, (void (*)(void))sub_1EF68, (uint64_t)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v21);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v48, v22, &v47, v5, v22, v23);
    v43 = v21;
    v24 = v48;
    v25 = sub_5EDC(&qword_1F0830);
    v47 = 4;
    v26 = sub_201AC(&qword_1F0870, &qword_1F0830, (void (*)(void))sub_2009C, (uint64_t)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v24);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v48, v25, &v47, v5, v25, v26);
    v42 = v24;
    v27 = v48;
    v28 = sub_5EDC(&qword_1F0470);
    v47 = 5;
    v29 = sub_201AC(&qword_1F04F0, &qword_1F0470, (void (*)(void))sub_1EFAC, (uint64_t)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v27);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v48, v28, &v47, v5, v28, v29);
    v30 = v48;
    v31 = sub_5EDC(&qword_1F0488);
    v47 = 6;
    v32 = sub_201AC(&qword_1F0500, &qword_1F0488, (void (*)(void))sub_1EFF0, (uint64_t)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v30);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v48, v31, &v47, v5, v31, v32);
    v33 = v48;
    v34 = sub_5EDC(&qword_1F04A0);
    v47 = 7;
    v35 = sub_201AC(&qword_1F0510, &qword_1F04A0, (void (*)(void))sub_1F034, (uint64_t)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v33);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v48, v34, &v47, v5, v34, v35);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v36 = v48;
    swift_bridgeObjectRetain(v48);
    swift_bridgeObjectRelease(0);
    v37 = v46;
    v39 = v43;
    v38 = v44;
    *v46 = v45;
    v37[1] = v38;
    v40 = v42;
    v37[2] = v39;
    v37[3] = v40;
    v37[4] = v27;
    v37[5] = v30;
    v37[6] = v33;
    v37[7] = v36;
    sub_62F8(a1);
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v30);
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v40);
    swift_bridgeObjectRelease(v39);
    swift_bridgeObjectRelease(v44);
    v41 = v45;
  }
  return swift_bridgeObjectRelease(v41);
}

uint64_t sub_18394@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return Transport.RecommendationResponseV2.init(from:)(a1, a2);
}

uint64_t sub_183A8(_QWORD *a1)
{
  return Transport.RecommendationResponseV2.encode(to:)(a1);
}

Swift::Int sub_183C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[10];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v1 + 56);
  v4[9] = *(_QWORD *)v1;
  v5 = *(_OWORD *)(v1 + 8);
  v6 = *(_OWORD *)(v1 + 24);
  v7 = *(_OWORD *)(v1 + 40);
  v8 = v2;
  Hasher.init(_seed:)(v4, a1);
  Transport.RecommendationResponseV2.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t Transport.MetadataResponse.init(bookIdToMetadataEntries:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t Transport.MetadataRequest.CodingKeys.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D7320;
  return sub_18970(a1, v2, a2);
}

uint64_t Transport.MetadataRequest.CodingKeys.init(stringValue:)@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D7358;
  return sub_18970(a1, v2, a2);
}

void Transport.MetadataRequest.CodingKeys.init(intValue:)(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t Transport.MetadataRequest.CodingKeys.rawValue.getter()
{
  return 0x7364496B6F6F62;
}

Swift::Int sub_18468(uint64_t a1, uint64_t a2)
{
  return sub_18A04(a1, a2, 0x7364496B6F6F62, 0xE700000000000000);
}

uint64_t sub_18480(uint64_t a1)
{
  return String.hash(into:)(a1, 0x7364496B6F6F62, 0xE700000000000000);
}

Swift::Int sub_18498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18A88(a1, a2, a3, 0x7364496B6F6F62, 0xE700000000000000);
}

uint64_t sub_184B0@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D7390;
  return sub_18ADC(v2, a1, a2);
}

void sub_184BC(_QWORD *a1@<X8>)
{
  *a1 = 0x7364496B6F6F62;
  a1[1] = 0xE700000000000000;
}

uint64_t sub_184D8@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D73C8;
  return sub_18B54(a1, v2, a2);
}

uint64_t sub_184E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_200E0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1850C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_200E0();
  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL static Transport.MetadataRequest.== infix(_:_:)(_QWORD **a1, _QWORD **a2)
{
  return sub_B454(*a1, *a2);
}

void Transport.MetadataRequest.hash(into:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt64 *v3;
  Swift::UInt64 v4;

  v1 = *v0;
  Hasher._combine(_:)(*(_QWORD *)(*v0 + 16));
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = (Swift::UInt64 *)(v1 + 32);
    do
    {
      v4 = *v3++;
      Hasher._combine(_:)(v4);
      --v2;
    }
    while (v2);
  }
}

uint64_t Transport.MetadataRequest.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v3 = sub_5EDC(&qword_1F0880);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_49F4(a1, v8);
  v10 = sub_200E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Transport.MetadataRequest.CodingKeys, &type metadata for Transport.MetadataRequest.CodingKeys, v10, v8, v9);
  v16 = v7;
  v11 = sub_5EDC(&qword_1F0300);
  v12 = sub_1F298(&qword_1F0308, &qword_1F0300, (uint64_t)&protocol witness table for Int64, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v3, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Transport.MetadataRequest.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt64 *v3;
  Swift::UInt64 v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  Hasher._combine(_:)(*(_QWORD *)(v1 + 16));
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = (Swift::UInt64 *)(v1 + 32);
    do
    {
      v4 = *v3++;
      Hasher._combine(_:)(v4);
      --v2;
    }
    while (v2);
  }
  return Hasher._finalize()();
}

uint64_t Transport.MetadataRequest.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v5 = sub_5EDC(&qword_1F0890);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_200E0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Transport.MetadataRequest.CodingKeys, &type metadata for Transport.MetadataRequest.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_5EDC(&qword_1F0300);
    v13 = sub_1F298(&qword_1F0318, &qword_1F0300, (uint64_t)&protocol witness table for Int64, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, v12, v14, v5, v12, v13);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v17;
  }
  return sub_62F8(a1);
}

uint64_t sub_18880@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return Transport.MetadataRequest.init(from:)(a1, a2);
}

uint64_t sub_18894(_QWORD *a1)
{
  return Transport.MetadataRequest.encode(to:)(a1);
}

void sub_188AC()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::UInt v2;
  Swift::UInt64 *v3;
  Swift::UInt64 v4;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    v3 = (Swift::UInt64 *)(v1 + 32);
    do
    {
      v4 = *v3++;
      Hasher._combine(_:)(v4);
      --v2;
    }
    while (v2);
  }
}

Swift::Int sub_188FC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  Swift::UInt v3;
  Swift::UInt64 *v4;
  Swift::UInt64 v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = *(_QWORD *)(v2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = (Swift::UInt64 *)(v2 + 32);
    do
    {
      v5 = *v4++;
      Hasher._combine(_:)(v5);
      --v3;
    }
    while (v3);
  }
  return Hasher._finalize()();
}

uint64_t Transport.MetadataResponse.CodingKeys.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D7400;
  return sub_18970(a1, v2, a2);
}

uint64_t sub_18970@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X2>, BOOL *a3@<X8>)
{
  void *object;
  Swift::String v4;
  Swift::Int v7;
  uint64_t result;

  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  v7 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(object);
  *a3 = v7 != 0;
  return result;
}

uint64_t Transport.MetadataResponse.CodingKeys.init(stringValue:)@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D7438;
  return sub_18970(a1, v2, a2);
}

unint64_t Transport.MetadataResponse.CodingKeys.rawValue.getter()
{
  return 0xD000000000000017;
}

Swift::Int sub_189E8(uint64_t a1, uint64_t a2)
{
  return sub_18A04(a1, a2, 0xD000000000000017, 0x800000000019EDD0);
}

Swift::Int sub_18A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, 0);
  String.hash(into:)(v7, a3, a4);
  return Hasher._finalize()();
}

uint64_t sub_18A50(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD000000000000017, 0x800000000019EDD0);
}

Swift::Int sub_18A6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18A88(a1, a2, a3, 0xD000000000000017, 0x800000000019EDD0);
}

Swift::Int sub_18A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v8[9];

  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, a4, a5);
  return Hasher._finalize()();
}

uint64_t sub_18AD0@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D7470;
  return sub_18ADC(v2, a1, a2);
}

uint64_t sub_18ADC@<X0>(Swift::OpaquePointer cases@<0:X3>, uint64_t *a2@<X0>, BOOL *a3@<X8>)
{
  Swift::String v4;
  void *v5;
  Swift::Int v6;
  uint64_t result;

  v4._countAndFlagsBits = *a2;
  v5 = (void *)a2[1];
  v4._object = v5;
  v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(v5);
  *a3 = v6 != 0;
  return result;
}

void sub_18B28(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000017;
  a1[1] = 0x800000000019EDD0;
}

uint64_t sub_18B48@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D74A8;
  return sub_18B54(a1, v2, a2);
}

uint64_t sub_18B54@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X4>, BOOL *a3@<X8>)
{
  void *object;
  Swift::String v4;
  Swift::Int v6;
  uint64_t result;

  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(object);
  *a3 = v6 != 0;
  return result;
}

uint64_t sub_18BA4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_20124();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_18BCC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_20124();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t static Transport.MetadataResponse.== infix(_:_:)(_QWORD *a1, uint64_t *a2)
{
  return sub_18C00(a1, a2, (uint64_t (*)(void))sub_AD9C);
}

uint64_t sub_18C00(_QWORD *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v3;

  v3 = *a2;
  if (*a1)
  {
    if (v3 && (a3() & 1) != 0)
      return 1;
  }
  else if (!v3)
  {
    return 1;
  }
  return 0;
}

void Transport.MetadataResponse.hash(into:)(uint64_t a1)
{
  sub_18C48(a1, sub_1BFC4);
}

void sub_18C48(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  if (*v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v4);
    a2(a1, v4);
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t Transport.MetadataResponse.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v3 = sub_5EDC(&qword_1F0898);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_49F4(a1, v8);
  v10 = sub_20124();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Transport.MetadataResponse.CodingKeys, &type metadata for Transport.MetadataResponse.CodingKeys, v10, v8, v9);
  v16 = v7;
  v11 = sub_5EDC(&qword_1F08A8);
  v12 = sub_201AC(&qword_1F08B0, &qword_1F08A8, (void (*)(void))sub_20168, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v16, v13, v3, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Transport.MetadataResponse.hashValue.getter()
{
  return sub_18DEC((void (*)(_QWORD *, uint64_t))sub_1BFC4);
}

Swift::Int sub_18DEC(void (*a1)(_QWORD *, uint64_t))
{
  uint64_t *v1;
  uint64_t v3;
  _QWORD v5[9];

  v3 = *v1;
  Hasher.init(_seed:)(v5, 0);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v3);
    a1(v5, v3);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t Transport.MetadataResponse.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v5 = sub_5EDC(&qword_1F08C0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_20124();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Transport.MetadataResponse.CodingKeys, &type metadata for Transport.MetadataResponse.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_5EDC(&qword_1F08A8);
    v13 = sub_201AC(&qword_1F08C8, &qword_1F08A8, (void (*)(void))sub_20210, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v17, v12, v14, v5, v12, v13);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v17;
  }
  return sub_62F8(a1);
}

uint64_t sub_18FB0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return Transport.MetadataResponse.init(from:)(a1, a2);
}

uint64_t sub_18FC4(_QWORD *a1)
{
  return Transport.MetadataResponse.encode(to:)(a1);
}

uint64_t sub_18FD8(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_18FE4(a1, a2, a3, a4, (uint64_t (*)(void))sub_AD9C);
}

uint64_t sub_18FE4(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5;

  v5 = *a2;
  if (*a1)
  {
    if (v5 && (a5() & 1) != 0)
      return 1;
  }
  else if (!v5)
  {
    return 1;
  }
  return 0;
}

Swift::Int sub_19020(uint64_t a1, uint64_t a2)
{
  return sub_1902C(a1, a2, (void (*)(_QWORD *, uint64_t))sub_1BFC4);
}

Swift::Int sub_1902C(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *, uint64_t))
{
  uint64_t *v3;
  uint64_t v5;
  _QWORD v7[9];

  v5 = *v3;
  Hasher.init(_seed:)(v7, 0);
  if (v5)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v5);
    a3(v7, v5);
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void sub_190A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_190B4(a1, a2, a3, sub_1BFC4);
}

void sub_190B4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t v6;

  v6 = *v4;
  if (*v4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v6);
    a4(a1, v6);
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int sub_19124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19130(a1, a2, a3, (void (*)(_QWORD *, uint64_t))sub_1BFC4);
}

Swift::Int sub_19130(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *, uint64_t))
{
  uint64_t *v4;
  uint64_t v6;
  _QWORD v8[9];

  v6 = *v4;
  Hasher.init(_seed:)(v8, a1);
  if (v6)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v6);
    a4(v8, v6);
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t Transport.BookIdToMetadataEntry.ulyssesEmbedding.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t Transport.BookIdToMetadataEntry.ulyssesEmbedding.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = result;
  *(_BYTE *)(v2 + 16) = a2 & 1;
  return result;
}

uint64_t Transport.Diagnosis.requestId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return v1;
}

uint64_t Transport.Diagnosis.requestId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 40));
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t Transport.BookIdToMetadataEntry.init(bookId:ulyssesEmbedding:bisacCodes:deduplicationId:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(_QWORD *)a7 = result;
  *(_QWORD *)(a7 + 8) = a2;
  *(_BYTE *)(a7 + 16) = a3 & 1;
  *(_QWORD *)(a7 + 24) = a4;
  *(_QWORD *)(a7 + 32) = a5;
  *(_QWORD *)(a7 + 40) = a6;
  return result;
}

uint64_t Transport.BookIdToMetadataEntry.CodingKeys.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D74E0;
  return sub_1AD04(a1, v2, a2);
}

uint64_t Transport.BookIdToMetadataEntry.CodingKeys.init(stringValue:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v5;

  result = Transport.BookIdToMetadataEntry.CodingKeys.init(rawValue:)(*(Swift::String *)&a1, &v5);
  *a2 = v5;
  return result;
}

void Transport.BookIdToMetadataEntry.CodingKeys.init(intValue:)(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t Transport.BookIdToMetadataEntry.CodingKeys.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_192B4 + 4 * byte_1878A2[*v0]))(0x64496B6F6F62, 0xE600000000000000);
}

unint64_t sub_192B4()
{
  return 0xD000000000000010;
}

uint64_t sub_192D0()
{
  return 0x646F436361736962;
}

uint64_t sub_192EC()
{
  return 0x63696C7075646564;
}

uint64_t Transport.BookIdToMetadataEntry.CodingKeys.stringValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1933C + 4 * byte_1878A6[*v0]))(0x64496B6F6F62, 0xE600000000000000);
}

unint64_t sub_1933C()
{
  return 0xD000000000000010;
}

uint64_t sub_19358()
{
  return 0x646F436361736962;
}

uint64_t sub_19374()
{
  return 0x63696C7075646564;
}

void sub_19398(char *a1)
{
  sub_787E8(*a1);
}

void sub_193A4()
{
  char *v0;

  sub_5290C(*v0);
}

void sub_193AC()
{
  __asm { BR              X10 }
}

uint64_t sub_193E4(uint64_t a1)
{
  String.hash(into:)(a1, 0xD000000000000010, 0x800000000019EDF0);
  return swift_bridgeObjectRelease(0x800000000019EDF0);
}

void sub_19454(uint64_t a1)
{
  char *v1;

  sub_15230C(a1, *v1);
}

uint64_t sub_1945C@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Transport.BookIdToMetadataEntry.CodingKeys.init(rawValue:)(*a1, a2);
}

uint64_t sub_19468()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_19494 + 4 * byte_1878AE[*v0]))();
}

void sub_19494(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x800000000019EDF0;
}

void sub_194B4(_QWORD *a1@<X8>)
{
  *a1 = 0x646F436361736962;
  a1[1] = 0xEA00000000007365;
}

void sub_194D4(_QWORD *a1@<X8>)
{
  *a1 = 0x63696C7075646564;
  a1[1] = 0xEF64496E6F697461;
}

uint64_t sub_194FC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_19528 + 4 * byte_1878B2[*v0]))(0x64496B6F6F62, 0xE600000000000000);
}

unint64_t sub_19528()
{
  return 0xD000000000000010;
}

uint64_t sub_19544()
{
  return 0x646F436361736962;
}

uint64_t sub_19560()
{
  return 0x63696C7075646564;
}

uint64_t sub_19584(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_20254();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_195AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_20254();
  return CodingKey.debugDescription.getter(a1, v2);
}

void Transport.BookIdToMetadataEntry.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt64 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt64 v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(unsigned __int8 *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  Hasher._combine(_:)(*(_QWORD *)v1);
  if (v4 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v8 = v3;
    else
      v8 = 0;
    Hasher._combine(_:)(v8);
  }
  Hasher._combine(_:)(*(_QWORD *)(v6 + 16));
  v9 = *(_QWORD *)(v6 + 16);
  if (v9)
  {
    swift_bridgeObjectRetain(v6);
    v10 = (_QWORD *)(v6 + 40);
    do
    {
      v11 = *(v10 - 1);
      v12 = *v10;
      swift_bridgeObjectRetain(*v10);
      String.hash(into:)(a1, v11, v12);
      swift_bridgeObjectRelease(v12);
      v10 += 2;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease(v6);
  }
  if (v7)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v7);
    String.hash(into:)(a1, v5, v7);
    swift_bridgeObjectRelease(v7);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t Transport.BookIdToMetadataEntry.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  char v28;
  char v29;
  char v30;

  v4 = sub_5EDC(&qword_1F08D8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v26 = *((unsigned __int8 *)v1 + 16);
  v23 = v1[3];
  v24 = v8;
  v10 = v1[4];
  v21 = v1[5];
  v22 = v10;
  v11 = a1[3];
  v12 = a1[4];
  sub_49F4(a1, v11);
  v13 = sub_20254();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Transport.BookIdToMetadataEntry.CodingKeys, &type metadata for Transport.BookIdToMetadataEntry.CodingKeys, v13, v11, v12);
  v30 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v9, &v30, v4);
  if (!v2)
  {
    v15 = v22;
    v14 = v23;
    v16 = v21;
    v29 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v26, &v29, v4);
    v25 = v14;
    v28 = 2;
    v17 = sub_5EDC(&qword_1F03E0);
    v18 = sub_1F298(&qword_1F03E8, &qword_1F03E0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v25, &v28, v4, v17, v18);
    v27 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, &v27, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int Transport.BookIdToMetadataEntry.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt64 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[9];

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 16);
  v5 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 40);
  Hasher.init(_seed:)(v13, 0);
  Hasher._combine(_:)(v1);
  if (v3 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v7 = v2;
    else
      v7 = 0;
    Hasher._combine(_:)(v7);
  }
  Hasher._combine(_:)(*(_QWORD *)(v5 + 16));
  v8 = *(_QWORD *)(v5 + 16);
  if (v8)
  {
    swift_bridgeObjectRetain(v5);
    v9 = (_QWORD *)(v5 + 40);
    do
    {
      v10 = *(v9 - 1);
      v11 = *v9;
      swift_bridgeObjectRetain(*v9);
      String.hash(into:)(v13, v10, v11);
      swift_bridgeObjectRelease(v11);
      v9 += 2;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease(v5);
  }
  if (v6)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v6);
    String.hash(into:)(v13, v4, v6);
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t Transport.BookIdToMetadataEntry.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v5 = sub_5EDC(&qword_1F08E8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_20254();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Transport.BookIdToMetadataEntry.CodingKeys, &type metadata for Transport.BookIdToMetadataEntry.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_62F8(a1);
    v25 = 0;
  }
  else
  {
    v32 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v32, v5);
    v31 = 1;
    v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v31, v5);
    v28 = v14;
    v26 = v13;
    v15 = sub_5EDC(&qword_1F03E0);
    v30 = 2;
    v16 = sub_1F298(&qword_1F0410, &qword_1F03E0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v27, v15, &v30, v5, v15, v16);
    v18 = v27;
    v29 = 3;
    swift_bridgeObjectRetain(v27);
    v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v29, v5);
    v21 = v20;
    v22 = *(void (**)(char *, uint64_t))(v6 + 8);
    v23 = v19;
    v22(v8, v5);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRelease(0);
    v24 = v26;
    *(_QWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = v24;
    *(_BYTE *)(a2 + 16) = v28 & 1;
    *(_QWORD *)(a2 + 24) = v18;
    *(_QWORD *)(a2 + 32) = v23;
    *(_QWORD *)(a2 + 40) = v21;
    sub_62F8(a1);
    swift_bridgeObjectRelease(v21);
    v25 = v18;
  }
  return swift_bridgeObjectRelease(v25);
}

uint64_t sub_19C60@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Transport.BookIdToMetadataEntry.init(from:)(a1, a2);
}

uint64_t sub_19C74(_QWORD *a1)
{
  return Transport.BookIdToMetadataEntry.encode(to:)(a1);
}

Swift::Int sub_19C90(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt64 v8;
  Swift::UInt v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[9];

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(unsigned __int8 *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  Hasher.init(_seed:)(v14, a1);
  Hasher._combine(_:)(v2);
  if (v4 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v8 = v3;
    else
      v8 = 0;
    Hasher._combine(_:)(v8);
  }
  v9 = *(_QWORD *)(v6 + 16);
  Hasher._combine(_:)(v9);
  if (v9)
  {
    swift_bridgeObjectRetain(v6);
    v10 = (_QWORD *)(v6 + 40);
    do
    {
      v11 = *(v10 - 1);
      v12 = *v10;
      swift_bridgeObjectRetain(*v10);
      String.hash(into:)(v14, v11, v12);
      swift_bridgeObjectRelease(v12);
      v10 += 2;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease(v6);
  }
  if (v7)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v7);
    String.hash(into:)(v14, v5, v7);
    swift_bridgeObjectRelease(v7);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t Transport.Diagnosis.TypePayload.rawValue.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 0x474E494E524157;
  if (a2 != 1)
    v2 = a1;
  if (a2)
    v3 = v2;
  else
    v3 = 0x524F525245;
  sub_1F6D4(a1, a2);
  return v3;
}

_UNKNOWN **static Transport.Diagnosis.TypePayload.allCases.getter()
{
  return &off_1D7560;
}

uint64_t sub_19E28@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = _s20BooksPersonalization9TransportO9DiagnosisV11TypePayloadOyAGSgSScfC_0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_19E54@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = *v1;
  v3 = v1[1];
  v4 = 0xE500000000000000;
  v5 = 0x524F525245;
  v6 = 0xE700000000000000;
  v7 = 0x474E494E524157;
  if (v3 != 1)
  {
    v7 = *v1;
    v6 = v1[1];
  }
  if (v3)
  {
    v5 = v7;
    v4 = v6;
  }
  *a1 = v5;
  a1[1] = v4;
  return sub_1F6D4(v2, v3);
}

uint64_t sub_19E9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_268B0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_19EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_268B0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_19F44(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  v6 = 0xE700000000000000;
  v7 = 0x474E494E524157;
  if (v3 != 1)
  {
    v7 = *a1;
    v6 = a1[1];
  }
  if (v3)
    v8 = v7;
  else
    v8 = 0x524F525245;
  if (v3)
    v9 = v6;
  else
    v9 = 0xE500000000000000;
  v10 = 0xE700000000000000;
  v11 = 0x474E494E524157;
  if (v5 != 1)
  {
    v11 = *a2;
    v10 = a2[1];
  }
  if (v5)
    v12 = v11;
  else
    v12 = 0x524F525245;
  if (v5)
    v13 = v10;
  else
    v13 = 0xE500000000000000;
  if (v8 == v12 && v9 == v13)
    v14 = 1;
  else
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v12, v13, 0);
  sub_1F6D4(v2, v3);
  sub_1F6D4(v4, v5);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v13);
  return v14 & 1;
}

Swift::Int sub_1A03C()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v8, 0);
  v3 = 0xE700000000000000;
  v4 = 0x474E494E524157;
  if (v2 != 1)
  {
    v4 = v1;
    v3 = v2;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x524F525245;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE500000000000000;
  sub_1F6D4(v1, v2);
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

uint64_t sub_1A0DC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = *v1;
  v4 = v1[1];
  v5 = 0xE700000000000000;
  v6 = 0x474E494E524157;
  if (v4 != 1)
  {
    v6 = *v1;
    v5 = v1[1];
  }
  if (v4)
    v7 = v6;
  else
    v7 = 0x524F525245;
  if (v4)
    v8 = v5;
  else
    v8 = 0xE500000000000000;
  sub_1F6D4(v3, v4);
  String.hash(into:)(a1, v7, v8);
  return swift_bridgeObjectRelease(v8);
}

Swift::Int sub_1A158(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v9, a1);
  v4 = 0xE700000000000000;
  v5 = 0x474E494E524157;
  if (v3 != 1)
  {
    v5 = v2;
    v4 = v3;
  }
  if (v3)
    v6 = v5;
  else
    v6 = 0x524F525245;
  if (v3)
    v7 = v4;
  else
    v7 = 0xE500000000000000;
  sub_1F6D4(v2, v3);
  String.hash(into:)(v9, v6, v7);
  swift_bridgeObjectRelease(v7);
  return Hasher._finalize()();
}

uint64_t sub_1A1F4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = _s20BooksPersonalization9TransportO9DiagnosisV11TypePayloadOyAGSgSScfC_0(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

void sub_1A218(_QWORD *a1@<X8>)
{
  *a1 = &off_1D75A0;
}

uint64_t sub_1A228()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[1];
  v2 = 0x474E494E524157;
  if (v1 != 1)
    v2 = *v0;
  if (v1)
    v3 = v2;
  else
    v3 = 0x524F525245;
  sub_1F6D4(*v0, v1);
  return v3;
}

uint64_t Transport.Diagnosis.CodePayload.rawValue.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = 0x5F44494C41564E49;
  switch(a2)
  {
    case 0uLL:
      break;
    case 1uLL:
      v2 = 0x485455415F544F4ELL;
      break;
    case 2uLL:
      v2 = 0x455F524556524553;
      break;
    case 3uLL:
      v2 = 0x4E554F465F544F4ELL;
      break;
    default:
      v2 = a1;
      break;
  }
  sub_205AC(a1, a2);
  return v2;
}

uint64_t Transport.Diagnosis.CodePayload.description.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = 0x5F44494C41564E49;
  switch(a2)
  {
    case 0uLL:
      break;
    case 1uLL:
      v2 = 0x485455415F544F4ELL;
      break;
    case 2uLL:
      v2 = 0x455F524556524553;
      break;
    case 3uLL:
      v2 = 0x4E554F465F544F4ELL;
      break;
    default:
      v2 = a1;
      break;
  }
  sub_205AC(a1, a2);
  return v2;
}

_UNKNOWN **static Transport.Diagnosis.CodePayload.allCases.getter()
{
  return &off_1D75E0;
}

uint64_t sub_1A434@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = _s20BooksPersonalization9TransportO9DiagnosisV11CodePayloadOyAGSgSScfC_0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A460@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = *v1;
  v3 = v1[1];
  v4 = 0xEF54534555514552;
  v5 = 0x5F44494C41564E49;
  switch(v3)
  {
    case 0uLL:
      goto LABEL_3;
    case 1uLL:
      v4 = 0xEE0044455A49524FLL;
      v5 = 0x485455415F544F4ELL;
LABEL_3:
      *(_QWORD *)a1 = v5;
      *(_QWORD *)(a1 + 8) = v4;
      break;
    case 2uLL:
      strcpy((char *)a1, "SERVER_ERROR");
      *(_BYTE *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    case 3uLL:
      *(_QWORD *)a1 = 0x4E554F465F544F4ELL;
      *(_QWORD *)(a1 + 8) = 0xE900000000000044;
      break;
    default:
      *(_QWORD *)a1 = v2;
      *(_QWORD *)(a1 + 8) = v3;
      break;
  }
  return sub_205AC(v2, v3);
}

uint64_t sub_1A520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_2686C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1A57C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_2686C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1A5C8(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;

  v2 = 0xEF54534555514552;
  v3 = 0x5F44494C41564E49;
  v4 = *a1;
  v5 = a1[1];
  v6 = *a2;
  v7 = a2[1];
  v8 = 0x5F44494C41564E49;
  v9 = 0xEF54534555514552;
  switch(v5)
  {
    case 0uLL:
      goto LABEL_7;
    case 1uLL:
      v8 = 0x485455415F544F4ELL;
      v9 = 0xEE0044455A49524FLL;
      if (v7 > 3)
        goto LABEL_11;
      goto LABEL_7;
    case 2uLL:
      v8 = 0x455F524556524553;
      v9 = 0xEC000000524F5252;
      goto LABEL_7;
    case 3uLL:
      v8 = 0x4E554F465F544F4ELL;
      v9 = 0xE900000000000044;
      if (v7 > 3)
        goto LABEL_11;
      goto LABEL_7;
    default:
      v8 = v4;
      v9 = v5;
      if (v7 <= 3)
      {
LABEL_7:
        switch(v7)
        {
          case 0uLL:
            break;
          case 1uLL:
            v3 = 0x485455415F544F4ELL;
            v2 = 0xEE0044455A49524FLL;
            if (v8 != 0x485455415F544F4ELL)
              goto LABEL_18;
            goto LABEL_15;
          case 2uLL:
            v3 = 0x455F524556524553;
            v2 = 0xEC000000524F5252;
            break;
          case 3uLL:
            v3 = 0x4E554F465F544F4ELL;
            v2 = 0xE900000000000044;
            if (v8 != 0x4E554F465F544F4ELL)
              goto LABEL_18;
            goto LABEL_15;
          default:
            goto LABEL_11;
        }
        if (v8 != v3)
          goto LABEL_18;
      }
      else
      {
LABEL_11:
        v3 = *a2;
        v2 = a2[1];
        if (v8 != v6)
          goto LABEL_18;
      }
LABEL_15:
      if (v9 == v2)
      {
        v10 = 1;
        goto LABEL_19;
      }
LABEL_18:
      v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v3, v2, 0);
LABEL_19:
      sub_205AC(v4, v5);
      sub_205AC(v6, v7);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v2);
      return v10 & 1;
  }
}

Swift::Int sub_1A7D0()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v6, 0);
  v3 = 0xEF54534555514552;
  v4 = 0x5F44494C41564E49;
  switch(v2)
  {
    case 0uLL:
      break;
    case 1uLL:
      v3 = 0xEE0044455A49524FLL;
      v4 = 0x485455415F544F4ELL;
      break;
    case 2uLL:
      v3 = 0xEC000000524F5252;
      v4 = 0x455F524556524553;
      break;
    case 3uLL:
      v3 = 0xE900000000000044;
      v4 = 0x4E554F465F544F4ELL;
      break;
    default:
      v4 = v1;
      v3 = v2;
      break;
  }
  sub_205AC(v1, v2);
  String.hash(into:)(v6, v4, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1A8DC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *v1;
  v4 = v1[1];
  v5 = 0xEF54534555514552;
  v6 = 0x5F44494C41564E49;
  switch(v4)
  {
    case 0uLL:
      break;
    case 1uLL:
      v5 = 0xEE0044455A49524FLL;
      v6 = 0x485455415F544F4ELL;
      break;
    case 2uLL:
      v5 = 0xEC000000524F5252;
      v6 = 0x455F524556524553;
      break;
    case 3uLL:
      v5 = 0xE900000000000044;
      v6 = 0x4E554F465F544F4ELL;
      break;
    default:
      v6 = v3;
      v5 = v4;
      break;
  }
  sub_205AC(v3, v4);
  String.hash(into:)(a1, v6, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1A9C4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v7, a1);
  v4 = 0xEF54534555514552;
  v5 = 0x5F44494C41564E49;
  switch(v3)
  {
    case 0uLL:
      break;
    case 1uLL:
      v4 = 0xEE0044455A49524FLL;
      v5 = 0x485455415F544F4ELL;
      break;
    case 2uLL:
      v4 = 0xEC000000524F5252;
      v5 = 0x455F524556524553;
      break;
    case 3uLL:
      v4 = 0xE900000000000044;
      v5 = 0x4E554F465F544F4ELL;
      break;
    default:
      v5 = v2;
      v4 = v3;
      break;
  }
  sub_205AC(v2, v3);
  String.hash(into:)(v7, v5, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1AACC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = _s20BooksPersonalization9TransportO9DiagnosisV11CodePayloadOyAGSgSScfC_0(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

void sub_1AAF0(_QWORD *a1@<X8>)
{
  *a1 = &off_1D7640;
}

uint64_t sub_1AB00()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = v0[1];
  v3 = 0x5F44494C41564E49;
  switch(v2)
  {
    case 0uLL:
      break;
    case 1uLL:
      v3 = 0x485455415F544F4ELL;
      break;
    case 2uLL:
      v3 = 0x455F524556524553;
      break;
    case 3uLL:
      v3 = 0x4E554F465F544F4ELL;
      break;
    default:
      v3 = v1;
      break;
  }
  sub_205AC(v1, v2);
  return v3;
}

uint64_t Transport.Diagnosis.type.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_1F6D4(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t Transport.Diagnosis.type.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_26A48(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  *(_QWORD *)v2 = a1;
  *(_QWORD *)(v2 + 8) = a2;
  return result;
}

uint64_t Transport.Diagnosis.code.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_205AC(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t Transport.Diagnosis.code.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_205C0(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t Transport.Diagnosis.message.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 56));
  return v1;
}

uint64_t Transport.Diagnosis.message.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 56));
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

uint64_t Transport.Diagnosis.CodingKeys.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D76A0;
  return sub_1AD04(a1, v2, a2);
}

uint64_t sub_1AD04@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X2>, char *a3@<X8>)
{
  void *object;
  Swift::String v4;
  unint64_t v7;
  uint64_t result;
  char v9;

  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  v7 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(object);
  v9 = 4;
  if (v7 < 4)
    v9 = v7;
  *a3 = v9;
  return result;
}

uint64_t Transport.Diagnosis.CodingKeys.init(stringValue:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v5;

  result = Transport.Diagnosis.CodingKeys.init(rawValue:)(*(Swift::String *)&a1, &v5);
  *a2 = v5;
  return result;
}

uint64_t Transport.Diagnosis.CodingKeys.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1ADB4 + 4 * byte_1878DA[*v0]))(1701869940, 0xE400000000000000);
}

uint64_t sub_1ADB4()
{
  return 1701080931;
}

uint64_t sub_1ADC0()
{
  return 0x4974736575716572;
}

uint64_t sub_1ADDC()
{
  return 0x6567617373656DLL;
}

uint64_t Transport.Diagnosis.CodingKeys.stringValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1AE1C + 4 * byte_1878DE[*v0]))(1701869940, 0xE400000000000000);
}

uint64_t sub_1AE1C()
{
  return 1701080931;
}

uint64_t sub_1AE28()
{
  return 0x4974736575716572;
}

uint64_t sub_1AE44()
{
  return 0x6567617373656DLL;
}

void sub_1AE5C(char *a1)
{
  sub_778D4(*a1);
}

void sub_1AE68()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_1AEAC()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, 1701080931, v0);
  swift_bridgeObjectRelease(v0);
  return Hasher._finalize()();
}

void sub_1AF14()
{
  __asm { BR              X10 }
}

uint64_t sub_1AF48(uint64_t a1)
{
  uint64_t v1;

  String.hash(into:)(a1, 1701080931, v1);
  return swift_bridgeObjectRelease(v1);
}

void sub_1AF9C(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_1AFDC()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, 1701080931, v0);
  swift_bridgeObjectRelease(v0);
  return Hasher._finalize()();
}

uint64_t sub_1B044@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Transport.Diagnosis.CodingKeys.init(rawValue:)(*a1, a2);
}

uint64_t sub_1B050()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B078 + 4 * byte_1878EE[*v0]))();
}

void sub_1B078(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 1701080931;
  a1[1] = v1;
}

void sub_1B088(_QWORD *a1@<X8>)
{
  *a1 = 0x4974736575716572;
  a1[1] = 0xE900000000000064;
}

void sub_1B0A8(_QWORD *a1@<X8>)
{
  *a1 = 0x6567617373656DLL;
  a1[1] = 0xE700000000000000;
}

uint64_t sub_1B0C4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B0EC + 4 * byte_1878F2[*v0]))(1701869940, 0xE400000000000000);
}

uint64_t sub_1B0EC()
{
  return 1701080931;
}

uint64_t sub_1B0F8()
{
  return 0x4974736575716572;
}

uint64_t sub_1B114()
{
  return 0x6567617373656DLL;
}

uint64_t sub_1B12C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_205D4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1B154(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_205D4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Transport.Diagnosis.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[5];
  v17 = v1[4];
  v9 = v1[6];
  v8 = v1[7];
  v10 = 0xE700000000000000;
  v11 = 0x474E494E524157;
  if (v4 != 1)
  {
    v11 = *v1;
    v10 = v1[1];
  }
  if (v4)
    v12 = v11;
  else
    v12 = 0x524F525245;
  if (v4)
    v13 = v10;
  else
    v13 = 0xE500000000000000;
  sub_1F6D4(v3, v4);
  sub_1F6D4(v3, v4);
  String.hash(into:)(a1, v12, v13);
  swift_bridgeObjectRelease(v13);
  sub_26A48(v3, v4);
  v14 = 0xEF54534555514552;
  v15 = 0x5F44494C41564E49;
  switch(v6)
  {
    case 0uLL:
      break;
    case 1uLL:
      v14 = 0xEE0044455A49524FLL;
      v15 = 0x485455415F544F4ELL;
      break;
    case 2uLL:
      v14 = 0xEC000000524F5252;
      v15 = 0x455F524556524553;
      break;
    case 3uLL:
      v14 = 0xE900000000000044;
      v15 = 0x4E554F465F544F4ELL;
      break;
    default:
      v15 = v5;
      v14 = v6;
      break;
  }
  sub_205AC(v5, v6);
  sub_205AC(v5, v6);
  String.hash(into:)(a1, v15, v14);
  swift_bridgeObjectRelease(v14);
  sub_205C0(v5, v6);
  if (v7)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v7);
    String.hash(into:)(a1, v17, v7);
    swift_bridgeObjectRelease(v7);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRetain(v8);
  String.hash(into:)(a1, v9, v8);
  return swift_bridgeObjectRelease(v8);
}

uint64_t Transport.Diagnosis.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  v3 = sub_5EDC(&qword_1F08F0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v7 = v1[1];
  v9 = v1[2];
  v28 = v1[3];
  v29 = v9;
  v10 = v1[4];
  v26 = v1[5];
  v27 = v10;
  v11 = v1[6];
  v24 = v1[7];
  v25 = v11;
  v12 = a1[3];
  v13 = a1[4];
  sub_49F4(a1, v12);
  v14 = sub_205D4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Transport.Diagnosis.CodingKeys, &type metadata for Transport.Diagnosis.CodingKeys, v14, v12, v13);
  v31 = v8;
  v32 = v7;
  v33 = 0;
  v15 = sub_20618();
  v16 = v30;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v33, v3, &type metadata for Transport.Diagnosis.TypePayload, v15);
  if (!v16)
  {
    v18 = v26;
    v17 = v27;
    v20 = v24;
    v19 = v25;
    v31 = v29;
    v32 = v28;
    v33 = 1;
    v21 = sub_2065C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v33, v3, &type metadata for Transport.Diagnosis.CodePayload, v21);
    LOBYTE(v31) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, &v31, v3);
    LOBYTE(v31) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &v31, v3);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Transport.Diagnosis.hashValue.getter()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  _QWORD v5[9];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *((_QWORD *)v0 + 6);
  v2 = *((_QWORD *)v0 + 7);
  v3 = v0[1];
  v6 = *v0;
  v7 = v3;
  v8 = v0[2];
  v9 = v1;
  v10 = v2;
  Hasher.init(_seed:)(v5, 0);
  Transport.Diagnosis.hash(into:)((uint64_t)v5);
  return Hasher._finalize()();
}

uint64_t Transport.Diagnosis.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;

  v5 = sub_5EDC(&qword_1F0910);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_205D4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Transport.Diagnosis.CodingKeys, &type metadata for Transport.Diagnosis.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_62F8(a1);
    v22 = 0;
  }
  else
  {
    v42 = 0;
    v12 = sub_206A0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v40, &type metadata for Transport.Diagnosis.TypePayload, &v42, v5, &type metadata for Transport.Diagnosis.TypePayload, v12);
    v15 = v40;
    v14 = v41;
    v42 = 1;
    sub_1F6D4(v40, v41);
    v16 = sub_206E4();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v40, &type metadata for Transport.Diagnosis.CodePayload, &v42, v5, &type metadata for Transport.Diagnosis.CodePayload, v16);
    v36 = a2;
    v38 = v15;
    v39 = v14;
    v17 = v40;
    LOBYTE(v40) = 2;
    v18 = v17;
    v19 = v41;
    sub_205AC(v17, v41);
    v37 = 0;
    v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v40, v5);
    v22 = v21;
    v33 = v20;
    v34 = v18;
    v35 = v19;
    LOBYTE(v40) = 3;
    swift_bridgeObjectRetain(v21);
    v23 = KeyedDecodingContainer.decode(_:forKey:)(&v40, v5);
    v25 = v24;
    v26 = *(void (**)(char *, uint64_t))(v6 + 8);
    v37 = v23;
    v26(v8, v5);
    v28 = v38;
    v27 = v39;
    sub_1F6D4(v38, v39);
    v30 = v34;
    v29 = v35;
    sub_205AC(v34, v35);
    swift_bridgeObjectRetain(v25);
    sub_205C0(v30, v29);
    sub_26A48(v28, v27);
    v31 = v36;
    *v36 = v28;
    v31[1] = v27;
    v31[2] = v30;
    v31[3] = v29;
    v31[4] = v33;
    v31[5] = v22;
    v31[6] = v37;
    v31[7] = v25;
    sub_62F8(a1);
    sub_26A48(v28, v27);
    sub_205C0(v30, v29);
    swift_bridgeObjectRelease(v25);
  }
  return swift_bridgeObjectRelease(v22);
}

uint64_t sub_1B914@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Transport.Diagnosis.init(from:)(a1, a2);
}

uint64_t sub_1B928(_QWORD *a1)
{
  return Transport.Diagnosis.encode(to:)(a1);
}

Swift::Int sub_1B940(uint64_t a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  _QWORD v6[9];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *((_QWORD *)v1 + 6);
  v3 = *((_QWORD *)v1 + 7);
  v4 = v1[1];
  v7 = *v1;
  v8 = v4;
  v9 = v1[2];
  v10 = v2;
  v11 = v3;
  Hasher.init(_seed:)(v6, a1);
  Transport.Diagnosis.hash(into:)((uint64_t)v6);
  return Hasher._finalize()();
}

void sub_1B994(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  Swift::UInt v9;
  Swift::UInt64 *v10;
  Swift::UInt64 v11;
  Swift::UInt8 v12;
  _QWORD v13[5];
  unsigned __int8 v14;
  _QWORD v15[6];

  sub_1FB98(v1, (uint64_t)v13);
  v3 = v13[0];
  v4 = v13[1];
  v5 = v13[2];
  v6 = v13[3];
  v7 = v13[4];
  v8 = v14;
  sub_1FB98(v1, (uint64_t)v15);
  if (v15[0] == 1)
  {
    Hasher._combine(_:)(0);
    return;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v3);
  sub_1F918(v5, v6);
  swift_bridgeObjectRetain(v7);
  Transport.StoreAssetRequestDetails.hash(into:)(a1);
  if (v7)
  {
    Hasher._combine(_:)(1u);
    v9 = *(_QWORD *)(v7 + 16);
    Hasher._combine(_:)(v9);
    if (v9)
    {
      v10 = (Swift::UInt64 *)(v7 + 32);
      do
      {
        v11 = *v10++;
        Hasher._combine(_:)(v11);
        --v9;
      }
      while (v9);
    }
    if (v8 == 2)
      goto LABEL_8;
LABEL_10:
    Hasher._combine(_:)(1u);
    v12 = v8 & 1;
    goto LABEL_11;
  }
  Hasher._combine(_:)(0);
  if (v8 != 2)
    goto LABEL_10;
LABEL_8:
  v12 = 0;
LABEL_11:
  Hasher._combine(_:)(v12);
  sub_1FBE0(v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1FB40);
}

void sub_1BAEC(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4;
  uint64_t *v5;
  Swift::UInt32 v6;
  Swift::UInt64 v7;
  int v8;
  Swift::UInt32 v9;
  int v10;
  Swift::UInt32 v11;
  int v12;
  uint64_t v13;
  int v14;
  Swift::UInt32 v15;
  int v16;
  Swift::UInt32 v17;
  Swift::UInt64 v18;
  Swift::UInt64 v19;
  Swift::UInt32 v20;
  uint64_t v21;
  Swift::UInt64 v22;

  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v5 = (uint64_t *)(a2 + 88);
    do
    {
      v7 = *(v5 - 5);
      v8 = *((unsigned __int8 *)v5 - 24);
      v9 = *((_DWORD *)v5 - 5);
      v10 = *((unsigned __int8 *)v5 - 16);
      v11 = *((_DWORD *)v5 - 3);
      v12 = *((unsigned __int8 *)v5 - 8);
      v13 = *v5;
      v22 = *(v5 - 4);
      if (*((_BYTE *)v5 - 48) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        v21 = *v5;
        v14 = *((unsigned __int8 *)v5 - 16);
        v15 = *((_DWORD *)v5 - 5);
        v16 = *((unsigned __int8 *)v5 - 8);
        v17 = *((_DWORD *)v5 - 3);
        v18 = *(v5 - 7);
        Hasher._combine(_:)(1u);
        v19 = v18;
        v11 = v17;
        v12 = v16;
        v9 = v15;
        v10 = v14;
        v13 = v21;
        Hasher._combine(_:)(v19);
      }
      Hasher._combine(_:)(v7);
      if (v8)
      {
        Hasher._combine(_:)(0);
        if (v10)
          goto LABEL_19;
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v22);
        if (v10)
        {
LABEL_19:
          Hasher._combine(_:)(0);
          if (!v12)
            goto LABEL_3;
          goto LABEL_20;
        }
      }
      Hasher._combine(_:)(1u);
      if ((v9 & 0x7FFFFFFF) != 0)
        v20 = v9;
      else
        v20 = 0;
      Hasher._combine(_:)(v20);
      if (!v12)
      {
LABEL_3:
        Hasher._combine(_:)(1u);
        if ((v11 & 0x7FFFFFFF) != 0)
          v6 = v11;
        else
          v6 = 0;
        Hasher._combine(_:)(v6);
        goto LABEL_7;
      }
LABEL_20:
      Hasher._combine(_:)(0);
LABEL_7:
      swift_bridgeObjectRetain(v13);
      sub_1BC5C(a1, v13);
      swift_bridgeObjectRelease(v13);
      v5 += 8;
      --v4;
    }
    while (v4);
  }
}

void sub_1BC5C(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::UInt64 v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  Swift::UInt v18;
  uint64_t v19;

  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v5 = 0;
    v6 = a2 + 32;
    v18 = v4;
    do
    {
      v7 = v6 + 24 * v5;
      v8 = *(_QWORD *)(v7 + 16);
      if (*(_BYTE *)(v7 + 8) == 1)
      {
        Hasher._combine(_:)(0);
        if (v8)
          goto LABEL_9;
      }
      else
      {
        v9 = *(_QWORD *)v7;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v9);
        if (v8)
        {
LABEL_9:
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(*(_QWORD *)(v8 + 16));
          v10 = *(_QWORD *)(v8 + 16);
          if (v10)
          {
            swift_bridgeObjectRetain_n(v8, 2);
            v19 = v8;
            v11 = (unint64_t *)(v8 + 40);
            do
            {
              v12 = *(v11 - 1);
              v13 = *v11;
              v11 += 2;
              if (v13 == 1)
                v14 = 0xD000000000000012;
              else
                v14 = v12;
              if (v13 == 1)
                v15 = 0x800000000019FA50;
              else
                v15 = v13;
              if (v13)
                v16 = v14;
              else
                v16 = 0x4148435255504F43;
              if (v13)
                v17 = v15;
              else
                v17 = 0xEA00000000004553;
              sub_1F6D4(v12, v13);
              sub_1F6D4(v12, v13);
              String.hash(into:)(a1, v16, v17);
              swift_bridgeObjectRelease(v17);
              sub_26A48(v12, v13);
              --v10;
            }
            while (v10);
            swift_bridgeObjectRelease_n(v19, 2);
            v6 = a2 + 32;
            v4 = v18;
          }
          goto LABEL_4;
        }
      }
      Hasher._combine(_:)(0);
LABEL_4:
      ++v5;
    }
    while (v5 != v4);
  }
}

void sub_1BDF8(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v5 = (unint64_t *)(a2 + 40);
    do
    {
      v6 = *(v5 - 1);
      v7 = *v5;
      v5 += 2;
      if (v7 == 1)
        v8 = 0xD000000000000012;
      else
        v8 = v6;
      if (v7 == 1)
        v9 = 0x800000000019FA50;
      else
        v9 = v7;
      if (v7)
        v10 = v8;
      else
        v10 = 0x4148435255504F43;
      if (v7)
        v11 = v9;
      else
        v11 = 0xEA00000000004553;
      sub_1F6D4(v6, v7);
      sub_1F6D4(v6, v7);
      String.hash(into:)(a1, v10, v11);
      swift_bridgeObjectRelease(v11);
      sub_26A48(v6, v7);
      --v4;
    }
    while (v4);
  }
}

void sub_1BEE0(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt32 v7;
  uint64_t v8;
  int v9;
  Swift::UInt32 v10;
  uint64_t v11;
  Swift::UInt64 *v12;
  Swift::UInt64 v13;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = 0;
    v5 = a2 + 32;
    do
    {
      v6 = v5 + 24 * v4;
      v7 = *(_DWORD *)(v6 + 8);
      v8 = *(_QWORD *)(v6 + 16);
      v9 = *(unsigned __int8 *)(v6 + 12);
      Hasher._combine(_:)(*(_QWORD *)v6);
      if (v9 == 1)
      {
        Hasher._combine(_:)(0);
        if (v8)
          goto LABEL_12;
      }
      else
      {
        Hasher._combine(_:)(1u);
        if ((v7 & 0x7FFFFFFF) != 0)
          v10 = v7;
        else
          v10 = 0;
        Hasher._combine(_:)(v10);
        if (v8)
        {
LABEL_12:
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(*(_QWORD *)(v8 + 16));
          v11 = *(_QWORD *)(v8 + 16);
          if (v11)
          {
            v12 = (Swift::UInt64 *)(v8 + 32);
            do
            {
              v13 = *v12++;
              Hasher._combine(_:)(v13);
              --v11;
            }
            while (v11);
          }
          goto LABEL_4;
        }
      }
      Hasher._combine(_:)(0);
LABEL_4:
      ++v4;
    }
    while (v4 != v3);
  }
}

void sub_1BFC4(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  Swift::UInt64 v11;
  Swift::UInt64 v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v5 = 0;
    v17 = a2 + 32;
    do
    {
      v7 = v17 + 48 * v5;
      v6 = *(_QWORD *)(v7 + 24);
      v8 = *(_QWORD *)(v7 + 32);
      v9 = *(_QWORD *)(v7 + 40);
      v10 = *(unsigned __int8 *)(v7 + 16);
      v11 = *(_QWORD *)(v7 + 8);
      Hasher._combine(_:)(*(_QWORD *)v7);
      if (v10 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        if ((v11 & 0x7FFFFFFFFFFFFFFFLL) != 0)
          v12 = v11;
        else
          v12 = 0;
        Hasher._combine(_:)(v12);
      }
      Hasher._combine(_:)(*(_QWORD *)(v6 + 16));
      v13 = *(_QWORD *)(v6 + 16);
      if (v13)
      {
        swift_bridgeObjectRetain(v9);
        swift_bridgeObjectRetain_n(v6, 2);
        v14 = (_QWORD *)(v6 + 40);
        do
        {
          v15 = *(v14 - 1);
          v16 = *v14;
          swift_bridgeObjectRetain(*v14);
          String.hash(into:)(a1, v15, v16);
          swift_bridgeObjectRelease(v16);
          v14 += 2;
          --v13;
        }
        while (v13);
        swift_bridgeObjectRelease(v6);
        if (!v9)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          swift_bridgeObjectRelease(0);
          goto LABEL_5;
        }
      }
      else
      {
        swift_bridgeObjectRetain(v9);
        swift_bridgeObjectRetain(v6);
        if (!v9)
          goto LABEL_16;
      }
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v9);
      String.hash(into:)(a1, v8, v9);
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(v9);
      v6 = v9;
LABEL_5:
      ++v5;
      swift_bridgeObjectRelease(v6);
    }
    while (v5 != v4);
  }
}

void sub_1C148(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3;
  Swift::UInt64 *v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = (Swift::UInt64 *)(a2 + 32);
    do
    {
      v6 = *v4++;
      v5 = v6;
      if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v7 = v5;
      else
        v7 = 0;
      Hasher._combine(_:)(v7);
      --v3;
    }
    while (v3);
  }
}

void sub_1C19C(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3;
  unsigned __int8 *v4;
  Swift::UInt32 v5;
  Swift::UInt64 v6;
  int v7;
  Swift::UInt32 v8;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = (unsigned __int8 *)(a2 + 56);
    do
    {
      v5 = *((_DWORD *)v4 - 4);
      v6 = *((_QWORD *)v4 - 1);
      v7 = *v4;
      Hasher._combine(_:)(*((_QWORD *)v4 - 3));
      if ((v5 & 0x7FFFFFFF) != 0)
        v8 = v5;
      else
        v8 = 0;
      Hasher._combine(_:)(v8);
      if (v7 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v6);
      }
      v4 += 32;
      --v3;
    }
    while (v3);
  }
}

void sub_1C234(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v5 = (unint64_t *)(a2 + 40);
    do
    {
      v6 = *(v5 - 1);
      v7 = *v5;
      v5 += 2;
      if (v7 == 1)
        v8 = 0x4F4F424F49445541;
      else
        v8 = v6;
      if (v7 == 1)
        v9 = 0xE90000000000004BLL;
      else
        v9 = v7;
      if (v7)
        v10 = v8;
      else
        v10 = 0x4B4F4F4245;
      if (v7)
        v11 = v9;
      else
        v11 = 0xE500000000000000;
      sub_1F6D4(v6, v7);
      sub_1F6D4(v6, v7);
      String.hash(into:)(a1, v10, v11);
      swift_bridgeObjectRelease(v11);
      sub_26A48(v6, v7);
      --v4;
    }
    while (v4);
  }
}

void sub_1C314(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt64 v8;
  uint64_t v9;
  Swift::UInt64 *v10;
  Swift::UInt64 v11;
  Swift::UInt64 v12;
  Swift::UInt64 v13;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = 0;
    v5 = a2 + 32;
    do
    {
      v6 = v5 + 24 * v4;
      v7 = *(_QWORD *)(v6 + 16);
      if (*(_BYTE *)(v6 + 8) == 1)
      {
        Hasher._combine(_:)(0);
        if (v7)
          goto LABEL_9;
      }
      else
      {
        v8 = *(_QWORD *)v6;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v8);
        if (v7)
        {
LABEL_9:
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(*(_QWORD *)(v7 + 16));
          v9 = *(_QWORD *)(v7 + 16);
          if (v9)
          {
            v10 = (Swift::UInt64 *)(v7 + 32);
            do
            {
              v12 = *v10++;
              v11 = v12;
              if ((v12 & 0x7FFFFFFFFFFFFFFFLL) != 0)
                v13 = v11;
              else
                v13 = 0;
              Hasher._combine(_:)(v13);
              --v9;
            }
            while (v9);
          }
          goto LABEL_4;
        }
      }
      Hasher._combine(_:)(0);
LABEL_4:
      ++v4;
    }
    while (v4 != v3);
  }
}

void sub_1C3F4(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  Swift::UInt64 v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v5 = (unint64_t *)(a2 + 56);
    do
    {
      v6 = *(v5 - 1);
      v7 = *v5;
      if (*((_BYTE *)v5 - 16) == 1)
      {
        Hasher._combine(_:)(0);
        if (v7 != 2)
          goto LABEL_9;
      }
      else
      {
        v8 = *(v5 - 3);
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v8);
        if (v7 != 2)
        {
LABEL_9:
          Hasher._combine(_:)(1u);
          if (v7 == 1)
            v9 = 0x4F4F424F49445541;
          else
            v9 = v6;
          if (v7 == 1)
            v10 = 0xE90000000000004BLL;
          else
            v10 = v7;
          if (v7)
            v11 = v9;
          else
            v11 = 0x4B4F4F4245;
          if (v7)
            v12 = v10;
          else
            v12 = 0xE500000000000000;
          sub_1E9F8(v6, v7);
          sub_1F6D4(v6, v7);
          sub_1F6D4(v6, v7);
          String.hash(into:)(a1, v11, v12);
          swift_bridgeObjectRelease(v12);
          sub_1EA08(v6, v7);
          sub_1EA08(v6, v7);
          goto LABEL_4;
        }
      }
      Hasher._combine(_:)(0);
LABEL_4:
      v5 += 4;
      --v4;
    }
    while (v4);
  }
}

void sub_1C540(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3;
  unsigned __int8 *v4;
  Swift::UInt64 v5;
  int v6;
  Swift::UInt64 v7;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = (unsigned __int8 *)(a2 + 56);
    do
    {
      v5 = *((_QWORD *)v4 - 1);
      v6 = *v4;
      if (*(v4 - 16) == 1)
      {
        Hasher._combine(_:)(0);
        if (!v6)
          goto LABEL_9;
      }
      else
      {
        v7 = *((_QWORD *)v4 - 3);
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v7);
        if (!v6)
        {
LABEL_9:
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v5);
          goto LABEL_4;
        }
      }
      Hasher._combine(_:)(0);
LABEL_4:
      v4 += 32;
      --v3;
    }
    while (v3);
  }
}

void sub_1C5EC(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt64 v8;

  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v5 = (_QWORD *)(a2 + 56);
    do
    {
      v7 = *(v5 - 1);
      v6 = *v5;
      if (*((_BYTE *)v5 - 16) == 1)
      {
        Hasher._combine(_:)(0);
        if (v6)
          goto LABEL_9;
      }
      else
      {
        v8 = *(v5 - 3);
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v8);
        if (v6)
        {
LABEL_9:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain(v6);
          String.hash(into:)(a1, v7, v6);
          swift_bridgeObjectRelease(v6);
          goto LABEL_4;
        }
      }
      Hasher._combine(_:)(0);
LABEL_4:
      v5 += 4;
      --v4;
    }
    while (v4);
  }
}

void sub_1C6AC(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::UInt64 v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v5 = 0;
    v6 = a2 + 32;
    do
    {
      v7 = v6 + 24 * v5;
      v8 = *(_QWORD *)(v7 + 16);
      if (*(_BYTE *)(v7 + 8) == 1)
      {
        Hasher._combine(_:)(0);
        if (v8)
          goto LABEL_9;
      }
      else
      {
        v9 = *(_QWORD *)v7;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v9);
        if (v8)
        {
LABEL_9:
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(*(_QWORD *)(v8 + 16));
          v10 = *(_QWORD *)(v8 + 16);
          if (v10)
          {
            swift_bridgeObjectRetain(v8);
            v11 = (_QWORD *)(v8 + 40);
            do
            {
              v12 = *(v11 - 1);
              v13 = *v11;
              swift_bridgeObjectRetain(*v11);
              String.hash(into:)(a1, v12, v13);
              swift_bridgeObjectRelease(v13);
              v11 += 2;
              --v10;
            }
            while (v10);
            swift_bridgeObjectRelease(v8);
          }
          goto LABEL_4;
        }
      }
      Hasher._combine(_:)(0);
LABEL_4:
      ++v5;
    }
    while (v5 != v4);
  }
}

void sub_1C7BC(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt64 v10;
  Swift::UInt64 v11;
  int v12;
  Swift::UInt32 v13;
  int v14;
  Swift::UInt32 v15;
  int v16;
  uint64_t v17;
  Swift::UInt64 v18;
  Swift::UInt32 v19;
  Swift::UInt32 v20;
  Swift::UInt v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::UInt64 v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt v38;
  uint64_t v39;
  uint64_t v40;
  Swift::UInt v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Swift::UInt v45;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  v38 = v3;
  if (v3)
  {
    v4 = 0;
    v36 = a2 + 32;
    do
    {
      v6 = *(_QWORD *)(v36 + 8 * v4);
      v39 = v4;
      if (v6)
      {
        Hasher._combine(_:)(1u);
        v7 = *(_QWORD *)(v6 + 16);
        Hasher._combine(_:)(v7);
        v41 = v7;
        if (v7)
        {
          v40 = v6 + 32;
          v35 = v6;
          swift_bridgeObjectRetain(v6);
          v8 = 0;
          while (1)
          {
            v9 = v40 + (v8 << 6);
            v11 = *(_QWORD *)(v9 + 16);
            v10 = *(_QWORD *)(v9 + 24);
            v12 = *(unsigned __int8 *)(v9 + 32);
            v13 = *(_DWORD *)(v9 + 36);
            v14 = *(unsigned __int8 *)(v9 + 40);
            v15 = *(_DWORD *)(v9 + 44);
            v16 = *(unsigned __int8 *)(v9 + 48);
            v17 = *(_QWORD *)(v9 + 56);
            v43 = v8;
            if (*(_BYTE *)(v9 + 8) == 1)
            {
              Hasher._combine(_:)(0);
            }
            else
            {
              v18 = *(_QWORD *)v9;
              Hasher._combine(_:)(1u);
              Hasher._combine(_:)(v18);
            }
            Hasher._combine(_:)(v11);
            if (v12)
            {
              Hasher._combine(_:)(0);
              if (v14)
                goto LABEL_25;
            }
            else
            {
              Hasher._combine(_:)(1u);
              Hasher._combine(_:)(v10);
              if (v14)
              {
LABEL_25:
                Hasher._combine(_:)(0);
                if (!v16)
                  goto LABEL_20;
                goto LABEL_26;
              }
            }
            Hasher._combine(_:)(1u);
            if ((v13 & 0x7FFFFFFF) != 0)
              v19 = v13;
            else
              v19 = 0;
            Hasher._combine(_:)(v19);
            if (!v16)
            {
LABEL_20:
              Hasher._combine(_:)(1u);
              if ((v15 & 0x7FFFFFFF) != 0)
                v20 = v15;
              else
                v20 = 0;
              Hasher._combine(_:)(v20);
              goto LABEL_27;
            }
LABEL_26:
            Hasher._combine(_:)(0);
LABEL_27:
            v21 = *(_QWORD *)(v17 + 16);
            Hasher._combine(_:)(v21);
            if (v21)
            {
              v22 = v17 + 32;
              v42 = v17;
              swift_bridgeObjectRetain(v17);
              v23 = 0;
              v44 = v22;
              v45 = v21;
              while (1)
              {
                v24 = v22 + 24 * v23;
                v25 = *(_QWORD *)(v24 + 16);
                if (*(_BYTE *)(v24 + 8) == 1)
                {
                  Hasher._combine(_:)(0);
                  if (v25)
                    goto LABEL_35;
                }
                else
                {
                  v26 = *(_QWORD *)v24;
                  Hasher._combine(_:)(1u);
                  Hasher._combine(_:)(v26);
                  if (v25)
                  {
LABEL_35:
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(*(_QWORD *)(v25 + 16));
                    v27 = *(_QWORD *)(v25 + 16);
                    if (v27)
                    {
                      swift_bridgeObjectRetain_n(v25, 2);
                      v28 = (unint64_t *)(v25 + 40);
                      do
                      {
                        v29 = *(v28 - 1);
                        v30 = *v28;
                        v28 += 2;
                        if (v30 == 1)
                          v31 = 0xD000000000000012;
                        else
                          v31 = v29;
                        if (v30 == 1)
                          v32 = 0x800000000019FA50;
                        else
                          v32 = v30;
                        if (v30)
                          v33 = v31;
                        else
                          v33 = 0x4148435255504F43;
                        if (v30)
                          v34 = v32;
                        else
                          v34 = 0xEA00000000004553;
                        sub_1F6D4(v29, v30);
                        sub_1F6D4(v29, v30);
                        String.hash(into:)(a1, v33, v34);
                        swift_bridgeObjectRelease(v34);
                        sub_26A48(v29, v30);
                        --v27;
                      }
                      while (v27);
                      swift_bridgeObjectRelease_n(v25, 2);
                      v22 = v44;
                      v21 = v45;
                    }
                    goto LABEL_30;
                  }
                }
                Hasher._combine(_:)(0);
LABEL_30:
                if (++v23 == v21)
                {
                  swift_bridgeObjectRelease(v42);
                  break;
                }
              }
            }
            v8 = v43 + 1;
            if (v43 + 1 == v41)
            {
              v5 = v35;
              goto LABEL_4;
            }
          }
        }
      }
      else
      {
        Hasher._combine(_:)(0);
        v5 = 0;
LABEL_4:
        swift_bridgeObjectRelease(v5);
      }
      v4 = v39 + 1;
    }
    while (v39 + 1 != v38);
  }
}

void sub_1CAF8(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  Swift::UInt32 v10;
  Swift::UInt64 v11;
  int v12;
  Swift::UInt32 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::UInt64 *v18;
  Swift::UInt64 v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  Swift::UInt32 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;

  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v5 = 0;
    do
    {
      v6 = a2 + 32 + 80 * v5;
      v7 = *(_QWORD *)(v6 + 8);
      v36 = *(_QWORD *)(v6 + 16);
      v33 = *(_QWORD *)(v6 + 32);
      v34 = *(_QWORD *)(v6 + 24);
      v31 = *(_QWORD *)(v6 + 48);
      v32 = *(_QWORD *)(v6 + 40);
      v35 = *(unsigned __int8 *)(v6 + 56);
      v29 = v5;
      v30 = *(_QWORD *)(v6 + 64);
      v28 = *(_DWORD *)(v6 + 72);
      Hasher._combine(_:)(*(_BYTE *)v6);
      Hasher._combine(_:)(*(_QWORD *)(v7 + 16));
      v37 = v7;
      v8 = *(_QWORD *)(v7 + 16);
      if (v8)
      {
        v9 = (unsigned __int8 *)(v7 + 56);
        do
        {
          v10 = *((_DWORD *)v9 - 4);
          v11 = *((_QWORD *)v9 - 1);
          v12 = *v9;
          Hasher._combine(_:)(*((_QWORD *)v9 - 3));
          if ((v10 & 0x7FFFFFFF) != 0)
            v13 = v10;
          else
            v13 = 0;
          Hasher._combine(_:)(v13);
          if (v12 == 1)
          {
            Hasher._combine(_:)(0);
          }
          else
          {
            Hasher._combine(_:)(1u);
            Hasher._combine(_:)(v11);
          }
          v9 += 32;
          --v8;
        }
        while (v8);
      }
      if (v36 == 1)
      {
        Hasher._combine(_:)(0);
        swift_bridgeObjectRetain(v37);
        v14 = v31;
        sub_1FAE4(1, v34, v33, v32, v31);
        v15 = v30;
        swift_bridgeObjectRetain(v30);
        v16 = v29;
      }
      else
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain(v37);
        sub_1FAE4(v36, v34, v33, v32, v31);
        v15 = v30;
        swift_bridgeObjectRetain(v30);
        sub_1FAE4(v36, v34, v33, v32, v31);
        Transport.StoreAssetRequestDetails.hash(into:)(a1);
        if (v31)
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(*(_QWORD *)(v31 + 16));
          v17 = *(_QWORD *)(v31 + 16);
          v16 = v29;
          if (v17)
          {
            v18 = (Swift::UInt64 *)(v31 + 32);
            do
            {
              v19 = *v18++;
              Hasher._combine(_:)(v19);
              --v17;
            }
            while (v17);
          }
        }
        else
        {
          Hasher._combine(_:)(0);
          v16 = v29;
        }
        if (v35 == 2)
        {
          Hasher._combine(_:)(0);
        }
        else
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v35 & 1);
        }
        v14 = v31;
        sub_1FB40(v36, v34, v33, v32, v31);
      }
      Hasher._combine(_:)(*(_QWORD *)(v15 + 16));
      v20 = *(_QWORD *)(v15 + 16);
      if (v20)
      {
        swift_bridgeObjectRetain(v15);
        v21 = (unint64_t *)(v15 + 40);
        do
        {
          v22 = *(v21 - 1);
          v23 = *v21;
          v21 += 2;
          if (v23 == 1)
            v24 = 0xD000000000000012;
          else
            v24 = v22;
          if (v23 == 1)
            v25 = 0x800000000019FA50;
          else
            v25 = v23;
          if (v23)
            v26 = v24;
          else
            v26 = 0x4148435255504F43;
          if (v23)
            v27 = v25;
          else
            v27 = 0xEA00000000004553;
          sub_1F6D4(v22, v23);
          sub_1F6D4(v22, v23);
          String.hash(into:)(a1, v26, v27);
          swift_bridgeObjectRelease(v27);
          sub_26A48(v22, v23);
          --v20;
        }
        while (v20);
        v15 = v30;
        swift_bridgeObjectRelease(v30);
        v16 = v29;
        v14 = v31;
      }
      v5 = v16 + 1;
      Hasher._combine(_:)(v28);
      swift_bridgeObjectRelease(v37);
      sub_1FB40(v36, v34, v33, v32, v14);
      swift_bridgeObjectRelease(v15);
    }
    while (v5 != v4);
  }
}

void sub_1CED0(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt32 v10;
  uint64_t v11;
  int v12;
  Swift::UInt32 v13;
  uint64_t v14;
  Swift::UInt64 *v15;
  Swift::UInt64 v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = 0;
    v17 = a2 + 32;
    do
    {
      v5 = *(_QWORD *)(v17 + 8 * v4);
      if (v5)
      {
        Hasher._combine(_:)(1u);
        v6 = *(_QWORD *)(v5 + 16);
        Hasher._combine(_:)(v6);
        if (v6)
        {
          v7 = 0;
          v8 = v5 + 32;
          do
          {
            v9 = v8 + 24 * v7;
            v10 = *(_DWORD *)(v9 + 8);
            v11 = *(_QWORD *)(v9 + 16);
            v12 = *(unsigned __int8 *)(v9 + 12);
            Hasher._combine(_:)(*(_QWORD *)v9);
            if (v12 == 1)
            {
              Hasher._combine(_:)(0);
              if (v11)
                goto LABEL_17;
            }
            else
            {
              Hasher._combine(_:)(1u);
              if ((v10 & 0x7FFFFFFF) != 0)
                v13 = v10;
              else
                v13 = 0;
              Hasher._combine(_:)(v13);
              if (v11)
              {
LABEL_17:
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(*(_QWORD *)(v11 + 16));
                v14 = *(_QWORD *)(v11 + 16);
                if (v14)
                {
                  v15 = (Swift::UInt64 *)(v11 + 32);
                  do
                  {
                    v16 = *v15++;
                    Hasher._combine(_:)(v16);
                    --v14;
                  }
                  while (v14);
                }
                goto LABEL_9;
              }
            }
            Hasher._combine(_:)(0);
LABEL_9:
            ++v7;
          }
          while (v7 != v6);
        }
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      ++v4;
    }
    while (v4 != v3);
  }
}

void sub_1D00C(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  Swift::UInt64 v10;
  Swift::UInt64 v11;
  int v12;
  Swift::UInt64 v13;
  Swift::UInt64 v14;
  Swift::UInt64 v15;
  Swift::UInt64 v16;

  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v5 = (unsigned __int8 *)(a2 + 80);
    do
    {
      v7 = *((_QWORD *)v5 - 6);
      v6 = *((_QWORD *)v5 - 5);
      v8 = *((_QWORD *)v5 - 4);
      v9 = *((_QWORD *)v5 - 3);
      v11 = *((_QWORD *)v5 - 2);
      v10 = *((_QWORD *)v5 - 1);
      v12 = *v5;
      swift_bridgeObjectRetain(v6);
      String.hash(into:)(a1, v7, v6);
      if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v13 = v8;
      else
        v13 = 0;
      Hasher._combine(_:)(v13);
      if ((v9 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v14 = v9;
      else
        v14 = 0;
      Hasher._combine(_:)(v14);
      if (v12 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        if ((v11 & 0x7FFFFFFFFFFFFFFFLL) != 0)
          v15 = v11;
        else
          v15 = 0;
        Hasher._combine(_:)(v15);
        if ((v10 & 0x7FFFFFFFFFFFFFFFLL) != 0)
          v16 = v10;
        else
          v16 = 0;
        Hasher._combine(_:)(v16);
      }
      swift_bridgeObjectRelease(v6);
      v5 += 56;
      --v4;
    }
    while (v4);
  }
}

void sub_1D0F0(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt64 *v6;
  Swift::UInt64 v7;
  uint64_t v8;
  Swift::UInt64 *v9;
  Swift::UInt64 v10;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = 0;
    v5 = a2 + 32;
    do
    {
      v6 = (Swift::UInt64 *)(v5 + 16 * v4);
      v7 = v6[1];
      Hasher._combine(_:)(*v6);
      Hasher._combine(_:)(*(_QWORD *)(v7 + 16));
      v8 = *(_QWORD *)(v7 + 16);
      if (v8)
      {
        v9 = (Swift::UInt64 *)(v7 + 32);
        do
        {
          v10 = *v9++;
          Hasher._combine(_:)(v10);
          --v8;
        }
        while (v8);
      }
      ++v4;
    }
    while (v4 != v3);
  }
}

BOOL _s20BooksPersonalization9TransportO014BookIdToSeriesE5EntryV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  char v2;
  char v4;

  v2 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return 0;
  }
  else
  {
    if (*(_QWORD *)a1 != *(_QWORD *)a2)
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
  {
    if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
      v4 = *(_BYTE *)(a2 + 24);
    else
      v4 = 1;
    return (v4 & 1) == 0;
  }
  return (*(_BYTE *)(a2 + 24) & 1) != 0;
}

BOOL _s20BooksPersonalization9TransportO021BookIdToDeduplicationE5EntryV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_BYTE *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  if ((v4 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return 0;
  }
  else
  {
    if (*(_QWORD *)a1 == *(_QWORD *)a2)
      v9 = *(_BYTE *)(a2 + 8);
    else
      v9 = 1;
    if ((v9 & 1) != 0)
      return 0;
  }
  if (v6)
    return v8 && (v5 == v7 && v6 == v8 || (_stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0) & 1) != 0);
  return !v8;
}

BOOL _s20BooksPersonalization9TransportO24StoreAssetRequestDetailsV2eeoiySbAE_AEtFZ_0(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;

  v3 = *a1;
  v2 = (_QWORD *)a1[1];
  v5 = a1[2];
  v4 = a1[3];
  v7 = *a2;
  v6 = (_QWORD *)a2[1];
  v9 = a2[2];
  v8 = a2[3];
  if (*a1)
  {
    if (!v7)
      return 0;
    swift_bridgeObjectRetain(*a2);
    v10 = swift_bridgeObjectRetain(v3);
    v11 = sub_B29C(v10, v7);
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(v7);
    if ((v11 & 1) == 0)
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  if (v2)
  {
    if (!v6 || !sub_B454(v2, v6))
      return 0;
  }
  else if (v6)
  {
    return 0;
  }
  if (v4 == 3)
    return v8 == 3;
  if (v8 != 3)
  {
    v12 = 1162170950;
    v13 = 0xE400000000000000;
    v14 = 1145651536;
    v15 = 0xE300000000000000;
    v16 = 5852737;
    if (v4 != 2)
    {
      v16 = v5;
      v15 = v4;
    }
    if (v4 != 1)
    {
      v14 = v16;
      v13 = v15;
    }
    if (v4)
      v17 = v14;
    else
      v17 = 1162170950;
    if (v4)
      v18 = v13;
    else
      v18 = 0xE400000000000000;
    if (v8)
    {
      if (v8 == 1)
      {
        v19 = 0xE400000000000000;
        v12 = 1145651536;
      }
      else if (v8 == 2)
      {
        v19 = 0xE300000000000000;
        v12 = 5852737;
      }
      else
      {
        v12 = v9;
        v19 = v8;
      }
    }
    else
    {
      v19 = 0xE400000000000000;
    }
    if (v17 == v12 && v18 == v19)
    {
      sub_1F918(v5, v4);
      sub_1F918(v5, v4);
      sub_1F918(v9, v8);
      sub_1F918(v5, v4);
      sub_1F918(v9, v8);
      swift_bridgeObjectRelease_n(v18, 2);
      sub_1F928(v9, v8);
      sub_1F928(v5, v4);
      sub_1F928(v5, v4);
      return 1;
    }
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v12, v19, 0);
    sub_1F918(v5, v4);
    sub_1F918(v5, v4);
    sub_1F918(v9, v8);
    sub_1F918(v5, v4);
    sub_1F918(v9, v8);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v19);
    sub_1F928(v9, v8);
    sub_1F928(v5, v4);
    sub_1F928(v5, v4);
    if ((v20 & 1) != 0)
      return 1;
  }
  return 0;
}

uint64_t _s20BooksPersonalization9TransportO0A21RecommendationRequestV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  _QWORD *v4;
  int v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[2];
  _OWORD v10[2];

  v2 = *(_QWORD **)(a1 + 32);
  v3 = *(unsigned __int8 *)(a1 + 40);
  v4 = *(_QWORD **)(a2 + 32);
  v5 = *(unsigned __int8 *)(a2 + 40);
  v6 = *(_OWORD *)(a1 + 16);
  v10[0] = *(_OWORD *)a1;
  v10[1] = v6;
  v7 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v7;
  if (!_s20BooksPersonalization9TransportO24StoreAssetRequestDetailsV2eeoiySbAE_AEtFZ_0((uint64_t *)v10, (uint64_t *)v9))
    return 0;
  if (v2)
  {
    if (!v4 || !sub_B454(v2, v4))
      return 0;
LABEL_7:
    if (v3 == 2)
    {
      if (v5 != 2)
        return 0;
    }
    else if (v5 == 2 || ((((v3 & 1) == 0) ^ v5) & 1) == 0)
    {
      return 0;
    }
    return 1;
  }
  if (!v4)
    goto LABEL_7;
  return 0;
}

BOOL _s20BooksPersonalization9TransportO12BookAffinityV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  _QWORD *v6;
  char v7;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v4 = *(_QWORD **)(a1 + 16);
  v5 = *(unsigned __int8 *)(a2 + 12);
  v6 = *(_QWORD **)(a2 + 16);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
  {
    if (!v5)
      return 0;
  }
  else
  {
    if (*(float *)(a1 + 8) == *(float *)(a2 + 8))
      v7 = v5;
    else
      v7 = 1;
    if ((v7 & 1) != 0)
      return 0;
  }
  if (v4)
    return v6 && sub_B454(v4, v6);
  return !v6;
}

unint64_t sub_1D5EC()
{
  unint64_t result;

  result = qword_1F02F8;
  if (!qword_1F02F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookAffinity.CodingKeys, &type metadata for Transport.BookAffinity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F02F8);
  }
  return result;
}

unint64_t sub_1D630()
{
  unint64_t result;

  result = qword_1F0328;
  if (!qword_1F0328)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.UserProfile.CodingKeys, &type metadata for Transport.UserProfile.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0328);
  }
  return result;
}

unint64_t sub_1D674()
{
  unint64_t result;

  result = qword_1F0340;
  if (!qword_1F0340)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookAffinity, &type metadata for Transport.BookAffinity);
    atomic_store(result, (unint64_t *)&qword_1F0340);
  }
  return result;
}

unint64_t sub_1D6B8()
{
  unint64_t result;

  result = qword_1F0358;
  if (!qword_1F0358)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookAffinity, &type metadata for Transport.BookAffinity);
    atomic_store(result, (unint64_t *)&qword_1F0358);
  }
  return result;
}

uint64_t _s20BooksPersonalization9TransportO15RecommendedItemV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  float v8;
  char v9;
  float v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  float v17;
  int v18;
  float v19;
  int v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v26;

  v4 = *(_BYTE *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_BYTE *)(a1 + 32);
  v8 = *(float *)(a1 + 36);
  v9 = *(_BYTE *)(a1 + 40);
  v10 = *(float *)(a1 + 44);
  v11 = *(_BYTE *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_BYTE *)(a2 + 8);
  v14 = *(_QWORD *)(a2 + 16);
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(unsigned __int8 *)(a2 + 32);
  v17 = *(float *)(a2 + 36);
  v18 = *(unsigned __int8 *)(a2 + 40);
  v19 = *(float *)(a2 + 44);
  v20 = *(unsigned __int8 *)(a2 + 48);
  v21 = *(_QWORD *)(a2 + 56);
  if ((v4 & 1) != 0)
  {
    if (v5 == v14)
      v22 = v13;
    else
      v22 = 0;
    if ((v22 & 1) == 0)
      return 0;
  }
  else if ((v13 & 1) != 0 || *(_QWORD *)a1 != *(_QWORD *)a2 || v5 != v14)
  {
    return 0;
  }
  if ((v7 & 1) != 0)
  {
    if (!v16)
      return 0;
  }
  else
  {
    if (v6 == v15)
      v23 = v16;
    else
      v23 = 1;
    if ((v23 & 1) != 0)
      return 0;
  }
  if ((v9 & 1) != 0)
  {
    if (!v18)
      return 0;
  }
  else
  {
    if (v8 == v17)
      v24 = v18;
    else
      v24 = 1;
    if ((v24 & 1) != 0)
      return 0;
  }
  if ((v11 & 1) != 0)
  {
    if (!v20)
      return 0;
  }
  else
  {
    if (v10 == v19)
      v26 = v20;
    else
      v26 = 1;
    if ((v26 & 1) != 0)
      return 0;
  }
  return sub_AF74(v12, v21);
}

BOOL _s20BooksPersonalization9TransportO16InferredFromInfoV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return 0;
  }
  else
  {
    if (*(_QWORD *)a1 != *(_QWORD *)a2)
      v3 = 1;
    if ((v3 & 1) != 0)
      return 0;
  }
  if (v2)
  {
    if (!v4)
      return 0;
    swift_bridgeObjectRetain(*(_QWORD *)(a2 + 16));
    v5 = swift_bridgeObjectRetain(v2);
    v6 = sub_9500(v5, v4);
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(v4);
    return (v6 & 1) != 0;
  }
  return !v4;
}

BOOL _s20BooksPersonalization9TransportO21BookIdToMetadataEntryV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v4 = *(_QWORD **)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(unsigned __int8 *)(a2 + 16);
  v8 = *(_QWORD **)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    if (!v7)
      return 0;
  }
  else
  {
    if (*(double *)(a1 + 8) == *(double *)(a2 + 8))
      v11 = v7;
    else
      v11 = 1;
    if ((v11 & 1) != 0)
      return 0;
  }
  if ((sub_AA90(v4, v8) & 1) != 0)
  {
    if (v6)
      return v9
          && (v5 == v10 && v6 == v9 || (_stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v10, v9, 0) & 1) != 0);
    if (!v9)
      return 1;
  }
  return 0;
}

BOOL _s20BooksPersonalization9TransportO26RecommendationBlockRequestV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 result;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  _QWORD *v40;
  int v41;
  int v42;
  char v43;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v6 = *(_DWORD *)(a1 + 40);
  v7 = *(_QWORD **)(a1 + 48);
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD **)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  v12 = *(_QWORD **)(a2 + 48);
  if (v3 == 2)
  {
    v41 = *(_DWORD *)(a2 + 40);
    v42 = *(unsigned __int8 *)(a2 + 44);
    v43 = *(_BYTE *)(a1 + 44);
    if (v8 != 2)
      return 0;
  }
  else
  {
    if (v8 == 2)
      return 0;
    v37 = *(_QWORD *)(a1 + 24);
    v41 = *(_DWORD *)(a2 + 40);
    v42 = *(unsigned __int8 *)(a2 + 44);
    v43 = *(_BYTE *)(a1 + 44);
    v38 = *(_DWORD *)(a1 + 40);
    v39 = *(_QWORD **)(a2 + 48);
    v40 = *(_QWORD **)(a1 + 48);
    v13 = *(_QWORD *)a1;
    v14 = *(_QWORD *)a2;
    v15 = 0x4B4F4F4245;
    v16 = 0x4F4F424F49445541;
    v17 = 0xE90000000000004BLL;
    if (v3 != 1)
    {
      v16 = *(_QWORD *)a1;
      v17 = *(_QWORD *)(a1 + 8);
    }
    if (v3)
      v18 = v16;
    else
      v18 = 0x4B4F4F4245;
    if (v3)
      v19 = v17;
    else
      v19 = 0xE500000000000000;
    v36 = v4;
    if (v8)
    {
      if (v8 == 1)
      {
        v15 = 0x4F4F424F49445541;
        v20 = 0xE90000000000004BLL;
      }
      else
      {
        v15 = *(_QWORD *)a2;
        v20 = *(_QWORD *)(a2 + 8);
      }
    }
    else
    {
      v20 = 0xE500000000000000;
    }
    v21 = *(_QWORD *)(a2 + 24);
    if (v18 == v15 && v19 == v20)
    {
      sub_1E9F8(v13, v3);
      sub_1E9F8(v13, v3);
      sub_1E9F8(v14, v8);
      sub_1E9F8(v13, v3);
      sub_1E9F8(v14, v8);
      swift_bridgeObjectRelease_n(v19, 2);
      sub_1EA08(v14, v8);
      sub_1EA08(v13, v3);
      sub_1EA08(v13, v3);
      v12 = v39;
      v7 = v40;
      v6 = v38;
      v10 = v21;
      v4 = v36;
      v5 = v37;
    }
    else
    {
      v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, v15, v20, 0);
      sub_1E9F8(v13, v3);
      sub_1E9F8(v13, v3);
      sub_1E9F8(v14, v8);
      sub_1E9F8(v13, v3);
      sub_1E9F8(v14, v8);
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease(v20);
      sub_1EA08(v14, v8);
      sub_1EA08(v13, v3);
      sub_1EA08(v13, v3);
      result = 0;
      v12 = v39;
      v7 = v40;
      v6 = v38;
      v10 = v21;
      v4 = v36;
      v5 = v37;
      if ((v35 & 1) == 0)
        return result;
    }
  }
  if (v2)
  {
    if (!v9)
      return 0;
    v23 = v10;
    v24 = sub_B454(v2, v9);
    v10 = v23;
    if (!v24)
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  if (v4 == 3)
  {
    if (v11 != 3)
      return 0;
  }
  else
  {
    if (v11 == 3)
      return 0;
    v25 = 1162170950;
    if (v4)
    {
      if (v4 == 1)
      {
        v26 = 0xE400000000000000;
        v27 = 1145651536;
      }
      else if (v4 == 2)
      {
        v26 = 0xE300000000000000;
        v27 = 5852737;
      }
      else
      {
        v27 = v5;
        v26 = v4;
      }
    }
    else
    {
      v26 = 0xE400000000000000;
      v27 = 1162170950;
    }
    v28 = v6;
    if (v11)
    {
      if (v11 == 1)
      {
        v29 = 0xE400000000000000;
        v25 = 1145651536;
      }
      else if (v11 == 2)
      {
        v29 = 0xE300000000000000;
        v25 = 5852737;
      }
      else
      {
        v25 = v10;
        v29 = v11;
      }
    }
    else
    {
      v29 = 0xE400000000000000;
    }
    if (v27 == v25 && v26 == v29)
    {
      v30 = v10;
      sub_1F918(v5, v4);
      sub_1F918(v5, v4);
      sub_1F918(v30, v11);
      sub_1F918(v5, v4);
      sub_1F918(v30, v11);
      swift_bridgeObjectRelease_n(v26, 2);
      sub_1F928(v30, v11);
      sub_1F928(v5, v4);
      sub_1F928(v5, v4);
      v6 = v28;
    }
    else
    {
      v31 = v10;
      v32 = v5;
      v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v26, v25, v29, 0);
      sub_1F918(v32, v4);
      sub_1F918(v32, v4);
      sub_1F918(v31, v11);
      sub_1F918(v32, v4);
      sub_1F918(v31, v11);
      swift_bridgeObjectRelease(v26);
      swift_bridgeObjectRelease(v29);
      sub_1F928(v31, v11);
      sub_1F928(v32, v4);
      sub_1F928(v32, v4);
      result = 0;
      v6 = v28;
      if ((v33 & 1) == 0)
        return result;
    }
  }
  if ((v43 & 1) != 0)
  {
    if (!v42)
      return 0;
  }
  else
  {
    v34 = v42;
    if (v6 != v41)
      v34 = 1;
    if ((v34 & 1) != 0)
      return 0;
  }
  if (v7)
    return v12 && sub_B454(v7, v12);
  return !v12;
}

BOOL _s20BooksPersonalization9TransportO21RecommendationRequestV2eeoiySbAE_AEtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  _BOOL8 result;

  v4 = *a1;
  v5 = a1[1];
  v6 = *((unsigned __int8 *)a1 + 16);
  v8 = a1[3];
  v7 = a1[4];
  v9 = (_QWORD *)a1[5];
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(unsigned __int8 *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 32);
  v14 = *(_QWORD **)(a2 + 40);
  if (v4 == *(_QWORD *)a2 && v5 == v10)
  {
    if (v6 != v11)
      return 0;
LABEL_7:
    if (v8)
    {
      if (!v13 || (sub_9754(v8, v13) & 1) == 0)
        return 0;
    }
    else if (v13)
    {
      return 0;
    }
    if (sub_ACBC(v7, v12))
    {
      if (v9)
        return v14 && (sub_AA90(v9, v14) & 1) != 0;
      if (!v14)
        return 1;
    }
    return 0;
  }
  v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v10, 0);
  result = 0;
  if ((v15 & 1) != 0 && ((v6 ^ v11) & 1) == 0)
    goto LABEL_7;
  return result;
}

uint64_t _s20BooksPersonalization9TransportO22BookIdToMediaTypeEntryV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;

  v3 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v4 = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return 0;
  }
  else
  {
    if (*(_QWORD *)a1 != *(_QWORD *)a2)
      v4 = 1;
    if ((v4 & 1) != 0)
      return 0;
  }
  if (v2 == 2)
    return v5 == 2;
  if (v5 != 2)
  {
    v7 = 0x4B4F4F4245;
    v8 = 0x4F4F424F49445541;
    v9 = 0xE90000000000004BLL;
    if (v2 != 1)
    {
      v8 = *(_QWORD *)(a1 + 16);
      v9 = *(_QWORD *)(a1 + 24);
    }
    if (v2)
      v10 = v8;
    else
      v10 = 0x4B4F4F4245;
    if (v2)
      v11 = v9;
    else
      v11 = 0xE500000000000000;
    if (v5)
    {
      if (v5 == 1)
      {
        v7 = 0x4F4F424F49445541;
        v12 = 0xE90000000000004BLL;
        if (v10 != 0x4F4F424F49445541)
          goto LABEL_28;
      }
      else
      {
        v7 = *(_QWORD *)(a2 + 16);
        v12 = *(_QWORD *)(a2 + 24);
        if (v10 != v6)
          goto LABEL_28;
      }
    }
    else
    {
      v12 = 0xE500000000000000;
      if (v10 != 0x4B4F4F4245)
      {
LABEL_28:
        v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v7, v12, 0);
        sub_1E9F8(v3, v2);
        sub_1E9F8(v3, v2);
        sub_1E9F8(v6, v5);
        sub_1E9F8(v3, v2);
        sub_1E9F8(v6, v5);
        swift_bridgeObjectRelease(v11);
        swift_bridgeObjectRelease(v12);
        sub_1EA08(v6, v5);
        sub_1EA08(v3, v2);
        sub_1EA08(v3, v2);
        return (v13 & 1) != 0;
      }
    }
    if (v11 == v12)
    {
      sub_1E9F8(v3, v2);
      sub_1E9F8(v3, v2);
      sub_1E9F8(v6, v5);
      sub_1E9F8(v3, v2);
      sub_1E9F8(v6, v5);
      swift_bridgeObjectRelease_n(v11, 2);
      sub_1EA08(v6, v5);
      sub_1EA08(v3, v2);
      sub_1EA08(v3, v2);
      return 1;
    }
    goto LABEL_28;
  }
  return 0;
}

uint64_t _s20BooksPersonalization9TransportO22RecommendationResponseV2eeoiySbAE_AEtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a1[1];
  v4 = a1[2];
  v3 = a1[3];
  v6 = a1[4];
  v5 = a1[5];
  v7 = a2[1];
  v9 = a2[2];
  v8 = a2[3];
  v11 = a2[4];
  v10 = a2[5];
  if ((sub_AB54(*a1, *a2) & 1) == 0)
    return 0;
  if (v2)
  {
    if (!v7 || (sub_9E7C(v2, v7) & 1) == 0)
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  if (v4)
  {
    if (!v9 || (sub_9F38(v4, v9) & 1) == 0)
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  if (v3)
  {
    if (!v8 || (sub_C0D8(v3, v8) & 1) == 0)
      return 0;
  }
  else if (v8)
  {
    return 0;
  }
  if (v6)
  {
    if (!v11 || (sub_A22C(v6, v11) & 1) == 0)
      return 0;
  }
  else if (v11)
  {
    return 0;
  }
  if (v5)
  {
    if (v10 && (sub_C0D8(v5, v10) & 1) != 0)
      return 1;
  }
  else if (!v10)
  {
    return 1;
  }
  return 0;
}

BOOL sub_1E1CC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  char v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char v9;

  v5 = *(_BYTE *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(unsigned __int8 *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  if ((v5 & 1) != 0)
  {
    if (!v7)
      return 0;
  }
  else
  {
    if (*(_QWORD *)a1 == *(_QWORD *)a2)
      v9 = v7;
    else
      v9 = 1;
    if ((v9 & 1) != 0)
      return 0;
  }
  if (v6)
    return v8 && (a3() & 1) != 0;
  return !v8;
}

uint64_t _s20BooksPersonalization9TransportO23RecommendationRequestV2V2eeoiySbAE_AEtFZ_0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  uint64_t result;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = (_QWORD *)a1[3];
  v8 = a2[1];
  v10 = a2[2];
  v9 = (_QWORD *)a2[3];
  v11 = v4 == *a2 && v5 == v8;
  if (v11 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v8, 0), result = 0, (v12 & 1) != 0))
  {
    if ((sub_A314(v6, v10) & 1) != 0)
    {
      if (v7)
      {
        if (v9 && (sub_AA90(v7, v9) & 1) != 0)
          return 1;
      }
      else if (!v9)
      {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t _s20BooksPersonalization9TransportO24RecommendationResponseV2V2eeoiySbAE_AEtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v6 = a1[4];
  v5 = a1[5];
  v16 = a1[7];
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v11 = a2[4];
  v10 = a2[5];
  v17 = a2[6];
  v18 = a1[6];
  v15 = a2[7];
  if ((sub_9854(*a1, *a2) & 1) == 0)
    return 0;
  if (v2)
  {
    if (!v7 || (sub_9D34(v2, v7) & 1) == 0)
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  if (v3)
  {
    if (!v8 || (sub_9E7C(v3, v8) & 1) == 0)
      return 0;
  }
  else if (v8)
  {
    return 0;
  }
  if (v4)
  {
    if (!v9 || (sub_9F38(v4, v9) & 1) == 0)
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  if (v6)
  {
    if (!v11)
      return 0;
    swift_bridgeObjectRetain(v11);
    v12 = swift_bridgeObjectRetain(v6);
    v13 = sub_9FCC(v12, v11);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v11);
    if ((v13 & 1) == 0)
      return 0;
  }
  else if (v11)
  {
    return 0;
  }
  if (v5)
  {
    if (!v10 || (sub_C0D8(v5, v10) & 1) == 0)
      return 0;
  }
  else if (v10)
  {
    return 0;
  }
  if (v18)
  {
    if (!v17 || (sub_A22C(v18, v17) & 1) == 0)
      return 0;
  }
  else if (v17)
  {
    return 0;
  }
  if (v16)
  {
    if (v15 && (sub_C0D8(v16, v15) & 1) != 0)
      return 1;
  }
  else if (!v15)
  {
    return 1;
  }
  return 0;
}

uint64_t _s20BooksPersonalization9TransportO28RecommendationBlockRequestV2V2eeoiySbAE_AEtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;

  if (*a1 != *a2)
    return 0;
  v22 = *((_QWORD *)a1 + 3);
  v23 = *((_QWORD *)a1 + 5);
  v25 = *((_QWORD *)a1 + 4);
  v26 = *((_QWORD *)a1 + 6);
  v24 = a1[56];
  v21 = *((_QWORD *)a1 + 8);
  v2 = *((_DWORD *)a1 + 18);
  v3 = *((_QWORD *)a2 + 3);
  v4 = *((_QWORD *)a2 + 4);
  v6 = *((_QWORD *)a2 + 5);
  v5 = *((_QWORD *)a2 + 6);
  v7 = a2[56];
  v8 = *((_QWORD *)a2 + 8);
  v9 = *((_DWORD *)a2 + 18);
  v10 = *((_QWORD *)a2 + 2);
  v11 = *((_QWORD *)a1 + 2);
  if ((sub_96CC(*((_QWORD *)a1 + 1), *((_QWORD *)a2 + 1)) & 1) == 0)
    return 0;
  v18 = v9;
  v19 = v6;
  if (v11 == 1)
  {
    v12 = v10;
    if (v10 == 1)
      return sub_9500(v21, v8) & (v2 == v18);
    goto LABEL_8;
  }
  v29 = v11;
  v30 = v22;
  v31 = v25;
  v32 = v23;
  v33 = v26;
  v34 = v24;
  v12 = v10;
  if (v10 == 1)
  {
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v11);
    sub_1F918(v25, v23);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v22);
    sub_1F918(v25, v23);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v11);
    sub_1F928(v25, v23);
    swift_bridgeObjectRelease(v26);
LABEL_8:
    sub_1FAE4(v12, v3, v4, v19, v5);
    sub_1FB40(v11, v22, v25, v23, v26);
    sub_1FB40(v12, v3, v4, v19, v5);
    return 0;
  }
  v27[0] = v10;
  v27[1] = v3;
  v27[2] = v4;
  v27[3] = v19;
  v27[4] = v5;
  v28 = v7;
  sub_1FAE4(v11, v22, v25, v23, v26);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v11);
  sub_1F918(v25, v23);
  swift_bridgeObjectRetain(v26);
  v20 = _s20BooksPersonalization9TransportO0A21RecommendationRequestV2eeoiySbAE_AEtFZ_0((uint64_t)&v29, (uint64_t)v27);
  v14 = v30;
  v15 = v31;
  v16 = v32;
  v17 = v33;
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v14);
  sub_1F928(v15, v16);
  swift_bridgeObjectRelease(v17);
  sub_1FB40(v11, v22, v25, v23, v26);
  if ((v20 & 1) == 0)
    return 0;
  return sub_9500(v21, v8) & (v2 == v18);
}

uint64_t _s20BooksPersonalization9TransportO8SeedBookV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  char v3;

  if (*(_QWORD *)a1 != *(_QWORD *)a2 || *(float *)(a1 + 8) != *(float *)(a2 + 8))
    return 0;
  v3 = *(_BYTE *)(a2 + 24);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0)
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      v3 = 1;
    if ((v3 & 1) != 0)
      return 0;
  }
  return 1;
}

uint64_t _s20BooksPersonalization9TransportO9DiagnosisV2eeoiySbAE_AEtFZ_0(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = *a1;
  v2 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[6];
  v7 = a1[7];
  v8 = *a2;
  v9 = a2[1];
  v11 = a2[2];
  v10 = a2[3];
  v28 = a2[4];
  v29 = a1[4];
  v30 = a2[5];
  v31 = a1[5];
  v12 = 0xE700000000000000;
  v13 = 0x474E494E524157;
  if (v2 != 1)
  {
    v13 = *a1;
    v12 = a1[1];
  }
  if (v2)
    v14 = v13;
  else
    v14 = 0x524F525245;
  if (v2)
    v15 = v12;
  else
    v15 = 0xE500000000000000;
  v16 = 0xE700000000000000;
  v17 = 0x474E494E524157;
  if (v9 != 1)
  {
    v17 = *a2;
    v16 = a2[1];
  }
  if (v9)
    v18 = v17;
  else
    v18 = 0x524F525245;
  if (v9)
    v19 = v16;
  else
    v19 = 0xE500000000000000;
  v26 = v7;
  v27 = v6;
  v24 = a2[7];
  v25 = a2[6];
  if (v14 == v18 && v15 == v19)
  {
    sub_1F6D4(v8, v9);
    sub_1F6D4(v3, v2);
    sub_1F6D4(v3, v2);
    sub_1F6D4(v8, v9);
    swift_bridgeObjectRelease_n(v15, 2);
    sub_26A48(v8, v9);
    sub_26A48(v3, v2);
  }
  else
  {
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v18, v19, 0);
    sub_1F6D4(v8, v9);
    sub_1F6D4(v3, v2);
    sub_1F6D4(v3, v2);
    sub_1F6D4(v8, v9);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v19);
    sub_26A48(v8, v9);
    sub_26A48(v3, v2);
    result = 0;
    if ((v23 & 1) == 0)
      return result;
  }
  sub_205AC(v4, v5);
  sub_205AC(v11, v10);
  v21 = sub_776C4(v4, v5, v11, v10);
  sub_205C0(v11, v10);
  sub_205C0(v4, v5);
  if ((v21 & 1) == 0)
    return 0;
  if (!v31)
  {
    if (!v30)
    {
LABEL_31:
      if (v27 == v25 && v26 == v24)
        return 1;
      else
        return _stringCompareWithSmolCheck(_:_:expecting:)(v27, v26, v25, v24, 0);
    }
    return 0;
  }
  if (!v30)
    return 0;
  if (v29 == v28 && v31 == v30)
    goto LABEL_31;
  v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v31, v28, v30, 0);
  result = 0;
  if ((v22 & 1) != 0)
    goto LABEL_31;
  return result;
}

uint64_t sub_1E9F8(uint64_t a1, unint64_t a2)
{
  if (a2 != 2)
    return sub_1F6D4(a1, a2);
  return a1;
}

uint64_t sub_1EA08(uint64_t a1, unint64_t a2)
{
  if (a2 != 2)
    return sub_26A48(a1, a2);
  return a1;
}

unint64_t sub_1EA18()
{
  unint64_t result;

  result = qword_1F0368;
  if (!qword_1F0368)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockRequest.CodingKeys, &type metadata for Transport.RecommendationBlockRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0368);
  }
  return result;
}

unint64_t sub_1EA5C()
{
  unint64_t result;

  result = qword_1F0370;
  if (!qword_1F0370)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockRequest.MediaTypePayload, &type metadata for Transport.RecommendationBlockRequest.MediaTypePayload);
    atomic_store(result, (unint64_t *)&qword_1F0370);
  }
  return result;
}

unint64_t sub_1EAA0()
{
  unint64_t result;

  result = qword_1F0378;
  if (!qword_1F0378)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockRequest.SaleTypePayload, &type metadata for Transport.RecommendationBlockRequest.SaleTypePayload);
    atomic_store(result, (unint64_t *)&qword_1F0378);
  }
  return result;
}

unint64_t sub_1EAE4()
{
  unint64_t result;

  result = qword_1F0388;
  if (!qword_1F0388)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockRequest.MediaTypePayload, &type metadata for Transport.RecommendationBlockRequest.MediaTypePayload);
    atomic_store(result, (unint64_t *)&qword_1F0388);
  }
  return result;
}

unint64_t sub_1EB28()
{
  unint64_t result;

  result = qword_1F0390;
  if (!qword_1F0390)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockRequest.SaleTypePayload, &type metadata for Transport.RecommendationBlockRequest.SaleTypePayload);
    atomic_store(result, (unint64_t *)&qword_1F0390);
  }
  return result;
}

unint64_t sub_1EB6C()
{
  unint64_t result;

  result = qword_1F03A0;
  if (!qword_1F03A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockResponse.CodingKeys, &type metadata for Transport.RecommendationBlockResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F03A0);
  }
  return result;
}

unint64_t sub_1EBB0()
{
  unint64_t result;

  result = qword_1F03B8;
  if (!qword_1F03B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationRequest.CodingKeys, &type metadata for Transport.RecommendationRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F03B8);
  }
  return result;
}

unint64_t sub_1EBF4()
{
  unint64_t result;

  result = qword_1F03C0;
  if (!qword_1F03C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.UserProfile, &type metadata for Transport.UserProfile);
    atomic_store(result, (unint64_t *)&qword_1F03C0);
  }
  return result;
}

unint64_t sub_1EC38()
{
  unint64_t result;

  result = qword_1F03D8;
  if (!qword_1F03D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockRequest, &type metadata for Transport.RecommendationBlockRequest);
    atomic_store(result, (unint64_t *)&qword_1F03D8);
  }
  return result;
}

unint64_t sub_1EC7C()
{
  unint64_t result;

  result = qword_1F03F8;
  if (!qword_1F03F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.UserProfile, &type metadata for Transport.UserProfile);
    atomic_store(result, (unint64_t *)&qword_1F03F8);
  }
  return result;
}

unint64_t sub_1ECC0()
{
  unint64_t result;

  result = qword_1F0408;
  if (!qword_1F0408)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockRequest, &type metadata for Transport.RecommendationBlockRequest);
    atomic_store(result, (unint64_t *)&qword_1F0408);
  }
  return result;
}

unint64_t sub_1ED04()
{
  unint64_t result;

  result = qword_1F0420;
  if (!qword_1F0420)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationResponse.CodingKeys, &type metadata for Transport.RecommendationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0420);
  }
  return result;
}

unint64_t sub_1ED48()
{
  unint64_t result;

  result = qword_1F0438;
  if (!qword_1F0438)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockResponse, &type metadata for Transport.RecommendationBlockResponse);
    atomic_store(result, (unint64_t *)&qword_1F0438);
  }
  return result;
}

unint64_t sub_1ED8C()
{
  unint64_t result;

  result = qword_1F0450;
  if (!qword_1F0450)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToDeduplicationIdEntry, &type metadata for Transport.BookIdToDeduplicationIdEntry);
    atomic_store(result, (unint64_t *)&qword_1F0450);
  }
  return result;
}

unint64_t sub_1EDD0()
{
  unint64_t result;

  result = qword_1F0468;
  if (!qword_1F0468)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToSeriesIdEntry, &type metadata for Transport.BookIdToSeriesIdEntry);
    atomic_store(result, (unint64_t *)&qword_1F0468);
  }
  return result;
}

unint64_t sub_1EE14()
{
  unint64_t result;

  result = qword_1F0480;
  if (!qword_1F0480)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookAuthors, &type metadata for Transport.BookAuthors);
    atomic_store(result, (unint64_t *)&qword_1F0480);
  }
  return result;
}

unint64_t sub_1EE58()
{
  unint64_t result;

  result = qword_1F0498;
  if (!qword_1F0498)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookEmbeddings, &type metadata for Transport.BookEmbeddings);
    atomic_store(result, (unint64_t *)&qword_1F0498);
  }
  return result;
}

unint64_t sub_1EE9C()
{
  unint64_t result;

  result = qword_1F04B0;
  if (!qword_1F04B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookGenres, &type metadata for Transport.BookGenres);
    atomic_store(result, (unint64_t *)&qword_1F04B0);
  }
  return result;
}

unint64_t sub_1EEE0()
{
  unint64_t result;

  result = qword_1F04C8;
  if (!qword_1F04C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockResponse, &type metadata for Transport.RecommendationBlockResponse);
    atomic_store(result, (unint64_t *)&qword_1F04C8);
  }
  return result;
}

unint64_t sub_1EF24()
{
  unint64_t result;

  result = qword_1F04D8;
  if (!qword_1F04D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToDeduplicationIdEntry, &type metadata for Transport.BookIdToDeduplicationIdEntry);
    atomic_store(result, (unint64_t *)&qword_1F04D8);
  }
  return result;
}

unint64_t sub_1EF68()
{
  unint64_t result;

  result = qword_1F04E8;
  if (!qword_1F04E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToSeriesIdEntry, &type metadata for Transport.BookIdToSeriesIdEntry);
    atomic_store(result, (unint64_t *)&qword_1F04E8);
  }
  return result;
}

unint64_t sub_1EFAC()
{
  unint64_t result;

  result = qword_1F04F8;
  if (!qword_1F04F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookAuthors, &type metadata for Transport.BookAuthors);
    atomic_store(result, (unint64_t *)&qword_1F04F8);
  }
  return result;
}

unint64_t sub_1EFF0()
{
  unint64_t result;

  result = qword_1F0508;
  if (!qword_1F0508)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookEmbeddings, &type metadata for Transport.BookEmbeddings);
    atomic_store(result, (unint64_t *)&qword_1F0508);
  }
  return result;
}

unint64_t sub_1F034()
{
  unint64_t result;

  result = qword_1F0518;
  if (!qword_1F0518)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookGenres, &type metadata for Transport.BookGenres);
    atomic_store(result, (unint64_t *)&qword_1F0518);
  }
  return result;
}

unint64_t sub_1F078()
{
  unint64_t result;

  result = qword_1F0528;
  if (!qword_1F0528)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.SeedBook.CodingKeys, &type metadata for Transport.SeedBook.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0528);
  }
  return result;
}

unint64_t sub_1F0BC()
{
  unint64_t result;

  result = qword_1F0540;
  if (!qword_1F0540)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendedItem.CodingKeys, &type metadata for Transport.RecommendedItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0540);
  }
  return result;
}

unint64_t sub_1F100()
{
  unint64_t result;

  result = qword_1F0558;
  if (!qword_1F0558)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.InferredFromInfo, &type metadata for Transport.InferredFromInfo);
    atomic_store(result, (unint64_t *)&qword_1F0558);
  }
  return result;
}

unint64_t sub_1F144()
{
  unint64_t result;

  result = qword_1F0570;
  if (!qword_1F0570)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.InferredFromInfo, &type metadata for Transport.InferredFromInfo);
    atomic_store(result, (unint64_t *)&qword_1F0570);
  }
  return result;
}

unint64_t sub_1F188()
{
  unint64_t result;

  result = qword_1F0580;
  if (!qword_1F0580)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.UserProfileV2.CodingKeys, &type metadata for Transport.UserProfileV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0580);
  }
  return result;
}

unint64_t sub_1F1CC()
{
  unint64_t result;

  result = qword_1F0598;
  if (!qword_1F0598)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.SeedBook, &type metadata for Transport.SeedBook);
    atomic_store(result, (unint64_t *)&qword_1F0598);
  }
  return result;
}

unint64_t sub_1F210()
{
  unint64_t result;

  result = qword_1F05B0;
  if (!qword_1F05B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.SeedBook, &type metadata for Transport.SeedBook);
    atomic_store(result, (unint64_t *)&qword_1F05B0);
  }
  return result;
}

unint64_t sub_1F254()
{
  unint64_t result;

  result = qword_1F05C0;
  if (!qword_1F05C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookEmbeddings.CodingKeys, &type metadata for Transport.BookEmbeddings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F05C0);
  }
  return result;
}

uint64_t sub_1F298(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_5F68(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1F2F4()
{
  unint64_t result;

  result = qword_1F05F0;
  if (!qword_1F05F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.InferredFromInfo.CodingKeys, &type metadata for Transport.InferredFromInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F05F0);
  }
  return result;
}

unint64_t sub_1F338()
{
  unint64_t result;

  result = qword_1F0608;
  if (!qword_1F0608)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.Methodology, &type metadata for Transport.Methodology);
    atomic_store(result, (unint64_t *)&qword_1F0608);
  }
  return result;
}

unint64_t sub_1F37C()
{
  unint64_t result;

  result = qword_1F0620;
  if (!qword_1F0620)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.Methodology, &type metadata for Transport.Methodology);
    atomic_store(result, (unint64_t *)&qword_1F0620);
  }
  return result;
}

unint64_t sub_1F3C0()
{
  unint64_t result;

  result = qword_1F0630;
  if (!qword_1F0630)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookAuthors.CodingKeys, &type metadata for Transport.BookAuthors.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0630);
  }
  return result;
}

unint64_t sub_1F404()
{
  unint64_t result;

  result = qword_1F0648;
  if (!qword_1F0648)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookGenres.CodingKeys, &type metadata for Transport.BookGenres.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0648);
  }
  return result;
}

unint64_t sub_1F448()
{
  unint64_t result;

  result = qword_1F0660;
  if (!qword_1F0660)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToDeduplicationIdEntry.CodingKeys, &type metadata for Transport.BookIdToDeduplicationIdEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0660);
  }
  return result;
}

unint64_t sub_1F48C()
{
  unint64_t result;

  result = qword_1F0678;
  if (!qword_1F0678)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToSeriesIdEntry.CodingKeys, &type metadata for Transport.BookIdToSeriesIdEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0678);
  }
  return result;
}

unint64_t sub_1F4D0()
{
  unint64_t result;

  result = qword_1F0690;
  if (!qword_1F0690)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToBisacCodesEntry.CodingKeys, &type metadata for Transport.BookIdToBisacCodesEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0690);
  }
  return result;
}

unint64_t sub_1F514()
{
  unint64_t result;

  result = qword_1F06A8;
  if (!qword_1F06A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToMediaTypeEntry.CodingKeys, &type metadata for Transport.BookIdToMediaTypeEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F06A8);
  }
  return result;
}

unint64_t sub_1F558()
{
  unint64_t result;

  result = qword_1F06B0;
  if (!qword_1F06B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.MediaType, &type metadata for Transport.MediaType);
    atomic_store(result, (unint64_t *)&qword_1F06B0);
  }
  return result;
}

unint64_t sub_1F59C()
{
  unint64_t result;

  result = qword_1F06C0;
  if (!qword_1F06C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.MediaType, &type metadata for Transport.MediaType);
    atomic_store(result, (unint64_t *)&qword_1F06C0);
  }
  return result;
}

uint64_t _s20BooksPersonalization9TransportO11MethodologyOyAESgSScfC_0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  if (a1 == 0x4148435255504F43 && a2 == 0xEA00000000004553)
  {
    v5 = 0xEA00000000004553;
  }
  else
  {
    v4 = a1;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4148435255504F43, 0xEA00000000004553, a1, a2, 0) & 1) != 0)
    {
      v5 = a2;
    }
    else if (v4 != 0xD000000000000012 || (v5 = 0x800000000019FA50, a2 != 0x800000000019FA50))
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x800000000019FA50, v4, a2, 0) & 1) == 0)
        return v4;
      v5 = a2;
    }
  }
  swift_bridgeObjectRelease(v5);
  return 0;
}

uint64_t sub_1F6D4(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 2)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t sub_1F6E8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  if (a1 == 0x4B4F4F4245 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
  }
  else
  {
    v4 = a1;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4B4F4F4245, 0xE500000000000000, a1, a2, 0) & 1) != 0)
    {
      v5 = a2;
    }
    else if (v4 == 0x4F4F424F49445541 && a2 == 0xE90000000000004BLL)
    {
      v5 = 0xE90000000000004BLL;
    }
    else
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4F4F424F49445541, 0xE90000000000004BLL, v4, a2, 0) & 1) == 0)
        return v4;
      v5 = a2;
    }
  }
  swift_bridgeObjectRelease(v5);
  return 0;
}

uint64_t sub_1F7DC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  if (a1 == 1162170950 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
  }
  else
  {
    v4 = a1;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(1162170950, 0xE400000000000000, a1, a2, 0) & 1) != 0)
    {
      v5 = a2;
    }
    else if (v4 == 1145651536 && a2 == 0xE400000000000000)
    {
      v5 = 0xE400000000000000;
    }
    else if ((_stringCompareWithSmolCheck(_:_:expecting:)(1145651536, 0xE400000000000000, v4, a2, 0) & 1) != 0)
    {
      v5 = a2;
    }
    else if (v4 == 5852737 && a2 == 0xE300000000000000)
    {
      v5 = 0xE300000000000000;
    }
    else
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(5852737, 0xE300000000000000, v4, a2, 0) & 1) == 0)
        return v4;
      v5 = a2;
    }
  }
  swift_bridgeObjectRelease(v5);
  return 0;
}

uint64_t sub_1F904(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 3)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t sub_1F918(uint64_t a1, unint64_t a2)
{
  if (a2 != 3)
    return sub_1F904(a1, a2);
  return a1;
}

uint64_t sub_1F928(uint64_t a1, unint64_t a2)
{
  if (a2 != 3)
    return sub_1F938(a1, a2);
  return a1;
}

uint64_t sub_1F938(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 3)
    return swift_bridgeObjectRelease(a2);
  return result;
}

unint64_t sub_1F94C()
{
  unint64_t result;

  result = qword_1F06D0;
  if (!qword_1F06D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.StoreAssetRequestDetails.CodingKeys, &type metadata for Transport.StoreAssetRequestDetails.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F06D0);
  }
  return result;
}

unint64_t sub_1F990()
{
  unint64_t result;

  result = qword_1F06E8;
  if (!qword_1F06E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.StoreAssetRequestDetails.SaleTypePayload, &type metadata for Transport.StoreAssetRequestDetails.SaleTypePayload);
    atomic_store(result, (unint64_t *)&qword_1F06E8);
  }
  return result;
}

unint64_t sub_1F9D4()
{
  unint64_t result;

  result = qword_1F0700;
  if (!qword_1F0700)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.StoreAssetRequestDetails.SaleTypePayload, &type metadata for Transport.StoreAssetRequestDetails.SaleTypePayload);
    atomic_store(result, (unint64_t *)&qword_1F0700);
  }
  return result;
}

unint64_t sub_1FA18()
{
  unint64_t result;

  result = qword_1F0710;
  if (!qword_1F0710)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BooksRecommendationRequest.CodingKeys, &type metadata for Transport.BooksRecommendationRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0710);
  }
  return result;
}

unint64_t sub_1FA5C()
{
  unint64_t result;

  result = qword_1F0718;
  if (!qword_1F0718)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.StoreAssetRequestDetails, &type metadata for Transport.StoreAssetRequestDetails);
    atomic_store(result, (unint64_t *)&qword_1F0718);
  }
  return result;
}

unint64_t sub_1FAA0()
{
  unint64_t result;

  result = qword_1F0728;
  if (!qword_1F0728)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.StoreAssetRequestDetails, &type metadata for Transport.StoreAssetRequestDetails);
    atomic_store(result, (unint64_t *)&qword_1F0728);
  }
  return result;
}

uint64_t sub_1FAE4(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;

  if (result != 1)
  {
    v8 = result;
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(v8);
    sub_1F918(a3, a4);
    return swift_bridgeObjectRetain(a5);
  }
  return result;
}

uint64_t sub_1FB40(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (result != 1)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a2);
    sub_1F928(a3, a4);
    return swift_bridgeObjectRelease(a5);
  }
  return result;
}

uint64_t sub_1FB98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5EDC(&qword_1F0730);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1FBE0(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
  return a1;
}

unint64_t sub_1FC18()
{
  unint64_t result;

  result = qword_1F0740;
  if (!qword_1F0740)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockRequestV2.CodingKeys, &type metadata for Transport.RecommendationBlockRequestV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0740);
  }
  return result;
}

unint64_t sub_1FC5C()
{
  unint64_t result;

  result = qword_1F0748;
  if (!qword_1F0748)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.UserProfileV2, &type metadata for Transport.UserProfileV2);
    atomic_store(result, (unint64_t *)&qword_1F0748);
  }
  return result;
}

unint64_t sub_1FCA0()
{
  unint64_t result;

  result = qword_1F0750;
  if (!qword_1F0750)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BooksRecommendationRequest, &type metadata for Transport.BooksRecommendationRequest);
    atomic_store(result, (unint64_t *)&qword_1F0750);
  }
  return result;
}

unint64_t sub_1FCE4()
{
  unint64_t result;

  result = qword_1F0760;
  if (!qword_1F0760)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.UserProfileV2, &type metadata for Transport.UserProfileV2);
    atomic_store(result, (unint64_t *)&qword_1F0760);
  }
  return result;
}

unint64_t sub_1FD28()
{
  unint64_t result;

  result = qword_1F0768;
  if (!qword_1F0768)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BooksRecommendationRequest, &type metadata for Transport.BooksRecommendationRequest);
    atomic_store(result, (unint64_t *)&qword_1F0768);
  }
  return result;
}

unint64_t sub_1FD6C()
{
  unint64_t result;

  result = qword_1F0778;
  if (!qword_1F0778)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockResponseV2.CodingKeys, &type metadata for Transport.RecommendationBlockResponseV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0778);
  }
  return result;
}

unint64_t sub_1FDB0()
{
  unint64_t result;

  result = qword_1F0790;
  if (!qword_1F0790)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendedItem, &type metadata for Transport.RecommendedItem);
    atomic_store(result, (unint64_t *)&qword_1F0790);
  }
  return result;
}

unint64_t sub_1FDF4()
{
  unint64_t result;

  result = qword_1F07A8;
  if (!qword_1F07A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendedItem, &type metadata for Transport.RecommendedItem);
    atomic_store(result, (unint64_t *)&qword_1F07A8);
  }
  return result;
}

unint64_t sub_1FE38()
{
  unint64_t result;

  result = qword_1F07B8;
  if (!qword_1F07B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationRequestV2.CodingKeys, &type metadata for Transport.RecommendationRequestV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F07B8);
  }
  return result;
}

unint64_t sub_1FE7C()
{
  unint64_t result;

  result = qword_1F07D0;
  if (!qword_1F07D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockRequestV2, &type metadata for Transport.RecommendationBlockRequestV2);
    atomic_store(result, (unint64_t *)&qword_1F07D0);
  }
  return result;
}

unint64_t sub_1FEC0()
{
  unint64_t result;

  result = qword_1F07E8;
  if (!qword_1F07E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockRequestV2, &type metadata for Transport.RecommendationBlockRequestV2);
    atomic_store(result, (unint64_t *)&qword_1F07E8);
  }
  return result;
}

unint64_t sub_1FF04()
{
  unint64_t result;

  result = qword_1F07F8;
  if (!qword_1F07F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationResponseV2.CodingKeys, &type metadata for Transport.RecommendationResponseV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F07F8);
  }
  return result;
}

unint64_t sub_1FF48()
{
  unint64_t result;

  result = qword_1F0810;
  if (!qword_1F0810)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockResponseV2, &type metadata for Transport.RecommendationBlockResponseV2);
    atomic_store(result, (unint64_t *)&qword_1F0810);
  }
  return result;
}

unint64_t sub_1FF8C()
{
  unint64_t result;

  result = qword_1F0828;
  if (!qword_1F0828)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToBisacCodesEntry, &type metadata for Transport.BookIdToBisacCodesEntry);
    atomic_store(result, (unint64_t *)&qword_1F0828);
  }
  return result;
}

unint64_t sub_1FFD0()
{
  unint64_t result;

  result = qword_1F0840;
  if (!qword_1F0840)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToMediaTypeEntry, &type metadata for Transport.BookIdToMediaTypeEntry);
    atomic_store(result, (unint64_t *)&qword_1F0840);
  }
  return result;
}

unint64_t sub_20014()
{
  unint64_t result;

  result = qword_1F0858;
  if (!qword_1F0858)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockResponseV2, &type metadata for Transport.RecommendationBlockResponseV2);
    atomic_store(result, (unint64_t *)&qword_1F0858);
  }
  return result;
}

unint64_t sub_20058()
{
  unint64_t result;

  result = qword_1F0868;
  if (!qword_1F0868)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToBisacCodesEntry, &type metadata for Transport.BookIdToBisacCodesEntry);
    atomic_store(result, (unint64_t *)&qword_1F0868);
  }
  return result;
}

unint64_t sub_2009C()
{
  unint64_t result;

  result = qword_1F0878;
  if (!qword_1F0878)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToMediaTypeEntry, &type metadata for Transport.BookIdToMediaTypeEntry);
    atomic_store(result, (unint64_t *)&qword_1F0878);
  }
  return result;
}

unint64_t sub_200E0()
{
  unint64_t result;

  result = qword_1F0888;
  if (!qword_1F0888)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.MetadataRequest.CodingKeys, &type metadata for Transport.MetadataRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0888);
  }
  return result;
}

unint64_t sub_20124()
{
  unint64_t result;

  result = qword_1F08A0;
  if (!qword_1F08A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.MetadataResponse.CodingKeys, &type metadata for Transport.MetadataResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F08A0);
  }
  return result;
}

unint64_t sub_20168()
{
  unint64_t result;

  result = qword_1F08B8;
  if (!qword_1F08B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToMetadataEntry, &type metadata for Transport.BookIdToMetadataEntry);
    atomic_store(result, (unint64_t *)&qword_1F08B8);
  }
  return result;
}

uint64_t sub_201AC(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_5F68(a2);
    a3();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_20210()
{
  unint64_t result;

  result = qword_1F08D0;
  if (!qword_1F08D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToMetadataEntry, &type metadata for Transport.BookIdToMetadataEntry);
    atomic_store(result, (unint64_t *)&qword_1F08D0);
  }
  return result;
}

unint64_t sub_20254()
{
  unint64_t result;

  result = qword_1F08E0;
  if (!qword_1F08E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToMetadataEntry.CodingKeys, &type metadata for Transport.BookIdToMetadataEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F08E0);
  }
  return result;
}

uint64_t _s20BooksPersonalization9TransportO9DiagnosisV11TypePayloadOyAGSgSScfC_0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  if (a1 == 0x524F525245 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
  }
  else
  {
    v4 = a1;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x524F525245, 0xE500000000000000, a1, a2, 0) & 1) != 0)
    {
      v5 = a2;
    }
    else if (v4 == 0x474E494E524157 && a2 == 0xE700000000000000)
    {
      v5 = 0xE700000000000000;
    }
    else
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x474E494E524157, 0xE700000000000000, v4, a2, 0) & 1) == 0)
        return v4;
      v5 = a2;
    }
  }
  swift_bridgeObjectRelease(v5);
  return 0;
}

uint64_t _s20BooksPersonalization9TransportO9DiagnosisV11CodePayloadOyAGSgSScfC_0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  if (a1 == 0x5F44494C41564E49 && a2 == 0xEF54534555514552)
  {
    v5 = 0xEF54534555514552;
  }
  else
  {
    v4 = a1;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5F44494C41564E49, 0xEF54534555514552, a1, a2, 0) & 1) != 0)
    {
      v5 = a2;
    }
    else if (v4 == 0x485455415F544F4ELL && a2 == 0xEE0044455A49524FLL)
    {
      v5 = 0xEE0044455A49524FLL;
    }
    else if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x485455415F544F4ELL, 0xEE0044455A49524FLL, v4, a2, 0) & 1) != 0)
    {
      v5 = a2;
    }
    else if (v4 == 0x455F524556524553 && a2 == 0xEC000000524F5252)
    {
      v5 = 0xEC000000524F5252;
    }
    else if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x455F524556524553, 0xEC000000524F5252, v4, a2, 0) & 1) != 0)
    {
      v5 = a2;
    }
    else if (v4 == 0x4E554F465F544F4ELL && a2 == 0xE900000000000044)
    {
      v5 = 0xE900000000000044;
    }
    else
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4E554F465F544F4ELL, 0xE900000000000044, v4, a2, 0) & 1) == 0)
        return v4;
      v5 = a2;
    }
  }
  swift_bridgeObjectRelease(v5);
  return 0;
}

uint64_t sub_205AC(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 4)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t sub_205C0(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 4)
    return swift_bridgeObjectRelease(a2);
  return result;
}

unint64_t sub_205D4()
{
  unint64_t result;

  result = qword_1F08F8;
  if (!qword_1F08F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.Diagnosis.CodingKeys, &type metadata for Transport.Diagnosis.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F08F8);
  }
  return result;
}

unint64_t sub_20618()
{
  unint64_t result;

  result = qword_1F0900;
  if (!qword_1F0900)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.Diagnosis.TypePayload, &type metadata for Transport.Diagnosis.TypePayload);
    atomic_store(result, (unint64_t *)&qword_1F0900);
  }
  return result;
}

unint64_t sub_2065C()
{
  unint64_t result;

  result = qword_1F0908;
  if (!qword_1F0908)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.Diagnosis.CodePayload, &type metadata for Transport.Diagnosis.CodePayload);
    atomic_store(result, (unint64_t *)&qword_1F0908);
  }
  return result;
}

unint64_t sub_206A0()
{
  unint64_t result;

  result = qword_1F0918;
  if (!qword_1F0918)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.Diagnosis.TypePayload, &type metadata for Transport.Diagnosis.TypePayload);
    atomic_store(result, (unint64_t *)&qword_1F0918);
  }
  return result;
}

unint64_t sub_206E4()
{
  unint64_t result;

  result = qword_1F0920;
  if (!qword_1F0920)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.Diagnosis.CodePayload, &type metadata for Transport.Diagnosis.CodePayload);
    atomic_store(result, (unint64_t *)&qword_1F0920);
  }
  return result;
}

unint64_t sub_2072C()
{
  unint64_t result;

  result = qword_1F0928;
  if (!qword_1F0928)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookAffinity.CodingKeys, &type metadata for Transport.BookAffinity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0928);
  }
  return result;
}

unint64_t sub_20774()
{
  unint64_t result;

  result = qword_1F0930;
  if (!qword_1F0930)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookAffinity.CodingKeys, &type metadata for Transport.BookAffinity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0930);
  }
  return result;
}

unint64_t sub_207BC()
{
  unint64_t result;

  result = qword_1F0938;
  if (!qword_1F0938)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookAffinity.CodingKeys, &type metadata for Transport.BookAffinity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0938);
  }
  return result;
}

unint64_t sub_20804()
{
  unint64_t result;

  result = qword_1F0940;
  if (!qword_1F0940)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookAffinity, &type metadata for Transport.BookAffinity);
    atomic_store(result, (unint64_t *)&qword_1F0940);
  }
  return result;
}

unint64_t sub_2084C()
{
  unint64_t result;

  result = qword_1F0948;
  if (!qword_1F0948)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.UserProfile.CodingKeys, &type metadata for Transport.UserProfile.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0948);
  }
  return result;
}

unint64_t sub_20894()
{
  unint64_t result;

  result = qword_1F0950;
  if (!qword_1F0950)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.UserProfile.CodingKeys, &type metadata for Transport.UserProfile.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0950);
  }
  return result;
}

unint64_t sub_208DC()
{
  unint64_t result;

  result = qword_1F0958;
  if (!qword_1F0958)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.UserProfile.CodingKeys, &type metadata for Transport.UserProfile.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0958);
  }
  return result;
}

unint64_t sub_20924()
{
  unint64_t result;

  result = qword_1F0960;
  if (!qword_1F0960)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.UserProfile, &type metadata for Transport.UserProfile);
    atomic_store(result, (unint64_t *)&qword_1F0960);
  }
  return result;
}

unint64_t sub_2096C()
{
  unint64_t result;

  result = qword_1F0968;
  if (!qword_1F0968)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockRequest.MediaTypePayload, &type metadata for Transport.RecommendationBlockRequest.MediaTypePayload);
    atomic_store(result, (unint64_t *)&qword_1F0968);
  }
  return result;
}

unint64_t sub_209B4()
{
  unint64_t result;

  result = qword_1F0970;
  if (!qword_1F0970)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockRequest.MediaTypePayload, &type metadata for Transport.RecommendationBlockRequest.MediaTypePayload);
    atomic_store(result, (unint64_t *)&qword_1F0970);
  }
  return result;
}

uint64_t sub_209F8()
{
  return sub_22954(&qword_1F0978, &qword_1F0980);
}

unint64_t sub_20A20()
{
  unint64_t result;

  result = qword_1F0988;
  if (!qword_1F0988)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockRequest.SaleTypePayload, &type metadata for Transport.RecommendationBlockRequest.SaleTypePayload);
    atomic_store(result, (unint64_t *)&qword_1F0988);
  }
  return result;
}

unint64_t sub_20A68()
{
  unint64_t result;

  result = qword_1F0990;
  if (!qword_1F0990)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockRequest.SaleTypePayload, &type metadata for Transport.RecommendationBlockRequest.SaleTypePayload);
    atomic_store(result, (unint64_t *)&qword_1F0990);
  }
  return result;
}

uint64_t sub_20AAC()
{
  return sub_22954(&qword_1F0998, &qword_1F09A0);
}

unint64_t sub_20AD4()
{
  unint64_t result;

  result = qword_1F09A8;
  if (!qword_1F09A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockRequest.CodingKeys, &type metadata for Transport.RecommendationBlockRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F09A8);
  }
  return result;
}

unint64_t sub_20B1C()
{
  unint64_t result;

  result = qword_1F09B0;
  if (!qword_1F09B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockRequest.CodingKeys, &type metadata for Transport.RecommendationBlockRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F09B0);
  }
  return result;
}

unint64_t sub_20B64()
{
  unint64_t result;

  result = qword_1F09B8;
  if (!qword_1F09B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockRequest.CodingKeys, &type metadata for Transport.RecommendationBlockRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F09B8);
  }
  return result;
}

unint64_t sub_20BAC()
{
  unint64_t result;

  result = qword_1F09C0;
  if (!qword_1F09C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockRequest, &type metadata for Transport.RecommendationBlockRequest);
    atomic_store(result, (unint64_t *)&qword_1F09C0);
  }
  return result;
}

unint64_t sub_20BF4()
{
  unint64_t result;

  result = qword_1F09C8;
  if (!qword_1F09C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockResponse.CodingKeys, &type metadata for Transport.RecommendationBlockResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F09C8);
  }
  return result;
}

unint64_t sub_20C3C()
{
  unint64_t result;

  result = qword_1F09D0;
  if (!qword_1F09D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockResponse.CodingKeys, &type metadata for Transport.RecommendationBlockResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F09D0);
  }
  return result;
}

unint64_t sub_20C84()
{
  unint64_t result;

  result = qword_1F09D8;
  if (!qword_1F09D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockResponse.CodingKeys, &type metadata for Transport.RecommendationBlockResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F09D8);
  }
  return result;
}

unint64_t sub_20CCC()
{
  unint64_t result;

  result = qword_1F09E0;
  if (!qword_1F09E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockResponse, &type metadata for Transport.RecommendationBlockResponse);
    atomic_store(result, (unint64_t *)&qword_1F09E0);
  }
  return result;
}

unint64_t sub_20D14()
{
  unint64_t result;

  result = qword_1F09E8;
  if (!qword_1F09E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationRequest.CodingKeys, &type metadata for Transport.RecommendationRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F09E8);
  }
  return result;
}

unint64_t sub_20D5C()
{
  unint64_t result;

  result = qword_1F09F0;
  if (!qword_1F09F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationRequest.CodingKeys, &type metadata for Transport.RecommendationRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F09F0);
  }
  return result;
}

unint64_t sub_20DA4()
{
  unint64_t result;

  result = qword_1F09F8;
  if (!qword_1F09F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationRequest.CodingKeys, &type metadata for Transport.RecommendationRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F09F8);
  }
  return result;
}

unint64_t sub_20DEC()
{
  unint64_t result;

  result = qword_1F0A00;
  if (!qword_1F0A00)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationRequest, &type metadata for Transport.RecommendationRequest);
    atomic_store(result, (unint64_t *)&qword_1F0A00);
  }
  return result;
}

unint64_t sub_20E34()
{
  unint64_t result;

  result = qword_1F0A08;
  if (!qword_1F0A08)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationResponse.CodingKeys, &type metadata for Transport.RecommendationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0A08);
  }
  return result;
}

unint64_t sub_20E7C()
{
  unint64_t result;

  result = qword_1F0A10;
  if (!qword_1F0A10)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationResponse.CodingKeys, &type metadata for Transport.RecommendationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0A10);
  }
  return result;
}

unint64_t sub_20EC4()
{
  unint64_t result;

  result = qword_1F0A18;
  if (!qword_1F0A18)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationResponse.CodingKeys, &type metadata for Transport.RecommendationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0A18);
  }
  return result;
}

unint64_t sub_20F0C()
{
  unint64_t result;

  result = qword_1F0A20;
  if (!qword_1F0A20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationResponse, &type metadata for Transport.RecommendationResponse);
    atomic_store(result, (unint64_t *)&qword_1F0A20);
  }
  return result;
}

unint64_t sub_20F54()
{
  unint64_t result;

  result = qword_1F0A28;
  if (!qword_1F0A28)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.SeedBook.CodingKeys, &type metadata for Transport.SeedBook.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0A28);
  }
  return result;
}

unint64_t sub_20F9C()
{
  unint64_t result;

  result = qword_1F0A30;
  if (!qword_1F0A30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.SeedBook.CodingKeys, &type metadata for Transport.SeedBook.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0A30);
  }
  return result;
}

unint64_t sub_20FE4()
{
  unint64_t result;

  result = qword_1F0A38;
  if (!qword_1F0A38)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.SeedBook.CodingKeys, &type metadata for Transport.SeedBook.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0A38);
  }
  return result;
}

unint64_t sub_2102C()
{
  unint64_t result;

  result = qword_1F0A40;
  if (!qword_1F0A40)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.SeedBook, &type metadata for Transport.SeedBook);
    atomic_store(result, (unint64_t *)&qword_1F0A40);
  }
  return result;
}

unint64_t sub_21074()
{
  unint64_t result;

  result = qword_1F0A48;
  if (!qword_1F0A48)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendedItem.CodingKeys, &type metadata for Transport.RecommendedItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0A48);
  }
  return result;
}

unint64_t sub_210BC()
{
  unint64_t result;

  result = qword_1F0A50;
  if (!qword_1F0A50)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendedItem.CodingKeys, &type metadata for Transport.RecommendedItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0A50);
  }
  return result;
}

unint64_t sub_21104()
{
  unint64_t result;

  result = qword_1F0A58;
  if (!qword_1F0A58)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendedItem.CodingKeys, &type metadata for Transport.RecommendedItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0A58);
  }
  return result;
}

unint64_t sub_2114C()
{
  unint64_t result;

  result = qword_1F0A60;
  if (!qword_1F0A60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendedItem, &type metadata for Transport.RecommendedItem);
    atomic_store(result, (unint64_t *)&qword_1F0A60);
  }
  return result;
}

unint64_t sub_21194()
{
  unint64_t result;

  result = qword_1F0A68;
  if (!qword_1F0A68)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.UserProfileV2.CodingKeys, &type metadata for Transport.UserProfileV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0A68);
  }
  return result;
}

unint64_t sub_211DC()
{
  unint64_t result;

  result = qword_1F0A70;
  if (!qword_1F0A70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.UserProfileV2.CodingKeys, &type metadata for Transport.UserProfileV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0A70);
  }
  return result;
}

unint64_t sub_21224()
{
  unint64_t result;

  result = qword_1F0A78;
  if (!qword_1F0A78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.UserProfileV2.CodingKeys, &type metadata for Transport.UserProfileV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0A78);
  }
  return result;
}

unint64_t sub_2126C()
{
  unint64_t result;

  result = qword_1F0A80;
  if (!qword_1F0A80)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.UserProfileV2, &type metadata for Transport.UserProfileV2);
    atomic_store(result, (unint64_t *)&qword_1F0A80);
  }
  return result;
}

unint64_t sub_212B4()
{
  unint64_t result;

  result = qword_1F0A88;
  if (!qword_1F0A88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookEmbeddings.CodingKeys, &type metadata for Transport.BookEmbeddings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0A88);
  }
  return result;
}

unint64_t sub_212FC()
{
  unint64_t result;

  result = qword_1F0A90;
  if (!qword_1F0A90)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookEmbeddings.CodingKeys, &type metadata for Transport.BookEmbeddings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0A90);
  }
  return result;
}

unint64_t sub_21344()
{
  unint64_t result;

  result = qword_1F0A98;
  if (!qword_1F0A98)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookEmbeddings.CodingKeys, &type metadata for Transport.BookEmbeddings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0A98);
  }
  return result;
}

unint64_t sub_2138C()
{
  unint64_t result;

  result = qword_1F0AA0;
  if (!qword_1F0AA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookEmbeddings, &type metadata for Transport.BookEmbeddings);
    atomic_store(result, (unint64_t *)&qword_1F0AA0);
  }
  return result;
}

unint64_t sub_213D4()
{
  unint64_t result;

  result = qword_1F0AA8;
  if (!qword_1F0AA8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.InferredFromInfo.CodingKeys, &type metadata for Transport.InferredFromInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0AA8);
  }
  return result;
}

unint64_t sub_2141C()
{
  unint64_t result;

  result = qword_1F0AB0;
  if (!qword_1F0AB0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.InferredFromInfo.CodingKeys, &type metadata for Transport.InferredFromInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0AB0);
  }
  return result;
}

unint64_t sub_21464()
{
  unint64_t result;

  result = qword_1F0AB8;
  if (!qword_1F0AB8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.InferredFromInfo.CodingKeys, &type metadata for Transport.InferredFromInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0AB8);
  }
  return result;
}

unint64_t sub_214AC()
{
  unint64_t result;

  result = qword_1F0AC0;
  if (!qword_1F0AC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.InferredFromInfo, &type metadata for Transport.InferredFromInfo);
    atomic_store(result, (unint64_t *)&qword_1F0AC0);
  }
  return result;
}

unint64_t sub_214F4()
{
  unint64_t result;

  result = qword_1F0AC8;
  if (!qword_1F0AC8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookAuthors.CodingKeys, &type metadata for Transport.BookAuthors.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0AC8);
  }
  return result;
}

unint64_t sub_2153C()
{
  unint64_t result;

  result = qword_1F0AD0;
  if (!qword_1F0AD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookAuthors.CodingKeys, &type metadata for Transport.BookAuthors.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0AD0);
  }
  return result;
}

unint64_t sub_21584()
{
  unint64_t result;

  result = qword_1F0AD8;
  if (!qword_1F0AD8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookAuthors.CodingKeys, &type metadata for Transport.BookAuthors.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0AD8);
  }
  return result;
}

unint64_t sub_215CC()
{
  unint64_t result;

  result = qword_1F0AE0;
  if (!qword_1F0AE0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookAuthors, &type metadata for Transport.BookAuthors);
    atomic_store(result, (unint64_t *)&qword_1F0AE0);
  }
  return result;
}

unint64_t sub_21614()
{
  unint64_t result;

  result = qword_1F0AE8;
  if (!qword_1F0AE8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookGenres.CodingKeys, &type metadata for Transport.BookGenres.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0AE8);
  }
  return result;
}

unint64_t sub_2165C()
{
  unint64_t result;

  result = qword_1F0AF0;
  if (!qword_1F0AF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookGenres.CodingKeys, &type metadata for Transport.BookGenres.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0AF0);
  }
  return result;
}

unint64_t sub_216A4()
{
  unint64_t result;

  result = qword_1F0AF8;
  if (!qword_1F0AF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookGenres.CodingKeys, &type metadata for Transport.BookGenres.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0AF8);
  }
  return result;
}

unint64_t sub_216EC()
{
  unint64_t result;

  result = qword_1F0B00;
  if (!qword_1F0B00)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookGenres, &type metadata for Transport.BookGenres);
    atomic_store(result, (unint64_t *)&qword_1F0B00);
  }
  return result;
}

unint64_t sub_21734()
{
  unint64_t result;

  result = qword_1F0B08;
  if (!qword_1F0B08)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToDeduplicationIdEntry.CodingKeys, &type metadata for Transport.BookIdToDeduplicationIdEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0B08);
  }
  return result;
}

unint64_t sub_2177C()
{
  unint64_t result;

  result = qword_1F0B10;
  if (!qword_1F0B10)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToDeduplicationIdEntry.CodingKeys, &type metadata for Transport.BookIdToDeduplicationIdEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0B10);
  }
  return result;
}

unint64_t sub_217C4()
{
  unint64_t result;

  result = qword_1F0B18;
  if (!qword_1F0B18)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToDeduplicationIdEntry.CodingKeys, &type metadata for Transport.BookIdToDeduplicationIdEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0B18);
  }
  return result;
}

unint64_t sub_2180C()
{
  unint64_t result;

  result = qword_1F0B20;
  if (!qword_1F0B20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToDeduplicationIdEntry, &type metadata for Transport.BookIdToDeduplicationIdEntry);
    atomic_store(result, (unint64_t *)&qword_1F0B20);
  }
  return result;
}

unint64_t sub_21854()
{
  unint64_t result;

  result = qword_1F0B28;
  if (!qword_1F0B28)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToSeriesIdEntry.CodingKeys, &type metadata for Transport.BookIdToSeriesIdEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0B28);
  }
  return result;
}

unint64_t sub_2189C()
{
  unint64_t result;

  result = qword_1F0B30;
  if (!qword_1F0B30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToSeriesIdEntry.CodingKeys, &type metadata for Transport.BookIdToSeriesIdEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0B30);
  }
  return result;
}

unint64_t sub_218E4()
{
  unint64_t result;

  result = qword_1F0B38;
  if (!qword_1F0B38)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToSeriesIdEntry.CodingKeys, &type metadata for Transport.BookIdToSeriesIdEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0B38);
  }
  return result;
}

unint64_t sub_2192C()
{
  unint64_t result;

  result = qword_1F0B40;
  if (!qword_1F0B40)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToSeriesIdEntry, &type metadata for Transport.BookIdToSeriesIdEntry);
    atomic_store(result, (unint64_t *)&qword_1F0B40);
  }
  return result;
}

unint64_t sub_21974()
{
  unint64_t result;

  result = qword_1F0B48;
  if (!qword_1F0B48)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToBisacCodesEntry.CodingKeys, &type metadata for Transport.BookIdToBisacCodesEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0B48);
  }
  return result;
}

unint64_t sub_219BC()
{
  unint64_t result;

  result = qword_1F0B50;
  if (!qword_1F0B50)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToBisacCodesEntry.CodingKeys, &type metadata for Transport.BookIdToBisacCodesEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0B50);
  }
  return result;
}

unint64_t sub_21A04()
{
  unint64_t result;

  result = qword_1F0B58;
  if (!qword_1F0B58)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToBisacCodesEntry.CodingKeys, &type metadata for Transport.BookIdToBisacCodesEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0B58);
  }
  return result;
}

unint64_t sub_21A4C()
{
  unint64_t result;

  result = qword_1F0B60;
  if (!qword_1F0B60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToBisacCodesEntry, &type metadata for Transport.BookIdToBisacCodesEntry);
    atomic_store(result, (unint64_t *)&qword_1F0B60);
  }
  return result;
}

unint64_t sub_21A94()
{
  unint64_t result;

  result = qword_1F0B68;
  if (!qword_1F0B68)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToMediaTypeEntry.CodingKeys, &type metadata for Transport.BookIdToMediaTypeEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0B68);
  }
  return result;
}

unint64_t sub_21ADC()
{
  unint64_t result;

  result = qword_1F0B70;
  if (!qword_1F0B70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToMediaTypeEntry.CodingKeys, &type metadata for Transport.BookIdToMediaTypeEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0B70);
  }
  return result;
}

unint64_t sub_21B24()
{
  unint64_t result;

  result = qword_1F0B78;
  if (!qword_1F0B78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToMediaTypeEntry.CodingKeys, &type metadata for Transport.BookIdToMediaTypeEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0B78);
  }
  return result;
}

unint64_t sub_21B6C()
{
  unint64_t result;

  result = qword_1F0B80;
  if (!qword_1F0B80)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToMediaTypeEntry, &type metadata for Transport.BookIdToMediaTypeEntry);
    atomic_store(result, (unint64_t *)&qword_1F0B80);
  }
  return result;
}

unint64_t sub_21BB4()
{
  unint64_t result;

  result = qword_1F0B88;
  if (!qword_1F0B88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.Methodology, &type metadata for Transport.Methodology);
    atomic_store(result, (unint64_t *)&qword_1F0B88);
  }
  return result;
}

unint64_t sub_21BFC()
{
  unint64_t result;

  result = qword_1F0B90;
  if (!qword_1F0B90)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.Methodology, &type metadata for Transport.Methodology);
    atomic_store(result, (unint64_t *)&qword_1F0B90);
  }
  return result;
}

uint64_t sub_21C40()
{
  return sub_22954(&qword_1F0B98, &qword_1F05F8);
}

unint64_t sub_21C68()
{
  unint64_t result;

  result = qword_1F0BA0;
  if (!qword_1F0BA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.MediaType, &type metadata for Transport.MediaType);
    atomic_store(result, (unint64_t *)&qword_1F0BA0);
  }
  return result;
}

unint64_t sub_21CB0()
{
  unint64_t result;

  result = qword_1F0BA8;
  if (!qword_1F0BA8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.MediaType, &type metadata for Transport.MediaType);
    atomic_store(result, (unint64_t *)&qword_1F0BA8);
  }
  return result;
}

uint64_t sub_21CF4()
{
  return sub_22954(&qword_1F0BB0, &qword_1F06D8);
}

unint64_t sub_21D1C()
{
  unint64_t result;

  result = qword_1F0BB8;
  if (!qword_1F0BB8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.StoreAssetRequestDetails.SaleTypePayload, &type metadata for Transport.StoreAssetRequestDetails.SaleTypePayload);
    atomic_store(result, (unint64_t *)&qword_1F0BB8);
  }
  return result;
}

unint64_t sub_21D64()
{
  unint64_t result;

  result = qword_1F0BC0;
  if (!qword_1F0BC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.StoreAssetRequestDetails.SaleTypePayload, &type metadata for Transport.StoreAssetRequestDetails.SaleTypePayload);
    atomic_store(result, (unint64_t *)&qword_1F0BC0);
  }
  return result;
}

uint64_t sub_21DA8()
{
  return sub_22954(&qword_1F0BC8, &qword_1F0BD0);
}

unint64_t sub_21DD0()
{
  unint64_t result;

  result = qword_1F0BD8;
  if (!qword_1F0BD8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.StoreAssetRequestDetails.CodingKeys, &type metadata for Transport.StoreAssetRequestDetails.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0BD8);
  }
  return result;
}

unint64_t sub_21E18()
{
  unint64_t result;

  result = qword_1F0BE0;
  if (!qword_1F0BE0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.StoreAssetRequestDetails.CodingKeys, &type metadata for Transport.StoreAssetRequestDetails.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0BE0);
  }
  return result;
}

unint64_t sub_21E60()
{
  unint64_t result;

  result = qword_1F0BE8;
  if (!qword_1F0BE8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.StoreAssetRequestDetails.CodingKeys, &type metadata for Transport.StoreAssetRequestDetails.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0BE8);
  }
  return result;
}

unint64_t sub_21EA8()
{
  unint64_t result;

  result = qword_1F0BF0;
  if (!qword_1F0BF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.StoreAssetRequestDetails, &type metadata for Transport.StoreAssetRequestDetails);
    atomic_store(result, (unint64_t *)&qword_1F0BF0);
  }
  return result;
}

unint64_t sub_21EF0()
{
  unint64_t result;

  result = qword_1F0BF8;
  if (!qword_1F0BF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BooksRecommendationRequest.CodingKeys, &type metadata for Transport.BooksRecommendationRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0BF8);
  }
  return result;
}

unint64_t sub_21F38()
{
  unint64_t result;

  result = qword_1F0C00;
  if (!qword_1F0C00)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BooksRecommendationRequest.CodingKeys, &type metadata for Transport.BooksRecommendationRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0C00);
  }
  return result;
}

unint64_t sub_21F80()
{
  unint64_t result;

  result = qword_1F0C08;
  if (!qword_1F0C08)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BooksRecommendationRequest.CodingKeys, &type metadata for Transport.BooksRecommendationRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0C08);
  }
  return result;
}

unint64_t sub_21FC8()
{
  unint64_t result;

  result = qword_1F0C10;
  if (!qword_1F0C10)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BooksRecommendationRequest, &type metadata for Transport.BooksRecommendationRequest);
    atomic_store(result, (unint64_t *)&qword_1F0C10);
  }
  return result;
}

unint64_t sub_22010()
{
  unint64_t result;

  result = qword_1F0C18;
  if (!qword_1F0C18)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockRequestV2.CodingKeys, &type metadata for Transport.RecommendationBlockRequestV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0C18);
  }
  return result;
}

unint64_t sub_22058()
{
  unint64_t result;

  result = qword_1F0C20;
  if (!qword_1F0C20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockRequestV2.CodingKeys, &type metadata for Transport.RecommendationBlockRequestV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0C20);
  }
  return result;
}

unint64_t sub_220A0()
{
  unint64_t result;

  result = qword_1F0C28;
  if (!qword_1F0C28)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockRequestV2.CodingKeys, &type metadata for Transport.RecommendationBlockRequestV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0C28);
  }
  return result;
}

unint64_t sub_220E8()
{
  unint64_t result;

  result = qword_1F0C30;
  if (!qword_1F0C30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockRequestV2, &type metadata for Transport.RecommendationBlockRequestV2);
    atomic_store(result, (unint64_t *)&qword_1F0C30);
  }
  return result;
}

unint64_t sub_22130()
{
  unint64_t result;

  result = qword_1F0C38;
  if (!qword_1F0C38)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockResponseV2.CodingKeys, &type metadata for Transport.RecommendationBlockResponseV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0C38);
  }
  return result;
}

unint64_t sub_22178()
{
  unint64_t result;

  result = qword_1F0C40;
  if (!qword_1F0C40)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockResponseV2.CodingKeys, &type metadata for Transport.RecommendationBlockResponseV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0C40);
  }
  return result;
}

unint64_t sub_221C0()
{
  unint64_t result;

  result = qword_1F0C48;
  if (!qword_1F0C48)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockResponseV2.CodingKeys, &type metadata for Transport.RecommendationBlockResponseV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0C48);
  }
  return result;
}

unint64_t sub_22208()
{
  unint64_t result;

  result = qword_1F0C50;
  if (!qword_1F0C50)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockResponseV2, &type metadata for Transport.RecommendationBlockResponseV2);
    atomic_store(result, (unint64_t *)&qword_1F0C50);
  }
  return result;
}

unint64_t sub_22250()
{
  unint64_t result;

  result = qword_1F0C58;
  if (!qword_1F0C58)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationRequestV2.CodingKeys, &type metadata for Transport.RecommendationRequestV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0C58);
  }
  return result;
}

unint64_t sub_22298()
{
  unint64_t result;

  result = qword_1F0C60;
  if (!qword_1F0C60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationRequestV2.CodingKeys, &type metadata for Transport.RecommendationRequestV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0C60);
  }
  return result;
}

unint64_t sub_222E0()
{
  unint64_t result;

  result = qword_1F0C68;
  if (!qword_1F0C68)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationRequestV2.CodingKeys, &type metadata for Transport.RecommendationRequestV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0C68);
  }
  return result;
}

unint64_t sub_22328()
{
  unint64_t result;

  result = qword_1F0C70;
  if (!qword_1F0C70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationRequestV2, &type metadata for Transport.RecommendationRequestV2);
    atomic_store(result, (unint64_t *)&qword_1F0C70);
  }
  return result;
}

unint64_t sub_22370()
{
  unint64_t result;

  result = qword_1F0C78;
  if (!qword_1F0C78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationResponseV2.CodingKeys, &type metadata for Transport.RecommendationResponseV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0C78);
  }
  return result;
}

unint64_t sub_223B8()
{
  unint64_t result;

  result = qword_1F0C80;
  if (!qword_1F0C80)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationResponseV2.CodingKeys, &type metadata for Transport.RecommendationResponseV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0C80);
  }
  return result;
}

unint64_t sub_22400()
{
  unint64_t result;

  result = qword_1F0C88;
  if (!qword_1F0C88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationResponseV2.CodingKeys, &type metadata for Transport.RecommendationResponseV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0C88);
  }
  return result;
}

unint64_t sub_22448()
{
  unint64_t result;

  result = qword_1F0C90;
  if (!qword_1F0C90)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationResponseV2, &type metadata for Transport.RecommendationResponseV2);
    atomic_store(result, (unint64_t *)&qword_1F0C90);
  }
  return result;
}

unint64_t sub_22490()
{
  unint64_t result;

  result = qword_1F0C98;
  if (!qword_1F0C98)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.MetadataRequest.CodingKeys, &type metadata for Transport.MetadataRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0C98);
  }
  return result;
}

unint64_t sub_224D8()
{
  unint64_t result;

  result = qword_1F0CA0;
  if (!qword_1F0CA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.MetadataRequest.CodingKeys, &type metadata for Transport.MetadataRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0CA0);
  }
  return result;
}

unint64_t sub_22520()
{
  unint64_t result;

  result = qword_1F0CA8;
  if (!qword_1F0CA8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.MetadataRequest.CodingKeys, &type metadata for Transport.MetadataRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0CA8);
  }
  return result;
}

unint64_t sub_22568()
{
  unint64_t result;

  result = qword_1F0CB0;
  if (!qword_1F0CB0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.MetadataRequest, &type metadata for Transport.MetadataRequest);
    atomic_store(result, (unint64_t *)&qword_1F0CB0);
  }
  return result;
}

unint64_t sub_225B0()
{
  unint64_t result;

  result = qword_1F0CB8;
  if (!qword_1F0CB8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.MetadataResponse.CodingKeys, &type metadata for Transport.MetadataResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0CB8);
  }
  return result;
}

unint64_t sub_225F8()
{
  unint64_t result;

  result = qword_1F0CC0;
  if (!qword_1F0CC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.MetadataResponse.CodingKeys, &type metadata for Transport.MetadataResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0CC0);
  }
  return result;
}

unint64_t sub_22640()
{
  unint64_t result;

  result = qword_1F0CC8;
  if (!qword_1F0CC8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.MetadataResponse.CodingKeys, &type metadata for Transport.MetadataResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0CC8);
  }
  return result;
}

unint64_t sub_22688()
{
  unint64_t result;

  result = qword_1F0CD0;
  if (!qword_1F0CD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.MetadataResponse, &type metadata for Transport.MetadataResponse);
    atomic_store(result, (unint64_t *)&qword_1F0CD0);
  }
  return result;
}

unint64_t sub_226D0()
{
  unint64_t result;

  result = qword_1F0CD8;
  if (!qword_1F0CD8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToMetadataEntry.CodingKeys, &type metadata for Transport.BookIdToMetadataEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0CD8);
  }
  return result;
}

unint64_t sub_22718()
{
  unint64_t result;

  result = qword_1F0CE0;
  if (!qword_1F0CE0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToMetadataEntry.CodingKeys, &type metadata for Transport.BookIdToMetadataEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0CE0);
  }
  return result;
}

unint64_t sub_22760()
{
  unint64_t result;

  result = qword_1F0CE8;
  if (!qword_1F0CE8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToMetadataEntry.CodingKeys, &type metadata for Transport.BookIdToMetadataEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0CE8);
  }
  return result;
}

unint64_t sub_227A8()
{
  unint64_t result;

  result = qword_1F0CF0;
  if (!qword_1F0CF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.BookIdToMetadataEntry, &type metadata for Transport.BookIdToMetadataEntry);
    atomic_store(result, (unint64_t *)&qword_1F0CF0);
  }
  return result;
}

unint64_t sub_227F0()
{
  unint64_t result;

  result = qword_1F0CF8;
  if (!qword_1F0CF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.Diagnosis.TypePayload, &type metadata for Transport.Diagnosis.TypePayload);
    atomic_store(result, (unint64_t *)&qword_1F0CF8);
  }
  return result;
}

unint64_t sub_22838()
{
  unint64_t result;

  result = qword_1F0D00;
  if (!qword_1F0D00)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.Diagnosis.TypePayload, &type metadata for Transport.Diagnosis.TypePayload);
    atomic_store(result, (unint64_t *)&qword_1F0D00);
  }
  return result;
}

uint64_t sub_2287C()
{
  return sub_22954(&qword_1F0D08, &qword_1F0D10);
}

unint64_t sub_228A4()
{
  unint64_t result;

  result = qword_1F0D18;
  if (!qword_1F0D18)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.Diagnosis.CodePayload, &type metadata for Transport.Diagnosis.CodePayload);
    atomic_store(result, (unint64_t *)&qword_1F0D18);
  }
  return result;
}

unint64_t sub_228EC()
{
  unint64_t result;

  result = qword_1F0D20;
  if (!qword_1F0D20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.Diagnosis.CodePayload, &type metadata for Transport.Diagnosis.CodePayload);
    atomic_store(result, (unint64_t *)&qword_1F0D20);
  }
  return result;
}

uint64_t sub_22930()
{
  return sub_22954(&qword_1F0D28, &qword_1F0D30);
}

uint64_t sub_22954(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_5F68(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_22998()
{
  unint64_t result;

  result = qword_1F0D38;
  if (!qword_1F0D38)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.Diagnosis.CodingKeys, &type metadata for Transport.Diagnosis.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0D38);
  }
  return result;
}

unint64_t sub_229E0()
{
  unint64_t result;

  result = qword_1F0D40;
  if (!qword_1F0D40)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.Diagnosis.CodingKeys, &type metadata for Transport.Diagnosis.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0D40);
  }
  return result;
}

unint64_t sub_22A28()
{
  unint64_t result;

  result = qword_1F0D48;
  if (!qword_1F0D48)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.Diagnosis.CodingKeys, &type metadata for Transport.Diagnosis.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F0D48);
  }
  return result;
}

unint64_t sub_22A70()
{
  unint64_t result;

  result = qword_1F0D50;
  if (!qword_1F0D50)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.Diagnosis, &type metadata for Transport.Diagnosis);
    atomic_store(result, (unint64_t *)&qword_1F0D50);
  }
  return result;
}

uint64_t _s12BookAffinityVwxx(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

uint64_t _s12BookAffinityVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t _s12BookAffinityVwca(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  return a1;
}

__n128 _s12BookAffinityVwtk(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t _s12BookAffinityVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for Transport.BookAffinity()
{
  return &type metadata for Transport.BookAffinity;
}

_BYTE *_s12BookAffinityV10CodingKeysOwCP(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for Transport.BookAffinity.CodingKeys()
{
  return &type metadata for Transport.BookAffinity.CodingKeys;
}

uint64_t _s11UserProfileVwCP(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t _s11UserProfileVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v3);
  return a1;
}

__n128 _s11UserProfileVwtk(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t _s11UserProfileVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t _s11UserProfileVwet(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s11UserProfileVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Transport.UserProfile()
{
  return &type metadata for Transport.UserProfile;
}

ValueMetadata *type metadata accessor for Transport.UserProfile.CodingKeys()
{
  return &type metadata for Transport.UserProfile.CodingKeys;
}

uint64_t _s26RecommendationBlockRequestVwxx(_QWORD *a1)
{
  unint64_t v2;
  unint64_t v3;

  v2 = a1[1];
  if (v2 >= 3)
    swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(a1[2]);
  v3 = a1[4];
  if (v3 >= 4)
    swift_bridgeObjectRelease(v3);
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t _s26RecommendationBlockRequestVwcp(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  unint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4 <= 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    swift_bridgeObjectRetain(v4);
  }
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = (_OWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain(v5);
  if (v7 < 4)
  {
    *(_OWORD *)(a1 + 24) = *v6;
  }
  else
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)v6;
    *(_QWORD *)(a1 + 32) = v7;
    swift_bridgeObjectRetain(v7);
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t _s26RecommendationBlockRequestVwca(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4 == 2)
  {
    if (v5 > 2)
      goto LABEL_8;
    goto LABEL_11;
  }
  if (v5 == 2)
  {
    sub_248E8(a1);
LABEL_11:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_12;
  }
  if (v4 < 2)
  {
    if (v5 >= 2)
    {
LABEL_8:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v6 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = v6;
      swift_bridgeObjectRetain(v6);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v5 < 2)
  {
    sub_2301C(a1);
    goto LABEL_11;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v16 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v4);
LABEL_12:
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v7);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a2 + 32);
  if (v9 == 3)
  {
    if (v10 >= 4)
      goto LABEL_19;
    goto LABEL_22;
  }
  if (v10 == 3)
  {
    sub_248E8(a1 + 24);
    goto LABEL_22;
  }
  if (v9 >= 3)
  {
    if (v10 >= 3)
    {
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v17 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 32) = v17;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRelease(v9);
      goto LABEL_23;
    }
    sub_2301C(a1 + 24);
    goto LABEL_22;
  }
  if (v10 < 3)
  {
LABEL_22:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    goto LABEL_23;
  }
LABEL_19:
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v11;
  swift_bridgeObjectRetain(v11);
LABEL_23:
  v12 = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = v12;
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t sub_2301C(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for String - 1) + 8))();
  return a1;
}

__n128 _s26RecommendationBlockRequestVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s26RecommendationBlockRequestVwta(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4 == 2)
    goto LABEL_7;
  if (v5 == 2)
  {
    sub_248E8(a1);
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  if (v4 < 2)
    goto LABEL_7;
  if (v5 < 2)
  {
    sub_2301C(a1);
    goto LABEL_7;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
LABEL_8:
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v6);
  v7 = (_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a2 + 32);
  if (v8 != 3)
  {
    if (v9 == 3)
    {
      sub_248E8(a1 + 24);
    }
    else if (v8 >= 3)
    {
      if (v9 >= 3)
      {
        *(_QWORD *)(a1 + 24) = *v7;
        *(_QWORD *)(a1 + 32) = v9;
        swift_bridgeObjectRelease(v8);
        goto LABEL_15;
      }
      sub_2301C(a1 + 24);
    }
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v7;
LABEL_15:
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t _s26RecommendationBlockRequestVwet(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s26RecommendationBlockRequestVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Transport.RecommendationBlockRequest()
{
  return &type metadata for Transport.RecommendationBlockRequest;
}

ValueMetadata *type metadata accessor for Transport.RecommendationBlockRequest.MediaTypePayload()
{
  return &type metadata for Transport.RecommendationBlockRequest.MediaTypePayload;
}

ValueMetadata *type metadata accessor for Transport.RecommendationBlockRequest.SaleTypePayload()
{
  return &type metadata for Transport.RecommendationBlockRequest.SaleTypePayload;
}

uint64_t _s26RecommendationBlockRequestV10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s26RecommendationBlockRequestV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_2336C + 4 * byte_1878FF[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_233A0 + 4 * byte_1878FA[v4]))();
}

uint64_t sub_233A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233B0);
  return result;
}

uint64_t sub_233BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x233C4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_233C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Transport.RecommendationBlockRequest.CodingKeys()
{
  return &type metadata for Transport.RecommendationBlockRequest.CodingKeys;
}

_QWORD *_s27RecommendationBlockResponseVwtk(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for Transport.RecommendationBlockResponse()
{
  return &type metadata for Transport.RecommendationBlockResponse;
}

uint64_t sub_2341C()
{
  return 0;
}

ValueMetadata *type metadata accessor for Transport.RecommendationBlockResponse.CodingKeys()
{
  return &type metadata for Transport.RecommendationBlockResponse.CodingKeys;
}

uint64_t _s21RecommendationRequestVwxx(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[4]);
  return swift_bridgeObjectRelease(a1[5]);
}

uint64_t _s21RecommendationRequestVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t _s21RecommendationRequestVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  return a1;
}

__n128 _s21RecommendationRequestVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s21RecommendationRequestVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v6 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t _s21RecommendationRequestVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s21RecommendationRequestVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Transport.RecommendationRequest()
{
  return &type metadata for Transport.RecommendationRequest;
}

ValueMetadata *type metadata accessor for Transport.RecommendationRequest.CodingKeys()
{
  return &type metadata for Transport.RecommendationRequest.CodingKeys;
}

uint64_t _s22RecommendationResponseVwxx(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[4]);
  return swift_bridgeObjectRelease(a1[5]);
}

uint64_t *_s22RecommendationResponseVwcp(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  v7 = a2[4];
  v8 = a2[5];
  a1[4] = v7;
  a1[5] = v8;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t *_s22RecommendationResponseVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a1[1];
  v7 = a2[1];
  a1[1] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  v8 = a1[2];
  v9 = a2[2];
  a1[2] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  v10 = a1[3];
  v11 = a2[3];
  a1[3] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  v12 = a1[4];
  v13 = a2[4];
  a1[4] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v12);
  v14 = a1[5];
  v15 = a2[5];
  a1[5] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v14);
  return a1;
}

_QWORD *_s22RecommendationResponseVwta(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(a1[4]);
  v6 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t _s22RecommendationResponseVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s22RecommendationResponseVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Transport.RecommendationResponse()
{
  return &type metadata for Transport.RecommendationResponse;
}

ValueMetadata *type metadata accessor for Transport.RecommendationResponse.CodingKeys()
{
  return &type metadata for Transport.RecommendationResponse.CodingKeys;
}

__n128 _s21BookIdToSeriesIdEntryVwcp(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for Transport.SeedBook()
{
  return &type metadata for Transport.SeedBook;
}

ValueMetadata *type metadata accessor for Transport.SeedBook.CodingKeys()
{
  return &type metadata for Transport.SeedBook.CodingKeys;
}

uint64_t _s15RecommendedItemVwxx(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
}

uint64_t _s15RecommendedItemVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t _s15RecommendedItemVwca(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 16) = a2[2];
  v4 = a2[3];
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_DWORD *)(a1 + 36) = v4;
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_DWORD *)(a1 + 44) = v4;
  v5 = a2[7];
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  return a1;
}

__n128 _s15RecommendedItemVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s15RecommendedItemVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  v4 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for Transport.RecommendedItem()
{
  return &type metadata for Transport.RecommendedItem;
}

uint64_t getEnumTagSinglePayload for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.DeclinedConfiguration.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s22RecommendationResponseV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_23BE0 + 4 * byte_187909[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_23C14 + 4 * byte_187904[v4]))();
}

uint64_t sub_23C14(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C24);
  return result;
}

uint64_t sub_23C30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C38);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_23C3C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C44(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Transport.RecommendedItem.CodingKeys()
{
  return &type metadata for Transport.RecommendedItem.CodingKeys;
}

uint64_t _s13UserProfileV2Vwca(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t _s13UserProfileV2Vwta(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for Transport.UserProfileV2()
{
  return &type metadata for Transport.UserProfileV2;
}

ValueMetadata *type metadata accessor for Transport.UserProfileV2.CodingKeys()
{
  return &type metadata for Transport.UserProfileV2.CodingKeys;
}

uint64_t _s14BookEmbeddingsVwCP(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t _s14BookEmbeddingsVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for Transport.BookEmbeddings()
{
  return &type metadata for Transport.BookEmbeddings;
}

ValueMetadata *type metadata accessor for Transport.BookEmbeddings.CodingKeys()
{
  return &type metadata for Transport.BookEmbeddings.CodingKeys;
}

ValueMetadata *type metadata accessor for Transport.InferredFromInfo()
{
  return &type metadata for Transport.InferredFromInfo;
}

ValueMetadata *type metadata accessor for Transport.InferredFromInfo.CodingKeys()
{
  return &type metadata for Transport.InferredFromInfo.CodingKeys;
}

ValueMetadata *type metadata accessor for Transport.BookAuthors()
{
  return &type metadata for Transport.BookAuthors;
}

ValueMetadata *type metadata accessor for Transport.BookAuthors.CodingKeys()
{
  return &type metadata for Transport.BookAuthors.CodingKeys;
}

_QWORD *_s10BookGenresVwCP(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t _s10BookGenresVwxx(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *_s8MetadataV13GenreTreeNodeVwca(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *_s10BookGenresVwta(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t _s8MetadataV13GenreTreeNodeVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s8MetadataV13GenreTreeNodeVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Transport.BookGenres()
{
  return &type metadata for Transport.BookGenres;
}

ValueMetadata *type metadata accessor for Transport.BookGenres.CodingKeys()
{
  return &type metadata for Transport.BookGenres.CodingKeys;
}

uint64_t _s28BookIdToDeduplicationIdEntryVwxx(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t _s28BookIdToDeduplicationIdEntryVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t _s28BookIdToDeduplicationIdEntryVwca(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 16) = a2[2];
  v4 = a2[3];
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

__n128 _s28BookIdToDeduplicationIdEntryVwtk(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t _s28BookIdToDeduplicationIdEntryVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t _s28BookIdToDeduplicationIdEntryVwet(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s28BookIdToDeduplicationIdEntryVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Transport.BookIdToDeduplicationIdEntry()
{
  return &type metadata for Transport.BookIdToDeduplicationIdEntry;
}

ValueMetadata *type metadata accessor for Transport.BookIdToDeduplicationIdEntry.CodingKeys()
{
  return &type metadata for Transport.BookIdToDeduplicationIdEntry.CodingKeys;
}

uint64_t _s21BookIdToSeriesIdEntryVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t _s21BookIdToSeriesIdEntryVwet(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t _s21BookIdToSeriesIdEntryVwst(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 25) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Transport.BookIdToSeriesIdEntry()
{
  return &type metadata for Transport.BookIdToSeriesIdEntry;
}

uint64_t sub_2416C(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_24174(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for Transport.BookIdToSeriesIdEntry.CodingKeys()
{
  return &type metadata for Transport.BookIdToSeriesIdEntry.CodingKeys;
}

uint64_t _s14BookEmbeddingsVwca_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v3;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = a2[2];
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t _s12BookAffinityVwet_0(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s12BookAffinityVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Transport.BookIdToBisacCodesEntry()
{
  return &type metadata for Transport.BookIdToBisacCodesEntry;
}

ValueMetadata *type metadata accessor for Transport.BookIdToBisacCodesEntry.CodingKeys()
{
  return &type metadata for Transport.BookIdToBisacCodesEntry.CodingKeys;
}

unint64_t _s22BookIdToMediaTypeEntryVwxx(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result >= 3)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t _s22BookIdToMediaTypeEntryVwcp(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  _OWORD *v4;
  unint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = (_OWORD *)(a1 + 16);
  v4 = (_OWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  if (v5 <= 2)
  {
    *v3 = *v4;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)v4;
    *(_QWORD *)(a1 + 24) = v5;
    swift_bridgeObjectRetain(v5);
  }
  return a1;
}

uint64_t _s22BookIdToMediaTypeEntryVwca(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _OWORD *v4;
  _OWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v3;
  v4 = (_OWORD *)(a1 + 16);
  v5 = a2 + 2;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = a2[3];
  if (v6 == 2)
  {
    if (v7 > 2)
      goto LABEL_8;
    goto LABEL_11;
  }
  if (v7 == 2)
  {
    sub_248E8(a1 + 16);
    goto LABEL_11;
  }
  if (v6 >= 2)
  {
    if (v7 >= 2)
    {
      *(_QWORD *)(a1 + 16) = a2[2];
      v10 = a2[3];
      *(_QWORD *)(a1 + 24) = v10;
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRelease(v6);
      return a1;
    }
    sub_2301C(a1 + 16);
    goto LABEL_11;
  }
  if (v7 < 2)
  {
LABEL_11:
    *v4 = *v5;
    return a1;
  }
LABEL_8:
  *(_QWORD *)(a1 + 16) = a2[2];
  v8 = a2[3];
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t _s22BookIdToMediaTypeEntryVwta(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = (_OWORD *)(a1 + 16);
  v4 = (_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a2 + 24);
  if (v5 != 2)
  {
    if (v6 == 2)
    {
      sub_248E8((uint64_t)v3);
    }
    else if (v5 >= 2)
    {
      if (v6 >= 2)
      {
        *(_QWORD *)(a1 + 16) = *v4;
        *(_QWORD *)(a1 + 24) = v6;
        swift_bridgeObjectRelease(v5);
        return a1;
      }
      sub_2301C((uint64_t)v3);
    }
  }
  *v3 = *(_OWORD *)v4;
  return a1;
}

uint64_t _s22BookIdToMediaTypeEntryVwet(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 2;
  if (v4 < 0)
    v4 = -1;
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v6 < 0 != v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t _s22BookIdToMediaTypeEntryVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFC)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 2147483645;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Transport.BookIdToMediaTypeEntry()
{
  return &type metadata for Transport.BookIdToMediaTypeEntry;
}

uint64_t getEnumTagSinglePayload for Methodology(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s11UserProfileV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2463C + 4 * byte_187913[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24670 + 4 * byte_18790E[v4]))();
}

uint64_t sub_24670(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24678(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24680);
  return result;
}

uint64_t sub_2468C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24694);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24698(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_246A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Transport.BookIdToMediaTypeEntry.CodingKeys()
{
  return &type metadata for Transport.BookIdToMediaTypeEntry.CodingKeys;
}

unint64_t _s11MethodologyOwxx(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_246D4(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_246EC(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for Transport.Methodology()
{
  return &type metadata for Transport.Methodology;
}

ValueMetadata *type metadata accessor for Transport.MediaType()
{
  return &type metadata for Transport.MediaType;
}

unint64_t _s24StoreAssetRequestDetailsVwxx(_QWORD *a1)
{
  unint64_t result;

  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  result = a1[3];
  if (result >= 4)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t _s24StoreAssetRequestDetailsVwcp(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2 + 2;
  v6 = a2[3];
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  if (v6 < 4)
  {
    *(_OWORD *)(a1 + 16) = *v5;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)v5;
    *(_QWORD *)(a1 + 24) = v6;
    swift_bridgeObjectRetain(v6);
  }
  return a1;
}

_QWORD *_s24StoreAssetRequestDetailsVwca(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  v6 = a1[1];
  v7 = a2[1];
  a1[1] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  v8 = a1[3];
  v9 = a2[3];
  if (v8 == 3)
  {
    if (v9 >= 4)
      goto LABEL_8;
    goto LABEL_11;
  }
  if (v9 == 3)
  {
    sub_248E8((uint64_t)(a1 + 2));
    goto LABEL_11;
  }
  if (v8 >= 3)
  {
    if (v9 >= 3)
    {
      a1[2] = a2[2];
      v12 = a2[3];
      a1[3] = v12;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRelease(v8);
      return a1;
    }
    sub_2301C((uint64_t)(a1 + 2));
    goto LABEL_11;
  }
  if (v9 < 3)
  {
LABEL_11:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    return a1;
  }
LABEL_8:
  a1[2] = a2[2];
  v10 = a2[3];
  a1[3] = v10;
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t sub_248E8(uint64_t a1)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    swift_bridgeObjectRelease(v2);
  return a1;
}

_QWORD *_s24StoreAssetRequestDetailsVwta(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  v5 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v5);
  v6 = a2 + 2;
  v7 = a1[3];
  v8 = a2[3];
  if (v7 != 3)
  {
    if (v8 == 3)
    {
      sub_248E8((uint64_t)(a1 + 2));
    }
    else if (v7 >= 3)
    {
      if (v8 >= 3)
      {
        a1[2] = *v6;
        a1[3] = v8;
        swift_bridgeObjectRelease(v7);
        return a1;
      }
      sub_2301C((uint64_t)(a1 + 2));
    }
  }
  *((_OWORD *)a1 + 1) = *(_OWORD *)v6;
  return a1;
}

uint64_t _s24StoreAssetRequestDetailsVwet(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s24StoreAssetRequestDetailsVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Transport.StoreAssetRequestDetails()
{
  return &type metadata for Transport.StoreAssetRequestDetails;
}

uint64_t _s26RecommendationBlockRequestV15SaleTypePayloadOwet_0(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 2;
  if (v4 >= 4)
    return v5;
  else
    return 0;
}

uint64_t _s26RecommendationBlockRequestV15SaleTypePayloadOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Transport.StoreAssetRequestDetails.SaleTypePayload()
{
  return &type metadata for Transport.StoreAssetRequestDetails.SaleTypePayload;
}

ValueMetadata *type metadata accessor for Transport.StoreAssetRequestDetails.CodingKeys()
{
  return &type metadata for Transport.StoreAssetRequestDetails.CodingKeys;
}

uint64_t _s26BooksRecommendationRequestVwxx(_QWORD *a1)
{
  unint64_t v2;

  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  v2 = a1[3];
  if (v2 >= 4)
    swift_bridgeObjectRelease(v2);
  return swift_bridgeObjectRelease(a1[4]);
}

uint64_t _s26BooksRecommendationRequestVwcp(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  unint64_t v7;
  uint64_t v8;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2 + 2;
  v7 = a2[3];
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  if (v7 < 4)
  {
    *(_OWORD *)(a1 + 16) = *v6;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)v6;
    *(_QWORD *)(a1 + 24) = v7;
    swift_bridgeObjectRetain(v7);
  }
  v8 = a2[4];
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t *_s26BooksRecommendationRequestVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  v6 = a1[1];
  v7 = a2[1];
  a1[1] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  v8 = a1[3];
  v9 = a2[3];
  if (v8 == 3)
  {
    if (v9 >= 4)
      goto LABEL_8;
    goto LABEL_11;
  }
  if (v9 == 3)
  {
    sub_248E8((uint64_t)(a1 + 2));
    goto LABEL_11;
  }
  if (v8 >= 3)
  {
    if (v9 >= 3)
    {
      a1[2] = a2[2];
      v14 = a2[3];
      a1[3] = v14;
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRelease(v8);
      goto LABEL_12;
    }
    sub_2301C((uint64_t)(a1 + 2));
    goto LABEL_11;
  }
  if (v9 < 3)
  {
LABEL_11:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    goto LABEL_12;
  }
LABEL_8:
  a1[2] = a2[2];
  v10 = a2[3];
  a1[3] = v10;
  swift_bridgeObjectRetain(v10);
LABEL_12:
  v11 = a1[4];
  v12 = a2[4];
  a1[4] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v11);
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  return a1;
}

__n128 _s26BooksRecommendationRequestVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t *_s26BooksRecommendationRequestVwta(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  v5 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v5);
  v6 = a2 + 2;
  v7 = a1[3];
  v8 = a2[3];
  if (v7 != 3)
  {
    if (v8 == 3)
    {
      sub_248E8((uint64_t)(a1 + 2));
    }
    else if (v7 >= 3)
    {
      if (v8 >= 3)
      {
        a1[2] = *v6;
        a1[3] = v8;
        swift_bridgeObjectRelease(v7);
        goto LABEL_8;
      }
      sub_2301C((uint64_t)(a1 + 2));
    }
  }
  *((_OWORD *)a1 + 1) = *(_OWORD *)v6;
LABEL_8:
  v9 = a1[4];
  a1[4] = a2[4];
  swift_bridgeObjectRelease(v9);
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  return a1;
}

uint64_t _s26BooksRecommendationRequestVwet(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 41))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s26BooksRecommendationRequestVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Transport.BooksRecommendationRequest()
{
  return &type metadata for Transport.BooksRecommendationRequest;
}

_BYTE *sub_24EF0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for Transport.BooksRecommendationRequest.CodingKeys()
{
  return &type metadata for Transport.BooksRecommendationRequest.CodingKeys;
}

uint64_t _s28RecommendationBlockRequestV2Vwxx(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;

  swift_bridgeObjectRelease(a1[1]);
  v2 = a1[2];
  if (v2 != 1)
  {
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(a1[3]);
    v3 = a1[5];
    if (v3 >= 4)
      swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(a1[6]);
  }
  return swift_bridgeObjectRelease(a1[8]);
}

uint64_t _s28RecommendationBlockRequestV2Vwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  _OWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = (_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain(v4);
  if (v6 == 1)
  {
    v7 = v5[1];
    *(_OWORD *)(a1 + 16) = *v5;
    *(_OWORD *)(a1 + 32) = v7;
    *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)v5 + 25);
  }
  else
  {
    v8 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v8;
    v9 = (_OWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v8);
    if (v10 < 4)
    {
      *(_OWORD *)(a1 + 32) = *v9;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)v9;
      *(_QWORD *)(a1 + 40) = v10;
      swift_bridgeObjectRetain(v10);
    }
    v11 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v11;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    swift_bridgeObjectRetain(v11);
  }
  v12 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t _s28RecommendationBlockRequestV2Vwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = (_OWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  v9 = (_OWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 16);
  if (v7 != 1)
  {
    if (v8 == 1)
    {
      sub_25264((_QWORD *)(a1 + 16));
      v12 = *(_OWORD *)(a2 + 41);
      v13 = *(_OWORD *)(a2 + 32);
      *v6 = *v9;
      *(_OWORD *)(a1 + 32) = v13;
      *(_OWORD *)(a1 + 41) = v12;
      goto LABEL_22;
    }
    *(_QWORD *)(a1 + 16) = v8;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRelease(v7);
    v17 = *(_QWORD *)(a1 + 24);
    v18 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v18;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRelease(v17);
    v19 = *(_QWORD *)(a1 + 40);
    v20 = *(_QWORD *)(a2 + 40);
    if (v19 == 3)
    {
      if (v20 >= 4)
        goto LABEL_17;
    }
    else if (v20 == 3)
    {
      sub_248E8(a1 + 32);
    }
    else if (v19 >= 3)
    {
      if (v20 >= 3)
      {
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        v28 = *(_QWORD *)(a2 + 40);
        *(_QWORD *)(a1 + 40) = v28;
        swift_bridgeObjectRetain(v28);
        swift_bridgeObjectRelease(v19);
        goto LABEL_21;
      }
      sub_2301C(a1 + 32);
    }
    else if (v20 >= 3)
    {
LABEL_17:
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v21 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 40) = v21;
      swift_bridgeObjectRetain(v21);
LABEL_21:
      v23 = *(_QWORD *)(a1 + 48);
      v24 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 48) = v24;
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRelease(v23);
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      goto LABEL_22;
    }
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_21;
  }
  if (v8 == 1)
  {
    v10 = *v9;
    v11 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
    *v6 = v10;
    *(_OWORD *)(a1 + 32) = v11;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = v8;
    v14 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v14;
    v15 = *(_QWORD *)(a2 + 40);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v14);
    if (v15 < 4)
    {
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    }
    else
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v22 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 40) = v22;
      swift_bridgeObjectRetain(v22);
    }
    v16 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v16;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    swift_bridgeObjectRetain(v16);
  }
LABEL_22:
  v25 = *(_QWORD *)(a2 + 64);
  v26 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  return a1;
}

_QWORD *sub_25264(_QWORD *a1)
{
  _s26BooksRecommendationRequestVwxx(a1);
  return a1;
}

__n128 _s28RecommendationBlockRequestV2Vwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _s28RecommendationBlockRequestV2Vwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 16);
  if (v5 == 1)
    goto LABEL_4;
  if (v6 != 1)
  {
    *(_QWORD *)(a1 + 16) = v6;
    swift_bridgeObjectRelease(v5);
    v8 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRelease(v8);
    v9 = (_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a1 + 40);
    v11 = *(_QWORD *)(a2 + 40);
    if (v10 != 3)
    {
      if (v11 == 3)
      {
        sub_248E8(a1 + 32);
      }
      else if (v10 >= 3)
      {
        if (v11 >= 3)
        {
          *(_QWORD *)(a1 + 32) = *v9;
          *(_QWORD *)(a1 + 40) = v11;
          swift_bridgeObjectRelease(v10);
          goto LABEL_12;
        }
        sub_2301C(a1 + 32);
      }
    }
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v9;
LABEL_12:
    v12 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    swift_bridgeObjectRelease(v12);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    goto LABEL_13;
  }
  sub_25264((_QWORD *)(a1 + 16));
LABEL_4:
  v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
LABEL_13:
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease(v13);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  return a1;
}

uint64_t _s28RecommendationBlockRequestV2Vwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 76))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s28RecommendationBlockRequestV2Vwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 72) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 76) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 76) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Transport.RecommendationBlockRequestV2()
{
  return &type metadata for Transport.RecommendationBlockRequestV2;
}

ValueMetadata *type metadata accessor for Transport.RecommendationBlockRequestV2.CodingKeys()
{
  return &type metadata for Transport.RecommendationBlockRequestV2.CodingKeys;
}

ValueMetadata *type metadata accessor for Transport.RecommendationBlockResponseV2()
{
  return &type metadata for Transport.RecommendationBlockResponseV2;
}

ValueMetadata *type metadata accessor for Transport.RecommendationBlockResponseV2.CodingKeys()
{
  return &type metadata for Transport.RecommendationBlockResponseV2.CodingKeys;
}

uint64_t _s23RecommendationRequestV2Vwxx(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  return swift_bridgeObjectRelease(a1[3]);
}

_QWORD *_s23RecommendationRequestV2Vwcp(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  v5 = a2[3];
  a1[2] = v4;
  a1[3] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *_s23RecommendationRequestV2Vwca(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a1[3];
  v9 = a2[3];
  a1[3] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  return a1;
}

_QWORD *_s23RecommendationRequestV2Vwta(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  v5 = a1[3];
  a1[3] = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t _s23RecommendationRequestV2Vwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s23RecommendationRequestV2Vwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Transport.RecommendationRequestV2()
{
  return &type metadata for Transport.RecommendationRequestV2;
}

uint64_t getEnumTagSinglePayload for PositiveAffinitySource.PositiveStarRating(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s12BookAffinityV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2577C + 4 * byte_18791D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_257B0 + 4 * byte_187918[v4]))();
}

uint64_t sub_257B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_257B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x257C0);
  return result;
}

uint64_t sub_257CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x257D4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_257D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_257E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Transport.RecommendationRequestV2.CodingKeys()
{
  return &type metadata for Transport.RecommendationRequestV2.CodingKeys;
}

uint64_t _s24RecommendationResponseV2Vwxx(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[6]);
  return swift_bridgeObjectRelease(a1[7]);
}

uint64_t *_s24RecommendationResponseV2Vwcp(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  v7 = a2[4];
  v8 = a2[5];
  a1[4] = v7;
  a1[5] = v8;
  v9 = a2[6];
  v10 = a2[7];
  a1[6] = v9;
  a1[7] = v10;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t *_s24RecommendationResponseV2Vwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a1[1];
  v7 = a2[1];
  a1[1] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  v8 = a1[2];
  v9 = a2[2];
  a1[2] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  v10 = a1[3];
  v11 = a2[3];
  a1[3] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  v12 = a1[4];
  v13 = a2[4];
  a1[4] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v12);
  v14 = a1[5];
  v15 = a2[5];
  a1[5] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v14);
  v16 = a1[6];
  v17 = a2[6];
  a1[6] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v16);
  v18 = a1[7];
  v19 = a2[7];
  a1[7] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v18);
  return a1;
}

_QWORD *_s24RecommendationResponseV2Vwta(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(a1[4]);
  v6 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(a1[6]);
  v7 = a1[7];
  *((_OWORD *)a1 + 3) = a2[3];
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t _s24RecommendationResponseV2Vwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s24RecommendationResponseV2Vwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Transport.RecommendationResponseV2()
{
  return &type metadata for Transport.RecommendationResponseV2;
}

uint64_t _s24RecommendationResponseV2V10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s24RecommendationResponseV2V10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_25BDC + 4 * byte_187927[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_25C10 + 4 * byte_187922[v4]))();
}

uint64_t sub_25C10(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_25C18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x25C20);
  return result;
}

uint64_t sub_25C2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x25C34);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_25C38(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_25C40(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Transport.RecommendationResponseV2.CodingKeys()
{
  return &type metadata for Transport.RecommendationResponseV2.CodingKeys;
}

ValueMetadata *type metadata accessor for Transport.MetadataRequest()
{
  return &type metadata for Transport.MetadataRequest;
}

ValueMetadata *type metadata accessor for Transport.MetadataRequest.CodingKeys()
{
  return &type metadata for Transport.MetadataRequest.CodingKeys;
}

uint64_t *_s16MetadataResponseVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t _s16MetadataResponseVwxx(_QWORD *a1)
{
  return swift_bridgeObjectRelease(*a1);
}

uint64_t *_s16MetadataResponseVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t *_s16MetadataResponseVwta(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t _s27RecommendationBlockResponseVwet_0(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s27RecommendationBlockResponseVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Transport.MetadataResponse()
{
  return &type metadata for Transport.MetadataResponse;
}

uint64_t getEnumTagSinglePayload for RecommendationSource(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s27RecommendationBlockResponseV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_25E64 + 4 * byte_18792C[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_25E84 + 4 * byte_187931[v4]))();
}

_BYTE *sub_25E64(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_25E84(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_25E8C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_25E94(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_25E9C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_25EA4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Transport.MetadataResponse.CodingKeys()
{
  return &type metadata for Transport.MetadataResponse.CodingKeys;
}

uint64_t _s21BookIdToMetadataEntryVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
}

uint64_t _s21BookIdToMetadataEntryVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t _s21BookIdToMetadataEntryVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t _s21BookIdToMetadataEntryVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t _s21BookIdToMetadataEntryVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s21BookIdToMetadataEntryVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Transport.BookIdToMetadataEntry()
{
  return &type metadata for Transport.BookIdToMetadataEntry;
}

ValueMetadata *type metadata accessor for Transport.BookIdToMetadataEntry.CodingKeys()
{
  return &type metadata for Transport.BookIdToMetadataEntry.CodingKeys;
}

uint64_t _s9DiagnosisVwxx(_QWORD *a1)
{
  unint64_t v2;
  unint64_t v3;

  v2 = a1[1];
  if (v2 >= 2)
    swift_bridgeObjectRelease(v2);
  v3 = a1[3];
  if (v3 >= 4)
    swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(a1[5]);
  return swift_bridgeObjectRelease(a1[7]);
}

_QWORD *_s9DiagnosisVwcp(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  if (v4 >= 2)
  {
    *a1 = *a2;
    a1[1] = v4;
    swift_bridgeObjectRetain(v4);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v5 = a2 + 2;
  v6 = a2[3];
  if (v6 >= 4)
  {
    a1[2] = *v5;
    a1[3] = v6;
    swift_bridgeObjectRetain(v6);
  }
  else
  {
    *((_OWORD *)a1 + 1) = *(_OWORD *)v5;
  }
  v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  v8 = a2[6];
  v9 = a2[7];
  a1[6] = v8;
  a1[7] = v9;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  return a1;
}

_QWORD *_s9DiagnosisVwca(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a1[1];
  v5 = a2[1];
  if (v4 < 2)
  {
    if (v5 >= 2)
    {
      *a1 = *a2;
      v6 = a2[1];
      a1[1] = v6;
      swift_bridgeObjectRetain(v6);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v5 < 2)
  {
    sub_2301C((uint64_t)a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  *a1 = *a2;
  v7 = a2[1];
  a1[1] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v4);
LABEL_8:
  v8 = a1[3];
  v9 = a2[3];
  if (v8 >= 4)
  {
    if (v9 >= 4)
    {
      a1[2] = a2[2];
      v11 = a2[3];
      a1[3] = v11;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRelease(v8);
      goto LABEL_15;
    }
    sub_2301C((uint64_t)(a1 + 2));
    goto LABEL_13;
  }
  if (v9 < 4)
  {
LABEL_13:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    goto LABEL_15;
  }
  a1[2] = a2[2];
  v10 = a2[3];
  a1[3] = v10;
  swift_bridgeObjectRetain(v10);
LABEL_15:
  a1[4] = a2[4];
  v12 = a2[5];
  v13 = a1[5];
  a1[5] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[6] = a2[6];
  v14 = a2[7];
  v15 = a1[7];
  a1[7] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t _s9DiagnosisVwta(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 < 2)
    goto LABEL_4;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 < 2)
  {
    sub_2301C(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
LABEL_6:
  v6 = (_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  if (v7 >= 4)
  {
    v8 = *(_QWORD *)(a2 + 24);
    if (v8 >= 4)
    {
      *(_QWORD *)(a1 + 16) = *v6;
      *(_QWORD *)(a1 + 24) = v8;
      swift_bridgeObjectRelease(v7);
      goto LABEL_11;
    }
    sub_2301C(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v6;
LABEL_11:
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v9;
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v11;
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t _s15RecommendedItemVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_263E8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Transport.Diagnosis()
{
  return &type metadata for Transport.Diagnosis;
}

uint64_t _s26RecommendationBlockRequestV16MediaTypePayloadOwet_0(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t _s26RecommendationBlockRequestV16MediaTypePayloadOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for Transport.Diagnosis.TypePayload()
{
  return &type metadata for Transport.Diagnosis.TypePayload;
}

uint64_t _s26RecommendationBlockRequestV16MediaTypePayloadOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain(v3);
  }
  return a1;
}

_QWORD *_s26RecommendationBlockRequestV16MediaTypePayloadOwca_0(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[1];
  v5 = a2[1];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_7;
  }
  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t _s26RecommendationBlockRequestV16MediaTypePayloadOwta_0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 < 0xFFFFFFFF)
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t _s9DiagnosisV11CodePayloadOwet(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFC && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483644);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 3;
  if (v4 >= 5)
    return v5;
  else
    return 0;
}

uint64_t _s9DiagnosisV11CodePayloadOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for Transport.Diagnosis.CodePayload()
{
  return &type metadata for Transport.Diagnosis.CodePayload;
}

uint64_t getEnumTagSinglePayload for AccessRequirementUnsatisfiedReason(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s21RecommendationRequestV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_267EC + 4 * byte_18793B[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_26820 + 4 * byte_187936[v4]))();
}

uint64_t sub_26820(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_26828(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x26830);
  return result;
}

uint64_t sub_2683C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x26844);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_26848(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_26850(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Transport.Diagnosis.CodingKeys()
{
  return &type metadata for Transport.Diagnosis.CodingKeys;
}

unint64_t sub_2686C()
{
  unint64_t result;

  result = qword_1F0D58;
  if (!qword_1F0D58)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.Diagnosis.CodePayload, &type metadata for Transport.Diagnosis.CodePayload);
    atomic_store(result, (unint64_t *)&qword_1F0D58);
  }
  return result;
}

unint64_t sub_268B0()
{
  unint64_t result;

  result = qword_1F0D60;
  if (!qword_1F0D60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.Diagnosis.TypePayload, &type metadata for Transport.Diagnosis.TypePayload);
    atomic_store(result, (unint64_t *)&qword_1F0D60);
  }
  return result;
}

unint64_t sub_268F4()
{
  unint64_t result;

  result = qword_1F0D68;
  if (!qword_1F0D68)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.StoreAssetRequestDetails.SaleTypePayload, &type metadata for Transport.StoreAssetRequestDetails.SaleTypePayload);
    atomic_store(result, (unint64_t *)&qword_1F0D68);
  }
  return result;
}

unint64_t sub_26938()
{
  unint64_t result;

  result = qword_1F0D70;
  if (!qword_1F0D70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.MediaType, &type metadata for Transport.MediaType);
    atomic_store(result, (unint64_t *)&qword_1F0D70);
  }
  return result;
}

unint64_t sub_2697C()
{
  unint64_t result;

  result = qword_1F0D78;
  if (!qword_1F0D78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.Methodology, &type metadata for Transport.Methodology);
    atomic_store(result, (unint64_t *)&qword_1F0D78);
  }
  return result;
}

unint64_t sub_269C0()
{
  unint64_t result;

  result = qword_1F0D80;
  if (!qword_1F0D80)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockRequest.SaleTypePayload, &type metadata for Transport.RecommendationBlockRequest.SaleTypePayload);
    atomic_store(result, (unint64_t *)&qword_1F0D80);
  }
  return result;
}

unint64_t sub_26A04()
{
  unint64_t result;

  result = qword_1F0D88;
  if (!qword_1F0D88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationBlockRequest.MediaTypePayload, &type metadata for Transport.RecommendationBlockRequest.MediaTypePayload);
    atomic_store(result, (unint64_t *)&qword_1F0D88);
  }
  return result;
}

uint64_t sub_26A48(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 2)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t sub_26A5C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_26AA0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

_QWORD *sub_26BA8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v4 = a1[3];
  v5 = a1[4];
  sub_49F4(a1, v4);
  v6 = sub_5EDC(&qword_1F0E40);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v15, v6, v6, v4, v5);
  if (v16)
  {
    v8 = a1[3];
    v9 = a1[4];
    sub_49F4(a1, v8);
    v10 = sub_5EDC(&qword_1F0E48);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(&v13, v10, v10, v8, v9);
    if (v14)
    {
      v11 = type metadata accessor for SeedBookAuthorRecommendationService();
      v12 = swift_allocObject(v11, 96, 7);
      sub_26DB8(&v15, v12 + 16);
      result = (_QWORD *)sub_26DB8(&v13, v12 + 56);
      a2[3] = v11;
      a2[4] = (uint64_t)&off_1E6078;
      *a2 = v12;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t StringOperationFlattener.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for AuthorRecommendationServiceAssembly()
{
  return objc_opt_self(_TtC20BooksPersonalization35AuthorRecommendationServiceAssembly);
}

uint64_t sub_26CD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v0 = type metadata accessor for Scope(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = ProxyContainer.public.getter(v2);
  v6 = sub_5EDC(&qword_1F0E38);
  v7 = RegistrationContainer.register<A>(_:name:factory:)(v6, 0, 0, sub_26BA8, 0, v6);
  swift_release(v5);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, enum case for Scope.singleton(_:), v0);
  v8 = Definition.inScope(_:)(v4);
  swift_release(v8);
  swift_release(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_26DB8(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t dispatch thunk of ExperimentIDsHeaderValueProviderType.provideExperimentIDs()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v5 = *(int **)(a2 + 8);
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)v5 + *v5);
  v6 = (_QWORD *)swift_task_alloc(v5[1]);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_26E3C;
  return v8(a1, a2);
}

uint64_t sub_26E3C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc(*(_QWORD *)(*v2 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t CommonCurrency.Header.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(a1, v6, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int CommonCurrency.Header.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  v2 = v0[1];
  v4 = v0[2];
  v3 = v0[3];
  Hasher.init(_seed:)(v6, 0);
  String.hash(into:)(v6, v1, v2);
  String.hash(into:)(v6, v4, v3);
  return Hasher._finalize()();
}

uint64_t sub_26F74(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  String.hash(into:)(a1, v3, v4);
  return String.hash(into:)(a1, v6, v5);
}

Swift::Int sub_26FB0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  v3 = v1[1];
  v5 = v1[2];
  v4 = v1[3];
  Hasher.init(_seed:)(v7, a1);
  String.hash(into:)(v7, v2, v3);
  String.hash(into:)(v7, v5, v4);
  return Hasher._finalize()();
}

uint64_t static CommonCurrency.Headers.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_C1AC(*a1, *a2);
}

void CommonCurrency.Headers.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *v1;
  Hasher._combine(_:)(*(_QWORD *)(*v1 + 16));
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain(v3);
    v5 = (uint64_t *)(v3 + 56);
    do
    {
      v6 = *(v5 - 3);
      v7 = *(v5 - 2);
      v8 = *(v5 - 1);
      v9 = *v5;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v9);
      String.hash(into:)(a1, v6, v7);
      String.hash(into:)(a1, v8, v9);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v7);
      v5 += 4;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease(v3);
  }
}

Swift::Int CommonCurrency.Headers.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[9];

  v1 = *v0;
  Hasher.init(_seed:)(v9, 0);
  Hasher._combine(_:)(*(_QWORD *)(v1 + 16));
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = (uint64_t *)(v1 + 56);
    do
    {
      v4 = *(v3 - 3);
      v5 = *(v3 - 2);
      v6 = *(v3 - 1);
      v7 = *v3;
      swift_bridgeObjectRetain(v5);
      swift_bridgeObjectRetain(v7);
      String.hash(into:)(v9, v4, v5);
      String.hash(into:)(v9, v6, v7);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v5);
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  return Hasher._finalize()();
}

void sub_2719C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  Swift::UInt v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 56);
    do
    {
      v6 = *(v5 - 3);
      v7 = *(v5 - 2);
      v8 = *(v5 - 1);
      v9 = *v5;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v9);
      String.hash(into:)(a1, v6, v7);
      String.hash(into:)(a1, v8, v9);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v7);
      v5 += 4;
      --v4;
    }
    while (v4);
  }
}

Swift::Int sub_27240(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  Swift::UInt v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[9];

  v2 = *v1;
  Hasher.init(_seed:)(v10, a1);
  v3 = *(_QWORD *)(v2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = (uint64_t *)(v2 + 56);
    do
    {
      v5 = *(v4 - 3);
      v6 = *(v4 - 2);
      v7 = *(v4 - 1);
      v8 = *v4;
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRetain(v8);
      String.hash(into:)(v10, v5, v6);
      String.hash(into:)(v10, v7, v8);
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v6);
      v4 += 4;
      --v3;
    }
    while (v3);
  }
  return Hasher._finalize()();
}

_QWORD *sub_272F4(uint64_t a1)
{
  int64_t v1;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  char v10;
  void *v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v20;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_340F4(0, v1, 0);
    v3 = (void **)(a1 + 56);
    do
    {
      v4 = (uint64_t)*(v3 - 3);
      v5 = (uint64_t)*(v3 - 2);
      v6 = *v3;
      v20 = (uint64_t)*(v3 - 1);
      v7 = qword_1F0090;
      swift_bridgeObjectRetain(v5);
      swift_bridgeObjectRetain(v6);
      if (v7 != -1)
        swift_once(&qword_1F0090, sub_28310);
      v8 = qword_1F0E58;
      v9 = String.lowercased()();
      swift_bridgeObjectRetain(v8);
      v10 = sub_2861C(v9._countAndFlagsBits, (uint64_t)v9._object, v8);
      swift_bridgeObjectRelease(v9._object);
      swift_bridgeObjectRelease(v8);
      if ((v10 & 1) != 0)
      {
        v11 = (void *)0xEA00000000003E64;
        v12 = 0x657463616465723CLL;
      }
      else
      {
        swift_bridgeObjectRetain(v6);
        v11 = v6;
        v12 = v20;
      }
      swift_bridgeObjectRetain(v5);
      v13._countAndFlagsBits = 8250;
      v13._object = (void *)0xE200000000000000;
      String.append(_:)(v13);
      v14._countAndFlagsBits = v12;
      v14._object = v11;
      String.append(_:)(v14);
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(v5);
      swift_bridgeObjectRelease(v11);
      v15 = v5;
      v17 = _swiftEmptyArrayStorage[2];
      v16 = _swiftEmptyArrayStorage[3];
      if (v17 >= v16 >> 1)
        sub_340F4(v16 > 1, v17 + 1, 1);
      v3 += 4;
      _swiftEmptyArrayStorage[2] = v17 + 1;
      v18 = (char *)&_swiftEmptyArrayStorage[2 * v17];
      *((_QWORD *)v18 + 4) = v4;
      *((_QWORD *)v18 + 5) = v15;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_274C8(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE v8[40];
  _QWORD *v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v9 = _swiftEmptyArrayStorage;
    sub_34158(0, v1, 0);
    v2 = _swiftEmptyArrayStorage;
    v4 = a1 + 32;
    do
    {
      sub_418BC(v4, (uint64_t)v8, &qword_1F0E70);
      v9 = v2;
      v6 = v2[2];
      v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        sub_34158(v5 > 1, v6 + 1, 1);
        v2 = v9;
      }
      v2[2] = v6 + 1;
      sub_41300((uint64_t)v8, (uint64_t)&v2[5 * v6 + 4], &qword_1F0E70);
      v4 += 40;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_275B8(void (*a1)(_OWORD *__return_ptr, _QWORD *, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v27;
  _QWORD v28[2];
  _OWORD v29[3];
  uint64_t v30;
  _QWORD *v31;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = _swiftEmptyArrayStorage;
  if (!v5)
    return (uint64_t)v6;
  v7 = a3;
  v31 = _swiftEmptyArrayStorage;
  sub_341AC(0, v5, 0);
  v6 = _swiftEmptyArrayStorage;
  result = sub_EDD8C(v7);
  v9 = result;
  v11 = v10;
  v13 = v12 & 1;
  v25 = v7 + 56;
  while ((v9 & 0x8000000000000000) == 0 && v9 < 1 << *(_BYTE *)(v7 + 32))
  {
    if (((*(_QWORD *)(v25 + (((unint64_t)v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
      goto LABEL_15;
    if (*(_DWORD *)(v7 + 36) != (_DWORD)v11)
      goto LABEL_16;
    v14 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v9);
    v15 = v14[1];
    v28[0] = *v14;
    v28[1] = v15;
    swift_bridgeObjectRetain(v15);
    a1(v29, v28, &v27);
    if (v4)
    {
      swift_release(v6);
      swift_bridgeObjectRelease(v15);
      return (uint64_t)v6;
    }
    v16 = v7;
    swift_bridgeObjectRelease(v15);
    v31 = v6;
    v18 = v6[2];
    v17 = v6[3];
    if (v18 >= v17 >> 1)
    {
      sub_341AC(v17 > 1, v18 + 1, 1);
      v6 = v31;
    }
    v6[2] = v18 + 1;
    v19 = &v6[7 * v18];
    v20 = v29[0];
    v21 = v29[1];
    v22 = v29[2];
    v19[10] = v30;
    *((_OWORD *)v19 + 3) = v21;
    *((_OWORD *)v19 + 4) = v22;
    *((_OWORD *)v19 + 2) = v20;
    v7 = v16;
    result = sub_EDE30(v9, v11, v13 & 1, v16);
    v9 = result;
    v11 = v23;
    v13 = v24 & 1;
    --v5;
    v4 = 0;
    if (!v5)
    {
      sub_41814(result, v23, v24 & 1);
      return (uint64_t)v6;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

_QWORD *sub_27798(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  _QWORD *i;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    v34 = _swiftEmptyArrayStorage;
    sub_34264(0, v5, 0);
    v6 = _swiftEmptyArrayStorage;
    for (i = (_QWORD *)(a3 + 104); ; i += 10)
    {
      v9 = *((_BYTE *)i - 64);
      v10 = *(i - 7);
      v11 = *((_BYTE *)i - 48);
      v12 = *(i - 5);
      v13 = *((_BYTE *)i - 32);
      v15 = *(i - 3);
      v14 = *(i - 2);
      v16 = *(i - 1);
      v17 = *i;
      v23 = *(i - 9);
      v24 = v9;
      v25 = v10;
      v26 = v11;
      v27 = v12;
      v28 = v13;
      v29 = v15;
      v30 = v14;
      v31 = v16;
      v32 = v17;
      sub_40554(v12, v13);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v15);
      a1(&v33, &v23);
      if (v4)
        break;
      v4 = 0;
      sub_40568(v12, v13);
      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease(v15);
      v18 = v33;
      v34 = v6;
      v20 = v6[2];
      v19 = v6[3];
      if (v20 >= v19 >> 1)
      {
        sub_34264(v19 > 1, v20 + 1, 1);
        v6 = v34;
      }
      v6[2] = v20 + 1;
      v6[v20 + 4] = v18;
      if (!--v5)
        return v6;
    }
    sub_40568(v12, v13);
    swift_release(v6);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v15);
  }
  return v6;
}

_QWORD *sub_2793C(void (*a1)(_QWORD *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t *v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  __int128 v25;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  int v37;
  __int128 v38;
  _QWORD *v39;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    v39 = _swiftEmptyArrayStorage;
    sub_3421C(0, v5, 0);
    v6 = _swiftEmptyArrayStorage;
    v8 = (uint64_t *)(a3 + 48);
    while (1)
    {
      v9 = *((_BYTE *)v8 - 8);
      v10 = *v8;
      v11 = *((_BYTE *)v8 + 8);
      v12 = v8[2];
      v13 = *((_BYTE *)v8 + 24);
      v15 = v8[4];
      v14 = v8[5];
      v16 = v8[6];
      v27 = *(v8 - 2);
      v28 = v9;
      v29 = v10;
      v30 = v11;
      v31 = v12;
      v32 = v13;
      v33 = v15;
      v34 = v14;
      v35 = v16;
      sub_40554(v12, v13);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v15);
      a1(v36, &v27);
      if (v4)
        break;
      sub_40568(v12, v13);
      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease(v15);
      v17 = v36[0];
      v18 = v36[1];
      v19 = v37;
      v20 = v38;
      v39 = v6;
      v22 = v6[2];
      v21 = v6[3];
      if (v22 >= v21 >> 1)
      {
        v25 = v38;
        sub_3421C(v21 > 1, v22 + 1, 1);
        v20 = v25;
        v6 = v39;
      }
      v6[2] = v22 + 1;
      v23 = &v6[5 * v22];
      v23[4] = v17;
      v23[5] = v18;
      *((_DWORD *)v23 + 12) = v19;
      *(_OWORD *)(v23 + 7) = v20;
      v8 += 9;
      --v5;
      v4 = 0;
      if (!v5)
        return v6;
    }
    sub_40568(v12, v13);
    swift_release(v6);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v15);
  }
  return v6;
}

_QWORD *sub_27AF0(void (*a1)(__int128 *__return_ptr, char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  char *v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  char v14;
  __int128 v15[2];
  _QWORD *v16;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    v16 = _swiftEmptyArrayStorage;
    sub_345E0(0, v5, 0);
    v6 = _swiftEmptyArrayStorage;
    v9 = (char *)(a3 + 32);
    while (1)
    {
      v10 = *v9++;
      v14 = v10;
      a1(v15, &v14);
      if (v4)
        break;
      v4 = 0;
      v16 = v6;
      v12 = v6[2];
      v11 = v6[3];
      if (v12 >= v11 >> 1)
      {
        sub_345E0(v11 > 1, v12 + 1, 1);
        v6 = v16;
      }
      v6[2] = v12 + 1;
      sub_26DB8(v15, (uint64_t)&v6[5 * v12 + 4]);
      if (!--v5)
        return v6;
    }
    swift_release(v6);
  }
  return v6;
}

uint64_t sub_27C00(uint64_t a1)
{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17[2];
  uint64_t v18;

  result = Set.init(minimumCapacity:)(*(_QWORD *)(a1 + 16), &type metadata for String, &protocol witness table for String);
  v3 = 0;
  v18 = result;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      v3 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_23;
      v15 = *(_QWORD *)(v4 + 8 * v3);
      if (!v15)
      {
        v3 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_23;
        v15 = *(_QWORD *)(v4 + 8 * v3);
        if (!v15)
        {
          v3 = v14 + 3;
          if (v14 + 3 >= v8)
            goto LABEL_23;
          v15 = *(_QWORD *)(v4 + 8 * v3);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain(v13);
    sub_1625CC(v17, v12, v13);
    result = swift_bridgeObjectRelease(v17[1]);
  }
  v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release(a1);
    return v18;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v3);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_27D98(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  char v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_41278();
  result = Set.init(minimumCapacity:)(v2, &type metadata for Book.MediaType, v3);
  v5 = 0;
  v17 = result;
  v6 = a1 + 64;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a1 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }
    v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v10)
      goto LABEL_23;
    v14 = *(_QWORD *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      v5 = v13 + 1;
      if (v13 + 1 >= v10)
        goto LABEL_23;
      v14 = *(_QWORD *)(v6 + 8 * v5);
      if (!v14)
      {
        v5 = v13 + 2;
        if (v13 + 2 >= v10)
          goto LABEL_23;
        v14 = *(_QWORD *)(v6 + 8 * v5);
        if (!v14)
        {
          v5 = v13 + 3;
          if (v13 + 3 >= v10)
            goto LABEL_23;
          v14 = *(_QWORD *)(v6 + 8 * v5);
          if (!v14)
            break;
        }
      }
    }
LABEL_22:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_5:
    result = sub_162BC4(&v16, *(_BYTE *)(*(_QWORD *)(a1 + 48) + v12));
  }
  v15 = v13 + 4;
  if (v15 >= v10)
  {
LABEL_23:
    swift_release(a1);
    return v17;
  }
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
    v5 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v10)
      goto LABEL_23;
    v14 = *(_QWORD *)(v6 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_27F0C(uint64_t a1)
{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = Set.init(minimumCapacity:)(*(_QWORD *)(a1 + 16), &type metadata for UInt64, &protocol witness table for UInt64);
  v3 = 0;
  v15 = result;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_23;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_23;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
        {
          v3 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_23;
          v12 = *(_QWORD *)(v4 + 8 * v3);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    result = sub_1628D4(&v14, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10));
  }
  v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release(a1);
    return v15;
  }
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

_QWORD *sub_2807C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *result;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  _BYTE v17[552];
  _QWORD v18[69];
  _QWORD *v19;
  _QWORD __dst[69];

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_41234();
  result = (_QWORD *)Set.init(minimumCapacity:)(v2, &type metadata for SeedBook, v3);
  v5 = 0;
  v7 = a1 + 64;
  v6 = *(_QWORD *)(a1 + 64);
  v19 = result;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v6;
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v5 << 6);
      goto LABEL_5;
    }
    v14 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v11)
      goto LABEL_23;
    v15 = *(_QWORD *)(v7 + 8 * v14);
    ++v5;
    if (!v15)
    {
      v5 = v14 + 1;
      if (v14 + 1 >= v11)
        goto LABEL_23;
      v15 = *(_QWORD *)(v7 + 8 * v5);
      if (!v15)
      {
        v5 = v14 + 2;
        if (v14 + 2 >= v11)
          goto LABEL_23;
        v15 = *(_QWORD *)(v7 + 8 * v5);
        if (!v15)
        {
          v5 = v14 + 3;
          if (v14 + 3 >= v11)
            goto LABEL_23;
          v15 = *(_QWORD *)(v7 + 8 * v5);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v10 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v5 << 6);
LABEL_5:
    memcpy(__dst, (const void *)(*(_QWORD *)(a1 + 56) + 552 * v13), 0x221uLL);
    sub_6100(__dst);
    sub_1629CC(v17, __dst);
    memcpy(v18, v17, 0x221uLL);
    result = sub_6228(v18);
  }
  v16 = v14 + 4;
  if (v16 >= v11)
  {
LABEL_23:
    swift_release(a1);
    return v19;
  }
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
  {
    v5 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v5 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v5 >= v11)
      goto LABEL_23;
    v15 = *(_QWORD *)(v7 + 8 * v5);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t static CommonCurrency.redactedHeaderNames.getter()
{
  if (qword_1F0090 != -1)
    swift_once(&qword_1F0090, sub_28310);
  return swift_bridgeObjectRetain(qword_1F0E58);
}

uint64_t (*static CommonCurrency.redactedHeaderNames.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v2;

  if (qword_1F0090 != -1)
    swift_once(&qword_1F0090, sub_28310);
  v2 = qword_1F0E58;
  *a1 = qword_1F0E58;
  swift_bridgeObjectRetain(v2);
  return sub_282D0;
}

uint64_t sub_282D0(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if ((a2 & 1) == 0)
    return _s20BooksPersonalization14CommonCurrencyO19redactedHeaderNamesShySSGvsZ_0(*a1);
  v3 = swift_bridgeObjectRetain(*a1);
  _s20BooksPersonalization14CommonCurrencyO19redactedHeaderNamesShySSGvsZ_0(v3);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_28310()
{
  Swift::Int v0;
  uint64_t result;

  v0 = sub_897F8((uint64_t)&off_1D7720);
  result = swift_arrayDestroy(&unk_1D7740, 3, &type metadata for String);
  qword_1F0E58 = v0;
  return result;
}

uint64_t CommonCurrency.Header.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  char v7;
  Swift::String v8;
  Swift::String v9;

  v1 = *v0;
  v2 = v0[1];
  v4 = v0[2];
  v3 = (void *)v0[3];
  if (qword_1F0090 != -1)
    swift_once(&qword_1F0090, sub_28310);
  v5 = qword_1F0E58;
  v6 = String.lowercased()();
  swift_bridgeObjectRetain(v5);
  v7 = sub_2861C(v6._countAndFlagsBits, (uint64_t)v6._object, v5);
  swift_bridgeObjectRelease(v6._object);
  swift_bridgeObjectRelease(v5);
  if ((v7 & 1) != 0)
  {
    v3 = (void *)0xEA00000000003E64;
    v4 = 0x657463616465723CLL;
  }
  else
  {
    swift_bridgeObjectRetain(v3);
  }
  swift_bridgeObjectRetain(v2);
  v8._countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = v4;
  v9._object = v3;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v3);
  return v1;
}

BOOL sub_28468(unsigned __int8 a1, uint64_t a2)
{
  Swift::UInt v3;
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  int v12;
  _QWORD v13[9];

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v3 = a1;
  Hasher.init(_seed:)(v13, *(_QWORD *)(a2 + 40));
  Hasher._combine(_:)(v3);
  v4 = Hasher._finalize()();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(unsigned __int8 *)(v8 + v6) == (_DWORD)v3)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(unsigned __int8 *)(v8 + v11);
    result = v12 == (_DWORD)v3;
    if (v12 == (_DWORD)v3)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

BOOL sub_28554(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v4 = static Hasher._hash(seed:_:)(*(_QWORD *)(a2 + 40), a1);
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(v8 + 8 * v6) == a1)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(_QWORD *)(v8 + 8 * v11);
    result = v12 == a1;
    if (v12 == a1)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_2861C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  _QWORD v20[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20, *(_QWORD *)(a3 + 40));
    String.hash(into:)(v20, a1, a2);
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = v11[1];
      v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0) & 1) != 0)
        return 1;
      v15 = ~v7;
      v16 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
      {
        while (1)
        {
          v17 = (_QWORD *)(v10 + 16 * v16);
          v18 = v17[1];
          v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
            break;
          result = 0;
          v16 = (v16 + 1) & v15;
          if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_28750(char a1, uint64_t a2)
{
  uint64_t v4;
  Swift::Int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD v12[9];

  if (*(_QWORD *)(a2 + 16)
    && ((Hasher.init(_seed:)(v12, *(_QWORD *)(a2 + 40)), (a1 & 1) != 0) ? (v4 = 1684627824) : (v4 = 1701147238),
        String.hash(into:)(v12, v4, 0xE400000000000000),
        swift_bridgeObjectRelease(0xE400000000000000),
        v5 = Hasher._finalize()(),
        v6 = -1 << *(_BYTE *)(a2 + 32),
        v7 = v5 & ~v6,
        ((*(_QWORD *)(a2 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0))
  {
    v8 = ~v6;
    while (1)
    {
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + 48) + v7) ? 1684627824 : 1701147238;
      if (v9 == v4)
        break;
      v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, 0xE400000000000000, v4, 0xE400000000000000, 0);
      swift_bridgeObjectRelease_n(0xE400000000000000, 2);
      if ((v10 & 1) == 0)
      {
        v7 = (v7 + 1) & v8;
        if (((*(_QWORD *)(a2 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
          continue;
      }
      return v10 & 1;
    }
    swift_bridgeObjectRelease_n(0xE400000000000000, 2);
    v10 = 1;
  }
  else
  {
    v10 = 0;
  }
  return v10 & 1;
}

BOOL sub_28884(void *__src, uint64_t a2)
{
  uint64_t v4;
  Swift::Int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  uint64_t v11;
  _QWORD v12[9];
  uint64_t v13[69];
  uint64_t __dst[69];

  memcpy(__dst, __src, 0x221uLL);
  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v4 = *(_QWORD *)(a2 + 40);
  memcpy(v13, __src, 0x221uLL);
  Hasher.init(_seed:)(v12, v4);
  SeedBook.hash(into:)((uint64_t)v12);
  v5 = Hasher._finalize()();
  v6 = -1 << *(_BYTE *)(a2 + 32);
  v7 = v5 & ~v6;
  v8 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
    return 0;
  memcpy(v13, (const void *)(*(_QWORD *)(a2 + 48) + 552 * v7), 0x221uLL);
  if (_s20BooksPersonalization8SeedBookV2eeoiySbAC_ACtFZ_0(v13, __dst))
    return 1;
  v11 = ~v6;
  do
  {
    v7 = (v7 + 1) & v11;
    v9 = (*(_QWORD *)(v8 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) & (1 << v7)) != 0;
    if ((*(_QWORD *)(v8 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) & (1 << v7)) == 0)
      break;
    memcpy(v13, (const void *)(*(_QWORD *)(a2 + 48) + 552 * v7), 0x221uLL);
  }
  while (!_s20BooksPersonalization8SeedBookV2eeoiySbAC_ACtFZ_0(v13, __dst));
  return v9;
}

uint64_t sub_289C8(char a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD v6[9];

  if (*(_QWORD *)(a2 + 16))
  {
    Hasher.init(_seed:)(v6, *(_QWORD *)(a2 + 40));
    sub_F8978((uint64_t)v6, a1);
    v4 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(a2 + 32));
    if (((*(_QWORD *)(a2 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
      __asm { BR              X9 }
  }
  return 0;
}

uint64_t CommonCurrency.Headers.description.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  v2 = swift_bridgeObjectRetain(*v0);
  v3 = sub_272F4(v2);
  swift_bridgeObjectRelease(v1);
  v4 = sub_5EDC(&qword_1F03E0);
  v5 = sub_3EDBC((unint64_t *)&qword_1F0E60, &qword_1F03E0, (uint64_t)&protocol conformance descriptor for [A]);
  v6 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v4, v5);
  swift_bridgeObjectRelease(v3);
  return v6;
}

Swift::String_optional __swiftcall CommonCurrency.Headers.firstValue(name:)(Swift::String name)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  unint64_t v6;
  void **v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  Swift::String_optional result;
  uint64_t v14;
  _QWORD v15[4];

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 16);
  if (v3)
  {
    object = name._object;
    countAndFlagsBits = name._countAndFlagsBits;
    swift_bridgeObjectRetain_n(*v1, 2);
    v6 = sub_3D7A0();
    v14 = v2;
    v7 = (void **)(v2 + 56);
    while (1)
    {
      v9 = (uint64_t)*(v7 - 1);
      v8 = *v7;
      v10 = (uint64_t)*(v7 - 2);
      v15[2] = *(v7 - 3);
      v15[3] = v10;
      v15[0] = countAndFlagsBits;
      v15[1] = object;
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v8);
      if (!StringProtocol.caseInsensitiveCompare<A>(_:)(v15, &type metadata for String, &type metadata for String, v6, v6))break;
      v7 += 4;
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v10);
      if (!--v3)
      {
        swift_bridgeObjectRelease_n(v14, 2);
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease_n(v14, 2);
    swift_bridgeObjectRelease(v10);
  }
  else
  {
LABEL_6:
    v9 = 0;
    v8 = 0;
  }
  v11 = v9;
  v12 = v8;
  result.value._object = v12;
  result.value._countAndFlagsBits = v11;
  return result;
}

_QWORD *CommonCurrency.Headers.values(name:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;

  v5 = *v2;
  swift_bridgeObjectRetain(a2);
  v6 = swift_bridgeObjectRetain(v5);
  v7 = sub_3DACC(v6, a1, a2);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(a2);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    sub_340F4(0, v8, 0);
    v9 = (_QWORD *)(v7 + 56);
    do
    {
      v11 = *(v9 - 1);
      v10 = *v9;
      v12 = _swiftEmptyArrayStorage[2];
      v13 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain(*v9);
      if (v12 >= v13 >> 1)
        sub_340F4(v13 > 1, v12 + 1, 1);
      _swiftEmptyArrayStorage[2] = v12 + 1;
      v14 = &_swiftEmptyArrayStorage[2 * v12];
      v14[4] = v11;
      v14[5] = v10;
      v9 += 4;
      --v8;
    }
    while (v8);
  }
  swift_bridgeObjectRelease(v7);
  return _swiftEmptyArrayStorage;
}

_QWORD *CommonCurrency.Headers.getPrimitiveOptional<A>(_:as:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;
  _QWORD v17[4];
  uint64_t v18;

  v18 = a2;
  v6 = a4;
  v7 = *v4;
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v6, 1, 1);
  v16 = a3;
  swift_bridgeObjectRetain_n(v7, 2);
  v9 = sub_3D7A0();
  v10 = (uint64_t *)(v7 + 56);
  while (1)
  {
    v12 = *(v10 - 1);
    v11 = *v10;
    v13 = *(v10 - 2);
    v17[2] = *(v10 - 3);
    v17[3] = v13;
    v17[0] = a1;
    v17[1] = v18;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v11);
    if (!StringProtocol.caseInsensitiveCompare<A>(_:)(v17, &type metadata for String, &type metadata for String, v9, v9))break;
    v10 += 4;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!--v8)
    {
      swift_bridgeObjectRelease_n(v7, 2);
      a3 = v16;
      v6 = a4;
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v6, 1, 1);
    }
  }
  swift_bridgeObjectRelease_n(v7, 2);
  swift_bridgeObjectRelease();
  return dispatch thunk of LosslessStringConvertible.init(_:)(a4, v12, v11);
}

Swift::Void __swiftcall CommonCurrency.Headers.add(name:value:)(Swift::String name, Swift::String_optional value)
{
  _QWORD **v2;
  void *object;
  uint64_t countAndFlagsBits;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  if (value.value._object)
  {
    object = value.value._object;
    countAndFlagsBits = value.value._countAndFlagsBits;
    v5 = name._object;
    v6 = name._countAndFlagsBits;
    v7 = *v2;
    swift_bridgeObjectRetain(value.value._object);
    swift_bridgeObjectRetain(v5);
    if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
      v7 = sub_2FB9C(0, v7[2] + 1, 1, v7);
    v9 = v7[2];
    v8 = v7[3];
    if (v9 >= v8 >> 1)
      v7 = sub_2FB9C((_QWORD *)(v8 > 1), v9 + 1, 1, v7);
    v7[2] = v9 + 1;
    v10 = &v7[4 * v9];
    v10[4] = v6;
    v10[5] = v5;
    v10[6] = countAndFlagsBits;
    v10[7] = object;
    *v2 = v7;
  }
}

uint64_t CommonCurrency.Headers.addPrimitive<A>(name:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD **v5;
  _QWORD **v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  v6 = v5;
  v25 = a1;
  v11 = type metadata accessor for Optional(0, a4);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v24 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v24 - v13, a3, v11);
  v15 = *(_QWORD *)(a4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, a4) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v17 = dispatch thunk of CustomStringConvertible.description.getter(a4, *(_QWORD *)(a5 + 8));
  v19 = v18;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v14, a4);
  v20 = *v6;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
    v20 = sub_2FB9C(0, v20[2] + 1, 1, v20);
  v22 = v20[2];
  v21 = v20[3];
  if (v22 >= v21 >> 1)
    v20 = sub_2FB9C((_QWORD *)(v21 > 1), v22 + 1, 1, v20);
  v20[2] = v22 + 1;
  v23 = &v20[4 * v22];
  v23[4] = v25;
  v23[5] = a2;
  v23[6] = v17;
  v23[7] = v19;
  result = swift_bridgeObjectRelease();
  *v6 = v20;
  return result;
}

uint64_t AnyCodableContainer.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_418BC(v1, a1, &qword_1F0E70);
}

uint64_t AnyCodableContainer.value.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_3DC8C(a1, v1);
}

uint64_t AnyCodableContainer.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return sub_3DC8C(a1, a2);
}

uint64_t AnyCodableContainer.init(untypedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _BYTE v10[40];

  sub_29474(a1, (uint64_t)v10);
  if (!v2)
  {
    v9 = 0;
    v7 = 0u;
    v8 = 0u;
    sub_3DC8C((uint64_t)v10, (uint64_t)&v7);
    v5 = v8;
    *(_OWORD *)a2 = v7;
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v9;
  }
  return sub_417D8(a1, &qword_1F0E78);
}

uint64_t sub_29474@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t DynamicType;
  Swift::String v25;
  void *object;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30[2];
  uint64_t v31;
  _QWORD v32[4];
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  sub_418BC(a1, (uint64_t)&v33, &qword_1F0E78);
  if (!v34)
  {
    result = sub_417D8((uint64_t)&v33, &qword_1F0E78);
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  sub_41900(&v33, &v35);
  sub_41910((uint64_t)&v35, (uint64_t)&v33);
  v4 = sub_5EDC(&qword_1F1358);
  if (!swift_dynamicCast(v30, &v33, (char *)&type metadata for Any + 8, v4, 6))
  {
    sub_41910((uint64_t)&v35, (uint64_t)&v33);
    v12 = sub_5EDC(&qword_1F1360);
    if (!swift_dynamicCast(v30, &v33, (char *)&type metadata for Any + 8, v12, 6))
    {
      sub_41910((uint64_t)&v35, (uint64_t)v32);
      v15 = sub_5EDC(&qword_1F0EC8);
      if (swift_dynamicCast(v30, v32, (char *)&type metadata for Any + 8, v15, 6))
      {
        sub_62F8(&v35);
        sub_26DB8(v30, (uint64_t)&v33);
        return sub_26DB8(&v33, a2);
      }
      v31 = 0;
      memset(v30, 0, sizeof(v30));
      sub_417D8((uint64_t)v30, &qword_1F0E70);
      v19 = type metadata accessor for EncodingError(0);
      swift_allocError(v19, &protocol witness table for EncodingError, 0, 0);
      v21 = v20;
      sub_5EDC(&qword_1F0ED0);
      sub_41910((uint64_t)&v35, v21);
      *(_QWORD *)&v33 = 0;
      *((_QWORD *)&v33 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(47);
      swift_bridgeObjectRelease(*((_QWORD *)&v33 + 1));
      *(_QWORD *)&v33 = 0x272065707954;
      *((_QWORD *)&v33 + 1) = 0xE600000000000000;
      v22 = v36;
      v23 = sub_49F4(&v35, v36);
      DynamicType = swift_getDynamicType(v23, v22, 1);
      v25._countAndFlagsBits = _typeName(_:qualified:)(DynamicType, 0);
      object = v25._object;
      String.append(_:)(v25);
      swift_bridgeObjectRelease(object);
      v27._object = (void *)0x800000000019FED0;
      v27._countAndFlagsBits = 0xD000000000000027;
      String.append(_:)(v27);
      EncodingError.Context.init(codingPath:debugDescription:underlyingError:)(_swiftEmptyArrayStorage, v33, *((_QWORD *)&v33 + 1), 0);
      v28 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, enum case for EncodingError.invalidValue(_:), v19);
      swift_willThrow(v28);
      return sub_62F8(&v35);
    }
    v13 = *(_QWORD *)&v30[0];
    v14 = sub_31CEC(*(uint64_t *)&v30[0]);
    if (v2)
    {
      sub_62F8(&v35);
      return swift_bridgeObjectRelease(v13);
    }
    v8 = (_QWORD *)v14;
    swift_bridgeObjectRelease(v13);
    v16 = &qword_1F0EA8;
    *(_QWORD *)(a2 + 24) = sub_5EDC(&qword_1F0EA8);
    v17 = (unint64_t *)&unk_1F0EB0;
    v18 = &protocol conformance descriptor for <> [A : B];
LABEL_23:
    *(_QWORD *)(a2 + 32) = sub_3EDBC(v17, v16, (uint64_t)v18);
    *(_QWORD *)a2 = v8;
    return sub_62F8(&v35);
  }
  v5 = *(_QWORD *)&v30[0];
  v6 = *(_QWORD *)(*(_QWORD *)&v30[0] + 16);
  if (!v6)
  {
    swift_bridgeObjectRelease(*(_QWORD *)&v30[0]);
    v8 = _swiftEmptyArrayStorage;
LABEL_20:
    v16 = &qword_1F0EB8;
    *(_QWORD *)(a2 + 24) = sub_5EDC(&qword_1F0EB8);
    v17 = (unint64_t *)&unk_1F0EC0;
    v18 = &protocol conformance descriptor for <A> [A];
    goto LABEL_23;
  }
  v29 = a2;
  v32[0] = _swiftEmptyArrayStorage;
  sub_34158(0, v6, 0);
  v37 = v5;
  v7 = v5 + 32;
  while (1)
  {
    sub_418BC(v7, (uint64_t)v30, &qword_1F0E78);
    sub_29474(&v33, v30);
    sub_417D8((uint64_t)v30, &qword_1F0E78);
    if (v2)
      break;
    v8 = (_QWORD *)v32[0];
    if ((swift_isUniquelyReferenced_nonNull_native(v32[0]) & 1) == 0)
    {
      sub_34158(0, v8[2] + 1, 1);
      v8 = (_QWORD *)v32[0];
    }
    v10 = v8[2];
    v9 = v8[3];
    if (v10 >= v9 >> 1)
    {
      sub_34158(v9 > 1, v10 + 1, 1);
      v8 = (_QWORD *)v32[0];
    }
    v8[2] = v10 + 1;
    sub_41300((uint64_t)&v33, (uint64_t)&v8[5 * v10 + 4], &qword_1F0E70);
    v7 += 32;
    if (!--v6)
    {
      swift_bridgeObjectRelease(v37);
      a2 = v29;
      goto LABEL_20;
    }
  }
  swift_release(v32[0]);
  sub_62F8(&v35);
  return swift_bridgeObjectRelease(v37);
}

uint64_t AnyCodableContainer.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  _UNKNOWN **v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v5 = a1[3];
  v6 = a1[4];
  sub_49F4(a1, v5);
  dispatch thunk of Decoder.singleValueContainer()(v20, v5, v6);
  if (!v2)
  {
    v7 = v21;
    v8 = v22;
    sub_49F4(v20, v21);
    if ((dispatch thunk of SingleValueDecodingContainer.decodeNil()(v7, v8) & 1) != 0)
    {
      v19 = 0;
      v9 = 0uLL;
      v17 = 0u;
      v18 = 0u;
      v16 = 0;
    }
    else
    {
      v10 = v21;
      v11 = v22;
      sub_49F4(v20, v21);
      *((_QWORD *)&v18 + 1) = &type metadata for Bool;
      v19 = &protocol witness table for Bool;
      LOBYTE(v17) = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v10, v11) & 1;
      v16 = 0;
      v9 = 0uLL;
    }
    v14 = v9;
    v15 = v9;
    sub_3DC8C((uint64_t)&v17, (uint64_t)&v14);
    v23 = v14;
    v24 = v15;
    v25 = v16;
    sub_62F8(v20);
    v12 = v24;
    *(_OWORD *)a2 = v23;
    *(_OWORD *)(a2 + 16) = v12;
    *(_QWORD *)(a2 + 32) = v25;
  }
  return sub_62F8(a1);
}

uint64_t AnyCodableContainer.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  __int128 v37;
  __int128 v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  _BYTE v66[40];
  _QWORD v67[5];
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  _QWORD v75[3];
  uint64_t v76;
  _QWORD v77[3];
  uint64_t v78;
  uint64_t v79;

  v2 = a1[3];
  v3 = a1[4];
  sub_49F4(a1, v2);
  dispatch thunk of Encoder.singleValueContainer()(v77, v2, v3);
  sub_418BC(v1, (uint64_t)&v73, &qword_1F0E70);
  if (v74)
  {
    sub_26DB8(&v73, (uint64_t)v75);
    sub_3DD40((uint64_t)v75, (uint64_t)&v73);
    v4 = sub_5EDC(&qword_1F0EC8);
    if (swift_dynamicCast(&v68, &v73, v4, &type metadata for Bool, 0))
    {
      v5 = v68;
      v6 = v78;
      v7 = v79;
      sub_3DD18((uint64_t)v77, v78);
      dispatch thunk of SingleValueEncodingContainer.encode(_:)(v5, v6, v7);
    }
    else if (swift_dynamicCast(&v68, &v73, v4, &type metadata for Int, 0))
    {
      v10 = v68;
      v11 = v78;
      v12 = v79;
      sub_3DD18((uint64_t)v77, v78);
      dispatch thunk of SingleValueEncodingContainer.encode(_:)(v10, v11, v12);
    }
    else if (swift_dynamicCast(&v68, &v73, v4, &type metadata for Int64, 0))
    {
      v13 = v68;
      v14 = v78;
      v15 = v79;
      sub_3DD18((uint64_t)v77, v78);
      dispatch thunk of SingleValueEncodingContainer.encode(_:)(v13, v14, v15);
    }
    else if (swift_dynamicCast(&v68, &v73, v4, &type metadata for Int32, 0))
    {
      v16 = v68;
      v17 = v78;
      v18 = v79;
      sub_3DD18((uint64_t)v77, v78);
      dispatch thunk of SingleValueEncodingContainer.encode(_:)(v16, v17, v18);
    }
    else if (swift_dynamicCast(&v68, &v73, v4, &type metadata for Float, 0))
    {
      v19 = *(float *)&v68;
      v20 = v78;
      v21 = v79;
      sub_3DD18((uint64_t)v77, v78);
      dispatch thunk of SingleValueEncodingContainer.encode(_:)(v20, v21, v19);
    }
    else if (swift_dynamicCast(&v68, &v73, v4, &type metadata for Double, 0))
    {
      v22 = *(double *)&v68;
      v23 = v78;
      v24 = v79;
      sub_3DD18((uint64_t)v77, v78);
      dispatch thunk of SingleValueEncodingContainer.encode(_:)(v23, v24, v22);
    }
    else
    {
      if (swift_dynamicCast(&v68, &v73, v4, &type metadata for String, 0))
      {
        v26 = (_QWORD *)*((_QWORD *)&v68 + 1);
        v25 = v68;
        v27 = v78;
        v28 = v79;
        sub_3DD18((uint64_t)v77, v78);
        dispatch thunk of SingleValueEncodingContainer.encode(_:)(v25, v26, v27, v28);
      }
      else
      {
        v29 = sub_5EDC(&qword_1F0EB8);
        if (!swift_dynamicCast(&v72, &v73, v4, v29, 0))
        {
          v40 = sub_5EDC(&qword_1F0EA8);
          if (swift_dynamicCast(&v68, &v73, v4, v40, 0))
          {
            v41 = v68;
            v42 = sub_32184(v68);
            swift_bridgeObjectRelease(v41);
            v67[0] = v42;
            v43 = v78;
            v44 = v79;
            sub_3DD18((uint64_t)v77, v78);
            v45 = sub_5EDC(&qword_1F0E98);
            v46 = sub_3DDC0(&qword_1F0ED8, (void (*)(void))sub_3DE34, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
            dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)(v67, v45, v46, v43, v44);
            swift_release(v42);
          }
          else
          {
            v47 = type metadata accessor for EncodingError(0);
            swift_allocError(v47, &protocol witness table for EncodingError, 0, 0);
            v49 = v48;
            sub_5EDC(&qword_1F0ED0);
            v50 = v76;
            v51 = sub_49F4(v75, v76);
            v49[3] = v50;
            v52 = sub_3DD84(v49);
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v52, v51, v50);
            v53 = v78;
            v54 = v79;
            sub_49F4(v77, v78);
            v55 = dispatch thunk of SingleValueEncodingContainer.codingPath.getter(v53, v54);
            EncodingError.Context.init(codingPath:debugDescription:underlyingError:)(v55, 0xD000000000000025, 0x800000000019FAE0, 0);
            v56 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v47 - 8) + 104))(v49, enum case for EncodingError.invalidValue(_:), v47);
            swift_willThrow(v56);
          }
          goto LABEL_32;
        }
        v30 = v72;
        v31 = *(_QWORD *)(v72 + 16);
        if (v31)
        {
          v71 = _swiftEmptyArrayStorage;
          sub_34174(0, v31, 0);
          v32 = v30 + 32;
          v26 = v71;
          do
          {
            sub_418BC(v32, (uint64_t)v67, &qword_1F0E70);
            sub_418BC((uint64_t)v67, (uint64_t)v66, &qword_1F0E70);
            v65 = 0;
            v63 = 0u;
            v64 = 0u;
            sub_3DC8C((uint64_t)v66, (uint64_t)&v63);
            v68 = v63;
            v69 = v64;
            v70 = v65;
            sub_417D8((uint64_t)v67, &qword_1F0E70);
            if ((swift_isUniquelyReferenced_nonNull_native(v26) & 1) == 0)
            {
              sub_34174(0, v26[2] + 1, 1);
              v26 = v71;
            }
            v33 = v26[2];
            v34 = v26[3];
            v35 = v33 + 1;
            if (v33 >= v34 >> 1)
            {
              v39 = v33 + 1;
              v62 = v33;
              sub_34174(v34 > 1, v33 + 1, 1);
              v33 = v62;
              v35 = v39;
              v26 = v71;
            }
            v26[2] = v35;
            v36 = &v26[5 * v33];
            v37 = v68;
            v38 = v69;
            v36[8] = v70;
            *((_OWORD *)v36 + 2) = v37;
            *((_OWORD *)v36 + 3) = v38;
            v32 += 40;
            --v31;
          }
          while (v31);
          swift_bridgeObjectRelease(v30);
        }
        else
        {
          swift_bridgeObjectRelease(v72);
          v26 = _swiftEmptyArrayStorage;
        }
        *(_QWORD *)&v68 = v26;
        v57 = v78;
        v58 = v79;
        sub_3DD18((uint64_t)v77, v78);
        v59 = sub_5EDC(&qword_1F0E80);
        v60 = sub_3DE78(&qword_1F0EE8, (void (*)(void))sub_3DE34, (uint64_t)&protocol conformance descriptor for <A> [A]);
        dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)(&v68, v59, v60, v57, v58);
      }
      swift_bridgeObjectRelease(v26);
    }
LABEL_32:
    sub_62F8(&v73);
    sub_62F8(v75);
    return sub_62F8(v77);
  }
  sub_417D8((uint64_t)&v73, &qword_1F0E70);
  v8 = v78;
  v9 = v79;
  sub_3DD18((uint64_t)v77, v78);
  dispatch thunk of SingleValueEncodingContainer.encodeNil()(v8, v9);
  return sub_62F8(v77);
}

uint64_t static AnyCodableContainer.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  char v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  float v13;
  double v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  int64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[3];
  _OWORD v51[2];
  uint64_t v52;
  _OWORD v53[2];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[5];
  _QWORD v58[5];
  _BYTE v59[24];
  uint64_t v60;
  _BYTE v61[24];
  uint64_t v62;

  v3 = &qword_1F0E70;
  sub_418BC(a1, (uint64_t)v59, &qword_1F0E70);
  sub_418BC(a2, (uint64_t)v61, &qword_1F0E70);
  if (!(v60 | v62)
    || (v3 = &qword_1F0EF0,
        v4 = sub_5EDC(&qword_1F0EF0),
        v5 = sub_5EDC(&qword_1F0EF8),
        (swift_dynamicCast(v5, v59, v4, v5, 0) & 1) != 0))
  {
    v6 = 1;
LABEL_4:
    sub_417D8((uint64_t)v59, v3);
    return v6 & 1;
  }
  if (!v60)
  {
LABEL_16:
    v6 = 0;
    goto LABEL_4;
  }
  sub_418BC((uint64_t)v59, (uint64_t)v58, &qword_1F0E70);
  if (!v62)
  {
    sub_62F8(v58);
    goto LABEL_16;
  }
  sub_418BC((uint64_t)v61, (uint64_t)v57, &qword_1F0E70);
  v8 = sub_5EDC(&qword_1F0EC8);
  if (swift_dynamicCast(v53, v58, v8, &type metadata for Bool, 0))
  {
    v9 = v53[0];
    if (swift_dynamicCast(v51, v57, v8, &type metadata for Bool, 0))
    {
      v6 = v9 ^ LOBYTE(v51[0]) ^ 1;
LABEL_29:
      sub_62F8(v57);
      sub_62F8(v58);
      v3 = &qword_1F0E70;
      sub_417D8((uint64_t)v61, &qword_1F0E70);
      goto LABEL_4;
    }
  }
  if (swift_dynamicCast(v53, v58, v8, &type metadata for Int, 0)
    && (v10 = *(_QWORD *)&v53[0], swift_dynamicCast(v51, v57, v8, &type metadata for Int, 0))
    || swift_dynamicCast(v53, v58, v8, &type metadata for Int64, 0)
    && (v10 = *(_QWORD *)&v53[0], swift_dynamicCast(v51, v57, v8, &type metadata for Int64, 0)))
  {
    v11 = v10 == *(_QWORD *)&v51[0];
    goto LABEL_26;
  }
  if (swift_dynamicCast(v53, v58, v8, &type metadata for Int32, 0))
  {
    v12 = v53[0];
    if (swift_dynamicCast(v51, v57, v8, &type metadata for Int32, 0))
    {
      v11 = v12 == LODWORD(v51[0]);
      goto LABEL_26;
    }
  }
  if (swift_dynamicCast(v53, v58, v8, &type metadata for Float, 0))
  {
    v13 = *(float *)v53;
    if (swift_dynamicCast(v51, v57, v8, &type metadata for Float, 0))
    {
      v11 = v13 == *(float *)v51;
      goto LABEL_26;
    }
  }
  if (swift_dynamicCast(v53, v58, v8, &type metadata for Double, 0))
  {
    v14 = *(double *)v53;
    if (swift_dynamicCast(v51, v57, v8, &type metadata for Double, 0))
    {
      v11 = v14 == *(double *)v51;
LABEL_26:
      v6 = v11;
      goto LABEL_29;
    }
  }
  if (swift_dynamicCast(v53, v58, v8, &type metadata for String, 0))
  {
    v15 = v53[0];
    if (swift_dynamicCast(v51, v57, v8, &type metadata for String, 0))
    {
      v16 = *((_QWORD *)&v51[0] + 1);
      if (v15 == v51[0])
      {
        v6 = 1;
        v16 = *((_QWORD *)&v15 + 1);
      }
      else
      {
        v6 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, *((_QWORD *)&v15 + 1), *(_QWORD *)&v51[0], *((_QWORD *)&v51[0] + 1), 0);
      }
      v19 = *((_QWORD *)&v15 + 1);
      goto LABEL_80;
    }
    swift_bridgeObjectRelease(*((_QWORD *)&v15 + 1));
  }
  v17 = sub_5EDC(&qword_1F0EB8);
  if (swift_dynamicCast(v53, v58, v8, v17, 0))
  {
    v16 = *(_QWORD *)&v53[0];
    if (swift_dynamicCast(v51, v57, v8, v17, 0))
    {
      v18 = *(_QWORD *)&v51[0];
      if (*(_QWORD *)(v16 + 16) == *(_QWORD *)(*(_QWORD *)&v51[0] + 16))
      {
        v6 = sub_2ACDC(v16, *(_QWORD *)&v51[0]);
        v19 = v18;
LABEL_80:
        swift_bridgeObjectRelease(v19);
        swift_bridgeObjectRelease(v16);
        goto LABEL_29;
      }
      swift_bridgeObjectRelease(v16);
      v45 = v18;
      goto LABEL_83;
    }
    swift_bridgeObjectRelease(v16);
  }
  v20 = sub_5EDC(&qword_1F0EA8);
  if (!swift_dynamicCast(&v56, v58, v8, v20, 0))
  {
LABEL_77:
    sub_62F8(v57);
    sub_62F8(v58);
    v6 = 0;
    v3 = &qword_1F0EF0;
    goto LABEL_4;
  }
  v21 = v56;
  if (!swift_dynamicCast(&v55, v57, v8, v20, 0))
  {
    swift_bridgeObjectRelease(v21);
    goto LABEL_77;
  }
  v22 = v55;
  if (*(_QWORD *)(v21 + 16) != *(_QWORD *)(v55 + 16)
    || (v23 = swift_bridgeObjectRetain(v21),
        v24 = sub_27C00(v23),
        v25 = swift_bridgeObjectRetain(v22),
        v26 = sub_27C00(v25),
        v27 = sub_2AEC4(v24, v26),
        swift_bridgeObjectRelease(v24),
        swift_bridgeObjectRelease(v26),
        (v27 & 1) == 0))
  {
    swift_bridgeObjectRelease(v21);
    v45 = v22;
LABEL_83:
    swift_bridgeObjectRelease(v45);
    sub_62F8(v57);
    sub_62F8(v58);
    v3 = &qword_1F0E70;
    sub_417D8((uint64_t)v61, &qword_1F0E70);
    goto LABEL_16;
  }
  v28 = v21 + 64;
  v29 = 1 << *(_BYTE *)(v21 + 32);
  v30 = -1;
  if (v29 < 64)
    v30 = ~(-1 << v29);
  v31 = v30 & *(_QWORD *)(v21 + 64);
  v46 = (unint64_t)(v29 + 63) >> 6;
  result = swift_bridgeObjectRetain(v21);
  v32 = 0;
  while (1)
  {
    if (v31)
    {
      v33 = __clz(__rbit64(v31));
      v31 &= v31 - 1;
      v34 = v33 | (v32 << 6);
    }
    else
    {
      v35 = v32 + 1;
      if (__OFADD__(v32, 1))
        goto LABEL_87;
      if (v35 >= v46)
      {
LABEL_84:
        swift_release(v21);
        swift_bridgeObjectRelease(v21);
        swift_bridgeObjectRelease(v22);
        sub_62F8(v57);
        sub_62F8(v58);
        v3 = &qword_1F0E70;
        sub_417D8((uint64_t)v61, &qword_1F0E70);
        v6 = 1;
        goto LABEL_4;
      }
      v36 = *(_QWORD *)(v28 + 8 * v35);
      ++v32;
      if (!v36)
      {
        v32 = v35 + 1;
        if (v35 + 1 >= v46)
          goto LABEL_84;
        v36 = *(_QWORD *)(v28 + 8 * v32);
        if (!v36)
        {
          v32 = v35 + 2;
          if (v35 + 2 >= v46)
            goto LABEL_84;
          v36 = *(_QWORD *)(v28 + 8 * v32);
          if (!v36)
          {
            v32 = v35 + 3;
            if (v35 + 3 >= v46)
              goto LABEL_84;
            v36 = *(_QWORD *)(v28 + 8 * v32);
            if (!v36)
            {
              v32 = v35 + 4;
              if (v35 + 4 >= v46)
                goto LABEL_84;
              v36 = *(_QWORD *)(v28 + 8 * v32);
              if (!v36)
              {
                v37 = v35 + 5;
                if (v37 >= v46)
                  goto LABEL_84;
                v36 = *(_QWORD *)(v28 + 8 * v37);
                if (!v36)
                {
                  while (1)
                  {
                    v32 = v37 + 1;
                    if (__OFADD__(v37, 1))
                      goto LABEL_88;
                    if (v32 >= v46)
                      goto LABEL_84;
                    v36 = *(_QWORD *)(v28 + 8 * v32);
                    ++v37;
                    if (v36)
                      goto LABEL_66;
                  }
                }
                v32 = v37;
              }
            }
          }
        }
      }
LABEL_66:
      v31 = (v36 - 1) & v36;
      v34 = __clz(__rbit64(v36)) + (v32 << 6);
    }
    if (!*(_QWORD *)(v21 + 16))
      break;
    v38 = (uint64_t *)(*(_QWORD *)(v21 + 48) + 16 * v34);
    v40 = *v38;
    v39 = v38[1];
    swift_bridgeObjectRetain(v39);
    result = sub_39064(v40, v39);
    if ((v41 & 1) == 0)
      goto LABEL_86;
    sub_418BC(*(_QWORD *)(v21 + 56) + 40 * result, (uint64_t)v51, &qword_1F0E70);
    memset(v50, 0, 40);
    sub_3DC8C((uint64_t)v51, (uint64_t)v50);
    v53[0] = v50[0];
    v53[1] = v50[1];
    v54 = *(_QWORD *)&v50[2];
    if (*(_QWORD *)(v22 + 16) && (v42 = sub_39064(v40, v39), (v43 & 1) != 0))
    {
      sub_418BC(*(_QWORD *)(v22 + 56) + 40 * v42, (uint64_t)v50, &qword_1F0E70);
    }
    else
    {
      memset(v50, 0, 24);
      *(_OWORD *)((char *)&v50[1] + 8) = xmmword_18C9A0;
    }
    result = swift_bridgeObjectRelease(v39);
    if (*((_QWORD *)&v50[1] + 1) == 1)
      goto LABEL_89;
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    sub_3DC8C((uint64_t)v50, (uint64_t)&v47);
    v51[0] = v47;
    v51[1] = v48;
    v52 = v49;
    v44 = static AnyCodableContainer.== infix(_:_:)(v53, v51);
    sub_3DEE0(v51);
    result = (uint64_t)sub_3DEE0(v53);
    if ((v44 & 1) == 0)
    {
      swift_bridgeObjectRelease(v22);
      swift_release(v21);
      v45 = v21;
      goto LABEL_83;
    }
  }
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
  return result;
}

uint64_t sub_2ACDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  char v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  _OWORD v20[2];
  _OWORD v21[3];
  _OWORD v22[2];
  _OWORD v23[3];

  v4 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  if (v4)
  {
    v5 = 0;
    v6 = 32;
    while (1)
    {
      result = sub_418BC(a1 + v6, (uint64_t)v20, &qword_1F0E70);
      v8 = *(_QWORD *)(a2 + 16);
      if (v5 == v8)
      {
        sub_417D8((uint64_t)v20, &qword_1F0E70);
        goto LABEL_9;
      }
      if (v5 >= v8)
        break;
      sub_41300((uint64_t)v20, (uint64_t)v22, &qword_1F0E70);
      sub_418BC(a2 + v6, (uint64_t)v23 + 8, &qword_1F0E70);
      v21[0] = v23[0];
      v21[1] = v23[1];
      v21[2] = v23[2];
      v20[0] = v22[0];
      v20[1] = v22[1];
      sub_418BC((uint64_t)v20, (uint64_t)v16, &qword_1F0E70);
      v15 = 0;
      v13 = 0u;
      v14 = 0u;
      sub_3DC8C((uint64_t)v16, (uint64_t)&v13);
      v18[0] = v13;
      v18[1] = v14;
      v19 = v15;
      sub_418BC((uint64_t)v21 + 8, (uint64_t)&v13, &qword_1F0E70);
      v12 = 0;
      v10 = 0u;
      v11 = 0u;
      sub_3DC8C((uint64_t)&v13, (uint64_t)&v10);
      v16[0] = v10;
      v16[1] = v11;
      v17 = v12;
      v9 = static AnyCodableContainer.== infix(_:_:)((uint64_t)v18, (uint64_t)v16);
      sub_3DEE0(v16);
      sub_3DEE0(v18);
      sub_417D8((uint64_t)v20, &qword_1F0EF0);
      if ((v9 & 1) == 0)
      {
        swift_bridgeObjectRelease(a2);
        swift_bridgeObjectRelease(a1);
        return 0;
      }
      ++v5;
      v6 += 40;
      if (v4 == v5)
        goto LABEL_9;
    }
    __break(1u);
  }
  else
  {
LABEL_9:
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a1);
    return 1;
  }
  return result;
}

uint64_t sub_2AEC4(uint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  unint64_t i;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  int64_t v32;
  int64_t v33;
  _QWORD v34[9];

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v31 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(result + 56);
  v32 = (unint64_t)(v4 + 63) >> 6;
  v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v33 = v3;
      v9 = v8 | (v3 << 6);
      goto LABEL_24;
    }
    v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v10 >= v32)
      return 1;
    v11 = *(_QWORD *)(v31 + 8 * v10);
    v12 = v3 + 1;
    if (!v11)
    {
      v12 = v3 + 2;
      if (v3 + 2 >= v32)
        return 1;
      v11 = *(_QWORD *)(v31 + 8 * v12);
      if (!v11)
      {
        v12 = v3 + 3;
        if (v3 + 3 >= v32)
          return 1;
        v11 = *(_QWORD *)(v31 + 8 * v12);
        if (!v11)
          break;
      }
    }
LABEL_23:
    v6 = (v11 - 1) & v11;
    v33 = v12;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_24:
    v14 = result;
    v15 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * v9);
    v17 = *v15;
    v16 = v15[1];
    Hasher.init(_seed:)(v34, *(_QWORD *)(a2 + 40));
    swift_bridgeObjectRetain(v16);
    String.hash(into:)(v34, v17, v16);
    v18 = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(a2 + 32);
    v20 = v18 & ~v19;
    if (((*(_QWORD *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
      goto LABEL_39;
    v21 = *(_QWORD *)(a2 + 48);
    v22 = (_QWORD *)(v21 + 16 * v20);
    v23 = v22[1];
    v24 = *v22 == v17 && v23 == v16;
    if (!v24 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v22, v23, v17, v16, 0) & 1) == 0)
    {
      v25 = ~v19;
      for (i = v20 + 1; ; i = v27 + 1)
      {
        v27 = i & v25;
        if (((*(_QWORD *)(v7 + (((i & v25) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v25)) & 1) == 0)
          break;
        v28 = (_QWORD *)(v21 + 16 * v27);
        v29 = v28[1];
        v30 = *v28 == v17 && v29 == v16;
        if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v17, v16, 0) & 1) != 0)
          goto LABEL_7;
      }
LABEL_39:
      swift_bridgeObjectRelease(v16);
      return 0;
    }
LABEL_7:
    swift_bridgeObjectRelease(v16);
    result = v14;
    v3 = v33;
  }
  v13 = v3 + 4;
  if (v3 + 4 >= v32)
    return 1;
  v11 = *(_QWORD *)(v31 + 8 * v13);
  if (v11)
  {
    v12 = v3 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v32)
      return 1;
    v11 = *(_QWORD *)(v31 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_23;
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_2B148(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 56;
  v6 = 1 << *(_BYTE *)(result + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(result + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = a2 + 56;
  do
  {
LABEL_7:
    if (v8)
    {
      v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v12 = v11 | (v4 << 6);
      goto LABEL_25;
    }
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_34:
      __break(1u);
      return result;
    }
    if (v13 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v13);
    ++v4;
    if (v14)
      goto LABEL_24;
    v4 = v13 + 1;
    if (v13 + 1 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_24;
    v4 = v13 + 2;
    if (v13 + 2 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_24;
    v4 = v13 + 3;
    if (v13 + 3 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_24;
    v15 = v13 + 4;
    if (v15 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        v4 = v15 + 1;
        if (__OFADD__(v15, 1))
          goto LABEL_34;
        if (v4 >= v9)
          return 1;
        v14 = *(_QWORD *)(v5 + 8 * v4);
        ++v15;
        if (v14)
          goto LABEL_24;
      }
    }
    v4 = v15;
LABEL_24:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_25:
    v16 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v12);
    result = static Hasher._hash(seed:_:)(*(_QWORD *)(a2 + 40), v16);
    v17 = -1 << *(_BYTE *)(a2 + 32);
    v18 = result & ~v17;
    if (((*(_QWORD *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    v19 = *(_QWORD *)(a2 + 48);
  }
  while (*(_QWORD *)(v19 + 8 * v18) == v16);
  v20 = ~v17;
  while (1)
  {
    v18 = (v18 + 1) & v20;
    if (((*(_QWORD *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    if (*(_QWORD *)(v19 + 8 * v18) == v16)
      goto LABEL_7;
  }
}

uint64_t AnyCodableContainer.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  Swift::UInt64 v4;
  Swift::UInt32 v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _QWORD v34[5];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  _OWORD v39[2];
  uint64_t v40;
  Swift::UInt8 v41[16];
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[5];
  _BYTE v46[24];
  uint64_t v47;

  sub_418BC(v1, (uint64_t)v46, &qword_1F0E70);
  if (!v47)
    return sub_417D8((uint64_t)v46, &qword_1F0E70);
  sub_418BC((uint64_t)v46, (uint64_t)v45, &qword_1F0E70);
  v3 = sub_5EDC(&qword_1F0EC8);
  if (swift_dynamicCast(v41, v45, v3, &type metadata for Bool, 0))
  {
    Hasher._combine(_:)(v41[0]);
    goto LABEL_16;
  }
  if (swift_dynamicCast(v41, v45, v3, &type metadata for Int, 0))
  {
    Hasher._combine(_:)(*(Swift::UInt *)v41);
    goto LABEL_16;
  }
  if (swift_dynamicCast(v41, v45, v3, &type metadata for Int64, 0))
  {
    v4 = *(_QWORD *)v41;
LABEL_8:
    Hasher._combine(_:)(v4);
    goto LABEL_16;
  }
  if (swift_dynamicCast(v41, v45, v3, &type metadata for Int32, 0))
  {
    v5 = *(_DWORD *)v41;
LABEL_15:
    Hasher._combine(_:)(v5);
    goto LABEL_16;
  }
  if (swift_dynamicCast(v41, v45, v3, &type metadata for Float, 0))
  {
    if ((*(_DWORD *)v41 & 0x7FFFFFFF) != 0)
      v5 = *(_DWORD *)v41;
    else
      v5 = 0;
    goto LABEL_15;
  }
  if (swift_dynamicCast(v41, v45, v3, &type metadata for Double, 0))
  {
    if ((*(_QWORD *)v41 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v4 = *(_QWORD *)v41;
    else
      v4 = 0;
    goto LABEL_8;
  }
  if (swift_dynamicCast(v41, v45, v3, &type metadata for String, 0))
  {
    v7 = *(_QWORD *)&v41[8];
    String.hash(into:)(a1, *(_QWORD *)v41, *(_QWORD *)&v41[8]);
    swift_bridgeObjectRelease(v7);
    goto LABEL_16;
  }
  v8 = sub_5EDC(&qword_1F0F00);
  if (swift_dynamicCast(v34, v45, v3, v8, 0))
  {
    v9 = v34[0];
    v10 = *(_QWORD *)(v34[0] + 16);
    if (v10)
    {
      v11 = v34[0] + 32;
      do
      {
        sub_3DD40(v11, (uint64_t)&v38);
        v37 = 0;
        v35 = 0u;
        v36 = 0u;
        sub_3DC8C((uint64_t)&v38, (uint64_t)&v35);
        *(_OWORD *)v41 = v35;
        v42 = v36;
        v43 = v37;
        AnyCodableContainer.hash(into:)(a1);
        sub_3DEE0(v41);
        v11 += 40;
        --v10;
      }
      while (v10);
    }
    swift_bridgeObjectRelease(v9);
    goto LABEL_16;
  }
  v12 = sub_5EDC(&qword_1F0F08);
  result = swift_dynamicCast(&v44, v45, v3, v12, 0);
  if (!(_DWORD)result)
  {
LABEL_16:
    sub_62F8(v45);
    return sub_417D8((uint64_t)v46, &qword_1F0E70);
  }
  v13 = 0;
  v14 = v44;
  v15 = *(_QWORD *)(v44 + 64);
  v30 = v44 + 64;
  v16 = 1 << *(_BYTE *)(v44 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v15;
  v19 = (unint64_t)(v16 + 63) >> 6;
  if ((v17 & v15) == 0)
    goto LABEL_37;
LABEL_35:
  v21 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  v22 = v21 | (v13 << 6);
  while (2)
  {
    v23 = *(_QWORD *)(v14 + 56);
    v24 = (_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v22);
    v25 = v24[1];
    *(_QWORD *)&v38 = *v24;
    *((_QWORD *)&v38 + 1) = v25;
    sub_3DD40(v23 + 40 * v22, (uint64_t)v39);
    swift_bridgeObjectRetain(v25);
    while (1)
    {
      sub_41300((uint64_t)&v38, (uint64_t)v41, &qword_1F0F10);
      v29 = *(_QWORD *)&v41[8];
      if (!*(_QWORD *)&v41[8])
      {
        swift_release(v14);
        goto LABEL_16;
      }
      v20 = *(_QWORD *)v41;
      sub_26DB8(&v42, (uint64_t)&v38);
      String.hash(into:)(a1, v20, v29);
      swift_bridgeObjectRelease(v29);
      sub_3DD40((uint64_t)&v38, (uint64_t)v34);
      v33 = 0;
      v31 = 0u;
      v32 = 0u;
      sub_3DC8C((uint64_t)v34, (uint64_t)&v31);
      v35 = v31;
      v36 = v32;
      v37 = v33;
      AnyCodableContainer.hash(into:)(a1);
      sub_3DEE0(&v35);
      result = sub_62F8(&v38);
      if (v18)
        goto LABEL_35;
LABEL_37:
      v26 = v13 + 1;
      if (__OFADD__(v13, 1))
      {
        __break(1u);
        goto LABEL_58;
      }
      if (v26 < v19)
      {
        v27 = *(_QWORD *)(v30 + 8 * v26);
        if (v27)
          goto LABEL_40;
        v28 = v13 + 2;
        ++v13;
        if (v26 + 1 < v19)
        {
          v27 = *(_QWORD *)(v30 + 8 * v28);
          if (v27)
            goto LABEL_43;
          v13 = v26 + 1;
          if (v26 + 2 < v19)
          {
            v27 = *(_QWORD *)(v30 + 8 * (v26 + 2));
            if (v27)
            {
              v26 += 2;
              goto LABEL_40;
            }
            v28 = v26 + 3;
            v13 = v26 + 2;
            if (v26 + 3 < v19)
              break;
          }
        }
      }
LABEL_54:
      v18 = 0;
      v40 = 0;
      memset(v39, 0, sizeof(v39));
      v38 = 0u;
    }
    v27 = *(_QWORD *)(v30 + 8 * v28);
    if (v27)
    {
LABEL_43:
      v26 = v28;
LABEL_40:
      v18 = (v27 - 1) & v27;
      v22 = __clz(__rbit64(v27)) + (v26 << 6);
      v13 = v26;
      continue;
    }
    break;
  }
  while (1)
  {
    v26 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v26 >= v19)
    {
      v13 = v19 - 1;
      goto LABEL_54;
    }
    v27 = *(_QWORD *)(v30 + 8 * v26);
    ++v28;
    if (v27)
      goto LABEL_40;
  }
LABEL_58:
  __break(1u);
  return result;
}

Swift::Int AnyCodableContainer.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  AnyCodableContainer.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_2B834@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AnyCodableContainer.init(from:)(a1, a2);
}

uint64_t sub_2B848(_QWORD *a1)
{
  return AnyCodableContainer.encode(to:)(a1);
}

Swift::Int sub_2B864(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  AnyCodableContainer.hash(into:)((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t AnyCodableContainer.init(stringLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD v4[5];

  v4[3] = &type metadata for String;
  v4[4] = &protocol witness table for String;
  v4[0] = a1;
  v4[1] = a2;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_QWORD *)(a3 + 32) = 0;
  return sub_3DC8C((uint64_t)v4, a3);
}

uint64_t sub_2B8E8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[5];

  v3 = *a1;
  v4 = a1[1];
  v6[3] = &type metadata for String;
  v6[4] = &protocol witness table for String;
  v6[0] = v3;
  v6[1] = v4;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 32) = 0;
  return sub_3DC8C((uint64_t)v6, a2);
}

uint64_t AnyCodableContainer.init(nilLiteral:)@<X0>(uint64_t a1@<X8>)
{
  _OWORD v2[2];
  uint64_t v3;

  v3 = 0;
  memset(v2, 0, sizeof(v2));
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  return sub_3DC8C((uint64_t)v2, a1);
}

uint64_t AnyCodableContainer.init(integerLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD v3[5];

  v3[3] = &type metadata for Int;
  v3[4] = &protocol witness table for Int;
  v3[0] = a1;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 32) = 0;
  return sub_3DC8C((uint64_t)v3, a2);
}

uint64_t sub_2B9B4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD v5[5];

  v3 = *a1;
  v5[3] = &type metadata for Int;
  v5[4] = &protocol witness table for Int;
  v5[0] = v3;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 32) = 0;
  return sub_3DC8C((uint64_t)v5, a2);
}

uint64_t AnyCodableContainer.init(floatLiteral:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  _QWORD v3[5];

  v3[3] = &type metadata for Double;
  v3[4] = &protocol witness table for Double;
  *(double *)v3 = a2;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  return sub_3DC8C((uint64_t)v3, a1);
}

uint64_t sub_2BA48@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD v4[5];

  v2 = *a1;
  v4[3] = &type metadata for Double;
  v4[4] = &protocol witness table for Double;
  v4[0] = v2;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 32) = 0;
  return sub_3DC8C((uint64_t)v4, a2);
}

uint64_t AnyCodableContainer.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD v5[5];

  v5[3] = sub_5EDC(&qword_1F0EB8);
  v5[4] = sub_3EDBC(&qword_1F0EC0, &qword_1F0EB8, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v5[0] = a1;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 32) = 0;
  return sub_3DC8C((uint64_t)v5, a2);
}

uint64_t AnyCodableContainer.init(dictionaryLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    sub_5EDC(&qword_1F0F18);
    v5 = (void *)static _DictionaryStorage.allocate(capacity:)(v4);
  }
  else
  {
    v5 = &_swiftEmptyDictionarySingleton;
  }
  v9[0] = v5;
  v6 = swift_bridgeObjectRetain(a1);
  sub_39B44(v6, 1, v9);
  swift_bridgeObjectRelease(a1);
  v7 = v9[0];
  v9[3] = sub_5EDC(&qword_1F0EA8);
  v9[4] = sub_3EDBC(&qword_1F0EB0, &qword_1F0EA8, (uint64_t)&protocol conformance descriptor for <> [A : B]);
  v9[0] = v7;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 32) = 0;
  return sub_3DC8C((uint64_t)v9, a2);
}

BooksPersonalization::AnyCodableObjectContainer __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AnyCodableObjectContainer.init(untypedValue:)(Swift::OpaquePointer untypedValue)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  BooksPersonalization::AnyCodableObjectContainer result;

  v4 = v1;
  v5 = sub_31CEC((uint64_t)untypedValue._rawValue);
  result.value._rawValue = (void *)swift_bridgeObjectRelease(untypedValue._rawValue);
  if (!v2)
    *v4 = v5;
  return result;
}

uint64_t AnyCodableObjectContainer.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = a1[3];
  v6 = a1[4];
  sub_49F4(a1, v5);
  dispatch thunk of Decoder.singleValueContainer()(v14, v5, v6);
  if (!v2)
  {
    v7 = v15;
    v8 = v16;
    sub_49F4(v14, v15);
    v9 = sub_5EDC(&qword_1F0E98);
    v10 = sub_3DDC0(&qword_1F0EA0, (void (*)(void))sub_3DCD4, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)(&v17, v9, v9, v10, v7, v8);
    v11 = v17;
    v12 = sub_31F50(v17);
    swift_bridgeObjectRelease(v11);
    sub_62F8(v14);
    *a2 = v12;
  }
  return sub_62F8(a1);
}

uint64_t AnyCodableObjectContainer.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v2 = *v1;
  v3 = a1[3];
  v4 = a1[4];
  sub_49F4(a1, v3);
  dispatch thunk of Encoder.singleValueContainer()(v12, v3, v4);
  v5 = sub_32184(v2);
  v11 = v5;
  v6 = v13;
  v7 = v14;
  sub_3DD18((uint64_t)v12, v13);
  v8 = sub_5EDC(&qword_1F0E98);
  v9 = sub_3DDC0(&qword_1F0ED8, (void (*)(void))sub_3DE34, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)(&v11, v8, v9, v6, v7);
  swift_release(v5);
  return sub_62F8(v12);
}

uint64_t AnyCodableObjectContainer.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _BYTE v24[40];
  _OWORD v25[2];
  uint64_t v26;
  __int128 v27;
  _OWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = *v1;
  v19 = *v1 + 64;
  v4 = 1 << *(_BYTE *)(*v1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(*v1 + 64);
  v20 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain(v3);
  v8 = 0;
  if (!v6)
    goto LABEL_8;
LABEL_6:
  v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v11 = v10 | (v8 << 6);
  while (2)
  {
    v12 = *(_QWORD *)(v3 + 56);
    v13 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
    v14 = v13[1];
    *(_QWORD *)&v27 = *v13;
    *((_QWORD *)&v27 + 1) = v14;
    sub_418BC(v12 + 40 * v11, (uint64_t)v28, &qword_1F0E70);
    swift_bridgeObjectRetain(v14);
    while (1)
    {
      sub_41300((uint64_t)&v27, (uint64_t)&v30, &qword_1F0F20);
      v18 = v31;
      if (!v31)
        return swift_release(v3);
      v9 = v30;
      sub_41300((uint64_t)&v32, (uint64_t)&v27, &qword_1F0E70);
      String.hash(into:)(a1, v9, v18);
      swift_bridgeObjectRelease(v18);
      sub_418BC((uint64_t)&v27, (uint64_t)v24, &qword_1F0E70);
      v23 = 0;
      v21 = 0u;
      v22 = 0u;
      sub_3DC8C((uint64_t)v24, (uint64_t)&v21);
      v25[0] = v21;
      v25[1] = v22;
      v26 = v23;
      AnyCodableContainer.hash(into:)(a1);
      sub_3DEE0(v25);
      result = sub_417D8((uint64_t)&v27, &qword_1F0E70);
      if (v6)
        goto LABEL_6;
LABEL_8:
      v15 = v8 + 1;
      if (__OFADD__(v8, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v15 < v20)
      {
        v16 = *(_QWORD *)(v19 + 8 * v15);
        if (v16)
          goto LABEL_11;
        v17 = v8 + 2;
        ++v8;
        if (v15 + 1 < v20)
        {
          v16 = *(_QWORD *)(v19 + 8 * v17);
          if (v16)
            goto LABEL_14;
          v8 = v15 + 1;
          if (v15 + 2 < v20)
          {
            v16 = *(_QWORD *)(v19 + 8 * (v15 + 2));
            if (v16)
            {
              v15 += 2;
              goto LABEL_11;
            }
            v17 = v15 + 3;
            v8 = v15 + 2;
            if (v15 + 3 < v20)
              break;
          }
        }
      }
LABEL_25:
      v6 = 0;
      v29 = 0;
      memset(v28, 0, sizeof(v28));
      v27 = 0u;
    }
    v16 = *(_QWORD *)(v19 + 8 * v17);
    if (v16)
    {
LABEL_14:
      v15 = v17;
LABEL_11:
      v6 = (v16 - 1) & v16;
      v11 = __clz(__rbit64(v16)) + (v15 << 6);
      v8 = v15;
      continue;
    }
    break;
  }
  while (1)
  {
    v15 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v15 >= v20)
    {
      v8 = v20 - 1;
      goto LABEL_25;
    }
    v16 = *(_QWORD *)(v19 + 8 * v15);
    ++v17;
    if (v16)
      goto LABEL_11;
  }
LABEL_29:
  __break(1u);
  return result;
}

Swift::Int AnyCodableObjectContainer.hashValue.getter()
{
  return sub_2C6B4((void (*)(_QWORD *))AnyCodableObjectContainer.hash(into:));
}

uint64_t sub_2C110@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return AnyCodableObjectContainer.init(from:)(a1, a2);
}

uint64_t sub_2C124(_QWORD *a1)
{
  return AnyCodableObjectContainer.encode(to:)(a1);
}

Swift::Int sub_2C138(uint64_t a1, uint64_t a2)
{
  return sub_2C734(a1, a2, (void (*)(_QWORD *))AnyCodableObjectContainer.hash(into:));
}

Swift::Int sub_2C148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2C790(a1, a2, a3, (void (*)(_QWORD *))AnyCodableObjectContainer.hash(into:));
}

uint64_t AnyCodableObjectContainer.init(dictionaryLiteral:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t result;
  void *v8;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    sub_5EDC(&qword_1F0F18);
    v5 = (void *)static _DictionaryStorage.allocate(capacity:)(v4);
  }
  else
  {
    v5 = &_swiftEmptyDictionarySingleton;
  }
  v8 = v5;
  v6 = swift_bridgeObjectRetain(a1);
  sub_39B44(v6, 1, &v8);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v8;
  return result;
}

BooksPersonalization::AnyCodableArrayContainer __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AnyCodableArrayContainer.init(untypedValue:)(Swift::OpaquePointer untypedValue)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  BooksPersonalization::AnyCodableArrayContainer result;

  v4 = v1;
  v5 = sub_3E088((uint64_t)untypedValue._rawValue);
  result.value._rawValue = (void *)swift_bridgeObjectRelease(untypedValue._rawValue);
  if (!v2)
    *v4 = v5;
  return result;
}

uint64_t AnyCodableArrayContainer.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = a1[3];
  v6 = a1[4];
  sub_49F4(a1, v5);
  dispatch thunk of Decoder.singleValueContainer()(v14, v5, v6);
  if (!v2)
  {
    v7 = v15;
    v8 = v16;
    sub_49F4(v14, v15);
    v9 = sub_5EDC(&qword_1F0E80);
    v10 = sub_3DE78(&qword_1F0E88, (void (*)(void))sub_3DCD4, (uint64_t)&protocol conformance descriptor for <A> [A]);
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)(&v17, v9, v9, v10, v7, v8);
    v11 = v17;
    v12 = sub_274C8(v17);
    swift_bridgeObjectRelease(v11);
    sub_62F8(v14);
    *a2 = v12;
  }
  return sub_62F8(a1);
}

uint64_t AnyCodableArrayContainer.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _BYTE v21[40];
  _BYTE v22[40];
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v2 = *v1;
  v3 = a1[3];
  v4 = a1[4];
  sub_49F4(a1, v3);
  dispatch thunk of Encoder.singleValueContainer()(v26, v3, v4);
  v5 = *(_QWORD *)(v2 + 16);
  v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    v29 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v2);
    sub_34174(0, v5, 0);
    v7 = v2 + 32;
    v6 = v29;
    do
    {
      sub_418BC(v7, (uint64_t)v22, &qword_1F0E70);
      sub_418BC((uint64_t)v22, (uint64_t)v21, &qword_1F0E70);
      v20 = 0;
      v18 = 0u;
      v19 = 0u;
      sub_3DC8C((uint64_t)v21, (uint64_t)&v18);
      v23 = v18;
      v24 = v19;
      v25 = v20;
      sub_417D8((uint64_t)v22, &qword_1F0E70);
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
      {
        sub_34174(0, v6[2] + 1, 1);
        v6 = v29;
      }
      v9 = v6[2];
      v8 = v6[3];
      if (v9 >= v8 >> 1)
      {
        sub_34174(v8 > 1, v9 + 1, 1);
        v6 = v29;
      }
      v6[2] = v9 + 1;
      v10 = &v6[5 * v9];
      v11 = v23;
      v12 = v24;
      v10[8] = v25;
      *((_OWORD *)v10 + 2) = v11;
      *((_OWORD *)v10 + 3) = v12;
      v7 += 40;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease(v2);
  }
  *(_QWORD *)&v23 = v6;
  v13 = v27;
  v14 = v28;
  sub_3DD18((uint64_t)v26, v27);
  v15 = sub_5EDC(&qword_1F0E80);
  v16 = sub_3DE78(&qword_1F0EE8, (void (*)(void))sub_3DE34, (uint64_t)&protocol conformance descriptor for <A> [A]);
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)(&v23, v15, v16, v13, v14);
  swift_bridgeObjectRelease(v6);
  return sub_62F8(v26);
}

uint64_t static AnyCodableArrayContainer.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *a1;
  v3 = *a2;
  if (*(_QWORD *)(*a1 + 16) == *(_QWORD *)(*a2 + 16))
  {
    swift_bridgeObjectRetain(*a1);
    swift_bridgeObjectRetain(v3);
    v4 = sub_2ACDC(v2, v3);
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(v2);
  }
  else
  {
    v4 = 0;
  }
  return v4 & 1;
}

uint64_t AnyCodableArrayContainer.hash(into:)(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _BYTE v9[40];
  _OWORD v10[2];
  uint64_t v11;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 16);
  if (v3)
  {
    v4 = result;
    v5 = v2 + 32;
    swift_bridgeObjectRetain(*v1);
    do
    {
      sub_418BC(v5, (uint64_t)v9, &qword_1F0E70);
      v8 = 0;
      v6 = 0u;
      v7 = 0u;
      sub_3DC8C((uint64_t)v9, (uint64_t)&v6);
      v10[0] = v6;
      v10[1] = v7;
      v11 = v8;
      AnyCodableContainer.hash(into:)(v4);
      sub_3DEE0(v10);
      v5 += 40;
      --v3;
    }
    while (v3);
    return swift_bridgeObjectRelease(v2);
  }
  return result;
}

Swift::Int AnyCodableArrayContainer.hashValue.getter()
{
  return sub_2C6B4((void (*)(_QWORD *))AnyCodableArrayContainer.hash(into:));
}

Swift::Int sub_2C6B4(void (*a1)(_QWORD *))
{
  _QWORD *v1;
  _QWORD v4[10];

  v4[9] = *v1;
  Hasher.init(_seed:)(v4, 0);
  a1(v4);
  return Hasher._finalize()();
}

uint64_t sub_2C700@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return AnyCodableArrayContainer.init(from:)(a1, a2);
}

uint64_t sub_2C714(_QWORD *a1)
{
  return AnyCodableArrayContainer.encode(to:)(a1);
}

Swift::Int sub_2C728(uint64_t a1, uint64_t a2)
{
  return sub_2C734(a1, a2, (void (*)(_QWORD *))AnyCodableArrayContainer.hash(into:));
}

Swift::Int sub_2C734(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *))
{
  _QWORD *v3;
  _QWORD v6[10];

  v6[9] = *v3;
  Hasher.init(_seed:)(v6, 0);
  a3(v6);
  return Hasher._finalize()();
}

Swift::Int sub_2C784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2C790(a1, a2, a3, (void (*)(_QWORD *))AnyCodableArrayContainer.hash(into:));
}

Swift::Int sub_2C790(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *))
{
  _QWORD *v4;
  _QWORD v7[10];

  v7[9] = *v4;
  Hasher.init(_seed:)(v7, a1);
  a4(v7);
  return Hasher._finalize()();
}

void CommonErrorPayload.description.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_2C810()
{
  unint64_t v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  void *object;

  swift_bridgeObjectRetain(v0);
  _StringGuts.grow(_:)(59);
  v2._countAndFlagsBits = 0xD000000000000039;
  v2._object = (void *)0x800000000019FC30;
  String.append(_:)(v2);
  v3 = sub_3E000(128, v1, v0);
  v5 = v4;
  v7 = v6;
  v9 = v8;
  sub_3E260(v1, v0, 0);
  v10._countAndFlagsBits = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))static String._fromSubstring(_:))(v3, v5, v7, v9);
  object = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(object);
  return 0;
}

void sub_2CB30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x2CC78);
}

int64_t sub_2CCB0(int64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = *(_QWORD *)(a2 + 16);
    if ((uint64_t)v2 >= result)
      v3 = result;
    else
      v3 = *(_QWORD *)(a2 + 16);
    if (!result)
      v3 = 0;
    if (v2 >= v3)
      return a2;
  }
  __break(1u);
  return result;
}

void CommonErrorPayload.errorDescription.getter()
{
  CommonErrorPayload.description.getter();
}

uint64_t static APICommonHelpers.utf8Data(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = type metadata accessor for String.Encoding(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter(v6);
  v9 = String.data(using:allowLossyConversion:)(v8, 0, a1, a2);
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  if (v11 >> 60 == 15)
  {
    v12 = sub_3E298();
    swift_allocError(&type metadata for CommonErrorPayload, v12, 0, 0);
    *(_QWORD *)v13 = a1;
    *(_QWORD *)(v13 + 8) = a2;
    *(_BYTE *)(v13 + 16) = 0;
    v14 = swift_bridgeObjectRetain(a2);
    swift_willThrow(v14);
  }
  return v9;
}

uint64_t static APICommonHelpers.string(from:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = type metadata accessor for String.Encoding(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter(v5);
  result = String.init(data:encoding:)(a1, a2, v7);
  if (!v9)
  {
    v10 = sub_3E298();
    swift_allocError(&type metadata for CommonErrorPayload, v10, 0, 0);
    *(_QWORD *)v11 = a1;
    *(_QWORD *)(v11 + 8) = a2;
    *(_BYTE *)(v11 + 16) = 1;
    v12 = sub_3E1D8(a1, a2);
    return swift_willThrow(v12);
  }
  return result;
}

uint64_t static APICommonHelpers.ensureNoAdditionalProperties(in:knownKeys:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  uint64_t v17;
  Swift::String v18;
  void *object;
  Swift::String v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  uint64_t v27;
  unint64_t v28;
  uint64_t v29[2];

  v5 = sub_5EDC(&qword_1F0F30);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_2D174((uint64_t)v8, a1, a2);
  if (!v2)
  {
    v10 = result;
    if (*(_QWORD *)(result + 16))
    {
      v11 = swift_bridgeObjectRetain(result);
      v12 = sub_38D30(v11, &qword_1F1328, (uint64_t (*)(_QWORD *, _QWORD *, uint64_t, uint64_t))sub_3B450, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_41960);
      swift_bridgeObjectRelease(v10);
      v29[0] = (uint64_t)v12;
      sub_2F53C(v29);
      v13 = v29[0];
      if (*(_QWORD *)(v29[0] + 16))
      {
        v14 = *(_QWORD *)(v29[0] + 32);
        v15 = *(_QWORD *)(v29[0] + 40);
        swift_bridgeObjectRetain(v15);
        swift_release(v13);
        v29[0] = v14;
        v29[1] = v15;
        v27 = 0;
        v28 = 0xE000000000000000;
        _StringGuts.grow(_:)(77);
        v16._countAndFlagsBits = 0xD00000000000002ELL;
        v16._object = (void *)0x800000000019FC70;
        String.append(_:)(v16);
        v17 = *(_QWORD *)(v10 + 16);
        swift_bridgeObjectRelease(v10);
        v26[1] = v17;
        v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        object = v18._object;
        String.append(_:)(v18);
        swift_bridgeObjectRelease(object);
        v20._object = (void *)0x800000000019FCA0;
        v20._countAndFlagsBits = 0xD00000000000001DLL;
        String.append(_:)(v20);
        v21 = v27;
        v22 = v28;
        v23 = type metadata accessor for DecodingError(0);
        swift_allocError(v23, &protocol witness table for DecodingError, 0, 0);
        v24 = sub_3EDBC(&qword_1F0F38, &qword_1F0F30, (uint64_t)&protocol conformance descriptor for KeyedDecodingContainer<A>);
        static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)(v29, v8, v21, v22, v5, v24);
        swift_bridgeObjectRelease(v15);
        v25 = swift_bridgeObjectRelease(v22);
        swift_willThrow(v25);
        return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      }
      else
      {
        swift_release(v29[0]);
        __break(1u);
        result = swift_release(v29[0]);
        __break(1u);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      return swift_bridgeObjectRelease(v10);
    }
  }
  return result;
}

uint64_t sub_2D174(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char v25;
  unint64_t *v26;
  char v27;

  v5 = a2[3];
  v6 = a2[4];
  sub_49F4(a2, v5);
  v7 = sub_3E314();
  result = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for APICommonHelpers.StringKey, &type metadata for APICommonHelpers.StringKey, v7, v5, v6);
  if (!v3)
  {
    v9 = sub_5EDC(&qword_1F0F30);
    v10 = KeyedDecodingContainer.allKeys.getter(v9);
    v11 = sub_3D7E4(v10);
    swift_bridgeObjectRelease(v10);
    v12 = *(_QWORD *)(a3 + 16);
    if (v12)
    {
      sub_34190(0, v12, 0);
      result = sub_EDD8C(a3);
      v13 = result;
      v15 = v14;
      v17 = v16 & 1;
      while ((v13 & 0x8000000000000000) == 0 && v13 < 1 << *(_BYTE *)(a3 + 32))
      {
        if (((*(_QWORD *)(a3 + 56 + (((unint64_t)v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
          goto LABEL_15;
        if (*(_DWORD *)(a3 + 36) != (_DWORD)v15)
          goto LABEL_16;
        v27 = v17;
        v18 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v13);
        v19 = *v18;
        v20 = v18[1];
        v22 = _swiftEmptyArrayStorage[2];
        v21 = _swiftEmptyArrayStorage[3];
        swift_bridgeObjectRetain(v20);
        if (v22 >= v21 >> 1)
          sub_34190(v21 > 1, v22 + 1, 1);
        _swiftEmptyArrayStorage[2] = v22 + 1;
        v23 = &_swiftEmptyArrayStorage[2 * v22];
        v23[4] = v19;
        v23[5] = v20;
        result = sub_EDE30(v13, v15, v27 & 1, a3);
        v13 = result;
        v15 = v24;
        v17 = v25 & 1;
        if (!--v12)
        {
          sub_41814(result, v24, v17);
          goto LABEL_12;
        }
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
    }
    else
    {
LABEL_12:
      v26 = sub_C2B74((uint64_t)_swiftEmptyArrayStorage, v11);
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      return (uint64_t)v26;
    }
  }
  return result;
}

uint64_t static APICommonHelpers.decodeAdditionalProperties(in:knownKeys:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;

  v7 = sub_5EDC(&qword_1F0F30);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_2D174((uint64_t)v10, a1, a2);
  if (!v3)
  {
    v12 = result;
    if (*(_QWORD *)(result + 16))
    {
      __chkstk_darwin(result);
      *(&v17 - 2) = (uint64_t)v10;
      v13 = sub_275B8((void (*)(_OWORD *__return_ptr, _QWORD *, uint64_t *))sub_3E2DC, (uint64_t)(&v17 - 4), v12);
      swift_bridgeObjectRelease(v12);
      v14 = *(_QWORD *)(v13 + 16);
      if (v14)
      {
        sub_5EDC(&qword_1F0F18);
        v15 = (void *)static _DictionaryStorage.allocate(capacity:)(v14);
      }
      else
      {
        v15 = &_swiftEmptyDictionarySingleton;
      }
      v18 = v15;
      v16 = swift_bridgeObjectRetain(v13);
      sub_39B44(v16, 1, &v18);
      swift_bridgeObjectRelease(v13);
    }
    else
    {
      swift_bridgeObjectRelease(result);
      v18 = &_swiftEmptyDictionarySingleton;
      sub_39B44((uint64_t)_swiftEmptyArrayStorage, 1, &v18);
    }
    *a3 = v18;
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  return result;
}

uint64_t sub_2D564@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  _QWORD v11[2];
  _QWORD v12[5];

  v6 = *a1;
  v7 = a1[1];
  *a3 = *a1;
  a3[1] = v7;
  v11[0] = v6;
  v11[1] = v7;
  swift_bridgeObjectRetain(v7);
  v8 = sub_5EDC(&qword_1F0F30);
  v9 = sub_3DCD4();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v12, &type metadata for AnyCodableContainer, v11, v8, &type metadata for AnyCodableContainer, v9);
  if (!v3)
    return sub_41300((uint64_t)v12, (uint64_t)(a3 + 2), &qword_1F0E70);
  result = swift_bridgeObjectRelease(v7);
  *a2 = v3;
  return result;
}

uint64_t static APICommonHelpers.decodeAdditionalProperties<A>(in:knownKeys:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t WitnessTable;
  uint64_t v22;
  _QWORD v24[2];
  uint64_t v25;

  v9 = sub_5EDC(&qword_1F0F30);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_2D174((uint64_t)v12, a1, a2);
  if (!v4)
  {
    v14 = v13;
    if (*(_QWORD *)(v13 + 16))
    {
      v24[1] = v24;
      v25 = v13;
      __chkstk_darwin(v13);
      v24[-4] = a3;
      v24[-3] = a4;
      v24[-2] = v12;
      v24[0] = sub_5EDC(&qword_1F0F40);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, &type metadata for String, a3, 0, 0);
      v16 = sub_3EDBC(&qword_1F0F48, &qword_1F0F40, (uint64_t)&protocol conformance descriptor for Set<A>);
      v19 = Sequence.compactMap<A>(_:)(sub_3E2F8, &v24[-6], v24[0], TupleTypeMetadata2, v16);
      swift_bridgeObjectRelease(v14);
      v25 = v19;
      v20 = type metadata accessor for Array(0);
      WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v20);
      v22 = Dictionary.init<A>(uniqueKeysWithValues:)(&v25, &type metadata for String, a3, v20, &protocol witness table for String, WitnessTable);
    }
    else
    {
      swift_bridgeObjectRelease(v13);
      v17 = swift_getTupleTypeMetadata2(0, &type metadata for String, a3, 0, 0);
      v18 = static Array._allocateUninitialized(_:)(0, v17);
      v22 = Dictionary.init(dictionaryLiteral:)(v18, &type metadata for String, a3, &protocol witness table for String);
    }
    a4 = v22;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return a4;
}

uint64_t sub_2D870@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v14[2];

  v9 = *a1;
  v8 = a1[1];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, &type metadata for String, a2, 0, 0);
  v11 = (_QWORD *)((char *)a4 + *(int *)(TupleTypeMetadata2 + 48));
  *a4 = v9;
  a4[1] = v8;
  v14[0] = v9;
  v14[1] = v8;
  swift_bridgeObjectRetain(v8);
  v12 = sub_5EDC(&qword_1F0F30);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v11, a2, v14, v12, a2, a3);
  if (v4)
    return swift_bridgeObjectRelease(v8);
  else
    return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(a4, 0, 1, TupleTypeMetadata2);
}

_QWORD *static APICommonHelpers.encodeAdditionalProperties(_:into:)(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _QWORD v37[5];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 *v45;

  v5 = sub_5EDC(&qword_1F0F50);
  result = (_QWORD *)__chkstk_darwin(v5);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  if (!*(_QWORD *)(v10 + 16))
    return result;
  v31 = v7;
  v11 = a2[3];
  v12 = a2[4];
  sub_49F4(a2, v11);
  v13 = sub_3E314();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for APICommonHelpers.StringKey, &type metadata for APICommonHelpers.StringKey, v13, v11, v12);
  v14 = *(_QWORD *)(v10 + 64);
  v32 = v10 + 64;
  v15 = 1 << *(_BYTE *)(v10 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v45 = &v39;
  v33 = (unint64_t)(v15 + 63) >> 6;
  v30 = v33 - 1;
  result = (_QWORD *)swift_bridgeObjectRetain(v10);
  v18 = 0;
  while (1)
  {
    if (v17)
    {
      v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v20 = v19 | (v18 << 6);
      goto LABEL_7;
    }
    v24 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v24 < v33)
    {
      v25 = *(_QWORD *)(v32 + 8 * v24);
      if (v25)
        goto LABEL_11;
      v18 += 2;
      if (v24 + 1 >= v33)
      {
        v18 = v24;
        goto LABEL_16;
      }
      v25 = *(_QWORD *)(v32 + 8 * v18);
      if (v25)
      {
        ++v24;
        goto LABEL_11;
      }
      if (v24 + 2 < v33)
        break;
    }
LABEL_16:
    v17 = 0;
    v41 = 0;
    v39 = 0u;
    v40 = 0u;
    v38 = 0u;
LABEL_17:
    sub_41300((uint64_t)&v38, (uint64_t)&v42, &qword_1F0F20);
    v26 = v43;
    if (v43)
    {
      v27 = v42;
      sub_41300((uint64_t)&v44, (uint64_t)v37, &qword_1F0E70);
      v36 = 0;
      v35 = 0u;
      v34 = 0u;
      sub_3DC8C((uint64_t)v37, (uint64_t)&v34);
      v38 = v34;
      v39 = v35;
      *(_QWORD *)&v40 = v36;
      v37[0] = v27;
      v37[1] = v26;
      v28 = sub_3DE34();
      KeyedEncodingContainer.encode<A>(_:forKey:)(&v38, v37, v5, &type metadata for AnyCodableContainer, v28);
      swift_bridgeObjectRelease(v26);
      result = sub_3DEE0(&v38);
      if (!v2)
        continue;
    }
    swift_release(v10);
    return (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v9, v5);
  }
  v25 = *(_QWORD *)(v32 + 8 * (v24 + 2));
  if (v25)
  {
    v24 += 2;
    goto LABEL_11;
  }
  v29 = v24 + 3;
  if (v24 + 3 >= v33)
  {
    v18 = v24 + 2;
    goto LABEL_16;
  }
  v25 = *(_QWORD *)(v32 + 8 * v29);
  if (v25)
  {
    v24 += 3;
LABEL_11:
    v17 = (v25 - 1) & v25;
    v20 = __clz(__rbit64(v25)) + (v24 << 6);
    v18 = v24;
LABEL_7:
    v21 = *(_QWORD *)(v10 + 56);
    v22 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v20);
    v23 = v22[1];
    *(_QWORD *)&v38 = *v22;
    *((_QWORD *)&v38 + 1) = v23;
    sub_418BC(v21 + 40 * v20, (uint64_t)v45, &qword_1F0E70);
    swift_bridgeObjectRetain(v23);
    goto LABEL_17;
  }
  while (1)
  {
    v24 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v24 >= v33)
    {
      v18 = v30;
      goto LABEL_16;
    }
    v25 = *(_QWORD *)(v32 + 8 * v24);
    ++v29;
    if (v25)
      goto LABEL_11;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t static APICommonHelpers.encodeAdditionalProperties<A>(_:into:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  char *v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t TupleTypeMetadata2;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[2];
  uint64_t v62;

  v54 = a4;
  v60 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v53 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for String, v8, "key value ", 0);
  v9 = type metadata accessor for Optional(0, TupleTypeMetadata2);
  v55 = *(_QWORD *)(v9 - 8);
  v56 = v9;
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (int64_t *)((char *)&v47 - v13);
  v58 = sub_5EDC(&qword_1F0F50);
  v15 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = a3;
  result = Dictionary.isEmpty.getter(a1, &type metadata for String, a3, &protocol witness table for String);
  if ((result & 1) != 0)
    return result;
  v48 = v15;
  v20 = a2[3];
  v19 = a2[4];
  sub_49F4(a2, v20);
  v21 = sub_3E314();
  v52 = v17;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for APICommonHelpers.StringKey, &type metadata for APICommonHelpers.StringKey, v21, v20, v19);
  v22 = *(_QWORD *)(a1 + 64);
  v49 = a1 + 64;
  v23 = 1 << *(_BYTE *)(a1 + 32);
  v24 = -1;
  if (v23 < 64)
    v24 = ~(-1 << v23);
  v25 = a1;
  v26 = v24 & v22;
  v50 = (unint64_t)(v23 + 63) >> 6;
  v51 = v25;
  v47 = v50 - 1;
  result = swift_bridgeObjectRetain(v25);
  v27 = 0;
  v28 = v60;
  v29 = TupleTypeMetadata2;
  if (!v26)
    goto LABEL_7;
LABEL_5:
  v30 = __clz(__rbit64(v26));
  v26 &= v26 - 1;
  v31 = v30 | (v27 << 6);
LABEL_6:
  v32 = *(_QWORD *)(v51 + 56);
  v33 = (_QWORD *)(*(_QWORD *)(v51 + 48) + 16 * v31);
  v34 = v33[1];
  *(_QWORD *)v12 = *v33;
  *((_QWORD *)v12 + 1) = v34;
  (*(void (**)(char *, unint64_t, uint64_t))(v60 + 16))(&v12[*(int *)(v29 + 48)], v32 + *(_QWORD *)(v60 + 72) * v31, v59);
  v35 = *(_QWORD *)(v29 - 8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v12, 0, 1, v29);
  swift_bridgeObjectRetain(v34);
  while (1)
  {
    (*(void (**)(uint64_t *, char *, uint64_t))(v55 + 32))(v14, v12, v56);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v35 + 48))(v14, 1, v29) == 1)
      goto LABEL_28;
    v38 = v12;
    v39 = v27;
    v40 = *v14;
    v41 = v14[1];
    v42 = (char *)v14 + *(int *)(v29 + 48);
    v43 = v53;
    v44 = v59;
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v53, v42, v59);
    v61[0] = v40;
    v61[1] = v41;
    v45 = v62;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v43, v61, v58, v44, v54);
    swift_bridgeObjectRelease(v41);
    result = (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v43, v44);
    v62 = v45;
    if (v45)
    {
LABEL_28:
      swift_release(v51);
      return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v52, v58);
    }
    v27 = v39;
    v12 = v38;
    v29 = TupleTypeMetadata2;
    if (v26)
      goto LABEL_5;
LABEL_7:
    v36 = v27 + 1;
    if (__OFADD__(v27, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v36 < v50)
    {
      v37 = *(_QWORD *)(v49 + 8 * v36);
      if (v37)
        goto LABEL_10;
      v27 += 2;
      if (v36 + 1 >= v50)
      {
        v27 = v36;
        goto LABEL_15;
      }
      v37 = *(_QWORD *)(v49 + 8 * v27);
      if (v37)
      {
        ++v36;
LABEL_10:
        v26 = (v37 - 1) & v37;
        v31 = __clz(__rbit64(v37)) + (v36 << 6);
        v27 = v36;
        goto LABEL_6;
      }
      v46 = v36 + 2;
      if (v36 + 2 < v50)
        break;
    }
LABEL_15:
    v35 = *(_QWORD *)(v29 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56))(v12, 1, 1, v29);
    v26 = 0;
  }
  v37 = *(_QWORD *)(v49 + 8 * v46);
  if (v37)
  {
    v36 += 2;
    goto LABEL_10;
  }
  while (1)
  {
    v36 = v46 + 1;
    if (__OFADD__(v46, 1))
      break;
    if (v36 >= v50)
    {
      v27 = v47;
      goto LABEL_15;
    }
    v37 = *(_QWORD *)(v49 + 8 * v36);
    ++v46;
    if (v37)
      goto LABEL_10;
  }
LABEL_31:
  __break(1u);
  return result;
}

_QWORD *static APICommonHelpers.validateContentTypeIfPresent(_:in:)(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  return sub_3E938(a1, a2, a3);
}

uint64_t sub_2E12C(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  char v23;
  _QWORD v24[3];

  v3 = HIBYTE(a2) & 0xF;
  v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v5 = v3;
  else
    v5 = result & 0xFFFFFFFFFFFFLL;
  if (!v5)
    return 0;
  v6 = result;
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0)
        v7 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(result, a2);
      v8 = (uint64_t)sub_3AD18(v7, v4, 10);
      v10 = v9 & 1;
      goto LABEL_44;
    }
    v24[0] = result;
    v24[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3)
        goto LABEL_57;
      if (v3 == 1 || (BYTE1(result) - 48) > 9u)
        goto LABEL_31;
      v8 = (BYTE1(result) - 48);
      if (v3 != 2)
      {
        if ((BYTE2(result) - 48) > 9u)
          goto LABEL_31;
        v8 = 10 * (BYTE1(result) - 48) + (BYTE2(result) - 48);
        v11 = v3 - 3;
        if (v11)
        {
          v12 = (unsigned __int8 *)v24 + 3;
          while (1)
          {
            v13 = *v12 - 48;
            if (v13 > 9)
              goto LABEL_31;
            v14 = 10 * v8;
            if ((unsigned __int128)(v8 * (__int128)10) >> 64 != (10 * v8) >> 63)
              goto LABEL_31;
            v8 = v14 + v13;
            if (__OFADD__(v14, v13))
              goto LABEL_31;
            v10 = 0;
            ++v12;
            if (!--v11)
              goto LABEL_44;
          }
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            if (v3 == 2)
            {
              v10 = 0;
              v8 = -(uint64_t)(BYTE1(result) - 48);
              goto LABEL_44;
            }
            if ((BYTE2(result) - 48) <= 9u)
            {
              v8 = -10 * (BYTE1(result) - 48) - (BYTE2(result) - 48);
              v19 = v3 - 3;
              if (!v19)
                goto LABEL_43;
              v20 = (unsigned __int8 *)v24 + 3;
              while (1)
              {
                v21 = *v20 - 48;
                if (v21 > 9)
                  break;
                v22 = 10 * v8;
                if ((unsigned __int128)(v8 * (__int128)10) >> 64 != (10 * v8) >> 63)
                  break;
                v8 = v22 - v21;
                if (__OFSUB__(v22, v21))
                  break;
                v10 = 0;
                ++v20;
                if (!--v19)
                  goto LABEL_44;
              }
            }
          }
LABEL_31:
          v8 = 0;
          v10 = 1;
          goto LABEL_44;
        }
        __break(1u);
LABEL_57:
        __break(1u);
        return result;
      }
      if (!v3 || (result - 48) > 9u)
        goto LABEL_31;
      v8 = (result - 48);
      if (v3 != 1)
      {
        if ((BYTE1(result) - 48) > 9u)
          goto LABEL_31;
        v8 = 10 * (result - 48) + (BYTE1(result) - 48);
        v15 = v3 - 2;
        if (v15)
        {
          v16 = (unsigned __int8 *)v24 + 2;
          while (1)
          {
            v17 = *v16 - 48;
            if (v17 > 9)
              goto LABEL_31;
            v18 = 10 * v8;
            if ((unsigned __int128)(v8 * (__int128)10) >> 64 != (10 * v8) >> 63)
              goto LABEL_31;
            v8 = v18 + v17;
            if (__OFADD__(v18, v17))
              goto LABEL_31;
            v10 = 0;
            ++v16;
            if (!--v15)
              goto LABEL_44;
          }
        }
      }
    }
LABEL_43:
    v10 = 0;
    goto LABEL_44;
  }
  swift_bridgeObjectRetain(a2);
  v8 = sub_3A9AC(v6, a2, 10, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_3AD18);
  v10 = v23;
  swift_bridgeObjectRelease(a2);
LABEL_44:
  if ((v10 & 1) != 0)
    return 0;
  else
    return v8;
}

uint64_t sub_2E40C()
{
  uint64_t v0;

  return sub_2E12C(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

uint64_t sub_2E428@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t static Transport.Server.== infix(_:_:)(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (v4 == *a2 && v5 == v6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0);
}

Swift::Int Transport.Server.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4, 0);
  String.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_2E4E4(uint64_t a1)
{
  _QWORD *v1;

  return String.hash(into:)(a1, *v1, v1[1]);
}

Swift::Int sub_2E4EC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  String.hash(into:)(v5, v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_2E530(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (v4 == *a2 && v5 == v6)
    return 0;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 1);
}

uint64_t sub_2E560(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  if (v4 == v2 && v5 == v3)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v3, 1) ^ 1;
  return v7 & 1;
}

uint64_t sub_2E59C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (v4 == *a2 && v5 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 1) ^ 1;
  return v8 & 1;
}

uint64_t sub_2E5E4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  if (v4 == v2 && v5 == v3)
    return 0;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v3, 1);
}

uint64_t sub_2E608(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_3E314();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_2E630(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_3E314();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t DateConfiguration.EncoderInput.date.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t DateConfiguration.EncoderInput.date.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t DateConfiguration.EncoderInput.init(date:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

uint64_t sub_2E704@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)@<X0>(uint64_t *@<X8>);

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject(&unk_1DD7B8, 32, 7);
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_415F0;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v5;
  return sub_3EAFC(v3, v4);
}

uint64_t sub_2E768(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *(*v6)();
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject(&unk_1DD790, 32, 7);
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_415B8;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *a2;
  v8 = a2[1];
  sub_3EAFC(v3, v4);
  result = sub_3EB0C(v7, v8);
  *a2 = (uint64_t)v6;
  a2[1] = v5;
  return result;
}

uint64_t DateConfiguration.encoder.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  sub_3EAFC(*v0, v0[1]);
  return v1;
}

uint64_t DateConfiguration.encoder.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_3EB0C(*v2, v2[1]);
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t DateConfiguration.decoder.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_3EAFC(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t DateConfiguration.decoder.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_3EB0C(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t CommonConfiguration.date.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  sub_3EAFC(v2, v3);
  return sub_3EAFC(v4, v5);
}

__n128 CommonConfiguration.date.setter(__n128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __n128 v7;

  v7 = *a1;
  v2 = a1[1].n128_i64[0];
  v3 = a1[1].n128_i64[1];
  v4 = v1[2];
  v5 = v1[3];
  sub_3EB0C(*v1, v1[1]);
  sub_3EB0C(v4, v5);
  result = v7;
  *(__n128 *)v1 = v7;
  v1[2] = v2;
  v1[3] = v3;
  return result;
}

__n128 CommonConfiguration.init(date:)@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t DateConverter.init(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  id v9;
  id v10;
  uint64_t (*v11)@<X0>(uint64_t@<X8>);
  uint64_t result;
  id v13;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  if (*a1)
  {
    sub_3EAFC(*a1, v4);
    sub_3EAFC(v5, v6);
    v7 = (uint64_t (*)(uint64_t))v3;
    v8 = v4;
  }
  else
  {
    v9 = objc_allocWithZone((Class)NSISO8601DateFormatter);
    sub_3EAFC(0, v4);
    sub_3EAFC(v5, v6);
    v10 = objc_msgSend(v9, "init");
    v8 = swift_allocObject(&unk_1DD0A0, 24, 7);
    *(_QWORD *)(v8 + 16) = v10;
    v7 = sub_3EB40;
  }
  sub_3EAFC(v3, v4);
  if (v5)
  {
    sub_3EAFC(v5, v6);
    sub_3EB0C(v3, v4);
    sub_3EB0C(v5, v6);
    v11 = (uint64_t (*)@<X0>(uint64_t@<X8>))v5;
    result = v6;
  }
  else
  {
    sub_3EB0C(v3, v4);
    sub_3EB0C(0, v6);
    v13 = objc_msgSend(objc_allocWithZone((Class)NSISO8601DateFormatter), "init");
    result = swift_allocObject(&unk_1DD0C8, 24, 7);
    *(_QWORD *)(result + 16) = v13;
    v11 = sub_3EB58;
  }
  *a2 = v3;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  a2[4] = (uint64_t)v7;
  a2[5] = v8;
  a2[6] = (uint64_t)v11;
  a2[7] = result;
  return result;
}

uint64_t sub_2EAC8(uint64_t a1, void *a2)
{
  Class isa;
  id v4;
  uint64_t v5;

  isa = Date._bridgeToObjectiveC()().super.isa;
  v4 = objc_msgSend(a2, "stringFromDate:", isa);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  return v5;
}

uint64_t sub_2EB40@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  NSString v11;
  id v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5EDC(&qword_1F1310);
  __chkstk_darwin(v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(a1, "dateFromString:", v11);

  if (v12)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v12);

    v13 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    v13(v10, v7, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) != 1)
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v13)(a2, v10, v4);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, 1, 1, v4);
  }
  sub_417D8((uint64_t)v10, &qword_1F1310);
  v15 = type metadata accessor for DecodingError(0);
  swift_allocError(v15, &protocol witness table for DecodingError, 0, 0);
  v17 = v16;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(_swiftEmptyArrayStorage, 0xD00000000000002DLL, 0x800000000019FDD0, 0);
  v18 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v17, enum case for DecodingError.dataCorrupted(_:), v15);
  return swift_willThrow(v18);
}

uint64_t DateConverter.string(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(char *);
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = type metadata accessor for DateConfiguration.EncoderInput(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(uint64_t (**)(char *))(v1 + 32);
  v7 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, a1, v7);
  v8 = v6(v5);
  sub_3EBAC((uint64_t)v5);
  return v8;
}

uint64_t DateConverter.date(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void (*v4)(_QWORD *);
  _QWORD v6[2];

  v4 = *(void (**)(_QWORD *))(v2 + 48);
  v6[0] = a1;
  v6[1] = a2;
  swift_bridgeObjectRetain(a2);
  v4(v6);
  return swift_bridgeObjectRelease(a2);
}

uint64_t CommonConverter.date.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(_QWORD *)(v1 + 40);
  v4 = *(_QWORD *)(v1 + 48);
  v5 = *(_QWORD *)(v1 + 56);
  v6 = *(_QWORD *)(v1 + 64);
  v7 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  v9 = *(_OWORD *)(v1 + 72);
  *(_OWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 56) = v7;
  sub_3EAFC(v2, v3);
  sub_3EAFC(v4, v5);
  swift_retain(v9);
  return swift_retain(v7);
}

__n128 CommonConverter.date.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v11 = *a1;
  v3 = *((_QWORD *)a1 + 2);
  v4 = *((_QWORD *)a1 + 3);
  v5 = *(_QWORD *)(v1 + 48);
  v6 = *(_QWORD *)(v1 + 56);
  v7 = *(_QWORD *)(v1 + 72);
  v8 = *(_QWORD *)(v1 + 88);
  sub_3EB0C(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
  sub_3EB0C(v5, v6);
  swift_release(v8);
  swift_release(v7);
  *(_OWORD *)(v1 + 32) = v11;
  *(_QWORD *)(v1 + 48) = v3;
  *(_QWORD *)(v1 + 56) = v4;
  result = (__n128)a1[2];
  v10 = a1[3];
  *(__n128 *)(v1 + 64) = result;
  *(_OWORD *)(v1 + 80) = v10;
  return result;
}

uint64_t CommonConverter.init(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  id v9;
  id v10;
  uint64_t (*v11)@<X0>(uint64_t@<X8>);
  uint64_t result;
  id v13;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  if (*a1)
  {
    sub_3EAFC(*a1, v4);
    sub_3EAFC(v5, v6);
    sub_3EAFC(v3, v4);
    sub_3EAFC(v5, v6);
    v7 = (uint64_t (*)(uint64_t))v3;
    v8 = v4;
  }
  else
  {
    v9 = objc_allocWithZone((Class)NSISO8601DateFormatter);
    sub_3EAFC(0, v4);
    sub_3EAFC(v5, v6);
    sub_3EAFC(0, v4);
    sub_3EAFC(v5, v6);
    v10 = objc_msgSend(v9, "init");
    v8 = swift_allocObject(&unk_1DD0F0, 24, 7);
    *(_QWORD *)(v8 + 16) = v10;
    v7 = sub_4194C;
  }
  sub_3EAFC(v3, v4);
  if (v5)
  {
    sub_3EAFC(v5, v6);
    sub_3EB0C(v3, v4);
    sub_3EB0C(v5, v6);
    v11 = (uint64_t (*)@<X0>(uint64_t@<X8>))v5;
    result = v6;
  }
  else
  {
    sub_3EB0C(v3, v4);
    sub_3EB0C(0, v6);
    v13 = objc_msgSend(objc_allocWithZone((Class)NSISO8601DateFormatter), "init");
    result = swift_allocObject(&unk_1DD118, 24, 7);
    *(_QWORD *)(result + 16) = v13;
    v11 = sub_41974;
  }
  *a2 = v3;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  a2[4] = v3;
  a2[5] = v4;
  a2[6] = v5;
  a2[7] = v6;
  a2[8] = (uint64_t)v7;
  a2[9] = v8;
  a2[10] = (uint64_t)v11;
  a2[11] = result;
  return result;
}

uint64_t JSONDecoder.init(converter:)(_OWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v12;

  v2 = type metadata accessor for JSONDecoder.DateDecodingStrategy(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (uint64_t *)((char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = dispatch thunk of JSONDecoder.__allocating_init()(v4);
  v8 = (_OWORD *)swift_allocObject(&unk_1DD140, 80, 7);
  v9 = a1[1];
  v8[1] = *a1;
  v8[2] = v9;
  v10 = a1[3];
  v8[3] = a1[2];
  v8[4] = v10;
  *v6 = sub_3EBEC;
  v6[1] = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for JSONDecoder.DateDecodingStrategy.custom(_:), v2);
  swift_retain(v7);
  dispatch thunk of JSONDecoder.dateDecodingStrategy.setter(v6);
  swift_release(v7);
  return v7;
}

_QWORD *sub_2F1CC(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_QWORD *);
  _QWORD v13[2];
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v4 = a1[3];
  v5 = a1[4];
  sub_49F4(a1, v4);
  result = dispatch thunk of Decoder.singleValueContainer()(v14, v4, v5);
  if (!v2)
  {
    v7 = v15;
    v8 = v16;
    sub_49F4(v14, v15);
    v9 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v7, v8);
    v11 = v10;
    v12 = *(void (**)(_QWORD *))(a2 + 48);
    v13[0] = v9;
    v13[1] = v10;
    swift_bridgeObjectRetain(v10);
    v12(v13);
    swift_bridgeObjectRelease_n(v11, 2);
    return (_QWORD *)sub_62F8(v14);
  }
  return result;
}

uint64_t JSONEncoder.init(converter:outputFormatting:)(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v4 = type metadata accessor for JSONEncoder.DateEncodingStrategy(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (_QWORD *)((char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for JSONEncoder.OutputFormatting(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[1];
  v20 = *a1;
  v21 = v13;
  v14 = a1[3];
  v22 = a1[2];
  v23 = v14;
  v15 = dispatch thunk of JSONEncoder.__allocating_init()(v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  swift_retain(v15);
  dispatch thunk of JSONEncoder.outputFormatting.setter(v12);
  v16 = (_OWORD *)swift_allocObject(&unk_1DD168, 80, 7);
  v17 = v21;
  v16[1] = v20;
  v16[2] = v17;
  v18 = v23;
  v16[3] = v22;
  v16[4] = v18;
  *v7 = sub_3EC54;
  v7[1] = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v4);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter(v7);
  swift_release(v15);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a2, v8);
  return v15;
}

uint64_t sub_2F404(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(char *);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  v7 = type metadata accessor for DateConfiguration.EncoderInput(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v22[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(uint64_t (**)(char *))(a3 + 32);
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, a1, v11);
  v12 = v10(v9);
  if (v3)
    return sub_3EBAC((uint64_t)v9);
  v15 = v12;
  v16 = v13;
  sub_3EBAC((uint64_t)v9);
  v17 = a2[3];
  v18 = a2[4];
  sub_49F4(a2, v17);
  dispatch thunk of Encoder.singleValueContainer()(v22, v17, v18);
  v19 = v23;
  v20 = v24;
  sub_3DD18((uint64_t)v22, v23);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)(v15, v16, v19, v20);
  swift_bridgeObjectRelease(v16);
  return sub_62F8(v22);
}

Swift::Int sub_2F53C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_D0A68(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_39F40(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_2F5A4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;

  v5 = *(_QWORD *)(a4 + 16);
  if (!a2)
  {
    v11 = *(_QWORD *)(a4 + 16);
    v5 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
    v11 = *(_QWORD *)(a4 + 16);
    v5 = 0;
    goto LABEL_14;
  }
  if (a3 < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (!v5)
  {
LABEL_16:
    v11 = 0;
    goto LABEL_14;
  }
  v7 = a2;
  v17 = a1;
  v8 = 0;
  v9 = (_QWORD *)(a4 + 40 * v5 + 24);
  v10 = a3 - 1;
  while (1)
  {
    v11 = v5 + v8 - 1;
    v12 = *((_BYTE *)v9 - 24);
    v13 = *(v9 - 2);
    v14 = *(v9 - 1);
    v15 = *v9;
    *(_QWORD *)v7 = *(v9 - 4);
    *(_BYTE *)(v7 + 8) = v12;
    *(_QWORD *)(v7 + 16) = v13;
    *(_QWORD *)(v7 + 24) = v14;
    *(_QWORD *)(v7 + 32) = v15;
    if (!(v10 + v8))
      break;
    if (v5 + v8 == 1)
      goto LABEL_11;
    v11 = *(_QWORD *)(a4 + 16);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    --v8;
    v9 -= 5;
    v7 += 40;
    if (v5 + v8 > v11)
    {
      __break(1u);
      break;
    }
  }
  v5 = a3;
LABEL_11:
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v13);
  a1 = v17;
LABEL_14:
  *a1 = a4;
  a1[1] = v11;
  return v5;
}

uint64_t sub_2F6C4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v13 = a7 >> 1;
  if (!a2)
  {
    a3 = 0;
    goto LABEL_17;
  }
  if (a3)
  {
    if (a3 < 0)
    {
      __break(1u);
    }
    else if (v13 != a6)
    {
      v26 = v13 - a6;
      v27 = a4;
      v28 = a1;
      v29 = a7;
      v30 = a5;
      if (a6 >= v13)
        v14 = a7 >> 1;
      else
        v14 = a6;
      if (v13 == v14)
      {
LABEL_13:
        __break(1u);
      }
      else
      {
        v15 = a2;
        v16 = a5 + 112 * v13--;
        v17 = v16 - 112;
        v31 = -(uint64_t)v14;
        v32 = a3;
        v18 = 1;
        v33 = a6;
        while (1)
        {
          v19 = *(_BYTE *)(v17 + 8);
          v20 = *(_QWORD *)(v17 + 16);
          v21 = *(_BYTE *)(v17 + 24);
          a1 = *(_QWORD **)(v17 + 32);
          LOBYTE(a2) = *(_BYTE *)(v17 + 40);
          v10 = *(_QWORD *)(v17 + 48);
          v22 = *(_QWORD *)(v17 + 56);
          v7 = *(_QWORD *)(v17 + 64);
          v23 = *(_QWORD *)(v17 + 72);
          v8 = *(_QWORD *)(v17 + 80);
          v9 = *(_QWORD *)(v17 + 88);
          v12 = *(_QWORD *)(v17 + 96);
          v11 = *(_QWORD *)(v17 + 104);
          *(_QWORD *)v15 = *(_QWORD *)v17;
          *(_BYTE *)(v15 + 8) = v19;
          *(_QWORD *)(v15 + 16) = v20;
          *(_BYTE *)(v15 + 24) = v21;
          *(_QWORD *)(v15 + 32) = a1;
          *(_BYTE *)(v15 + 40) = a2;
          *(_QWORD *)(v15 + 48) = v10;
          *(_QWORD *)(v15 + 56) = v22;
          *(_QWORD *)(v15 + 64) = v7;
          *(_QWORD *)(v15 + 72) = v23;
          *(_QWORD *)(v15 + 80) = v8;
          *(_QWORD *)(v15 + 88) = v9;
          *(_QWORD *)(v15 + 96) = v12;
          *(_QWORD *)(v15 + 104) = v11;
          if (a3 == v18)
            break;
          if (a6 == v13)
          {
            v13 = a6;
            v24 = v26;
            goto LABEL_15;
          }
          ++v18;
          sub_40554((uint64_t)a1, a2);
          swift_bridgeObjectRetain(v7);
          swift_bridgeObjectRetain(v8);
          swift_bridgeObjectRetain(v9);
          swift_bridgeObjectRetain(v12);
          swift_bridgeObjectRetain(v11);
          swift_bridgeObjectRetain(v10);
          a3 = v32;
          a6 = v33;
          --v13;
          v17 -= 112;
          v15 += 112;
          if (v31 + v13 == -1)
            goto LABEL_13;
        }
      }
      v24 = a3;
LABEL_15:
      sub_40554((uint64_t)a1, a2);
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v10);
      a7 = v29;
      a5 = v30;
      a6 = v33;
      a4 = v27;
      a1 = v28;
      a3 = v24;
      goto LABEL_17;
    }
    a3 = 0;
    v13 = a6;
  }
LABEL_17:
  *a1 = a4;
  a1[1] = a5;
  a1[2] = a6;
  a1[3] = a7;
  a1[4] = v13;
  return a3;
}

uint64_t sub_2F8A0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;

  v4 = *(_QWORD *)(a4 + 16);
  if (!a2)
  {
    v8 = *(_QWORD *)(a4 + 16);
    v4 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
    v8 = *(_QWORD *)(a4 + 16);
    v4 = 0;
    goto LABEL_14;
  }
  if (a3 < 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (!v4)
  {
LABEL_17:
    v8 = 0;
    goto LABEL_14;
  }
  v5 = a2;
  v25 = a1;
  v6 = 0;
  v7 = (_QWORD *)(a4 + 112 * v4 + 24);
  v26 = a3 - 1;
  while (1)
  {
    v8 = v4 + v6 - 1;
    v9 = *((_BYTE *)v7 - 96);
    v10 = *(v7 - 11);
    v11 = *((_BYTE *)v7 - 80);
    v12 = *(v7 - 9);
    v13 = *((_BYTE *)v7 - 64);
    v15 = *(v7 - 7);
    v14 = *(v7 - 6);
    v16 = *(v7 - 5);
    v17 = *(v7 - 4);
    v19 = *(v7 - 3);
    v18 = *(v7 - 2);
    v21 = *(v7 - 1);
    v20 = *v7;
    *(_QWORD *)v5 = *(v7 - 13);
    *(_BYTE *)(v5 + 8) = v9;
    *(_QWORD *)(v5 + 16) = v10;
    *(_BYTE *)(v5 + 24) = v11;
    *(_QWORD *)(v5 + 32) = v12;
    *(_BYTE *)(v5 + 40) = v13;
    *(_QWORD *)(v5 + 48) = v15;
    *(_QWORD *)(v5 + 56) = v14;
    *(_QWORD *)(v5 + 64) = v16;
    *(_QWORD *)(v5 + 72) = v17;
    *(_QWORD *)(v5 + 80) = v19;
    *(_QWORD *)(v5 + 88) = v18;
    *(_QWORD *)(v5 + 96) = v21;
    *(_QWORD *)(v5 + 104) = v20;
    if (!(v26 + v6))
      goto LABEL_10;
    if (v4 + v6 == 1)
      break;
    v8 = v4;
    sub_40554(v12, v13);
    v28 = *(_QWORD *)(a4 + 16);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v20);
    v4 = v8;
    --v6;
    v7 -= 14;
    v5 += 112;
    if (v8 + v6 > v28)
    {
      __break(1u);
LABEL_10:
      v22 = a3;
      goto LABEL_11;
    }
  }
  v22 = v4;
LABEL_11:
  sub_40554(v12, v13);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v15);
  a1 = v25;
  v4 = v22;
LABEL_14:
  *a1 = a4;
  a1[1] = v8;
  return v4;
}

_QWORD *sub_2FA6C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_30220(a1, a2, a3, a4, &qword_1F1090);
}

_QWORD *sub_2FA78(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_5EDC(&qword_1F1100);
      v11 = (_QWORD *)swift_allocObject(v10, 552 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 552);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[69 * v8 + 4])
          memmove(v13, a4 + 4, 552 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_3D43C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2FB9C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_5EDC(&qword_1F1368);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_3DF10(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2FCA8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_5EDC(&qword_1F1078);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_3E73C(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2FDB4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_5EDC(&qword_1F1060);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_3D158(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2FEC0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_5EDC(&qword_1F10C8);
      v11 = (_QWORD *)swift_allocObject(v10, 80 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 80);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[10 * v8 + 4])
          memmove(v13, a4 + 4, 80 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_3E44C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_2FFE0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_30A28(a1, a2, a3, a4, &qword_1F10C0, type metadata accessor for CollectionRecommendation);
}

_QWORD *sub_2FFF4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_5EDC(&qword_1F10B8);
      v11 = (_QWORD *)swift_allocObject(v10, 112 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 112);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[14 * v8 + 4])
          memmove(v13, a4 + 4, 112 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_3E358(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_3011C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_5EDC(&qword_1F1050);
      v11 = (_QWORD *)swift_allocObject(v10, v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * v12 - 64;
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= (_QWORD *)((char *)a4 + v8 + 32))
          memmove(v13, a4 + 4, v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_40988(0, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_30214(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_30220(a1, a2, a3, a4, &qword_1F1278);
}

_QWORD *sub_30220(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      v11 = sub_5EDC(a5);
      v12 = (_QWORD *)swift_allocObject(v11, 8 * v10 + 32, 7);
      v13 = j__malloc_size(v12);
      v14 = v13 - 32;
      if (v13 < 32)
        v14 = v13 - 25;
      v12[2] = v9;
      v12[3] = 2 * (v14 >> 3);
      v15 = v12 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      v15 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[v9 + 4])
          memmove(v15, a4 + 4, 8 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_3D158(0, v9, (char *)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v12;
  }
  __break(1u);
  return result;
}

_QWORD *sub_30328(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_3145C(a1, a2, a3, a4, &qword_1F1210);
}

_QWORD *sub_30334(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_5EDC(&qword_1F1200);
      v11 = (_QWORD *)swift_allocObject(v10, 80 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 80);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[10 * v8 + 4])
          memmove(v13, a4 + 4, 80 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_40F58(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_30450(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_5EDC(&qword_1F11F8);
      v11 = (_QWORD *)swift_allocObject(v10, (v9 << 6) | 0x20, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 + 31;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 6);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[8 * v8 + 4])
          memmove(v14, a4 + 4, v8 << 6);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_405C0(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_3055C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_5EDC(&qword_1F1198);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_4104C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_30680(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_31888(a1, a2, a3, a4, &qword_1F11F0);
}

_QWORD *sub_30694(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_5EDC(&qword_1F1280);
      v11 = (_QWORD *)swift_allocObject(v10, 72 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 72);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[9 * v8 + 4])
          memmove(v13, a4 + 4, 72 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_406B0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_307BC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_5EDC(&qword_1F10F0);
      v11 = (_QWORD *)swift_allocObject(v10, 72 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 72);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[9 * v8 + 4])
          memmove(v13, a4 + 4, 72 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_41140(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_308E4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_5EDC(&qword_1F10D0);
      v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4])
          memmove(v13, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_3E540(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_30A00(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_31324(a1, a2, a3, a4, &qword_1F12F0);
}

uint64_t sub_30A14(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_30A28(a1, a2, a3, a4, &qword_1F12E8, type metadata accessor for MetadataCache.MetadataRequest.ContinuationRecord);
}

uint64_t sub_30A28(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_5EDC(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_41344(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

uint64_t sub_30C34(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_30A28(a1, a2, a3, a4, &qword_1F12E0, type metadata accessor for MetadataCache.GenreMetadataRequest.ContinuationRecord);
}

uint64_t sub_30C48(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_30A28(a1, a2, a3, a4, &qword_1F1250, type metadata accessor for ScoredCollectionRecommendation);
}

_QWORD *sub_30C5C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_30C84(a1, a2, a3, a4, &qword_1F1228, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_40B5C);
}

_QWORD *sub_30C70(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_30C84(a1, a2, a3, a4, &qword_1F1238, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_4145C);
}

_QWORD *sub_30C84(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, void (*a6)(_QWORD, int64_t, _QWORD *, _QWORD *))
{
  char v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      v13 = sub_5EDC(a5);
      v14 = (_QWORD *)swift_allocObject(v13, 48 * v12 + 32, 7);
      v15 = j__malloc_size(v14);
      v14[2] = v11;
      v14[3] = 2 * ((uint64_t)(v15 - 32) / 48);
      v16 = v14 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v14 != a4 || v16 >= &a4[6 * v11 + 4])
          memmove(v16, a4 + 4, 48 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v14 = _swiftEmptyArrayStorage;
      v16 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    a6(0, v11, v16, a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v14;
  }
  __break(1u);
  return result;
}

uint64_t sub_30DAC(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_5EDC(&qword_1F1258);
  v11 = *(_QWORD *)(sub_5EDC(&qword_1F1260) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
    goto LABEL_29;
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = sub_5EDC(&qword_1F1260);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(_QWORD *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }
    else if (v15 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_40C68(0, v8, v21, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v15;
}

_QWORD *sub_30FBC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_5EDC(&qword_1F12B8);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_3D334(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_310C8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_5EDC(&qword_1F12B0);
      v11 = (_QWORD *)swift_allocObject(v10, 56 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 56);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[7 * v8 + 4])
          memmove(v13, a4 + 4, 56 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_3D240(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_311EC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_5EDC(&qword_1F11C0);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_407A4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_31310(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_31324(a1, a2, a3, a4, &qword_1F11A0);
}

_QWORD *sub_31324(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      v11 = sub_5EDC(a5);
      v12 = (_QWORD *)swift_allocObject(v11, 16 * v10 + 32, 7);
      v13 = j__malloc_size(v12);
      v14 = v13 - 32;
      if (v13 < 32)
        v14 = v13 - 17;
      v12[2] = v9;
      v12[3] = 2 * (v14 >> 4);
      v15 = v12 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      v15 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[2 * v9 + 4])
          memmove(v15, a4 + 4, 16 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_40D84(0, v9, (unint64_t)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v12;
  }
  __break(1u);
  return result;
}

_QWORD *sub_3143C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_31324(a1, a2, a3, a4, &qword_1F11A8);
}

_QWORD *sub_31450(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_3145C(a1, a2, a3, a4, &qword_1F11B0);
}

_QWORD *sub_3145C(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      v11 = sub_5EDC(a5);
      v12 = (_QWORD *)swift_allocObject(v11, 32 * v10 + 32, 7);
      v13 = j__malloc_size(v12);
      v14 = v13 - 32;
      if (v13 < 32)
        v14 = v13 - 1;
      v12[2] = v9;
      v12[3] = 2 * (v14 >> 5);
      v15 = v12 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      v15 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[4 * v9 + 4])
          memmove(v15, a4 + 4, 32 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_40E70(0, v9, (char *)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

_QWORD *sub_31564(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_5EDC(&qword_1F11B8);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_40898(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_31670(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_5EDC(&qword_1F1118);
      v11 = (_QWORD *)swift_allocObject(v10, v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * v12 - 64;
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= (_QWORD *)((char *)a4 + v8 + 32))
          memmove(v13, a4 + 4, v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_40988(0, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_31768(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_5EDC(&qword_1F1130);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_3E634(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_31874(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_31888(a1, a2, a3, a4, &qword_1F1148);
}

_QWORD *sub_31888(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      v11 = sub_5EDC(a5);
      v12 = (_QWORD *)swift_allocObject(v11, 48 * v10 + 32, 7);
      v13 = j__malloc_size(v12);
      v12[2] = v9;
      v12[3] = 2 * ((uint64_t)(v13 - 32) / 48);
      v14 = v12 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v12 != a4 || v14 >= &a4[6 * v9 + 4])
          memmove(v14, a4 + 4, 48 * v9);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_40A6C(0, v9, (unint64_t)v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

uint64_t sub_319B8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_30A28(a1, a2, a3, a4, &qword_1F12C8, (uint64_t (*)(_QWORD))&type metadata accessor for URLQueryItem);
}

_QWORD *sub_319CC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_5EDC(&qword_1F12A0);
      v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4])
          memmove(v13, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_41660(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_31AEC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_5EDC(&qword_1F10A8);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_3E82C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_31C10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_5EDC(&qword_1F1050);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_31C74(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

uint64_t sub_31CEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t i;
  BOOL v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  _QWORD v25[5];
  _BYTE v26[32];
  uint64_t v27;

  sub_5EDC(&qword_1F0F18);
  result = static _DictionaryStorage.copy(original:)(a1);
  v4 = (_QWORD *)result;
  v5 = 0;
  v27 = a1;
  v8 = *(_QWORD *)(a1 + 64);
  v7 = a1 + 64;
  v6 = v8;
  v9 = 1 << *(_BYTE *)(v7 - 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v6;
  v23 = (unint64_t)(v9 + 63) >> 6;
  v24 = result + 64;
  if ((v10 & v6) == 0)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v12 | (v5 << 6); ; i = __clz(__rbit64(v15)) + (v5 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(v27 + 48) + 16 * i);
    v18 = *v17;
    v19 = v17[1];
    sub_418BC(*(_QWORD *)(v27 + 56) + 32 * i, (uint64_t)v26, &qword_1F0E78);
    swift_bridgeObjectRetain(v19);
    sub_29474(v25, v26);
    if (v1)
    {
      swift_bridgeObjectRelease(v19);
      swift_release(v4);
      sub_417D8((uint64_t)v26, &qword_1F0E78);
      return (uint64_t)v4;
    }
    sub_417D8((uint64_t)v26, &qword_1F0E78);
    *(_QWORD *)(v24 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v20 = (_QWORD *)(v4[6] + 16 * i);
    *v20 = v18;
    v20[1] = v19;
    result = sub_41300((uint64_t)v25, v4[7] + 40 * i, &qword_1F0E70);
    v21 = v4[2];
    v14 = __OFADD__(v21, 1);
    v22 = v21 + 1;
    if (v14)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v4[2] = v22;
    if (v11)
      goto LABEL_4;
LABEL_5:
    v14 = __OFADD__(v5++, 1);
    if (v14)
      goto LABEL_27;
    if (v5 >= v23)
      return (uint64_t)v4;
    v15 = *(_QWORD *)(v7 + 8 * v5);
    if (!v15)
      break;
LABEL_15:
    v11 = (v15 - 1) & v15;
  }
  v16 = v5 + 1;
  if (v5 + 1 >= v23)
    return (uint64_t)v4;
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
    goto LABEL_14;
  v16 = v5 + 2;
  if (v5 + 2 >= v23)
    return (uint64_t)v4;
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
    goto LABEL_14;
  v16 = v5 + 3;
  if (v5 + 3 >= v23)
    return (uint64_t)v4;
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
  {
LABEL_14:
    v5 = v16;
    goto LABEL_15;
  }
  while (1)
  {
    v5 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v5 >= v23)
      return (uint64_t)v4;
    v15 = *(_QWORD *)(v7 + 8 * v5);
    ++v16;
    if (v15)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_31F50(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  _BYTE v25[40];
  _QWORD v26[5];
  uint64_t v27;

  sub_5EDC(&qword_1F0F18);
  result = static _DictionaryStorage.copy(original:)(a1);
  v3 = (_QWORD *)result;
  v4 = 0;
  v27 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  v6 = a1 + 64;
  v5 = v7;
  v8 = 1 << *(_BYTE *)(v6 - 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v5;
  v23 = (unint64_t)(v8 + 63) >> 6;
  v24 = result + 64;
  if ((v9 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v11 | (v4 << 6); ; i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(v27 + 48) + 16 * i);
    v17 = *v16;
    v18 = v16[1];
    sub_41864((__int128 *)(*(_QWORD *)(v27 + 56) + 40 * i), (uint64_t)v26);
    sub_418BC((uint64_t)v26, (uint64_t)v25, &qword_1F0E70);
    swift_bridgeObjectRetain(v18);
    sub_3DEE0(v26);
    *(_QWORD *)(v24 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v19 = (_QWORD *)(v3[6] + 16 * i);
    *v19 = v17;
    v19[1] = v18;
    result = sub_41300((uint64_t)v25, v3[7] + 40 * i, &qword_1F0E70);
    v20 = v3[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v22;
    if (v10)
      goto LABEL_4;
LABEL_5:
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v13 >= v23)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v6 + 8 * v13);
    ++v4;
    if (!v14)
    {
      v4 = v13 + 1;
      if (v13 + 1 >= v23)
        return (uint64_t)v3;
      v14 = *(_QWORD *)(v6 + 8 * v4);
      if (!v14)
      {
        v4 = v13 + 2;
        if (v13 + 2 >= v23)
          return (uint64_t)v3;
        v14 = *(_QWORD *)(v6 + 8 * v4);
        if (!v14)
          break;
      }
    }
LABEL_18:
    v10 = (v14 - 1) & v14;
  }
  v15 = v13 + 3;
  if (v15 >= v23)
    return (uint64_t)v3;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
    v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v23)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v6 + 8 * v4);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_32184(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  _BYTE v28[40];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _BYTE v32[40];
  uint64_t v33;

  sub_5EDC(&qword_1F1340);
  result = static _DictionaryStorage.copy(original:)(a1);
  v3 = (_QWORD *)result;
  v4 = 0;
  v33 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  v6 = a1 + 64;
  v5 = v7;
  v8 = 1 << *(_BYTE *)(v6 - 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v5;
  v26 = (unint64_t)(v8 + 63) >> 6;
  v27 = result + 64;
  if ((v9 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v11 | (v4 << 6); ; i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(v33 + 48) + 16 * i);
    v17 = *v16;
    v18 = v16[1];
    sub_418BC(*(_QWORD *)(v33 + 56) + 40 * i, (uint64_t)v32, &qword_1F0E70);
    sub_418BC((uint64_t)v32, (uint64_t)v28, &qword_1F0E70);
    v29 = 0u;
    v30 = 0u;
    v31 = 0;
    swift_bridgeObjectRetain(v18);
    sub_3DC8C((uint64_t)v28, (uint64_t)&v29);
    result = sub_417D8((uint64_t)v32, &qword_1F0E70);
    *(_QWORD *)(v27 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v19 = (_QWORD *)(v3[6] + 16 * i);
    *v19 = v17;
    v19[1] = v18;
    v20 = v3[7] + 40 * i;
    v21 = v31;
    v22 = v30;
    *(_OWORD *)v20 = v29;
    *(_OWORD *)(v20 + 16) = v22;
    *(_QWORD *)(v20 + 32) = v21;
    v23 = v3[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v25;
    if (v10)
      goto LABEL_4;
LABEL_5:
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v13 >= v26)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v6 + 8 * v13);
    ++v4;
    if (!v14)
    {
      v4 = v13 + 1;
      if (v13 + 1 >= v26)
        return (uint64_t)v3;
      v14 = *(_QWORD *)(v6 + 8 * v4);
      if (!v14)
      {
        v4 = v13 + 2;
        if (v13 + 2 >= v26)
          return (uint64_t)v3;
        v14 = *(_QWORD *)(v6 + 8 * v4);
        if (!v14)
          break;
      }
    }
LABEL_18:
    v10 = (v14 - 1) & v14;
  }
  v15 = v13 + 3;
  if (v15 >= v26)
    return (uint64_t)v3;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
    v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v26)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v6 + 8 * v4);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

unint64_t sub_323DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_324BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

unint64_t sub_32760(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  unint64_t *v22;
  uint64_t v23;

  v22 = a4;
  v23 = a5;
  v6 = v5;
  v20 = a1;
  v21 = a3;
  v8 = a3(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v20 - v10;
  v12 = -1 << *(_BYTE *)(v6 + 32);
  v13 = a2 & ~v12;
  if (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = ~v12;
    v15 = *(_QWORD *)(v9 + 72);
    v16 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    do
    {
      v16(v11, *(_QWORD *)(v6 + 48) + v15 * v13, v8);
      v17 = sub_41754(v22, v21, v23);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v20, v8, v17);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      if ((v18 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
    }
    while (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

unint64_t sub_32890(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

uint64_t sub_3292C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

unint64_t sub_32B24(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v11;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    if ((a1 & 1) != 0)
      v6 = 0x6F6F626F69647561;
    else
      v6 = 0x6B6F6F6265;
    if ((a1 & 1) != 0)
      v7 = 0xE90000000000006BLL;
    else
      v7 = 0xE500000000000000;
    while (1)
    {
      v8 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? 0x6F6F626F69647561 : 0x6B6F6F6265;
      v9 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? 0xE90000000000006BLL : 0xE500000000000000;
      if (v8 == v6 && v9 == v7)
        break;
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v6, v7, 0);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v7);
      if ((v11 & 1) == 0)
      {
        v4 = (v4 + 1) & v5;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
    swift_bridgeObjectRelease_n(v7, 2);
  }
  return v4;
}

unint64_t sub_32C60(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v11;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    if ((a1 & 1) != 0)
      v6 = 0xD000000000000011;
    else
      v6 = 0x6168637275706F63;
    if ((a1 & 1) != 0)
      v7 = 0x800000000019F150;
    else
      v7 = 0xEA00000000006573;
    while (1)
    {
      v8 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? 0xD000000000000011 : 0x6168637275706F63;
      v9 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? 0x800000000019F150 : 0xEA00000000006573;
      if (v8 == v6 && v9 == v7)
        break;
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v6, v7, 0);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v7);
      if ((v11 & 1) == 0)
      {
        v4 = (v4 + 1) & v5;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
    swift_bridgeObjectRelease_n(v7, 2);
  }
  return v4;
}

unint64_t sub_32D9C(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  char v12;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    while (1)
    {
      if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4))
      {
        v7 = 0xE800000000000000;
        if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) == 1)
        {
          v8 = 0x656E4F6C6576656CLL;
          v9 = a1;
          if (!a1)
            goto LABEL_14;
        }
        else
        {
          v8 = 0x6F77546C6576656CLL;
          v9 = a1;
          if (!a1)
          {
LABEL_14:
            v11 = 0xE600000000000000;
            v10 = 0x73657661656CLL;
            if (v8 != 0x73657661656CLL)
              goto LABEL_16;
            goto LABEL_15;
          }
        }
      }
      else
      {
        v7 = 0xE600000000000000;
        v8 = 0x73657661656CLL;
        v9 = a1;
        if (!a1)
          goto LABEL_14;
      }
      if (v9 == 1)
        v10 = 0x656E4F6C6576656CLL;
      else
        v10 = 0x6F77546C6576656CLL;
      v11 = 0xE800000000000000;
      if (v8 != v10)
        goto LABEL_16;
LABEL_15:
      if (v7 == v11)
      {
        swift_bridgeObjectRelease_n(v7, 2);
        return v4;
      }
LABEL_16:
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v7, v10, v11, 0);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v11);
      if ((v12 & 1) == 0)
      {
        v4 = (v4 + 1) & v6;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
  }
  return v4;
}

uint64_t sub_32F2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

unint64_t sub_33270(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    while (1)
    {
      v7 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v4);
      v8 = 0x797469746E656469;
      if (v7 != 1)
        v8 = 1768055156;
      v9 = 0xE800000000000000;
      if (v7 != 1)
        v9 = 0xE400000000000000;
      if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4))
        v10 = v8;
      else
        v10 = 0xD000000000000013;
      if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4))
        v11 = v9;
      else
        v11 = 0x800000000019EE20;
      if (a1)
      {
        if (a1 == 1)
          v12 = 0x797469746E656469;
        else
          v12 = 1768055156;
        if (a1 == 1)
          v13 = 0xE800000000000000;
        else
          v13 = 0xE400000000000000;
        if (v10 != v12)
          goto LABEL_24;
      }
      else
      {
        v13 = 0x800000000019EE20;
        v12 = 0xD000000000000013;
        if (v10 != 0xD000000000000013)
          goto LABEL_24;
      }
      if (v11 == v13)
      {
        swift_bridgeObjectRelease_n(v11, 2);
        return v4;
      }
LABEL_24:
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v12, v13, 0);
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(v13);
      if ((v14 & 1) == 0)
      {
        v4 = (v4 + 1) & v6;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
  }
  return v4;
}

uint64_t sub_33400(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

unint64_t sub_33630(void *__src, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7[69];
  uint64_t __dst[69];

  memcpy(__dst, __src, 0x221uLL);
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    memcpy(v7, (const void *)(*(_QWORD *)(v2 + 48) + 552 * v5), 0x221uLL);
    while (!_s20BooksPersonalization8SeedBookV2eeoiySbAC_ACtFZ_0(v7, __dst))
    {
      v5 = (v5 + 1) & ~v4;
      if ((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) & (1 << v5)) == 0)
        break;
      memcpy(v7, (const void *)(*(_QWORD *)(v2 + 48) + 552 * v5), 0x221uLL);
    }
  }
  return v5;
}

unint64_t sub_33738(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  char v12;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    while (1)
    {
      if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4))
      {
        if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) == 1)
        {
          v7 = 0x6F6F626F69647561;
          v8 = 0xE90000000000006BLL;
          v9 = a1;
          if (!a1)
            goto LABEL_17;
        }
        else
        {
          v8 = 0xE500000000000000;
          v7 = 0x646578696DLL;
          v9 = a1;
          if (!a1)
          {
LABEL_17:
            v11 = 0xE500000000000000;
            v10 = 0x6B6F6F6265;
            if (v7 != 0x6B6F6F6265)
              goto LABEL_19;
            goto LABEL_18;
          }
        }
      }
      else
      {
        v8 = 0xE500000000000000;
        v7 = 0x6B6F6F6265;
        v9 = a1;
        if (!a1)
          goto LABEL_17;
      }
      if (v9 == 1)
        v10 = 0x6F6F626F69647561;
      else
        v10 = 0x646578696DLL;
      if (v9 == 1)
        v11 = 0xE90000000000006BLL;
      else
        v11 = 0xE500000000000000;
      if (v7 != v10)
        goto LABEL_19;
LABEL_18:
      if (v8 == v11)
      {
        swift_bridgeObjectRelease_n(v8, 2);
        return v4;
      }
LABEL_19:
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v10, v11, 0);
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v11);
      if ((v12 & 1) == 0)
      {
        v4 = (v4 + 1) & v6;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
  }
  return v4;
}

unint64_t sub_338D0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;

  v4 = -1 << *(_BYTE *)(v3 + 32);
  v5 = a3 & ~v4;
  if (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v21 = ~v4;
    while (1)
    {
      v8 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v5);
      v9 = *v8;
      v10 = v8[1];
      v11 = v10 == 1 ? 0xD000000000000012 : *v8;
      v12 = v10 == 1 ? 0x800000000019FA50 : v10;
      v13 = v10 ? v11 : 0x4148435255504F43;
      v14 = v10 ? v12 : 0xEA00000000004553;
      v15 = a2 == 1 ? 0xD000000000000012 : a1;
      v16 = a2 == 1 ? 0x800000000019FA50 : a2;
      v17 = a2 ? v15 : 0x4148435255504F43;
      v18 = a2 ? v16 : 0xEA00000000004553;
      if (v13 == v17 && v14 == v18)
        break;
      v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, v17, v18, 0);
      sub_1F6D4(v9, v10);
      sub_1F6D4(v9, v10);
      sub_1F6D4(a1, a2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_26A48(v9, v10);
      if ((v19 & 1) == 0)
      {
        v5 = (v5 + 1) & v21;
        if (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
          continue;
      }
      return v5;
    }
    sub_1F6D4(v9, v10);
    sub_1F6D4(v9, v10);
    sub_1F6D4(a1, a2);
    swift_bridgeObjectRelease_n(v14, 2);
    sub_26A48(v9, v10);
  }
  return v5;
}

unint64_t sub_33A98(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  char v12;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    while (1)
    {
      if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4))
      {
        if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) == 1)
        {
          v7 = 0xE200000000000000;
          v8 = 12918;
          v9 = a1;
          if (!a1)
            goto LABEL_17;
        }
        else
        {
          v7 = 0xE400000000000000;
          v8 = 1768055156;
          v9 = a1;
          if (!a1)
          {
LABEL_17:
            v11 = 0xE200000000000000;
            v10 = 12662;
            if (v8 != 12662)
              goto LABEL_19;
            goto LABEL_18;
          }
        }
      }
      else
      {
        v7 = 0xE200000000000000;
        v8 = 12662;
        v9 = a1;
        if (!a1)
          goto LABEL_17;
      }
      if (v9 == 1)
        v10 = 12918;
      else
        v10 = 1768055156;
      if (v9 == 1)
        v11 = 0xE200000000000000;
      else
        v11 = 0xE400000000000000;
      if (v8 != v10)
        goto LABEL_19;
LABEL_18:
      if (v7 == v11)
      {
        swift_bridgeObjectRelease_n(v7, 2);
        return v4;
      }
LABEL_19:
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v7, v10, v11, 0);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v11);
      if ((v12 & 1) == 0)
      {
        v4 = (v4 + 1) & v6;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
  }
  return v4;
}

uint64_t sub_33BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

uint64_t sub_33E88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

uint64_t sub_340AC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_35C40(a1, a2, a3, *v3, &qword_1F1090);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_340D0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_36B8C(a1, a2, a3, *v3, &qword_1F1058);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_340F4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_34614(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_34110(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_36718(a1, a2, a3, *v3, &qword_1F1100);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_3413C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_347A4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_34158(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_3490C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_34174(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_34AAC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_34190(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_34C2C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_341AC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_34D94(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_341C8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_34F3C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_341E4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_350A4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_34200(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_35200(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_3421C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_3535C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_34238(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_372F8(a1, a2, a3, (_QWORD *)*v3, &qword_1F11D0, &qword_1F11D8);
  *v3 = result;
  return result;
}

uint64_t sub_34264(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_354DC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_34280(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_357B8(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_3429C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_372F8(a1, a2, a3, (_QWORD *)*v3, &qword_1F1380, &qword_1F1388);
  *v3 = result;
  return result;
}

uint64_t sub_342C8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_35940(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_342E4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_35638(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_34300(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_378F8(a1, a2, a3, (_QWORD *)*v3, &qword_1F10C0, type metadata accessor for CollectionRecommendation);
  *v3 = result;
  return result;
}

uint64_t sub_3432C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_35AB8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_34348(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_35C40(a1, a2, a3, *v3, &qword_1F1150);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_3436C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_378F8(a1, a2, a3, (_QWORD *)*v3, &qword_1F1128, type metadata accessor for SeedBasedRecommendationRequest);
  *v3 = result;
  return result;
}

uint64_t sub_34398(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_35D98(a1, a2, a3, (_QWORD *)*v3, &qword_1F1178, &qword_1F1180);
  *v3 = result;
  return result;
}

uint64_t sub_343C4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_35F78(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_343E0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_360E0(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_343FC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_36288(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_34418(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_36410(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_34434(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_36598(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_34450(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_36718(a1, a2, a3, *v3, &qword_1F12F8);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_3447C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_36898(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_34498(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_378F8(a1, a2, a3, (_QWORD *)*v3, &qword_1F1250, type metadata accessor for ScoredCollectionRecommendation);
  *v3 = result;
  return result;
}

uint64_t sub_344C4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_369E4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_344E0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_36CE4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_344FC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_36E68(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_34518(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_36FD0(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_34534(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_37174(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_34550(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_372F8(a1, a2, a3, (_QWORD *)*v3, &qword_1F1158, &qword_1F1160);
  *v3 = result;
  return result;
}

uint64_t sub_3457C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_37484(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_34598(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_37770(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_345B4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_378F8(a1, a2, a3, (_QWORD *)*v3, &qword_1F12A8, (uint64_t (*)(_QWORD))&type metadata accessor for URL);
  *v3 = result;
  return result;
}

uint64_t sub_345E0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_37AD8(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_345FC(char a1, int64_t a2, char a3, char *a4)
{
  return sub_35C40(a1, a2, a3, a4, &qword_1F1090);
}

uint64_t sub_34608(char a1, int64_t a2, char a3, char *a4)
{
  return sub_36B8C(a1, a2, a3, a4, &qword_1F1058);
}

uint64_t sub_34614(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5EDC(&qword_1F1078);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_3477C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_35D98(a1, a2, a3, a4, &qword_1F1220, &qword_1F1218);
}

uint64_t sub_34790(char a1, int64_t a2, char a3, char *a4)
{
  return sub_36718(a1, a2, a3, a4, &qword_1F1100);
}

uint64_t sub_347A4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5EDC(&qword_1F1368);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_3490C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5EDC(&qword_1F1338);
    v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 40 * v8)
      memmove(v11 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 40 * v8 || v13 >= v14 + 40 * v8)
  {
    sub_5EDC(&qword_1F0E70);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_34AAC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5EDC(&qword_1F1350);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v8])
      memmove(v13, v14, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[40 * v8] || v13 >= &v14[40 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_34C2C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5EDC(&qword_1F1328);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_34D94(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5EDC(&qword_1F1318);
    v11 = (_QWORD *)swift_allocObject(v10, 56 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 56);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 56 * v8)
      memmove(v11 + 4, a4 + 4, 56 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 56 * v8 || v13 >= v14 + 56 * v8)
  {
    sub_5EDC(&qword_1F1320);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_34F3C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5EDC(&qword_1F1308);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_350A4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5EDC(&qword_1F1080);
    v11 = (char *)swift_allocObject(v10, 4 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 29;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 2);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[4 * v8])
      memmove(v14, v15, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[4 * v8] || v14 >= &v15[4 * v8])
  {
    memcpy(v14, v15, 4 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_35200(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5EDC(&qword_1F1288);
    v11 = (char *)swift_allocObject(v10, 4 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 29;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 2);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[4 * v8])
      memmove(v14, v15, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[4 * v8] || v14 >= &v15[4 * v8])
  {
    memcpy(v14, v15, 4 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_3535C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5EDC(&qword_1F1088);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v8])
      memmove(v13, v14, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[40 * v8] || v13 >= &v14[40 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_354DC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5EDC(&qword_1F1060);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_35638(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5EDC(&qword_1F10C8);
    v11 = (char *)swift_allocObject(v10, 80 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 80);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[80 * v8])
      memmove(v13, v14, 80 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[80 * v8] || v13 >= &v14[80 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_357B8(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5EDC(&qword_1F1370);
    v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 3);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 8 * v8)
      memmove(v11 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 8 * v8 || v14 >= v15 + 8 * v8)
  {
    sub_5EDC(&qword_1F1378);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_35940(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5EDC(&qword_1F1390);
    v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8])
      memmove(v13, v14, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[24 * v8] || v13 >= &v14[24 * v8])
  {
    memcpy(v13, v14, 24 * v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_35AB8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5EDC(&qword_1F10B8);
    v11 = (char *)swift_allocObject(v10, 112 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 112);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[112 * v8])
      memmove(v13, v14, 112 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[112 * v8] || v13 >= &v14[112 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_35C40(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    v11 = sub_5EDC(a5);
    v12 = (char *)swift_allocObject(v11, 8 * v10 + 32, 7);
    v13 = j__malloc_size(v12);
    v14 = v13 - 32;
    if (v13 < 32)
      v14 = v13 - 25;
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = 2 * (v14 >> 3);
  }
  else
  {
    v12 = (char *)_swiftEmptyArrayStorage;
  }
  v15 = v12 + 32;
  v16 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v15 >= &v16[8 * v9])
      memmove(v15, v16, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v16 >= &v15[8 * v9] || v15 >= &v16[8 * v9])
  {
    memcpy(v15, v16, 8 * v9);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v12;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_35D98(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_5EDC(a5);
  v14 = *(_QWORD *)(sub_5EDC(a6) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = sub_5EDC(a6);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (char *)v18 + v23;
  v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(_QWORD *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v24);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v26 = *(_QWORD *)(v22 + 72) * v11;
  v27 = &v24[v26];
  v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_35F78(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5EDC(&qword_1F1208);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_360E0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5EDC(&qword_1F11E0);
    v11 = (_QWORD *)swift_allocObject(v10, 56 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 56);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 56 * v8)
      memmove(v11 + 4, a4 + 4, 56 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 56 * v8 || v13 >= v14 + 56 * v8)
  {
    sub_5EDC(&qword_1F11E8);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_36288(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5EDC(&qword_1F1280);
    v11 = (char *)swift_allocObject(v10, 72 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 72);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[72 * v8])
      memmove(v13, v14, 72 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[72 * v8] || v13 >= &v14[72 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_36410(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5EDC(&qword_1F10F0);
    v11 = (char *)swift_allocObject(v10, 72 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 72);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[72 * v8])
      memmove(v13, v14, 72 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[72 * v8] || v13 >= &v14[72 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_36598(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5EDC(&qword_1F1068);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v8])
      memmove(v13, v14, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[40 * v8] || v13 >= &v14[40 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_36718(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    v11 = sub_5EDC(a5);
    v12 = (char *)swift_allocObject(v11, 552 * v10 + 32, 7);
    v13 = j__malloc_size(v12);
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 552);
  }
  else
  {
    v12 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v12 + 32;
  v15 = a4 + 32;
  v16 = 552 * v9;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v14 >= &v15[v16])
      memmove(v14, v15, v16);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v15 >= &v14[v16] || v14 >= &v15[v16])
  {
    swift_arrayInitWithCopy(v14);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v12;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_36898(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5EDC(&qword_1F1248);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_369E4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5EDC(&qword_1F1108);
    v11 = (_QWORD *)swift_allocObject(v10, 560 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 560);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = v11 + 4;
  v14 = a4 + 4;
  v15 = 70 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v11 + 4, a4 + 4, v15 * 8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    sub_5EDC(&qword_1F1110);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_36B80(char a1, int64_t a2, char a3, char *a4)
{
  return sub_36B8C(a1, a2, a3, a4, &qword_1F10F8);
}

uint64_t sub_36B8C(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    v11 = sub_5EDC(a5);
    v12 = (char *)swift_allocObject(v11, 16 * v10 + 32, 7);
    v13 = j__malloc_size(v12);
    v14 = v13 - 32;
    if (v13 < 32)
      v14 = v13 - 17;
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = 2 * (v14 >> 4);
  }
  else
  {
    v12 = (char *)_swiftEmptyArrayStorage;
  }
  v15 = v12 + 32;
  v16 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v15 >= &v16[16 * v9])
      memmove(v15, v16, 16 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v16 >= &v15[16 * v9] || v15 >= &v16[16 * v9])
  {
    memcpy(v15, v16, 16 * v9);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v12;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_36CE4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5EDC(&qword_1F11C0);
    v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8])
      memmove(v13, v14, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[24 * v8] || v13 >= &v14[24 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_36E68(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5EDC(&qword_1F11C8);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_36FD0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5EDC(&qword_1F1268);
    v11 = (_QWORD *)swift_allocObject(v10, 120 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 120);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 120 * v8)
      memmove(v11 + 4, a4 + 4, 120 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 120 * v8 || v13 >= v14 + 120 * v8)
  {
    sub_5EDC(&qword_1F1270);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_37174(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5EDC(&qword_1F1140);
    v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8])
      memmove(v13, v14, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[24 * v8] || v13 >= &v14[24 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_372F8(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_5EDC(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 32 * v12 + 32, 7);
    v15 = j__malloc_size(v14);
    v16 = v15 - 32;
    if (v15 < 32)
      v16 = v15 - 1;
    v14[2] = v11;
    v14[3] = 2 * (v16 >> 5);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  v17 = (unint64_t)(v14 + 4);
  v18 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v17 >= v18 + 32 * v11)
      memmove(v14 + 4, a4 + 4, 32 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v18 >= v17 + 32 * v11 || v17 >= v18 + 32 * v11)
  {
    sub_5EDC(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v14;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_37484(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5EDC(&qword_1F1070);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_375EC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5EDC(&qword_1F1198);
    v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8])
      memmove(v13, v14, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[24 * v8] || v13 >= &v14[24 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_37770(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5EDC(&qword_1F1188);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8)
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_5EDC(&qword_1F1190);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_378F8(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_5EDC(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (char *)v18 + v23;
  v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(_QWORD *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v24);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v26 = *(_QWORD *)(v22 + 72) * v11;
  v27 = &v24[v26];
  v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_37AD8(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5EDC(&qword_1F1098);
    v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 40 * v8)
      memmove(v11 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 40 * v8 || v13 >= v14 + 40 * v8)
  {
    sub_5EDC(&qword_1F10A0);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

_QWORD *sub_37C78(uint64_t a1)
{
  return sub_38D30(a1, &qword_1F1078, (uint64_t (*)(_QWORD *, _QWORD *, uint64_t, uint64_t))sub_3B450, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_41960);
}

_QWORD *sub_37C94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_5EDC(&qword_1F1220);
  v4 = *(_QWORD *)(sub_5EDC(&qword_1F1218) - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = (_QWORD *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  result = (_QWORD *)j__malloc_size(v8);
  if (v5)
  {
    if ((_QWORD *)((char *)result - v7) != (_QWORD *)0x8000000000000000 || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      v11 = *(unsigned __int8 *)(*(_QWORD *)(sub_5EDC(&qword_1F1218) - 8) + 80);
      v12 = sub_3B64C(&v14, (uint64_t)v8 + ((v11 + 32) & ~v11), v1, a1);
      v13 = v14;
      swift_bridgeObjectRetain(a1);
      sub_5FEC(v13);
      if (v12 == v1)
        return v8;
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_37DCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_5EDC(&qword_1F1090);
  v4 = (_QWORD *)swift_allocObject(v3, 8 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 25;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 3);
  v7 = sub_3BB54(&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_5FEC(v8);
  if (v7 != (_QWORD *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_37EB4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_16;
  if (!v5)
    return _swiftEmptyArrayStorage;
  if (v5 > 0)
  {
    v8 = sub_5EDC(&qword_1F1100);
    v9 = (_QWORD *)swift_allocObject(v8, 552 * v5 + 32, 7);
    v10 = j__malloc_size(v9);
    v9[2] = v5;
    v9[3] = 2 * ((uint64_t)(v10 - 32) / 552);
    if (v4 != a3)
      goto LABEL_5;
    goto LABEL_15;
  }
  v9 = _swiftEmptyArrayStorage;
  if (v4 == a3)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
LABEL_5:
  if (v5 < 0)
  {
LABEL_17:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_18;
  }
  v11 = (unint64_t)(v9 + 4);
  v12 = a2 + 552 * a3;
  if (v12 >= (unint64_t)&v9[69 * v5 + 4] || v11 >= v12 + 552 * v5)
  {
    swift_arrayInitWithCopy(v11);
    return v9;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_18:
  __break(1u);
  return result;
}

_QWORD *sub_38040(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_5EDC(&qword_1F1100);
  v4 = swift_allocObject(v3, 552 * v1 + 32, 7);
  v5 = j__malloc_size((const void *)v4);
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = 2 * ((uint64_t)(v5 - 32) / 552);
  v6 = sub_3B930(&v9, (char *)(v4 + 32), v1, a1);
  v7 = v9;
  swift_bridgeObjectRetain(a1);
  sub_5FEC(v7);
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return (_QWORD *)v4;
}

_QWORD *sub_38138(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_18;
  if (!v5)
    return _swiftEmptyArrayStorage;
  v8 = 16 * v5;
  if (v5 <= 0)
  {
    v10 = _swiftEmptyArrayStorage;
    if (v4 != a3)
      goto LABEL_7;
    goto LABEL_17;
  }
  v9 = sub_5EDC(&qword_1F1078);
  v10 = (_QWORD *)swift_allocObject(v9, v8 + 32, 7);
  v11 = j__malloc_size(v10);
  v12 = v11 - 32;
  if (v11 < 32)
    v12 = v11 - 17;
  v10[2] = v5;
  v10[3] = 2 * (v12 >> 4);
  if (v4 == a3)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_7:
  if (v5 < 0)
  {
LABEL_19:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_20;
  }
  v13 = v10 + 4;
  v14 = a2 + 16 * a3;
  if (v14 >= (unint64_t)&v10[(unint64_t)v8 / 8 + 4] || (unint64_t)v13 >= v14 + v8)
  {
    swift_arrayInitWithCopy(v13);
    return v10;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_20:
  __break(1u);
  return result;
}

_QWORD *sub_382A8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_16;
  if (!v5)
    return _swiftEmptyArrayStorage;
  if (v5 > 0)
  {
    v8 = sub_5EDC(&qword_1F10C8);
    v9 = (_QWORD *)swift_allocObject(v8, 80 * v5 + 32, 7);
    v10 = j__malloc_size(v9);
    v9[2] = v5;
    v9[3] = 2 * ((uint64_t)(v10 - 32) / 80);
    if (v4 != a3)
      goto LABEL_5;
    goto LABEL_15;
  }
  v9 = _swiftEmptyArrayStorage;
  if (v4 == a3)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
LABEL_5:
  if (v5 < 0)
  {
LABEL_17:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_18;
  }
  v11 = (unint64_t)(v9 + 4);
  v12 = a2 + 80 * a3;
  if (v12 >= (unint64_t)&v9[10 * v5 + 4] || v11 >= v12 + 80 * v5)
  {
    swift_arrayInitWithCopy(v11);
    return v9;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_18:
  __break(1u);
  return result;
}

_QWORD *sub_38430(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_5EDC(&qword_1F10C8);
  v4 = (_QWORD *)swift_allocObject(v3, 80 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v4[2] = v1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 80);
  v6 = sub_3BCE8(&v9, (uint64_t)(v4 + 4), v1, a1);
  v7 = v9;
  swift_bridgeObjectRetain(a1);
  sub_5FEC(v7);
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_38520(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_5EDC(&qword_1F1290);
  v4 = swift_allocObject(v3, (384 * v1) | 0x20, 7);
  v5 = j__malloc_size((const void *)v4);
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = 2 * ((uint64_t)(v5 - 32) / 384);
  v6 = sub_3BF4C(&v9, (char *)(v4 + 32), v1, a1);
  v7 = v9;
  swift_bridgeObjectRetain(a1);
  sub_5FEC(v7);
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return (_QWORD *)v4;
}

_QWORD *sub_38614(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_5EDC(&qword_1F1100);
  v4 = swift_allocObject(v3, 552 * v1 + 32, 7);
  v5 = j__malloc_size((const void *)v4);
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = 2 * ((uint64_t)(v5 - 32) / 552);
  v6 = sub_3C144(&v9, (char *)(v4 + 32), v1, a1);
  v7 = v9;
  swift_bridgeObjectRetain(a1);
  sub_5FEC(v7);
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return (_QWORD *)v4;
}

_QWORD *sub_3870C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_5EDC(&qword_1F1068);
  v4 = (_QWORD *)swift_allocObject(v3, 40 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v4[2] = v1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 40);
  v6 = sub_3C368(&v9, (uint64_t)(v4 + 4), v1, a1);
  v7 = v9;
  swift_bridgeObjectRetain(a1);
  sub_5FEC(v7);
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_387FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_5EDC(&qword_1F1068);
  v4 = (_QWORD *)swift_allocObject(v3, 40 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v4[2] = v1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 40);
  v6 = sub_2F5A4(&v9, (uint64_t)(v4 + 4), v1, a1);
  v7 = v9;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRelease(v7);
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_388C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_5EDC(&qword_1F1090);
  v4 = (_QWORD *)swift_allocObject(v3, 8 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 25;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 3);
  v7 = sub_3C8CC(&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_5FEC(v8);
  if (v7 != (_QWORD *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_389A8(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];

  v4 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }
  else
  {
    if (!v4)
      return _swiftEmptyArrayStorage;
    v8 = (uint64_t)result;
    if (v4 <= 0)
    {
      v10 = _swiftEmptyArrayStorage;
    }
    else
    {
      v9 = sub_5EDC(&qword_1F10B8);
      v10 = (_QWORD *)swift_allocObject(v9, 112 * v4 + 32, 7);
      v11 = j__malloc_size(v10);
      v10[2] = v4;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 112);
    }
    v12 = sub_2F6C4(v14, (uint64_t)(v10 + 4), v4, v8, a2, a3, a4);
    v13 = v14[0];
    swift_unknownObjectRetain(v8);
    result = (_QWORD *)swift_unknownObjectRelease(v13);
    if (v12 == v4)
      return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_38AB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_5EDC(&qword_1F10B8);
  v4 = (_QWORD *)swift_allocObject(v3, 112 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v4[2] = v1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 112);
  v6 = sub_2F8A0(&v8, (uint64_t)(v4 + 4), v1, a1);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRelease();
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_38B84(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_16;
  if (!v5)
    return _swiftEmptyArrayStorage;
  if (v5 > 0)
  {
    v8 = sub_5EDC(&qword_1F10B8);
    v9 = (_QWORD *)swift_allocObject(v8, 112 * v5 + 32, 7);
    v10 = j__malloc_size(v9);
    v9[2] = v5;
    v9[3] = 2 * ((uint64_t)(v10 - 32) / 112);
    if (v4 != a3)
      goto LABEL_5;
    goto LABEL_15;
  }
  v9 = _swiftEmptyArrayStorage;
  if (v4 == a3)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
LABEL_5:
  if (v5 < 0)
  {
LABEL_17:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_18;
  }
  v11 = (unint64_t)(v9 + 4);
  v12 = a2 + 112 * a3;
  if (v12 >= (unint64_t)&v9[14 * v5 + 4] || v11 >= v12 + 112 * v5)
  {
    swift_arrayInitWithCopy(v11);
    return v9;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_18:
  __break(1u);
  return result;
}

_QWORD *sub_38D14(uint64_t a1)
{
  return sub_38D30(a1, &qword_1F10F8, (uint64_t (*)(_QWORD *, _QWORD *, uint64_t, uint64_t))sub_3C594, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_5FEC);
}

_QWORD *sub_38D30(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD *, _QWORD *, uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[5];

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return _swiftEmptyArrayStorage;
  v8 = sub_5EDC(a2);
  v9 = (_QWORD *)swift_allocObject(v8, 16 * v4 + 32, 7);
  v10 = j__malloc_size(v9);
  v11 = v10 - 32;
  if (v10 < 32)
    v11 = v10 - 17;
  v9[2] = v4;
  v9[3] = 2 * (v11 >> 4);
  v12 = a3(v19, v9 + 4, v4, a1);
  v13 = v19[0];
  v14 = v19[1];
  v15 = v19[2];
  v16 = v19[3];
  v17 = v19[4];
  swift_bridgeObjectRetain(a1);
  a4(v13, v14, v15, v16, v17);
  if (v12 != v4)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v9;
}

_QWORD *sub_38E18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_5EDC(&qword_1F1090);
  v4 = (_QWORD *)swift_allocObject(v3, 8 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 25;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 3);
  v7 = sub_3C738(&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_5FEC(v8);
  if (v7 != (_QWORD *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

char *sub_38EFC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_18;
  if (!v5)
    return (char *)_swiftEmptyArrayStorage;
  v8 = 8 * v5;
  if (v5 <= 0)
  {
    v10 = (char *)_swiftEmptyArrayStorage;
    if (v4 != a3)
      goto LABEL_7;
    goto LABEL_17;
  }
  v9 = sub_5EDC(&qword_1F1090);
  v10 = (char *)swift_allocObject(v9, v8 + 32, 7);
  v11 = j__malloc_size(v10);
  v12 = v11 - 32;
  if (v11 < 32)
    v12 = v11 - 25;
  *((_QWORD *)v10 + 2) = v5;
  *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  if (v4 == a3)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_7:
  if (v5 < 0)
  {
LABEL_19:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_20;
  }
  v13 = v10 + 32;
  v14 = (char *)(a2 + 8 * a3);
  if (v14 >= &v10[v8 + 32] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, 8 * v5);
    return v10;
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_20:
  __break(1u);
  return result;
}

unint64_t sub_39064(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_323DC(a1, a2, v5);
}

uint64_t sub_390C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  sub_152734(*(_QWORD *)(v1 + 40), a1);
  return sub_324BC(a1, v3);
}

unint64_t sub_390F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for TimeZone(0);
  v6 = sub_41754(&qword_1F12D0, (uint64_t (*)(uint64_t))&type metadata accessor for TimeZone, (uint64_t)&protocol conformance descriptor for TimeZone);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_32760(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for TimeZone, &qword_1F12D8, (uint64_t)&protocol conformance descriptor for TimeZone);
}

unint64_t sub_39190(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for Date(0);
  v6 = sub_41754(&qword_1F10D8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_32760(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for Date, &qword_1F10E0, (uint64_t)&protocol conformance descriptor for Date);
}

unint64_t sub_39228(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = static Hasher._hash(seed:_:)(*(_QWORD *)(v1 + 40), a1);
  return sub_32890(a1, v3);
}

void sub_39258(char a1)
{
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, *(_QWORD *)(v1 + 40));
  __asm { BR              X10 }
}

uint64_t sub_392B8()
{
  uint64_t v0;
  Swift::Int v1;
  uint64_t v3;

  String.hash(into:)(&v3, 0x746E696F4A6C6C61, 0xE800000000000000);
  swift_bridgeObjectRelease(0xE800000000000000);
  v1 = Hasher._finalize()();
  return sub_3292C(v0, v1);
}

unint64_t sub_3933C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  unint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v2 = v1;
  Hasher.init(_seed:)(v9, *(_QWORD *)(v2 + 40));
  v4 = a1 & 1;
  if ((a1 & 1) != 0)
    v5 = 0x6F6F626F69647561;
  else
    v5 = 0x6B6F6F6265;
  if ((a1 & 1) != 0)
    v6 = 0xE90000000000006BLL;
  else
    v6 = 0xE500000000000000;
  String.hash(into:)(v9, v5, v6);
  swift_bridgeObjectRelease(v6);
  v7 = Hasher._finalize()();
  return sub_32B24(v4, v7);
}

unint64_t sub_393D0(char a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  unint64_t v5;
  unint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v2 = v1;
  Hasher.init(_seed:)(v9, *(_QWORD *)(v2 + 40));
  v4 = a1 & 1;
  if ((a1 & 1) != 0)
    v5 = 0xD000000000000011;
  else
    v5 = 0x6168637275706F63;
  if ((a1 & 1) != 0)
    v6 = 0x800000000019F150;
  else
    v6 = 0xEA00000000006573;
  String.hash(into:)(v9, v5, v6);
  swift_bridgeObjectRelease(v6);
  v7 = Hasher._finalize()();
  return sub_32C60(v4, v7);
}

unint64_t sub_3946C(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v1 + 40));
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x656E4F6C6576656CLL;
    else
      v3 = 0x6F77546C6576656CLL;
    v4 = 0xE800000000000000;
  }
  else
  {
    v4 = 0xE600000000000000;
    v3 = 0x73657661656CLL;
  }
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v4);
  v5 = Hasher._finalize()();
  return sub_32D9C(a1, v5);
}

uint64_t sub_3951C(uint64_t a1)
{
  uint64_t v1;
  Swift::Int v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, *(_QWORD *)(v1 + 40));
  sub_F8978((uint64_t)v5, a1);
  v3 = Hasher._finalize()();
  return sub_32F2C(a1, v3);
}

unint64_t sub_39574(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_41754(&qword_1F1168, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_32760(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1F1170, (uint64_t)&protocol conformance descriptor for UUID);
}

unint64_t sub_3960C(char a1)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v1 + 40));
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x797469746E656469;
    else
      v3 = 1768055156;
    if (a1 == 1)
      v4 = 0xE800000000000000;
    else
      v4 = 0xE400000000000000;
  }
  else
  {
    v4 = 0x800000000019EE20;
    v3 = 0xD000000000000013;
  }
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v4);
  v5 = Hasher._finalize()();
  return sub_33270(a1, v5);
}

void sub_396BC(char a1)
{
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, *(_QWORD *)(v1 + 40));
  __asm { BR              X10 }
}

uint64_t sub_39718()
{
  uint64_t v0;
  Swift::Int v1;
  uint64_t v3;

  String.hash(into:)(&v3, 0x747369486B6F6F62, 0xEB0000000079726FLL);
  swift_bridgeObjectRelease(0xEB0000000079726FLL);
  v1 = Hasher._finalize()();
  return sub_33400(v0, v1);
}

unint64_t sub_397A8(void *__src)
{
  uint64_t v1;
  uint64_t v3;
  Swift::Int v4;
  _QWORD v6[9];
  _BYTE __dst[545];

  v3 = *(_QWORD *)(v1 + 40);
  memcpy(__dst, __src, sizeof(__dst));
  Hasher.init(_seed:)(v6, v3);
  SeedBook.hash(into:)((uint64_t)v6);
  v4 = Hasher._finalize()();
  return sub_33630(__src, v4);
}

unint64_t sub_39814(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v1 + 40));
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x6F6F626F69647561;
    else
      v3 = 0x646578696DLL;
    if (a1 == 1)
      v4 = 0xE90000000000006BLL;
    else
      v4 = 0xE500000000000000;
  }
  else
  {
    v4 = 0xE500000000000000;
    v3 = 0x6B6F6F6265;
  }
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease();
  v5 = Hasher._finalize()();
  return sub_33738(a1, v5);
}

unint64_t sub_398C4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  _QWORD v11[9];

  Hasher.init(_seed:)(v11, *(_QWORD *)(v2 + 40));
  v5 = 0x800000000019FA50;
  v6 = 0xD000000000000012;
  if (a2 != 1)
  {
    v6 = a1;
    v5 = a2;
  }
  if (a2)
    v7 = v6;
  else
    v7 = 0x4148435255504F43;
  if (a2)
    v8 = v5;
  else
    v8 = 0xEA00000000004553;
  sub_1F6D4(a1, a2);
  String.hash(into:)(v11, v7, v8);
  swift_bridgeObjectRelease();
  v9 = Hasher._finalize()();
  return sub_338D0(a1, a2, v9);
}

unint64_t sub_3998C(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v1 + 40));
  if (a1)
  {
    if (a1 == 1)
      v3 = 12918;
    else
      v3 = 1768055156;
    if (a1 == 1)
      v4 = 0xE200000000000000;
    else
      v4 = 0xE400000000000000;
  }
  else
  {
    v4 = 0xE200000000000000;
    v3 = 12662;
  }
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease();
  v5 = Hasher._finalize()();
  return sub_33A98(a1, v5);
}

uint64_t sub_39A20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  sub_152854(*(_QWORD *)(v1 + 40), a1);
  return sub_33BF8(a1, v3);
}

void sub_39A50(char a1)
{
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, *(_QWORD *)(v1 + 40));
  __asm { BR              X10 }
}

uint64_t sub_39AAC()
{
  uint64_t v0;
  Swift::Int v1;
  uint64_t v3;

  String.hash(into:)(&v3, 0x495041616964656DLL, 0xE800000000000000);
  swift_bridgeObjectRelease();
  v1 = Hasher._finalize()();
  return sub_33E88(v0, v1);
}

uint64_t sub_39B44(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  char v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v45;
  unint64_t v46;
  _BYTE v47[40];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[48];
  uint64_t v53;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRetain(a1);
  sub_418BC(a1 + 32, (uint64_t)&v50, &qword_1F1320);
  v7 = v50;
  v8 = v51;
  v48 = v50;
  v49 = v51;
  sub_41300((uint64_t)v52, (uint64_t)v47, &qword_1F0E70);
  v9 = (_QWORD *)*a3;
  v11 = sub_39064(v7, v8);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    goto LABEL_23;
  v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_16B8E0();
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v22 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v23 = (uint64_t *)(v22[6] + 16 * v11);
    *v23 = v7;
    v23[1] = v8;
    sub_41300((uint64_t)v47, v22[7] + 40 * v11, &qword_1F0E70);
    v24 = v22[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v22[2] = v26;
    v27 = v4 - 1;
    if (!v27)
      return swift_bridgeObjectRelease_n(a1, 2);
    for (i = a1 + 88; ; i += 56)
    {
      sub_418BC(i, (uint64_t)&v50, &qword_1F1320);
      v30 = v50;
      v29 = v51;
      v48 = v50;
      v49 = v51;
      sub_41300((uint64_t)v52, (uint64_t)v47, &qword_1F0E70);
      v31 = (_QWORD *)*a3;
      v32 = sub_39064(v30, v29);
      v34 = v31[2];
      v35 = (v33 & 1) == 0;
      v25 = __OFADD__(v34, v35);
      v36 = v34 + v35;
      if (v25)
        break;
      v37 = v33;
      if (v31[3] < v36)
      {
        sub_15AC74(v36, 1);
        v32 = sub_39064(v30, v29);
        if ((v37 & 1) != (v38 & 1))
          goto LABEL_25;
      }
      if ((v37 & 1) != 0)
        goto LABEL_10;
      v39 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
      v40 = (uint64_t *)(v39[6] + 16 * v32);
      *v40 = v30;
      v40[1] = v29;
      sub_41300((uint64_t)v47, v39[7] + 40 * v32, &qword_1F0E70);
      v41 = v39[2];
      v25 = __OFADD__(v41, 1);
      v42 = v41 + 1;
      if (v25)
        goto LABEL_24;
      v39[2] = v42;
      if (!--v27)
        return swift_bridgeObjectRelease_n(a1, 2);
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_15AC74(v14, a2 & 1);
  v16 = sub_39064(v7, v8);
  if ((v15 & 1) == (v17 & 1))
  {
    v11 = v16;
    if ((v15 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v19 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v19);
    v53 = v19;
    swift_errorRetain(v19);
    v20 = sub_5EDC(&qword_1F1348);
    if ((swift_dynamicCast(v20, &v53, v20, &type metadata for _MergeError, 0) & 1) == 0)
    {
      swift_bridgeObjectRelease(a1);
      sub_417D8((uint64_t)v47, &qword_1F0E70);
      v21 = v49;
      swift_bridgeObjectRelease(a1);
      swift_bridgeObjectRelease(v21);
      return swift_errorRelease(v53);
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
LABEL_26:
  v45 = 0;
  v46 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v43._object = (void *)0x800000000019FEB0;
  v43._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v43);
  _print_unlocked<A, B>(_:_:)(&v48, &v45, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v44._countAndFlagsBits = 39;
  v44._object = (void *)0xE100000000000000;
  String.append(_:)(v44);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v45, v46, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

Swift::Int sub_39F40(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v20;
  Swift::Int v21;
  uint64_t *v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  Swift::Int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  Swift::Int v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  char v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  _QWORD *v110;
  Swift::Int v111;
  Swift::Int v112;
  Swift::Int v113;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        return sub_3A628(0, v3, 1, a1);
      return result;
    }
    goto LABEL_154;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_162:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  v111 = result;
  v108 = a1;
  if (v3 < 2)
  {
    v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v12 = _swiftEmptyArrayStorage[2];
      v11 = (char *)_swiftEmptyArrayStorage;
LABEL_120:
      v101 = v11;
      v110 = v8;
      if (v12 < 2)
        goto LABEL_117;
      v102 = *v108;
      while (1)
      {
        v103 = v12 - 2;
        if (v12 < 2)
          goto LABEL_149;
        if (!v102)
          goto LABEL_161;
        v100 = v101;
        v104 = *(_QWORD *)&v101[16 * v103 + 32];
        v105 = *(_QWORD *)&v101[16 * v12 + 24];
        sub_3A6F4((char *)(v102 + 16 * v104), (char *)(v102 + 16 * *(_QWORD *)&v101[16 * v12 + 16]), v102 + 16 * v105, __dst);
        if (v1)
          goto LABEL_116;
        if (v105 < v104)
          goto LABEL_150;
        if ((swift_isUniquelyReferenced_nonNull_native(v100) & 1) == 0)
          v100 = sub_4ECA8((uint64_t)v100);
        if (v103 >= *((_QWORD *)v100 + 2))
          goto LABEL_151;
        v106 = &v100[16 * v103 + 32];
        *(_QWORD *)v106 = v104;
        *((_QWORD *)v106 + 1) = v105;
        v107 = *((_QWORD *)v100 + 2);
        if (v12 > v107)
          goto LABEL_152;
        memmove(&v100[16 * v12 + 16], &v100[16 * v12 + 32], 16 * (v107 - v12));
        v101 = v100;
        *((_QWORD *)v100 + 2) = v107 - 1;
        v12 = v107 - 1;
        if (v107 <= 2)
          goto LABEL_117;
      }
    }
    v110 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for APICommonHelpers.StringKey);
    *(_QWORD *)(v7 + 16) = v6;
    v110 = (_QWORD *)v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v109 = v10 + 8;
  v11 = (char *)_swiftEmptyArrayStorage;
  v112 = v3;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 16 * v13);
    v18 = v17[1];
    if (v15 == *v17 && v16 == v18)
    {
      v21 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v20 = 0;
    }
    else
    {
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, *v17, v18, 1);
      v21 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v22 = (uint64_t *)(v109 + 16 * v21);
    do
    {
      v24 = *(v22 - 1);
      v25 = *v22;
      v26 = (_QWORD *)(v10 + 16 * v9);
      v27 = v26[1];
      if (v24 == *v26 && v25 == v27)
      {
        if ((v20 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v20 ^ _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, *v26, v27, 1)) & 1) != 0)
      {
        goto LABEL_36;
      }
      v22 += 2;
      v23 = v21 + 1;
      v9 = v21;
      v21 = v23;
    }
    while (v23 < v3);
    v21 = v23;
LABEL_36:
    v9 = v21;
    if ((v20 & 1) != 0)
    {
LABEL_37:
      if (v21 < v13)
        goto LABEL_157;
      if (v13 < v21)
      {
        v29 = 16 * v21;
        v30 = 16 * v13;
        v31 = v21;
        v32 = v13;
        do
        {
          if (v32 != --v31)
          {
            if (!v10)
              goto LABEL_160;
            v33 = v10 + v29;
            v34 = *(_QWORD *)(v10 + v30);
            v35 = *(_QWORD *)(v10 + v30 + 8);
            *(_OWORD *)(v10 + v30) = *(_OWORD *)(v10 + v29 - 16);
            *(_QWORD *)(v33 - 16) = v34;
            *(_QWORD *)(v33 - 8) = v35;
          }
          ++v32;
          v29 -= 16;
          v30 += 16;
        }
        while (v32 < v31);
      }
LABEL_45:
      v9 = v21;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_153;
      if (v9 - v13 < v111)
      {
        if (__OFADD__(v13, v111))
          goto LABEL_155;
        if (v13 + v111 >= v3)
          v36 = v3;
        else
          v36 = v13 + v111;
        if (v36 < v13)
          goto LABEL_156;
        if (v9 != v36)
        {
          v37 = (_QWORD *)(v10 + 16 * v9);
          do
          {
            v38 = (uint64_t *)(v10 + 16 * v9);
            v39 = *v38;
            v40 = v38[1];
            v41 = v13;
            v42 = v37;
            do
            {
              v43 = *(v42 - 2);
              v44 = *(v42 - 1);
              v45 = v39 == v43 && v40 == v44;
              if (v45 || (_stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, v43, v44, 1) & 1) == 0)
                break;
              if (!v10)
                goto LABEL_158;
              v39 = *v42;
              v40 = v42[1];
              *(_OWORD *)v42 = *((_OWORD *)v42 - 1);
              *(v42 - 1) = v40;
              *(v42 - 2) = v39;
              v42 -= 2;
              ++v41;
            }
            while (v9 != v41);
            ++v9;
            v37 += 2;
          }
          while (v9 != v36);
          v9 = v36;
        }
      }
    }
    if (v9 < v13)
    {
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
      goto LABEL_162;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_4E4E4(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v47 = *((_QWORD *)v11 + 2);
    v46 = *((_QWORD *)v11 + 3);
    v12 = v47 + 1;
    if (v47 >= v46 >> 1)
      v11 = sub_4E4E4((char *)(v46 > 1), v47 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v48 = v11 + 32;
    v49 = &v11[16 * v47 + 32];
    *(_QWORD *)v49 = v13;
    *((_QWORD *)v49 + 1) = v9;
    if (v47)
      break;
    v12 = 1;
LABEL_15:
    v3 = v112;
    if (v9 >= v112)
    {
      v8 = v110;
      goto LABEL_120;
    }
  }
  v113 = v9;
  while (1)
  {
    v50 = v12 - 1;
    if (v12 >= 4)
    {
      v55 = &v48[16 * v12];
      v56 = *((_QWORD *)v55 - 8);
      v57 = *((_QWORD *)v55 - 7);
      v61 = __OFSUB__(v57, v56);
      v58 = v57 - v56;
      if (v61)
        goto LABEL_137;
      v60 = *((_QWORD *)v55 - 6);
      v59 = *((_QWORD *)v55 - 5);
      v61 = __OFSUB__(v59, v60);
      v53 = v59 - v60;
      v54 = v61;
      if (v61)
        goto LABEL_138;
      v62 = v12 - 2;
      v63 = &v48[16 * v12 - 32];
      v65 = *(_QWORD *)v63;
      v64 = *((_QWORD *)v63 + 1);
      v61 = __OFSUB__(v64, v65);
      v66 = v64 - v65;
      if (v61)
        goto LABEL_140;
      v61 = __OFADD__(v53, v66);
      v67 = v53 + v66;
      if (v61)
        goto LABEL_143;
      if (v67 >= v58)
      {
        v85 = &v48[16 * v50];
        v87 = *(_QWORD *)v85;
        v86 = *((_QWORD *)v85 + 1);
        v61 = __OFSUB__(v86, v87);
        v88 = v86 - v87;
        if (v61)
          goto LABEL_147;
        v78 = v53 < v88;
        goto LABEL_105;
      }
    }
    else
    {
      if (v12 != 3)
      {
        v79 = *((_QWORD *)v11 + 4);
        v80 = *((_QWORD *)v11 + 5);
        v61 = __OFSUB__(v80, v79);
        v72 = v80 - v79;
        v73 = v61;
        goto LABEL_99;
      }
      v52 = *((_QWORD *)v11 + 4);
      v51 = *((_QWORD *)v11 + 5);
      v61 = __OFSUB__(v51, v52);
      v53 = v51 - v52;
      v54 = v61;
    }
    if ((v54 & 1) != 0)
      goto LABEL_139;
    v62 = v12 - 2;
    v68 = &v48[16 * v12 - 32];
    v70 = *(_QWORD *)v68;
    v69 = *((_QWORD *)v68 + 1);
    v71 = __OFSUB__(v69, v70);
    v72 = v69 - v70;
    v73 = v71;
    if (v71)
      goto LABEL_142;
    v74 = &v48[16 * v50];
    v76 = *(_QWORD *)v74;
    v75 = *((_QWORD *)v74 + 1);
    v61 = __OFSUB__(v75, v76);
    v77 = v75 - v76;
    if (v61)
      goto LABEL_145;
    if (__OFADD__(v72, v77))
      goto LABEL_146;
    if (v72 + v77 >= v53)
    {
      v78 = v53 < v77;
LABEL_105:
      if (v78)
        v50 = v62;
      goto LABEL_107;
    }
LABEL_99:
    if ((v73 & 1) != 0)
      goto LABEL_141;
    v81 = &v48[16 * v50];
    v83 = *(_QWORD *)v81;
    v82 = *((_QWORD *)v81 + 1);
    v61 = __OFSUB__(v82, v83);
    v84 = v82 - v83;
    if (v61)
      goto LABEL_144;
    if (v84 < v72)
      goto LABEL_15;
LABEL_107:
    v89 = v50 - 1;
    if (v50 - 1 >= v12)
    {
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }
    v90 = v10;
    if (!v10)
      goto LABEL_159;
    v91 = v11;
    v92 = &v48[16 * v89];
    v93 = *(_QWORD *)v92;
    v94 = v48;
    v95 = v50;
    v96 = &v48[16 * v50];
    v97 = *((_QWORD *)v96 + 1);
    v98 = v90;
    sub_3A6F4((char *)(v90 + 16 * *(_QWORD *)v92), (char *)(v90 + 16 * *(_QWORD *)v96), v90 + 16 * v97, __dst);
    if (v1)
      break;
    if (v97 < v93)
      goto LABEL_134;
    if (v95 > *((_QWORD *)v91 + 2))
      goto LABEL_135;
    *(_QWORD *)v92 = v93;
    *(_QWORD *)&v94[16 * v89 + 8] = v97;
    v99 = *((_QWORD *)v91 + 2);
    if (v95 >= v99)
      goto LABEL_136;
    v11 = v91;
    v12 = v99 - 1;
    memmove(v96, v96 + 16, 16 * (v99 - 1 - v95));
    v48 = v94;
    *((_QWORD *)v91 + 2) = v99 - 1;
    v10 = v98;
    v9 = v113;
    if (v99 <= 2)
      goto LABEL_15;
  }
  v100 = v91;
LABEL_116:
  v101 = v100;
LABEL_117:
  swift_bridgeObjectRelease(v101);
  v110[2] = 0;
  return swift_bridgeObjectRelease(v110);
}

uint64_t sub_3A628(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
LABEL_5:
    v9 = (uint64_t *)(v7 + 16 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = (uint64_t *)v8;
    while (1)
    {
      v13 = *(v12 - 2);
      v14 = *(v12 - 1);
      v15 = result == v13 && v10 == v14;
      if (v15 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v10, v13, v14, 1), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      result = *v12;
      v10 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_3A6F4(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t result;
  char *v29;
  char *v30;
  char *v31;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v31 = __src;
  v30 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v19 = &v4[16 * v13];
      v29 = v19;
      v31 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v20 = (char *)(a3 - 16);
        v21 = v6;
        while (1)
        {
          v22 = v20 + 16;
          v23 = *((_QWORD *)v19 - 2);
          v24 = *((_QWORD *)v19 - 1);
          v25 = *((_QWORD *)v21 - 2);
          v26 = *((_QWORD *)v21 - 1);
          v21 -= 16;
          v27 = v23 == v25 && v24 == v26;
          if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v25, v26, 1) & 1) == 0)
          {
            v29 = v19 - 16;
            if (v22 < v19 || v20 >= v19 || v22 != v19)
              *(_OWORD *)v20 = *((_OWORD *)v19 - 1);
            v21 = v6;
            v19 -= 16;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v22 != v6 || v20 >= v6)
              *(_OWORD *)v20 = *(_OWORD *)v21;
            v31 = v21;
            if (v21 <= v7)
              goto LABEL_50;
          }
          v20 -= 16;
          v6 = v21;
          if (v19 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v29 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        v15 = *((_QWORD *)v6 + 1);
        v16 = *((_QWORD *)v4 + 1);
        v17 = *(_QWORD *)v6 == *(_QWORD *)v4 && v15 == v16;
        if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v6, v15, *(_QWORD *)v4, v16, 1) & 1) == 0)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v30 = v4;
          v18 = v6;
        }
        else
        {
          v18 = v6 + 16;
          if (v7 < v6 || v7 >= v18 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v18;
      }
      while ((unint64_t)v18 < a3);
      v31 = v7;
    }
LABEL_50:
    sub_4E5E0((void **)&v31, (const void **)&v30, &v29);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

unsigned __int8 *sub_3A98C(unsigned __int8 *a1, uint64_t a2, int64_t a3)
{
  return sub_3AA9C(a1, a2, a3);
}

uint64_t sub_3A9A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_3A9AC(a1, a2, a3, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_3AA9C);
}

uint64_t sub_3A9AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *, uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v16 = a1;
  v17 = a2;
  swift_bridgeObjectRetain(a2);
  v6 = String.init<A>(_:)(&v16, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v8 = v6;
  v9 = v7;
  if ((v7 & 0x1000000000000000) == 0)
  {
    if ((v7 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v11 = HIBYTE(v9) & 0xF;
    v16 = v8;
    v17 = v9 & 0xFFFFFFFFFFFFFFLL;
    v10 = &v16;
    goto LABEL_7;
  }
  v8 = sub_3AF94(v6, v7);
  v13 = v12;
  swift_bridgeObjectRelease(v9);
  v9 = v13;
  if ((v13 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v8 & 0x1000000000000000) != 0)
  {
    v10 = (uint64_t *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v11 = v8 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v10 = (uint64_t *)_StringObject.sharedUTF8.getter(v8, v9);
  }
LABEL_7:
  v14 = a4(v10, v11, a3);
  swift_bridgeObjectRelease(v9);
  return v14;
}

unsigned __int8 *sub_3AA9C(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  unint64_t v13;
  unsigned __int8 v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  unint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unint64_t v28;
  unsigned int v29;
  char v30;
  unint64_t v31;
  unsigned __int8 v32;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              if (!is_mul_ok(v9, a3))
                return 0;
              v13 = v9 * a3;
              v14 = v11 + v12;
              v15 = v13 >= v14;
              v9 = v13 - v14;
              if (!v15)
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      v25 = a3 + 48;
      v26 = a3 + 55;
      v27 = a3 + 87;
      if (a3 > 10)
      {
        v25 = 58;
      }
      else
      {
        v27 = 97;
        v26 = 65;
      }
      if (result)
      {
        v28 = 0;
        do
        {
          v29 = *result;
          if (v29 < 0x30 || v29 >= v25)
          {
            if (v29 < 0x41 || v29 >= v26)
            {
              if (v29 < 0x61 || v29 >= v27)
                return 0;
              v30 = -87;
            }
            else
            {
              v30 = -55;
            }
          }
          else
          {
            v30 = -48;
          }
          if (!is_mul_ok(v28, a3))
            return 0;
          v31 = v28 * a3;
          v32 = v29 + v30;
          v15 = __CFADD__(v31, v32);
          v28 = v31 + v32;
          if (v15)
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v28;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  v16 = a2 - 1;
  if (a2 == 1)
    return 0;
  v17 = a3 + 48;
  v18 = a3 + 55;
  v19 = a3 + 87;
  if (a3 > 10)
  {
    v17 = 58;
  }
  else
  {
    v19 = 97;
    v18 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v20 = result + 1;
  do
  {
    v21 = *v20;
    if (v21 < 0x30 || v21 >= v17)
    {
      if (v21 < 0x41 || v21 >= v18)
      {
        if (v21 < 0x61 || v21 >= v19)
          return 0;
        v22 = -87;
      }
      else
      {
        v22 = -55;
      }
    }
    else
    {
      v22 = -48;
    }
    if (!is_mul_ok(v9, a3))
      return 0;
    v23 = v9 * a3;
    v24 = v21 + v22;
    v15 = __CFADD__(v23, v24);
    v9 = v23 + v24;
    if (v15)
      return 0;
    ++v20;
    --v16;
  }
  while (v16);
  return (unsigned __int8 *)v9;
}

unsigned __int8 *sub_3AD18(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_3AF94(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v6 = v5;
  v9 = sub_3B010(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_3B010(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_3B154(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_31C10(v12, 0);
      v5 = sub_3B240((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v14;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }
}

unint64_t sub_3B154(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_31C74(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_31C74(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t sub_3B240(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_31C74(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_31C74(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_3B450(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain(v21);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_3B64C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  _QWORD *v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v8 = sub_5EDC(&qword_1F1218);
  v36 = *(_QWORD *)(v8 - 8);
  v37 = v8;
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v9);
  v14 = (char *)&v30 - v13;
  v15 = *(_QWORD *)(a4 + 64);
  v34 = a4 + 64;
  v16 = -1 << *(_BYTE *)(a4 + 32);
  if (-v16 < 64)
    v17 = ~(-1 << -(char)v16);
  else
    v17 = -1;
  v18 = v17 & v15;
  if (!a2)
  {
    v19 = 0;
    a3 = 0;
LABEL_38:
    v29 = v34;
    *a1 = a4;
    a1[1] = v29;
    a1[2] = ~v16;
    a1[3] = v19;
    a1[4] = v18;
    return a3;
  }
  if (!a3)
  {
    v19 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v31 = -1 << *(_BYTE *)(a4 + 32);
  v32 = a1;
  v19 = 0;
  v20 = 0;
  v33 = (unint64_t)(63 - v16) >> 6;
  v30 = v33 - 1;
  v35 = a3;
  if (!v18)
    goto LABEL_9;
LABEL_8:
  v21 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  v22 = v21 | (v19 << 6);
  while (1)
  {
    ++v20;
    v26 = *(_QWORD *)(a4 + 56);
    v27 = *(_BYTE *)(*(_QWORD *)(a4 + 48) + v22);
    v28 = type metadata accessor for AttributeAffinityResult(0);
    sub_412BC(v26 + *(_QWORD *)(*(_QWORD *)(v28 - 8) + 72) * v22, (uint64_t)&v11[*(int *)(v37 + 48)]);
    *v11 = v27;
    sub_41300((uint64_t)v11, (uint64_t)v14, &qword_1F1218);
    result = sub_41300((uint64_t)v14, a2, &qword_1F1218);
    a3 = v35;
    if (v20 == v35)
      goto LABEL_37;
    a2 += *(_QWORD *)(v36 + 72);
    if (v18)
      goto LABEL_8;
LABEL_9:
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v23 >= v33)
      goto LABEL_32;
    v24 = *(_QWORD *)(v34 + 8 * v23);
    if (!v24)
      break;
LABEL_18:
    v18 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v23 << 6);
    v19 = v23;
  }
  v19 += 2;
  if (v23 + 1 >= v33)
  {
    v18 = 0;
    v19 = v23;
    goto LABEL_36;
  }
  v24 = *(_QWORD *)(v34 + 8 * v19);
  if (v24)
    goto LABEL_14;
  v25 = v23 + 2;
  if (v23 + 2 >= v33)
    goto LABEL_32;
  v24 = *(_QWORD *)(v34 + 8 * v25);
  if (v24)
    goto LABEL_17;
  v19 = v23 + 3;
  if (v23 + 3 >= v33)
  {
    v18 = 0;
    v19 = v23 + 2;
    goto LABEL_36;
  }
  v24 = *(_QWORD *)(v34 + 8 * v19);
  if (v24)
  {
LABEL_14:
    v23 = v19;
    goto LABEL_18;
  }
  v25 = v23 + 4;
  if (v23 + 4 >= v33)
  {
LABEL_32:
    v18 = 0;
LABEL_36:
    a3 = v20;
LABEL_37:
    v16 = v31;
    a1 = v32;
    goto LABEL_38;
  }
  v24 = *(_QWORD *)(v34 + 8 * v25);
  if (v24)
  {
LABEL_17:
    v23 = v25;
    goto LABEL_18;
  }
  while (1)
  {
    v23 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v23 >= v33)
    {
      v18 = 0;
      v19 = v30;
      goto LABEL_36;
    }
    v24 = *(_QWORD *)(v34 + 8 * v23);
    ++v25;
    if (v24)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *sub_3B930(_QWORD *result, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  const void *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD __dst[70];

  v5 = a4 + 56;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v11 = 0;
    v9 = 0;
LABEL_39:
    *result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (_QWORD *)v9;
  }
  v9 = a3;
  if (!a3)
  {
    v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v10 = a2;
  v20 = -1 << *(_BYTE *)(a4 + 32);
  v21 = result;
  v11 = 0;
  v12 = 0;
  v13 = (unint64_t)(63 - v6) >> 6;
  if (!v8)
    goto LABEL_9;
LABEL_8:
  v14 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v15 = v14 | (v11 << 6);
  while (1)
  {
    ++v12;
    v19 = (const void *)(*(_QWORD *)(a4 + 48) + 552 * v15);
    memcpy(__dst, v19, 0x221uLL);
    memmove(v10, v19, 0x221uLL);
    if (v12 == v9)
    {
      sub_6100(__dst);
      goto LABEL_38;
    }
    v10 += 552;
    result = sub_6100(__dst);
    if (v8)
      goto LABEL_8;
LABEL_9:
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v16 >= v13)
      goto LABEL_33;
    v17 = *(_QWORD *)(v5 + 8 * v16);
    if (!v17)
    {
      v11 += 2;
      if (v16 + 1 >= v13)
      {
        v8 = 0;
        v11 = v16;
      }
      else
      {
        v17 = *(_QWORD *)(v5 + 8 * v11);
        if (v17)
          goto LABEL_14;
        v18 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_33;
        v17 = *(_QWORD *)(v5 + 8 * v18);
        if (v17)
        {
LABEL_17:
          v16 = v18;
          goto LABEL_18;
        }
        v11 = v16 + 3;
        if (v16 + 3 < v13)
        {
          v17 = *(_QWORD *)(v5 + 8 * v11);
          if (v17)
          {
LABEL_14:
            v16 = v11;
            goto LABEL_18;
          }
          v18 = v16 + 4;
          if (v16 + 4 >= v13)
          {
LABEL_33:
            v8 = 0;
            goto LABEL_37;
          }
          v17 = *(_QWORD *)(v5 + 8 * v18);
          if (!v17)
          {
            while (1)
            {
              v16 = v18 + 1;
              if (__OFADD__(v18, 1))
                goto LABEL_42;
              if (v16 >= v13)
              {
                v8 = 0;
                v11 = v13 - 1;
                goto LABEL_37;
              }
              v17 = *(_QWORD *)(v5 + 8 * v16);
              ++v18;
              if (v17)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v8 = 0;
        v11 = v16 + 2;
      }
LABEL_37:
      v9 = v12;
LABEL_38:
      v6 = v20;
      result = v21;
      goto LABEL_39;
    }
LABEL_18:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v11 = v16;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

_QWORD *sub_3BB54(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 56;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

_QWORD *sub_3BCE8(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v5 = a4 + 64;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v11 = 0;
    v9 = 0;
LABEL_39:
    *result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (_QWORD *)v9;
  }
  v9 = a3;
  if (!a3)
  {
    v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v10 = a2;
  v29 = -1 << *(_BYTE *)(a4 + 32);
  v30 = result;
  v11 = 0;
  v12 = 0;
  v13 = (unint64_t)(63 - v6) >> 6;
  if (!v8)
    goto LABEL_9;
LABEL_8:
  v14 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v15 = v14 | (v11 << 6);
  while (1)
  {
    v19 = *(_QWORD *)(a4 + 56) + 80 * v15;
    ++v12;
    v20 = *(_BYTE *)(v19 + 8);
    v21 = *(_QWORD *)(v19 + 16);
    v22 = *(_BYTE *)(v19 + 24);
    v23 = *(_QWORD *)(v19 + 32);
    v24 = *(_BYTE *)(v19 + 40);
    v26 = *(_QWORD *)(v19 + 48);
    v25 = *(_QWORD *)(v19 + 56);
    v27 = *(_QWORD *)(v19 + 64);
    v28 = *(_QWORD *)(v19 + 72);
    *(_QWORD *)v10 = *(_QWORD *)v19;
    *(_BYTE *)(v10 + 8) = v20;
    *(_QWORD *)(v10 + 16) = v21;
    *(_BYTE *)(v10 + 24) = v22;
    *(_QWORD *)(v10 + 32) = v23;
    *(_BYTE *)(v10 + 40) = v24;
    *(_QWORD *)(v10 + 48) = v26;
    *(_QWORD *)(v10 + 56) = v25;
    *(_QWORD *)(v10 + 64) = v27;
    *(_QWORD *)(v10 + 72) = v28;
    if (v12 == v9)
    {
      sub_40554(v23, v24);
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRetain(v26);
      goto LABEL_38;
    }
    v10 += 80;
    sub_40554(v23, v24);
    swift_bridgeObjectRetain(v27);
    result = (_QWORD *)swift_bridgeObjectRetain(v26);
    if (v8)
      goto LABEL_8;
LABEL_9:
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v16 >= v13)
      goto LABEL_33;
    v17 = *(_QWORD *)(v5 + 8 * v16);
    if (!v17)
    {
      v11 += 2;
      if (v16 + 1 >= v13)
      {
        v8 = 0;
        v11 = v16;
      }
      else
      {
        v17 = *(_QWORD *)(v5 + 8 * v11);
        if (v17)
          goto LABEL_14;
        v18 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_33;
        v17 = *(_QWORD *)(v5 + 8 * v18);
        if (v17)
        {
LABEL_17:
          v16 = v18;
          goto LABEL_18;
        }
        v11 = v16 + 3;
        if (v16 + 3 < v13)
        {
          v17 = *(_QWORD *)(v5 + 8 * v11);
          if (v17)
          {
LABEL_14:
            v16 = v11;
            goto LABEL_18;
          }
          v18 = v16 + 4;
          if (v16 + 4 >= v13)
          {
LABEL_33:
            v8 = 0;
            goto LABEL_37;
          }
          v17 = *(_QWORD *)(v5 + 8 * v18);
          if (!v17)
          {
            while (1)
            {
              v16 = v18 + 1;
              if (__OFADD__(v18, 1))
                goto LABEL_42;
              if (v16 >= v13)
              {
                v8 = 0;
                v11 = v13 - 1;
                goto LABEL_37;
              }
              v17 = *(_QWORD *)(v5 + 8 * v16);
              ++v18;
              if (v17)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v8 = 0;
        v11 = v16 + 2;
      }
LABEL_37:
      v9 = v12;
LABEL_38:
      v6 = v29;
      result = v30;
      goto LABEL_39;
    }
LABEL_18:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v11 = v16;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

_QWORD *sub_3BF4C(_QWORD *result, char *__dst, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;

  v5 = result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!__dst)
  {
    v12 = 0;
    v10 = 0;
LABEL_37:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_37;
  }
  if (a3 < 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v11 = __dst;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  v20 = -1 << *(_BYTE *)(a4 + 32);
  while (v9)
  {
    v15 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v16 = v15 | (v12 << 6);
LABEL_9:
    ++v13;
    result = memmove(v11, (const void *)(*(_QWORD *)(a4 + 56) + 384 * v16), 0x179uLL);
    v11 += 384;
    if (v13 == v10)
      goto LABEL_36;
  }
  v17 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_39;
  }
  if (v17 >= v14)
    goto LABEL_31;
  v18 = *(_QWORD *)(v6 + 8 * v17);
  if (v18)
    goto LABEL_20;
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_35;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_16:
    v17 = v12;
LABEL_20:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
    goto LABEL_9;
  }
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_31;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_19:
    v17 = v19;
    goto LABEL_20;
  }
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_35;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_16;
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_31:
    v9 = 0;
LABEL_35:
    v10 = v13;
LABEL_36:
    v7 = v20;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_19;
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_35;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_20;
  }
LABEL_40:
  __break(1u);
  return result;
}

_QWORD *sub_3C144(_QWORD *result, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  const void *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD __dst[70];

  v5 = a4 + 64;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v11 = 0;
    v9 = 0;
LABEL_39:
    *result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (_QWORD *)v9;
  }
  v9 = a3;
  if (!a3)
  {
    v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v10 = a2;
  v20 = -1 << *(_BYTE *)(a4 + 32);
  v21 = result;
  v11 = 0;
  v12 = 0;
  v13 = (unint64_t)(63 - v6) >> 6;
  if (!v8)
    goto LABEL_9;
LABEL_8:
  v14 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v15 = v14 | (v11 << 6);
  while (1)
  {
    ++v12;
    v19 = (const void *)(*(_QWORD *)(a4 + 56) + 552 * v15);
    memcpy(__dst, v19, 0x221uLL);
    memmove(v10, v19, 0x221uLL);
    if (v12 == v9)
    {
      sub_6100(__dst);
      goto LABEL_38;
    }
    v10 += 552;
    result = sub_6100(__dst);
    if (v8)
      goto LABEL_8;
LABEL_9:
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v16 >= v13)
      goto LABEL_33;
    v17 = *(_QWORD *)(v5 + 8 * v16);
    if (!v17)
    {
      v11 += 2;
      if (v16 + 1 >= v13)
      {
        v8 = 0;
        v11 = v16;
      }
      else
      {
        v17 = *(_QWORD *)(v5 + 8 * v11);
        if (v17)
          goto LABEL_14;
        v18 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_33;
        v17 = *(_QWORD *)(v5 + 8 * v18);
        if (v17)
        {
LABEL_17:
          v16 = v18;
          goto LABEL_18;
        }
        v11 = v16 + 3;
        if (v16 + 3 < v13)
        {
          v17 = *(_QWORD *)(v5 + 8 * v11);
          if (v17)
          {
LABEL_14:
            v16 = v11;
            goto LABEL_18;
          }
          v18 = v16 + 4;
          if (v16 + 4 >= v13)
          {
LABEL_33:
            v8 = 0;
            goto LABEL_37;
          }
          v17 = *(_QWORD *)(v5 + 8 * v18);
          if (!v17)
          {
            while (1)
            {
              v16 = v18 + 1;
              if (__OFADD__(v18, 1))
                goto LABEL_42;
              if (v16 >= v13)
              {
                v8 = 0;
                v11 = v13 - 1;
                goto LABEL_37;
              }
              v17 = *(_QWORD *)(v5 + 8 * v16);
              ++v18;
              if (v17)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v8 = 0;
        v11 = v16 + 2;
      }
LABEL_37:
      v9 = v12;
LABEL_38:
      v6 = v20;
      result = v21;
      goto LABEL_39;
    }
LABEL_18:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v11 = v16;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

_QWORD *sub_3C368(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v5 = a4 + 64;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v11 = 0;
    v9 = 0;
LABEL_39:
    *result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (_QWORD *)v9;
  }
  v9 = a3;
  if (!a3)
  {
    v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v10 = a2;
  v24 = -1 << *(_BYTE *)(a4 + 32);
  v25 = result;
  v11 = 0;
  v12 = 0;
  v13 = (unint64_t)(63 - v6) >> 6;
  if (!v8)
    goto LABEL_9;
LABEL_8:
  v14 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v15 = v14 | (v11 << 6);
  while (1)
  {
    ++v12;
    v19 = *(_QWORD *)(a4 + 56) + 40 * v15;
    v20 = *(_BYTE *)(v19 + 8);
    v22 = *(_QWORD *)(v19 + 16);
    v21 = *(_QWORD *)(v19 + 24);
    v23 = *(_QWORD *)(v19 + 32);
    *(_QWORD *)v10 = *(_QWORD *)v19;
    *(_BYTE *)(v10 + 8) = v20;
    *(_QWORD *)(v10 + 16) = v22;
    *(_QWORD *)(v10 + 24) = v21;
    *(_QWORD *)(v10 + 32) = v23;
    if (v12 == v9)
    {
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      goto LABEL_38;
    }
    v10 += 40;
    swift_bridgeObjectRetain(v21);
    result = (_QWORD *)swift_bridgeObjectRetain(v22);
    if (v8)
      goto LABEL_8;
LABEL_9:
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v16 >= v13)
      goto LABEL_33;
    v17 = *(_QWORD *)(v5 + 8 * v16);
    if (!v17)
    {
      v11 += 2;
      if (v16 + 1 >= v13)
      {
        v8 = 0;
        v11 = v16;
      }
      else
      {
        v17 = *(_QWORD *)(v5 + 8 * v11);
        if (v17)
          goto LABEL_14;
        v18 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_33;
        v17 = *(_QWORD *)(v5 + 8 * v18);
        if (v17)
        {
LABEL_17:
          v16 = v18;
          goto LABEL_18;
        }
        v11 = v16 + 3;
        if (v16 + 3 < v13)
        {
          v17 = *(_QWORD *)(v5 + 8 * v11);
          if (v17)
          {
LABEL_14:
            v16 = v11;
            goto LABEL_18;
          }
          v18 = v16 + 4;
          if (v16 + 4 >= v13)
          {
LABEL_33:
            v8 = 0;
            goto LABEL_37;
          }
          v17 = *(_QWORD *)(v5 + 8 * v18);
          if (!v17)
          {
            while (1)
            {
              v16 = v18 + 1;
              if (__OFADD__(v18, 1))
                goto LABEL_42;
              if (v16 >= v13)
              {
                v8 = 0;
                v11 = v13 - 1;
                goto LABEL_37;
              }
              v17 = *(_QWORD *)(v5 + 8 * v16);
              ++v18;
              if (v17)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v8 = 0;
        v11 = v16 + 2;
      }
LABEL_37:
      v9 = v12;
LABEL_38:
      v6 = v24;
      result = v25;
      goto LABEL_39;
    }
LABEL_18:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v11 = v16;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

_QWORD *sub_3C594(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    v13 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v12);
    *a2 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v12);
    a2[1] = v13;
    a2 += 2;
    if (v9 == a3)
      goto LABEL_35;
  }
  v14 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v14 >= v10)
    goto LABEL_30;
  v15 = *(_QWORD *)(v4 + 8 * v14);
  if (v15)
    goto LABEL_19;
  v8 += 2;
  if (v14 + 1 >= v10)
  {
    v7 = 0;
    v8 = v14;
    goto LABEL_34;
  }
  v15 = *(_QWORD *)(v4 + 8 * v8);
  if (v15)
  {
LABEL_15:
    v14 = v8;
LABEL_19:
    v17 = __clz(__rbit64(v15));
    v7 = (v15 - 1) & v15;
    v12 = v17 + (v14 << 6);
    v8 = v14;
    goto LABEL_8;
  }
  v16 = v14 + 2;
  if (v14 + 2 >= v10)
    goto LABEL_30;
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
LABEL_18:
    v14 = v16;
    goto LABEL_19;
  }
  v8 = v14 + 3;
  if (v14 + 3 >= v10)
  {
    v7 = 0;
    v8 = v14 + 2;
    goto LABEL_34;
  }
  v15 = *(_QWORD *)(v4 + 8 * v8);
  if (v15)
    goto LABEL_15;
  v16 = v14 + 4;
  if (v14 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
    goto LABEL_18;
  while (1)
  {
    v14 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v14 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v16;
    if (v15)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

_QWORD *sub_3C738(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

_QWORD *sub_3C8CC(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_3CA60(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4;
  uint64_t v5;

  v4 = __OFADD__(a1, a2);
  v5 = a1 + a2;
  if (v4)
  {
    __break(1u);
    JUMPOUT(0x3CAC0);
  }
  return ((uint64_t (*)(uint64_t))((char *)&loc_3CA78 + dword_3CAC4[a4 >> 62]))(v5);
}

uint64_t sub_3CAD4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)(void))((char *)&loc_3CAE4 + dword_3CB8C[a4 >> 62]))();
}

uint64_t sub_3CAF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, int a3@<W8>)
{
  if (BYTE6(a2) < a1 || a1 < 0)
  {
    __break(1u);
    JUMPOUT(0x3CB84);
  }
  return ((uint64_t (*)(void))((char *)&loc_3CB34 + dword_3CB9C[a3]))();
}

uint64_t sub_3CBAC(uint64_t a1)
{
  return sub_3D904(a1, (uint64_t (*)(void))sub_4161C, (uint64_t)&type metadata for BookHistory.Feature, (void (*)(char *, _QWORD))sub_162778);
}

uint64_t sub_3CBC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_1625CC(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_3CC5C(uint64_t a1)
{
  return sub_3D904(a1, (uint64_t (*)(void))sub_4057C, (uint64_t)&type metadata for EventType, (void (*)(char *, _QWORD))sub_16278C);
}

uint64_t sub_3CC78(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11[2];
  uint64_t v12;

  v4 = a3 >> 1;
  result = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
    __break(1u);
    goto LABEL_9;
  }
  result = Set.init(minimumCapacity:)(result, &type metadata for String, &protocol witness table for String);
  v12 = result;
  v7 = v4 - a2;
  if (v4 == a2)
    return result;
  if (v4 <= a2)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  v8 = (uint64_t *)(a1 + 16 * a2 + 8);
  do
  {
    v9 = *(v8 - 1);
    v10 = *v8;
    swift_bridgeObjectRetain(*v8);
    sub_1625CC(v11, v9, v10);
    swift_bridgeObjectRelease(v11[1]);
    v8 += 2;
    --v7;
  }
  while (v7);
  return v12;
}

uint64_t sub_3CD28(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for UInt64, &protocol witness table for UInt64);
  v7 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v4++;
      sub_1628D4(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t _s20BooksPersonalization14CommonCurrencyO6HeaderV2eeoiySbAE_AEtFZ_0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  uint64_t result;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a2[1];
  v9 = a2[2];
  v10 = a2[3];
  v11 = v4 == *a2 && v5 == v8;
  if (v11 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v8, 0), result = 0, (v12 & 1) != 0))
  {
    if (v6 == v9 && v7 == v10)
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v9, v10, 0);
  }
  return result;
}

uint64_t _s20BooksPersonalization25AnyCodableObjectContainerV2eeoiySbAC_ACtFZ_0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  int64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[3];
  _OWORD v33[2];
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;

  v2 = *a1;
  v3 = *a2;
  if (*(_QWORD *)(*a1 + 16) != *(_QWORD *)(*a2 + 16))
    return 0;
  v4 = swift_bridgeObjectRetain(*a1);
  v5 = sub_27C00(v4);
  v6 = swift_bridgeObjectRetain(v3);
  v7 = sub_27C00(v6);
  v8 = sub_2AEC4(v5, v7);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  if ((v8 & 1) == 0)
    return 0;
  v9 = v2 + 64;
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v28 = (unint64_t)(v10 + 63) >> 6;
  result = swift_bridgeObjectRetain(v2);
  v14 = 0;
  while (1)
  {
    if (v12)
    {
      v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v16 = v15 | (v14 << 6);
      if (!*(_QWORD *)(v2 + 16))
        break;
      goto LABEL_27;
    }
    v17 = v14 + 1;
    if (__OFADD__(v14, 1))
      goto LABEL_41;
    if (v17 >= v28)
    {
LABEL_36:
      v27 = 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v9 + 8 * v17);
    ++v14;
    if (!v18)
    {
      v14 = v17 + 1;
      if (v17 + 1 >= v28)
        goto LABEL_36;
      v18 = *(_QWORD *)(v9 + 8 * v14);
      if (!v18)
      {
        v14 = v17 + 2;
        if (v17 + 2 >= v28)
          goto LABEL_36;
        v18 = *(_QWORD *)(v9 + 8 * v14);
        if (!v18)
        {
          v14 = v17 + 3;
          if (v17 + 3 >= v28)
            goto LABEL_36;
          v18 = *(_QWORD *)(v9 + 8 * v14);
          if (!v18)
          {
            v14 = v17 + 4;
            if (v17 + 4 >= v28)
              goto LABEL_36;
            v18 = *(_QWORD *)(v9 + 8 * v14);
            if (!v18)
            {
              v19 = v17 + 5;
              if (v19 >= v28)
                goto LABEL_36;
              v18 = *(_QWORD *)(v9 + 8 * v19);
              if (!v18)
              {
                while (1)
                {
                  v14 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v14 >= v28)
                    goto LABEL_36;
                  v18 = *(_QWORD *)(v9 + 8 * v14);
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v14 = v19;
            }
          }
        }
      }
    }
LABEL_26:
    v12 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v14 << 6);
    if (!*(_QWORD *)(v2 + 16))
      break;
LABEL_27:
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v16);
    v22 = *v20;
    v21 = v20[1];
    swift_bridgeObjectRetain(v21);
    result = sub_39064(v22, v21);
    if ((v23 & 1) == 0)
      goto LABEL_40;
    sub_418BC(*(_QWORD *)(v2 + 56) + 40 * result, (uint64_t)v33, &qword_1F0E70);
    memset(v32, 0, 40);
    sub_3DC8C((uint64_t)v33, (uint64_t)v32);
    v35[0] = v32[0];
    v35[1] = v32[1];
    v36 = *(_QWORD *)&v32[2];
    if (*(_QWORD *)(v3 + 16) && (v24 = sub_39064(v22, v21), (v25 & 1) != 0))
    {
      sub_418BC(*(_QWORD *)(v3 + 56) + 40 * v24, (uint64_t)v32, &qword_1F0E70);
    }
    else
    {
      memset(v32, 0, 24);
      *(_OWORD *)((char *)&v32[1] + 8) = xmmword_18C9A0;
    }
    result = swift_bridgeObjectRelease(v21);
    if (*((_QWORD *)&v32[1] + 1) == 1)
      goto LABEL_43;
    v31 = 0;
    v29 = 0u;
    v30 = 0u;
    sub_3DC8C((uint64_t)v32, (uint64_t)&v29);
    v33[0] = v29;
    v33[1] = v30;
    v34 = v31;
    v26 = static AnyCodableContainer.== infix(_:_:)((uint64_t)v35, (uint64_t)v33);
    sub_3DEE0(v33);
    result = (uint64_t)sub_3DEE0(v35);
    if ((v26 & 1) == 0)
    {
      v27 = 0;
LABEL_37:
      swift_release(v2);
      return v27;
    }
  }
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

char *sub_3D158(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_3D240(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 56 * a1 + 32;
  v6 = a3 + 56 * v4;
  if (v5 >= v6 || v5 + 56 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_3D334(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 16 * a1 + 32;
    v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_5EDC(&qword_1F12C0);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_3D43C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 552 * a1 + 32;
  v6 = a3 + 552 * v4;
  if (v5 >= v6 || v5 + 552 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_3D52C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  char *v5;
  _BYTE v6[552];
  _QWORD v7[69];
  uint64_t v8;
  _QWORD __dst[69];

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_41234();
  result = Set.init(minimumCapacity:)(v2, &type metadata for SeedBook, v3);
  v8 = result;
  if (v2)
  {
    v5 = (char *)(a1 + 32);
    do
    {
      memcpy(__dst, v5, 0x221uLL);
      sub_6100(__dst);
      sub_1629CC(v6, __dst);
      memcpy(v7, v6, 0x221uLL);
      sub_6228(v7);
      v5 += 552;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t _s20BooksPersonalization14CommonCurrencyO19redactedHeaderNamesShySSGvsZ_0(uint64_t a1)
{
  int64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  Swift::String v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  if (qword_1F0090 != -1)
    goto LABEL_15;
  for (i = *(_QWORD *)(a1 + 16); i; i = *(_QWORD *)(a1 + 16))
  {
    sub_340F4(0, i, 0);
    v3 = sub_EDD8C(a1);
    v5 = v4;
    v7 = v6 & 1;
    while ((v3 & 0x8000000000000000) == 0 && v3 < 1 << *(_BYTE *)(a1 + 32))
    {
      if (((*(_QWORD *)(a1 + 56 + (((unint64_t)v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) == 0)
        goto LABEL_13;
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v5)
        goto LABEL_14;
      v8 = String.lowercased()();
      v10 = *((_QWORD *)&_swiftEmptyArrayStorage + 2);
      v9 = *((_QWORD *)&_swiftEmptyArrayStorage + 3);
      if (v10 >= v9 >> 1)
        sub_340F4(v9 > 1, v10 + 1, 1);
      *((_QWORD *)&_swiftEmptyArrayStorage + 2) = v10 + 1;
      *((Swift::String *)&_swiftEmptyArrayStorage + v10 + 2) = v8;
      v11 = sub_EDE30(v3, v5, v7 & 1, a1);
      v3 = v11;
      v5 = v12;
      v7 = v13 & 1;
      if (!--i)
      {
        sub_41814(v11, v12, v13 & 1);
        swift_bridgeObjectRelease(a1);
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    swift_once(&qword_1F0090, sub_28310);
  }
  swift_bridgeObjectRelease(a1);
LABEL_17:
  v14 = sub_3CBC8((uint64_t)&_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(&_swiftEmptyArrayStorage);
  v15 = qword_1F0E58;
  qword_1F0E58 = v14;
  return swift_bridgeObjectRelease(v15);
}

unint64_t sub_3D7A0()
{
  unint64_t result;

  result = qword_1F0E68;
  if (!qword_1F0E68)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1F0E68);
  }
  return result;
}

uint64_t sub_3D7E4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[2];
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_41820();
  result = Set.init(minimumCapacity:)(v2, &type metadata for APICommonHelpers.StringKey, v3);
  v9 = result;
  if (v2)
  {
    v5 = (uint64_t *)(a1 + 40);
    do
    {
      v6 = *(v5 - 1);
      v7 = *v5;
      swift_bridgeObjectRetain(*v5);
      sub_162DB8(v8, v6, v7);
      swift_bridgeObjectRelease(v8[1]);
      v5 += 2;
      --v2;
    }
    while (v2);
    return v9;
  }
  return result;
}

uint64_t sub_3D878(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  char *v5;
  char v6;
  char v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_41794();
  result = Set.init(minimumCapacity:)(v2, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.RecommendationMethodology, v3);
  v8 = result;
  if (v2)
  {
    v5 = (char *)(a1 + 32);
    do
    {
      v6 = *v5++;
      sub_162F64(&v7, v6);
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_3D8E8(uint64_t a1)
{
  return sub_3D904(a1, (uint64_t (*)(void))sub_41550, (uint64_t)&type metadata for ClusteringOptions.MediaType, (void (*)(char *, _QWORD))sub_163544);
}

uint64_t sub_3D904(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, void (*a4)(char *, _QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unsigned __int8 *v10;
  unsigned int v11;
  char v12;
  uint64_t v13;

  v7 = *(_QWORD *)(a1 + 16);
  v8 = a2();
  result = Set.init(minimumCapacity:)(v7, a3, v8);
  v13 = result;
  if (v7)
  {
    v10 = (unsigned __int8 *)(a1 + 32);
    do
    {
      v11 = *v10++;
      a4(&v12, v11);
      --v7;
    }
    while (v7);
    return v13;
  }
  return result;
}

uint64_t sub_3D978(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4;
  uint64_t result;
  BOOL v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a3 >> 1;
  result = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
    __break(1u);
    goto LABEL_9;
  }
  result = Set.init(minimumCapacity:)(result, &type metadata for UInt64, &protocol witness table for UInt64);
  v12 = result;
  v7 = __OFSUB__(v4, a2);
  v8 = v4 - a2;
  if (!v8)
    return result;
  if ((v8 < 0) ^ v7 | (v8 == 0))
  {
LABEL_9:
    __break(1u);
    return result;
  }
  v9 = (uint64_t *)(a1 + 8 * a2);
  do
  {
    v10 = *v9++;
    sub_1628D4(&v11, v10);
    --v8;
  }
  while (v8);
  return v12;
}

uint64_t sub_3DA00(uint64_t result, uint64_t a2, unint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  _BYTE v10[552];
  _QWORD v11[69];
  uint64_t v12;
  _QWORD __dst[69];

  v3 = a3 >> 1;
  v4 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
    __break(1u);
    goto LABEL_9;
  }
  v6 = result;
  v7 = sub_41234();
  result = Set.init(minimumCapacity:)(v4, &type metadata for SeedBook, v7);
  v12 = result;
  v8 = v3 - a2;
  if (v3 == a2)
    return result;
  if (v3 <= a2)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  v9 = (char *)(v6 + 552 * a2);
  do
  {
    memcpy(__dst, v9, 0x221uLL);
    sub_6100(__dst);
    sub_1629CC(v10, __dst);
    memcpy(v11, v10, 0x221uLL);
    sub_6228(v11);
    v9 += 552;
    --v8;
  }
  while (v8);
  return v12;
}

uint64_t sub_3DACC(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v24[4];
  _QWORD *v25;

  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    return (uint64_t)_swiftEmptyArrayStorage;
  v4 = 0;
  v5 = result + 56;
  v21 = -(uint64_t)v3;
  v6 = _swiftEmptyArrayStorage;
  v19 = result + 56;
  v20 = *(_QWORD *)(result + 16);
  do
  {
    if (v4 <= v3)
      v7 = v3;
    else
      v7 = v4;
    v8 = -(uint64_t)v7;
    for (i = (uint64_t *)(v5 + 32 * v4++); ; i += 4)
    {
      if (v8 + v4 == 1)
      {
        __break(1u);
        return result;
      }
      v10 = *(i - 3);
      v11 = *(i - 2);
      v12 = *(i - 1);
      v13 = *i;
      v24[2] = v10;
      v24[3] = v11;
      v24[0] = a2;
      v24[1] = a3;
      v14 = sub_3D7A0();
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v13);
      if (!StringProtocol.caseInsensitiveCompare<A>(_:)(v24, &type metadata for String, &type metadata for String, v14, v14))break;
      swift_bridgeObjectRelease(v13);
      result = swift_bridgeObjectRelease(v11);
      ++v4;
      if (v21 + v4 == 1)
        return (uint64_t)v6;
    }
    result = swift_isUniquelyReferenced_nonNull_native(v6);
    v25 = v6;
    if ((result & 1) == 0)
    {
      result = sub_3413C(0, v6[2] + 1, 1);
      v6 = v25;
    }
    v5 = v19;
    v16 = v6[2];
    v15 = v6[3];
    v17 = v16 + 1;
    if (v16 >= v15 >> 1)
    {
      result = sub_3413C(v15 > 1, v16 + 1, 1);
      v17 = v16 + 1;
      v6 = v25;
    }
    v6[2] = v17;
    v18 = &v6[4 * v16];
    v18[4] = v10;
    v18[5] = v11;
    v18[6] = v12;
    v18[7] = v13;
    v3 = v20;
  }
  while (v21 + v4);
  return (uint64_t)v6;
}

uint64_t sub_3DC8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5EDC(&qword_1F0E70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_3DCD4()
{
  unint64_t result;

  result = qword_1F0E90;
  if (!qword_1F0E90)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AnyCodableContainer, &type metadata for AnyCodableContainer);
    atomic_store(result, (unint64_t *)&qword_1F0E90);
  }
  return result;
}

uint64_t sub_3DD18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_3DD40(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_QWORD *sub_3DD84(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_3DDC0(unint64_t *a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_5F68(&qword_1F0E98);
    a2();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_3DE34()
{
  unint64_t result;

  result = qword_1F0EE0;
  if (!qword_1F0EE0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AnyCodableContainer, &type metadata for AnyCodableContainer);
    atomic_store(result, (unint64_t *)&qword_1F0EE0);
  }
  return result;
}

uint64_t sub_3DE78(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_5F68(&qword_1F0E80);
    a2();
    result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }
  return result;
}

_QWORD *sub_3DEE0(_QWORD *a1)
{
  if (a1[3])
    sub_62F8(a1);
  return a1;
}

uint64_t sub_3DF10(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_3E000(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v5 = a2;
    v6 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v6 = 11;
    v7 = v6 | (v5 << 16);
    v8 = String.index(_:offsetBy:limitedBy:)(15, result, v7, a2, a3);
    if ((v9 & 1) != 0)
      v10 = v7;
    else
      v10 = v8;
    return String.subscript.getter(15, v10, a2, a3);
  }
  return result;
}

_QWORD *sub_3E088(uint64_t a1)
{
  uint64_t v1;
  int64_t v2;
  _QWORD *v3;
  uint64_t i;
  unint64_t v6;
  unint64_t v7;
  _BYTE v9[32];
  _BYTE v10[40];
  _QWORD *v11;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    v11 = _swiftEmptyArrayStorage;
    v3 = &v11;
    sub_34158(0, v2, 0);
    for (i = a1 + 32; ; i += 32)
    {
      sub_418BC(i, (uint64_t)v9, &qword_1F0E78);
      sub_29474((uint64_t)v9, (uint64_t)v10);
      sub_417D8((uint64_t)v9, &qword_1F0E78);
      if (v1)
        break;
      v3 = v11;
      if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      {
        sub_34158(0, v3[2] + 1, 1);
        v3 = v11;
      }
      v7 = v3[2];
      v6 = v3[3];
      if (v7 >= v6 >> 1)
      {
        sub_34158(v6 > 1, v7 + 1, 1);
        v3 = v11;
      }
      v3[2] = v7 + 1;
      sub_41300((uint64_t)v10, (uint64_t)&v3[5 * v7 + 4], &qword_1F0E70);
      if (!--v2)
        return v3;
    }
    swift_release(v11);
  }
  return v3;
}

uint64_t sub_3E1D8(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_3E21C(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_3E260(uint64_t result, unint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
      result = swift_bridgeObjectRelease(a2);
      break;
    case 1:
      result = sub_3E21C(result, a2);
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_3E298()
{
  unint64_t result;

  result = qword_1F0F28;
  if (!qword_1F0F28)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CommonErrorPayload, &type metadata for CommonErrorPayload);
    atomic_store(result, (unint64_t *)&qword_1F0F28);
  }
  return result;
}

uint64_t sub_3E2DC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_2D564(a1, a2, a3);
}

uint64_t sub_3E2F8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_2D870(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

unint64_t sub_3E314()
{
  unint64_t result;

  result = qword_1F0F58;
  if (!qword_1F0F58)
  {
    result = swift_getWitnessTable(&unk_18C94C, &type metadata for APICommonHelpers.StringKey);
    atomic_store(result, (unint64_t *)&qword_1F0F58);
  }
  return result;
}

uint64_t sub_3E358(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 112 * a1 + 32;
  v6 = a3 + 112 * v4;
  if (v5 >= v6 || v5 + 112 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_3E44C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 80 * a1 + 32;
  v6 = a3 + 80 * v4;
  if (v5 >= v6 || v5 + 80 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_3E540(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 40 * a1 + 32;
  v6 = a3 + 40 * v4;
  if (v5 >= v6 || v5 + 40 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_3E634(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v4;
    if (v6 >= v7 || v6 + 8 * v4 <= a3)
    {
      sub_5EDC(&qword_1F02A8);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_3E73C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_3E82C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 24 * a1 + 32;
  v7 = a3 + 24 * v4;
  if (v6 >= v7 || v6 + 24 * v4 <= a3)
  {
    sub_5EDC(&qword_1F10B0);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

_QWORD *sub_3E938(_QWORD *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _WORD v17[8];
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *a3;
  v4 = *(_QWORD *)(*a3 + 16);
  if (v4)
  {
    v15 = result;
    swift_bridgeObjectRetain_n(v3, 2);
    v5 = sub_3D7A0();
    v22 = v3;
    v6 = (uint64_t *)(v3 + 56);
    while (1)
    {
      v8 = *(v6 - 1);
      v7 = *v6;
      v9 = *(v6 - 2);
      v18 = (_QWORD *)*(v6 - 3);
      v19 = v9;
      strcpy((char *)v17, "content-type");
      HIBYTE(v17[6]) = 0;
      v17[7] = -5120;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v7);
      if (!StringProtocol.caseInsensitiveCompare<A>(_:)(v17, &type metadata for String, &type metadata for String, v5, v5))break;
      v6 += 4;
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v9);
      if (!--v4)
        return (_QWORD *)swift_bridgeObjectRelease_n(v22, 2);
    }
    swift_bridgeObjectRelease_n(v22, 2);
    swift_bridgeObjectRelease(v9);
    result = dispatch thunk of LosslessStringConvertible.init(_:)(&v20, v8, v7);
    v10 = v21;
    if (v21)
    {
      v11 = v20;
      v18 = v15;
      v19 = a2;
      if ((StringProtocol.localizedCaseInsensitiveContains<A>(_:)(&v18, &type metadata for String, &type metadata for String, v5, v5) & 1) != 0)
      {
        return (_QWORD *)swift_bridgeObjectRelease(v10);
      }
      else
      {
        v12 = sub_3E298();
        v13 = swift_allocError(&type metadata for CommonErrorPayload, v12, 0, 0);
        *(_QWORD *)v14 = v11;
        *(_QWORD *)(v14 + 8) = v10;
        *(_BYTE *)(v14 + 16) = 5;
        return (_QWORD *)swift_willThrow(v13);
      }
    }
  }
  return result;
}

uint64_t sub_3EAFC(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_3EB0C(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_3EB1C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_3EB40(uint64_t a1)
{
  uint64_t v1;

  return sub_2EAC8(a1, *(void **)(v1 + 16));
}

uint64_t sub_3EB58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2EB40(*(void **)(v1 + 16), a1);
}

uint64_t type metadata accessor for DateConfiguration.EncoderInput(uint64_t a1)
{
  uint64_t result;

  result = qword_1F1000;
  if (!qword_1F1000)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DateConfiguration.EncoderInput);
  return result;
}

uint64_t sub_3EBAC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DateConfiguration.EncoderInput(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_3EBEC(_QWORD *a1)
{
  uint64_t v1;

  return sub_2F1CC(a1, v1 + 16);
}

uint64_t sub_3EC08()
{
  _QWORD *v0;

  if (v0[2])
    swift_release(v0[3]);
  if (v0[4])
    swift_release(v0[5]);
  swift_release(v0[7]);
  swift_release(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_3EC54(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_2F404(a1, a2, v2 + 16);
}

unint64_t sub_3EC70()
{
  unint64_t result;

  result = qword_1F0F60;
  if (!qword_1F0F60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CommonCurrency.Header, &type metadata for CommonCurrency.Header);
    atomic_store(result, (unint64_t *)&qword_1F0F60);
  }
  return result;
}

unint64_t sub_3ECB8()
{
  unint64_t result;

  result = qword_1F0F68;
  if (!qword_1F0F68)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CommonCurrency.Headers, &type metadata for CommonCurrency.Headers);
    atomic_store(result, (unint64_t *)&qword_1F0F68);
  }
  return result;
}

unint64_t sub_3ED00()
{
  unint64_t result;

  result = qword_1F0F70;
  if (!qword_1F0F70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AnyCodableContainer, &type metadata for AnyCodableContainer);
    atomic_store(result, (unint64_t *)&qword_1F0F70);
  }
  return result;
}

uint64_t sub_3ED44(uint64_t a1)
{
  uint64_t result;

  result = sub_3EDBC(&qword_1F0F78, &qword_1F0EB8, (uint64_t)&protocol conformance descriptor for [A]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_3ED80(uint64_t a1)
{
  uint64_t result;

  result = sub_3EDBC(&qword_1F0F80, &qword_1F0EA8, (uint64_t)&protocol conformance descriptor for [A : B]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_3EDBC(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_5F68(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_3EE00()
{
  unint64_t result;

  result = qword_1F0F88;
  if (!qword_1F0F88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AnyCodableContainer, &type metadata for AnyCodableContainer);
    atomic_store(result, (unint64_t *)&qword_1F0F88);
  }
  return result;
}

void *sub_3EE44()
{
  return &protocol witness table for String;
}

unint64_t sub_3EE54()
{
  unint64_t result;

  result = qword_1F0F90;
  if (!qword_1F0F90)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AnyCodableContainer, &type metadata for AnyCodableContainer);
    atomic_store(result, (unint64_t *)&qword_1F0F90);
  }
  return result;
}

void *sub_3EE98()
{
  return &protocol witness table for String;
}

void *sub_3EEA4()
{
  return &protocol witness table for String;
}

void *sub_3EEB0()
{
  return &protocol witness table for Int;
}

void *sub_3EEBC()
{
  return &protocol witness table for Double;
}

unint64_t sub_3EECC()
{
  unint64_t result;

  result = qword_1F0F98;
  if (!qword_1F0F98)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AnyCodableObjectContainer, &type metadata for AnyCodableObjectContainer);
    atomic_store(result, (unint64_t *)&qword_1F0F98);
  }
  return result;
}

unint64_t sub_3EF14()
{
  unint64_t result;

  result = qword_1F0FA0;
  if (!qword_1F0FA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AnyCodableArrayContainer, &type metadata for AnyCodableArrayContainer);
    atomic_store(result, (unint64_t *)&qword_1F0FA0);
  }
  return result;
}

uint64_t sub_3EF64@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  if (v3)
    v4 = *(_QWORD *)(a1 + 24);
  else
    v4 = 0;
  *a2 = v3;
  a2[1] = v4;
  return sub_3EAFC(v3, v2);
}

uint64_t sub_3EF7C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  if (*a1)
    v4 = a1[1];
  else
    v4 = 0;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  sub_3EAFC(*a1, a1[1]);
  result = sub_3EB0C(v5, v6);
  *(_QWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 24) = v4;
  return result;
}

uint64_t dispatch thunk of static APIOperation.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

ValueMetadata *type metadata accessor for CommonCurrency()
{
  return &type metadata for CommonCurrency;
}

uint64_t destroy for CommonCurrency.Header(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

_QWORD *initializeWithCopy for CommonCurrency.Header(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for CommonCurrency.Header(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for CommonCurrency.Header(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

ValueMetadata *type metadata accessor for CommonCurrency.Header()
{
  return &type metadata for CommonCurrency.Header;
}

ValueMetadata *type metadata accessor for CommonCurrency.Headers()
{
  return &type metadata for CommonCurrency.Headers;
}

_QWORD *destroy for AnyCodableContainer(_QWORD *result)
{
  if (result[3])
    return (_QWORD *)sub_62F8(result);
  return result;
}

uint64_t initializeWithCopy for AnyCodableContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  return a1;
}

uint64_t assignWithCopy for AnyCodableContainer(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *((_QWORD *)a2 + 3);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    v5 = *a2;
    v6 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  if (!v4)
  {
    sub_62F8((_QWORD *)a1);
    goto LABEL_7;
  }
  sub_3F20C((_QWORD *)a1, a2);
  return a1;
}

_QWORD *sub_3F20C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for AnyCodableContainer(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AnyCodableContainer(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_QWORD *)(a1 + 24))
    sub_62F8((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyCodableContainer(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyCodableContainer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyCodableContainer()
{
  return &type metadata for AnyCodableContainer;
}

ValueMetadata *type metadata accessor for AnyCodableObjectContainer()
{
  return &type metadata for AnyCodableObjectContainer;
}

ValueMetadata *type metadata accessor for AnyCodableArrayContainer()
{
  return &type metadata for AnyCodableArrayContainer;
}

uint64_t sub_3F4B8(uint64_t result, unint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
      result = swift_bridgeObjectRetain(a2);
      break;
    case 1:
      result = sub_3E1D8(result, a2);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for CommonErrorPayload(uint64_t a1)
{
  return sub_3E260(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s20BooksPersonalization18CommonErrorPayloadOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_3F4B8(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for CommonErrorPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_3F4B8(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_3E260(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for CommonErrorPayload(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for CommonErrorPayload(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_3E260(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for CommonErrorPayload(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 251);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 5)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CommonErrorPayload(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 251;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_3F680(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_3F688(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CommonErrorPayload()
{
  return &type metadata for CommonErrorPayload;
}

ValueMetadata *type metadata accessor for APICommonHelpers()
{
  return &type metadata for APICommonHelpers;
}

ValueMetadata *type metadata accessor for DateConfiguration()
{
  return &type metadata for DateConfiguration;
}

ValueMetadata *type metadata accessor for DateConfiguration.DecoderInput()
{
  return &type metadata for DateConfiguration.DecoderInput;
}

uint64_t initializeBufferWithCopyOfBuffer for DateConfiguration.EncoderInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for DateConfiguration.EncoderInput(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for DateConfiguration.EncoderInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for DateConfiguration.EncoderInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for DateConfiguration.EncoderInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for DateConfiguration.EncoderInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for DateConfiguration.EncoderInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_3F874);
}

uint64_t sub_3F874(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for DateConfiguration.EncoderInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_3F8BC);
}

uint64_t sub_3F8BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_3F8FC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *destroy for ClientConfiguration(_QWORD *result)
{
  _QWORD *v1;

  v1 = result;
  if (*result)
    result = (_QWORD *)swift_release(result[1]);
  if (v1[2])
    return (_QWORD *)swift_release(v1[3]);
  return result;
}

_QWORD *initializeWithCopy for ClientConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*a2)
  {
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_retain(v4);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v5 = a2[2];
  if (v5)
  {
    v6 = a2[3];
    a1[2] = v5;
    a1[3] = v6;
    swift_retain(v6);
  }
  else
  {
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  }
  return a1;
}

_QWORD *assignWithCopy for ClientConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      v5 = a2[1];
      v6 = a1[1];
      *a1 = v4;
      a1[1] = v5;
      swift_retain(v5);
      swift_release(v6);
      goto LABEL_8;
    }
    swift_release(a1[1]);
  }
  else if (v4)
  {
    v7 = a2[1];
    *a1 = v4;
    a1[1] = v7;
    swift_retain(v7);
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v8 = a2[2];
  if (!a1[2])
  {
    if (v8)
    {
      v11 = a2[3];
      a1[2] = v8;
      a1[3] = v11;
      swift_retain(v11);
      return a1;
    }
LABEL_14:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    return a1;
  }
  if (!v8)
  {
    swift_release(a1[3]);
    goto LABEL_14;
  }
  v9 = a2[3];
  v10 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  swift_retain(v9);
  swift_release(v10);
  return a1;
}

_QWORD *assignWithTake for ClientConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      v5 = a2[1];
      v6 = a1[1];
      *a1 = v4;
      a1[1] = v5;
      swift_release(v6);
      goto LABEL_8;
    }
    swift_release(a1[1]);
  }
  else if (v4)
  {
    v7 = a2[1];
    *a1 = v4;
    a1[1] = v7;
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v8 = a2[2];
  if (!a1[2])
  {
    if (v8)
    {
      v11 = a2[3];
      a1[2] = v8;
      a1[3] = v11;
      return a1;
    }
LABEL_14:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    return a1;
  }
  if (!v8)
  {
    swift_release(a1[3]);
    goto LABEL_14;
  }
  v9 = a2[3];
  v10 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  swift_release(v10);
  return a1;
}

ValueMetadata *type metadata accessor for CommonConfiguration()
{
  return &type metadata for CommonConfiguration;
}

uint64_t destroy for DateConverter(_QWORD *a1)
{
  if (*a1)
    swift_release(a1[1]);
  if (a1[2])
    swift_release(a1[3]);
  swift_release(a1[5]);
  return swift_release(a1[7]);
}

uint64_t initializeWithCopy for DateConverter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  if (*(_QWORD *)a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    swift_retain(v4);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v6;
    swift_retain(v6);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 56) = v7;
  swift_retain(v8);
  swift_retain(v7);
  return a1;
}

_QWORD *assignWithCopy for DateConverter(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      v5 = a2[1];
      v6 = a1[1];
      *a1 = v4;
      a1[1] = v5;
      swift_retain(v5);
      swift_release(v6);
      goto LABEL_8;
    }
    swift_release(a1[1]);
  }
  else if (v4)
  {
    v7 = a2[1];
    *a1 = v4;
    a1[1] = v7;
    swift_retain(v7);
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v8 = a2[2];
  if (!a1[2])
  {
    if (v8)
    {
      v11 = a2[3];
      a1[2] = v8;
      a1[3] = v11;
      swift_retain(v11);
      goto LABEL_15;
    }
LABEL_14:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    goto LABEL_15;
  }
  if (!v8)
  {
    swift_release(a1[3]);
    goto LABEL_14;
  }
  v9 = a2[3];
  v10 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  swift_retain(v9);
  swift_release(v10);
LABEL_15:
  v12 = a2[5];
  v13 = a1[5];
  a1[4] = a2[4];
  a1[5] = v12;
  swift_retain(v12);
  swift_release(v13);
  v15 = a2[6];
  v14 = a2[7];
  v16 = a1[7];
  a1[6] = v15;
  a1[7] = v14;
  swift_retain(v14);
  swift_release(v16);
  return a1;
}

uint64_t assignWithTake for DateConverter(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a2;
  if (*(_QWORD *)a1)
  {
    if (v4)
    {
      v5 = a2[1];
      v6 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)a1 = v4;
      *(_QWORD *)(a1 + 8) = v5;
      swift_release(v6);
      goto LABEL_8;
    }
    swift_release(*(_QWORD *)(a1 + 8));
  }
  else if (v4)
  {
    v7 = a2[1];
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v7;
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v8 = a2[2];
  if (!*(_QWORD *)(a1 + 16))
  {
    if (v8)
    {
      v11 = a2[3];
      *(_QWORD *)(a1 + 16) = v8;
      *(_QWORD *)(a1 + 24) = v11;
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    goto LABEL_15;
  }
  if (!v8)
  {
    swift_release(*(_QWORD *)(a1 + 24));
    goto LABEL_14;
  }
  v9 = a2[3];
  v10 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  swift_release(v10);
LABEL_15:
  v12 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  swift_release(v12);
  v13 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  swift_release(v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for DateConverter(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DateConverter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DateConverter()
{
  return &type metadata for DateConverter;
}

uint64_t destroy for CommonConverter(_QWORD *a1)
{
  if (*a1)
    swift_release(a1[1]);
  if (a1[2])
    swift_release(a1[3]);
  if (a1[4])
    swift_release(a1[5]);
  if (a1[6])
    swift_release(a1[7]);
  swift_release(a1[9]);
  return swift_release(a1[11]);
}

uint64_t initializeWithCopy for CommonConverter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  if (*(_QWORD *)a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    swift_retain(v4);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v6;
    swift_retain(v6);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  v7 = *(_QWORD *)(a2 + 32);
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v8;
    swift_retain(v8);
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  v9 = *(_QWORD *)(a2 + 48);
  if (v9)
  {
    v10 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = v10;
    swift_retain(v10);
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 88);
  v12 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v12;
  *(_QWORD *)(a1 + 88) = v11;
  swift_retain(v12);
  swift_retain(v11);
  return a1;
}

_QWORD *assignWithCopy for CommonConverter(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      v5 = a2[1];
      v6 = a1[1];
      *a1 = v4;
      a1[1] = v5;
      swift_retain(v5);
      swift_release(v6);
      goto LABEL_8;
    }
    swift_release(a1[1]);
  }
  else if (v4)
  {
    v7 = a2[1];
    *a1 = v4;
    a1[1] = v7;
    swift_retain(v7);
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v8 = a2[2];
  if (a1[2])
  {
    if (v8)
    {
      v9 = a2[3];
      v10 = a1[3];
      a1[2] = v8;
      a1[3] = v9;
      swift_retain(v9);
      swift_release(v10);
      goto LABEL_15;
    }
    swift_release(a1[3]);
  }
  else if (v8)
  {
    v11 = a2[3];
    a1[2] = v8;
    a1[3] = v11;
    swift_retain(v11);
    goto LABEL_15;
  }
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
LABEL_15:
  v12 = a2[4];
  if (a1[4])
  {
    if (v12)
    {
      v13 = a2[5];
      v14 = a1[5];
      a1[4] = v12;
      a1[5] = v13;
      swift_retain(v13);
      swift_release(v14);
      goto LABEL_22;
    }
    swift_release(a1[5]);
  }
  else if (v12)
  {
    v15 = a2[5];
    a1[4] = v12;
    a1[5] = v15;
    swift_retain(v15);
    goto LABEL_22;
  }
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
LABEL_22:
  v16 = a2[6];
  if (!a1[6])
  {
    if (v16)
    {
      v19 = a2[7];
      a1[6] = v16;
      a1[7] = v19;
      swift_retain(v19);
      goto LABEL_29;
    }
LABEL_28:
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    goto LABEL_29;
  }
  if (!v16)
  {
    swift_release(a1[7]);
    goto LABEL_28;
  }
  v17 = a2[7];
  v18 = a1[7];
  a1[6] = v16;
  a1[7] = v17;
  swift_retain(v17);
  swift_release(v18);
LABEL_29:
  v20 = a2[9];
  v21 = a1[9];
  a1[8] = a2[8];
  a1[9] = v20;
  swift_retain(v20);
  swift_release(v21);
  v23 = a2[10];
  v22 = a2[11];
  v24 = a1[11];
  a1[10] = v23;
  a1[11] = v22;
  swift_retain(v22);
  swift_release(v24);
  return a1;
}

__n128 initializeWithTake for CommonConverter(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for CommonConverter(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *a2;
  if (*(_QWORD *)a1)
  {
    if (v4)
    {
      v5 = a2[1];
      v6 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)a1 = v4;
      *(_QWORD *)(a1 + 8) = v5;
      swift_release(v6);
      goto LABEL_8;
    }
    swift_release(*(_QWORD *)(a1 + 8));
  }
  else if (v4)
  {
    v7 = a2[1];
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v7;
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v8 = a2[2];
  if (*(_QWORD *)(a1 + 16))
  {
    if (v8)
    {
      v9 = a2[3];
      v10 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 16) = v8;
      *(_QWORD *)(a1 + 24) = v9;
      swift_release(v10);
      goto LABEL_15;
    }
    swift_release(*(_QWORD *)(a1 + 24));
  }
  else if (v8)
  {
    v11 = a2[3];
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v11;
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
LABEL_15:
  v12 = a2[4];
  if (*(_QWORD *)(a1 + 32))
  {
    if (v12)
    {
      v13 = a2[5];
      v14 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 32) = v12;
      *(_QWORD *)(a1 + 40) = v13;
      swift_release(v14);
      goto LABEL_22;
    }
    swift_release(*(_QWORD *)(a1 + 40));
  }
  else if (v12)
  {
    v15 = a2[5];
    *(_QWORD *)(a1 + 32) = v12;
    *(_QWORD *)(a1 + 40) = v15;
    goto LABEL_22;
  }
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
LABEL_22:
  v16 = a2[6];
  if (!*(_QWORD *)(a1 + 48))
  {
    if (v16)
    {
      v19 = a2[7];
      *(_QWORD *)(a1 + 48) = v16;
      *(_QWORD *)(a1 + 56) = v19;
      goto LABEL_29;
    }
LABEL_28:
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    goto LABEL_29;
  }
  if (!v16)
  {
    swift_release(*(_QWORD *)(a1 + 56));
    goto LABEL_28;
  }
  v17 = a2[7];
  v18 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v16;
  *(_QWORD *)(a1 + 56) = v17;
  swift_release(v18);
LABEL_29:
  v20 = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
  swift_release(v20);
  v21 = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
  swift_release(v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for CommonConverter(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CommonConverter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 64) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CommonConverter()
{
  return &type metadata for CommonConverter;
}

ValueMetadata *type metadata accessor for APICommonHelpers.StringKey()
{
  return &type metadata for APICommonHelpers.StringKey;
}

unint64_t sub_4047C()
{
  unint64_t result;

  result = qword_1F1038;
  if (!qword_1F1038)
  {
    result = swift_getWitnessTable(&unk_18C924, &type metadata for APICommonHelpers.StringKey);
    atomic_store(result, (unint64_t *)&qword_1F1038);
  }
  return result;
}

unint64_t sub_404C4()
{
  unint64_t result;

  result = qword_1F1040;
  if (!qword_1F1040)
  {
    result = swift_getWitnessTable(&unk_18C84C, &type metadata for APICommonHelpers.StringKey);
    atomic_store(result, (unint64_t *)&qword_1F1040);
  }
  return result;
}

unint64_t sub_4050C()
{
  unint64_t result;

  result = qword_1F1048;
  if (!qword_1F1048)
  {
    result = swift_getWitnessTable(&unk_18C874, &type metadata for APICommonHelpers.StringKey);
    atomic_store(result, (unint64_t *)&qword_1F1048);
  }
  return result;
}

uint64_t sub_40554(uint64_t result, char a2)
{
  if (a2 != -1)
    return swift_bridgeObjectRetain(result);
  return result;
}

uint64_t sub_40568(uint64_t result, char a2)
{
  if (a2 != -1)
    return swift_bridgeObjectRelease(result);
  return result;
}

unint64_t sub_4057C()
{
  unint64_t result;

  result = qword_1F10E8;
  if (!qword_1F10E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EventType, &type metadata for EventType);
    atomic_store(result, (unint64_t *)&qword_1F10E8);
  }
  return result;
}

uint64_t sub_405C0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + (a1 << 6) + 32;
    v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_406B0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 72 * a1 + 32;
  v6 = a3 + 72 * v4;
  if (v5 >= v6 || v5 + 72 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_407A4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 24 * a1 + 32;
  v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_40898(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_40988(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if ((v4 & 0x8000000000000000) != 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_40A6C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 48 * a1 + 32;
  v6 = a3 + 48 * v4;
  if (v5 >= v6 || v5 + 48 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_40B5C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 48 * a1 + 32;
  v7 = a3 + 48 * v4;
  if (v6 >= v7 || v6 + 48 * v4 <= a3)
  {
    sub_5EDC(&qword_1F1230);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_40C68(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(sub_5EDC(&qword_1F1260) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 72);
  v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  v12 = v10 * v4;
  v13 = a3 + v12;
  v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_40D84(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_40E70(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 32 * a1 + 32);
    v6 = 32 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_40F58(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 80 * a1 + 32;
  v6 = a3 + 80 * v4;
  if (v5 >= v6 || v5 + 80 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_4104C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 24 * a1 + 32;
  v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_41140(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 72 * a1 + 32;
  v6 = a3 + 72 * v4;
  if (v5 >= v6 || v5 + 72 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_41234()
{
  unint64_t result;

  result = qword_1F1120;
  if (!qword_1F1120)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SeedBook, &type metadata for SeedBook);
    atomic_store(result, (unint64_t *)&qword_1F1120);
  }
  return result;
}

unint64_t sub_41278()
{
  unint64_t result;

  result = qword_1F1138;
  if (!qword_1F1138)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Book.MediaType, &type metadata for Book.MediaType);
    atomic_store(result, (unint64_t *)&qword_1F1138);
  }
  return result;
}

uint64_t sub_412BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AttributeAffinityResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_41300(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_5EDC(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_41344(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_4145C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 48 * a1 + 32;
  v6 = a3 + 48 * v4;
  if (v5 >= v6 || v5 + 48 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_41550()
{
  unint64_t result;

  result = qword_1F1240;
  if (!qword_1F1240)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ClusteringOptions.MediaType, &type metadata for ClusteringOptions.MediaType);
    atomic_store(result, (unint64_t *)&qword_1F1240);
  }
  return result;
}

uint64_t sub_41594()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

_QWORD *sub_415B8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *result;
  uint64_t v3;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(v0 + 16))(&v3);
  if (!v1)
    return (_QWORD *)v3;
  return result;
}

uint64_t sub_415F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2)
  {
    *a1 = result;
    a1[1] = v5;
  }
  return result;
}

unint64_t sub_4161C()
{
  unint64_t result;

  result = qword_1F1298;
  if (!qword_1F1298)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BookHistory.Feature, &type metadata for BookHistory.Feature);
    atomic_store(result, (unint64_t *)&qword_1F1298);
  }
  return result;
}

uint64_t sub_41660(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 40 * a1 + 32;
  v6 = a3 + 40 * v4;
  if (v5 >= v6 || v5 + 40 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_41754(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_41794()
{
  unint64_t result;

  result = qword_1F1300;
  if (!qword_1F1300)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.RecommendationMethodology, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.RecommendationMethodology);
    atomic_store(result, (unint64_t *)&qword_1F1300);
  }
  return result;
}

uint64_t sub_417D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_5EDC(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_41814(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

unint64_t sub_41820()
{
  unint64_t result;

  result = qword_1F1330;
  if (!qword_1F1330)
  {
    result = swift_getWitnessTable(&unk_18C8E4, &type metadata for APICommonHelpers.StringKey);
    atomic_store(result, (unint64_t *)&qword_1F1330);
  }
  return result;
}

uint64_t sub_41864(__int128 *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v3 = *((_QWORD *)a1 + 3);
  if (v3)
  {
    v4 = *((_QWORD *)a1 + 4);
    *(_QWORD *)(a2 + 24) = v3;
    *(_QWORD *)(a2 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a2);
  }
  else
  {
    v5 = *a1;
    v6 = a1[1];
    *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
    *(_OWORD *)a2 = v5;
    *(_OWORD *)(a2 + 16) = v6;
  }
  return a2;
}

uint64_t sub_418BC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_5EDC(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

_OWORD *sub_41900(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_41910(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_4194C(uint64_t a1)
{
  return sub_3EB40(a1);
}

uint64_t sub_41974@<X0>(uint64_t a1@<X8>)
{
  return sub_3EB58(a1);
}

uint64_t sub_41988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t AssociatedTypeWitness;
  _QWORD v22[10];
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[16];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v23 = a3;
  v24 = a4;
  v26 = a5;
  v27 = a6;
  v28 = a1;
  v29 = a2;
  v12 = *(_QWORD *)(*(_QWORD *)(a6 + 8) + 8);
  v13 = sub_E2084((void (*)(char *, char *))sub_41D08, (uint64_t)v25, a5, (char *)&type metadata for Double, (uint64_t)&type metadata for Never, v12, (uint64_t)&protocol witness table for Never, a8);
  v14 = sub_12AFB4(v13);
  v16 = v15;
  v17 = swift_bridgeObjectRelease(v13);
  if ((v16 & 1) != 0 || (v14 & 0x7FFFFFFFFFFFFFFFLL) == 0)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(v12 + 8));
    return static Array._allocateUninitialized(_:)(0, AssociatedTypeWitness);
  }
  else
  {
    __chkstk_darwin(v17);
    v22[2] = a5;
    v22[3] = a6;
    v22[4] = a1;
    v22[5] = a2;
    v22[6] = v14;
    v22[7] = v23;
    v22[8] = v24;
    v18 = (char *)swift_getAssociatedTypeWitness(0, *(_QWORD *)(v12 + 8));
    return sub_E2084((void (*)(char *, char *))sub_41D44, (uint64_t)v22, a5, v18, (uint64_t)&type metadata for Never, v12, (uint64_t)&protocol witness table for Never, v19);
  }
}

uint64_t RandomAccessCollection<>.normalized()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_41988((uint64_t)sub_41B20, 0, (uint64_t)sub_41B28, 0, a1, a2, a7, a8);
}

{
  return sub_41988((uint64_t)sub_41BE0, 0, (uint64_t)sub_41BE8, 0, a1, a2, a7, a8);
}

double sub_41B20(uint64_t a1)
{
  return *(double *)(a1 + 72);
}

uint64_t sub_41B28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_BYTE *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_BYTE *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 32) = v6;
  v10 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a2 + 40) = v10;
  *(_QWORD *)(a2 + 48) = v8;
  *(_QWORD *)(a2 + 56) = v7;
  *(_QWORD *)(a2 + 64) = v9;
  *(double *)(a2 + 72) = a3;
  sub_40554(v6, v10);
  swift_bridgeObjectRetain(v9);
  return swift_bridgeObjectRetain(v8);
}

uint64_t RandomAccessCollection<>.filter(allowNegativeScores:)(char a1, uint64_t a2, uint64_t a3)
{
  return sub_41C38(a1, a2, a3, (uint64_t)sub_41BAC, (uint64_t)&type metadata for ScoredBook);
}

{
  return sub_41C38(a1, a2, a3, (uint64_t)sub_41CF8, (uint64_t)&type metadata for ScoredGenre);
}

BOOL sub_41BAC(uint64_t a1)
{
  return *(double *)(a1 + 72) >= 0.0;
}

double sub_41BE0(uint64_t a1)
{
  return *(double *)(a1 + 32);
}

uint64_t sub_41BE8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v6 = a1[2];
  v5 = a1[3];
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v5;
  *(double *)(a2 + 32) = a3;
  swift_bridgeObjectRetain(v5);
  return swift_bridgeObjectRetain(v6);
}

uint64_t sub_41C38(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  __chkstk_darwin();
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v11, v13, a2);
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 8) + 8);
  if ((a1 & 1) != 0)
    return Array.init<A>(_:)(v11, a5, a2, v14);
  else
    return Sequence.filter(_:)(a4, 0, a2, v14);
}

BOOL sub_41CF8(uint64_t a1)
{
  return *(double *)(a1 + 32) >= 0.0;
}

double sub_41D08@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double result;

  result = fabs((*(double (**)(void))(v1 + 32))());
  *a1 = result;
  return result;
}

uint64_t sub_41D44(uint64_t a1)
{
  uint64_t v1;
  double v3;
  uint64_t (*v4)(uint64_t, double);
  double v5;

  v3 = *(double *)(v1 + 48);
  v4 = *(uint64_t (**)(uint64_t, double))(v1 + 56);
  v5 = (*(double (**)(void))(v1 + 32))();
  return v4(a1, v5 / v3);
}

uint64_t ScoredBook.copyWith(score:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(_BYTE *)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_BYTE *)(v2 + 24);
  v6 = *(_QWORD *)(v2 + 32);
  v8 = *(_QWORD *)(v2 + 48);
  v7 = *(_QWORD *)(v2 + 56);
  v9 = *(_QWORD *)(v2 + 64);
  *(_QWORD *)a1 = *(_QWORD *)v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  v10 = *(_BYTE *)(v2 + 40);
  *(_BYTE *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = v9;
  *(double *)(a1 + 72) = a2;
  sub_40554(v6, v10);
  swift_bridgeObjectRetain(v9);
  return swift_bridgeObjectRetain(v8);
}

uint64_t ScoredBook.book.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(_BYTE *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_BYTE *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 48);
  v6 = *(_QWORD *)(v1 + 56);
  v8 = *(_QWORD *)(v1 + 64);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  v9 = *(_BYTE *)(v1 + 40);
  *(_BYTE *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v8;
  sub_40554(v5, v9);
  swift_bridgeObjectRetain(v8);
  return swift_bridgeObjectRetain(v7);
}

double ScoredBook.score.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 72);
}

uint64_t ScoredBook.init(book:score:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v3 = *(_BYTE *)(result + 8);
  v4 = *(_QWORD *)(result + 16);
  v5 = *(_BYTE *)(result + 24);
  v6 = *(_QWORD *)(result + 32);
  v7 = *(_BYTE *)(result + 40);
  v8 = *(_QWORD *)(result + 48);
  *(_QWORD *)a2 = *(_QWORD *)result;
  *(_BYTE *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 32) = v6;
  *(_BYTE *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = v8;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(result + 56);
  *(double *)(a2 + 72) = a3;
  return result;
}

BOOL static Event.FinishedMechanism.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int EventType.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void EventType.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_41F64(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_41FA4()
{
  _BYTE *v0;

  if (*v0)
    return 0x65726F6373;
  else
    return 1802465122;
}

uint64_t sub_41FD4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_42B94(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_41FF8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_421EC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_42020(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_421EC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ScoredBook.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;

  v3 = sub_5EDC(&qword_1F1398);
  v23 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v1;
  v7 = *((_BYTE *)v1 + 8);
  v8 = v1[2];
  v21 = *((unsigned __int8 *)v1 + 24);
  v20 = v1[4];
  v19 = *((unsigned __int8 *)v1 + 40);
  v18 = *((_OWORD *)v1 + 3);
  v17 = v1[8];
  v9 = *((double *)v1 + 9);
  v10 = a1[3];
  v11 = a1[4];
  sub_49F4(a1, v10);
  v12 = sub_421EC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ScoredBook.CodingKeys, &type metadata for ScoredBook.CodingKeys, v12, v10, v11);
  v25 = v6;
  v26 = v7;
  v27 = v8;
  v28 = v21;
  v29 = v20;
  v30 = v19;
  v31 = v18;
  v32 = v17;
  v24 = 0;
  v13 = sub_42230();
  v14 = v22;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v25, &v24, v3, &type metadata for Book, v13);
  if (!v14)
  {
    LOBYTE(v25) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v25, v3, v9);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v5, v3);
}

unint64_t sub_421EC()
{
  unint64_t result;

  result = qword_1F13A0;
  if (!qword_1F13A0)
  {
    result = swift_getWitnessTable(&unk_18CB04, &type metadata for ScoredBook.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F13A0);
  }
  return result;
}

unint64_t sub_42230()
{
  unint64_t result;

  result = qword_1F13A8;
  if (!qword_1F13A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Book, &type metadata for Book);
    atomic_store(result, (unint64_t *)&qword_1F13A8);
  }
  return result;
}

uint64_t ScoredBook.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  unsigned __int8 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v5 = sub_5EDC(&qword_1F13B0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_421EC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ScoredBook.CodingKeys, &type metadata for ScoredBook.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_62F8(a1);
  v31 = 0;
  v12 = sub_424E8();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v32, &type metadata for Book, &v31, v5, &type metadata for Book, v12);
  v27 = v32;
  v26 = v33;
  v25 = v34;
  v24 = v35;
  v13 = v36;
  v14 = v38;
  v23 = v39;
  v15 = v40;
  LOBYTE(v32) = 1;
  v28 = v37;
  sub_40554(v36, v37);
  v29 = v15;
  swift_bridgeObjectRetain(v15);
  v30 = v14;
  swift_bridgeObjectRetain(v14);
  KeyedDecodingContainer.decode(_:forKey:)(&v32, v5);
  v17 = v16;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(_QWORD *)a2 = v27;
  *(_BYTE *)(a2 + 8) = v26;
  *(_QWORD *)(a2 + 16) = v25;
  *(_BYTE *)(a2 + 24) = v24;
  *(_QWORD *)(a2 + 32) = v13;
  v18 = v28;
  *(_BYTE *)(a2 + 40) = v28;
  v20 = v29;
  v19 = v30;
  v21 = v23;
  *(_QWORD *)(a2 + 48) = v30;
  *(_QWORD *)(a2 + 56) = v21;
  *(_QWORD *)(a2 + 64) = v20;
  *(_QWORD *)(a2 + 72) = v17;
  sub_62F8(a1);
  sub_40568(v13, v18);
  swift_bridgeObjectRelease(v20);
  return swift_bridgeObjectRelease(v19);
}

unint64_t sub_424E8()
{
  unint64_t result;

  result = qword_1F13B8;
  if (!qword_1F13B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Book, &type metadata for Book);
    atomic_store(result, (unint64_t *)&qword_1F13B8);
  }
  return result;
}

uint64_t sub_4252C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ScoredBook.init(from:)(a1, a2);
}

uint64_t sub_42540(_QWORD *a1)
{
  return ScoredBook.encode(to:)(a1);
}

uint64_t destroy for Book(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 40) != 255)
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 64));
}

uint64_t initializeWithCopy for ScoredBook(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = (_QWORD *)(a2 + 32);
  v5 = *(unsigned __int8 *)(a2 + 40);
  if (v5 == 255)
  {
    *(_QWORD *)(a1 + 32) = *v4;
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  }
  else
  {
    v6 = *v4;
    *(_QWORD *)(a1 + 32) = *v4;
    *(_BYTE *)(a1 + 40) = v5 & 1;
    swift_bridgeObjectRetain(v6);
  }
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  v10 = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v9;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t assignWithCopy for ScoredBook(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = a1 + 32;
  v6 = (uint64_t *)(a2 + 32);
  v7 = *(unsigned __int8 *)(a2 + 40);
  if (*(unsigned __int8 *)(a1 + 40) == 255)
  {
    if (v7 == 255)
    {
      v9 = *v6;
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      *(_QWORD *)v5 = v9;
    }
    else
    {
      v12 = *v6;
      *(_QWORD *)(a1 + 32) = *v6;
      *(_BYTE *)(a1 + 40) = v7 & 1;
      swift_bridgeObjectRetain(v12);
    }
  }
  else if (v7 == 255)
  {
    sub_42750((_QWORD *)(a1 + 32));
    v8 = *((_BYTE *)v6 + 8);
    *(_QWORD *)v5 = *v6;
    *(_BYTE *)(v5 + 8) = v8;
  }
  else
  {
    v10 = *v6;
    v11 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = *v6;
    *(_BYTE *)(a1 + 40) = v7 & 1;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRelease(v11);
  }
  v13 = *(_QWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v15 = *(_QWORD *)(a2 + 64);
  v16 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

_QWORD *sub_42750(_QWORD *a1)
{
  _s16MetadataResponseVwxx(a1);
  return a1;
}

__n128 initializeWithTake for ScoredBook(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for ScoredBook(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = a1 + 32;
  v5 = a2 + 32;
  if (*(unsigned __int8 *)(a1 + 40) != 255)
  {
    v6 = *(unsigned __int8 *)(a2 + 40);
    if (v6 != 255)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)v5;
      *(_BYTE *)(a1 + 40) = v6 & 1;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_42750((_QWORD *)(a1 + 32));
  }
  *(_QWORD *)v4 = *(_QWORD *)v5;
  *(_BYTE *)(v4 + 8) = *(_BYTE *)(v5 + 8);
LABEL_6:
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScoredBook(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScoredBook(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScoredBook()
{
  return &type metadata for ScoredBook;
}

uint64_t dispatch thunk of MediaTypesRecommendationServiceType.determineRecommendedMediaTypes(from:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int *v9;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = *(int **)(a4 + 8);
  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v9 + *v9);
  v10 = (_QWORD *)swift_task_alloc(v9[1]);
  *(_QWORD *)(v4 + 16) = v10;
  *v10 = v4;
  v10[1] = sub_429A0;
  return v12(a1, a2, a3, a4);
}

uint64_t sub_429A0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 16));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t storeEnumTagSinglePayload for ScoredBook.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_42A3C + 4 * byte_18C9B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_42A70 + 4 * byte_18C9B0[v4]))();
}

uint64_t sub_42A70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_42A78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x42A80);
  return result;
}

uint64_t sub_42A8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x42A94);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_42A98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_42AA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScoredBook.CodingKeys()
{
  return &type metadata for ScoredBook.CodingKeys;
}

unint64_t sub_42AC0()
{
  unint64_t result;

  result = qword_1F13C8;
  if (!qword_1F13C8)
  {
    result = swift_getWitnessTable(&unk_18CADC, &type metadata for ScoredBook.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F13C8);
  }
  return result;
}

unint64_t sub_42B08()
{
  unint64_t result;

  result = qword_1F13D0;
  if (!qword_1F13D0)
  {
    result = swift_getWitnessTable(&unk_18CA4C, &type metadata for ScoredBook.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F13D0);
  }
  return result;
}

unint64_t sub_42B50()
{
  unint64_t result;

  result = qword_1F13D8;
  if (!qword_1F13D8)
  {
    result = swift_getWitnessTable(&unk_18CA74, &type metadata for ScoredBook.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F13D8);
  }
  return result;
}

uint64_t sub_42B94(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 1802465122 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1802465122, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x65726F6373 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65726F6373, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t *sub_42C6C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v25 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v25);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v8((uint64_t *)((char *)a1 + v9), (uint64_t *)((char *)a2 + v9), v7);
    v12 = (int *)type metadata accessor for SeedBasedRecommendationRequest(0);
    v13 = v12[5];
    v14 = *(_QWORD *)&v11[v13];
    *(_QWORD *)&v10[v13] = v14;
    v15 = v12[6];
    v16 = &v10[v15];
    v17 = &v11[v15];
    v18 = *((_QWORD *)v17 + 1);
    *(_QWORD *)v16 = *(_QWORD *)v17;
    *((_QWORD *)v16 + 1) = v18;
    v19 = v12[7];
    v20 = &v10[v19];
    v21 = &v11[v19];
    v22 = *((_QWORD *)v21 + 1);
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *((_QWORD *)v20 + 1) = v22;
    v10[v12[8]] = v11[v12[8]];
    v10[v12[9]] = v11[v12[9]];
    *(_QWORD *)&v10[v12[10]] = *(_QWORD *)&v11[v12[10]];
    v10[v12[11]] = v11[v12[11]];
    v23 = v12[12];
    v24 = *(_QWORD *)&v11[v23];
    *(_QWORD *)&v10[v23] = v24;
    *(_QWORD *)&v10[v12[13]] = *(_QWORD *)&v11[v12[13]];
    *(_QWORD *)&v10[v12[14]] = *(_QWORD *)&v11[v12[14]];
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v24);
  }
  return a1;
}

uint64_t sub_42DD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  int *v7;

  v4 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  v5(v6, v4);
  v7 = (int *)type metadata accessor for SeedBasedRecommendationRequest(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[5]));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[7] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[12]));
}

uint64_t sub_42E70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  v11 = (int *)type metadata accessor for SeedBasedRecommendationRequest(0);
  v12 = v11[5];
  v13 = *(_QWORD *)(v10 + v12);
  *(_QWORD *)(v9 + v12) = v13;
  v14 = v11[6];
  v15 = (_QWORD *)(v9 + v14);
  v16 = (_QWORD *)(v10 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = v11[7];
  v19 = (_QWORD *)(v9 + v18);
  v20 = (_QWORD *)(v10 + v18);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  *(_BYTE *)(v9 + v11[8]) = *(_BYTE *)(v10 + v11[8]);
  *(_BYTE *)(v9 + v11[9]) = *(_BYTE *)(v10 + v11[9]);
  *(_QWORD *)(v9 + v11[10]) = *(_QWORD *)(v10 + v11[10]);
  *(_BYTE *)(v9 + v11[11]) = *(_BYTE *)(v10 + v11[11]);
  v22 = v11[12];
  v23 = *(_QWORD *)(v10 + v22);
  *(_QWORD *)(v9 + v22) = v23;
  *(_QWORD *)(v9 + v11[13]) = *(_QWORD *)(v10 + v11[13]);
  *(_QWORD *)(v9 + v11[14]) = *(_QWORD *)(v10 + v11[14]);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v23);
  return a1;
}

uint64_t sub_42FAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  v11 = (int *)type metadata accessor for SeedBasedRecommendationRequest(0);
  v12 = v11[5];
  v13 = *(_QWORD *)(v10 + v12);
  v14 = *(_QWORD *)(v9 + v12);
  *(_QWORD *)(v9 + v12) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  v15 = v11[6];
  v16 = (_QWORD *)(v9 + v15);
  v17 = (_QWORD *)(v10 + v15);
  *v16 = *v17;
  v18 = v17[1];
  v19 = v16[1];
  v16[1] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = v11[7];
  v21 = (_QWORD *)(v9 + v20);
  v22 = (_QWORD *)(v10 + v20);
  *v21 = *v22;
  v23 = v22[1];
  v24 = v21[1];
  v21[1] = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  *(_BYTE *)(v9 + v11[8]) = *(_BYTE *)(v10 + v11[8]);
  *(_BYTE *)(v9 + v11[9]) = *(_BYTE *)(v10 + v11[9]);
  *(_QWORD *)(v9 + v11[10]) = *(_QWORD *)(v10 + v11[10]);
  *(_BYTE *)(v9 + v11[11]) = *(_BYTE *)(v10 + v11[11]);
  v25 = v11[12];
  v26 = *(_QWORD *)(v10 + v25);
  v27 = *(_QWORD *)(v9 + v25);
  *(_QWORD *)(v9 + v25) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  *(_QWORD *)(v9 + v11[13]) = *(_QWORD *)(v10 + v11[13]);
  *(_QWORD *)(v9 + v11[14]) = *(_QWORD *)(v10 + v11[14]);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_4311C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  v11 = (int *)type metadata accessor for SeedBasedRecommendationRequest(0);
  *(_QWORD *)(v9 + v11[5]) = *(_QWORD *)(v10 + v11[5]);
  *(_OWORD *)(v9 + v11[6]) = *(_OWORD *)(v10 + v11[6]);
  *(_OWORD *)(v9 + v11[7]) = *(_OWORD *)(v10 + v11[7]);
  *(_BYTE *)(v9 + v11[8]) = *(_BYTE *)(v10 + v11[8]);
  *(_BYTE *)(v9 + v11[9]) = *(_BYTE *)(v10 + v11[9]);
  *(_QWORD *)(v9 + v11[10]) = *(_QWORD *)(v10 + v11[10]);
  *(_BYTE *)(v9 + v11[11]) = *(_BYTE *)(v10 + v11[11]);
  *(_QWORD *)(v9 + v11[12]) = *(_QWORD *)(v10 + v11[12]);
  *(_QWORD *)(v9 + v11[13]) = *(_QWORD *)(v10 + v11[13]);
  *(_QWORD *)(v9 + v11[14]) = *(_QWORD *)(v10 + v11[14]);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_43228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  v11 = (int *)type metadata accessor for SeedBasedRecommendationRequest(0);
  v12 = v11[5];
  v13 = *(_QWORD *)(v9 + v12);
  *(_QWORD *)(v9 + v12) = *(_QWORD *)(v10 + v12);
  swift_bridgeObjectRelease(v13);
  v14 = v11[6];
  v15 = (_QWORD *)(v9 + v14);
  v16 = (uint64_t *)(v10 + v14);
  v18 = *v16;
  v17 = v16[1];
  v19 = v15[1];
  *v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease(v19);
  v20 = v11[7];
  v21 = (_QWORD *)(v9 + v20);
  v22 = (uint64_t *)(v10 + v20);
  v24 = *v22;
  v23 = v22[1];
  v25 = v21[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease(v25);
  *(_BYTE *)(v9 + v11[8]) = *(_BYTE *)(v10 + v11[8]);
  *(_BYTE *)(v9 + v11[9]) = *(_BYTE *)(v10 + v11[9]);
  *(_QWORD *)(v9 + v11[10]) = *(_QWORD *)(v10 + v11[10]);
  *(_BYTE *)(v9 + v11[11]) = *(_BYTE *)(v10 + v11[11]);
  v26 = v11[12];
  v27 = *(_QWORD *)(v9 + v26);
  *(_QWORD *)(v9 + v26) = *(_QWORD *)(v10 + v26);
  swift_bridgeObjectRelease(v27);
  *(_QWORD *)(v9 + v11[13]) = *(_QWORD *)(v10 + v11[13]);
  *(_QWORD *)(v9 + v11[14]) = *(_QWORD *)(v10 + v11[14]);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_43368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_43374);
}

uint64_t sub_43374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for SeedBasedRecommendationRequest(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_433E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_433F4);
}

uint64_t sub_433F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for SeedBasedRecommendationRequest(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for SeedBookRecommendationWork(uint64_t a1)
{
  uint64_t result;

  result = qword_1F1438;
  if (!qword_1F1438)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SeedBookRecommendationWork);
  return result;
}

uint64_t sub_434AC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for SeedBasedRecommendationRequest(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = (char *)&value witness table for Builtin.Int64 + 64;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_4353C()
{
  return sub_41754(&qword_1F1168, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

_QWORD *sub_43568(uint64_t a1)
{
  int64_t v1;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  sub_340AC(0, v1, 0);
  result = (_QWORD *)sub_EDD8C(a1);
  v4 = (uint64_t)result;
  v6 = v5;
  v8 = v7 & 1;
  while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(_BYTE *)(a1 + 32))
  {
    if (((*(_QWORD *)(a1 + 56 + (((unint64_t)v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
      goto LABEL_13;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v6)
      goto LABEL_14;
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 552 * v4);
    v11 = _swiftEmptyArrayStorage[2];
    v10 = _swiftEmptyArrayStorage[3];
    if (v11 >= v10 >> 1)
      sub_340AC(v10 > 1, v11 + 1, 1);
    _swiftEmptyArrayStorage[2] = v11 + 1;
    _swiftEmptyArrayStorage[v11 + 4] = v9;
    result = (_QWORD *)sub_EDE30(v4, v6, v8 & 1, a1);
    v4 = (uint64_t)result;
    v6 = v12;
    v8 = v13 & 1;
    if (!--v1)
    {
      sub_41814((uint64_t)result, v12, v13 & 1);
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_436D4()
{
  _QWORD *v0;

  return swift_retain(*v0);
}

uint64_t sub_436DC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  char v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  BOOL v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  char v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  int64_t v71;
  uint64_t v72;
  int64_t v73;
  uint64_t v74;
  void *v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v95;
  uint64_t v96;
  char v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  int64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  int64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  int64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  unint64_t v137;
  __int128 *v138;
  unint64_t v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  int64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  unint64_t v154;
  __int128 *v155;
  unint64_t v156;
  __int128 v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  _QWORD *v161;
  unint64_t v162;
  uint64_t result;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  int *v175;
  char *v176;
  _QWORD *v177;
  int *v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  char *v204;
  char v205;
  int v206;
  uint64_t v207;
  int64_t v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  int64_t v218;
  uint64_t v219;
  uint64_t v220;
  double v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  int *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int *v236;
  uint64_t v237;
  double *v238;
  _QWORD *v239;
  uint64_t v240;
  double v241;
  double v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  double *v248;
  double v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  float v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  _QWORD *v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  int64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  _QWORD *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  int64_t v291;
  uint64_t v292;
  int v293;
  unint64_t v294;
  uint64_t v295;
  char *v296;
  uint64_t v297;
  _QWORD *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  char *v303;
  uint64_t v304;
  _QWORD *v305;
  char *v306;
  char *v307;
  uint64_t v308;
  uint64_t v309;
  __int128 v310;
  unint64_t v311;
  uint64_t v312;
  uint64_t v313;
  int64_t v314;
  uint64_t v315;
  int *v316;
  char *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  _QWORD *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  int64_t v328;
  uint64_t v329;
  char *v330;
  __int128 v331;
  unint64_t v332;
  uint64_t v333;
  _QWORD *v334;
  _QWORD v335[2];
  uint64_t v336[69];

  v6 = type metadata accessor for Com_Apple_News_Algorithms_Proto_Model_FloatList(0);
  v308 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v307 = (char *)&v294 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v306 = (char *)&v294 - v9;
  v10 = type metadata accessor for Com_Apple_News_Algorithms_Proto_Model_Int32List(0);
  v11 = __chkstk_darwin(v10);
  v12 = __chkstk_darwin(v11);
  v16 = a1[48];
  if (!v16)
  {
    v45 = sub_4AA94();
    v46 = swift_allocError(&type metadata for SeedBookRecommendationWork.Errors, v45, 0, 0);
    v48 = 0;
LABEL_145:
    *v47 = v48;
    return swift_willThrow(v46);
  }
  v332 = v3;
  v298 = a2;
  v299 = v15;
  v303 = (char *)&v294 - v13;
  v304 = v14;
  v305 = (_QWORD *)v12;
  v17 = a1[45];
  v325 = a1[46];
  v326 = v17;
  v318 = a1[47];
  v296 = (char *)a1[53];
  v297 = v6;
  v18 = a1[51];
  v19 = a1[52];
  v20 = a1[50];
  v312 = a1[49];
  v313 = v18;
  v21 = qword_1F0130;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v16);
  v315 = v19;
  swift_bridgeObjectRetain(v19);
  if (v21 != -1)
    goto LABEL_228;
  while (1)
  {
    v22 = (id)qword_1F6208;
    LODWORD(v331) = static os_log_type_t.debug.getter();
    v23 = sub_5EDC(&qword_1F14C8);
    v24 = swift_allocObject(v23, 192, 7);
    *(_OWORD *)(v24 + 16) = xmmword_18CB60;
    v25 = type metadata accessor for UUID(0);
    v26 = sub_41754((unint64_t *)&qword_1F1490, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v27 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v25, v26);
    v29 = v28;
    *(_QWORD *)(v24 + 56) = &type metadata for String;
    v30 = sub_4AAD8();
    *(_QWORD *)(v24 + 32) = v27;
    *(_QWORD *)(v24 + 40) = v29;
    *(_QWORD *)(v24 + 96) = &type metadata for String;
    *(_QWORD *)(v24 + 104) = v30;
    v31 = v318;
    *(_QWORD *)(v24 + 64) = v30;
    *(_QWORD *)(v24 + 72) = v31;
    *(_QWORD *)(v24 + 80) = v16;
    *(_QWORD *)(v24 + 136) = &type metadata for String;
    *(_QWORD *)(v24 + 144) = v30;
    *(_QWORD *)(v24 + 112) = v312;
    *(_QWORD *)(v24 + 120) = v20;
    *(_QWORD *)(v24 + 176) = &type metadata for String;
    *(_QWORD *)(v24 + 184) = v30;
    v32 = v315;
    *(_QWORD *)(v24 + 152) = v313;
    *(_QWORD *)(v24 + 160) = v32;
    v314 = v20;
    swift_bridgeObjectRetain(v20);
    v309 = v16;
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v32);
    os_log(_:dso:log:type:_:)("Running on graph with request ID %{public}@ for output %{public}@ score %{public}@ seedBook %{public}@ ", 103, 2, &dword_0, v22, v331, v24);

    swift_bridgeObjectRelease(v24);
    v33 = type metadata accessor for SeedBookRecommendationWork(0);
    v34 = v2 + *(int *)(v33 + 20);
    v316 = (int *)type metadata accessor for SeedBasedRecommendationRequest(0);
    v317 = (char *)v34;
    v35 = swift_bridgeObjectRetain(*(_QWORD *)(v34 + v316[5]));
    v36 = v332;
    v37 = sub_499C8(v35);
    v20 = v36;
    v38 = swift_bridgeObjectRetain(v37);
    v39 = sub_38040(v38);
    swift_release(v37);
    v336[0] = (uint64_t)v39;
    sub_46AD0(v336, sub_D0A7C, sub_46B48);
    v311 = v36;
    if (v36)
      goto LABEL_240;
    swift_release(v37);
    v40 = v336[0];
    v41 = *(int *)(v33 + 24);
    v42 = *(_QWORD *)(v2 + v41);
    if (v42)
    {
      v43 = v311;
      v44 = sub_12A114(0, *(_QWORD *)(v336[0] + 16), v42, *(_QWORD *)(v2 + v41), v336[0]);
      v311 = v43;
    }
    else
    {
      v49 = sub_5EDC(&qword_1F11D0);
      v44 = (_QWORD *)swift_allocObject(v49, 64, 7);
      *((_OWORD *)v44 + 1) = xmmword_1875E0;
      v44[4] = _swiftEmptyArrayStorage;
      v44[5] = &_swiftEmptyArrayStorage[4];
      *((_OWORD *)v44 + 3) = xmmword_18CB70;
    }
    swift_release(v40);
    v50 = v314;
    if (!v44[2])
    {
      swift_bridgeObjectRelease(v315);
      swift_bridgeObjectRelease(v309);
      swift_bridgeObjectRelease(v50);
      swift_bridgeObjectRelease(v44);
      v162 = sub_4AA94();
      v46 = swift_allocError(&type metadata for SeedBookRecommendationWork.Errors, v162, 0, 0);
      v48 = 1;
      goto LABEL_145;
    }
    v51 = v44[4];
    v329 = v44[5];
    v52 = v44[6];
    v53 = v44[7];
    v295 = v51;
    swift_unknownObjectRetain(v51);
    swift_bridgeObjectRelease(v44);
    v294 = v53;
    v300 = v52;
    v328 = v53 >> 1;
    v54 = __OFSUB__(v53 >> 1, v52);
    v16 = (v53 >> 1) - v52;
    if (v54)
    {
      __break(1u);
LABEL_230:
      __break(1u);
      goto LABEL_231;
    }
    v324 = v16;
    if (!v16)
    {
      v323 = _swiftEmptyArrayStorage;
      goto LABEL_148;
    }
    v335[0] = _swiftEmptyArrayStorage;
    v44 = v335;
    sub_3421C(0, v16 & ~(v16 >> 63), 0);
    if (v16 < 0)
      goto LABEL_230;
    v55 = 0;
    v56 = (_QWORD *)v335[0];
    v302 = -v326;
    v301 = -v325;
    v331 = xmmword_1875E0;
    v57 = 1;
    v2 = v300;
    v310 = xmmword_18CB80;
    while (1)
    {
      v58 = v57;
      if (v2 >= v328 || v55 >= v16)
        goto LABEL_223;
      v323 = v56;
      memcpy(v336, (const void *)(v329 + 552 * v2), 0x221uLL);
      v60 = v336[2];
      v59 = v336[3];
      v321 = v2;
      v319 = v58;
      if (LOBYTE(v336[1]) == 1)
      {
        sub_6100(v336);
        swift_bridgeObjectRelease(0xE90000000000006BLL);
        v61 = 1;
      }
      else
      {
        v62 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6B6F6F6265, 0xE500000000000000, 0x6F6F626F69647561, 0xE90000000000006BLL, 0);
        sub_6100(v336);
        swift_bridgeObjectRelease(0xE500000000000000);
        v61 = v62 & 1;
      }
      LODWORD(v320) = v61;
      v322 = v59;
      v63 = *(_QWORD *)(v60 + 16);
      if (v63)
        break;
      v20 = (int64_t)_swiftEmptyArrayStorage;
LABEL_52:
      v83 = *(_QWORD *)(v20 + 16);
      v84 = Set.init(minimumCapacity:)(v83, &type metadata for UInt64, &protocol witness table for UInt64);
      v85 = (_QWORD *)v84;
      if (v83)
      {
        v86 = 0;
        v87 = v84 + 56;
        while (1)
        {
          v88 = *(_QWORD *)(v20 + 32 + 8 * v86++);
          v89 = static Hasher._hash(seed:_:)(v85[5], v88);
          v90 = -1 << *((_BYTE *)v85 + 32);
          v91 = v89 & ~v90;
          if (((*(_QWORD *)(v87 + ((v91 >> 3) & 0xFFFFFFFFFFFFF8)) >> v91) & 1) == 0)
            goto LABEL_61;
          v92 = v85[6];
          if (*(_QWORD *)(v92 + 8 * v91) == v88)
          {
LABEL_54:
            if (v86 == v83)
              break;
          }
          else
          {
            v93 = ~v90;
            while (1)
            {
              v91 = (v91 + 1) & v93;
              if (((*(_QWORD *)(v87 + ((v91 >> 3) & 0xFFFFFFFFFFFFF8)) >> v91) & 1) == 0)
                break;
              if (*(_QWORD *)(v92 + 8 * v91) == v88)
                goto LABEL_54;
            }
LABEL_61:
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v85);
            v334 = v85;
            sub_1668AC(v88, v91, isUniquelyReferenced_nonNull_native);
            v85 = v334;
            swift_bridgeObjectRelease(0x8000000000000000);
            if (v86 == v83)
              break;
            v87 = (uint64_t)(v85 + 7);
          }
        }
      }
      swift_bridgeObjectRelease(v20);
      v20 = v85[2];
      if (v20)
      {
        v334 = _swiftEmptyArrayStorage;
        sub_340F4(0, v20, 0);
        v2 = (uint64_t)v334;
        v16 = sub_EDD8C(v85);
        v96 = v95;
        v98 = v97 & 1;
        v330 = (char *)(v85 + 7);
        do
        {
          if (v16 < 0 || v16 >= 1 << *((_BYTE *)v85 + 32))
            goto LABEL_209;
          if (((*(_QWORD *)&v330[((unint64_t)v16 >> 3) & 0xFFFFFFFFFFFFF8] >> v16) & 1) == 0)
            goto LABEL_210;
          if (*((_DWORD *)v85 + 9) != (_DWORD)v96)
            goto LABEL_211;
          LODWORD(v332) = v98;
          v333 = *(_QWORD *)(v85[6] + 8 * v16);
          v99 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
          v101 = v100;
          v334 = (_QWORD *)v2;
          v102 = *(_QWORD *)(v2 + 16);
          v103 = *(_QWORD *)(v2 + 24);
          if (v102 >= v103 >> 1)
          {
            v327 = v99;
            sub_340F4(v103 > 1, v102 + 1, 1);
            v99 = v327;
            v2 = (uint64_t)v334;
          }
          *(_QWORD *)(v2 + 16) = v102 + 1;
          v104 = v2 + 16 * v102;
          *(_QWORD *)(v104 + 32) = v99;
          *(_QWORD *)(v104 + 40) = v101;
          v105 = sub_EDE30(v16, v96, v332 & 1, v85);
          v16 = v105;
          v96 = v106;
          v98 = v107 & 1;
          --v20;
        }
        while (v20);
        sub_41814(v105, v106, v98);
        swift_bridgeObjectRelease(v85);
      }
      else
      {
        swift_bridgeObjectRelease(v85);
        v2 = (uint64_t)_swiftEmptyArrayStorage;
      }
      v327 = v2;
      v108 = v322;
      v109 = *(_QWORD *)(v322 + 16);
      if (v109)
      {
        v334 = _swiftEmptyArrayStorage;
        swift_bridgeObjectRetain(v322);
        sub_340F4(0, v109, 0);
        v2 = (uint64_t)v334;
        v16 = sub_EDD8C(v108);
        v111 = v110;
        v113 = v112 & 1;
        v330 = (char *)(v108 + 56);
        do
        {
          if (v16 < 0 || v16 >= 1 << *(_BYTE *)(v108 + 32))
            goto LABEL_212;
          if (((*(_QWORD *)&v330[((unint64_t)v16 >> 3) & 0xFFFFFFFFFFFFF8] >> v16) & 1) == 0)
            goto LABEL_213;
          if (*(_DWORD *)(v108 + 36) != (_DWORD)v111)
            goto LABEL_214;
          LODWORD(v332) = v113;
          v333 = *(_QWORD *)(*(_QWORD *)(v108 + 48) + 8 * v16);
          v114 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
          v116 = v115;
          v334 = (_QWORD *)v2;
          v117 = *(_QWORD *)(v2 + 16);
          v118 = *(_QWORD *)(v2 + 24);
          v20 = v117 + 1;
          if (v117 >= v118 >> 1)
          {
            v322 = v114;
            sub_340F4(v118 > 1, v117 + 1, 1);
            v114 = v322;
            v2 = (uint64_t)v334;
          }
          *(_QWORD *)(v2 + 16) = v20;
          v119 = v2 + 16 * v117;
          *(_QWORD *)(v119 + 32) = v114;
          *(_QWORD *)(v119 + 40) = v116;
          v120 = sub_EDE30(v16, v111, v332 & 1, v108);
          v16 = v120;
          v111 = v121;
          v113 = v122 & 1;
          --v109;
        }
        while (v109);
        v332 = v2;
        sub_41814(v120, v121, v113);
        swift_bridgeObjectRelease(v108);
      }
      else
      {
        v332 = (unint64_t)_swiftEmptyArrayStorage;
      }
      v334 = (_QWORD *)v336[0];
      v123 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
      v20 = v124;
      v16 = v326;
      if (v326 >= *(_QWORD *)(v327 + 16))
      {
        v127 = (_QWORD *)swift_bridgeObjectRetain(v327);
      }
      else
      {
        v334 = (_QWORD *)v327;
        swift_bridgeObjectRetain(v327);
        v2 = (uint64_t)&v334;
        sub_D08A4();
        if (v16 < 0)
          goto LABEL_226;
        v125 = (uint64_t)v334;
        if (v16)
        {
          if (v334[2] >= (unint64_t)v16)
            v126 = v16;
          else
            v126 = v334[2];
        }
        else
        {
          v126 = 0;
        }
        v128 = v20;
        v129 = type metadata accessor for __ContiguousArrayStorageBase(0);
        v130 = swift_unknownObjectRetain_n(v125, 2);
        v131 = (_QWORD *)swift_dynamicCastClass(v130, v129);
        if (!v131)
        {
          swift_release(v125);
          v131 = _swiftEmptyArrayStorage;
        }
        v132 = v131[2];
        swift_release(v131);
        if (v132 == v126)
        {
          v127 = (_QWORD *)swift_dynamicCastClass(v125, v129);
          swift_release(v125);
          v20 = v128;
          if (!v127)
          {
            swift_release(v125);
            v127 = _swiftEmptyArrayStorage;
          }
        }
        else
        {
          swift_release(v125);
          v127 = sub_38138(v125, v125 + 32, 0, (2 * v126) | 1);
          swift_release(v125);
          v20 = v128;
        }
      }
      v133 = v127[2];
      v134 = v326 - v133;
      if (v326 == v133)
      {
        swift_bridgeObjectRelease(v327);
        goto LABEL_110;
      }
      if (v326 - v133 < 0)
        goto LABEL_239;
      v135 = static Array._allocateBufferUninitialized(minimumCapacity:)(v326 - v133, &type metadata for String);
      *(_QWORD *)(v135 + 16) = v134;
      v136 = (_QWORD *)(v135 + 32);
      if (v134 >= 4)
      {
        v137 = v134 & 0xFFFFFFFFFFFFFFFCLL;
        v136 += 2 * (v134 & 0xFFFFFFFFFFFFFFFCLL);
        v138 = (__int128 *)(v135 + 64);
        v139 = v134 & 0xFFFFFFFFFFFFFFFCLL;
        v140 = v310;
        do
        {
          *(v138 - 2) = v140;
          *(v138 - 1) = v140;
          *v138 = v140;
          v138[1] = v140;
          v138 += 4;
          v139 -= 4;
        }
        while (v139);
        if (v134 == v137)
          goto LABEL_109;
      }
      else
      {
        v137 = 0;
      }
      v141 = v302 + v137 + v133;
      do
      {
        *v136 = 0;
        v136[1] = 0xE000000000000000;
        v136 += 2;
        v76 = __CFADD__(v141++, 1);
      }
      while (!v76);
LABEL_109:
      v334 = v127;
      sub_10F29C(v135);
      swift_bridgeObjectRelease(v327);
      v127 = v334;
LABEL_110:
      v16 = v325;
      if (v325 >= *(_QWORD *)(v332 + 16))
      {
        v144 = (_QWORD *)swift_bridgeObjectRetain(v332);
      }
      else
      {
        v334 = (_QWORD *)v332;
        swift_bridgeObjectRetain(v332);
        v2 = (uint64_t)&v334;
        sub_D08A4();
        if (v16 < 0)
          goto LABEL_227;
        v142 = (uint64_t)v334;
        if (v16)
        {
          if (v334[2] >= (unint64_t)v16)
            v143 = v16;
          else
            v143 = v334[2];
        }
        else
        {
          v143 = 0;
        }
        v145 = v20;
        v146 = type metadata accessor for __ContiguousArrayStorageBase(0);
        v147 = swift_unknownObjectRetain_n(v142, 2);
        v148 = (_QWORD *)swift_dynamicCastClass(v147, v146);
        if (!v148)
        {
          swift_release(v142);
          v148 = _swiftEmptyArrayStorage;
        }
        v149 = v148[2];
        swift_release(v148);
        if (v149 == v143)
        {
          v144 = (_QWORD *)swift_dynamicCastClass(v142, v146);
          swift_release(v142);
          v20 = v145;
          if (!v144)
          {
            swift_release(v142);
            v144 = _swiftEmptyArrayStorage;
          }
        }
        else
        {
          swift_release(v142);
          v144 = sub_38138(v142, v142 + 32, 0, (2 * v143) | 1);
          swift_release(v142);
          v20 = v145;
        }
      }
      v150 = v144[2];
      v151 = v325 - v150;
      if (v325 == v150)
      {
        swift_bridgeObjectRelease(v332);
        sub_6228(v336);
        goto LABEL_135;
      }
      if (v325 - v150 < 0)
        goto LABEL_239;
      v152 = static Array._allocateBufferUninitialized(minimumCapacity:)(v325 - v150, &type metadata for String);
      *(_QWORD *)(v152 + 16) = v151;
      v153 = (_QWORD *)(v152 + 32);
      if (v151 >= 4)
      {
        v154 = v151 & 0xFFFFFFFFFFFFFFFCLL;
        v153 += 2 * (v151 & 0xFFFFFFFFFFFFFFFCLL);
        v155 = (__int128 *)(v152 + 64);
        v156 = v151 & 0xFFFFFFFFFFFFFFFCLL;
        v157 = v310;
        do
        {
          *(v155 - 2) = v157;
          *(v155 - 1) = v157;
          *v155 = v157;
          v155[1] = v157;
          v155 += 4;
          v156 -= 4;
        }
        while (v156);
        if (v151 == v154)
          goto LABEL_134;
      }
      else
      {
        v154 = 0;
      }
      v158 = v301 + v154 + v150;
      do
      {
        *v153 = 0;
        v153[1] = 0xE000000000000000;
        v153 += 2;
        v76 = __CFADD__(v158++, 1);
      }
      while (!v76);
LABEL_134:
      v334 = v144;
      sub_10F29C(v152);
      swift_bridgeObjectRelease(v332);
      sub_6228(v336);
      v144 = v334;
LABEL_135:
      v56 = v323;
      v335[0] = v323;
      v160 = v323[2];
      v159 = v323[3];
      v16 = v160 + 1;
      if (v160 >= v159 >> 1)
      {
        sub_3421C(v159 > 1, v160 + 1, 1);
        v56 = (_QWORD *)v335[0];
      }
      v56[2] = v16;
      v161 = &v56[5 * v160];
      v161[4] = v123;
      v161[5] = v20;
      *((_DWORD *)v161 + 12) = v320;
      v161[7] = v127;
      v161[8] = v144;
      v2 = v321 + 1;
      if (__OFADD__(v321, 1))
        goto LABEL_224;
      v16 = v324;
      if (v319 == v324)
      {
        v323 = v56;
LABEL_148:
        v164 = sub_5EDC(&qword_1F14D8);
        v165 = sub_5EDC(&qword_1F14E0);
        v166 = *(_QWORD *)(v165 - 8);
        v167 = v165;
        v168 = *(_QWORD *)(v166 + 72);
        v169 = *(unsigned __int8 *)(v166 + 80);
        v170 = (v169 + 32) & ~v169;
        v171 = swift_allocObject(v164, v170 - v168 + 8 * v168, v169 | 7);
        *(_OWORD *)(v171 + 16) = xmmword_18CB90;
        v301 = v171;
        v172 = (_QWORD *)(v171 + v170);
        v173 = v167;
        v174 = (uint64_t)v172 + *(int *)(v167 + 48);
        *v172 = 0xD000000000000020;
        v172[1] = 0x80000000001A0060;
        v175 = v316;
        v176 = v317;
        sub_D19C8(*(_QWORD *)&v317[v316[7]], *(_QWORD *)&v317[v316[7] + 8], v174);
        v177 = (_QWORD *)((char *)v172 + v168);
        *v177 = 0xD000000000000020;
        v177[1] = 0x80000000001A0090;
        v178 = v175;
        if (v176[v175[8]])
          v179 = 0x6F6F626F69647561;
        else
          v179 = 0x6B6F6F6265;
        if (v176[v175[8]])
          v180 = 0xE90000000000006BLL;
        else
          v180 = 0xE500000000000000;
        v302 = v173;
        sub_D19C8(v179, v180, (uint64_t)v177 + *(int *)(v173 + 48));
        swift_bridgeObjectRelease(v180);
        *(_QWORD *)&v331 = 2 * v168;
        v181 = (_QWORD *)((char *)v172 + 2 * v168);
        *v181 = 0xD000000000000027;
        v181[1] = 0x80000000001A00C0;
        v330 = (char *)sub_5EDC(&qword_1F1080);
        v53 = swift_allocObject(v330, 36, 7);
        v310 = xmmword_1875E0;
        *(_OWORD *)(v53 + 16) = xmmword_1875E0;
        *(_DWORD *)(v53 + 32) = v176[v178[9]];
        v182 = v303;
        Com_Apple_News_Algorithms_Proto_Model_Int32List.init()();
        v183 = swift_bridgeObjectRetain(v53);
        v184 = Com_Apple_News_Algorithms_Proto_Model_Int32List.values.setter(v183);
        Com_Apple_News_Algorithms_Proto_Model_Feature.init()(v184);
        v185 = v299;
        v186 = v304;
        v187 = v305;
        v332 = *(_QWORD *)(v299 + 16);
        ((void (*)(uint64_t, char *, _QWORD *))v332)(v304, v182, v305);
        Com_Apple_News_Algorithms_Proto_Model_Feature.int32List.setter(v186);
        v27 = *(char **)(v185 + 8);
        ((void (*)(char *, _QWORD *))v27)(v182, v187);
        swift_bridgeObjectRelease(v53);
        v326 = (uint64_t)v172;
        v327 = v168;
        v44 = (_QWORD *)((char *)v172 + v331 + v168);
        v188 = v330;
        *v44 = 0xD000000000000023;
        v44[1] = 0x80000000001A00F0;
        v189 = swift_allocObject(v188, 36, 7);
        *(_OWORD *)(v189 + 16) = v310;
        v190 = *(_QWORD *)&v317[v316[10]];
        if (v190 >= (uint64_t)0xFFFFFFFF80000000)
        {
          if (v190 <= 0x7FFFFFFF)
          {
            v191 = v189;
            *(_DWORD *)(v189 + 32) = v190;
            v192 = v303;
            Com_Apple_News_Algorithms_Proto_Model_Int32List.init()();
            v193 = swift_bridgeObjectRetain(v191);
            v194 = Com_Apple_News_Algorithms_Proto_Model_Int32List.values.setter(v193);
            Com_Apple_News_Algorithms_Proto_Model_Feature.init()(v194);
            v196 = v304;
            v195 = v305;
            ((void (*)(uint64_t, char *, _QWORD *))v332)(v304, v192, v305);
            Com_Apple_News_Algorithms_Proto_Model_Feature.int32List.setter(v196);
            ((void (*)(char *, _QWORD *))v27)(v192, v195);
            swift_bridgeObjectRelease(v191);
            *(_QWORD *)&v331 = 4 * v327;
            v197 = (_QWORD *)(v326 + 4 * v327);
            *v197 = 0xD000000000000026;
            v197[1] = 0x80000000001A0120;
            v198 = swift_allocObject(v188, 36, 7);
            *(_OWORD *)(v198 + 16) = v310;
            v20 = (int64_t)v316;
            v199 = v316[11];
            v330 = v27;
            v27 = v317;
            *(_DWORD *)(v198 + 32) = v317[v199];
            Com_Apple_News_Algorithms_Proto_Model_Int32List.init()();
            v200 = swift_bridgeObjectRetain(v198);
            v201 = Com_Apple_News_Algorithms_Proto_Model_Int32List.values.setter(v200);
            Com_Apple_News_Algorithms_Proto_Model_Feature.init()(v201);
            ((void (*)(uint64_t, char *, _QWORD *))v332)(v196, v192, v195);
            Com_Apple_News_Algorithms_Proto_Model_Feature.int32List.setter(v196);
            ((void (*)(char *, _QWORD *))v330)(v192, v195);
            swift_bridgeObjectRelease(v198);
            v202 = (_QWORD *)(v326 + v331 + v327);
            *v202 = 0xD000000000000027;
            v202[1] = 0x80000000001A0150;
            v16 = *(_QWORD *)&v27[*(int *)(v20 + 48)];
            v53 = *(_QWORD *)(v16 + 16);
            v2 = (uint64_t)_swiftEmptyArrayStorage;
            if (v53)
            {
              v325 = (uint64_t)v202;
              v336[0] = (uint64_t)_swiftEmptyArrayStorage;
              swift_bridgeObjectRetain(v16);
              sub_340F4(0, v53, 0);
              v2 = v336[0];
              v203 = sub_EDD8C(v16);
              v27 = v204;
              v206 = v205 & 1;
              v330 = (char *)(v16 + 56);
              do
              {
                if (v203 < 0 || v203 >= 1 << *(_BYTE *)(v16 + 32))
                  goto LABEL_217;
                if (((*(_QWORD *)&v330[((unint64_t)v203 >> 3) & 0xFFFFFFFFFFFFF8] >> v203) & 1) == 0)
                  goto LABEL_218;
                if (*(_DWORD *)(v16 + 36) != (_DWORD)v27)
                  goto LABEL_219;
                LODWORD(v331) = v206;
                v332 = v53;
                v335[0] = *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * v203);
                v207 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
                v20 = v208;
                v336[0] = v2;
                v210 = *(_QWORD *)(v2 + 16);
                v209 = *(_QWORD *)(v2 + 24);
                if (v210 >= v209 >> 1)
                {
                  sub_340F4(v209 > 1, v210 + 1, 1);
                  v2 = v336[0];
                }
                *(_QWORD *)(v2 + 16) = v210 + 1;
                v211 = v2 + 16 * v210;
                *(_QWORD *)(v211 + 32) = v207;
                *(_QWORD *)(v211 + 40) = v20;
                v212 = sub_EDE30(v203, v27, v331 & 1, v16);
                v203 = v212;
                v27 = (char *)v213;
                v206 = v214 & 1;
                v53 = v332 - 1;
              }
              while (v332 != 1);
              sub_41814(v212, v213, v206);
              swift_bridgeObjectRelease(v16);
              v202 = (_QWORD *)v325;
            }
            static Com_Apple_News_Algorithms_Proto_Model_Feature.fromStrings(_:)(v2, (uint64_t)v202 + *(int *)(v302 + 48));
            v215 = swift_bridgeObjectRelease(v2);
            v216 = (_QWORD *)(v326 + 6 * v327);
            *v216 = 0xD000000000000021;
            v216[1] = 0x80000000001A0180;
            v2 = (uint64_t)_swiftEmptyArrayStorage;
            v217 = v318;
            v20 = v324;
            if (v324)
            {
              v305 = v216;
              v335[0] = _swiftEmptyArrayStorage;
              v44 = v335;
              sub_34200(0, v324 & ~(v324 >> 63), 0);
              if ((v20 & 0x8000000000000000) == 0)
              {
                v218 = 0;
                v2 = v335[0];
                v219 = 1;
                v220 = v300;
                while (1)
                {
                  if (v220 >= v328 || v218 >= v20)
                    goto LABEL_220;
                  v215 = (uint64_t)memcpy(v336, (const void *)(v329 + 552 * v220), 0x221uLL);
                  v221 = 0.0;
                  v332 = v336[16];
                  if ((unint64_t)v336[16] >> 1 != 0xFFFFFFFF)
                    break;
LABEL_191:
                  v335[0] = v2;
                  v257 = *(_QWORD *)(v2 + 16);
                  v256 = *(_QWORD *)(v2 + 24);
                  v16 = v257 + 1;
                  if (v257 >= v256 >> 1)
                  {
                    v215 = sub_34200(v256 > 1, v257 + 1, 1);
                    v2 = v335[0];
                  }
                  v258 = v221;
                  *(_QWORD *)(v2 + 16) = v16;
                  *(float *)(v2 + 4 * v257 + 32) = v258;
                  v54 = __OFADD__(v220++, 1);
                  if (v54)
                    goto LABEL_221;
                  if (v219 == v20)
                    goto LABEL_198;
                  v218 = v219;
                  v54 = __OFADD__(v219++, 1);
                  if (v54)
                    goto LABEL_222;
                }
                v319 = v219;
                v223 = v336[10];
                v222 = v336[11];
                v225 = v336[12];
                v224 = v336[13];
                v227 = v336[14];
                v226 = v336[15];
                v330 = (char *)v336[17];
                *(_QWORD *)&v331 = v336[18];
                v326 = v336[13];
                v327 = v336[12];
                v325 = v336[14];
                v321 = v2;
                v322 = v336[10];
                v320 = v336[11];
                if (v332 >> 62 != 3)
                {
                  v317 = (char *)v220;
                  v231 = v336[11];
                  v232 = sub_5EDC(&qword_1F12B0);
                  v233 = swift_allocObject(v232, 88, 7);
                  v222 = v231;
                  v227 = v325;
                  v224 = v326;
                  v225 = v327;
                  v229 = v233;
                  *(_OWORD *)(v233 + 16) = v310;
                  *(_QWORD *)(v233 + 32) = v223;
                  *(_QWORD *)(v233 + 40) = v231;
                  *(_QWORD *)(v233 + 48) = v225;
                  *(_QWORD *)(v233 + 56) = v224;
                  *(_QWORD *)(v233 + 64) = v227;
                  *(_QWORD *)(v233 + 72) = v226;
                  v230 = (int *)v226;
                  v228 = 1;
                  *(_BYTE *)(v233 + 80) = v332 & 1;
                  goto LABEL_176;
                }
                v228 = *(_QWORD *)(v336[10] + 16);
                if (v228)
                {
                  v317 = (char *)v220;
                  v229 = v336[10];
                  v230 = (int *)v336[15];
LABEL_176:
                  v234 = v222;
                  v316 = v230;
                  sub_61A8(v223, v222, v225, v224, v227, (uint64_t)v230, v332);
                  v235 = v234;
                  v236 = v316;
                  sub_61A8(v223, v235, v225, v224, v227, (uint64_t)v316, v332);
                  sub_6100(v336);
                  swift_bridgeObjectRetain(v229);
                  v237 = v229;
                  v238 = (double *)(v229 + 80);
                  v239 = _swiftEmptyArrayStorage;
                  v240 = (uint64_t)v236;
                  do
                  {
                    if ((*(_BYTE *)v238 & 1) == 0)
                    {
                      v241 = *(v238 - 2);
                      v242 = exp2(-*(v238 - 1) / *(v238 - 3));
                      if ((swift_isUniquelyReferenced_nonNull_native(v239) & 1) == 0)
                        v239 = sub_2FDB4(0, v239[2] + 1, 1, v239);
                      v244 = v239[2];
                      v243 = v239[3];
                      if (v244 >= v243 >> 1)
                        v239 = sub_2FDB4((_QWORD *)(v243 > 1), v244 + 1, 1, v239);
                      v239[2] = v244 + 1;
                      *(double *)&v239[v244 + 4] = v241 * v242;
                    }
                    v238 += 7;
                    --v228;
                  }
                  while (v228);
                  v245 = v237;
                  swift_bridgeObjectRelease(v237);
                  v2 = v321;
                  v246 = v322;
                  v220 = (uint64_t)v317;
                  v247 = v239[2];
                  if (v247)
                  {
LABEL_185:
                    v248 = (double *)(v239 + 4);
                    v221 = 0.0;
                    do
                    {
                      v249 = *v248++;
                      v221 = v221 + v249;
                      --v247;
                    }
                    while (v247);
                    swift_bridgeObjectRelease(v245);
                    goto LABEL_190;
                  }
                }
                else
                {
                  v250 = v336[11];
                  v251 = v336[13];
                  v252 = v336[14];
                  v240 = v336[15];
                  v253 = v332;
                  sub_61A8(v336[10], v336[11], v336[12], v336[13], v336[14], v336[15], v332);
                  v254 = v225;
                  v246 = v322;
                  v255 = v253;
                  v2 = v321;
                  sub_61A8(v322, v250, v254, v251, v252, v240, v255);
                  sub_6100(v336);
                  v245 = v246;
                  v239 = _swiftEmptyArrayStorage;
                  v247 = _swiftEmptyArrayStorage[2];
                  if (v247)
                    goto LABEL_185;
                }
                swift_bridgeObjectRelease(v245);
                v221 = 0.0;
LABEL_190:
                swift_bridgeObjectRelease(v239);
                sub_62CC(v246, v320, v327, v326, v325, v240, v332);
                v215 = (uint64_t)sub_6228(v336);
                v217 = v318;
                v219 = v319;
                v20 = v324;
                goto LABEL_191;
              }
LABEL_233:
              __break(1u);
LABEL_234:
              v281 = v295;
              swift_unknownObjectRelease(v295);
              v280 = v294;
LABEL_200:
              v282 = sub_37EB4(v281, v329, v300, v280);
              swift_release(v53);
              v284 = v312;
              v283 = v313;
            }
            else
            {
LABEL_198:
              v259 = v306;
              Com_Apple_News_Algorithms_Proto_Model_FloatList.init()(v215);
              v260 = swift_bridgeObjectRetain(v2);
              v261 = v2;
              v262 = Com_Apple_News_Algorithms_Proto_Model_FloatList.values.setter(v260);
              Com_Apple_News_Algorithms_Proto_Model_Feature.init()(v262);
              v263 = v307;
              v264 = v308;
              v265 = v297;
              (*(void (**)(char *, char *, uint64_t))(v308 + 16))(v307, v259, v297);
              Com_Apple_News_Algorithms_Proto_Model_Feature.floatList.setter(v263);
              (*(void (**)(char *, uint64_t))(v264 + 8))(v259, v265);
              swift_bridgeObjectRelease(v261);
              v266 = sub_52F64(v301);
              v267 = v323;
              v268 = sub_12B4CC((uint64_t)v323, 0xD000000000000016, 0x80000000001A01B0);
              swift_bridgeObjectRelease(v267);
              v269 = type metadata accessor for Com_Apple_News_Algorithms_Proto_Model_Feature(0);
              v270 = + infix<A, B>(_:_:)(v266, v268, &type metadata for String, v269, &protocol witness table for String);
              swift_bridgeObjectRelease(v266);
              swift_bridgeObjectRelease(v268);
              v271 = sub_1791D4(v270);
              v272 = type metadata accessor for Features(0);
              swift_allocObject(v272, *(unsigned int *)(v272 + 48), *(unsigned __int16 *)(v272 + 52));
              v53 = Features.init(featureMap:)(v271);
              swift_bridgeObjectRelease(v270);
              v273 = sub_5EDC(&qword_1F1078);
              v274 = swift_allocObject(v273, 80, 7);
              *(_OWORD *)(v274 + 16) = xmmword_18CBA0;
              v275 = v309;
              *(_QWORD *)(v274 + 32) = v217;
              *(_QWORD *)(v274 + 40) = v275;
              v276 = v314;
              v277 = v315;
              *(_QWORD *)(v274 + 48) = v312;
              *(_QWORD *)(v274 + 56) = v276;
              *(_QWORD *)(v274 + 64) = v313;
              *(_QWORD *)(v274 + 72) = v277;
              v278 = type metadata accessor for Request(0);
              swift_allocObject(v278, *(unsigned int *)(v278 + 48), *(unsigned __int16 *)(v278 + 52));
              swift_bridgeObjectRetain(v276);
              swift_bridgeObjectRetain(v275);
              swift_bridgeObjectRetain(v277);
              v279 = swift_retain(v53);
              v44 = (_QWORD *)Request.init(features:outputs:)(v279, v274);
              v280 = v294;
              if ((v294 & 1) == 0)
              {
                v281 = v295;
                swift_unknownObjectRetain(v295);
                v27 = v296;
                goto LABEL_200;
              }
              v285 = type metadata accessor for __ContiguousArrayStorageBase(0);
              v286 = swift_unknownObjectRetain_n(v295, 3);
              v287 = (_QWORD *)swift_dynamicCastClass(v286, v285);
              v27 = v296;
              if (!v287)
              {
                swift_unknownObjectRelease(v295);
                v287 = _swiftEmptyArrayStorage;
              }
              v288 = v287[2];
              swift_release(v287);
              if (v288 != v324)
                goto LABEL_234;
              v281 = v295;
              v282 = (_QWORD *)swift_dynamicCastClass(v295, v285);
              swift_release(v53);
              v284 = v312;
              v283 = v313;
              if (!v282)
              {
                swift_unknownObjectRelease(v281);
                v282 = _swiftEmptyArrayStorage;
              }
            }
            result = swift_unknownObjectRelease_n(v281, 2);
            v289 = v298;
            *v298 = v44;
            v289[1] = v282;
            v290 = v309;
            v289[2] = v318;
            v289[3] = v290;
            v291 = v314;
            v289[4] = v284;
            v289[5] = v291;
            v292 = v315;
            v289[6] = v283;
            v289[7] = v292;
            v289[8] = v27;
            return result;
          }
LABEL_232:
          __break(1u);
          goto LABEL_233;
        }
LABEL_231:
        __break(1u);
        goto LABEL_232;
      }
      v55 = v319;
      v57 = v319 + 1;
      if (__OFADD__(v319, 1))
        goto LABEL_225;
    }
    swift_bridgeObjectRetain_n(v60, 2);
    v332 = v60;
    v64 = (uint64_t *)(v60 + 40);
    v20 = (int64_t)_swiftEmptyArrayStorage;
LABEL_22:
    v65 = *(v64 - 1);
    v66 = *v64;
    v67 = sub_5EDC(&qword_1F1090);
    v68 = swift_allocObject(v67, 40, 7);
    *(_OWORD *)(v68 + 16) = v331;
    v69 = (_QWORD *)(v68 + 16);
    *(_QWORD *)(v68 + 32) = v65;
    v70 = *(_QWORD *)(v66 + 16);
    swift_bridgeObjectRetain(v66);
    if (!v70)
      goto LABEL_23;
    v79 = sub_2FA6C((int *)((char *)&dword_0 + 1), v70 + 1, 1, (_QWORD *)v68);
    if (!*(_QWORD *)(v66 + 16))
      break;
    v68 = (uint64_t)v79;
    v80 = v79[2];
    if ((v79[3] >> 1) - v80 < v70)
    {
      __break(1u);
LABEL_236:
      __break(1u);
    }
    v81 = &v79[v80 + 4];
    if (v66 + 32 < (unint64_t)&v81[v70] && (unint64_t)v81 < v66 + 32 + 8 * v70)
      goto LABEL_238;
    v69 = (_QWORD *)(v68 + 16);
    memcpy(v81, (const void *)(v66 + 32), 8 * v70);
    if (__OFADD__(*(_QWORD *)(v68 + 16), v70))
      goto LABEL_236;
    *v69 = *(_QWORD *)(v68 + 16) + v70;
LABEL_23:
    swift_bridgeObjectRelease(v66);
    v16 = *(_QWORD *)(v68 + 16);
    v71 = *(_QWORD *)(v20 + 16);
    v2 = v71 + v16;
    if (!__OFADD__(v71, v16))
    {
      v72 = swift_isUniquelyReferenced_nonNull_native(v20);
      if ((v72 & 1) != 0 && v2 <= *(_QWORD *)(v20 + 24) >> 1)
      {
        if (*v69)
          goto LABEL_32;
      }
      else
      {
        if (v71 <= v2)
          v73 = v71 + v16;
        else
          v73 = v71;
        v20 = (int64_t)sub_2FA6C((_QWORD *)v72, v73, 1, (_QWORD *)v20);
        if (*v69)
        {
LABEL_32:
          v74 = *(_QWORD *)(v20 + 16);
          if ((*(_QWORD *)(v20 + 24) >> 1) - v74 < v16)
            goto LABEL_215;
          v75 = (void *)(v20 + 8 * v74 + 32);
          v76 = v68 + 32 >= (unint64_t)v75 + 8 * v16 || (unint64_t)v75 >= v68 + 32 + 8 * v16;
          if (!v76)
            goto LABEL_238;
          memcpy(v75, (const void *)(v68 + 32), 8 * v16);
          if (v16)
          {
            v77 = *(_QWORD *)(v20 + 16);
            v54 = __OFADD__(v77, v16);
            v78 = v77 + v16;
            if (v54)
              goto LABEL_216;
            *(_QWORD *)(v20 + 16) = v78;
          }
          goto LABEL_21;
        }
      }
      if (v16)
        goto LABEL_208;
LABEL_21:
      swift_bridgeObjectRelease(v68);
      v64 += 2;
      if (!--v63)
      {
        swift_bridgeObjectRelease_n(v332, 2);
        goto LABEL_52;
      }
      goto LABEL_22;
    }
    __break(1u);
LABEL_208:
    __break(1u);
LABEL_209:
    __break(1u);
LABEL_210:
    __break(1u);
LABEL_211:
    __break(1u);
LABEL_212:
    __break(1u);
LABEL_213:
    __break(1u);
LABEL_214:
    __break(1u);
LABEL_215:
    __break(1u);
LABEL_216:
    __break(1u);
LABEL_217:
    __break(1u);
LABEL_218:
    __break(1u);
LABEL_219:
    __break(1u);
LABEL_220:
    __break(1u);
LABEL_221:
    __break(1u);
LABEL_222:
    __break(1u);
LABEL_223:
    __break(1u);
LABEL_224:
    __break(1u);
LABEL_225:
    __break(1u);
LABEL_226:
    __break(1u);
LABEL_227:
    __break(1u);
LABEL_228:
    swift_once(&qword_1F0130, sub_12F928);
  }
  __break(1u);
LABEL_238:
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
LABEL_239:
  LOBYTE(v293) = 2;
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, v293, 936, 0);
  __break(1u);
LABEL_240:
  result = swift_release(v336[0]);
  __break(1u);
  return result;
}

void sub_45388(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a2 + 128);
  if (v2 >> 1 != 0xFFFFFFFF)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x456A4);
}

_QWORD *sub_456C8(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  char v26;
  unint64_t v27;
  unsigned __int8 v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned int v38;
  unsigned __int8 v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned int v43;
  char v44;
  char v45;
  id v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *result;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  int *v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t i;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t j;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105[2];
  uint64_t v106;

  v4 = v3;
  v5 = v2;
  v8 = sub_5EDC(&qword_1F14A0);
  __chkstk_darwin(v8);
  v10 = (char *)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Features.subscript.getter(a1[2], a1[3]);
  v11 = type metadata accessor for Feature(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_49988((uint64_t)v10);
    goto LABEL_70;
  }
  v13 = Feature.string.getter();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
  if (!v13)
  {
LABEL_70:
    if (qword_1F0130 != -1)
      goto LABEL_115;
    goto LABEL_71;
  }
  v103 = a2;
  v104 = v5;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = _swiftEmptyArrayStorage;
  if (v14)
  {
    v16 = v13 + 32;
    v100 = (char *)v105 + 2;
    v101 = (char *)v105 + 3;
    v102 = v13;
    swift_bridgeObjectRetain(v13);
    v17 = 0;
    while (1)
    {
      v18 = (uint64_t *)(v16 + 16 * v17);
      v19 = *v18;
      v20 = v18[1];
      v21 = HIBYTE(v20) & 0xF;
      v22 = v19 & 0xFFFFFFFFFFFFLL;
      if ((v20 & 0x2000000000000000) != 0)
        v23 = HIBYTE(v20) & 0xF;
      else
        v23 = v19 & 0xFFFFFFFFFFFFLL;
      if (v23)
      {
        if ((v20 & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRetain(v20);
          v27 = sub_3A9A0(v19, v20, 10);
          v45 = v44;
          swift_bridgeObjectRelease(v20);
          if ((v45 & 1) == 0)
            goto LABEL_43;
        }
        else if ((v20 & 0x2000000000000000) != 0)
        {
          v105[0] = v19;
          v105[1] = v20 & 0xFFFFFFFFFFFFFFLL;
          if (v19 == 43)
          {
            if (!v21)
            {
              __break(1u);
LABEL_114:
              __break(1u);
LABEL_115:
              swift_once(&qword_1F0130, sub_12F928);
LABEL_71:
              v46 = (id)qword_1F6208;
              v47 = static os_log_type_t.error.getter();
              v48 = _swiftEmptyArrayStorage;
              os_log(_:dso:log:type:_:)("Unable to extract books from output", 35, 2, &dword_0, v46, v47, _swiftEmptyArrayStorage);
LABEL_72:

              return v48;
            }
            if (v21 != 1 && (BYTE1(v19) - 48) <= 9u)
            {
              v27 = (BYTE1(v19) - 48);
              if (v21 == 2)
                goto LABEL_43;
              if ((BYTE2(v19) - 48) <= 9u)
              {
                v27 = 10 * (BYTE1(v19) - 48) + (BYTE2(v19) - 48);
                v31 = v21 - 3;
                if (v21 != 3)
                {
                  v32 = (unsigned __int8 *)v101;
                  while (1)
                  {
                    v33 = *v32 - 48;
                    if (v33 > 9)
                      goto LABEL_7;
                    if (!is_mul_ok(v27, 0xAuLL))
                      goto LABEL_7;
                    v29 = __CFADD__(10 * v27, v33);
                    v27 = 10 * v27 + v33;
                    if (v29)
                      goto LABEL_7;
                    ++v32;
                    if (!--v31)
                      goto LABEL_43;
                  }
                }
                goto LABEL_43;
              }
            }
          }
          else if (v19 == 45)
          {
            if (!v21)
              goto LABEL_114;
            if (v21 != 1)
            {
              v28 = BYTE1(v19) - 48;
              if ((BYTE1(v19) - 48) <= 9u)
              {
                v29 = v28 == 0;
                v30 = -(uint64_t)v28;
                if (v29)
                {
                  if (v21 == 2)
                  {
                    v27 = v30;
                    goto LABEL_43;
                  }
                  v39 = BYTE2(v19) - 48;
                  if ((BYTE2(v19) - 48) <= 9u && is_mul_ok(v30, 0xAuLL))
                  {
                    v40 = 10 * v30;
                    v27 = v40 - v39;
                    if (v40 >= v39)
                    {
                      v41 = v21 - 3;
                      if (v21 != 3)
                      {
                        v42 = (unsigned __int8 *)v101;
                        while (1)
                        {
                          v43 = *v42 - 48;
                          if (v43 > 9)
                            goto LABEL_7;
                          if (!is_mul_ok(v27, 0xAuLL))
                            goto LABEL_7;
                          v29 = 10 * v27 >= v43;
                          v27 = 10 * v27 - v43;
                          if (!v29)
                            goto LABEL_7;
                          ++v42;
                          if (!--v41)
                            goto LABEL_43;
                        }
                      }
                      goto LABEL_43;
                    }
                  }
                }
              }
            }
          }
          else if (v21 && (v19 - 48) <= 9u)
          {
            v27 = (v19 - 48);
            if (v21 == 1)
              goto LABEL_43;
            if ((BYTE1(v19) - 48) <= 9u)
            {
              v27 = 10 * (v19 - 48) + (BYTE1(v19) - 48);
              v36 = v21 - 2;
              if (v21 != 2)
              {
                v37 = (unsigned __int8 *)v100;
                while (1)
                {
                  v38 = *v37 - 48;
                  if (v38 > 9)
                    goto LABEL_7;
                  if (!is_mul_ok(v27, 0xAuLL))
                    goto LABEL_7;
                  v29 = __CFADD__(10 * v27, v38);
                  v27 = 10 * v27 + v38;
                  if (v29)
                    goto LABEL_7;
                  ++v37;
                  if (!--v36)
                    goto LABEL_43;
                }
              }
              goto LABEL_43;
            }
          }
        }
        else
        {
          if ((v19 & 0x1000000000000000) != 0)
            v24 = (unsigned __int8 *)((v20 & 0xFFFFFFFFFFFFFFFLL) + 32);
          else
            v24 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v19, v20);
          v25 = sub_3A98C(v24, v22, 10);
          if ((v26 & 1) == 0)
          {
            v27 = (unint64_t)v25;
LABEL_43:
            if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
              v15 = sub_2FA6C(0, v15[2] + 1, 1, v15);
            v35 = v15[2];
            v34 = v15[3];
            if (v35 >= v34 >> 1)
              v15 = sub_2FA6C((_QWORD *)(v34 > 1), v35 + 1, 1, v15);
            v15[2] = v35 + 1;
            v15[v35 + 4] = v27;
          }
        }
      }
LABEL_7:
      if (++v17 == v14)
      {
        v13 = v102;
        swift_bridgeObjectRelease(v102);
        break;
      }
    }
  }
  swift_bridgeObjectRelease(v13);
  v50 = sub_178C18(a1[6], a1[7]);
  v51 = v104;
  if (!v50)
  {
    swift_bridgeObjectRelease(v15);
    if (qword_1F0130 != -1)
      swift_once(&qword_1F0130, sub_12F928);
    v46 = (id)qword_1F6208;
    v68 = static os_log_type_t.error.getter();
    v48 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:type:_:)("Unable to extract book fetch scores from output", 47, 2, &dword_0, v46, v68, _swiftEmptyArrayStorage);
    goto LABEL_72;
  }
  v52 = (uint64_t)v50;
  v53 = sub_178C18(a1[4], a1[5]);
  if (!v53)
  {
    swift_bridgeObjectRelease(v52);
    swift_bridgeObjectRelease(v15);
    if (qword_1F0130 != -1)
      swift_once(&qword_1F0130, sub_12F928);
    v46 = (id)qword_1F6208;
    v69 = static os_log_type_t.error.getter();
    v48 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:type:_:)("Unable to extract book scores from output", 41, 2, &dword_0, v46, v69, _swiftEmptyArrayStorage);
    goto LABEL_72;
  }
  v54 = v53;
  v55 = v53[2];
  if (v55 != v15[2])
  {
    swift_bridgeObjectRelease(v53);
    swift_bridgeObjectRelease(v52);
    swift_bridgeObjectRelease(v15);
    if (qword_1F0130 != -1)
      swift_once(&qword_1F0130, sub_12F928);
    v46 = (id)qword_1F6208;
    v70 = static os_log_type_t.error.getter();
    v48 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:type:_:)("Mismatch on book count and scores", 33, 2, &dword_0, v46, v70, _swiftEmptyArrayStorage);
    goto LABEL_72;
  }
  if (*(_QWORD *)(v52 + 16) != v55)
  {
    swift_bridgeObjectRelease(v53);
    swift_bridgeObjectRelease(v52);
    swift_bridgeObjectRelease(v15);
    if (qword_1F0130 != -1)
      swift_once(&qword_1F0130, sub_12F928);
    v46 = (id)qword_1F6208;
    v71 = static os_log_type_t.error.getter();
    v48 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:type:_:)("Mismatch on book count and fetch scores", 39, 2, &dword_0, v46, v71, _swiftEmptyArrayStorage);
    goto LABEL_72;
  }
  v56 = v4;
  v57 = sub_46188((uint64_t)v15, (uint64_t)v53, v52);
  swift_bridgeObjectRelease(v52);
  swift_bridgeObjectRelease(v54);
  swift_bridgeObjectRelease(v15);
  v58 = v51 + *(int *)(type metadata accessor for SeedBookRecommendationWork(0) + 20);
  v59 = (int *)type metadata accessor for SeedBasedRecommendationRequest(0);
  v60 = *(_BYTE *)(v58 + v59[8]);
  v61 = *(_QWORD *)(v58 + v59[12]);
  v102 = (uint64_t)v59;
  v103 = v58;
  v62 = *(_QWORD *)(v58 + v59[5]);
  swift_bridgeObjectRetain(v61);
  v63 = swift_bridgeObjectRetain(v62);
  v64 = sub_43568(v63);
  swift_bridgeObjectRelease(v62);
  v105[0] = v61;
  v65 = v64[2];
  if (v65)
  {
    for (i = 0; i != v65; ++i)
    {
      v67 = v64[i + 4];
      sub_1628D4(&v106, v67);
    }
    swift_bridgeObjectRelease(v64);
    v61 = v105[0];
  }
  else
  {
    swift_bridgeObjectRelease(v64);
  }
  v72 = a1[8];
  v73 = v104;
  if (v72)
  {
    v74 = sub_4A23C(0, v57[2], v72, a1[8], (uint64_t)v57);
  }
  else
  {
    v75 = sub_5EDC(&qword_1F1380);
    v74 = (_QWORD *)swift_allocObject(v75, 64, 7);
    *((_OWORD *)v74 + 1) = xmmword_1875E0;
    v74[4] = _swiftEmptyArrayStorage;
    v74[5] = &_swiftEmptyArrayStorage[4];
    *((_OWORD *)v74 + 3) = xmmword_18CB70;
  }
  v76 = swift_bridgeObjectRelease(v57);
  v77 = a1[1];
  __chkstk_darwin(v76);
  *((_BYTE *)&v99 - 32) = v60;
  *(&v99 - 3) = v73;
  *(&v99 - 2) = v61;
  swift_bridgeObjectRetain(v77);
  v78 = sub_4A4C4((uint64_t)v74, v77, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *))sub_4A4B8);
  swift_bridgeObjectRelease(v61);
  swift_bridgeObjectRelease(v77);
  swift_bridgeObjectRelease(v74);
  v105[0] = (uint64_t)_swiftEmptyArrayStorage;
  v79 = *(_QWORD *)(v78 + 16);
  if (v79)
  {
    swift_bridgeObjectRetain(v78);
    for (j = 0; j != v79; ++j)
    {
      v81 = *(_QWORD *)(v78 + 8 * j + 32);
      v82 = swift_bridgeObjectRetain(v81);
      sub_10F3EC(v82);
    }
    swift_bridgeObjectRelease_n(v78, 2);
    v83 = (_QWORD *)v105[0];
  }
  else
  {
    swift_bridgeObjectRelease(v78);
    v83 = _swiftEmptyArrayStorage;
  }
  v105[0] = (uint64_t)v83;
  swift_bridgeObjectRetain(v83);
  sub_46AD0(v105, sub_D0A90, sub_47EC4);
  if (!v56)
  {
    swift_bridgeObjectRelease(v83);
    v84 = sub_5EDC(&qword_1F1378);
    v85 = sub_4A930();
    v86 = Sequence.unique<A>(by:)(sub_468D4, 0, v84, &type metadata for UInt64, v85, &protocol witness table for UInt64);
    swift_bridgeObjectRelease(v105[0]);
    v87 = sub_2CCAC(*(_QWORD *)(v103 + *(int *)(v102 + 56)), v86);
    v89 = v88;
    v91 = v90;
    v93 = v92;
    if ((v92 & 1) != 0)
    {
      v94 = type metadata accessor for __ContiguousArrayStorageBase(0);
      v95 = swift_unknownObjectRetain_n(v87, 2);
      v96 = (_QWORD *)swift_dynamicCastClass(v95, v94);
      if (!v96)
      {
        swift_unknownObjectRelease(v87);
        v96 = _swiftEmptyArrayStorage;
      }
      v97 = v96[2];
      v98 = swift_release(v96);
      if (__OFSUB__(v93 >> 1, v91))
      {
        __break(1u);
      }
      else
      {
        v98 = v87;
        if (v97 == (v93 >> 1) - v91)
        {
          v48 = (_QWORD *)swift_dynamicCastClass(v87, v94);
          swift_unknownObjectRelease(v87);
          if (!v48)
          {
            swift_unknownObjectRelease(v87);
            return _swiftEmptyArrayStorage;
          }
          return v48;
        }
      }
      swift_unknownObjectRelease(v98);
    }
    v48 = sub_382A8(v87, v89, v91, v93);
    swift_unknownObjectRelease(v87);
    return v48;
  }
  result = (_QWORD *)swift_release(v105[0]);
  __break(1u);
  return result;
}

_QWORD *sub_46188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v40;

  v5 = *(_QWORD *)(a2 + 16);
  v38 = v5;
  v37 = *(_QWORD *)(a3 + 16);
  if (v37 < v5)
    v5 = *(_QWORD *)(a3 + 16);
  if (v5 >= *(_QWORD *)(a1 + 16))
    v6 = *(_QWORD *)(a1 + 16);
  else
    v6 = v5;
  result = (_QWORD *)sub_342C8(0, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    v40 = a2;
    if (v6)
    {
      v8 = a1;
      v9 = (uint64_t *)(a1 + 32);
      v10 = (uint64_t *)(a2 + 32);
      v11 = (uint64_t *)(a3 + 32);
      swift_bridgeObjectRetain(a1);
      swift_bridgeObjectRetain(a2);
      result = (_QWORD *)swift_bridgeObjectRetain(a3);
      v13 = v37;
      v12 = v38;
      v14 = v38;
      v15 = v37;
      v16 = v6;
      v17 = v6;
      while (v14)
      {
        if (!v15)
          goto LABEL_34;
        v18 = *v9;
        v19 = *v10;
        v20 = *v11;
        v22 = _swiftEmptyArrayStorage[2];
        v21 = _swiftEmptyArrayStorage[3];
        if (v22 >= v21 >> 1)
        {
          v34 = *v9;
          v35 = v17;
          result = (_QWORD *)sub_342C8(v21 > 1, v22 + 1, 1);
          v18 = v34;
          v17 = v35;
          v13 = v37;
          v12 = v38;
          v8 = a1;
        }
        _swiftEmptyArrayStorage[2] = v22 + 1;
        v23 = &_swiftEmptyArrayStorage[3 * v22];
        v23[4] = v18;
        ++v11;
        ++v10;
        v23[5] = v19;
        v23[6] = v20;
        --v15;
        ++v9;
        --v14;
        if (!--v16)
          goto LABEL_16;
      }
      __break(1u);
LABEL_34:
      __break(1u);
    }
    else
    {
      v8 = a1;
      swift_bridgeObjectRetain(a1);
      swift_bridgeObjectRetain(a2);
      result = (_QWORD *)swift_bridgeObjectRetain(a3);
      v13 = v37;
      v12 = v38;
      v17 = 0;
LABEL_16:
      v24 = *(_QWORD *)(v8 + 16);
      if (v17 == v24)
      {
LABEL_17:
        swift_bridgeObjectRelease(a3);
        swift_bridgeObjectRelease(v40);
        swift_bridgeObjectRelease(v8);
        return _swiftEmptyArrayStorage;
      }
      v25 = v8 + 32;
      if (v17 <= v12)
        v26 = v12;
      else
        v26 = v17;
      if (v17 <= v13)
        v27 = v13;
      else
        v27 = v17;
      while (v17 < v24)
      {
        if (v12 == v17)
          goto LABEL_17;
        if (v26 == v17)
          goto LABEL_36;
        if (v13 == v17)
          goto LABEL_17;
        if (v27 == v17)
          goto LABEL_37;
        v28 = *(_QWORD *)(v25 + 8 * v17);
        v29 = *(_QWORD *)(v40 + 32 + 8 * v17);
        v30 = *(_QWORD *)(a3 + 32 + 8 * v17);
        v32 = _swiftEmptyArrayStorage[2];
        v31 = _swiftEmptyArrayStorage[3];
        if (v32 >= v31 >> 1)
        {
          v36 = v17;
          result = (_QWORD *)sub_342C8(v31 > 1, v32 + 1, 1);
          v17 = v36;
          v13 = v37;
          v12 = v38;
          v8 = a1;
        }
        ++v17;
        _swiftEmptyArrayStorage[2] = v32 + 1;
        v33 = &_swiftEmptyArrayStorage[3 * v32];
        v33[4] = v28;
        v33[5] = v29;
        v33[6] = v30;
        v24 = *(_QWORD *)(v8 + 16);
        if (v17 == v24)
          goto LABEL_17;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_4643C(int a1, uint64_t a2, uint64_t a3, unint64_t a4, void *__src, char a6, uint64_t a7, uint64_t a8)
{
  unint64_t result;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  double *v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  double v55;
  double v57;
  char v58;
  uint64_t v59;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  _BYTE v71[48];
  _QWORD *v72;
  _QWORD __dst[70];

  result = (unint64_t)memcpy(__dst, __src, 0x221uLL);
  if (LOBYTE(__dst[68]) == 12)
    return (unint64_t)_swiftEmptyArrayStorage;
  v63 = a7;
  v16 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_39;
  v17 = _swiftEmptyArrayStorage;
  if (!v16)
  {
    v35 = _swiftEmptyArrayStorage;
LABEL_20:
    v39 = v63 + *(int *)(type metadata accessor for SeedBookRecommendationWork(0) + 20);
    v40 = type metadata accessor for SeedBasedRecommendationRequest(0);
    v41 = sub_2CCAC(*(_QWORD *)(v39 + *(int *)(v40 + 52)), v35);
    v43 = v42;
    v45 = v44;
    v47 = v46;
    swift_bridgeObjectRetain(a8);
    v48 = sub_49FEC(v43, v45, v47, a8);
    swift_unknownObjectRelease(v41);
    swift_bridgeObjectRelease(a8);
    v49 = v48[2];
    v62 = v48;
    if (v49)
    {
      v50 = (double *)(v48 + 13);
      v15 = _swiftEmptyArrayStorage;
      do
      {
        v54 = *((_QWORD *)v50 - 1);
        v55 = *v50;
        if (*v50 > 0.0 && v54 != 0)
        {
          v57 = *(v50 - 2);
          if (v57 > 0.0)
          {
            v70 = *((_QWORD *)v50 - 9);
            v69 = *((_BYTE *)v50 - 64);
            v67 = *((_QWORD *)v50 - 7);
            v66 = *((_BYTE *)v50 - 48);
            v58 = *((_BYTE *)v50 - 32);
            v59 = *((_QWORD *)v50 - 3);
            v64 = *((_QWORD *)v50 - 5);
            sub_40554(v64, v58);
            swift_bridgeObjectRetain(v54);
            swift_bridgeObjectRetain(v59);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v15);
            v72 = v15;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_342E4(0, v15[2] + 1, 1);
              v15 = v72;
            }
            v52 = v15[2];
            v51 = v15[3];
            if (v52 >= v51 >> 1)
            {
              sub_342E4(v51 > 1, v52 + 1, 1);
              v15 = v72;
            }
            v15[2] = v52 + 1;
            v53 = &v15[10 * v52];
            v53[4] = v70;
            *((_BYTE *)v53 + 40) = v69;
            v53[6] = v67;
            *((_BYTE *)v53 + 56) = v66;
            v53[8] = v64;
            *((_BYTE *)v53 + 72) = v58;
            v53[10] = v59;
            *((double *)v53 + 11) = v57;
            v53[12] = v54;
            *((double *)v53 + 13) = v55;
          }
        }
        v50 += 10;
        --v49;
      }
      while (v49);
    }
    else
    {
      v15 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease(v62);
    return (unint64_t)v15;
  }
  v72 = _swiftEmptyArrayStorage;
  result = sub_342E4(0, v16 & ~(v16 >> 63), 0);
  if ((v16 & 0x8000000000000000) == 0)
  {
    v61 = a8;
    v65 = a6 & 1;
    result = sub_5EDC(&qword_1F14B8);
    if (a3 <= (uint64_t)(a4 >> 1))
      v18 = a4 >> 1;
    else
      v18 = a3;
    v19 = v18 - a3;
    v20 = (uint64_t *)(a2 + 24 * a3 + 16);
    while (v19)
    {
      v21 = v17;
      v22 = *(v20 - 2);
      v23 = *(v20 - 1);
      v68 = *v20;
      v24 = sub_5EDC(&qword_1F1188);
      inited = swift_initStackObject(v24, v71);
      *(_OWORD *)(inited + 16) = xmmword_1875E0;
      *(_BYTE *)(inited + 32) = 0;
      v26 = sub_5EDC(&qword_1F1100);
      v27 = swift_allocObject(v26, 584, 7);
      *(_OWORD *)(v27 + 16) = xmmword_1875E0;
      memcpy((void *)(v27 + 32), __dst, 0x221uLL);
      *(_QWORD *)(inited + 40) = v27;
      v28 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(1);
      sub_6100(__dst);
      v29 = *(_BYTE *)(inited + 32);
      v30 = *(_QWORD *)(inited + 40);
      swift_retain(v28);
      swift_bridgeObjectRetain(v30);
      result = sub_393D0(v29);
      if ((v31 & 1) != 0)
        goto LABEL_37;
      v28[(result >> 6) + 8] |= 1 << result;
      *(_BYTE *)(v28[6] + result) = v29;
      *(_QWORD *)(v28[7] + 8 * result) = v30;
      v32 = v28[2];
      v33 = __OFADD__(v32, 1);
      v34 = v32 + 1;
      if (v33)
        goto LABEL_38;
      v28[2] = v34;
      swift_release(v28);
      swift_bridgeObjectRelease(inited);
      v35 = v72;
      result = swift_isUniquelyReferenced_nonNull_native(v72);
      if ((result & 1) == 0)
      {
        result = sub_342E4(0, v35[2] + 1, 1);
        v35 = v72;
      }
      v37 = v35[2];
      v36 = v35[3];
      if (v37 >= v36 >> 1)
      {
        result = sub_342E4(v36 > 1, v37 + 1, 1);
        v35 = v72;
      }
      v35[2] = v37 + 1;
      v38 = &v35[10 * v37];
      v38[4] = v22;
      *((_BYTE *)v38 + 40) = v65;
      v38[6] = 0;
      *((_BYTE *)v38 + 56) = 1;
      v38[8] = 0;
      *((_BYTE *)v38 + 72) = -1;
      v17 = v21;
      v38[10] = v21;
      v38[11] = v68;
      v38[12] = v28;
      v38[13] = v23;
      --v19;
      v20 += 3;
      if (!--v16)
      {
        a8 = v61;
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_468D4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

unint64_t sub_468E0()
{
  return 0xD000000000000018;
}

__n128 sub_468FC@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[4];
  uint64_t v7;

  sub_436DC(a1, v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_QWORD *)(a2 + 64) = v7;
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

_QWORD *sub_4694C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  _QWORD *result;

  result = sub_456C8(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t PersonalizationMetadataRequest.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_469AC(uint64_t a1)
{
  uint64_t result;

  result = sub_41754((unint64_t *)&qword_1F1478, type metadata accessor for SeedBookRecommendationWork, (uint64_t)&unk_18CC30);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_469E8()
{
  return sub_41754(&qword_1F1480, type metadata accessor for SeedBookRecommendationWork, (uint64_t)&unk_18CBDC);
}

unint64_t sub_46A18()
{
  unint64_t result;

  result = qword_1F1488;
  if (!qword_1F1488)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TabiConfiguration, &type metadata for TabiConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F1488);
  }
  return result;
}

uint64_t sub_46A5C()
{
  return sub_41754((unint64_t *)&qword_1F1490, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

unint64_t sub_46A8C()
{
  unint64_t result;

  result = qword_1F1498;
  if (!qword_1F1498)
  {
    result = swift_getWitnessTable(&unk_18CCB0, &type metadata for SeedBookRecommendationWork.Context);
    atomic_store(result, (unint64_t *)&qword_1F1498);
  }
  return result;
}

uint64_t sub_46AD0(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(_QWORD *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v6 = a2(v6);
  v7 = *(_QWORD *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  result = a3(v9);
  *a1 = v6;
  return result;
}

Swift::Int sub_46B48(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  Swift::Int v12;
  Swift::Int v13;
  int v14;
  Swift::Int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  _QWORD *v29;
  double v30;
  double v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double *v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double *v60;
  _QWORD *v61;
  double v62;
  double v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double *v69;
  double v70;
  double v71;
  char *v72;
  Swift::Int v73;
  Swift::Int v74;
  char *v75;
  Swift::Int v76;
  Swift::Int v77;
  Swift::Int v78;
  char *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double *v91;
  _QWORD *v92;
  double v93;
  double v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  double *v101;
  double v102;
  double v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  double *v127;
  _QWORD *v128;
  double v129;
  double v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  double *v137;
  double v138;
  double v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  Swift::Int v143;
  char *v144;
  char *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  BOOL v157;
  unint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  BOOL v167;
  uint64_t v168;
  char v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  BOOL v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  unint64_t v191;
  char *v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  unint64_t v198;
  char *v199;
  int v200;
  uint64_t v201;
  uint64_t *v202;
  _QWORD *v203;
  Swift::Int v204;
  char *v205;
  Swift::Int v206;
  Swift::Int v207;
  Swift::Int v208;
  char *v209;
  Swift::Int v210;
  Swift::Int v211;
  Swift::Int v212;
  Swift::Int v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  void *v217;
  char *v218;
  void *v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  Swift::Int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  _QWORD v246[69];
  uint64_t __src[69];
  _QWORD __dst[69];
  uint64_t v249[70];

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_213;
    if (v3)
      return sub_486E4(0, v3, 1, a1);
    return result;
  }
  v204 = result;
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_225;
  v208 = v3;
  v202 = a1;
  if (v3 < 2)
  {
    v209 = (char *)&_swiftEmptyArrayStorage[4];
    v203 = _swiftEmptyArrayStorage;
    if (v3 != 1)
    {
      v142 = _swiftEmptyArrayStorage[2];
      v10 = (char *)_swiftEmptyArrayStorage;
LABEL_175:
      if (v142 >= 2)
      {
        v193 = *v202;
        do
        {
          v194 = v142 - 2;
          if (v142 < 2)
            goto LABEL_207;
          if (!v193)
            goto LABEL_224;
          v186 = v10;
          v195 = *(_QWORD *)&v10[16 * v194 + 32];
          v196 = *(_QWORD *)&v10[16 * v142 + 24];
          sub_48DB0((char *)(v193 + 552 * v195), (char *)(v193 + 552 * *(_QWORD *)&v10[16 * v142 + 16]), v193 + 552 * v196, v209);
          if (v1)
            goto LABEL_187;
          if (v196 < v195)
            goto LABEL_209;
          if ((swift_isUniquelyReferenced_nonNull_native(v186) & 1) == 0)
            v186 = sub_4ECA8((uint64_t)v186);
          if (v194 >= *((_QWORD *)v186 + 2))
            goto LABEL_210;
          v197 = &v186[16 * v194 + 32];
          *(_QWORD *)v197 = v195;
          *((_QWORD *)v197 + 1) = v196;
          v198 = *((_QWORD *)v186 + 2);
          if (v142 > v198)
            goto LABEL_211;
          memmove(&v186[16 * v142 + 16], &v186[16 * v142 + 32], 16 * (v198 - v142));
          v10 = v186;
          *((_QWORD *)v186 + 2) = v198 - 1;
          v142 = v198 - 1;
        }
        while (v198 > 2);
      }
      v199 = v10;
LABEL_189:
      swift_bridgeObjectRelease(v199);
      v203[2] = 0;
      return swift_bridgeObjectRelease(v203);
    }
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for SeedBook);
    *(_QWORD *)(v7 + 16) = v6;
    v203 = (_QWORD *)v7;
    v209 = (char *)(v7 + 32);
  }
  v8 = 0;
  v9 = *a1;
  v206 = v3 - 1;
  v201 = *a1 - 552;
  v10 = (char *)_swiftEmptyArrayStorage;
  v11 = v3;
  v214 = *a1;
  while (1)
  {
    v205 = v10;
    v12 = v8 + 1;
    v213 = v8;
    if (v8 + 1 >= v11)
    {
      v15 = v8 + 1;
      goto LABEL_69;
    }
    v13 = v8;
    memcpy(__dst, (const void *)(v9 + 552 * v12), 0x221uLL);
    memcpy(__src, (const void *)(v9 + 552 * v12), 0x221uLL);
    memcpy(v249, (const void *)(v9 + 552 * v13), 0x221uLL);
    memcpy(v246, (const void *)(v9 + 552 * v13), 0x221uLL);
    sub_6100(__dst);
    sub_6100(v249);
    sub_45388((uint64_t)__src, (uint64_t)v246);
    v215 = v14;
    if (v1)
    {
      sub_6228(v249);
      sub_6228(__dst);
      v199 = v205;
      goto LABEL_189;
    }
    sub_6228(v249);
    sub_6228(__dst);
    v15 = v13 + 2;
    v11 = v208;
    if (v13 + 2 < v208)
      break;
LABEL_59:
    if ((v215 & 1) != 0)
      goto LABEL_60;
LABEL_69:
    if (v15 < v11)
    {
      if (__OFSUB__(v15, v213))
        goto LABEL_212;
      if (v15 - v213 < v204)
      {
        v77 = v213 + v204;
        if (__OFADD__(v213, v204))
          goto LABEL_214;
        if (v77 >= v11)
          v77 = v11;
        if (v77 < v213)
        {
LABEL_215:
          __break(1u);
          goto LABEL_216;
        }
        v207 = v77;
        if (v15 != v77)
        {
LABEL_79:
          v211 = v15;
          v78 = v15;
          while (1)
          {
            v79 = (char *)(v9 + 552 * v78);
            memcpy(__dst, v79, 0x221uLL);
            memcpy(v249, v79 - 552, 0x221uLL);
            v80 = v249[16];
            if ((unint64_t)v249[16] >> 1 == 0xFFFFFFFF)
              goto LABEL_217;
            v81 = v249[10];
            v82 = v249[12];
            v83 = v249[13];
            v84 = v249[14];
            v85 = v249[15];
            v244 = v249[18];
            v227 = v249[14];
            v229 = v249[13];
            v223 = v78;
            v225 = v249[15];
            v218 = v79 - 552;
            v220 = v79;
            if ((unint64_t)v249[16] >> 62 == 3)
            {
              v86 = *(_QWORD *)(v249[10] + 16);
              if (!v86)
              {
                v97 = v249[10];
                v104 = v249[11];
                v99 = v249[12];
                v105 = v249[15];
                sub_61A8(v249[10], v249[11], v249[12], v249[13], v249[14], v249[15], v249[16]);
                v106 = v105;
                v98 = v104;
                sub_61A8(v97, v104, v99, v229, v84, v106, v80);
                sub_6100(__dst);
                sub_6100(v249);
                v87 = v97;
                v92 = _swiftEmptyArrayStorage;
                v100 = _swiftEmptyArrayStorage[2];
                if (!v100)
                  goto LABEL_98;
                goto LABEL_94;
              }
              v87 = v249[10];
              v88 = v249[12];
              v89 = v249[11];
            }
            else
            {
              v89 = v249[11];
              v90 = sub_5EDC(&qword_1F12B0);
              v85 = v225;
              v84 = v227;
              v83 = v229;
              v87 = swift_allocObject(v90, 88, 7);
              *(_OWORD *)(v87 + 16) = xmmword_1875E0;
              *(_QWORD *)(v87 + 32) = v81;
              *(_QWORD *)(v87 + 40) = v89;
              *(_QWORD *)(v87 + 48) = v82;
              *(_QWORD *)(v87 + 56) = v229;
              *(_QWORD *)(v87 + 64) = v227;
              *(_QWORD *)(v87 + 72) = v225;
              v88 = v82;
              v86 = 1;
              *(_BYTE *)(v87 + 80) = v80 & 1;
            }
            sub_61A8(v81, v89, v88, v83, v84, v85, v80);
            v241 = v81;
            v235 = v88;
            sub_61A8(v81, v89, v88, v83, v84, v85, v80);
            sub_6100(__dst);
            sub_6100(v249);
            swift_bridgeObjectRetain(v87);
            v91 = (double *)(v87 + 80);
            v92 = _swiftEmptyArrayStorage;
            do
            {
              if ((*(_BYTE *)v91 & 1) == 0)
              {
                v93 = *(v91 - 2);
                v94 = exp2(-*(v91 - 1) / *(v91 - 3));
                if ((swift_isUniquelyReferenced_nonNull_native(v92) & 1) == 0)
                  v92 = sub_2FDB4(0, v92[2] + 1, 1, v92);
                v96 = v92[2];
                v95 = v92[3];
                if (v96 >= v95 >> 1)
                  v92 = sub_2FDB4((_QWORD *)(v95 > 1), v96 + 1, 1, v92);
                v92[2] = v96 + 1;
                *(double *)&v92[v96 + 4] = v93 * v94;
              }
              v91 += 7;
              --v86;
            }
            while (v86);
            swift_bridgeObjectRelease(v87);
            v98 = v89;
            v97 = v241;
            v99 = v235;
            v100 = v92[2];
            if (!v100)
            {
LABEL_98:
              swift_bridgeObjectRelease(v87);
              v102 = 0.0;
              goto LABEL_99;
            }
LABEL_94:
            v101 = (double *)(v92 + 4);
            v102 = 0.0;
            do
            {
              v103 = *v101++;
              v102 = v102 + v103;
              --v100;
            }
            while (v100);
            swift_bridgeObjectRelease(v87);
LABEL_99:
            swift_bridgeObjectRelease(v92);
            v107 = __dst[10];
            v108 = __dst[11];
            v232 = __dst[12];
            v236 = __dst[13];
            v109 = __dst[15];
            v110 = __dst[16];
            v239 = __dst[18];
            v242 = __dst[14];
            v200 = v244;
            sub_62CC(v97, v98, v99, v229, v227, v225, v80);
            if (v110 >> 1 == 0xFFFFFFFF)
              goto LABEL_218;
            v222 = v108;
            if (v110 >> 62 == 3)
            {
              v111 = *(_QWORD *)(v107 + 16);
              if (!v111)
              {
                v134 = v236;
                v133 = v232;
                v135 = v242;
                sub_61A8(v107, v108, v232, v236, v242, v109, v110);
                sub_61A8(v107, v108, v232, v236, v242, v109, v110);
                v126 = v107;
                v128 = _swiftEmptyArrayStorage;
                v136 = _swiftEmptyArrayStorage[2];
                if (v136)
                  goto LABEL_113;
                goto LABEL_117;
              }
              v112 = v107;
              v114 = v232;
              v113 = v236;
              v115 = v108;
              v116 = v107;
              v117 = v110;
              v118 = v109;
              v119 = v242;
            }
            else
            {
              v120 = sub_5EDC(&qword_1F12B0);
              v112 = swift_allocObject(v120, 88, 7);
              *(_OWORD *)(v112 + 16) = xmmword_1875E0;
              *(_QWORD *)(v112 + 32) = v107;
              *(_QWORD *)(v112 + 40) = v108;
              v114 = v232;
              v113 = v236;
              *(_QWORD *)(v112 + 48) = v232;
              *(_QWORD *)(v112 + 56) = v236;
              v115 = v108;
              v116 = v107;
              v117 = v110;
              v118 = v109;
              v119 = v242;
              *(_QWORD *)(v112 + 64) = v242;
              *(_QWORD *)(v112 + 72) = v109;
              v111 = 1;
              *(_BYTE *)(v112 + 80) = v110 & 1;
            }
            v121 = v116;
            v122 = v115;
            v123 = v119;
            v216 = v118;
            v124 = v117;
            sub_61A8(v116, v115, v114, v113, v123, v118, v117);
            v125 = v122;
            v109 = v216;
            v230 = v124;
            sub_61A8(v121, v125, v114, v113, v242, v216, v124);
            swift_bridgeObjectRetain(v112);
            v126 = v112;
            v127 = (double *)(v112 + 80);
            v128 = _swiftEmptyArrayStorage;
            do
            {
              if ((*(_BYTE *)v127 & 1) == 0)
              {
                v129 = *(v127 - 2);
                v130 = exp2(-*(v127 - 1) / *(v127 - 3));
                if ((swift_isUniquelyReferenced_nonNull_native(v128) & 1) == 0)
                  v128 = sub_2FDB4(0, v128[2] + 1, 1, v128);
                v132 = v128[2];
                v131 = v128[3];
                if (v132 >= v131 >> 1)
                  v128 = sub_2FDB4((_QWORD *)(v131 > 1), v132 + 1, 1, v128);
                v128[2] = v132 + 1;
                *(double *)&v128[v132 + 4] = v129 * v130;
              }
              v127 += 7;
              --v111;
            }
            while (v111);
            swift_bridgeObjectRelease(v112);
            v107 = v121;
            v133 = v232;
            v134 = v236;
            v135 = v242;
            v110 = v230;
            v136 = v128[2];
            if (v136)
            {
LABEL_113:
              v137 = (double *)(v128 + 4);
              v138 = 0.0;
              do
              {
                v139 = *v137++;
                v138 = v138 + v139;
                --v136;
              }
              while (v136);
              swift_bridgeObjectRelease(v126);
              goto LABEL_118;
            }
LABEL_117:
            swift_bridgeObjectRelease(v126);
            v138 = 0.0;
LABEL_118:
            swift_bridgeObjectRelease(v128);
            v200 = v239;
            sub_62CC(v107, v222, v133, v134, v135, v109, v110);
            sub_6228(v249);
            sub_6228(__dst);
            v9 = v214;
            if (v102 >= v138)
              goto LABEL_78;
            if (!v214)
              goto LABEL_219;
            v78 = v223 - 1;
            memcpy(__src, v220, 0x221uLL);
            memcpy(v220, v218, 0x228uLL);
            memcpy(v218, __src, 0x221uLL);
            if (v223 - 1 == v213)
            {
LABEL_78:
              v15 = v211 + 1;
              if (v211 + 1 == v207)
              {
                v15 = v207;
                break;
              }
              goto LABEL_79;
            }
          }
        }
      }
    }
    if (v15 < v213)
      goto LABEL_208;
    v212 = v15;
    if ((swift_isUniquelyReferenced_nonNull_native(v205) & 1) != 0)
      v10 = v205;
    else
      v10 = sub_4E4E4(0, *((_QWORD *)v205 + 2) + 1, 1, v205);
    v141 = *((_QWORD *)v10 + 2);
    v140 = *((_QWORD *)v10 + 3);
    v142 = v141 + 1;
    v143 = v213;
    if (v141 >= v140 >> 1)
    {
      v192 = sub_4E4E4((char *)(v140 > 1), v141 + 1, 1, v10);
      v143 = v213;
      v10 = v192;
    }
    *((_QWORD *)v10 + 2) = v142;
    v144 = v10 + 32;
    v145 = &v10[16 * v141 + 32];
    *(_QWORD *)v145 = v143;
    *((_QWORD *)v145 + 1) = v212;
    if (v141)
    {
      while (1)
      {
        v146 = v142 - 1;
        if (v142 >= 4)
        {
          v151 = &v144[16 * v142];
          v152 = *((_QWORD *)v151 - 8);
          v153 = *((_QWORD *)v151 - 7);
          v157 = __OFSUB__(v153, v152);
          v154 = v153 - v152;
          if (v157)
            goto LABEL_196;
          v156 = *((_QWORD *)v151 - 6);
          v155 = *((_QWORD *)v151 - 5);
          v157 = __OFSUB__(v155, v156);
          v149 = v155 - v156;
          v150 = v157;
          if (v157)
            goto LABEL_197;
          v158 = v142 - 2;
          v159 = &v144[16 * v142 - 32];
          v161 = *(_QWORD *)v159;
          v160 = *((_QWORD *)v159 + 1);
          v157 = __OFSUB__(v160, v161);
          v162 = v160 - v161;
          if (v157)
            goto LABEL_199;
          v157 = __OFADD__(v149, v162);
          v163 = v149 + v162;
          if (v157)
            goto LABEL_202;
          if (v163 >= v154)
          {
            v181 = &v144[16 * v146];
            v183 = *(_QWORD *)v181;
            v182 = *((_QWORD *)v181 + 1);
            v157 = __OFSUB__(v182, v183);
            v184 = v182 - v183;
            if (v157)
              goto LABEL_206;
            v174 = v149 < v184;
            goto LABEL_160;
          }
        }
        else
        {
          if (v142 != 3)
          {
            v175 = *((_QWORD *)v10 + 4);
            v176 = *((_QWORD *)v10 + 5);
            v157 = __OFSUB__(v176, v175);
            v168 = v176 - v175;
            v169 = v157;
            goto LABEL_154;
          }
          v148 = *((_QWORD *)v10 + 4);
          v147 = *((_QWORD *)v10 + 5);
          v157 = __OFSUB__(v147, v148);
          v149 = v147 - v148;
          v150 = v157;
        }
        if ((v150 & 1) != 0)
          goto LABEL_198;
        v158 = v142 - 2;
        v164 = &v144[16 * v142 - 32];
        v166 = *(_QWORD *)v164;
        v165 = *((_QWORD *)v164 + 1);
        v167 = __OFSUB__(v165, v166);
        v168 = v165 - v166;
        v169 = v167;
        if (v167)
          goto LABEL_201;
        v170 = &v144[16 * v146];
        v172 = *(_QWORD *)v170;
        v171 = *((_QWORD *)v170 + 1);
        v157 = __OFSUB__(v171, v172);
        v173 = v171 - v172;
        if (v157)
          goto LABEL_204;
        if (__OFADD__(v168, v173))
          goto LABEL_205;
        if (v168 + v173 >= v149)
        {
          v174 = v149 < v173;
LABEL_160:
          if (v174)
            v146 = v158;
          goto LABEL_162;
        }
LABEL_154:
        if ((v169 & 1) != 0)
          goto LABEL_200;
        v177 = &v144[16 * v146];
        v179 = *(_QWORD *)v177;
        v178 = *((_QWORD *)v177 + 1);
        v157 = __OFSUB__(v178, v179);
        v180 = v178 - v179;
        if (v157)
          goto LABEL_203;
        if (v180 < v168)
          goto LABEL_171;
LABEL_162:
        v185 = v146 - 1;
        if (v146 - 1 >= v142)
        {
          __break(1u);
LABEL_193:
          __break(1u);
LABEL_194:
          __break(1u);
LABEL_195:
          __break(1u);
LABEL_196:
          __break(1u);
LABEL_197:
          __break(1u);
LABEL_198:
          __break(1u);
LABEL_199:
          __break(1u);
LABEL_200:
          __break(1u);
LABEL_201:
          __break(1u);
LABEL_202:
          __break(1u);
LABEL_203:
          __break(1u);
LABEL_204:
          __break(1u);
LABEL_205:
          __break(1u);
LABEL_206:
          __break(1u);
LABEL_207:
          __break(1u);
LABEL_208:
          __break(1u);
LABEL_209:
          __break(1u);
LABEL_210:
          __break(1u);
LABEL_211:
          __break(1u);
LABEL_212:
          __break(1u);
LABEL_213:
          __break(1u);
LABEL_214:
          __break(1u);
          goto LABEL_215;
        }
        if (!v9)
          goto LABEL_220;
        v186 = v10;
        v187 = &v144[16 * v185];
        v188 = *(_QWORD *)v187;
        v189 = &v144[16 * v146];
        v190 = *((_QWORD *)v189 + 1);
        sub_48DB0((char *)(v9 + 552 * *(_QWORD *)v187), (char *)(v9 + 552 * *(_QWORD *)v189), v9 + 552 * v190, v209);
        if (v1)
        {
LABEL_187:
          v199 = v186;
          goto LABEL_189;
        }
        if (v190 < v188)
          goto LABEL_193;
        if (v146 > *((_QWORD *)v186 + 2))
          goto LABEL_194;
        *(_QWORD *)v187 = v188;
        *(_QWORD *)&v144[16 * v185 + 8] = v190;
        v191 = *((_QWORD *)v186 + 2);
        if (v146 >= v191)
          goto LABEL_195;
        v142 = v191 - 1;
        memmove(&v144[16 * v146], v189 + 16, 16 * (v191 - 1 - v146));
        v10 = v186;
        *((_QWORD *)v186 + 2) = v191 - 1;
        if (v191 <= 2)
          goto LABEL_171;
      }
    }
    v142 = 1;
LABEL_171:
    v11 = v208;
    v8 = v212;
    if (v212 >= v208)
      goto LABEL_175;
  }
  while (1)
  {
    v210 = v15;
    memcpy(v246, (const void *)(v9 + 552 * v15), 0x221uLL);
    memcpy(__src, (const void *)(v9 + 552 * v12), 0x221uLL);
    v16 = __src[16];
    if ((unint64_t)__src[16] >> 1 == 0xFFFFFFFF)
      goto LABEL_221;
    v17 = __src[10];
    v18 = __src[11];
    v19 = __src[12];
    v20 = __src[13];
    v21 = __src[14];
    v22 = __src[15];
    v243 = __src[15];
    v23 = __src[18];
    v226 = __src[12];
    v228 = __src[14];
    v224 = __src[11];
    if ((unint64_t)__src[16] >> 62 == 3)
    {
      v24 = *(_QWORD *)(__src[10] + 16);
      if (!v24)
      {
        v39 = __src[12];
        v34 = __src[13];
        v40 = __src[15];
        sub_61A8(__src[10], __src[11], __src[12], __src[13], __src[14], __src[15], __src[16]);
        sub_61A8(v17, v18, v39, v34, v21, v40, v16);
        sub_6100(v246);
        sub_6100(__src);
        v25 = v17;
        v29 = _swiftEmptyArrayStorage;
        v35 = _swiftEmptyArrayStorage[2];
        if (!v35)
          goto LABEL_34;
        goto LABEL_30;
      }
      v25 = __src[10];
    }
    else
    {
      v26 = sub_5EDC(&qword_1F12B0);
      v27 = swift_allocObject(v26, 88, 7);
      v22 = v243;
      v21 = v228;
      v25 = v27;
      *(_OWORD *)(v27 + 16) = xmmword_1875E0;
      *(_QWORD *)(v27 + 32) = v17;
      *(_QWORD *)(v27 + 40) = v18;
      *(_QWORD *)(v27 + 48) = v19;
      *(_QWORD *)(v27 + 56) = v20;
      *(_QWORD *)(v27 + 64) = v228;
      *(_QWORD *)(v27 + 72) = v243;
      v24 = 1;
      *(_BYTE *)(v27 + 80) = v16 & 1;
    }
    sub_61A8(v17, v18, v19, v20, v21, v22, v16);
    v233 = v23;
    v237 = v20;
    sub_61A8(v17, v18, v19, v20, v21, v243, v16);
    sub_6100(v246);
    sub_6100(__src);
    swift_bridgeObjectRetain(v25);
    v28 = (double *)(v25 + 80);
    v29 = _swiftEmptyArrayStorage;
    do
    {
      if ((*(_BYTE *)v28 & 1) == 0)
      {
        v30 = *(v28 - 2);
        v31 = exp2(-*(v28 - 1) / *(v28 - 3));
        if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0)
          v29 = sub_2FDB4(0, v29[2] + 1, 1, v29);
        v33 = v29[2];
        v32 = v29[3];
        if (v33 >= v32 >> 1)
          v29 = sub_2FDB4((_QWORD *)(v32 > 1), v33 + 1, 1, v29);
        v29[2] = v33 + 1;
        *(double *)&v29[v33 + 4] = v30 * v31;
      }
      v28 += 7;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease(v25);
    v34 = v237;
    v23 = v233;
    v35 = v29[2];
    if (!v35)
    {
LABEL_34:
      swift_bridgeObjectRelease(v25);
      v37 = 0.0;
      goto LABEL_35;
    }
LABEL_30:
    v36 = (double *)(v29 + 4);
    v37 = 0.0;
    do
    {
      v38 = *v36++;
      v37 = v37 + v38;
      --v35;
    }
    while (v35);
    swift_bridgeObjectRelease(v25);
LABEL_35:
    swift_bridgeObjectRelease(v29);
    v42 = v246[10];
    v41 = v246[11];
    v234 = v246[12];
    v238 = v246[13];
    v43 = v246[15];
    v231 = v246[14];
    v44 = v246[16];
    v240 = v246[18];
    v200 = v23;
    sub_62CC(v17, v224, v226, v34, v228, v243, v16);
    if (v44 >> 1 == 0xFFFFFFFF)
      goto LABEL_222;
    v221 = v41;
    if (v44 >> 62 == 3)
    {
      v45 = v41;
      v46 = *(_QWORD *)(v42 + 16);
      v47 = v234;
      if (!v46)
      {
        v66 = v238;
        v67 = v231;
        sub_61A8(v42, v45, v234, v238, v231, v43, v44);
        sub_61A8(v42, v45, v234, v238, v231, v43, v44);
        v48 = v42;
        v61 = _swiftEmptyArrayStorage;
        v68 = _swiftEmptyArrayStorage[2];
        if (!v68)
          goto LABEL_53;
        goto LABEL_49;
      }
      v48 = v42;
      v49 = v238;
      v50 = v43;
      v51 = v42;
      v52 = v44;
      v53 = v231;
      v54 = v234;
    }
    else
    {
      v55 = sub_5EDC(&qword_1F12B0);
      v48 = swift_allocObject(v55, 88, 7);
      *(_OWORD *)(v48 + 16) = xmmword_1875E0;
      *(_QWORD *)(v48 + 32) = v42;
      *(_QWORD *)(v48 + 40) = v41;
      v54 = v234;
      v49 = v238;
      *(_QWORD *)(v48 + 48) = v234;
      *(_QWORD *)(v48 + 56) = v238;
      v50 = v43;
      v51 = v42;
      v52 = v44;
      v53 = v231;
      *(_QWORD *)(v48 + 64) = v231;
      *(_QWORD *)(v48 + 72) = v43;
      v46 = 1;
      *(_BYTE *)(v48 + 80) = v44 & 1;
      v45 = v41;
    }
    v56 = v51;
    v57 = v49;
    v217 = (void *)v52;
    v219 = (void *)v50;
    sub_61A8(v51, v45, v54, v49, v53, v50, v52);
    v245 = v56;
    v58 = v56;
    v59 = v57;
    v44 = (unint64_t)v217;
    v43 = (uint64_t)v219;
    sub_61A8(v58, v45, v54, v59, v53, (uint64_t)v219, (unint64_t)v217);
    swift_bridgeObjectRetain(v48);
    v60 = (double *)(v48 + 80);
    v61 = _swiftEmptyArrayStorage;
    do
    {
      if ((*(_BYTE *)v60 & 1) == 0)
      {
        v62 = *(v60 - 2);
        v63 = exp2(-*(v60 - 1) / *(v60 - 3));
        if ((swift_isUniquelyReferenced_nonNull_native(v61) & 1) == 0)
          v61 = sub_2FDB4(0, v61[2] + 1, 1, v61);
        v65 = v61[2];
        v64 = v61[3];
        if (v65 >= v64 >> 1)
          v61 = sub_2FDB4((_QWORD *)(v64 > 1), v65 + 1, 1, v61);
        v61[2] = v65 + 1;
        *(double *)&v61[v65 + 4] = v62 * v63;
      }
      v60 += 7;
      --v46;
    }
    while (v46);
    swift_bridgeObjectRelease(v48);
    v47 = v234;
    v66 = v238;
    v67 = v231;
    v42 = v245;
    v68 = v61[2];
    if (!v68)
    {
LABEL_53:
      swift_bridgeObjectRelease(v48);
      v70 = 0.0;
      goto LABEL_54;
    }
LABEL_49:
    v69 = (double *)(v61 + 4);
    v70 = 0.0;
    do
    {
      v71 = *v69++;
      v70 = v70 + v71;
      --v68;
    }
    while (v68);
    swift_bridgeObjectRelease(v48);
LABEL_54:
    swift_bridgeObjectRelease(v61);
    v200 = v240;
    sub_62CC(v42, v221, v47, v66, v67, v43, v44);
    sub_6228(__src);
    sub_6228(v246);
    if (((v215 ^ (v37 >= v70)) & 1) == 0)
    {
      v11 = v208;
      v9 = v214;
      v15 = v210;
      goto LABEL_59;
    }
    v11 = v208;
    v9 = v214;
    if (v210 == v206)
      break;
    v12 = v210;
    v15 = v210 + 1;
  }
  v15 = v208;
  if ((v215 & 1) == 0)
    goto LABEL_69;
LABEL_60:
  if (v15 >= v213)
  {
    if (v213 < v15)
    {
      v72 = (char *)(v201 + 552 * v15);
      v73 = v15;
      v74 = v213;
      v75 = (char *)(v9 + 552 * v213);
      while (1)
      {
        if (v74 != --v73)
        {
          if (!v9)
            goto LABEL_223;
          v76 = v15;
          memcpy(__src, v75, 0x221uLL);
          memmove(v75, v72, 0x228uLL);
          memcpy(v72, __src, 0x221uLL);
          v11 = v208;
          v15 = v76;
        }
        ++v74;
        v72 -= 552;
        v75 += 552;
        if (v74 >= v73)
          goto LABEL_69;
      }
    }
    goto LABEL_69;
  }
LABEL_216:
  __break(1u);
LABEL_217:
  __break(1u);
LABEL_218:
  __break(1u);
LABEL_219:
  __break(1u);
LABEL_220:
  __break(1u);
LABEL_221:
  __break(1u);
LABEL_222:
  __break(1u);
LABEL_223:
  __break(1u);
LABEL_224:
  __break(1u);
LABEL_225:
  LOBYTE(v200) = 2;
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, v200, 936, 0);
  __break(1u);
  return result;
}

Swift::Int sub_47EC4(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  double v13;
  double v14;
  double *v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  Swift::Int v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  double v77;
  Swift::Int v78;
  uint64_t v79;
  _OWORD *v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  uint64_t v99;
  uint64_t v100;
  _OWORD *v101;
  uint64_t v102;
  char v103;
  char v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  unint64_t v118;
  Swift::Int v119;
  _QWORD *v120;
  _QWORD *v121;
  Swift::Int v122;
  Swift::Int v123;
  __int128 v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  double *v130;
  char *v131;
  uint64_t v132;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return result;
      v94 = *v2;
      v95 = *v2 + 72;
      v96 = -1;
      v97 = 1;
      while (1)
      {
        v98 = *(double *)(v94 + 80 * v97 + 72);
        v99 = v96;
        v100 = v95;
        do
        {
          if (*(double *)v100 >= v98)
            break;
          if (!v94)
            goto LABEL_145;
          v101 = (_OWORD *)(v100 + 8);
          v102 = *(_QWORD *)(v100 + 8);
          v103 = *(_BYTE *)(v100 + 16);
          result = *(_QWORD *)(v100 + 24);
          v104 = *(_BYTE *)(v100 + 32);
          v105 = *(_QWORD *)(v100 + 40);
          v106 = *(_BYTE *)(v100 + 48);
          v107 = *(_QWORD *)(v100 + 56);
          v108 = *(_OWORD *)(v100 + 64);
          v109 = *(_OWORD *)(v100 - 24);
          *(_OWORD *)(v100 + 40) = *(_OWORD *)(v100 - 40);
          *(_OWORD *)(v100 + 56) = v109;
          *(_OWORD *)(v100 + 72) = *(_OWORD *)(v100 - 8);
          *(_OWORD *)(v100 - 16) = v108;
          v111 = *(_OWORD *)(v100 - 72);
          v110 = *(_OWORD *)(v100 - 56);
          *(_QWORD *)(v100 - 72) = v102;
          *(_BYTE *)(v100 - 64) = v103;
          *(_QWORD *)(v100 - 56) = result;
          *(_BYTE *)(v100 - 48) = v104;
          *(_QWORD *)(v100 - 40) = v105;
          *(_BYTE *)(v100 - 32) = v106;
          *(_QWORD *)(v100 - 24) = v107;
          *(double *)v100 = v98;
          v100 -= 80;
          *v101 = v111;
          v101[1] = v110;
        }
        while (!__CFADD__(v99++, 1));
        ++v97;
        v95 += 80;
        --v96;
        if (v97 == v3)
          return result;
      }
    }
    goto LABEL_141;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_150:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  v122 = result;
  v132 = v1;
  if (v3 < 2)
  {
    v8 = _swiftEmptyArrayStorage;
    v130 = (double *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v11 = _swiftEmptyArrayStorage[2];
      v93 = (char *)_swiftEmptyArrayStorage;
LABEL_107:
      v121 = v8;
      if (v11 < 2)
        goto LABEL_97;
      v113 = *v2;
      while (1)
      {
        v114 = v11 - 2;
        if (v11 < 2)
          goto LABEL_136;
        if (!v113)
          goto LABEL_149;
        v92 = v93;
        v115 = *(_QWORD *)&v93[16 * v114 + 32];
        v116 = *(_QWORD *)&v93[16 * v11 + 24];
        sub_496D4((double *)(v113 + 80 * v115), (double *)(v113 + 80 * *(_QWORD *)&v93[16 * v11 + 16]), v113 + 80 * v116, v130);
        if (v132)
          goto LABEL_96;
        if (v116 < v115)
          goto LABEL_137;
        if ((swift_isUniquelyReferenced_nonNull_native(v92) & 1) == 0)
          v92 = sub_4ECA8((uint64_t)v92);
        if (v114 >= *((_QWORD *)v92 + 2))
          goto LABEL_138;
        v117 = &v92[16 * v114 + 32];
        *(_QWORD *)v117 = v115;
        *((_QWORD *)v117 + 1) = v116;
        v118 = *((_QWORD *)v92 + 2);
        if (v11 > v118)
          goto LABEL_139;
        memmove(&v92[16 * v11 + 16], &v92[16 * v11 + 32], 16 * (v118 - v11));
        v93 = v92;
        *((_QWORD *)v92 + 2) = v118 - 1;
        v11 = v118 - 1;
        if (v118 <= 2)
          goto LABEL_97;
      }
    }
    v121 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for ScoredBook);
    *(_QWORD *)(v7 + 16) = v6;
    v121 = (_QWORD *)v7;
    v130 = (double *)(v7 + 32);
  }
  v9 = 0;
  v120 = v2;
  v10 = *v2;
  v131 = (char *)_swiftEmptyArrayStorage;
  v123 = v3;
  while (1)
  {
    v12 = v9++;
    if (v9 < v3)
    {
      v13 = *(double *)(v10 + 80 * v9 + 72);
      v14 = *(double *)(v10 + 80 * v12 + 72);
      v9 = v12 + 2;
      if (v12 + 2 < v3)
      {
        v15 = (double *)(v10 + 232 + 80 * v12);
        v16 = v13;
        while (1)
        {
          v17 = v16;
          v16 = *v15;
          if (v14 < v13 == v17 >= *v15)
            break;
          ++v9;
          v15 += 10;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v13)
      {
        if (v9 < v12)
          goto LABEL_142;
        if (v12 < v9)
        {
          v18 = 80 * v9;
          v19 = 80 * v12;
          v20 = v9;
          v119 = v12;
          do
          {
            if (v12 != --v20)
            {
              if (!v10)
                goto LABEL_148;
              v21 = *(_QWORD *)(v10 + v19);
              v22 = v10 + v18;
              v23 = *(_BYTE *)(v10 + v19 + 8);
              v129 = *(_QWORD *)(v10 + v19 + 16);
              v128 = *(_BYTE *)(v10 + v19 + 24);
              v127 = *(_QWORD *)(v10 + v19 + 32);
              v126 = *(_BYTE *)(v10 + v19 + 40);
              v125 = *(_QWORD *)(v10 + v19 + 48);
              v24 = *(_QWORD *)(v10 + v19 + 72);
              v124 = *(_OWORD *)(v10 + v19 + 56);
              memmove((void *)(v10 + v19), (const void *)(v10 + v18 - 80), 0x50uLL);
              *(_QWORD *)(v22 - 80) = v21;
              *(_BYTE *)(v22 - 72) = v23;
              *(_QWORD *)(v22 - 64) = v129;
              *(_BYTE *)(v22 - 56) = v128;
              *(_QWORD *)(v22 - 48) = v127;
              *(_BYTE *)(v22 - 40) = v126;
              *(_QWORD *)(v22 - 32) = v125;
              *(_OWORD *)(v22 - 24) = v124;
              *(_QWORD *)(v22 - 8) = v24;
            }
            ++v12;
            v18 -= 80;
            v19 += 80;
          }
          while (v12 < v20);
          v3 = v123;
          v12 = v119;
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_39;
    if (__OFSUB__(v9, v12))
      goto LABEL_140;
    if (v9 - v12 >= v122)
      goto LABEL_39;
    v25 = v12 + v122;
    if (__OFADD__(v12, v122))
      goto LABEL_143;
    if (v25 >= v3)
      v25 = v3;
    if (v25 < v12)
      goto LABEL_144;
    if (v9 == v25)
    {
LABEL_39:
      v26 = v131;
      if (v9 < v12)
        goto LABEL_135;
    }
    else
    {
      v76 = v10 - 8 + 80 * v9;
      v26 = v131;
      do
      {
        v77 = *(double *)(v10 + 80 * v9 + 72);
        v78 = v12;
        v79 = v76;
        do
        {
          if (*(double *)v79 >= v77)
            break;
          if (!v10)
            goto LABEL_146;
          v80 = (_OWORD *)(v79 + 8);
          v81 = *(_QWORD *)(v79 + 8);
          v82 = *(_BYTE *)(v79 + 16);
          v83 = *(_QWORD *)(v79 + 24);
          v84 = *(_BYTE *)(v79 + 32);
          v85 = *(_QWORD *)(v79 + 40);
          v86 = *(_BYTE *)(v79 + 48);
          v87 = *(_QWORD *)(v79 + 56);
          v88 = *(_OWORD *)(v79 + 64);
          v89 = *(_OWORD *)(v79 - 24);
          *(_OWORD *)(v79 + 40) = *(_OWORD *)(v79 - 40);
          *(_OWORD *)(v79 + 56) = v89;
          *(_OWORD *)(v79 + 72) = *(_OWORD *)(v79 - 8);
          *(_OWORD *)(v79 - 16) = v88;
          v91 = *(_OWORD *)(v79 - 72);
          v90 = *(_OWORD *)(v79 - 56);
          *(_QWORD *)(v79 - 72) = v81;
          *(_BYTE *)(v79 - 64) = v82;
          *(_QWORD *)(v79 - 56) = v83;
          *(_BYTE *)(v79 - 48) = v84;
          *(_QWORD *)(v79 - 40) = v85;
          *(_BYTE *)(v79 - 32) = v86;
          *(_QWORD *)(v79 - 24) = v87;
          *(double *)v79 = v77;
          v79 -= 80;
          ++v78;
          *v80 = v91;
          v80[1] = v90;
        }
        while (v9 != v78);
        ++v9;
        v76 += 80;
      }
      while (v9 != v25);
      v9 = v25;
      if (v25 < v12)
      {
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
        goto LABEL_150;
      }
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v26) & 1) == 0)
      v26 = sub_4E4E4(0, *((_QWORD *)v26 + 2) + 1, 1, v26);
    v28 = *((_QWORD *)v26 + 2);
    v27 = *((_QWORD *)v26 + 3);
    v11 = v28 + 1;
    if (v28 >= v27 >> 1)
      v26 = sub_4E4E4((char *)(v27 > 1), v28 + 1, 1, v26);
    *((_QWORD *)v26 + 2) = v11;
    v29 = v26 + 32;
    v30 = &v26[16 * v28 + 32];
    *(_QWORD *)v30 = v12;
    *((_QWORD *)v30 + 1) = v9;
    v131 = v26;
    if (v28)
      break;
    v11 = 1;
LABEL_15:
    v3 = v123;
    if (v9 >= v123)
    {
      v8 = v121;
      v93 = v131;
      v2 = v120;
      goto LABEL_107;
    }
  }
  while (1)
  {
    v31 = v11 - 1;
    if (v11 >= 4)
    {
      v36 = &v29[16 * v11];
      v37 = *((_QWORD *)v36 - 8);
      v38 = *((_QWORD *)v36 - 7);
      v42 = __OFSUB__(v38, v37);
      v39 = v38 - v37;
      if (v42)
        goto LABEL_124;
      v41 = *((_QWORD *)v36 - 6);
      v40 = *((_QWORD *)v36 - 5);
      v42 = __OFSUB__(v40, v41);
      v34 = v40 - v41;
      v35 = v42;
      if (v42)
        goto LABEL_125;
      v43 = v11 - 2;
      v44 = &v29[16 * v11 - 32];
      v46 = *(_QWORD *)v44;
      v45 = *((_QWORD *)v44 + 1);
      v42 = __OFSUB__(v45, v46);
      v47 = v45 - v46;
      if (v42)
        goto LABEL_127;
      v42 = __OFADD__(v34, v47);
      v48 = v34 + v47;
      if (v42)
        goto LABEL_130;
      if (v48 >= v39)
      {
        v66 = &v29[16 * v31];
        v68 = *(_QWORD *)v66;
        v67 = *((_QWORD *)v66 + 1);
        v42 = __OFSUB__(v67, v68);
        v69 = v67 - v68;
        if (v42)
          goto LABEL_134;
        v59 = v34 < v69;
        goto LABEL_76;
      }
    }
    else
    {
      if (v11 != 3)
      {
        v60 = *((_QWORD *)v26 + 4);
        v61 = *((_QWORD *)v26 + 5);
        v42 = __OFSUB__(v61, v60);
        v53 = v61 - v60;
        v54 = v42;
        goto LABEL_70;
      }
      v33 = *((_QWORD *)v26 + 4);
      v32 = *((_QWORD *)v26 + 5);
      v42 = __OFSUB__(v32, v33);
      v34 = v32 - v33;
      v35 = v42;
    }
    if ((v35 & 1) != 0)
      goto LABEL_126;
    v43 = v11 - 2;
    v49 = &v29[16 * v11 - 32];
    v51 = *(_QWORD *)v49;
    v50 = *((_QWORD *)v49 + 1);
    v52 = __OFSUB__(v50, v51);
    v53 = v50 - v51;
    v54 = v52;
    if (v52)
      goto LABEL_129;
    v55 = &v29[16 * v31];
    v57 = *(_QWORD *)v55;
    v56 = *((_QWORD *)v55 + 1);
    v42 = __OFSUB__(v56, v57);
    v58 = v56 - v57;
    if (v42)
      goto LABEL_132;
    if (__OFADD__(v53, v58))
      goto LABEL_133;
    if (v53 + v58 >= v34)
    {
      v59 = v34 < v58;
LABEL_76:
      if (v59)
        v31 = v43;
      goto LABEL_78;
    }
LABEL_70:
    if ((v54 & 1) != 0)
      goto LABEL_128;
    v62 = &v29[16 * v31];
    v64 = *(_QWORD *)v62;
    v63 = *((_QWORD *)v62 + 1);
    v42 = __OFSUB__(v63, v64);
    v65 = v63 - v64;
    if (v42)
      goto LABEL_131;
    if (v65 < v53)
      goto LABEL_15;
LABEL_78:
    v70 = v31 - 1;
    if (v31 - 1 >= v11)
    {
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
      goto LABEL_135;
    }
    if (!v10)
      goto LABEL_147;
    v71 = &v29[16 * v70];
    v72 = *(_QWORD *)v71;
    v73 = &v29[16 * v31];
    v74 = *((_QWORD *)v73 + 1);
    sub_496D4((double *)(v10 + 80 * *(_QWORD *)v71), (double *)(v10 + 80 * *(_QWORD *)v73), v10 + 80 * v74, v130);
    if (v132)
      break;
    if (v74 < v72)
      goto LABEL_121;
    if (v31 > *((_QWORD *)v131 + 2))
      goto LABEL_122;
    *(_QWORD *)v71 = v72;
    *(_QWORD *)&v29[16 * v70 + 8] = v74;
    v75 = *((_QWORD *)v131 + 2);
    if (v31 >= v75)
      goto LABEL_123;
    v26 = v131;
    v11 = v75 - 1;
    memmove(&v29[16 * v31], v73 + 16, 16 * (v75 - 1 - v31));
    *((_QWORD *)v131 + 2) = v75 - 1;
    if (v75 <= 2)
      goto LABEL_15;
  }
  v92 = v131;
LABEL_96:
  v93 = v92;
LABEL_97:
  swift_bridgeObjectRelease(v93);
  v121[2] = 0;
  return swift_bridgeObjectRelease(v121);
}

uint64_t sub_486E4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  _QWORD *v18;
  double v19;
  double v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double *v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double *v46;
  _QWORD *v47;
  double v48;
  double v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double *v55;
  double v56;
  double v57;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  void *__src;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE v77[545];
  _QWORD __dst[69];
  uint64_t v79[70];

  v60 = result;
  if (a3 == a2)
    return result;
  v65 = *a4;
LABEL_5:
  v59 = a3;
  v4 = a3;
  while (1)
  {
    v5 = (char *)(v65 + 552 * v4);
    memcpy(__dst, v5, 0x221uLL);
    result = (uint64_t)memcpy(v79, v5 - 552, 0x221uLL);
    v6 = v79[16];
    if ((unint64_t)v79[16] >> 1 == 0xFFFFFFFF)
      break;
    __src = (void *)(v65 + 552 * v4);
    v64 = v5 - 552;
    v7 = v79[10];
    v8 = v79[11];
    v9 = v79[12];
    v10 = v79[13];
    v11 = v79[14];
    v12 = v79[15];
    v75 = v79[14];
    v68 = v79[11];
    v69 = v79[15];
    v66 = v4;
    v67 = v79[12];
    if ((unint64_t)v79[16] >> 62 == 3)
    {
      v13 = *(_QWORD *)(v79[10] + 16);
      if (!v13)
      {
        v28 = v79[12];
        v23 = v79[13];
        sub_61A8(v79[10], v79[11], v79[12], v79[13], v79[14], v79[15], v79[16]);
        sub_61A8(v7, v8, v28, v10, v75, v12, v6);
        sub_6100(__dst);
        sub_6100(v79);
        v14 = v7;
        v18 = _swiftEmptyArrayStorage;
        v24 = _swiftEmptyArrayStorage[2];
        if (!v24)
          goto LABEL_24;
        goto LABEL_20;
      }
      v14 = v79[10];
    }
    else
    {
      v15 = sub_5EDC(&qword_1F12B0);
      v16 = swift_allocObject(v15, 88, 7);
      v12 = v69;
      v11 = v75;
      v14 = v16;
      *(_OWORD *)(v16 + 16) = xmmword_1875E0;
      *(_QWORD *)(v16 + 32) = v7;
      *(_QWORD *)(v16 + 40) = v8;
      *(_QWORD *)(v16 + 48) = v9;
      *(_QWORD *)(v16 + 56) = v10;
      *(_QWORD *)(v16 + 64) = v75;
      *(_QWORD *)(v16 + 72) = v69;
      v13 = 1;
      *(_BYTE *)(v16 + 80) = v6 & 1;
    }
    sub_61A8(v7, v8, v9, v10, v11, v12, v6);
    v73 = v10;
    sub_61A8(v7, v8, v9, v10, v75, v12, v6);
    sub_6100(__dst);
    sub_6100(v79);
    swift_bridgeObjectRetain(v14);
    v17 = (double *)(v14 + 80);
    v18 = _swiftEmptyArrayStorage;
    do
    {
      if ((*(_BYTE *)v17 & 1) == 0)
      {
        v19 = *(v17 - 2);
        v20 = exp2(-*(v17 - 1) / *(v17 - 3));
        if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
          v18 = sub_2FDB4(0, v18[2] + 1, 1, v18);
        v22 = v18[2];
        v21 = v18[3];
        if (v22 >= v21 >> 1)
          v18 = sub_2FDB4((_QWORD *)(v21 > 1), v22 + 1, 1, v18);
        v18[2] = v22 + 1;
        *(double *)&v18[v22 + 4] = v19 * v20;
      }
      v17 += 7;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease(v14);
    v23 = v73;
    v24 = v18[2];
    if (!v24)
    {
LABEL_24:
      swift_bridgeObjectRelease(v14);
      v26 = 0.0;
      goto LABEL_25;
    }
LABEL_20:
    v25 = (double *)(v18 + 4);
    v26 = 0.0;
    do
    {
      v27 = *v25++;
      v26 = v26 + v27;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease(v14);
LABEL_25:
    swift_bridgeObjectRelease(v18);
    v29 = __dst[10];
    v72 = __dst[13];
    v74 = __dst[11];
    v70 = __dst[14];
    v71 = __dst[12];
    v30 = __dst[15];
    v31 = __dst[16];
    result = sub_62CC(v7, v68, v67, v23, v75, v69, v6);
    if (v31 >> 1 == 0xFFFFFFFF)
      goto LABEL_49;
    if (v31 >> 62 == 3)
    {
      v32 = *(_QWORD *)(v29 + 16);
      v33 = v74;
      v34 = v71;
      if (!v32)
      {
        v52 = v72;
        v53 = v70;
        sub_61A8(v29, v74, v71, v72, v70, v30, v31);
        sub_61A8(v29, v74, v71, v72, v70, v30, v31);
        v35 = v29;
        v47 = _swiftEmptyArrayStorage;
        v54 = _swiftEmptyArrayStorage[2];
        if (!v54)
          goto LABEL_43;
        goto LABEL_39;
      }
      v35 = v29;
      v36 = v72;
      v37 = v30;
      v38 = v29;
      v39 = v31;
      v40 = v70;
      v41 = v71;
    }
    else
    {
      v42 = sub_5EDC(&qword_1F12B0);
      v35 = swift_allocObject(v42, 88, 7);
      *(_OWORD *)(v35 + 16) = xmmword_1875E0;
      v36 = v72;
      v33 = v74;
      *(_QWORD *)(v35 + 32) = v29;
      *(_QWORD *)(v35 + 40) = v74;
      v41 = v71;
      *(_QWORD *)(v35 + 48) = v71;
      *(_QWORD *)(v35 + 56) = v72;
      v37 = v30;
      v38 = v29;
      v39 = v31;
      v40 = v70;
      *(_QWORD *)(v35 + 64) = v70;
      *(_QWORD *)(v35 + 72) = v30;
      v32 = 1;
      *(_BYTE *)(v35 + 80) = v31 & 1;
    }
    v43 = v38;
    v44 = v36;
    v61 = v39;
    v62 = v37;
    sub_61A8(v38, v33, v41, v36, v40, v37, v39);
    v76 = v43;
    v45 = v44;
    v31 = v61;
    v30 = v62;
    sub_61A8(v43, v33, v41, v45, v40, v62, v61);
    swift_bridgeObjectRetain(v35);
    v46 = (double *)(v35 + 80);
    v47 = _swiftEmptyArrayStorage;
    do
    {
      if ((*(_BYTE *)v46 & 1) == 0)
      {
        v48 = *(v46 - 2);
        v49 = exp2(-*(v46 - 1) / *(v46 - 3));
        if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
          v47 = sub_2FDB4(0, v47[2] + 1, 1, v47);
        v51 = v47[2];
        v50 = v47[3];
        if (v51 >= v50 >> 1)
          v47 = sub_2FDB4((_QWORD *)(v50 > 1), v51 + 1, 1, v47);
        v47[2] = v51 + 1;
        *(double *)&v47[v51 + 4] = v48 * v49;
      }
      v46 += 7;
      --v32;
    }
    while (v32);
    swift_bridgeObjectRelease(v35);
    v52 = v72;
    v33 = v74;
    v53 = v70;
    v34 = v71;
    v29 = v76;
    v54 = v47[2];
    if (!v54)
    {
LABEL_43:
      swift_bridgeObjectRelease(v35);
      v56 = 0.0;
      goto LABEL_44;
    }
LABEL_39:
    v55 = (double *)(v47 + 4);
    v56 = 0.0;
    do
    {
      v57 = *v55++;
      v56 = v56 + v57;
      --v54;
    }
    while (v54);
    swift_bridgeObjectRelease(v35);
LABEL_44:
    swift_bridgeObjectRelease(v47);
    sub_62CC(v29, v33, v34, v52, v53, v30, v31);
    sub_6228(v79);
    result = (uint64_t)sub_6228(__dst);
    if (v26 < v56)
    {
      if (!v65)
        goto LABEL_50;
      v4 = v66 - 1;
      memcpy(v77, __src, sizeof(v77));
      memcpy(__src, v64, 0x228uLL);
      result = (uint64_t)memcpy(v64, v77, 0x221uLL);
      if (v66 - 1 != v60)
        continue;
    }
    a3 = v59 + 1;
    if (v59 + 1 == a2)
      return result;
    goto LABEL_5;
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
  return result;
}

uint64_t sub_48DB0(char *__src, char *a2, unint64_t a3, char *__dst)
{
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  char v14;
  _QWORD __dsta[69];
  _QWORD v17[69];
  char *v18;
  const void *v19;
  char *v20;

  v7 = a2 - __src;
  v8 = (a2 - __src) / 552;
  v9 = a3 - (_QWORD)a2;
  v10 = (uint64_t)(a3 - (_QWORD)a2) / 552;
  v20 = __src;
  v19 = __dst;
  if (v8 < v10)
  {
    if (v7 >= -551)
    {
      v11 = 552 * v8;
      if (__dst != __src || &__src[v11] <= __dst)
        memmove(__dst, __src, v11);
      v18 = &__dst[v11];
      if ((unint64_t)a2 < a3 && v7 >= 552)
      {
        memcpy(__dsta, a2, 0x221uLL);
        memcpy(v17, __dst, 0x221uLL);
        if (v17[16] >> 1 != 0xFFFFFFFFLL)
          __asm { BR              X9 }
        __break(1u);
        JUMPOUT(0x49640);
      }
      goto LABEL_18;
    }
LABEL_21:
    v14 = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v14, 1046, 0);
    __break(1u);
    JUMPOUT(0x49694);
  }
  if (v9 < -551)
    goto LABEL_21;
  v12 = 552 * v10;
  if (__dst != a2 || &a2[v12] <= __dst)
    memmove(__dst, a2, 552 * v10);
  v18 = &__dst[v12];
  v20 = a2;
  if (__src < a2 && v9 >= 552)
  {
    memcpy(__dsta, &__dst[v12 - 552], 0x221uLL);
    memcpy(v17, a2 - 552, 0x221uLL);
    if (v17[16] >> 1 != 0xFFFFFFFFLL)
      __asm { BR              X9 }
    __break(1u);
    JUMPOUT(0x49648);
  }
LABEL_18:
  sub_4E798((void **)&v20, &v19, &v18);
  return 1;
}

uint64_t sub_496D4(double *__dst, double *__src, unint64_t a3, double *a4)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  uint64_t result;
  char *v21;
  double *v22;
  double *v23;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = (char *)__src - (char *)__dst;
  v9 = ((char *)__src - (char *)__dst) / 80;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 80;
  v23 = __dst;
  v22 = a4;
  if (v9 >= v11)
  {
    if (v10 >= -79)
    {
      if (a4 != __src || &__src[10 * v11] <= a4)
        memmove(a4, __src, 80 * v11);
      v16 = &v4[10 * v11];
      v21 = (char *)v16;
      v23 = v6;
      if (v7 < v6 && v10 >= 80)
      {
        v17 = (double *)(a3 - 80);
        do
        {
          v18 = v17 + 10;
          if (*(v6 - 1) >= *(v16 - 1))
          {
            v21 = (char *)(v16 - 10);
            if (v18 < v16 || v17 >= v16 || v18 != v16)
              memmove(v17, v16 - 10, 0x50uLL);
            v19 = v6;
            v16 -= 10;
            if (v6 <= v7)
              break;
          }
          else
          {
            v19 = v6 - 10;
            if (v18 != v6 || v17 >= v6)
              memmove(v17, v6 - 10, 0x50uLL);
            v23 = v6 - 10;
            if (v19 <= v7)
              break;
          }
          v17 -= 10;
          v6 = v19;
        }
        while (v16 > v4);
      }
LABEL_40:
      sub_4E854((void **)&v23, (const void **)&v22, &v21);
      return 1;
    }
  }
  else if (v8 >= -79)
  {
    if (a4 != __dst || &__dst[10 * v9] <= a4)
      memmove(a4, __dst, 80 * v9);
    v12 = &v4[10 * v9];
    v21 = (char *)v12;
    if ((unint64_t)v6 < a3 && v8 >= 80)
    {
      v13 = v4;
      while (1)
      {
        if (v13[9] >= v6[9])
        {
          v4 = v13 + 10;
          v15 = v13;
          v14 = v6;
          if (v7 == v13)
          {
            v13 += 10;
            if (v7 < v4)
              goto LABEL_18;
          }
          else
          {
            v13 += 10;
          }
        }
        else
        {
          v14 = v6 + 10;
          v15 = v6;
          if (v7 == v6 && v7 < v14)
            goto LABEL_18;
        }
        memmove(v7, v15, 0x50uLL);
LABEL_18:
        v7 += 10;
        if (v13 < v12)
        {
          v6 = v14;
          if ((unint64_t)v14 < a3)
            continue;
        }
        v22 = v4;
        v23 = v7;
        goto LABEL_40;
      }
    }
    goto LABEL_40;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_49988(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5EDC(&qword_1F14A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t *sub_499C8(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t *v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;

  v2 = isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = sub_49B24((unint64_t *)((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v2);
    v9 = swift_release(v2);
    if (v1)
      swift_willThrow(v9);
  }
  else
  {
    v10 = (void *)swift_slowAlloc(v7, -1);
    bzero(v10, v7);
    v8 = sub_49B24((unint64_t *)v10, v6, v2);
    swift_release(v2);
    swift_slowDealloc(v10, -1, -1);
  }
  return v8;
}

unint64_t *sub_49B24(unint64_t *result, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  double v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  _QWORD *v31;
  double v32;
  double v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double *v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  unint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t __dst[74];

  v43 = result;
  v44 = 0;
  v3 = 0;
  v6 = *(_QWORD *)(a3 + 56);
  v4 = a3 + 56;
  v5 = v6;
  v7 = 1 << *(_BYTE *)(v4 - 24);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v5;
  v45 = v4;
  v46 = (unint64_t)(v7 + 63) >> 6;
  if ((v8 & v5) != 0)
    goto LABEL_8;
LABEL_11:
  v13 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v13 < v46)
    {
      v14 = *(_QWORD *)(v45 + 8 * v13);
      ++v3;
      if (v14)
        goto LABEL_24;
      v3 = v13 + 1;
      if (v13 + 1 >= v46)
        goto LABEL_44;
      v14 = *(_QWORD *)(v45 + 8 * v3);
      if (v14)
        goto LABEL_24;
      v3 = v13 + 2;
      if (v13 + 2 >= v46)
        goto LABEL_44;
      v14 = *(_QWORD *)(v45 + 8 * v3);
      if (v14)
      {
LABEL_24:
        v9 = (v14 - 1) & v14;
        for (i = __clz(__rbit64(v14)) + (v3 << 6); ; i = v11 | (v3 << 6))
        {
          result = (unint64_t *)memcpy(__dst, (const void *)(*(_QWORD *)(a3 + 48) + 552 * i), 0x221uLL);
          v16 = __dst[16];
          if ((unint64_t)__dst[16] >> 1 == 0xFFFFFFFF)
            goto LABEL_48;
          v17 = __dst[10];
          v18 = __dst[11];
          v20 = __dst[12];
          v19 = __dst[13];
          v21 = __dst[14];
          v22 = __dst[15];
          __dst[73] = __dst[17];
          v54 = __dst[14];
          v52 = __dst[12];
          v53 = __dst[15];
          v47 = i;
          if ((unint64_t)__dst[16] >> 62 == 3)
          {
            v23 = *(_QWORD *)(__dst[10] + 16);
            if (!v23)
            {
              v36 = __dst[13];
              v40 = __dst[14];
              v41 = __dst[15];
              sub_61A8(__dst[10], __dst[11], __dst[12], __dst[13], __dst[14], __dst[15], __dst[16]);
              sub_61A8(v17, v18, v20, v36, v40, v41, v16);
              sub_6100(__dst);
              v24 = v17;
              v31 = _swiftEmptyArrayStorage;
              v37 = _swiftEmptyArrayStorage[2];
              if (!v37)
                goto LABEL_5;
              goto LABEL_39;
            }
            v49 = v9;
            v50 = v3;
            v24 = __dst[10];
            v25 = __dst[13];
          }
          else
          {
            v49 = v9;
            v50 = v3;
            v26 = sub_5EDC(&qword_1F12B0);
            v27 = swift_allocObject(v26, 88, 7);
            v22 = v53;
            v21 = v54;
            v24 = v27;
            *(_OWORD *)(v27 + 16) = xmmword_1875E0;
            *(_QWORD *)(v27 + 32) = v17;
            *(_QWORD *)(v27 + 40) = v18;
            *(_QWORD *)(v27 + 48) = v20;
            *(_QWORD *)(v27 + 56) = v19;
            *(_QWORD *)(v27 + 64) = v54;
            *(_QWORD *)(v27 + 72) = v53;
            v25 = v19;
            v23 = 1;
            *(_BYTE *)(v27 + 80) = v16 & 1;
          }
          v28 = v21;
          v29 = v22;
          sub_61A8(v17, v18, v20, v25, v21, v22, v16);
          v51 = v25;
          sub_61A8(v17, v18, v20, v25, v28, v29, v16);
          sub_6100(__dst);
          swift_bridgeObjectRetain(v24);
          v30 = (double *)(v24 + 80);
          v31 = _swiftEmptyArrayStorage;
          do
          {
            if ((*(_BYTE *)v30 & 1) == 0)
            {
              v32 = *(v30 - 2);
              v33 = exp2(-*(v30 - 1) / *(v30 - 3));
              if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0)
                v31 = sub_2FDB4(0, v31[2] + 1, 1, v31);
              v35 = v31[2];
              v34 = v31[3];
              if (v35 >= v34 >> 1)
                v31 = sub_2FDB4((_QWORD *)(v34 > 1), v35 + 1, 1, v31);
              v31[2] = v35 + 1;
              *(double *)&v31[v35 + 4] = v32 * v33;
            }
            v30 += 7;
            --v23;
          }
          while (v23);
          swift_bridgeObjectRelease(v24);
          v9 = v49;
          v3 = v50;
          v36 = v51;
          v37 = v31[2];
          if (!v37)
          {
LABEL_5:
            swift_bridgeObjectRelease(v24);
            v10 = 0.0;
            goto LABEL_6;
          }
LABEL_39:
          v38 = (double *)(v31 + 4);
          v10 = 0.0;
          do
          {
            v39 = *v38++;
            v10 = v10 + v39;
            --v37;
          }
          while (v37);
          swift_bridgeObjectRelease(v24);
LABEL_6:
          swift_bridgeObjectRelease(v31);
          sub_62CC(v17, v18, v52, v36, v54, v53, v16);
          result = sub_6228(__dst);
          if (v10 > 0.0)
          {
            *(unint64_t *)((char *)v43 + ((v47 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v47;
            if (__OFADD__(v44, 1))
              goto LABEL_47;
            ++v44;
            if (!v9)
              goto LABEL_11;
          }
          else if (!v9)
          {
            goto LABEL_11;
          }
LABEL_8:
          v11 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
        }
      }
      v15 = v13 + 3;
      if (v15 < v46)
      {
        v14 = *(_QWORD *)(v45 + 8 * v15);
        if (v14)
        {
          v3 = v15;
          goto LABEL_24;
        }
        while (1)
        {
          v3 = v15 + 1;
          if (__OFADD__(v15, 1))
            goto LABEL_46;
          if (v3 >= v46)
            break;
          v14 = *(_QWORD *)(v45 + 8 * v3);
          ++v15;
          if (v14)
            goto LABEL_24;
        }
      }
    }
LABEL_44:
    swift_retain(a3);
    return (unint64_t *)sub_C38C4(v43, a2, v44, a3);
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

_QWORD *sub_49FEC(_QWORD *result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  int64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;

  v4 = a3 >> 1;
  if (a3 >> 1 == a2)
    return _swiftEmptyArrayStorage;
  v6 = a4;
  v7 = a4 + 56;
  v5 = _swiftEmptyArrayStorage;
  v8 = a2;
  v27 = result;
  v28 = a2;
  do
  {
    v26 = v5;
    v9 = v8;
    while (1)
    {
      if (v9 < a2 || v8 >= v4)
      {
        __break(1u);
        return result;
      }
      v10 = &result[10 * v8];
      v11 = *v10;
      v32 = *((_BYTE *)v10 + 8);
      v31 = v10[2];
      v30 = *((_BYTE *)v10 + 24);
      v12 = v10[4];
      v13 = *((_BYTE *)v10 + 40);
      v14 = v10[6];
      v29 = v10[7];
      v33 = v10[8];
      v15 = v10[9];
      ++v8;
      if (!*(_QWORD *)(v6 + 16))
        break;
      v16 = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), v11);
      v17 = -1 << *(_BYTE *)(v6 + 32);
      v18 = v16 & ~v17;
      if (((*(_QWORD *)(v7 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
        break;
      v19 = *(_QWORD *)(v6 + 48);
      if (*(_QWORD *)(v19 + 8 * v18) != v11)
      {
        v20 = ~v17;
        do
        {
          v18 = (v18 + 1) & v20;
          if (((*(_QWORD *)(v7 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
            goto LABEL_15;
        }
        while (*(_QWORD *)(v19 + 8 * v18) != v11);
      }
      result = v27;
      a2 = v28;
      if (v8 == v4)
        return v26;
    }
LABEL_15:
    sub_40554(v12, v13);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v14);
    v5 = v26;
    if ((swift_isUniquelyReferenced_nonNull_native(v26) & 1) == 0)
    {
      sub_342E4(0, v26[2] + 1, 1);
      v5 = v26;
    }
    v22 = v5[2];
    v21 = v5[3];
    v23 = v22 + 1;
    if (v22 >= v21 >> 1)
    {
      sub_342E4(v21 > 1, v22 + 1, 1);
      v23 = v22 + 1;
      v5 = v26;
    }
    v5[2] = v23;
    v24 = &v5[10 * v22];
    v24[4] = v11;
    *((_BYTE *)v24 + 40) = v32;
    v24[6] = v31;
    *((_BYTE *)v24 + 56) = v30;
    v24[8] = v12;
    *((_BYTE *)v24 + 72) = v13;
    a2 = v28;
    v24[10] = v14;
    v24[11] = v29;
    v24[12] = v33;
    v24[13] = v15;
    v6 = a4;
    result = v27;
  }
  while (v8 != v4);
  return v5;
}

_QWORD *sub_4A23C(int64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  _BOOL4 v10;
  BOOL v11;
  _QWORD *result;
  BOOL v14;
  int64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  BOOL v20;
  int64_t v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  BOOL v26;
  int64_t v27;
  int64_t v28;

  v6 = a2;
  v7 = a1;
  v8 = 0;
  v9 = a1;
  while (1)
  {
    v10 = v9 <= a2;
    if (a3 > 0)
      v10 = v9 >= a2;
    if (v10)
      break;
    v11 = __OFADD__(v9, a3);
    v9 += a3;
    if (v11)
      v9 = (v9 >> 63) ^ 0x8000000000000000;
    v11 = __OFADD__(v8++, 1);
    if (v11)
    {
      __break(1u);
      break;
    }
  }
  result = (_QWORD *)sub_3429C(0, v8, 0);
  v28 = v6;
  if (v8)
  {
    v27 = *(_QWORD *)(a5 + 16);
    while (1)
    {
      v14 = v7 <= v6;
      if (a3 > 0)
        v14 = v7 >= v6;
      if (v14)
        break;
      if (__OFADD__(v7, a3))
        v15 = ((v7 + a3) >> 63) ^ 0x8000000000000000;
      else
        v15 = v7 + a3;
      if (__OFADD__(v7, a4))
        goto LABEL_49;
      if (v27 >= v7 + a4)
        v16 = v7 + a4;
      else
        v16 = v27;
      if (v16 < v7)
        goto LABEL_50;
      if (v7 < 0)
        goto LABEL_51;
      v18 = _swiftEmptyArrayStorage[2];
      v17 = _swiftEmptyArrayStorage[3];
      result = (_QWORD *)swift_unknownObjectRetain(a5);
      if (v18 >= v17 >> 1)
        result = (_QWORD *)sub_3429C(v17 > 1, v18 + 1, 1);
      _swiftEmptyArrayStorage[2] = v18 + 1;
      v19 = &_swiftEmptyArrayStorage[4 * v18];
      v19[4] = a5;
      v19[5] = a5 + 32;
      v19[6] = v7;
      v19[7] = (2 * v16) | 1;
      v7 = v15;
      --v8;
      v6 = v28;
      if (!v8)
        goto LABEL_29;
    }
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
  }
  else
  {
    v15 = v7;
LABEL_29:
    v20 = v15 <= v6;
    if (a3 > 0)
      v20 = v15 >= v6;
    if (v20)
      return _swiftEmptyArrayStorage;
    while (1)
    {
      v21 = __OFADD__(v15, a3) ? ((v15 + a3) >> 63) ^ 0x8000000000000000 : v15 + a3;
      if (__OFADD__(v15, a4))
        break;
      if (*(_QWORD *)(a5 + 16) >= v15 + a4)
        v22 = v15 + a4;
      else
        v22 = *(_QWORD *)(a5 + 16);
      if (v22 < v15)
        goto LABEL_53;
      if (v15 < 0)
        goto LABEL_54;
      v24 = _swiftEmptyArrayStorage[2];
      v23 = _swiftEmptyArrayStorage[3];
      result = (_QWORD *)swift_unknownObjectRetain(a5);
      if (v24 >= v23 >> 1)
        result = (_QWORD *)sub_3429C(v23 > 1, v24 + 1, 1);
      _swiftEmptyArrayStorage[2] = v24 + 1;
      v25 = &_swiftEmptyArrayStorage[4 * v24];
      v25[4] = a5;
      v25[5] = a5 + 32;
      v25[6] = v15;
      v25[7] = (2 * v22) | 1;
      v26 = v21 <= v28;
      if (a3 > 0)
        v26 = v21 >= v28;
      v15 = v21;
      if (v26)
        return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
  return result;
}

unint64_t sub_4A4B8(int a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v5;

  return sub_4643C(a1, a2, a3, a4, a5, *(_BYTE *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32));
}

uint64_t sub_4A4C4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *))
{
  uint64_t v3;
  int64_t v5;
  char *v6;
  uint64_t result;
  char v8;
  unint64_t v9;
  __int128 *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  char *v43;
  char *v44;
  unint64_t v45;
  __int128 v46;
  char *v47;
  uint64_t v49[4];
  _BYTE v50[545];
  _QWORD v51[73];
  uint64_t __dst[73];
  _BYTE v53[577];
  char *v54;
  char *v55;

  v3 = a2;
  v42 = *(void **)(a1 + 16);
  v39 = *(_QWORD *)(a2 + 16);
  if (v39 >= (unint64_t)v42)
    v5 = *(_QWORD *)(a1 + 16);
  else
    v5 = *(_QWORD *)(a2 + 16);
  v54 = (char *)_swiftEmptyArrayStorage;
  sub_34280(0, v5, 0);
  v6 = (char *)_swiftEmptyArrayStorage;
  v40 = v3;
  v36 = a1;
  if (v5)
  {
    v37 = a1 + 32;
    swift_bridgeObjectRetain(a1);
    result = swift_bridgeObjectRetain(v3);
    v45 = 0;
    v41 = 0;
    v8 = 0;
    while (1)
    {
      v55 = v6;
      if ((v8 & 1) != 0)
      {
        sub_4AA8C(__dst);
        sub_4A97C((uint64_t)__dst, (uint64_t)v53);
        v8 = 1;
      }
      else
      {
        v9 = (unint64_t)v42;
        if ((void *)v45 == v42)
          goto LABEL_11;
        if (v45 >= (unint64_t)v42)
          goto LABEL_40;
        v9 = v45 + 1;
        if (v41 == v39)
        {
LABEL_11:
          sub_4AA8C(__dst);
          sub_4A97C((uint64_t)__dst, (uint64_t)v53);
          v8 = 1;
        }
        else
        {
          if (v41 >= v39)
            goto LABEL_41;
          v10 = (__int128 *)(v37 + 32 * v45);
          v46 = *v10;
          v38 = v10[1];
          v11 = (const void *)(v3 + 32 + 552 * v41);
          memcpy(__dst, v11, 0x221uLL);
          ++v41;
          *(_OWORD *)v53 = v46;
          *(_OWORD *)&v53[16] = v38;
          memcpy(&v53[32], v11, 0x221uLL);
          AuthorRecommendationSource.id.getter(v53);
          swift_unknownObjectRetain(v46);
          sub_6100(__dst);
          v8 = 0;
        }
        v45 = v9;
      }
      sub_4A97C((uint64_t)v53, (uint64_t)v51);
      sub_4A97C((uint64_t)v51, (uint64_t)__dst);
      result = sub_4A9C4(__dst);
      if ((_DWORD)result == 1)
        goto LABEL_42;
      v12 = *(_QWORD *)v53;
      v13 = *(_QWORD *)&v53[8];
      v14 = *(_QWORD *)&v53[16];
      v15 = *(_QWORD *)&v53[24];
      v16 = a3(*(_QWORD *)v53, *(_QWORD *)&v53[8], *(_QWORD *)&v53[16], *(_QWORD *)&v53[24], &v53[32]);
      memcpy(v50, &v53[32], sizeof(v50));
      v49[0] = v12;
      v49[1] = v13;
      v49[2] = v14;
      v49[3] = v15;
      result = (uint64_t)sub_4A9DC(v49);
      v6 = v55;
      v54 = v55;
      v18 = *((_QWORD *)v55 + 2);
      v17 = *((_QWORD *)v55 + 3);
      if (v18 >= v17 >> 1)
      {
        result = sub_34280(v17 > 1, v18 + 1, 1);
        v6 = v54;
      }
      *((_QWORD *)v6 + 2) = v18 + 1;
      *(_QWORD *)&v6[8 * v18 + 32] = v16;
      if (!--v5)
      {
        if ((v8 & 1) != 0)
        {
          v19 = v6;
          v20 = v3;
          goto LABEL_30;
        }
        v22 = v41;
        v21 = v45;
        goto LABEL_23;
      }
    }
  }
  swift_bridgeObjectRetain(a1);
  result = swift_bridgeObjectRetain(v3);
  v21 = 0;
  v22 = 0;
LABEL_23:
  v23 = v39;
  v55 = (char *)(v22 - v39);
  if (v22 > v39)
    v23 = v22;
  v24 = (unint64_t)v42;
  v47 = (char *)(v21 - (_QWORD)v42);
  if (v21 > (unint64_t)v42)
    v24 = v21;
  if ((void *)v21 != v42)
  {
    v25 = 0;
    v26 = 552 * v22 + 32;
    v27 = (uint64_t *)(v36 + 32 * v21 + 56);
    v43 = (char *)(v22 - v23);
    v44 = (char *)(v21 - v24);
    while (v44 != v25)
    {
      if (v55 == v25)
        goto LABEL_29;
      if (v43 == v25)
        goto LABEL_39;
      v28 = *(v27 - 3);
      v29 = *(v27 - 2);
      v31 = *(v27 - 1);
      v30 = *v27;
      v32 = (const void *)(v3 + v26);
      memcpy(v51, v32, 0x221uLL);
      __dst[0] = v28;
      __dst[1] = v29;
      __dst[2] = v31;
      __dst[3] = v30;
      memcpy(&__dst[4], v32, 0x221uLL);
      memcpy(v53, __dst, sizeof(v53));
      swift_unknownObjectRetain(v28);
      sub_6100(v51);
      v33 = a3(v28, v29, v31, v30, &v53[32]);
      result = (uint64_t)sub_4A9DC(__dst);
      v54 = v6;
      v35 = *((_QWORD *)v6 + 2);
      v34 = *((_QWORD *)v6 + 3);
      if (v35 >= v34 >> 1)
      {
        result = sub_34280(v34 > 1, v35 + 1, 1);
        v6 = v54;
      }
      *((_QWORD *)v6 + 2) = v35 + 1;
      *(_QWORD *)&v6[8 * v35 + 32] = v33;
      v26 += 552;
      --v25;
      v27 += 4;
      v3 = v40;
      if (v47 == v25)
        goto LABEL_29;
    }
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    return result;
  }
LABEL_29:
  v19 = v6;
  v20 = v3;
LABEL_30:
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v36);
  return (uint64_t)v19;
}

unint64_t sub_4A930()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F14A8;
  if (!qword_1F14A8)
  {
    v1 = sub_5F68(&qword_1F1378);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1F14A8);
  }
  return result;
}

uint64_t sub_4A97C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5EDC(&qword_1F14B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_4A9C4(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t *sub_4A9DC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = a1[6];
  v4 = a1[15];
  v5 = a1[16];
  v6 = a1[17];
  v7 = a1[18];
  v8 = a1[19];
  v9 = a1[20];
  v11 = a1[14];
  v12 = a1[71];
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(v3);
  swift_unknownObjectRelease(v2);
  sub_62CC(v11, v4, v5, v6, v7, v8, v9);
  swift_bridgeObjectRelease(v12);
  return a1;
}

void sub_4AA8C(void *a1)
{
  bzero(a1, 0x241uLL);
}

unint64_t sub_4AA94()
{
  unint64_t result;

  result = qword_1F14C0;
  if (!qword_1F14C0)
  {
    result = swift_getWitnessTable(&unk_18CD60, &type metadata for SeedBookRecommendationWork.Errors);
    atomic_store(result, (unint64_t *)&qword_1F14C0);
  }
  return result;
}

unint64_t sub_4AAD8()
{
  unint64_t result;

  result = qword_1F14D0;
  if (!qword_1F14D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1F14D0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SeedBookRecommendationWork.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_4AB68 + 4 * byte_18CBB5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_4AB9C + 4 * byte_18CBB0[v4]))();
}

uint64_t sub_4AB9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_4ABA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x4ABACLL);
  return result;
}

uint64_t sub_4ABB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x4ABC0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_4ABC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_4ABCC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SeedBookRecommendationWork.Errors()
{
  return &type metadata for SeedBookRecommendationWork.Errors;
}

uint64_t getEnumTagSinglePayload for SeedBookRecommendationWork.Recommendation(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SeedBookRecommendationWork.Recommendation(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SeedBookRecommendationWork.Recommendation()
{
  return &type metadata for SeedBookRecommendationWork.Recommendation;
}

uint64_t destroy for SeedBookRecommendationWork.Context(_QWORD *a1)
{
  swift_release(*a1);
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  return swift_bridgeObjectRelease(a1[7]);
}

uint64_t *initializeWithCopy for SeedBookRecommendationWork.Context(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  a1[8] = a2[8];
  swift_retain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t *assignWithCopy for SeedBookRecommendationWork.Context(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[6] = a2[6];
  v12 = a2[7];
  v13 = a1[7];
  a1[7] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[8] = a2[8];
  return a1;
}

__n128 initializeWithTake for InternalAffinitySource(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

_QWORD *assignWithTake for SeedBookRecommendationWork.Context(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = a1[3];
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v5;
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = a1[5];
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v7;
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 56);
  v10 = a1[7];
  a1[6] = *(_QWORD *)(a2 + 48);
  a1[7] = v9;
  swift_bridgeObjectRelease(v10);
  a1[8] = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for SeedBookRecommendationWork.Context(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SeedBookRecommendationWork.Context(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SeedBookRecommendationWork.Context()
{
  return &type metadata for SeedBookRecommendationWork.Context;
}

unint64_t sub_4AF08()
{
  unint64_t result;

  result = qword_1F14E8;
  if (!qword_1F14E8)
  {
    result = swift_getWitnessTable(&unk_18CD38, &type metadata for SeedBookRecommendationWork.Errors);
    atomic_store(result, (unint64_t *)&qword_1F14E8);
  }
  return result;
}

void Scorer.id.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *ForYouOptions.init(mediaType:excludedStoreIDs:hydratedBooksFetchLimit:)@<X0>(_BYTE *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_BYTE *)a4 = *result;
  *(_QWORD *)(a4 + 8) = a2;
  *(_QWORD *)(a4 + 16) = a3;
  return result;
}

uint64_t sub_4AF6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for ForYouOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for ForYouOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ForYouOptions(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ForYouOptions(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ForYouOptions()
{
  return &type metadata for ForYouOptions;
}

BOOL static EventType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_4B0E4()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x6F6874754178616DLL;
  if (*v0 != 1)
    v1 = 0xD000000000000018;
  if (*v0)
    return v1;
  else
    return 0x65726E654778616DLL;
}

uint64_t sub_4B154@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_4B800(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_4B178(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_4B324();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_4B1A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_4B324();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t TabiConfiguration.BookScoringConfiguration.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;

  v4 = sub_5EDC(&qword_1F14F8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v18 = v1[2];
  v19 = v8;
  v17 = v1[3];
  v10 = a1[3];
  v11 = a1[4];
  sub_49F4(a1, v10);
  v12 = sub_4B324();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s24BookScoringConfigurationV10CodingKeysON, &_s24BookScoringConfigurationV10CodingKeysON, v12, v10, v11);
  v22 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v9, &v22, v4);
  if (!v2)
  {
    v14 = v17;
    v13 = v18;
    v21 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v19, &v21, v4);
    v20 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v14, &v20, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_4B324()
{
  unint64_t result;

  result = qword_1F1500;
  if (!qword_1F1500)
  {
    result = swift_getWitnessTable(&unk_18CF3C, &_s24BookScoringConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F1500);
  }
  return result;
}

uint64_t TabiConfiguration.BookScoringConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;

  v5 = sub_5EDC(&qword_1F1508);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_4B324();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s24BookScoringConfigurationV10CodingKeysON, &_s24BookScoringConfigurationV10CodingKeysON, v11, v9, v10);
  if (!v2)
  {
    v22 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v22, v5);
    v21 = 1;
    v13 = KeyedDecodingContainer.decode(_:forKey:)(&v21, v5);
    v20 = 2;
    v15 = KeyedDecodingContainer.decode(_:forKey:)(&v20, v5);
    v16 = v8;
    v18 = v17;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v16, v5);
    *a2 = v12;
    a2[1] = v13;
    a2[2] = v15;
    a2[3] = v18;
  }
  return sub_62F8(a1);
}

uint64_t sub_4B4E0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return TabiConfiguration.BookScoringConfiguration.init(from:)(a1, a2);
}

uint64_t sub_4B4F4(_QWORD *a1)
{
  return TabiConfiguration.BookScoringConfiguration.encode(to:)(a1);
}

uint64_t _s24BookScoringConfigurationVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *_s24BookScoringConfigurationVwca(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v3 = a2[3];
  v4 = a1[3];
  a1[3] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t _s24BookScoringConfigurationVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t _s24BookScoringConfigurationVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s24BookScoringConfigurationVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TabiConfiguration.BookScoringConfiguration()
{
  return &type metadata for TabiConfiguration.BookScoringConfiguration;
}

uint64_t _s24BookScoringConfigurationV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_4B6A8 + 4 * byte_18CE05[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_4B6DC + 4 * asc_18CE00[v4]))();
}

uint64_t sub_4B6DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_4B6E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x4B6ECLL);
  return result;
}

uint64_t sub_4B6F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x4B700);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_4B704(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_4B70C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s24BookScoringConfigurationV10CodingKeysOMa()
{
  return &_s24BookScoringConfigurationV10CodingKeysON;
}

unint64_t sub_4B72C()
{
  unint64_t result;

  result = qword_1F1510;
  if (!qword_1F1510)
  {
    result = swift_getWitnessTable(&unk_18CF14, &_s24BookScoringConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F1510);
  }
  return result;
}

unint64_t sub_4B774()
{
  unint64_t result;

  result = qword_1F1518;
  if (!qword_1F1518)
  {
    result = swift_getWitnessTable(&unk_18CE84, &_s24BookScoringConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F1518);
  }
  return result;
}

unint64_t sub_4B7BC()
{
  unint64_t result;

  result = qword_1F1520;
  if (!qword_1F1520)
  {
    result = swift_getWitnessTable(&unk_18CEAC, &_s24BookScoringConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F1520);
  }
  return result;
}

uint64_t sub_4B800(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x65726E654778616DLL && a2 == 0xEB00000000734449)
  {
    v5 = 0xEB00000000734449;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65726E654778616DLL, 0xEB00000000734449, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6F6874754178616DLL && a2 == 0xEC00000073444972)
  {
    v7 = 0xEC00000073444972;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F6874754178616DLL, 0xEC00000073444972, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x80000000001A01F0)
  {
    swift_bridgeObjectRelease(0x80000000001A01F0);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x80000000001A01F0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_4B980()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_5235C(v0, qword_1F1528);
  sub_5216C(v0, (uint64_t)qword_1F1528);
  return Logger.init(subsystem:category:)(0xD000000000000010, 0x80000000001A0280, 0xD00000000000002ALL, 0x800000000018CF90);
}

uint64_t sub_4B9FC(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v7;
  _BYTE v8[24];

  swift_beginAccess(a2 + 16, v8, 33, 0);
  swift_bridgeObjectRetain(a1);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a2 + 16));
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0x8000000000000000;
  sub_4D33C(a1, (uint64_t)sub_4ECBC, 0, isUniquelyReferenced_nonNull_native, &v7);
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v7;
  swift_bridgeObjectRelease(v5);
  return swift_endAccess(v8);
}

uint64_t sub_4BA98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  return swift_task_switch(sub_4BAB8, 0, 0);
}

uint64_t sub_4BAB8()
{
  _QWORD *v0;
  uint64_t v1;
  int64_t v2;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v1 = v0[3];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    sub_342E4(0, v2, 0);
    v3 = (_QWORD *)(v1 + 104);
    do
    {
      v20 = *(v3 - 9);
      v19 = *((_BYTE *)v3 - 64);
      v18 = *(v3 - 7);
      v17 = *((_BYTE *)v3 - 48);
      v4 = *(v3 - 5);
      v5 = *((_BYTE *)v3 - 32);
      v6 = *(v3 - 3);
      v16 = *(v3 - 2);
      v7 = *(v3 - 1);
      v8 = *v3;
      sub_40554(v4, v5);
      v9 = _swiftEmptyArrayStorage[2];
      v10 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRetain(v7);
      if (v9 >= v10 >> 1)
        sub_342E4(v10 > 1, v9 + 1, 1);
      _swiftEmptyArrayStorage[2] = v9 + 1;
      v11 = &_swiftEmptyArrayStorage[10 * v9];
      v11[4] = v20;
      *((_BYTE *)v11 + 40) = v19;
      v11[6] = v18;
      *((_BYTE *)v11 + 56) = v17;
      v11[8] = v4;
      *((_BYTE *)v11 + 72) = v5;
      v11[10] = v6;
      v11[11] = v16;
      v11[12] = v7;
      v11[13] = v8;
      v3 += 14;
      --v2;
    }
    while (v2);
    v0 = v15;
  }
  v0[7] = _swiftEmptyArrayStorage;
  v12 = (_QWORD *)swift_task_alloc(dword_1F164C);
  v0[8] = v12;
  *v12 = v0;
  v12[1] = sub_4BC5C;
  v13 = v0[2];
  v12[2] = _swiftEmptyArrayStorage;
  v12[3] = v13;
  return swift_task_switch(sub_4BD7C, 0, 0);
}

uint64_t sub_4BC5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 64);
  *(_QWORD *)(*v2 + 72) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_4BD30;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v4 + 56));
    *(_QWORD *)(v4 + 80) = a1;
    v6 = sub_4BCD8;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_4BCD8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  (*(void (**)(uint64_t))(v0 + 32))(v1);
  swift_bridgeObjectRelease(v1);
  OS_dispatch_semaphore.signal()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_4BD30()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_4BD64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch(sub_4BD7C, 0, 0);
}

uint64_t sub_4BD7C()
{
  _QWORD *v0;
  uint64_t v1;
  int64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t result;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  _QWORD *v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  int64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;

  v1 = v0[2];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v36 = (uint64_t *)(v1 + 32);
    v3 = (_QWORD *)(swift_bridgeObjectRetain(v1) + 104);
    v37 = v2;
    while (1)
    {
      v39 = v2;
      v7 = *(v3 - 9);
      v40 = *((_BYTE *)v3 - 64);
      v41 = *(v3 - 7);
      v42 = *((_BYTE *)v3 - 48);
      v8 = *(v3 - 5);
      v9 = *((_BYTE *)v3 - 32);
      v10 = *(v3 - 3);
      v43 = *(v3 - 2);
      v11 = *(v3 - 1);
      v12 = *v3;
      sub_40554(v8, v9);
      v44 = v11;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v10);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      v15 = sub_39228(v7);
      v16 = _swiftEmptyDictionarySingleton[2];
      v17 = (v14 & 1) == 0;
      result = v16 + v17;
      if (__OFADD__(v16, v17))
      {
        __break(1u);
LABEL_23:
        __break(1u);
        return result;
      }
      v19 = v14;
      if (_swiftEmptyDictionarySingleton[3] >= result)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v14 & 1) == 0)
            goto LABEL_12;
        }
        else
        {
          result = (uint64_t)sub_16BAEC();
          if ((v19 & 1) == 0)
            goto LABEL_12;
        }
      }
      else
      {
        sub_15B368(result, isUniquelyReferenced_nonNull_native);
        result = sub_39228(v7);
        if ((v19 & 1) != (v20 & 1))
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
        v15 = result;
        if ((v19 & 1) == 0)
        {
LABEL_12:
          _swiftEmptyDictionarySingleton[(v15 >> 6) + 8] |= 1 << v15;
          *(_QWORD *)(_swiftEmptyDictionarySingleton[6] + 8 * v15) = v7;
          v21 = _swiftEmptyDictionarySingleton[7] + 80 * v15;
          *(_QWORD *)v21 = v7;
          *(_BYTE *)(v21 + 8) = v40;
          *(_QWORD *)(v21 + 16) = v41;
          *(_BYTE *)(v21 + 24) = v42;
          *(_QWORD *)(v21 + 32) = v8;
          *(_BYTE *)(v21 + 40) = v9;
          *(_QWORD *)(v21 + 48) = v10;
          *(_QWORD *)(v21 + 56) = v43;
          *(_QWORD *)(v21 + 64) = v11;
          *(_QWORD *)(v21 + 72) = v12;
          v22 = _swiftEmptyDictionarySingleton[2];
          v23 = __OFADD__(v22, 1);
          v24 = v22 + 1;
          if (v23)
            goto LABEL_23;
          _swiftEmptyDictionarySingleton[2] = v24;
          goto LABEL_4;
        }
      }
      v4 = _swiftEmptyDictionarySingleton[7] + 80 * v15;
      v5 = *(_QWORD *)(v4 + 48);
      v6 = *(_QWORD *)(v4 + 64);
      sub_40568(*(_QWORD *)(v4 + 32), *(_BYTE *)(v4 + 40));
      swift_bridgeObjectRelease(v5);
      swift_bridgeObjectRelease(v6);
      *(_QWORD *)v4 = v7;
      *(_BYTE *)(v4 + 8) = v40;
      *(_QWORD *)(v4 + 16) = v41;
      *(_BYTE *)(v4 + 24) = v42;
      *(_QWORD *)(v4 + 32) = v8;
      *(_BYTE *)(v4 + 40) = v9;
      *(_QWORD *)(v4 + 48) = v10;
      *(_QWORD *)(v4 + 56) = v43;
      *(_QWORD *)(v4 + 64) = v44;
      *(_QWORD *)(v4 + 72) = v12;
LABEL_4:
      swift_bridgeObjectRelease(0x8000000000000000);
      v3 += 10;
      v2 = v39 - 1;
      if (v39 == 1)
      {
        v0 = v38;
        swift_bridgeObjectRelease(v38[2]);
        v25 = v37;
        sub_340AC(0, v37, 0);
        v26 = _swiftEmptyArrayStorage[2];
        v27 = v36;
        do
        {
          v29 = *v27;
          v27 += 10;
          v28 = v29;
          v30 = _swiftEmptyArrayStorage[3];
          if (v26 >= v30 >> 1)
            sub_340AC(v30 > 1, v26 + 1, 1);
          _swiftEmptyArrayStorage[2] = v26 + 1;
          _swiftEmptyArrayStorage[v26++ + 4] = v28;
          --v25;
        }
        while (v25);
        break;
      }
    }
  }
  v0[4] = _swiftEmptyArrayStorage;
  v0[5] = _swiftEmptyDictionarySingleton;
  v31 = (_QWORD *)v0[3];
  v32 = v31[5];
  v33 = v31[6];
  sub_49F4(v31 + 2, v32);
  v34 = *(int **)(v33 + 16);
  v45 = (int *)((char *)v34 + *v34);
  v35 = (_QWORD *)swift_task_alloc(v34[1]);
  v0[6] = v35;
  *v35 = v0;
  v35[1] = sub_4C110;
  return ((uint64_t (*)(_QWORD *, uint64_t, uint64_t))v45)(_swiftEmptyArrayStorage, v32, v33);
}

uint64_t sub_4C110(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 48);
  v3[7] = a1;
  v3[8] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_4C5F0;
  }
  else
  {
    swift_bridgeObjectRelease(v3[4]);
    v5 = sub_4C184;
  }
  return swift_task_switch(v5, 0, 0);
}

void sub_4C184()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  _BOOL8 v26;
  BOOL v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  unsigned int isUniquelyReferenced_nonNull_native;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;

  v1 = 0;
  v2 = *(_QWORD *)(v0 + 56);
  v3 = v2 + 64;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & *(_QWORD *)(v2 + 64);
  v7 = (unint64_t)(63 - v5) >> 6;
  v46 = &_swiftEmptyDictionarySingleton;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v1 << 6);
      goto LABEL_20;
    }
    v10 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
LABEL_39:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
      return;
    }
    if (v10 >= v7)
      goto LABEL_37;
    v11 = *(_QWORD *)(v3 + 8 * v10);
    ++v1;
    if (!v11)
    {
      v1 = v10 + 1;
      if (v10 + 1 >= v7)
        goto LABEL_37;
      v11 = *(_QWORD *)(v3 + 8 * v1);
      if (!v11)
      {
        v1 = v10 + 2;
        if (v10 + 2 >= v7)
          goto LABEL_37;
        v11 = *(_QWORD *)(v3 + 8 * v1);
        if (!v11)
          break;
      }
    }
LABEL_19:
    v6 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v1 << 6);
LABEL_20:
    v13 = (unsigned __int8 *)(*(_QWORD *)(v2 + 56) + 72 * v9);
    if ((v13[32] & 1) == 0)
    {
      if (*(_QWORD *)(v49 + 16))
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v9);
        v15 = *v13;
        v16 = *((_QWORD *)v13 + 3);
        v17 = sub_39228(v14);
        if ((v18 & 1) != 0)
        {
          v19 = *(_QWORD *)(v49 + 56) + 80 * v17;
          v20 = *(_QWORD *)(v19 + 32);
          v42 = *(_BYTE *)(v19 + 40);
          v40 = *(_QWORD *)(v19 + 56);
          v44 = *(_QWORD *)(v19 + 48);
          v45 = *(_QWORD *)(v19 + 64);
          v21 = *(_QWORD *)(v19 + 72);
          if (v15)
          {
            v41 = 0xE90000000000006BLL;
            v39 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F6F626F69647561, 0xE90000000000006BLL, 0x6B6F6F6265, 0xE500000000000000, 0);
          }
          else
          {
            v39 = 1;
            v41 = 0xE500000000000000;
          }
          sub_40554(v20, v42);
          swift_bridgeObjectRetain_n(v45, 2);
          swift_bridgeObjectRetain_n(v44, 2);
          swift_bridgeObjectRelease(v41);
          sub_40568(v20, v42);
          swift_bridgeObjectRelease(v44);
          swift_bridgeObjectRelease(v45);
          v22 = v46;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v46);
          v50 = v46;
          v23 = sub_39228(v14);
          v25 = v46[2];
          v26 = (v24 & 1) == 0;
          v27 = __OFADD__(v25, v26);
          v28 = v25 + v26;
          if (v27)
            goto LABEL_41;
          v29 = v24;
          if (v46[3] < v28)
          {
            sub_15B368(v28, isUniquelyReferenced_nonNull_native);
            v22 = v46;
            v23 = sub_39228(v14);
            if ((v29 & 1) != (v30 & 1))
              goto LABEL_39;
LABEL_31:
            v46 = v22;
            if ((v29 & 1) != 0)
              goto LABEL_32;
            goto LABEL_34;
          }
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            goto LABEL_31;
          v47 = v24;
          v34 = v23;
          sub_16BAEC();
          v23 = v34;
          LOBYTE(v34) = v47;
          v22 = v50;
          v46 = v50;
          if ((v34 & 1) != 0)
          {
LABEL_32:
            v31 = v22[7] + 80 * v23;
            v32 = *(_QWORD *)(v31 + 48);
            v33 = *(_QWORD *)(v31 + 64);
            sub_40568(*(_QWORD *)(v31 + 32), *(_BYTE *)(v31 + 40));
            swift_bridgeObjectRelease(v32);
            swift_bridgeObjectRelease(v33);
            *(_QWORD *)v31 = v16;
            *(_BYTE *)(v31 + 8) = v39 & 1;
            *(_QWORD *)(v31 + 16) = 0;
            *(_BYTE *)(v31 + 24) = 1;
            *(_QWORD *)(v31 + 32) = 0;
            *(_BYTE *)(v31 + 40) = -1;
            *(_QWORD *)(v31 + 48) = v44;
            *(_QWORD *)(v31 + 56) = v40;
            *(_QWORD *)(v31 + 64) = v45;
            *(_QWORD *)(v31 + 72) = v21;
            goto LABEL_36;
          }
LABEL_34:
          v22[(v23 >> 6) + 8] |= 1 << v23;
          *(_QWORD *)(v22[6] + 8 * v23) = v14;
          v35 = v22[7] + 80 * v23;
          *(_QWORD *)v35 = v16;
          *(_BYTE *)(v35 + 8) = v39 & 1;
          *(_QWORD *)(v35 + 16) = 0;
          *(_BYTE *)(v35 + 24) = 1;
          *(_QWORD *)(v35 + 32) = 0;
          *(_BYTE *)(v35 + 40) = -1;
          *(_QWORD *)(v35 + 48) = v44;
          *(_QWORD *)(v35 + 56) = v40;
          *(_QWORD *)(v35 + 64) = v45;
          *(_QWORD *)(v35 + 72) = v21;
          v36 = v22[2];
          v27 = __OFADD__(v36, 1);
          v37 = v36 + 1;
          if (v27)
            goto LABEL_42;
          v22[2] = v37;
LABEL_36:
          swift_bridgeObjectRelease(0x8000000000000000);
        }
      }
    }
  }
  v12 = v10 + 3;
  if (v12 >= v7)
  {
LABEL_37:
    v38 = *(_QWORD *)(v48 + 40);
    swift_release(*(_QWORD *)(v48 + 56));
    swift_bridgeObjectRelease(v38);
    (*(void (**)(_QWORD *))(v48 + 8))(v46);
    return;
  }
  v11 = *(_QWORD *)(v3 + 8 * v12);
  if (v11)
  {
    v1 = v12;
    goto LABEL_19;
  }
  while (1)
  {
    v1 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v1 >= v7)
      goto LABEL_37;
    v11 = *(_QWORD *)(v3 + 8 * v1);
    ++v12;
    if (v11)
      goto LABEL_19;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
}

uint64_t sub_4C5F0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_4C62C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned __int8 v16;
  _QWORD v18[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_417D8(a1, &qword_1F15F0);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (!v9)
    {
LABEL_6:
      v15 = 0;
      return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v16 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (!v9)
      goto LABEL_6;
  }
  v10 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType(v9);
  swift_unknownObjectRetain(v9);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
  v14 = v13;
  swift_unknownObjectRelease(v9);
  if (!(v14 | v12))
    goto LABEL_6;
  v18[0] = 0;
  v18[1] = 0;
  v15 = v18;
  v18[2] = v12;
  v18[3] = v14;
  return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
}

uint64_t sub_4C760()
{
  uint64_t v0;

  sub_62F8((_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for AllCollectionTypesFillingClusteringService()
{
  return objc_opt_self(_TtC20BooksPersonalization42AllCollectionTypesFillingClusteringService);
}

uint64_t sub_4C7A4(_QWORD *a1)
{
  return sub_4F868(a1);
}

Swift::Int sub_4C7CC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_D0AA4(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_4D65C(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_4C834(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  int64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  _QWORD v44[2];
  uint64_t v45;
  char *v46;
  void (*v47)(unint64_t, char *, uint64_t);
  char *v48;
  _QWORD *v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[9];
  _QWORD *v54;

  v2 = sub_5EDC(&qword_1F1630);
  __chkstk_darwin(v2);
  v4 = (char *)v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5EDC(&qword_1F1610);
  v52 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v48 = (char *)v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v46 = (char *)v44 - v8;
  v9 = *(_QWORD *)(a1 + 64);
  v51 = a1 + 64;
  v49 = _swiftEmptyDictionarySingleton;
  v54 = _swiftEmptyDictionarySingleton;
  v10 = -1 << *(_BYTE *)(a1 + 32);
  if (-v10 < 64)
    v11 = ~(-1 << -(char)v10);
  else
    v11 = -1;
  v12 = v11 & v9;
  v44[1] = -1 << *(_BYTE *)(a1 + 32);
  v50 = (unint64_t)(63 - v10) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v14 = 0;
  v45 = v5;
  if (!v12)
    goto LABEL_8;
LABEL_5:
  v15 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  v16 = v15 | (v14 << 6);
  while (1)
  {
    v17 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + v16);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v16);
    v53[0] = v18;
    swift_bridgeObjectRetain_n(v18, 2);
    v19 = sub_5EDC(&qword_1F1638);
    v20 = sub_3EDBC(&qword_1F1640, &qword_1F1638, (uint64_t)&protocol conformance descriptor for [A]);
    NonEmpty.init(_:)(v53, v19, v20);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v4, 1, v5) == 1)
    {
      swift_bridgeObjectRelease(v18);
      result = sub_417D8((uint64_t)v4, &qword_1F1630);
      if (v12)
        goto LABEL_5;
    }
    else
    {
      v25 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
      v26 = v46;
      v25(v46, v4, v5);
      v47 = (void (*)(unint64_t, char *, uint64_t))v25;
      v25(v48, v26, v5);
      v27 = v49;
      v28 = v49[2];
      if (v49[3] <= v28)
      {
        sub_15AF9C(v28 + 1, 1);
        v27 = v54;
      }
      v29 = v27;
      Hasher.init(_seed:)(v53, v27[5]);
      if (v17)
        v30 = 0x6F6F626F69647561;
      else
        v30 = 0x6B6F6F6265;
      if (v17)
        v31 = 0xE90000000000006BLL;
      else
        v31 = 0xE500000000000000;
      String.hash(into:)(v53, v30, v31);
      swift_bridgeObjectRelease(v31);
      result = Hasher._finalize()();
      v32 = v29 + 8;
      v49 = v29;
      v33 = -1 << *((_BYTE *)v29 + 32);
      v34 = result & ~v33;
      v35 = v34 >> 6;
      v36 = (-1 << v34) & ~v29[(v34 >> 6) + 8];
      v5 = v45;
      if (!v36)
      {
        v38 = 0;
        v39 = (unint64_t)(63 - v33) >> 6;
        while (++v35 != v39 || (v38 & 1) == 0)
        {
          v40 = v35 == v39;
          if (v35 == v39)
            v35 = 0;
          v38 |= v40;
          v41 = v32[v35];
          if (v41 != -1)
          {
            v37 = __clz(__rbit64(~v41)) + (v35 << 6);
            goto LABEL_42;
          }
        }
        goto LABEL_46;
      }
      v37 = __clz(__rbit64(v36)) | v34 & 0x7FFFFFFFFFFFFFC0;
LABEL_42:
      *(_QWORD *)((char *)v32 + ((v37 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v37;
      v42 = v48;
      v43 = v49;
      *(_BYTE *)(v49[6] + v37) = v17;
      v47(v43[7] + *(_QWORD *)(v52 + 72) * v37, v42, v5);
      ++v43[2];
      result = swift_bridgeObjectRelease(v18);
      if (v12)
        goto LABEL_5;
    }
LABEL_8:
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    if (v21 >= v50)
      goto LABEL_44;
    v22 = *(_QWORD *)(v51 + 8 * v21);
    v23 = v14 + 1;
    if (!v22)
    {
      v23 = v14 + 2;
      if (v14 + 2 >= v50)
        goto LABEL_44;
      v22 = *(_QWORD *)(v51 + 8 * v23);
      if (!v22)
      {
        v23 = v14 + 3;
        if (v14 + 3 >= v50)
          goto LABEL_44;
        v22 = *(_QWORD *)(v51 + 8 * v23);
        if (!v22)
        {
          v23 = v14 + 4;
          if (v14 + 4 >= v50)
            goto LABEL_44;
          v22 = *(_QWORD *)(v51 + 8 * v23);
          if (!v22)
            break;
        }
      }
    }
LABEL_23:
    v12 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v23 << 6);
    v14 = v23;
  }
  v24 = v14 + 5;
  if (v14 + 5 >= v50)
  {
LABEL_44:
    sub_5FEC(a1);
    return (uint64_t)v49;
  }
  v22 = *(_QWORD *)(v51 + 8 * v24);
  if (v22)
  {
    v23 = v14 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    v23 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v23 >= v50)
      goto LABEL_44;
    v22 = *(_QWORD *)(v51 + 8 * v23);
    ++v24;
    if (v22)
      goto LABEL_23;
  }
LABEL_47:
  __break(1u);
  return result;
}

uint64_t sub_4CCE8(char a1, _QWORD *a2, __int128 *a3)
{
  char v5;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _QWORD *v27;

  v5 = a1 & 1;
  sub_522D8((uint64_t)a3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a2);
  v7 = (_QWORD *)*a2;
  v27 = (_QWORD *)*a2;
  *a2 = 0x8000000000000000;
  v9 = sub_3933C(v5);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    result = (uint64_t)sub_2FFF4(0, v7[2] + 1, 1, v7);
    v7 = (_QWORD *)result;
    a2[v9] = result;
    goto LABEL_10;
  }
  v13 = v8;
  if (v7[3] >= v12)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_16BAE0();
      v7 = v27;
    }
  }
  else
  {
    sub_15B35C(v12, isUniquelyReferenced_nonNull_native);
    v7 = v27;
    v14 = sub_3933C(v5);
    if ((v13 & 1) != (v15 & 1))
    {
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Book.MediaType);
      __break(1u);
      return result;
    }
    v9 = v14;
  }
  v16 = *a2;
  *a2 = v7;
  swift_bridgeObjectRelease(v16);
  v17 = *a2;
  if ((v13 & 1) == 0)
    sub_170D40(v9, v5, (uint64_t)_swiftEmptyArrayStorage, (_QWORD *)*a2);
  a2 = *(_QWORD **)(v17 + 56);
  v7 = (_QWORD *)a2[v9];
  result = swift_isUniquelyReferenced_nonNull_native(v7);
  a2[v9] = v7;
  if ((result & 1) == 0)
    goto LABEL_14;
LABEL_10:
  v20 = v7[2];
  v19 = v7[3];
  if (v20 >= v19 >> 1)
  {
    result = (uint64_t)sub_2FFF4((_QWORD *)(v19 > 1), v20 + 1, 1, v7);
    v7 = (_QWORD *)result;
    a2[v9] = result;
  }
  v7[2] = v20 + 1;
  v21 = &v7[14 * v20];
  v22 = *a3;
  v23 = a3[2];
  v21[3] = a3[1];
  v21[4] = v23;
  v21[2] = v22;
  v24 = a3[3];
  v25 = a3[4];
  v26 = a3[6];
  v21[7] = a3[5];
  v21[8] = v26;
  v21[5] = v24;
  v21[6] = v25;
  return result;
}

uint64_t sub_4CEAC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;

  swift_bridgeObjectRetain(a4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a2);
  v11 = (_QWORD *)*a2;
  v25 = (_QWORD *)*a2;
  *a2 = 0x8000000000000000;
  v13 = sub_39228(a1);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
LABEL_14:
    result = (uint64_t)sub_3055C(0, v11[2] + 1, 1, v11);
    v11 = (_QWORD *)result;
    *(_QWORD *)(a1 + 8 * v13) = result;
    goto LABEL_10;
  }
  v17 = v12;
  if (v11[3] >= v16)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_16C5E4();
      v11 = v25;
    }
  }
  else
  {
    sub_15CC14(v16, isUniquelyReferenced_nonNull_native);
    v11 = v25;
    v18 = sub_39228(a1);
    if ((v17 & 1) != (v19 & 1))
    {
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
      __break(1u);
      return result;
    }
    v13 = v18;
  }
  *a2 = v11;
  swift_bridgeObjectRelease();
  v20 = *a2;
  if ((v17 & 1) == 0)
    sub_170D44(v13, a1, (uint64_t)_swiftEmptyArrayStorage, (_QWORD *)*a2);
  a1 = *(_QWORD *)(v20 + 56);
  v11 = *(_QWORD **)(a1 + 8 * v13);
  result = swift_isUniquelyReferenced_nonNull_native(v11);
  *(_QWORD *)(a1 + 8 * v13) = v11;
  if ((result & 1) == 0)
    goto LABEL_14;
LABEL_10:
  v23 = v11[2];
  v22 = v11[3];
  if (v23 >= v22 >> 1)
  {
    result = (uint64_t)sub_3055C((_QWORD *)(v22 > 1), v23 + 1, 1, v11);
    v11 = (_QWORD *)result;
    *(_QWORD *)(a1 + 8 * v13) = result;
  }
  v11[2] = v23 + 1;
  v24 = &v11[3 * v23];
  v24[4] = a3;
  v24[5] = a4;
  v24[6] = a5;
  return result;
}

_QWORD *sub_4D060(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *result;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t i;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  char v24;
  void (*v25)(char *, unint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;

  v2 = v1;
  v4 = sub_5EDC(&qword_1F1610);
  v32 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v35 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v30 - v7;
  sub_5EDC(&qword_1F1618);
  result = (_QWORD *)static _DictionaryStorage.copy(original:)(a1);
  v10 = 0;
  v36 = a1;
  v13 = *(_QWORD *)(a1 + 64);
  v12 = a1 + 64;
  v11 = v13;
  v14 = 1 << *(_BYTE *)(v12 - 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v11;
  v30 = v12;
  v31 = (unint64_t)(v14 + 63) >> 6;
  v33 = result + 8;
  v34 = result;
  if ((v15 & v11) == 0)
    goto LABEL_5;
LABEL_4:
  v17 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  v37 = v10;
  for (i = v17 | (v10 << 6); ; i = __clz(__rbit64(v21)) + (v20 << 6))
  {
    v23 = v32;
    v24 = *(_BYTE *)(*(_QWORD *)(v36 + 48) + i);
    v25 = *(void (**)(char *, unint64_t, uint64_t))(v32 + 16);
    v25(v8, *(_QWORD *)(v36 + 56) + *(_QWORD *)(v32 + 72) * i, v4);
    v25(v35, (unint64_t)v8, v4);
    v26 = sub_3EDBC(&qword_1F1620, &qword_1F1610, (uint64_t)&protocol conformance descriptor for NonEmpty<A>);
    v38 = dispatch thunk of Sequence._copyToContiguousArray()(v4, v26);
    sub_4C7CC(&v38);
    if (v2)
      break;
    v2 = 0;
    v27 = v38;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v4);
    result = v34;
    *(_QWORD *)((char *)v33 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(_BYTE *)(result[6] + i) = v24;
    *(_QWORD *)(result[7] + 8 * i) = v27;
    v28 = result[2];
    v19 = __OFADD__(v28, 1);
    v29 = v28 + 1;
    if (v19)
    {
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
      break;
    }
    result[2] = v29;
    v10 = v37;
    if (v16)
      goto LABEL_4;
LABEL_5:
    v19 = __OFADD__(v10, 1);
    v20 = v10 + 1;
    if (v19)
      goto LABEL_26;
    if (v20 >= v31)
      return result;
    v21 = *(_QWORD *)(v30 + 8 * v20);
    if (!v21)
    {
      v22 = v20 + 1;
      if (v20 + 1 >= v31)
        return result;
      v21 = *(_QWORD *)(v30 + 8 * v22);
      if (!v21)
      {
        v22 = v20 + 2;
        if (v20 + 2 >= v31)
          return result;
        v21 = *(_QWORD *)(v30 + 8 * v22);
        if (!v21)
        {
          v22 = v20 + 3;
          if (v20 + 3 >= v31)
            return result;
          v21 = *(_QWORD *)(v30 + 8 * v22);
          if (!v21)
          {
            while (1)
            {
              v20 = v22 + 1;
              if (__OFADD__(v22, 1))
                goto LABEL_27;
              if (v20 >= v31)
                return result;
              v21 = *(_QWORD *)(v30 + 8 * v20);
              ++v22;
              if (v21)
                goto LABEL_15;
            }
          }
        }
      }
      v20 = v22;
    }
LABEL_15:
    v16 = (v21 - 1) & v21;
    v37 = v20;
  }
  result = (_QWORD *)swift_release(v38);
  __break(1u);
  return result;
}

uint64_t sub_4D33C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  _QWORD *v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56[2];
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v66 = a1;
  v67 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v68 = v8;
  v69 = 0;
  v70 = v11 & v9;
  v71 = a2;
  v72 = a3;
  swift_bridgeObjectRetain(a1);
  swift_retain(a3);
  sub_4ED30((uint64_t)v56);
  v12 = v62;
  if (v62)
  {
    while (1)
    {
      v54 = v12;
      v26 = v56[0];
      v27 = v56[1];
      v28 = v57;
      v29 = v58;
      v30 = v59;
      v52 = v61;
      v50 = v63;
      v51 = v60;
      v53 = v64;
      v31 = v65;
      v32 = (_QWORD *)*a5;
      v34 = sub_39228(v56[0]);
      v35 = v32[2];
      v36 = (v33 & 1) == 0;
      v37 = v35 + v36;
      if (__OFADD__(v35, v36))
        break;
      v38 = v33;
      if (v32[3] >= v37)
      {
        if ((a4 & 1) == 0)
          sub_16BAEC();
      }
      else
      {
        sub_15B368(v37, a4 & 1);
        v39 = sub_39228(v26);
        if ((v38 & 1) != (v40 & 1))
          goto LABEL_19;
        v34 = v39;
      }
      v41 = (_QWORD *)*a5;
      if ((v38 & 1) != 0)
      {
        v14 = 80 * v34;
        v15 = v41[7] + 80 * v34;
        v16 = *(_QWORD *)v15;
        v17 = *(_BYTE *)(v15 + 8);
        v47 = *(_BYTE *)(v15 + 24);
        v18 = *(_QWORD *)(v15 + 32);
        v19 = *(_QWORD *)(v15 + 48);
        v48 = *(_QWORD *)(v15 + 16);
        v49 = *(_QWORD *)(v15 + 56);
        v20 = *(_QWORD *)(v15 + 64);
        v21 = *(_QWORD *)(v15 + 72);
        v22 = *(_BYTE *)(v15 + 40);
        sub_40554(v18, v22);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v19);
        sub_40568(v51, v52);
        swift_bridgeObjectRelease(v54);
        swift_bridgeObjectRelease(v53);
        v23 = v41[7] + v14;
        v24 = *(_QWORD *)(v23 + 48);
        v25 = *(_QWORD *)(v23 + 64);
        sub_40568(*(_QWORD *)(v23 + 32), *(_BYTE *)(v23 + 40));
        swift_bridgeObjectRelease(v24);
        swift_bridgeObjectRelease(v25);
        *(_QWORD *)v23 = v16;
        *(_BYTE *)(v23 + 8) = v17;
        *(_QWORD *)(v23 + 16) = v48;
        *(_BYTE *)(v23 + 24) = v47;
        *(_QWORD *)(v23 + 32) = v18;
        *(_BYTE *)(v23 + 40) = v22;
        *(_QWORD *)(v23 + 48) = v19;
        *(_QWORD *)(v23 + 56) = v49;
        *(_QWORD *)(v23 + 64) = v20;
        *(_QWORD *)(v23 + 72) = v21;
      }
      else
      {
        v41[(v34 >> 6) + 8] |= 1 << v34;
        *(_QWORD *)(v41[6] + 8 * v34) = v26;
        v42 = v41[7] + 80 * v34;
        *(_QWORD *)v42 = v27;
        *(_BYTE *)(v42 + 8) = v28;
        *(_QWORD *)(v42 + 16) = v29;
        *(_BYTE *)(v42 + 24) = v30;
        *(_QWORD *)(v42 + 32) = v51;
        *(_BYTE *)(v42 + 40) = v52;
        *(_QWORD *)(v42 + 48) = v54;
        *(_QWORD *)(v42 + 56) = v50;
        *(_QWORD *)(v42 + 64) = v53;
        *(_QWORD *)(v42 + 72) = v31;
        v43 = v41[2];
        v44 = __OFADD__(v43, 1);
        v45 = v43 + 1;
        if (v44)
          goto LABEL_18;
        v41[2] = v45;
      }
      sub_4ED30((uint64_t)v56);
      v12 = v62;
      a4 = 1;
      if (!v62)
        goto LABEL_5;
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
    __break(1u);
  }
  else
  {
LABEL_5:
    swift_release(a3);
    swift_bridgeObjectRelease(a1);
    sub_5FEC(v66);
    return swift_release(a3);
  }
  return result;
}

Swift::Int sub_4D65C(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  double v13;
  double v14;
  double *v15;
  double v16;
  double v17;
  uint64_t v18;
  Swift::Int v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  Swift::Int v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  char v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  double v78;
  Swift::Int v79;
  double *v80;
  double *v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  uint64_t v102;
  double *v103;
  double *v104;
  uint64_t v105;
  double *v106;
  char v107;
  char v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  unint64_t v124;
  Swift::Int v125;
  _QWORD *v126;
  _QWORD *v127;
  Swift::Int v128;
  Swift::Int v129;
  __int128 v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  double *v138;
  char *v139;
  uint64_t v140;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return result;
      v97 = *v2;
      v98 = *v2 + 208;
      v99 = -1;
      v100 = 1;
      while (1)
      {
        v101 = *(double *)(v97 + 112 * v100 + 72);
        v102 = v99;
        v103 = (double *)v98;
        do
        {
          if (v101 >= *(v103 - 17))
            break;
          if (!v97)
            goto LABEL_145;
          v104 = v103 - 12;
          v105 = *((_QWORD *)v103 - 12);
          v106 = v103 - 26;
          v107 = *((_BYTE *)v103 - 88);
          result = *((_QWORD *)v103 - 10);
          v108 = *((_BYTE *)v103 - 72);
          v109 = *((_QWORD *)v103 - 8);
          v110 = *((_BYTE *)v103 - 56);
          v111 = *((_QWORD *)v103 - 6);
          v112 = *((_OWORD *)v103 - 1);
          v113 = *(_OWORD *)v103;
          v114 = *(_OWORD *)(v103 - 5);
          v115 = *((_OWORD *)v103 - 8);
          *((_OWORD *)v104 + 4) = *((_OWORD *)v103 - 9);
          *((_OWORD *)v104 + 5) = v115;
          *(_OWORD *)v103 = *((_OWORD *)v103 - 7);
          v116 = *((_OWORD *)v103 - 12);
          *(_OWORD *)v104 = *((_OWORD *)v103 - 13);
          *((_OWORD *)v104 + 1) = v116;
          *((_OWORD *)v103 - 7) = v113;
          v103 -= 14;
          v117 = *((_OWORD *)v106 + 3);
          *((_OWORD *)v104 + 2) = *((_OWORD *)v106 + 2);
          *((_OWORD *)v104 + 3) = v117;
          *((_QWORD *)v103 - 12) = v105;
          *((_BYTE *)v103 - 88) = v107;
          *((_QWORD *)v103 - 10) = result;
          *((_BYTE *)v103 - 72) = v108;
          *((_QWORD *)v103 - 8) = v109;
          *((_BYTE *)v103 - 56) = v110;
          *((_QWORD *)v103 - 6) = v111;
          *(_OWORD *)(v103 - 5) = v114;
          *(v103 - 3) = v101;
          *((_OWORD *)v103 - 1) = v112;
        }
        while (!__CFADD__(v102++, 1));
        ++v100;
        v98 += 112;
        --v99;
        if (v100 == v3)
          return result;
      }
    }
    goto LABEL_141;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_150:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  v128 = result;
  v140 = v1;
  if (v3 < 2)
  {
    v8 = _swiftEmptyArrayStorage;
    v138 = (double *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v11 = _swiftEmptyArrayStorage[2];
      v96 = (char *)_swiftEmptyArrayStorage;
LABEL_107:
      v127 = v8;
      if (v11 < 2)
        goto LABEL_97;
      v119 = *v2;
      while (1)
      {
        v120 = v11 - 2;
        if (v11 < 2)
          goto LABEL_136;
        if (!v119)
          goto LABEL_149;
        v95 = v96;
        v121 = *(_QWORD *)&v96[16 * v120 + 32];
        v122 = *(_QWORD *)&v96[16 * v11 + 24];
        sub_4E228((double *)(v119 + 112 * v121), (double *)(v119 + 112 * *(_QWORD *)&v96[16 * v11 + 16]), v119 + 112 * v122, v138);
        if (v140)
          goto LABEL_96;
        if (v122 < v121)
          goto LABEL_137;
        if ((swift_isUniquelyReferenced_nonNull_native(v95) & 1) == 0)
          v95 = sub_4ECA8((uint64_t)v95);
        if (v120 >= *((_QWORD *)v95 + 2))
          goto LABEL_138;
        v123 = &v95[16 * v120 + 32];
        *(_QWORD *)v123 = v121;
        *((_QWORD *)v123 + 1) = v122;
        v124 = *((_QWORD *)v95 + 2);
        if (v11 > v124)
          goto LABEL_139;
        memmove(&v95[16 * v11 + 16], &v95[16 * v11 + 32], 16 * (v124 - v11));
        v96 = v95;
        *((_QWORD *)v95 + 2) = v124 - 1;
        v11 = v124 - 1;
        if (v124 <= 2)
          goto LABEL_97;
      }
    }
    v127 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for ClusterableBook);
    *(_QWORD *)(v7 + 16) = v6;
    v127 = (_QWORD *)v7;
    v138 = (double *)(v7 + 32);
  }
  v9 = 0;
  v126 = v2;
  v10 = *v2;
  v139 = (char *)_swiftEmptyArrayStorage;
  v129 = v3;
  while (1)
  {
    v12 = v9++;
    if (v9 < v3)
    {
      v13 = *(double *)(v10 + 112 * v9 + 72);
      v14 = *(double *)(v10 + 112 * v12 + 72);
      v9 = v12 + 2;
      if (v12 + 2 < v3)
      {
        v15 = (double *)(v10 + 296 + 112 * v12);
        v16 = v13;
        while (1)
        {
          v17 = v16;
          v16 = *v15;
          if (v13 < v14 == *v15 >= v17)
            break;
          ++v9;
          v15 += 14;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v13 < v14)
      {
        if (v9 < v12)
          goto LABEL_142;
        if (v12 < v9)
        {
          v18 = 112 * v9;
          v19 = v9;
          v20 = v12;
          v125 = v12;
          v21 = 112 * v12;
          do
          {
            if (v20 != --v19)
            {
              if (!v10)
                goto LABEL_148;
              v22 = *(_QWORD *)(v10 + v21);
              v23 = v10 + v18;
              v24 = *(_BYTE *)(v10 + v21 + 8);
              v135 = *(_QWORD *)(v10 + v21 + 16);
              v134 = *(_BYTE *)(v10 + v21 + 24);
              v133 = *(_QWORD *)(v10 + v21 + 32);
              v132 = *(_BYTE *)(v10 + v21 + 40);
              v131 = *(_QWORD *)(v10 + v21 + 48);
              v25 = *(_QWORD *)(v10 + v21 + 72);
              v137 = *(_OWORD *)(v10 + v21 + 80);
              v136 = *(_OWORD *)(v10 + v21 + 96);
              v130 = *(_OWORD *)(v10 + v21 + 56);
              memmove((void *)(v10 + v21), (const void *)(v10 + v18 - 112), 0x70uLL);
              *(_QWORD *)(v23 - 112) = v22;
              *(_BYTE *)(v23 - 104) = v24;
              *(_QWORD *)(v23 - 96) = v135;
              *(_BYTE *)(v23 - 88) = v134;
              *(_QWORD *)(v23 - 80) = v133;
              *(_BYTE *)(v23 - 72) = v132;
              *(_QWORD *)(v23 - 64) = v131;
              *(_OWORD *)(v23 - 56) = v130;
              *(_QWORD *)(v23 - 40) = v25;
              *(_OWORD *)(v23 - 32) = v137;
              *(_OWORD *)(v23 - 16) = v136;
            }
            ++v20;
            v18 -= 112;
            v21 += 112;
          }
          while (v20 < v19);
          v3 = v129;
          v12 = v125;
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_39;
    if (__OFSUB__(v9, v12))
      goto LABEL_140;
    if (v9 - v12 >= v128)
      goto LABEL_39;
    v26 = v12 + v128;
    if (__OFADD__(v12, v128))
      goto LABEL_143;
    if (v26 >= v3)
      v26 = v3;
    if (v26 < v12)
      goto LABEL_144;
    if (v9 == v26)
    {
LABEL_39:
      v27 = v139;
      if (v9 < v12)
        goto LABEL_135;
    }
    else
    {
      v77 = v10 + 96 + 112 * v9;
      v27 = v139;
      do
      {
        v78 = *(double *)(v10 + 112 * v9 + 72);
        v79 = v12;
        v80 = (double *)v77;
        do
        {
          if (v78 >= *(v80 - 17))
            break;
          if (!v10)
            goto LABEL_146;
          v81 = v80 - 12;
          v82 = *((_QWORD *)v80 - 12);
          v83 = *((_BYTE *)v80 - 88);
          v84 = *((_QWORD *)v80 - 10);
          v85 = *((_BYTE *)v80 - 72);
          v86 = *((_QWORD *)v80 - 8);
          v87 = *((_BYTE *)v80 - 56);
          v88 = *((_QWORD *)v80 - 6);
          v89 = *((_OWORD *)v80 - 1);
          v90 = *(_OWORD *)v80;
          v91 = *(_OWORD *)(v80 - 5);
          v92 = *((_OWORD *)v80 - 8);
          *((_OWORD *)v81 + 4) = *((_OWORD *)v80 - 9);
          *((_OWORD *)v81 + 5) = v92;
          *(_OWORD *)v80 = *((_OWORD *)v80 - 7);
          v93 = *((_OWORD *)v80 - 12);
          *(_OWORD *)v81 = *((_OWORD *)v80 - 13);
          *((_OWORD *)v81 + 1) = v93;
          v94 = *((_OWORD *)v80 - 10);
          *((_OWORD *)v81 + 2) = *((_OWORD *)v80 - 11);
          *((_OWORD *)v81 + 3) = v94;
          *((_OWORD *)v80 - 7) = v90;
          v80 -= 14;
          *((_QWORD *)v80 - 12) = v82;
          *((_BYTE *)v80 - 88) = v83;
          *((_QWORD *)v80 - 10) = v84;
          *((_BYTE *)v80 - 72) = v85;
          *((_QWORD *)v80 - 8) = v86;
          *((_BYTE *)v80 - 56) = v87;
          *((_QWORD *)v80 - 6) = v88;
          *(_OWORD *)(v80 - 5) = v91;
          *(v80 - 3) = v78;
          ++v79;
          *((_OWORD *)v80 - 1) = v89;
        }
        while (v9 != v79);
        ++v9;
        v77 += 112;
      }
      while (v9 != v26);
      v9 = v26;
      if (v26 < v12)
      {
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
        goto LABEL_150;
      }
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0)
      v27 = sub_4E4E4(0, *((_QWORD *)v27 + 2) + 1, 1, v27);
    v29 = *((_QWORD *)v27 + 2);
    v28 = *((_QWORD *)v27 + 3);
    v11 = v29 + 1;
    if (v29 >= v28 >> 1)
      v27 = sub_4E4E4((char *)(v28 > 1), v29 + 1, 1, v27);
    *((_QWORD *)v27 + 2) = v11;
    v30 = v27 + 32;
    v31 = &v27[16 * v29 + 32];
    *(_QWORD *)v31 = v12;
    *((_QWORD *)v31 + 1) = v9;
    v139 = v27;
    if (v29)
      break;
    v11 = 1;
LABEL_15:
    v3 = v129;
    if (v9 >= v129)
    {
      v8 = v127;
      v96 = v139;
      v2 = v126;
      goto LABEL_107;
    }
  }
  while (1)
  {
    v32 = v11 - 1;
    if (v11 >= 4)
    {
      v37 = &v30[16 * v11];
      v38 = *((_QWORD *)v37 - 8);
      v39 = *((_QWORD *)v37 - 7);
      v43 = __OFSUB__(v39, v38);
      v40 = v39 - v38;
      if (v43)
        goto LABEL_124;
      v42 = *((_QWORD *)v37 - 6);
      v41 = *((_QWORD *)v37 - 5);
      v43 = __OFSUB__(v41, v42);
      v35 = v41 - v42;
      v36 = v43;
      if (v43)
        goto LABEL_125;
      v44 = v11 - 2;
      v45 = &v30[16 * v11 - 32];
      v47 = *(_QWORD *)v45;
      v46 = *((_QWORD *)v45 + 1);
      v43 = __OFSUB__(v46, v47);
      v48 = v46 - v47;
      if (v43)
        goto LABEL_127;
      v43 = __OFADD__(v35, v48);
      v49 = v35 + v48;
      if (v43)
        goto LABEL_130;
      if (v49 >= v40)
      {
        v67 = &v30[16 * v32];
        v69 = *(_QWORD *)v67;
        v68 = *((_QWORD *)v67 + 1);
        v43 = __OFSUB__(v68, v69);
        v70 = v68 - v69;
        if (v43)
          goto LABEL_134;
        v60 = v35 < v70;
        goto LABEL_76;
      }
    }
    else
    {
      if (v11 != 3)
      {
        v61 = *((_QWORD *)v27 + 4);
        v62 = *((_QWORD *)v27 + 5);
        v43 = __OFSUB__(v62, v61);
        v54 = v62 - v61;
        v55 = v43;
        goto LABEL_70;
      }
      v34 = *((_QWORD *)v27 + 4);
      v33 = *((_QWORD *)v27 + 5);
      v43 = __OFSUB__(v33, v34);
      v35 = v33 - v34;
      v36 = v43;
    }
    if ((v36 & 1) != 0)
      goto LABEL_126;
    v44 = v11 - 2;
    v50 = &v30[16 * v11 - 32];
    v52 = *(_QWORD *)v50;
    v51 = *((_QWORD *)v50 + 1);
    v53 = __OFSUB__(v51, v52);
    v54 = v51 - v52;
    v55 = v53;
    if (v53)
      goto LABEL_129;
    v56 = &v30[16 * v32];
    v58 = *(_QWORD *)v56;
    v57 = *((_QWORD *)v56 + 1);
    v43 = __OFSUB__(v57, v58);
    v59 = v57 - v58;
    if (v43)
      goto LABEL_132;
    if (__OFADD__(v54, v59))
      goto LABEL_133;
    if (v54 + v59 >= v35)
    {
      v60 = v35 < v59;
LABEL_76:
      if (v60)
        v32 = v44;
      goto LABEL_78;
    }
LABEL_70:
    if ((v55 & 1) != 0)
      goto LABEL_128;
    v63 = &v30[16 * v32];
    v65 = *(_QWORD *)v63;
    v64 = *((_QWORD *)v63 + 1);
    v43 = __OFSUB__(v64, v65);
    v66 = v64 - v65;
    if (v43)
      goto LABEL_131;
    if (v66 < v54)
      goto LABEL_15;
LABEL_78:
    v71 = v32 - 1;
    if (v32 - 1 >= v11)
    {
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
      goto LABEL_135;
    }
    if (!v10)
      goto LABEL_147;
    v72 = &v30[16 * v71];
    v73 = *(_QWORD *)v72;
    v74 = &v30[16 * v32];
    v75 = *((_QWORD *)v74 + 1);
    sub_4E228((double *)(v10 + 112 * *(_QWORD *)v72), (double *)(v10 + 112 * *(_QWORD *)v74), v10 + 112 * v75, v138);
    if (v140)
      break;
    if (v75 < v73)
      goto LABEL_121;
    if (v32 > *((_QWORD *)v139 + 2))
      goto LABEL_122;
    *(_QWORD *)v72 = v73;
    *(_QWORD *)&v30[16 * v71 + 8] = v75;
    v76 = *((_QWORD *)v139 + 2);
    if (v32 >= v76)
      goto LABEL_123;
    v27 = v139;
    v11 = v76 - 1;
    memmove(&v30[16 * v32], v74 + 16, 16 * (v76 - 1 - v32));
    *((_QWORD *)v139 + 2) = v76 - 1;
    if (v76 <= 2)
      goto LABEL_15;
  }
  v95 = v139;
LABEL_96:
  v96 = v95;
LABEL_97:
  swift_bridgeObjectRelease(v96);
  v127[2] = 0;
  return swift_bridgeObjectRelease(v127);
}

uint64_t sub_4DEC4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *, uint64_t *, __n128))
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  __n128 v33;
  char v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v6 = v5;
  if (a3 != a2)
  {
    v7 = *v4;
    v8 = (_QWORD *)(*v4 + 112 * a3 + 104);
    v39 = result;
    v42 = *v4;
LABEL_4:
    v9 = (uint64_t *)(v7 + 112 * a3);
    v10 = *v9;
    v11 = *((_BYTE *)v9 + 8);
    v12 = v9[2];
    v13 = *((_BYTE *)v9 + 24);
    v14 = v9[4];
    v15 = *((_BYTE *)v9 + 40);
    v17 = v9[6];
    v16 = v9[7];
    v18 = v9[8];
    v19 = v9[9];
    v21 = v9[10];
    v20 = v9[11];
    v41 = v8;
    v23 = v9[12];
    v22 = v9[13];
    v43 = a3;
    while (1)
    {
      v50 = v6;
      v45 = result;
      v24 = *(v8 - 27);
      v68 = v10;
      v69 = v11 & 1;
      v70 = v12;
      v71 = v13 & 1;
      v72 = v14;
      v73 = v15;
      v74 = v17;
      v75 = v16;
      v76 = v18;
      v77 = v19;
      v78 = v21;
      v79 = v20;
      v80 = v23;
      v81 = v22;
      v25 = *((_BYTE *)v8 - 208);
      v26 = *(v8 - 25);
      v27 = *((_BYTE *)v8 - 192);
      v46 = *(v8 - 23);
      v28 = *(v8 - 20);
      v51 = *(v8 - 21);
      v82 = *(v8 - 19);
      v29 = *(v8 - 18);
      v30 = *(v8 - 16);
      v53 = *(v8 - 17);
      v54 = v24;
      v47 = v30;
      v48 = *(v8 - 15);
      v49 = *(v8 - 14);
      v31 = *((_BYTE *)v8 - 176);
      v55 = v25;
      v56 = v26;
      v57 = v27;
      v58 = v46;
      v59 = v31;
      v60 = v51;
      v61 = v28;
      v62 = v82;
      v63 = v29;
      v64 = v53;
      v65 = v30;
      v66 = v48;
      v67 = v49;
      v52 = v15;
      v32 = v22;
      sub_40554(v14, v15);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v23);
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRetain(v17);
      sub_40554(v46, v31);
      swift_bridgeObjectRetain(v82);
      swift_bridgeObjectRetain(v53);
      swift_bridgeObjectRetain(v47);
      swift_bridgeObjectRetain(v48);
      swift_bridgeObjectRetain(v49);
      v33 = swift_bridgeObjectRetain(v51);
      v34 = a4(&v68, &v54, v33);
      sub_40568(v46, v31);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_40568(v14, v52);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v6 = v50;
      if (v50)
        break;
      if ((v34 & 1) == 0)
      {
        v7 = v42;
        v38 = v43;
LABEL_11:
        a3 = v38 + 1;
        v8 = v41 + 14;
        result = v39;
        if (a3 != a2)
          goto LABEL_4;
        return result;
      }
      v7 = v42;
      if (!v42)
      {
        __break(1u);
        return result;
      }
      v10 = *(v8 - 13);
      v11 = *((_BYTE *)v8 - 96);
      v12 = *(v8 - 11);
      v13 = *((_BYTE *)v8 - 80);
      v14 = *(v8 - 9);
      v15 = *((_BYTE *)v8 - 64);
      v17 = *(v8 - 7);
      v16 = *(v8 - 6);
      v18 = *(v8 - 5);
      v19 = *(v8 - 4);
      v21 = *(v8 - 3);
      v20 = *(v8 - 2);
      v23 = *(v8 - 1);
      v22 = *v8;
      v35 = *(_OWORD *)(v8 - 17);
      *(_OWORD *)(v8 - 5) = *(_OWORD *)(v8 - 19);
      *(_OWORD *)(v8 - 3) = v35;
      *(_OWORD *)(v8 - 1) = *(_OWORD *)(v8 - 15);
      v36 = *(_OWORD *)(v8 - 25);
      *(_OWORD *)(v8 - 13) = *(_OWORD *)(v8 - 27);
      *(_OWORD *)(v8 - 11) = v36;
      v37 = *(_OWORD *)(v8 - 21);
      *(_OWORD *)(v8 - 9) = *(_OWORD *)(v8 - 23);
      *(_OWORD *)(v8 - 7) = v37;
      *(v8 - 14) = v22;
      v8 -= 14;
      *(v8 - 13) = v10;
      *((_BYTE *)v8 - 96) = v11;
      *(v8 - 11) = v12;
      *((_BYTE *)v8 - 80) = v13;
      *(v8 - 9) = v14;
      *((_BYTE *)v8 - 64) = v15;
      *(v8 - 7) = v17;
      *(v8 - 6) = v16;
      *(v8 - 5) = v18;
      *(v8 - 4) = v19;
      *(v8 - 3) = v21;
      *(v8 - 2) = v20;
      result = v45 + 1;
      *(v8 - 1) = v23;
      v38 = v43;
      if (v43 == v45 + 1)
        goto LABEL_11;
    }
  }
  return result;
}

uint64_t sub_4E228(double *__dst, double *__src, unint64_t a3, double *a4)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  uint64_t result;
  char *v21;
  double *v22;
  double *v23;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = (char *)__src - (char *)__dst;
  v9 = ((char *)__src - (char *)__dst) / 112;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 112;
  v23 = __dst;
  v22 = a4;
  if (v9 >= v11)
  {
    if (v10 >= -111)
    {
      if (a4 != __src || &__src[14 * v11] <= a4)
        memmove(a4, __src, 112 * v11);
      v16 = &v4[14 * v11];
      v21 = (char *)v16;
      v23 = v6;
      if (v7 < v6 && v10 >= 112)
      {
        v17 = (double *)(a3 - 112);
        do
        {
          v18 = v17 + 14;
          if (*(v16 - 5) >= *(v6 - 5))
          {
            v21 = (char *)(v16 - 14);
            if (v18 < v16 || v17 >= v16 || v18 != v16)
              memmove(v17, v16 - 14, 0x70uLL);
            v19 = v6;
            v16 -= 14;
            if (v6 <= v7)
              break;
          }
          else
          {
            v19 = v6 - 14;
            if (v18 != v6 || v17 >= v6)
              memmove(v17, v6 - 14, 0x70uLL);
            v23 = v6 - 14;
            if (v19 <= v7)
              break;
          }
          v17 -= 14;
          v6 = v19;
        }
        while (v16 > v4);
      }
LABEL_40:
      sub_4E90C((void **)&v23, (const void **)&v22, &v21);
      return 1;
    }
  }
  else if (v8 >= -111)
  {
    if (a4 != __dst || &__dst[14 * v9] <= a4)
      memmove(a4, __dst, 112 * v9);
    v12 = &v4[14 * v9];
    v21 = (char *)v12;
    if ((unint64_t)v6 < a3 && v8 >= 112)
    {
      v13 = v4;
      while (1)
      {
        if (v6[9] >= v13[9])
        {
          v4 = v13 + 14;
          v15 = v13;
          v14 = v6;
          if (v7 == v13)
          {
            v13 += 14;
            if (v7 < v4)
              goto LABEL_18;
          }
          else
          {
            v13 += 14;
          }
        }
        else
        {
          v14 = v6 + 14;
          v15 = v6;
          if (v7 == v6 && v7 < v14)
            goto LABEL_18;
        }
        memmove(v7, v15, 0x70uLL);
LABEL_18:
        v7 += 14;
        if (v13 < v12)
        {
          v6 = v14;
          if ((unint64_t)v14 < a3)
            continue;
        }
        v22 = v4;
        v23 = v7;
        goto LABEL_40;
      }
    }
    goto LABEL_40;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_4E4E4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5EDC(&qword_1F1628);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_4E5E0(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

uint64_t sub_4E688(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = sub_5EDC(&qword_1F1218);
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_14;
  v10 = v8 / v7;
  if (v8 / v7 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v10 * v7)
    return swift_arrayInitWithTakeFrontToBack(v3, v4, v10, result);
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront(v3);
  return result;
}

char *sub_4E798(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  size_t v6;
  char v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -552)
  {
    v7 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v7, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = 552 * (v4 / 552);
    if (result != v3 || result >= &v3[v6])
      return (char *)memmove(result, v3, v6);
  }
  return result;
}

char *sub_4E854(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  char v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -80)
  {
    v7 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v7, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 80;
    if (result != v3 || result >= &v3[80 * v6])
      return (char *)memmove(result, v3, 80 * v6);
  }
  return result;
}

char *sub_4E90C(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  char v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -112)
  {
    v7 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v7, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 112;
    if (result != v3 || result >= &v3[112 * v6])
      return (char *)memmove(result, v3, 112 * v6);
  }
  return result;
}

char *sub_4E9CC(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  char v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -72)
  {
    v7 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v7, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 72;
    if (result != v3 || result >= &v3[72 * v6])
      return (char *)memmove(result, v3, 72 * v6);
  }
  return result;
}

char *sub_4EA8C(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  char v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -40)
  {
    v7 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v7, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 40;
    if (result != v3 || result >= &v3[40 * v6])
      return (char *)memmove(result, v3, 40 * v6);
  }
  return result;
}

char *sub_4EB44(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *sub_4EBEC(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  char v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -24)
  {
    v7 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v7, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 24;
    if (result != v3 || result >= &v3[24 * v6])
      return (char *)memmove(result, v3, 24 * v6);
  }
  return result;
}

char *sub_4ECA8(uint64_t a1)
{
  return sub_4E4E4(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_4ECBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_BYTE *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a2 + 24) = v2;
  *(_BYTE *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 40) = v4;
  v9 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a2 + 48) = v9;
  *(_QWORD *)(a2 + 56) = v6;
  *(_QWORD *)(a2 + 64) = v5;
  *(_QWORD *)(a2 + 72) = v7;
  *(_QWORD *)(a2 + 80) = v8;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  sub_40554(v4, v9);
  swift_bridgeObjectRetain(v7);
  return swift_bridgeObjectRetain(v6);
}

uint64_t sub_4ED30@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void (*v21)(_QWORD *);
  uint64_t result;
  int64_t v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  int64_t v28;
  _QWORD v29[2];
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = *v1;
  v5 = v1[3];
  v4 = v1[4];
  v6 = v5;
  if (v4)
  {
    v7 = (v4 - 1) & v4;
    v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    v9 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v8);
    v10 = *(_QWORD *)(v3 + 56) + 80 * v8;
    v11 = *(_QWORD *)v10;
    v12 = *(_BYTE *)(v10 + 8);
    v13 = *(_QWORD *)(v10 + 16);
    v14 = *(_BYTE *)(v10 + 24);
    v15 = *(_QWORD *)(v10 + 32);
    v17 = *(_QWORD *)(v10 + 48);
    v16 = *(_QWORD *)(v10 + 56);
    v18 = *(_QWORD *)(v10 + 64);
    v19 = *(_QWORD *)(v10 + 72);
    v20 = *(_BYTE *)(v10 + 40);
    v1[3] = v6;
    v1[4] = v7;
    v21 = (void (*)(_QWORD *))v1[5];
    v29[0] = v9;
    v29[1] = v11;
    v30 = v12;
    v31 = v13;
    v32 = v14;
    v33 = v15;
    v34 = v20;
    v35 = v17;
    v36 = v16;
    v37 = v18;
    v38 = v19;
    sub_40554(v15, v20);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v17);
    v21(v29);
    sub_40568(v15, v20);
    swift_bridgeObjectRelease(v18);
    return swift_bridgeObjectRelease(v17);
  }
  v23 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    v24 = (unint64_t)(v1[2] + 64) >> 6;
    if (v23 < v24)
    {
      v25 = v1[1];
      v26 = *(_QWORD *)(v25 + 8 * v23);
      if (v26)
      {
LABEL_7:
        v7 = (v26 - 1) & v26;
        v8 = __clz(__rbit64(v26)) + (v23 << 6);
        v6 = v23;
        goto LABEL_3;
      }
      v27 = v5 + 2;
      v6 = v5 + 1;
      if (v5 + 2 < v24)
      {
        v26 = *(_QWORD *)(v25 + 8 * v27);
        if (v26)
        {
LABEL_10:
          v23 = v27;
          goto LABEL_7;
        }
        v6 = v5 + 2;
        if (v5 + 3 < v24)
        {
          v26 = *(_QWORD *)(v25 + 8 * (v5 + 3));
          if (v26)
          {
            v23 = v5 + 3;
            goto LABEL_7;
          }
          v27 = v5 + 4;
          v6 = v5 + 3;
          if (v5 + 4 < v24)
          {
            v26 = *(_QWORD *)(v25 + 8 * v27);
            if (v26)
              goto LABEL_10;
            v23 = v5 + 5;
            v6 = v5 + 4;
            if (v5 + 5 < v24)
            {
              v26 = *(_QWORD *)(v25 + 8 * v23);
              if (v26)
                goto LABEL_7;
              v6 = v24 - 1;
              v28 = v5 + 6;
              while (v24 != v28)
              {
                v26 = *(_QWORD *)(v25 + 8 * v28++);
                if (v26)
                {
                  v23 = v28 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_QWORD *)(a1 + 80) = 0;
  }
  return result;
}

uint64_t sub_4EF40@<X0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  void (*v19)(uint64_t *);
  uint64_t result;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  int64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;

  v3 = *v1;
  v5 = v1[3];
  v4 = v1[4];
  v6 = v5;
  if (v4)
  {
    v7 = (v4 - 1) & v4;
    v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    v9 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v8);
    v10 = *(_QWORD *)(v3 + 56) + 72 * v8;
    v11 = *(_BYTE *)v10;
    v12 = *(_QWORD *)(v10 + 8);
    v13 = *(_QWORD *)(v10 + 16);
    v14 = *(_QWORD *)(v10 + 24);
    v15 = *(_BYTE *)(v10 + 32);
    v16 = *(_QWORD *)(v10 + 40);
    v17 = *(_BYTE *)(v10 + 48);
    v18 = *(_QWORD *)(v10 + 56);
    LOBYTE(v10) = *(_BYTE *)(v10 + 64);
    v1[3] = v6;
    v1[4] = v7;
    v19 = (void (*)(uint64_t *))v1[5];
    v27 = v9;
    v28 = v11;
    v29 = v12;
    v30 = v13;
    v31 = v14;
    v32 = v15;
    v33 = v16;
    v34 = v17;
    v35 = v18;
    v36 = v10;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    v19(&v27);
    swift_bridgeObjectRelease(v13);
    return swift_bridgeObjectRelease(v12);
  }
  v21 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    v22 = (unint64_t)(v1[2] + 64) >> 6;
    if (v21 < v22)
    {
      v23 = v1[1];
      v24 = *(_QWORD *)(v23 + 8 * v21);
      if (v24)
      {
LABEL_7:
        v7 = (v24 - 1) & v24;
        v8 = __clz(__rbit64(v24)) + (v21 << 6);
        v6 = v21;
        goto LABEL_3;
      }
      v25 = v5 + 2;
      v6 = v5 + 1;
      if (v5 + 2 < v22)
      {
        v24 = *(_QWORD *)(v23 + 8 * v25);
        if (v24)
        {
LABEL_10:
          v21 = v25;
          goto LABEL_7;
        }
        v6 = v5 + 2;
        if (v5 + 3 < v22)
        {
          v24 = *(_QWORD *)(v23 + 8 * (v5 + 3));
          if (v24)
          {
            v21 = v5 + 3;
            goto LABEL_7;
          }
          v25 = v5 + 4;
          v6 = v5 + 3;
          if (v5 + 4 < v22)
          {
            v24 = *(_QWORD *)(v23 + 8 * v25);
            if (v24)
              goto LABEL_10;
            v21 = v5 + 5;
            v6 = v5 + 4;
            if (v5 + 5 < v22)
            {
              v24 = *(_QWORD *)(v23 + 8 * v21);
              if (v24)
                goto LABEL_7;
              v6 = v22 - 1;
              v26 = v5 + 6;
              while (v22 != v26)
              {
                v24 = *(_QWORD *)(v23 + 8 * v26++);
                if (v24)
                {
                  v21 = v26 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    *a1 = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
    a1[3] = 0u;
    *(_OWORD *)((char *)a1 + 57) = 0u;
  }
  return result;
}

uint64_t sub_4F124@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD *);
  uint64_t result;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  _QWORD v21[3];

  v3 = *v1;
  v5 = v1[3];
  v4 = v1[4];
  v6 = v5;
  if (v4)
  {
    v7 = (v4 - 1) & v4;
    v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    v9 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v8);
    v10 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 16 * v8);
    v11 = *v10;
    v12 = v10[1];
    v1[3] = v6;
    v1[4] = v7;
    v13 = (void (*)(_QWORD *))v1[5];
    v21[0] = v9;
    v21[1] = v11;
    v21[2] = v12;
    swift_bridgeObjectRetain(v12);
    v13(v21);
    return swift_bridgeObjectRelease(v12);
  }
  v15 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    v16 = (unint64_t)(v1[2] + 64) >> 6;
    if (v15 < v16)
    {
      v17 = v1[1];
      v18 = *(_QWORD *)(v17 + 8 * v15);
      if (v18)
      {
LABEL_7:
        v7 = (v18 - 1) & v18;
        v8 = __clz(__rbit64(v18)) + (v15 << 6);
        v6 = v15;
        goto LABEL_3;
      }
      v19 = v5 + 2;
      v6 = v5 + 1;
      if (v5 + 2 < v16)
      {
        v18 = *(_QWORD *)(v17 + 8 * v19);
        if (v18)
        {
LABEL_10:
          v15 = v19;
          goto LABEL_7;
        }
        v6 = v5 + 2;
        if (v5 + 3 < v16)
        {
          v18 = *(_QWORD *)(v17 + 8 * (v5 + 3));
          if (v18)
          {
            v15 = v5 + 3;
            goto LABEL_7;
          }
          v19 = v5 + 4;
          v6 = v5 + 3;
          if (v5 + 4 < v16)
          {
            v18 = *(_QWORD *)(v17 + 8 * v19);
            if (v18)
              goto LABEL_10;
            v15 = v5 + 5;
            v6 = v5 + 4;
            if (v5 + 5 < v16)
            {
              v18 = *(_QWORD *)(v17 + 8 * v15);
              if (v18)
                goto LABEL_7;
              v6 = v16 - 1;
              v20 = v5 + 6;
              while (v16 != v20)
              {
                v18 = *(_QWORD *)(v17 + 8 * v20++);
                if (v18)
                {
                  v15 = v20 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
  }
  return result;
}

uint64_t sub_4F2A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t *);
  __int128 v16;
  uint64_t result;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  __int128 v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = *v1;
  v5 = v1[3];
  v4 = v1[4];
  v6 = v5;
  if (v4)
  {
    v7 = (v4 - 1) & v4;
    v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    v9 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v8);
    v10 = *(_QWORD *)(v3 + 56) + 48 * v8;
    v11 = *(_BYTE *)(v10 + 16);
    v13 = *(_QWORD *)(v10 + 24);
    v12 = *(_QWORD *)(v10 + 32);
    v14 = *(_QWORD *)(v10 + 40);
    v15 = (void (*)(uint64_t *))v1[5];
    v24 = v9;
    v16 = *(_OWORD *)v10;
    v1[3] = v6;
    v1[4] = v7;
    v25 = v16;
    v26 = v11;
    v27 = v13;
    v28 = v12;
    v29 = v14;
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v13);
    v15(&v24);
    swift_bridgeObjectRelease(v14);
    return swift_bridgeObjectRelease(v13);
  }
  v18 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    v19 = (unint64_t)(v1[2] + 64) >> 6;
    if (v18 < v19)
    {
      v20 = v1[1];
      v21 = *(_QWORD *)(v20 + 8 * v18);
      if (v21)
      {
LABEL_7:
        v7 = (v21 - 1) & v21;
        v8 = __clz(__rbit64(v21)) + (v18 << 6);
        v6 = v18;
        goto LABEL_3;
      }
      v22 = v5 + 2;
      v6 = v5 + 1;
      if (v5 + 2 < v19)
      {
        v21 = *(_QWORD *)(v20 + 8 * v22);
        if (v21)
        {
LABEL_10:
          v18 = v22;
          goto LABEL_7;
        }
        v6 = v5 + 2;
        if (v5 + 3 < v19)
        {
          v21 = *(_QWORD *)(v20 + 8 * (v5 + 3));
          if (v21)
          {
            v18 = v5 + 3;
            goto LABEL_7;
          }
          v22 = v5 + 4;
          v6 = v5 + 3;
          if (v5 + 4 < v19)
          {
            v21 = *(_QWORD *)(v20 + 8 * v22);
            if (v21)
              goto LABEL_10;
            v18 = v5 + 5;
            v6 = v5 + 4;
            if (v5 + 5 < v19)
            {
              v21 = *(_QWORD *)(v20 + 8 * v18);
              if (v21)
                goto LABEL_7;
              v6 = v19 - 1;
              v23 = v5 + 6;
              while (v19 != v23)
              {
                v21 = *(_QWORD *)(v20 + 8 * v23++);
                if (v21)
                {
                  v18 = v23 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)(a1 + 48) = 0;
  }
  return result;
}

uint64_t sub_4F470(_QWORD *a1, _BYTE *a2, _QWORD *a3, _BYTE *a4, uint64_t a5, unint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BOOL4 v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t i;
  char v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t result;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _BOOL4 v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;

  v6 = a3;
  v7 = a1;
  if (a1[2] >= (int64_t)a6 || a3[2] <= a6)
  {
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(v6);
    return (uint64_t)v7;
  }
  v10 = 0x6B6F6F6265;
  if (*a2)
    v11 = 0x6F6F626F69647561;
  else
    v11 = 0x6B6F6F6265;
  if (*a2)
    v12 = 0xE90000000000006BLL;
  else
    v12 = 0xE500000000000000;
  if (*a4)
  {
    v10 = 0x6F6F626F69647561;
    v13 = 0xE90000000000006BLL;
  }
  else
  {
    v13 = 0xE500000000000000;
  }
  v43 = v10;
  v44 = v11;
  v47 = v12;
  v42 = v13;
  v15 = v11 == v10 && v12 == v13;
  v46 = v15;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(v6);
  v45 = a6;
  while (1)
  {
    if (v46)
    {
      swift_bridgeObjectRelease_n(v47, 2);
    }
    else
    {
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v44, v47, v43, v42, 0);
      swift_bridgeObjectRelease(v47);
      swift_bridgeObjectRelease(v42);
      if ((v16 & 1) == 0)
      {
        v34 = v6[2];
        if (!v34)
          return (uint64_t)v7;
        v22 = 0;
        v35 = *(_QWORD *)(a5 + 16);
        for (i = 4; ; i += 10)
        {
          if (v35)
          {
            sub_39228(v6[i]);
            if ((v37 & 1) != 0)
              break;
          }
          if (v34 == ++v22)
            return (uint64_t)v7;
        }
        if (v22 >= v34)
          goto LABEL_46;
        v38 = sub_39228(v6[i]);
        if ((v39 & 1) == 0)
          return (uint64_t)v7;
        v40 = *(_QWORD *)(a5 + 56) + 80 * v38;
        v52 = *(_QWORD *)v40;
        v51 = *(_BYTE *)(v40 + 8);
        v50 = *(_QWORD *)(v40 + 16);
        v49 = *(_BYTE *)(v40 + 24);
        v17 = *(_QWORD *)(v40 + 32);
        v18 = *(_BYTE *)(v40 + 40);
        v19 = *(_QWORD *)(v40 + 48);
        v48 = *(_QWORD *)(v40 + 56);
        v20 = *(_QWORD *)(v40 + 64);
        v21 = *(_QWORD *)(v40 + 72);
        sub_40554(v17, v18);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v19);
        if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
          goto LABEL_41;
        goto LABEL_24;
      }
    }
    if (!v6[2])
      goto LABEL_45;
    v52 = v6[4];
    v51 = *((_BYTE *)v6 + 40);
    v50 = v6[6];
    v49 = *((_BYTE *)v6 + 56);
    v17 = v6[8];
    v18 = *((_BYTE *)v6 + 72);
    v19 = v6[10];
    v48 = v6[11];
    v20 = v6[12];
    v21 = v6[13];
    sub_40554(v17, v18);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v19);
    v22 = 0;
    if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
LABEL_41:
      v7 = sub_2FEC0(0, v7[2] + 1, 1, v7);
LABEL_24:
    v24 = v7[2];
    v23 = v7[3];
    if (v24 >= v23 >> 1)
      v7 = sub_2FEC0((_QWORD *)(v23 > 1), v24 + 1, 1, v7);
    v7[2] = v24 + 1;
    v25 = &v7[10 * v24];
    v25[4] = v52;
    *((_BYTE *)v25 + 40) = v51;
    v25[6] = v50;
    *((_BYTE *)v25 + 56) = v49;
    v25[8] = v17;
    *((_BYTE *)v25 + 72) = v18;
    v25[10] = v19;
    v25[11] = v48;
    v25[12] = v20;
    v25[13] = v21;
    if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
      v6 = sub_6A504(v6);
    v26 = v6[2];
    if (v22 >= v26)
      break;
    v27 = v26 - 1;
    v28 = v26 - 1 - v22;
    if (v28 < 0)
      goto LABEL_47;
    v29 = &v6[10 * v22];
    v30 = v29[12];
    v31 = v29[10];
    v32 = v29[8];
    v33 = *((_BYTE *)v29 + 72);
    memmove(v29 + 4, v29 + 14, 80 * v28);
    v6[2] = v27;
    sub_40568(v32, v33);
    swift_bridgeObjectRelease(v31);
    swift_bridgeObjectRelease(v30);
    if (v7[2] >= (int64_t)v45 || v6[2] <= v45)
      return (uint64_t)v7;
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_4F868(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  dispatch_semaphore_t v49;
  uint64_t v50;
  _QWORD *v51;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  _BOOL4 v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char isUniquelyReferenced_nonNull_native;
  char v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint8_t *v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  char v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  unint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint8_t *v117;
  _QWORD *v118;
  char *v119;
  uint64_t v120;
  _QWORD *v121;
  unint64_t v122;
  unint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  __int128 v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  char v135;
  uint8_t *v136;
  _QWORD *v137;
  os_log_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  char v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  uint64_t inited;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  Swift::Int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  _QWORD *v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  int64_t v176;
  unint64_t v177;
  int64_t v178;
  char v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  _QWORD *v185;
  uint64_t v186;
  _QWORD *v187;
  char v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  unint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  char v207;
  uint64_t v208;
  char v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  char v213;
  unint64_t v214;
  unint64_t v215;
  _QWORD *v216;
  _QWORD *v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  _QWORD *v226;
  uint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  uint64_t v230;
  char v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  _QWORD *v239;
  _QWORD *v240;
  unint64_t v241;
  char v242;
  char v243;
  uint64_t v244;
  _QWORD *v245;
  uint64_t v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  unint64_t v252;
  unint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  char v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t *v259;
  uint64_t v260;
  _QWORD *v261;
  _QWORD *v262;
  _QWORD *v263;
  _QWORD *v264;
  _QWORD *v265;
  uint64_t v266;
  _QWORD *v267;
  _QWORD *v268;
  _QWORD *v269;
  uint64_t v270;
  _QWORD *v271;
  _QWORD *v272;
  _QWORD *v273;
  _QWORD *v274;
  uint64_t v275;
  _QWORD *v276;
  _QWORD *v277;
  _QWORD *v278;
  _QWORD *v279;
  uint64_t v280;
  _QWORD *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  _QWORD *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  char *v299;
  uint64_t v300;
  int64_t v301;
  _QWORD *v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  int64_t v309;
  uint64_t v310;
  uint64_t v311;
  _QWORD *v312;
  uint64_t v313;
  char v314;
  uint64_t v315;
  char v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  char v322;
  unint64_t v323;
  unint64_t v324;
  uint64_t v325;
  int64_t v326;
  uint64_t v327;
  _QWORD *v328;
  uint64_t v329;
  char v330;
  uint64_t v331;
  char v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  char v338;
  uint64_t v339;
  unint64_t v340;
  unint64_t v341;
  _QWORD *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  _QWORD *v346;
  _QWORD *v347;
  _QWORD *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unsigned __int8 v358;
  _QWORD *v359;
  _QWORD *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  unint64_t v365;
  uint64_t v366;
  _QWORD *v367;
  _QWORD *v368;
  uint64_t v369;
  _QWORD *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unsigned __int8 v379;
  _QWORD *v380;
  _QWORD *v381;
  uint64_t v382;
  uint64_t v383;
  unint64_t v384;
  unint64_t v385;
  uint64_t v386;
  void (*v387)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v388;
  uint64_t v389;
  _QWORD *v390;
  _QWORD *v391;
  void (*v392)(char *, uint64_t, _QWORD *);
  char *v393;
  char *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  void (*v400)(char *, uint64_t, _QWORD *);
  char *v401;
  uint64_t v402;
  unsigned int (*v403)(uint64_t, uint64_t, uint64_t);
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  unint64_t v407;
  unint64_t v408;
  unint64_t v409;
  uint64_t v410;
  unint64_t v411;
  uint64_t v412;
  uint64_t v413;
  unint64_t v414;
  unint64_t v415;
  uint64_t v416;
  NSObject *v417;
  os_log_type_t v418;
  uint8_t *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  unint64_t v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v429;
  char *v430;
  char *v431;
  uint64_t *v432;
  char *v433;
  uint64_t v434;
  _QWORD *v435;
  char *v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  NSObject *v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  _QWORD *v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  _QWORD *v449;
  uint64_t v450;
  _QWORD *v451;
  _QWORD *v452;
  _QWORD *v453;
  uint64_t v454;
  uint64_t v455;
  char *v456;
  char *v457;
  _QWORD *v458;
  int64_t v459;
  _QWORD *v460;
  _QWORD *v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  char *v465;
  os_log_t v466;
  _QWORD *v467;
  uint8_t *v468;
  uint64_t v469;
  _QWORD *v470;
  uint64_t v471;
  _QWORD *v472;
  __int128 v473;
  uint64_t v474;
  char *v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  __int128 v479;
  __int128 v480;
  _QWORD *v481;
  uint64_t v482;
  uint64_t v483[3];
  _QWORD v484[5];
  _QWORD v485[7];
  char v486[40];
  _QWORD *v487;
  char v488[8];
  uint64_t v489;
  char v490;
  uint64_t v491;
  char v492;
  _QWORD *v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;

  v3 = sub_5EDC(&qword_1F15E0);
  v4 = __chkstk_darwin(v3);
  v436 = (char *)&v429 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v456 = (char *)&v429 - v6;
  v7 = (_QWORD *)sub_5EDC(&qword_1F0D90);
  v8 = (_QWORD *)*(v7 - 1);
  v9 = __chkstk_darwin(v7);
  v431 = (char *)&v429 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v430 = (char *)&v429 - v11;
  v12 = sub_5EDC(&qword_1F15E8);
  v13 = __chkstk_darwin(v12);
  v440 = (uint64_t)&v429 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v437 = (uint64_t)&v429 - v16;
  v17 = __chkstk_darwin(v15);
  v446 = (uint64_t)&v429 - v18;
  __chkstk_darwin(v17);
  v447 = (uint64_t)&v429 - v19;
  v20 = type metadata accessor for CollectionRecommendation(0);
  v21 = *(_QWORD *)(v20 - 8);
  v462 = v20;
  v463 = v21;
  v22 = __chkstk_darwin(v20);
  v443 = (uint64_t)&v429 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v442 = (uint64_t)&v429 - v25;
  v26 = __chkstk_darwin(v24);
  v439 = (uint64_t)&v429 - v27;
  v28 = __chkstk_darwin(v26);
  v438 = (uint64_t)&v429 - v29;
  v30 = __chkstk_darwin(v28);
  v455 = (uint64_t)&v429 - v31;
  v32 = __chkstk_darwin(v30);
  v451 = (uint64_t *)((char *)&v429 - v33);
  v34 = __chkstk_darwin(v32);
  v450 = (uint64_t)&v429 - v35;
  v36 = __chkstk_darwin(v34);
  v454 = (uint64_t)&v429 - v37;
  v38 = __chkstk_darwin(v36);
  v449 = (uint64_t *)((char *)&v429 - v39);
  v40 = __chkstk_darwin(v38);
  v448 = (uint64_t)&v429 - v41;
  v42 = __chkstk_darwin(v40);
  v457 = (char *)&v429 - v43;
  __chkstk_darwin(v42);
  v433 = (char *)&v429 - v44;
  v45 = sub_5EDC(&qword_1F15F0);
  __chkstk_darwin(v45);
  v47 = (char *)&v429 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = swift_allocObject(&unk_1DE0F0, 24, 7);
  *(_QWORD *)(v48 + 16) = _swiftEmptyDictionarySingleton;
  v432 = (uint64_t *)(v48 + 16);
  swift_retain(v48);
  v49 = dispatch_semaphore_create(0);
  v50 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v47, 1, 1, v50);
  v51 = (_QWORD *)swift_allocObject(&unk_1DE118, 72, 7);
  v51[2] = 0;
  v51[3] = 0;
  v51[4] = v1;
  v51[5] = a1;
  v51[6] = sub_520B8;
  v51[7] = v48;
  v51[8] = v49;
  swift_retain(v1);
  swift_bridgeObjectRetain(a1);
  v444 = v48;
  swift_retain(v48);
  v52 = v49;
  v53 = sub_4C62C((uint64_t)v47, (uint64_t)&unk_1F1600, (uint64_t)v51);
  swift_release(v53);
  v441 = v52;
  OS_dispatch_semaphore.wait()();
  if (qword_1F0098 != -1)
LABEL_193:
    swift_once(&qword_1F0098, sub_4B980);
  v54 = type metadata accessor for Logger(0);
  v55 = sub_5216C(v54, (uint64_t)qword_1F1528);
  v56 = swift_bridgeObjectRetain_n(a1, 6);
  v434 = v55;
  v57 = Logger.logObject.getter(v56);
  LODWORD(v467) = static os_log_type_t.default.getter();
  v58 = os_log_type_enabled(v57, (os_log_type_t)v467);
  v435 = v7;
  v445 = v8;
  v481 = a1;
  if (v58)
  {
    v466 = v57;
    v59 = swift_slowAlloc(42, -1);
    *(_DWORD *)v59 = 134218752;
    v487 = (_QWORD *)a1[2];
    v8 = v487;
    v60 = v488;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v487, v488, v59 + 4, v59 + 12);
    v468 = (uint8_t *)v59;
    *(_WORD *)(v59 + 12) = 2048;
    v470 = v8;
    if (v8)
    {
      v465 = v488;
      swift_bridgeObjectRetain(a1);
      v61 = 0;
      v62 = _swiftEmptyArrayStorage;
      while (1)
      {
        v63 = &a1[v61];
        v64 = a1[v61 + 4];
        v65 = LOBYTE(a1[v61 + 5]);
        v474 = a1[v61 + 6];
        v475 = (char *)v64;
        LODWORD(v473) = LOBYTE(a1[v61 + 7]);
        v66 = a1[v61 + 8];
        v67 = LOBYTE(a1[v61 + 9]);
        v68 = a1[v61 + 10];
        v472 = (_QWORD *)v63[11];
        v69 = v63[12];
        v70 = v63[13];
        v71 = *((_OWORD *)v63 + 7);
        v479 = *((_OWORD *)v63 + 8);
        v480 = v71;
        LODWORD(v476) = v65;
        LODWORD(v478) = v67;
        v477 = v66;
        if ((v65 & 1) == 0)
          break;
        LODWORD(v471) = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F6F626F69647561, 0xE90000000000006BLL, 0x6B6F6F6265, 0xE500000000000000, 0);
        sub_40554(v66, v67);
        swift_bridgeObjectRetain(v69);
        v469 = v480;
        swift_bridgeObjectRetain(v480);
        v72 = *((_QWORD *)&v480 + 1);
        swift_bridgeObjectRetain(*((_QWORD *)&v480 + 1));
        v73 = v69;
        v74 = v68;
        v75 = v479;
        swift_bridgeObjectRetain(v479);
        v76 = *((_QWORD *)&v479 + 1);
        swift_bridgeObjectRetain(*((_QWORD *)&v479 + 1));
        v77 = v74;
        v78 = v74;
        v69 = v73;
        swift_bridgeObjectRetain(v78);
        swift_bridgeObjectRelease(0xE90000000000006BLL);
        if ((v471 & 1) != 0)
          goto LABEL_11;
        sub_40568(v477, v478);
        swift_bridgeObjectRelease(v76);
        swift_bridgeObjectRelease(v75);
        swift_bridgeObjectRelease(v72);
        swift_bridgeObjectRelease(v469);
        swift_bridgeObjectRelease(v73);
        swift_bridgeObjectRelease(v77);
LABEL_6:
        v61 += 14;
        v8 = (_QWORD *)((char *)v8 - 1);
        a1 = v481;
        if (!v8)
        {
          swift_bridgeObjectRelease(v481);
          v8 = v470;
          v60 = v465;
          goto LABEL_19;
        }
      }
      sub_40554(v66, v67);
      swift_bridgeObjectRetain(v69);
      swift_bridgeObjectRetain(v480);
      swift_bridgeObjectRetain(*((_QWORD *)&v480 + 1));
      swift_bridgeObjectRetain(v479);
      swift_bridgeObjectRetain(*((_QWORD *)&v479 + 1));
      v77 = v68;
      swift_bridgeObjectRetain(v68);
      swift_bridgeObjectRelease(0xE500000000000000);
LABEL_11:
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v62);
      v487 = v62;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_3432C(0, v62[2] + 1, 1);
        v62 = v487;
      }
      v80 = v478;
      v81 = v477;
      v83 = v479;
      v82 = v480;
      v85 = v62[2];
      v84 = v62[3];
      if (v85 >= v84 >> 1)
      {
        sub_3432C(v84 > 1, v85 + 1, 1);
        v83 = v479;
        v82 = v480;
        v62 = v487;
      }
      v62[2] = v85 + 1;
      v86 = &v62[14 * v85];
      v86[4] = v475;
      *((_BYTE *)v86 + 40) = v476;
      v86[6] = v474;
      *((_BYTE *)v86 + 56) = v473;
      v86[8] = v81;
      *((_BYTE *)v86 + 72) = v80;
      v87 = v472;
      v86[10] = v77;
      v86[11] = v87;
      v86[12] = v69;
      v86[13] = v70;
      *((_OWORD *)v86 + 7) = v82;
      *((_OWORD *)v86 + 8) = v83;
      goto LABEL_6;
    }
    v62 = _swiftEmptyArrayStorage;
LABEL_19:
    v88 = v468;
    v89 = (_QWORD *)v62[2];
    swift_bridgeObjectRelease(a1);
    swift_release(v62);
    v487 = v89;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v487, v60, v88 + 14, v88 + 22);
    swift_bridgeObjectRelease(a1);
    *((_WORD *)v88 + 11) = 2048;
    if (v8)
    {
      swift_bridgeObjectRetain(a1);
      v90 = v8;
      v91 = 0;
      v92 = _swiftEmptyArrayStorage;
      while (1)
      {
        v478 = (uint64_t)v90;
        v474 = a1[v91 + 4];
        v93 = LOBYTE(a1[v91 + 5]);
        *(_QWORD *)&v473 = a1[v91 + 6];
        LODWORD(v472) = LOBYTE(a1[v91 + 7]);
        v94 = a1[v91 + 8];
        v95 = LOBYTE(a1[v91 + 9]);
        v96 = a1[v91 + 10];
        v471 = a1[v91 + 11];
        v97 = a1[v91 + 12];
        v98 = a1[v91 + 13];
        v99 = *(_OWORD *)&a1[v91 + 14];
        v479 = *(_OWORD *)&a1[v91 + 16];
        v480 = v99;
        LODWORD(v475) = v93;
        LODWORD(v477) = v95;
        v476 = v94;
        if (v93 == 1)
          break;
        LODWORD(v469) = _stringCompareWithSmolCheck(_:_:expecting:)(0x6B6F6F6265, 0xE500000000000000, 0x6F6F626F69647561, 0xE90000000000006BLL, 0);
        sub_40554(v94, v95);
        swift_bridgeObjectRetain(v97);
        v101 = v480;
        swift_bridgeObjectRetain(v480);
        v102 = *((_QWORD *)&v480 + 1);
        swift_bridgeObjectRetain(*((_QWORD *)&v480 + 1));
        v103 = v97;
        v104 = v96;
        v105 = v479;
        swift_bridgeObjectRetain(v479);
        v106 = *((_QWORD *)&v479 + 1);
        swift_bridgeObjectRetain(*((_QWORD *)&v479 + 1));
        v100 = v104;
        v107 = v104;
        v97 = v103;
        swift_bridgeObjectRetain(v107);
        swift_bridgeObjectRelease(0xE500000000000000);
        if ((v469 & 1) != 0)
          goto LABEL_26;
        sub_40568(v476, v477);
        swift_bridgeObjectRelease(v106);
        swift_bridgeObjectRelease(v105);
        swift_bridgeObjectRelease(v102);
        swift_bridgeObjectRelease(v101);
        swift_bridgeObjectRelease(v103);
        swift_bridgeObjectRelease(v100);
LABEL_22:
        v91 += 14;
        v90 = (_QWORD *)(v478 - 1);
        a1 = v481;
        if (v478 == 1)
        {
          swift_bridgeObjectRelease(v481);
          v8 = v470;
          goto LABEL_33;
        }
      }
      sub_40554(v94, v95);
      swift_bridgeObjectRetain(v97);
      swift_bridgeObjectRetain(v480);
      swift_bridgeObjectRetain(*((_QWORD *)&v480 + 1));
      swift_bridgeObjectRetain(v479);
      swift_bridgeObjectRetain(*((_QWORD *)&v479 + 1));
      v100 = v96;
      swift_bridgeObjectRetain(v96);
      swift_bridgeObjectRelease(0xE90000000000006BLL);
LABEL_26:
      v108 = swift_isUniquelyReferenced_nonNull_native(v92);
      v487 = v92;
      if ((v108 & 1) == 0)
      {
        sub_3432C(0, v92[2] + 1, 1);
        v92 = v487;
      }
      v109 = v477;
      v110 = v476;
      v112 = v479;
      v111 = v480;
      v114 = v92[2];
      v113 = v92[3];
      if (v114 >= v113 >> 1)
      {
        sub_3432C(v113 > 1, v114 + 1, 1);
        v112 = v479;
        v111 = v480;
        v92 = v487;
      }
      v92[2] = v114 + 1;
      v115 = &v92[14 * v114];
      v115[4] = v474;
      *((_BYTE *)v115 + 40) = (_BYTE)v475;
      v115[6] = v473;
      *((_BYTE *)v115 + 56) = (_BYTE)v472;
      v115[8] = v110;
      *((_BYTE *)v115 + 72) = v109;
      v116 = v471;
      v115[10] = v100;
      v115[11] = v116;
      v115[12] = v97;
      v115[13] = v98;
      *((_OWORD *)v115 + 7) = v111;
      *((_OWORD *)v115 + 8) = v112;
      goto LABEL_22;
    }
    v92 = _swiftEmptyArrayStorage;
LABEL_33:
    v117 = v468;
    v118 = (_QWORD *)v92[2];
    swift_bridgeObjectRelease(a1);
    swift_release(v92);
    v487 = v118;
    v119 = v488;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v487, v488, v117 + 24, v117 + 32);
    swift_bridgeObjectRelease(a1);
    *((_WORD *)v117 + 16) = 2048;
    if (v8)
    {
      v475 = v488;
      swift_bridgeObjectRetain(a1);
      v120 = 0;
      v121 = _swiftEmptyArrayStorage;
      do
      {
        v127 = &a1[v120];
        if ((a1[v120 + 7] & 1) == 0)
        {
          v470 = v8;
          v128 = v127[4];
          LODWORD(v477) = *((unsigned __int8 *)v127 + 40);
          v476 = v127[6];
          v129 = v127[8];
          v130 = *((_BYTE *)v127 + 72);
          v131 = v127[10];
          v478 = v127[11];
          v132 = v127[12];
          v133 = v127[13];
          v134 = *((_OWORD *)v127 + 7);
          v479 = *((_OWORD *)v127 + 8);
          v480 = v134;
          sub_40554(v129, v130);
          swift_bridgeObjectRetain(v132);
          swift_bridgeObjectRetain(v480);
          swift_bridgeObjectRetain(*((_QWORD *)&v480 + 1));
          swift_bridgeObjectRetain(v479);
          swift_bridgeObjectRetain(*((_QWORD *)&v479 + 1));
          swift_bridgeObjectRetain(v131);
          v135 = swift_isUniquelyReferenced_nonNull_native(v121);
          v487 = v121;
          if ((v135 & 1) == 0)
          {
            sub_3432C(0, v121[2] + 1, 1);
            v121 = v487;
          }
          v123 = v121[2];
          v122 = v121[3];
          if (v123 >= v122 >> 1)
          {
            sub_3432C(v122 > 1, v123 + 1, 1);
            v121 = v487;
          }
          v121[2] = v123 + 1;
          v124 = &v121[14 * v123];
          v124[4] = v128;
          *((_BYTE *)v124 + 40) = v477;
          v124[6] = v476;
          *((_BYTE *)v124 + 56) = 0;
          v124[8] = v129;
          *((_BYTE *)v124 + 72) = v130;
          v125 = v478;
          v124[10] = v131;
          v124[11] = v125;
          v124[12] = v132;
          v124[13] = v133;
          v126 = v479;
          *((_OWORD *)v124 + 7) = v480;
          *((_OWORD *)v124 + 8) = v126;
          a1 = v481;
          v8 = v470;
        }
        v120 += 14;
        v8 = (_QWORD *)((char *)v8 - 1);
      }
      while (v8);
      swift_bridgeObjectRelease(a1);
      v119 = v475;
    }
    else
    {
      v121 = _swiftEmptyArrayStorage;
    }
    v136 = v468;
    v137 = (_QWORD *)v121[2];
    swift_bridgeObjectRelease(a1);
    swift_release(v121);
    v487 = v137;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v487, v119, v136 + 34, v136 + 42);
    swift_bridgeObjectRelease(a1);
    v138 = v466;
    _os_log_impl(&dword_0, v466, (os_log_type_t)v467, "AllCollectionTypesFillingClusteringService clustering %ld books books=%ld audiobooks=%ld seriesBooks=%ld", v136, 0x2Au);
    swift_slowDealloc(v136, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 6);
  }
  v139 = _swiftEmptyDictionarySingleton;
  v483[0] = (uint64_t)_swiftEmptyDictionarySingleton;
  v140 = a1[2];
  if (v140)
  {
    swift_bridgeObjectRetain(a1);
    v141 = 0;
    v142 = 0;
    v473 = xmmword_1875E0;
    do
    {
      v476 = v142;
      *(_QWORD *)&v479 = v141;
      *(_QWORD *)&v480 = v140;
      v143 = (uint64_t)a1 + v141;
      v144 = *(_QWORD **)((char *)a1 + v141 + 32);
      v145 = *(_BYTE *)(v143 + 40);
      v146 = *(_QWORD *)(v143 + 48);
      v147 = *(_BYTE *)(v143 + 56);
      v148 = *(_QWORD *)(v143 + 64);
      v8 = *(_QWORD **)(v143 + 80);
      v149 = *(_QWORD *)(v143 + 88);
      v150 = *(_QWORD *)(v143 + 96);
      v151 = *(_QWORD *)(v143 + 104);
      v153 = *(_QWORD *)(v143 + 112);
      v152 = *(_QWORD *)(v143 + 120);
      v154 = *(_QWORD *)(v143 + 128);
      v474 = *(_QWORD *)(v143 + 136);
      v475 = (char *)v148;
      v155 = *(_BYTE *)(v143 + 72);
      v487 = v144;
      v488[0] = v145;
      v489 = v146;
      v490 = v147;
      v491 = v148;
      v492 = v155;
      v493 = v8;
      v494 = v149;
      v495 = v150;
      v477 = v153;
      v478 = v150;
      v496 = v151;
      v497 = v153;
      v498 = v152;
      v499 = v154;
      v500 = v474;
      v156 = sub_5EDC(&qword_1F02B8);
      inited = swift_initStackObject(v156, v486);
      *(_OWORD *)(inited + 16) = v473;
      *(_BYTE *)(inited + 32) = v145;
      v158 = v148;
      LOBYTE(v148) = v155;
      sub_40554(v158, v155);
      swift_bridgeObjectRetain(v150);
      swift_bridgeObjectRetain(v153);
      v159 = v152;
      swift_bridgeObjectRetain(v152);
      v160 = v154;
      swift_bridgeObjectRetain(v154);
      v161 = v474;
      swift_bridgeObjectRetain(v474);
      swift_bridgeObjectRetain(v8);
      v162 = sub_89600(inited);
      v163 = swift_setDeallocating(inited);
      __chkstk_darwin(v163);
      *(&v429 - 2) = (uint64_t)v483;
      *(&v429 - 1) = (uint64_t)&v487;
      v142 = v476;
      sub_4C64(sub_52184, (uint64_t)(&v429 - 4), v162);
      swift_bridgeObjectRelease(v162);
      v164 = v480;
      sub_40568((uint64_t)v475, v148);
      swift_bridgeObjectRelease(v161);
      a1 = v481;
      swift_bridgeObjectRelease(v160);
      swift_bridgeObjectRelease(v159);
      swift_bridgeObjectRelease(v477);
      swift_bridgeObjectRelease(v478);
      swift_bridgeObjectRelease(v8);
      v141 = v479 + 112;
      v140 = v164 - 1;
    }
    while (v140);
    swift_bridgeObjectRelease(a1);
    v139 = (_QWORD *)v483[0];
  }
  v165 = sub_4C834((uint64_t)v139);
  swift_bridgeObjectRelease(v139);
  v166 = sub_4D060(v165);
  swift_bridgeObjectRelease(v165);
  v167 = 0;
  v168 = v166[8];
  v458 = v166 + 8;
  v461 = v166;
  v169 = 1 << *((_BYTE *)v166 + 32);
  v170 = -1;
  if (v169 < 64)
    v170 = ~(-1 << v169);
  v171 = v170 & v168;
  v459 = (unint64_t)(v169 + 63) >> 6;
  v452 = _swiftEmptyArrayStorage;
  v453 = _swiftEmptyArrayStorage;
  v460 = _swiftEmptyArrayStorage;
  v172 = _swiftEmptyArrayStorage;
  v467 = _swiftEmptyArrayStorage;
  v7 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v171)
    {
      v173 = __clz(__rbit64(v171));
      v174 = (v171 - 1) & v171;
      v175 = v173 | (v167 << 6);
      goto LABEL_69;
    }
    v176 = v167 + 1;
    if (__OFADD__(v167, 1))
    {
      __break(1u);
LABEL_192:
      __break(1u);
      goto LABEL_193;
    }
    if (v176 >= v459)
      goto LABEL_118;
    v177 = v458[v176];
    ++v167;
    if (!v177)
    {
      v167 = v176 + 1;
      if (v176 + 1 >= v459)
        goto LABEL_118;
      v177 = v458[v167];
      if (!v177)
      {
        v167 = v176 + 2;
        if (v176 + 2 >= v459)
          goto LABEL_118;
        v177 = v458[v167];
        if (!v177)
          break;
      }
    }
LABEL_68:
    v174 = (v177 - 1) & v177;
    v175 = __clz(__rbit64(v177)) + (v167 << 6);
LABEL_69:
    v472 = v7;
    v179 = *(_BYTE *)(v461[6] + v175);
    v180 = *(_QWORD *)(v461[7] + 8 * v175);
    v465 = (char *)v174;
    v466 = (os_log_t)v167;
    v464 = v180;
    if ((v179 & 1) == 0)
    {
      swift_bridgeObjectRetain(v180);
      swift_bridgeObjectRelease(0xE500000000000000);
      v182 = *(_QWORD *)(v180 + 16);
      if (!v182)
        goto LABEL_52;
LABEL_74:
      v8 = (_QWORD *)(v180 + 136);
      do
      {
        *(_QWORD *)&v473 = *(v8 - 13);
        LODWORD(v474) = *((unsigned __int8 *)v8 - 96);
        v475 = (char *)*(v8 - 11);
        v188 = *((_BYTE *)v8 - 80);
        v189 = *(v8 - 9);
        v190 = *((unsigned __int8 *)v8 - 64);
        v191 = *(v8 - 7);
        v476 = *(v8 - 6);
        v477 = v182;
        a1 = (_QWORD *)*(v8 - 5);
        v192 = *(v8 - 4);
        v194 = *(v8 - 3);
        v193 = *(v8 - 2);
        v195 = *(v8 - 1);
        v196 = *v8;
        v481 = v172;
        *(_QWORD *)&v480 = v194;
        v478 = v193;
        *(_QWORD *)&v479 = v195;
        if ((v188 & 1) != 0)
        {
          v468 = (uint8_t *)v472[2];
          v197 = v189;
          v198 = v190;
          sub_40554(v189, v190);
          swift_bridgeObjectRetain(a1);
          swift_bridgeObjectRetain(v194);
          swift_bridgeObjectRetain(v193);
          swift_bridgeObjectRetain(v195);
          swift_bridgeObjectRetain(v196);
          swift_bridgeObjectRetain(v191);
          v471 = v197;
          v199 = v197;
          v200 = (unint64_t)v468;
          LODWORD(v470) = v198;
          sub_40554(v199, v198);
          v469 = v191;
          swift_bridgeObjectRetain(v191);
          swift_bridgeObjectRetain(a1);
          if (v200 > 2)
          {
            if ((swift_isUniquelyReferenced_nonNull_native(v467) & 1) == 0)
              v467 = sub_2FEC0(0, v467[2] + 1, 1, v467);
            v202 = v477;
            v219 = v478;
            v191 = v469;
            v221 = v467[2];
            v220 = v467[3];
            v206 = v471;
            v207 = (char)v470;
            if (v221 >= v220 >> 1)
            {
              v222 = sub_2FEC0((_QWORD *)(v220 > 1), v221 + 1, 1, v467);
              v207 = (char)v470;
              v206 = v471;
              v467 = v222;
            }
            v183 = v219;
            v184 = v467;
            v467[2] = v221 + 1;
            v185 = &v184[10 * v221];
            v185[4] = v473;
            *((_BYTE *)v185 + 40) = v474;
            v185[6] = v475;
            *((_BYTE *)v185 + 56) = 1;
            v185[8] = v206;
          }
          else
          {
            if ((swift_isUniquelyReferenced_nonNull_native(v472) & 1) != 0)
              v201 = v472;
            else
              v201 = sub_2FEC0(0, v200 + 1, 1, v472);
            v202 = v477;
            v203 = v478;
            v191 = v469;
            v205 = v201[2];
            v204 = v201[3];
            if (v205 >= v204 >> 1)
              v201 = sub_2FEC0((_QWORD *)(v204 > 1), v205 + 1, 1, v201);
            v183 = v203;
            v201[2] = v205 + 1;
            v472 = v201;
            v185 = &v201[10 * v205];
            v185[4] = v473;
            *((_BYTE *)v185 + 40) = v474;
            v185[6] = v475;
            *((_BYTE *)v185 + 56) = 1;
            v206 = v471;
            v185[8] = v471;
            v207 = (char)v470;
          }
          *((_BYTE *)v185 + 72) = v207;
          v186 = v476;
          v185[10] = v191;
          v185[11] = v186;
          v185[12] = a1;
          v187 = v185 + 13;
          v172 = v481;
        }
        else
        {
          v208 = v189;
          v209 = v190;
          sub_40554(v189, v190);
          swift_bridgeObjectRetain(a1);
          swift_bridgeObjectRetain(v194);
          swift_bridgeObjectRetain(v193);
          swift_bridgeObjectRetain(v195);
          v471 = v196;
          swift_bridgeObjectRetain(v196);
          swift_bridgeObjectRetain(v191);
          v210 = v208;
          v211 = v208;
          v212 = v481;
          v213 = v209;
          sub_40554(v211, v209);
          swift_bridgeObjectRetain(v191);
          swift_bridgeObjectRetain(a1);
          if ((swift_isUniquelyReferenced_nonNull_native(v212) & 1) == 0)
            v212 = sub_2FEC0(0, v212[2] + 1, 1, v212);
          v215 = v212[2];
          v214 = v212[3];
          v216 = v212;
          v183 = v478;
          if (v215 >= v214 >> 1)
            v216 = sub_2FEC0((_QWORD *)(v214 > 1), v215 + 1, 1, v212);
          v216[2] = v215 + 1;
          v172 = v216;
          v217 = &v216[10 * v215];
          v217[4] = v473;
          *((_BYTE *)v217 + 40) = v474;
          v217[6] = v475;
          *((_BYTE *)v217 + 56) = 0;
          v206 = v210;
          v217[8] = v210;
          v207 = v213;
          *((_BYTE *)v217 + 72) = v213;
          v218 = v476;
          v202 = v477;
          v217[10] = v191;
          v217[11] = v218;
          v217[12] = a1;
          v187 = v217 + 13;
          v196 = v471;
        }
        *v187 = v192;
        sub_40568(v206, v207);
        swift_bridgeObjectRelease(v196);
        swift_bridgeObjectRelease(v479);
        swift_bridgeObjectRelease(v183);
        swift_bridgeObjectRelease(v480);
        swift_bridgeObjectRelease(a1);
        swift_bridgeObjectRelease(v191);
        v8 += 14;
        v182 = v202 - 1;
      }
      while (v182);
      goto LABEL_52;
    }
    v181 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F6F626F69647561, 0xE90000000000006BLL, 0x6B6F6F6265, 0xE500000000000000, 0);
    swift_bridgeObjectRetain(v180);
    swift_bridgeObjectRelease(0xE90000000000006BLL);
    if ((v181 & 1) != 0)
    {
      v182 = *(_QWORD *)(v180 + 16);
      if (!v182)
        goto LABEL_52;
      goto LABEL_74;
    }
    v223 = *(_QWORD *)(v180 + 16);
    if (v223)
    {
      v8 = (_QWORD *)(v180 + 136);
      v481 = v172;
      do
      {
        v229 = *(v8 - 13);
        v474 = v223;
        v475 = (char *)v229;
        LODWORD(v476) = *((unsigned __int8 *)v8 - 96);
        LOBYTE(v229) = *((_BYTE *)v8 - 80);
        v230 = *(v8 - 9);
        v231 = *((_BYTE *)v8 - 64);
        v233 = *(v8 - 7);
        v232 = *(v8 - 6);
        v477 = *(v8 - 11);
        v478 = v232;
        a1 = (_QWORD *)*(v8 - 5);
        v234 = *(v8 - 4);
        v236 = *(v8 - 3);
        v235 = *(v8 - 2);
        v237 = *(v8 - 1);
        v238 = *v8;
        *(_QWORD *)&v480 = v236;
        *(_QWORD *)&v479 = v237;
        *(_QWORD *)&v473 = v235;
        if ((v229 & 1) != 0)
        {
          v470 = (_QWORD *)v453[2];
          sub_40554(v230, v231);
          swift_bridgeObjectRetain(a1);
          swift_bridgeObjectRetain(v236);
          swift_bridgeObjectRetain(v235);
          swift_bridgeObjectRetain(v237);
          swift_bridgeObjectRetain(v238);
          swift_bridgeObjectRetain(v233);
          v471 = v230;
          sub_40554(v230, v231);
          v469 = v233;
          swift_bridgeObjectRetain(v233);
          v239 = a1;
          v240 = a1;
          v241 = (unint64_t)v470;
          swift_bridgeObjectRetain(v240);
          v242 = v231;
          if (v241 > 2)
          {
            v256 = swift_isUniquelyReferenced_nonNull_native(v452);
            v244 = v474;
            if ((v256 & 1) == 0)
              v452 = sub_2FEC0(0, v452[2] + 1, 1, v452);
            v233 = v469;
            a1 = v239;
            v246 = v238;
            v258 = v452[2];
            v257 = v452[3];
            v249 = v471;
            if (v258 >= v257 >> 1)
            {
              v452 = sub_2FEC0((_QWORD *)(v257 > 1), v258 + 1, 1, v452);
              v249 = v471;
            }
            v224 = v473;
            v225 = v452;
            v452[2] = v258 + 1;
            v226 = &v225[10 * v258];
            v226[4] = v475;
            *((_BYTE *)v226 + 40) = v476;
            v226[6] = v477;
            *((_BYTE *)v226 + 56) = 1;
          }
          else
          {
            v243 = swift_isUniquelyReferenced_nonNull_native(v453);
            v244 = v474;
            if ((v243 & 1) != 0)
              v245 = v453;
            else
              v245 = sub_2FEC0(0, v241 + 1, 1, v453);
            v233 = v469;
            a1 = v239;
            v246 = v238;
            v248 = v245[2];
            v247 = v245[3];
            if (v248 >= v247 >> 1)
              v245 = sub_2FEC0((_QWORD *)(v247 > 1), v248 + 1, 1, v245);
            v224 = v473;
            v245[2] = v248 + 1;
            v453 = v245;
            v226 = &v245[10 * v248];
            v226[4] = v475;
            *((_BYTE *)v226 + 40) = v476;
            v226[6] = v477;
            *((_BYTE *)v226 + 56) = 1;
            v249 = v471;
          }
          v226[8] = v249;
          *((_BYTE *)v226 + 72) = v242;
          v227 = v478;
          v226[10] = v233;
          v226[11] = v227;
          v226[12] = a1;
          v228 = v226 + 13;
        }
        else
        {
          sub_40554(v230, v231);
          swift_bridgeObjectRetain(a1);
          swift_bridgeObjectRetain(v236);
          swift_bridgeObjectRetain(v235);
          swift_bridgeObjectRetain(v237);
          v471 = v238;
          swift_bridgeObjectRetain(v238);
          swift_bridgeObjectRetain(v233);
          v250 = v230;
          sub_40554(v230, v231);
          swift_bridgeObjectRetain(v233);
          swift_bridgeObjectRetain(a1);
          v242 = v231;
          if ((swift_isUniquelyReferenced_nonNull_native(v460) & 1) != 0)
            v251 = v460;
          else
            v251 = sub_2FEC0(0, v460[2] + 1, 1, v460);
          v244 = v474;
          v253 = v251[2];
          v252 = v251[3];
          v224 = v473;
          if (v253 >= v252 >> 1)
            v251 = sub_2FEC0((_QWORD *)(v252 > 1), v253 + 1, 1, v251);
          v251[2] = v253 + 1;
          v460 = v251;
          v254 = &v251[10 * v253];
          v254[4] = v475;
          *((_BYTE *)v254 + 40) = v476;
          v254[6] = v477;
          *((_BYTE *)v254 + 56) = 0;
          v249 = v250;
          v254[8] = v250;
          *((_BYTE *)v254 + 72) = v242;
          v255 = v478;
          v254[10] = v233;
          v254[11] = v255;
          v254[12] = a1;
          v228 = v254 + 13;
          v246 = v471;
        }
        *v228 = v234;
        sub_40568(v249, v242);
        swift_bridgeObjectRelease(v246);
        swift_bridgeObjectRelease(v479);
        swift_bridgeObjectRelease(v224);
        swift_bridgeObjectRelease(v480);
        swift_bridgeObjectRelease(a1);
        swift_bridgeObjectRelease(v233);
        v8 += 14;
        v223 = v244 - 1;
        v172 = v481;
      }
      while (v223);
    }
LABEL_52:
    swift_bridgeObjectRelease(v464);
    v7 = v472;
    v171 = (unint64_t)v465;
    v167 = (uint64_t)v466;
  }
  v178 = v176 + 3;
  if (v178 < v459)
  {
    v177 = v458[v178];
    if (!v177)
    {
      while (1)
      {
        v167 = v178 + 1;
        if (__OFADD__(v178, 1))
          goto LABEL_192;
        if (v167 >= v459)
          goto LABEL_118;
        v177 = v458[v167];
        ++v178;
        if (v177)
          goto LABEL_68;
      }
    }
    v167 = v178;
    goto LABEL_68;
  }
LABEL_118:
  v481 = v172;
  swift_release(v461);
  LOBYTE(v483[0]) = 0;
  LOBYTE(v484[0]) = 1;
  v259 = v432;
  swift_beginAccess(v432, &v487, 0, 0);
  v260 = *v259;
  swift_bridgeObjectRetain(*v259);
  v261 = v467;
  v262 = v452;
  v263 = (_QWORD *)sub_4F470(v467, v483, v452, v484, v260, 6uLL);
  v265 = v264;
  swift_bridgeObjectRelease(v260);
  swift_bridgeObjectRelease(v261);
  swift_bridgeObjectRelease(v262);
  LOBYTE(v483[0]) = 1;
  LOBYTE(v484[0]) = 0;
  v266 = *v259;
  swift_bridgeObjectRetain(*v259);
  v267 = (_QWORD *)sub_4F470(v265, v483, v263, v484, v266, 6uLL);
  v269 = v268;
  swift_bridgeObjectRelease(v266);
  swift_bridgeObjectRelease(v265);
  swift_bridgeObjectRelease(v263);
  LOBYTE(v483[0]) = 0;
  LOBYTE(v484[0]) = 0;
  v270 = *v259;
  swift_bridgeObjectRetain(*v259);
  v271 = v7;
  v272 = (_QWORD *)sub_4F470(v7, v483, v269, v484, v270, 3uLL);
  v274 = v273;
  swift_bridgeObjectRelease(v270);
  swift_bridgeObjectRelease(v271);
  swift_bridgeObjectRelease(v269);
  LOBYTE(v483[0]) = 1;
  LOBYTE(v484[0]) = 1;
  v275 = *v259;
  swift_bridgeObjectRetain(*v259);
  v276 = v453;
  v277 = (_QWORD *)sub_4F470(v453, v483, v267, v484, v275, 3uLL);
  v279 = v278;
  swift_bridgeObjectRelease(v275);
  swift_bridgeObjectRelease(v276);
  swift_bridgeObjectRelease(v267);
  LOBYTE(v483[0]) = 0;
  LOBYTE(v484[0]) = 1;
  v280 = *v259;
  swift_bridgeObjectRetain(*v259);
  v281 = (_QWORD *)sub_4F470(v272, v483, v279, v484, v280, 3uLL);
  v283 = v282;
  swift_bridgeObjectRelease(v280);
  swift_bridgeObjectRelease(v272);
  swift_bridgeObjectRelease(v279);
  swift_bridgeObjectRelease(v283);
  LOBYTE(v483[0]) = 1;
  LOBYTE(v484[0]) = 0;
  v284 = *v259;
  swift_bridgeObjectRetain(*v259);
  v285 = (_QWORD *)sub_4F470(v277, v483, v274, v484, v284, 3uLL);
  v287 = v286;
  swift_bridgeObjectRelease(v284);
  swift_bridgeObjectRelease(v277);
  swift_bridgeObjectRelease(v274);
  swift_bridgeObjectRelease(v287);
  LOBYTE(v483[0]) = 0;
  LOBYTE(v484[0]) = 0;
  v288 = *v259;
  v289 = v481;
  swift_bridgeObjectRetain(v481);
  swift_bridgeObjectRetain(v288);
  v290 = sub_4F470(v281, v483, v289, v484, v288, 3uLL);
  v292 = v291;
  swift_bridgeObjectRelease(v288);
  swift_bridgeObjectRelease(v281);
  swift_bridgeObjectRelease(v289);
  LOBYTE(v483[0]) = 1;
  LOBYTE(v484[0]) = 1;
  v293 = *v259;
  swift_bridgeObjectRetain(v290);
  swift_bridgeObjectRetain(v292);
  v294 = v460;
  swift_bridgeObjectRetain(v460);
  swift_bridgeObjectRetain(v293);
  v295 = sub_4F470(v285, v483, v294, v484, v293, 3uLL);
  v297 = v296;
  swift_bridgeObjectRelease(v293);
  swift_bridgeObjectRelease(v285);
  swift_bridgeObjectRelease(v294);
  *(_QWORD *)&v480 = v485;
  v485[0] = v290;
  v485[1] = v295;
  v485[2] = v289;
  v485[3] = v294;
  v485[4] = v297;
  v475 = (char *)v292;
  v485[5] = v292;
  v483[0] = (uint64_t)_swiftEmptyArrayStorage;
  v478 = v295;
  swift_bridgeObjectRetain_n(v295, 2);
  swift_bridgeObjectRetain(v289);
  *(_QWORD *)&v479 = v290;
  swift_bridgeObjectRetain(v290);
  swift_bridgeObjectRetain(v294);
  v474 = v297;
  swift_bridgeObjectRetain(v297);
  v298 = 0;
  v299 = v457;
  do
  {
    v300 = *(_QWORD *)(v480 + 8 * v298);
    v301 = *(_QWORD *)(v300 + 16);
    if (v301)
    {
      v484[0] = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v300);
      sub_340AC(0, v301, 0);
      v302 = (_QWORD *)v484[0];
      v303 = *(_QWORD *)(v484[0] + 16);
      v304 = 32;
      do
      {
        v305 = *(_QWORD *)(v300 + v304);
        v484[0] = v302;
        v306 = v302[3];
        if (v303 >= v306 >> 1)
        {
          sub_340AC(v306 > 1, v303 + 1, 1);
          v302 = (_QWORD *)v484[0];
        }
        v302[2] = v303 + 1;
        v302[v303 + 4] = v305;
        v304 += 80;
        ++v303;
        --v301;
      }
      while (v301);
      swift_bridgeObjectRelease(v300);
      v299 = v457;
    }
    else
    {
      v302 = _swiftEmptyArrayStorage;
    }
    ++v298;
    sub_10F158((uint64_t)v302);
  }
  while (v298 != 6);
  v477 = sub_5EDC(&qword_1F1378);
  swift_arrayDestroy(v480, 6, v477);
  v307 = v483[0];
  v476 = sub_3CD28(v483[0]);
  swift_bridgeObjectRelease(v307);
  v308 = v479;
  v309 = *(_QWORD *)(v479 + 16);
  v310 = (uint64_t)v433;
  if (v309)
  {
    v483[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_34300(0, v309, 0);
    v311 = 0;
    v312 = (_QWORD *)v483[0];
    do
    {
      v313 = *(_QWORD *)(v308 + v311 + 32);
      v314 = *(_BYTE *)(v308 + v311 + 40);
      v315 = *(_QWORD *)(v308 + v311 + 48);
      v316 = *(_BYTE *)(v308 + v311 + 56);
      v317 = *(_QWORD *)(v308 + v311 + 64);
      v319 = *(_QWORD *)(v308 + v311 + 80);
      v318 = *(_QWORD *)(v308 + v311 + 88);
      v320 = *(_QWORD *)(v308 + v311 + 96);
      v321 = *(_QWORD *)(v308 + v311 + 104);
      v322 = *(_BYTE *)(v308 + v311 + 72);
      *(_QWORD *)v310 = v313;
      *(_BYTE *)(v310 + 8) = v314;
      *(_QWORD *)(v310 + 16) = v315;
      *(_BYTE *)(v310 + 24) = v316;
      *(_QWORD *)(v310 + 32) = v317;
      *(_BYTE *)(v310 + 40) = v322;
      *(_QWORD *)(v310 + 48) = v319;
      *(_QWORD *)(v310 + 56) = v318;
      *(_QWORD *)(v310 + 64) = v320;
      *(_QWORD *)(v310 + 72) = v321;
      swift_storeEnumTagMultiPayload(v310, v462, 0);
      sub_40554(v317, v322);
      v483[0] = (uint64_t)v312;
      v324 = v312[2];
      v323 = v312[3];
      swift_bridgeObjectRetain(v319);
      swift_bridgeObjectRetain(v320);
      if (v324 >= v323 >> 1)
      {
        sub_34300(v323 > 1, v324 + 1, 1);
        v312 = (_QWORD *)v483[0];
      }
      v312[2] = v324 + 1;
      sub_521CC(v310, (uint64_t)v312+ ((*(unsigned __int8 *)(v463 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v463 + 80))+ *(_QWORD *)(v463 + 72) * v324);
      v311 += 80;
      --v309;
      v308 = v479;
    }
    while (v309);
    swift_bridgeObjectRelease(v479);
    v299 = v457;
  }
  else
  {
    swift_bridgeObjectRelease(v479);
    v312 = _swiftEmptyArrayStorage;
  }
  *(_QWORD *)&v473 = v312;
  v325 = v478;
  v326 = *(_QWORD *)(v478 + 16);
  if (v326)
  {
    v483[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_34300(0, v326, 0);
    v327 = 0;
    v328 = (_QWORD *)v483[0];
    do
    {
      v329 = *(_QWORD *)(v325 + v327 + 32);
      v330 = *(_BYTE *)(v325 + v327 + 40);
      v331 = *(_QWORD *)(v325 + v327 + 48);
      v332 = *(_BYTE *)(v325 + v327 + 56);
      v333 = *(_QWORD *)(v325 + v327 + 64);
      v335 = *(_QWORD *)(v325 + v327 + 80);
      v334 = *(_QWORD *)(v325 + v327 + 88);
      v336 = *(_QWORD *)(v325 + v327 + 96);
      v337 = *(_QWORD *)(v325 + v327 + 104);
      v338 = *(_BYTE *)(v325 + v327 + 72);
      *(_QWORD *)v299 = v329;
      v299[8] = v330;
      *((_QWORD *)v299 + 2) = v331;
      v299[24] = v332;
      *((_QWORD *)v299 + 4) = v333;
      v299[40] = v338;
      *((_QWORD *)v299 + 6) = v335;
      *((_QWORD *)v299 + 7) = v334;
      *((_QWORD *)v299 + 8) = v336;
      *((_QWORD *)v299 + 9) = v337;
      swift_storeEnumTagMultiPayload(v299, v462, 0);
      sub_40554(v333, v338);
      v483[0] = (uint64_t)v328;
      v339 = (uint64_t)v299;
      v341 = v328[2];
      v340 = v328[3];
      swift_bridgeObjectRetain(v335);
      swift_bridgeObjectRetain(v336);
      if (v341 >= v340 >> 1)
      {
        sub_34300(v340 > 1, v341 + 1, 1);
        v328 = (_QWORD *)v483[0];
      }
      v328[2] = v341 + 1;
      sub_521CC(v339, (uint64_t)v328+ ((*(unsigned __int8 *)(v463 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v463 + 80))+ *(_QWORD *)(v463 + 72) * v341);
      v327 += 80;
      --v326;
      v299 = (char *)v339;
      v325 = v478;
    }
    while (v326);
    swift_bridgeObjectRelease(v478);
  }
  else
  {
    swift_bridgeObjectRelease(v478);
    v328 = _swiftEmptyArrayStorage;
  }
  v342 = v481;
  v343 = v481[2];
  v344 = (uint64_t)v456;
  if (v343)
  {
    swift_bridgeObjectRetain_n(v481, 2);
    v345 = 0;
    v346 = _swiftEmptyArrayStorage;
    *(_QWORD *)&v480 = v328;
    do
    {
      v347 = &v342[v345];
      if ((v342[v345 + 7] & 1) == 0)
      {
        v348 = v342;
        v349 = v347[13];
        v350 = v347[11];
        v351 = v347[12];
        v352 = v347[10];
        v353 = (unint64_t)v346;
        v354 = v347[8];
        v355 = v347[6];
        v356 = *((unsigned __int8 *)v347 + 40);
        v357 = v347[4];
        v358 = *((_BYTE *)v347 + 72);
        v359 = _swiftEmptyDictionarySingleton;
        if (v351)
          v359 = (_QWORD *)v347[12];
        v360 = v449;
        *v449 = v355;
        *((_BYTE *)v360 + 8) = v356;
        v360[2] = v357;
        v360[3] = v356;
        v360[4] = v355;
        v360[5] = 0;
        v360[6] = v354;
        v360[7] = v358;
        v360[8] = v352;
        v360[9] = v350;
        v360[10] = v351;
        v360[11] = v349;
        v360[12] = v359;
        v360[13] = v349;
        swift_storeEnumTagMultiPayload(v360, v462, 9);
        v361 = (uint64_t)v360;
        v362 = v448;
        sub_521CC(v361, v448);
        sub_521CC(v362, v454);
        v363 = v354;
        v346 = (_QWORD *)v353;
        sub_40554(v363, v358);
        swift_bridgeObjectRetain(v352);
        swift_bridgeObjectRetain_n(v351, 2);
        if ((swift_isUniquelyReferenced_nonNull_native(v353) & 1) == 0)
          v346 = (_QWORD *)sub_2FFE0(0, *(_QWORD *)(v353 + 16) + 1, 1, v353);
        v365 = v346[2];
        v364 = v346[3];
        v342 = v348;
        if (v365 >= v364 >> 1)
          v346 = (_QWORD *)sub_2FFE0(v364 > 1, v365 + 1, 1, (unint64_t)v346);
        v328 = (_QWORD *)v480;
        v346[2] = v365 + 1;
        sub_521CC(v454, (uint64_t)v346+ ((*(unsigned __int8 *)(v463 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v463 + 80))+ *(_QWORD *)(v463 + 72) * v365);
        v344 = (uint64_t)v456;
      }
      v345 += 10;
      --v343;
    }
    while (v343);
    swift_bridgeObjectRelease_n(v342, 2);
  }
  else
  {
    v346 = _swiftEmptyArrayStorage;
  }
  v472 = v346;
  v366 = v460[2];
  v367 = _swiftEmptyArrayStorage;
  if (v366)
  {
    swift_bridgeObjectRetain_n(v460, 2);
    v368 = v460;
    v369 = 0;
    do
    {
      v370 = &v368[v369];
      if ((v368[v369 + 7] & 1) == 0)
      {
        v371 = v370[13];
        v372 = v370[11];
        v373 = v370[12];
        v374 = v370[10];
        v375 = v370[8];
        v376 = v370[6];
        v377 = *((unsigned __int8 *)v370 + 40);
        v378 = v370[4];
        v379 = *((_BYTE *)v370 + 72);
        v380 = _swiftEmptyDictionarySingleton;
        if (v373)
          v380 = (_QWORD *)v370[12];
        v381 = v451;
        *v451 = v376;
        *((_BYTE *)v381 + 8) = v377;
        v381[2] = v378;
        v381[3] = v377;
        v381[4] = v376;
        v381[5] = 0;
        v381[6] = v375;
        v381[7] = v379;
        v381[8] = v374;
        v381[9] = v372;
        v381[10] = v373;
        v381[11] = v371;
        v381[12] = v380;
        v381[13] = v371;
        swift_storeEnumTagMultiPayload(v381, v462, 9);
        v382 = (uint64_t)v381;
        v383 = v450;
        sub_521CC(v382, v450);
        sub_521CC(v383, v455);
        sub_40554(v375, v379);
        swift_bridgeObjectRetain(v374);
        swift_bridgeObjectRetain_n(v373, 2);
        if ((swift_isUniquelyReferenced_nonNull_native(v367) & 1) == 0)
          v367 = (_QWORD *)sub_2FFE0(0, v367[2] + 1, 1, (unint64_t)v367);
        v385 = v367[2];
        v384 = v367[3];
        v342 = v481;
        if (v385 >= v384 >> 1)
          v367 = (_QWORD *)sub_2FFE0(v384 > 1, v385 + 1, 1, (unint64_t)v367);
        v367[2] = v385 + 1;
        sub_521CC(v455, (uint64_t)v367+ ((*(unsigned __int8 *)(v463 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v463 + 80))+ *(_QWORD *)(v463 + 72) * v385);
        v344 = (uint64_t)v456;
      }
      v369 += 10;
      --v366;
      v368 = v460;
    }
    while (v366);
    swift_bridgeObjectRelease(v342);
    swift_bridgeObjectRelease(v368);
    v342 = v368;
  }
  else
  {
    v368 = v460;
  }
  swift_bridgeObjectRelease(v342);
  swift_bridgeObjectRelease(v368);
  swift_bridgeObjectRelease(v479);
  swift_bridgeObjectRelease(v478);
  v386 = v462;
  v387 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v463 + 56);
  v388 = v447;
  v387(v447, 1, 1, v462);
  v483[0] = v474;
  v389 = sub_3EDBC(&qword_1F1608, &qword_1F1378, (uint64_t)&protocol conformance descriptor for [A]);
  NonEmpty.init(_:)(v483, v477, v389);
  v390 = v445;
  v391 = v435;
  v481 = (_QWORD *)v445[6];
  if (((unsigned int (*)(uint64_t, uint64_t, _QWORD *))v481)(v344, 1, v435) == 1)
  {
    sub_417D8(v344, &qword_1F15E0);
  }
  else
  {
    sub_417D8(v388, &qword_1F15E8);
    v392 = (void (*)(char *, uint64_t, _QWORD *))v390[4];
    *(_QWORD *)&v479 = v389;
    v393 = v430;
    v392(v430, v344, v391);
    v394 = v393;
    v389 = v479;
    v392((char *)v388, (uint64_t)v394, v391);
    swift_storeEnumTagMultiPayload(v388, v386, 1);
    v387(v388, 0, 1, v386);
  }
  v395 = v386;
  v396 = v446;
  v387(v446, 1, 1, v386);
  v483[0] = (uint64_t)v475;
  v397 = v389;
  v398 = (uint64_t)v436;
  NonEmpty.init(_:)(v483, v477, v397);
  if (((unsigned int (*)(uint64_t, uint64_t, _QWORD *))v481)(v398, 1, v391) == 1)
  {
    sub_417D8(v398, &qword_1F15E0);
  }
  else
  {
    sub_417D8(v396, &qword_1F15E8);
    v399 = v398;
    v400 = (void (*)(char *, uint64_t, _QWORD *))v445[4];
    v401 = v431;
    v400(v431, v399, v391);
    v400((char *)v396, (uint64_t)v401, v391);
    swift_storeEnumTagMultiPayload(v396, v395, 1);
    v387(v396, 0, 1, v395);
  }
  v484[0] = _swiftEmptyArrayStorage;
  sub_10F544(v473);
  sub_10F544((uint64_t)v328);
  sub_10F544((uint64_t)v472);
  sub_10F544((uint64_t)v367);
  v402 = v437;
  sub_52210(v447, v437);
  v403 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v463 + 48);
  v404 = v395;
  if (v403(v402, 1, v395) == 1)
  {
    sub_417D8(v402, &qword_1F15E8);
  }
  else
  {
    v405 = v402;
    v406 = v438;
    sub_521CC(v405, v438);
    sub_52258(v406, v439);
    v407 = v484[0];
    if ((swift_isUniquelyReferenced_nonNull_native(v484[0]) & 1) == 0)
      v407 = sub_2FFE0(0, *(_QWORD *)(v407 + 16) + 1, 1, v407);
    v409 = *(_QWORD *)(v407 + 16);
    v408 = *(_QWORD *)(v407 + 24);
    if (v409 >= v408 >> 1)
      v407 = sub_2FFE0(v408 > 1, v409 + 1, 1, v407);
    *(_QWORD *)(v407 + 16) = v409 + 1;
    sub_521CC(v439, v407+ ((*(unsigned __int8 *)(v463 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v463 + 80))+ *(_QWORD *)(v463 + 72) * v409);
    v484[0] = v407;
    sub_5229C(v438);
  }
  v410 = v440;
  sub_52210(v446, v440);
  if (v403(v410, 1, v395) == 1)
  {
    sub_417D8(v410, &qword_1F15E8);
    v411 = v484[0];
  }
  else
  {
    v412 = v410;
    v413 = v442;
    sub_521CC(v412, v442);
    sub_52258(v413, v443);
    v411 = v484[0];
    if ((swift_isUniquelyReferenced_nonNull_native(v484[0]) & 1) == 0)
      v411 = sub_2FFE0(0, *(_QWORD *)(v411 + 16) + 1, 1, v411);
    v415 = *(_QWORD *)(v411 + 16);
    v414 = *(_QWORD *)(v411 + 24);
    if (v415 >= v414 >> 1)
      v411 = sub_2FFE0(v414 > 1, v415 + 1, 1, v411);
    *(_QWORD *)(v411 + 16) = v415 + 1;
    sub_521CC(v443, v411+ ((*(unsigned __int8 *)(v463 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v463 + 80))+ *(_QWORD *)(v463 + 72) * v415);
    v484[0] = v411;
    sub_5229C(v442);
  }
  v416 = swift_bridgeObjectRetain_n(v411, 2);
  v417 = Logger.logObject.getter(v416);
  v418 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v417, v418))
  {
    v419 = (uint8_t *)swift_slowAlloc(12, -1);
    v420 = swift_slowAlloc(32, -1);
    v421 = v404;
    v422 = v420;
    v483[0] = v420;
    *(_DWORD *)v419 = 136315138;
    v423 = Array.debugDescription.getter(v411, v421);
    v425 = v424;
    v482 = sub_9DA98(v423, v424, v483);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v482, v483, v419 + 4, v419 + 12);
    swift_bridgeObjectRelease_n(v411, 2);
    swift_bridgeObjectRelease(v425);
    _os_log_impl(&dword_0, v417, v418, "Clustered: %s", v419, 0xCu);
    swift_arrayDestroy(v422, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v422, -1, -1);
    swift_slowDealloc(v419, -1, -1);
    v426 = v444;
    swift_release(v444);

  }
  else
  {
    v426 = v444;
    swift_release(v444);

    swift_bridgeObjectRelease_n(v411, 2);
  }

  sub_417D8(v446, &qword_1F15E8);
  sub_417D8(v447, &qword_1F15E8);
  swift_beginAccess(v484, v483, 0, 0);
  v427 = v484[0];
  swift_release(v426);
  return v427;
}

uint64_t sub_52094()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_520B8(uint64_t a1)
{
  uint64_t v1;

  return sub_4B9FC(a1, v1);
}

uint64_t sub_520C0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 56));

  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_52104()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  v2 = *(_QWORD *)(v0 + 64);
  v3 = swift_task_alloc(dword_1F15FC);
  v4 = *(_OWORD *)(v0 + 32);
  v5 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_4814;
  *(_QWORD *)(v3 + 48) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  *(_OWORD *)(v3 + 32) = v5;
  return swift_task_switch(sub_4BAB8, 0, 0);
}

uint64_t sub_5216C(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_52184(char *a1)
{
  uint64_t v1;
  _QWORD *v2;
  __int128 *v3;
  char v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v9[7];

  v2 = *(_QWORD **)(v1 + 16);
  v3 = *(__int128 **)(v1 + 24);
  v4 = *a1;
  v5 = v3[5];
  v9[4] = v3[4];
  v9[5] = v5;
  v9[6] = v3[6];
  v6 = v3[1];
  v9[0] = *v3;
  v9[1] = v6;
  v7 = v3[3];
  v9[2] = v3[2];
  v9[3] = v7;
  return sub_4CCE8(v4, v2, v9);
}

uint64_t sub_521CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CollectionRecommendation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_52210(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5EDC(&qword_1F15E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_52258(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CollectionRecommendation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_5229C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CollectionRecommendation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_522D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 104);
  sub_40554(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t *sub_5235C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

void sub_5239C(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_523F0()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000014, 0x800000000019EB00);
  swift_bridgeObjectRelease(0x800000000019EB00);
  return Hasher._finalize()();
}

void sub_52490(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_524E8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x666F725072657375, 0xEB00000000656C69);
  swift_bridgeObjectRelease(0xEB00000000656C69);
  return Hasher._finalize()();
}

void sub_5256C(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_525C8()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, v0 + 7, 0x800000000019EBE0);
  swift_bridgeObjectRelease(0x800000000019EBE0);
  return Hasher._finalize()();
}

void sub_52688(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_526D8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x64496B6F6F62, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

Swift::Int sub_5277C(char a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v2 = 0xD000000000000013;
  Hasher.init(_seed:)(v5, 0);
  if (a1)
  {
    if (a1 == 1)
      v2 = 0x796E65446B6F6F62;
    else
      v2 = 0xD000000000000018;
    if (a1 == 1)
      v3 = 0xEC0000007473696CLL;
    else
      v3 = 0x800000000019ED30;
  }
  else
  {
    v3 = 0x800000000019ED00;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_5282C(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_52884()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x716552736B6F6F62, 0xEC00000074736575);
  swift_bridgeObjectRelease(0xEC00000074736575);
  return Hasher._finalize()();
}

void sub_5290C(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_52958()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000010, 0x800000000019EDF0);
  swift_bridgeObjectRelease(0x800000000019EDF0);
  return Hasher._finalize()();
}

void sub_529DC(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_52A34()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x747369486B6F6F62, 0xEB0000000079726FLL);
  swift_bridgeObjectRelease(0xEB0000000079726FLL);
  return Hasher._finalize()();
}

void sub_52ABC(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_52B14()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, v0 + 5, 0x800000000019EED0);
  swift_bridgeObjectRelease(0x800000000019EED0);
  return Hasher._finalize()();
}

void sub_52B94(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_52BEC()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x747369486B6F6F62, 0xEB0000000079726FLL);
  swift_bridgeObjectRelease(0xEB0000000079726FLL);
  return Hasher._finalize()();
}

void sub_52C7C(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_52CD4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x747369486B6F6F62, 0xEB0000000079726FLL);
  swift_bridgeObjectRelease(0xEB0000000079726FLL);
  return Hasher._finalize()();
}

void sub_52D5C(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_52DB4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x495041616964656DLL, 0xE800000000000000);
  swift_bridgeObjectRelease(0xE800000000000000);
  return Hasher._finalize()();
}

unint64_t sub_52E44(uint64_t a1)
{
  return sub_5322C(a1, &qword_1F0298, (uint64_t (*)(uint64_t))sub_3933C);
}

unint64_t sub_52E58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_5EDC(&qword_1F1D18);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_QWORD *)(a1 + 40);
  while (1)
  {
    v7 = *((_BYTE *)v6 - 8);
    v8 = *v6;
    result = sub_3933C(v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v4[6] + result) = v7;
    *(_QWORD *)(v4[7] + 8 * result) = v8;
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v6 += 2;
    v4[2] = v13;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_52F50(uint64_t a1)
{
  return sub_5322C(a1, &qword_1F1D20, (uint64_t (*)(uint64_t))sub_3933C);
}

unint64_t sub_52F64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = sub_5EDC(&qword_1F14E0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v26 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v26);
    return (unint64_t)v8;
  }
  sub_5EDC(&qword_1F1D00);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = (char *)v5 + *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v28 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_418BC(v13, (uint64_t)v5, &qword_1F14E0);
    v15 = *v5;
    v16 = v5[1];
    result = sub_39064(*v5, v16);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v20 = (uint64_t *)(v8[6] + 16 * result);
    *v20 = v15;
    v20[1] = v16;
    v21 = v8[7];
    v22 = type metadata accessor for Com_Apple_News_Algorithms_Proto_Model_Feature(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v19, v10, v22);
    v23 = v8[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_12;
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v26 = v28;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_53104(uint64_t a1)
{
  return sub_5322C(a1, &qword_1F14B8, (uint64_t (*)(uint64_t))sub_393D0);
}

unint64_t sub_53118(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned __int8 v10;
  uint64_t v11;
  unint64_t result;
  char v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
    v7 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_5EDC(a2);
  v6 = static _DictionaryStorage.allocate(capacity:)(v4);
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v7;
  }
  swift_retain(v6);
  v9 = (_QWORD *)(a1 + 40);
  while (1)
  {
    v10 = *((_BYTE *)v9 - 8);
    v11 = *v9;
    result = a3(v10);
    if ((v13 & 1) != 0)
      break;
    *(_QWORD *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v7[6] + result) = v10;
    *(_QWORD *)(v7[7] + 8 * result) = v11;
    v14 = v7[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v7[2] = v16;
    v9 += 2;
    if (!--v8)
    {
      swift_release(v7);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_53218(uint64_t a1)
{
  return sub_5322C(a1, &qword_1F1D10, (uint64_t (*)(uint64_t))sub_3933C);
}

unint64_t sub_5322C(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  char v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
    v7 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_5EDC(a2);
  v6 = static _DictionaryStorage.allocate(capacity:)(v4);
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v7;
  }
  swift_retain(v6);
  v9 = (_QWORD *)(a1 + 40);
  while (1)
  {
    v10 = *((unsigned __int8 *)v9 - 8);
    v11 = *v9;
    swift_bridgeObjectRetain(*v9);
    result = a3(v10);
    if ((v13 & 1) != 0)
      break;
    *(_QWORD *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v7[6] + result) = v10;
    *(_QWORD *)(v7[7] + 8 * result) = v11;
    v14 = v7[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v7[2] = v16;
    v9 += 2;
    if (!--v8)
    {
      swift_release(v7);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_53334(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[2];

  v2 = sub_5EDC(&qword_1F1180);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_5EDC(&qword_1F1D50);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v23[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_418BC(v13, (uint64_t)v5, &qword_1F1180);
    result = sub_39574((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    *(_QWORD *)(v8[7] + 8 * v17) = *(_QWORD *)&v5[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_11;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_534C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_5EDC(&qword_1F1DC8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 2);
    v8 = *((_QWORD *)v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_39064(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_BYTE *)(v4[7] + result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 24;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_535D8(uint64_t a1)
{
  return sub_535F0(a1, &qword_1F1D70);
}

unint64_t sub_535E4(uint64_t a1)
{
  return sub_535F0(a1, &qword_1F1D68);
}

unint64_t sub_535F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  unint64_t result;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _QWORD __dst[70];
  _BYTE __src[552];

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = _swiftEmptyDictionarySingleton;
    goto LABEL_10;
  }
  sub_5EDC(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = v6 - 1;
  for (i = 32; ; i += 560)
  {
    memcpy(__dst, (const void *)(a1 + i), sizeof(__dst));
    v9 = __dst[69];
    memcpy(__src, (const void *)(a1 + i), 0x221uLL);
    sub_667AC(__dst);
    result = sub_397A8(__src);
    if ((v11 & 1) != 0)
      break;
    v12 = result;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    result = (unint64_t)memcpy((void *)(v5[6] + 552 * result), __src, 0x221uLL);
    *(_QWORD *)(v5[7] + 8 * v12) = v9;
    v13 = v5[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_12;
    v5[2] = v15;
    if (!v7)
    {
      swift_release(v5);
      goto LABEL_10;
    }
    --v7;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_53738(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned __int8 v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_5EDC(&qword_1F1D58);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_QWORD *)(a1 + 40);
  while (1)
  {
    v7 = *((_BYTE *)v6 - 8);
    v8 = *v6;
    result = sub_39814(v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v4[6] + result) = v7;
    *(_QWORD *)(v4[7] + 8 * result) = v8;
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v6 += 2;
    v4[2] = v13;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_53830(uint64_t a1)
{
  return sub_5322C(a1, &qword_1F1D60, sub_3951C);
}

unint64_t sub_53844(uint64_t a1)
{
  return sub_5322C(a1, &qword_1F1DC0, sub_390C8);
}

unint64_t sub_53858(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  char v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_5EDC(&qword_1F1D40);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_BYTE *)(a1 + 52);
  while (1)
  {
    v7 = *(_QWORD *)(v6 - 20);
    v8 = *(_QWORD *)(v6 - 12);
    v9 = *((_DWORD *)v6 - 1);
    v10 = *v6;
    sub_1F6D4(v7, v8);
    result = sub_398C4(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = v4[7] + 8 * result;
    *(_DWORD *)v14 = v9;
    *(_BYTE *)(v14 + 4) = v10;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v4[2] = v17;
    v6 += 24;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t Configuration.MediaTypeConfiguration.supportsFreeTopCharts.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t Configuration.MediaTypeConfiguration.supportsPaidTopCharts.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 9);
}

void sub_5398C()
{
  qword_224560 = (uint64_t)&off_1D77C0;
  word_224568 = 257;
}

void sub_539AC()
{
  qword_224570 = (uint64_t)&off_1D87A8;
  word_224578 = 256;
}

uint64_t sub_539D4()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000015;
  else
    return 0x73444965726E6567;
}

uint64_t sub_53A38@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_65B0C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_53A5C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_53C34();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_53A84(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_53C34();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Configuration.MediaTypeConfiguration.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unsigned int v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;

  v4 = sub_5EDC(&qword_1F1650);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = *((unsigned __int8 *)v1 + 8);
  HIDWORD(v17) = *((unsigned __int8 *)v1 + 9);
  v18 = v9;
  v10 = a1[3];
  v11 = a1[4];
  sub_49F4(a1, v10);
  v12 = sub_53C34();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Configuration.MediaTypeConfiguration.CodingKeys, &type metadata for Configuration.MediaTypeConfiguration.CodingKeys, v12, v10, v11);
  v22 = v8;
  v21 = 0;
  v13 = sub_5EDC(&qword_1F1660);
  v14 = sub_53E6C(&qword_1F1668, (uint64_t)&protocol witness table for UInt64, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v4, v13, v14);
  if (!v2)
  {
    v15 = HIDWORD(v17);
    v20 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v18, &v20, v4);
    v19 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v19, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_53C34()
{
  unint64_t result;

  result = qword_1F1658;
  if (!qword_1F1658)
  {
    result = swift_getWitnessTable(&unk_18FA5C, &type metadata for Configuration.MediaTypeConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1658);
  }
  return result;
}

uint64_t Configuration.MediaTypeConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;

  v5 = sub_5EDC(&qword_1F1670);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_53C34();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Configuration.MediaTypeConfiguration.CodingKeys, &type metadata for Configuration.MediaTypeConfiguration.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_62F8(a1);
  v12 = sub_5EDC(&qword_1F1660);
  v20 = 0;
  v13 = sub_53E6C(&qword_1F1678, (uint64_t)&protocol witness table for UInt64, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v21, v12, &v20, v5, v12, v13);
  v14 = v21;
  v19 = 1;
  swift_bridgeObjectRetain(v21);
  v15 = KeyedDecodingContainer.decode(_:forKey:)(&v19, v5);
  v18 = 2;
  LOBYTE(v12) = KeyedDecodingContainer.decode(_:forKey:)(&v18, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(_QWORD *)a2 = v14;
  *(_BYTE *)(a2 + 8) = v15 & 1;
  *(_BYTE *)(a2 + 9) = v12 & 1;
  sub_62F8(a1);
  return swift_bridgeObjectRelease(v14);
}

uint64_t sub_53E6C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_5F68(&qword_1F1660);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_53ECC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Configuration.MediaTypeConfiguration.init(from:)(a1, a2);
}

uint64_t sub_53EE0(_QWORD *a1)
{
  return Configuration.MediaTypeConfiguration.encode(to:)(a1);
}

BooksPersonalization::Configuration::GenreRecommendationConfiguration::Source_optional __swiftcall Configuration.GenreRecommendationConfiguration.Source.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D88A0;
  return (BooksPersonalization::Configuration::GenreRecommendationConfiguration::Source_optional)sub_55364(rawValue, v2, v1);
}

uint64_t Configuration.GenreRecommendationConfiguration.Source.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_53F34 + 4 * byte_18D026[*v0]))(0xD000000000000013, 0x800000000019EE20);
}

uint64_t sub_53F34()
{
  return 0x747369486B6F6F62;
}

uint64_t sub_53F54(uint64_t a1)
{
  return a1 + 14;
}

uint64_t sub_53F7C()
{
  return 1768055156;
}

void sub_53F8C(char *a1)
{
  sub_7A57C(*a1);
}

void sub_53F98()
{
  char *v0;

  sub_529DC(*v0);
}

void sub_53FA0(uint64_t a1)
{
  char *v1;

  sub_F8F28(a1, *v1);
}

void sub_53FA8(uint64_t a1)
{
  char *v1;

  sub_152958(a1, *v1);
}

BooksPersonalization::Configuration::GenreRecommendationConfiguration::Source_optional sub_53FB0(Swift::String *a1)
{
  return Configuration.GenreRecommendationConfiguration.Source.init(rawValue:)(*a1);
}

uint64_t sub_53FBC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = Configuration.GenreRecommendationConfiguration.Source.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_53FE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_669FC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_5403C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_669FC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

BooksPersonalization::Configuration::GenreRecommendationConfiguration::GenreDepth_optional __swiftcall Configuration.GenreRecommendationConfiguration.GenreDepth.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D8938;
  return (BooksPersonalization::Configuration::GenreRecommendationConfiguration::GenreDepth_optional)sub_16848(rawValue, v2, v1);
}

_UNKNOWN **static Configuration.GenreRecommendationConfiguration.GenreDepth.allCases.getter()
{
  return &off_1D89A0;
}

uint64_t Configuration.GenreRecommendationConfiguration.GenreDepth.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x656E4F6C6576656CLL;
  if (*v0 != 1)
    v1 = 0x6F77546C6576656CLL;
  if (*v0)
    return v1;
  else
    return 0x73657661656CLL;
}

uint64_t sub_540F8(char *a1, unsigned __int8 *a2)
{
  return sub_79B74(*a1, *a2);
}

Swift::Int sub_54104()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = 0x656E4F6C6576656CLL;
  if (v1 != 1)
    v2 = 0x6F77546C6576656CLL;
  if (v1)
    v3 = v2;
  else
    v3 = 0x73657661656CLL;
  if (v1)
    v4 = 0xE800000000000000;
  else
    v4 = 0xE600000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_541A0(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = 0x656E4F6C6576656CLL;
  if (*v1 != 1)
    v2 = 0x6F77546C6576656CLL;
  if (*v1)
    v3 = v2;
  else
    v3 = 0x73657661656CLL;
  if (*v1)
    v4 = 0xE800000000000000;
  else
    v4 = 0xE600000000000000;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_54218(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = 0x656E4F6C6576656CLL;
  if (v2 != 1)
    v3 = 0x6F77546C6576656CLL;
  if (v2)
    v4 = v3;
  else
    v4 = 0x73657661656CLL;
  if (v2)
    v5 = 0xE800000000000000;
  else
    v5 = 0xE600000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

BooksPersonalization::Configuration::GenreRecommendationConfiguration::GenreDepth_optional sub_542B0(Swift::String *a1)
{
  return Configuration.GenreRecommendationConfiguration.GenreDepth.init(rawValue:)(*a1);
}

void sub_542BC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *v1;
  v3 = 0xE600000000000000;
  v4 = 0x656E4F6C6576656CLL;
  if (v2 != 1)
    v4 = 0x6F77546C6576656CLL;
  v5 = v2 == 0;
  if (*v1)
    v6 = v4;
  else
    v6 = 0x73657661656CLL;
  if (!v5)
    v3 = 0xE800000000000000;
  *a1 = v6;
  a1[1] = v3;
}

uint64_t sub_54318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_669B8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_54374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_669B8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_543C0(_QWORD *a1@<X8>)
{
  *a1 = &off_1D89C8;
}

uint64_t sub_543D0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_669B8();
  return RawRepresentable<>.codingKey.getter(a1, a2, v4);
}

uint64_t sub_54410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;

  v10 = sub_669B8();
  return RawRepresentable<>.init<A>(codingKey:)(a1, a4, a2, a5, v10, a3);
}

uint64_t sub_54478(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_544B0 + 4 * byte_18D02B[a1]))(0xD000000000000010, 0x800000000019EEB0);
}

uint64_t sub_544B0(uint64_t a1)
{
  return a1 + 5;
}

uint64_t sub_54500(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_54538 + 4 * byte_18D030[a1]))(0xD000000000000010, 0x800000000019EEB0);
}

uint64_t sub_54538(uint64_t a1)
{
  return a1 + 5;
}

void sub_54588(char *a1)
{
  sub_7A6F0(*a1);
}

void sub_54594()
{
  char *v0;

  sub_52ABC(*v0);
}

void sub_5459C(uint64_t a1)
{
  char *v1;

  sub_F8FD8(a1, *v1);
}

void sub_545A4(uint64_t a1)
{
  char *v1;

  sub_152A34(a1, *v1);
}

unint64_t sub_545AC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_65C54(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_545D8@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_54478(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_54600()
{
  unsigned __int8 *v0;

  return sub_54500(*v0);
}

unint64_t sub_54608@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_65C54(a1);
  *a2 = result;
  return result;
}

uint64_t sub_5462C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_54954();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_54654(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_54954();
  return CodingKey.debugDescription.getter(a1, v2);
}

void Series.mediaType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 8);
}

void Configuration.GenreRecommendationConfiguration.source.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 9);
}

double FeatureAffinityInfo.weight.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

uint64_t Configuration.GenreRecommendationConfiguration.preferSaleTypeToGenreOrder.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

BooksPersonalization::Configuration::GenreRecommendationConfiguration __swiftcall Configuration.GenreRecommendationConfiguration.init(source:combinedScorerBookHistoryWeight:bookHistoryLimit:bookHistoryGenreDepth:preferSaleTypeToGenreOrder:)(BooksPersonalization::Configuration::GenreRecommendationConfiguration::Source_optional source, Swift::Double_optional combinedScorerBookHistoryWeight, Swift::Int_optional bookHistoryLimit, BooksPersonalization::Configuration::GenreRecommendationConfiguration::GenreDepth_optional bookHistoryGenreDepth, Swift::Bool_optional preferSaleTypeToGenreOrder)
{
  char v5;
  uint64_t v6;
  int v7;
  int v8;
  double v9;
  uint64_t v10;
  BooksPersonalization::Configuration::GenreRecommendationConfiguration result;

  v7 = *(unsigned __int8 *)source.value;
  v8 = *(unsigned __int8 *)preferSaleTypeToGenreOrder.value;
  if (v7 == 5)
    LOBYTE(v7) = 1;
  v9 = *(double *)&combinedScorerBookHistoryWeight.is_nil;
  if ((bookHistoryLimit.value & 1) != 0)
    v9 = 0.7;
  v10 = 1000;
  if ((bookHistoryGenreDepth.value & 1) == 0)
    v10 = *(_QWORD *)&bookHistoryLimit.is_nil;
  *(_QWORD *)v6 = v10;
  if (v8 == 3)
    LOBYTE(v8) = 1;
  *(_BYTE *)(v6 + 8) = v8;
  *(_BYTE *)(v6 + 9) = v7;
  *(double *)(v6 + 16) = v9;
  *(_BYTE *)(v6 + 24) = v5 & 1;
  result.preferSaleTypeToGenreOrder = bookHistoryLimit.value;
  result.bookHistoryGenreDepth = combinedScorerBookHistoryWeight.is_nil;
  result.combinedScorerBookHistoryWeight = v9;
  LOBYTE(result.bookHistoryLimit) = source;
  return result;
}

uint64_t Configuration.GenreRecommendationConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  char v21;
  char v22;
  double v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  int v27;
  int v28;
  double v29;
  int v30;
  char v31;
  char v32;
  uint64_t v33;

  v5 = sub_5EDC(&qword_1F1680);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_54954();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Configuration.GenreRecommendationConfiguration.CodingKeys, &type metadata for Configuration.GenreRecommendationConfiguration.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    BYTE3(v33) = 2;
    v12 = sub_54998();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)((uint64_t *)((char *)&v33 + 4), &type metadata for Configuration.GenreRecommendationConfiguration.Source, (char *)&v33 + 3, v5, &type metadata for Configuration.GenreRecommendationConfiguration.Source, v12);
    v13 = BYTE4(v33);
    BYTE2(v33) = 3;
    v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)((char *)&v33 + 2, v5);
    v16 = v15;
    v29 = *(double *)&v14;
    v30 = v13;
    BYTE1(v33) = 0;
    v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)((char *)&v33 + 1, v5);
    v28 = v18;
    v32 = 1;
    v19 = sub_549DC();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v33, &type metadata for Configuration.GenreRecommendationConfiguration.GenreDepth, &v32, v5, &type metadata for Configuration.GenreRecommendationConfiguration.GenreDepth, v19);
    v27 = v33;
    v31 = 4;
    v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v31, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v22 = v30;
    if (v30 == 5)
      v22 = 1;
    v23 = v29;
    if ((v16 & 1) != 0)
      v23 = 0.7;
    v24 = 1000;
    if ((v28 & 1) == 0)
      v24 = v17;
    *(_QWORD *)a2 = v24;
    v25 = v27;
    if (v27 == 3)
      v25 = 1;
    *(_BYTE *)(a2 + 8) = v25;
    *(_BYTE *)(a2 + 9) = v22;
    *(double *)(a2 + 16) = v23;
    *(_BYTE *)(a2 + 24) = v21 & 1;
  }
  return sub_62F8(a1);
}

unint64_t sub_54954()
{
  unint64_t result;

  result = qword_1F1688;
  if (!qword_1F1688)
  {
    result = swift_getWitnessTable(&unk_18FA0C, &type metadata for Configuration.GenreRecommendationConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1688);
  }
  return result;
}

unint64_t sub_54998()
{
  unint64_t result;

  result = qword_1F1690;
  if (!qword_1F1690)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.GenreRecommendationConfiguration.Source, &type metadata for Configuration.GenreRecommendationConfiguration.Source);
    atomic_store(result, (unint64_t *)&qword_1F1690);
  }
  return result;
}

unint64_t sub_549DC()
{
  unint64_t result;

  result = qword_1F1698;
  if (!qword_1F1698)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.GenreRecommendationConfiguration.GenreDepth, &type metadata for Configuration.GenreRecommendationConfiguration.GenreDepth);
    atomic_store(result, (unint64_t *)&qword_1F1698);
  }
  return result;
}

uint64_t Configuration.GenreRecommendationConfiguration.encode(to:)(_QWORD *a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  double v8;
  int v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;

  v4 = sub_5EDC(&qword_1F16A0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = *((unsigned __int8 *)v1 + 8);
  v21 = *((unsigned __int8 *)v1 + 9);
  v22 = v9;
  v10 = v1[2];
  v20 = *((unsigned __int8 *)v1 + 24);
  v11 = a1[3];
  v12 = a1[4];
  sub_49F4(a1, v11);
  v13 = sub_54954();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Configuration.GenreRecommendationConfiguration.CodingKeys, &type metadata for Configuration.GenreRecommendationConfiguration.CodingKeys, v13, v11, v12);
  v29 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(*(_QWORD *)&v8, &v29, v4);
  if (!v2)
  {
    v14 = v20;
    v15 = v21;
    v28 = v22;
    v27 = 1;
    v16 = sub_54C04();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v28, &v27, v4, &type metadata for Configuration.GenreRecommendationConfiguration.GenreDepth, v16);
    v26 = v15;
    v25 = 2;
    v17 = sub_54C48();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v25, v4, &type metadata for Configuration.GenreRecommendationConfiguration.Source, v17);
    v24 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(&v24, v4, v10);
    v23 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v23, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_54C04()
{
  unint64_t result;

  result = qword_1F16A8;
  if (!qword_1F16A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.GenreRecommendationConfiguration.GenreDepth, &type metadata for Configuration.GenreRecommendationConfiguration.GenreDepth);
    atomic_store(result, (unint64_t *)&qword_1F16A8);
  }
  return result;
}

unint64_t sub_54C48()
{
  unint64_t result;

  result = qword_1F16B0;
  if (!qword_1F16B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.GenreRecommendationConfiguration.Source, &type metadata for Configuration.GenreRecommendationConfiguration.Source);
    atomic_store(result, (unint64_t *)&qword_1F16B0);
  }
  return result;
}

uint64_t sub_54C8C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Configuration.GenreRecommendationConfiguration.init(from:)(a1, a2);
}

uint64_t sub_54CA0(_QWORD *a1)
{
  return Configuration.GenreRecommendationConfiguration.encode(to:)(a1);
}

BooksPersonalization::Configuration::SeedBasedRecommendationConfiguration::Source_optional __swiftcall Configuration.SeedBasedRecommendationConfiguration.Source.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D8A88;
  return (BooksPersonalization::Configuration::SeedBasedRecommendationConfiguration::Source_optional)sub_16848(rawValue, v2, v1);
}

uint64_t SeedBasedRecommendationSource.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 12918;
  if (*v0 != 1)
    v1 = 1768055156;
  if (*v0)
    return v1;
  else
    return 12662;
}

uint64_t sub_54CFC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_79718(*a1, *a2);
}

Swift::Int sub_54D08()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE200000000000000;
  v3 = 12918;
  if (v1 != 1)
  {
    v3 = 1768055156;
    v2 = 0xE400000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 12662;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE200000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_54D88(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE200000000000000;
  v3 = 12918;
  if (*v1 != 1)
  {
    v3 = 1768055156;
    v2 = 0xE400000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 12662;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE200000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_54DE4(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE200000000000000;
  v4 = 12918;
  if (v2 != 1)
  {
    v4 = 1768055156;
    v3 = 0xE400000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 12662;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE200000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

BooksPersonalization::Configuration::SeedBasedRecommendationConfiguration::Source_optional sub_54E60(Swift::String *a1)
{
  return Configuration.SeedBasedRecommendationConfiguration.Source.init(rawValue:)(*a1);
}

void sub_54E6C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE200000000000000;
  v4 = 0xE200000000000000;
  v5 = 12918;
  if (v2 != 1)
  {
    v5 = 1768055156;
    v4 = 0xE400000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 12662;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_54EAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_66974();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_54F08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_66974();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_54F5C()
{
  return 0x656372756F73;
}

uint64_t sub_54F70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x656372756F73 && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease(0xE600000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656372756F73, 0xE600000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_54FFC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_55148();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_55024(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_55148();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Configuration.SeedBasedRecommendationConfiguration.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v3 = sub_5EDC(&qword_1F16B8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_49F4(a1, v8);
  v10 = sub_55148();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Configuration.SeedBasedRecommendationConfiguration.CodingKeys, &type metadata for Configuration.SeedBasedRecommendationConfiguration.CodingKeys, v10, v8, v9);
  v15 = v7;
  v11 = sub_5518C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, v12, v3, &type metadata for Configuration.SeedBasedRecommendationConfiguration.Source, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_55148()
{
  unint64_t result;

  result = qword_1F16C0;
  if (!qword_1F16C0)
  {
    result = swift_getWitnessTable(&unk_18F9BC, &type metadata for Configuration.SeedBasedRecommendationConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F16C0);
  }
  return result;
}

unint64_t sub_5518C()
{
  unint64_t result;

  result = qword_1F16C8;
  if (!qword_1F16C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.SeedBasedRecommendationConfiguration.Source, &type metadata for Configuration.SeedBasedRecommendationConfiguration.Source);
    atomic_store(result, (unint64_t *)&qword_1F16C8);
  }
  return result;
}

uint64_t Configuration.SeedBasedRecommendationConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_5EDC(&qword_1F16D0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_55148();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Configuration.SeedBasedRecommendationConfiguration.CodingKeys, &type metadata for Configuration.SeedBasedRecommendationConfiguration.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_552EC();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for Configuration.SeedBasedRecommendationConfiguration.Source, v13, v5, &type metadata for Configuration.SeedBasedRecommendationConfiguration.Source, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v16;
  }
  return sub_62F8(a1);
}

unint64_t sub_552EC()
{
  unint64_t result;

  result = qword_1F16D8;
  if (!qword_1F16D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.SeedBasedRecommendationConfiguration.Source, &type metadata for Configuration.SeedBasedRecommendationConfiguration.Source);
    atomic_store(result, (unint64_t *)&qword_1F16D8);
  }
  return result;
}

uint64_t sub_55330@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return Configuration.SeedBasedRecommendationConfiguration.init(from:)(a1, a2);
}

uint64_t sub_55344(_QWORD *a1)
{
  return Configuration.SeedBasedRecommendationConfiguration.encode(to:)(a1);
}

BooksPersonalization::Configuration::CollectionsConfiguration::Source_optional __swiftcall Configuration.CollectionsConfiguration.Source.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D8AF0;
  return (BooksPersonalization::Configuration::CollectionsConfiguration::Source_optional)sub_55364(rawValue, v2, v1);
}

uint64_t sub_55364@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X2>, char *a3@<X8>)
{
  void *object;
  Swift::String v4;
  unint64_t v7;
  uint64_t result;
  char v9;

  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  v7 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(object);
  v9 = 5;
  if (v7 < 5)
    v9 = v7;
  *a3 = v9;
  return result;
}

uint64_t Configuration.CollectionsConfiguration.Source.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_553EC + 4 * byte_18D035[*v0]))(0xD000000000000013, 0x800000000019EE20);
}

uint64_t sub_553EC()
{
  return 0x747369486B6F6F62;
}

uint64_t sub_5540C(uint64_t a1)
{
  return a1 + 15;
}

uint64_t sub_55424()
{
  return 0x495041616964656DLL;
}

uint64_t sub_5543C()
{
  return 1768055156;
}

void sub_5544C(char *a1)
{
  sub_7A848(*a1);
}

void sub_55458()
{
  char *v0;

  sub_52B94(*v0);
}

void sub_55460(uint64_t a1)
{
  char *v1;

  sub_F9080(a1, *v1);
}

void sub_55468(uint64_t a1)
{
  char *v1;

  sub_152B08(a1, *v1);
}

BooksPersonalization::Configuration::CollectionsConfiguration::Source_optional sub_55470(Swift::String *a1)
{
  return Configuration.CollectionsConfiguration.Source.init(rawValue:)(*a1);
}

uint64_t sub_5547C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = Configuration.CollectionsConfiguration.Source.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_554A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_66930();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_554FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_66930();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

BooksPersonalization::Configuration::CollectionsConfiguration::BooksConfiguration __swiftcall Configuration.CollectionsConfiguration.BooksConfiguration.init(rescorer:)(BooksPersonalization::Configuration::CollectionsConfiguration::BooksConfiguration rescorer)
{
  _BYTE *v1;
  int v2;

  v2 = *(unsigned __int8 *)rescorer.rescorer;
  if (v2 == 3)
    LOBYTE(v2) = 1;
  *v1 = v2;
  return rescorer;
}

uint64_t Configuration.CollectionsConfiguration.BooksConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v16;
  uint64_t v17;

  v5 = sub_5EDC(&qword_1F16E0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_55680();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Configuration.CollectionsConfiguration.BooksConfiguration.CodingKeys, &type metadata for Configuration.CollectionsConfiguration.BooksConfiguration.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_556C4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v17, &type metadata for Scorer, v13, v5, &type metadata for Scorer, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v14 = v17;
    if (v17 == 3)
      v14 = 1;
    *a2 = v14;
  }
  return sub_62F8(a1);
}

unint64_t sub_55680()
{
  unint64_t result;

  result = qword_1F16E8;
  if (!qword_1F16E8)
  {
    result = swift_getWitnessTable(&unk_18F96C, &type metadata for Configuration.CollectionsConfiguration.BooksConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F16E8);
  }
  return result;
}

unint64_t sub_556C4()
{
  unint64_t result;

  result = qword_1F16F0;
  if (!qword_1F16F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Scorer, &type metadata for Scorer);
    atomic_store(result, (unint64_t *)&qword_1F16F0);
  }
  return result;
}

uint64_t sub_55708()
{
  return 0x7265726F63736572;
}

uint64_t sub_55720@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x7265726F63736572 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease(0xE800000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7265726F63736572, 0xE800000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_557B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_55680();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_557DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_55680();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Configuration.CollectionsConfiguration.BooksConfiguration.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v3 = sub_5EDC(&qword_1F16F8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_49F4(a1, v8);
  v10 = sub_55680();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Configuration.CollectionsConfiguration.BooksConfiguration.CodingKeys, &type metadata for Configuration.CollectionsConfiguration.BooksConfiguration.CodingKeys, v10, v8, v9);
  v15 = v7;
  v11 = sub_55900();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, v12, v3, &type metadata for Scorer, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_55900()
{
  unint64_t result;

  result = qword_1F1700;
  if (!qword_1F1700)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Scorer, &type metadata for Scorer);
    atomic_store(result, (unint64_t *)&qword_1F1700);
  }
  return result;
}

uint64_t sub_55944@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  return Configuration.CollectionsConfiguration.BooksConfiguration.init(from:)(a1, a2);
}

uint64_t sub_55958(_QWORD *a1)
{
  return Configuration.CollectionsConfiguration.BooksConfiguration.encode(to:)(a1);
}

uint64_t Configuration.CollectionsConfiguration.BooksBySuggestedAuthorsConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  return sub_55EE0(a1, &qword_1F1708, (uint64_t (*)(void))sub_55998, (uint64_t)&type metadata for Configuration.CollectionsConfiguration.BooksBySuggestedAuthorsConfiguration.CodingKeys, a2);
}

unint64_t sub_55998()
{
  unint64_t result;

  result = qword_1F1710;
  if (!qword_1F1710)
  {
    result = swift_getWitnessTable(&unk_18F91C, &type metadata for Configuration.CollectionsConfiguration.BooksBySuggestedAuthorsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1710);
  }
  return result;
}

unint64_t sub_559DC()
{
  unint64_t result;

  result = qword_1F1718;
  if (!qword_1F1718)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.CollectionsConfiguration.Source, &type metadata for Configuration.CollectionsConfiguration.Source);
    atomic_store(result, (unint64_t *)&qword_1F1718);
  }
  return result;
}

uint64_t sub_55A20(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_55998();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_55A48(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_55998();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Configuration.CollectionsConfiguration.BooksBySuggestedAuthorsConfiguration.encode(to:)(_QWORD *a1)
{
  return sub_56914(a1, &qword_1F1720, (uint64_t (*)(void))sub_55998, (uint64_t)&type metadata for Configuration.CollectionsConfiguration.BooksBySuggestedAuthorsConfiguration.CodingKeys);
}

unint64_t sub_55A9C()
{
  unint64_t result;

  result = qword_1F1728;
  if (!qword_1F1728)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.CollectionsConfiguration.Source, &type metadata for Configuration.CollectionsConfiguration.Source);
    atomic_store(result, (unint64_t *)&qword_1F1728);
  }
  return result;
}

uint64_t sub_55AE0@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  return Configuration.CollectionsConfiguration.BooksBySuggestedAuthorsConfiguration.init(from:)(a1, a2);
}

uint64_t sub_55AF4(_QWORD *a1)
{
  return Configuration.CollectionsConfiguration.BooksBySuggestedAuthorsConfiguration.encode(to:)(a1);
}

uint64_t Configuration.CollectionsConfiguration.BooksYouMightLikeConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  return sub_55EE0(a1, &qword_1F1730, (uint64_t (*)(void))sub_55B34, (uint64_t)&type metadata for Configuration.CollectionsConfiguration.BooksYouMightLikeConfiguration.CodingKeys, a2);
}

unint64_t sub_55B34()
{
  unint64_t result;

  result = qword_1F1738;
  if (!qword_1F1738)
  {
    result = swift_getWitnessTable(&unk_18F8CC, &type metadata for Configuration.CollectionsConfiguration.BooksYouMightLikeConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1738);
  }
  return result;
}

uint64_t sub_55B78(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_55B34();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_55BA0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_55B34();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Configuration.CollectionsConfiguration.BooksYouMightLikeConfiguration.encode(to:)(_QWORD *a1)
{
  return sub_56914(a1, &qword_1F1740, (uint64_t (*)(void))sub_55B34, (uint64_t)&type metadata for Configuration.CollectionsConfiguration.BooksYouMightLikeConfiguration.CodingKeys);
}

uint64_t sub_55BF4@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  return Configuration.CollectionsConfiguration.BooksYouMightLikeConfiguration.init(from:)(a1, a2);
}

uint64_t sub_55C08(_QWORD *a1)
{
  return Configuration.CollectionsConfiguration.BooksYouMightLikeConfiguration.encode(to:)(a1);
}

uint64_t Configuration.CollectionsConfiguration.ForYouConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  char v15;
  char v16;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v5 = sub_5EDC(&qword_1F1748);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_55DA4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Configuration.CollectionsConfiguration.ForYouConfiguration.CodingKeys, &type metadata for Configuration.CollectionsConfiguration.ForYouConfiguration.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    BYTE1(v20) = 0;
    v12 = sub_559DC();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)((uint64_t *)((char *)&v20 + 2), &type metadata for Configuration.CollectionsConfiguration.Source, (char *)&v20 + 1, v5, &type metadata for Configuration.CollectionsConfiguration.Source, v12);
    v13 = BYTE2(v20);
    v19 = 1;
    v14 = sub_556C4();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v20, &type metadata for Scorer, &v19, v5, &type metadata for Scorer, v14);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v15 = v20;
    if (v13 == 5)
      v16 = 3;
    else
      v16 = v13;
    *a2 = v16;
    a2[1] = v15;
  }
  return sub_62F8(a1);
}

unint64_t sub_55DA4()
{
  unint64_t result;

  result = qword_1F1750;
  if (!qword_1F1750)
  {
    result = swift_getWitnessTable(&unk_18F87C, &type metadata for Configuration.CollectionsConfiguration.ForYouConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1750);
  }
  return result;
}

uint64_t sub_55DE8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_55DA4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_55E10(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_55DA4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Configuration.CollectionsConfiguration.ForYouConfiguration.encode(to:)(_QWORD *a1)
{
  return sub_56914(a1, &qword_1F1758, (uint64_t (*)(void))sub_55DA4, (uint64_t)&type metadata for Configuration.CollectionsConfiguration.ForYouConfiguration.CodingKeys);
}

uint64_t sub_55E64@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  return Configuration.CollectionsConfiguration.ForYouConfiguration.init(from:)(a1, a2);
}

uint64_t sub_55E78(_QWORD *a1)
{
  return Configuration.CollectionsConfiguration.ForYouConfiguration.encode(to:)(a1);
}

BooksPersonalization::Configuration::CollectionsConfiguration::MangaYouMightLikeConfiguration __swiftcall Configuration.CollectionsConfiguration.MangaYouMightLikeConfiguration.init(source:rescorer:)(BooksPersonalization::Configuration::CollectionsConfiguration::Source_optional source, BooksPersonalization::Scorer_optional rescorer)
{
  _BYTE *v2;
  int v3;
  int v4;
  BooksPersonalization::Configuration::CollectionsConfiguration::MangaYouMightLikeConfiguration result;

  v3 = *(unsigned __int8 *)source.value;
  v4 = *(unsigned __int8 *)rescorer.value;
  if (v3 == 5)
    LOBYTE(v3) = 3;
  if (v4 == 3)
    LOBYTE(v4) = 1;
  *v2 = v3;
  v2[1] = v4;
  result.source = source.value;
  return result;
}

uint64_t Configuration.CollectionsConfiguration.MangaYouMightLikeConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  return sub_55EE0(a1, &qword_1F1760, (uint64_t (*)(void))sub_56080, (uint64_t)&type metadata for Configuration.CollectionsConfiguration.MangaYouMightLikeConfiguration.CodingKeys, a2);
}

uint64_t sub_55EE0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  char v21;
  char v22;
  char *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  v24 = a5;
  v25 = sub_5EDC(a2);
  v9 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_49F4(a1, v12);
  v14 = a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)(a4, a4, v14, v12, v13);
  if (!v5)
  {
    v15 = v9;
    v16 = v24;
    BYTE1(v27) = 0;
    v17 = sub_559DC();
    v18 = v25;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)((uint64_t *)((char *)&v27 + 2), &type metadata for Configuration.CollectionsConfiguration.Source, (char *)&v27 + 1, v25, &type metadata for Configuration.CollectionsConfiguration.Source, v17);
    v19 = BYTE2(v27);
    v26 = 1;
    v20 = sub_556C4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v27, &type metadata for Scorer, &v26, v18, &type metadata for Scorer, v20);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v11, v18);
    v21 = v27;
    if (v19 == 5)
      v22 = 3;
    else
      v22 = v19;
    if (v27 == 3)
      v21 = 1;
    *v16 = v22;
    v16[1] = v21;
  }
  return sub_62F8(a1);
}

unint64_t sub_56080()
{
  unint64_t result;

  result = qword_1F1768;
  if (!qword_1F1768)
  {
    result = swift_getWitnessTable(&unk_18F82C, &type metadata for Configuration.CollectionsConfiguration.MangaYouMightLikeConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1768);
  }
  return result;
}

uint64_t sub_560C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_56080();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_560EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_56080();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Configuration.CollectionsConfiguration.MangaYouMightLikeConfiguration.encode(to:)(_QWORD *a1)
{
  return sub_56914(a1, &qword_1F1770, (uint64_t (*)(void))sub_56080, (uint64_t)&type metadata for Configuration.CollectionsConfiguration.MangaYouMightLikeConfiguration.CodingKeys);
}

uint64_t sub_56140@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  return Configuration.CollectionsConfiguration.MangaYouMightLikeConfiguration.init(from:)(a1, a2);
}

uint64_t sub_56154(_QWORD *a1)
{
  return Configuration.CollectionsConfiguration.MangaYouMightLikeConfiguration.encode(to:)(a1);
}

void GenreRecommendationRequest.overrideSource.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

uint64_t MangaYouMightLikeOptions.hydratedBooksFetchLimit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

BooksPersonalization::Configuration::CollectionsConfiguration::MoreFromYourAuthorsConfiguration __swiftcall Configuration.CollectionsConfiguration.MoreFromYourAuthorsConfiguration.init(source:rescorer:bookHistoryAuthorFetchMaxCount:)(BooksPersonalization::Configuration::CollectionsConfiguration::Source_optional source, BooksPersonalization::Scorer_optional rescorer, Swift::Int_optional bookHistoryAuthorFetchMaxCount)
{
  uint64_t v3;
  int v4;
  int v5;
  Swift::Int value;
  BooksPersonalization::Configuration::CollectionsConfiguration::MoreFromYourAuthorsConfiguration result;

  v4 = *(unsigned __int8 *)source.value;
  v5 = *(unsigned __int8 *)rescorer.value;
  if (v4 == 5)
    LOBYTE(v4) = 3;
  if (v5 == 3)
    LOBYTE(v5) = 1;
  *(_BYTE *)v3 = v4;
  if (bookHistoryAuthorFetchMaxCount.is_nil)
    value = 50;
  else
    value = bookHistoryAuthorFetchMaxCount.value;
  *(_BYTE *)(v3 + 1) = v5;
  *(_QWORD *)(v3 + 8) = value;
  LOBYTE(result.bookHistoryAuthorFetchMaxCount) = rescorer;
  result.source = source.value;
  return result;
}

uint64_t Configuration.CollectionsConfiguration.MoreFromYourAuthorsConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  char v18;
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;

  v5 = sub_5EDC(&qword_1F1778);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_56380();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Configuration.CollectionsConfiguration.MoreFromYourAuthorsConfiguration.CodingKeys, &type metadata for Configuration.CollectionsConfiguration.MoreFromYourAuthorsConfiguration.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    BYTE1(v28) = 0;
    v12 = sub_559DC();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)((uint64_t *)((char *)&v28 + 2), &type metadata for Configuration.CollectionsConfiguration.Source, (char *)&v28 + 1, v5, &type metadata for Configuration.CollectionsConfiguration.Source, v12);
    v13 = BYTE2(v28);
    v27 = 1;
    v14 = sub_556C4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v28, &type metadata for Scorer, &v27, v5, &type metadata for Scorer, v14);
    v15 = v28;
    v26 = 2;
    v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v26, v5);
    v19 = v18;
    v20 = *(void (**)(char *, uint64_t))(v6 + 8);
    v21 = v16;
    v20(v8, v5);
    if (v13 == 5)
      v22 = 3;
    else
      v22 = v13;
    if (v15 == 3)
      v23 = 1;
    else
      v23 = v15;
    *(_BYTE *)a2 = v22;
    if ((v19 & 1) != 0)
      v24 = 50;
    else
      v24 = v21;
    *(_BYTE *)(a2 + 1) = v23;
    *(_QWORD *)(a2 + 8) = v24;
  }
  return sub_62F8(a1);
}

unint64_t sub_56380()
{
  unint64_t result;

  result = qword_1F1780;
  if (!qword_1F1780)
  {
    result = swift_getWitnessTable(&unk_18F7DC, &type metadata for Configuration.CollectionsConfiguration.MoreFromYourAuthorsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1780);
  }
  return result;
}

uint64_t sub_563C4()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x7265726F63736572;
  if (*v0 != 1)
    v1 = 0xD00000000000001ELL;
  if (*v0)
    return v1;
  else
    return 0x656372756F73;
}

uint64_t sub_56420@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_65C9C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_56444(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_56380();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_5646C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_56380();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Configuration.CollectionsConfiguration.MoreFromYourAuthorsConfiguration.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  int v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;

  v4 = sub_5EDC(&qword_1F1788);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v17 = v1[1];
  v16 = *((_QWORD *)v1 + 1);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_56380();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Configuration.CollectionsConfiguration.MoreFromYourAuthorsConfiguration.CodingKeys, &type metadata for Configuration.CollectionsConfiguration.MoreFromYourAuthorsConfiguration.CodingKeys, v11, v9, v10);
  v22 = v8;
  v21 = 0;
  v12 = sub_55A9C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v4, &type metadata for Configuration.CollectionsConfiguration.Source, v12);
  if (!v2)
  {
    v13 = v16;
    v20 = v17;
    v19 = 1;
    v14 = sub_55900();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v4, &type metadata for Scorer, v14);
    v18 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v13, &v18, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_56618@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Configuration.CollectionsConfiguration.MoreFromYourAuthorsConfiguration.init(from:)(a1, a2);
}

uint64_t sub_5662C(_QWORD *a1)
{
  return Configuration.CollectionsConfiguration.MoreFromYourAuthorsConfiguration.encode(to:)(a1);
}

BooksPersonalization::Configuration::CollectionsConfiguration::SuggestionsConfiguration __swiftcall Configuration.CollectionsConfiguration.SuggestionsConfiguration.init(source:rescorer:)(BooksPersonalization::Configuration::CollectionsConfiguration::Source_optional source, BooksPersonalization::Scorer_optional rescorer)
{
  _BYTE *v2;
  int v3;
  int v4;
  BooksPersonalization::Configuration::CollectionsConfiguration::SuggestionsConfiguration result;

  v3 = *(unsigned __int8 *)source.value;
  v4 = *(unsigned __int8 *)rescorer.value;
  if (v3 == 5)
    LOBYTE(v3) = 2;
  if (v4 == 3)
    LOBYTE(v4) = 1;
  *v2 = v3;
  v2[1] = v4;
  result.source = source.value;
  return result;
}

uint64_t Configuration.CollectionsConfiguration.SuggestionsConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  char v15;
  char v16;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v5 = sub_5EDC(&qword_1F1790);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_567F8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Configuration.CollectionsConfiguration.SuggestionsConfiguration.CodingKeys, &type metadata for Configuration.CollectionsConfiguration.SuggestionsConfiguration.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    BYTE1(v20) = 0;
    v12 = sub_559DC();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)((uint64_t *)((char *)&v20 + 2), &type metadata for Configuration.CollectionsConfiguration.Source, (char *)&v20 + 1, v5, &type metadata for Configuration.CollectionsConfiguration.Source, v12);
    v13 = BYTE2(v20);
    v19 = 1;
    v14 = sub_556C4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v20, &type metadata for Scorer, &v19, v5, &type metadata for Scorer, v14);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v15 = v20;
    if (v13 == 5)
      v16 = 2;
    else
      v16 = v13;
    if (v20 == 3)
      v15 = 1;
    *a2 = v16;
    a2[1] = v15;
  }
  return sub_62F8(a1);
}

unint64_t sub_567F8()
{
  unint64_t result;

  result = qword_1F1798;
  if (!qword_1F1798)
  {
    result = swift_getWitnessTable(&unk_18F78C, &type metadata for Configuration.CollectionsConfiguration.SuggestionsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1798);
  }
  return result;
}

uint64_t sub_5683C()
{
  _BYTE *v0;

  if (*v0)
    return 0x7265726F63736572;
  else
    return 0x656372756F73;
}

uint64_t sub_56874@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_65DE4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_56898(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_567F8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_568C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_567F8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Configuration.CollectionsConfiguration.SuggestionsConfiguration.encode(to:)(_QWORD *a1)
{
  return sub_56914(a1, &qword_1F17A0, (uint64_t (*)(void))sub_567F8, (uint64_t)&type metadata for Configuration.CollectionsConfiguration.SuggestionsConfiguration.CodingKeys);
}

uint64_t sub_56914(_QWORD *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  char *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v8 = sub_5EDC(a2);
  v20 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v4;
  v21 = v4[1];
  v12 = a1[3];
  v13 = a1[4];
  sub_49F4(a1, v12);
  v14 = a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)(a4, a4, v14, v12, v13);
  v25 = v11;
  v24 = 0;
  v15 = sub_55A9C();
  v16 = v19;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v25, &v24, v8, &type metadata for Configuration.CollectionsConfiguration.Source, v15);
  if (!v16)
  {
    v23 = v21;
    v22 = 1;
    v17 = sub_55900();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v22, v8, &type metadata for Scorer, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v10, v8);
}

uint64_t sub_56A6C@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  return Configuration.CollectionsConfiguration.SuggestionsConfiguration.init(from:)(a1, a2);
}

uint64_t sub_56A80(_QWORD *a1)
{
  return Configuration.CollectionsConfiguration.SuggestionsConfiguration.encode(to:)(a1);
}

BooksPersonalization::Configuration::CollectionsConfiguration::PostHydrationFilteringConfiguration __swiftcall Configuration.CollectionsConfiguration.PostHydrationFilteringConfiguration.init(genericArtworkRegex:)(BooksPersonalization::Configuration::CollectionsConfiguration::PostHydrationFilteringConfiguration genericArtworkRegex)
{
  uint64_t *v1;
  uint64_t countAndFlagsBits;
  void *object;

  countAndFlagsBits = 0xD000000000000056;
  if (genericArtworkRegex.genericArtworkRegex._object)
    countAndFlagsBits = genericArtworkRegex.genericArtworkRegex._countAndFlagsBits;
  object = (void *)0x80000000001A02A0;
  if (genericArtworkRegex.genericArtworkRegex._object)
    object = genericArtworkRegex.genericArtworkRegex._object;
  *v1 = countAndFlagsBits;
  v1[1] = (uint64_t)object;
  return genericArtworkRegex;
}

uint64_t Configuration.CollectionsConfiguration.PostHydrationFilteringConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;

  v5 = sub_5EDC(&qword_1F17A8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_56BF8();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Configuration.CollectionsConfiguration.PostHydrationFilteringConfiguration.CodingKeys, &type metadata for Configuration.CollectionsConfiguration.PostHydrationFilteringConfiguration.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v12, v5);
    if (v14)
      v15 = v13;
    else
      v15 = 0xD000000000000056;
    if (v14)
      v16 = v14;
    else
      v16 = 0x80000000001A02A0;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v15;
    a2[1] = v16;
  }
  return sub_62F8(a1);
}

unint64_t sub_56BF8()
{
  unint64_t result;

  result = qword_1F17B0;
  if (!qword_1F17B0)
  {
    result = swift_getWitnessTable(&unk_18F73C, &type metadata for Configuration.CollectionsConfiguration.PostHydrationFilteringConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F17B0);
  }
  return result;
}

void sub_56C3C()
{
  Hasher._combine(_:)(0);
}

unint64_t sub_56C60()
{
  return 0xD000000000000013;
}

uint64_t sub_56C7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_65ECC(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_56CA4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_56BF8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_56CCC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_56BF8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Configuration.CollectionsConfiguration.PostHydrationFilteringConfiguration.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = sub_5EDC(&qword_1F17B8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_56BF8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Configuration.CollectionsConfiguration.PostHydrationFilteringConfiguration.CodingKeys, &type metadata for Configuration.CollectionsConfiguration.PostHydrationFilteringConfiguration.CodingKeys, v11, v9, v10);
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, v12, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_56DE0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_56E10 + 4 * byte_18D03A[a1]))(0x736B6F6F62, 0xE500000000000000);
}

unint64_t sub_56E10()
{
  return 0xD000000000000017;
}

uint64_t sub_56EBC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_56EEC + 4 * byte_18D042[a1]))(0x736B6F6F62, 0xE500000000000000);
}

unint64_t sub_56EEC()
{
  return 0xD000000000000017;
}

uint64_t sub_56F98@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  return Configuration.CollectionsConfiguration.PostHydrationFilteringConfiguration.init(from:)(a1, a2);
}

void sub_56FAC(char *a1)
{
  sub_7A9D4(*a1);
}

void sub_56FB8()
{
  char *v0;

  sub_152BEC(0, *v0);
}

void sub_56FC4(uint64_t a1)
{
  char *v1;

  sub_F9138(a1, *v1);
}

void sub_56FCC(uint64_t a1)
{
  char *v1;

  sub_152BEC(a1, *v1);
}

unint64_t sub_56FD4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_65F50(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_57000@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_56DE0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_57028()
{
  unsigned __int8 *v0;

  return sub_56EBC(*v0);
}

unint64_t sub_57030@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_65F50(a1);
  *a2 = result;
  return result;
}

uint64_t sub_57054(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_57590();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_5707C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_57590();
  return CodingKey.debugDescription.getter(a1, v2);
}

void Configuration.CollectionsConfiguration.booksBySuggestedAuthorsConfiguration.getter(_WORD *a1@<X8>)
{
  _WORD *v1;

  *a1 = *v1;
}

void Configuration.CollectionsConfiguration.booksConfiguration.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 2);
}

void Configuration.CollectionsConfiguration.booksYouMightLikeConfiguration.getter(_WORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_WORD *)(v1 + 3);
}

void Configuration.CollectionsConfiguration.forYouConfiguration.getter(_WORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_WORD *)(v1 + 5);
}

void Configuration.CollectionsConfiguration.mangaYouMightLikeConfiguration.getter(_WORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_WORD *)(v1 + 7);
}

void Configuration.CollectionsConfiguration.moreFromYourAuthorsConfiguration.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *(_WORD *)a1 = *(_WORD *)(v1 + 16);
  *(_QWORD *)(a1 + 8) = v2;
}

void Configuration.CollectionsConfiguration.suggestionsConfiguration.getter(_WORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_WORD *)(v1 + 32);
}

uint64_t Configuration.CollectionsConfiguration.postHydrationFilteringConfiguration.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 48);
  *a1 = *(_QWORD *)(v1 + 40);
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t Configuration.CollectionsConfiguration.init(booksBySuggestedAuthorsConfiguration:booksConfiguration:booksYouMightLikeConfiguration:forYouConfiguration:mangaYouMightLikeConfiguration:moreFromYourAuthorsConfiguration:suggestionsConfiguration:postHydrationFilteringConfiguration:)@<X0>(unsigned __int16 *a1@<X0>, unsigned __int8 *a2@<X1>, __int16 *a3@<X2>, __int16 *a4@<X3>, __int16 *a5@<X4>, uint64_t *a6@<X5>, unsigned __int16 *a7@<X6>, unint64_t *a8@<X7>, uint64_t a9@<X8>)
{
  unsigned int v9;
  int v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  int v22;
  char v23;
  char v24;
  char v25;
  BOOL v26;
  char v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t result;

  v9 = *a1;
  v10 = *a2;
  v11 = *a3;
  v12 = *a4;
  v13 = *a5;
  v14 = v9 >> 8;
  v15 = *a6;
  v16 = a6[1];
  v17 = *a7;
  if ((v9 & 0xFF00) == 0x300)
  {
    LOBYTE(v9) = 3;
    LOBYTE(v14) = 1;
  }
  v18 = v11 & 0xFF00;
  v19 = *a8;
  v20 = a8[1];
  if (v18 == 768)
  {
    LOBYTE(v11) = 3;
    v21 = 1;
  }
  else
  {
    v21 = HIBYTE(*a3);
  }
  v22 = v12 & 0xFF00;
  if (v22 == 768)
  {
    LOBYTE(v12) = 3;
    v23 = 1;
  }
  else
  {
    v23 = HIBYTE(v12);
  }
  *(_BYTE *)a9 = v9;
  *(_BYTE *)(a9 + 1) = v14;
  if ((v13 & 0xFF00) == 0x300)
    v24 = 3;
  else
    v24 = v13;
  if ((v13 & 0xFF00) == 0x300)
    v25 = 1;
  else
    v25 = HIBYTE(v13);
  v26 = (v15 & 0xFF00) == 768;
  if ((v15 & 0xFF00) == 0x300)
    v27 = 3;
  else
    v27 = v15;
  if ((v15 & 0xFF00) == 0x300)
    v28 = 1;
  else
    v28 = BYTE1(v15);
  v29 = 50;
  if (!v26)
    v29 = v16;
  if ((v17 & 0xFF00) == 0x300)
    v30 = 2;
  else
    v30 = v17;
  if ((v17 & 0xFF00) == 0x300)
    result = 1;
  else
    result = v17 >> 8;
  if (!v20)
  {
    v19 = 0xD000000000000056;
    v20 = 0x80000000001A02A0;
  }
  if (v10 == 3)
    LOBYTE(v10) = 1;
  *(_BYTE *)(a9 + 2) = v10;
  *(_BYTE *)(a9 + 3) = v11;
  *(_BYTE *)(a9 + 4) = v21;
  *(_BYTE *)(a9 + 5) = v12;
  *(_BYTE *)(a9 + 6) = v23;
  *(_BYTE *)(a9 + 7) = v24;
  *(_BYTE *)(a9 + 8) = v25;
  *(_BYTE *)(a9 + 16) = v27;
  *(_BYTE *)(a9 + 17) = v28;
  *(_QWORD *)(a9 + 24) = v29;
  *(_BYTE *)(a9 + 32) = v30;
  *(_BYTE *)(a9 + 33) = result;
  *(_QWORD *)(a9 + 40) = v19;
  *(_QWORD *)(a9 + 48) = v20;
  return result;
}

uint64_t Configuration.CollectionsConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  unsigned __int16 v29;
  unsigned __int16 v30;
  __int128 v31;
  __int128 v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v5 = sub_5EDC(&qword_1F17C0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_57590();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Configuration.CollectionsConfiguration.CodingKeys, &type metadata for Configuration.CollectionsConfiguration.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    LOBYTE(v32) = 1;
    v12 = sub_575D4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)((uint64_t *)((char *)&v42 + 6), &type metadata for Configuration.CollectionsConfiguration.BooksBySuggestedAuthorsConfiguration, &v32, v5, &type metadata for Configuration.CollectionsConfiguration.BooksBySuggestedAuthorsConfiguration, v12);
    WORD2(v42) = HIWORD(v42);
    LOBYTE(v32) = 0;
    v13 = sub_57618();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)((uint64_t *)((char *)&v42 + 3), &type metadata for Configuration.CollectionsConfiguration.BooksConfiguration, &v32, v5, &type metadata for Configuration.CollectionsConfiguration.BooksConfiguration, v13);
    BYTE2(v42) = BYTE3(v42);
    LOBYTE(v32) = 2;
    v14 = sub_5765C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v42, &type metadata for Configuration.CollectionsConfiguration.BooksYouMightLikeConfiguration, &v32, v5, &type metadata for Configuration.CollectionsConfiguration.BooksYouMightLikeConfiguration, v14);
    HIWORD(v34) = v42;
    LOBYTE(v32) = 3;
    v15 = sub_576A0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)((uint64_t *)((char *)&v34 + 4), &type metadata for Configuration.CollectionsConfiguration.ForYouConfiguration, &v32, v5, &type metadata for Configuration.CollectionsConfiguration.ForYouConfiguration, v15);
    WORD1(v34) = WORD2(v34);
    LOBYTE(v32) = 4;
    v16 = sub_576E4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v34, &type metadata for Configuration.CollectionsConfiguration.MangaYouMightLikeConfiguration, &v32, v5, &type metadata for Configuration.CollectionsConfiguration.MangaYouMightLikeConfiguration, v16);
    v33 = v34;
    LOBYTE(v31) = 5;
    v17 = sub_57728();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v32, &type metadata for Configuration.CollectionsConfiguration.MoreFromYourAuthorsConfiguration, &v31, v5, &type metadata for Configuration.CollectionsConfiguration.MoreFromYourAuthorsConfiguration, v17);
    v31 = v32;
    LOBYTE(v28) = 6;
    v18 = sub_5776C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v30, &type metadata for Configuration.CollectionsConfiguration.SuggestionsConfiguration, &v28, v5, &type metadata for Configuration.CollectionsConfiguration.SuggestionsConfiguration, v18);
    v29 = v30;
    LOBYTE(v27) = 7;
    v19 = sub_577B0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v28, &type metadata for Configuration.CollectionsConfiguration.PostHydrationFilteringConfiguration, &v27, v5, &type metadata for Configuration.CollectionsConfiguration.PostHydrationFilteringConfiguration, v19);
    v27 = v28;
    Configuration.CollectionsConfiguration.init(booksBySuggestedAuthorsConfiguration:booksConfiguration:booksYouMightLikeConfiguration:forYouConfiguration:mangaYouMightLikeConfiguration:moreFromYourAuthorsConfiguration:suggestionsConfiguration:postHydrationFilteringConfiguration:)((unsigned __int16 *)&v42 + 2, (unsigned __int8 *)&v42 + 2, (__int16 *)&v34 + 3, (__int16 *)&v34 + 1, &v33, (uint64_t *)&v31, &v29, (unint64_t *)&v27, (uint64_t)&v35);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v21 = v36;
    v22 = v37;
    v23 = v38;
    v24 = v39;
    v25 = v40;
    v26 = v41;
    *(_QWORD *)a2 = v35;
    *(_BYTE *)(a2 + 8) = v21;
    *(_WORD *)(a2 + 16) = v22;
    *(_QWORD *)(a2 + 24) = v23;
    *(_WORD *)(a2 + 32) = v24;
    *(_QWORD *)(a2 + 40) = v25;
    *(_QWORD *)(a2 + 48) = v26;
  }
  return sub_62F8(a1);
}

unint64_t sub_57590()
{
  unint64_t result;

  result = qword_1F17C8;
  if (!qword_1F17C8)
  {
    result = swift_getWitnessTable(&unk_18F6EC, &type metadata for Configuration.CollectionsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F17C8);
  }
  return result;
}

unint64_t sub_575D4()
{
  unint64_t result;

  result = qword_1F17D0;
  if (!qword_1F17D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.CollectionsConfiguration.BooksBySuggestedAuthorsConfiguration, &type metadata for Configuration.CollectionsConfiguration.BooksBySuggestedAuthorsConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F17D0);
  }
  return result;
}

unint64_t sub_57618()
{
  unint64_t result;

  result = qword_1F17D8;
  if (!qword_1F17D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.CollectionsConfiguration.BooksConfiguration, &type metadata for Configuration.CollectionsConfiguration.BooksConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F17D8);
  }
  return result;
}

unint64_t sub_5765C()
{
  unint64_t result;

  result = qword_1F17E0;
  if (!qword_1F17E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.CollectionsConfiguration.BooksYouMightLikeConfiguration, &type metadata for Configuration.CollectionsConfiguration.BooksYouMightLikeConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F17E0);
  }
  return result;
}

unint64_t sub_576A0()
{
  unint64_t result;

  result = qword_1F17E8;
  if (!qword_1F17E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.CollectionsConfiguration.ForYouConfiguration, &type metadata for Configuration.CollectionsConfiguration.ForYouConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F17E8);
  }
  return result;
}

unint64_t sub_576E4()
{
  unint64_t result;

  result = qword_1F17F0;
  if (!qword_1F17F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.CollectionsConfiguration.MangaYouMightLikeConfiguration, &type metadata for Configuration.CollectionsConfiguration.MangaYouMightLikeConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F17F0);
  }
  return result;
}

unint64_t sub_57728()
{
  unint64_t result;

  result = qword_1F17F8;
  if (!qword_1F17F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.CollectionsConfiguration.MoreFromYourAuthorsConfiguration, &type metadata for Configuration.CollectionsConfiguration.MoreFromYourAuthorsConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F17F8);
  }
  return result;
}

unint64_t sub_5776C()
{
  unint64_t result;

  result = qword_1F1800;
  if (!qword_1F1800)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.CollectionsConfiguration.SuggestionsConfiguration, &type metadata for Configuration.CollectionsConfiguration.SuggestionsConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F1800);
  }
  return result;
}

unint64_t sub_577B0()
{
  unint64_t result;

  result = qword_1F1808;
  if (!qword_1F1808)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.CollectionsConfiguration.PostHydrationFilteringConfiguration, &type metadata for Configuration.CollectionsConfiguration.PostHydrationFilteringConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F1808);
  }
  return result;
}

uint64_t Configuration.CollectionsConfiguration.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  unsigned __int8 v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char v46;

  v4 = sub_5EDC(&qword_1F1810);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = *v1;
  v8 = v1[1];
  v9 = v1[2];
  v41 = v1[3];
  v42 = v8;
  v10 = v1[4];
  v39 = v1[5];
  v40 = v10;
  v11 = v1[6];
  v36 = v1[7];
  v37 = v1[8];
  v38 = v11;
  LODWORD(v6) = v1[17];
  v33 = v1[16];
  v34 = v6;
  v35 = *((_QWORD *)v1 + 3);
  LODWORD(v6) = v1[33];
  v31 = v1[32];
  v32 = v6;
  v12 = *((_QWORD *)v1 + 6);
  v29 = *((_QWORD *)v1 + 5);
  v30 = v12;
  v14 = a1[3];
  v13 = a1[4];
  sub_49F4(a1, v14);
  v15 = sub_57590();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Configuration.CollectionsConfiguration.CodingKeys, &type metadata for Configuration.CollectionsConfiguration.CodingKeys, v15, v14, v13);
  LOBYTE(v43) = v9;
  v46 = 0;
  v16 = sub_57B54();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v43, &v46, v4, &type metadata for Configuration.CollectionsConfiguration.BooksConfiguration, v16);
  if (!v2)
  {
    v17 = v40;
    v18 = v41;
    v19 = v39;
    LOBYTE(v43) = v45;
    BYTE1(v43) = v42;
    v46 = 1;
    v20 = sub_57B98();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v43, &v46, v4, &type metadata for Configuration.CollectionsConfiguration.BooksBySuggestedAuthorsConfiguration, v20);
    LOBYTE(v43) = v18;
    BYTE1(v43) = v17;
    v46 = 2;
    v21 = sub_57BDC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v43, &v46, v4, &type metadata for Configuration.CollectionsConfiguration.BooksYouMightLikeConfiguration, v21);
    LOBYTE(v43) = v19;
    BYTE1(v43) = v38;
    v46 = 3;
    v22 = sub_57C20();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v43, &v46, v4, &type metadata for Configuration.CollectionsConfiguration.ForYouConfiguration, v22);
    LOBYTE(v43) = v36;
    BYTE1(v43) = v37;
    v46 = 4;
    v23 = sub_57C64();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v43, &v46, v4, &type metadata for Configuration.CollectionsConfiguration.MangaYouMightLikeConfiguration, v23);
    LOBYTE(v43) = v33;
    BYTE1(v43) = v34;
    v44 = v35;
    v46 = 5;
    v24 = sub_57CA8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v43, &v46, v4, &type metadata for Configuration.CollectionsConfiguration.MoreFromYourAuthorsConfiguration, v24);
    LOBYTE(v43) = v31;
    BYTE1(v43) = v32;
    v46 = 6;
    v25 = sub_57CEC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v43, &v46, v4, &type metadata for Configuration.CollectionsConfiguration.SuggestionsConfiguration, v25);
    v43 = v29;
    v44 = v30;
    v46 = 7;
    v26 = sub_57D30();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v43, &v46, v4, &type metadata for Configuration.CollectionsConfiguration.PostHydrationFilteringConfiguration, v26);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_57B54()
{
  unint64_t result;

  result = qword_1F1818;
  if (!qword_1F1818)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.CollectionsConfiguration.BooksConfiguration, &type metadata for Configuration.CollectionsConfiguration.BooksConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F1818);
  }
  return result;
}

unint64_t sub_57B98()
{
  unint64_t result;

  result = qword_1F1820;
  if (!qword_1F1820)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.CollectionsConfiguration.BooksBySuggestedAuthorsConfiguration, &type metadata for Configuration.CollectionsConfiguration.BooksBySuggestedAuthorsConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F1820);
  }
  return result;
}

unint64_t sub_57BDC()
{
  unint64_t result;

  result = qword_1F1828;
  if (!qword_1F1828)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.CollectionsConfiguration.BooksYouMightLikeConfiguration, &type metadata for Configuration.CollectionsConfiguration.BooksYouMightLikeConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F1828);
  }
  return result;
}

unint64_t sub_57C20()
{
  unint64_t result;

  result = qword_1F1830;
  if (!qword_1F1830)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.CollectionsConfiguration.ForYouConfiguration, &type metadata for Configuration.CollectionsConfiguration.ForYouConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F1830);
  }
  return result;
}

unint64_t sub_57C64()
{
  unint64_t result;

  result = qword_1F1838;
  if (!qword_1F1838)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.CollectionsConfiguration.MangaYouMightLikeConfiguration, &type metadata for Configuration.CollectionsConfiguration.MangaYouMightLikeConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F1838);
  }
  return result;
}

unint64_t sub_57CA8()
{
  unint64_t result;

  result = qword_1F1840;
  if (!qword_1F1840)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.CollectionsConfiguration.MoreFromYourAuthorsConfiguration, &type metadata for Configuration.CollectionsConfiguration.MoreFromYourAuthorsConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F1840);
  }
  return result;
}

unint64_t sub_57CEC()
{
  unint64_t result;

  result = qword_1F1848;
  if (!qword_1F1848)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.CollectionsConfiguration.SuggestionsConfiguration, &type metadata for Configuration.CollectionsConfiguration.SuggestionsConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F1848);
  }
  return result;
}

unint64_t sub_57D30()
{
  unint64_t result;

  result = qword_1F1850;
  if (!qword_1F1850)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.CollectionsConfiguration.PostHydrationFilteringConfiguration, &type metadata for Configuration.CollectionsConfiguration.PostHydrationFilteringConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F1850);
  }
  return result;
}

uint64_t sub_57D74@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Configuration.CollectionsConfiguration.init(from:)(a1, a2);
}

uint64_t sub_57D88(_QWORD *a1)
{
  return Configuration.CollectionsConfiguration.encode(to:)(a1);
}

unint64_t Configuration.MediaTypesRecommendationServiceConfiguration.init(interestBasedMinimumBooksPerMediaType:interestBasedMinimumBooksPerGenre:interestBasedMinimumPurity:equivalentGenresMap:)@<X0>(unint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, unint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v11 = result;
  if ((a6 & 1) != 0 || (v13 = *(_QWORD *)&a5, a5 < 0.5))
    v13 = 0x3FE999999999999ALL;
  if (!a7)
  {
    result = sub_5FF40((uint64_t)&off_1D8C68);
    a7 = result;
  }
  v14 = 2;
  if (a3 >= 0)
    v15 = a3;
  else
    v15 = 2;
  if ((a4 & 1) != 0)
    v15 = 2;
  if (v11 >= 0)
    v16 = v11;
  else
    v16 = 2;
  if ((a2 & 1) == 0)
    v14 = v16;
  *a8 = v14;
  a8[1] = v15;
  a8[2] = v13;
  a8[3] = a7;
  return result;
}

uint64_t sub_57E44(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_57E80 + 4 * byte_18D04A[a1]))(0xD000000000000025, 0x80000000001A03B0);
}

uint64_t sub_57E80()
{
  uint64_t v0;

  return v0 + 14;
}

unint64_t sub_57EA8()
{
  return 0xD000000000000013;
}

uint64_t sub_57EC4()
{
  unsigned __int8 *v0;

  return sub_57E44(*v0);
}

uint64_t sub_57ECC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_65F98(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_57EF0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_60014();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_57F18(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_60014();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Configuration.MediaTypesRecommendationServiceConfiguration.encode(to:)(_QWORD *a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;

  v4 = sub_5EDC(&qword_1F1858);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = *((_QWORD *)v1 + 1);
  v10 = v1[2];
  v19 = *((_QWORD *)v1 + 3);
  v20 = v8;
  v11 = a1[3];
  v12 = a1[4];
  sub_49F4(a1, v11);
  v13 = sub_60014();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Configuration.MediaTypesRecommendationServiceConfiguration.CodingKeys, &type metadata for Configuration.MediaTypesRecommendationServiceConfiguration.CodingKeys, v13, v11, v12);
  v25 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(*(_QWORD *)&v9, &v25, v4);
  if (!v2)
  {
    v14 = v19;
    v24 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v20, &v24, v4);
    v23 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(&v23, v4, v10);
    v22 = v14;
    v21 = 3;
    v15 = sub_5EDC(&qword_1F1868);
    v16 = sub_60058(&qword_1F1870, (uint64_t)&protocol witness table for UInt64, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v4, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Configuration.MediaTypesRecommendationServiceConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;

  v5 = sub_5EDC(&qword_1F1878);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_60014();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Configuration.MediaTypesRecommendationServiceConfiguration.CodingKeys, &type metadata for Configuration.MediaTypesRecommendationServiceConfiguration.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v25 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v25, v5);
    v24 = 1;
    v13 = KeyedDecodingContainer.decode(_:forKey:)(&v24, v5);
    v23 = 2;
    KeyedDecodingContainer.decode(_:forKey:)(&v23, v5);
    v16 = v15;
    v17 = sub_5EDC(&qword_1F1868);
    v21 = 3;
    v18 = sub_60058(&qword_1F1880, (uint64_t)&protocol witness table for UInt64, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v22, v17, &v21, v5, v17, v18);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v19 = v22;
    *a2 = v12;
    a2[1] = v13;
    a2[2] = v16;
    a2[3] = v19;
  }
  return sub_62F8(a1);
}

uint64_t sub_582E0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_5831C + 4 * byte_18D04E[a1]))(0xD000000000000027, 0x800000000019F020);
}

uint64_t sub_5831C()
{
  return 0x6C6F687365726874;
}

uint64_t sub_58340()
{
  uint64_t v0;

  return v0 + 18;
}

unint64_t sub_583A8()
{
  return 0xD000000000000010;
}

uint64_t sub_583C4()
{
  return 0x657A69536D616562;
}

uint64_t sub_583DC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_58418 + 4 * byte_18D058[a1]))(0xD000000000000027, 0x800000000019F020);
}

uint64_t sub_58418()
{
  return 0x6C6F687365726874;
}

uint64_t sub_5843C()
{
  uint64_t v0;

  return v0 + 18;
}

unint64_t sub_584A4()
{
  return 0xD000000000000010;
}

uint64_t sub_584C0()
{
  return 0x657A69536D616562;
}

uint64_t sub_584D8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Configuration.MediaTypesRecommendationServiceConfiguration.init(from:)(a1, a2);
}

uint64_t sub_584EC(_QWORD *a1)
{
  return Configuration.MediaTypesRecommendationServiceConfiguration.encode(to:)(a1);
}

uint64_t sub_58500(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_5D8E0(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_582E0);
}

Swift::Int sub_5850C(uint64_t a1, uint64_t a2)
{
  return sub_5D978(a1, a2, (uint64_t (*)(uint64_t))sub_582E0);
}

uint64_t sub_58518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_5D9E8(a1, a2, a3, (uint64_t (*)(_QWORD))sub_582E0);
}

Swift::Int sub_58524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_5DA34(a1, a2, a3, (uint64_t (*)(uint64_t))sub_582E0);
}

unint64_t sub_58530@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_66134(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_5855C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_582E0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_58584()
{
  unsigned __int8 *v0;

  return sub_583DC(*v0);
}

unint64_t sub_5858C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_66134(a1);
  *a2 = result;
  return result;
}

void sub_585B0(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_585BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_600B8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_585E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_600B8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void __swiftcall Configuration.BooksClusteringServiceConfiguration.init(maxHighScoringSingleBookCollectionCount:thresholdRatio:maxOrphanSingleBookCollectionCount:booksInGenrePermittedGenres:booksInGenreUnpermittedGenres:moreFromYourAuthorsConfiguration:rankBoostByCollectionRecommendationType:rankBoostByGenreDepth:ndcgDiscountRate:beamSize:)(BooksPersonalization::Configuration::BooksClusteringServiceConfiguration *__return_ptr retstr, Swift::Int_optional maxHighScoringSingleBookCollectionCount, Swift::Double_optional thresholdRatio, Swift::Int_optional maxOrphanSingleBookCollectionCount, Swift::OpaquePointer_optional booksInGenrePermittedGenres, Swift::OpaquePointer_optional booksInGenreUnpermittedGenres, BooksPersonalization::Configuration::BooksClusteringServiceLegacyCollectionConfiguration_optional moreFromYourAuthorsConfiguration, Swift::OpaquePointer_optional rankBoostByCollectionRecommendationType, Swift::OpaquePointer_optional rankBoostByGenreDepth, Swift::Double_optional ndcgDiscountRate, Swift::Int_optional beamSize)
{
  _UNKNOWN **rawValue;
  _QWORD *v12;
  char v13;
  uint64_t v14;
  Swift::Bool is_nil;
  Swift::Int value;
  void *v18;
  void *v19;
  char v20;
  double v21;
  double v22;
  Swift::Bool v23;
  Swift::Int v24;
  Swift::Double v25;
  Swift::Int v26;
  uint64_t v27;
  Swift::Int v28;
  uint64_t v29;
  _UNKNOWN **v31;
  _QWORD *v32;
  char v33;
  unint64_t v34;
  char v35;
  unint64_t v36;

  rawValue = (_UNKNOWN **)booksInGenreUnpermittedGenres.value._rawValue;
  v12 = *(_QWORD **)&booksInGenrePermittedGenres.is_nil;
  v13 = (char)booksInGenrePermittedGenres.value._rawValue;
  v14 = *(_QWORD *)&maxOrphanSingleBookCollectionCount.is_nil;
  is_nil = maxHighScoringSingleBookCollectionCount.is_nil;
  value = maxHighScoringSingleBookCollectionCount.value;
  v19 = rankBoostByCollectionRecommendationType.value._rawValue;
  v18 = *(void **)&rankBoostByCollectionRecommendationType.is_nil;
  v20 = **(_BYTE **)&booksInGenreUnpermittedGenres.is_nil;
  v21 = *(double *)&thresholdRatio.is_nil;
  if (*(double *)&thresholdRatio.is_nil < 1.0)
    v21 = 2.0;
  if ((maxOrphanSingleBookCollectionCount.value & 1) != 0)
    v22 = 2.0;
  else
    v22 = v21;
  if (!rankBoostByCollectionRecommendationType.value._rawValue)
  {
    v33 = **(_BYTE **)&booksInGenreUnpermittedGenres.is_nil;
    v34 = sub_53118((uint64_t)&off_1D8EE8, &qword_1F1DD8, sub_3951C);
    v20 = v33;
    v19 = (void *)v34;
    v23 = rankBoostByGenreDepth.is_nil;
    if (*(_QWORD *)&rankBoostByCollectionRecommendationType.is_nil)
      goto LABEL_8;
LABEL_33:
    v35 = v20;
    v36 = sub_53118((uint64_t)&off_1D8F18, &qword_1F1DD0, (uint64_t (*)(_QWORD))sub_3946C);
    v20 = v35;
    v18 = (void *)v36;
    goto LABEL_8;
  }
  v23 = rankBoostByGenreDepth.is_nil;
  if (!*(_QWORD *)&rankBoostByCollectionRecommendationType.is_nil)
    goto LABEL_33;
LABEL_8:
  v24 = beamSize.value;
  if (v23
    || (v25 = *(double *)&rankBoostByGenreDepth.value._rawValue, *(double *)&rankBoostByGenreDepth.value._rawValue < 0.0))
  {
    v25 = 0.9;
  }
  v26 = 3;
  if (v14 >= 0)
    v27 = v14;
  else
    v27 = 3;
  if ((v13 & 1) == 0)
    v26 = v27;
  v28 = 5;
  if (value >= 0)
    v29 = value;
  else
    v29 = 5;
  if (!is_nil)
    v28 = v29;
  if (beamSize.value <= 0 || beamSize.is_nil)
    v24 = 10;
  retstr->maxHighScoringSingleBookCollectionCount = v28;
  retstr->thresholdRatio = v22;
  v31 = &off_1D8EB8;
  if (rawValue)
    v31 = rawValue;
  if (v12)
    v32 = v12;
  else
    v32 = _swiftEmptyArrayStorage;
  retstr->maxOrphanSingleBookCollectionCount = v26;
  retstr->booksInGenrePermittedGenres._rawValue = v32;
  retstr->booksInGenreUnpermittedGenres._rawValue = v31;
  retstr->moreFromYourAuthorsConfiguration.enabled = v20 & 1;
  retstr->rankBoostByCollectionRecommendationType._rawValue = v19;
  retstr->rankBoostByGenreDepth._rawValue = v18;
  retstr->ndcgDiscountRate = v25;
  retstr->beamSize = v24;
}

BooksPersonalization::Configuration::BooksClusteringServiceLegacyCollectionConfiguration __swiftcall Configuration.BooksClusteringServiceLegacyCollectionConfiguration.init(enabled:)(BooksPersonalization::Configuration::BooksClusteringServiceLegacyCollectionConfiguration enabled)
{
  Swift::Bool *v1;

  *v1 = enabled.enabled;
  return enabled;
}

uint64_t Configuration.BooksClusteringServiceConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  char v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  Swift::Int v27;
  char v28;
  uint64_t v29;
  Swift::Double thresholdRatio;
  Swift::Int maxOrphanSingleBookCollectionCount;
  Swift::Bool enabled;
  Swift::Double ndcgDiscountRate;
  Swift::Int v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  Swift::OpaquePointer_optional v38;
  Swift::OpaquePointer_optional rankBoostByGenreDepth;
  char v40;
  Swift::Int_optional beamSize;
  uint64_t v42;
  void *v43;
  _BOOL8 v44;
  _BOOL8 v45;
  int v46;
  _BOOL8 v47;
  void *v48;
  uint64_t v49;
  int v50;
  _BOOL8 v51;
  char v52;
  uint64_t v53;
  void *v54;
  char v55;
  char v56;
  uint64_t v57;
  BooksPersonalization::Configuration::BooksClusteringServiceConfiguration v58;
  uint64_t v59;
  Swift::Int_optional v60;
  Swift::Int_optional v61;
  Swift::OpaquePointer_optional v62;
  Swift::Double_optional v63;

  v5 = sub_5EDC(&qword_1F1888);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_600B8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Configuration.BooksClusteringServiceConfiguration.CodingKeys, &type metadata for Configuration.BooksClusteringServiceConfiguration.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    LOBYTE(v59) = 0;
    v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v59, v5);
    v14 = v13;
    LOBYTE(v59) = 1;
    v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v59, v5);
    v50 = v16;
    v51 = v15;
    LOBYTE(v59) = 2;
    v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v59, v5);
    v46 = v18;
    v47 = v17;
    v19 = sub_5EDC(&qword_1F1660);
    LOBYTE(v57) = 3;
    v48 = (void *)sub_53E6C(&qword_1F1678, (uint64_t)&protocol witness table for UInt64, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v49 = v19;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v59, v19, &v57, v5, v19, v48);
    v45 = v59;
    LOBYTE(v54) = 4;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v57, v49, &v54, v5, v49, v48);
    v49 = v57;
    LOBYTE(v54) = 5;
    v21 = sub_600FC();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v56, &type metadata for Configuration.BooksClusteringServiceLegacyCollectionConfiguration, &v54, v5, &type metadata for Configuration.BooksClusteringServiceLegacyCollectionConfiguration, v21);
    v55 = v56;
    v22 = sub_5EDC(&qword_1F18A0);
    LOBYTE(v53) = 6;
    v23 = sub_60184(&qword_1F18A8, &qword_1F18A0, (void (*)(void))sub_60140);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v54, v22, &v53, v5, v22, v23);
    v48 = v54;
    v24 = sub_5EDC(&qword_1F18B8);
    v52 = 7;
    v25 = sub_60184(&qword_1F18C0, &qword_1F18B8, (void (*)(void))sub_549DC);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v53, v24, &v52, v5, v24, v25);
    v44 = v53;
    v52 = 8;
    v43 = (void *)KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v52, v5);
    HIDWORD(v42) = v26;
    v52 = 9;
    v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v52, v5);
    v61.value = v50 & 1;
    v62.value._rawValue = (void *)(v46 & 1);
    beamSize.is_nil = v28 & 1;
    beamSize.value = v27;
    rankBoostByGenreDepth.is_nil = BYTE4(v42) & 1;
    rankBoostByGenreDepth.value._rawValue = v43;
    v38.is_nil = v44;
    v37 = &v55;
    v38.value._rawValue = v48;
    v60.value = v12;
    v60.is_nil = v14 & 1;
    v63.is_nil = v51;
    v61.is_nil = v47;
    v62.is_nil = v45;
    v29 = v49;
    Configuration.BooksClusteringServiceConfiguration.init(maxHighScoringSingleBookCollectionCount:thresholdRatio:maxOrphanSingleBookCollectionCount:booksInGenrePermittedGenres:booksInGenreUnpermittedGenres:moreFromYourAuthorsConfiguration:rankBoostByCollectionRecommendationType:rankBoostByGenreDepth:ndcgDiscountRate:beamSize:)(&v58, v60, v63, v61, v62, *(Swift::OpaquePointer_optional *)(&v37 - 1), (BooksPersonalization::Configuration::BooksClusteringServiceLegacyCollectionConfiguration_optional)SBYTE1(v37), v38, rankBoostByGenreDepth, *(Swift::Double_optional *)(&v40 - 8), beamSize);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    thresholdRatio = v58.thresholdRatio;
    maxOrphanSingleBookCollectionCount = v58.maxOrphanSingleBookCollectionCount;
    enabled = v58.moreFromYourAuthorsConfiguration.enabled;
    ndcgDiscountRate = v58.ndcgDiscountRate;
    v34 = v58.beamSize;
    v35 = *(_OWORD *)&v58.booksInGenrePermittedGenres._rawValue;
    v36 = *(_OWORD *)&v58.rankBoostByCollectionRecommendationType._rawValue;
    *(_QWORD *)a2 = v58.maxHighScoringSingleBookCollectionCount;
    *(Swift::Double *)(a2 + 8) = thresholdRatio;
    *(_QWORD *)(a2 + 16) = maxOrphanSingleBookCollectionCount;
    *(_OWORD *)(a2 + 24) = v35;
    *(_BYTE *)(a2 + 40) = enabled;
    *(_OWORD *)(a2 + 48) = v36;
    *(Swift::Double *)(a2 + 64) = ndcgDiscountRate;
    *(_QWORD *)(a2 + 72) = v34;
  }
  return sub_62F8(a1);
}

uint64_t Configuration.BooksClusteringServiceConfiguration.encode(to:)(_QWORD *a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;

  v4 = sub_5EDC(&qword_1F18C8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = v1[1];
  v10 = *((_QWORD *)v1 + 2);
  v35 = *((_QWORD *)v1 + 3);
  v36 = v10;
  v34 = *((_QWORD *)v1 + 4);
  v33 = *((unsigned __int8 *)v1 + 40);
  v11 = *((_QWORD *)v1 + 6);
  v31 = *((_QWORD *)v1 + 7);
  v32 = v11;
  v12 = v1[8];
  v30 = *((_QWORD *)v1 + 9);
  v14 = a1[3];
  v13 = a1[4];
  sub_49F4(a1, v14);
  v15 = sub_600B8();
  v16 = v14;
  v17 = v4;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Configuration.BooksClusteringServiceConfiguration.CodingKeys, &type metadata for Configuration.BooksClusteringServiceConfiguration.CodingKeys, v15, v16, v13);
  LOBYTE(v38) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(*(_QWORD *)&v8, &v38, v4);
  if (!v2)
  {
    v20 = v35;
    v19 = v36;
    v21 = v34;
    v22 = v5;
    LOBYTE(v38) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v38, v17, v9);
    LOBYTE(v38) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v19, &v38, v17);
    v38 = v20;
    v37 = 3;
    v23 = sub_5EDC(&qword_1F1660);
    v24 = sub_53E6C(&qword_1F1668, (uint64_t)&protocol witness table for UInt64, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v38, &v37, v17, v23, v24);
    v38 = v21;
    v37 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v38, &v37, v17, v23, v24);
    LOBYTE(v38) = v33;
    v37 = 5;
    v25 = sub_601F0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v38, &v37, v17, &type metadata for Configuration.BooksClusteringServiceLegacyCollectionConfiguration, v25);
    v5 = v22;
    v38 = v32;
    v37 = 6;
    v26 = sub_5EDC(&qword_1F18A0);
    v27 = sub_60234(&qword_1F18D8, &qword_1F18A0, (void (*)(void))sub_602A0);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v38, &v37, v17, v26, v27);
    v38 = v31;
    v37 = 7;
    v28 = sub_5EDC(&qword_1F18B8);
    v29 = sub_60234(&qword_1F18E8, &qword_1F18B8, (void (*)(void))sub_54C04);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v38, &v37, v17, v28, v29);
    LOBYTE(v38) = 8;
    KeyedEncodingContainer.encode(_:forKey:)(&v38, v17, v12);
    LOBYTE(v38) = 9;
    KeyedEncodingContainer.encode(_:forKey:)(v30, &v38, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v17);
}

uint64_t sub_59038@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Configuration.BooksClusteringServiceConfiguration.init(from:)(a1, a2);
}

uint64_t sub_5904C(_QWORD *a1)
{
  return Configuration.BooksClusteringServiceConfiguration.encode(to:)(a1);
}

BooksPersonalization::Configuration::PersonalizationMetadataServiceConfiguration __swiftcall Configuration.PersonalizationMetadataServiceConfiguration.init(enabled:cachedMetadataExpirationInterval:batchMaximumSize:)(Swift::Bool enabled, Swift::Double cachedMetadataExpirationInterval, Swift::Int batchMaximumSize)
{
  uint64_t v3;
  BooksPersonalization::Configuration::PersonalizationMetadataServiceConfiguration result;

  *(_BYTE *)v3 = enabled;
  *(Swift::Double *)(v3 + 8) = cachedMetadataExpirationInterval;
  *(_QWORD *)(v3 + 16) = batchMaximumSize;
  result.cachedMetadataExpirationInterval = cachedMetadataExpirationInterval;
  result.batchMaximumSize = batchMaximumSize;
  result.enabled = enabled;
  return result;
}

uint64_t Configuration.PersonalizationMetadataServiceConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;

  v5 = sub_5EDC(&qword_1F18F0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_602E4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Configuration.PersonalizationMetadataServiceConfiguration.CodingKeys, &type metadata for Configuration.PersonalizationMetadataServiceConfiguration.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v20 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v20, v5);
    v19 = 1;
    KeyedDecodingContainer.decode(_:forKey:)(&v19, v5);
    v15 = v14;
    v18 = 2;
    v16 = KeyedDecodingContainer.decode(_:forKey:)(&v18, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_BYTE *)a2 = v12 & 1;
    *(_QWORD *)(a2 + 8) = v15;
    *(_QWORD *)(a2 + 16) = v16;
  }
  return sub_62F8(a1);
}

uint64_t sub_591F8()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000020;
  if (*v0 != 1)
    v1 = 0xD000000000000010;
  if (*v0)
    return v1;
  else
    return 0x64656C62616E65;
}

uint64_t sub_59260@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_6617C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_59284(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_602E4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_592AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_602E4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Configuration.PersonalizationMetadataServiceConfiguration.encode(to:)(_QWORD *a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  char v17;
  char v18;

  v4 = sub_5EDC(&qword_1F1900);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(unsigned __int8 *)v1;
  v9 = v1[1];
  v15 = *((_QWORD *)v1 + 2);
  v10 = a1[3];
  v11 = a1[4];
  sub_49F4(a1, v10);
  v12 = sub_602E4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Configuration.PersonalizationMetadataServiceConfiguration.CodingKeys, &type metadata for Configuration.PersonalizationMetadataServiceConfiguration.CodingKeys, v12, v10, v11);
  v18 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v8, &v18, v4);
  if (!v2)
  {
    v13 = v15;
    v17 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v17, v4, v9);
    v16 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v13, &v16, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_59430@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Configuration.PersonalizationMetadataServiceConfiguration.init(from:)(a1, a2);
}

uint64_t sub_59444(_QWORD *a1)
{
  return Configuration.PersonalizationMetadataServiceConfiguration.encode(to:)(a1);
}

uint64_t Configuration.BooksClusteringServiceLegacyCollectionConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v15;

  v5 = sub_5EDC(&qword_1F1908);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_60328();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Configuration.BooksClusteringServiceLegacyCollectionConfiguration.CodingKeys, &type metadata for Configuration.BooksClusteringServiceLegacyCollectionConfiguration.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v12, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v13 & 1;
  }
  return sub_62F8(a1);
}

Swift::Int sub_59560()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int sub_595A0(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_595DC()
{
  return 0x64656C62616E65;
}

uint64_t sub_595F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x64656C62616E65 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease(0xE700000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x64656C62616E65, 0xE700000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_59688(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_60328();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_596B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_60328();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Configuration.BooksClusteringServiceLegacyCollectionConfiguration.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = sub_5EDC(&qword_1F1918);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_49F4(a1, v8);
  v10 = sub_60328();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Configuration.BooksClusteringServiceLegacyCollectionConfiguration.CodingKeys, &type metadata for Configuration.BooksClusteringServiceLegacyCollectionConfiguration.CodingKeys, v10, v8, v9);
  KeyedEncodingContainer.encode(_:forKey:)(v7, v11, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_597C0@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return Configuration.BooksClusteringServiceLegacyCollectionConfiguration.init(from:)(a1, a2);
}

BooksPersonalization::Configuration::ScorersConfiguration::BookHistoryScorerConfiguration::ReadingHistoryConfiguration __swiftcall Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.ReadingHistoryConfiguration.init(readFractionBoost:fullyReadThreshold:fullyReadBoost:halfLife:)(Swift::Double_optional readFractionBoost, Swift::Double_optional fullyReadThreshold, Swift::Double_optional fullyReadBoost, Swift::Double_optional halfLife)
{
  double v4;
  char v5;
  double v6;
  char v7;
  double *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  BooksPersonalization::Configuration::ScorersConfiguration::BookHistoryScorerConfiguration::ReadingHistoryConfiguration result;

  v9 = 0.3;
  v10 = 0.3;
  if (*(double *)&readFractionBoost.is_nil <= 1.0)
    v10 = *(double *)&readFractionBoost.is_nil;
  if (*(double *)&readFractionBoost.is_nil >= -1.0)
    v11 = v10;
  else
    v11 = 0.3;
  if (!fullyReadThreshold.is_nil)
    v9 = v11;
  v12 = 0.9;
  if (!halfLife.is_nil && *(double *)&fullyReadBoost.is_nil >= 0.0)
  {
    v12 = 0.9;
    if (*(double *)&fullyReadBoost.is_nil <= 1.0)
      v12 = *(double *)&fullyReadBoost.is_nil;
  }
  v13 = 0.1;
  if ((v5 & 1) == 0 && v4 >= -1.0)
  {
    v13 = 0.1;
    if (v4 <= 1.0)
      v13 = v4;
  }
  v14 = 10368000.0;
  v15 = v6;
  if (v6 < 0.0)
    v15 = 10368000.0;
  *v8 = v9;
  v8[1] = v12;
  if ((v7 & 1) != 0)
    v16 = 10368000.0;
  else
    v16 = v15;
  v8[2] = v13;
  v8[3] = v16;
  result.halfLife = v14;
  result.fullyReadBoost = v13;
  result.fullyReadThreshold = v12;
  result.readFractionBoost = v16;
  return result;
}

uint64_t Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.ReadingHistoryConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  char v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v19;
  char v20;
  char v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  int v28;
  double v29;
  double v30;
  int v31;
  char v32;
  char v33;
  char v34;
  char v35;

  v5 = sub_5EDC(&qword_1F1920);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_6036C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.ReadingHistoryConfiguration.CodingKeys, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.ReadingHistoryConfiguration.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v35 = 0;
    v12 = COERCE_DOUBLE(KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v35, v5));
    v14 = v13;
    v34 = 1;
    v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v34, v5);
    v31 = v16;
    v30 = *(double *)&v15;
    v33 = 2;
    v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v33, v5);
    v28 = v19;
    v27 = *(double *)&v17;
    v32 = 3;
    v29 = COERCE_DOUBLE(KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v32, v5));
    v21 = v20;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    if ((v14 & 1) != 0)
    {
      v23 = 0.3;
    }
    else
    {
      v22 = 0.3;
      if (v12 <= 1.0)
        v22 = v12;
      if (v12 >= -1.0)
        v23 = v22;
      else
        v23 = 0.3;
    }
    v24 = 0x3FECCCCCCCCCCCCDLL;
    if ((v31 & 1) == 0 && v30 >= 0.0)
    {
      v24 = 0x3FECCCCCCCCCCCCDLL;
      if (v30 <= 1.0)
        v24 = *(_QWORD *)&v30;
    }
    v25 = 0x3FB999999999999ALL;
    if ((v28 & 1) == 0 && v27 >= -1.0)
    {
      v25 = 0x3FB999999999999ALL;
      if (v27 <= 1.0)
        v25 = *(_QWORD *)&v27;
    }
    if ((v21 & 1) != 0 || (v26 = *(_QWORD *)&v29, v29 < 0.0))
      v26 = 0x4163C68000000000;
    *(double *)a2 = v23;
    *(_QWORD *)(a2 + 8) = v24;
    *(_QWORD *)(a2 + 16) = v25;
    *(_QWORD *)(a2 + 24) = v26;
  }
  return sub_62F8(a1);
}

uint64_t sub_59B04()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_59B38 + 4 * byte_18D062[*v0]))(0xD000000000000011, 0x80000000001A04A0);
}

uint64_t sub_59B38(uint64_t a1)
{
  return a1 + 1;
}

uint64_t sub_59B50()
{
  return 0x616552796C6C7566;
}

uint64_t sub_59B74()
{
  return 0x6566694C666C6168;
}

uint64_t sub_59B8C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_662C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_59BB0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_6036C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_59BD8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_6036C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.ReadingHistoryConfiguration.encode(to:)(_QWORD *a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  char v20;

  v4 = sub_5EDC(&qword_1F1930);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v11 = v1[2];
  v10 = v1[3];
  v12 = a1[3];
  v13 = a1[4];
  sub_49F4(a1, v12);
  v14 = sub_6036C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.ReadingHistoryConfiguration.CodingKeys, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.ReadingHistoryConfiguration.CodingKeys, v14, v12, v13);
  v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v20, v4, v9);
  if (!v2)
  {
    v19 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v19, v4, v8);
    v18 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(&v18, v4, v11);
    v17 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(&v17, v4, v10);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_59D78@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.ReadingHistoryConfiguration.init(from:)(a1, a2);
}

uint64_t sub_59D8C(_QWORD *a1)
{
  return Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.ReadingHistoryConfiguration.encode(to:)(a1);
}

void __swiftcall Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.DeclinedConfiguration.init(declinedWeight:declinedAfterRecommendationsCount:declinedAfterPassoversCount:declinedPenaltyDurationBaseDays:declinedPenaltyDurationGrowthFactor:declinedPenaltyMaxDays:)(BooksPersonalization::Configuration::ScorersConfiguration::BookHistoryScorerConfiguration::DeclinedConfiguration *__return_ptr retstr, Swift::Double_optional declinedWeight, Swift::Int_optional declinedAfterRecommendationsCount, Swift::Int_optional declinedAfterPassoversCount, Swift::Int_optional declinedPenaltyDurationBaseDays, Swift::Double_optional declinedPenaltyDurationGrowthFactor, Swift::Int_optional declinedPenaltyMaxDays)
{
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  Swift::Int v11;
  uint64_t v12;
  Swift::Int v13;
  Swift::Int v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  char v18;

  v7 = v17;
  v8 = -0.1;
  if ((declinedAfterRecommendationsCount.value & 1) == 0 && *(double *)&declinedWeight.is_nil >= -1.0)
  {
    v8 = -0.1;
    if (*(double *)&declinedWeight.is_nil <= 1.0)
      v8 = *(double *)&declinedWeight.is_nil;
  }
  v9 = 1.5;
  v10 = *(double *)&declinedPenaltyMaxDays.value;
  if (*(double *)&declinedPenaltyMaxDays.value < 1.0)
    v10 = 1.5;
  if (!declinedPenaltyMaxDays.is_nil)
    v9 = v10;
  v11 = 7;
  if (*(uint64_t *)&declinedPenaltyDurationBaseDays.is_nil >= 0)
    v12 = *(_QWORD *)&declinedPenaltyDurationBaseDays.is_nil;
  else
    v12 = 7;
  if (!declinedPenaltyDurationGrowthFactor.is_nil)
    v11 = v12;
  if (*(uint64_t *)&declinedAfterPassoversCount.is_nil < 0)
    v13 = 1;
  else
    v13 = *(_QWORD *)&declinedAfterPassoversCount.is_nil;
  if ((declinedPenaltyDurationBaseDays.value & 1) != 0)
    v13 = 1;
  v14 = 10;
  if (*(uint64_t *)&declinedAfterRecommendationsCount.is_nil >= 0)
    v15 = *(_QWORD *)&declinedAfterRecommendationsCount.is_nil;
  else
    v15 = 10;
  if ((declinedAfterPassoversCount.value & 1) == 0)
    v14 = v15;
  if (v17 < 0)
    v7 = 180;
  retstr->declinedWeight = v8;
  retstr->declinedAfterRecommendationsCount = v14;
  retstr->declinedAfterPassoversCount = v13;
  retstr->declinedPenaltyDurationBaseDays = v11;
  if ((v18 & 1) != 0)
    v16 = 180;
  else
    v16 = v7;
  retstr->declinedPenaltyDurationGrowthFactor = v9;
  retstr->declinedPenaltyMaxDays = v16;
}

uint64_t Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.DeclinedConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  char v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v23;
  char v24;
  char v25;
  double v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;

  v5 = sub_5EDC(&qword_1F1938);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_603B0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.DeclinedConfiguration.CodingKeys, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.DeclinedConfiguration.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v56 = 0;
    v12 = COERCE_DOUBLE(KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v56, v5));
    v14 = v13;
    v55 = 1;
    v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v55, v5);
    v49 = v16;
    v50 = v15;
    v54 = 2;
    v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v54, v5);
    v47 = v18;
    v48 = v17;
    v53 = 3;
    v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v53, v5);
    v45 = v20;
    v46 = v19;
    v52 = 4;
    *(double *)&v21 = COERCE_DOUBLE(KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v52, v5));
    v43 = v23;
    v42 = *(double *)&v21;
    v51 = 5;
    v44 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v5);
    v25 = v24;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v26 = -0.1;
    if ((v14 & 1) != 0)
    {
      v27 = v50;
      v28 = v49;
      v29 = v48;
      v30 = v47;
      v31 = v46;
      v32 = v45;
      v33 = v43;
    }
    else
    {
      v27 = v50;
      v28 = v49;
      v29 = v48;
      v30 = v47;
      v31 = v46;
      v32 = v45;
      v33 = v43;
      if (v12 >= -1.0)
      {
        v26 = -0.1;
        if (v12 <= 1.0)
          v26 = v12;
      }
    }
    v34 = 10;
    if (v27 < 0)
      v27 = 10;
    if ((v28 & 1) == 0)
      v34 = v27;
    if (v29 < 0)
      v35 = 1;
    else
      v35 = v29;
    if ((v30 & 1) != 0)
      v35 = 1;
    v36 = 7;
    if (v31 >= 0)
      v37 = v31;
    else
      v37 = 7;
    if ((v32 & 1) == 0)
      v36 = v37;
    v38 = 1.5;
    if ((v33 & 1) == 0)
    {
      v38 = v42;
      if (v42 < 1.0)
        v38 = 1.5;
    }
    v39 = 180;
    if (v44 >= 0)
      v40 = v44;
    else
      v40 = 180;
    *(double *)a2 = v26;
    if ((v25 & 1) == 0)
      v39 = v40;
    *(_QWORD *)(a2 + 8) = v34;
    *(_QWORD *)(a2 + 16) = v35;
    *(_QWORD *)(a2 + 24) = v36;
    *(double *)(a2 + 32) = v38;
    *(_QWORD *)(a2 + 40) = v39;
  }
  return sub_62F8(a1);
}

uint64_t sub_5A144(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_5A184 + 4 * byte_18D066[a1]))(0x64656E696C636564, 0xEE00746867696557);
}

unint64_t sub_5A184()
{
  return 0xD000000000000021;
}

unint64_t sub_5A1F0()
{
  return 0xD000000000000016;
}

uint64_t sub_5A20C()
{
  unsigned __int8 *v0;

  return sub_5A144(*v0);
}

uint64_t sub_5A214@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_6649C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_5A238(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_603B0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_5A260(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_603B0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.DeclinedConfiguration.encode(to:)(_QWORD *a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;

  v4 = sub_5EDC(&qword_1F1948);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = *((_QWORD *)v1 + 1);
  v20 = *((_QWORD *)v1 + 2);
  v21 = v9;
  v19 = *((_QWORD *)v1 + 3);
  v10 = v1[4];
  v11 = *((_QWORD *)v1 + 5);
  v12 = a1[3];
  v13 = a1[4];
  sub_49F4(a1, v12);
  v14 = sub_603B0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.DeclinedConfiguration.CodingKeys, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.DeclinedConfiguration.CodingKeys, v14, v12, v13);
  v27 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v27, v4, v8);
  if (!v2)
  {
    v16 = v19;
    v15 = v20;
    v26 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v21, &v26, v4);
    v25 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v25, v4);
    v24 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v24, v4);
    v23 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(&v23, v4, v10);
    v22 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v11, &v22, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_5A46C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.DeclinedConfiguration.init(from:)(a1, a2);
}

uint64_t sub_5A480(_QWORD *a1)
{
  return Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.DeclinedConfiguration.encode(to:)(a1);
}

BooksPersonalization::Configuration::ScorersConfiguration::BookHistoryScorerConfiguration::RecommendationMethodology_optional __swiftcall Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.RecommendationMethodology.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  Swift::Int v5;
  BooksPersonalization::Configuration::ScorersConfiguration::BookHistoryScorerConfiguration::RecommendationMethodology_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1D8F58, v3);
  result.value = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *v4 = v7;
  return result;
}

uint64_t Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.RecommendationMethodology.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000011;
  else
    return 0x6168637275706F63;
}

uint64_t sub_5A538(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_5A574 + 4 * byte_18D06C[a1]))(0xD000000000000013, 0x800000000019F170);
}

uint64_t sub_5A574()
{
  uint64_t v0;

  return v0 + 3;
}

uint64_t sub_5A814(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_7A4A0(*a1, *a2);
}

Swift::Int sub_5A820()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0xD000000000000011;
  else
    v2 = 0x6168637275706F63;
  if (v1)
    v3 = 0x800000000019F150;
  else
    v3 = 0xEA00000000006573;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_5A8A8(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000011;
  else
    v2 = 0x6168637275706F63;
  if (*v1)
    v3 = 0x800000000019F150;
  else
    v3 = 0xEA00000000006573;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_5A90C(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0xD000000000000011;
  else
    v3 = 0x6168637275706F63;
  if (v2)
    v4 = 0x800000000019F150;
  else
    v4 = 0xEA00000000006573;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

BooksPersonalization::Configuration::ScorersConfiguration::BookHistoryScorerConfiguration::RecommendationMethodology_optional sub_5A990(Swift::String *a1)
{
  return Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.RecommendationMethodology.init(rawValue:)(*a1);
}

void sub_5A99C(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 0x6168637275706F63;
  if (*v1)
    v2 = 0xD000000000000011;
  v3 = 0x800000000019F150;
  if (!*v1)
    v3 = 0xEA00000000006573;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_5A9E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_668EC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_5AA40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_668EC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_5AA8C(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_5D8E0(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_5A538);
}

Swift::Int sub_5AA98(uint64_t a1, uint64_t a2)
{
  return sub_5D978(a1, a2, (uint64_t (*)(uint64_t))sub_5A538);
}

uint64_t sub_5AAA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_5D9E8(a1, a2, a3, (uint64_t (*)(_QWORD))sub_5A538);
}

Swift::Int sub_5AAB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_5DA34(a1, a2, a3, (uint64_t (*)(uint64_t))sub_5A538);
}

uint64_t sub_5AABC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_66714(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_5AAE8@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_5A538(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_5AB10()
{
  unsigned __int8 *v0;

  return sub_5A538(*v0);
}

uint64_t sub_5AB18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_66714(a1, a2);
  *a3 = result;
  return result;
}

void sub_5AB3C(_BYTE *a1@<X8>)
{
  *a1 = 37;
}

uint64_t sub_5AB48(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_603F4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_5AB70(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_603F4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.bookHistoryLimit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 336);
}

uint64_t Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.init(bookReadingHistoryConfiguration:sampledReadingHistoryConfiguration:declinedConfiguration:moreLikeThisWeight:moreLikeThisHalfLife:lessLikeThisWeight:lessLikeThisHalfLife:purchasedWeight:purchasedHalfLife:downloadedViaFamilySharingWeight:downloadedViaFamilySharingHalfLife:acquiredExternallyWeight:acquiredExternallyHalfLife:acquiredExternallyUnknownFinishedInterval:storeBookUnknownFinishedIntervalSincePurchase:reviewedWeight:reviewedHalfLife:sampledWeight:sampledHalfLife:wantToReadWeight:wantToReadHalfLife:productPageViewWeight:productPageViewHalfLife:diversificationPenalty:bookAffinityLimit:bookCandidateLimitPerSeedBook:bookCandidateLimit:supplementalRequestLimit:preEventCollectionAddedToWantToReadDateSpacing:preEventCollectionSampledDateSpacing:bookHistoryLimit:syntheticConditionalScoreMultiplier:conditionalScoreBias:allowCandidatesWithProductPageViews:allowCandidatesInWantToRead:allowSampledCandidates:recommendationMethodologies:)@<X0>(uint64_t a1@<X0>, int8x16_t *a2@<X1>, uint64_t a3@<X2>, double a4@<X3>, char a5@<W4>, double a6@<X5>, char a7@<W6>, double a8@<X7>, uint64_t a9@<X8>, char a10, double a11, char a12, double a13, char a14, double a15, char a16, double a17, char a18, double a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,double a25,char a26,double a27,char a28,double a29,char a30,double a31,char a32,double a33,char a34,double a35,char a36,double a37,char a38,double a39,char a40,double a41,char a42,double a43,char a44,double a45,char a46,uint64_t a47,char a48,uint64_t a49,char a50,uint64_t a51,char a52,uint64_t a53,char a54,double a55,char a56,double a57,char a58,uint64_t a59,char a60,double a61,char a62,double a63)
{
  char a64;
  char a65;
  char a66;
  char a67;
  uint64_t a68;
  unint64_t v69;
  __int128 v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  double v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  double v79;
  uint64_t v80;
  double v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  double v95;
  double v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  double v100;
  uint64_t result;
  double v102;
  char v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  char v112;
  int8x16_t v113;
  int8x16_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  double v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int8x16_t v133;
  int8x16_t v134;
  uint64_t v135;
  double v136;
  double v137;
  double v138;
  double v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    v154 = xmmword_18FAF0;
    v155 = xmmword_18FAE0;
  }
  else
  {
    v154 = *(_OWORD *)a1;
    v155 = *(_OWORD *)(a1 + 16);
  }
  if (a2[2].i8[0])
    v69 = -1;
  else
    v69 = 0;
  if ((*(_BYTE *)(a3 + 48) & 1) != 0)
  {
    v70 = xmmword_18FB10;
    v71 = 1.5;
    v72 = 180;
    v73 = 7;
    v74 = 0xBFB999999999999ALL;
  }
  else
  {
    v73 = *(_QWORD *)(a3 + 24);
    v72 = *(_QWORD *)(a3 + 40);
    v74 = *(_QWORD *)a3;
    v70 = *(_OWORD *)(a3 + 8);
    v71 = *(double *)(a3 + 32);
  }
  v75 = 0.9;
  if ((a5 & 1) == 0 && a4 >= -1.0)
  {
    if (a4 > 1.0)
      v75 = 0.9;
    else
      v75 = a4;
  }
  if ((a7 & 1) != 0 || (v76 = *(_QWORD *)&a6, a6 < 0.0))
    v76 = 0x4153C68000000000;
  v77 = -0.9;
  if ((a10 & 1) == 0 && a8 >= -1.0)
  {
    if (a8 > 1.0)
      v77 = -0.9;
    else
      v77 = a8;
  }
  if ((a12 & 1) != 0 || (v78 = *(_QWORD *)&a11, a11 < 0.0))
    v78 = 0x4153C68000000000;
  v79 = 0.5;
  if ((a14 & 1) == 0 && a13 >= -1.0)
  {
    if (a13 > 1.0)
      v79 = 0.5;
    else
      v79 = a13;
  }
  if ((a16 & 1) != 0 || (v80 = *(_QWORD *)&a15, a15 < 0.0))
    v80 = 0x4187BB0000000000;
  v81 = 0.5;
  if ((a18 & 1) == 0 && a17 >= -1.0)
  {
    if (a17 > 1.0)
      v81 = 0.5;
    else
      v81 = a17;
  }
  if ((a20 & 1) != 0 || (v82 = *(_QWORD *)&a19, a19 < 0.0))
    v82 = 0x4187BB0000000000;
  v83 = 0.5;
  if ((a18 & 1) == 0 && a17 >= -1.0)
  {
    if (a17 > 1.0)
      v83 = 0.5;
    else
      v83 = a17;
  }
  if ((a20 & 1) != 0 || (v84 = *(_QWORD *)&a19, a19 < 0.0))
    v84 = 0x4187BB0000000000;
  v85 = 1.0;
  if ((a30 & 1) == 0 && a29 >= -1.0)
    v85 = fmin(a29, 1.0);
  if ((a32 & 1) != 0 || (v86 = *(_QWORD *)&a31, a31 < 0.0))
    v86 = 0x4196A38200000000;
  v87 = 0x3FD999999999999ALL;
  if ((a34 & 1) == 0 && a33 >= -1.0)
  {
    if (a33 > 1.0)
      v87 = 0x3FD999999999999ALL;
    else
      v87 = *(_QWORD *)&a33;
  }
  if ((a36 & 1) != 0 || (v88 = *(_QWORD *)&a35, a35 < 0.0))
    v88 = 0x4153C68000000000;
  v89 = 0x3FD999999999999ALL;
  if ((a38 & 1) == 0 && a37 >= -1.0)
  {
    if (a37 > 1.0)
      v89 = 0x3FD999999999999ALL;
    else
      v89 = *(_QWORD *)&a37;
  }
  if ((a40 & 1) != 0 || (v90 = *(_QWORD *)&a39, a39 < 0.0))
    v90 = 0x4153C68000000000;
  v91 = 0x3FB999999999999ALL;
  if ((a42 & 1) == 0 && a41 >= -1.0)
  {
    if (a41 > 1.0)
      v91 = 0x3FB999999999999ALL;
    else
      v91 = *(_QWORD *)&a41;
  }
  if ((a44 & 1) != 0 || (v92 = *(_QWORD *)&a43, a43 < 0.0))
    v92 = 0x4143C68000000000;
  v93 = 0x3FE999999999999ALL;
  if ((a46 & 1) == 0 && a45 >= 0.0)
  {
    if (a45 > 1.0)
      v93 = 0x3FE999999999999ALL;
    else
      v93 = *(_QWORD *)&a45;
  }
  v94 = 1.0;
  v95 = 1.0;
  if ((a56 & 1) == 0)
  {
    v95 = a55;
    if (a55 < 0.0)
      v95 = 1.0;
  }
  if ((a58 & 1) == 0)
  {
    v94 = a57;
    if (a57 < 0.0)
      v94 = 1.0;
  }
  v96 = 1.5;
  if ((a62 & 1) == 0)
  {
    v96 = a61;
    if (a61 <= 0.0)
      v96 = 1.5;
  }
  v97 = *a2;
  v98 = a2[1];
  v99 = (int8x16_t)vdupq_n_s64(v69);
  v100 = 0.0;
  result = a68;
  if ((a64 & 1) == 0)
  {
    v102 = a63;
    if (a63 >= 0.0)
    {
      if (a63 > 1.0)
        v102 = 0.0;
      v100 = v102;
    }
  }
  v103 = a67;
  v104 = a65;
  v105 = a59;
  v106 = a53;
  v107 = a51;
  v108 = a50;
  v109 = a49;
  v110 = a48;
  v111 = a47;
  v112 = a28;
  v113 = vbslq_s8(v99, (int8x16_t)xmmword_18FAF0, v97);
  v114 = vbslq_s8(v99, (int8x16_t)xmmword_18FB00, v98);
  if (!a68)
  {
    v135 = v72;
    v153 = v70;
    v151 = v71;
    v139 = v94;
    v140 = v93;
    v115 = v74;
    v149 = v75;
    v145 = v88;
    v146 = v87;
    v116 = v76;
    v138 = v77;
    v142 = v91;
    v117 = v78;
    v147 = v79;
    v118 = v80;
    v152 = v81;
    v143 = v90;
    v144 = v89;
    v119 = v82;
    v150 = v83;
    v120 = v84;
    v148 = v85;
    v141 = v92;
    v121 = v86;
    v122 = v95;
    v136 = v100;
    v137 = v96;
    v133 = v114;
    v134 = v113;
    result = sub_3D878((uint64_t)&off_1D9340);
    v114 = v133;
    v113 = v134;
    v105 = a59;
    v109 = a49;
    v111 = a47;
    v108 = a50;
    v104 = a65;
    v106 = a53;
    v110 = a48;
    v112 = a28;
    v107 = a51;
    v103 = a67;
    v100 = v136;
    v96 = v137;
    v95 = v122;
    v86 = v121;
    v79 = v147;
    v85 = v148;
    v84 = v120;
    v75 = v149;
    v83 = v150;
    v82 = v119;
    v90 = v143;
    v89 = v144;
    v81 = v152;
    v80 = v118;
    v78 = v117;
    v92 = v141;
    v91 = v142;
    v77 = v138;
    v94 = v139;
    v76 = v116;
    v88 = v145;
    v87 = v146;
    v74 = v115;
    v93 = v140;
    v71 = v151;
    v70 = v153;
    v72 = v135;
  }
  *(_OWORD *)a9 = v154;
  *(_OWORD *)(a9 + 16) = v155;
  *(int8x16_t *)(a9 + 32) = v113;
  *(int8x16_t *)(a9 + 48) = v114;
  *(_QWORD *)(a9 + 64) = v74;
  *(_OWORD *)(a9 + 72) = v70;
  *(double *)(a9 + 96) = v71;
  *(double *)(a9 + 112) = v75;
  *(_QWORD *)(a9 + 120) = v76;
  *(double *)(a9 + 128) = v77;
  *(_QWORD *)(a9 + 136) = v78;
  *(double *)(a9 + 144) = v79;
  *(_QWORD *)(a9 + 152) = v80;
  *(double *)(a9 + 160) = v81;
  v123 = 1000;
  if (v105 < 0)
    v105 = 1000;
  if ((a60 & 1) == 0)
    v123 = v105;
  v124 = 500;
  if (v107 >= 0)
    v125 = v107;
  else
    v125 = 500;
  if ((a52 & 1) == 0)
    v124 = v125;
  if (v106 < 0)
    v126 = 1;
  else
    v126 = v106;
  if ((a54 & 1) != 0)
    v126 = 1;
  v127 = 10;
  if (v109 >= 0)
    v128 = v109;
  else
    v128 = 10;
  if ((v108 & 1) == 0)
    v127 = v128;
  v129 = 20;
  if (v111 >= 0)
    v130 = v111;
  else
    v130 = 20;
  if ((v110 & 1) == 0)
    v129 = v130;
  *(_QWORD *)(a9 + 168) = v82;
  *(double *)(a9 + 176) = v83;
  if ((v112 & 1) != 0)
    a27 = 1209600.0;
  if ((a26 & 1) != 0)
    a25 = 157680000.0;
  *(_QWORD *)(a9 + 184) = v84;
  *(double *)(a9 + 192) = a25;
  *(double *)(a9 + 200) = a27;
  *(double *)(a9 + 208) = v85;
  *(_QWORD *)(a9 + 216) = v86;
  *(_QWORD *)(a9 + 224) = v87;
  *(_QWORD *)(a9 + 232) = v88;
  *(_QWORD *)(a9 + 240) = v89;
  *(_QWORD *)(a9 + 248) = v90;
  *(_QWORD *)(a9 + 256) = v91;
  *(_QWORD *)(a9 + 264) = v92;
  *(_QWORD *)(a9 + 272) = v93;
  *(double *)(a9 + 312) = v95;
  *(double *)(a9 + 320) = v94;
  *(double *)(a9 + 344) = v96;
  *(double *)(a9 + 352) = v100;
  *(_QWORD *)(a9 + 88) = v73;
  *(_QWORD *)(a9 + 104) = v72;
  *(_QWORD *)(a9 + 280) = v129;
  *(_QWORD *)(a9 + 288) = v127;
  *(_QWORD *)(a9 + 296) = v124;
  *(_QWORD *)(a9 + 304) = v126;
  *(_QWORD *)(a9 + 328) = result;
  *(_QWORD *)(a9 + 336) = v123;
  *(_BYTE *)(a9 + 360) = (v104 == 2) | v104 & 1;
  *(_BYTE *)(a9 + 361) = (a66 == 2) | a66 & 1;
  *(_BYTE *)(a9 + 362) = (v103 == 2) | v103 & 1;
  return result;
}

uint64_t Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  double v14;
  char v15;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v27;
  int v28;
  double v29;
  uint64_t v30;
  int v31;
  double v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _UNKNOWN **v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  double v66;
  int v67;
  double v68;
  int v69;
  uint64_t v70;
  int v71;
  double v72;
  int v73;
  double v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  double v84;
  int v85;
  double v86;
  int v87;
  double v88;
  int v89;
  double v90;
  int v91;
  double v92;
  int v93;
  double v94;
  int v95;
  double v96;
  int v97;
  double v98;
  int v99;
  double v100;
  int v101;
  double v102;
  int v103;
  double v104;
  int v105;
  int v106;
  int v107;
  int v108;
  double v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  _BYTE v119[368];
  _UNKNOWN **v120;
  _OWORD v121[3];
  char v122;
  _OWORD v123[3];
  char v124;
  int8x16_t v125[2];
  char v126;
  int8x16_t v127[2];
  char v128;
  _OWORD v129[2];
  char v130;
  _OWORD v131[2];
  char v132;
  uint64_t v133;

  v133 = sub_5EDC(&qword_1F1950);
  v5 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133);
  v7 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_49F4(a1, v8);
  v10 = sub_603F4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.CodingKeys, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.CodingKeys, v10, v8, v9);
  if (!v2)
  {
    v117 = a2;
    v118 = v5;
    v119[0] = 0;
    v11 = sub_60438();
    v12 = v133;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v131, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.ReadingHistoryConfiguration, v119, v133, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.ReadingHistoryConfiguration, v11);
    v129[0] = v131[0];
    v129[1] = v131[1];
    v130 = v132;
    v119[0] = 1;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v127, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.ReadingHistoryConfiguration, v119, v12, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.ReadingHistoryConfiguration, v11);
    v125[0] = v127[0];
    v125[1] = v127[1];
    v126 = v128;
    v119[0] = 2;
    v13 = sub_6047C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v123, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.DeclinedConfiguration, v119, v12, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.DeclinedConfiguration, v13);
    v121[0] = v123[0];
    v121[1] = v123[1];
    v121[2] = v123[2];
    v122 = v124;
    v119[0] = 3;
    v14 = COERCE_DOUBLE(KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v119, v12));
    v16 = v15;
    v119[0] = 4;
    v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v119, v12);
    v115 = v18;
    v116 = v17;
    v119[0] = 5;
    v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v119, v12);
    v113 = v20;
    v114 = v19;
    v119[0] = 6;
    v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v119, v12);
    v111 = v22;
    v112 = v21;
    v119[0] = 7;
    v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v119, v12);
    v108 = v24;
    v110 = v23;
    v119[0] = 8;
    *(_QWORD *)&v109 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v119, v12);
    v107 = v25;
    v119[0] = 9;
    v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v119, v12);
    v106 = v28;
    v29 = *(double *)&v27;
    v119[0] = 10;
    v30 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v119, v133);
    v105 = v31;
    v32 = *(double *)&v30;
    v119[0] = 11;
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v119, v133);
    v119[0] = 12;
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v119, v133);
    v119[0] = 13;
    *(_QWORD *)&v104 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v119, v133);
    v103 = v33;
    v119[0] = 14;
    *(_QWORD *)&v102 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v119, v133);
    v101 = v34;
    v119[0] = 15;
    *(_QWORD *)&v100 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v119, v133);
    v99 = v35;
    v119[0] = 16;
    *(_QWORD *)&v98 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v119, v133);
    v97 = v36;
    v119[0] = 17;
    *(_QWORD *)&v96 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v119, v133);
    v95 = v37;
    v119[0] = 18;
    *(_QWORD *)&v94 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v119, v133);
    v93 = v38;
    v119[0] = 19;
    *(_QWORD *)&v92 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v119, v133);
    v91 = v39;
    v119[0] = 20;
    *(_QWORD *)&v90 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v119, v133);
    v89 = v40;
    v119[0] = 21;
    *(_QWORD *)&v88 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v119, v133);
    v87 = v41;
    v119[0] = 22;
    *(_QWORD *)&v86 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v119, v133);
    v85 = v42;
    v119[0] = 23;
    *(_QWORD *)&v84 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v119, v133);
    v83 = v43;
    v119[0] = 24;
    v82 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v119, v133);
    v81 = v44;
    v119[0] = 25;
    v80 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v119, v133);
    v79 = v45;
    v119[0] = 26;
    v78 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v119, v133);
    v77 = v46;
    v119[0] = 27;
    v76 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v119, v133);
    v75 = v47;
    v119[0] = 28;
    *(_QWORD *)&v74 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v119, v133);
    v73 = v48;
    v119[0] = 29;
    *(_QWORD *)&v72 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v119, v133);
    v71 = v49;
    v119[0] = 30;
    v70 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v119, v133);
    v69 = v50;
    v119[0] = 31;
    *(_QWORD *)&v68 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v119, v133);
    v67 = v51;
    v119[0] = 32;
    *(_QWORD *)&v66 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v119, v133);
    v65 = v52;
    v119[0] = 33;
    v64 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v119, v133);
    v119[0] = 34;
    v63 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v119, v133);
    v119[0] = 35;
    v62 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v119, v133);
    v53 = sub_5EDC(&qword_1F1970);
    v119[0] = 36;
    v54 = sub_201AC(&qword_1F1978, &qword_1F1970, (void (*)(void))sub_604C0, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v120, v53, v119, v133, v53, v54);
    v61 = v16 & 1;
    v115 &= 1u;
    v113 &= 1u;
    v111 &= 1u;
    v108 &= 1u;
    v107 &= 1u;
    v106 &= 1u;
    v105 &= 1u;
    v103 &= 1u;
    v101 &= 1u;
    v99 &= 1u;
    v97 &= 1u;
    v95 &= 1u;
    v93 &= 1u;
    v91 &= 1u;
    v89 &= 1u;
    v87 &= 1u;
    v85 &= 1u;
    v83 &= 1u;
    v81 &= 1u;
    v79 &= 1u;
    v77 &= 1u;
    v75 &= 1u;
    v73 &= 1u;
    v71 &= 1u;
    v69 &= 1u;
    v67 &= 1u;
    v65 &= 1u;
    if (v120)
      v55 = v120;
    else
      v55 = &off_1D9368;
    sub_3D878((uint64_t)v55);
    swift_bridgeObjectRelease(v55);
    Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.init(bookReadingHistoryConfiguration:sampledReadingHistoryConfiguration:declinedConfiguration:moreLikeThisWeight:moreLikeThisHalfLife:lessLikeThisWeight:lessLikeThisHalfLife:purchasedWeight:purchasedHalfLife:downloadedViaFamilySharingWeight:downloadedViaFamilySharingHalfLife:acquiredExternallyWeight:acquiredExternallyHalfLife:acquiredExternallyUnknownFinishedInterval:storeBookUnknownFinishedIntervalSincePurchase:reviewedWeight:reviewedHalfLife:sampledWeight:sampledHalfLife:wantToReadWeight:wantToReadHalfLife:productPageViewWeight:productPageViewHalfLife:diversificationPenalty:bookAffinityLimit:bookCandidateLimitPerSeedBook:bookCandidateLimit:supplementalRequestLimit:preEventCollectionAddedToWantToReadDateSpacing:preEventCollectionSampledDateSpacing:bookHistoryLimit:syntheticConditionalScoreMultiplier:conditionalScoreBias:allowCandidatesWithProductPageViews:allowCandidatesInWantToRead:allowSampledCandidates:recommendationMethodologies:)((uint64_t)v129, v125, (uint64_t)v121, v14, v61, *(double *)&v116, v115, *(double *)&v114, (uint64_t)v119, v113, *(double *)&v112, v111, *(double *)&v110, v108, v109, v107, v29, v106, v32,
      v105,
      v56,
      v57,
      v58,
      v59,
      v104,
      v103,
      v102,
      v101,
      v100,
      v99,
      v98,
      v97,
      v96,
      v95,
      v94,
      v93,
      v92,
      v91,
      v90,
      v89,
      v88,
      v87,
      v86,
      v85,
      v84,
      v83,
      v82,
      v81,
      v80,
      v79,
      v78,
      v77,
      v76,
      v75,
      v74,
      v73,
      v72,
      v71,
      v70,
      v69,
      v68,
      v67,
      v66);
    (*(void (**)(char *, uint64_t))(v118 + 8))(v7, v133);
    memcpy(v117, v119, 0x16BuLL);
  }
  return sub_62F8(a1);
}

uint64_t Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  char v82;

  v3 = sub_5EDC(&qword_1F1988);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = *v1;
  v8 = *((_QWORD *)v1 + 2);
  v7 = *((_QWORD *)v1 + 3);
  v9 = *((_QWORD *)v1 + 4);
  v70 = *((_QWORD *)v1 + 5);
  v71 = v9;
  v10 = *((_QWORD *)v1 + 6);
  v72 = *((_QWORD *)v1 + 7);
  v73 = v10;
  v69 = *((_QWORD *)v1 + 8);
  v68 = *((_QWORD *)v1 + 9);
  v67 = *((_QWORD *)v1 + 10);
  v65 = *((_QWORD *)v1 + 11);
  v66 = *((_QWORD *)v1 + 12);
  v64 = *((_QWORD *)v1 + 13);
  v63 = *((double *)v1 + 14);
  v62 = *((double *)v1 + 15);
  v61 = *((double *)v1 + 16);
  v60 = *((double *)v1 + 17);
  v59 = *((double *)v1 + 18);
  v58 = *((double *)v1 + 19);
  v57 = *((double *)v1 + 20);
  v56 = *((double *)v1 + 21);
  v55 = *((double *)v1 + 22);
  v54 = *((double *)v1 + 23);
  v53 = *((double *)v1 + 24);
  v52 = *((double *)v1 + 25);
  v51 = *((double *)v1 + 26);
  v50 = *((double *)v1 + 27);
  v39 = *((double *)v1 + 28);
  v40 = *((double *)v1 + 29);
  v41 = *((double *)v1 + 30);
  v42 = *((double *)v1 + 31);
  v11 = *((double *)v1 + 33);
  v43 = *((double *)v1 + 32);
  v12 = *((double *)v1 + 34);
  v44 = *((_QWORD *)v1 + 35);
  v45 = *((_QWORD *)v1 + 36);
  v46 = *((_QWORD *)v1 + 37);
  v47 = *((_QWORD *)v1 + 38);
  v14 = *((double *)v1 + 39);
  v13 = *((double *)v1 + 40);
  v49 = *((_QWORD *)v1 + 41);
  v48 = *((_QWORD *)v1 + 42);
  v81 = *((unsigned __int8 *)v1 + 360);
  v15 = *((unsigned __int8 *)v1 + 361);
  v16 = *((unsigned __int8 *)v1 + 362);
  v18 = a1[3];
  v17 = a1[4];
  v20 = *((double *)v1 + 43);
  v19 = *((double *)v1 + 44);
  sub_49F4(a1, v18);
  v21 = sub_603F4();
  v22 = v18;
  v23 = v6;
  v24 = v17;
  v25 = v3;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.CodingKeys, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.CodingKeys, v21, v22, v24);
  v76 = v74;
  v77 = v8;
  v78 = v7;
  v82 = 0;
  v26 = sub_60504();
  v27 = v75;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v76, &v82, v3, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.ReadingHistoryConfiguration, v26);
  if (v27)
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v28 = v67;
  v29 = v68;
  v30 = v66;
  v31 = v69;
  LODWORD(v74) = v15;
  LODWORD(v75) = v16;
  v32 = v4;
  *(_QWORD *)&v76 = v71;
  *((_QWORD *)&v76 + 1) = v70;
  v77 = v73;
  v78 = v72;
  v82 = 1;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v76, &v82, v25, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.ReadingHistoryConfiguration, v26);
  *(_QWORD *)&v76 = v31;
  *((_QWORD *)&v76 + 1) = v29;
  v77 = v28;
  v78 = v65;
  v79 = v30;
  v80 = v64;
  v82 = 2;
  v33 = sub_60548();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v76, &v82, v25, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.DeclinedConfiguration, v33);
  LOBYTE(v76) = 3;
  KeyedEncodingContainer.encode(_:forKey:)(&v76, v25, v63);
  LOBYTE(v76) = 4;
  KeyedEncodingContainer.encode(_:forKey:)(&v76, v25, v62);
  LOBYTE(v76) = 5;
  KeyedEncodingContainer.encode(_:forKey:)(&v76, v25, v61);
  LOBYTE(v76) = 6;
  KeyedEncodingContainer.encode(_:forKey:)(&v76, v25, v60);
  LOBYTE(v76) = 7;
  KeyedEncodingContainer.encode(_:forKey:)(&v76, v25, v59);
  LOBYTE(v76) = 8;
  KeyedEncodingContainer.encode(_:forKey:)(&v76, v25, v58);
  LOBYTE(v76) = 9;
  KeyedEncodingContainer.encode(_:forKey:)(&v76, v25, v57);
  LOBYTE(v76) = 10;
  v35 = v25;
  KeyedEncodingContainer.encode(_:forKey:)(&v76, v25, v56);
  LOBYTE(v76) = 11;
  KeyedEncodingContainer.encode(_:forKey:)(&v76, v25, v55);
  LOBYTE(v76) = 12;
  KeyedEncodingContainer.encode(_:forKey:)(&v76, v25, v54);
  LOBYTE(v76) = 13;
  KeyedEncodingContainer.encode(_:forKey:)(&v76, v25, v53);
  LOBYTE(v76) = 14;
  KeyedEncodingContainer.encode(_:forKey:)(&v76, v25, v52);
  LOBYTE(v76) = 15;
  KeyedEncodingContainer.encode(_:forKey:)(&v76, v25, v51);
  LOBYTE(v76) = 16;
  KeyedEncodingContainer.encode(_:forKey:)(&v76, v25, v50);
  LOBYTE(v76) = 17;
  KeyedEncodingContainer.encode(_:forKey:)(&v76, v25, v39);
  LOBYTE(v76) = 18;
  KeyedEncodingContainer.encode(_:forKey:)(&v76, v25, v40);
  LOBYTE(v76) = 19;
  KeyedEncodingContainer.encode(_:forKey:)(&v76, v25, v41);
  LOBYTE(v76) = 20;
  KeyedEncodingContainer.encode(_:forKey:)(&v76, v25, v42);
  LOBYTE(v76) = 21;
  KeyedEncodingContainer.encode(_:forKey:)(&v76, v25, v43);
  LOBYTE(v76) = 22;
  KeyedEncodingContainer.encode(_:forKey:)(&v76, v25, v11);
  LOBYTE(v76) = 23;
  KeyedEncodingContainer.encode(_:forKey:)(&v76, v25, v12);
  LOBYTE(v76) = 24;
  KeyedEncodingContainer.encode(_:forKey:)(v44, &v76, v25);
  LOBYTE(v76) = 25;
  KeyedEncodingContainer.encode(_:forKey:)(v45, &v76, v25);
  LOBYTE(v76) = 26;
  KeyedEncodingContainer.encode(_:forKey:)(v46, &v76, v25);
  LOBYTE(v76) = 27;
  KeyedEncodingContainer.encode(_:forKey:)(v47, &v76, v25);
  LOBYTE(v76) = 28;
  KeyedEncodingContainer.encode(_:forKey:)(&v76, v25, v14);
  LOBYTE(v76) = 29;
  KeyedEncodingContainer.encode(_:forKey:)(&v76, v25, v13);
  LOBYTE(v76) = 30;
  KeyedEncodingContainer.encode(_:forKey:)(v48, &v76, v25);
  LOBYTE(v76) = 31;
  KeyedEncodingContainer.encode(_:forKey:)(&v76, v25, v20);
  LOBYTE(v76) = 32;
  KeyedEncodingContainer.encode(_:forKey:)(&v76, v25, v19);
  LOBYTE(v76) = 33;
  KeyedEncodingContainer.encode(_:forKey:)(v81, &v76, v25);
  LOBYTE(v76) = 34;
  KeyedEncodingContainer.encode(_:forKey:)(v74, &v76, v25);
  LOBYTE(v76) = 35;
  KeyedEncodingContainer.encode(_:forKey:)(v75, &v76, v25);
  *(_QWORD *)&v76 = v49;
  v82 = 36;
  v36 = sub_5EDC(&qword_1F19A0);
  v37 = sub_201AC(&qword_1F19A8, &qword_1F19A0, (void (*)(void))sub_6058C, (uint64_t)&protocol conformance descriptor for <> Set<A>);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v76, &v82, v35, v36, v37);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v23, v35);
}

uint64_t sub_5C848@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  return Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.init(from:)(a1, a2);
}

uint64_t sub_5C85C(_QWORD *a1)
{
  return Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.encode(to:)(a1);
}

BooksPersonalization::Configuration::ScorersConfiguration::Scorer_optional __swiftcall Configuration.ScorersConfiguration.Scorer.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1D9390;
  return (BooksPersonalization::Configuration::ScorersConfiguration::Scorer_optional)sub_16848(rawValue, v2, v1);
}

unint64_t Scorer.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x797469746E656469;
  if (*v0 != 1)
    v1 = 1768055156;
  if (*v0)
    return v1;
  else
    return 0xD000000000000013;
}

uint64_t sub_5C8D4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_7925C(*a1, *a2);
}

Swift::Int sub_5C8E0()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE800000000000000;
  v3 = 0x797469746E656469;
  if (v1 != 1)
  {
    v3 = 1768055156;
    v2 = 0xE400000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0xD000000000000013;
  if (v1)
    v5 = v2;
  else
    v5 = 0x800000000019EE20;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_5C97C(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = 0xE800000000000000;
  v3 = 0x797469746E656469;
  if (*v1 != 1)
  {
    v3 = 1768055156;
    v2 = 0xE400000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0xD000000000000013;
  if (*v1)
    v5 = v2;
  else
    v5 = 0x800000000019EE20;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_5C9F4(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE800000000000000;
  v4 = 0x797469746E656469;
  if (v2 != 1)
  {
    v4 = 1768055156;
    v3 = 0xE400000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0xD000000000000013;
  if (v2)
    v6 = v3;
  else
    v6 = 0x800000000019EE20;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

BooksPersonalization::Configuration::ScorersConfiguration::Scorer_optional sub_5CA8C(Swift::String *a1)
{
  return Configuration.ScorersConfiguration.Scorer.init(rawValue:)(*a1);
}

void sub_5CA98(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = *v1;
  v3 = 0x800000000019EE20;
  v4 = 0xE800000000000000;
  v5 = 0x797469746E656469;
  if (v2 != 1)
  {
    v5 = 1768055156;
    v4 = 0xE400000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0xD000000000000013;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_5CAF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_668A8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_5CB50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_668A8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

Swift::Int sub_5CB9C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  String.hash(into:)(v1, 0x747369486B6F6F62, 0xEB0000000079726FLL);
  return Hasher._finalize()();
}

uint64_t sub_5CBF4(uint64_t a1)
{
  return String.hash(into:)(a1, 0x747369486B6F6F62, 0xEB0000000079726FLL);
}

Swift::Int sub_5CC14(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  String.hash(into:)(v2, 0x747369486B6F6F62, 0xEB0000000079726FLL);
  return Hasher._finalize()();
}

uint64_t sub_5CC68@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1D93F8, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_5CCB8(_QWORD *a1@<X8>)
{
  *a1 = 0x747369486B6F6F62;
  a1[1] = 0xEB0000000079726FLL;
}

uint64_t AuthorRecommendationSource.rawValue.getter()
{
  return 0x747369486B6F6F62;
}

uint64_t sub_5CCFC@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1D9430, v3);
  result = swift_bridgeObjectRelease(object);
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_5CD50(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_60610();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_5CD78(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_60610();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Configuration.ScorersConfiguration.bookHistoryScorerConfiguration.getter@<X0>(void *a1@<X8>)
{
  const void *v1;
  _BYTE __dst[376];

  memcpy(__dst, v1, 0x16BuLL);
  memcpy(a1, v1, 0x16BuLL);
  return sub_605D0((uint64_t)__dst);
}

uint64_t Configuration.ScorersConfiguration.init(bookHistoryScorerConfiguration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  double v26;
  char v27;
  char v28;
  char v29;
  double v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[4];
  unint64_t v36;
  __int128 v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  _BYTE v64[368];
  _BYTE v65[368];

  sub_41300(a1, (uint64_t)v64, &qword_1F19B8);
  sub_41300((uint64_t)v64, (uint64_t)v65, &qword_1F19B8);
  if (sub_605F8((uint64_t)v65) == 1)
  {
    result = sub_3D878((uint64_t)&off_1D9340);
    v5 = xmmword_18FB10;
    v4 = xmmword_18FB90;
    v7 = xmmword_18FAF0;
    v6 = xmmword_18FAE0;
    v8 = xmmword_18FB00;
    v9 = xmmword_18FB80;
    v11 = xmmword_18FB70;
    v10 = xmmword_18FB60;
    v13 = xmmword_18FB50;
    v12 = xmmword_18FB40;
    v15 = xmmword_18FB30;
    v14 = xmmword_18FB20;
    v16 = 1;
    v17 = 0;
    v18 = 1.0;
    v19 = 1.5;
    v20 = 1000;
    v21 = 20;
    v22 = 0x3FE999999999999ALL;
    v23 = 7;
    v24 = 0xBFB999999999999ALL;
    v25 = 180;
    v26 = 1.0;
    v27 = 1;
    v28 = 1;
    v29 = 1;
    v30 = 1.5;
    v31 = xmmword_18FAF0;
    v32 = xmmword_18FB60;
    v33 = xmmword_18FB60;
    v34 = xmmword_18FB30;
  }
  else
  {
    sub_41300((uint64_t)v64, (uint64_t)v35, &qword_1F19B8);
    v7 = v35[0];
    v6 = v35[1];
    v31 = v35[2];
    v8 = v35[3];
    v24 = v36;
    v5 = v37;
    v23 = v38;
    v19 = v39;
    v25 = v40;
    v9 = v41;
    v11 = v42;
    v10 = v43;
    v32 = v44;
    v33 = v45;
    v13 = v46;
    v12 = v47;
    v15 = v48;
    v34 = v49;
    v14 = v50;
    v22 = v51;
    v21 = v52;
    v4 = v53;
    v16 = v54;
    v18 = v55;
    v26 = v56;
    result = v57;
    v20 = v58;
    v30 = v59;
    v17 = v60;
    v27 = v61;
    v28 = v62;
    v29 = v63;
  }
  *(_OWORD *)a2 = v7;
  *(_OWORD *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 32) = v31;
  *(_OWORD *)(a2 + 48) = v8;
  *(_QWORD *)(a2 + 64) = v24;
  *(_OWORD *)(a2 + 72) = v5;
  *(_QWORD *)(a2 + 88) = v23;
  *(double *)(a2 + 96) = v19;
  *(_QWORD *)(a2 + 104) = v25;
  *(_OWORD *)(a2 + 112) = v9;
  *(_OWORD *)(a2 + 128) = v11;
  *(_OWORD *)(a2 + 144) = v10;
  *(_OWORD *)(a2 + 160) = v32;
  *(_OWORD *)(a2 + 176) = v33;
  *(_OWORD *)(a2 + 192) = v13;
  *(_OWORD *)(a2 + 208) = v12;
  *(_OWORD *)(a2 + 224) = v15;
  *(_OWORD *)(a2 + 240) = v34;
  *(_OWORD *)(a2 + 256) = v14;
  *(_QWORD *)(a2 + 272) = v22;
  *(_QWORD *)(a2 + 280) = v21;
  *(_OWORD *)(a2 + 288) = v4;
  *(_QWORD *)(a2 + 304) = v16;
  *(double *)(a2 + 312) = v18;
  *(double *)(a2 + 320) = v26;
  *(_QWORD *)(a2 + 328) = result;
  *(_QWORD *)(a2 + 336) = v20;
  *(double *)(a2 + 344) = v30;
  *(_QWORD *)(a2 + 352) = v17;
  *(_BYTE *)(a2 + 360) = v27;
  *(_BYTE *)(a2 + 361) = v28;
  *(_BYTE *)(a2 + 362) = v29;
  return result;
}

uint64_t Configuration.ScorersConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  _QWORD *v118;
  double v119;
  double v120;
  double v121;
  _QWORD v122[45];
  char v123;
  unsigned __int8 v124;
  unsigned __int8 v125;
  _BYTE v126[368];
  _BYTE v127[368];
  _QWORD v128[47];
  uint64_t v129;

  v129 = a2;
  v4 = sub_5EDC(&qword_1F19C0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_49F4(a1, v8);
  v10 = sub_60610();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Configuration.ScorersConfiguration.CodingKeys, &type metadata for Configuration.ScorersConfiguration.CodingKeys, v10, v8, v9);
  if (v2)
  {
    v16 = a1;
  }
  else
  {
    v11 = v129;
    v12 = v5;
    v13 = sub_60654();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v128, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration, v14, v4, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration, v13);
    v15 = v4;
    sub_41300((uint64_t)v128, (uint64_t)v126, &qword_1F19B8);
    sub_41300((uint64_t)v126, (uint64_t)v127, &qword_1F19B8);
    v18 = sub_605F8((uint64_t)v127);
    v118 = a1;
    v19 = v11;
    if (v18 == 1)
    {
      v20 = sub_3D878((uint64_t)&off_1D9340);
      v21 = 1;
      v22 = 0;
      v23 = 1000;
      v24 = 500;
      v25 = 1.5;
      v26 = 20;
      v27 = 0.5;
      v28 = 0x3FD3333333333333;
      v29 = 1.0;
      v30 = 10;
      v31 = 0x3FE999999999999ALL;
      v32 = 7;
      v33 = 180;
      v34 = 0xBFB999999999999ALL;
      v35 = 0x3FECCCCCCCCCCCCDLL;
      v36 = 0x4187BB0000000000;
      v37 = 0xBFECCCCCCCCCCCCDLL;
      v38 = 0x41A2CC0300000000;
      v39 = 0x4132750000000000;
      v40 = 0x4196A38200000000;
      v41 = 0x3FD999999999999ALL;
      v42 = 0x4153C68000000000;
      v43 = 0x3FB999999999999ALL;
      v44 = 0x4143C68000000000;
      v45 = 0x4153C68000000000;
      v46 = 0x3FD999999999999ALL;
      v47 = 0x4187BB0000000000;
      v48 = 0.5;
      v49 = 0x4187BB0000000000;
      v50 = 0.5;
      v51 = 0x4153C68000000000;
      v52 = 0x4153C68000000000;
      v53 = 0x4153C68000000000;
      v54 = 0x3FB999999999999ALL;
      v55 = 0x3FECCCCCCCCCCCCDLL;
      v56 = 0x4187BB0000000000;
      v57 = 0x3FB999999999999ALL;
      v58 = 10;
      v59 = 1;
      v120 = 1.0;
      v121 = 1.0;
      v60 = 1;
      v61 = 1;
      v62 = 1;
      v63 = 0x3FECCCCCCCCCCCCDLL;
      v119 = 1.5;
      v64 = 0x3FD3333333333333;
    }
    else
    {
      sub_41300((uint64_t)v126, (uint64_t)v122, &qword_1F19B8);
      v64 = v122[0];
      v63 = v122[1];
      v57 = v122[2];
      v56 = v122[3];
      v28 = v122[4];
      v55 = v122[5];
      v54 = v122[6];
      v53 = v122[7];
      v34 = v122[8];
      v30 = v122[9];
      v21 = v122[10];
      v32 = v122[11];
      v25 = *(double *)&v122[12];
      v33 = v122[13];
      v35 = v122[14];
      v52 = v122[15];
      v37 = v122[16];
      v51 = v122[17];
      v50 = *(double *)&v122[18];
      v49 = v122[19];
      v48 = *(double *)&v122[20];
      v47 = v122[21];
      v27 = *(double *)&v122[22];
      v36 = v122[23];
      v38 = v122[24];
      v39 = v122[25];
      v29 = *(double *)&v122[26];
      v40 = v122[27];
      v46 = v122[28];
      v45 = v122[29];
      v41 = v122[30];
      v42 = v122[31];
      v43 = v122[32];
      v44 = v122[33];
      v31 = v122[34];
      v26 = v122[35];
      v58 = v122[36];
      v24 = v122[37];
      v59 = v122[38];
      v20 = v122[41];
      v23 = v122[42];
      v60 = v123;
      v61 = v124;
      v62 = v125;
      v121 = *(double *)&v122[39];
      v120 = *(double *)&v122[40];
      v119 = *(double *)&v122[43];
      v22 = v122[44];
    }
    v87 = v54;
    v88 = v50;
    v89 = v49;
    v90 = v57;
    v91 = v48;
    v92 = v47;
    v93 = v35;
    v94 = v37;
    v95 = v52;
    v96 = v25;
    v97 = v36;
    v98 = v38;
    v99 = v39;
    v100 = v46;
    v101 = v27;
    v102 = v45;
    v103 = v40;
    v104 = v41;
    v105 = v29;
    v106 = v42;
    v107 = v43;
    v108 = v44;
    v109 = v31;
    v110 = v61;
    v111 = v26;
    v112 = v24;
    v113 = v58;
    v114 = v23;
    v115 = v22;
    v116 = v20;
    v117 = v62;
    v65 = *(void (**)(char *, uint64_t))(v12 + 8);
    v66 = v7;
    v67 = v15;
    v68 = v21;
    v69 = v28;
    v70 = v32;
    v71 = v34;
    v72 = v51;
    v73 = v59;
    v65(v66, v67);
    *(_QWORD *)v19 = v64;
    *(_QWORD *)(v19 + 8) = v63;
    *(_QWORD *)(v19 + 16) = v90;
    *(_QWORD *)(v19 + 24) = v56;
    *(_QWORD *)(v19 + 32) = v69;
    *(_QWORD *)(v19 + 40) = v55;
    *(_QWORD *)(v19 + 48) = v87;
    *(_QWORD *)(v19 + 56) = v53;
    *(_QWORD *)(v19 + 64) = v71;
    *(_QWORD *)(v19 + 72) = v30;
    *(_QWORD *)(v19 + 80) = v68;
    *(_QWORD *)(v19 + 88) = v70;
    *(double *)(v19 + 96) = v96;
    *(_QWORD *)(v19 + 104) = v33;
    v74 = v95;
    *(_QWORD *)(v19 + 112) = v93;
    *(_QWORD *)(v19 + 120) = v74;
    *(_QWORD *)(v19 + 128) = v94;
    *(_QWORD *)(v19 + 136) = v72;
    v75 = v89;
    *(double *)(v19 + 144) = v88;
    *(_QWORD *)(v19 + 152) = v75;
    v76 = v92;
    *(double *)(v19 + 160) = v91;
    *(_QWORD *)(v19 + 168) = v76;
    v77 = v97;
    *(double *)(v19 + 176) = v101;
    *(_QWORD *)(v19 + 184) = v77;
    v78 = v99;
    *(_QWORD *)(v19 + 192) = v98;
    *(_QWORD *)(v19 + 200) = v78;
    v79 = v103;
    *(double *)(v19 + 208) = v105;
    *(_QWORD *)(v19 + 216) = v79;
    v80 = v102;
    *(_QWORD *)(v19 + 224) = v100;
    *(_QWORD *)(v19 + 232) = v80;
    v81 = v106;
    *(_QWORD *)(v19 + 240) = v104;
    *(_QWORD *)(v19 + 248) = v81;
    v82 = v108;
    *(_QWORD *)(v19 + 256) = v107;
    *(_QWORD *)(v19 + 264) = v82;
    *(_QWORD *)(v19 + 272) = v109;
    v83 = v113;
    *(_QWORD *)(v19 + 280) = v111;
    *(_QWORD *)(v19 + 288) = v83;
    *(_QWORD *)(v19 + 296) = v112;
    *(_QWORD *)(v19 + 304) = v73;
    v84 = v120;
    *(double *)(v19 + 312) = v121;
    *(double *)(v19 + 320) = v84;
    v85 = v114;
    *(_QWORD *)(v19 + 328) = v116;
    *(_QWORD *)(v19 + 336) = v85;
    v86 = v115;
    *(double *)(v19 + 344) = v119;
    *(_QWORD *)(v19 + 352) = v86;
    *(_BYTE *)(v19 + 360) = v60;
    *(_BYTE *)(v19 + 361) = v110;
    *(_BYTE *)(v19 + 362) = v117;
    v16 = v118;
  }
  return sub_62F8(v16);
}

uint64_t Configuration.ScorersConfiguration.encode(to:)(_QWORD *a1)
{
  const void *v1;
  const void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE v15[376];

  v2 = v1;
  v4 = sub_5EDC(&qword_1F19D8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = a1[3];
  v9 = a1[4];
  sub_49F4(a1, v8);
  v10 = sub_60610();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Configuration.ScorersConfiguration.CodingKeys, &type metadata for Configuration.ScorersConfiguration.CodingKeys, v10, v8, v9);
  memcpy(v15, v2, 0x16BuLL);
  v11 = sub_60698();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v15, v12, v4, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration, v11);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_5D5FC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_5D634 + 4 * byte_18D091[a1]))(0xD000000000000013, 0x800000000019F610);
}

uint64_t sub_5D634(uint64_t a1)
{
  return a1 + 4;
}

uint64_t sub_5D754(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_5D78C + 4 * byte_18D09F[a1]))(0xD000000000000013, 0x800000000019F610);
}

uint64_t sub_5D78C(uint64_t a1)
{
  return a1 + 4;
}

uint64_t sub_5D8AC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Configuration.ScorersConfiguration.init(from:)(a1, a2);
}

uint64_t sub_5D8C0(_QWORD *a1)
{
  return Configuration.ScorersConfiguration.encode(to:)(a1);
}

uint64_t sub_5D8D4(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_5D8E0(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_5D5FC);
}

uint64_t sub_5D8E0(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;

  v6 = *a2;
  v7 = a5(*a1);
  v9 = v8;
  v10 = a5(v6);
  if (v7 == v10 && v9 == v11)
  {
    v14 = 1;
    v13 = v9;
  }
  else
  {
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
  }
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v13);
  return v14 & 1;
}

Swift::Int sub_5D96C(uint64_t a1, uint64_t a2)
{
  return sub_5D978(a1, a2, (uint64_t (*)(uint64_t))sub_5D5FC);
}

Swift::Int sub_5D978(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[9];

  v5 = *v3;
  Hasher.init(_seed:)(v10, 0);
  v6 = a3(v5);
  v8 = v7;
  String.hash(into:)(v10, v6, v7);
  swift_bridgeObjectRelease(v8);
  return Hasher._finalize()();
}

uint64_t sub_5D9DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_5D9E8(a1, a2, a3, (uint64_t (*)(_QWORD))sub_5D5FC);
}

uint64_t sub_5D9E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = a4(*v4);
  v8 = v7;
  String.hash(into:)(a1, v6, v7);
  return swift_bridgeObjectRelease(v8);
}

Swift::Int sub_5DA28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_5DA34(a1, a2, a3, (uint64_t (*)(uint64_t))sub_5D5FC);
}

Swift::Int sub_5DA34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[9];

  v6 = *v4;
  Hasher.init(_seed:)(v11, a1);
  v7 = a4(v6);
  v9 = v8;
  String.hash(into:)(v11, v7, v8);
  swift_bridgeObjectRelease(v9);
  return Hasher._finalize()();
}

unint64_t sub_5DA94@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_66764(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_5DAC0@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_5D5FC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_5DAE8()
{
  unsigned __int8 *v0;

  return sub_5D754(*v0);
}

unint64_t sub_5DAF0@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_66764(a1);
  *a2 = result;
  return result;
}

void sub_5DB14(_BYTE *a1@<X8>)
{
  *a1 = 14;
}

uint64_t sub_5DB20(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_609A4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_5DB48(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_609A4();
  return CodingKey.debugDescription.getter(a1, v2);
}

BooksPersonalization::Configuration::MediaTypeMethod_optional __swiftcall Configuration.MediaTypeMethod.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BooksPersonalization::Configuration::MediaTypeMethod_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1D95D8, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 4;
  if (v5 < 4)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t Configuration.MediaTypeMethod.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_5DC00 + 4 * byte_18D0AD[*v0]))(0x6F4A656C676E6973, 0xEB00000000746E69);
}

uint64_t sub_5DC00()
{
  return 0x746E696F4A6C6C61;
}

uint64_t sub_5DC18()
{
  return 0x6F6A7369446C6C61;
}

uint64_t sub_5DC2C()
{
  return 0x7473657265746E69;
}

uint64_t sub_5DC50(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_7A04C(*a1, *a2);
}

void sub_5DC5C()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_5DCB0()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x746E696F4A6C6C61, 0xE800000000000000);
  swift_bridgeObjectRelease(0xE800000000000000);
  return Hasher._finalize()();
}

void sub_5DD28()
{
  __asm { BR              X10 }
}

uint64_t sub_5DD6C(uint64_t a1)
{
  String.hash(into:)(a1, 0x746E696F4A6C6C61, 0xE800000000000000);
  return swift_bridgeObjectRelease(0xE800000000000000);
}

void sub_5DDD0(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_5DE20()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x746E696F4A6C6C61, 0xE800000000000000);
  swift_bridgeObjectRelease(0xE800000000000000);
  return Hasher._finalize()();
}

BooksPersonalization::Configuration::MediaTypeMethod_optional sub_5DE98(Swift::String *a1)
{
  return Configuration.MediaTypeMethod.init(rawValue:)(*a1);
}

uint64_t sub_5DEA4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_5DEDC + 4 * byte_18D0BD[*v0]))();
}

void sub_5DEDC(_QWORD *a1@<X8>)
{
  *a1 = 0x746E696F4A6C6C61;
  a1[1] = 0xE800000000000000;
}

void sub_5DEF8(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x6F6A7369446C6C61;
  a1[1] = v1;
}

void sub_5DF10(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "interestBased");
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t sub_5DF38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_66864();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_5DF94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_66864();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

double Configuration.genreRecommendationConfiguration.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int16 v2;
  double result;
  char v4;

  v2 = *(_WORD *)(v1 + 8);
  result = *(double *)(v1 + 16);
  v4 = *(_BYTE *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_WORD *)(a1 + 8) = v2;
  *(double *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 24) = v4;
  return result;
}

void Configuration.seedBasedRecommendationConfiguration.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 25);
}

uint64_t Configuration.collectionsConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __int16 v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_BYTE *)(v1 + 40);
  v3 = *(_WORD *)(v1 + 48);
  v4 = *(_QWORD *)(v1 + 56);
  v5 = *(_WORD *)(v1 + 64);
  v7 = *(_QWORD *)(v1 + 72);
  v6 = *(_QWORD *)(v1 + 80);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 32);
  *(_BYTE *)(a1 + 8) = v2;
  *(_WORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_WORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v6;
  return swift_bridgeObjectRetain(v6);
}

uint64_t Configuration.scorersConfiguration.getter@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  const void *v3;
  _BYTE v5[368];

  v3 = (const void *)(v1 + 88);
  memcpy(v5, v3, 0x16BuLL);
  memcpy(a1, v3, 0x16BuLL);
  return sub_605D0((uint64_t)v5);
}

uint64_t Configuration.profileGenreDenylistForGenres.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 456));
}

uint64_t Configuration.profileGenreDenylistForBooks.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 464));
}

uint64_t Configuration.indefiniteAuthorIDs.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 472));
}

void Configuration.mediaTypeMethod.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 480);
}

uint64_t Configuration.mediaTypesRecommendationServiceConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 504);
  v3 = *(_QWORD *)(v1 + 512);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 488);
  *(_QWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 24) = v3;
  return swift_bridgeObjectRetain(v3);
}

uint64_t Configuration.booksClusteringServiceConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(v1 + 528);
  v3 = *(_QWORD *)(v1 + 536);
  v4 = *(_QWORD *)(v1 + 544);
  v5 = *(_QWORD *)(v1 + 552);
  v6 = *(_BYTE *)(v1 + 560);
  v7 = *(_QWORD *)(v1 + 568);
  v8 = *(_QWORD *)(v1 + 576);
  v9 = *(_QWORD *)(v1 + 584);
  v10 = *(_QWORD *)(v1 + 592);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 520);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v10;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  return swift_bridgeObjectRetain(v8);
}

uint64_t Configuration.ebookConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;

  v2 = *(_QWORD *)(v1 + 600);
  v3 = *(_BYTE *)(v1 + 608);
  v4 = *(_BYTE *)(v1 + 609);
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4;
  return swift_bridgeObjectRetain(v2);
}

uint64_t Configuration.audiobookConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;

  v2 = *(_QWORD *)(v1 + 616);
  v3 = *(_BYTE *)(v1 + 624);
  v4 = *(_BYTE *)(v1 + 625);
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4;
  return swift_bridgeObjectRetain(v2);
}

double Configuration.personalizationMetadataServiceConfiguration.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;
  uint64_t v3;

  result = *(double *)(v1 + 640);
  v3 = *(_QWORD *)(v1 + 648);
  *(_BYTE *)a1 = *(_BYTE *)(v1 + 632);
  *(double *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t Configuration.tabiConfiguration.getter@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  const void *v3;
  _BYTE v5[432];

  v3 = (const void *)(v1 + 656);
  memcpy(v5, v3, sizeof(v5));
  memcpy(a1, v3, 0x1B0uLL);
  return sub_606DC((uint64_t)v5);
}

void *Configuration.init(genreRecommendationConfiguration:seedBasedRecommendationConfiguration:collectionsConfiguration:scorersConfiguration:profileGenreDenylistForGenres:profileGenreDenylistForBooks:indefiniteAuthorIDs:mediaTypeMethod:mediaTypesRecommendationServiceConfiguration:booksClusteringServiceConfiguration:ebookConfiguration:audiobookConfiguration:personalizationMetadataServiceConfiguration:tabiConfiguration:)@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X3>, _UNKNOWN **a5@<X4>, _UNKNOWN **a6@<X5>, _UNKNOWN **a7@<X6>, unsigned __int8 *a8@<X7>, uint64_t a9@<X8>, uint64_t *a10, _QWORD *a11, uint64_t a12, uint64_t a13, double *a14, uint64_t a15)
{
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _UNKNOWN **v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  double v43;
  char v44;
  _UNKNOWN **v45;
  char v46;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  char v73;
  int v74;
  char v75;
  char v76;
  _UNKNOWN **v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  double v81;
  double v82;
  char v83;
  char v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  uint64_t v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  double v116;
  double v117;
  uint64_t v118;
  double v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  double v133;
  int v134;
  unint64_t v135;
  char v136;
  int v137;
  uint64_t v138;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v145;
  _UNKNOWN **v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  _QWORD *v161;
  unint64_t v162;
  _QWORD __src[54];
  unint64_t __dst[54];
  _BYTE v166[11];
  __int16 v167;
  int v168;
  __int16 v169;
  unsigned __int16 v170[4];
  _BYTE v171[12];
  __int16 v172[92];
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  double v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  double v190;
  uint64_t v191;
  double v192;
  uint64_t v193;
  double v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  double v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  double v211;
  double v212;
  uint64_t v213;
  uint64_t v214;
  double v215;
  uint64_t v216;
  char v217;
  char v218;
  char v219;
  __int16 v220[184];
  unint64_t v221;
  char v222;
  __int16 v223;
  unint64_t v224;
  __int16 v225;
  unint64_t v226;
  unint64_t v227;
  _BYTE v228[368];
  _BYTE v229[448];

  v17 = *(_QWORD *)(a1 + 8);
  v153 = *(_QWORD *)a1;
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *(unsigned __int8 *)(a1 + 24);
  v137 = *a2;
  v159 = *a3;
  v158 = a3[1];
  v157 = a3[2];
  v156 = a3[3];
  v155 = a3[4];
  v154 = a3[5];
  v160 = a3[6];
  sub_41300(a4, (uint64_t)v228, &qword_1F19E8);
  v134 = *a8;
  v151 = *a10;
  v152 = a10[1];
  v20 = a10[2];
  v162 = a10[3];
  v149 = *a11;
  v21 = *((double *)a11 + 1);
  v147 = a11[2];
  v161 = (_QWORD *)a11[3];
  v146 = (_UNKNOWN **)a11[4];
  v22 = a11[6];
  v142 = a11[5];
  v150 = a11[7];
  v23 = a11[8];
  v148 = a11[9];
  v24 = *(_QWORD *)a12;
  v25 = *(unsigned __int16 *)(a12 + 8);
  v26 = *(_QWORD *)a13;
  v27 = *(unsigned __int16 *)(a13 + 8);
  v138 = *(unsigned __int8 *)a14;
  v133 = a14[1];
  v131 = *((_QWORD *)a14 + 2);
  sub_41300(a15, (uint64_t)v229, &qword_1F19F0);
  if (v19 == 2)
  {
    v136 = 0;
    LOBYTE(v17) = 1;
    v18 = 0x3FE6666666666666;
    v153 = 1000;
    LOBYTE(v135) = 1;
  }
  else
  {
    v135 = v17 >> 8;
    v136 = v19 & 1;
  }
  if (v160)
  {
    v221 = v159;
    v130 = v159 >> 8;
    v129 = v159 >> 16;
    v128 = v159 >> 24;
    v127 = HIDWORD(v159);
    v126 = v159 >> 40;
    v125 = HIWORD(v159);
    v124 = HIBYTE(v159);
    v222 = v158;
    v223 = v157;
    v123 = v157 >> 8;
    v224 = v156;
    v225 = v155;
    v122 = v155 >> 8;
    v226 = v154;
    v227 = v160;
  }
  else
  {
    LOWORD(__src[0]) = 768;
    v166[0] = 3;
    v220[0] = 768;
    v172[0] = 768;
    *(_WORD *)v171 = 768;
    v173 = xmmword_18FBA0;
    v170[0] = 768;
    __dst[1] = 0;
    __dst[0] = 0;
    Configuration.CollectionsConfiguration.init(booksBySuggestedAuthorsConfiguration:booksConfiguration:booksYouMightLikeConfiguration:forYouConfiguration:mangaYouMightLikeConfiguration:moreFromYourAuthorsConfiguration:suggestionsConfiguration:postHydrationFilteringConfiguration:)((unsigned __int16 *)__src, v166, v220, v172, (__int16 *)v171, (uint64_t *)&v173, v170, __dst, (uint64_t)&v221);
    LOBYTE(v159) = v221;
    LOBYTE(v130) = BYTE1(v221);
    LOBYTE(v129) = BYTE2(v221);
    LOBYTE(v128) = BYTE3(v221);
    LOBYTE(v127) = BYTE4(v221);
    LOBYTE(v126) = BYTE5(v221);
    LOBYTE(v125) = BYTE6(v221);
    LOBYTE(v124) = HIBYTE(v221);
    LOBYTE(v158) = v222;
    LOBYTE(v157) = v223;
    LOBYTE(v123) = HIBYTE(v223);
    v156 = v224;
    LOBYTE(v155) = v225;
    LOBYTE(v122) = HIBYTE(v225);
    v154 = v226;
    v160 = v227;
  }
  v140 = v18;
  sub_41300((uint64_t)v228, (uint64_t)v220, &qword_1F19E8);
  if (sub_605F8((uint64_t)v220) == 1)
  {
    v121 = sub_3D878((uint64_t)&off_1D9340);
    v120 = 1;
    v115 = 0;
    v118 = 1000;
    v102 = 500;
    v119 = 1.0;
    v103 = 20;
    v117 = 0.5;
    v114 = 0x4143C68000000000;
    v116 = 1.5;
    v113 = 0x3FE999999999999ALL;
    v112 = 0x4196A38200000000;
    v110 = 0x4132750000000000;
    v109 = 0x41A2CC0300000000;
    v108 = 0xBFECCCCCCCCCCCCDLL;
    v104 = 180;
    v105 = 7;
    v106 = 10;
    v107 = 0xBFB999999999999ALL;
    v28 = 0x4153C68000000000;
    v29 = 0x4187BB0000000000;
    v30 = 0x3FB999999999999ALL;
    v31 = 0x3FECCCCCCCCCCCCDLL;
    v99 = 0x3FD3333333333333;
    v100 = 0x4153C68000000000;
    v91 = 0x3FECCCCCCCCCCCCDLL;
    v92 = 0x3FD3333333333333;
    v89 = 0x4153C68000000000;
    v90 = 0x3FB999999999999ALL;
    v101 = 0x3FECCCCCCCCCCCCDLL;
    v97 = 0x4187BB0000000000;
    v98 = 0x4153C68000000000;
    v95 = 0x4187BB0000000000;
    v96 = 0.5;
    v93 = 0x4187BB0000000000;
    v94 = 0.5;
    v111 = 0x3FD999999999999ALL;
    v87 = 0x4153C68000000000;
    v88 = 0x3FD999999999999ALL;
    v79 = 10;
    v78 = 1;
    v81 = 1.0;
    v82 = 1.0;
    v85 = 1;
    v84 = 1;
    v83 = 1;
    v80 = 1.5;
    v86 = 0x3FB999999999999ALL;
  }
  else
  {
    sub_41300((uint64_t)v228, (uint64_t)&v173, &qword_1F19E8);
    v31 = *((_QWORD *)&v173 + 1);
    v99 = v173;
    v30 = v174;
    v29 = v175;
    v91 = v177;
    v92 = v176;
    v90 = v178;
    v28 = v179;
    v120 = v182;
    v105 = v183;
    v106 = v181;
    v116 = v184;
    v104 = v185;
    v100 = v187;
    v101 = v186;
    v107 = v180;
    v108 = v188;
    v117 = v190;
    v97 = v191;
    v98 = v189;
    v95 = v193;
    v96 = v192;
    v93 = v195;
    v94 = v194;
    v109 = v196;
    v110 = v197;
    v119 = v198;
    v111 = v200;
    v112 = v199;
    v88 = v202;
    v89 = v201;
    v86 = v204;
    v87 = v203;
    v113 = v206;
    v114 = v205;
    v102 = v209;
    v103 = v207;
    v78 = v210;
    v79 = v208;
    v121 = v213;
    v118 = v214;
    v85 = v217;
    v84 = v218;
    v83 = v219;
    v81 = v212;
    v82 = v211;
    v80 = v215;
    v115 = v216;
  }
  if (a5)
    v32 = a5;
  else
    v32 = &off_1D9658;
  if (a6)
  {
    if (v162)
      goto LABEL_15;
  }
  else
  {
    swift_bridgeObjectRetain(v32);
    a6 = v32;
    if (v162)
    {
LABEL_15:
      if (v161)
        goto LABEL_16;
      goto LABEL_21;
    }
  }
  v162 = sub_5FF40((uint64_t)&off_1D8C68);
  v152 = 2;
  v20 = 0x3FE999999999999ALL;
  v151 = 2;
  if (v161)
  {
LABEL_16:
    v76 = v142 & 1;
    if (v24)
      goto LABEL_17;
LABEL_22:
    if (qword_1F00A0 != -1)
      swift_once(&qword_1F00A0, sub_5398C);
    v24 = qword_224560;
    LOBYTE(v74) = HIBYTE(word_224568);
    v75 = word_224568;
    swift_bridgeObjectRetain(qword_224560);
    if (v26)
      goto LABEL_18;
    goto LABEL_25;
  }
LABEL_21:
  v22 = sub_53118((uint64_t)&off_1D8EE8, &qword_1F1DD8, sub_3951C);
  v150 = sub_53118((uint64_t)&off_1D8F18, &qword_1F1DD0, (uint64_t (*)(_QWORD))sub_3946C);
  v76 = 0;
  v21 = 2.0;
  v161 = _swiftEmptyArrayStorage;
  v149 = 5;
  v147 = 3;
  v23 = 0x3FECCCCCCCCCCCCDLL;
  v148 = 10;
  v146 = &off_1D8EB8;
  if (!v24)
    goto LABEL_22;
LABEL_17:
  v74 = (v25 >> 8) & 1;
  v75 = v25 & 1;
  if (v26)
  {
LABEL_18:
    v72 = (v27 >> 8) & 1;
    v73 = v27 & 1;
    goto LABEL_28;
  }
LABEL_25:
  if (qword_1F00A8 != -1)
    swift_once(&qword_1F00A8, sub_539AC);
  v26 = qword_224570;
  LOBYTE(v72) = HIBYTE(word_224578);
  v73 = word_224578;
  swift_bridgeObjectRetain(qword_224570);
LABEL_28:
  v77 = v32;
  v33 = v21;
  v141 = v24;
  v143 = v26;
  v145 = v22;
  sub_41300((uint64_t)v229, (uint64_t)&v173, &qword_1F19F0);
  v34 = v20;
  if (sub_246D4((uint64_t)&v173) == 1)
  {
    sub_60980((uint64_t)__dst);
    sub_41300((uint64_t)__dst, (uint64_t)v172, &qword_1F19F8);
    v35 = 0;
    v51 = 0;
    v52 = 0;
    v49 = 0;
    v50 = 0;
    v48 = 0;
    v36 = 0;
    v57 = 0;
    v58 = 0;
    v55 = 0;
    v56 = 0;
    v53 = 0;
    v54 = 0;
    v61 = 0;
    v62 = 0;
    v59 = 0;
    v60 = 0;
    v70 = 0;
    v71 = 0;
    v68 = 0;
    v69 = 0;
    v66 = 0;
    v67 = 0;
    v64 = 0;
    v65 = 0;
    v63 = 0;
    v37 = 0x80000000001A0300;
    v38 = _swiftEmptyArrayStorage;
    v39 = 0xD000000000000023;
    v40 = 0xEB00000000444549;
    v41 = 0x4649434550534E55;
  }
  else
  {
    sub_41300((uint64_t)v229, (uint64_t)__dst, &qword_1F19F0);
    v70 = __dst[46];
    v71 = __dst[45];
    v68 = __dst[48];
    v69 = __dst[47];
    v66 = __dst[50];
    v67 = __dst[49];
    v64 = __dst[53];
    v65 = __dst[51];
    v62 = __dst[41];
    v63 = __dst[52];
    v60 = __dst[43];
    v61 = __dst[42];
    v58 = __dst[35];
    v59 = __dst[44];
    v56 = __dst[37];
    v57 = __dst[36];
    v54 = __dst[39];
    v55 = __dst[38];
    v52 = __dst[29];
    v53 = __dst[40];
    v50 = __dst[31];
    v51 = __dst[30];
    v48 = __dst[33];
    v49 = __dst[32];
    v36 = __dst[34];
    v35 = __dst[5];
    v38 = (_QWORD *)__dst[4];
    v39 = __dst[2];
    v37 = __dst[3];
    v41 = __dst[0];
    v40 = __dst[1];
    sub_41300((uint64_t)&__dst[6], (uint64_t)v172, &qword_1F19F8);
  }
  v42 = 500;
  if (v138 != 2)
    v42 = v131;
  v132 = v42;
  if (v138 == 2)
    v43 = 86400.0;
  else
    v43 = v133;
  if (v134 == 4)
    v44 = 1;
  else
    v44 = v134;
  __src[0] = v41;
  __src[1] = v40;
  if (a7)
    v45 = a7;
  else
    v45 = &off_1D9978;
  if (v137 == 3)
    v46 = 0;
  else
    v46 = v137;
  __src[2] = v39;
  __src[3] = v37;
  __src[4] = v38;
  __src[5] = v35;
  sub_41300((uint64_t)v172, (uint64_t)&__src[6], &qword_1F19F8);
  __src[29] = v52;
  __src[30] = v51;
  __src[31] = v50;
  __src[32] = v49;
  __src[33] = v48;
  __src[34] = v36;
  __src[35] = v58;
  __src[36] = v57;
  __src[37] = v56;
  __src[38] = v55;
  __src[39] = v54;
  __src[40] = v53;
  __src[41] = v62;
  __src[42] = v61;
  __src[43] = v60;
  __src[44] = v59;
  __src[45] = v71;
  __src[46] = v70;
  __src[47] = v69;
  __src[48] = v68;
  __src[49] = v67;
  __src[50] = v66;
  __src[51] = v65;
  __src[52] = v63;
  __src[53] = v64;
  memcpy(__dst, __src, sizeof(__dst));
  *(_QWORD *)(a9 + 16) = v140;
  *(_QWORD *)(a9 + 88) = v99;
  *(_QWORD *)(a9 + 96) = v31;
  *(_QWORD *)(a9 + 104) = v30;
  *(_QWORD *)(a9 + 112) = v29;
  *(_QWORD *)(a9 + 120) = v92;
  *(_QWORD *)(a9 + 128) = v91;
  *(_QWORD *)(a9 + 136) = v90;
  *(_QWORD *)a9 = v153;
  *(_BYTE *)(a9 + 8) = v17;
  *(_BYTE *)(a9 + 9) = v135;
  *(_BYTE *)(a9 + 24) = v136;
  *(_BYTE *)(a9 + 25) = v46;
  *(_BYTE *)(a9 + 32) = v159;
  *(_BYTE *)(a9 + 33) = v130;
  *(_BYTE *)(a9 + 34) = v129;
  *(_BYTE *)(a9 + 35) = v128;
  *(_BYTE *)(a9 + 36) = v127;
  *(_BYTE *)(a9 + 37) = v126;
  *(_BYTE *)(a9 + 38) = v125;
  *(_BYTE *)(a9 + 39) = v124;
  *(_BYTE *)(a9 + 40) = v158;
  *(_BYTE *)(a9 + 48) = v157;
  *(_BYTE *)(a9 + 49) = v123;
  *(_QWORD *)(a9 + 56) = v156;
  *(_BYTE *)(a9 + 64) = v155;
  *(_BYTE *)(a9 + 65) = v122;
  *(_QWORD *)(a9 + 72) = v154;
  *(_QWORD *)(a9 + 80) = v160;
  *(_QWORD *)(a9 + 160) = v106;
  *(_QWORD *)(a9 + 168) = v120;
  *(_QWORD *)(a9 + 176) = v105;
  *(_QWORD *)(a9 + 192) = v104;
  *(_QWORD *)(a9 + 368) = v103;
  *(_QWORD *)(a9 + 376) = v79;
  *(_QWORD *)(a9 + 384) = v102;
  *(_QWORD *)(a9 + 392) = v78;
  *(_QWORD *)(a9 + 144) = v28;
  *(_QWORD *)(a9 + 152) = v107;
  *(double *)(a9 + 184) = v116;
  *(_QWORD *)(a9 + 200) = v101;
  *(_QWORD *)(a9 + 208) = v100;
  *(_QWORD *)(a9 + 216) = v108;
  *(_QWORD *)(a9 + 224) = v98;
  *(double *)(a9 + 232) = v117;
  *(_QWORD *)(a9 + 240) = v97;
  *(double *)(a9 + 248) = v96;
  *(_QWORD *)(a9 + 256) = v95;
  *(double *)(a9 + 264) = v94;
  *(_QWORD *)(a9 + 272) = v93;
  *(_QWORD *)(a9 + 280) = v109;
  *(_QWORD *)(a9 + 288) = v110;
  *(double *)(a9 + 296) = v119;
  *(_QWORD *)(a9 + 304) = v112;
  *(_QWORD *)(a9 + 312) = v111;
  *(_QWORD *)(a9 + 320) = v89;
  *(_QWORD *)(a9 + 328) = v88;
  *(_QWORD *)(a9 + 336) = v87;
  *(_QWORD *)(a9 + 344) = v86;
  *(_QWORD *)(a9 + 352) = v114;
  *(_QWORD *)(a9 + 360) = v113;
  *(double *)(a9 + 400) = v82;
  *(double *)(a9 + 408) = v81;
  *(_QWORD *)(a9 + 416) = v121;
  *(_QWORD *)(a9 + 424) = v118;
  *(double *)(a9 + 432) = v80;
  *(_QWORD *)(a9 + 440) = v115;
  *(_BYTE *)(a9 + 448) = v85;
  *(_BYTE *)(a9 + 449) = v84;
  *(_BYTE *)(a9 + 450) = v83;
  *(_BYTE *)(a9 + 455) = v171[11];
  *(_DWORD *)(a9 + 451) = *(_DWORD *)&v171[7];
  *(_QWORD *)(a9 + 456) = v77;
  *(_QWORD *)(a9 + 464) = a6;
  *(_QWORD *)(a9 + 472) = v45;
  *(_BYTE *)(a9 + 480) = v44;
  *(_DWORD *)(a9 + 484) = *(_DWORD *)&v171[3];
  *(_DWORD *)(a9 + 481) = *(_DWORD *)v171;
  *(_QWORD *)(a9 + 488) = v151;
  *(_QWORD *)(a9 + 496) = v152;
  *(_QWORD *)(a9 + 504) = v34;
  *(_QWORD *)(a9 + 512) = v162;
  *(_QWORD *)(a9 + 520) = v149;
  *(double *)(a9 + 528) = v33;
  *(_QWORD *)(a9 + 536) = v147;
  *(_QWORD *)(a9 + 544) = v161;
  *(_QWORD *)(a9 + 552) = v146;
  *(_BYTE *)(a9 + 560) = v76;
  *(_DWORD *)(a9 + 561) = *(_DWORD *)v170;
  *(_DWORD *)(a9 + 564) = *(_DWORD *)((char *)&v170[1] + 1);
  *(_QWORD *)(a9 + 568) = v145;
  *(_QWORD *)(a9 + 576) = v150;
  *(_QWORD *)(a9 + 584) = v23;
  *(_QWORD *)(a9 + 592) = v148;
  *(_QWORD *)(a9 + 600) = v141;
  *(_BYTE *)(a9 + 608) = v75;
  *(_BYTE *)(a9 + 609) = v74;
  *(_DWORD *)(a9 + 610) = v168;
  *(_WORD *)(a9 + 614) = v169;
  *(_QWORD *)(a9 + 616) = v143;
  *(_BYTE *)(a9 + 624) = v73;
  *(_BYTE *)(a9 + 625) = v72;
  *(_WORD *)(a9 + 630) = v167;
  *(_DWORD *)(a9 + 626) = *(_DWORD *)&v166[7];
  *(_BYTE *)(a9 + 632) = v138 & 1;
  *(_DWORD *)(a9 + 636) = *(_DWORD *)&v166[3];
  *(_DWORD *)(a9 + 633) = *(_DWORD *)v166;
  *(double *)(a9 + 640) = v43;
  *(_QWORD *)(a9 + 648) = v132;
  return memcpy((void *)(a9 + 656), __dst, 0x1B0uLL);
}

uint64_t Configuration.init(from:)@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _UNKNOWN **v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD v27[11];
  _UNKNOWN **v28;
  _UNKNOWN **v29;
  _UNKNOWN **v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  _BYTE v34[432];
  _BYTE v35[432];
  _BYTE v36[1095];
  char v37;
  _QWORD v38[54];
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  _QWORD v51[10];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 v68;
  unsigned __int8 v69;
  _UNKNOWN **v70;
  _UNKNOWN **v71;
  _UNKNOWN **v72;
  _BYTE v73[368];
  _BYTE v74[367];
  char v75;
  _QWORD v76[46];
  _OWORD v77[3];
  uint64_t v78;
  _OWORD v79[3];
  uint64_t v80;
  unsigned __int8 v81;
  unsigned __int8 v82;
  __int128 v83;
  uint64_t v84;
  char v85;
  __int128 v86;
  uint64_t v87;
  char v88;
  uint64_t v89;

  v89 = sub_5EDC(&qword_1F1A00);
  v5 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_49F4(a1, v8);
  v10 = sub_609A4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Configuration.CodingKeys, &type metadata for Configuration.CodingKeys, v10, v8, v9);
  if (!v2)
  {
    v11 = v5;
    v33 = a2;
    v36[0] = 0;
    v12 = sub_609E8();
    v13 = v89;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v86, &type metadata for Configuration.GenreRecommendationConfiguration, v36, v89, &type metadata for Configuration.GenreRecommendationConfiguration, v12);
    v83 = v86;
    v84 = v87;
    v85 = v88;
    v36[0] = 1;
    v14 = sub_60A2C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v82, &type metadata for Configuration.SeedBasedRecommendationConfiguration, v36, v13, &type metadata for Configuration.SeedBasedRecommendationConfiguration, v14);
    v81 = v82;
    v36[0] = 2;
    v15 = sub_60A70();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v79, &type metadata for Configuration.CollectionsConfiguration, v36, v13, &type metadata for Configuration.CollectionsConfiguration, v15);
    v32 = v11;
    v17 = v80;
    v77[0] = v79[0];
    v77[1] = v79[1];
    v77[2] = v79[2];
    v78 = v80;
    v75 = 3;
    v18 = sub_60AB4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v76, &type metadata for Configuration.ScorersConfiguration, &v75, v13, &type metadata for Configuration.ScorersConfiguration, v18);
    v31 = v17;
    sub_41300((uint64_t)v76, (uint64_t)v74, &qword_1F19E8);
    sub_41300((uint64_t)v74, (uint64_t)v73, &qword_1F19E8);
    v19 = sub_5EDC(&qword_1F1660);
    v36[0] = 4;
    v30 = (_UNKNOWN **)sub_53E6C(&qword_1F1678, (uint64_t)&protocol witness table for UInt64, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v72, v19, v36, v13, v19, v30);
    v29 = v72;
    v36[0] = 5;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v71, v19, v36, v13, v19, v30);
    v28 = v71;
    v36[0] = 6;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v70, v19, v36, v13, v19, v30);
    v20 = v70;
    v36[0] = 7;
    v21 = sub_60B20();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v69, &type metadata for Configuration.MediaTypeMethod, v36, v13, &type metadata for Configuration.MediaTypeMethod, v21);
    v30 = v20;
    v68 = v69;
    v36[0] = 8;
    v22 = sub_60B64();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v65, &type metadata for Configuration.MediaTypesRecommendationServiceConfiguration, v36, v13, &type metadata for Configuration.MediaTypesRecommendationServiceConfiguration, v22);
    v62 = v65;
    v63 = v66;
    v32 = v67;
    v64 = v67;
    v36[0] = 11;
    v23 = sub_60BA8();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v52, &type metadata for Configuration.BooksClusteringServiceConfiguration, v36, v13, &type metadata for Configuration.BooksClusteringServiceConfiguration, v23);
    v27[4] = v52;
    v27[5] = v53;
    v51[0] = v52;
    v51[1] = v53;
    v27[6] = v54;
    v27[7] = v55;
    v51[2] = v54;
    v51[3] = v55;
    v27[8] = v56;
    v27[9] = v57;
    v51[4] = v56;
    v51[5] = v57;
    v27[10] = v58;
    v51[6] = v58;
    v51[7] = v59;
    v27[2] = v61;
    v27[3] = v60;
    v51[8] = v60;
    v51[9] = v61;
    v36[0] = 9;
    v24 = sub_60BEC();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v49, &type metadata for Configuration.MediaTypeConfiguration, v36, v89, &type metadata for Configuration.MediaTypeConfiguration, v24);
    v27[1] = v49;
    v47 = v49;
    v48 = v50;
    v36[0] = 10;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v45, &type metadata for Configuration.MediaTypeConfiguration, v36, v89, &type metadata for Configuration.MediaTypeConfiguration, v24);
    v43 = v45;
    v44 = v46;
    v36[0] = 12;
    v25 = sub_60C80();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v41, &type metadata for Configuration.PersonalizationMetadataServiceConfiguration, v36, v89, &type metadata for Configuration.PersonalizationMetadataServiceConfiguration, v25);
    v39 = v41;
    v40 = v42;
    v37 = 13;
    v26 = sub_60CC4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v38, &type metadata for TabiConfiguration, &v37, v89, &type metadata for TabiConfiguration, v26);
    sub_41300((uint64_t)v38, (uint64_t)v35, &qword_1F19F0);
    sub_41300((uint64_t)v35, (uint64_t)v34, &qword_1F19F0);
    Configuration.init(genreRecommendationConfiguration:seedBasedRecommendationConfiguration:collectionsConfiguration:scorersConfiguration:profileGenreDenylistForGenres:profileGenreDenylistForBooks:indefiniteAuthorIDs:mediaTypeMethod:mediaTypesRecommendationServiceConfiguration:booksClusteringServiceConfiguration:ebookConfiguration:audiobookConfiguration:personalizationMetadataServiceConfiguration:tabiConfiguration:)((uint64_t)&v83, &v81, (unint64_t *)v77, (uint64_t)v73, v29, v28, v30, &v68, (uint64_t)v36, (uint64_t *)&v62, v51, (uint64_t)&v47, (uint64_t)&v43, (double *)&v39, (uint64_t)v34);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v89);
    memcpy(v33, v36, 0x440uLL);
  }
  return sub_62F8(a1);
}

uint64_t Configuration.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  _OWORD v76[27];
  _BYTE v77[363];
  _BYTE v78[432];
  int v79;
  char v80;

  v3 = sub_5EDC(&qword_1F1A60);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v79 = *((unsigned __int16 *)v1 + 4);
  v8 = v1[2];
  v9 = *((unsigned __int8 *)v1 + 24);
  v73 = *((unsigned __int8 *)v1 + 25);
  v74 = v9;
  v10 = v1[4];
  v11 = *((unsigned __int8 *)v1 + 40);
  v71 = *((unsigned __int8 *)v1 + 48);
  v72 = v11;
  v70 = *((unsigned __int8 *)v1 + 49);
  v69 = v1[7];
  v12 = *((unsigned __int8 *)v1 + 64);
  v67 = *((unsigned __int8 *)v1 + 65);
  v68 = v12;
  v13 = v1[10];
  v65 = v1[9];
  v66 = v13;
  memcpy(v77, v1 + 11, sizeof(v77));
  v14 = v1[57];
  v63 = v1[58];
  v64 = v14;
  v62 = v1[59];
  v61 = *((unsigned __int8 *)v1 + 480);
  v15 = v1[62];
  *(_QWORD *)&v59 = v1[61];
  *((_QWORD *)&v59 + 1) = v15;
  v16 = v1[63];
  v60 = v1[64];
  v17 = v1[66];
  v18 = v1[67];
  v47 = v1[65];
  v48 = v18;
  v19 = *((_OWORD *)v1 + 34);
  v49 = *((unsigned __int8 *)v1 + 560);
  v51 = *(_OWORD *)(v1 + 71);
  v52 = v19;
  v20 = v1[73];
  v50 = v1[74];
  v56 = v1[75];
  LODWORD(v18) = *((unsigned __int8 *)v1 + 609);
  v57 = *((unsigned __int8 *)v1 + 608);
  v58 = v18;
  v53 = v1[77];
  LODWORD(v18) = *((unsigned __int8 *)v1 + 625);
  v54 = *((unsigned __int8 *)v1 + 624);
  v55 = v18;
  HIDWORD(v45) = *((unsigned __int8 *)v1 + 632);
  v21 = v1[80];
  v46 = v1[81];
  memcpy(v78, v1 + 82, sizeof(v78));
  v22 = a1[3];
  v23 = a1[4];
  sub_49F4(a1, v22);
  v24 = sub_609A4();
  v25 = v23;
  v26 = v6;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Configuration.CodingKeys, &type metadata for Configuration.CodingKeys, v24, v22, v25);
  *(_QWORD *)&v76[0] = v7;
  WORD4(v76[0]) = v79;
  *(_QWORD *)&v76[1] = v8;
  BYTE8(v76[1]) = v74;
  v80 = 0;
  v27 = sub_60D08();
  v28 = v75;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v76, &v80, v3, &type metadata for Configuration.GenreRecommendationConfiguration, v27);
  if (v28)
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v30 = v70;
  v29 = v71;
  v31 = v72;
  LOBYTE(v76[0]) = v73;
  v80 = 1;
  v32 = sub_60D4C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v76, &v80, v3, &type metadata for Configuration.SeedBasedRecommendationConfiguration, v32);
  *(_QWORD *)&v76[0] = v10;
  BYTE8(v76[0]) = v31;
  LOBYTE(v76[1]) = v29;
  BYTE1(v76[1]) = v30;
  *((_QWORD *)&v76[1] + 1) = v69;
  LOBYTE(v76[2]) = v68;
  BYTE1(v76[2]) = v67;
  *((_QWORD *)&v76[2] + 1) = v65;
  *(_QWORD *)&v76[3] = v66;
  v80 = 2;
  v33 = sub_60D90();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v76, &v80, v3, &type metadata for Configuration.CollectionsConfiguration, v33);
  v75 = v4;
  memcpy(v76, v77, 0x16BuLL);
  v80 = 3;
  v34 = sub_60DD4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v76, &v80, v3, &type metadata for Configuration.ScorersConfiguration, v34);
  *(_QWORD *)&v76[0] = v64;
  v80 = 4;
  v35 = sub_5EDC(&qword_1F1660);
  v36 = sub_53E6C(&qword_1F1668, (uint64_t)&protocol witness table for UInt64, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v76, &v80, v3, v35, v36);
  *(_QWORD *)&v76[0] = v63;
  v80 = 5;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v76, &v80, v3, v35, v36);
  *(_QWORD *)&v76[0] = v62;
  v80 = 6;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v76, &v80, v3, v35, v36);
  LOBYTE(v76[0]) = v61;
  v80 = 7;
  v37 = sub_60E18();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v76, &v80, v3, &type metadata for Configuration.MediaTypeMethod, v37);
  v76[0] = v59;
  *(_QWORD *)&v76[1] = v16;
  *((_QWORD *)&v76[1] + 1) = v60;
  v80 = 8;
  v38 = sub_60E5C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v76, &v80, v3, &type metadata for Configuration.MediaTypesRecommendationServiceConfiguration, v38);
  *(_QWORD *)&v76[0] = v56;
  BYTE8(v76[0]) = v57;
  BYTE9(v76[0]) = v58;
  v80 = 9;
  v39 = sub_60EA0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v76, &v80, v3, &type metadata for Configuration.MediaTypeConfiguration, v39);
  v75 = v3;
  *(_QWORD *)&v76[0] = v53;
  BYTE8(v76[0]) = v54;
  BYTE9(v76[0]) = v55;
  v80 = 10;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v76, &v80, v3, &type metadata for Configuration.MediaTypeConfiguration, v39);
  *(_QWORD *)&v76[0] = v47;
  *((_QWORD *)&v76[0] + 1) = v17;
  *(_QWORD *)&v76[1] = v48;
  *(_OWORD *)((char *)&v76[1] + 8) = v52;
  BYTE8(v76[2]) = v49;
  v76[3] = v51;
  *(_QWORD *)&v76[4] = v20;
  *((_QWORD *)&v76[4] + 1) = v50;
  v80 = 11;
  v40 = sub_60EE4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v76, &v80, v75, &type metadata for Configuration.BooksClusteringServiceConfiguration, v40);
  LOBYTE(v76[0]) = BYTE4(v45);
  *((_QWORD *)&v76[0] + 1) = v21;
  *(_QWORD *)&v76[1] = v46;
  v80 = 12;
  v41 = sub_60F28();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v76, &v80, v75, &type metadata for Configuration.PersonalizationMetadataServiceConfiguration, v41);
  memcpy(v76, v78, sizeof(v76));
  v80 = 13;
  v42 = sub_60F6C();
  v43 = v75;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v76, &v80, v75, &type metadata for TabiConfiguration, v42);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v26, v43);
}

uint64_t sub_5FE38@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  return Configuration.init(from:)(a1, a2);
}

uint64_t sub_5FE4C(_QWORD *a1)
{
  return Configuration.encode(to:)(a1);
}

unint64_t sub_5FE60(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _BYTE *i;
  uint64_t v5;
  char v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_5EDC(&qword_1F1D30);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (i = (_BYTE *)(a1 + 40); ; i += 16)
    {
      v5 = *((_QWORD *)i - 1);
      v6 = *i;
      result = sub_39228(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      *(_BYTE *)(v3[7] + result) = v6;
      v9 = v3[2];
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (v10)
        goto LABEL_10;
      v3[2] = v11;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_5FF34(_QWORD *a1)
{
  return sub_658F8(a1, &qword_1F1D28);
}

unint64_t sub_5FF40(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_5EDC(&qword_1F1DE0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v5 = *(i - 1);
      v6 = *i;
      result = sub_39228(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v9 = 8 * result;
      *(_QWORD *)(v3[6] + v9) = v5;
      *(_QWORD *)(v3[7] + v9) = v6;
      v10 = v3[2];
      v11 = __OFADD__(v10, 1);
      v12 = v10 + 1;
      if (v11)
        goto LABEL_10;
      v3[2] = v12;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_60014()
{
  unint64_t result;

  result = qword_1F1860;
  if (!qword_1F1860)
  {
    result = swift_getWitnessTable(&unk_18F69C, &type metadata for Configuration.MediaTypesRecommendationServiceConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1860);
  }
  return result;
}

uint64_t sub_60058(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_5F68(&qword_1F1868);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_600B8()
{
  unint64_t result;

  result = qword_1F1890;
  if (!qword_1F1890)
  {
    result = swift_getWitnessTable(&unk_18F64C, &type metadata for Configuration.BooksClusteringServiceConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1890);
  }
  return result;
}

unint64_t sub_600FC()
{
  unint64_t result;

  result = qword_1F1898;
  if (!qword_1F1898)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.BooksClusteringServiceLegacyCollectionConfiguration, &type metadata for Configuration.BooksClusteringServiceLegacyCollectionConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F1898);
  }
  return result;
}

unint64_t sub_60140()
{
  unint64_t result;

  result = qword_1F18B0;
  if (!qword_1F18B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CollectionRecommendationType, &type metadata for CollectionRecommendationType);
    atomic_store(result, (unint64_t *)&qword_1F18B0);
  }
  return result;
}

uint64_t sub_60184(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_5F68(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_601F0()
{
  unint64_t result;

  result = qword_1F18D0;
  if (!qword_1F18D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.BooksClusteringServiceLegacyCollectionConfiguration, &type metadata for Configuration.BooksClusteringServiceLegacyCollectionConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F18D0);
  }
  return result;
}

uint64_t sub_60234(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_5F68(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_602A0()
{
  unint64_t result;

  result = qword_1F18E0;
  if (!qword_1F18E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CollectionRecommendationType, &type metadata for CollectionRecommendationType);
    atomic_store(result, (unint64_t *)&qword_1F18E0);
  }
  return result;
}

unint64_t sub_602E4()
{
  unint64_t result;

  result = qword_1F18F8;
  if (!qword_1F18F8)
  {
    result = swift_getWitnessTable(&unk_18F5FC, &type metadata for Configuration.PersonalizationMetadataServiceConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F18F8);
  }
  return result;
}

unint64_t sub_60328()
{
  unint64_t result;

  result = qword_1F1910;
  if (!qword_1F1910)
  {
    result = swift_getWitnessTable(&unk_18F5AC, &type metadata for Configuration.BooksClusteringServiceLegacyCollectionConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1910);
  }
  return result;
}

unint64_t sub_6036C()
{
  unint64_t result;

  result = qword_1F1928;
  if (!qword_1F1928)
  {
    result = swift_getWitnessTable(&unk_18F55C, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.ReadingHistoryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1928);
  }
  return result;
}

unint64_t sub_603B0()
{
  unint64_t result;

  result = qword_1F1940;
  if (!qword_1F1940)
  {
    result = swift_getWitnessTable(&unk_18F50C, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.DeclinedConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1940);
  }
  return result;
}

unint64_t sub_603F4()
{
  unint64_t result;

  result = qword_1F1958;
  if (!qword_1F1958)
  {
    result = swift_getWitnessTable(&unk_18F4BC, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1958);
  }
  return result;
}

unint64_t sub_60438()
{
  unint64_t result;

  result = qword_1F1960;
  if (!qword_1F1960)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.ReadingHistoryConfiguration, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.ReadingHistoryConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F1960);
  }
  return result;
}

unint64_t sub_6047C()
{
  unint64_t result;

  result = qword_1F1968;
  if (!qword_1F1968)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.DeclinedConfiguration, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.DeclinedConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F1968);
  }
  return result;
}

unint64_t sub_604C0()
{
  unint64_t result;

  result = qword_1F1980;
  if (!qword_1F1980)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.RecommendationMethodology, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.RecommendationMethodology);
    atomic_store(result, (unint64_t *)&qword_1F1980);
  }
  return result;
}

unint64_t sub_60504()
{
  unint64_t result;

  result = qword_1F1990;
  if (!qword_1F1990)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.ReadingHistoryConfiguration, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.ReadingHistoryConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F1990);
  }
  return result;
}

unint64_t sub_60548()
{
  unint64_t result;

  result = qword_1F1998;
  if (!qword_1F1998)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.DeclinedConfiguration, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.DeclinedConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F1998);
  }
  return result;
}

unint64_t sub_6058C()
{
  unint64_t result;

  result = qword_1F19B0;
  if (!qword_1F19B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.RecommendationMethodology, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.RecommendationMethodology);
    atomic_store(result, (unint64_t *)&qword_1F19B0);
  }
  return result;
}

uint64_t sub_605D0(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 328));
  return a1;
}

uint64_t sub_605F8(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 328);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

unint64_t sub_60610()
{
  unint64_t result;

  result = qword_1F19C8;
  if (!qword_1F19C8)
  {
    result = swift_getWitnessTable(&unk_18F46C, &type metadata for Configuration.ScorersConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F19C8);
  }
  return result;
}

unint64_t sub_60654()
{
  unint64_t result;

  result = qword_1F19D0;
  if (!qword_1F19D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F19D0);
  }
  return result;
}

unint64_t sub_60698()
{
  unint64_t result;

  result = qword_1F19E0;
  if (!qword_1F19E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F19E0);
  }
  return result;
}

uint64_t sub_606DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v3 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 32);
  v31 = *(_QWORD *)(a1 + 56);
  v32 = *(_QWORD *)(a1 + 48);
  v29 = *(_QWORD *)(a1 + 72);
  v30 = *(_QWORD *)(a1 + 64);
  v27 = *(_QWORD *)(a1 + 88);
  v28 = *(_QWORD *)(a1 + 80);
  v25 = *(_QWORD *)(a1 + 104);
  v26 = *(_QWORD *)(a1 + 96);
  v17 = *(_OWORD *)(a1 + 128);
  v18 = *(_OWORD *)(a1 + 112);
  v15 = *(_OWORD *)(a1 + 160);
  v16 = *(_OWORD *)(a1 + 144);
  v13 = *(_OWORD *)(a1 + 192);
  v14 = *(_OWORD *)(a1 + 176);
  v12 = *(_OWORD *)(a1 + 208);
  v5 = *(_QWORD *)(a1 + 224);
  v4 = *(_QWORD *)(a1 + 232);
  v6 = *(_QWORD *)(a1 + 240);
  v7 = *(_QWORD *)(a1 + 248);
  v8 = *(_QWORD *)(a1 + 256);
  v9 = *(_QWORD *)(a1 + 264);
  v10 = *(_QWORD *)(a1 + 272);
  v23 = *(_QWORD *)(a1 + 288);
  v24 = *(_QWORD *)(a1 + 280);
  v21 = *(_QWORD *)(a1 + 304);
  v22 = *(_QWORD *)(a1 + 296);
  v19 = *(_QWORD *)(a1 + 320);
  v20 = *(_QWORD *)(a1 + 312);
  v40 = *(_QWORD *)(a1 + 368);
  v41 = *(_QWORD *)(a1 + 360);
  v38 = *(_QWORD *)(a1 + 384);
  v39 = *(_QWORD *)(a1 + 376);
  v36 = *(_QWORD *)(a1 + 400);
  v37 = *(_QWORD *)(a1 + 392);
  v35 = *(_QWORD *)(a1 + 408);
  v33 = *(_QWORD *)(a1 + 352);
  v34 = *(_QWORD *)(a1 + 416);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v2);
  sub_608A0(v32, v31, v30, v29, v28, v27, v26, v25, v18, *((uint64_t *)&v18 + 1), v17, *((uint64_t *)&v17 + 1), v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13,
    *((uint64_t *)&v13 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v5);
  sub_608D8(v4, v6, v7, v8, v9, v10);
  sub_60914(v24, v23, v22, v21, v20, v19);
  swift_bridgeObjectRetain(v33);
  sub_60944(v41, v40, v39, v38, v37, v36, v35, v34);
  return a1;
}

uint64_t sub_608A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t result;

  result = a22;
  if (a22)
  {
    swift_bridgeObjectRetain(a22);
    return swift_bridgeObjectRetain(a23);
  }
  return result;
}

uint64_t sub_608D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a6);
  }
  return result;
}

uint64_t sub_60914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a6);
  }
  return result;
}

uint64_t sub_60944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    return swift_bridgeObjectRetain(a8);
  }
  return result;
}

double sub_60980(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 176) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

unint64_t sub_609A4()
{
  unint64_t result;

  result = qword_1F1A08;
  if (!qword_1F1A08)
  {
    result = swift_getWitnessTable(&unk_18F41C, &type metadata for Configuration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1A08);
  }
  return result;
}

unint64_t sub_609E8()
{
  unint64_t result;

  result = qword_1F1A10;
  if (!qword_1F1A10)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.GenreRecommendationConfiguration, &type metadata for Configuration.GenreRecommendationConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F1A10);
  }
  return result;
}

unint64_t sub_60A2C()
{
  unint64_t result;

  result = qword_1F1A18;
  if (!qword_1F1A18)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.SeedBasedRecommendationConfiguration, &type metadata for Configuration.SeedBasedRecommendationConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F1A18);
  }
  return result;
}

unint64_t sub_60A70()
{
  unint64_t result;

  result = qword_1F1A20;
  if (!qword_1F1A20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.CollectionsConfiguration, &type metadata for Configuration.CollectionsConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F1A20);
  }
  return result;
}

unint64_t sub_60AB4()
{
  unint64_t result;

  result = qword_1F1A28;
  if (!qword_1F1A28)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.ScorersConfiguration, &type metadata for Configuration.ScorersConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F1A28);
  }
  return result;
}

uint64_t sub_60AF8(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 328));
  return a1;
}

unint64_t sub_60B20()
{
  unint64_t result;

  result = qword_1F1A30;
  if (!qword_1F1A30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.MediaTypeMethod, &type metadata for Configuration.MediaTypeMethod);
    atomic_store(result, (unint64_t *)&qword_1F1A30);
  }
  return result;
}

unint64_t sub_60B64()
{
  unint64_t result;

  result = qword_1F1A38;
  if (!qword_1F1A38)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.MediaTypesRecommendationServiceConfiguration, &type metadata for Configuration.MediaTypesRecommendationServiceConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F1A38);
  }
  return result;
}

unint64_t sub_60BA8()
{
  unint64_t result;

  result = qword_1F1A40;
  if (!qword_1F1A40)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.BooksClusteringServiceConfiguration, &type metadata for Configuration.BooksClusteringServiceConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F1A40);
  }
  return result;
}

unint64_t sub_60BEC()
{
  unint64_t result;

  result = qword_1F1A48;
  if (!qword_1F1A48)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.MediaTypeConfiguration, &type metadata for Configuration.MediaTypeConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F1A48);
  }
  return result;
}

uint64_t sub_60C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRelease(a7);
    return swift_bridgeObjectRelease(a8);
  }
  return result;
}

unint64_t sub_60C80()
{
  unint64_t result;

  result = qword_1F1A50;
  if (!qword_1F1A50)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.PersonalizationMetadataServiceConfiguration, &type metadata for Configuration.PersonalizationMetadataServiceConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F1A50);
  }
  return result;
}

unint64_t sub_60CC4()
{
  unint64_t result;

  result = qword_1F1A58;
  if (!qword_1F1A58)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TabiConfiguration, &type metadata for TabiConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F1A58);
  }
  return result;
}

unint64_t sub_60D08()
{
  unint64_t result;

  result = qword_1F1A68;
  if (!qword_1F1A68)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.GenreRecommendationConfiguration, &type metadata for Configuration.GenreRecommendationConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F1A68);
  }
  return result;
}

unint64_t sub_60D4C()
{
  unint64_t result;

  result = qword_1F1A70;
  if (!qword_1F1A70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.SeedBasedRecommendationConfiguration, &type metadata for Configuration.SeedBasedRecommendationConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F1A70);
  }
  return result;
}

unint64_t sub_60D90()
{
  unint64_t result;

  result = qword_1F1A78;
  if (!qword_1F1A78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.CollectionsConfiguration, &type metadata for Configuration.CollectionsConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F1A78);
  }
  return result;
}

unint64_t sub_60DD4()
{
  unint64_t result;

  result = qword_1F1A80;
  if (!qword_1F1A80)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.ScorersConfiguration, &type metadata for Configuration.ScorersConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F1A80);
  }
  return result;
}

unint64_t sub_60E18()
{
  unint64_t result;

  result = qword_1F1A88;
  if (!qword_1F1A88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.MediaTypeMethod, &type metadata for Configuration.MediaTypeMethod);
    atomic_store(result, (unint64_t *)&qword_1F1A88);
  }
  return result;
}

unint64_t sub_60E5C()
{
  unint64_t result;

  result = qword_1F1A90;
  if (!qword_1F1A90)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.MediaTypesRecommendationServiceConfiguration, &type metadata for Configuration.MediaTypesRecommendationServiceConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F1A90);
  }
  return result;
}

unint64_t sub_60EA0()
{
  unint64_t result;

  result = qword_1F1A98;
  if (!qword_1F1A98)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.MediaTypeConfiguration, &type metadata for Configuration.MediaTypeConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F1A98);
  }
  return result;
}

unint64_t sub_60EE4()
{
  unint64_t result;

  result = qword_1F1AA0;
  if (!qword_1F1AA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.BooksClusteringServiceConfiguration, &type metadata for Configuration.BooksClusteringServiceConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F1AA0);
  }
  return result;
}

unint64_t sub_60F28()
{
  unint64_t result;

  result = qword_1F1AA8;
  if (!qword_1F1AA8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.PersonalizationMetadataServiceConfiguration, &type metadata for Configuration.PersonalizationMetadataServiceConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F1AA8);
  }
  return result;
}

unint64_t sub_60F6C()
{
  unint64_t result;

  result = qword_1F1AB0;
  if (!qword_1F1AB0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TabiConfiguration, &type metadata for TabiConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F1AB0);
  }
  return result;
}

unint64_t sub_60FB4()
{
  unint64_t result;

  result = qword_1F1AB8;
  if (!qword_1F1AB8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.GenreRecommendationConfiguration.Source, &type metadata for Configuration.GenreRecommendationConfiguration.Source);
    atomic_store(result, (unint64_t *)&qword_1F1AB8);
  }
  return result;
}

unint64_t sub_60FFC()
{
  unint64_t result;

  result = qword_1F1AC0;
  if (!qword_1F1AC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.GenreRecommendationConfiguration.GenreDepth, &type metadata for Configuration.GenreRecommendationConfiguration.GenreDepth);
    atomic_store(result, (unint64_t *)&qword_1F1AC0);
  }
  return result;
}

unint64_t sub_61044()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F1AC8;
  if (!qword_1F1AC8)
  {
    v1 = sub_5F68(&qword_1F1AD0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1F1AC8);
  }
  return result;
}

unint64_t sub_61094()
{
  unint64_t result;

  result = qword_1F1AD8;
  if (!qword_1F1AD8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.GenreRecommendationConfiguration.GenreDepth, &type metadata for Configuration.GenreRecommendationConfiguration.GenreDepth);
    atomic_store(result, (unint64_t *)&qword_1F1AD8);
  }
  return result;
}

unint64_t sub_610DC()
{
  unint64_t result;

  result = qword_1F1AE0;
  if (!qword_1F1AE0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.SeedBasedRecommendationConfiguration.Source, &type metadata for Configuration.SeedBasedRecommendationConfiguration.Source);
    atomic_store(result, (unint64_t *)&qword_1F1AE0);
  }
  return result;
}

unint64_t sub_61124()
{
  unint64_t result;

  result = qword_1F1AE8;
  if (!qword_1F1AE8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.CollectionsConfiguration.Source, &type metadata for Configuration.CollectionsConfiguration.Source);
    atomic_store(result, (unint64_t *)&qword_1F1AE8);
  }
  return result;
}

unint64_t sub_6116C()
{
  unint64_t result;

  result = qword_1F1AF0;
  if (!qword_1F1AF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.RecommendationMethodology, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.RecommendationMethodology);
    atomic_store(result, (unint64_t *)&qword_1F1AF0);
  }
  return result;
}

unint64_t sub_611B4()
{
  unint64_t result;

  result = qword_1F1AF8;
  if (!qword_1F1AF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.ScorersConfiguration.Scorer, &type metadata for Configuration.ScorersConfiguration.Scorer);
    atomic_store(result, (unint64_t *)&qword_1F1AF8);
  }
  return result;
}

unint64_t sub_611FC()
{
  unint64_t result;

  result = qword_1F1B00;
  if (!qword_1F1B00)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.MediaTypeMethod, &type metadata for Configuration.MediaTypeMethod);
    atomic_store(result, (unint64_t *)&qword_1F1B00);
  }
  return result;
}

uint64_t destroy for Configuration(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[52]);
  swift_bridgeObjectRelease(a1[57]);
  swift_bridgeObjectRelease(a1[58]);
  swift_bridgeObjectRelease(a1[59]);
  swift_bridgeObjectRelease(a1[64]);
  swift_bridgeObjectRelease(a1[68]);
  swift_bridgeObjectRelease(a1[69]);
  swift_bridgeObjectRelease(a1[71]);
  swift_bridgeObjectRelease(a1[72]);
  swift_bridgeObjectRelease(a1[75]);
  swift_bridgeObjectRelease(a1[77]);
  swift_bridgeObjectRelease(a1[83]);
  swift_bridgeObjectRelease(a1[85]);
  swift_bridgeObjectRelease(a1[86]);
  v2 = a1[109];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(a1[110]);
  }
  v3 = a1[112];
  if (v3)
  {
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(a1[114]);
    swift_bridgeObjectRelease(a1[116]);
  }
  v4 = a1[120];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[122]);
  }
  swift_bridgeObjectRelease(a1[126]);
  result = a1[130];
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a1[132]);
    return swift_bridgeObjectRelease(a1[134]);
  }
  return result;
}

uint64_t initializeWithCopy for Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_WORD *)(a1 + 35) = *(_WORD *)(a2 + 35);
  *(_DWORD *)(a1 + 37) = *(_DWORD *)(a2 + 37);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  v4 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v4;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  v5 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v5;
  v6 = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 320) = v6;
  v7 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v7;
  v8 = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = v8;
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  v10 = *(_QWORD *)(a2 + 416);
  v9 = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 416) = v10;
  *(_QWORD *)(a1 + 424) = v9;
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
  *(_BYTE *)(a1 + 449) = *(_BYTE *)(a2 + 449);
  *(_BYTE *)(a1 + 450) = *(_BYTE *)(a2 + 450);
  v11 = *(_QWORD *)(a2 + 456);
  v44 = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 456) = v11;
  *(_QWORD *)(a1 + 464) = v44;
  v45 = *(_QWORD *)(a2 + 472);
  v46 = v10;
  *(_QWORD *)(a1 + 472) = v45;
  *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 480);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
  v12 = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a1 + 512) = v12;
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  v13 = *(_QWORD *)(a2 + 544);
  *(_QWORD *)(a1 + 544) = v13;
  v14 = *(_QWORD *)(a2 + 552);
  *(_QWORD *)(a1 + 552) = v14;
  *(_BYTE *)(a1 + 560) = *(_BYTE *)(a2 + 560);
  v42 = *(_QWORD *)(a2 + 568);
  *(_QWORD *)(a1 + 568) = v42;
  v43 = *(_QWORD *)(a2 + 576);
  *(_QWORD *)(a1 + 576) = v43;
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  v41 = *(_QWORD *)(a2 + 600);
  *(_QWORD *)(a1 + 600) = v41;
  *(_BYTE *)(a1 + 608) = *(_BYTE *)(a2 + 608);
  *(_BYTE *)(a1 + 609) = *(_BYTE *)(a2 + 609);
  v15 = *(_QWORD *)(a2 + 616);
  *(_QWORD *)(a1 + 616) = v15;
  *(_BYTE *)(a1 + 624) = *(_BYTE *)(a2 + 624);
  *(_BYTE *)(a1 + 625) = *(_BYTE *)(a2 + 625);
  v16 = *(_OWORD *)(a2 + 632);
  *(_QWORD *)(a1 + 648) = *(_QWORD *)(a2 + 648);
  *(_OWORD *)(a1 + 632) = v16;
  *(_QWORD *)(a1 + 656) = *(_QWORD *)(a2 + 656);
  v17 = *(_QWORD *)(a2 + 664);
  *(_QWORD *)(a1 + 664) = v17;
  *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 672);
  v18 = *(_QWORD *)(a2 + 680);
  *(_QWORD *)(a1 + 680) = v18;
  v19 = *(_QWORD *)(a2 + 688);
  *(_QWORD *)(a1 + 688) = v19;
  *(_QWORD *)(a1 + 696) = *(_QWORD *)(a2 + 696);
  v40 = *(_QWORD *)(a2 + 872);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  if (v40)
  {
    *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 704);
    *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 720);
    *(_OWORD *)(a1 + 808) = *(_OWORD *)(a2 + 808);
    *(_OWORD *)(a1 + 824) = *(_OWORD *)(a2 + 824);
    *(_OWORD *)(a1 + 840) = *(_OWORD *)(a2 + 840);
    *(_OWORD *)(a1 + 856) = *(_OWORD *)(a2 + 856);
    *(_OWORD *)(a1 + 744) = *(_OWORD *)(a2 + 744);
    *(_OWORD *)(a1 + 760) = *(_OWORD *)(a2 + 760);
    *(_OWORD *)(a1 + 776) = *(_OWORD *)(a2 + 776);
    *(_OWORD *)(a1 + 792) = *(_OWORD *)(a2 + 792);
    *(_OWORD *)(a1 + 728) = *(_OWORD *)(a2 + 728);
    *(_QWORD *)(a1 + 872) = v40;
    v20 = *(_QWORD *)(a2 + 880);
    *(_QWORD *)(a1 + 880) = v20;
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v20);
    v21 = *(_QWORD *)(a2 + 896);
    if (v21)
      goto LABEL_3;
LABEL_6:
    v31 = *(_OWORD *)(a2 + 904);
    *(_OWORD *)(a1 + 888) = *(_OWORD *)(a2 + 888);
    *(_OWORD *)(a1 + 904) = v31;
    *(_OWORD *)(a1 + 920) = *(_OWORD *)(a2 + 920);
    v24 = *(_QWORD *)(a2 + 960);
    if (v24)
      goto LABEL_4;
    goto LABEL_7;
  }
  v26 = *(_OWORD *)(a2 + 848);
  *(_OWORD *)(a1 + 832) = *(_OWORD *)(a2 + 832);
  *(_OWORD *)(a1 + 848) = v26;
  *(_OWORD *)(a1 + 864) = *(_OWORD *)(a2 + 864);
  *(_QWORD *)(a1 + 880) = *(_QWORD *)(a2 + 880);
  v27 = *(_OWORD *)(a2 + 784);
  *(_OWORD *)(a1 + 768) = *(_OWORD *)(a2 + 768);
  *(_OWORD *)(a1 + 784) = v27;
  v28 = *(_OWORD *)(a2 + 816);
  *(_OWORD *)(a1 + 800) = *(_OWORD *)(a2 + 800);
  *(_OWORD *)(a1 + 816) = v28;
  v29 = *(_OWORD *)(a2 + 720);
  *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 704);
  *(_OWORD *)(a1 + 720) = v29;
  v30 = *(_OWORD *)(a2 + 752);
  *(_OWORD *)(a1 + 736) = *(_OWORD *)(a2 + 736);
  *(_OWORD *)(a1 + 752) = v30;
  v21 = *(_QWORD *)(a2 + 896);
  if (!v21)
    goto LABEL_6;
LABEL_3:
  *(_QWORD *)(a1 + 888) = *(_QWORD *)(a2 + 888);
  *(_QWORD *)(a1 + 896) = v21;
  *(_QWORD *)(a1 + 904) = *(_QWORD *)(a2 + 904);
  v22 = *(_QWORD *)(a2 + 912);
  *(_QWORD *)(a1 + 912) = v22;
  *(_QWORD *)(a1 + 920) = *(_QWORD *)(a2 + 920);
  v23 = *(_QWORD *)(a2 + 928);
  *(_QWORD *)(a1 + 928) = v23;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  v24 = *(_QWORD *)(a2 + 960);
  if (v24)
  {
LABEL_4:
    *(_QWORD *)(a1 + 936) = *(_QWORD *)(a2 + 936);
    *(_OWORD *)(a1 + 944) = *(_OWORD *)(a2 + 944);
    *(_QWORD *)(a1 + 960) = v24;
    *(_QWORD *)(a1 + 968) = *(_QWORD *)(a2 + 968);
    v25 = *(_QWORD *)(a2 + 976);
    *(_QWORD *)(a1 + 976) = v25;
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    goto LABEL_8;
  }
LABEL_7:
  v32 = *(_OWORD *)(a2 + 952);
  *(_OWORD *)(a1 + 936) = *(_OWORD *)(a2 + 936);
  *(_OWORD *)(a1 + 952) = v32;
  *(_OWORD *)(a1 + 968) = *(_OWORD *)(a2 + 968);
LABEL_8:
  *(_QWORD *)(a1 + 984) = *(_QWORD *)(a2 + 984);
  *(_OWORD *)(a1 + 992) = *(_OWORD *)(a2 + 992);
  v33 = *(_QWORD *)(a2 + 1008);
  *(_QWORD *)(a1 + 1008) = v33;
  v34 = *(_QWORD *)(a2 + 1040);
  swift_bridgeObjectRetain(v33);
  if (v34)
  {
    *(_QWORD *)(a1 + 1016) = *(_QWORD *)(a2 + 1016);
    *(_OWORD *)(a1 + 1024) = *(_OWORD *)(a2 + 1024);
    *(_QWORD *)(a1 + 1040) = v34;
    *(_QWORD *)(a1 + 1048) = *(_QWORD *)(a2 + 1048);
    v35 = *(_QWORD *)(a2 + 1056);
    *(_QWORD *)(a1 + 1056) = v35;
    *(_QWORD *)(a1 + 1064) = *(_QWORD *)(a2 + 1064);
    v36 = *(_QWORD *)(a2 + 1072);
    *(_QWORD *)(a1 + 1072) = v36;
    *(_QWORD *)(a1 + 1080) = *(_QWORD *)(a2 + 1080);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v36);
  }
  else
  {
    v37 = *(_OWORD *)(a2 + 1064);
    *(_OWORD *)(a1 + 1048) = *(_OWORD *)(a2 + 1048);
    *(_OWORD *)(a1 + 1064) = v37;
    *(_QWORD *)(a1 + 1080) = *(_QWORD *)(a2 + 1080);
    v38 = *(_OWORD *)(a2 + 1032);
    *(_OWORD *)(a1 + 1016) = *(_OWORD *)(a2 + 1016);
    *(_OWORD *)(a1 + 1032) = v38;
  }
  return a1;
}

uint64_t assignWithCopy for Configuration(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  __int128 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _OWORD *v68;
  _OWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _OWORD *v84;
  _OWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  _OWORD *v99;
  _OWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;

  v4 = (_BYTE *)(a2 + 448);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 37);
  *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 38);
  *(_BYTE *)(a1 + 39) = *(_BYTE *)(a2 + 39);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v5 = *(_QWORD *)(a2 + 80);
  v6 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  v7 = *(_QWORD *)(a2 + 416);
  v8 = *(_QWORD *)(a1 + 416);
  *(_QWORD *)(a1 + 416) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
  *(_BYTE *)(a1 + 449) = v4[1];
  *(_BYTE *)(a1 + 450) = v4[2];
  v9 = *(_QWORD *)(a2 + 456);
  v10 = *(_QWORD *)(a1 + 456);
  *(_QWORD *)(a1 + 456) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a2 + 464);
  v12 = *(_QWORD *)(a1 + 464);
  *(_QWORD *)(a1 + 464) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a2 + 472);
  v14 = *(_QWORD *)(a1 + 472);
  *(_QWORD *)(a1 + 472) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 480);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  v15 = *(_QWORD *)(a2 + 512);
  v16 = *(_QWORD *)(a1 + 512);
  *(_QWORD *)(a1 + 512) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  v17 = *(_QWORD *)(a2 + 544);
  v18 = *(_QWORD *)(a1 + 544);
  *(_QWORD *)(a1 + 544) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  v19 = *(_QWORD *)(a2 + 552);
  v20 = *(_QWORD *)(a1 + 552);
  *(_QWORD *)(a1 + 552) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  *(_BYTE *)(a1 + 560) = v4[112];
  v21 = *(_QWORD *)(a2 + 568);
  v22 = *(_QWORD *)(a1 + 568);
  *(_QWORD *)(a1 + 568) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v23 = *(_QWORD *)(a2 + 576);
  v24 = *(_QWORD *)(a1 + 576);
  *(_QWORD *)(a1 + 576) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  v25 = *(_QWORD *)(a2 + 600);
  v26 = *(_QWORD *)(a1 + 600);
  *(_QWORD *)(a1 + 600) = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  *(_BYTE *)(a1 + 608) = v4[160];
  *(_BYTE *)(a1 + 609) = v4[161];
  v27 = *(_QWORD *)(a2 + 616);
  v28 = *(_QWORD *)(a1 + 616);
  *(_QWORD *)(a1 + 616) = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  *(_BYTE *)(a1 + 624) = v4[176];
  *(_BYTE *)(a1 + 625) = v4[177];
  *(_BYTE *)(a1 + 632) = v4[184];
  *(_QWORD *)(a1 + 640) = *(_QWORD *)(a2 + 640);
  *(_QWORD *)(a1 + 648) = *(_QWORD *)(a2 + 648);
  *(_QWORD *)(a1 + 656) = *(_QWORD *)(a2 + 656);
  v29 = *(_QWORD *)(a2 + 664);
  v30 = *(_QWORD *)(a1 + 664);
  *(_QWORD *)(a1 + 664) = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30);
  *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 672);
  v31 = *(_QWORD *)(a2 + 680);
  v32 = *(_QWORD *)(a1 + 680);
  *(_QWORD *)(a1 + 680) = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  v33 = *(_QWORD *)(a2 + 688);
  v34 = *(_QWORD *)(a1 + 688);
  *(_QWORD *)(a1 + 688) = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34);
  *(_QWORD *)(a1 + 696) = *(_QWORD *)(a2 + 696);
  v35 = (_OWORD *)(a1 + 704);
  v36 = (__int128 *)(a2 + 704);
  v37 = *(_QWORD *)(a1 + 872);
  v38 = *(_QWORD *)(a2 + 872);
  if (v37)
  {
    if (v38)
    {
      *(_QWORD *)(a1 + 704) = *(_QWORD *)(a2 + 704);
      *(_QWORD *)(a1 + 712) = *(_QWORD *)(a2 + 712);
      *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 720);
      *(_QWORD *)(a1 + 728) = *(_QWORD *)(a2 + 728);
      *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
      *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 744);
      *(_QWORD *)(a1 + 752) = *(_QWORD *)(a2 + 752);
      *(_QWORD *)(a1 + 760) = *(_QWORD *)(a2 + 760);
      *(_QWORD *)(a1 + 768) = *(_QWORD *)(a2 + 768);
      *(_QWORD *)(a1 + 776) = *(_QWORD *)(a2 + 776);
      *(_QWORD *)(a1 + 784) = *(_QWORD *)(a2 + 784);
      *(_QWORD *)(a1 + 792) = *(_QWORD *)(a2 + 792);
      *(_QWORD *)(a1 + 800) = *(_QWORD *)(a2 + 800);
      *(_QWORD *)(a1 + 808) = *(_QWORD *)(a2 + 808);
      *(_QWORD *)(a1 + 816) = *(_QWORD *)(a2 + 816);
      *(_QWORD *)(a1 + 824) = *(_QWORD *)(a2 + 824);
      *(_QWORD *)(a1 + 832) = *(_QWORD *)(a2 + 832);
      *(_QWORD *)(a1 + 840) = *(_QWORD *)(a2 + 840);
      *(_QWORD *)(a1 + 848) = *(_QWORD *)(a2 + 848);
      *(_QWORD *)(a1 + 856) = *(_QWORD *)(a2 + 856);
      *(_QWORD *)(a1 + 864) = *(_QWORD *)(a2 + 864);
      v39 = *(_QWORD *)(a2 + 872);
      *(_QWORD *)(a1 + 872) = v39;
      swift_bridgeObjectRetain(v39);
      swift_bridgeObjectRelease(v37);
      v40 = *(_QWORD *)(a2 + 880);
      v41 = *(_QWORD *)(a1 + 880);
      *(_QWORD *)(a1 + 880) = v40;
      swift_bridgeObjectRetain(v40);
      swift_bridgeObjectRelease(v41);
    }
    else
    {
      sub_621C0(a1 + 704);
      v50 = *(_OWORD *)(a2 + 752);
      v52 = *v36;
      v51 = *(_OWORD *)(a2 + 720);
      *(_OWORD *)(a1 + 736) = *(_OWORD *)(a2 + 736);
      *(_OWORD *)(a1 + 752) = v50;
      *v35 = v52;
      *(_OWORD *)(a1 + 720) = v51;
      v53 = *(_OWORD *)(a2 + 816);
      v55 = *(_OWORD *)(a2 + 768);
      v54 = *(_OWORD *)(a2 + 784);
      *(_OWORD *)(a1 + 800) = *(_OWORD *)(a2 + 800);
      *(_OWORD *)(a1 + 816) = v53;
      *(_OWORD *)(a1 + 768) = v55;
      *(_OWORD *)(a1 + 784) = v54;
      v57 = *(_OWORD *)(a2 + 848);
      v56 = *(_OWORD *)(a2 + 864);
      v58 = *(_OWORD *)(a2 + 832);
      *(_QWORD *)(a1 + 880) = *(_QWORD *)(a2 + 880);
      *(_OWORD *)(a1 + 848) = v57;
      *(_OWORD *)(a1 + 864) = v56;
      *(_OWORD *)(a1 + 832) = v58;
    }
  }
  else if (v38)
  {
    *(_QWORD *)(a1 + 704) = *(_QWORD *)(a2 + 704);
    *(_QWORD *)(a1 + 712) = *(_QWORD *)(a2 + 712);
    *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 720);
    *(_OWORD *)(a1 + 728) = *(_OWORD *)(a2 + 728);
    v42 = *(_OWORD *)(a2 + 744);
    v43 = *(_OWORD *)(a2 + 760);
    v44 = *(_OWORD *)(a2 + 776);
    *(_OWORD *)(a1 + 792) = *(_OWORD *)(a2 + 792);
    *(_OWORD *)(a1 + 776) = v44;
    *(_OWORD *)(a1 + 760) = v43;
    *(_OWORD *)(a1 + 744) = v42;
    v45 = *(_OWORD *)(a2 + 808);
    v46 = *(_OWORD *)(a2 + 824);
    v47 = *(_OWORD *)(a2 + 840);
    *(_OWORD *)(a1 + 856) = *(_OWORD *)(a2 + 856);
    *(_OWORD *)(a1 + 840) = v47;
    *(_OWORD *)(a1 + 824) = v46;
    *(_OWORD *)(a1 + 808) = v45;
    v48 = *(_QWORD *)(a2 + 872);
    *(_QWORD *)(a1 + 872) = v48;
    v49 = *(_QWORD *)(a2 + 880);
    *(_QWORD *)(a1 + 880) = v49;
    swift_bridgeObjectRetain(v48);
    swift_bridgeObjectRetain(v49);
  }
  else
  {
    v59 = *v36;
    v60 = *(_OWORD *)(a2 + 720);
    v61 = *(_OWORD *)(a2 + 752);
    *(_OWORD *)(a1 + 736) = *(_OWORD *)(a2 + 736);
    *(_OWORD *)(a1 + 752) = v61;
    *v35 = v59;
    *(_OWORD *)(a1 + 720) = v60;
    v62 = *(_OWORD *)(a2 + 768);
    v63 = *(_OWORD *)(a2 + 784);
    v64 = *(_OWORD *)(a2 + 816);
    *(_OWORD *)(a1 + 800) = *(_OWORD *)(a2 + 800);
    *(_OWORD *)(a1 + 816) = v64;
    *(_OWORD *)(a1 + 768) = v62;
    *(_OWORD *)(a1 + 784) = v63;
    v65 = *(_OWORD *)(a2 + 832);
    v66 = *(_OWORD *)(a2 + 848);
    v67 = *(_OWORD *)(a2 + 864);
    *(_QWORD *)(a1 + 880) = *(_QWORD *)(a2 + 880);
    *(_OWORD *)(a1 + 848) = v66;
    *(_OWORD *)(a1 + 864) = v67;
    *(_OWORD *)(a1 + 832) = v65;
  }
  v68 = (_OWORD *)(a1 + 888);
  v69 = (_OWORD *)(a2 + 888);
  v70 = *(_QWORD *)(a1 + 896);
  v71 = *(_QWORD *)(a2 + 896);
  if (v70)
  {
    if (v71)
    {
      *(_QWORD *)(a1 + 888) = *(_QWORD *)(a2 + 888);
      v72 = *(_QWORD *)(a2 + 896);
      *(_QWORD *)(a1 + 896) = v72;
      swift_bridgeObjectRetain(v72);
      swift_bridgeObjectRelease(v70);
      *(_QWORD *)(a1 + 904) = *(_QWORD *)(a2 + 904);
      v73 = *(_QWORD *)(a2 + 912);
      v74 = *(_QWORD *)(a1 + 912);
      *(_QWORD *)(a1 + 912) = v73;
      swift_bridgeObjectRetain(v73);
      swift_bridgeObjectRelease(v74);
      *(_QWORD *)(a1 + 920) = *(_QWORD *)(a2 + 920);
      v75 = *(_QWORD *)(a2 + 928);
      v76 = *(_QWORD *)(a1 + 928);
      *(_QWORD *)(a1 + 928) = v75;
      swift_bridgeObjectRetain(v75);
      swift_bridgeObjectRelease(v76);
    }
    else
    {
      sub_621F4((_QWORD *)(a1 + 888));
      v81 = *(_OWORD *)(a2 + 904);
      v80 = *(_OWORD *)(a2 + 920);
      *v68 = *v69;
      *(_OWORD *)(a1 + 904) = v81;
      *(_OWORD *)(a1 + 920) = v80;
    }
  }
  else if (v71)
  {
    *(_QWORD *)(a1 + 888) = *(_QWORD *)(a2 + 888);
    v77 = *(_QWORD *)(a2 + 896);
    *(_QWORD *)(a1 + 896) = v77;
    *(_QWORD *)(a1 + 904) = *(_QWORD *)(a2 + 904);
    v78 = *(_QWORD *)(a2 + 912);
    *(_QWORD *)(a1 + 912) = v78;
    *(_QWORD *)(a1 + 920) = *(_QWORD *)(a2 + 920);
    v79 = *(_QWORD *)(a2 + 928);
    *(_QWORD *)(a1 + 928) = v79;
    swift_bridgeObjectRetain(v77);
    swift_bridgeObjectRetain(v78);
    swift_bridgeObjectRetain(v79);
  }
  else
  {
    v82 = *v69;
    v83 = *(_OWORD *)(a2 + 920);
    *(_OWORD *)(a1 + 904) = *(_OWORD *)(a2 + 904);
    *(_OWORD *)(a1 + 920) = v83;
    *v68 = v82;
  }
  v84 = (_OWORD *)(a1 + 936);
  v85 = (_OWORD *)(a2 + 936);
  v86 = *(_QWORD *)(a1 + 960);
  v87 = *(_QWORD *)(a2 + 960);
  if (v86)
  {
    if (v87)
    {
      *(_QWORD *)(a1 + 936) = *(_QWORD *)(a2 + 936);
      *(_QWORD *)(a1 + 944) = *(_QWORD *)(a2 + 944);
      *(_QWORD *)(a1 + 952) = *(_QWORD *)(a2 + 952);
      v88 = *(_QWORD *)(a2 + 960);
      *(_QWORD *)(a1 + 960) = v88;
      swift_bridgeObjectRetain(v88);
      swift_bridgeObjectRelease(v86);
      *(_QWORD *)(a1 + 968) = *(_QWORD *)(a2 + 968);
      v89 = *(_QWORD *)(a2 + 976);
      v90 = *(_QWORD *)(a1 + 976);
      *(_QWORD *)(a1 + 976) = v89;
      swift_bridgeObjectRetain(v89);
      swift_bridgeObjectRelease(v90);
    }
    else
    {
      sub_62228(a1 + 936);
      v94 = *(_OWORD *)(a2 + 952);
      v93 = *(_OWORD *)(a2 + 968);
      *v84 = *v85;
      *(_OWORD *)(a1 + 952) = v94;
      *(_OWORD *)(a1 + 968) = v93;
    }
  }
  else if (v87)
  {
    *(_QWORD *)(a1 + 936) = *(_QWORD *)(a2 + 936);
    *(_QWORD *)(a1 + 944) = *(_QWORD *)(a2 + 944);
    *(_QWORD *)(a1 + 952) = *(_QWORD *)(a2 + 952);
    v91 = *(_QWORD *)(a2 + 960);
    *(_QWORD *)(a1 + 960) = v91;
    *(_QWORD *)(a1 + 968) = *(_QWORD *)(a2 + 968);
    v92 = *(_QWORD *)(a2 + 976);
    *(_QWORD *)(a1 + 976) = v92;
    swift_bridgeObjectRetain(v91);
    swift_bridgeObjectRetain(v92);
  }
  else
  {
    v95 = *v85;
    v96 = *(_OWORD *)(a2 + 968);
    *(_OWORD *)(a1 + 952) = *(_OWORD *)(a2 + 952);
    *(_OWORD *)(a1 + 968) = v96;
    *v84 = v95;
  }
  *(_QWORD *)(a1 + 984) = *(_QWORD *)(a2 + 984);
  *(_QWORD *)(a1 + 992) = *(_QWORD *)(a2 + 992);
  *(_QWORD *)(a1 + 1000) = *(_QWORD *)(a2 + 1000);
  v97 = *(_QWORD *)(a2 + 1008);
  v98 = *(_QWORD *)(a1 + 1008);
  *(_QWORD *)(a1 + 1008) = v97;
  swift_bridgeObjectRetain(v97);
  swift_bridgeObjectRelease(v98);
  v99 = (_OWORD *)(a1 + 1016);
  v100 = (_OWORD *)(a2 + 1016);
  v101 = *(_QWORD *)(a1 + 1040);
  v102 = *(_QWORD *)(a2 + 1040);
  if (v101)
  {
    if (v102)
    {
      *(_QWORD *)(a1 + 1016) = *(_QWORD *)(a2 + 1016);
      *(_QWORD *)(a1 + 1024) = *(_QWORD *)(a2 + 1024);
      *(_QWORD *)(a1 + 1032) = *(_QWORD *)(a2 + 1032);
      v103 = *(_QWORD *)(a2 + 1040);
      *(_QWORD *)(a1 + 1040) = v103;
      swift_bridgeObjectRetain(v103);
      swift_bridgeObjectRelease(v101);
      *(_QWORD *)(a1 + 1048) = *(_QWORD *)(a2 + 1048);
      v104 = *(_QWORD *)(a2 + 1056);
      v105 = *(_QWORD *)(a1 + 1056);
      *(_QWORD *)(a1 + 1056) = v104;
      swift_bridgeObjectRetain(v104);
      swift_bridgeObjectRelease(v105);
      *(_QWORD *)(a1 + 1064) = *(_QWORD *)(a2 + 1064);
      v106 = *(_QWORD *)(a2 + 1072);
      v107 = *(_QWORD *)(a1 + 1072);
      *(_QWORD *)(a1 + 1072) = v106;
      swift_bridgeObjectRetain(v106);
      swift_bridgeObjectRelease(v107);
      *(_QWORD *)(a1 + 1080) = *(_QWORD *)(a2 + 1080);
    }
    else
    {
      sub_6225C((_QWORD *)(a1 + 1016));
      *v99 = *v100;
      v112 = *(_OWORD *)(a2 + 1048);
      v111 = *(_OWORD *)(a2 + 1064);
      v113 = *(_OWORD *)(a2 + 1032);
      *(_QWORD *)(a1 + 1080) = *(_QWORD *)(a2 + 1080);
      *(_OWORD *)(a1 + 1048) = v112;
      *(_OWORD *)(a1 + 1064) = v111;
      *(_OWORD *)(a1 + 1032) = v113;
    }
  }
  else if (v102)
  {
    *(_QWORD *)(a1 + 1016) = *(_QWORD *)(a2 + 1016);
    *(_QWORD *)(a1 + 1024) = *(_QWORD *)(a2 + 1024);
    *(_QWORD *)(a1 + 1032) = *(_QWORD *)(a2 + 1032);
    v108 = *(_QWORD *)(a2 + 1040);
    *(_QWORD *)(a1 + 1040) = v108;
    *(_QWORD *)(a1 + 1048) = *(_QWORD *)(a2 + 1048);
    v109 = *(_QWORD *)(a2 + 1056);
    *(_QWORD *)(a1 + 1056) = v109;
    *(_QWORD *)(a1 + 1064) = *(_QWORD *)(a2 + 1064);
    v110 = *(_QWORD *)(a2 + 1072);
    *(_QWORD *)(a1 + 1072) = v110;
    *(_QWORD *)(a1 + 1080) = *(_QWORD *)(a2 + 1080);
    swift_bridgeObjectRetain(v108);
    swift_bridgeObjectRetain(v109);
    swift_bridgeObjectRetain(v110);
  }
  else
  {
    *v99 = *v100;
    v114 = *(_OWORD *)(a2 + 1032);
    v115 = *(_OWORD *)(a2 + 1048);
    v116 = *(_OWORD *)(a2 + 1064);
    *(_QWORD *)(a1 + 1080) = *(_QWORD *)(a2 + 1080);
    *(_OWORD *)(a1 + 1048) = v115;
    *(_OWORD *)(a1 + 1064) = v116;
    *(_OWORD *)(a1 + 1032) = v114;
  }
  return a1;
}

uint64_t sub_621C0(uint64_t a1)
{
  _s29EventAggregationConfigurationVwxx(a1);
  return a1;
}

_QWORD *sub_621F4(_QWORD *a1)
{
  _s32GenreRecommendationConfigurationVwxx(a1);
  return a1;
}

uint64_t sub_62228(uint64_t a1)
{
  _s21BookIdToMetadataEntryVwxx(a1);
  return a1;
}

_QWORD *sub_6225C(_QWORD *a1)
{
  _s35SeedBookRecommendationConfigurationVwxx(a1);
  return a1;
}

void *initializeWithTake for Configuration(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x440uLL);
}

uint64_t assignWithTake for Configuration(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;

  v4 = (_BYTE *)(a2 + 448);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  v5 = *(_QWORD *)(a2 + 80);
  v6 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v5;
  swift_bridgeObjectRelease(v6);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  v7 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v7;
  v8 = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 320) = v8;
  v9 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v9;
  v10 = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = v10;
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  v11 = *(_QWORD *)(a1 + 416);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
  *(_BYTE *)(a1 + 449) = v4[1];
  *(_BYTE *)(a1 + 450) = v4[2];
  v12 = *(_QWORD *)(a1 + 456);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a1 + 464);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a1 + 472);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  swift_bridgeObjectRelease(v14);
  *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 480);
  v15 = *(_QWORD *)(a2 + 496);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a1 + 496) = v15;
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  v16 = *(_QWORD *)(a1 + 512);
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  swift_bridgeObjectRelease(v16);
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  v17 = *(_QWORD *)(a1 + 544);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  swift_bridgeObjectRelease(v17);
  v18 = *(_QWORD *)(a1 + 552);
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
  swift_bridgeObjectRelease(v18);
  *(_BYTE *)(a1 + 560) = v4[112];
  v19 = *(_QWORD *)(a1 + 568);
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  swift_bridgeObjectRelease(v19);
  v20 = *(_QWORD *)(a1 + 576);
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
  swift_bridgeObjectRelease(v20);
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  v21 = *(_QWORD *)(a1 + 600);
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  swift_bridgeObjectRelease(v21);
  *(_BYTE *)(a1 + 608) = v4[160];
  *(_BYTE *)(a1 + 609) = v4[161];
  v22 = *(_QWORD *)(a1 + 616);
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  swift_bridgeObjectRelease(v22);
  *(_BYTE *)(a1 + 624) = v4[176];
  *(_BYTE *)(a1 + 625) = v4[177];
  *(_BYTE *)(a1 + 632) = v4[184];
  *(_QWORD *)(a1 + 640) = *(_QWORD *)(a2 + 640);
  *(_OWORD *)(a1 + 648) = *(_OWORD *)(a2 + 648);
  v23 = *(_QWORD *)(a1 + 664);
  *(_QWORD *)(a1 + 664) = *(_QWORD *)(a2 + 664);
  swift_bridgeObjectRelease(v23);
  *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 672);
  v24 = *(_QWORD *)(a1 + 680);
  *(_QWORD *)(a1 + 680) = *(_QWORD *)(a2 + 680);
  swift_bridgeObjectRelease(v24);
  v25 = *(_QWORD *)(a1 + 688);
  *(_QWORD *)(a1 + 688) = *(_QWORD *)(a2 + 688);
  swift_bridgeObjectRelease(v25);
  *(_QWORD *)(a1 + 696) = *(_QWORD *)(a2 + 696);
  v26 = *(_QWORD *)(a1 + 872);
  if (v26)
  {
    v27 = *(_QWORD *)(a2 + 872);
    if (v27)
    {
      *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 704);
      *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 720);
      *(_QWORD *)(a1 + 728) = *(_QWORD *)(a2 + 728);
      v28 = *(_OWORD *)(a2 + 752);
      *(_OWORD *)(a1 + 736) = *(_OWORD *)(a2 + 736);
      *(_OWORD *)(a1 + 752) = v28;
      v29 = *(_OWORD *)(a2 + 784);
      *(_OWORD *)(a1 + 768) = *(_OWORD *)(a2 + 768);
      *(_OWORD *)(a1 + 784) = v29;
      v30 = *(_OWORD *)(a2 + 816);
      *(_OWORD *)(a1 + 800) = *(_OWORD *)(a2 + 800);
      *(_OWORD *)(a1 + 816) = v30;
      v31 = *(_OWORD *)(a2 + 848);
      *(_OWORD *)(a1 + 832) = *(_OWORD *)(a2 + 832);
      *(_OWORD *)(a1 + 848) = v31;
      *(_QWORD *)(a1 + 864) = *(_QWORD *)(a2 + 864);
      *(_QWORD *)(a1 + 872) = v27;
      swift_bridgeObjectRelease(v26);
      v32 = *(_QWORD *)(a1 + 880);
      *(_QWORD *)(a1 + 880) = *(_QWORD *)(a2 + 880);
      swift_bridgeObjectRelease(v32);
      goto LABEL_6;
    }
    sub_621C0(a1 + 704);
  }
  v33 = *(_OWORD *)(a2 + 848);
  *(_OWORD *)(a1 + 832) = *(_OWORD *)(a2 + 832);
  *(_OWORD *)(a1 + 848) = v33;
  *(_OWORD *)(a1 + 864) = *(_OWORD *)(a2 + 864);
  *(_QWORD *)(a1 + 880) = *(_QWORD *)(a2 + 880);
  v34 = *(_OWORD *)(a2 + 784);
  *(_OWORD *)(a1 + 768) = *(_OWORD *)(a2 + 768);
  *(_OWORD *)(a1 + 784) = v34;
  v35 = *(_OWORD *)(a2 + 816);
  *(_OWORD *)(a1 + 800) = *(_OWORD *)(a2 + 800);
  *(_OWORD *)(a1 + 816) = v35;
  v36 = *(_OWORD *)(a2 + 720);
  *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 704);
  *(_OWORD *)(a1 + 720) = v36;
  v37 = *(_OWORD *)(a2 + 752);
  *(_OWORD *)(a1 + 736) = *(_OWORD *)(a2 + 736);
  *(_OWORD *)(a1 + 752) = v37;
LABEL_6:
  v38 = *(_QWORD *)(a1 + 896);
  if (v38)
  {
    v39 = *(_QWORD *)(a2 + 896);
    if (v39)
    {
      *(_QWORD *)(a1 + 888) = *(_QWORD *)(a2 + 888);
      *(_QWORD *)(a1 + 896) = v39;
      swift_bridgeObjectRelease(v38);
      *(_QWORD *)(a1 + 904) = *(_QWORD *)(a2 + 904);
      v40 = *(_QWORD *)(a1 + 912);
      *(_QWORD *)(a1 + 912) = *(_QWORD *)(a2 + 912);
      swift_bridgeObjectRelease(v40);
      *(_QWORD *)(a1 + 920) = *(_QWORD *)(a2 + 920);
      v41 = *(_QWORD *)(a1 + 928);
      *(_QWORD *)(a1 + 928) = *(_QWORD *)(a2 + 928);
      swift_bridgeObjectRelease(v41);
      goto LABEL_11;
    }
    sub_621F4((_QWORD *)(a1 + 888));
  }
  v42 = *(_OWORD *)(a2 + 904);
  *(_OWORD *)(a1 + 888) = *(_OWORD *)(a2 + 888);
  *(_OWORD *)(a1 + 904) = v42;
  *(_OWORD *)(a1 + 920) = *(_OWORD *)(a2 + 920);
LABEL_11:
  v43 = *(_QWORD *)(a1 + 960);
  if (v43)
  {
    v44 = *(_QWORD *)(a2 + 960);
    if (v44)
    {
      *(_QWORD *)(a1 + 936) = *(_QWORD *)(a2 + 936);
      *(_OWORD *)(a1 + 944) = *(_OWORD *)(a2 + 944);
      *(_QWORD *)(a1 + 960) = v44;
      swift_bridgeObjectRelease(v43);
      *(_QWORD *)(a1 + 968) = *(_QWORD *)(a2 + 968);
      v45 = *(_QWORD *)(a1 + 976);
      *(_QWORD *)(a1 + 976) = *(_QWORD *)(a2 + 976);
      swift_bridgeObjectRelease(v45);
      goto LABEL_16;
    }
    sub_62228(a1 + 936);
  }
  v46 = *(_OWORD *)(a2 + 952);
  *(_OWORD *)(a1 + 936) = *(_OWORD *)(a2 + 936);
  *(_OWORD *)(a1 + 952) = v46;
  *(_OWORD *)(a1 + 968) = *(_OWORD *)(a2 + 968);
LABEL_16:
  *(_QWORD *)(a1 + 984) = *(_QWORD *)(a2 + 984);
  *(_OWORD *)(a1 + 992) = *(_OWORD *)(a2 + 992);
  v47 = *(_QWORD *)(a1 + 1008);
  *(_QWORD *)(a1 + 1008) = *(_QWORD *)(a2 + 1008);
  swift_bridgeObjectRelease(v47);
  v48 = *(_QWORD *)(a1 + 1040);
  if (!v48)
  {
LABEL_20:
    v52 = *(_OWORD *)(a2 + 1064);
    *(_OWORD *)(a1 + 1048) = *(_OWORD *)(a2 + 1048);
    *(_OWORD *)(a1 + 1064) = v52;
    *(_QWORD *)(a1 + 1080) = *(_QWORD *)(a2 + 1080);
    v53 = *(_OWORD *)(a2 + 1032);
    *(_OWORD *)(a1 + 1016) = *(_OWORD *)(a2 + 1016);
    *(_OWORD *)(a1 + 1032) = v53;
    return a1;
  }
  v49 = *(_QWORD *)(a2 + 1040);
  if (!v49)
  {
    sub_6225C((_QWORD *)(a1 + 1016));
    goto LABEL_20;
  }
  *(_QWORD *)(a1 + 1016) = *(_QWORD *)(a2 + 1016);
  *(_OWORD *)(a1 + 1024) = *(_OWORD *)(a2 + 1024);
  *(_QWORD *)(a1 + 1040) = v49;
  swift_bridgeObjectRelease(v48);
  *(_QWORD *)(a1 + 1048) = *(_QWORD *)(a2 + 1048);
  v50 = *(_QWORD *)(a1 + 1056);
  *(_QWORD *)(a1 + 1056) = *(_QWORD *)(a2 + 1056);
  swift_bridgeObjectRelease(v50);
  *(_QWORD *)(a1 + 1064) = *(_QWORD *)(a2 + 1064);
  v51 = *(_QWORD *)(a1 + 1072);
  *(_QWORD *)(a1 + 1072) = *(_QWORD *)(a2 + 1072);
  swift_bridgeObjectRelease(v51);
  *(_QWORD *)(a1 + 1080) = *(_QWORD *)(a2 + 1080);
  return a1;
}

uint64_t getEnumTagSinglePayload for Configuration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 1088))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Configuration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 1080) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 1088) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 80) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 1088) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Configuration()
{
  return &type metadata for Configuration;
}

uint64_t sub_62954(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t *assignWithCopy for Configuration.MediaTypeConfiguration(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a1 + 9) = *((_BYTE *)a2 + 9);
  return a1;
}

uint64_t initializeWithTake for Configuration.MediaTypeConfiguration(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t *assignWithTake for Configuration.MediaTypeConfiguration(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a1 + 9) = *((_BYTE *)a2 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for Configuration.MediaTypeConfiguration(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 10))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Configuration.MediaTypeConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 10) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Configuration.MediaTypeConfiguration()
{
  return &type metadata for Configuration.MediaTypeConfiguration;
}

uint64_t getEnumTagSinglePayload for Configuration.GenreRecommendationConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Configuration.GenreRecommendationConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for Configuration.GenreRecommendationConfiguration()
{
  return &type metadata for Configuration.GenreRecommendationConfiguration;
}

ValueMetadata *type metadata accessor for Configuration.GenreRecommendationConfiguration.Source()
{
  return &type metadata for Configuration.GenreRecommendationConfiguration.Source;
}

ValueMetadata *type metadata accessor for Configuration.GenreRecommendationConfiguration.GenreDepth()
{
  return &type metadata for Configuration.GenreRecommendationConfiguration.GenreDepth;
}

ValueMetadata *type metadata accessor for Configuration.SeedBasedRecommendationConfiguration()
{
  return &type metadata for Configuration.SeedBasedRecommendationConfiguration;
}

ValueMetadata *type metadata accessor for Configuration.SeedBasedRecommendationConfiguration.Source()
{
  return &type metadata for Configuration.SeedBasedRecommendationConfiguration.Source;
}

uint64_t destroy for Configuration.CollectionsConfiguration(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
}

uint64_t initializeWithCopy for Configuration.CollectionsConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_WORD *)(a1 + 3) = *(_WORD *)(a2 + 3);
  *(_DWORD *)(a1 + 5) = *(_DWORD *)(a2 + 5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for Configuration.CollectionsConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7) = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v3 = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for Configuration.CollectionsConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for Configuration.CollectionsConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Configuration.CollectionsConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Configuration.CollectionsConfiguration()
{
  return &type metadata for Configuration.CollectionsConfiguration;
}

ValueMetadata *type metadata accessor for Configuration.CollectionsConfiguration.Source()
{
  return &type metadata for Configuration.CollectionsConfiguration.Source;
}

ValueMetadata *type metadata accessor for Configuration.CollectionsConfiguration.BooksConfiguration()
{
  return &type metadata for Configuration.CollectionsConfiguration.BooksConfiguration;
}

_WORD *initializeBufferWithCopyOfBuffer for Configuration.CollectionsConfiguration.BooksBySuggestedAuthorsConfiguration(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for Configuration.CollectionsConfiguration.BooksBySuggestedAuthorsConfiguration()
{
  return &type metadata for Configuration.CollectionsConfiguration.BooksBySuggestedAuthorsConfiguration;
}

ValueMetadata *type metadata accessor for Configuration.CollectionsConfiguration.BooksYouMightLikeConfiguration()
{
  return &type metadata for Configuration.CollectionsConfiguration.BooksYouMightLikeConfiguration;
}

ValueMetadata *type metadata accessor for Configuration.CollectionsConfiguration.ForYouConfiguration()
{
  return &type metadata for Configuration.CollectionsConfiguration.ForYouConfiguration;
}

ValueMetadata *type metadata accessor for Configuration.CollectionsConfiguration.MangaYouMightLikeConfiguration()
{
  return &type metadata for Configuration.CollectionsConfiguration.MangaYouMightLikeConfiguration;
}

uint64_t getEnumTagSinglePayload for Configuration.CollectionsConfiguration.MoreFromYourAuthorsConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 1);
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Configuration.CollectionsConfiguration.MoreFromYourAuthorsConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_BYTE *)(result + 1) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Configuration.CollectionsConfiguration.MoreFromYourAuthorsConfiguration()
{
  return &type metadata for Configuration.CollectionsConfiguration.MoreFromYourAuthorsConfiguration;
}

uint64_t _s20BooksPersonalization13ConfigurationV24CollectionsConfigurationV36BooksBySuggestedAuthorsConfigurationVwet_0(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 65282 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65282 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65282;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65282;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65282;
  }
LABEL_17:
  v6 = *((unsigned __int8 *)a1 + 1);
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s20BooksPersonalization13ConfigurationV24CollectionsConfigurationV36BooksBySuggestedAuthorsConfigurationVwst_0(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65282 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65282 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_62FBC + 4 * byte_18D0C6[v4]))();
  *a1 = a2 - 254;
  return ((uint64_t (*)(void))((char *)sub_62FF0 + 4 * byte_18D0C1[v4]))();
}

uint64_t sub_62FF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_62FF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x63000);
  return result;
}

uint64_t sub_6300C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x63014);
  *(_BYTE *)(result + 1) = a2 + 2;
  return result;
}

uint64_t sub_63018(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_63020(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Configuration.CollectionsConfiguration.SuggestionsConfiguration()
{
  return &type metadata for Configuration.CollectionsConfiguration.SuggestionsConfiguration;
}

ValueMetadata *type metadata accessor for Configuration.CollectionsConfiguration.PostHydrationFilteringConfiguration()
{
  return &type metadata for Configuration.CollectionsConfiguration.PostHydrationFilteringConfiguration;
}

_QWORD *assignWithCopy for Configuration.MediaTypesRecommendationServiceConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v3 = a2[3];
  v4 = a1[3];
  a1[3] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for Configuration.MediaTypesRecommendationServiceConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for Configuration.MediaTypesRecommendationServiceConfiguration()
{
  return &type metadata for Configuration.MediaTypesRecommendationServiceConfiguration;
}

uint64_t destroy for Configuration.BooksClusteringServiceConfiguration(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  return swift_bridgeObjectRelease(a1[7]);
}

uint64_t initializeWithCopy for Configuration.BooksClusteringServiceConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for Configuration.BooksClusteringServiceConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

uint64_t assignWithTake for Configuration.BooksClusteringServiceConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v4);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
  v5 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for Configuration.BooksClusteringServiceConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Configuration.BooksClusteringServiceConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Configuration.BooksClusteringServiceConfiguration()
{
  return &type metadata for Configuration.BooksClusteringServiceConfiguration;
}

uint64_t getEnumTagSinglePayload for Configuration.PersonalizationMetadataServiceConfiguration(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[24])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Configuration.PersonalizationMetadataServiceConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for Configuration.PersonalizationMetadataServiceConfiguration()
{
  return &type metadata for Configuration.PersonalizationMetadataServiceConfiguration;
}

uint64_t getEnumTagSinglePayload for Configuration.BooksClusteringServiceLegacyCollectionConfiguration(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Configuration.BooksClusteringServiceLegacyCollectionConfiguration(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_63518 + 4 * byte_18D0D0[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_6354C + 4 * byte_18D0CB[v4]))();
}

uint64_t sub_6354C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_63554(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x6355CLL);
  return result;
}

uint64_t sub_63568(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x63570);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_63574(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_6357C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Configuration.BooksClusteringServiceLegacyCollectionConfiguration()
{
  return &type metadata for Configuration.BooksClusteringServiceLegacyCollectionConfiguration;
}

void *initializeWithTake for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x16BuLL);
}

ValueMetadata *type metadata accessor for Configuration.ScorersConfiguration()
{
  return &type metadata for Configuration.ScorersConfiguration;
}

uint64_t destroy for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 328));
}

uint64_t _s20BooksPersonalization13ConfigurationV20ScorersConfigurationV30BookHistoryScorerConfigurationVwcp_0(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v7;
  v8 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v8;
  v9 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v9;
  v10 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v10;
  v11 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v11;
  v12 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v12;
  v13 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 328) = v13;
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_BYTE *)(a1 + 360) = *(_BYTE *)(a2 + 360);
  *(_WORD *)(a1 + 361) = *(_WORD *)(a2 + 361);
  swift_bridgeObjectRetain(v13);
  return a1;
}

uint64_t _s20BooksPersonalization13ConfigurationV20ScorersConfigurationV30BookHistoryScorerConfigurationVwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2 + 360;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  v5 = *(_QWORD *)(a2 + 328);
  v6 = *(_QWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 328) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_BYTE *)(a1 + 360) = *(_BYTE *)(a2 + 360);
  *(_BYTE *)(a1 + 361) = *(_BYTE *)(v4 + 1);
  *(_BYTE *)(a1 + 362) = *(_BYTE *)(v4 + 2);
  return a1;
}

uint64_t _s20BooksPersonalization13ConfigurationV20ScorersConfigurationV30BookHistoryScorerConfigurationVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a2 + 360;
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  v8 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v8;
  v9 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v9;
  v10 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v10;
  v11 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v11;
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)&v11 = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 320) = v11;
  v12 = *(_QWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  swift_bridgeObjectRelease(v12);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  v13 = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 352) = v13;
  *(_BYTE *)(a1 + 360) = *(_BYTE *)(a2 + 360);
  *(_BYTE *)(a1 + 361) = *(_BYTE *)(v4 + 1);
  *(_BYTE *)(a1 + 362) = *(_BYTE *)(v4 + 2);
  return a1;
}

uint64_t _s20BooksPersonalization13ConfigurationV20ScorersConfigurationV30BookHistoryScorerConfigurationVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 363))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 328);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_63968(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 362) = 0;
    *(_WORD *)(result + 360) = 0;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 363) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 328) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 363) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration()
{
  return &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration;
}

uint64_t getEnumTagSinglePayload for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.ReadingHistoryConfiguration(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.ReadingHistoryConfiguration(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.ReadingHistoryConfiguration()
{
  return &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.ReadingHistoryConfiguration;
}

uint64_t getEnumTagSinglePayload for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.DeclinedConfiguration(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.DeclinedConfiguration(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.DeclinedConfiguration()
{
  return &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.DeclinedConfiguration;
}

ValueMetadata *type metadata accessor for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.RecommendationMethodology()
{
  return &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.RecommendationMethodology;
}

ValueMetadata *type metadata accessor for Configuration.ScorersConfiguration.Scorer()
{
  return &type metadata for Configuration.ScorersConfiguration.Scorer;
}

ValueMetadata *type metadata accessor for Configuration.MediaTypeMethod()
{
  return &type metadata for Configuration.MediaTypeMethod;
}

uint64_t getEnumTagSinglePayload for Configuration.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF3)
    goto LABEL_17;
  if (a2 + 13 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 13) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 13;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 13;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 13;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xE;
  v8 = v6 - 14;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Configuration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_63BF4 + 4 * byte_18D0DA[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_63C28 + 4 * byte_18D0D5[v4]))();
}

uint64_t sub_63C28(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_63C30(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x63C38);
  return result;
}

uint64_t sub_63C44(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x63C4CLL);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_63C50(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_63C58(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Configuration.CodingKeys()
{
  return &type metadata for Configuration.CodingKeys;
}

ValueMetadata *type metadata accessor for Configuration.ScorersConfiguration.CodingKeys()
{
  return &type metadata for Configuration.ScorersConfiguration.CodingKeys;
}

uint64_t getEnumTagSinglePayload for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xDC)
    goto LABEL_17;
  if (a2 + 36 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 36) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 36;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 36;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 36;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x25;
  v8 = v6 - 37;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 36 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 36) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xDC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xDB)
    return ((uint64_t (*)(void))((char *)&loc_63D64 + 4 * byte_18D0E4[v4]))();
  *a1 = a2 + 36;
  return ((uint64_t (*)(void))((char *)sub_63D98 + 4 * byte_18D0DF[v4]))();
}

uint64_t sub_63D98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_63DA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x63DA8);
  return result;
}

uint64_t sub_63DB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x63DBCLL);
  *(_BYTE *)result = a2 + 36;
  return result;
}

uint64_t sub_63DC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_63DC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.CodingKeys()
{
  return &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.DeclinedConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_63E30 + 4 * byte_18D0EE[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_63E64 + 4 * byte_18D0E9[v4]))();
}

uint64_t sub_63E64(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_63E6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x63E74);
  return result;
}

uint64_t sub_63E80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x63E88);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_63E8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_63E94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.DeclinedConfiguration.CodingKeys()
{
  return &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.DeclinedConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.ReadingHistoryConfiguration.CodingKeys()
{
  return &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.ReadingHistoryConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for Configuration.BooksClusteringServiceLegacyCollectionConfiguration.CodingKeys()
{
  return &type metadata for Configuration.BooksClusteringServiceLegacyCollectionConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for Configuration.PersonalizationMetadataServiceConfiguration.CodingKeys()
{
  return &type metadata for Configuration.PersonalizationMetadataServiceConfiguration.CodingKeys;
}

uint64_t getEnumTagSinglePayload for CollectionRecommendationType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Configuration.BooksClusteringServiceConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_63FBC + 4 * byte_18D0F8[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_63FF0 + 4 * byte_18D0F3[v4]))();
}

uint64_t sub_63FF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_63FF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x64000);
  return result;
}

uint64_t sub_6400C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x64014);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_64018(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_64020(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Configuration.BooksClusteringServiceConfiguration.CodingKeys()
{
  return &type metadata for Configuration.BooksClusteringServiceConfiguration.CodingKeys;
}

uint64_t _s20BooksPersonalization13ConfigurationV15MediaTypeMethodOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_64088 + 4 * byte_18D102[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_640BC + 4 * byte_18D0FD[v4]))();
}

uint64_t sub_640BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_640C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x640CCLL);
  return result;
}

uint64_t sub_640D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x640E0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_640E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_640EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Configuration.MediaTypesRecommendationServiceConfiguration.CodingKeys()
{
  return &type metadata for Configuration.MediaTypesRecommendationServiceConfiguration.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for Configuration.CollectionsConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_64154 + 4 * byte_18D10C[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_64188 + 4 * byte_18D107[v4]))();
}

uint64_t sub_64188(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_64190(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x64198);
  return result;
}

uint64_t sub_641A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x641ACLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_641B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_641B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Configuration.CollectionsConfiguration.CodingKeys()
{
  return &type metadata for Configuration.CollectionsConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for Configuration.CollectionsConfiguration.PostHydrationFilteringConfiguration.CodingKeys()
{
  return &type metadata for Configuration.CollectionsConfiguration.PostHydrationFilteringConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for Configuration.CollectionsConfiguration.SuggestionsConfiguration.CodingKeys()
{
  return &type metadata for Configuration.CollectionsConfiguration.SuggestionsConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for Configuration.CollectionsConfiguration.MoreFromYourAuthorsConfiguration.CodingKeys()
{
  return &type metadata for Configuration.CollectionsConfiguration.MoreFromYourAuthorsConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for Configuration.CollectionsConfiguration.MangaYouMightLikeConfiguration.CodingKeys()
{
  return &type metadata for Configuration.CollectionsConfiguration.MangaYouMightLikeConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for Configuration.CollectionsConfiguration.ForYouConfiguration.CodingKeys()
{
  return &type metadata for Configuration.CollectionsConfiguration.ForYouConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for Configuration.CollectionsConfiguration.BooksYouMightLikeConfiguration.CodingKeys()
{
  return &type metadata for Configuration.CollectionsConfiguration.BooksYouMightLikeConfiguration.CodingKeys;
}

uint64_t _s20BooksPersonalization13ConfigurationV20ScorersConfigurationV30BookHistoryScorerConfigurationV25RecommendationMethodologyOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_64280 + 4 * byte_18D116[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_642B4 + 4 * byte_18D111[v4]))();
}

uint64_t sub_642B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_642BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x642C4);
  return result;
}

uint64_t sub_642D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x642D8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_642DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_642E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Configuration.CollectionsConfiguration.BooksBySuggestedAuthorsConfiguration.CodingKeys()
{
  return &type metadata for Configuration.CollectionsConfiguration.BooksBySuggestedAuthorsConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for Configuration.CollectionsConfiguration.BooksConfiguration.CodingKeys()
{
  return &type metadata for Configuration.CollectionsConfiguration.BooksConfiguration.CodingKeys;
}

uint64_t _s20BooksPersonalization13ConfigurationV20ScorersConfigurationV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_64350 + 4 * byte_18D11B[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_64370 + 4 * byte_18D120[v4]))();
}

_BYTE *sub_64350(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_64370(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_64378(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_64380(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_64388(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_64390(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Configuration.SeedBasedRecommendationConfiguration.CodingKeys()
{
  return &type metadata for Configuration.SeedBasedRecommendationConfiguration.CodingKeys;
}

uint64_t _s20BooksPersonalization13ConfigurationV32GenreRecommendationConfigurationV6SourceOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_643F8 + 4 * byte_18D12A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_6442C + 4 * byte_18D125[v4]))();
}

uint64_t sub_6442C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_64434(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x6443CLL);
  return result;
}

uint64_t sub_64448(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x64450);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_64454(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_6445C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Configuration.GenreRecommendationConfiguration.CodingKeys()
{
  return &type metadata for Configuration.GenreRecommendationConfiguration.CodingKeys;
}

uint64_t _s20BooksPersonalization13ConfigurationV32GenreRecommendationConfigurationV10GenreDepthOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_644C4 + 4 * byte_18D134[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_644F8 + 4 * byte_18D12F[v4]))();
}

uint64_t sub_644F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_64500(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x64508);
  return result;
}

uint64_t sub_64514(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x6451CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_64520(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_64528(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Configuration.MediaTypeConfiguration.CodingKeys()
{
  return &type metadata for Configuration.MediaTypeConfiguration.CodingKeys;
}

unint64_t sub_64548()
{
  unint64_t result;

  result = qword_1F1B08;
  if (!qword_1F1B08)
  {
    result = swift_getWitnessTable(&unk_18E444, &type metadata for Configuration.MediaTypeConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1B08);
  }
  return result;
}

unint64_t sub_64590()
{
  unint64_t result;

  result = qword_1F1B10;
  if (!qword_1F1B10)
  {
    result = swift_getWitnessTable(&unk_18E534, &type metadata for Configuration.GenreRecommendationConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1B10);
  }
  return result;
}

unint64_t sub_645D8()
{
  unint64_t result;

  result = qword_1F1B18;
  if (!qword_1F1B18)
  {
    result = swift_getWitnessTable(&unk_18E5EC, &type metadata for Configuration.SeedBasedRecommendationConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1B18);
  }
  return result;
}

unint64_t sub_64620()
{
  unint64_t result;

  result = qword_1F1B20;
  if (!qword_1F1B20)
  {
    result = swift_getWitnessTable(&unk_18E6A4, &type metadata for Configuration.CollectionsConfiguration.BooksConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1B20);
  }
  return result;
}

unint64_t sub_64668()
{
  unint64_t result;

  result = qword_1F1B28;
  if (!qword_1F1B28)
  {
    result = swift_getWitnessTable(&unk_18E75C, &type metadata for Configuration.CollectionsConfiguration.BooksBySuggestedAuthorsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1B28);
  }
  return result;
}

unint64_t sub_646B0()
{
  unint64_t result;

  result = qword_1F1B30;
  if (!qword_1F1B30)
  {
    result = swift_getWitnessTable(&unk_18E814, &type metadata for Configuration.CollectionsConfiguration.BooksYouMightLikeConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1B30);
  }
  return result;
}

unint64_t sub_646F8()
{
  unint64_t result;

  result = qword_1F1B38;
  if (!qword_1F1B38)
  {
    result = swift_getWitnessTable(&unk_18E8CC, &type metadata for Configuration.CollectionsConfiguration.ForYouConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1B38);
  }
  return result;
}

unint64_t sub_64740()
{
  unint64_t result;

  result = qword_1F1B40;
  if (!qword_1F1B40)
  {
    result = swift_getWitnessTable(&unk_18E984, &type metadata for Configuration.CollectionsConfiguration.MangaYouMightLikeConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1B40);
  }
  return result;
}

unint64_t sub_64788()
{
  unint64_t result;

  result = qword_1F1B48;
  if (!qword_1F1B48)
  {
    result = swift_getWitnessTable(&unk_18EA3C, &type metadata for Configuration.CollectionsConfiguration.MoreFromYourAuthorsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1B48);
  }
  return result;
}

unint64_t sub_647D0()
{
  unint64_t result;

  result = qword_1F1B50;
  if (!qword_1F1B50)
  {
    result = swift_getWitnessTable(&unk_18EAF4, &type metadata for Configuration.CollectionsConfiguration.SuggestionsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1B50);
  }
  return result;
}

unint64_t sub_64818()
{
  unint64_t result;

  result = qword_1F1B58;
  if (!qword_1F1B58)
  {
    result = swift_getWitnessTable(&unk_18EBAC, &type metadata for Configuration.CollectionsConfiguration.PostHydrationFilteringConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1B58);
  }
  return result;
}

unint64_t sub_64860()
{
  unint64_t result;

  result = qword_1F1B60;
  if (!qword_1F1B60)
  {
    result = swift_getWitnessTable(&unk_18EC9C, &type metadata for Configuration.CollectionsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1B60);
  }
  return result;
}

unint64_t sub_648A8()
{
  unint64_t result;

  result = qword_1F1B68;
  if (!qword_1F1B68)
  {
    result = swift_getWitnessTable(&unk_18ED54, &type metadata for Configuration.MediaTypesRecommendationServiceConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1B68);
  }
  return result;
}

unint64_t sub_648F0()
{
  unint64_t result;

  result = qword_1F1B70;
  if (!qword_1F1B70)
  {
    result = swift_getWitnessTable(&unk_18EE44, &type metadata for Configuration.BooksClusteringServiceConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1B70);
  }
  return result;
}

unint64_t sub_64938()
{
  unint64_t result;

  result = qword_1F1B78;
  if (!qword_1F1B78)
  {
    result = swift_getWitnessTable(&unk_18EEFC, &type metadata for Configuration.PersonalizationMetadataServiceConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1B78);
  }
  return result;
}

unint64_t sub_64980()
{
  unint64_t result;

  result = qword_1F1B80;
  if (!qword_1F1B80)
  {
    result = swift_getWitnessTable(&unk_18EFB4, &type metadata for Configuration.BooksClusteringServiceLegacyCollectionConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1B80);
  }
  return result;
}

unint64_t sub_649C8()
{
  unint64_t result;

  result = qword_1F1B88;
  if (!qword_1F1B88)
  {
    result = swift_getWitnessTable(&unk_18F06C, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.ReadingHistoryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1B88);
  }
  return result;
}

unint64_t sub_64A10()
{
  unint64_t result;

  result = qword_1F1B90;
  if (!qword_1F1B90)
  {
    result = swift_getWitnessTable(&unk_18F124, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.DeclinedConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1B90);
  }
  return result;
}

unint64_t sub_64A58()
{
  unint64_t result;

  result = qword_1F1B98;
  if (!qword_1F1B98)
  {
    result = swift_getWitnessTable(&unk_18F214, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1B98);
  }
  return result;
}

unint64_t sub_64AA0()
{
  unint64_t result;

  result = qword_1F1BA0;
  if (!qword_1F1BA0)
  {
    result = swift_getWitnessTable(&unk_18F304, &type metadata for Configuration.ScorersConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1BA0);
  }
  return result;
}

unint64_t sub_64AE8()
{
  unint64_t result;

  result = qword_1F1BA8;
  if (!qword_1F1BA8)
  {
    result = swift_getWitnessTable(&unk_18F3F4, &type metadata for Configuration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1BA8);
  }
  return result;
}

unint64_t sub_64B30()
{
  unint64_t result;

  result = qword_1F1BB0;
  if (!qword_1F1BB0)
  {
    result = swift_getWitnessTable(&unk_18F32C, &type metadata for Configuration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1BB0);
  }
  return result;
}

unint64_t sub_64B78()
{
  unint64_t result;

  result = qword_1F1BB8;
  if (!qword_1F1BB8)
  {
    result = swift_getWitnessTable(&unk_18F354, &type metadata for Configuration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1BB8);
  }
  return result;
}

unint64_t sub_64BC0()
{
  unint64_t result;

  result = qword_1F1BC0;
  if (!qword_1F1BC0)
  {
    result = swift_getWitnessTable(&unk_18F23C, &type metadata for Configuration.ScorersConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1BC0);
  }
  return result;
}

unint64_t sub_64C08()
{
  unint64_t result;

  result = qword_1F1BC8;
  if (!qword_1F1BC8)
  {
    result = swift_getWitnessTable(&unk_18F264, &type metadata for Configuration.ScorersConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1BC8);
  }
  return result;
}

unint64_t sub_64C50()
{
  unint64_t result;

  result = qword_1F1BD0;
  if (!qword_1F1BD0)
  {
    result = swift_getWitnessTable(&unk_18F14C, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1BD0);
  }
  return result;
}

unint64_t sub_64C98()
{
  unint64_t result;

  result = qword_1F1BD8;
  if (!qword_1F1BD8)
  {
    result = swift_getWitnessTable(&unk_18F174, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1BD8);
  }
  return result;
}

unint64_t sub_64CE0()
{
  unint64_t result;

  result = qword_1F1BE0;
  if (!qword_1F1BE0)
  {
    result = swift_getWitnessTable(&unk_18F094, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.DeclinedConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1BE0);
  }
  return result;
}

unint64_t sub_64D28()
{
  unint64_t result;

  result = qword_1F1BE8;
  if (!qword_1F1BE8)
  {
    result = swift_getWitnessTable(&unk_18F0BC, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.DeclinedConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1BE8);
  }
  return result;
}

unint64_t sub_64D70()
{
  unint64_t result;

  result = qword_1F1BF0;
  if (!qword_1F1BF0)
  {
    result = swift_getWitnessTable(&unk_18EFDC, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.ReadingHistoryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1BF0);
  }
  return result;
}

unint64_t sub_64DB8()
{
  unint64_t result;

  result = qword_1F1BF8;
  if (!qword_1F1BF8)
  {
    result = swift_getWitnessTable(&unk_18F004, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.ReadingHistoryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1BF8);
  }
  return result;
}

unint64_t sub_64E00()
{
  unint64_t result;

  result = qword_1F1C00;
  if (!qword_1F1C00)
  {
    result = swift_getWitnessTable(&unk_18EF24, &type metadata for Configuration.BooksClusteringServiceLegacyCollectionConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1C00);
  }
  return result;
}

unint64_t sub_64E48()
{
  unint64_t result;

  result = qword_1F1C08;
  if (!qword_1F1C08)
  {
    result = swift_getWitnessTable(&unk_18EF4C, &type metadata for Configuration.BooksClusteringServiceLegacyCollectionConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1C08);
  }
  return result;
}

unint64_t sub_64E90()
{
  unint64_t result;

  result = qword_1F1C10;
  if (!qword_1F1C10)
  {
    result = swift_getWitnessTable(&unk_18EE6C, &type metadata for Configuration.PersonalizationMetadataServiceConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1C10);
  }
  return result;
}

unint64_t sub_64ED8()
{
  unint64_t result;

  result = qword_1F1C18;
  if (!qword_1F1C18)
  {
    result = swift_getWitnessTable(&unk_18EE94, &type metadata for Configuration.PersonalizationMetadataServiceConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1C18);
  }
  return result;
}

unint64_t sub_64F20()
{
  unint64_t result;

  result = qword_1F1C20;
  if (!qword_1F1C20)
  {
    result = swift_getWitnessTable(&unk_18ED7C, &type metadata for Configuration.BooksClusteringServiceConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1C20);
  }
  return result;
}

unint64_t sub_64F68()
{
  unint64_t result;

  result = qword_1F1C28;
  if (!qword_1F1C28)
  {
    result = swift_getWitnessTable(&unk_18EDA4, &type metadata for Configuration.BooksClusteringServiceConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1C28);
  }
  return result;
}

unint64_t sub_64FB0()
{
  unint64_t result;

  result = qword_1F1C30;
  if (!qword_1F1C30)
  {
    result = swift_getWitnessTable(&unk_18ECC4, &type metadata for Configuration.MediaTypesRecommendationServiceConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1C30);
  }
  return result;
}

unint64_t sub_64FF8()
{
  unint64_t result;

  result = qword_1F1C38;
  if (!qword_1F1C38)
  {
    result = swift_getWitnessTable(&unk_18ECEC, &type metadata for Configuration.MediaTypesRecommendationServiceConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1C38);
  }
  return result;
}

unint64_t sub_65040()
{
  unint64_t result;

  result = qword_1F1C40;
  if (!qword_1F1C40)
  {
    result = swift_getWitnessTable(&unk_18EBD4, &type metadata for Configuration.CollectionsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1C40);
  }
  return result;
}

unint64_t sub_65088()
{
  unint64_t result;

  result = qword_1F1C48;
  if (!qword_1F1C48)
  {
    result = swift_getWitnessTable(&unk_18EBFC, &type metadata for Configuration.CollectionsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1C48);
  }
  return result;
}

unint64_t sub_650D0()
{
  unint64_t result;

  result = qword_1F1C50;
  if (!qword_1F1C50)
  {
    result = swift_getWitnessTable(&unk_18EB1C, &type metadata for Configuration.CollectionsConfiguration.PostHydrationFilteringConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1C50);
  }
  return result;
}

unint64_t sub_65118()
{
  unint64_t result;

  result = qword_1F1C58;
  if (!qword_1F1C58)
  {
    result = swift_getWitnessTable(&unk_18EB44, &type metadata for Configuration.CollectionsConfiguration.PostHydrationFilteringConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1C58);
  }
  return result;
}

unint64_t sub_65160()
{
  unint64_t result;

  result = qword_1F1C60;
  if (!qword_1F1C60)
  {
    result = swift_getWitnessTable(&unk_18EA64, &type metadata for Configuration.CollectionsConfiguration.SuggestionsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1C60);
  }
  return result;
}

unint64_t sub_651A8()
{
  unint64_t result;

  result = qword_1F1C68;
  if (!qword_1F1C68)
  {
    result = swift_getWitnessTable(&unk_18EA8C, &type metadata for Configuration.CollectionsConfiguration.SuggestionsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1C68);
  }
  return result;
}

unint64_t sub_651F0()
{
  unint64_t result;

  result = qword_1F1C70;
  if (!qword_1F1C70)
  {
    result = swift_getWitnessTable(&unk_18E9AC, &type metadata for Configuration.CollectionsConfiguration.MoreFromYourAuthorsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1C70);
  }
  return result;
}

unint64_t sub_65238()
{
  unint64_t result;

  result = qword_1F1C78;
  if (!qword_1F1C78)
  {
    result = swift_getWitnessTable(&unk_18E9D4, &type metadata for Configuration.CollectionsConfiguration.MoreFromYourAuthorsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1C78);
  }
  return result;
}

unint64_t sub_65280()
{
  unint64_t result;

  result = qword_1F1C80;
  if (!qword_1F1C80)
  {
    result = swift_getWitnessTable(&unk_18E8F4, &type metadata for Configuration.CollectionsConfiguration.MangaYouMightLikeConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1C80);
  }
  return result;
}

unint64_t sub_652C8()
{
  unint64_t result;

  result = qword_1F1C88;
  if (!qword_1F1C88)
  {
    result = swift_getWitnessTable(&unk_18E91C, &type metadata for Configuration.CollectionsConfiguration.MangaYouMightLikeConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1C88);
  }
  return result;
}

unint64_t sub_65310()
{
  unint64_t result;

  result = qword_1F1C90;
  if (!qword_1F1C90)
  {
    result = swift_getWitnessTable(&unk_18E83C, &type metadata for Configuration.CollectionsConfiguration.ForYouConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1C90);
  }
  return result;
}

unint64_t sub_65358()
{
  unint64_t result;

  result = qword_1F1C98;
  if (!qword_1F1C98)
  {
    result = swift_getWitnessTable(&unk_18E864, &type metadata for Configuration.CollectionsConfiguration.ForYouConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1C98);
  }
  return result;
}

unint64_t sub_653A0()
{
  unint64_t result;

  result = qword_1F1CA0;
  if (!qword_1F1CA0)
  {
    result = swift_getWitnessTable(&unk_18E784, &type metadata for Configuration.CollectionsConfiguration.BooksYouMightLikeConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1CA0);
  }
  return result;
}

unint64_t sub_653E8()
{
  unint64_t result;

  result = qword_1F1CA8;
  if (!qword_1F1CA8)
  {
    result = swift_getWitnessTable(&unk_18E7AC, &type metadata for Configuration.CollectionsConfiguration.BooksYouMightLikeConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1CA8);
  }
  return result;
}

unint64_t sub_65430()
{
  unint64_t result;

  result = qword_1F1CB0;
  if (!qword_1F1CB0)
  {
    result = swift_getWitnessTable(&unk_18E6CC, &type metadata for Configuration.CollectionsConfiguration.BooksBySuggestedAuthorsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1CB0);
  }
  return result;
}

unint64_t sub_65478()
{
  unint64_t result;

  result = qword_1F1CB8;
  if (!qword_1F1CB8)
  {
    result = swift_getWitnessTable(&unk_18E6F4, &type metadata for Configuration.CollectionsConfiguration.BooksBySuggestedAuthorsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1CB8);
  }
  return result;
}

unint64_t sub_654C0()
{
  unint64_t result;

  result = qword_1F1CC0;
  if (!qword_1F1CC0)
  {
    result = swift_getWitnessTable(&unk_18E614, &type metadata for Configuration.CollectionsConfiguration.BooksConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1CC0);
  }
  return result;
}

unint64_t sub_65508()
{
  unint64_t result;

  result = qword_1F1CC8;
  if (!qword_1F1CC8)
  {
    result = swift_getWitnessTable(&unk_18E63C, &type metadata for Configuration.CollectionsConfiguration.BooksConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1CC8);
  }
  return result;
}

unint64_t sub_65550()
{
  unint64_t result;

  result = qword_1F1CD0;
  if (!qword_1F1CD0)
  {
    result = swift_getWitnessTable(&unk_18E55C, &type metadata for Configuration.SeedBasedRecommendationConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1CD0);
  }
  return result;
}

unint64_t sub_65598()
{
  unint64_t result;

  result = qword_1F1CD8;
  if (!qword_1F1CD8)
  {
    result = swift_getWitnessTable(&unk_18E584, &type metadata for Configuration.SeedBasedRecommendationConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1CD8);
  }
  return result;
}

unint64_t sub_655E0()
{
  unint64_t result;

  result = qword_1F1CE0;
  if (!qword_1F1CE0)
  {
    result = swift_getWitnessTable(&unk_18E46C, &type metadata for Configuration.GenreRecommendationConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1CE0);
  }
  return result;
}

unint64_t sub_65628()
{
  unint64_t result;

  result = qword_1F1CE8;
  if (!qword_1F1CE8)
  {
    result = swift_getWitnessTable(&unk_18E494, &type metadata for Configuration.GenreRecommendationConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1CE8);
  }
  return result;
}

unint64_t sub_65670()
{
  unint64_t result;

  result = qword_1F1CF0;
  if (!qword_1F1CF0)
  {
    result = swift_getWitnessTable(&unk_18E3B4, &type metadata for Configuration.MediaTypeConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1CF0);
  }
  return result;
}

unint64_t sub_656B8()
{
  unint64_t result;

  result = qword_1F1CF8;
  if (!qword_1F1CF8)
  {
    result = swift_getWitnessTable(&unk_18E3DC, &type metadata for Configuration.MediaTypeConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F1CF8);
  }
  return result;
}

unint64_t sub_656FC(_QWORD *a1)
{
  return sub_658F8(a1, &qword_1F1D48);
}

unint64_t sub_65708(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_5EDC(&qword_1F1D08);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v5 = *(i - 1);
      v6 = *i;
      result = sub_39228(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v9 = 8 * result;
      *(_QWORD *)(v3[6] + v9) = v5;
      *(_QWORD *)(v3[7] + v9) = v6;
      v10 = v3[2];
      v11 = __OFADD__(v10, 1);
      v12 = v10 + 1;
      if (v11)
        goto LABEL_10;
      v3[2] = v12;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_657E0(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v1 = a1[2];
  if (!v1)
    return (unint64_t)_swiftEmptyDictionarySingleton;
  sub_5EDC(&qword_1F1D38);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  result = sub_39228(v4);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain(v6);
    return (unint64_t)v3;
  }
  v9 = a1 + 9;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v4;
    v10 = (_QWORD *)(v3[7] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    if (!--v1)
      goto LABEL_8;
    v14 = v9 + 3;
    v4 = *(v9 - 2);
    v5 = *(v9 - 1);
    v15 = *v9;
    swift_bridgeObjectRetain(v6);
    result = sub_39228(v4);
    v9 = v14;
    v6 = v15;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_658EC(_QWORD *a1)
{
  return sub_658F8(a1, &qword_1F1D78);
}

unint64_t sub_658F8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v2 = a1[2];
  if (!v2)
    return (unint64_t)_swiftEmptyDictionarySingleton;
  sub_5EDC(a2);
  v4 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v6 = a1[4];
  v5 = a1[5];
  result = sub_39228(v6);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain(v5);
    return (unint64_t)v4;
  }
  v9 = a1 + 7;
  while (1)
  {
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v4[6] + v10) = v6;
    *(_QWORD *)(v4[7] + v10) = v5;
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v4[2] = v13;
    if (!--v2)
      goto LABEL_8;
    v14 = v9 + 2;
    v6 = *(v9 - 1);
    v15 = *v9;
    swift_bridgeObjectRetain(v5);
    result = sub_39228(v6);
    v9 = v14;
    v5 = v15;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_659F0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  __int128 v16;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_5EDC(&qword_1F1DB8);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
    v4 = (_QWORD *)(a1 + 80);
    while (1)
    {
      v5 = *(v4 - 6);
      v16 = *(_OWORD *)(v4 - 5);
      v6 = *((_BYTE *)v4 - 24);
      v7 = *(v4 - 2);
      v8 = *(v4 - 1);
      v9 = *v4;
      result = sub_39228(v5);
      if ((v11 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      v12 = v3[7] + 48 * result;
      *(_OWORD *)v12 = v16;
      *(_BYTE *)(v12 + 16) = v6;
      *(_QWORD *)(v12 + 24) = v7;
      *(_QWORD *)(v12 + 32) = v8;
      *(_QWORD *)(v12 + 40) = v9;
      v13 = v3[2];
      v14 = __OFADD__(v13, 1);
      v15 = v13 + 1;
      if (v14)
        goto LABEL_10;
      v4 += 7;
      v3[2] = v15;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v7);
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)_swiftEmptyDictionarySingleton;
  }
  return result;
}

uint64_t sub_65B0C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x73444965726E6567 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73444965726E6567, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000015)
  {
    v7 = 0x80000000001A0330;
    if (a2 == 0x80000000001A0330)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000000001A0330, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x80000000001A0350)
  {
    swift_bridgeObjectRelease(0x80000000001A0350);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000000001A0350, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

unint64_t sub_65C54(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1D89F0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

uint64_t sub_65C9C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x656372756F73 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656372756F73, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7265726F63736572 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7265726F63736572, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD00000000000001ELL && a2 == 0x80000000001A0370)
  {
    swift_bridgeObjectRelease(0x80000000001A0370);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x80000000001A0370, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_65DE4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x656372756F73 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656372756F73, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7265726F63736572 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7265726F63736572, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_65ECC(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000013 && a2 == 0x80000000001A0390)
  {
    swift_bridgeObjectRelease(0x80000000001A0390);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000000001A0390, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

unint64_t sub_65F50(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1D8B88, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 8)
    return 8;
  else
    return v3;
}

uint64_t sub_65F98(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  char v8;

  if (a1 == 0xD000000000000025 && a2 == 0x80000000001A03B0)
  {
    v4 = 0x80000000001A03B0;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000025, 0x80000000001A03B0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 0xD000000000000021 && a2 == 0x80000000001A03E0)
  {
    v6 = 0x80000000001A03E0;
LABEL_12:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021, 0x80000000001A03E0, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_12;
  }
  if (a1 == 0xD00000000000001ALL && a2 == 0x80000000001A0410)
  {
    v7 = 0x80000000001A0410;
LABEL_18:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x80000000001A0410, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_18;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x80000000001A0430)
  {
    swift_bridgeObjectRelease(0x80000000001A0430);
    return 3;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000000001A0430, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

unint64_t sub_66134(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1D8DA8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xA)
    return 10;
  else
    return v3;
}

uint64_t sub_6617C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x64656C62616E65 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64656C62616E65, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000020 && a2 == 0x80000000001A0450)
  {
    v7 = 0x80000000001A0450;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000020, 0x80000000001A0450, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000000001A0480)
  {
    swift_bridgeObjectRelease(0x80000000001A0480);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000000001A0480, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_662C8(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  char v8;

  if (a1 == 0xD000000000000011)
  {
    v4 = 0x80000000001A04A0;
    if (a2 == 0x80000000001A04A0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000000001A04A0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x80000000001A04C0)
  {
    v6 = 0x80000000001A04C0;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000000001A04C0, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x616552796C6C7566 && a2 == 0xEE0074736F6F4264)
  {
    v7 = 0xEE0074736F6F4264;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x616552796C6C7566, 0xEE0074736F6F4264, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0x6566694C666C6168 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 3;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6566694C666C6168, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_6649C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x64656E696C636564 && a2 == 0xEE00746867696557)
  {
    v5 = 0xEE00746867696557;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64656E696C636564, 0xEE00746867696557, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000021 && a2 == 0x80000000001A04E0)
  {
    v7 = 0x80000000001A04E0;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021, 0x80000000001A04E0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD00000000000001BLL && a2 == 0x80000000001A0510)
  {
    v8 = 0x80000000001A0510;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x80000000001A0510, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD00000000000001FLL && a2 == 0x80000000001A0530)
  {
    v9 = 0x80000000001A0530;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001FLL, 0x80000000001A0530, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0xD000000000000023 && a2 == 0x80000000001A0550)
  {
    v10 = 0x80000000001A0550;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023, 0x80000000001A0550, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x80000000001A0580)
  {
    swift_bridgeObjectRelease(0x80000000001A0580);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x80000000001A0580, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_66714(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_1D8FA8, a1, a2, &unk_1F01B0);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x25)
    return 37;
  else
    return v3;
}

unint64_t sub_66764(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1D9468, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xE)
    return 14;
  else
    return v3;
}

_QWORD *sub_667AC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = a1[3];
  v3 = a1[11];
  v4 = a1[12];
  v5 = a1[13];
  v6 = a1[14];
  v7 = a1[15];
  v8 = a1[16];
  v10 = a1[10];
  v11 = a1[67];
  v12 = a1[69];
  swift_bridgeObjectRetain(a1[2]);
  swift_bridgeObjectRetain(v2);
  sub_61A8(v10, v3, v4, v5, v6, v7, v8);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  return a1;
}

unint64_t sub_66864()
{
  unint64_t result;

  result = qword_1F1D80;
  if (!qword_1F1D80)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.MediaTypeMethod, &type metadata for Configuration.MediaTypeMethod);
    atomic_store(result, (unint64_t *)&qword_1F1D80);
  }
  return result;
}

unint64_t sub_668A8()
{
  unint64_t result;

  result = qword_1F1D88;
  if (!qword_1F1D88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.ScorersConfiguration.Scorer, &type metadata for Configuration.ScorersConfiguration.Scorer);
    atomic_store(result, (unint64_t *)&qword_1F1D88);
  }
  return result;
}

unint64_t sub_668EC()
{
  unint64_t result;

  result = qword_1F1D90;
  if (!qword_1F1D90)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.RecommendationMethodology, &type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.RecommendationMethodology);
    atomic_store(result, (unint64_t *)&qword_1F1D90);
  }
  return result;
}

unint64_t sub_66930()
{
  unint64_t result;

  result = qword_1F1D98;
  if (!qword_1F1D98)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.CollectionsConfiguration.Source, &type metadata for Configuration.CollectionsConfiguration.Source);
    atomic_store(result, (unint64_t *)&qword_1F1D98);
  }
  return result;
}

unint64_t sub_66974()
{
  unint64_t result;

  result = qword_1F1DA0;
  if (!qword_1F1DA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.SeedBasedRecommendationConfiguration.Source, &type metadata for Configuration.SeedBasedRecommendationConfiguration.Source);
    atomic_store(result, (unint64_t *)&qword_1F1DA0);
  }
  return result;
}

unint64_t sub_669B8()
{
  unint64_t result;

  result = qword_1F1DA8;
  if (!qword_1F1DA8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.GenreRecommendationConfiguration.GenreDepth, &type metadata for Configuration.GenreRecommendationConfiguration.GenreDepth);
    atomic_store(result, (unint64_t *)&qword_1F1DA8);
  }
  return result;
}

unint64_t sub_669FC()
{
  unint64_t result;

  result = qword_1F1DB0;
  if (!qword_1F1DB0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Configuration.GenreRecommendationConfiguration.Source, &type metadata for Configuration.GenreRecommendationConfiguration.Source);
    atomic_store(result, (unint64_t *)&qword_1F1DB0);
  }
  return result;
}

void sub_66A68(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_66AC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = BYTE6(v24);
  if (BYTE6(v24))
  {
    *(_QWORD *)(v3 - 104) = v2;
    v5 = BYTE6(v24);
    v6 = sub_340F4(0, BYTE6(v24), 0);
    v2 = *(_QWORD *)(v3 - 104);
    if ((_DWORD)v1)
    {
      if ((_DWORD)v1 == 1)
        v7 = (int)a1;
      else
        v7 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v7 = 0;
    }
    *(_QWORD *)(v3 - 136) = v24 & 0x3FFFFFFFFFFFFFFFLL;
    *(_QWORD *)(v3 - 128) = v1;
    while (v5)
    {
      if ((_DWORD)v1)
      {
        if ((_DWORD)v1 == 1)
        {
          if (v7 < (int)a1 || v7 >= a1 >> 32)
            goto LABEL_29;
          v8 = ((uint64_t (*)(uint64_t))__DataStorage._bytes.getter)(v6);
          if (!v8)
          {
            __break(1u);
LABEL_36:
            __break(1u);
          }
          v9 = v8;
          v10 = ((uint64_t (*)(void))__DataStorage._offset.getter)();
          v11 = v7 - v10;
          if (__OFSUB__(v7, v10))
            goto LABEL_32;
        }
        else
        {
          if (v7 < *(_QWORD *)(a1 + 16))
            goto LABEL_31;
          if (v7 >= *(_QWORD *)(a1 + 24))
            goto LABEL_33;
          v13 = ((uint64_t (*)(uint64_t))__DataStorage._bytes.getter)(v6);
          if (!v13)
            goto LABEL_36;
          v9 = v13;
          v14 = ((uint64_t (*)(void))__DataStorage._offset.getter)();
          v11 = v7 - v14;
          if (__OFSUB__(v7, v14))
            goto LABEL_34;
        }
        v12 = *(_BYTE *)(v9 + v11);
      }
      else
      {
        if (v7 >= BYTE6(v24))
          goto LABEL_30;
        *(_QWORD *)(v3 - 118) = a1;
        *(_WORD *)(v3 - 110) = v24;
        *(_BYTE *)(v3 - 108) = BYTE2(v24);
        *(_BYTE *)(v3 - 107) = BYTE3(v24);
        *(_BYTE *)(v3 - 106) = BYTE4(v24);
        *(_BYTE *)(v3 - 105) = BYTE5(v24);
        v12 = *(_BYTE *)(v3 - 118 + v7);
      }
      v15 = sub_5EDC(&qword_1F14C8);
      v16 = swift_allocObject(v15, 72, 7);
      *(_OWORD *)(v16 + 16) = xmmword_1875E0;
      *(_QWORD *)(v16 + 56) = &type metadata for UInt8;
      *(_QWORD *)(v16 + 64) = &protocol witness table for UInt8;
      *(_BYTE *)(v16 + 32) = v12;
      v6 = ((uint64_t (*)(uint64_t, unint64_t, uint64_t))String.init(format:_:))(0x786868323025, 0xE600000000000000, v16);
      v17 = v6;
      v19 = v18;
      *(_QWORD *)(v3 - 104) = v2;
      v21 = *(_QWORD *)(v2 + 16);
      v20 = *(_QWORD *)(v2 + 24);
      if (v21 >= v20 >> 1)
      {
        v6 = sub_340F4(v20 > 1, v21 + 1, 1);
        v2 = *(_QWORD *)(v3 - 104);
      }
      *(_QWORD *)(v2 + 16) = v21 + 1;
      v22 = v2 + 16 * v21;
      *(_QWORD *)(v22 + 32) = v17;
      *(_QWORD *)(v22 + 40) = v19;
      ++v7;
      --v5;
      --v4;
      v1 = *(_QWORD *)(v3 - 128);
      if (!v4)
        return v2;
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    __break(1u);
    JUMPOUT(0x66DD8);
  }
  return v2;
}

uint64_t sub_66E00()
{
  uint64_t result;

  sub_6789C();
  result = OS_os_log.init(subsystem:category:)(0xD000000000000010, 0x80000000001A0280, 0x53676E696E676973, 0xEE00656369767265);
  qword_224580 = result;
  return result;
}

void sub_66E68(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = static Array._allocateBufferUninitialized(minimumCapacity:)(32, &type metadata for UInt8);
  *(_QWORD *)(v3 + 16) = 32;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  __asm { BR              X10 }
}

uint64_t sub_66EE4()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  __int16 v46;
  char v47;
  char v48;
  char v49;
  char v50;

  v45 = v3;
  v46 = v1;
  v47 = BYTE2(v1);
  v48 = BYTE3(v1);
  v49 = BYTE4(v1);
  v50 = BYTE5(v1);
  sub_67488((uint64_t)&v45, (uint64_t)&v45 + BYTE6(v1), v3, v1);
  if (v2)
  {
    sub_3E21C(v3, v1);
    sub_3E21C(v3, v1);
    __break(1u);
    JUMPOUT(0x67464);
  }
  sub_3E21C(v3, v1);
  sub_3E21C(v3, v1);
  v42 = *(_QWORD *)(v4 - 96);
  v43 = v0;
  v5 = sub_677A4((_BYTE *)(v42 + 32), *(_QWORD *)(v42 + 16));
  v7 = v6;
  if (qword_1F00B0 != -1)
    swift_once(&qword_1F00B0, sub_66E00);
  v8 = qword_224580;
  v9 = static os_log_type_t.debug.getter();
  v41 = sub_5EDC(&qword_1F14C8);
  v10 = swift_allocObject(v41, 72, 7);
  *(_OWORD *)(v10 + 16) = xmmword_1875E0;
  sub_66A68(v5, v7);
  v12 = v11;
  v45 = v11;
  v13 = sub_5EDC(&qword_1F03E0);
  v38 = sub_67850();
  v39 = v13;
  v14 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v13, v38);
  v15 = v5;
  v16 = v7;
  v18 = v17;
  swift_bridgeObjectRelease(v12);
  *(_QWORD *)(v10 + 56) = &type metadata for String;
  v19 = sub_4AAD8();
  *(_QWORD *)(v10 + 64) = v19;
  *(_QWORD *)(v10 + 32) = v14;
  *(_QWORD *)(v10 + 40) = v18;
  os_log(_:dso:log:type:_:)("Generated SHA256 from data, SHA256=%@", 37, 2, &dword_0, v8, v9, v10);
  swift_bridgeObjectRelease(v10);
  v20 = v43[5];
  v21 = v43[6];
  sub_49F4(v43 + 2, v20);
  v22 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v21 + 8))(v15, v16, v20, v21);
  v24 = v23;
  v37 = qword_224580;
  v25 = static os_log_type_t.debug.getter();
  v44 = v16;
  v26 = swift_allocObject(v41, 72, 7);
  *(_OWORD *)(v26 + 16) = xmmword_1875E0;
  sub_66A68(v22, v24);
  v28 = v27;
  v45 = v27;
  v29 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v39, v38);
  v40 = v15;
  v31 = v30;
  swift_bridgeObjectRelease(v28);
  *(_QWORD *)(v26 + 56) = &type metadata for String;
  *(_QWORD *)(v26 + 64) = v19;
  *(_QWORD *)(v26 + 32) = v29;
  *(_QWORD *)(v26 + 40) = v31;
  os_log(_:dso:log:type:_:)("Generated signature from SHA256, signature=%@", 45, 2, &dword_0, v37, v25, v26);
  swift_bridgeObjectRelease(v26);
  v32 = Data.base64EncodedString(options:)(0);
  v33 = qword_224580;
  v34 = static os_log_type_t.debug.getter();
  v35 = swift_allocObject(v41, 72, 7);
  *(_OWORD *)(v35 + 16) = xmmword_1875E0;
  *(_QWORD *)(v35 + 56) = &type metadata for String;
  *(_QWORD *)(v35 + 64) = v19;
  *(Swift::String *)(v35 + 32) = v32;
  swift_bridgeObjectRetain(v32._object);
  os_log(_:dso:log:type:_:)("Generated base64 from signature, base64=%@", 42, 2, &dword_0, v33, v34, v35);
  swift_bridgeObjectRelease(v35);
  sub_3E21C(v22, v24);
  sub_3E21C(v40, v44);
  swift_bridgeObjectRelease(v42);
  return v32._countAndFlagsBits;
}

void sub_67488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

unsigned __int8 *sub_674CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const void *v4;
  unsigned __int8 **v5;
  CC_LONG v6;
  unsigned __int8 *v7;
  char isUniquelyReferenced_nonNull_native;

  v6 = BYTE6(a4);
  v7 = *v5;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
  *v5 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v7 = (unsigned __int8 *)sub_3011C(0, *((_QWORD *)v7 + 2), 0, v7);
  *v5 = v7;
  return CC_SHA256(v4, v6, v7 + 32);
}

uint64_t type metadata accessor for SHA256Base64SigningService()
{
  return objc_opt_self(_TtC20BooksPersonalization26SHA256Base64SigningService);
}

uint64_t sub_67618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = __DataStorage._bytes.getter();
  v10 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v10 += a1 - result;
  }
  v11 = __OFSUB__(a2, a1);
  v12 = a2 - a1;
  if (v11)
  {
    __break(1u);
    goto LABEL_13;
  }
  v13 = __DataStorage._length.getter();
  if (v13 >= v12)
    v14 = v12;
  else
    v14 = v13;
  v15 = v10 + v14;
  if (v10)
    v16 = v15;
  else
    v16 = 0;
  sub_67488(v10, v16, a4, a5);
  return sub_3E21C(a4, a5);
}

uint64_t sub_676E4(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;

  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_677A4(_BYTE *__src, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (!a2)
    return 0;
  if (a2 <= 14)
    return sub_676E4(__src, &__src[a2]);
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  __DataStorage.init(bytes:length:)(__src, a2);
  if ((unint64_t)a2 < 0x7FFFFFFF)
    return a2 << 32;
  v6 = type metadata accessor for Data.RangeReference(0);
  result = swift_allocObject(v6, 32, 7);
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

unint64_t sub_67850()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F0E60;
  if (!qword_1F0E60)
  {
    v1 = sub_5F68(&qword_1F03E0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1F0E60);
  }
  return result;
}

unint64_t sub_6789C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F1E88;
  if (!qword_1F1E88)
  {
    v1 = objc_opt_self(OS_os_log);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1F1E88);
  }
  return result;
}

uint64_t sub_678D8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = a1[3];
  v4 = a1[4];
  sub_49F4(a1, v3);
  v5 = type metadata accessor for DelegatingMediaTypesRecommendationService(0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (result)
  {
    a2[3] = v5;
    a2[4] = (uint64_t)&off_1E6120;
    *a2 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_67948@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_67B10(a1, &qword_1F0E40, (uint64_t (*)(_QWORD))type metadata accessor for SingleJointMediaTypeRecommendationService, (uint64_t (*)(_QWORD *, uint64_t))sub_26DB8, (uint64_t)&off_1E8538, a2);
}

uint64_t sub_6796C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v0 = type metadata accessor for DelegatingMediaTypesRecommendationService(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  *(_QWORD *)(v1 + 16) = _swiftEmptyDictionarySingleton;
  v6 = v0;
  v2 = sub_5EDC(&qword_1F1F40);
  v3 = String.init<A>(describing:)(&v6, v2);
  Logger.init(subsystem:category:)(0xD000000000000010, 0x80000000001A0280, v3, v4);
  return v1;
}

uint64_t sub_67A10@<X0>(uint64_t *a1@<X8>)
{
  return sub_67A38((uint64_t)&off_1D99B0, (uint64_t)&off_1D99D8, a1);
}

uint64_t sub_67A24@<X0>(uint64_t *a1@<X8>)
{
  return sub_67A38((uint64_t)&off_1D9A00, (uint64_t)&off_1D9A28, a1);
}

uint64_t sub_67A38@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t inited;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v6 = sub_5EDC(&qword_1F1F38);
  inited = swift_initStackObject(v6, &v11);
  *(_OWORD *)(inited + 16) = xmmword_18FC00;
  *(_BYTE *)(inited + 32) = 0;
  *(_QWORD *)(inited + 40) = sub_89600(a1);
  *(_BYTE *)(inited + 48) = 1;
  *(_QWORD *)(inited + 56) = sub_89600(a2);
  v8 = sub_53218(inited);
  v9 = type metadata accessor for HardcodedMediaTypesRecommendationService();
  result = swift_allocObject(v9, 24, 7);
  *(_QWORD *)(result + 16) = v8;
  a3[3] = v9;
  a3[4] = (uint64_t)&off_1E20D8;
  *a3 = result;
  return result;
}

_QWORD *sub_67AEC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_67B10(a1, &qword_1F1F30, (uint64_t (*)(_QWORD))type metadata accessor for InterestBasedMediaTypesRecommendationService, (uint64_t (*)(_QWORD *, uint64_t))sub_26DB8, (uint64_t)&off_1E3F78, a2);
}

_QWORD *sub_67B10@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t (*a4)(_QWORD *, uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[5];

  v11 = a1[3];
  v12 = a1[4];
  sub_49F4(a1, v11);
  v13 = sub_5EDC(a2);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v17, v13, v13, v11, v12);
  if (v17[3])
  {
    v15 = a3(0);
    v16 = swift_allocObject(v15, 56, 7);
    result = (_QWORD *)a4(v17, v16 + 16);
    a6[3] = v15;
    a6[4] = a5;
    *a6 = v16;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_67BC8(uint64_t a1, _QWORD *a2)
{
  sub_5EDC(&qword_1F1F28);
  sub_49F4(a2, a2[3]);
  JUMPOUT(0x67D08);
}

uint64_t type metadata accessor for MediaTypesRecommendationServiceAssembly()
{
  return objc_opt_self(_TtC20BooksPersonalization39MediaTypesRecommendationServiceAssembly);
}

uint64_t sub_67EC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[3];
  uint64_t v46;
  uint64_t v47;

  v0 = type metadata accessor for CallbackScope(0);
  v43 = *(_QWORD *)(v0 - 8);
  v44 = v0;
  __chkstk_darwin(v0);
  v42 = (char *)&v42 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for Scope(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = ProxyContainer.public.getter(v4);
  v8 = sub_5EDC(&qword_1F1F28);
  v9 = RegistrationContainer.register<A>(_:name:factory:)(v8, 0, 0, sub_678D8, 0, v8);
  swift_release(v7);
  v10 = enum case for Scope.singleton(_:);
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v11(v6, enum case for Scope.singleton(_:), v2);
  v12 = Definition.inScope(_:)(v6);
  swift_release(v12);
  swift_release(v9);
  v13 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
  v14 = v13(v6, v2);
  v15 = ProxyContainer.public.getter(v14);
  v16 = RegistrationContainer.register<A>(_:name:factory:)(v8, 0x6F4A656C676E6973, 0xEB00000000746E69, sub_67948, 0, v8);
  swift_release(v15);
  v11(v6, v10, v2);
  v17 = Definition.inScope(_:)(v6);
  swift_release(v17);
  swift_release(v16);
  v18 = v13(v6, v2);
  v19 = ProxyContainer.public.getter(v18);
  v20 = type metadata accessor for DelegatingMediaTypesRecommendationService(0);
  v21 = RegistrationContainer.register<A>(_:name:factory:)(v20, 0, 0, sub_6796C, 0, v20);
  swift_release(v19);
  v11(v6, v10, v2);
  v22 = Definition.inScope(_:)(v6);
  swift_release(v22);
  swift_release(v21);
  v23 = v13(v6, v2);
  v24 = ProxyContainer.private.getter(v23);
  v25 = RegistrationContainer.register<A>(_:name:factory:)(v8, 0x6F6A7369446C6C61, 0xEB00000000746E69, sub_67A10, 0, v8);
  swift_release(v24);
  v11(v6, v10, v2);
  v26 = Definition.inScope(_:)(v6);
  swift_release(v26);
  swift_release(v25);
  v27 = v13(v6, v2);
  v28 = ProxyContainer.private.getter(v27);
  v29 = RegistrationContainer.register<A>(_:name:factory:)(v8, 0x746E696F4A6C6C61, 0xE800000000000000, sub_67A24, 0, v8);
  swift_release(v28);
  v11(v6, v10, v2);
  v30 = Definition.inScope(_:)(v6);
  swift_release(v30);
  swift_release(v29);
  v31 = v13(v6, v2);
  v32 = ProxyContainer.private.getter(v31);
  v33 = RegistrationContainer.register<A>(_:name:factory:)(v8, 0x7473657265746E69, 0xED00006465736142, sub_67AEC, 0, v8);
  swift_release(v32);
  v11(v6, v10, v2);
  v34 = Definition.inScope(_:)(v6);
  swift_release(v34);
  swift_release(v33);
  v35 = v13(v6, v2);
  ProxyContainer.callback.getter(v45, v35);
  v36 = v46;
  v37 = v47;
  sub_49F4(v45, v46);
  v39 = v42;
  v38 = v43;
  v40 = v44;
  (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v42, enum case for CallbackScope.any(_:), v44);
  dispatch thunk of CallbackRegistrationType.whenResolving<A>(_:scope:callback:)(v20, v39, sub_67BC8, 0, v20, v36, v37);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
  return sub_62F8(v45);
}

uint64_t sub_682F8(uint64_t a1)
{
  type metadata accessor for Array(0);
  return a1;
}

uint64_t Array.split(maxSubsequenceSize:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[8];
  uint64_t v21;
  uint64_t v22;

  if (a1)
  {
    v20[7] = 0;
    v21 = Array.count.getter(a2, a3);
    v22 = a1;
    __chkstk_darwin(v21);
    v20[2] = a3;
    v20[3] = a1;
    v20[4] = a2;
    v6 = sub_5EDC(&qword_1F1F48);
    v7 = type metadata accessor for ArraySlice(0, a3);
    v8 = sub_68C34();
    return sub_68458((void (*)(char *, char *))sub_68C14, (uint64_t)v20, v6, v7, (uint64_t)&type metadata for Never, v8, (uint64_t)&protocol witness table for Never, v9);
  }
  else
  {
    v11 = type metadata accessor for ArraySlice(255, a3);
    v12 = type metadata accessor for _ContiguousArrayStorage(0, v11);
    v13 = swift_allocObject(v12, 64, 7);
    v10 = static Array._adoptStorage(_:count:)(v13, 1);
    v15 = v14;
    *v14 = ArraySlice.init()(a3);
    v15[1] = v16;
    v15[2] = v17;
    v15[3] = v18;
    type metadata accessor for Array(0);
  }
  return v10;
}

uint64_t sub_68458(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  void (*v16)(char *, char *, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  Swift::Int v34;
  uint64_t v35;
  char *v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t result;
  uint64_t AssociatedConformanceWitness;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  char *v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, char *);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v50 = a8;
  v51 = a5;
  v9 = v8;
  v63 = a4;
  v64 = a1;
  v65 = a2;
  v49 = *(_QWORD *)(a5 - 8);
  v11 = ((uint64_t (*)(void))__chkstk_darwin)();
  v62 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v61 = (char *)&v46 - v13;
  v55 = v14;
  v16 = v15;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v14);
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v48 = (char *)&v46 - v19;
  v20 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v52 = *(_QWORD *)(v20 - 8);
  v53 = v20;
  v21 = __chkstk_darwin(v20);
  v59 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v46 - v24;
  v26 = __chkstk_darwin(v23);
  v47 = (char *)&v46 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v46 - v29;
  v58 = *((_QWORD *)v16 - 1);
  __chkstk_darwin(v28);
  v57 = (char *)&v46 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = swift_getAssociatedTypeWitness(0, a6);
  v54 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v56 = (char *)&v46 - v32;
  v33 = v16;
  v34 = dispatch thunk of Sequence.underestimatedCount.getter(v16, a6);
  v35 = v63;
  v67 = ContiguousArray.init()(v63);
  v63 = type metadata accessor for ContiguousArray(0, v35);
  ContiguousArray.reserveCapacity(_:)(v34);
  (*(void (**)(char *, _QWORD, _QWORD *))(v58 + 16))(v57, v60, v16);
  v36 = v56;
  v60 = v33;
  v37 = v33;
  v38 = v55;
  result = dispatch thunk of Sequence.makeIterator()(v37);
  if (v34 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v34)
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v38, v60, v66, &protocol requirements base descriptor for Sequence, &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    while (1)
    {
      dispatch thunk of IteratorProtocol.next()(v66, AssociatedConformanceWitness);
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v25, 1, AssociatedTypeWitness);
      if ((_DWORD)result == 1)
        goto LABEL_18;
      v64(v25, v62);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v54 + 8))(v36, v66);
        swift_release(v67);
        (*(void (**)(uint64_t, char *, uint64_t))(v49 + 32))(v50, v62, v51);
        return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v25, AssociatedTypeWitness);
      }
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v25, AssociatedTypeWitness);
      ContiguousArray.append(_:)(v30, v63);
      if (!--v34)
      {
        v41 = v59;
        v42 = v66;
        goto LABEL_9;
      }
    }
  }
  v42 = v66;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v38, v60, v66, &protocol requirements base descriptor for Sequence, &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v41 = v59;
LABEL_9:
  dispatch thunk of IteratorProtocol.next()(v42, AssociatedConformanceWitness);
  v62 = *(char **)(v18 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v62)(v41, 1, AssociatedTypeWitness) == 1)
  {
    v43 = v59;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v54 + 8))(v36, v66);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v43, v53);
    return v67;
  }
  else
  {
    v60 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    v44 = v47;
    v45 = v48;
    v43 = v59;
    while (1)
    {
      v60(v45, v43, AssociatedTypeWitness);
      v64(v45, v61);
      if (v9)
        break;
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v45, AssociatedTypeWitness);
      ContiguousArray.append(_:)(v44, v63);
      dispatch thunk of IteratorProtocol.next()(v66, AssociatedConformanceWitness);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v62)(v43, 1, AssociatedTypeWitness) == 1)
        goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v45, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v36, v66);
    swift_release(v67);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v49 + 32))(v50, v61, v51);
  }
}

int64x2_t *sub_68964(unint64_t a1, unint64_t a2)
{
  int64x2_t *result;
  unint64_t *v5;
  unint64_t v6;
  int64x2_t v7;
  int64x2_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = (int64x2_t *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  if (!a2)
    return (int64x2_t *)&_swiftEmptyArrayStorage;
  result = (int64x2_t *)static Array._allocateBufferUninitialized(minimumCapacity:)(a2, &type metadata for Int);
  result[1].i64[0] = a2;
  v5 = (unint64_t *)&result[2];
  if (a2 < 4)
  {
    v6 = 0;
LABEL_9:
    v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  v6 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v5 += a2 & 0xFFFFFFFFFFFFFFFCLL;
  v7 = vdupq_n_s64(a1);
  v8 = result + 3;
  v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v6 != a2)
    goto LABEL_9;
  return result;
}

_QWORD *sub_68A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD *result;

  if (a2 < 0)
  {
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
  }
  else
  {
    if (a2)
    {
      v4 = static Array._allocateBufferUninitialized(minimumCapacity:)(a2, &type metadata for EventFeatures);
      v5 = v4;
      *(_QWORD *)(v4 + 16) = a2;
      *(_OWORD *)(v4 + 32) = *(_OWORD *)a1;
      v7 = *(_OWORD *)(a1 + 32);
      v6 = *(_OWORD *)(a1 + 48);
      v8 = *(_OWORD *)(a1 + 16);
      *(_QWORD *)(v4 + 96) = *(_QWORD *)(a1 + 64);
      *(_OWORD *)(v4 + 64) = v7;
      *(_OWORD *)(v4 + 80) = v6;
      *(_OWORD *)(v4 + 48) = v8;
      if (a2 != 1)
      {
        *(_OWORD *)(v4 + 104) = *(_OWORD *)a1;
        v9 = *(_OWORD *)(a1 + 16);
        v10 = *(_OWORD *)(a1 + 32);
        v11 = *(_OWORD *)(a1 + 48);
        *(_QWORD *)(v4 + 168) = *(_QWORD *)(a1 + 64);
        *(_OWORD *)(v4 + 152) = v11;
        *(_OWORD *)(v4 + 136) = v10;
        *(_OWORD *)(v4 + 120) = v9;
        v12 = a2 - 2;
        if (v12)
        {
          v13 = v4 + 176;
          do
          {
            sub_6A6FC((_QWORD *)a1);
            *(_OWORD *)v13 = *(_OWORD *)a1;
            v15 = *(_OWORD *)(a1 + 32);
            v14 = *(_OWORD *)(a1 + 48);
            v16 = *(_OWORD *)(a1 + 16);
            *(_QWORD *)(v13 + 64) = *(_QWORD *)(a1 + 64);
            *(_OWORD *)(v13 + 32) = v15;
            *(_OWORD *)(v13 + 48) = v14;
            *(_OWORD *)(v13 + 16) = v16;
            v13 += 72;
            --v12;
          }
          while (v12);
        }
        sub_6A6FC((_QWORD *)a1);
      }
    }
    else
    {
      sub_6A74C((_QWORD *)a1);
      return _swiftEmptyArrayStorage;
    }
    return (_QWORD *)v5;
  }
  return result;
}

uint64_t *sub_68B90@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t **a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v5 = *result;
  v6 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else
  {
    result = (uint64_t *)Array.count.getter(a3, a4);
    if ((uint64_t)result >= v6)
      v8 = (_QWORD *)v6;
    else
      v8 = result;
    if ((uint64_t)v8 >= v5)
    {
      result = (uint64_t *)Array.subscript.getter(v5);
      *a5 = result;
      a5[1] = v9;
      a5[2] = v10;
      a5[3] = v11;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t *sub_68C14@<X0>(uint64_t *a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t *v2;

  return sub_68B90(a1, v2[3], v2[4], v2[2], a2);
}

unint64_t sub_68C34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F1F50;
  if (!qword_1F1F50)
  {
    v1 = sub_5F68(&qword_1F1F48);
    result = swift_getWitnessTable(&protocol conformance descriptor for StrideTo<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1F1F50);
  }
  return result;
}

uint64_t Array.compactMapped<A>(by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t WitnessTable;
  _QWORD v15[9];
  _QWORD v16[2];
  uint64_t v17;

  v16[1] = a3;
  v11 = type metadata accessor for Array(0);
  v16[0] = Dictionary.init()(a5, v11, a6);
  v15[2] = a4;
  v15[3] = a5;
  v15[4] = a6;
  v15[5] = a1;
  v15[6] = a2;
  v12 = type metadata accessor for Dictionary(0, a5, v11, a6);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v11);
  Sequence.reduce<A>(into:_:)(&v17, v16, sub_6A454, v15, v11, v12, WitnessTable);
  return v17;
}

uint64_t sub_68D50(uint64_t *a1, unint64_t a2, void (*a3)(unint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t result;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  _BOOL8 v35;
  Swift::Int v36;
  char v37;
  uint64_t v38;
  Swift::Bool v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  int isUniquelyReferenced_nonNull_native;
  char *v52;
  uint64_t v53;
  char *v54;
  _QWORD *v55;
  unint64_t v56;
  char *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;

  v61 = (char *)a4;
  v58 = a1;
  v59 = a7;
  v60 = a5;
  v55 = *(_QWORD **)(a5 - 8);
  __chkstk_darwin(a1);
  v57 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Optional(0, v11);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v49 - v15;
  v17 = *(_QWORD *)(a6 - 8);
  v18 = __chkstk_darwin(v14);
  v54 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v49 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v49 - v23;
  v56 = a2;
  a3(a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, a6) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v24, v16, a6);
  v52 = v24;
  v53 = v17;
  v50 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  v50(v22, v24, a6);
  v26 = (_QWORD *)swift_allocObject(&unk_1DFE60, 40, 7);
  v28 = v59;
  v27 = v60;
  v26[2] = v60;
  v26[3] = a6;
  v26[4] = v28;
  v29 = v57;
  ((void (*)(char *, unint64_t, uint64_t))v55[2])(v57, v56, v27);
  v30 = (_QWORD *)swift_allocObject(&unk_1DFE88, 56, 7);
  v30[2] = v27;
  v30[3] = a6;
  v30[4] = v28;
  v30[5] = sub_6AA4C;
  v55 = v26;
  v30[6] = v26;
  v31 = v58;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v58);
  v62 = *v31;
  v32 = v62;
  *v31 = 0x8000000000000000;
  v61 = v22;
  v56 = sub_12D340((uint64_t)v22, a6, v28);
  v34 = *(_QWORD *)(v32 + 16);
  v35 = (v33 & 1) == 0;
  v36 = v34 + v35;
  if (__OFADD__(v34, v35))
  {
    __break(1u);
LABEL_12:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(a6);
    __break(1u);
    return result;
  }
  v37 = v33;
  v38 = type metadata accessor for Array(255);
  type metadata accessor for _NativeDictionary(0, a6, v38, v28);
  v39 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v36);
  v40 = v62;
  if (v39)
  {
    v56 = sub_12D340((uint64_t)v61, a6, v28);
    if ((v37 & 1) != (v41 & 1))
      goto LABEL_12;
  }
  v42 = *v31;
  *v31 = v40;
  swift_bridgeObjectRelease(v42);
  v43 = *v31;
  v44 = *v31;
  if ((v37 & 1) != 0)
  {
    swift_bridgeObjectRetain(v44);
    v45 = (uint64_t)v61;
  }
  else
  {
    v46 = swift_bridgeObjectRetain(v44);
    v62 = ((uint64_t (*)(uint64_t))v30[5])(v46);
    v47 = v54;
    v45 = (uint64_t)v61;
    v50(v54, v61, a6);
    _NativeDictionary._insert(at:key:value:)(v56, v47, &v62, v43, a6, v38, v28);
  }
  swift_bridgeObjectRelease(v43);
  Array.append(_:)(v29, v38);
  v48 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
  v48(v45, a6);
  v48((uint64_t)v52, a6);
  swift_release(v30);
  return swift_release(v55);
}

uint64_t Array.compactMapAsync<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  return swift_task_switch(sub_69108, 0, 0);
}

uint64_t sub_69108()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t TupleTypeMetadata2;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 40);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for Int, v1, 0, 0);
  v5 = type metadata accessor for Optional(0, TupleTypeMetadata2);
  v6 = swift_task_alloc(64);
  *(_QWORD *)(v0 + 64) = v6;
  v7 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v6 + 16) = v2;
  *(_QWORD *)(v6 + 24) = v1;
  *(_QWORD *)(v6 + 32) = v3;
  *(_OWORD *)(v6 + 40) = v7;
  v8 = type metadata accessor for Array(0);
  v9 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 72) = v9;
  *v9 = v0;
  v9[1] = sub_691F4;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 16, v5, v8, 0, 0, &unk_1F1F68, v6, v5);
}

uint64_t sub_691F4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 72));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_69250, 0, 0);
}

uint64_t sub_69250()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_6925C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v7[16] = a6;
  v7[17] = a7;
  v7[14] = a4;
  v7[15] = a5;
  v7[12] = a2;
  v7[13] = a3;
  v7[11] = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, &type metadata for Int, a7, 0, 0);
  v7[18] = TupleTypeMetadata2;
  v10 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v7[19] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[20] = swift_task_alloc(v11);
  v7[21] = swift_task_alloc(v11);
  v7[22] = swift_task_alloc(v11);
  v12 = type metadata accessor for Optional(0, TupleTypeMetadata2);
  v7[23] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v7[24] = v13;
  v7[25] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a6 - 8);
  v7[26] = v14;
  v15 = *(_QWORD *)(v14 + 64);
  v7[27] = v15;
  v7[28] = swift_task_alloc((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_5EDC(&qword_1F15F0);
  v7[29] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Optional(0, v12);
  v7[30] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for TaskGroup.Iterator(0, v12);
  v7[31] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v7[32] = v19;
  v7[33] = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = swift_getTupleTypeMetadata2(255, &type metadata for Int, a6, "offset element ", 0);
  v7[34] = v20;
  v21 = type metadata accessor for Optional(0, v20);
  v7[35] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v7[36] = v22;
  v23 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[37] = swift_task_alloc(v23);
  v7[38] = swift_task_alloc(v23);
  return swift_task_switch(sub_6942C, 0, 0);
}

uint64_t sub_6942C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t WitnessTable;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, _QWORD);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;

  v31 = *(_QWORD *)(v0 + 288);
  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 216);
  v28 = *(_QWORD *)(v0 + 208);
  *(_QWORD *)(v0 + 48) = *(_QWORD *)(v0 + 104);
  v3 = type metadata accessor for Array(0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v3);
  Sequence.enumerated()(v3, WitnessTable);
  *(_QWORD *)(v0 + 56) = *(_QWORD *)(v0 + 40);
  v5 = type metadata accessor for EnumeratedSequence(0, v3, WitnessTable);
  EnumeratedSequence.makeIterator()(v5);
  v27 = v2 + 7;
  v29 = v1;
  v30 = type metadata accessor for EnumeratedSequence.Iterator(0, v3, WitnessTable);
  while (1)
  {
    v7 = *(_QWORD *)(v0 + 296);
    v6 = *(_QWORD *)(v0 + 304);
    v9 = *(_QWORD *)(v0 + 272);
    v8 = *(_QWORD *)(v0 + 280);
    EnumeratedSequence.Iterator.next()(v30);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32))(v6, v7, v8);
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 48))(v6, 1, v9);
    v11 = *(_QWORD *)(v0 + 184);
    v12 = *(_QWORD **)(v0 + 96);
    if (v10 == 1)
      break;
    v13 = *(uint64_t **)(v0 + 304);
    v15 = *(char **)(v0 + 224);
    v14 = *(_QWORD *)(v0 + 232);
    v32 = *(_QWORD *)(v0 + 112);
    v33 = *(_QWORD *)(v0 + 120);
    v34 = *v13;
    v16 = (char *)v13 + *(int *)(v1 + 48);
    v17 = type metadata accessor for TaskPriority(0);
    v35 = *(_OWORD *)(v0 + 128);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v14, 1, 1, v17);
    v18 = *(void (**)(char *, char *, _QWORD))(v28 + 32);
    v18(v15, v16, v35);
    v19 = *(unsigned __int8 *)(v28 + 80);
    v20 = (v19 + 64) & ~v19;
    v21 = (v27 + v20) & 0xFFFFFFFFFFFFFFF8;
    v22 = swift_allocObject(&unk_1DFE10, v21 + 8, v19 | 7);
    *(_QWORD *)(v22 + 16) = 0;
    *(_QWORD *)(v22 + 24) = 0;
    *(_OWORD *)(v22 + 32) = v35;
    *(_QWORD *)(v22 + 48) = v32;
    *(_QWORD *)(v22 + 56) = v33;
    v18((char *)(v22 + v20), v15, v35);
    v1 = v29;
    *(_QWORD *)(v22 + v21) = v34;
    v23 = type metadata accessor for TaskGroup(0, v11);
    swift_retain(v33);
    sub_69D64(v14, (uint64_t)&unk_1F1F78, v22, v23);
    sub_6A910(v14);
  }
  v24 = *(_QWORD *)(v0 + 144);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  *(_QWORD *)(v0 + 64) = Array.init()(v24);
  TaskGroup.makeAsyncIterator()(*v12, v11);
  v25 = (_QWORD *)swift_task_alloc(async function pointer to TaskGroup.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 312) = v25;
  *v25 = v0;
  v25[1] = sub_696D4;
  return TaskGroup.Iterator.next(isolation:)(*(_QWORD *)(v0 + 240), 0, 0, *(_QWORD *)(v0 + 248));
}

uint64_t sub_696D4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 312));
  return swift_task_switch(sub_69728, 0, 0);
}

uint64_t sub_69728()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t WitnessTable;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 192);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v35 = *(_QWORD *)(v0 + 304);
    v36 = *(_QWORD *)(v0 + 296);
    v4 = *(_QWORD *)(v0 + 264);
    v37 = *(_QWORD *)(v0 + 232);
    v38 = *(_QWORD *)(v0 + 224);
    v39 = *(_QWORD *)(v0 + 200);
    v40 = *(_QWORD *)(v0 + 176);
    v42 = *(_QWORD *)(v0 + 168);
    v44 = *(_QWORD *)(v0 + 160);
    v5 = *(char **)(v0 + 136);
    v6 = *(_QWORD *)(v0 + 128);
    v34 = *(uint64_t **)(v0 + 88);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 256) + 8))(v4, *(_QWORD *)(v0 + 248));
    v7 = *(_QWORD *)(v0 + 64);
    *(_QWORD *)(v0 + 72) = v7;
    v8 = swift_task_alloc(32);
    *(_QWORD *)(v8 + 16) = v6;
    *(_QWORD *)(v8 + 24) = v5;
    v9 = type metadata accessor for Array(0);
    swift_bridgeObjectRetain(v7);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v9);
    v11 = Sequence.sorted(by:)(sub_6A79C, v8, v9, WitnessTable);
    swift_task_dealloc(v8);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
    *(_QWORD *)(v0 + 80) = v11;
    v12 = swift_task_alloc(32);
    *(_QWORD *)(v12 + 16) = v6;
    *(_QWORD *)(v12 + 24) = v5;
    v13 = swift_getWitnessTable(&protocol conformance descriptor for [A], v9);
    v15 = sub_E2084((void (*)(char *, char *))sub_6A7B0, v12, v9, v5, (uint64_t)&type metadata for Never, v13, (uint64_t)&protocol witness table for Never, v14);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
    swift_task_dealloc(v12);
    *v34 = v15;
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v4);
    swift_task_dealloc(v1);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v42);
    swift_task_dealloc(v44);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 200);
    v18 = *(_QWORD *)(v0 + 144);
    v19 = *(_QWORD *)(v0 + 152);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v17, v1, v2);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) != 1)
    {
      v20 = *(uint64_t **)(v0 + 200);
      v21 = *(_QWORD **)(v0 + 168);
      v41 = *(uint64_t **)(v0 + 176);
      v22 = *(_QWORD **)(v0 + 160);
      v43 = *(_QWORD *)(v0 + 152);
      v24 = *(_QWORD *)(v0 + 136);
      v23 = *(_QWORD *)(v0 + 144);
      v25 = *(int *)(v23 + 48);
      v26 = (char *)v41 + v25;
      v27 = *v20;
      *v41 = *v20;
      v28 = *(_QWORD *)(v24 - 8);
      v29 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
      v29((char *)v41 + v25, (char *)v20 + v25, v24);
      v30 = (char *)v21 + *(int *)(v23 + 48);
      *v21 = v27;
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v30, v26, v24);
      v31 = (char *)v22 + *(int *)(v23 + 48);
      *v22 = v27;
      v29(v31, v30, v24);
      v32 = type metadata accessor for Array(0);
      Array.append(_:)(v22, v32);
      (*(void (**)(uint64_t *, uint64_t))(v43 + 8))(v41, v23);
    }
    v33 = (_QWORD *)swift_task_alloc(async function pointer to TaskGroup.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 312) = v33;
    *v33 = v0;
    v33[1] = sub_696D4;
    return TaskGroup.Iterator.next(isolation:)(*(_QWORD *)(v0 + 240), 0, 0, *(_QWORD *)(v0 + 248));
  }
}

uint64_t sub_69A58(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;

  v7[3] = a7;
  v7[4] = v17;
  v7[2] = a1;
  v10 = ((uint64_t (*)(_QWORD))type metadata accessor for Optional)(0);
  v7[5] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v7[6] = v11;
  v12 = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7[7] = v12;
  v13 = *(_QWORD *)(v17 - 8);
  v7[8] = v13;
  v7[9] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (uint64_t (*)(uint64_t, uint64_t))((char *)a4 + *a4);
  v14 = (_QWORD *)swift_task_alloc(a4[1]);
  v7[10] = v14;
  *v14 = v7;
  v14[1] = sub_69B2C;
  return v16(v12, a6);
}

uint64_t sub_69B2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 80));
  if (v0)
  {
    swift_errorRelease(v0);
    v2 = sub_69CC4;
  }
  else
  {
    v2 = sub_69B98;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_69B98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  uint64_t TupleTypeMetadata2;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t);
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3);
  v5 = *(_QWORD **)(v0 + 16);
  if (v4 == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 48) + 8))(v1, *(_QWORD *)(v0 + 40));
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, &type metadata for Int, v3, 0, 0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(v5, 1, 1, TupleTypeMetadata2);
  }
  else
  {
    v7 = *(char **)(v0 + 72);
    v8 = *(_QWORD *)(v0 + 24);
    v9 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 32);
    v9(v7, v1, v3);
    v10 = swift_getTupleTypeMetadata2(0, &type metadata for Int, v3, 0, 0);
    v11 = (char *)v5 + *(int *)(v10 + 48);
    *v5 = v8;
    v9(v11, (uint64_t)v7, v3);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v5, 0, 1, v10);
  }
  v12 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_69CC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t TupleTypeMetadata2;
  uint64_t v4;

  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 64) + 56))(*(_QWORD *)(v0 + 56), 1, 1, *(_QWORD *)(v0 + 32));
  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 16);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 8))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 40));
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, &type metadata for Int, v1, 0, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(v2, 1, 1, TupleTypeMetadata2);
  v4 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_69D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD v30[3];
  _QWORD v31[4];

  v5 = v4;
  v10 = sub_5EDC(&qword_1F15F0);
  __chkstk_darwin(v10);
  v12 = (char *)&v30[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_6A950(a1, (uint64_t)v12);
  v13 = type metadata accessor for TaskPriority(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_6A910((uint64_t)v12);
    v15 = 12544;
    v16 = *(_QWORD *)(a3 + 16);
    if (v16)
    {
LABEL_3:
      v17 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v16);
      swift_unknownObjectRetain(v16);
      v19 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v17);
      v21 = v20;
      swift_unknownObjectRelease(v16);
      goto LABEL_6;
    }
  }
  else
  {
    v22 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v12, v13);
    v15 = v22 | 0x3100;
    v16 = *(_QWORD *)(a3 + 16);
    if (v16)
      goto LABEL_3;
  }
  v19 = 0;
  v21 = 0;
LABEL_6:
  v23 = *v5;
  v24 = (_QWORD *)swift_allocObject(&unk_1DFE38, 40, 7);
  v25 = *(_QWORD *)(a4 + 16);
  v24[2] = v25;
  v24[3] = a2;
  v24[4] = a3;
  v26 = (_QWORD *)(v21 | v19);
  if (v21 | v19)
  {
    v31[0] = 0;
    v31[1] = 0;
    v26 = v31;
    v31[2] = v19;
    v31[3] = v21;
  }
  v30[0] = 1;
  v30[1] = v26;
  v30[2] = v23;
  v27 = swift_task_create(v15, v30, v25, &unk_1F1F88, v24);
  return swift_release(v27);
}

uint64_t sub_69F08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, &type metadata for Int, a2, 0, 0);
  v8 = *(int *)(__chkstk_darwin(TupleTypeMetadata2) + 48);
  v9 = (char *)&v13 + v8 - v7;
  v10 = a1 + v8;
  v11 = *(_QWORD *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v9, v10, a2);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a3, v9, a2);
}

uint64_t Array.permutations()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t WitnessTable;
  uint64_t v11;
  unint64_t v12;
  int64x2_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64x2_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = a1;
  v29 = a1;
  v4 = type metadata accessor for Array(255);
  v5 = type metadata accessor for _ContiguousArrayStorage(0, v4);
  v6 = swift_allocObject(v5, 40, 7);
  swift_bridgeObjectRetain(v3);
  v7 = static Array._adoptStorage(_:count:)(v6, 1);
  v9 = v8;
  v28 = v3;
  swift_bridgeObjectRetain(v3);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
  *v9 = Array.init<A>(_:)(&v28, a2, v4, WitnessTable);
  v11 = type metadata accessor for Array(0);
  v28 = v7;
  v12 = Array.count.getter(v3, a2);
  v13 = sub_68964(0, v12);
  v14 = swift_bridgeObjectRetain(v3);
  v15 = Array.count.getter(v14, a2);
  swift_bridgeObjectRelease(v3);
  if (v15 <= 0)
  {
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
LABEL_17:
      v13 = (int64x2_t *)sub_6A518(v13);
    v16 = 0;
    v17 = v13 + 2;
    do
    {
      if ((unint64_t)v16 >= v13[1].i64[0])
      {
        __break(1u);
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
      v20 = v17->i64[v16];
      if (v20 >= v16)
      {
        v17->i64[v16++] = 0;
      }
      else
      {
        v26 = v16;
        v27 = (v16 << 63 >> 63) & v20;
        v21 = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
        MutableCollection.swapAt(_:_:)(&v27, &v26, v4, v21);
        v3 = v29;
        v27 = v29;
        swift_bridgeObjectRetain(v29);
        v27 = Array.init<A>(_:)(&v27, a2, v4, WitnessTable);
        Array.append(_:)(&v27, v11);
        if ((unint64_t)v16 >= v13[1].i64[0])
          goto LABEL_15;
        v22 = v17->i64[v16];
        v23 = __OFADD__(v22, 1);
        v24 = v22 + 1;
        if (v23)
          goto LABEL_16;
        v17->i64[v16] = v24;
        v16 = 0;
      }
      v18 = swift_bridgeObjectRetain(v3);
      v19 = Array.count.getter(v18, a2);
      swift_bridgeObjectRelease(v3);
    }
    while (v16 < v19);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v3);
    return v28;
  }
  return v7;
}

uint64_t Array.truncate(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v12[2];
  _OWORD v13[2];

  v4 = a2;
  if (Array.count.getter(a2, a3) <= a1)
  {
    swift_bridgeObjectRetain(v4);
  }
  else
  {
    *(_QWORD *)&v13[0] = v4;
    v6 = type metadata accessor for Array(0);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v6);
    Sequence.shuffled()(v6, WitnessTable);
    v8 = swift_getWitnessTable(&protocol conformance descriptor for [A], v6);
    Collection.prefix(_:)(v13, a1, v6, v8);
    v12[0] = v13[0];
    v12[1] = v13[1];
    v9 = type metadata accessor for ArraySlice(0, a3);
    v10 = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v9);
    return Array.init<A>(_:)(v12, a3, v9, v10);
  }
  return v4;
}

uint64_t Array.conform(repeating:inLength:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v7 = Array.truncate(_:)(a2, a3, a4);
  result = Array.count.getter(v7, a4);
  if (result == a2)
    return v7;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    v9 = sub_6A64C(a1, a2 - result, a4);
    v10 = static Array.+ infix(_:_:)(v7, v9, a4);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v7);
    return v10;
  }
  return result;
}

uint64_t sub_6A3A4(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_6A408;
  return v6(a1);
}

uint64_t sub_6A408()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_6A454(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;

  return sub_68D50(a1, a2, *(void (**)(unint64_t))(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_6A474(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = v2[5];
  v10 = v2[6];
  v11 = (_QWORD *)swift_task_alloc(dword_1F1F64);
  *(_QWORD *)(v3 + 16) = v11;
  *v11 = v3;
  v11[1] = sub_6AA68;
  return sub_6925C(a1, a2, v8, v9, v10, v6, v7);
}

_QWORD *sub_6A504(_QWORD *a1)
{
  return sub_2FEC0(0, a1[2], 0, a1);
}

_QWORD *sub_6A518(_QWORD *a1)
{
  return sub_30214(0, a1[2], 0, a1);
}

_QWORD *sub_6A52C(_QWORD *a1)
{
  return sub_30694(0, a1[2], 0, a1);
}

_QWORD *sub_6A540(_QWORD *a1)
{
  return sub_30C5C(0, a1[2], 0, a1);
}

uint64_t sub_6A554(unint64_t a1)
{
  return sub_30DAC(0, *(_QWORD *)(a1 + 16), 0, a1);
}

_QWORD *sub_6A568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *result;

  if (a3 < 0)
  {
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
  }
  else
  {
    if (!a3)
      return &_swiftEmptyArrayStorage;
    v6 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(a3, &type metadata for String);
    v7 = v6;
    v6[2] = a3;
    v6[4] = a1;
    v6[5] = a2;
    v8 = a3 - 1;
    if (v8)
    {
      v9 = v6 + 7;
      do
      {
        *(v9 - 1) = a1;
        *v9 = a2;
        swift_bridgeObjectRetain(a2);
        v9 += 2;
        --v8;
      }
      while (v8);
    }
    swift_bridgeObjectRetain(a2);
    return v7;
  }
  return result;
}

uint64_t sub_6A64C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = static Array._allocateUninitialized(_:)(a2, a3);
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v8 = result;
    if (a2)
    {
      v9 = v7;
      v10 = *(_QWORD *)(a3 - 8);
      v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
      v11(v7, a1, a3);
      v12 = a2 - 1;
      if (v12)
      {
        v13 = *(_QWORD *)(v10 + 72);
        v14 = v9 + v13;
        do
        {
          v11(v14, a1, a3);
          v14 += v13;
          --v12;
        }
        while (v12);
      }
    }
    type metadata accessor for Array(0);
    return v8;
  }
  return result;
}

_QWORD *sub_6A6FC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[5];
  v3 = a1[7];
  v4 = a1[8];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *sub_6A74C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a1[5];
  v4 = a1[7];
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

BOOL sub_6A79C(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

uint64_t sub_6A7B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_69F08(a1, *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_6A7CC()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *((_QWORD *)v0 + 4);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 64) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease(*((_QWORD *)v0 + 2));
  swift_release(*((_QWORD *)v0 + 7));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_6A84C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(v1[4] - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = (int *)v1[6];
  v9 = v1[7];
  v10 = (uint64_t)v1 + v5;
  v11 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v12 = (_QWORD *)swift_task_alloc(dword_1F1F74);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_4814;
  return sub_69A58(a1, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_6A910(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5EDC(&qword_1F15F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_6A950(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5EDC(&qword_1F15F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_6A998()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_6A9BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 24);
  v5 = (_QWORD *)swift_task_alloc(dword_1F1F84);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_4814;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1F1F80 + dword_1F1F80))(a1, v4);
}

uint64_t sub_6AA3C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_6AA4C()
{
  uint64_t v0;

  return static Array._allocateUninitialized(_:)(0, *(_QWORD *)(v0 + 16));
}

uint64_t sub_6AA58()
{
  uint64_t v0;

  return swift_deallocObject(v0, 56, 7);
}

_UNKNOWN **static EventType.allCases.getter()
{
  return &off_1D5F78;
}

void sub_6AA78(_QWORD *a1@<X8>)
{
  *a1 = &off_1D5F78;
}

uint64_t Event.isSample.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  int EnumCaseMultiPayload;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = type metadata accessor for Event(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_6AB9C(v0, (uint64_t)v3);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v3, v1);
  if (EnumCaseMultiPayload == 4 || EnumCaseMultiPayload == 1)
  {
    swift_bridgeObjectRelease(*((_QWORD *)v3 + 1));
    v5 = sub_5EDC(&qword_1F1F90);
    v6 = &v3[*(int *)(v5 + 48)];
    v7 = v3[*(int *)(v5 + 64)];
    v8 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    sub_6ABE0((uint64_t)v3);
    return 2;
  }
  return v7;
}

uint64_t type metadata accessor for Event(uint64_t a1)
{
  uint64_t result;

  result = qword_1F2050;
  if (!qword_1F2050)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Event);
  return result;
}

uint64_t sub_6AB9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Event(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_6ABE0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Event(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Event.endProgress.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  int EnumCaseMultiPayload;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = type metadata accessor for Event(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_6AB9C(v0, (uint64_t)v3);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v3, v1);
  if (EnumCaseMultiPayload == 4 || EnumCaseMultiPayload == 1)
  {
    swift_bridgeObjectRelease(*((_QWORD *)v3 + 1));
    v5 = sub_5EDC(&qword_1F1F90);
    v6 = &v3[*(int *)(v5 + 48)];
    v7 = *(_QWORD *)&v3[*(int *)(v5 + 80)];
    v8 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    sub_6ABE0((uint64_t)v3);
    return 0;
  }
  return v7;
}

uint64_t Event.rating.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v1 = v0;
  v2 = type metadata accessor for Event(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_6AB9C(v1, (uint64_t)v4);
  if (swift_getEnumCaseMultiPayload(v4, v2) == 10)
  {
    swift_bridgeObjectRelease(*((_QWORD *)v4 + 1));
    v6 = sub_5EDC(&qword_1F1F98);
    v7 = &v4[*(int *)(v6 + 48)];
    v5 = *(_QWORD *)&v4[*(int *)(v6 + 64)];
    v8 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    sub_6ABE0((uint64_t)v4);
    return 0;
  }
  return v5;
}

void Event.assetID.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for Event(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_6AB9C(v0, (uint64_t)v3);
  v4 = (char *)sub_6AE58 + 4 * byte_18FC60[swift_getEnumCaseMultiPayload(v3, v1)];
  __asm { BR              X10 }
}

uint64_t sub_6AE58()
{
  uint64_t *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;

  v1 = *v0;
  v2 = (char *)v0 + *(int *)(sub_5EDC(&qword_1F1FA0) + 48);
  v3 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return v1;
}

void sub_6AEA8()
{
  JUMPOUT(0x6AE64);
}

void sub_6AEB8()
{
  JUMPOUT(0x6AE64);
}

void sub_6AEC8()
{
  JUMPOUT(0x6AE64);
}

void sub_6AED8()
{
  JUMPOUT(0x6AE64);
}

void Event.timestamp.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;

  v1 = v0;
  v2 = type metadata accessor for Event(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_6AB9C(v1, (uint64_t)v4);
  v5 = (char *)sub_6AF6C + 4 * byte_18FC71[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }
}

uint64_t sub_6AF6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease();
  v2 = v1 + *(int *)(sub_5EDC(&qword_1F1FA0) + 48);
  v3 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(v0, v2, v3);
}

void sub_6AFBC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 8));
  JUMPOUT(0x6AF7CLL);
}

void sub_6AFD0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 8));
  JUMPOUT(0x6AF7CLL);
}

void sub_6AFE4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 8));
  JUMPOUT(0x6AF7CLL);
}

void sub_6AFF8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 8));
  JUMPOUT(0x6AF7CLL);
}

void Event.eventType.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for Event(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_6AB9C(v0, (uint64_t)v3);
  v4 = (char *)sub_6B088 + 4 * word_18FC82[swift_getEnumCaseMultiPayload(v3, v1)];
  __asm { BR              X10 }
}

uint64_t sub_6B088()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = v0 + *(int *)(sub_5EDC(&qword_1F1FA0) + 48);
  v2 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return 0x6E61576F54646461;
}

void Event.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  _QWORD v13[3];
  uint64_t v14;

  v2 = v1;
  v13[2] = a1;
  v14 = type metadata accessor for Date(0);
  v13[1] = *(_QWORD *)(v14 - 8);
  v3 = __chkstk_darwin(v14);
  v4 = __chkstk_darwin(v3);
  v5 = __chkstk_darwin(v4);
  v6 = __chkstk_darwin(v5);
  v7 = __chkstk_darwin(v6);
  v8 = __chkstk_darwin(v7);
  __chkstk_darwin(v8);
  v9 = type metadata accessor for Event(0);
  __chkstk_darwin(v9);
  v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_6AB9C(v2, (uint64_t)v11);
  v12 = (char *)sub_6B7BC + 4 * word_18FCA4[swift_getEnumCaseMultiPayload(v11, v9)];
  __asm { BR              X10 }
}

uint64_t sub_6B7BC()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)v0;
  v4 = *((_QWORD *)v0 + 1);
  v5 = sub_5EDC(&qword_1F1FA0);
  v6 = *(_QWORD *)(v2 - 104);
  v7 = *(_QWORD *)(v2 - 88);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v1, &v0[*(int *)(v5 + 48)], v7);
  v8 = *(_QWORD *)(v2 - 96);
  Hasher._combine(_:)(0);
  String.hash(into:)(v8, v3, v4);
  swift_bridgeObjectRelease(v4);
  v9 = sub_41754(&qword_1F10D8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v8, v7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v1, v7);
}

void sub_6BE00()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)v0;
  v4 = *((_QWORD *)v0 + 1);
  v5 = sub_5EDC(&qword_1F1FA8);
  v6 = v0[*(int *)(v5 + 64)];
  v7 = *(_QWORD *)(v2 - 88);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v2 - 104) + 32))(v1, &v0[*(int *)(v5 + 48)], v7);
  v8 = *(_QWORD *)(v2 - 96);
  Hasher._combine(_:)(8uLL);
  String.hash(into:)(v8, v3, v4);
  swift_bridgeObjectRelease(v4);
  v9 = sub_41754(&qword_1F10D8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v8, v7, v9);
  if (v6 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6 & 1);
  }
  JUMPOUT(0x6BDD0);
}

Swift::Int Event.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Event.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_6BF50(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Event.hash(into:)((uint64_t)v2);
  return Hasher._finalize()();
}

void _s20BooksPersonalization5EventO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  _QWORD v102[44];
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;

  v107 = (char *)a2;
  v105 = a1;
  v103 = type metadata accessor for Date(0);
  v106 = *(_QWORD *)(v103 - 8);
  v2 = __chkstk_darwin(v103);
  v102[34] = (char *)v102 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __chkstk_darwin(v2);
  v102[14] = (char *)v102 - v5;
  v6 = __chkstk_darwin(v4);
  v102[33] = (char *)v102 - v7;
  v8 = __chkstk_darwin(v6);
  v102[13] = (char *)v102 - v9;
  v10 = __chkstk_darwin(v8);
  v102[32] = (char *)v102 - v11;
  v12 = __chkstk_darwin(v10);
  v102[12] = (char *)v102 - v13;
  v14 = __chkstk_darwin(v12);
  v102[31] = (char *)v102 - v15;
  v16 = __chkstk_darwin(v14);
  v102[11] = (char *)v102 - v17;
  v18 = __chkstk_darwin(v16);
  v102[30] = (char *)v102 - v19;
  v20 = __chkstk_darwin(v18);
  v102[10] = (char *)v102 - v21;
  v22 = __chkstk_darwin(v20);
  v102[29] = (char *)v102 - v23;
  v24 = __chkstk_darwin(v22);
  v102[9] = (char *)v102 - v25;
  v26 = __chkstk_darwin(v24);
  v102[28] = (char *)v102 - v27;
  v28 = __chkstk_darwin(v26);
  v102[8] = (char *)v102 - v29;
  v30 = __chkstk_darwin(v28);
  v102[27] = (char *)v102 - v31;
  v32 = __chkstk_darwin(v30);
  v102[7] = (char *)v102 - v33;
  v34 = __chkstk_darwin(v32);
  v102[25] = (char *)v102 - v35;
  v36 = __chkstk_darwin(v34);
  v102[26] = (char *)v102 - v37;
  v38 = __chkstk_darwin(v36);
  v102[24] = (char *)v102 - v39;
  v40 = __chkstk_darwin(v38);
  v102[6] = (char *)v102 - v41;
  v42 = __chkstk_darwin(v40);
  v102[23] = (char *)v102 - v43;
  v44 = __chkstk_darwin(v42);
  v102[5] = (char *)v102 - v45;
  v46 = __chkstk_darwin(v44);
  v102[22] = (char *)v102 - v47;
  v48 = __chkstk_darwin(v46);
  v102[4] = (char *)v102 - v49;
  v50 = __chkstk_darwin(v48);
  v102[20] = (char *)v102 - v51;
  v52 = __chkstk_darwin(v50);
  v102[21] = (char *)v102 - v53;
  v54 = __chkstk_darwin(v52);
  v102[3] = (char *)v102 - v55;
  v56 = __chkstk_darwin(v54);
  v102[19] = (char *)v102 - v57;
  v58 = __chkstk_darwin(v56);
  v102[17] = (char *)v102 - v59;
  v60 = __chkstk_darwin(v58);
  v102[18] = (char *)v102 - v61;
  v62 = __chkstk_darwin(v60);
  v102[2] = (char *)v102 - v63;
  v64 = __chkstk_darwin(v62);
  v102[16] = (char *)v102 - v65;
  v66 = __chkstk_darwin(v64);
  v102[15] = (char *)v102 - v67;
  __chkstk_darwin(v66);
  v102[1] = (char *)v102 - v68;
  v104 = type metadata accessor for Event(0);
  v69 = __chkstk_darwin(v104);
  v102[43] = (char *)v102 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = __chkstk_darwin(v69);
  v102[42] = (char *)v102 - v72;
  v73 = __chkstk_darwin(v71);
  v102[41] = (char *)v102 - v74;
  v75 = __chkstk_darwin(v73);
  v102[40] = (char *)v102 - v76;
  v77 = __chkstk_darwin(v75);
  v102[39] = (char *)v102 - v78;
  v79 = __chkstk_darwin(v77);
  v102[38] = (char *)v102 - v80;
  v81 = __chkstk_darwin(v79);
  v102[37] = (char *)v102 - v82;
  v83 = __chkstk_darwin(v81);
  v102[36] = (char *)v102 - v84;
  v85 = __chkstk_darwin(v83);
  v102[35] = (char *)v102 - v86;
  v87 = __chkstk_darwin(v85);
  v88 = __chkstk_darwin(v87);
  v89 = __chkstk_darwin(v88);
  v90 = __chkstk_darwin(v89);
  v91 = __chkstk_darwin(v90);
  v92 = __chkstk_darwin(v91);
  v93 = __chkstk_darwin(v92);
  __chkstk_darwin(v93);
  v94 = sub_5EDC(&qword_1F20B8);
  v95 = __chkstk_darwin(v94);
  v97 = (char *)v102 - ((v96 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = (uint64_t)&v97[*(int *)(v95 + 48)];
  sub_6AB9C(v105, (uint64_t)v97);
  v105 = v98;
  v99 = v98;
  v100 = v104;
  sub_6AB9C((uint64_t)v107, v99);
  v107 = v97;
  v101 = (char *)sub_6C730 + 4 * word_18FCC6[swift_getEnumCaseMultiPayload(v97, v100)];
  __asm { BR              X10 }
}

uint64_t sub_6C730()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(uint64_t, char *, uint64_t);
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  void (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(v2 - 112);
  sub_6AB9C(v3, (uint64_t)v1);
  v4 = *(_QWORD *)v1;
  v5 = *((_QWORD *)v1 + 1);
  v6 = *(int *)(sub_5EDC(&qword_1F1FA0) + 48);
  v7 = &v1[v6];
  v8 = *(uint64_t **)(v2 - 128);
  if (swift_getEnumCaseMultiPayload(v8, v0))
  {
    (*(void (**)(char *, _QWORD))(*(_QWORD *)(v2 - 120) + 8))(&v1[v6], *(_QWORD *)(v2 - 144));
    swift_bridgeObjectRelease(v5);
    sub_6F1C4(v3);
    goto LABEL_9;
  }
  v10 = *v8;
  v9 = v8[1];
  v11 = (char *)v8 + v6;
  v12 = *(_QWORD *)(v2 - 120);
  v13 = *(void (**)(uint64_t, char *, uint64_t))(v12 + 32);
  v14 = *(_QWORD *)(v2 - 488);
  v15 = v7;
  v16 = *(_QWORD *)(v2 - 144);
  v13(v14, v15, v16);
  v13(*(_QWORD *)(v2 - 376), v11, v16);
  if (v4 != v10 || v5 != v9)
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v10, v9, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v5);
    if ((v17 & 1) != 0)
      goto LABEL_7;
    v21 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v21(*(_QWORD *)(v2 - 376), v16);
    v21(v14, v16);
    sub_6ABE0(v3);
LABEL_9:
    v19 = 0;
    return v19 & 1;
  }
  swift_bridgeObjectRelease_n(v5, 2);
LABEL_7:
  v18 = *(_QWORD *)(v2 - 376);
  v19 = ((uint64_t (*)(uint64_t, uint64_t))static Date.== infix(_:_:))(v14, v18);
  v20 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v20(v18, v16);
  v20(v14, v16);
  sub_6ABE0(v3);
  return v19 & 1;
}

unint64_t sub_6DA10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F1FB8;
  if (!qword_1F1FB8)
  {
    v1 = sub_5F68(&qword_1F1FC0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1F1FB8);
  }
  return result;
}

unint64_t sub_6DA60()
{
  unint64_t result;

  result = qword_1F1FC8;
  if (!qword_1F1FC8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EventType, &type metadata for EventType);
    atomic_store(result, (unint64_t *)&qword_1F1FC8);
  }
  return result;
}

unint64_t sub_6DAA8()
{
  unint64_t result;

  result = qword_1F1FD0;
  if (!qword_1F1FD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Event.FinishedMechanism, &type metadata for Event.FinishedMechanism);
    atomic_store(result, (unint64_t *)&qword_1F1FD0);
  }
  return result;
}

uint64_t sub_6DAEC()
{
  return sub_41754(&qword_1F1FD8, type metadata accessor for Event, (uint64_t)&protocol conformance descriptor for Event);
}

uint64_t getEnumTagSinglePayload for EventType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF0)
    goto LABEL_17;
  if (a2 + 16 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 16) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 16;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 16;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 16;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x11;
  v8 = v6 - 17;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for EventType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 16 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 16) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEF)
    return ((uint64_t (*)(void))((char *)&loc_6DBF4 + 4 * byte_18FCED[v4]))();
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_6DC28 + 4 * byte_18FCE8[v4]))();
}

uint64_t sub_6DC28(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_6DC30(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x6DC38);
  return result;
}

uint64_t sub_6DC44(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x6DC4CLL);
  *(_BYTE *)result = a2 + 16;
  return result;
}

uint64_t sub_6DC50(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_6DC58(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EventType()
{
  return &type metadata for EventType;
}

uint64_t initializeBufferWithCopyOfBuffer for Event(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_6DCC8 + 4 * word_18FCF2[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain(v6);
  return v7;
}

uint64_t destroy for Event(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
    case 5:
    case 6:
    case 7:
    case 9:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      v4 = &qword_1F1FA0;
      goto LABEL_3;
    case 1:
    case 4:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      v4 = &qword_1F1F90;
      goto LABEL_3;
    case 2:
    case 3:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      v4 = (uint64_t *)&unk_1F1FB0;
      goto LABEL_3;
    case 8:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      v4 = &qword_1F1FA8;
      goto LABEL_3;
    case 10:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      v4 = &qword_1F1F98;
LABEL_3:
      v5 = a1 + *(int *)(sub_5EDC(v4) + 48);
      v6 = type metadata accessor for Date(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
      break;
    default:
      return result;
  }
  return result;
}

void initializeWithCopy for Event(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;

  v3 = (char *)sub_6E430 + 4 * byte_18FD25[swift_getEnumCaseMultiPayload(a2, a3)];
  __asm { BR              X10 }
}

_QWORD *sub_6E430()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = v3[1];
  *v0 = *v3;
  v0[1] = v4;
  swift_bridgeObjectRetain(v4);
  v5 = *(int *)(sub_5EDC(&qword_1F1FA0) + 48);
  v6 = (char *)v0 + v5;
  v7 = (char *)v3 + v5;
  v8 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  swift_storeEnumTagMultiPayload(v0, v1, v2);
  return v0;
}

uint64_t assignWithCopy for Event(uint64_t result, uint64_t a2, uint64_t a3)
{
  char *v5;

  if (result != a2)
  {
    sub_6ABE0(result);
    v5 = (char *)&loc_6E624 + 4 * byte_18FD36[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }
  return result;
}

void initializeWithTake for Event(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;

  v3 = (char *)sub_6E830 + 4 * byte_18FD47[swift_getEnumCaseMultiPayload(a2, a3)];
  __asm { BR              X10 }
}

_OWORD *sub_6E830()
{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *v0 = *v3;
  v4 = *(int *)(sub_5EDC(&qword_1F1FA0) + 48);
  v5 = (char *)v0 + v4;
  v6 = (char *)v3 + v4;
  v7 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  swift_storeEnumTagMultiPayload(v0, v1, v2);
  return v0;
}

uint64_t assignWithTake for Event(uint64_t result, uint64_t a2, uint64_t a3)
{
  char *v5;

  if (result != a2)
  {
    sub_6ABE0(result);
    v5 = (char *)&loc_6EA10 + 4 * byte_18FD58[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Event(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for Event(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_6EBAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_6EBBC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  _BYTE v5[32];
  _BYTE v6[32];
  _BYTE v7[32];
  _BYTE v8[32];
  _BYTE v9[32];
  _BYTE v10[32];
  _BYTE v11[32];
  _BYTE v12[32];
  _BYTE v13[32];
  _BYTE v14[32];
  _BYTE v15[32];
  _BYTE v16[32];
  _BYTE v17[32];
  _BYTE v18[32];
  _BYTE v19[32];
  void *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  _BYTE v24[32];
  _BYTE v25[32];
  _QWORD v26[17];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_getTupleTypeLayout2(v25, &unk_18FF50, v4);
    v26[0] = v25;
    v20 = &unk_18FF50;
    v21 = v4;
    v22 = &unk_18FF68;
    v23 = (char *)&value witness table for Builtin.Int64 + 64;
    swift_getTupleTypeLayout(v24, 0, 4, &v20);
    v26[1] = v24;
    swift_getTupleTypeLayout3(v19, &unk_18FF50, v4, &unk_18FF80);
    v26[2] = v19;
    swift_getTupleTypeLayout3(v18, &unk_18FF50, v4, &unk_18FF80);
    v26[3] = v18;
    v20 = &unk_18FF50;
    v21 = v4;
    v22 = &unk_18FF68;
    v23 = (char *)&value witness table for Builtin.Int64 + 64;
    swift_getTupleTypeLayout(v17, 0, 4, &v20);
    v26[4] = v17;
    swift_getTupleTypeLayout2(v16, &unk_18FF50, v4);
    v26[5] = v16;
    swift_getTupleTypeLayout2(v15, &unk_18FF50, v4);
    v26[6] = v15;
    swift_getTupleTypeLayout2(v14, &unk_18FF50, v4);
    v26[7] = v14;
    swift_getTupleTypeLayout3(v13, &unk_18FF50, v4, &unk_18FF80);
    v26[8] = v13;
    swift_getTupleTypeLayout2(v12, &unk_18FF50, v4);
    v26[9] = v12;
    swift_getTupleTypeLayout3(v11, &unk_18FF50, v4, (char *)&value witness table for Builtin.Int64 + 64);
    v26[10] = v11;
    swift_getTupleTypeLayout2(v10, &unk_18FF50, v4);
    v26[11] = v10;
    swift_getTupleTypeLayout2(v9, &unk_18FF50, v4);
    v26[12] = v9;
    swift_getTupleTypeLayout2(v8, &unk_18FF50, v4);
    v26[13] = v8;
    swift_getTupleTypeLayout2(v7, &unk_18FF50, v4);
    v26[14] = v7;
    swift_getTupleTypeLayout2(v6, &unk_18FF50, v4);
    v26[15] = v6;
    swift_getTupleTypeLayout2(v5, &unk_18FF50, v4);
    v26[16] = v5;
    swift_initEnumMetadataMultiPayload(a1, 256, 17, v26);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Event.FinishedMechanism(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_6EE64 + 4 * byte_18FD6E[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_6EE98 + 4 * byte_18FD69[v4]))();
}

uint64_t sub_6EE98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_6EEA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x6EEA8);
  return result;
}

uint64_t sub_6EEB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x6EEBCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_6EEC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_6EEC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Event.FinishedMechanism()
{
  return &type metadata for Event.FinishedMechanism;
}

uint64_t dispatch thunk of GenreRecommendationSubserviceType.fetchRecommendedGenres(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int *v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v7 = *(int **)(a3 + 8);
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v7 + *v7);
  v8 = (_QWORD *)swift_task_alloc(v7[1]);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_6F204;
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of EventStoreType.events()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v5 = *(int **)(a2 + 16);
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)v5 + *v5);
  v6 = (_QWORD *)swift_task_alloc(v5[1]);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_6F204;
  return v8(a1, a2);
}

uint64_t dispatch thunk of EventStoreType.events(ofTypes:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int *v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v7 = *(int **)(a3 + 24);
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v7 + *v7);
  v8 = (_QWORD *)swift_task_alloc(v7[1]);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_6F204;
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of EventStoreType.events(forBooksWithAssetIDs:ofTypes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int *v9;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = *(int **)(a4 + 32);
  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v9 + *v9);
  v10 = (_QWORD *)swift_task_alloc(v9[1]);
  *(_QWORD *)(v4 + 16) = v10;
  *v10 = v4;
  v10[1] = sub_6F204;
  return v12(a1, a2, a3, a4);
}

uint64_t dispatch thunk of EventStoreType.daysOfEvents(ofTypes:timeZone:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int *v9;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = *(int **)(a4 + 40);
  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v9 + *v9);
  v10 = (_QWORD *)swift_task_alloc(v9[1]);
  *(_QWORD *)(v4 + 16) = v10;
  *v10 = v4;
  v10[1] = sub_429A0;
  return v12(a1, a2, a3, a4);
}

uint64_t dispatch thunk of EventStoreType.earliestEventTimestamp()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int *v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v7 = *(int **)(a3 + 48);
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v7 + *v7);
  v8 = (_QWORD *)swift_task_alloc(v7[1]);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_4814;
  return v10(a1, a2, a3);
}

uint64_t sub_6F1C4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5EDC(&qword_1F20B8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_6F208@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  v4 = a1[3];
  v5 = a1[4];
  sub_49F4(a1, v4);
  v6 = sub_5EDC(&qword_1F2160);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v20, v6, v6, v4, v5);
  if (!v21)
  {
    __break(1u);
    goto LABEL_6;
  }
  v8 = a1[3];
  v9 = a1[4];
  sub_49F4(a1, v8);
  v10 = sub_5EDC(&qword_1F1F28);
  result = dispatch thunk of ResolverType.resolve<A>(_:name:)(&v18, v10, 0x6F4A656C676E6973, 0xEB00000000746E69, v10, v8, v9);
  if (!v19)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v11 = a1[3];
  v12 = a1[4];
  sub_49F4(a1, v11);
  v13 = sub_5EDC(&qword_1F0E48);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v16, v13, v13, v11, v12);
  if (v17)
  {
    v14 = type metadata accessor for MediaTypesMediaTypeRecommendationService();
    v15 = swift_allocObject(v14, 136, 7);
    sub_26DB8(&v20, v15 + 16);
    sub_26DB8(&v18, v15 + 56);
    result = (_QWORD *)sub_26DB8(&v16, v15 + 96);
    a2[3] = v14;
    a2[4] = (uint64_t)&off_1DADA0;
    *a2 = v15;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for MediaTypeRecommendationServiceAssembly()
{
  return objc_opt_self(_TtC20BooksPersonalization38MediaTypeRecommendationServiceAssembly);
}

uint64_t sub_6F388()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v0 = type metadata accessor for Scope(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = ProxyContainer.public.getter(v2);
  v6 = sub_5EDC(&qword_1F2158);
  v7 = RegistrationContainer.register<A>(_:name:factory:)(v6, 0, 0, sub_6F208, 0, v6);
  swift_release(v5);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, enum case for Scope.singleton(_:), v0);
  v8 = Definition.inScope(_:)(v4);
  swift_release(v8);
  swift_release(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_6F470()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for CollectionRecommendationsScorer()
{
  return objc_opt_self(_TtC20BooksPersonalization31CollectionRecommendationsScorer);
}

uint64_t sub_6F4B4@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  int64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v3 = *(_QWORD *)(result + 16);
  v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    v5 = result;
    result = sub_34348(0, v3, 0);
    v4 = _swiftEmptyArrayStorage;
    v6 = (uint64_t *)(v5 + 32);
    while (1)
    {
      v8 = *v6++;
      v7 = v8;
      if (v8 < 0)
        break;
      v11 = v4;
      v10 = v4[2];
      v9 = v4[3];
      if (v10 >= v9 >> 1)
      {
        result = sub_34348(v9 > 1, v10 + 1, 1);
        v4 = v11;
      }
      v4[2] = v10 + 1;
      v4[v10 + 4] = v7;
      if (!--v3)
        goto LABEL_7;
    }
    __break(1u);
  }
  else
  {
LABEL_7:
    *a2 = v4;
  }
  return result;
}

void sub_6F588()
{
  __asm { BR              X11 }
}

uint64_t sub_6F5B4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
  return swift_bridgeObjectRetain(v1);
}

unint64_t sub_6F698()
{
  unint64_t result;

  result = qword_1F2260;
  if (!qword_1F2260)
  {
    result = swift_getWitnessTable(&unk_199A44, &type metadata for BooksBackendPersonalizationMetadataService.Errors);
    atomic_store(result, (unint64_t *)&qword_1F2260);
  }
  return result;
}

_QWORD *sub_6F6DC(uint64_t a1)
{
  int64_t v2;
  _QWORD *result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_340AC(0, v2, 0);
    result = _swiftEmptyArrayStorage;
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v6 = *v4;
      v4 += 10;
      v5 = v6;
      v9 = result;
      v8 = result[2];
      v7 = result[3];
      if (v8 >= v7 >> 1)
      {
        sub_340AC(v7 > 1, v8 + 1, 1);
        result = v9;
      }
      result[2] = v8 + 1;
      result[v8 + 4] = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_6F798(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;

  v3[279] = v2;
  v3[278] = a1;
  v5 = type metadata accessor for SeedBookRecommendationWork(0);
  v3[280] = v5;
  v3[281] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(v3 + 227, a2, 0x170uLL);
  v3[282] = a2[46];
  memcpy(v3 + 138, a2 + 47, 0x2C8uLL);
  return swift_task_switch(sub_6F834, 0, 0);
}

uint64_t sub_6F834()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  _QWORD *v33;
  char *__srca;
  char *__src;

  v2 = v1[278];
  result = type metadata accessor for SeedBasedRecommendationRequest(0);
  v4 = *(_QWORD *)(v2 + *(int *)(result + 52));
  if (v4)
  {
    v5 = *(_QWORD *)(v2 + *(int *)(result + 56));
    if (v5 == 0x8000000000000000 && v4 == -1)
    {
      __break(1u);
    }
    else
    {
      v7 = v1[281];
      v8 = v1[280];
      v9 = v5 / v4;
      if (v1[282] >= v9)
        v10 = v9;
      else
        v10 = v1[282];
      UUID.init()();
      sub_70D7C(v2, v7 + *(int *)(v8 + 20));
      *(_QWORD *)(v7 + *(int *)(v8 + 24)) = v10;
      v11 = sub_5EDC(&qword_1F1378);
      v12 = sub_712EC();
      WorkService.perform<A, B>(_:)(v7, v8, v11, v12);
      v27 = (_QWORD *)v1[279];
      sub_71334(v1[281]);
      v28 = v1[276];
      v1[283] = v28;
      v29 = sub_6F6DC(v28);
      v1[284] = v29;
      v30 = v27[6];
      v31 = v27[7];
      sub_49F4(v27 + 3, v30);
      v32 = *(int **)(v31 + 16);
      __src = (char *)v32 + *v32;
      v33 = (_QWORD *)swift_task_alloc(v32[1]);
      v1[285] = v33;
      *v33 = v1;
      v33[1] = sub_6FB64;
      return ((uint64_t (*)(_QWORD *, uint64_t, uint64_t))__src)(v29, v30, v31);
    }
  }
  else
  {
    __break(1u);
    swift_once(&qword_1F0130, sub_12F928);
    v13 = v1[282];
    v14 = (_QWORD *)v1[279];
    v15 = (void *)qword_1F6208;
    v16 = sub_5EDC(&qword_1F14C8);
    v17 = swift_allocObject(v16, 72, 7);
    *(_OWORD *)(v17 + 16) = xmmword_1875E0;
    v1[273] = 0;
    v1[274] = 0xE000000000000000;
    v1[275] = v0;
    v18 = v15;
    v19 = sub_5EDC(&qword_1F1348);
    _print_unlocked<A, B>(_:_:)(v1 + 275, v1 + 273, v19, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v20 = v1[273];
    v21 = v1[274];
    *(_QWORD *)(v17 + 56) = &type metadata for String;
    *(_QWORD *)(v17 + 64) = sub_4AAD8();
    *(_QWORD *)(v17 + 32) = v20;
    *(_QWORD *)(v17 + 40) = v21;
    v22 = static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)("Falling back to non-tabi due to error: %{public}@", 49, 2, &dword_0, v18, v22, v17);
    swift_bridgeObjectRelease(v17);

    v23 = v14[11];
    v24 = v14[12];
    sub_49F4(v14 + 8, v23);
    memcpy(v1 + 2, v1 + 227, 0x170uLL);
    v1[48] = v13;
    memcpy(v1 + 49, v1 + 138, 0x2C8uLL);
    v25 = *(int **)(v24 + 8);
    __srca = (char *)v25 + *v25;
    v26 = (_QWORD *)swift_task_alloc(v25[1]);
    v1[289] = v26;
    *v26 = v1;
    v26[1] = sub_6FC58;
    return ((uint64_t (*)(_QWORD, _QWORD *, uint64_t, uint64_t))__srca)(v1[278], v1 + 2, v23, v24);
  }
  return result;
}

uint64_t sub_6FB64(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 2280);
  *(_QWORD *)(*v2 + 2288) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_6FD10;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v4 + 2272));
    *(_QWORD *)(v4 + 2296) = a1;
    v6 = sub_6FBE0;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_6FBE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 2296);
  v2 = *(_QWORD *)(v0 + 2264);
  swift_bridgeObjectRetain(v1);
  v3 = sub_71370(v2, v1);
  swift_bridgeObjectRelease_n(v1, 2);
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(*(_QWORD *)(v0 + 2248));
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v3);
}

uint64_t sub_6FC58(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 2312);
  *(_QWORD *)(*v2 + 2320) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_6FF04;
  }
  else
  {
    *(_QWORD *)(v4 + 2328) = a1;
    v6 = sub_6FCCC;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_6FCCC()
{
  uint64_t v0;
  uint64_t v1;

  swift_errorRelease(*(_QWORD *)(v0 + 2304));
  v1 = *(_QWORD *)(v0 + 2328);
  swift_task_dealloc(*(_QWORD *)(v0 + 2248));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_6FD10()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  _QWORD *v16;
  char *__src;

  v1 = v0[284];
  swift_bridgeObjectRelease(v0[283]);
  swift_bridgeObjectRelease(v1);
  v2 = v0[286];
  v0[288] = v2;
  if (qword_1F0130 != -1)
    swift_once(&qword_1F0130, sub_12F928);
  v3 = v0[282];
  v4 = (_QWORD *)v0[279];
  v5 = (void *)qword_1F6208;
  v6 = sub_5EDC(&qword_1F14C8);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1875E0;
  v0[273] = 0;
  v0[274] = 0xE000000000000000;
  v0[275] = v2;
  v8 = v5;
  v9 = sub_5EDC(&qword_1F1348);
  _print_unlocked<A, B>(_:_:)(v0 + 275, v0 + 273, v9, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v10 = v0[273];
  v11 = v0[274];
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 64) = sub_4AAD8();
  *(_QWORD *)(v7 + 32) = v10;
  *(_QWORD *)(v7 + 40) = v11;
  v12 = static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)("Falling back to non-tabi due to error: %{public}@", 49, 2, &dword_0, v8, v12, v7);

  swift_bridgeObjectRelease(v7);
  v13 = v4[11];
  v14 = v4[12];
  sub_49F4(v4 + 8, v13);
  memcpy(v0 + 2, v0 + 227, 0x170uLL);
  v0[48] = v3;
  memcpy(v0 + 49, v0 + 138, 0x2C8uLL);
  v15 = *(int **)(v14 + 8);
  __src = (char *)v15 + *v15;
  v16 = (_QWORD *)swift_task_alloc(v15[1]);
  v0[289] = v16;
  *v16 = v0;
  v16[1] = sub_6FC58;
  return ((uint64_t (*)(_QWORD, _QWORD *, uint64_t, uint64_t))__src)(v0[278], v0 + 2, v13, v14);
}

uint64_t sub_6FF04()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 2248);
  swift_errorRelease(*(_QWORD *)(v0 + 2304));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_6FF44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v5[14] = a4;
  v5[15] = a5;
  v5[12] = a2;
  v5[13] = a3;
  v5[11] = a1;
  v6 = sub_5EDC(&qword_1F1180);
  v5[16] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[17] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[18] = swift_task_alloc(v8);
  v5[19] = swift_task_alloc(v8);
  v5[20] = swift_task_alloc(v8);
  v9 = sub_5EDC(&qword_1F2340);
  v5[21] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5EDC(&qword_1F2348);
  v5[22] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[23] = v11;
  v5[24] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(type metadata accessor for SeedBasedRecommendationRequest(0) - 8);
  v5[25] = v12;
  v13 = *(_QWORD *)(v12 + 64);
  v5[26] = v13;
  v5[27] = swift_task_alloc((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (*(_QWORD *)(*(_QWORD *)(sub_5EDC(&qword_1F15F0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[28] = swift_task_alloc(v14);
  v5[29] = swift_task_alloc(v14);
  return swift_task_switch(sub_70078, 0, 0);
}

uint64_t sub_70078()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ObjectType;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  void (*v38)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 200);
    v4 = *(unsigned __int8 *)(v3 + 80);
    v5 = (v4 + 32) & ~v4;
    v6 = v1 + v5;
    v43 = *(_QWORD *)(v3 + 72);
    v44 = v5;
    v41 = (*(_QWORD *)(v0 + 208) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
    v42 = v4 | 7;
    v40 = (v41 + 15) & 0xFFFFFFFFFFFFFFF8;
    v7 = type metadata accessor for TaskPriority(0);
    v8 = *(_QWORD *)(v7 - 8);
    v38 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
    v39 = v7;
    swift_bridgeObjectRetain(v1);
    while (1)
    {
      v46 = v2;
      v13 = *(_QWORD *)(v0 + 224);
      v12 = *(_QWORD *)(v0 + 232);
      v14 = v8;
      v15 = *(_QWORD *)(v0 + 216);
      v17 = *(_QWORD *)(v0 + 112);
      v16 = *(const void **)(v0 + 120);
      v38(v12, 1, 1, v39);
      v45 = v6;
      sub_70D7C(v6, v15);
      v18 = swift_allocObject(&unk_1E0050, v40 + 1088, v42);
      *(_QWORD *)(v18 + 16) = 0;
      v19 = (uint64_t *)(v18 + 16);
      *(_QWORD *)(v18 + 24) = 0;
      v20 = v15;
      v8 = v14;
      sub_70F74(v20, v18 + v44);
      *(_QWORD *)(v18 + v41) = v17;
      memcpy((void *)(v18 + v40), v16, 0x440uLL);
      sub_6A950(v12, v13);
      LODWORD(v13) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v13, 1, v39);
      swift_retain(v17);
      v21 = sub_71068((uint64_t)v16);
      v22 = *(_QWORD *)(v0 + 224);
      if ((_DWORD)v13 == 1)
      {
        sub_417D8(*(_QWORD *)(v0 + 224), &qword_1F15F0);
        v23 = 0;
        v24 = *v19;
        if (!*v19)
          goto LABEL_8;
      }
      else
      {
        v30 = TaskPriority.rawValue.getter(v21);
        (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v22, v39);
        v23 = v30;
        v24 = *v19;
        if (!*v19)
        {
LABEL_8:
          v27 = 0;
          v29 = 0;
          goto LABEL_9;
        }
      }
      v25 = *(_QWORD *)(v18 + 24);
      ObjectType = swift_getObjectType(v24);
      swift_unknownObjectRetain(v24);
      v27 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v25);
      v29 = v28;
      swift_unknownObjectRelease(v24);
LABEL_9:
      v31 = **(_QWORD **)(v0 + 96);
      v32 = v29 | v27;
      if (v29 | v27)
      {
        v32 = v0 + 16;
        *(_QWORD *)(v0 + 16) = 0;
        *(_QWORD *)(v0 + 24) = 0;
        *(_QWORD *)(v0 + 32) = v27;
        *(_QWORD *)(v0 + 40) = v29;
      }
      v9 = *(_QWORD *)(v0 + 232);
      v10 = *(_QWORD *)(v0 + 128);
      *(_QWORD *)(v0 + 48) = 1;
      *(_QWORD *)(v0 + 56) = v32;
      *(_QWORD *)(v0 + 64) = v31;
      v11 = swift_task_create(v23 | 0x3100, v0 + 48, v10, &unk_1F2358, v18);
      swift_release(v11);
      sub_417D8(v9, &qword_1F15F0);
      v6 = v45 + v43;
      v2 = v46 - 1;
      if (v46 == 1)
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
        break;
      }
    }
  }
  v33 = *(_QWORD *)(v0 + 128);
  v34 = **(_QWORD **)(v0 + 96);
  v35 = sub_5EDC(&qword_1F1348);
  ThrowingTaskGroup.makeAsyncIterator()(v34, v33, v35, &protocol self-conformance witness table for Error);
  v36 = (_QWORD *)swift_task_alloc(_sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
  *(_QWORD *)(v0 + 240) = v36;
  *v36 = v0;
  v36[1] = sub_70388;
  return _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(*(_QWORD *)(v0 + 168), 0, 0, *(_QWORD *)(v0 + 176), v0 + 72);
}

uint64_t sub_70388()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 240));
  if (v0)
  {
    swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
    v3 = sub_70790;
  }
  else
  {
    *(_QWORD *)(v2 + 248) = _swiftEmptyDictionarySingleton;
    v3 = sub_70400;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_70400()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 136) + 48))(v1, 1, v2);
  v4 = *(_QWORD *)(v0 + 248);
  if (v3 == 1)
  {
    v6 = *(_QWORD *)(v0 + 224);
    v5 = *(_QWORD *)(v0 + 232);
    v7 = *(_QWORD *)(v0 + 216);
    v8 = *(_QWORD *)(v0 + 192);
    v10 = *(_QWORD *)(v0 + 152);
    v9 = *(_QWORD *)(v0 + 160);
    v43 = *(_QWORD *)(v0 + 144);
    v11 = *(_QWORD **)(v0 + 88);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(v8, *(_QWORD *)(v0 + 176));
    *v11 = v4;
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v1);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v43);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v14 = *(_QWORD *)(v0 + 152);
  v13 = *(_QWORD *)(v0 + 160);
  v44 = *(_QWORD *)(v0 + 144);
  v15 = *(int *)(v2 + 48);
  v16 = *(_QWORD *)(v1 + v15);
  v17 = type metadata accessor for UUID(0);
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v13, v1, v17);
  *(_QWORD *)(v13 + v15) = v16;
  v19 = *(int *)(v2 + 48);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
  v20(v14, v13, v17);
  *(_QWORD *)(v14 + v19) = v16;
  v21 = *(int *)(v2 + 48);
  v20(v44, v13, v17);
  *(_QWORD *)(v44 + v21) = v16;
  swift_bridgeObjectRetain(v16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
  *(_QWORD *)(v0 + 80) = v4;
  v24 = sub_39574(v14);
  v25 = *(_QWORD *)(v4 + 16);
  v26 = (v23 & 1) == 0;
  result = v25 + v26;
  if (__OFADD__(v25, v26))
  {
    __break(1u);
  }
  else
  {
    v27 = v23;
    if (*(_QWORD *)(*(_QWORD *)(v0 + 248) + 24) >= result)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_16BD08();
    }
    else
    {
      v28 = *(_QWORD *)(v0 + 152);
      sub_15BA48(result, isUniquelyReferenced_nonNull_native);
      v29 = sub_39574(v28);
      if ((v27 & 1) != (v30 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v17);
      v24 = v29;
    }
    v31 = *(_QWORD **)(v0 + 80);
    *(_QWORD *)(v0 + 256) = v31;
    if ((v27 & 1) != 0)
    {
      v32 = v31[7];
      v33 = 8 * v24;
      swift_bridgeObjectRelease(*(_QWORD *)(v32 + v33));
      *(_QWORD *)(v32 + v33) = v16;
LABEL_14:
      v39 = *(_QWORD *)(v0 + 152);
      v38 = *(_QWORD *)(v0 + 160);
      v40 = *(_QWORD *)(v0 + 144);
      swift_bridgeObjectRelease(0x8000000000000000);
      v41 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
      v41(v39, v17);
      sub_417D8(v38, &qword_1F1180);
      v41(v40, v17);
      v42 = (_QWORD *)swift_task_alloc(_sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
      *(_QWORD *)(v0 + 264) = v42;
      *v42 = v0;
      v42[1] = sub_70720;
      return _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(*(_QWORD *)(v0 + 168), 0, 0, *(_QWORD *)(v0 + 176), v0 + 72);
    }
    v34 = *(_QWORD *)(v0 + 152);
    v31[(v24 >> 6) + 8] |= 1 << v24;
    result = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v20)(v31[6] + *(_QWORD *)(v18 + 72) * v24, v34, v17);
    *(_QWORD *)(v31[7] + 8 * v24) = v16;
    v35 = v31[2];
    v36 = __OFADD__(v35, 1);
    v37 = v35 + 1;
    if (!v36)
    {
      v31[2] = v37;
      goto LABEL_14;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_70720()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 264));
  if (v0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 256));
    v3 = sub_70790;
  }
  else
  {
    *(_QWORD *)(v2 + 248) = *(_QWORD *)(v2 + 256);
    v3 = sub_70400;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_70790()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 160);
  v8 = *(_QWORD *)(v0 + 144);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(v4, *(_QWORD *)(v0 + 176));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_70840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[141] = a6;
  v6[140] = a5;
  v6[139] = a4;
  v6[138] = a1;
  return swift_task_switch(sub_70864, 0, 0);
}

uint64_t sub_70864()
{
  _QWORD *v0;
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = (const void *)v0[141];
  v2 = v0[139];
  v3 = v0[138];
  v4 = type metadata accessor for UUID(0);
  v0[142] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v0[143] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v4);
  memcpy(v0 + 2, v1, 0x440uLL);
  v6 = (_QWORD *)swift_task_alloc(dword_1F2364);
  v0[144] = v6;
  *v6 = v0;
  v6[1] = sub_70910;
  return sub_6F798(v0[139], v0 + 2);
}

uint64_t sub_70910(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 1152);
  *(_QWORD *)(*v2 + 1160) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_709B4;
  }
  else
  {
    *(_QWORD *)(v4 + 1168) = a1;
    *(_DWORD *)(v4 + 1176) = *(_DWORD *)(sub_5EDC(&qword_1F1180) + 48);
    v6 = sub_70998;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_70998()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 1104) + *(int *)(v0 + 1176)) = *(_QWORD *)(v0 + 1168);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_709B4()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1144) + 8))(*(_QWORD *)(v0 + 1104), *(_QWORD *)(v0 + 1136));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *TabiSeedBookRecommendationService.deinit()
{
  _QWORD *v0;

  swift_release(v0[2]);
  sub_62F8(v0 + 3);
  sub_62F8(v0 + 8);
  return v0;
}

uint64_t TabiSeedBookRecommendationService.__deallocating_deinit()
{
  _QWORD *v0;

  swift_release(v0[2]);
  sub_62F8(v0 + 3);
  sub_62F8(v0 + 8);
  return swift_deallocClassInstance(v0, 104, 7);
}

uint64_t sub_70A54(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1F2364);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_70AB4;
  return sub_6F798(a1, a2);
}

uint64_t sub_70AB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*v2 + 16);
  v5 = *v2;
  v6 = swift_task_dealloc(v4);
  if (!v1)
    v6 = a1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_70B08(uint64_t a1, const void *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v3[139] = a1;
  v3[140] = *v2;
  memcpy(v3 + 2, a2, 0x440uLL);
  return swift_task_switch(sub_70B58, 0, 0);
}

uint64_t sub_70B58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = sub_5EDC(&qword_1F1180);
  v2 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 1128) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 1112);
  *(_QWORD *)(v2 + 32) = v0 + 16;
  v3 = sub_5EDC(&qword_1F2338);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 1136) = v4;
  *v4 = v0;
  v4[1] = sub_70C24;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 1104, v1, v3, 0, 0, &unk_1F2330, v2, v1);
}

uint64_t sub_70C24()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1136);
  *(_QWORD *)(*v1 + 1144) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_70CA0;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 1128));
    v4 = sub_70C90;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_70C90()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 1104));
}

uint64_t sub_70CA0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 1128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for TabiSeedBookRecommendationService()
{
  return objc_opt_self(_TtC20BooksPersonalization33TabiSeedBookRecommendationService);
}

uint64_t method lookup function for TabiSeedBookRecommendationService(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for TabiSeedBookRecommendationService);
}

uint64_t sub_70D00(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = (_QWORD *)swift_task_alloc(dword_1F232C);
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_6AA68;
  return sub_6FF44(a1, a2, v6, v7, v8);
}

uint64_t sub_70D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SeedBasedRecommendationRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_70DC0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = (int *)type metadata accessor for SeedBasedRecommendationRequest(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[5]));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[12]));
  swift_release(*(_QWORD *)(v0 + v5));
  v9 = (_QWORD *)(v0 + v6);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 416));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 456));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 464));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 472));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 512));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 544));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 552));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 568));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 576));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 600));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 616));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 664));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 680));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 688));
  v10 = *(_QWORD *)(v0 + v6 + 872);
  if (v10)
  {
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v9[110]);
  }
  v11 = v9[112];
  if (v11)
  {
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v9[114]);
    swift_bridgeObjectRelease(v9[116]);
  }
  v12 = v9[120];
  if (v12)
  {
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v9[122]);
  }
  swift_bridgeObjectRelease(v9[126]);
  v13 = v9[130];
  if (v13)
  {
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v9[132]);
    swift_bridgeObjectRelease(v9[134]);
  }
  return swift_deallocObject(v0, v6 + 1088, v3 | 7);
}

uint64_t sub_70F74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SeedBasedRecommendationRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_70FB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(type metadata accessor for SeedBasedRecommendationRequest(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v1 + v5;
  v8 = *(_QWORD *)(v1 + v6);
  v9 = v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)swift_task_alloc(dword_1F2354);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_4814;
  v10[141] = v9;
  v10[140] = v8;
  v10[139] = v7;
  v10[138] = a1;
  return swift_task_switch(sub_70864, 0, 0);
}

uint64_t sub_71068(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v2 = *(_QWORD *)(a1 + 416);
  v3 = *(_QWORD *)(a1 + 456);
  v4 = *(_QWORD *)(a1 + 464);
  v5 = *(_QWORD *)(a1 + 472);
  v6 = *(_QWORD *)(a1 + 512);
  v7 = *(_QWORD *)(a1 + 544);
  v8 = *(_QWORD *)(a1 + 552);
  v9 = *(_QWORD *)(a1 + 568);
  v10 = *(_QWORD *)(a1 + 576);
  v12 = *(_QWORD *)(a1 + 600);
  v15 = *(_QWORD *)(a1 + 616);
  v17 = *(_QWORD *)(a1 + 664);
  v20 = *(_QWORD *)(a1 + 680);
  v22 = *(_QWORD *)(a1 + 688);
  v43 = *(_QWORD *)(a1 + 712);
  v44 = *(_QWORD *)(a1 + 704);
  v41 = *(_QWORD *)(a1 + 728);
  v42 = *(_QWORD *)(a1 + 720);
  v39 = *(_QWORD *)(a1 + 744);
  v40 = *(_QWORD *)(a1 + 736);
  v37 = *(_QWORD *)(a1 + 760);
  v38 = *(_QWORD *)(a1 + 752);
  v23 = *(_OWORD *)(a1 + 784);
  v24 = *(_OWORD *)(a1 + 768);
  v21 = *(_OWORD *)(a1 + 800);
  v18 = *(_OWORD *)(a1 + 832);
  v19 = *(_OWORD *)(a1 + 816);
  v16 = *(_OWORD *)(a1 + 848);
  v14 = *(_OWORD *)(a1 + 864);
  v13 = *(_QWORD *)(a1 + 880);
  v29 = *(_QWORD *)(a1 + 896);
  v30 = *(_QWORD *)(a1 + 888);
  v27 = *(_QWORD *)(a1 + 912);
  v28 = *(_QWORD *)(a1 + 904);
  v25 = *(_QWORD *)(a1 + 928);
  v26 = *(_QWORD *)(a1 + 920);
  v35 = *(_QWORD *)(a1 + 944);
  v36 = *(_QWORD *)(a1 + 936);
  v33 = *(_QWORD *)(a1 + 960);
  v34 = *(_QWORD *)(a1 + 952);
  v31 = *(_QWORD *)(a1 + 976);
  v32 = *(_QWORD *)(a1 + 968);
  v52 = *(_QWORD *)(a1 + 1024);
  v53 = *(_QWORD *)(a1 + 1016);
  v50 = *(_QWORD *)(a1 + 1040);
  v51 = *(_QWORD *)(a1 + 1032);
  v48 = *(_QWORD *)(a1 + 1056);
  v49 = *(_QWORD *)(a1 + 1048);
  v47 = *(_QWORD *)(a1 + 1064);
  v45 = *(_QWORD *)(a1 + 1008);
  v46 = *(_QWORD *)(a1 + 1072);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 80));
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v22);
  sub_608A0(v44, v43, v42, v41, v40, v39, v38, v37, v24, *((uint64_t *)&v24 + 1), v23, *((uint64_t *)&v23 + 1), v21, *((uint64_t *)&v21 + 1), v19, *((uint64_t *)&v19 + 1), v18, *((uint64_t *)&v18 + 1), v16,
    *((uint64_t *)&v16 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v13);
  sub_608D8(v30, v29, v28, v27, v26, v25);
  sub_60914(v36, v35, v34, v33, v32, v31);
  swift_bridgeObjectRetain(v45);
  sub_60944(v53, v52, v51, v50, v49, v48, v47, v46);
  return a1;
}

unint64_t sub_712EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F1478;
  if (!qword_1F1478)
  {
    v1 = type metadata accessor for SeedBookRecommendationWork(255);
    result = swift_getWitnessTable(&unk_18CC30, v1);
    atomic_store(result, (unint64_t *)&qword_1F1478);
  }
  return result;
}

uint64_t sub_71334(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SeedBookRecommendationWork(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_71370(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t inited;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  int64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *result;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char v75;
  uint64_t v76;
  char v77[40];

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = a1 + 32;
  swift_bridgeObjectRetain(a1);
  v5 = 0;
  v71 = _swiftEmptyArrayStorage;
  v60 = v2;
  v61 = a2;
  v62 = v4;
  while (1)
  {
    if (!*(_QWORD *)(a2 + 16))
      goto LABEL_4;
    v7 = v4 + 80 * v5;
    v68 = *(_BYTE *)(v7 + 8);
    v8 = *(_QWORD *)(v7 + 32);
    v74 = *(_BYTE *)(v7 + 40);
    v69 = *(_QWORD *)v7;
    v70 = *(_QWORD *)(v7 + 56);
    v72 = *(_QWORD *)(v7 + 64);
    v73 = *(_QWORD *)(v7 + 48);
    v9 = *(_QWORD *)(v7 + 72);
    v10 = sub_39228(*(_QWORD *)v7);
    if ((v11 & 1) == 0)
      goto LABEL_4;
    v12 = *(_QWORD *)(a2 + 56) + 72 * v10;
    v14 = *(_QWORD *)(v12 + 8);
    v13 = *(_QWORD *)(v12 + 16);
    v64 = *(_QWORD *)(v12 + 40);
    v65 = v14;
    v63 = *(_BYTE *)(v12 + 48);
    v15 = *(_QWORD *)(v14 + 16);
    v66 = v13;
    v67 = v8;
    if (v15)
      break;
    sub_40554(v8, v74);
    swift_bridgeObjectRetain_n(v72, 2);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain_n(v73, 2);
    sub_40554(v8, v74);
    swift_bridgeObjectRetain(v13);
    v17 = _swiftEmptyArrayStorage;
LABEL_41:
    v39 = v17[2];
    v40 = Set.init(minimumCapacity:)(v39, &type metadata for UInt64, &protocol witness table for UInt64);
    v41 = v40;
    if (v39)
    {
      v42 = 0;
      v43 = v40 + 56;
      while (1)
      {
        v44 = v17[v42++ + 4];
        v45 = static Hasher._hash(seed:_:)(*(_QWORD *)(v41 + 40), v44);
        v46 = -1 << *(_BYTE *)(v41 + 32);
        v47 = v45 & ~v46;
        if (((*(_QWORD *)(v43 + ((v47 >> 3) & 0xFFFFFFFFFFFFF8)) >> v47) & 1) == 0)
          goto LABEL_50;
        v48 = *(_QWORD *)(v41 + 48);
        if (*(_QWORD *)(v48 + 8 * v47) == v44)
        {
LABEL_43:
          if (v42 == v39)
            break;
        }
        else
        {
          v49 = ~v46;
          while (1)
          {
            v47 = (v47 + 1) & v49;
            if (((*(_QWORD *)(v43 + ((v47 >> 3) & 0xFFFFFFFFFFFFF8)) >> v47) & 1) == 0)
              break;
            if (*(_QWORD *)(v48 + 8 * v47) == v44)
              goto LABEL_43;
          }
LABEL_50:
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v41);
          v76 = v41;
          sub_1668AC(v44, v47, isUniquelyReferenced_nonNull_native);
          v41 = v76;
          swift_bridgeObjectRelease(0x8000000000000000);
          if (v42 == v39)
            break;
          v43 = v41 + 56;
        }
      }
    }
    swift_bridgeObjectRelease(v17);
    v51 = 1;
    v52 = sub_719DC();
    v76 = Set.init(minimumCapacity:)(1, &type metadata for Methodology, v52);
    v53 = &byte_1D77B8;
    v2 = v60;
    a2 = v61;
    do
    {
      v54 = *v53++;
      sub_162F78(&v75, v54);
      --v51;
    }
    while (v51);
    swift_bridgeObjectRelease(v66);
    swift_bridgeObjectRelease(v65);
    v55 = v76;
    sub_40568(v67, v74);
    swift_bridgeObjectRelease(v73);
    swift_bridgeObjectRelease(v72);
    if ((swift_isUniquelyReferenced_nonNull_native(v71) & 1) == 0)
      v71 = sub_2FFF4(0, v71[2] + 1, 1, v71);
    v57 = v71[2];
    v56 = v71[3];
    if (v57 >= v56 >> 1)
      v71 = sub_2FFF4((_QWORD *)(v56 > 1), v57 + 1, 1, v71);
    v71[2] = v57 + 1;
    v6 = &v71[14 * v57];
    v6[4] = v69;
    *((_BYTE *)v6 + 40) = v68;
    v6[6] = v64;
    *((_BYTE *)v6 + 56) = v63;
    v6[8] = v67;
    *((_BYTE *)v6 + 72) = v74;
    v6[10] = v73;
    v6[11] = v70;
    v6[12] = v72;
    v6[13] = v9;
    v6[14] = v66;
    v6[15] = v41;
    v6[16] = v55;
    v6[17] = &_swiftEmptySetSingleton;
    v4 = v62;
LABEL_4:
    if (++v5 == v2)
    {
      swift_bridgeObjectRelease(a1);
      return v71;
    }
  }
  swift_bridgeObjectRetain(v14);
  sub_40554(v8, v74);
  swift_bridgeObjectRetain_n(v72, 2);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain_n(v73, 2);
  sub_40554(v8, v74);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  v16 = (uint64_t *)(v14 + 40);
  v17 = _swiftEmptyArrayStorage;
  while (1)
  {
    v19 = *(v16 - 1);
    v18 = *v16;
    v20 = sub_5EDC(&qword_1F1090);
    inited = swift_initStackObject(v20, v77);
    *(_OWORD *)(inited + 16) = xmmword_1875E0;
    v22 = (_QWORD *)(inited + 16);
    *(_QWORD *)(inited + 32) = v19;
    v23 = *(_QWORD *)(v18 + 16);
    swift_bridgeObjectRetain(v18);
    if (!v23)
      goto LABEL_12;
    v35 = sub_2FA6C((int *)((char *)&dword_0 + 1), v23 + 1, 1, (_QWORD *)inited);
    if (!*(_QWORD *)(v18 + 16))
      break;
    inited = (uint64_t)v35;
    v36 = v35[2];
    if ((v35[3] >> 1) - v36 < v23)
      goto LABEL_65;
    v37 = &v35[v36 + 4];
    if (v18 + 32 < (unint64_t)&v37[v23] && (unint64_t)v37 < v18 + 32 + 8 * v23)
      goto LABEL_68;
    v22 = (_QWORD *)(inited + 16);
    memcpy(v37, (const void *)(v18 + 32), 8 * v23);
    if (__OFADD__(*(_QWORD *)(inited + 16), v23))
      goto LABEL_66;
    *v22 = *(_QWORD *)(inited + 16) + v23;
LABEL_12:
    swift_bridgeObjectRelease(v18);
    v24 = *(_QWORD *)(inited + 16);
    v25 = v17[2];
    v26 = v25 + v24;
    if (__OFADD__(v25, v24))
    {
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
    }
    v27 = swift_isUniquelyReferenced_nonNull_native(v17);
    if ((v27 & 1) != 0 && v26 <= v17[3] >> 1)
    {
      if (*v22)
        goto LABEL_21;
    }
    else
    {
      if (v25 <= v26)
        v28 = v25 + v24;
      else
        v28 = v25;
      v17 = sub_2FA6C((_QWORD *)v27, v28, 1, v17);
      if (*v22)
      {
LABEL_21:
        v29 = v17[2];
        if ((v17[3] >> 1) - v29 < v24)
          goto LABEL_63;
        v30 = &v17[v29 + 4];
        if (inited + 32 < (unint64_t)&v30[v24] && (unint64_t)v30 < inited + 32 + 8 * v24)
          goto LABEL_68;
        memcpy(v30, (const void *)(inited + 32), 8 * v24);
        if (v24)
        {
          v32 = v17[2];
          v33 = __OFADD__(v32, v24);
          v34 = v32 + v24;
          if (v33)
            goto LABEL_64;
          v17[2] = v34;
        }
        goto LABEL_10;
      }
    }
    if (v24)
      goto LABEL_62;
LABEL_10:
    swift_bridgeObjectRelease(inited);
    v16 += 2;
    if (!--v15)
    {
      swift_bridgeObjectRelease_n(v65, 2);
      goto LABEL_41;
    }
  }
  __break(1u);
LABEL_68:
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

unint64_t sub_719DC()
{
  unint64_t result;

  result = qword_1F2368;
  if (!qword_1F2368)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Methodology, &type metadata for Methodology);
    atomic_store(result, (unint64_t *)&qword_1F2368);
  }
  return result;
}

uint64_t sub_71A20(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD v33[2];

  v5 = v4;
  v32 = type metadata accessor for URL.DirectoryHint(0);
  v27 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5EDC(&qword_1F2448);
  __chkstk_darwin(v12);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = a1;
  sub_3DD40((uint64_t)a1, v5 + 16);
  v30 = a2;
  sub_3DD40((uint64_t)a2, v5 + 56);
  v29 = a3;
  sub_3DD40((uint64_t)a3, v5 + 96);
  v28 = a4;
  sub_3DD40((uint64_t)a4, v5 + 136);
  v19 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v20 = 1;
  v21 = objc_msgSend(v19, "URLsForDirectory:inDomains:", 13, 1);

  v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v15);
  if (*(_QWORD *)(v22 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v14, v22 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80)), v15);
    v20 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, v20, 1, v15);
  swift_bridgeObjectRelease();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v33[0] = 0xD00000000000001ALL;
    v33[1] = 0x80000000001A0A00;
    v24 = v27;
    v25 = v32;
    (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v11, enum case for URL.DirectoryHint.inferFromPath(_:), v32);
    v26 = sub_3D7A0();
    URL.appending<A>(path:directoryHint:)(v33, v11, &type metadata for String, v26);
    sub_62F8(v28);
    sub_62F8(v29);
    sub_62F8(v30);
    sub_62F8(v31);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v25);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v5 + OBJC_IVAR____TtC20BooksPersonalization32UserEncodingInputFeaturesService_cachePath, v18, v15);
    return v5;
  }
  return result;
}

uint64_t sub_71CF4(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 4536) = v1;
  *(_BYTE *)(v2 + 4960) = a1;
  v3 = *(_QWORD *)(type metadata accessor for Event(0) - 8);
  *(_QWORD *)(v2 + 4584) = v3;
  *(_QWORD *)(v2 + 4632) = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_71D58, 0, 0);
}

uint64_t sub_71D58()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 4536);
  swift_retain_n(v1, 2);
  swift_asyncLet_begin(v0 + 16, 0, &type metadata for Configuration, &unk_1F2460, v1, v0 + 696);
  return swift_asyncLet_get_throwing(v0 + 16, v0 + 696, sub_71DDC, v0 + 4496);
}

uint64_t sub_71DDC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 4680) = v0;
  if (v0)
    return swift_asyncLet_finish(v1 + 16, v1 + 696, sub_72938, v1 + 4448);
  else
    return swift_task_switch(sub_71E14, 0, 0);
}

uint64_t sub_71E14()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v4;

  sub_7328C((uint64_t)(v0 + 175), (uint64_t)(v0 + 523));
  sub_7328C((uint64_t)(v0 + 523), (uint64_t)(v0 + 495));
  if (sub_732D4((uint64_t)(v0 + 495)) == 1)
  {
    v1 = sub_732EC();
    v2 = swift_allocError(&type metadata for UserEncodingInputFeaturesService.Errors, v1, 0, 0);
    v0[619] = v2;
    swift_willThrow(v2);
    return swift_asyncLet_finish(v0 + 2, v0 + 87, sub_728E0, v0 + 82);
  }
  else
  {
    sub_3DD40(v0[567] + 56, (uint64_t)(v0 + 551));
    v4 = v0[554];
    v0[591] = v4;
    v0[597] = v0[555];
    v0[603] = sub_49F4(v0 + 551, v4);
    v0[604] = sub_8A21C((uint64_t)&off_1D9AA0);
    sub_73330(v0 + 523, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_608A0);
    return swift_asyncLet_get_throwing(v0 + 2, v0 + 87, sub_71F4C, v0 + 518);
  }
}

