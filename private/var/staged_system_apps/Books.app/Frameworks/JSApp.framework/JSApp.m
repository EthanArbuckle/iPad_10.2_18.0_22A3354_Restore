void sub_4A64(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "windowProvider"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "keyWindow"));

  objc_msgSend(*(id *)(a1 + 32), "setKeyWindow:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "windowScene"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_sceneIdentifier"));
  objc_msgSend(*(id *)(a1 + 32), "setKeyWindowSceneIdentifier:", v5);

  v6 = JSALog();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "keyWindowSceneIdentifier"));
    v11 = 138412546;
    v12 = v3;
    v13 = 2112;
    v14 = v8;
    _os_log_impl(&dword_0, v7, OS_LOG_TYPE_INFO, "JSAWindowManager: Update keyWindow: %@, sceneIdentifier: %@", (uint8_t *)&v11, 0x16u);

  }
  v9 = *(void **)(a1 + 32);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "keyWindow"));
  objc_msgSend(v9, "updateWindowSizeIfNeeded:", v10);

}

uint64_t sub_4BB0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_4CA8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  id v9;
  NSObject *v10;
  void *v11;
  _QWORD v12[2];
  uint8_t buf[4];
  void *v14;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "keyWindow"));

  if (v2 == v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "keyWindow"));
    objc_msgSend(v4, "bounds");
    v6 = v5;
    v8 = v7;

    objc_msgSend(*(id *)(a1 + 40), "setKeyWindowSize:", v6, v8);
    v9 = JSALog();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(double *)v12 = v6;
      *(double *)&v12[1] = v8;
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithBytes:objCType:](NSValue, "valueWithBytes:objCType:", v12, "{CGSize=dd}"));
      *(_DWORD *)buf = 138412290;
      v14 = v11;
      _os_log_impl(&dword_0, v10, OS_LOG_TYPE_INFO, "JSAWindowManager: Update keyWindowSize: %@", buf, 0xCu);

    }
  }
}

uint64_t sub_4DCC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_51F0(id a1)
{
  JSAUserDefaults *v1;
  void *v2;

  v1 = objc_alloc_init(JSAUserDefaults);
  v2 = (void *)qword_B9EF8;
  qword_B9EF8 = (uint64_t)v1;

}

id sub_542C(id a1, void *a2, int a3, int a4)
{
  id v7;
  void *v8;
  uint64_t *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  void *v22;
  uint64_t v23;
  id v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];

  v7 = a2;
  v24 = a1;
  v22 = v7;
  if (a1)
  {
    v8 = v7;
    a1 = objc_alloc_init((Class)NSMutableDictionary);
    v9 = (uint64_t *)&off_B7040;
    if (!a4)
      v9 = (uint64_t *)&off_B7048;
    v23 = *v9;
    if ((a4 & 1) != 0)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[BUAppGroup books](BUAppGroup, "books"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "userDefaults"));

    }
    else
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    }
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v12 = v8;
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v26;
      do
      {
        v16 = 0;
        do
        {
          if (*(_QWORD *)v26 != v15)
            objc_enumerationMutation(v12);
          v17 = *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)v16);
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKey:", v17));
          if (v18)
          {
            objc_msgSend(a1, "setObject:forKey:", v18, v17);
            if (!a3)
              goto LABEL_15;
LABEL_14:
            objc_msgSend(v11, "addObserver:forKeyPath:options:context:", v24, v17, 1, v23);
            goto LABEL_15;
          }
          v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
          objc_msgSend(a1, "setObject:forKey:", v19, v17);

          if (a3)
            goto LABEL_14;
LABEL_15:

          v16 = (char *)v16 + 1;
        }
        while (v14 != v16);
        v20 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
        v14 = v20;
      }
      while (v20);
    }

  }
  return a1;
}

id sub_5634(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = a1[5];
  v3 = *(void **)(a1[4] + 8);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "environment"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "appForOwnership"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[JSManagedValue managedValueWithValue:andOwner:](JSManagedValue, "managedValueWithValue:andOwner:", v2, v6));
  objc_msgSend(v3, "setObject:forKey:", v7, a1[6]);

  objc_msgSend(*(id *)(a1[4] + 16), "setObject:forKey:", a1[7], a1[6]);
  return objc_msgSend(*(id *)(a1[4] + 24), "setObject:forKey:", a1[8], a1[6]);
}

id sub_58E8(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "removeObjectForKey:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "removeObjectForKey:", *(_QWORD *)(a1 + 40));
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "removeObjectForKey:", *(_QWORD *)(a1 + 40));
}

void sub_5A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_5A9C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_5AAC(uint64_t a1)
{

}

void sub_5AB4(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  if (*(_BYTE *)(a1 + 48))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[BUAppGroup books](BUAppGroup, "books"));
    v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "userDefaults"));

  }
  else
  {
    v7 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  }
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", v7));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

void sub_5C84(os_unfair_lock_s *a1, void *a2, void *a3, char a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  _QWORD v15[2];
  void (*v16)(uint64_t);
  void *v17;
  os_unfair_lock_s *v18;
  id v19;
  id v20;
  _BYTE *v21;
  uint64_t *v22;
  char v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;
  uint64_t v30;
  _BYTE buf[24];
  uint64_t (*v32)(uint64_t, uint64_t);
  void (*v33)(uint64_t);
  id v34;

  v7 = a2;
  v8 = a3;
  if (a1)
  {
    v9 = JSALog();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "-[JSAUserDefaults _defaultsDidChange:value:fromGroup:]";
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v7;
      _os_log_impl(&dword_0, v10, OS_LOG_TYPE_DEFAULT, "%{public}s _defaultsDidChange %@", buf, 0x16u);
    }

    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v32 = sub_5A9C;
    v33 = sub_5AAC;
    v34 = objc_alloc_init((Class)NSMutableDictionary);
    v24 = 0;
    v25 = &v24;
    v26 = 0x3032000000;
    v27 = sub_5A9C;
    v28 = sub_5AAC;
    v29 = 0;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v16 = sub_5F38;
    v17 = &unk_9DDB0;
    v18 = a1;
    v23 = a4;
    v19 = v7;
    v20 = v8;
    v21 = buf;
    v22 = &v24;
    v11 = v15;
    os_unfair_lock_lock_with_options(&a1[8], 0x10000);
    v16((uint64_t)v11);
    os_unfair_lock_unlock(a1 + 8);

    if (v25[5] && *(_QWORD *)(*(_QWORD *)&buf[8] + 40))
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
      v13 = v25[5];
      v30 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v30, 1));
      objc_msgSend(v12, "enqueueManagedValueCall:arguments:file:line:", v13, v14, CFSTR("JSAUserDefaults.m"), 155);

    }
    _Block_object_dispose(&v24, 8);

    _Block_object_dispose(buf, 8);
  }

}

void sub_5F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_5F38(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  if (*(_BYTE *)(a1 + 72))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[BUAppGroup books](BUAppGroup, "books"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "userDefaults"));

  }
  else
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  }
  v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", v4));

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKey:", *(_QWORD *)(a1 + 40)));
  v6 = *(id *)(a1 + 48);
  if (!v6)
    v6 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  if (v5 != v6 || (objc_msgSend(v5, "isEqual:", v5) & 1) == 0)
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "setObject:forKey:", v6, *(_QWORD *)(a1 + 40));
  if (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "count"))
  {
    objc_msgSend(v13, "addEntriesFromDictionary:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
    v7 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
    if (*(_BYTE *)(a1 + 72))
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[BUAppGroup books](BUAppGroup, "books"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "userDefaults"));

    }
    else
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    }
    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKey:", v9));
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v12 = *(void **)(v11 + 40);
    *(_QWORD *)(v11 + 40) = v10;

  }
}

void sub_6368(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_6388(uint64_t a1)
{
  void *v2;
  void *v3;
  os_unfair_lock_s *WeakRetained;

  WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained((id *)(a1 + 48));
  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", NSKeyValueChangeNewKey));
  sub_5C84(WeakRetained, v2, v3, 0);

}

uint64_t sub_63F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_63FC(uint64_t a1)
{
  void *v2;
  void *v3;
  os_unfair_lock_s *WeakRetained;

  WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained((id *)(a1 + 48));
  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", NSKeyValueChangeNewKey));
  sub_5C84(WeakRetained, v2, v3, 1);

}

uint64_t sub_6464(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_6930(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;

  v3 = a2;
  objc_opt_self(a1);
  if ((objc_msgSend(v3, "isEqualToString:", CFSTR("full")) & 1) != 0)
  {
    v4 = 4;
  }
  else if ((objc_msgSend(v3, "isEqualToString:", CFSTR("long")) & 1) != 0)
  {
    v4 = 3;
  }
  else if ((objc_msgSend(v3, "isEqualToString:", CFSTR("medium")) & 1) != 0)
  {
    v4 = 2;
  }
  else
  {
    v4 = objc_msgSend(v3, "isEqualToString:", CFSTR("short"));
  }

  return v4;
}

void sub_6B3C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_6B50(id a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_B9F00;
  qword_B9F00 = (uint64_t)v1;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSTimeZone timeZoneForSecondsFromGMT:](NSTimeZone, "timeZoneForSecondsFromGMT:", 0));
  objc_msgSend((id)qword_B9F00, "setTimeZone:", v3);

}

void sub_6CE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_6CF8(id a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_B9F10;
  qword_B9F10 = (uint64_t)v1;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSTimeZone timeZoneForSecondsFromGMT:](NSTimeZone, "timeZoneForSecondsFromGMT:", 0));
  objc_msgSend((id)qword_B9F10, "setTimeZone:", v3);

}

void sub_6FD0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  _QWORD v13[2];

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
  v8 = *(_QWORD *)(a1 + 32);
  v9 = v5;
  if (!v5)
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v13[0] = v9;
  if (v6)
    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedDescription"));
  else
    v10 = objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v11 = (void *)v10;
  v13[1] = v10;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v13, 2));
  objc_msgSend(v7, "enqueueValueCall:arguments:file:line:", v8, v12, CFSTR("JSAAssetRequest.m"), 41);

  if (!v5)
}

void sub_718C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(void);
  void (**v7)(void);
  void (*v8)(void);
  void (**v9)(void);
  id v10;

  v10 = a2;
  v5 = a3;
  if (v5
    || (!v10 || (v5 = objc_msgSend(objc_alloc((Class)NSString), "initWithData:encoding:", v10, 4)) == 0)
    && (v5 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("JSAErrorDomain"), 0, &off_A5A70))) != 0)
  {
    v6 = (void (**)(void))objc_retainBlock(*(id *)(a1 + 32));
    v7 = v6;
    if (v6)
    {
      v8 = v6[2];
LABEL_9:
      v8();
    }
  }
  else
  {
    v9 = (void (**)(void))objc_retainBlock(*(id *)(a1 + 32));
    v7 = v9;
    if (v9)
    {
      v8 = v9[2];
      goto LABEL_9;
    }
  }

}

void sub_73CC(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  void *v8;
  id v9;

  v9 = a2;
  v6 = a4;
  v7 = objc_retainBlock(*(id *)(a1 + 32));
  v8 = v7;
  if (v7)
    (*((void (**)(id, id, id))v7 + 2))(v7, v9, v6);

}

void sub_756C(uint64_t a1, uint64_t a2)
{
  void *v3;
  NSObject *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  _QWORD v12[3];
  _QWORD v13[3];
  void *v14;

  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "value"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
    v13[0] = &__kCFBooleanTrue;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2 != 0, CFSTR("didAttemptApproval"), CFSTR("requestWasApproved")));
    v12[2] = CFSTR("itemIdentifier");
    v8 = *(_QWORD *)(a1 + 40);
    v13[1] = v7;
    v13[2] = v8;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v13, v12, 3));
    v14 = v9;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v14, 1));
    objc_msgSend(v6, "enqueueValueCall:arguments:file:line:", v5, v10, CFSTR("JSAParentalApproval.m"), 45);

    objc_msgSend(*(id *)(a1 + 48), "removeManagedReference:withOwner:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56));
  }
  else
  {
    v11 = JSALog();
    v5 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_717A4(v5);
  }

}

void sub_7904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_7924(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  int v6;
  const char *v7;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "context"));

  if (v2)
  {
    v3 = JSALog();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 136446210;
      v7 = "-[JSAEnvironment init]_block_invoke";
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "%{public}s: JSGarbageCollect() due to memory warning", (uint8_t *)&v6, 0xCu);
    }

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "context"));
    JSGarbageCollect((JSContextRef)objc_msgSend(v5, "JSGlobalContextRef"));

  }
}

void sub_7A08(id val)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  id location;

  if (val)
  {
    objc_initWeak(&location, val);
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "thread"));
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_7E5C;
    v3[3] = &unk_9DF80;
    objc_copyWeak(&v4, &location);
    objc_msgSend(v2, "enqueueBlockSync:", v3);

    objc_destroyWeak(&v4);
    objc_destroyWeak(&location);
  }
}

void sub_7AAC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

NSDictionary *__cdecl sub_7AD0(id a1)
{
  id v1;
  NSObject *v2;
  void *v3;
  void *v4;
  __CFString *v5;
  id v6;
  NSObject *v7;
  id v8;
  NSObject *v9;
  int v11;
  const __CFString *v12;

  v1 = JSALog();
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 138412290;
    v12 = CFSTR("ScriptingLocalStorage");
    _os_log_impl(&dword_0, v2, OS_LOG_TYPE_DEFAULT, "--- Persisting state for %@ ---", (uint8_t *)&v11, 0xCu);
  }

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[JSALocalStorage sharedInstance](JSALocalStorage, "sharedInstance"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "values"));
  v5 = (__CFString *)objc_msgSend(v4, "copy");

  v6 = JSALog();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 138412290;
    v12 = v5;
    _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEFAULT, "%@", (uint8_t *)&v11, 0xCu);
  }

  v8 = JSALog();
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 138412290;
    v12 = CFSTR("ScriptingLocalStorage");
    _os_log_impl(&dword_0, v9, OS_LOG_TYPE_DEFAULT, "--- End Persisting state for %@ ---", (uint8_t *)&v11, 0xCu);
  }

  return (NSDictionary *)v5;
}

void sub_7E5C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  os_signpost_id_t v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  id *v8;
  id *WeakRetained;
  id v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  id v22;
  id v23;
  NSObject *v24;
  NSObject *v25;
  _QWORD v26[4];
  id v27;
  uint8_t buf[16];

  v2 = JSASignpostExecution();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = os_signpost_id_generate(v3);

  v5 = JSASignpostExecution();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = v6;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_0, v7, OS_SIGNPOST_INTERVAL_BEGIN, v4, "Init JSContext", "", buf, 2u);
  }

  v8 = (id *)(a1 + 32);
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v10 = objc_alloc_init((Class)JSContext);
    v11 = WeakRetained[2];
    WeakRetained[2] = v10;

    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "bundleIdentifier"));
    objc_msgSend(WeakRetained[2], "setName:", v13);

    objc_msgSend(WeakRetained[2], "setInspectable:", 1);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_812C;
    v26[3] = &unk_9DF58;
    objc_copyWeak(&v27, v8);
    objc_msgSend(WeakRetained[2], "setExceptionHandler:", v26);
    if (MGGetBoolAnswer(CFSTR("InternalBuild"), v14))
      JSRemoteInspectorSetLogToSystemConsole(1);
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "context"));
    +[JSAEnvironment _exposeObjectsAndClassesToContext:](JSAEnvironment, "_exposeObjectsAndClassesToContext:", v15);

    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "context"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKeyedSubscript:", CFSTR("native")));

    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[4], "value"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "context"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "virtualMachine"));
    objc_msgSend(v20, "removeManagedReference:withOwner:", WeakRetained[4], WeakRetained);

    if (objc_msgSend(v17, "isObject"))
      v21 = objc_claimAutoreleasedReturnValue(+[JSManagedValue managedValueWithValue:andOwner:](JSManagedValue, "managedValueWithValue:andOwner:", v17, WeakRetained));
    else
      v21 = 0;
    v22 = WeakRetained[4];
    WeakRetained[4] = (id)v21;

    v23 = JSASignpostExecution();
    v24 = objc_claimAutoreleasedReturnValue(v23);
    v25 = v24;
    if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v24))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_0, v25, OS_SIGNPOST_INTERVAL_END, v4, "Init JSContext", "", buf, 2u);
    }

    objc_destroyWeak(&v27);
  }

}

void sub_810C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_812C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  unsigned int *v8;
  int v9;
  id v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  __CFString *v28;
  __CFString *v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  unsigned int v34;
  void *v35;
  id v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  id v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  __CFString *v50;
  __CFString *v51;
  __CFString *v52;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = (unsigned int *)objc_msgSend(WeakRetained, "_exceptionHandlerReentrantCountPtr");
  v9 = atomic_load(v8);
  if (v9 <= 3)
  {
    v19 = v8;
    do
      v20 = __ldaxr(v8);
    while (__stlxr(v20 + 1, v8));
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "valueForProperty:", CFSTR("message")));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "valueForProperty:", CFSTR("userInfo")));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "valueForProperty:", CFSTR("line")));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "valueForProperty:", CFSTR("column")));
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "valueForProperty:", CFSTR("sourceURL")));
    if (-[NSObject isString](v11, "isString"))
      v52 = (__CFString *)objc_claimAutoreleasedReturnValue(-[NSObject toString](v11, "toString"));
    else
      v52 = CFSTR("<Unknown>");
    v49 = v21;
    if (objc_msgSend(v21, "isObject"))
    {
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "toObject"));
      v51 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "description"));

    }
    else
    {
      v51 = CFSTR("<Unknown>");
    }
    if (objc_msgSend(v22, "isNumber"))
    {
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "toNumber"));
      v50 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "stringValue"));

    }
    else
    {
      v50 = CFSTR("<Unknown>");
    }
    if (objc_msgSend(v23, "isNumber"))
    {
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "toNumber"));
      v28 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "stringValue"));

    }
    else
    {
      v28 = CFSTR("<Unknown>");
    }
    v48 = v22;
    v46 = v24;
    v47 = v23;
    if (objc_msgSend(v24, "isString"))
      v29 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "toString"));
    else
      v29 = CFSTR("<Unknown>");
    v30 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("message: %@, userInfo: %@, line: %@, column: %@, sourceURL: %@"), v52, v51, v50, v28, v29));
    v31 = v30;
    if (!v30)
    {
      v45 = v5;
      v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "globalObject"));
      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKeyedSubscript:", CFSTR("RangeError")));
      v34 = objc_msgSend(v6, "isInstanceOf:", v33);

      if (v34)
      {
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("message")));
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "description"));

      }
      else
      {
        v31 = 0;
      }
      v5 = v45;
    }
    v36 = JSALog();
    v37 = objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      sub_718AC((uint64_t)v31, v37, v38, v39, v40, v41, v42, v43);

    do
      v44 = __ldaxr(v19);
    while (__stlxr(v44 - 1, v19));

  }
  else
  {
    v10 = JSALog();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_71878(v11, v12, v13, v14, v15, v16, v17, v18);
  }

}

void sub_8738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_8764(uint64_t a1)
{
  id *WeakRetained;
  id v3;
  NSObject *v4;
  os_signpost_id_t v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  OpaqueJSString *v9;
  JSStringRef v10;
  OpaqueJSString *v11;
  void *v12;
  const OpaqueJSContext *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  id v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  NSObject *v38;
  NSObject *v39;
  id v40;
  void *v41;
  _BYTE v42[12];
  __int16 v43;
  uint64_t v44;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    v3 = JSASignpostExecution();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    v5 = os_signpost_id_generate(v4);

    v6 = JSASignpostExecution();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    v8 = v7;
    if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
    {
      *(_WORD *)v42 = 0;
      _os_signpost_emit_with_name_impl(&dword_0, v8, OS_SIGNPOST_INTERVAL_BEGIN, v5, "Evaluate Script", "", v42, 2u);
    }

    v9 = JSStringCreateWithUTF8CString((const char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "bytes"));
    v10 = JSStringCreateWithCFString(*(CFStringRef *)(a1 + 40));
    if (v9 && (v11 = v10) != 0)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "context"));
      v13 = (const OpaqueJSContext *)objc_msgSend(v12, "JSGlobalContextRef");

      *(_QWORD *)v42 = 0;
      JSEvaluateScript(v13, v9, 0, v11, 0, (JSValueRef *)v42);
      v14 = *(_QWORD *)v42;
      if (*(_QWORD *)v42)
      {
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "context"));
        v16 = (void *)objc_claimAutoreleasedReturnValue(+[JSValue valueWithJSValueRef:inContext:](JSValue, "valueWithJSValueRef:inContext:", v14, v15));

        v17 = JSALog();
        v18 = objc_claimAutoreleasedReturnValue(v17);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          sub_71910((uint64_t)v16, v18);

      }
      JSStringRelease(v11);
      JSStringRelease(v9);
    }
    else
    {
      v19 = JSALog();
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        sub_71994(v20, v21, v22, v23, v24, v25, v26, v27);

    }
    v28 = JSALog();
    v29 = objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      v31 = *(_QWORD *)(a1 + 40);
      v30 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)v42 = 138543618;
      *(_QWORD *)&v42[4] = v30;
      v43 = 2114;
      v44 = v31;
      _os_log_impl(&dword_0, v29, OS_LOG_TYPE_DEFAULT, "JSAEnvironment javascript loaded with version=%{public}@, name=%{public}@", v42, 0x16u);
    }

    v32 = *(_QWORD *)(a1 + 48);
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "context"));
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKeyedSubscript:", CFSTR("config")));
    objc_msgSend(v34, "setObject:forKeyedSubscript:", v32, CFSTR("version"));

    if (*(_BYTE *)(a1 + 72))
    {
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "context"));
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "objectForKeyedSubscript:", CFSTR("config")));
      objc_msgSend(v36, "setObject:forKeyedSubscript:", CFSTR("iosbundle"), CFSTR("environment"));

    }
    objc_storeStrong(WeakRetained + 3, *(id *)(a1 + 48));
    v37 = JSASignpostExecution();
    v38 = objc_claimAutoreleasedReturnValue(v37);
    v39 = v38;
    if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v38))
    {
      *(_WORD *)v42 = 0;
      _os_signpost_emit_with_name_impl(&dword_0, v39, OS_SIGNPOST_INTERVAL_END, v5, "Evaluate Script", "", v42, 2u);
    }

    v40 = objc_retainBlock(*(id *)(a1 + 56));
    v41 = v40;
    if (v40)
      (*((void (**)(id))v40 + 2))(v40);

  }
}

void sub_8B80(uint64_t a1)
{
  id v2;
  NSObject *v3;
  os_signpost_id_t v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  unint64_t v8;
  void *v9;
  void *v10;
  NSMutableArray *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *i;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  NSObject *v32;
  NSObject *v33;
  unint64_t v34;
  os_signpost_id_t v35;
  void *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint8_t buf[4];
  void *v42;
  _BYTE v43[128];

  v2 = JSASignpostExecution();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = os_signpost_id_generate(v3);

  v5 = JSASignpostExecution();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = v6;
  v8 = v4 - 1;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_0, v7, OS_SIGNPOST_INTERVAL_BEGIN, v4, "Register Objects", "", buf, 2u);
  }

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "nativeJSObject"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "value"));

  v36 = v10;
  if (objc_msgSend(v10, "isObject"))
  {
    v34 = v4 - 1;
    v35 = v4;
    v11 = objc_opt_new(NSMutableArray);
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v12 = *(id *)(a1 + 40);
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v37, v43, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v38;
      do
      {
        for (i = 0; i != v14; i = (char *)i + 1)
        {
          if (*(_QWORD *)v38 != v15)
            objc_enumerationMutation(v12);
          v17 = *(_QWORD *)(*((_QWORD *)&v37 + 1) + 8 * (_QWORD)i);
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v17));
          objc_msgSend(v36, "setObject:forKeyedSubscript:", v18, v17);
          v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@=%@"), v17, v18));
          -[NSMutableArray addObject:](v11, "addObject:", v19);

        }
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v37, v43, 16);
      }
      while (v14);
    }

    v20 = JSALog();
    v21 = objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v22 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray componentsJoinedByString:](v11, "componentsJoinedByString:", CFSTR(", ")));
      *(_DWORD *)buf = 138543362;
      v42 = v22;
      _os_log_impl(&dword_0, v21, OS_LOG_TYPE_DEFAULT, "JSAEnvironment registered: %{public}@", buf, 0xCu);

    }
    v8 = v34;
    v4 = v35;
  }
  else
  {
    v23 = JSALog();
    v11 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(&v11->super.super, OS_LOG_TYPE_ERROR))
      sub_71A04(&v11->super.super, v24, v25, v26, v27, v28, v29, v30);
  }

  v31 = JSASignpostExecution();
  v32 = objc_claimAutoreleasedReturnValue(v31);
  v33 = v32;
  if (v8 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v32))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_0, v33, OS_SIGNPOST_INTERVAL_END, v4, "Register Objects", "", buf, 2u);
  }

}

id sub_953C(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setInterval:timeInMS:", a2);
}

id sub_9548(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "clearInterval:", a2);
}

id sub_9554(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setTimeout:timeInMS:", a2);
}

id sub_9560(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "clearTimeout:", a2);
}

JSAPackage *__cdecl sub_956C(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "currentPackage"));

  return (JSAPackage *)v2;
}

id sub_95AC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  _QWORD v13[4];
  id v14;
  _QWORD *v15;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "templateRegistrationPromise"));
  v4 = v3;
  if (v3)
  {
    v5 = v3;
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSError bu_errorWithDomain:code:description:underlyingError:](NSError, "bu_errorWithDomain:code:description:underlyingError:", CFSTR("JSAErrorDomain"), 111, CFSTR("templateRegistrationPromise is not set"), 0));
    v5 = (id)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](AMSPromise, "promiseWithError:", v6));

  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("Promise")));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_9740;
  v13[3] = &unk_9E088;
  v14 = v5;
  v8 = v5;
  v9 = objc_retainBlock(v13);
  v15 = v9;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v15, 1));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "constructWithArguments:", v10));

  return v11;
}

void sub_9740(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_97E4;
  v10[3] = &unk_9E060;
  v11 = v5;
  v12 = v6;
  v8 = v6;
  v9 = v5;
  objc_msgSend(v7, "resultWithCompletion:", v10);

}

void sub_97E4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
  v8 = v7;
  if (v5)
  {
    v9 = *(_QWORD *)(a1 + 32);
    v17 = v5;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v17, 1));
    v11 = v8;
    v12 = v9;
    v13 = v10;
    v14 = 344;
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 40);
    if (!v6)
    {
      objc_msgSend(v7, "enqueueValueCall:arguments:file:line:", v15, &__NSArray0__struct, CFSTR("JSAEnvironment.m"), 346);
      goto LABEL_6;
    }
    v16 = v6;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v16, 1));
    v11 = v8;
    v12 = v15;
    v13 = v10;
    v14 = 346;
  }
  objc_msgSend(v11, "enqueueValueCall:arguments:file:line:", v12, v13, CFSTR("JSAEnvironment.m"), v14);

LABEL_6:
}

void sub_99E0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_99F0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_9B20(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "records"));
  objc_msgSend(v2, "addObject:", *(_QWORD *)(a1 + 40));

}

uint64_t sub_9C14(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_9C24(uint64_t a1)
{

}

void sub_9C2C(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "records"));
  v3 = objc_msgSend(v2, "copy");
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "records"));
  objc_msgSend(v6, "removeAllObjects");

}

void sub_9D64(id a1)
{
  JSATasteManager *v1;
  void *v2;

  v1 = objc_alloc_init(JSATasteManager);
  v2 = (void *)qword_B9F28;
  qword_B9F28 = (uint64_t)v1;

}

void sub_9DD4(id a1, JSContext *a2)
{
  id v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(-[JSContext objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("TasteManager")));
  if (objc_msgSend(v3, "isObject"))
    v2 = objc_msgSend(v3, "invokeMethod:withArguments:", CFSTR("syncTastes"), &__NSArray0__struct);

}

double sub_9FB4(uint64_t a1)
{
  void *v1;
  double v2;
  double v3;

  objc_opt_self(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  objc_msgSend(v1, "timeIntervalSince1970");
  v3 = v2;

  return v3;
}

void sub_A288(id a1)
{
  int v1;
  int v2;
  id v3;
  NSObject *v4;
  size_t v5;
  _OWORD v6[40];
  int v7[2];
  int v8;
  pid_t v9;

  *(_QWORD *)v7 = 0xE00000001;
  v8 = 1;
  v9 = getpid();
  memset(v6, 0, 512);
  v5 = 648;
  v1 = sysctl(v7, 4u, v6, &v5, 0, 0);
  if (v1)
  {
    v2 = v1;
    v3 = JSALog();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_71AC0(v2, v4);

  }
  else
  {
    *(double *)&qword_B9F40 = (double)SDWORD2(v6[0]) / 1000000.0 + (double)*(uint64_t *)&v6[0];
  }
}

void sub_A4B4(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_B9F58;
  qword_B9F58 = (uint64_t)v1;

}

id sub_A640(void *a1)
{
  if (a1)
    a1 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  return a1;
}

void sub_B4A4(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_B9F68;
  qword_B9F68 = (uint64_t)v1;

}

NSMutableDictionary *sub_B624(uint64_t a1, void *a2)
{
  id v2;
  NSMutableDictionary *v3;

  if (a1)
  {
    v2 = a2;
    v3 = objc_opt_new(NSMutableDictionary);
    -[NSMutableDictionary setValue:forKey:](v3, "setValue:forKey:", kSecClassGenericPassword, kSecClass);
    -[NSMutableDictionary setValue:forKey:](v3, "setValue:forKey:", v2, kSecAttrService);

    -[NSMutableDictionary setValue:forKey:](v3, "setValue:forKey:", kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly, kSecAttrAccessible);
  }
  else
  {
    v3 = 0;
  }
  return v3;
}

void sub_B784(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "getItem:", *(_QWORD *)(a1 + 40)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v7 = v2;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v7, 1));
    objc_msgSend(v4, "enqueueValueCall:arguments:file:line:", v5, v6, CFSTR("JSAKeychainStorage.m"), 67);

  }
  else
  {
    objc_msgSend(v3, "enqueueValueCall:arguments:file:line:", v5, 0, CFSTR("JSAKeychainStorage.m"), 67);
  }

}

void sub_BA64(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "setItem::", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  v2 = (id)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
  objc_msgSend(v2, "enqueueValueCall:arguments:file:line:", *(_QWORD *)(a1 + 56), 0, CFSTR("JSAKeychainStorage.m"), 97);

}

void sub_BBD8(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "removeItem:", *(_QWORD *)(a1 + 40));
  v2 = (id)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
  objc_msgSend(v2, "enqueueValueCall:arguments:file:line:", *(_QWORD *)(a1 + 48), 0, CFSTR("JSAKeychainStorage.m"), 121);

}

void sub_BCD4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v5 = a2;
  v6 = a3;
  v8 = objc_opt_class(NSString, v7);
  v9 = BUDynamicCast(v8, v5);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v12 = objc_opt_class(NSString, v11);
  v13 = BUDynamicCast(v12, v6);
  v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  if (objc_msgSend(v10, "length"))
  {
    if (v14)
    {
LABEL_3:
      if (objc_msgSend(v10, "length"))
        objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", v14, v10);
      goto LABEL_11;
    }
  }
  else
  {
    v15 = JSALog();
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      sub_71BB0((uint64_t)v5, v16, v17, v18, v19, v20, v21, v22);

    if (v14)
      goto LABEL_3;
  }
  v23 = JSALog();
  v24 = objc_claimAutoreleasedReturnValue(v23);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    sub_71B48((uint64_t)v6, v24, v25, v26, v27, v28, v29, v30);

  objc_msgSend(v10, "length");
LABEL_11:

}

void sub_BF94(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;

  v11 = a2;
  v5 = a3;
  v7 = objc_opt_class(NSNumber, v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v5));

  v9 = BUDynamicCast(v7, v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  if (v10)
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v10, v11);

}

void sub_C0D0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "diskUsage"));
  v6 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v6, 1));
  objc_msgSend(v2, "enqueueValueCall:arguments:file:line:", v3, v5, CFSTR("JSADevice.m"), 53);

}

id sub_C2DC(uint64_t a1, uint64_t a2)
{
  const void *v3;
  const void *v4;
  CFTypeID v5;
  void *v6;

  objc_opt_self(a1);
  v3 = (const void *)MGCopyAnswer(a2, 0);
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFStringGetTypeID())
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithString:](NSString, "stringWithString:", v4));
    else
      v6 = 0;
    CFRelease(v4);
  }
  else
  {
    v6 = 0;
  }
  return v6;
}

void sub_CAF4(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  JSAShare *v13;

  v9 = a5;
  v10 = a4;
  v11 = a3;
  v12 = a2;
  objc_opt_self(a1);
  v13 = objc_opt_new(JSAShare);
  -[JSAShare setCallback:](v13, "setCallback:", v9);

  -[JSAShare setPresentingViewController:](v13, "setPresentingViewController:", v11);
  -[JSAShare setActivityItem:](v13, "setActivityItem:", v12);

  -[JSAShare setOptions:](v13, "setOptions:", v10);
  sub_CC94((uint64_t)v13);

}

void sub_CC94(uint64_t a1)
{
  _QWORD block[5];

  if (a1)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_CCF0;
    block[3] = &unk_9DCA8;
    block[4] = a1;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
}

void sub_CCF0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  _QWORD v33[5];
  void *v34;
  uint64_t v35;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "options"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("linkPresentation")));
  if (v3)
  {
    v35 = *(_QWORD *)(a1 + 32);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v35, 1));
  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityItem"));
    v34 = v5;
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v34, 1));

  }
  v6 = objc_msgSend(objc_alloc((Class)UIActivityViewController), "initWithActivityItems:applicationActivities:", v4, 0);
  v8 = objc_opt_class(NSArray, v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "options"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("excludedActivityTypes")));
  v11 = BUDynamicCast(v8, v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  v13 = objc_msgSend(v12, "count");

  if (v13)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "options"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("excludedActivityTypes")));
    objc_msgSend(v6, "setExcludedActivityTypes:", v15);

  }
  if ((objc_opt_respondsToSelector(v6, "popoverPresentationController") & 1) != 0)
  {
    v17 = objc_opt_class(UIView, v16);
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "options"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("sourceView")));
    v20 = BUDynamicCast(v17, v19);
    v21 = (void *)objc_claimAutoreleasedReturnValue(v20);

    v23 = objc_opt_class(UIBarButtonItem, v22);
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "options"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", CFSTR("sourceBarButtonItem")));
    v26 = BUDynamicCast(v23, v25);
    v27 = (void *)objc_claimAutoreleasedReturnValue(v26);

    if (v21)
    {
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "popoverPresentationController"));
      objc_msgSend(v28, "setSourceView:", v21);
    }
    else
    {
      if (!v27)
      {
LABEL_12:

        goto LABEL_13;
      }
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "popoverPresentationController"));
      objc_msgSend(v28, "setBarButtonItem:", v27);
    }

    goto LABEL_12;
  }
LABEL_13:
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472;
  v33[2] = sub_D03C;
  v33[3] = &unk_9E2D0;
  v33[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v6, "setCompletionWithItemsHandler:", v33);
  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentingViewController"));
  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "view"));
  v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "window"));

  if ((objc_msgSend(v31, "isKeyWindow") & 1) == 0)
    objc_msgSend(v31, "makeKeyWindow");
  v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentingViewController"));
  objc_msgSend(v32, "presentViewController:animated:completion:", v6, 1, 0);

}

void sub_D03C(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  unsigned int v13;
  NSMutableDictionary *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  NSMutableDictionary *v20;

  v9 = a2;
  v10 = a4;
  v11 = a5;
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "callback"));
  v13 = objc_msgSend(v12, "isObject");

  if (v13)
  {
    v14 = objc_opt_new(NSMutableDictionary);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v14, "setObject:forKeyedSubscript:", v9, CFSTR("activityType"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a3));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v14, "setObject:forKeyedSubscript:", v15, CFSTR("completed"));

    if (v10 && objc_msgSend(v10, "count"))
      -[NSMutableDictionary setObject:forKeyedSubscript:](v14, "setObject:forKeyedSubscript:", v10, CFSTR("returnedItems"));
    if (v11)
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "localizedDescription"));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v14, "setObject:forKeyedSubscript:", v16, CFSTR("activityError"));

    }
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "callback"));
    v20 = v14;
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v20, 1));
    objc_msgSend(v17, "enqueueValueCall:arguments:file:line:", v18, v19, CFSTR("JSAShare.m"), 105);

  }
}

id sub_D6B0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  _QWORD v8[4];
  id v9;

  v3 = a2;
  v4 = v3;
  v5 = 0;
  if (a1 && v3)
  {
    v5 = objc_alloc_init((Class)NSItemProvider);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(UTTypePNG, "identifier"));
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_D770;
    v8[3] = &unk_9E320;
    v9 = v4;
    objc_msgSend(v5, "registerItemForTypeIdentifier:loadHandler:", v6, v8);

  }
  return v5;
}

void sub_D770(uint64_t a1, void *a2)
{
  id v3;
  dispatch_queue_global_t global_queue;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  global_queue = dispatch_get_global_queue(0, 0);
  v5 = objc_claimAutoreleasedReturnValue(global_queue);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_D81C;
  v7[3] = &unk_9E2F8;
  v8 = *(id *)(a1 + 32);
  v9 = v3;
  v6 = v3;
  dispatch_async(v5, v7);

}

void sub_D81C(uint64_t a1)
{
  void *v2;
  id v3;
  _QWORD v4[4];
  id v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfURL:](NSData, "dataWithContentsOfURL:", *(_QWORD *)(a1 + 32)));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_D8C0;
  v4[3] = &unk_9E2F8;
  v5 = v2;
  v6 = *(id *)(a1 + 40);
  v3 = v2;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v4);

}

void sub_D8C0(uint64_t a1)
{
  uint64_t v2;
  NSData *v3;
  void *v4;
  UIImage *v5;

  v5 = (UIImage *)objc_claimAutoreleasedReturnValue(+[UIImage imageWithData:](UIImage, "imageWithData:", *(_QWORD *)(a1 + 32)));
  v2 = *(_QWORD *)(a1 + 40);
  v3 = UIImagePNGRepresentation(v5);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  (*(void (**)(uint64_t, void *, _QWORD))(v2 + 16))(v2, v4, 0);

}

void sub_E034(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_B9F78;
  qword_B9F78 = (uint64_t)v1;

}

void sub_E1EC(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  uint8_t v12[16];
  uint8_t buf[16];

  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", CFSTR("ScriptingLocalStorage")));

    if (v3)
    {
      v4 = JSALog();
      v5 = objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "[JSALocalStorage] Migrating from standard user defaults to dedicated app group user defaults", buf, 2u);
      }

      objc_msgSend(*(id *)(a1 + 16), "setObject:forKey:", v3, CFSTR("ScriptingLocalStorage"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
      objc_msgSend(v6, "removeObjectForKey:", CFSTR("ScriptingLocalStorage"));

    }
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults bu_groupUserDefaults](NSUserDefaults, "bu_groupUserDefaults"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKey:", CFSTR("ScriptingLocalStorage")));

    if (v8)
    {
      v9 = JSALog();
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v12 = 0;
        _os_log_impl(&dword_0, v10, OS_LOG_TYPE_DEFAULT, "[JSALocalStorage] Migrating from default app group user defaults to dedicated app group user defaults", v12, 2u);
      }

      objc_msgSend(*(id *)(a1 + 16), "setObject:forKey:", v8, CFSTR("ScriptingLocalStorage"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults bu_groupUserDefaults](NSUserDefaults, "bu_groupUserDefaults"));
      objc_msgSend(v11, "removeObjectForKey:", CFSTR("ScriptingLocalStorage"));

    }
  }
}

void sub_E378(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  id v6;

  v6 = a2;
  if (a1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    v3 = *(void **)(a1 + 24);
    if (!v3 || (objc_msgSend(v3, "isEqual:", v6) & 1) == 0)
    {
      v4 = objc_msgSend(v6, "mutableCopy");
      v5 = *(void **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v4;

    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
  }

}

void sub_E560(uint64_t a1)
{
  os_unfair_lock_s *v2;
  id v3;

  if (a1)
  {
    v2 = (os_unfair_lock_s *)(a1 + 8);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    v3 = objc_msgSend(*(id *)(a1 + 24), "copy");
    os_unfair_lock_unlock(v2);
    objc_msgSend(*(id *)(a1 + 16), "setObject:forKey:", v3, CFSTR("ScriptingLocalStorage"));
    objc_msgSend(*(id *)(a1 + 16), "synchronize");

  }
}

void sub_E800(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_E81C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  id WeakRetained;

  v3 = objc_opt_class(NSDictionary, a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", NSKeyValueChangeNewKey));
  v5 = BUDynamicCast(v3, v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = (void *)v6;
  v8 = &__NSDictionary0__struct;
  if (v6)
    v8 = (void *)v6;
  v9 = v8;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  sub_E378((uint64_t)WeakRetained, v9);

}

uint64_t sub_E8C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_EEF4(id a1)
{
  JSANetwork *v1;
  void *v2;

  v1 = objc_alloc_init(JSANetwork);
  v2 = (void *)qword_B9F88;
  qword_B9F88 = (uint64_t)v1;

}

void sub_F0E4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;

  v4 = a3;
  objc_msgSend(v4, "setReachabilityRef:", a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "networkCallbackValue"));
  v7 = objc_msgSend(v4, "isReachable");

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v7));
  v10 = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v10, 1));
  objc_msgSend(v5, "enqueueManagedValueCall:arguments:file:line:", v6, v9, CFSTR("JSANetwork.m"), 74);

}

id JSALog()
{
  if (qword_B9F98 != -1)
    dispatch_once(&qword_B9F98, &stru_9E390);
  return (id)qword_B9F90;
}

void sub_F3BC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.iBooks", "JSApp");
  v2 = (void *)qword_B9F90;
  qword_B9F90 = (uint64_t)v1;

}

id sub_F66C(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7;
  void *v8;
  double v9;
  id v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  JSATimerContext *v30;
  void *v31;
  void *v32;
  void *v33;
  JSATimerContext *v34;
  id v35;
  id v36;
  NSObject *v37;
  id v38;
  _QWORD block[4];
  id v41;
  uint8_t buf[4];
  void *v43;
  __int16 v44;
  JSATimerContext *v45;

  v7 = a2;
  v8 = v7;
  if (!a1)
  {
    v27 = 0;
    goto LABEL_18;
  }
  if ((objc_msgSend(v7, "isObject") & 1) != 0)
  {
    if (a4 > 0.0)
    {
      v9 = a4 / 1000.0;
LABEL_11:
      v11 = objc_claimAutoreleasedReturnValue(+[JSContext currentArguments](JSContext, "currentArguments"));
      if ((unint64_t)-[NSObject count](v11, "count") < 3)
        v28 = 0;
      else
        v28 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject subarrayWithRange:](v11, "subarrayWithRange:", 2, (char *)-[NSObject count](v11, "count") - 2));
      v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimer timerWithTimeInterval:target:selector:userInfo:repeats:](NSTimer, "timerWithTimeInterval:target:selector:userInfo:repeats:", a1, "_jsTimerFired:", 0, a3, v9));
      v30 = [JSATimerContext alloc];
      v31 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
      v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "environment"));
      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "appForOwnership"));
      v34 = -[JSATimerContext initWithCallback:callbackArgs:ownerObject:repeating:interval:timer:](v30, "initWithCallback:callbackArgs:ownerObject:repeating:interval:timer:", v8, v28, v33, a3, v29, v9);

      v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%p"), v29));
      v35 = *(id *)(a1 + 8);
      objc_sync_enter(v35);
      objc_msgSend(*(id *)(a1 + 8), "setObject:forKey:", v34, v27);
      objc_sync_exit(v35);

      v36 = JSALog();
      v37 = objc_claimAutoreleasedReturnValue(v36);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        v43 = v27;
        v44 = 2112;
        v45 = v34;
        _os_log_impl(&dword_0, v37, OS_LOG_TYPE_DEFAULT, "Scheduled timer %@: %@", buf, 0x16u);
      }

      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_FBDC;
      block[3] = &unk_9DCA8;
      v41 = v29;
      v38 = v29;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

      goto LABEL_17;
    }
    v9 = 0.0;
    if (!(_DWORD)a3)
      goto LABEL_11;
    v19 = JSALog();
    v11 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_71C98(v11, v20, v21, v22, v23, v24, v25, v26);
  }
  else
  {
    v10 = JSALog();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_71D08(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  v27 = 0;
LABEL_17:

LABEL_18:
  return v27;
}

void sub_F968(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_F98C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  id v8;
  void *v9;
  id v10;
  NSObject *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD block[4];
  id v23;
  uint8_t buf[4];
  NSObject *v25;
  __int16 v26;
  void *v27;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if (objc_msgSend(v3, "isString")
      && (v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "toString")),
          v6 = objc_msgSend(v5, "length"),
          v5,
          v6))
    {
      v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "toString"));
      v8 = *(id *)(a1 + 8);
      objc_sync_enter(v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 8), "objectForKey:", v7));
      objc_msgSend(*(id *)(a1 + 8), "removeObjectForKey:", v7);
      objc_sync_exit(v8);

      v10 = JSALog();
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        v25 = v7;
        v26 = 2112;
        v27 = v9;
        _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEFAULT, "Cancelling timer %@: %@", buf, 0x16u);
      }

      if (v9)
      {
        v12 = v9;
        objc_sync_enter(v12);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "timer"));
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "managedCallback"));

        if (v14)
          objc_msgSend(v12, "removeManagedReferences");
        if (v13)
        {
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_FC2C;
          block[3] = &unk_9DCA8;
          v23 = v13;
          dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

        }
        objc_sync_exit(v12);

      }
    }
    else
    {
      v15 = JSALog();
      v7 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        sub_71D78((uint64_t)v4, v7, v16, v17, v18, v19, v20, v21);
    }

  }
}

void sub_FBA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_FBDC(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSRunLoop currentRunLoop](NSRunLoop, "currentRunLoop"));
  objc_msgSend(v2, "addTimer:forMode:", *(_QWORD *)(a1 + 32), NSDefaultRunLoopMode);

}

id sub_FC2C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "invalidate");
}

void sub_FDF0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_FE0C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v3 = *(id *)(a1 + 32);
  objc_sync_enter(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedCallback"));

  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedCallback"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "value"));

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedArgs"));
    if ((objc_msgSend(*(id *)(a1 + 32), "isRepeating") & 1) == 0)
      objc_msgSend(*(id *)(a1 + 32), "removeManagedReferences");
  }
  else
  {
    v6 = 0;
  }
  objc_sync_exit(v3);

  if (v4)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "jsValuesWithContext:", v9));
    objc_msgSend(v7, "enqueueValueCall:arguments:file:line:", v4, v8, CFSTR("JSAFoundation.m"), 184);

  }
}

void sub_FF1C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10148(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[BUAccountsProvider sharedProvider](BUAccountsProvider, "sharedProvider"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "currentStorefront"));
  objc_msgSend(*(id *)(a1 + 32), "setLastBagStorefront:", v2);

}

void sub_101A0(os_unfair_lock_s *val)
{
  _QWORD *v2;
  NSObject *v3;
  id *v4;
  dispatch_block_t v5;
  _QWORD v6[4];
  id v7;
  _QWORD block[4];
  id v9;
  _QWORD v10[2];
  uint64_t (*v11)(uint64_t);
  void *v12;
  os_unfair_lock_s *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;
  id location;

  if (val)
  {
    objc_initWeak(&location, val);
    v15 = 0;
    v16 = &v15;
    v17 = 0x2020000000;
    v18 = 0;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v11 = sub_11574;
    v12 = &unk_9E0D8;
    v13 = val;
    v14 = &v15;
    v2 = v10;
    os_unfair_lock_lock(val + 2);
    v11((uint64_t)v2);
    os_unfair_lock_unlock(val + 2);

    if (*((_BYTE *)v16 + 24))
    {
      v3 = objc_claimAutoreleasedReturnValue(-[os_unfair_lock_s updateQueue](val, "updateQueue"));
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_11590;
      block[3] = &unk_9DF80;
      v4 = &v9;
      objc_copyWeak(&v9, &location);
      dispatch_async(v3, block);
    }
    else
    {
      v3 = objc_claimAutoreleasedReturnValue(-[os_unfair_lock_s updateQueue](val, "updateQueue"));
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      v6[2] = sub_11AC8;
      v6[3] = &unk_9DF80;
      v4 = &v7;
      objc_copyWeak(&v7, &location);
      v5 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_USER_INTERACTIVE, 0, v6);
      dispatch_async(v3, v5);

    }
    objc_destroyWeak(v4);
    _Block_object_dispose(&v15, 8);
    objc_destroyWeak(&location);
  }
}

void sub_10340(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 88), 8);
  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_10434(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_B9FA8;
  qword_B9FA8 = (uint64_t)v1;

}

void sub_1052C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10544(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10554(uint64_t a1)
{

}

void sub_1055C(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 16));
}

void sub_10684(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  const char *v6;
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;
  id v9;
  uint8_t v10[8];
  _QWORD v11[5];

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "lastBagStorefront"));
  LOBYTE(v2) = objc_msgSend(v2, "isEqualToString:", v3);

  if ((v2 & 1) != 0)
  {
    v4 = JSALog();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v10 = 0;
      v6 = "JSAProfileBagManager: Skipped resetting bag value cache for storefront change because the new bag has already arrived.";
LABEL_6:
      _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, v6, v10, 2u);
    }
  }
  else
  {
    v7 = *(os_unfair_lock_s **)(a1 + 40);
    v8 = v7 + 2;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_107A0;
    v11[3] = &unk_9DCA8;
    v11[4] = v7;
    os_unfair_lock_lock(v7 + 2);
    sub_107A0((uint64_t)v11);
    os_unfair_lock_unlock(v8);
    v9 = JSALog();
    v5 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v10 = 0;
      v6 = "JSAProfileBagManager: Reset bag value cache due to storefront change.";
      goto LABEL_6;
    }
  }

}

void sub_107A0(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;

}

id sub_107B0(void *a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id *v9;
  uint64_t *v10;
  id v11;
  void *v12;
  char *v13;
  id v14;
  NSObject *v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t buf[4];
  id v28;
  __int16 v29;
  void *v30;

  v5 = a2;
  if (a1)
  {
    switch(a3)
    {
      case 0:
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "bag"));
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "arrayForKey:", v5));
        v8 = v7;
        v26 = 0;
        v9 = (id *)&v26;
        v10 = &v26;
        break;
      case 1:
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "bag"));
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "BOOLForKey:", v5));
        v8 = v7;
        v25 = 0;
        v9 = (id *)&v25;
        v10 = &v25;
        break;
      case 2:
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "bag"));
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "doubleForKey:", v5));
        v8 = v7;
        v23 = 0;
        v9 = (id *)&v23;
        v10 = &v23;
        break;
      case 3:
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "bag"));
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "integerForKey:", v5));
        v8 = v7;
        v22 = 0;
        v9 = (id *)&v22;
        v10 = &v22;
        break;
      case 5:
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "bag"));
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "URLForKey:", v5));
        v8 = v7;
        v21 = 0;
        v9 = (id *)&v21;
        v10 = &v21;
        break;
      case 6:
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "bag"));
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "dictionaryForKey:", v5));
        v8 = v7;
        v24 = 0;
        v9 = (id *)&v24;
        v10 = &v24;
        break;
      default:
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "bag"));
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "stringForKey:", v5));
        v8 = v7;
        v20 = 0;
        v9 = (id *)&v20;
        v10 = &v20;
        break;
    }
    a1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "jsa_valueWithError:", v10));
    v11 = *v9;

    if (v11)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "domain"));
      if (objc_msgSend(v12, "isEqualToString:", AMSErrorDomain))
      {
        v13 = (char *)objc_msgSend(v11, "code");

        if (v13 == &stru_B8.segname[4])
        {
          v14 = JSALog();
          v15 = objc_claimAutoreleasedReturnValue(v14);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "localizedFailureReason"));
            *(_DWORD *)buf = 138543618;
            v28 = v5;
            v29 = 2114;
            v30 = v16;
            _os_log_impl(&dword_0, v15, OS_LOG_TYPE_DEFAULT, "Missing key %{public}@ in bag, error=%{public}@", buf, 0x16u);

          }
          goto LABEL_21;
        }
      }
      else
      {

      }
      v18 = JSALog();
      v15 = objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        sub_71E3C();
      goto LABEL_21;
    }
    if (a1)
    {
LABEL_22:

      goto LABEL_23;
    }
    v17 = JSALog();
    v15 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      sub_71DDC();
LABEL_21:

    goto LABEL_22;
  }
LABEL_23:

  return a1;
}

void sub_10BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10BE0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 16), "objectForKey:", a1[5]));
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_10D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10D5C(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  __int128 v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  unsigned __int8 v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint8_t buf[4];
  void *v25;
  _BYTE v26[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "keyEntries"));
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v19 = a1;
  v3 = *(id *)(a1 + 40);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v20, v26, 16);
  if (v4)
  {
    v6 = v4;
    v7 = *(_QWORD *)v21;
    *(_QWORD *)&v5 = 138412290;
    v18 = v5;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v21 != v7)
          objc_enumerationMutation(v3);
        v9 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)i);
        v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v9, "valueType", v18)));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "key"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", v11));
        v13 = objc_msgSend(v12, "isEqualToNumber:", v10);

        if ((v13 & 1) == 0)
        {
          v14 = JSALog();
          v15 = objc_claimAutoreleasedReturnValue(v14);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "key"));
            *(_DWORD *)buf = v18;
            v25 = v16;
            _os_log_impl(&dword_0, v15, OS_LOG_TYPE_DEFAULT, "JSAProfileBagManager: registered bag key %@ from JS", buf, 0xCu);

          }
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "key"));
          objc_msgSend(v2, "setObject:forKeyedSubscript:", v10, v17);

          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v19 + 48) + 8) + 24) = 1;
        }

      }
      v6 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v20, v26, 16);
    }
    while (v6);
  }

}

void sub_1110C(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[BUAccountsProvider sharedProvider](BUAccountsProvider, "sharedProvider"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "currentStorefront"));
  objc_msgSend(*(id *)(a1 + 32), "setLastBagStorefront:", v2);

}

uint64_t sub_11574(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result + 32) + 16) != 0;
  return result;
}

void sub_11590(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  sub_115BC((uint64_t)WeakRetained);

}

void sub_115BC(uint64_t a1)
{
  void *v1;
  _QWORD *v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD *v22;
  id v23;
  NSObject *v24;
  const char *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  os_unfair_lock_s *lock;
  NSMutableDictionary *v32;
  _QWORD v33[5];
  uint8_t v34[8];
  _QWORD v35[2];
  void (*v36)(uint64_t);
  void *v37;
  uint64_t v38;
  NSMutableDictionary *v39;
  __int128 *p_buf;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _QWORD v45[2];
  void (*v46)(uint64_t);
  void *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t);
  void (*v54)(uint64_t);
  id v55;
  __int128 buf;
  uint64_t v57;
  char v58;
  _BYTE v59[128];

  if (a1)
  {
    v32 = objc_opt_new(NSMutableDictionary);
    v50 = 0;
    v51 = &v50;
    v52 = 0x3032000000;
    v53 = sub_10544;
    v54 = sub_10554;
    v55 = 0;
    v45[0] = _NSConcreteStackBlock;
    v45[1] = 3221225472;
    v46 = sub_11AF4;
    v47 = &unk_9E0D8;
    v48 = a1;
    v49 = &v50;
    v3 = v45;
    lock = (os_unfair_lock_s *)(a1 + 8);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    v46((uint64_t)v3);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));

    v4 = JSALog();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v51[5], "allKeys"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "sortedArrayUsingSelector:", "compare:"));
      v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "componentsJoinedByString:", CFSTR(", ")));
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v1;
      _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "JSAProfileBagManager: keyEntries: %@", (uint8_t *)&buf, 0xCu);

    }
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v8 = (id)v51[5];
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v41, v59, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v42;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v42 != v10)
            objc_enumerationMutation(v8);
          v12 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)i);
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v51[5], "objectForKeyedSubscript:", v12));
          v14 = sub_107B0((void *)a1, v12, (uint64_t)objc_msgSend(v13, "integerValue"));
          v15 = (void *)objc_claimAutoreleasedReturnValue(v14);

          if (v15)
          {
            v17 = objc_opt_class(NSURL, v16);
            v18 = BUDynamicCast(v17, v15);
            v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
            v20 = v19;
            v21 = v15;
            if (v19)
            {
              v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "absoluteString", v15));
              v21 = v1;
            }
            -[NSMutableDictionary setObject:forKeyedSubscript:](v32, "setObject:forKeyedSubscript:", v21, v12);
            if (v20)

          }
        }
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v41, v59, 16);
      }
      while (v9);
    }

    if (!-[NSMutableDictionary count](v32, "count")
      || (objc_msgSend(*(id *)(a1 + 16), "isEqual:", v32) & 1) != 0)
    {
      goto LABEL_26;
    }
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v57 = 0x2020000000;
    v58 = 0;
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472;
    v36 = sub_11B44;
    v37 = &unk_9E3E8;
    p_buf = &buf;
    v38 = a1;
    v39 = v32;
    v22 = v35;
    os_unfair_lock_lock(lock);
    v36((uint64_t)v22);
    os_unfair_lock_unlock(lock);

    if (*(_BYTE *)(*((_QWORD *)&buf + 1) + 24))
    {
      v23 = JSALog();
      v24 = objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v34 = 0;
        v25 = "JSAProfileBagManager: notifying JS with initial bag values (or after storefront change)";
LABEL_24:
        _os_log_impl(&dword_0, v24, OS_LOG_TYPE_DEFAULT, v25, v34, 2u);
      }
    }
    else
    {
      v26 = JSALog();
      v24 = objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v34 = 0;
        v25 = "JSAProfileBagManager: notifying JS with updated bag values";
        goto LABEL_24;
      }
    }

    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v27, "postNotificationName:object:", CFSTR("JSAProfileBagChangedNotification"), a1);

    v28 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "environment"));
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "thread"));
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_11B90;
    v33[3] = &unk_9DCA8;
    v33[4] = a1;
    objc_msgSend(v30, "enqueueBlock:", v33);

    _Block_object_dispose(&buf, 8);
LABEL_26:
    _Block_object_dispose(&v50, 8);

  }
}

void sub_11A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void sub_11AC8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  sub_115BC((uint64_t)WeakRetained);

}

void sub_11AF4(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "keyEntries"));
  v2 = objc_msgSend(v5, "copy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_11B44(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) == 0;
  v2 = objc_msgSend(*(id *)(a1 + 40), "copy");
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v2;

}

void sub_11B90(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bagChangeHandler"));
  objc_msgSend(v3, "enqueueManagedValueCall:arguments:file:line:", v2, 0, CFSTR("JSAProfileBagManager.m"), 346);

}

void sub_1221C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v11[2];

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
  v7 = *(_QWORD *)(a1 + 32);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2));
  v11[0] = v8;
  v9 = v5;
  if (!v5)
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v11[1] = v9;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v11, 2));
  objc_msgSend(v6, "enqueueValueCall:arguments:file:line:", v7, v10, CFSTR("JSAAccount.m"), 80);

  if (!v5)
}

void sub_12438(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;
  void *v7;
  id v8;

  v8 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v5, "accountDidAttemptSignOut:", *(_QWORD *)(a1 + 32));

  v6 = objc_retainBlock(*(id *)(a1 + 40));
  v7 = v6;
  if (v6)
    (*((void (**)(id, uint64_t, id))v6 + 2))(v6, a2, v8);

}

id sub_12568(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = (*(uint64_t (**)(void))(v2 + 16))();
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](AMSPromise, "promiseWithResult:", v4));

  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](AMSPromise, "promiseWithResult:", a2));
  }
  return v5;
}

void sub_12868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17)
{
  objc_destroyWeak(&location);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_12898(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v5 = WeakRetained;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(WeakRetained, "state");
    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
      objc_msgSend(v5, "setState:", 1);
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "pendingBlocks"));
    v4 = objc_retainBlock(*(id *)(a1 + 32));
    objc_msgSend(v3, "addObject:", v4);

    WeakRetained = v5;
  }

}

void sub_1292C(uint64_t a1)
{
  id v2;

  if (a1)
  {
    v2 = objc_msgSend(objc_alloc((Class)NSThread), "initWithTarget:selector:object:", a1, "_scriptingThreadMain", 0);
    objc_msgSend(v2, "setQualityOfService:", 33);
    objc_msgSend(v2, "setName:", *(_QWORD *)(a1 + 8));
    objc_msgSend(v2, "start");

  }
}

intptr_t sub_12AE0(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_12CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_12CE4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_12CF4(uint64_t a1)
{

}

id sub_12CFC(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "copy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "removeAllObjects");
}

void sub_12EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_12F04(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "setState:", 2);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pendingBlocks"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v2, "count") != 0;

}

void sub_12F60(uint64_t a1)
{
  void *v2;

  objc_msgSend(*(id *)(a1 + 32), "setState:", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pendingBlocks"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v2, "count") != 0;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    objc_msgSend(*(id *)(a1 + 32), "setState:", 1);
}

void sub_13200(uint64_t a1)
{
  sub_13208(*(void **)(a1 + 32));
}

void sub_13208(void *a1)
{
  void *v2;
  void *v3;
  id v4;

  if (a1)
  {
    objc_msgSend(a1, "cancel");
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "onTimeoutManagedValue"));

    if (v2)
    {
      v4 = (id)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "onTimeoutManagedValue"));
      objc_msgSend(v4, "enqueueManagedValueCall:arguments:file:line:", v3, 0, CFSTR("JSATimer.m"), 76);

    }
  }
}

void sub_13454(id a1)
{
  _JSAStoreHTTPReqestOfflineCache *v1;
  void *v2;

  v1 = objc_opt_new(_JSAStoreHTTPReqestOfflineCache);
  v2 = (void *)qword_B9FB0;
  qword_B9FB0 = (uint64_t)v1;

}

void sub_13B78(uint64_t a1)
{
  _QWORD *v2;
  NSMutableDictionary *v3;
  uint64_t v4;
  void *v5;

  if (+[JSAOfflineCache runFromCache](JSAOfflineCache, "runFromCache"))
  {
    v2 = *(_QWORD **)(a1 + 32);
    if ((v2[3] & 0x8000000000000000) != 0)
      objc_msgSend(v2, "_aq_loadPostLaunchCaches");
  }
  else if (+[JSAOfflineCache generateCache](JSAOfflineCache, "generateCache"))
  {
    objc_msgSend(*(id *)(a1 + 32), "_aq_saveOfflineCache");
    v3 = objc_opt_new(NSMutableDictionary);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 8);
    *(_QWORD *)(v4 + 8) = v3;

  }
  ++*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
}

uint64_t sub_13E94(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v3;

  v3 = 0;
  LODWORD(result) = objc_msgSend(*(id *)(a1 + 32), "fileExistsAtPath:isDirectory:", a2, &v3);
  if (v3)
    return result;
  else
    return 0;
}

id sub_13F88(_QWORD *a1)
{
  return objc_msgSend(*(id *)(a1[4] + 8), "setObject:forKeyedSubscript:", a1[6], a1[5]);
}

void sub_14380(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_143B0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_143C0(uint64_t a1)
{

}

void sub_143C8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 8), "objectForKeyedSubscript:", a1[5]));
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

id sub_14404(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  v2 = a1[4];
  v3 = *(void **)(a1[5] + 8);
  if (v2)
    return objc_msgSend(v3, "setObject:forKeyedSubscript:", v2, a1[6]);
  else
    return objc_msgSend(v3, "removeObjectForKey:", a1[6]);
}

id sub_144A0(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "enumerateKeysAndObjectsUsingBlock:", *(_QWORD *)(a1 + 40));
}

id *sub_144AC(id *a1)
{
  id *v1;
  void *v2;
  id v3;
  _QWORD v5[4];
  id *v6;

  v1 = a1;
  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", objc_msgSend(a1[1], "count")));
    v3 = v1[1];
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_14548;
    v5[3] = &unk_9E6C8;
    v1 = v2;
    v6 = v1;
    objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v5);

  }
  return v1;
}

void sub_14548(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;

  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "toDictionary"));
  v14 = 0;
  v7 = objc_claimAutoreleasedReturnValue(+[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", v6, 0, &v14));
  v8 = v14;
  v9 = v8;
  if (v7)
  {
    v10 = v8;
LABEL_4:
    v11 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject bu_gzipDeflate](v7, "bu_gzipDeflate"));
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v11, v5);

    goto LABEL_5;
  }
  v13 = v8;
  v7 = objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v6, 1, &v13));
  v10 = v13;

  if (v7)
    goto LABEL_4;
  v12 = JSALog();
  v7 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    sub_72144();
LABEL_5:

}

id sub_146C4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_aq_saveOfflineCache");
}

id sub_1498C()
{
  objc_opt_self();
  if (qword_B9FC8 != -1)
    dispatch_once(&qword_B9FC8, &stru_9E6E8);
  return (id)qword_B9FC0;
}

void sub_149D0(id a1)
{
  NSOperationQueue *v1;
  void *v2;

  v1 = objc_opt_new(NSOperationQueue);
  v2 = (void *)qword_B9FC0;
  qword_B9FC0 = (uint64_t)v1;

  objc_msgSend((id)qword_B9FC0, "setName:", CFSTR("JSAStoreHTTPRequest"));
  _objc_msgSend((id)qword_B9FC0, "setMaxConcurrentOperationCount:", 4);
}

void sub_14A34(_QWORD *a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  JSARequestEncoder *v17;
  void *v18;
  JSARequestEncoder *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  _QWORD v25[4];
  id v26;
  id v27;
  id v28;
  id location;
  _QWORD block[4];
  id v31;
  _QWORD *v32;

  if (a1)
  {
    v2 = (void *)a1[1];
    if (v2)
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "jsa_parametrize:", a1[10]));
      if (+[JSAOfflineCache runFromCache](JSAOfflineCache, "runFromCache"))
      {
        v4 = sub_15248();
        v5 = objc_claimAutoreleasedReturnValue(v4);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_152FC;
        block[3] = &unk_9DCF8;
        v31 = v3;
        v32 = a1;
        dispatch_async(v5, block);

        v6 = v31;
      }
      else
      {
        v6 = (void *)objc_opt_new(AMSMutableBagKeySet);
        objc_msgSend(v6, "addBagKey:valueType:defaultValue:", CFSTR("sf-api-token-service-url"), 5, CFSTR("https://sf-api-token-service.itunes.apple.com/apiToken/"));
        +[AMSBagKeySet registerBagKeySet:forProfile:profileVersion:](AMSBagKeySet, "registerBagKeySet:forProfile:profileVersion:", v6, CFSTR("iBooks"), CFSTR("1"));
        v7 = (void *)objc_claimAutoreleasedReturnValue(+[BUBag defaultBag](BUBag, "defaultBag"));
        v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSURLSessionConfiguration defaultSessionConfiguration](NSURLSessionConfiguration, "defaultSessionConfiguration"));
        if ((objc_msgSend(a1, "disableATS") & 1) == 0)
        {
          v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", &off_A5B10, 200, 0, 0));
          if (v9)
            objc_msgSend(v8, "set_atsContext:", v9);

        }
        v10 = objc_alloc((Class)AMSURLSession);
        objc_opt_class(a1, v11);
        v12 = sub_1498C();
        v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
        v24 = v8;
        v14 = objc_msgSend(v10, "initWithConfiguration:delegate:delegateQueue:", v8, a1, v13);

        v15 = objc_msgSend(objc_alloc((Class)AMSMediaTokenService), "initWithClientIdentifier:bag:", CFSTR("ibooks"), v7);
        objc_msgSend(v15, "setSession:", v14);
        v16 = objc_msgSend(objc_alloc((Class)AMSMediaProtocolHandler), "initWithTokenService:", v15);
        objc_msgSend(v14, "setProtocolHandler:", v16);
        v17 = [JSARequestEncoder alloc];
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "cookiesToSuppress"));
        v19 = -[JSARequestEncoder initWithTokenService:bag:cookiesToSuppress:](v17, "initWithTokenService:bag:cookiesToSuppress:", v15, v7, v18);

        if (objc_msgSend(a1, "personalized"))
        {
          v20 = (void *)objc_claimAutoreleasedReturnValue(+[BUAccountsProvider sharedProvider](BUAccountsProvider, "sharedProvider"));
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "activeStoreAccount"));
          -[JSARequestEncoder setAccount:](v19, "setAccount:", v21);

        }
        else
        {
          -[JSARequestEncoder setAccount:](v19, "setAccount:", 0);
        }
        v22 = (void *)objc_claimAutoreleasedReturnValue(-[JSARequestEncoder requestWithURL:](v19, "requestWithURL:", v3));
        objc_initWeak(&location, a1);
        v25[0] = _NSConcreteStackBlock;
        v25[1] = 3221225472;
        v25[2] = sub_15588;
        v25[3] = &unk_9E7A8;
        objc_copyWeak(&v28, &location);
        v26 = v3;
        v23 = v14;
        v27 = v23;
        objc_msgSend(v22, "addFinishBlock:", v25);

        objc_destroyWeak(&v28);
        objc_destroyWeak(&location);

      }
    }
  }
}

void sub_14DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_15248()
{
  objc_opt_self();
  if (qword_B9FD8 != -1)
    dispatch_once(&qword_B9FD8, &stru_9E708);
  return (id)qword_B9FD0;
}

void sub_1528C(id a1)
{
  dispatch_queue_attr_t v1;
  dispatch_queue_attr_t v2;
  NSObject *v3;
  dispatch_queue_t v4;
  void *v5;
  NSObject *v6;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v6 = objc_claimAutoreleasedReturnValue(v1);
  v2 = dispatch_queue_attr_make_with_qos_class(v6, QOS_CLASS_USER_INITIATED, 0);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = dispatch_queue_create("JSAStoreHTTPRequest.offlineCache", v3);
  v5 = (void *)qword_B9FD0;
  qword_B9FD0 = (uint64_t)v4;

}

void sub_152FC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  os_signpost_id_t v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  JSAStoreHTTPResponse *v10;
  id v11;
  NSObject *v12;
  id v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  void *v24;
  uint8_t v25[16];
  JSAStoreHTTPResponse *v26;

  v2 = JSASignpostExecution();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = os_signpost_id_generate(v3);

  v5 = JSASignpostExecution();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = v6;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    *(_WORD *)v25 = 0;
    _os_signpost_emit_with_name_impl(&dword_0, v7, OS_SIGNPOST_INTERVAL_BEGIN, v4, "HTTP Offline Cache", "", v25, 2u);
  }

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[_JSAStoreHTTPReqestOfflineCache sharedOfflineCache](_JSAStoreHTTPReqestOfflineCache, "sharedOfflineCache"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "absoluteString"));
  v10 = (JSAStoreHTTPResponse *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "responseForKey:", v9));

  if (!v10)
  {
    v11 = JSALog();
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      sub_72274((id *)(a1 + 32), v12);

    v10 = objc_alloc_init(JSAStoreHTTPResponse);
    -[JSAStoreHTTPResponse setStatusCode:](v10, "setStatusCode:", 404);
    -[JSAStoreHTTPResponse set_error:](v10, "set_error:", &off_A5AE8);
  }
  v13 = JSASignpostExecution();
  v14 = objc_claimAutoreleasedReturnValue(v13);
  v15 = v14;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v14))
  {
    *(_WORD *)v25 = 0;
    _os_signpost_emit_with_name_impl(&dword_0, v15, OS_SIGNPOST_INTERVAL_END, v4, "HTTP Offline Cache", "", v25, 2u);
  }

  v16 = *(_QWORD *)(a1 + 40);
  if (v16)
  {
    v17 = *(void **)(v16 + 32);
    *(_QWORD *)(v16 + 32) = 0;

    v16 = *(_QWORD *)(a1 + 40);
  }
  if (*(_QWORD *)(v16 + 96))
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 96);
    v26 = v10;
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v26, 1));
    objc_msgSend(v18, "enqueueValueCall:arguments:file:line:", v19, v20, CFSTR("JSAStoreHTTPRequest.m"), 560);

    v21 = *(_QWORD *)(a1 + 40);
    v22 = *(void **)(v21 + 96);
    *(_QWORD *)(v21 + 96) = 0;

    v16 = *(_QWORD *)(a1 + 40);
  }
  v23 = objc_retainBlock(*(id *)(v16 + 112));
  v24 = v23;
  if (v23)
    (*((void (**)(id, JSAStoreHTTPResponse *))v23 + 2))(v23, v10);

}

void sub_15588(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[5];
  id v21;
  _QWORD v22[5];
  _QWORD v23[4];
  id v24;
  id v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  id v31;
  __int16 v32;
  uint64_t v33;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  objc_msgSend(v3, "setHTTPMethod:", *((_QWORD *)WeakRetained + 8));
  objc_msgSend(v3, "setTimeoutInterval:", *((double *)WeakRetained + 2) * 1000.0);
  if (*((_QWORD *)WeakRetained + 9))
  {
    if ((objc_msgSend(*((id *)WeakRetained + 8), "isEqualToString:", CFSTR("GET")) & 1) == 0
      && (objc_msgSend(*((id *)WeakRetained + 8), "isEqualToString:", CFSTR("HEAD")) & 1) == 0
      && (objc_msgSend(*((id *)WeakRetained + 8), "isEqualToString:", CFSTR("POST")) & 1) == 0
      && (objc_msgSend(*((id *)WeakRetained + 8), "isEqualToString:", CFSTR("PUT")) & 1) == 0
      && !objc_msgSend(*((id *)WeakRetained + 8), "isEqualToString:", CFSTR("PATCH")))
    {
      v16 = JSALog();
      v8 = objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v17 = a1[4];
        v18 = *((_QWORD *)WeakRetained + 8);
        v19 = *((_QWORD *)WeakRetained + 9);
        *(_DWORD *)buf = 136446978;
        v27 = "-[JSAStoreHTTPRequest _enqueue]_block_invoke";
        v28 = 2114;
        v29 = v18;
        v30 = 2112;
        v31 = v17;
        v32 = 2112;
        v33 = v19;
        _os_log_error_impl(&dword_0, v8, OS_LOG_TYPE_ERROR, "%{public}s unexpected body for %{public}@ \"%@\" %@", buf, 0x2Au);
      }
      goto LABEL_9;
    }
    v6 = *((_QWORD *)WeakRetained + 9);
    v7 = objc_opt_class(NSString, v5);
    if ((objc_opt_isKindOfClass(v6, v7) & 1) != 0)
    {
      v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)WeakRetained + 9), "dataUsingEncoding:", 4));
      objc_msgSend(v3, "setHTTPBody:", v8);
LABEL_9:

      goto LABEL_15;
    }
    v9 = *((_QWORD *)WeakRetained + 9);
    v25 = 0;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", v9, 1, &v25));
    v11 = v25;
    if (v11)
    {
      v12 = objc_msgSend(objc_alloc((Class)NSString), "initWithData:encoding:", *((_QWORD *)WeakRetained + 9), 4);

      if (!v12)
        objc_msgSend(v3, "setHTTPBody:", v10);
    }
    else
    {
      objc_msgSend(v3, "setHTTPBody:", v10);
      objc_msgSend(v3, "setValue:forHTTPHeaderField:", CFSTR("application/json"), CFSTR("Content-Type"));
    }

  }
LABEL_15:
  v13 = (void *)*((_QWORD *)WeakRetained + 11);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_158CC;
  v23[3] = &unk_9E730;
  v24 = v3;
  v14 = v3;
  objc_msgSend(v13, "enumerateKeysAndObjectsUsingBlock:", v23);
  objc_storeStrong((id *)WeakRetained + 5, a1[5]);
  v15 = (void *)*((_QWORD *)WeakRetained + 5);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_158D8;
  v22[3] = &unk_9E758;
  v22[4] = WeakRetained;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_15924;
  v20[3] = &unk_9E780;
  v20[4] = WeakRetained;
  v21 = a1[4];
  objc_msgSend(v15, "createDataTaskWithRequest:activity:dataTaskCreationCompletionHandler:requestCompletionHandler:", v14, 0, v22, v20);

}

id sub_158CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "setValue:forHTTPHeaderField:", a3, a2);
}

void sub_158D8(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 32), a2);
  v4 = a2;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "resume");

}

void sub_15924(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  JSAStoreHTTPResponse *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  id v39;
  void *v40;
  JSAStoreHTTPResponse *v41;
  _QWORD v42[3];
  _QWORD v43[3];
  uint8_t buf[4];
  uint64_t v45;
  __int16 v46;
  void *v47;
  __int16 v48;
  void *v49;
  __int16 v50;
  void *v51;
  __int16 v52;
  void *v53;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = JSALog();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_72300(a1, (uint64_t)v6, v8);

  }
  v9 = JSALog();
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *(_QWORD *)(a1 + 40);
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v5, "responseStatusCode")));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "data"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v13, "length")));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "logUUID"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "responseCorrelationId"));
    *(_DWORD *)buf = 138413314;
    v45 = v11;
    v46 = 2112;
    v47 = v12;
    v48 = 2112;
    v49 = v14;
    v50 = 2114;
    v51 = v15;
    v52 = 2114;
    v53 = v16;
    _os_log_impl(&dword_0, v10, OS_LOG_TYPE_DEFAULT, "Response for %@: status=%@, size=%@, CFNetworkId=%{public}@, correlationId=%{public}@", buf, 0x34u);

  }
  v17 = *(_QWORD *)(a1 + 32);
  if (v17)
  {
    v18 = *(void **)(v17 + 32);
    *(_QWORD *)(v17 + 32) = 0;

  }
  v19 = objc_alloc_init(JSAStoreHTTPResponse);
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "object"));
  -[JSAStoreHTTPResponse setOutput:](v19, "setOutput:", v20);

  if (v6)
  {
    v42[0] = CFSTR("domain");
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "domain"));
    v43[0] = v21;
    v42[1] = CFSTR("code");
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v6, "code")));
    v43[1] = v22;
    v42[2] = CFSTR("userInfo");
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
    v43[2] = v23;
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v43, v42, 3));
    -[JSAStoreHTTPResponse set_error:](v19, "set_error:", v24);

  }
  v25 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "responseHeaders"));
  v26 = (void *)v25;
  if (v25)
    v27 = (void *)v25;
  else
    v27 = &__NSDictionary0__struct;
  -[JSAStoreHTTPResponse setHeaders:](v19, "setHeaders:", v27);

  -[JSAStoreHTTPResponse setStatusCode:](v19, "setStatusCode:", sub_15D68(*(id *)(a1 + 32), v5, v6));
  v28 = sub_15EDC(*(_QWORD *)(a1 + 32), v5, (uint64_t)v6);
  v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
  -[JSAStoreHTTPResponse setPerformanceMetrics:](v19, "setPerformanceMetrics:", v29);

  if (+[JSAOfflineCache generateCache](JSAOfflineCache, "generateCache"))
  {
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[_JSAStoreHTTPReqestOfflineCache sharedOfflineCache](_JSAStoreHTTPReqestOfflineCache, "sharedOfflineCache"));
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "absoluteString"));
    objc_msgSend(v30, "setResponse:forKey:", v19, v31);

    v32 = (void *)objc_claimAutoreleasedReturnValue(+[_JSAStoreHTTPReqestOfflineCache sharedOfflineCache](_JSAStoreHTTPReqestOfflineCache, "sharedOfflineCache"));
    objc_msgSend(v32, "_saveOfflineCache:", 0);

  }
  v33 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v33 + 96))
  {
    v34 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "onResponse"));
    v41 = v19;
    v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v41, 1));
    objc_msgSend(v34, "enqueueValueCall:arguments:file:line:", v35, v36, CFSTR("JSAStoreHTTPRequest.m"), 700);

    v37 = *(_QWORD *)(a1 + 32);
    v38 = *(void **)(v37 + 96);
    *(_QWORD *)(v37 + 96) = 0;

    v33 = *(_QWORD *)(a1 + 32);
  }
  v39 = objc_retainBlock(*(id *)(v33 + 112));
  v40 = v39;
  if (v39)
    (*((void (**)(id, JSAStoreHTTPResponse *))v39 + 2))(v39, v19);

}

id sub_15D68(id a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSErrorDomain v8;
  NSErrorDomain v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char isKindOfClass;
  void *v19;
  void *v20;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (a1)
  {
    v8 = (NSErrorDomain)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "domain"));
    v9 = v8;
    if (v8 == NSURLErrorDomain)
    {
      v10 = objc_msgSend(v7, "code");

      if (v10 == (id)-1001)
      {
        a1 = &stru_338 + 76;
        goto LABEL_13;
      }
    }
    else
    {

    }
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "domain"));
    v12 = v11;
    if (v11 == (void *)AMSErrorDomain)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "userInfo"));
      v14 = AMSErrorUserInfoKeyStatusCode;
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", AMSErrorUserInfoKeyStatusCode));
      v17 = objc_opt_class(NSNumber, v16);
      isKindOfClass = objc_opt_isKindOfClass(v15, v17);

      if ((isKindOfClass & 1) != 0)
      {
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "userInfo"));
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKeyedSubscript:", v14));
        a1 = objc_msgSend(v20, "integerValue");

        goto LABEL_13;
      }
    }
    else
    {

    }
    if (v5)
      a1 = objc_msgSend(v5, "responseStatusCode");
    else
      a1 = &stru_388 + 46;
  }
LABEL_13:

  return a1;
}

id sub_15EDC(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  void *v11;
  double v12;
  void *v13;
  void *v14;
  double v15;
  void *v16;
  void *v17;
  _QWORD v19[4];
  _QWORD v20[4];

  if (a1)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "taskMetrics"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "transactionMetrics"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "lastObject"));

    if (!a3 || v6)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "requestStartDate"));
      objc_msgSend(v8, "timeIntervalSince1970");
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v9 * 1000.0));

      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "responseStartDate"));
      objc_msgSend(v11, "timeIntervalSince1970");
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v12 * 1000.0));

      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "responseEndDate"));
      objc_msgSend(v14, "timeIntervalSince1970");
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v15 * 1000.0));

      v19[0] = CFSTR("requestStartTime");
      v19[1] = CFSTR("responseStartTime");
      v20[0] = v10;
      v20[1] = v13;
      v20[2] = v16;
      v19[2] = CFSTR("responseEndTime");
      v19[3] = CFSTR("responseCached");
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v6, "resourceFetchType") == (char *)&dword_0 + 3));
      v20[3] = v17;
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v20, v19, 4));

    }
    else
    {
      v7 = 0;
    }

  }
  else
  {
    v7 = 0;
  }
  return v7;
}

void sub_163E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_16400(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id WeakRetained;
  void *v8;
  unsigned __int8 v9;
  id v10;

  v10 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "lowercaseString"));
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "lowercaseRestrictedHeaders"));
  v9 = objc_msgSend(v8, "containsObject:", v6);

  if ((v9 & 1) == 0
    && (objc_msgSend(v6, "hasPrefix:", CFSTR("proxy-")) & 1) == 0
    && (objc_msgSend(v6, "hasPrefix:", CFSTR("sec-")) & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", v5, v10);
  }

}

void sub_1677C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_16788(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

id JSASignpost()
{
  if (qword_B9FE8 != -1)
    dispatch_once(&qword_B9FE8, &stru_9E7F8);
  return (id)qword_B9FE0;
}

void sub_16800(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.iBooks", "JSA.Signpost");
  v2 = (void *)qword_B9FE0;
  qword_B9FE0 = (uint64_t)v1;

}

id JSASignpostExecution()
{
  if (qword_B9FF8 != -1)
    dispatch_once(&qword_B9FF8, &stru_9E818);
  return (id)qword_B9FF0;
}

void sub_16870(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.iBooks", "JSA.Execution");
  v2 = (void *)qword_B9FF0;
  qword_B9FF0 = (uint64_t)v1;

}

id JSASignpostFeedController()
{
  if (qword_BA008 != -1)
    dispatch_once(&qword_BA008, &stru_9E838);
  return (id)qword_BA000;
}

void sub_168E0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.iBooks", "JSA.FeedController");
  v2 = (void *)qword_BA000;
  qword_BA000 = (uint64_t)v1;

}

id JSASignpostJS()
{
  if (qword_BA018 != -1)
    dispatch_once(&qword_BA018, &stru_9E858);
  return (id)qword_BA010;
}

void sub_16950(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.iBooks", "JSA.JS");
  v2 = (void *)qword_BA010;
  qword_BA010 = (uint64_t)v1;

}

void sub_16B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_16B90(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  objc_msgSend(v2, "feedController:wantsToUpdateSearchText:", WeakRetained, *(_QWORD *)(a1 + 32));

}

uint64_t sub_16BE0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_16D94(id a1)
{
  id v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[UIViewController jsa_topMostViewControllerForWindow:](UIViewController, "jsa_topMostViewControllerForWindow:", 0));
  v1 = objc_alloc_init((Class)FAFamilySettings);
  if ((objc_opt_respondsToSelector(v1, "setPresentingViewController:") & 1) != 0)
  {
    objc_msgSend(v1, "setPresentingViewController:", v2);
    objc_msgSend(v1, "launchiCloudFamilySettings");
  }

}

uint64_t sub_16E08(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_174CC(uint64_t a1, void *a2)
{
  id v3;
  JSAFeedMetadata *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (a1)
  {
    v6 = v3;
    if (v3)
    {
      v4 = -[JSAFeedMetadata initWithDictionary:]([JSAFeedMetadata alloc], "initWithDictionary:", v3);
      v5 = *(void **)(a1 + 56);
      *(_QWORD *)(a1 + 56) = v4;
    }
    else
    {
      v5 = *(void **)(a1 + 56);
      *(_QWORD *)(a1 + 56) = 0;
    }

    v3 = v6;
  }

}

void sub_17534(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  os_signpost_id_t v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  _QWORD v11[5];
  id v12;
  os_signpost_id_t v13;
  uint8_t buf[16];

  v3 = a2;
  if (a1)
  {
    v4 = JSASignpostFeedController();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    v6 = os_signpost_id_generate(v5);

    v7 = JSASignpostFeedController();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    v9 = v8;
    if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_0, v9, OS_SIGNPOST_INTERVAL_BEGIN, v6, "Bridge Feed", "", buf, 2u);
    }

    v10 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1F56C;
    v11[3] = &unk_9ED88;
    v11[4] = a1;
    v13 = v6;
    v12 = v3;
    objc_msgSend(v10, "enqueueBlock:file:line:", v11, CFSTR("JSAFeedController.m"), 1018);

  }
}

void sub_17994(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_179B8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  os_signpost_id_t v7;
  id v8;
  void *v9;
  uint8_t v10[16];

  v3 = a2;
  v4 = JSASignpostFeedController();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 40);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
  {
    *(_WORD *)v10 = 0;
    _os_signpost_emit_with_name_impl(&dword_0, v6, OS_SIGNPOST_INTERVAL_END, v7, "Request Entries", "", v10, 2u);
  }

  v8 = objc_retainBlock(*(id *)(a1 + 32));
  v9 = v8;
  if (v8)
    (*((void (**)(id, id))v8 + 2))(v8, v3);

}

void sub_17A74(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  id WeakRetained;
  NSObject *v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;
  id v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  uint64_t v17;

  v3 = a2;
  v4 = JSALog();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 136446466;
    v15 = "-[JSAFeedController requestEntriesWithCompletion:]_block_invoke";
    v16 = 2048;
    v17 = v6;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "%{public}s %p: got callback from JS", buf, 0x16u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "setRequestEntriesCompletionBlock:", 0);

  v8 = *(NSObject **)(a1 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_17BE4;
  block[3] = &unk_9E900;
  objc_copyWeak(&v13, (id *)(a1 + 56));
  v11 = v3;
  v12 = *(id *)(a1 + 48);
  v9 = v3;
  dispatch_async(v8, block);

  objc_destroyWeak(&v13);
}

void sub_17BE4(id *a1)
{
  id v2;
  void *v3;
  id *v4;
  id *val;

  val = (id *)objc_loadWeakRetained(a1 + 6);
  if (val)
    objc_storeStrong(val + 4, a1[4]);
  v2 = objc_retainBlock(a1[5]);
  v3 = v2;
  if (v2)
    (*((void (**)(id, id))v2 + 2))(v2, a1[4]);

  v4 = val;
  if (val)
  {
    sub_17C60(val);
    v4 = val;
  }

}

void sub_17C60(id val)
{
  void *v1;
  _QWORD v2[4];
  id v3;
  id location;

  if (val)
  {
    objc_initWeak(&location, val);
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_1FC90;
    v2[3] = &unk_9EDB0;
    objc_copyWeak(&v3, &location);
    objc_msgSend(v1, "enqueueBlock:file:line:", v2, CFSTR("JSAFeedController.m"), 1062);

    objc_destroyWeak(&v3);
    objc_destroyWeak(&location);
  }
}

void sub_17D10(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_17D34(id *a1)
{
  id *v2;
  void *v3;
  unsigned int v4;
  id v5;
  NSObject *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  id v26;

  v2 = a1 + 4;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "feed"));
  v4 = objc_msgSend(v3, "isObject");

  if (v4)
  {
    v5 = JSALog();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *v2;
      *(_DWORD *)buf = 136446466;
      v24 = "-[JSAFeedController requestEntriesWithCompletion:]_block_invoke_2";
      v25 = 2048;
      v26 = v7;
      _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEFAULT, "%{public}s %p: bridged, now call getContentAsynchronously", buf, 0x16u);
    }

    v8 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "feed"));
    v10 = objc_retainBlock(a1[5]);
    v22 = v10;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v22, 1));
    objc_msgSend(v8, "enqueueValueInvocation:method:arguments:file:line:", v9, CFSTR("getContentAsynchronously"), v11, CFSTR("JSAFeedController.m"), 157);

  }
  else if (objc_msgSend(*v2, "feedBridged"))
  {
    v12 = JSALog();
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      sub_72488((uint64_t)v2, v13, v14, v15, v16, v17, v18, v19);

    v20 = objc_retainBlock(a1[6]);
    v21 = v20;
    if (v20)
      (*((void (**)(id, _QWORD))v20 + 2))(v20, 0);

  }
  else
  {
    objc_msgSend(a1[4], "setRequestEntriesCompletionBlock:", a1[6]);
  }
}

void sub_181A0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_181C4(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  id *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  if (objc_msgSend(v7, "isObject"))
  {
    if (v10)
    {
      v19 = v9;
      v20 = v8;
      v21 = v10;
      v11 = &v19;
      v12 = 3;
    }
    else
    {
      v17 = v9;
      v18 = v8;
      v11 = &v17;
      v12 = 2;
    }
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v11, v12, v17, v18, v19, v20, v21));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "invokeMethod:withArguments:", CFSTR("executeEntryBehavior"), v13));
    if (objc_msgSend(v14, "isBoolean") && (objc_msgSend(v14, "toBool") & 1) == 0)
    {
      v15 = JSALog();
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        sub_72504();

    }
  }

}

void sub_18318(void **a1)
{
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(a1 + 7);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "feed"));
  sub_181C4(v2, a1[4], a1[5], a1[6]);

}

void sub_18370(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  _QWORD v6[5];
  id v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  uint64_t v11;

  v3 = a2;
  if (a1)
  {
    v4 = JSALog();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v9 = "-[JSAFeedController _reloadWithCompletion:]";
      v10 = 2048;
      v11 = a1;
      _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "%{public}s %p: reload", buf, 0x16u);
    }

    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1848C;
    v6[3] = &unk_9E2F8;
    v6[4] = a1;
    v7 = v3;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);

  }
}

void sub_1848C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  unsigned int v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  _QWORD v11[4];
  id v12;
  id v13;
  char v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  uint64_t v18;

  v2 = JSALog();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 136446466;
    v16 = "-[JSAFeedController _reloadWithCompletion:]_block_invoke";
    v17 = 2048;
    v18 = v4;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "%{public}s %p: reload step 0: current feed disappear", buf, 0x16u);
  }

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v6 = objc_msgSend(v5, "feedControllerIsOnScreen:", *(_QWORD *)(a1 + 32));

  if (v6)
  {
    sub_1869C(*(void **)(a1 + 32));
    sub_18718(*(void **)(a1 + 32));
  }
  v7 = JSALog();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 136446466;
    v16 = "-[JSAFeedController _reloadWithCompletion:]_block_invoke";
    v17 = 2048;
    v18 = v9;
    _os_log_impl(&dword_0, v8, OS_LOG_TYPE_DEFAULT, "%{public}s %p: reload step 1: teardown current feed", buf, 0x16u);
  }

  objc_initWeak((id *)buf, *(id *)(a1 + 32));
  v10 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_18794;
  v11[3] = &unk_9E9F0;
  objc_copyWeak(&v13, (id *)buf);
  v12 = *(id *)(a1 + 40);
  v14 = v6;
  objc_msgSend(v10, "tearDownWithCompletion:", v11);

  objc_destroyWeak(&v13);
  objc_destroyWeak((id *)buf);
}

void sub_18678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1869C(void *a1)
{
  void *v2;
  id v3;

  if (a1)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "feed"));
    objc_msgSend(v3, "enqueueValueInvocation:method:arguments:file:line:", v2, CFSTR("analyticsVisibilityWillDisappear"), 0, CFSTR("JSAFeedController.m"), 888);

  }
}

void sub_18718(void *a1)
{
  void *v2;
  id v3;

  if (a1)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "feed"));
    objc_msgSend(v3, "enqueueValueInvocation:method:arguments:file:line:", v2, CFSTR("onDisappear"), 0, CFSTR("JSAFeedController.m"), 825);

  }
}

void sub_18794(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  unsigned int v4;
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  char v13;

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = objc_msgSend(WeakRetained, "abandoned");
  if (!WeakRetained || v4)
  {
    v6 = JSALog();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_72590();

    v8 = objc_retainBlock(*(id *)(a1 + 32));
    v5 = v8;
    if (v8)
      (*((void (**)(id))v8 + 2))(v8);
  }
  else
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_188D4;
    v9[3] = &unk_9E9C8;
    v10 = WeakRetained;
    objc_copyWeak(&v12, v2);
    v13 = *(_BYTE *)(a1 + 48);
    v11 = *(id *)(a1 + 32);
    sub_17534((uint64_t)v10, v9);

    objc_destroyWeak(&v12);
    v5 = v10;
  }

}

void sub_188C0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_188D4(uint64_t a1)
{
  _QWORD v2[4];
  id v3;
  id v4;
  id v5;
  char v6;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_18980;
  v2[3] = &unk_9E9C8;
  v3 = *(id *)(a1 + 32);
  objc_copyWeak(&v5, (id *)(a1 + 48));
  v6 = *(_BYTE *)(a1 + 56);
  v4 = *(id *)(a1 + 40);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v2);

  objc_destroyWeak(&v5);
}

void sub_18980(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  id WeakRetained;
  void *v6;
  id v7;
  NSObject *v8;
  _QWORD v9[4];
  id v10;
  id v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  void *v15;

  v2 = JSALog();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 136446466;
    v13 = "-[JSAFeedController _reloadWithCompletion:]_block_invoke_2";
    v14 = 2048;
    v15 = v4;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "%{public}s %p: reload step 3: new feed appear", buf, 0x16u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v6 = WeakRetained;
  if (WeakRetained && *(_BYTE *)(a1 + 56))
  {
    sub_18B60(WeakRetained);
    sub_18BDC(v6);
    sub_18C58(v6);
  }
  v7 = JSALog();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v13 = "-[JSAFeedController _reloadWithCompletion:]_block_invoke";
    v14 = 2048;
    v15 = v6;
    _os_log_impl(&dword_0, v8, OS_LOG_TYPE_DEFAULT, "%{public}s %p: reload step 4: request entries", buf, 0x16u);
  }

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_18CD4;
  v9[3] = &unk_9E9A0;
  objc_copyWeak(&v11, (id *)(a1 + 48));
  v10 = *(id *)(a1 + 40);
  objc_msgSend(v6, "requestEntriesWithCompletion:", v9);

  objc_destroyWeak(&v11);
}

void sub_18B44(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18B60(void *a1)
{
  void *v2;
  id v3;

  if (a1)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "feed"));
    objc_msgSend(v3, "enqueueValueInvocation:method:arguments:file:line:", v2, CFSTR("onAppear"), 0, CFSTR("JSAFeedController.m"), 799);

  }
}

void sub_18BDC(void *a1)
{
  void *v2;
  id v3;

  if (a1)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "feed"));
    objc_msgSend(v3, "enqueueValueInvocation:method:arguments:file:line:", v2, CFSTR("didAppear"), 0, CFSTR("JSAFeedController.m"), 812);

  }
}

void sub_18C58(void *a1)
{
  void *v2;
  id v3;

  if (a1)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "feed"));
    objc_msgSend(v3, "enqueueValueInvocation:method:arguments:file:line:", v2, CFSTR("analyticsVisibilityDidAppear"), 0, CFSTR("JSAFeedController.m"), 867);

  }
}

void sub_18CD4(uint64_t a1, void *a2)
{
  id v3;
  os_unfair_lock_s *WeakRetained;
  id v5;
  NSObject *v6;
  os_unfair_lock_s *v7;
  id v8;
  NSObject *v9;
  id v10;
  void *v11;
  _QWORD v12[4];
  os_unfair_lock_s *v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  os_unfair_lock_s *v17;

  v3 = a2;
  WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v5 = JSALog();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v15 = "-[JSAFeedController _reloadWithCompletion:]_block_invoke";
      v16 = 2048;
      v17 = WeakRetained;
      _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEFAULT, "%{public}s %p: reload step 5: updateContentWithData", buf, 0x16u);
    }

    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_18EAC;
    v12[3] = &unk_9DCA8;
    v7 = WeakRetained;
    v13 = v7;
    os_unfair_lock_lock_with_options(&WeakRetained[3], 0x10000);
    sub_18EAC((uint64_t)v12);
    os_unfair_lock_unlock(WeakRetained + 3);
    -[os_unfair_lock_s updateContentWithData:](v7, "updateContentWithData:", v3);

  }
  v8 = JSALog();
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v15 = "-[JSAFeedController _reloadWithCompletion:]_block_invoke_2";
    v16 = 2048;
    v17 = WeakRetained;
    _os_log_impl(&dword_0, v9, OS_LOG_TYPE_DEFAULT, "%{public}s %p: reload done", buf, 0x16u);
  }

  v10 = objc_retainBlock(*(id *)(a1 + 32));
  v11 = v10;
  if (v10)
    (*((void (**)(id))v10 + 2))(v10);

}

uint64_t sub_18EAC(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 8) = 0;
  return result;
}

void sub_19000(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  objc_msgSend(v2, "feedController:wantsToUpdateContentWithData:", WeakRetained, *(_QWORD *)(a1 + 32));

}

id sub_191A8(id a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if (qword_BA028 == -1)
    {
      if (v3)
      {
LABEL_4:
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_BA020, "objectForKeyedSubscript:", v4));
        a1 = objc_msgSend(v5, "integerValue");

        goto LABEL_7;
      }
    }
    else
    {
      dispatch_once(&qword_BA028, &stru_9EDD0);
      if (v4)
        goto LABEL_4;
    }
    a1 = 0;
  }
LABEL_7:

  return a1;
}

void sub_19238(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  objc_msgSend(v2, "feedController:viewStateDidUpdate:fromPreviousState:", WeakRetained, objc_msgSend(WeakRetained, "viewState"), *(_QWORD *)(a1 + 40));

}

void sub_1955C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19580(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  if (v5 && (objc_opt_respondsToSelector(v4, "feedController:wantsToPushViewController:animated:") & 1) != 0)
  {
    sub_19614(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40), v5);
    objc_msgSend(v4, "feedController:wantsToPushViewController:animated:", WeakRetained, v5, *(unsigned __int8 *)(a1 + 56));
  }

}

void sub_19614(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  unsigned int v17;
  id v18;
  void *v19;
  void **v20;
  uint64_t v21;
  id (*v22)(uint64_t);
  void *v23;
  id v24;
  id location;

  v5 = a2;
  v7 = a3;
  if (a1)
  {
    v8 = objc_opt_class(NSDictionary, v6);
    v9 = BUDynamicCast(v8, v5);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("sourceView")));
    objc_initWeak(&location, v11);

    v13 = objc_opt_class(NSNumber, v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("shouldZoomAnimate")));
    v15 = BUDynamicCast(v13, v14);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    v17 = objc_msgSend(v16, "BOOLValue");

    v18 = objc_loadWeakRetained(&location);
    if (v18 && _os_feature_enabled_impl("UIKit", "uip_fluid_transitions"))
    {

      if (v17)
      {
        v20 = _NSConcreteStackBlock;
        v21 = 3221225472;
        v22 = sub_2026C;
        v23 = &unk_9EE48;
        objc_copyWeak(&v24, &location);
        v19 = (void *)objc_claimAutoreleasedReturnValue(+[_UIViewControllerTransition zoomWithSourceViewProvider:](_UIViewControllerTransition, "zoomWithSourceViewProvider:", &v20));
        objc_msgSend(v7, "_setPreferredTransition:", v19, v20, v21, v22, v23);

        objc_destroyWeak(&v24);
      }
    }
    else
    {

    }
    objc_destroyWeak(&location);

  }
}

void sub_197AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1993C(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  if (v5 && (objc_opt_respondsToSelector(v4, "feedController:wantsToReplaceCurrentViewController:animated:") & 1) != 0)
    objc_msgSend(v4, "feedController:wantsToReplaceCurrentViewController:animated:", WeakRetained, v5, *(unsigned __int8 *)(a1 + 40));

}

void sub_19B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19B5C(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  if (v5 && (objc_opt_respondsToSelector(v4, "feedController:wantsToPresentViewController:animated:params:") & 1) != 0)
    objc_msgSend(v4, "feedController:wantsToPresentViewController:animated:params:", WeakRetained, v5, *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 32));

}

void sub_19D30(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "presentViewController:::", *(_QWORD *)(a1 + 32), 1, &off_A5B38);

}

void sub_19ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19EF0(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  if (v5 && (objc_opt_respondsToSelector(v4, "feedController:wantsToSlideInFeedViewController:") & 1) != 0)
    objc_msgSend(v4, "feedController:wantsToSlideInFeedViewController:", WeakRetained, v5);

}

void sub_1A0EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A110(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  if (v5
    && (objc_opt_respondsToSelector(v4, "feedController:wantsToPresentViewControllerInPopover:withParams:") & 1) != 0)
  {
    objc_msgSend(v4, "feedController:wantsToPresentViewControllerInPopover:withParams:", WeakRetained, v5, *(_QWORD *)(a1 + 32));
  }

}

void sub_1A35C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A380(uint64_t a1)
{
  void *v2;
  void *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  if ((objc_opt_respondsToSelector(v2, "feedController:wantsToPopViewController:completion:") & 1) != 0)
  {
    objc_msgSend(v2, "feedController:wantsToPopViewController:completion:", WeakRetained, *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 32));
  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
    objc_msgSend(v3, "enqueueValueCall:arguments:file:line:", *(_QWORD *)(a1 + 32), &off_A5C98, CFSTR("JSAFeedController.m"), 406);

  }
}

uint64_t sub_1A428(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1A5F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A61C(uint64_t a1)
{
  void *v2;
  void *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  if ((objc_opt_respondsToSelector(v2, "feedController:wantsToPopToRootViewControllerAnimated:completion:") & 1) != 0)
  {
    objc_msgSend(v2, "feedController:wantsToPopToRootViewControllerAnimated:completion:", WeakRetained, *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 32));
  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
    objc_msgSend(v3, "enqueueValueCall:arguments:file:line:", *(_QWORD *)(a1 + 32), &off_A5CB0, CFSTR("JSAFeedController.m"), 421);

  }
}

uint64_t sub_1A6C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1A894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A8B8(uint64_t a1)
{
  void *v2;
  int v3;
  uint64_t v4;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  if ((objc_opt_respondsToSelector(v2, "feedController:wantsToDismissViewControllerAnimated:completion:") & 1) != 0)
  {
    v3 = *(unsigned __int8 *)(a1 + 48);
    if (objc_msgSend(*(id *)(a1 + 32), "isObject"))
      v4 = *(_QWORD *)(a1 + 32);
    else
      v4 = 0;
    objc_msgSend(v2, "feedController:wantsToDismissViewControllerAnimated:completion:", WeakRetained, v3 != 0, v4);
  }

}

uint64_t sub_1A944(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1ABD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1ABFC(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  _QWORD *v5;
  _QWORD v6[4];
  id v7;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  if ((objc_opt_respondsToSelector(v3, "feedController:wantsToPresentCardsWithCardArray:focusedIndex:animated:options:completion:") & 1) != 0)
  {
    v4 = *(void **)(a1 + 32);
    if (v4)
    {
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      v6[2] = sub_1ACD0;
      v6[3] = &unk_9DCA8;
      v7 = v4;
      v5 = objc_retainBlock(v6);

    }
    else
    {
      v5 = 0;
    }
    objc_msgSend(v3, "feedController:wantsToPresentCardsWithCardArray:focusedIndex:animated:options:completion:", WeakRetained, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64), *(unsigned __int8 *)(a1 + 72), *(_QWORD *)(a1 + 48), v5);

  }
}

void sub_1ACD0(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
  objc_msgSend(v2, "enqueueValueCall:arguments:file:line:", *(_QWORD *)(a1 + 32), 0, CFSTR("JSAFeedController.m"), 453);

}

uint64_t sub_1AD24(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1AFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1AFCC(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  _QWORD *v5;
  _QWORD v6[4];
  id v7;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  if ((objc_opt_respondsToSelector(v3, "feedController:wantsToPresentCardsWithCardArray:focusedIndex:animated:options:completion:") & 1) != 0)
  {
    v4 = *(void **)(a1 + 32);
    if (v4)
    {
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      v6[2] = sub_1B0A0;
      v6[3] = &unk_9DCA8;
      v7 = v4;
      v5 = objc_retainBlock(v6);

    }
    else
    {
      v5 = 0;
    }
    objc_msgSend(v3, "feedController:wantsToPresentCardsWithCardArray:focusedIndex:animated:options:completion:", WeakRetained, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64), *(unsigned __int8 *)(a1 + 72), *(_QWORD *)(a1 + 48), v5);

  }
}

void sub_1B0A0(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
  objc_msgSend(v2, "enqueueValueCall:arguments:file:line:", *(_QWORD *)(a1 + 32), 0, CFSTR("JSAFeedController.m"), 475);

}

uint64_t sub_1B0F4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1B310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B334(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  if ((objc_opt_respondsToSelector(v2, "feedController:wantsToAppendCards:options:") & 1) != 0)
    objc_msgSend(v2, "feedController:wantsToAppendCards:options:", WeakRetained, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

uint64_t sub_1B398(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1B560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B584(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  if ((objc_opt_respondsToSelector(v2, "feedController:didLoadCardResource:") & 1) != 0)
    objc_msgSend(v2, "feedController:didLoadCardResource:", WeakRetained, *(_QWORD *)(a1 + 32));

}

uint64_t sub_1B5E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1B7B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B7DC(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  if ((objc_opt_respondsToSelector(v2, "feedController:wantsToPerformRawActionModel:shouldReportFigaro:") & 1) != 0)
    objc_msgSend(v2, "feedController:wantsToPerformRawActionModel:shouldReportFigaro:", WeakRetained, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 48));

}

uint64_t sub_1B844(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1BA6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, char a19)
{
  _Block_object_dispose(&a19, 8);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_1BAA0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BAB0(uint64_t a1)
{

}

void sub_1BAB8(uint64_t a1)
{
  id WeakRetained;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[5];
  id v9;
  uint64_t v10;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained
    && (objc_opt_respondsToSelector(*(_QWORD *)(a1 + 32), "feedController:collectAndFlush:accumulatedImpressionsWithCompletion:") & 1) != 0)
  {
    v3 = *(unsigned __int8 *)(a1 + 64);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1BBB4;
    v8[3] = &unk_9EB80;
    v8[4] = WeakRetained;
    v4 = *(void **)(a1 + 32);
    v5 = *(id *)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 48);
    v9 = v5;
    v10 = v6;
    objc_msgSend(v4, "feedController:collectAndFlush:accumulatedImpressionsWithCompletion:", WeakRetained, v3, v8);

  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
    objc_msgSend(v7, "enqueueValueCall:arguments:file:line:", *(_QWORD *)(a1 + 40), &__NSArray0__struct, CFSTR("JSAFeedController.m"), 560);

    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "invalidate");
  }

}

void sub_1BBB4(_QWORD *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[5];
  id v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  uint64_t v15;

  v3 = a2;
  v4 = JSALog();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = a1[4];
    *(_DWORD *)buf = 136446466;
    v13 = "-[JSAFeedController collectAndFlush:accumulatedImpressionsWithCompletion:]_block_invoke_2";
    v14 = 2048;
    v15 = v6;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "%{public}s %p callback", buf, 0x16u);
  }

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
  v8 = a1[5];
  v11 = v3;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v11, 1));
  objc_msgSend(v7, "enqueueValueCall:arguments:file:line:", v8, v9, CFSTR("JSAFeedController.m"), 554);

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1BD28;
  v10[3] = &unk_9EB58;
  v10[4] = a1[6];
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v10);

}

id sub_1BD28(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "invalidate");
}

void sub_1BF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, char a19)
{
  _Block_object_dispose(&a19, 8);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BF48(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[5];
  id v9;
  uint64_t v10;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  if ((objc_opt_respondsToSelector(v3, "feedController:collectVisibleImpressionsWithCompletion:") & 1) != 0)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1C044;
    v8[3] = &unk_9EB80;
    v4 = *(void **)(a1 + 40);
    v8[4] = *(_QWORD *)(a1 + 32);
    v5 = v4;
    v6 = *(_QWORD *)(a1 + 48);
    v9 = v5;
    v10 = v6;
    objc_msgSend(v3, "feedController:collectVisibleImpressionsWithCompletion:", WeakRetained, v8);

  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
    objc_msgSend(v7, "enqueueValueCall:arguments:file:line:", *(_QWORD *)(a1 + 40), &__NSArray0__struct, CFSTR("JSAFeedController.m"), 590);

    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "invalidate");
  }

}

void sub_1C044(_QWORD *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[5];
  id v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  uint64_t v15;

  v3 = a2;
  v4 = JSALog();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = a1[4];
    *(_DWORD *)buf = 136446466;
    v13 = "-[JSAFeedController collectVisibleImpressionsWithCompletion:]_block_invoke_2";
    v14 = 2048;
    v15 = v6;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "%{public}s %p callback", buf, 0x16u);
  }

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
  v8 = a1[5];
  v11 = v3;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v11, 1));
  objc_msgSend(v7, "enqueueValueCall:arguments:file:line:", v8, v9, CFSTR("JSAFeedController.m"), 584);

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1C1B8;
  v10[3] = &unk_9EB58;
  v10[4] = a1[6];
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v10);

}

id sub_1C1B8(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "invalidate");
}

void sub_1C358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C37C(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  if ((objc_opt_respondsToSelector(v1, "resetImpressionsForFeedController:") & 1) != 0)
    objc_msgSend(v1, "resetImpressionsForFeedController:", WeakRetained);

}

uint64_t sub_1C3D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1C5C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, char a19)
{
  _Block_object_dispose(&a19, 8);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C5F4(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[5];
  id v9;
  uint64_t v10;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  if ((objc_opt_respondsToSelector(v3, "feedController:collectStatsWithCompletion:") & 1) != 0)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1C6F0;
    v8[3] = &unk_9EBF8;
    v4 = *(void **)(a1 + 40);
    v8[4] = *(_QWORD *)(a1 + 32);
    v5 = v4;
    v6 = *(_QWORD *)(a1 + 48);
    v9 = v5;
    v10 = v6;
    objc_msgSend(v3, "feedController:collectStatsWithCompletion:", WeakRetained, v8);

  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
    objc_msgSend(v7, "enqueueValueCall:arguments:file:line:", *(_QWORD *)(a1 + 40), &__NSArray0__struct, CFSTR("JSAFeedController.m"), 634);

    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "invalidate");
  }

}

void sub_1C6F0(_QWORD *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[5];
  id v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  uint64_t v15;

  v3 = a2;
  v4 = JSALog();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = a1[4];
    *(_DWORD *)buf = 136446466;
    v13 = "-[JSAFeedController collectStatsWithCompletion:]_block_invoke_2";
    v14 = 2048;
    v15 = v6;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "%{public}s %p callback", buf, 0x16u);
  }

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
  v8 = a1[5];
  v11 = v3;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v11, 1));
  objc_msgSend(v7, "enqueueValueCall:arguments:file:line:", v8, v9, CFSTR("JSAFeedController.m"), 628);

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1C864;
  v10[3] = &unk_9EB58;
  v10[4] = a1[6];
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v10);

}

id sub_1C864(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "invalidate");
}

void sub_1CA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CA28(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  if ((objc_opt_respondsToSelector(v1, "feedController:dismissKeyboard:") & 1) != 0)
    objc_msgSend(v1, "feedController:dismissKeyboard:", WeakRetained, 0);

}

uint64_t sub_1CA88(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1CC68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CC8C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  if ((objc_opt_respondsToSelector(v2, "feedController:scrollToItem:animated:skipVoiceOverFocus:") & 1) != 0)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
      objc_msgSend(v2, "feedController:scrollToItem:animated:skipVoiceOverFocus:", WeakRetained, v3, *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 49));
  }

}

uint64_t sub_1CCFC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1CEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CED8(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  if ((objc_opt_respondsToSelector(v2, "feedController:requestToSetNavigationBarHidden:animated:") & 1) != 0)
    objc_msgSend(v2, "feedController:requestToSetNavigationBarHidden:animated:", WeakRetained, *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41));

}

uint64_t sub_1CF40(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1D128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D14C(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  if ((objc_opt_respondsToSelector(v2, "feedController:requestToRenderSharableImage:completion:") & 1) != 0)
    objc_msgSend(v2, "feedController:requestToRenderSharableImage:completion:", WeakRetained, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

uint64_t sub_1D1B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1D3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D3C8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  if ((objc_opt_respondsToSelector(v2, "feedController:addAlphaOverrideToItem:alpha:animated:duration:") & 1) != 0)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
      objc_msgSend(v2, "feedController:addAlphaOverrideToItem:alpha:animated:duration:", WeakRetained, v3, *(unsigned __int8 *)(a1 + 64), *(double *)(a1 + 48), *(double *)(a1 + 56));
  }

}

uint64_t sub_1D438(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1D610(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_1D634(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  if ((objc_opt_respondsToSelector(v2, "feedController:removeAlphaOverrideFromItem:animated:duration:") & 1) != 0)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
      objc_msgSend(v2, "feedController:removeAlphaOverrideFromItem:animated:duration:", WeakRetained, v3, *(unsigned __int8 *)(a1 + 56), *(double *)(a1 + 48));
  }

}

uint64_t sub_1D6A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1D840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D864(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  if ((objc_opt_respondsToSelector(v1, "showLoadingViewForFeedController:") & 1) != 0)
    objc_msgSend(v1, "showLoadingViewForFeedController:", WeakRetained);

}

uint64_t sub_1D8C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1DA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1DA80(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  if ((objc_opt_respondsToSelector(v1, "hideLoadingViewForFeedController:") & 1) != 0)
    objc_msgSend(v1, "hideLoadingViewForFeedController:", WeakRetained);

}

uint64_t sub_1DADC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1DCC0(uint64_t a1)
{
  void *v2;
  void ***v3;
  void *v4;
  void **v5;
  uint64_t v6;
  void (*v7)(uint64_t, void *);
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t *v12;
  uint64_t v13;
  id *v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;

  v13 = 0;
  v14 = (id *)&v13;
  v15 = 0x3042000000;
  v16 = sub_1DDE8;
  v17 = sub_1DDF4;
  v5 = _NSConcreteStackBlock;
  v7 = sub_1DDFC;
  v8 = &unk_9ED10;
  v2 = *(void **)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 32);
  v18 = 0;
  v6 = 3221225472;
  v10 = v2;
  v11 = *(id *)(a1 + 48);
  v12 = &v13;
  v3 = objc_retainBlock(&v5);
  objc_storeWeak(v14 + 5, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate", v5, v6, v7, v8, v9));
  objc_msgSend(v4, "feedController:addObserver:forTrigger:", *(_QWORD *)(a1 + 32), v3, *(_QWORD *)(a1 + 40));

  _Block_object_dispose(&v13, 8);
  objc_destroyWeak(&v18);
}

void sub_1DDC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  id *v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  objc_destroyWeak(v9);
  _Unwind_Resume(a1);
}

void sub_1DDE8(uint64_t a1, uint64_t a2)
{
  objc_moveWeak((id *)(a1 + 40), (id *)(a2 + 40));
}

void sub_1DDF4(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 40));
}

void sub_1DDFC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[5];
  id v8;
  id v9;
  id v10;
  uint64_t v11;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1DED4;
  v7[3] = &unk_9ECE8;
  v5 = *(void **)(a1 + 40);
  v7[4] = *(_QWORD *)(a1 + 32);
  v8 = v5;
  v9 = *(id *)(a1 + 48);
  v10 = v3;
  v11 = *(_QWORD *)(a1 + 56);
  v6 = v3;
  objc_msgSend(v4, "enqueueBlock:file:line:", v7, CFSTR("JSAFeedController.m"), 772);

}

void sub_1DED4(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[5];
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;

  v2 = JSALog();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 136446722;
    v17 = "-[JSAFeedController addWeakTriggerObserver::]_block_invoke_2";
    v18 = 2048;
    v19 = v4;
    v20 = 2112;
    v21 = v5;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "%{public}s %p: %@ triggered", buf, 0x20u);
  }

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "value"));
  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "value"));
    v15 = *(_QWORD *)(a1 + 56);
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v15, 1));
    objc_msgSend(v7, "enqueueValueCall:arguments:file:line:", v8, v9, CFSTR("JSAFeedController.m"), 766);

  }
  else
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1E088;
    v12[3] = &unk_9ECC0;
    v10 = *(_QWORD *)(a1 + 64);
    v11 = *(void **)(a1 + 40);
    v12[4] = *(_QWORD *)(a1 + 32);
    v14 = v10;
    v13 = v11;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v12);

  }
}

void sub_1E088(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v2 = *(_QWORD *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
  objc_msgSend(v4, "feedController:removeObserver:forTrigger:", v2, WeakRetained, *(_QWORD *)(a1 + 40));

}

uint64_t sub_1E0F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1E190(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1E1AC(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "feed"));
  objc_msgSend(v4, "enqueueValueInvocation:method:arguments:file:line:", v3, CFSTR("nativeScrollViewReachedTheBottom"), 0, CFSTR("JSAFeedController.m"), 785);

}

void sub_1E22C(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  NSObject *v11;
  _QWORD block[4];
  id v13;

  v3 = a2;
  if (a1)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "dataSource"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "hostViewControllerForFeedController:", a1));

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "viewIfLoaded"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "window"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "windowScene"));

    if (v8 && objc_msgSend(v8, "activationState"))
    {
      if (objc_msgSend(a1, "feedBridged"))
      {
        v9 = objc_retainBlock(v3);
        v10 = v9;
        if (v9)
          (*((void (**)(id))v9 + 2))(v9);

      }
    }
    else
    {
      v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "access"));
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_20238;
      block[3] = &unk_9DCD0;
      v13 = v3;
      dispatch_async(v11, block);

    }
  }

}

void sub_1E3F4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1E410(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  sub_18B60(WeakRetained);

}

void sub_1E4C8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1E4E4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  sub_18BDC(WeakRetained);

}

void sub_1E59C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1E5B8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  sub_18718(WeakRetained);

}

void sub_1E704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;
  uint64_t v15;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Block_object_dispose((const void *)(v15 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1E734(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 8) ^ 1;
  *(_BYTE *)(*(_QWORD *)(result + 32) + 8) = 1;
  return result;
}

void sub_1E758(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "feed"));
  objc_msgSend(v4, "enqueueValueInvocation:method:arguments:file:line:", v3, CFSTR("initialContentReady"), 0, CFSTR("JSAFeedController.m"), 839);

}

void sub_1E8B4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1E8D0(uint64_t a1)
{
  void *v2;
  id WeakRetained;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v10[2];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "feed"));
  v5 = *(void **)(a1 + 32);
  v6 = v5;
  if (!v5)
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v10[0] = v6;
  v7 = *(void **)(a1 + 40);
  v8 = v7;
  if (!v7)
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v10[1] = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v10, 2));
  objc_msgSend(v2, "enqueueValueInvocation:method:arguments:file:line:", v4, CFSTR("parentCardWillDismiss"), v9, CFSTR("JSAFeedController.m"), 853);

  if (!v7)
  {

    if (v5)
      goto LABEL_7;
LABEL_9:

    goto LABEL_7;
  }
  if (!v5)
    goto LABEL_9;
LABEL_7:

}

void sub_1EAA0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1EABC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  sub_18C58(WeakRetained);

}

void sub_1EBB0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1EBCC(uint64_t a1)
{
  id WeakRetained;
  _QWORD v3[4];
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1EC4C;
  v3[3] = &unk_9DCA8;
  v4 = *(id *)(a1 + 32);
  sub_1ECBC((uint64_t)WeakRetained, v3);

}

void sub_1EC4C(uint64_t a1)
{
  _QWORD block[4];
  id v2;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1ECB4;
  block[3] = &unk_9DCA8;
  v2 = *(id *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

id sub_1ECB4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "invalidate");
}

void sub_1ECBC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  _QWORD v5[5];
  id v6;

  v3 = a2;
  if (a1)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1ED68;
    v5[3] = &unk_9ED38;
    v5[4] = a1;
    v6 = v3;
    objc_msgSend(v4, "enqueueBlock:file:line:", v5, CFSTR("JSAFeedController.m"), 896);

  }
}

uint64_t sub_1ED68(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "feed"));
  v3 = objc_msgSend(v2, "invokeMethod:withArguments:", CFSTR("analyticsVisibilityWillDisappear"), 0);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1F4D8(uint64_t a1)
{
  void *v2;
  char v3;
  void *v4;
  void (**v5)(void);
  void (**v6)(void);

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v3 = objc_opt_respondsToSelector(v2, "feedControllerWillHotReload:");

  if ((v3 & 1) != 0)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    objc_msgSend(v4, "feedControllerWillHotReload:", *(_QWORD *)(a1 + 32));

  }
  v5 = (void (**)(void))objc_retainBlock(*(id *)(a1 + 40));
  if (v5)
  {
    v6 = v5;
    v5[2]();
    v5 = v6;
  }

}

void sub_1F56C(id *a1, void *a2)
{
  id v3;
  void *v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  id v12;
  NSObject *v13;
  NSObject *v14;
  os_signpost_id_t v15;
  _QWORD v16[4];
  id v17;
  id v18[2];
  id location;
  _QWORD v20[2];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("FeedFactory")));
  if (objc_msgSend(v4, "isObject"))
  {
    objc_initWeak(&location, a1[4]);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1F7B8;
    v16[3] = &unk_9ED60;
    v18[1] = a1[6];
    objc_copyWeak(v18, &location);
    v17 = a1[5];
    v5 = objc_retainBlock(v16);
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "options"));
    v8 = (void *)v7;
    v9 = &__NSDictionary0__struct;
    if (v7)
      v9 = (void *)v7;
    v20[0] = v9;
    v10 = objc_retainBlock(v5);
    v20[1] = v10;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v20, 2));
    objc_msgSend(v6, "enqueueValueInvocation:method:arguments:file:line:", v4, CFSTR("createFeed"), v11, CFSTR("JSAFeedController.m"), 1011);

    objc_destroyWeak(v18);
    objc_destroyWeak(&location);
  }
  else
  {
    v12 = JSASignpostFeedController();
    v13 = objc_claimAutoreleasedReturnValue(v12);
    v14 = v13;
    v15 = (os_signpost_id_t)a1[6];
    if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v13))
    {
      LOWORD(location) = 0;
      _os_signpost_emit_with_name_impl(&dword_0, v14, OS_SIGNPOST_INTERVAL_END, v15, "Bridge Feed", "", (uint8_t *)&location, 2u);
    }

    objc_msgSend(a1[4], "setFeedBridged:", 1);
  }

}

void sub_1F794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1F7B8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  os_signpost_id_t v7;
  id WeakRetained;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  uint8_t v16[16];

  v3 = a2;
  v4 = JSASignpostFeedController();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 48);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
  {
    *(_WORD *)v16 = 0;
    _os_signpost_emit_with_name_impl(&dword_0, v6, OS_SIGNPOST_INTERVAL_END, v7, "Bridge Feed", "", v16, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (objc_msgSend(v3, "isObject"))
    {
      objc_msgSend(WeakRetained, "setFeed:", v3);
      objc_msgSend(WeakRetained, "setFeedBridged:", 1);
      objc_msgSend(v3, "setValue:forProperty:", WeakRetained, CFSTR("feedController"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "requestEntriesCompletionBlock"));

      if (v9)
      {
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "requestEntriesCompletionBlock"));
        objc_msgSend(WeakRetained, "requestEntriesWithCompletion:", v10);

      }
      sub_1F950(WeakRetained, 1);
    }
    else
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "requestEntriesCompletionBlock"));

      if (v11)
      {
        v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "requestEntriesCompletionBlock"));
        v13 = (void *)v12;
        if (v12)
          (*(void (**)(uint64_t, _QWORD))(v12 + 16))(v12, 0);

        objc_msgSend(WeakRetained, "setRequestEntriesCompletionBlock:", 0);
      }
    }
  }
  v14 = objc_retainBlock(*(id *)(a1 + 32));
  v15 = v14;
  if (v14)
    (*((void (**)(id))v14 + 2))(v14);

}

void sub_1F950(void *a1, char a2)
{
  id v4;
  NSObject *v5;
  os_signpost_id_t v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  unsigned int v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  char v16;
  _QWORD *v17;
  id v18;
  NSObject *v19;
  NSObject *v20;
  _QWORD v21[4];
  _QWORD *v22;
  _QWORD v23[5];
  id v24;
  char v25;
  id buf[2];

  if (a1)
  {
    v4 = JSASignpostFeedController();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    v6 = os_signpost_id_generate(v5);

    v7 = JSASignpostFeedController();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    v9 = v8;
    if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
    {
      LOWORD(buf[0]) = 0;
      _os_signpost_emit_with_name_impl(&dword_0, v9, OS_SIGNPOST_INTERVAL_BEGIN, v6, "Reload Metadata", "", (uint8_t *)buf, 2u);
    }

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "feed"));
    v11 = objc_msgSend(v10, "hasProperty:", CFSTR("metadata"));

    if (v11)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "feed"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "valueForProperty:", CFSTR("metadata")));

      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "toDictionary"));
      if (v14)
      {
        sub_174CC((uint64_t)a1, v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "delegate"));
        v16 = objc_opt_respondsToSelector(v15, "feedControllerDidUpdateMetadata:");

        if ((v16 & 1) != 0)
        {
          objc_initWeak(buf, a1);
          v23[0] = _NSConcreteStackBlock;
          v23[1] = 3221225472;
          v23[2] = sub_1FBF8;
          v23[3] = &unk_9EB08;
          objc_copyWeak(&v24, buf);
          v25 = a2;
          v23[4] = a1;
          v17 = objc_retainBlock(v23);
          if (v17)
          {
            if (+[NSThread isMainThread](NSThread, "isMainThread"))
            {
              ((void (*)(_QWORD *))v17[2])(v17);
            }
            else
            {
              v21[0] = _NSConcreteStackBlock;
              v21[1] = 3221225472;
              v21[2] = sub_1FC84;
              v21[3] = &unk_9DCD0;
              v22 = v17;
              dispatch_async((dispatch_queue_t)&_dispatch_main_q, v21);

            }
          }

          objc_destroyWeak(&v24);
          objc_destroyWeak(buf);
        }
      }

    }
    v18 = JSASignpostFeedController();
    v19 = objc_claimAutoreleasedReturnValue(v18);
    v20 = v19;
    if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v19))
    {
      LOWORD(buf[0]) = 0;
      _os_signpost_emit_with_name_impl(&dword_0, v20, OS_SIGNPOST_INTERVAL_END, v6, "Reload Metadata", "", (uint8_t *)buf, 2u);
    }

  }
}

void sub_1FBDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1FBF8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  objc_msgSend(v2, "feedControllerDidUpdateMetadata:", WeakRetained);

  if (*(_BYTE *)(a1 + 48))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "metadata"));
    objc_msgSend(v4, "navigationBarInitialBackgroundOpacity");
    objc_msgSend(v3, "feedController:wantsToUpdateNavBarBackgroundOpacity:", WeakRetained);

  }
}

uint64_t sub_1FC84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1FC90(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  sub_1F950(WeakRetained, 0);

}

void sub_1FCC0(id a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[8];
  _QWORD v4[8];

  v3[0] = CFSTR("NORMAL");
  v3[1] = CFSTR("OFFLINE");
  v4[0] = &off_A5BC0;
  v4[1] = &off_A5BD8;
  v3[2] = CFSTR("GENERIC_ERROR");
  v3[3] = CFSTR("SERVER_ERROR");
  v4[2] = &off_A5BF0;
  v4[3] = &off_A5C08;
  v3[4] = CFSTR("PRODUCT_UNAVAILABLE");
  v3[5] = CFSTR("CONTENT_UNAVAILABLE");
  v4[4] = &off_A5BA8;
  v4[5] = &off_A5C20;
  v3[6] = CFSTR("DISABLED_STOREFRONT");
  v3[7] = CFSTR("FOR_YOU_INELIGIBLE");
  v4[6] = &off_A5C38;
  v4[7] = &off_A5C50;
  v1 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 8));
  v2 = (void *)qword_BA020;
  qword_BA020 = v1;

}

void sub_1FFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1FFEC(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  uint64_t v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_200C0;
  v3[3] = &unk_9EDF8;
  v5 = *(_QWORD *)(a1 + 40);
  objc_copyWeak(&v6, (id *)(a1 + 48));
  v4 = *(id *)(a1 + 32);
  objc_msgSend(v2, "enqueueBlock:file:line:", v3, CFSTR("JSAFeedController.m"), 1121);

  objc_destroyWeak(&v6);
}

void sub_200AC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_200C0(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  NSObject *v7;
  id WeakRetained;
  void *v9;
  id v10;
  void *v11;
  int v12;
  const char *v13;
  __int16 v14;
  id v15;

  v2 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = 0;

  if (objc_msgSend(v2, "hasProperty:", CFSTR("willUnload")))
    v5 = objc_msgSend(v2, "invokeMethod:withArguments:", CFSTR("willUnload"), 0);
  objc_msgSend(v2, "setValue:forProperty:", 0, CFSTR("feedController"));
  v6 = JSALog();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    v12 = 136446466;
    v13 = "-[JSAFeedController tearDownWithCompletion:]_block_invoke_2";
    v14 = 2048;
    v15 = WeakRetained;
    _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEFAULT, "%{public}s: %p JSGarbageCollect()", (uint8_t *)&v12, 0x16u);

  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "context"));
  JSGarbageCollect((JSContextRef)objc_msgSend(v9, "JSGlobalContextRef"));

  v10 = objc_retainBlock(*(id *)(a1 + 32));
  v11 = v10;
  if (v10)
    (*((void (**)(id))v10 + 2))(v10);

}

void sub_20238(uint64_t a1)
{
  void (**v1)(void);
  void (**v2)(void);

  v1 = (void (**)(void))objc_retainBlock(*(id *)(a1 + 32));
  if (v1)
  {
    v2 = v1;
    v1[2]();
    v1 = v2;
  }

}

id sub_2026C(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  id v4;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "window"));
  if (v3)
    v4 = objc_loadWeakRetained(v1);
  else
    v4 = 0;

  return v4;
}

void sub_20498(uint64_t a1)
{
  id v2;
  id v3;

  v2 = objc_retainBlock(*(id *)(a1 + 40));
  if (v2)
  {
    v3 = v2;
    (*((void (**)(id, _QWORD))v2 + 2))(v2, *(_QWORD *)(a1 + 32));
    v2 = v3;
  }

}

void sub_204DC(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  id v10;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));

  if ((objc_opt_respondsToSelector(v3, "feedController:wantsToCreateNewFeedWithOptions:completion:") & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_205D0;
    v8[3] = &unk_9EE70;
    v9 = *(id *)(a1 + 48);
    v10 = *(id *)(a1 + 56);
    objc_msgSend(v3, "feedController:wantsToCreateNewFeedWithOptions:completion:", v4, v5, v8);

  }
  else
  {
    v6 = objc_retainBlock(*(id *)(a1 + 56));
    v7 = v6;
    if (v6)
      (*((void (**)(id, _QWORD))v6 + 2))(v6, 0);

  }
}

void sub_205D0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  void *v10;

  v5 = a2;
  v6 = a3;
  if (!v5)
  {
    v7 = JSALog();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_727D8();

  }
  v9 = objc_retainBlock(*(id *)(a1 + 40));
  v10 = v9;
  if (v9)
    (*((void (**)(id, id))v9 + 2))(v9, v5);

}

void sub_207C8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

id sub_209A8(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_BA038;
  qword_BA038 = (uint64_t)v1;

  return +[JSAMetricsAppLaunchEvent createPendingLaunchEvent](JSAMetricsAppLaunchEvent, "createPendingLaunchEvent");
}

void sub_20B0C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "environment"));
  objc_msgSend(v2, "registerObjects:", *(_QWORD *)(a1 + 40));

}

void sub_20D74(id *a1)
{
  unsigned int v2;
  id v3;
  NSObject *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v2 = objc_msgSend(a1[4], "hasStarted");
  objc_msgSend(a1[4], "setHasStarted:", 1);
  if (v2)
  {
    v3 = JSALog();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      sub_72854();

    v5 = objc_retainBlock(a1[6]);
    v6 = v5;
    if (v5)
      (*((void (**)(id))v5 + 2))(v5);

  }
  else
  {
    v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "objectRegistrationsForBridge:", a1[4]));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "environment"));
    objc_msgSend(v7, "registerObjects:", v8);

    sub_20E48(a1[4], a1[6]);
  }
}

void sub_20E48(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  os_signpost_id_t v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  void **v14;
  uint64_t v15;
  void (*v16)(uint64_t, void *);
  void *v17;
  void *v18;
  id v19;
  uint8_t buf[16];

  v3 = a2;
  if (a1)
  {
    v4 = JSASignpostExecution();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    v6 = os_signpost_id_generate(v5);

    v7 = JSASignpostExecution();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    v9 = v8;
    if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_0, v9, OS_SIGNPOST_INTERVAL_BEGIN, v6, "Init JSAEnvironment", "", buf, 2u);
    }

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "launchPackageProvisioner"));
    v14 = _NSConcreteStackBlock;
    v15 = 3221225472;
    v16 = sub_2115C;
    v17 = &unk_9EF40;
    v18 = a1;
    v19 = v3;
    objc_msgSend(v10, "provisionWithCompletionHandler:", &v14);

    objc_msgSend(a1, "setLaunchPackageProvisioner:", 0, v14, v15, v16, v17, v18);
    v11 = JSASignpostExecution();
    v12 = objc_claimAutoreleasedReturnValue(v11);
    v13 = v12;
    if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_0, v13, OS_SIGNPOST_INTERVAL_END, v6, "Init JSAEnvironment", "", buf, 2u);
    }

  }
}

void sub_2104C(id a1, JSAPackage *a2)
{
  JSAPackage *v2;
  id v3;
  NSObject *v4;
  NSObject *v5;
  void *v6;
  unsigned int v7;
  const __CFString *v8;
  int v9;
  void *v10;
  __int16 v11;
  const __CFString *v12;

  v2 = a2;
  v3 = JSALog();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = v4;
  if (v2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(-[JSAPackage version](v2, "version"));
      v7 = -[JSAPackage isBundled](v2, "isBundled");
      v8 = &stru_A2730;
      if (v7)
        v8 = CFSTR(" (bundled)");
      v9 = 138412546;
      v10 = v6;
      v11 = 2112;
      v12 = v8;
      _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "Provisioned package of version: %@%@", (uint8_t *)&v9, 0x16u);

    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    sub_72880();
  }

}

void sub_2115C(uint64_t a1, void *a2)
{
  id v3;
  NSDate *v4;
  dispatch_queue_global_t global_queue;
  NSObject *v6;
  id v7;
  NSObject *v8;
  _QWORD block[5];

  v3 = a2;
  v4 = objc_opt_new(NSDate);
  objc_msgSend(*(id *)(a1 + 32), "setLastScriptCacheDate:", v4);

  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "setupWithPackage:completion:", v3, *(_QWORD *)(a1 + 40));
    global_queue = dispatch_get_global_queue(-32768, 0);
    v6 = objc_claimAutoreleasedReturnValue(global_queue);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_21244;
    block[3] = &unk_9DCA8;
    block[4] = *(_QWORD *)(a1 + 32);
    dispatch_async(v6, block);

  }
  else
  {
    v7 = JSALog();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      sub_728B8();

  }
}

id sub_21244(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "checkForUpgradeWithCompletion:", 0);
}

void sub_212F0(uint64_t a1, void *a2)
{
  id v3;
  NSDate *v4;
  uint64_t v5;
  void *v6;
  __CFString *v7;
  __CFString *v8;
  void *v9;
  __CFString *v10;
  void *v11;
  unsigned __int8 v12;
  id v13;
  NSObject *v14;
  void *v15;
  __CFString *v16;
  id v17;
  NSObject *v18;
  id v19;
  void *v20;
  id v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __CFString *v30;
  int v31;
  const char *v32;
  __int16 v33;
  __CFString *v34;
  __int16 v35;
  __CFString *v36;

  v3 = a2;
  v4 = objc_opt_new(NSDate);
  objc_msgSend(*(id *)(a1 + 32), "setLastScriptCacheDate:", v4);

  if (v3)
  {
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "version"));
    v6 = (void *)v5;
    v7 = CFSTR("0.0.0");
    if (v5)
      v7 = (__CFString *)v5;
    v8 = v7;

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentPackage"));
    v10 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "version"));

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentPackage"));
    if ((objc_msgSend(v11, "isBundled") & 1) != 0
      || !-[__CFString isEqualToString:](v10, "isEqualToString:", v8))
    {

    }
    else
    {
      v12 = -[__CFString isEqualToString:](v10, "isEqualToString:", CFSTR("0.0.0"));

      if ((v12 & 1) == 0)
      {
        v13 = JSALog();
        v14 = objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          v31 = 136446466;
          v32 = "-[JSABridge checkForUpgradeWithCompletion:]_block_invoke";
          v33 = 2114;
          v34 = v10;
          _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEFAULT, "%{public}s no pending package for later, current=%{public}@", (uint8_t *)&v31, 0x16u);
        }

        v15 = *(void **)(a1 + 32);
        v16 = 0;
LABEL_14:
        objc_msgSend(v15, "setPendingPackageVersion:", v16);
        v19 = objc_retainBlock(*(id *)(a1 + 40));
        v20 = v19;
        if (v19)
          (*((void (**)(id, id))v19 + 2))(v19, v3);

        goto LABEL_21;
      }
    }
    v17 = JSALog();
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v31 = 136446722;
      v32 = "-[JSABridge checkForUpgradeWithCompletion:]_block_invoke";
      v33 = 2114;
      v34 = v8;
      v35 = 2114;
      v36 = v10;
      _os_log_impl(&dword_0, v18, OS_LOG_TYPE_DEFAULT, "%{public}s pending package with version=%{public}@ for later, current=%{public}@", (uint8_t *)&v31, 0x20u);
    }

    v15 = *(void **)(a1 + 32);
    v16 = v8;
    goto LABEL_14;
  }
  v21 = JSALog();
  v22 = objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    sub_728E4(v22, v23, v24, v25, v26, v27, v28, v29);

  v30 = (__CFString *)objc_retainBlock(*(id *)(a1 + 40));
  v8 = v30;
  if (v30)
    ((void (*)(__CFString *, _QWORD))v30->data)(v30, 0);
LABEL_21:

}

void sub_217AC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  id v5;
  void *v6;
  int v7;
  const char *v8;
  __int16 v9;
  void *v10;

  v2 = JSALog();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "version"));
    v7 = 136446466;
    v8 = "-[JSABridge upgradePackage:completion:]_block_invoke";
    v9 = 2114;
    v10 = v4;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "%{public}s successfully upgraded to %{public}@", (uint8_t *)&v7, 0x16u);

  }
  v5 = objc_retainBlock(*(id *)(a1 + 40));
  v6 = v5;
  if (v5)
    (*((void (**)(id, _QWORD))v5 + 2))(v5, *(_QWORD *)(a1 + 32));

}

void sub_218A0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  _QWORD v18[4];
  id v19;
  id v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  void *v24;

  v3 = a2;
  v4 = JSALog();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "version"));
      *(_DWORD *)buf = 136446466;
      v22 = "-[JSABridge upgradePackage:completion:]_block_invoke";
      v23 = 2114;
      v24 = v7;
      _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEFAULT, "%{public}s successfully obtained pending package version %{public}@ for upgrade", buf, 0x16u);

    }
    v8 = *(void **)(a1 + 32);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_21A28;
    v18[3] = &unk_9E2F8;
    v19 = v3;
    v20 = *(id *)(a1 + 40);
    objc_msgSend(v8, "setupWithPackage:completion:", v19, v18);

    v9 = v19;
  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_72954(v6, v10, v11, v12, v13, v14, v15, v16);

    v17 = objc_retainBlock(*(id *)(a1 + 40));
    v9 = v17;
    if (v17)
      (*((void (**)(id, _QWORD))v17 + 2))(v17, 0);
  }

}

void sub_21A28(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  id v5;
  void *v6;
  int v7;
  const char *v8;
  __int16 v9;
  void *v10;

  v2 = JSALog();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "version"));
    v7 = 136446466;
    v8 = "-[JSABridge upgradePackage:completion:]_block_invoke";
    v9 = 2114;
    v10 = v4;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "%{public}s successfully upgraded to %{public}@", (uint8_t *)&v7, 0x16u);

  }
  v5 = objc_retainBlock(*(id *)(a1 + 40));
  v6 = v5;
  if (v5)
    (*((void (**)(id, _QWORD))v5 + 2))(v5, *(_QWORD *)(a1 + 32));

}

void sub_21DF8(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v1, "postNotificationName:object:", CFSTR("JSABridgeWillReloadNotification"), 0);

}

void sub_21E38(uint64_t a1)
{
  void *v2;
  void (**v3)(id, _QWORD);

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "templateBundleRegistrar"));
  objc_msgSend(v2, "registerTemplateBundlesFromPackage:", *(_QWORD *)(a1 + 40));

  v3 = (void (**)(id, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "errorOnlyCompletionHandlerAdapter"));
  v3[2](v3, 0);

}

void sub_21E98(id *a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  NSObject *v5;
  id v6;
  void *v7;
  uint8_t v8[8];
  _QWORD block[4];
  id v10;

  if ((objc_msgSend(a1[4], "isScriptLoaded") & 1) != 0)
  {
    +[JSAApplication didFinishLaunchingWithMetrics:](JSAApplication, "didFinishLaunchingWithMetrics:", 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_223FC;
    block[3] = &unk_9DCA8;
    v10 = a1[5];
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
  else
  {
    if (BUIsRunningTests(+[JSAMetricsAppLaunchEvent markJSBootstrapEndTime](JSAMetricsAppLaunchEvent, "markJSBootstrapEndTime")))
    {
      v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "_beforeJSAppLaunchBlock"));
      v3 = (void *)v2;
      if (v2)
        (*(void (**)(uint64_t))(v2 + 16))(v2);

    }
    objc_msgSend(a1[4], "setIsScriptLoaded:", 1);
    sub_21FFC(a1[4], 0);
    +[JSAApplication didFinishLaunchingWithMetrics:](JSAApplication, "didFinishLaunchingWithMetrics:", 1);
  }
  objc_msgSend(a1[4], "setIsLoadingScript:", 0);
  v4 = JSALog();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "JSABridge loadScriptFromPackage: done", v8, 2u);
  }

  v6 = objc_retainBlock(a1[6]);
  v7 = v6;
  if (v6)
    (*((void (**)(id))v6 + 2))(v6);

}

void sub_21FFC(void *a1, int a2)
{
  void *v4;
  dispatch_semaphore_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  dispatch_time_t v11;
  id v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  unsigned int v23;
  id v24;
  NSObject *v25;
  os_signpost_id_t v26;
  id v27;
  NSObject *v28;
  NSObject *v29;
  const __CFString *v30;
  void *v31;
  id v32;
  NSObject *v33;
  NSObject *v34;
  void *v35;
  void *v36;
  _QWORD v37[5];
  char v38;
  _QWORD v39[5];
  char v40;
  _QWORD v41[5];
  NSObject *v42;
  id v43;
  char v44;
  id location;
  uint8_t buf[4];
  const __CFString *v47;

  if (a1 && objc_msgSend(a1, "isScriptLoaded"))
  {
    objc_initWeak(&location, a1);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "launchExecutionRecordQueue"));

    if (v4)
    {
      if (a2)
        v5 = dispatch_semaphore_create(0);
      else
        v5 = 0;
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "environment"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "thread"));
      v41[0] = _NSConcreteStackBlock;
      v41[1] = 3221225472;
      v41[2] = sub_22EBC;
      v41[3] = &unk_9EFD0;
      v44 = a2;
      objc_copyWeak(&v43, &location);
      v41[4] = a1;
      v10 = v5;
      v42 = v10;
      objc_msgSend(v9, "enqueueBlock:", v41);

      if (v10)
      {
        v11 = dispatch_time(0, 10000000000);
        if (dispatch_semaphore_wait(v10, v11))
        {
          v12 = JSALog();
          v13 = objc_claimAutoreleasedReturnValue(v12);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
            sub_729F0(v13, v14, v15, v16, v17, v18, v19, v20);

        }
      }

      objc_destroyWeak(&v43);
    }
    else if (+[NSThread isMainThread](NSThread, "isMainThread"))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "environment"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "thread"));
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472;
      v39[2] = sub_23340;
      v39[3] = &unk_9EFF8;
      v40 = a2;
      v39[4] = a1;
      objc_msgSend(v7, "enqueueBlock:", v39);

    }
    else
    {
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "environment"));
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "thread"));
      v23 = objc_msgSend(v22, "isRunningOnThread");

      if (v23)
      {
        v24 = JSASignpostExecution();
        v25 = objc_claimAutoreleasedReturnValue(v24);
        v26 = os_signpost_id_generate(v25);

        v27 = JSASignpostExecution();
        v28 = objc_claimAutoreleasedReturnValue(v27);
        v29 = v28;
        if (v26 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v28))
        {
          v30 = CFSTR("NO");
          if (a2)
            v30 = CFSTR("YES");
          *(_DWORD *)buf = 138412290;
          v47 = v30;
          _os_signpost_emit_with_name_impl(&dword_0, v29, OS_SIGNPOST_INTERVAL_BEGIN, v26, "JSAThread Block", "sync: %@", buf, 0xCu);
        }

        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "generalExecutionRecordQueue"));
        sub_23098(a1, v31);

        v32 = JSASignpostExecution();
        v33 = objc_claimAutoreleasedReturnValue(v32);
        v34 = v33;
        if (v26 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v33))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_0, v34, OS_SIGNPOST_INTERVAL_END, v26, "JSAThread Block", "", buf, 2u);
        }

      }
      else
      {
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "environment"));
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "thread"));
        v37[0] = _NSConcreteStackBlock;
        v37[1] = 3221225472;
        v37[2] = sub_234B0;
        v37[3] = &unk_9EFF8;
        v38 = a2;
        v37[4] = a1;
        objc_msgSend(v36, "enqueueBlockSync:", v37);

      }
    }
    objc_destroyWeak(&location);
  }
}

void sub_223B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_223FC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  const __CFString *v5;
  uint64_t v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  v3 = *(_QWORD *)(a1 + 32);
  v5 = CFSTR("package");
  v6 = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v6, &v5, 1));
  objc_msgSend(v2, "postNotificationName:object:userInfo:", CFSTR("JSABridgeDidReloadNotification"), 0, v4);

}

void sub_22E94(id a1)
{
  JSAEnvironment *v1;
  void *v2;

  v1 = objc_alloc_init(JSAEnvironment);
  v2 = (void *)qword_BA048;
  qword_BA048 = (uint64_t)v1;

}

void sub_22EBC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  os_signpost_id_t v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  const __CFString *v8;
  id WeakRetained;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  id v14;
  NSObject *v15;
  NSObject *v16;
  int v17;
  const __CFString *v18;

  v2 = JSASignpostExecution();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = os_signpost_id_generate(v3);

  v5 = JSASignpostExecution();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = v6;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    if (*(_BYTE *)(a1 + 56))
      v8 = CFSTR("YES");
    else
      v8 = CFSTR("NO");
    v17 = 138412290;
    v18 = v8;
    _os_signpost_emit_with_name_impl(&dword_0, v7, OS_SIGNPOST_INTERVAL_BEGIN, v4, "Launch Block", "sync: %@", (uint8_t *)&v17, 0xCu);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 32), "debugAssertRunningOnJSAThread");
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "launchExecutionRecordQueue"));

  if (v10)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "launchExecutionRecordQueue"));
    sub_23098(WeakRetained, v11);

    objc_msgSend(WeakRetained, "setLaunchExecutionRecordQueue:", 0);
  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "generalExecutionRecordQueue"));
  sub_23098(WeakRetained, v12);

  v13 = *(NSObject **)(a1 + 40);
  if (v13)
    dispatch_semaphore_signal(v13);
  v14 = JSASignpostExecution();
  v15 = objc_claimAutoreleasedReturnValue(v14);
  v16 = v15;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v15))
  {
    LOWORD(v17) = 0;
    _os_signpost_emit_with_name_impl(&dword_0, v16, OS_SIGNPOST_INTERVAL_END, v4, "Launch Block", "", (uint8_t *)&v17, 2u);
  }

}

void sub_23098(void *a1, void *a2)
{
  void *v3;
  id v4;
  __int128 v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void (**v10)(_QWORD, _QWORD);
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  NSObject *v16;
  id v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  void (**v28)(_QWORD, _QWORD);
  _BYTE v29[128];

  if (a1)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "dequeueAllRecords"));
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v19, v29, 16);
    if (!v4)
      goto LABEL_26;
    v6 = v4;
    v7 = *(_QWORD *)v20;
    *(_QWORD *)&v5 = 136446722;
    v18 = v5;
    while (1)
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v20 != v7)
          objc_enumerationMutation(v3);
        v9 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)v8);
        if (objc_msgSend(v9, "type", v18) == (char *)&dword_0 + 1)
        {
          v10 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "block"));
          if (v10)
          {
            v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "environment"));
            v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "context"));
            ((void (**)(_QWORD, void *))v10)[2](v10, v12);
            goto LABEL_10;
          }
          goto LABEL_15;
        }
        if (objc_msgSend(v9, "type") == (char *)&dword_0 + 2)
        {
          v10 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "recordValue"));
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "arguments"));
          if (objc_msgSend(v10, "isObject"))
            v13 = objc_msgSend(v10, "callWithArguments:", v11);
          goto LABEL_14;
        }
        if (objc_msgSend(v9, "type") == (char *)&dword_0 + 3)
        {
          v10 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "recordValue"));
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "method"));
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "arguments"));
          if (objc_msgSend(v10, "isObject"))
          {
            if (objc_msgSend(v10, "hasProperty:", v11))
            {
              v14 = objc_msgSend(v10, "invokeMethod:withArguments:", v11, v12);
            }
            else
            {
              v15 = JSALog();
              v16 = objc_claimAutoreleasedReturnValue(v15);
              if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = v18;
                v24 = "-[JSABridge _processPendingExecutionRecordsForQueue:]";
                v25 = 2114;
                v26 = v11;
                v27 = 2114;
                v28 = v10;
                _os_log_error_impl(&dword_0, v16, OS_LOG_TYPE_ERROR, "%{public}s attempting to invoke method %{public}@ on %{public}@ that is unavailable", buf, 0x20u);
              }

            }
          }
LABEL_10:

LABEL_14:
LABEL_15:

        }
        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v17 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v19, v29, 16);
      v6 = v17;
      if (!v17)
      {
LABEL_26:

        return;
      }
    }
  }
}

void sub_23340(uint64_t a1)
{
  id v2;
  NSObject *v3;
  os_signpost_id_t v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  const __CFString *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  int v14;
  const __CFString *v15;

  v2 = JSASignpostExecution();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = os_signpost_id_generate(v3);

  v5 = JSASignpostExecution();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = v6;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    if (*(_BYTE *)(a1 + 40))
      v8 = CFSTR("YES");
    else
      v8 = CFSTR("NO");
    v14 = 138412290;
    v15 = v8;
    _os_signpost_emit_with_name_impl(&dword_0, v7, OS_SIGNPOST_INTERVAL_BEGIN, v4, "Main Block", "sync: %@", (uint8_t *)&v14, 0xCu);
  }

  v9 = *(void **)(a1 + 32);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "generalExecutionRecordQueue"));
  sub_23098(v9, v10);

  v11 = JSASignpostExecution();
  v12 = objc_claimAutoreleasedReturnValue(v11);
  v13 = v12;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
  {
    LOWORD(v14) = 0;
    _os_signpost_emit_with_name_impl(&dword_0, v13, OS_SIGNPOST_INTERVAL_END, v4, "Main Block", "", (uint8_t *)&v14, 2u);
  }

}

void sub_234B0(uint64_t a1)
{
  id v2;
  NSObject *v3;
  os_signpost_id_t v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  const __CFString *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  int v14;
  const __CFString *v15;

  v2 = JSASignpostExecution();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = os_signpost_id_generate(v3);

  v5 = JSASignpostExecution();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = v6;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    if (*(_BYTE *)(a1 + 40))
      v8 = CFSTR("YES");
    else
      v8 = CFSTR("NO");
    v14 = 138412290;
    v15 = v8;
    _os_signpost_emit_with_name_impl(&dword_0, v7, OS_SIGNPOST_INTERVAL_BEGIN, v4, "Non-main Block", "sync: %@", (uint8_t *)&v14, 0xCu);
  }

  v9 = *(void **)(a1 + 32);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "generalExecutionRecordQueue"));
  sub_23098(v9, v10);

  v11 = JSASignpostExecution();
  v12 = objc_claimAutoreleasedReturnValue(v11);
  v13 = v12;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
  {
    LOWORD(v14) = 0;
    _os_signpost_emit_with_name_impl(&dword_0, v13, OS_SIGNPOST_INTERVAL_END, v4, "Non-main Block", "", (uint8_t *)&v14, 2u);
  }

}

void sub_23840(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void sub_24620(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  void *v16;

  v3 = a2;
  v4 = JSALog();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "version"));
    *(_DWORD *)buf = 136446466;
    v14 = "-[JSAApplication downloadAndCacheScript:]_block_invoke";
    v15 = 2112;
    v16 = v6;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "%{public}s done, version=%@", buf, 0x16u);

  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
  v8 = *(_QWORD *)(a1 + 32);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "version"));
  v10 = v9;
  if (!v9)
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v12 = v10;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v12, 1));
  objc_msgSend(v7, "enqueueValueCall:arguments:file:line:", v8, v11, CFSTR("JSAApplication.m"), 122);

  if (!v9)
}

void sub_24898(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  uint8_t buf[4];
  const char *v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "pendingPackageVersion"));

  if (v3)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_249F4;
    v7[3] = &unk_9F048;
    v8 = *(id *)(a1 + 32);
    objc_msgSend(v2, "upgradePackage:completion:", 0, v7);
    v4 = v8;
  }
  else
  {
    v5 = JSALog();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v10 = "-[JSAApplication reloadWithNewCacheIfAvailable:]_block_invoke";
      _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEFAULT, "%{public}s nothing to upgrade", buf, 0xCu);
    }

    v4 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
    objc_msgSend(v4, "enqueueValueCall:arguments:file:line:", *(_QWORD *)(a1 + 32), &off_A5CC8, CFSTR("JSAApplication.m"), 138);
  }

}

void sub_249F4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  void *v16;

  v3 = a2;
  v4 = JSALog();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "version"));
    *(_DWORD *)buf = 136446466;
    v14 = "-[JSAApplication reloadWithNewCacheIfAvailable:]_block_invoke_2";
    v15 = 2112;
    v16 = v6;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "%{public}s done, version=%@", buf, 0x16u);

  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
  v8 = *(_QWORD *)(a1 + 32);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "version"));
  v10 = v9;
  if (!v9)
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v12 = v10;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v12, 1));
  objc_msgSend(v7, "enqueueValueCall:arguments:file:line:", v8, v11, CFSTR("JSAApplication.m"), 134);

  if (!v9)
}

void sub_24C6C(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_24CF8;
  v3[3] = &unk_9F048;
  v4 = *(id *)(a1 + 32);
  objc_msgSend(v2, "upgradePackage:completion:", 0, v3);

}

void sub_24CF8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  void *v16;

  v3 = a2;
  v4 = JSALog();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "version"));
    *(_DWORD *)buf = 136446466;
    v14 = "-[JSAApplication reloadWithNewCache:]_block_invoke_2";
    v15 = 2112;
    v16 = v6;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "%{public}s done, version=%@", buf, 0x16u);

  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
  v8 = *(_QWORD *)(a1 + 32);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "version"));
  v10 = v9;
  if (!v9)
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v12 = v10;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v12, 1));
  objc_msgSend(v7, "enqueueValueCall:arguments:file:line:", v8, v11, CFSTR("JSAApplication.m"), 150);

  if (!v9)
}

void sub_24FD8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  uint8_t v14[16];
  uint64_t v15;
  const __CFString *v16;
  uint64_t v17;

  v3 = a2;
  v4 = JSALog();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "JSAApplication invoking launch block", v14, 2u);
  }

  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
  {
    v16 = CFSTR("metrics");
    v17 = v6;
    v7 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1));
    v8 = (void *)v7;
    if (v7)
    {
      v15 = v7;
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v15, 1));
    }
    else
    {
      v9 = 0;
    }
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v10 = sub_25174((uint64_t)JSAApplication, CFSTR("onLaunch"), v9, v3);
  v11 = sub_25174((uint64_t)JSAApplication, CFSTR("$bootstrap"), &__NSArray0__struct, v3);
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  if ((BUIsRunningTests(v12) & 1) == 0)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "globalObject"));
    objc_msgSend(v13, "setObject:forKeyedSubscript:", v12, CFSTR("$runtime"));

  }
}

id sub_25174(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = objc_opt_self(a1);
  if ((BUIsRunningTests(v10) & 1) != 0)
  {
    v11 = 0;
  }
  else
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("App")));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "invokeMethod:withArguments:", v7, v8));

  }
  return v11;
}

void sub_25230(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  void ***v18;
  void *v19;
  void **v20;
  uint64_t v21;
  void (*v22)(uint64_t, void *);
  void *v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint8_t buf[4];
  id v29;
  __int16 v30;
  id v31;
  __int16 v32;
  id v33;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = objc_opt_self(a1);
  v11 = JSALog();
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = objc_msgSend(v8, "count");
    v14 = objc_retainBlock(v9);
    *(_DWORD *)buf = 138543874;
    v29 = v7;
    v30 = 2048;
    v31 = v13;
    v32 = 2112;
    v33 = v14;
    _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEFAULT, "JSAApplication invoke '%{public}@' with %lu args, completion: %@", buf, 0x20u);

  }
  v20 = _NSConcreteStackBlock;
  v21 = 3221225472;
  v22 = sub_268B4;
  v23 = &unk_9F128;
  v24 = v7;
  v25 = v8;
  v26 = v9;
  v27 = v10;
  v15 = v9;
  v16 = v8;
  v17 = v7;
  v18 = objc_retainBlock(&v20);
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance", v20, v21, v22, v23));
  objc_msgSend(v19, "enqueueBlock:file:line:", v18, CFSTR("JSAApplication.m"), 378);

}

void sub_25728(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  _QWORD v9[2];
  _QWORD v10[2];

  v9[0] = CFSTR("storeId");
  v9[1] = CFSTR("type");
  v10[0] = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  v6 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndexedSubscript:", a3));
  v10[1] = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v10, v9, 2));
  objc_msgSend(v4, "addObject:", v8);

}

id sub_257F4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;

  v5 = a3;
  v6 = a2;
  objc_opt_self(a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](NSMutableArray, "arrayWithArray:", v6));

  if (v5)
    objc_msgSend(v7, "addObject:", v5);

  return v7;
}

void sub_26414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_2642C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_2643C(uint64_t a1)
{

}

void sub_26444(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  unsigned int v15;
  void *v16;
  void *v17;
  id v18;
  _QWORD v19[4];

  v18 = a2;
  v3 = a1[9];
  v4 = a1[4];
  v5 = v4;
  if (!v4)
    v5 = objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v17 = (void *)v5;
  v19[0] = v5;
  v6 = (void *)a1[5];
  v7 = v6;
  if (!v6)
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v19[1] = v7;
  v8 = (void *)a1[6];
  v9 = v8;
  if (!v8)
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v19[2] = v9;
  v10 = (void *)a1[7];
  v11 = v10;
  if (!v10)
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v19[3] = v11;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v19, 4));
  v13 = sub_25174(v3, CFSTR("purchaseEventFields"), v12, v18);
  v14 = (void *)objc_claimAutoreleasedReturnValue(v13);

  if (v10)
  {
    if (v8)
      goto LABEL_11;
  }
  else
  {

    if (v8)
    {
LABEL_11:
      if (v6)
        goto LABEL_12;
LABEL_21:

      if (v4)
        goto LABEL_13;
      goto LABEL_22;
    }
  }

  if (!v6)
    goto LABEL_21;
LABEL_12:
  if (v4)
    goto LABEL_13;
LABEL_22:

LABEL_13:
  v15 = objc_msgSend(v14, "isString");
  if (v15)
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "toString"));
  else
    v16 = 0;
  objc_storeStrong((id *)(*(_QWORD *)(a1[8] + 8) + 40), v16);
  if (v15)

}

void sub_2669C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  v3 = a2;
  v7 = v3;
  if (v3 && (objc_msgSend(v3, "isNull") & 1) == 0)
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "toNumber"));
  else
    v4 = 0;
  v5 = objc_retainBlock(*(id *)(a1 + 32));
  v6 = v5;
  if (v5)
    (*((void (**)(id, void *))v5 + 2))(v5, v4);

}

void sub_2680C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  v7 = a2;
  if (objc_msgSend(v7, "isArray"))
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "toArray"));
  else
    v3 = &__NSArray0__struct;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bu_objectsMatching:", &stru_9F100));

  v5 = objc_retainBlock(*(id *)(a1 + 32));
  v6 = v5;
  if (v5)
    (*((void (**)(id, void *))v5 + 2))(v5, v4);

}

BOOL sub_268AC(id a1, NSObject *a2, BOOL *a3)
{
  return _NSIsNSString(a2);
}

void sub_268B4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;

  v3 = sub_25174(*(_QWORD *)(a1 + 56), *(void **)(a1 + 32), *(void **)(a1 + 40), a2);
  v6 = (id)objc_claimAutoreleasedReturnValue(v3);
  v4 = objc_retainBlock(*(id *)(a1 + 48));
  v5 = v4;
  if (v4)
    (*((void (**)(id, id))v4 + 2))(v4, v6);

}

void sub_26CE8(id a1)
{
  JSAStore *v1;
  void *v2;

  v1 = objc_alloc_init(JSAStore);
  v2 = (void *)qword_BA058;
  qword_BA058 = (uint64_t)v1;

}

uint64_t sub_26E5C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_26E6C(uint64_t a1)
{

}

void sub_26E74(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "copy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_27034(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 16));
}

void sub_2749C(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accountHandlers"));
  v3 = objc_msgSend(v2, "mutableCopy");

  if (*(_QWORD *)(a1 + 40))
    objc_msgSend(v3, "addObject:");
  objc_msgSend(*(id *)(a1 + 32), "setAccountHandlers:", v3);

}

void sub_27594(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accountHandlers"));
  v3 = objc_msgSend(v2, "mutableCopy");

  if (*(_QWORD *)(a1 + 40))
    objc_msgSend(v3, "removeObject:");
  objc_msgSend(*(id *)(a1 + 32), "setAccountHandlers:", v3);

}

void sub_277F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_27808(uint64_t a1)
{
  unsigned __int8 *WeakRetained;
  void *v2;
  unsigned int v3;
  int v4;
  _BOOL4 v5;
  void *v6;
  unsigned int v7;
  void *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  _DWORD v16[2];
  __int16 v17;
  unsigned int v18;
  __int16 v19;
  unsigned int v20;
  __int16 v21;
  unsigned int v22;
  __int16 v23;
  unsigned int v24;

  WeakRetained = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[BURestrictionsProvider sharedInstance](BURestrictionsProvider, "sharedInstance"));
    v3 = objc_msgSend(v2, "isAccountModificationAllowed");

    v4 = WeakRetained[40];
    v5 = v4 != v3;
    if (v4 != v3)
      WeakRetained[40] = v3;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[BURestrictionsProvider sharedInstance](BURestrictionsProvider, "sharedInstance"));
    v7 = objc_msgSend(v6, "isExplicitContentAllowed");

    if (WeakRetained[41] != v7)
    {
      WeakRetained[41] = v7;
      v5 = 1;
    }
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[BURestrictionsProvider sharedInstance](BURestrictionsProvider, "sharedInstance"));
    v9 = objc_msgSend(v8, "isBookStoreAllowed");

    if (WeakRetained[42] != v9)
    {
      WeakRetained[42] = v9;
      v5 = 1;
    }
    v10 = +[UIApplication isRunningInStoreDemoMode](UIApplication, "isRunningInStoreDemoMode");
    v11 = v10;
    if (WeakRetained[43] != v10)
    {
      WeakRetained[43] = v10;
      v5 = 1;
    }
    v12 = JSALog();
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v16[0] = 67110144;
      v16[1] = v5;
      v17 = 1024;
      v18 = v3;
      v19 = 1024;
      v20 = v7;
      v21 = 1024;
      v22 = v9;
      v23 = 1024;
      v24 = v11;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_DEFAULT, "[Store] changed: %i, allowsAccountModification: %i, allowsErotica: %i, allowsStore: %i, isRunningInStoreDemoMode: %i", (uint8_t *)v16, 0x20u);
    }

    if (v5)
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "restrictionHandler"));
      objc_msgSend(v14, "enqueueManagedValueCall:arguments:file:line:", v15, 0, CFSTR("JSAStore.m"), 275);

    }
  }

}

void sub_279F8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  NSObject *v5;
  id v6;
  _QWORD block[4];
  id v8;
  id v9;
  id location;
  void *v11;

  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 48));
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 16), "uniqueIdentifier"));
    if (v2)
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 16), "uniqueIdentifier"));
      v11 = v3;
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v11, 1));

    }
    else
    {
      v4 = &__NSArray0__struct;
    }

    objc_initWeak(&location, (id)a1);
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "callbackQueue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_27B68;
    block[3] = &unk_9E888;
    objc_copyWeak(&v9, &location);
    v8 = v4;
    v6 = v4;
    dispatch_async(v5, block);

    objc_destroyWeak(&v9);
    objc_destroyWeak(&location);
  }
}

void sub_27B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_27B68(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _BYTE v18[128];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v12 = WeakRetained;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "accountHandlers"));
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v18, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v14;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v14 != v6)
            objc_enumerationMutation(v3);
          v8 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)v7);
          v9 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
          v10 = v9;
          if (*(_QWORD *)(a1 + 32))
          {
            v17 = *(_QWORD *)(a1 + 32);
            v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v17, 1));
            objc_msgSend(v10, "enqueueValueCall:arguments:file:line:", v8, v11, CFSTR("JSAStore.m"), 301);

          }
          else
          {
            objc_msgSend(v9, "enqueueValueCall:arguments:file:line:", v8, 0, CFSTR("JSAStore.m"), 301);
          }

          v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v18, 16);
      }
      while (v5);
    }

    WeakRetained = v12;
  }

}

void sub_27CF8(dispatch_queue_t *a1)
{
  NSObject *v2;
  _QWORD v3[4];
  id v4;
  id location;

  if (a1)
  {
    dispatch_assert_queue_V2(a1[6]);
    objc_initWeak(&location, a1);
    v2 = objc_claimAutoreleasedReturnValue(-[dispatch_queue_t callbackQueue](a1, "callbackQueue"));
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_27DB8;
    v3[3] = &unk_9DF80;
    objc_copyWeak(&v4, &location);
    dispatch_async(v2, v3);

    objc_destroyWeak(&v4);
    objc_destroyWeak(&location);
  }
}

void sub_27DA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_27DB8(uint64_t a1)
{
  _QWORD *WeakRetained;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
    v3 = v2;
    v4 = WeakRetained[11];
    if (WeakRetained[1])
    {
      v6 = WeakRetained[1];
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v6, 1));
      objc_msgSend(v3, "enqueueManagedValueCall:arguments:file:line:", v4, v5, CFSTR("JSAStore.m"), 321);

    }
    else
    {
      objc_msgSend(v2, "enqueueManagedValueCall:arguments:file:line:", WeakRetained[11], 0, CFSTR("JSAStore.m"), 321);
    }

  }
}

void sub_27F84(uint64_t a1)
{
  id *WeakRetained;
  uint64_t v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  void *v8;
  JSAAccount *v9;
  void *v10;
  int v11;
  unint64_t v12;
  __int16 v13;
  uint64_t v14;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (uint64_t)WeakRetained;
  if (WeakRetained)
  {
    v3 = (unint64_t)WeakRetained[1];
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[BUAccountsProvider sharedProvider](BUAccountsProvider, "sharedProvider"));
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "currentStorefront"));

    if (v3 | v5 && (objc_msgSend((id)v3, "isEqualToString:", v5) & 1) == 0)
    {
      v6 = JSALog();
      v7 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v11 = 138412546;
        v12 = v3;
        v13 = 2112;
        v14 = v5;
        _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEFAULT, "[Store] New account store front identifier from %@ to %@, notifying JS", (uint8_t *)&v11, 0x16u);
      }

      objc_storeStrong((id *)(v2 + 8), (id)v5);
      sub_27CF8((dispatch_queue_t *)v2);
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
      objc_msgSend(v8, "postNotificationName:object:", CFSTR("JSAStorefrontDidChangeNotification"), 0);

    }
    v9 = -[JSAAccount initWithDelegate:]([JSAAccount alloc], "initWithDelegate:", v2);
    v10 = *(void **)(v2 + 16);
    *(_QWORD *)(v2 + 16) = v9;

    sub_279F8(v2);
  }

}

void sub_28198(uint64_t a1)
{
  JSAAccount *v1;
  void *v2;
  _QWORD *WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v1 = -[JSAAccount initWithDelegate:]([JSAAccount alloc], "initWithDelegate:", WeakRetained);
    v2 = (void *)WeakRetained[2];
    WeakRetained[2] = v1;

    sub_279F8((uint64_t)WeakRetained);
  }

}

void sub_28384(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_BA068;
  qword_BA068 = (uint64_t)v1;

}

void sub_285B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_285D8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  id WeakRetained;
  id v7;
  _QWORD v8[4];
  id v9;
  uint8_t buf[16];

  v3 = a2;
  v4 = JSALog();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "[JSACookieStorage] Updating cookies now after coalescing delay", buf, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_286B0;
  v8[3] = &unk_9DCD0;
  v9 = v3;
  v7 = v3;
  sub_286BC((uint64_t)WeakRetained, v8);

}

uint64_t sub_286B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_286BC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  _QWORD v6[5];
  id v7;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = *(NSObject **)(a1 + 40);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_28FEC;
    v6[3] = &unk_9E2F8;
    v6[4] = a1;
    v7 = v3;
    dispatch_async(v5, v6);

  }
}

void sub_28748(uint64_t a1, uint64_t a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint8_t v10[16];

  v3 = JSALog();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "[JSACookieStorage] Received account cookies changed notification", v10, 2u);
  }

  v6 = objc_opt_class(JSACookieStorage, v5);
  v7 = BUDynamicCast(v6, a2);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = (void *)v8;
  if (v8)
    objc_msgSend(*(id *)(v8 + 56), "signalWithCompletion:", 0);

}

void sub_28BCC(uint64_t a1)
{
  uint64_t v1;
  _QWORD v2[4];
  id v3;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_28C38;
  v2[3] = &unk_9DCA8;
  v1 = *(_QWORD *)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  sub_286BC(v1, v2);

}

void sub_28C38(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
  objc_msgSend(v2, "enqueueValueCall:arguments:file:line:", *(_QWORD *)(a1 + 32), 0, CFSTR("JSACookieStorage.m"), 122);

}

void sub_28C8C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
  objc_msgSend(v2, "enqueueValueCall:arguments:file:line:", *(_QWORD *)(a1 + 32), 0, CFSTR("JSACookieStorage.m"), 127);

}

void sub_28EEC(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
  objc_msgSend(v2, "enqueueValueCall:arguments:file:line:", *(_QWORD *)(a1 + 32), 0, CFSTR("JSACookieStorage.m"), 143);

}

void sub_28FEC(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  void *v15;
  void *v16;
  void *v17;
  _BOOL4 v18;
  JSACookie *v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  void *j;
  NSMutableArray *v28;
  NSMutableArray *v29;
  uint64_t v30;
  id v31;
  void *v32;
  id v33;
  NSObject *v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  uint8_t buf[16];
  _QWORD v42[5];
  NSMutableArray *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _QWORD v48[4];
  id v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  char v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[128];
  _BYTE v60[128];

  v2 = objc_alloc_init((Class)NSMutableDictionary);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[BUAccountsProvider sharedProvider](BUAccountsProvider, "sharedProvider"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localStoreAccount"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ams_cookies"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "defaultURL"));
  v8 = sub_294E8(v3, v6, v7);
  v40 = (void *)objc_claimAutoreleasedReturnValue(v8);

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSHTTPCookieStorage sharedHTTPCookieStorage](NSHTTPCookieStorage, "sharedHTTPCookieStorage"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "defaultURL"));
  v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "cookiesForURL:", v10));

  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "arrayByAddingObjectsFromArray:", v39));
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v55, v60, 16);
  if (v12)
  {
    v13 = *(_QWORD *)v56;
    do
    {
      for (i = 0; i != v12; i = (char *)i + 1)
      {
        if (*(_QWORD *)v56 != v13)
          objc_enumerationMutation(v11);
        v15 = *(void **)(*((_QWORD *)&v55 + 1) + 8 * (_QWORD)i);
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "name", v39));
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", v16));
        v18 = v17 == 0;

        if (v18)
        {
          v19 = -[JSACookie initWithNativeCookie:]([JSACookie alloc], "initWithNativeCookie:", v15);
          objc_msgSend(v2, "setObject:forKeyedSubscript:", v19, v16);

        }
      }
      v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v55, v60, 16);
    }
    while (v12);
  }

  v51 = 0;
  v52 = &v51;
  v53 = 0x2020000000;
  v54 = 1;
  v20 = objc_msgSend(v2, "mutableCopy");
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "indexedCookies"));
  v48[0] = _NSConcreteStackBlock;
  v48[1] = 3221225472;
  v48[2] = sub_2964C;
  v48[3] = &unk_9F1C8;
  v22 = v20;
  v49 = v22;
  v50 = &v51;
  objc_msgSend(v21, "enumerateKeysAndObjectsUsingBlock:", v48);

  if (!*((_BYTE *)v52 + 24) || (v23 = objc_msgSend(v22, "count"), *((_BYTE *)v52 + 24) = v23 == 0, v23))
  {
    objc_msgSend(*(id *)(a1 + 32), "setIndexedCookies:", v2, v39);
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "invalidationTimers"));
    v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v44, v59, 16);
    if (v25)
    {
      v26 = *(_QWORD *)v45;
      do
      {
        for (j = 0; j != v25; j = (char *)j + 1)
        {
          if (*(_QWORD *)v45 != v26)
            objc_enumerationMutation(v24);
          objc_msgSend(*(id *)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)j), "invalidate");
        }
        v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v44, v59, 16);
      }
      while (v25);
    }

    v28 = objc_opt_new(NSMutableArray);
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472;
    v42[2] = sub_296EC;
    v42[3] = &unk_9E280;
    v42[4] = *(_QWORD *)(a1 + 32);
    v29 = v28;
    v43 = v29;
    objc_msgSend(v2, "enumerateKeysAndObjectsUsingBlock:", v42);
    objc_msgSend(*(id *)(a1 + 32), "setInvalidationTimers:", v29);
    v30 = *(_QWORD *)(a1 + 32);
    if (v30)
    {
      v31 = objc_msgSend(v2, "copy");
      v32 = *(void **)(v30 + 8);
      *(_QWORD *)(v30 + 8) = v31;

    }
  }
  v33 = JSALog();
  v34 = objc_claimAutoreleasedReturnValue(v33);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_0, v34, OS_LOG_TYPE_DEFAULT, "Notifying JS about cookie storage change", buf, 2u);
  }

  v35 = (void *)objc_claimAutoreleasedReturnValue(+[JSABridge sharedInstance](JSABridge, "sharedInstance"));
  v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cookieStorageChangeHandler"));
  objc_msgSend(v35, "enqueueManagedValueCall:arguments:file:line:", v36, 0, CFSTR("JSACookieStorage.m"), 230);

  v37 = objc_retainBlock(*(id *)(a1 + 40));
  v38 = v37;
  if (v37)
    (*((void (**)(id))v37 + 2))(v37);

  _Block_object_dispose(&v51, 8);
}

void sub_294B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

id sub_294E8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  unsigned __int8 v13;
  id v14;
  id v15;
  void *v16;
  _QWORD v18[4];
  id v19;
  id v20;
  unsigned __int8 v21;

  v5 = a2;
  v6 = a3;
  if (a1)
  {
    v7 = &__NSArray0__struct;
    if (v5)
      v7 = v5;
    v8 = v7;

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "host"));
    if ((objc_msgSend(v9, "hasPrefix:", CFSTR(".")) & 1) == 0)
    {
      v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("."), "stringByAppendingString:", v9));

      v9 = (void *)v10;
    }
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "path"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "scheme"));
    v13 = objc_msgSend(v12, "isEqualToString:", CFSTR("https"));

    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_29818;
    v18[3] = &unk_9F1F0;
    v21 = v13;
    v19 = v9;
    v20 = v11;
    v14 = v11;
    v15 = v9;
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ams_filterUsingTest:", v18));

  }
  else
  {
    v8 = v5;
    v16 = 0;
  }

  return v16;
}

void sub_2964C(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a2;
  v7 = a3;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v10));
  v9 = v8;
  if (v8 && objc_msgSend(v8, "isEqual:", v7))
  {
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", 0, v10);
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    *a4 = 1;
  }

}

void sub_296EC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "expirationDate"));
  if (v6)
  {
    v4 = objc_msgSend(objc_alloc((Class)NSTimer), "initWithFireDate:interval:target:selector:userInfo:repeats:", v6, *(_QWORD *)(a1 + 32), "_handleCookieDidExpire:", 0, 0, 1.79769313e308);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop currentRunLoop](NSRunLoop, "currentRunLoop"));
    objc_msgSend(v5, "addTimer:forMode:", v4, NSRunLoopCommonModes);

    objc_msgSend(*(id *)(a1 + 40), "addObject:", v4);
  }

}

uint64_t sub_29818(uint64_t a1, void *a2)
{
  id v3;
  _BOOL4 v4;
  void *v5;
  void *v6;
  CFAbsoluteTime v7;
  _BOOL4 v8;
  void *v9;
  void *v10;
  unsigned int v11;
  void *v12;
  void *v13;
  unsigned int v14;

  v3 = a2;
  if (objc_msgSend(v3, "isSecure"))
    v4 = *(unsigned __int8 *)(a1 + 48) == objc_msgSend(v3, "isSecure");
  else
    v4 = 1;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "expiresDate"));
  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "expiresDate"));
    objc_msgSend(v6, "timeIntervalSinceReferenceDate");
    v8 = v7 >= CFAbsoluteTimeGetCurrent();

  }
  else
  {
    v8 = 1;
  }

  v9 = *(void **)(a1 + 32);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "domain"));
  v11 = objc_msgSend(v9, "hasSuffix:", v10);

  v12 = *(void **)(a1 + 40);
  if (v12)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "path"));
    v14 = objc_msgSend(v12, "hasPrefix:", v13);

  }
  else
  {
    v14 = 1;
  }

  return (v4 && v8) & v14 & v11;
}

id sub_29A60()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for HotReloadController()), "init");
  qword_B8088 = (uint64_t)result;
  return result;
}

id URLParser.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

id static HotReloadController.shared.getter()
{
  if (qword_B8080 != -1)
    swift_once(&qword_B8080, sub_29A60);
  return (id)qword_B8088;
}

BOOL sub_29BA8()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  _BOOL8 v3;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___JSAHotReloadController_hotReloadCount);
  v2 = (os_unfair_lock_s *)(v1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  v3 = *(_QWORD *)(v1 + 16) > 0;
  os_unfair_lock_unlock(v2);
  return v3;
}

_QWORD *sub_29BF0@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result > 0;
  return result;
}

id HotReloadController.init()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  char *v18;
  uint64_t v19;
  char *v20;
  objc_class *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  objc_super v30;
  void *v31;

  v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v2 = *(_QWORD *)(v1 - 8);
  v24 = v1;
  __chkstk_darwin(v1);
  v29 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v0[OBJC_IVAR___JSAHotReloadController_notificationObserver] = 0;
  v10 = OBJC_IVAR___JSAHotReloadController_hotReloadCount;
  v11 = sub_29EF0(&qword_B81E0);
  v12 = swift_allocObject(v11, 28, 7);
  *(_DWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)&v0[v10] = v12;
  *(_QWORD *)&v0[OBJC_IVAR___JSAHotReloadController_subscribers] = &_swiftEmptyArrayStorage;
  v27 = sub_2E594(0, (unint64_t *)&qword_B8AE0, OS_dispatch_queue_ptr);
  v28 = v0;
  static DispatchQoS.utility.getter();
  v31 = &_swiftEmptyArrayStorage;
  v13 = sub_2A1FC(&qword_B81F0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v26 = v13;
  v14 = sub_29EF0((uint64_t *)&unk_B8AF0);
  v25 = v14;
  v15 = sub_2A23C(&qword_B81F8, (uint64_t *)&unk_B8AF0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v14, v15, v4, v13);
  v16 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 104);
  v18 = v29;
  v17(v29, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v1);
  v19 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001FLL, 0x8000000000088850, v9, v6, v18, 0);
  v20 = v28;
  *(_QWORD *)&v28[OBJC_IVAR___JSAHotReloadController_queue] = v19;
  static DispatchQoS.utility.getter();
  v31 = &_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v25, v15, v4, v26);
  v17(v18, v16, v24);
  *(_QWORD *)&v20[OBJC_IVAR___JSAHotReloadController_subscriberQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000029, 0x8000000000088870, v9, v6, v18, 0);

  v21 = (objc_class *)type metadata accessor for HotReloadController();
  v30.receiver = v20;
  v30.super_class = v21;
  return objc_msgSendSuper2(&v30, "init");
}

uint64_t sub_29EF0(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_29F30(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for HotReloadController()
{
  return objc_opt_self(JSAHotReloadController);
}

uint64_t sub_29FB4(uint64_t a1, uint64_t a2)
{
  return sub_2A330(a1, a2, (uint64_t)&unk_9F5F0, (uint64_t)sub_2A19C, (uint64_t)&unk_9F608);
}

uint64_t sub_29FD0()
{
  uint64_t v0;

  swift_unknownObjectUnownedDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_29FF4(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *Strong;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;

  v4 = a3 + 16;
  Strong = (char *)swift_unknownObjectUnownedLoadStrong(a3 + 16);
  v6 = *(_QWORD *)&Strong[OBJC_IVAR___JSAHotReloadController_notificationObserver];

  if (!v6)
  {
    if (qword_B8158 != -1)
      swift_once(&qword_B8158, sub_56D80);
    v7 = type metadata accessor for Logger(0);
    sub_2D6E0(v7, (uint64_t)qword_B9290);
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_0, v8, v9, "Starting hot reload mode", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    swift_unknownObjectUnownedLoadStrong(v4);
    v11 = type metadata accessor for HotReloadNotificationObserver();
    swift_allocObject(v11, 40, 7);
    sub_6166C();
  }
  if (a1)
    a1();
}

void sub_2A19C()
{
  uint64_t v0;

  sub_29FF4(*(void (**)(void))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_2A1A8(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_2A1D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_2A1E4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_2A1EC(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_2A1FC(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2A23C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_29F30(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2A314(uint64_t a1, uint64_t a2)
{
  return sub_2A330(a1, a2, (uint64_t)&unk_9F640, (uint64_t)sub_2A86C, (uint64_t)&unk_9F658);
}

uint64_t sub_2A330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  _QWORD aBlock[5];
  _QWORD *v34;

  v28 = a5;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v29 = *(_QWORD *)(v13 - 8);
  v30 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(void **)(v5 + OBJC_IVAR___JSAHotReloadController_queue);
  v17 = swift_allocObject(&unk_9F5C8, 24, 7);
  swift_unknownObjectUnownedInit(v17 + 16, v5);
  v18 = (_QWORD *)swift_allocObject(a3, 40, 7);
  v18[2] = a1;
  v18[3] = a2;
  v18[4] = v17;
  aBlock[4] = a4;
  v34 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2A1A8;
  aBlock[3] = v28;
  v19 = _Block_copy(aBlock);
  v20 = v16;
  sub_2A1EC(a1, a2);
  v21 = swift_retain(v17);
  static DispatchQoS.unspecified.getter(v21);
  v32 = &_swiftEmptyArrayStorage;
  v22 = sub_2A1FC((unint64_t *)&qword_B8210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = sub_29EF0((uint64_t *)&unk_B8C90);
  v24 = sub_2A23C((unint64_t *)&qword_B8218, (uint64_t *)&unk_B8C90);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v23, v24, v10, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v15, v30);
  v25 = v34;
  swift_release(v17);
  return swift_release(v25);
}

uint64_t sub_2A568(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  char *Strong;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  _QWORD aBlock[6];

  v24[1] = a2;
  v26 = a1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a3 + 16;
  if (qword_B8158 != -1)
    swift_once(&qword_B8158, sub_56D80);
  v12 = type metadata accessor for Logger(0);
  sub_2D6E0(v12, (uint64_t)qword_B9290);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_0, v13, v14, "Stopping hot reload mode", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  Strong = (char *)swift_unknownObjectUnownedLoadStrong(v11);
  v17 = *(_QWORD *)&Strong[OBJC_IVAR___JSAHotReloadController_notificationObserver];
  *(_QWORD *)&Strong[OBJC_IVAR___JSAHotReloadController_notificationObserver] = 0;

  swift_release(v17);
  sub_2E594(0, (unint64_t *)&qword_B8AE0, OS_dispatch_queue_ptr);
  v18 = (void *)static OS_dispatch_queue.main.getter();
  aBlock[4] = sub_2A878;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2A1A8;
  aBlock[3] = &unk_9F970;
  v19 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v19);
  aBlock[0] = &_swiftEmptyArrayStorage;
  v20 = sub_2A1FC((unint64_t *)&qword_B8210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_29EF0((uint64_t *)&unk_B8C90);
  v22 = sub_2A23C((unint64_t *)&qword_B8218, (uint64_t *)&unk_B8C90);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v21, v22, v4, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v6, v4);
  result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v26)
    return v26(result);
  return result;
}

uint64_t sub_2A838()
{
  _QWORD *v0;

  if (v0[2])
    swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_2A86C()
{
  uint64_t v0;

  return sub_2A568(*(uint64_t (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_2A914(uint64_t a1)
{
  char *v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  char *v9;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v12[5];
  uint64_t v13;

  v3 = *(void **)&v1[OBJC_IVAR___JSAHotReloadController_subscriberQueue];
  v4 = swift_allocObject(&unk_9F690, 32, 7);
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = a1;
  v5 = swift_allocObject(&unk_9F6B8, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_2ABDC;
  *(_QWORD *)(v5 + 24) = v4;
  v12[4] = sub_2AC14;
  v13 = v5;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_2AC34;
  v12[3] = &unk_9F6D0;
  v6 = _Block_copy(v12);
  v7 = v13;
  v8 = v3;
  v9 = v1;
  swift_unknownObjectRetain(a1);
  swift_retain(v5);
  swift_release(v7);
  dispatch_sync(v8, v6);

  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 103, 77, 30, 1);
  swift_release(v4);
  result = swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_2AA5C(uint64_t a1, uint64_t a2)
{
  char **v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t Strong;
  uint64_t v8;
  char *v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  _BYTE v14[24];
  char v15[8];
  char v16[24];

  v3 = (char **)(a1 + OBJC_IVAR___JSAHotReloadController_subscribers);
  swift_beginAccess(a1 + OBJC_IVAR___JSAHotReloadController_subscribers, v16, 0, 0);
  v4 = *v3;
  v5 = *((_QWORD *)*v3 + 2);
  if (v5)
  {
    v6 = v4 + 32;
    swift_bridgeObjectRetain(*v3);
    do
    {
      Strong = swift_unknownObjectWeakLoadStrong(v6);
      if (Strong)
      {
        v8 = Strong;
        swift_unknownObjectRelease(Strong);
        if (v8 == a2)
          return swift_bridgeObjectRelease(v4);
      }
      v6 += 8;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease(v4);
  }
  swift_unknownObjectWeakInit(v14, 0);
  swift_unknownObjectWeakAssign(v14, a2);
  sub_2E5D4((uint64_t)v14, (uint64_t)v15, &qword_B82B8);
  swift_beginAccess(v3, v14, 33, 0);
  v10 = *v3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  *v3 = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v10 = sub_577F0(0, *((_QWORD *)v10 + 2) + 1, 1, (unint64_t)v10);
    *v3 = v10;
  }
  v13 = *((_QWORD *)v10 + 2);
  v12 = *((_QWORD *)v10 + 3);
  if (v13 >= v12 >> 1)
  {
    v10 = sub_577F0((char *)(v12 > 1), v13 + 1, 1, (unint64_t)v10);
    *v3 = v10;
  }
  *((_QWORD *)v10 + 2) = v13 + 1;
  sub_2E5D4((uint64_t)v15, (uint64_t)&v10[8 * v13 + 32], &qword_B82B8);
  return swift_endAccess(v14);
}

uint64_t sub_2ABDC()
{
  uint64_t v0;

  return sub_2AA5C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_2ABE4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_2AC04()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_2AC14()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_2AC34(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_2AC60(uint64_t a1)
{
  char *v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  char *v9;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v12[5];
  uint64_t v13;

  v3 = *(void **)&v1[OBJC_IVAR___JSAHotReloadController_subscriberQueue];
  v4 = swift_allocObject(&unk_9F708, 32, 7);
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = a1;
  v5 = swift_allocObject(&unk_9F730, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_2AE64;
  *(_QWORD *)(v5 + 24) = v4;
  v12[4] = sub_2E8A4;
  v13 = v5;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_2AC34;
  v12[3] = &unk_9F748;
  v6 = _Block_copy(v12);
  v7 = v13;
  v8 = v3;
  v9 = v1;
  swift_unknownObjectRetain(a1);
  swift_retain(v5);
  swift_release(v7);
  dispatch_sync(v8, v6);

  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 103, 87, 30, 1);
  swift_release(v4);
  result = swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_2ADA8(uint64_t a1, uint64_t a2)
{
  unint64_t **v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  char v9[24];

  v3 = (unint64_t **)(a1 + OBJC_IVAR___JSAHotReloadController_subscribers);
  swift_beginAccess(a1 + OBJC_IVAR___JSAHotReloadController_subscribers, v9, 1, 0);
  v4 = *v3;
  swift_unknownObjectRetain(a2);
  v5 = swift_bridgeObjectRetain(v4);
  v6 = sub_2D518(v5, a2);
  swift_bridgeObjectRelease(v4);
  swift_unknownObjectRelease(a2);
  v7 = *v3;
  *v3 = v6;
  return swift_bridgeObjectRelease(v7);
}

uint64_t sub_2AE38()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_2AE64()
{
  uint64_t v0;

  return sub_2ADA8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_2AE6C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_2AE88(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  id v7;

  swift_unknownObjectRetain(a3);
  v7 = a1;
  a4(a3);
  swift_unknownObjectRelease(a3);

}

id HotReloadController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HotReloadController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t method lookup function for HotReloadController(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for HotReloadController);
}

uint64_t dispatch thunk of HotReloadController.isHotReloading.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_68.size + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of HotReloadController.start(completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_68.reserved2 + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of HotReloadController.stop(completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_B8.sectname[swift_isaMask & *v0])();
}

uint64_t dispatch thunk of HotReloadController.subscribe(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_B8.reloff + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of HotReloadController.unsubscribe(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_B8.flags + (swift_isaMask & *v0)))();
}

void type metadata accessor for OperationPriority(uint64_t a1)
{
  sub_2E690(a1, &qword_B8248, (uint64_t)&unk_9F890);
}

void type metadata accessor for AnimationOptions(uint64_t a1)
{
  sub_2E690(a1, &qword_B8250, (uint64_t)&unk_9F8B8);
}

void type metadata accessor for FigaroKey(uint64_t a1)
{
  sub_2E690(a1, &qword_B8258, (uint64_t)&unk_9F8E0);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_2E690(a1, &qword_B8260, (uint64_t)&unk_9F908);
}

void sub_2B068(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v3);
  v7 = type metadata accessor for DispatchTime(0);
  v4 = __chkstk_darwin(v7);
  __chkstk_darwin(v4);
  v5 = sub_29EF0(&qword_B8B00);
  __chkstk_darwin(v5);
  v6 = type metadata accessor for DispatchPredicate(0);
  __chkstk_darwin(v6);
  __asm { BR              X10 }
}

void *sub_2B1E0()
{
  if (qword_B80A0 != -1)
    swift_once(&qword_B80A0, sub_41F18);
  return sub_42904();
}

uint64_t sub_2B9B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4[9] = a4;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v4[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[11] = v6;
  v4[12] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v4[13] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[14] = v8;
  v4[15] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MainActor(0);
  v4[16] = static MainActor.shared.getter();
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  v4[17] = v10;
  v4[18] = v11;
  return swift_task_switch(sub_2BA6C, v10, v11);
}

uint64_t sub_2BA6C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;

  v1 = type metadata accessor for PackageProvisioner(0);
  v2 = (void *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  if (qword_B8118 != -1)
    swift_once(&qword_B8118, sub_508AC);
  v3 = *(_QWORD *)(qword_B8EF0 + OBJC_IVAR___JSAProcessEnvironment__variant);
  v4 = (void *)static InMemoryJetPackLoader.sharedUnpackQueue.getter();
  *(_QWORD *)(v0 + 152) = objc_msgSend(v2, "initWithLaunching:processVariant:overridePackageURLCachePath:on:", 0, v3, 0, v4);

  v5 = (_QWORD *)swift_task_alloc(dword_B83A4);
  *(_QWORD *)(v0 + 160) = v5;
  *v5 = v0;
  v5[1] = sub_2BB44;
  return PackageProvisioner.provision()();
}

uint64_t sub_2BB44(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 160);
  *(_QWORD *)(*v1 + 168) = a1;
  swift_task_dealloc(v3);
  return swift_task_switch(sub_2BB9C, *(_QWORD *)(v2 + 136), *(_QWORD *)(v2 + 144));
}

uint64_t sub_2BB9C()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = v0[21];
  swift_release(v0[16]);
  if (v1)
  {
    v2 = (void *)v0[21];
    v3 = v0[19];
    sub_2BE2C(v2);
    swift_release(v3);

  }
  else
  {
    if (qword_B8158 != -1)
      swift_once(&qword_B8158, sub_56D80);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_2D6E0(v4, (uint64_t)qword_B9290);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_0, v6, v7, "Provisioner failed to provision, bailing out.", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
    v9 = v0[19];
    v10 = v0[15];
    v11 = v0[12];
    v21 = v0[14];
    v22 = v0[13];
    v12 = v0[10];
    v20 = v0[11];

    sub_2E594(0, (unint64_t *)&qword_B8AE0, OS_dispatch_queue_ptr);
    v13 = (void *)static OS_dispatch_queue.main.getter();
    v0[6] = sub_2A878;
    v0[7] = 0;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_2A1A8;
    v0[5] = &unk_9FA38;
    v14 = _Block_copy(v0 + 2);
    static DispatchQoS.unspecified.getter(v14);
    v0[8] = &_swiftEmptyArrayStorage;
    v15 = sub_2A1FC((unint64_t *)&qword_B8210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v16 = sub_29EF0((uint64_t *)&unk_B8C90);
    v17 = sub_2A23C((unint64_t *)&qword_B8218, (uint64_t *)&unk_B8C90);
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 8, v16, v17, v12, v15);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v11, v14);
    swift_release(v9);
    _Block_release(v14);

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v11, v12);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v10, v22);
  }
  v18 = v0[12];
  swift_task_dealloc(v0[15]);
  swift_task_dealloc(v18);
  return ((uint64_t (*)(void))v0[1])();
}

void sub_2BE2C(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  dispatch_group_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  char *v22;
  NSObject *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void **aBlock;
  uint64_t v42;
  uint64_t (*v43)(uint64_t);
  void *v44;
  void *v45;
  uint64_t v46;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)&v1[OBJC_IVAR___JSAHotReloadController_hotReloadCount];
  os_unfair_lock_lock((os_unfair_lock_t)(v11 + 24));
  v12 = *(_QWORD *)(v11 + 16);
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
  {
    __break(1u);
  }
  else
  {
    v35 = a1;
    v36 = v8;
    v37 = v7;
    v38 = v4;
    v39 = v3;
    *(_QWORD *)(v11 + 16) = v14;
    os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 24));
    v15 = dispatch_group_create();
    v16 = *(void **)&v1[OBJC_IVAR___JSAHotReloadController_subscriberQueue];
    v17 = swift_allocObject(&unk_9FA70, 32, 7);
    *(_QWORD *)(v17 + 16) = v1;
    *(_QWORD *)(v17 + 24) = v15;
    v18 = swift_allocObject(&unk_9FA98, 32, 7);
    *(_QWORD *)(v18 + 16) = sub_2E4FC;
    *(_QWORD *)(v18 + 24) = v17;
    v45 = sub_2E8A4;
    v46 = v18;
    aBlock = _NSConcreteStackBlock;
    v42 = 1107296256;
    v43 = sub_2AC34;
    v44 = &unk_9FAB0;
    v19 = _Block_copy(&aBlock);
    v20 = v46;
    v21 = v16;
    v22 = v1;
    v23 = v15;
    swift_retain(v18);
    swift_release(v20);
    dispatch_sync(v21, v19);

    _Block_release(v19);
    LOBYTE(v21) = swift_isEscapingClosureAtFileLocation(v18, "", 103, 136, 35, 1);
    swift_release(v18);
    if ((v21 & 1) == 0)
    {
      sub_2E594(0, (unint64_t *)&qword_B8AE0, OS_dispatch_queue_ptr);
      v24 = (void *)static OS_dispatch_queue.main.getter();
      v25 = swift_allocObject(&unk_9FAE8, 32, 7);
      v26 = v35;
      *(_QWORD *)(v25 + 16) = v35;
      *(_QWORD *)(v25 + 24) = v22;
      v45 = sub_2E514;
      v46 = v25;
      aBlock = _NSConcreteStackBlock;
      v42 = 1107296256;
      v43 = sub_2A1A8;
      v44 = &unk_9FB00;
      v27 = _Block_copy(&aBlock);
      v28 = v22;
      static DispatchQoS.unspecified.getter(v26);
      v40 = &_swiftEmptyArrayStorage;
      v29 = sub_2A1FC((unint64_t *)&qword_B8210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v30 = sub_29EF0((uint64_t *)&unk_B8C90);
      v31 = sub_2A23C((unint64_t *)&qword_B8218, (uint64_t *)&unk_B8C90);
      v32 = v30;
      v33 = v39;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v32, v31, v39, v29);
      OS_dispatch_group.notify(qos:flags:queue:execute:)(v10, v6, v24, v27);
      _Block_release(v27);

      (*(void (**)(char *, uint64_t))(v38 + 8))(v6, v33);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v10, v37);
      v34 = v46;
      swift_release(v17);
      swift_release(v34);
      return;
    }
  }
  __break(1u);
}

void *sub_2C198()
{
  if (qword_B80A0 != -1)
    swift_once(&qword_B80A0, sub_41F18);
  return sub_42904();
}

uint64_t sub_2C1D4(void *a1, void *a2)
{
  uint64_t v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  char *v9;
  unint64_t **v10;
  unint64_t *v11;
  char *v12;
  NSObject *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  char v18[32];
  uint64_t v19;
  uint64_t v20;

  if (qword_B8158 != -1)
    swift_once(&qword_B8158, sub_56D80);
  v4 = type metadata accessor for Logger(0);
  sub_2D6E0(v4, (uint64_t)qword_B9290);
  v5 = a1;
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v8 = 134217984;
    v9 = &v5[OBJC_IVAR___JSAHotReloadController_subscribers];
    swift_beginAccess(&v5[OBJC_IVAR___JSAHotReloadController_subscribers], v18, 0, 0);
    v19 = *(_QWORD *)(*(_QWORD *)v9 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v8 + 4, v8 + 12);

    _os_log_impl(&dword_0, v6, v7, "Waiting for %ld subscribers to finish with willReloadScript", v8, 0xCu);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  v10 = (unint64_t **)&v5[OBJC_IVAR___JSAHotReloadController_subscribers];
  swift_beginAccess(&v5[OBJC_IVAR___JSAHotReloadController_subscribers], &v19, 1, 0);
  v11 = *v10;
  v12 = v5;
  v13 = a2;
  v14 = swift_bridgeObjectRetain(v11);
  v15 = sub_2D6F8(v14, v13, (uint64_t)v12);
  swift_bridgeObjectRelease(v11);

  v16 = *v10;
  *v10 = v15;
  return swift_bridgeObjectRelease(v16);
}

void sub_2C3A4(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[5];
  uint64_t v8;

  v4 = objc_msgSend((id)objc_opt_self(JSABridge), "sharedInstance");
  v5 = swift_allocObject(&unk_9F5C8, 24, 7);
  swift_unknownObjectUnownedInit(v5 + 16, a2);
  v7[4] = sub_2E51C;
  v8 = v5;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_2A1A8;
  v7[3] = &unk_9FB28;
  v6 = _Block_copy(v7);
  objc_msgSend(v4, "setupWithPackage:completion:", a1, v6, swift_release(v8).n128_f64[0]);
  _Block_release(v6);

}

void sub_2C48C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *Strong;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  dispatch_group_t v15;
  char *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  char isEscapingClosureAtFileLocation;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void **aBlock;
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  void *v36;
  void *v37;
  uint64_t v38;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Strong = (char *)swift_unknownObjectUnownedLoadStrong(a1 + 16);
  v11 = *(_QWORD *)&Strong[OBJC_IVAR___JSAHotReloadController_hotReloadCount];
  swift_retain(v11);

  os_unfair_lock_lock((os_unfair_lock_t)(v11 + 24));
  v12 = *(_QWORD *)(v11 + 16);
  v13 = __OFSUB__(v12, 1);
  v14 = v12 - 1;
  if (v13)
  {
    __break(1u);
  }
  else
  {
    v29 = v7;
    v30 = v6;
    v31 = v3;
    *(_QWORD *)(v11 + 16) = v14;
    os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 24));
    swift_release(v11);
    v15 = dispatch_group_create();
    v16 = (char *)swift_unknownObjectUnownedLoadStrong(a1 + 16);
    v17 = *(id *)&v16[OBJC_IVAR___JSAHotReloadController_subscriberQueue];

    v18 = swift_allocObject(&unk_9FB60, 32, 7);
    *(_QWORD *)(v18 + 16) = a1;
    *(_QWORD *)(v18 + 24) = v15;
    v19 = swift_allocObject(&unk_9FB88, 32, 7);
    *(_QWORD *)(v19 + 16) = sub_2E550;
    *(_QWORD *)(v19 + 24) = v18;
    v37 = sub_2E8A4;
    v38 = v19;
    aBlock = _NSConcreteStackBlock;
    v34 = 1107296256;
    v35 = sub_2AC34;
    v36 = &unk_9FBA0;
    v20 = _Block_copy(&aBlock);
    v21 = v38;
    swift_retain(a1);
    v22 = v15;
    swift_retain(v19);
    swift_release(v21);
    dispatch_sync(v17, v20);

    _Block_release(v20);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v19, "", 103, 154, 43, 1);
    swift_release(v19);
    if ((isEscapingClosureAtFileLocation & 1) == 0)
    {
      sub_2E594(0, (unint64_t *)&qword_B8AE0, OS_dispatch_queue_ptr);
      v24 = (void *)static OS_dispatch_queue.main.getter();
      v37 = sub_2CA48;
      v38 = 0;
      aBlock = _NSConcreteStackBlock;
      v34 = 1107296256;
      v35 = sub_2A1A8;
      v36 = &unk_9FBC8;
      v25 = _Block_copy(&aBlock);
      static DispatchQoS.unspecified.getter(v25);
      v32 = &_swiftEmptyArrayStorage;
      v26 = sub_2A1FC((unint64_t *)&qword_B8210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v27 = sub_29EF0((uint64_t *)&unk_B8C90);
      v28 = sub_2A23C((unint64_t *)&qword_B8218, (uint64_t *)&unk_B8C90);
      dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v27, v28, v2, v26);
      OS_dispatch_group.notify(qos:flags:queue:execute:)(v9, v5, v24, v25);
      _Block_release(v25);

      (*(void (**)(char *, uint64_t))(v31 + 8))(v5, v2);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v30);
      swift_release(v18);
      return;
    }
  }
  __break(1u);
}

uint64_t sub_2C7F4(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint32_t *p_cb;
  uint8_t *v10;
  char *Strong;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t **v22;
  unint64_t *v23;
  uint64_t v25;
  char v26[32];
  uint64_t v27;
  uint64_t v28;

  v4 = a1 + 16;
  if (qword_B8158 != -1)
    swift_once(&qword_B8158, sub_56D80);
  v5 = type metadata accessor for Logger(0);
  sub_2D6E0(v5, (uint64_t)qword_B9290);
  v6 = swift_retain_n(a1, 2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.debug.getter();
  p_cb = &OBJC_PROTOCOL___JSAStore.cb;
  if (os_log_type_enabled(v7, v8))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v10 = 134217984;
    Strong = (char *)swift_unknownObjectUnownedLoadStrong(v4);
    v12 = &Strong[OBJC_IVAR___JSAHotReloadController_subscribers];
    swift_beginAccess(&Strong[OBJC_IVAR___JSAHotReloadController_subscribers], &v25, 0, 0);
    v13 = *(_QWORD *)v12;
    swift_bridgeObjectRetain(v13);

    v14 = *(_QWORD *)(v13 + 16);
    swift_release(a1);
    v15 = v13;
    p_cb = (_DWORD *)(&OBJC_PROTOCOL___JSAStore + 64);
    swift_bridgeObjectRelease(v15);
    v27 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v10 + 4, v10 + 12);
    swift_release(a1);
    _os_log_impl(&dword_0, v7, v8, "Waiting for %ld subscribers to finish with didReloadScript", v10, 0xCu);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_release_n(a1, 2);
  }
  v16 = (char *)swift_unknownObjectUnownedLoadStrong(v4);
  v17 = (char *)swift_unknownObjectUnownedLoadStrong(v4);
  v18 = (uint64_t *)&v17[*((_QWORD *)p_cb + 61)];
  swift_beginAccess(v18, &v27, 0, 0);
  v19 = *v18;
  swift_bridgeObjectRetain(v19);

  swift_retain(a1);
  v20 = a2;
  v21 = sub_2D8D8(v19, v20, a1);
  swift_bridgeObjectRelease(v19);

  swift_release(a1);
  v22 = (unint64_t **)&v16[*((_QWORD *)p_cb + 61)];
  swift_beginAccess(v22, v26, 1, 0);
  v23 = *v22;
  *v22 = v21;

  return swift_bridgeObjectRelease(v23);
}

void *sub_2CA48()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;

  if (qword_B8158 != -1)
    swift_once(&qword_B8158, sub_56D80);
  v0 = type metadata accessor for Logger(0);
  sub_2D6E0(v0, (uint64_t)qword_B9290);
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_0, v1, v2, "Hot reload is complete", v3, 2u);
    swift_slowDealloc(v3, -1, -1);
  }

  if (qword_B80A0 != -1)
    swift_once(&qword_B80A0, sub_41F18);
  return sub_42904();
}

uint64_t sub_2CB3C(uint64_t a1, uint64_t a2)
{
  return sub_2CDB8(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

NSNumber sub_2CB5C()
{
  return CGFloat._bridgeToObjectiveC()();
}

uint64_t sub_2CB64(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = static CGFloat._forceBridgeFromObjectiveC(_:result:)(a1, &v6);
  v4 = v7;
  v5 = v6;
  if (v7)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

uint64_t sub_2CBB4(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v7 = 0;
  v8 = 1;
  v3 = static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v7);
  v4 = v8;
  v5 = v7;
  if (v8)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return v3 & 1;
}

void sub_2CC08(double *a1@<X8>)
{
  *a1 = static CGFloat._unconditionallyBridgeFromObjectiveC(_:)();
}

NSNumber sub_2CC2C()
{
  return Float._bridgeToObjectiveC()();
}

uint64_t sub_2CC34(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  int v5;
  int v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = static Float._forceBridgeFromObjectiveC(_:result:)(a1, &v6);
  v4 = v7;
  v5 = v6;
  if (v7)
    v5 = 0;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v4;
  return result;
}

uint64_t sub_2CC84(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  int v5;
  int v7;
  char v8;

  v7 = 0;
  v8 = 1;
  v3 = static Float._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v7);
  v4 = v8;
  v5 = v7;
  if (v8)
    v5 = 0;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v4;
  return v3 & 1;
}

void sub_2CCD8(float *a1@<X8>)
{
  *a1 = static Float._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_2CCFC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_2CD3C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_2CDAC(uint64_t a1, uint64_t a2)
{
  return sub_2CDB8(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_2CDB8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_2CDF4(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_2CE68(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_2CEE4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5;
  return result;
}

uint64_t sub_2CF28(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_2CFB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_2A1FC(&qword_B8350, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_8DCB0);
  v3 = sub_2A1FC(&qword_B8358, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_8DC04);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_2D038(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_2A1FC(&qword_B8360, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_8DCF4);
  v3 = sub_2A1FC(&qword_B8368, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_8DAE4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

_QWORD *sub_2D0BC@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

double sub_2D0CC@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

uint64_t sub_2D0D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = sub_2A1FC(&qword_B8370, (uint64_t (*)(uint64_t))type metadata accessor for Level, (uint64_t)&unk_8D9EC);
  v3 = sub_2A1FC(&qword_B8378, (uint64_t (*)(uint64_t))type metadata accessor for Level, (uint64_t)&unk_8D98C);
  v4 = sub_2E860();
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, v4);
}

_DWORD *sub_2D178@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

float sub_2D188@<S0>(_DWORD *a1@<X8>)
{
  float *v1;
  float result;

  result = *v1;
  *a1 = *(_DWORD *)v1;
  return result;
}

uint64_t sub_2D194(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_2A1FC(&qword_B8298, (uint64_t (*)(uint64_t))type metadata accessor for OperationPriority, (uint64_t)&unk_8D7E4);
  v3 = sub_2A1FC(&qword_B82A0, (uint64_t (*)(uint64_t))type metadata accessor for OperationPriority, (uint64_t)&unk_8D784);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for Float);
}

uint64_t sub_2D228@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_2D26C@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_2D294(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_2A1FC(&qword_B82A8, (uint64_t (*)(uint64_t))type metadata accessor for FigaroKey, (uint64_t)&unk_8D68C);
  v3 = sub_2A1FC(&qword_B82B0, (uint64_t (*)(uint64_t))type metadata accessor for FigaroKey, (uint64_t)&unk_8D62C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_2D318()
{
  return sub_2A1FC(&qword_B8268, (uint64_t (*)(uint64_t))type metadata accessor for FigaroKey, (uint64_t)&unk_8D5F0);
}

uint64_t sub_2D344()
{
  return sub_2A1FC(&qword_B8270, (uint64_t (*)(uint64_t))type metadata accessor for FigaroKey, (uint64_t)&unk_8D5C4);
}

uint64_t sub_2D370()
{
  return sub_2A1FC(&qword_B8278, (uint64_t (*)(uint64_t))type metadata accessor for FigaroKey, (uint64_t)&unk_8D660);
}

uint64_t sub_2D39C()
{
  return sub_2A1FC(&qword_B8280, (uint64_t (*)(uint64_t))type metadata accessor for OperationPriority, (uint64_t)&unk_8D748);
}

uint64_t sub_2D3C8()
{
  return sub_2A1FC(&qword_B8288, (uint64_t (*)(uint64_t))type metadata accessor for OperationPriority, (uint64_t)&unk_8D71C);
}

uint64_t sub_2D3F4()
{
  double *v0;

  return Double.hashValue.getter(*v0);
}

void sub_2D3FC()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

uint64_t sub_2D42C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  if ((*v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *v1;
  else
    v2 = 0;
  return static Hasher._hash(seed:_:)(a1, v2);
}

uint64_t sub_2D43C()
{
  float *v0;

  return Float.hashValue.getter(*v0);
}

void sub_2D444()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;

  if ((*v0 & 0x7FFFFFFF) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

uint64_t sub_2D474(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;

  if ((*v1 & 0x7FFFFFFF) != 0)
    v2 = *v1;
  else
    v2 = 0;
  return static Hasher._hash(seed:bytes:count:)(a1, v2, 4);
}

BOOL sub_2D488(double *a1, double *a2)
{
  return *a1 == *a2;
}

BOOL sub_2D49C(float *a1, float *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2D4B0()
{
  return sub_2A1FC(&qword_B8290, (uint64_t (*)(uint64_t))type metadata accessor for OperationPriority, (uint64_t)&unk_8D7B8);
}

uint64_t sub_2D4DC(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_2D4EC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_2D510()
{
  uint64_t v0;

  return sub_6B92C(*(_QWORD *)(v0 + 16));
}

unint64_t *sub_2D518(uint64_t a1, uint64_t a2)
{
  unint64_t *result;
  uint64_t v4;
  uint64_t v6;
  unint64_t *v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13[8];
  char v14[8];
  unint64_t *v15;

  result = (unint64_t *)&_swiftEmptyArrayStorage;
  v15 = (unint64_t *)&_swiftEmptyArrayStorage;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v6 = a1 + 32;
    v7 = (unint64_t *)&_swiftEmptyArrayStorage;
    while (1)
    {
      sub_2D698(v6, (uint64_t)v14);
      Strong = swift_unknownObjectWeakLoadStrong(v14);
      if (Strong)
      {
        v9 = Strong;
        swift_unknownObjectRelease(Strong);
        sub_2D698((uint64_t)v14, (uint64_t)v13);
        if (v9 == a2)
          goto LABEL_3;
      }
      else
      {
        sub_2D698((uint64_t)v14, (uint64_t)v13);
      }
      v10 = swift_unknownObjectWeakLoadStrong(v13);
      if (v10)
      {
        swift_unknownObjectRelease(v10);
        sub_2E618((uint64_t)v13, &qword_B82B8);
        sub_2E5D4((uint64_t)v14, (uint64_t)v13, &qword_B82B8);
        if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
          sub_3A7B4(0, v7[2] + 1, 1);
        v7 = v15;
        v12 = v15[2];
        v11 = v15[3];
        if (v12 >= v11 >> 1)
        {
          sub_3A7B4(v11 > 1, v12 + 1, 1);
          v7 = v15;
        }
        v7[2] = v12 + 1;
        sub_2E5D4((uint64_t)v13, (uint64_t)&v7[v12 + 4], &qword_B82B8);
        goto LABEL_4;
      }
LABEL_3:
      sub_2E618((uint64_t)v13, &qword_B82B8);
      sub_2E618((uint64_t)v14, &qword_B82B8);
LABEL_4:
      v6 += 8;
      if (!--v4)
        return v15;
    }
  }
  return result;
}

uint64_t sub_2D698(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_29EF0(&qword_B82B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2D6E0(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

unint64_t *sub_2D6F8(uint64_t a1, NSObject *a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  unint64_t *v7;
  uint64_t v8;
  uint64_t Strong;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD aBlock[5];
  uint64_t v19;
  char v20[8];
  unint64_t *v21;

  v3 = &_swiftEmptyArrayStorage;
  v21 = (unint64_t *)&_swiftEmptyArrayStorage;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v7 = (unint64_t *)&_swiftEmptyArrayStorage;
    v8 = a1 + 32;
    do
    {
      sub_2D698(v8, (uint64_t)v20);
      Strong = swift_unknownObjectWeakLoadStrong(v20);
      if (Strong)
      {
        v10 = (void *)Strong;
        dispatch_group_enter(a2);
        v11 = swift_allocObject(&unk_9FC50, 24, 7);
        *(_QWORD *)(v11 + 16) = a2;
        aBlock[4] = sub_2E58C;
        v19 = v11;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_2A1A8;
        aBlock[3] = &unk_9FC68;
        v12 = _Block_copy(aBlock);
        v13 = v19;
        v14 = a2;
        objc_msgSend(v10, "hotReloadControllerWillReloadScript:completion:", a3, v12, swift_release(v13).n128_f64[0]);
        swift_unknownObjectRelease(v10);
        _Block_release(v12);
        sub_2E5D4((uint64_t)v20, (uint64_t)aBlock, &qword_B82B8);
        if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
          sub_3A7B4(0, v7[2] + 1, 1);
        v7 = v21;
        v16 = v21[2];
        v15 = v21[3];
        if (v16 >= v15 >> 1)
        {
          sub_3A7B4(v15 > 1, v16 + 1, 1);
          v7 = v21;
        }
        v7[2] = v16 + 1;
        sub_2E5D4((uint64_t)aBlock, (uint64_t)&v7[v16 + 4], &qword_B82B8);
      }
      else
      {
        sub_2E618((uint64_t)v20, &qword_B82B8);
      }
      v8 += 8;
      --v4;
    }
    while (v4);
    return v21;
  }
  return (unint64_t *)v3;
}

unint64_t *sub_2D8D8(uint64_t a1, NSObject *a2, uint64_t a3)
{
  unint64_t *result;
  uint64_t v5;
  uint64_t v7;
  unint64_t *v8;
  uint64_t Strong;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD aBlock[5];
  uint64_t v20;
  char v21[8];
  unint64_t *v22;

  result = (unint64_t *)&_swiftEmptyArrayStorage;
  v22 = (unint64_t *)&_swiftEmptyArrayStorage;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v7 = a1 + 32;
    v8 = (unint64_t *)&_swiftEmptyArrayStorage;
    v18 = a3 + 16;
    do
    {
      sub_2D698(v7, (uint64_t)v21);
      Strong = swift_unknownObjectWeakLoadStrong(v21);
      if (Strong)
      {
        v10 = (void *)Strong;
        dispatch_group_enter(a2);
        v11 = (void *)swift_unknownObjectUnownedLoadStrong(v18);
        v12 = swift_allocObject(&unk_9FC00, 24, 7);
        *(_QWORD *)(v12 + 16) = a2;
        aBlock[4] = sub_2E8B0;
        v20 = v12;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_2A1A8;
        aBlock[3] = &unk_9FC18;
        v13 = _Block_copy(aBlock);
        v14 = v20;
        v15 = a2;
        objc_msgSend(v10, "hotReloadControllerDidReloadScript:completion:", v11, v13, swift_release(v14).n128_f64[0]);
        swift_unknownObjectRelease(v10);
        _Block_release(v13);

        sub_2E5D4((uint64_t)v21, (uint64_t)aBlock, &qword_B82B8);
        if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
          sub_3A7B4(0, v8[2] + 1, 1);
        v8 = v22;
        v17 = v22[2];
        v16 = v22[3];
        if (v17 >= v16 >> 1)
        {
          sub_3A7B4(v16 > 1, v17 + 1, 1);
          v8 = v22;
        }
        v8[2] = v17 + 1;
        sub_2E5D4((uint64_t)aBlock, (uint64_t)&v8[v17 + 4], &qword_B82B8);
      }
      else
      {
        sub_2E618((uint64_t)v21, &qword_B82B8);
      }
      v7 += 8;
      --v5;
    }
    while (v5);
    return v22;
  }
  return result;
}

uint64_t sub_2DACC(char a1, char a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t aBlock[5];
  uint64_t v52;

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v48 = *(_QWORD *)(v6 - 8);
  v49 = v6;
  __chkstk_darwin(v6);
  v47 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v45 = *(_QWORD *)(v8 - 8);
  v46 = v8;
  __chkstk_darwin(v8);
  v44 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_B8158 != -1)
    swift_once(&qword_B8158, sub_56D80);
  v14 = sub_2D6E0(v10, (uint64_t)qword_B9290);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(22, -1);
    v42 = swift_slowAlloc(64, -1);
    aBlock[0] = v42;
    v19 = 8 * a1;
    v20 = *(_QWORD *)&aUnknown_3[v19];
    *(_DWORD *)v18 = 136315394;
    v21 = *(_QWORD *)&aTerminat[v19 + 8];
    v22 = a2;
    v50 = sub_3A180(v20, v21, aBlock);
    v43 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, aBlock, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease(v21);
    *(_WORD *)(v18 + 12) = 2080;
    v23 = 8 * a2;
    v24 = *(_QWORD *)&aTerminat[v23 + 8];
    v50 = sub_3A180(*(_QWORD *)&aUnknown_3[v23], v24, aBlock);
    v3 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, aBlock, v18 + 14, v18 + 22);
    v25 = v24;
    a2 = v22;
    swift_bridgeObjectRelease(v25);
    _os_log_impl(&dword_0, v16, v17, "Transitioning from %s to %s", (uint8_t *)v18, 0x16u);
    v26 = v42;
    swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v18, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  sub_2E594(0, (unint64_t *)&qword_B8AE0, OS_dispatch_queue_ptr);
  v27 = (void *)static OS_dispatch_queue.main.getter();
  v28 = swift_allocObject(&unk_9F9A8, 32, 7);
  *(_BYTE *)(v28 + 16) = a2;
  *(_QWORD *)(v28 + 24) = v3;
  aBlock[4] = (uint64_t)sub_2DF14;
  v52 = v28;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_2A1A8;
  aBlock[3] = (uint64_t)&unk_9F9C0;
  v29 = _Block_copy(aBlock);
  v30 = v52;
  v31 = v3;
  swift_release(v30);
  v32 = v44;
  static DispatchQoS.unspecified.getter(v33);
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  v34 = sub_2A1FC((unint64_t *)&qword_B8210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v35 = sub_29EF0((uint64_t *)&unk_B8C90);
  v36 = sub_2A23C((unint64_t *)&qword_B8218, (uint64_t *)&unk_B8C90);
  v37 = v47;
  v38 = v35;
  v39 = v49;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v38, v36, v49, v34);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v32, v37, v29);
  _Block_release(v29);

  (*(void (**)(char *, uint64_t))(v48 + 8))(v37, v39);
  return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v32, v46);
}

uint64_t sub_2DEF0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_2DF14()
{
  uint64_t v0;

  sub_2B068(*(_BYTE *)(v0 + 16));
}

void sub_2DF20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  _OWORD v35[2];
  _QWORD v36[4];
  _QWORD v37[6];
  uint64_t v38;

  v4 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v5 = a1;
    else
      v5 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v6 = __CocoaSet.makeIterator()(v5);
    v7 = sub_2E594(0, &qword_B82E0, UIWindowScene_ptr);
    v8 = sub_2E3B0((unint64_t *)&qword_B82E8, &qword_B82E0, UIWindowScene_ptr);
    v9 = Set.Iterator.init(_cocoa:)(v37, v6, v7, v8);
    v4 = v37[0];
    v33 = v37[1];
    v10 = v37[2];
    v11 = v37[3];
    v12 = v37[4];
  }
  else
  {
    v13 = -1 << *(_BYTE *)(a1 + 32);
    v33 = a1 + 56;
    v10 = ~v13;
    v14 = -v13;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v12 = v15 & *(_QWORD *)(a1 + 56);
    v9 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v11 = 0;
  }
  v32 = (unint64_t)(v10 + 64) >> 6;
  while (v4 < 0)
  {
    v23 = __CocoaSet.Iterator.next()(v9);
    if (!v23)
      goto LABEL_43;
    v24 = v23;
    *(_QWORD *)&v35[0] = v23;
    v25 = sub_2E594(0, &qword_B82E0, UIWindowScene_ptr);
    swift_unknownObjectRetain(v24);
    swift_dynamicCast(v36, v35, (char *)&type metadata for Swift.AnyObject + 8, v25, 7);
    v26 = (id)v36[0];
    swift_unknownObjectRelease(v24);
    v22 = v11;
    v20 = v12;
    if (!v26)
      goto LABEL_43;
LABEL_37:
    swift_beginAccess(&off_B8878, v35, 32, 0);
    v30 = objc_getAssociatedObject(v26, &off_B8878);
    swift_endAccess(v35);
    if (v30)
    {
      _bridgeAnyObjectToAny(_:)(v35, v30);
      swift_unknownObjectRelease(v30);
    }
    else
    {
      memset(v35, 0, sizeof(v35));
    }
    sub_2E5D4((uint64_t)v35, (uint64_t)v36, &qword_B8B50);
    if (!v36[3])
    {
      sub_2E618((uint64_t)v36, &qword_B8B50);
LABEL_12:
      v16 = type metadata accessor for HotReloadStatusHUD();
      v17 = swift_allocObject(v16, 88, 7);
      *(_OWORD *)(v17 + 24) = xmmword_8D4B0;
      *(_OWORD *)(v17 + 40) = xmmword_8D4C0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_QWORD *)(v17 + 64) = 0x3FB999999999999ALL;
      *(_WORD *)(v17 + 72) = 0;
      *(_BYTE *)(v17 + 74) = 0;
      *(_QWORD *)(v17 + 80) = &_swiftEmptyArrayStorage;
      v18 = objc_allocWithZone((Class)type metadata accessor for HotReloadStatusHUDWindow());
      v19 = v26;
      *(_QWORD *)(v17 + 16) = objc_msgSend(v18, "initWithWindowScene:", v19);

      swift_beginAccess(&off_B8878, v36, 32, 0);
      swift_retain(v17);
      objc_setAssociatedObject(v19, &off_B8878, (id)v17, &stru_2E8.segname[9]);
      swift_endAccess(v36);
      swift_release(v17);
      goto LABEL_13;
    }
    v31 = type metadata accessor for HotReloadStatusHUD();
    if ((swift_dynamicCast(&v38, v36, (char *)&type metadata for Any + 8, v31, 6) & 1) == 0)
      goto LABEL_12;
    v17 = v38;
LABEL_13:
    sub_54140(a2, a3);

    swift_release(v17);
    v11 = v22;
    v12 = v20;
  }
  if (v12)
  {
    v20 = (v12 - 1) & v12;
    v21 = __clz(__rbit64(v12)) | (v11 << 6);
    v22 = v11;
LABEL_36:
    v26 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v21);
    if (!v26)
      goto LABEL_43;
    goto LABEL_37;
  }
  v27 = v11 + 1;
  if (!__OFADD__(v11, 1))
  {
    if (v27 >= v32)
      goto LABEL_43;
    v28 = *(_QWORD *)(v33 + 8 * v27);
    v22 = v11 + 1;
    if (!v28)
    {
      v22 = v11 + 2;
      if (v11 + 2 >= v32)
        goto LABEL_43;
      v28 = *(_QWORD *)(v33 + 8 * v22);
      if (!v28)
      {
        v22 = v11 + 3;
        if (v11 + 3 >= v32)
          goto LABEL_43;
        v28 = *(_QWORD *)(v33 + 8 * v22);
        if (!v28)
        {
          v22 = v11 + 4;
          if (v11 + 4 >= v32)
            goto LABEL_43;
          v28 = *(_QWORD *)(v33 + 8 * v22);
          if (!v28)
          {
            v22 = v11 + 5;
            if (v11 + 5 >= v32)
              goto LABEL_43;
            v28 = *(_QWORD *)(v33 + 8 * v22);
            if (!v28)
            {
              v29 = v11 + 6;
              while (v32 != v29)
              {
                v28 = *(_QWORD *)(v33 + 8 * v29++);
                if (v28)
                {
                  v22 = v29 - 1;
                  goto LABEL_35;
                }
              }
LABEL_43:
              sub_2E5CC(v4);
              return;
            }
          }
        }
      }
    }
LABEL_35:
    v20 = (v28 - 1) & v28;
    v21 = __clz(__rbit64(v28)) + (v22 << 6);
    goto LABEL_36;
  }
  __break(1u);
}

uint64_t sub_2E3B0(unint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_2E594(255, a2, a3);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2E3F0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_2E41C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_B82D4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_2E488;
  return sub_2B9B0(a1, v4, v5, v6);
}

uint64_t sub_2E488()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v0;
  v1 = *(_QWORD *)(v4 + 16);
  v2 = *v0;
  v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_2E4D0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_2E4FC()
{
  uint64_t v0;

  return sub_2C1D4(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_2E504()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_2E514()
{
  uint64_t v0;

  sub_2C3A4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_2E51C()
{
  uint64_t v0;

  sub_2C48C(v0);
}

uint64_t sub_2E524()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_2E550()
{
  uint64_t v0;

  return sub_2C7F4(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_2E558()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_2E568()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_2E58C()
{
  uint64_t v0;

  dispatch_group_leave(*(dispatch_group_t *)(v0 + 16));
}

uint64_t sub_2E594(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_2E5CC(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_2E5D4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_29EF0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_2E618(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_29EF0(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
  sub_2E690(a1, &qword_B82F0, (uint64_t)&unk_9FCA0);
}

void type metadata accessor for OpenExternalURLOptionsKey(uint64_t a1)
{
  sub_2E690(a1, &qword_B82F8, (uint64_t)&unk_9FCC8);
}

void type metadata accessor for Level(uint64_t a1)
{
  sub_2E690(a1, &qword_B8300, (uint64_t)&unk_9FCF0);
}

void sub_2E690(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_2E6D4()
{
  return sub_2A1FC(&qword_B8308, (uint64_t (*)(uint64_t))type metadata accessor for Level, (uint64_t)&unk_8D950);
}

uint64_t sub_2E700()
{
  return sub_2A1FC(&qword_B8310, (uint64_t (*)(uint64_t))type metadata accessor for Level, (uint64_t)&unk_8D924);
}

uint64_t sub_2E72C()
{
  return sub_2A1FC(&qword_B8318, (uint64_t (*)(uint64_t))type metadata accessor for Level, (uint64_t)&unk_8D9C0);
}

uint64_t sub_2E758()
{
  return sub_2A1FC(&qword_B8320, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_8DAA8);
}

uint64_t sub_2E784()
{
  return sub_2A1FC(&qword_B8328, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_8DA7C);
}

uint64_t sub_2E7B0()
{
  return sub_2A1FC(&qword_B8330, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_8DBC8);
}

uint64_t sub_2E7DC()
{
  return sub_2A1FC(&qword_B8338, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_8DB9C);
}

uint64_t sub_2E808()
{
  return sub_2A1FC(&qword_B8340, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_8DC38);
}

uint64_t sub_2E834()
{
  return sub_2A1FC(&qword_B8348, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_8DB18);
}

unint64_t sub_2E860()
{
  unint64_t result;

  result = qword_B8380;
  if (!qword_B8380)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_B8380);
  }
  return result;
}

id PackageProvisioner.__allocating_init(launching:)(char a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = (void *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  if (qword_B8118 != -1)
    swift_once(&qword_B8118, sub_508AC);
  v4 = *(_QWORD *)(qword_B8EF0 + OBJC_IVAR___JSAProcessEnvironment__variant);
  v5 = (void *)static InMemoryJetPackLoader.sharedUnpackQueue.getter();
  v6 = objc_msgSend(v3, "initWithLaunching:processVariant:overridePackageURLCachePath:on:", a1 & 1, v4, 0, v5);

  return v6;
}

uint64_t PackageProvisioner.provision()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = v0;
  return swift_task_switch(sub_2E9F4, v0, 0);
}

uint64_t sub_2E9F4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v8;

  v1 = v0[7];
  v2 = OBJC_IVAR___JSAPackageProvisioner_state;
  v0[8] = OBJC_IVAR___JSAPackageProvisioner_state;
  v3 = (_BYTE *)(v1 + v2);
  swift_beginAccess(v1 + v2, v0 + 2, 1, 0);
  if (*v3)
  {
    v4 = sub_29EF0(&qword_B83B0);
    v5 = sub_37F68(&qword_B83B8, &qword_B83B0);
    v6 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Future.then()[1]);
    v0[11] = v6;
    *v6 = v0;
    v6[1] = sub_2EBD8;
    return dispatch thunk of Future.then()(v0 + 5, v4, v5);
  }
  else
  {
    *v3 = 1;
    v8 = (_QWORD *)swift_task_alloc(dword_B83C4);
    v0[9] = v8;
    *v8 = v0;
    v8[1] = sub_2EB00;
    return sub_2F930();
  }
}

uint64_t sub_2EB00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_2EB60, v3, 0);
}

uint64_t sub_2EB60()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)(v0 + 80);
  if (v1)
  {
    if (*(_BYTE *)(v1 + OBJC_IVAR___JSAPackage_isBundled))
      v2 = 2;
    else
      v2 = 3;
  }
  else
  {
    v2 = 4;
  }
  *(_BYTE *)(*(_QWORD *)(v0 + 56) + *(_QWORD *)(v0 + 64)) = v2;
  *(_QWORD *)(v0 + 48) = v1;
  Promise.resolve(_:)(v0 + 48);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 80));
}

uint64_t sub_2EBD8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 88);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_errorRelease(v0);
    v5 = 0;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 40);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

uint64_t sub_2EC38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_2E618(a1, &qword_B8B00);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_9FEB8, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_B8D10, v16);
}

uint64_t sub_2ED84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_2E618(a1, &qword_B8B00);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_A07A0, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  v17 = sub_29EF0(&qword_B8460);
  if (v14 | v12)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v12;
    v20[3] = v14;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v8, v18, v17, &unk_B8518, v16);
}

JSApp::PackageProvisionerState_optional __swiftcall PackageProvisionerState.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 5;
  if ((unint64_t)rawValue < 5)
    v2 = rawValue;
  *v1 = v2;
  return (JSApp::PackageProvisionerState_optional)rawValue;
}

uint64_t PackageProvisionerState.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

BOOL sub_2EEF4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_2EF08()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_2EF4C()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_2EF74(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

JSApp::PackageProvisionerState_optional sub_2EFB4(Swift::Int *a1)
{
  return PackageProvisionerState.init(rawValue:)(*a1);
}

void sub_2EFBC(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t sub_2EFC8()
{
  uint64_t v0;

  v0 = type metadata accessor for URL(0);
  sub_38104(v0, qword_B8388);
  sub_2D6E0(v0, (uint64_t)qword_B8388);
  return URL.init(fileURLWithPath:)(0xD00000000000001FLL, 0x8000000000088BB0);
}

uint64_t sub_2F028()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int *v14;
  _QWORD v17[5];

  v0 = type metadata accessor for JetPackSigningPolicy(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v17[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v17[-1] - v5;
  v7 = sub_29EF0(&qword_B8438);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v17[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_B80E8 != -1)
    swift_once(&qword_B80E8, sub_44C4C);
  v11 = sub_2D6E0(v7, (uint64_t)qword_B8A18);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  UserDefault.wrappedValue.getter(v17, v7);
  v12 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if ((v17[0] & 1) != 0)
  {
    v13 = 0;
  }
  else
  {
    v12 = _s5JSApp8DefaultsC14bootURLIsLocalSbvgZ_0();
    v13 = v12 ^ 1;
  }
  if (v13 & 1 | ((static Capabilities.isInternalBuild.getter(v12) & 1) == 0))
    v14 = (unsigned int *)&enum case for JetPackSigningPolicy.required(_:);
  else
    v14 = (unsigned int *)&enum case for JetPackSigningPolicy.ignoreMissingButValidateIfProvided(_:);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v6, *v14, v0);
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v4, v6, v0);
  v17[3] = type metadata accessor for JetPackManagedKeyProvider(0);
  v17[4] = &protocol witness table for JetPackManagedKeyProvider;
  sub_37FA8(v17);
  JetPackManagedKeyProvider.init()();
  InMemoryJetPackLoader.init(signingPolicy:keyProvider:)(v4, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v6, v0);
}

uint64_t PackageProvisioner.state.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(v1 + OBJC_IVAR___JSAPackageProvisioner_state);
  result = swift_beginAccess(v3, v5, 0, 0);
  *a1 = *v3;
  return result;
}

id PackageProvisioner.init(launching:)(char a1)
{
  void *v1;
  uint64_t v3;
  void *v4;
  id v5;

  if (qword_B8118 != -1)
    swift_once(&qword_B8118, sub_508AC);
  v3 = *(_QWORD *)(qword_B8EF0 + OBJC_IVAR___JSAProcessEnvironment__variant);
  v4 = (void *)static InMemoryJetPackLoader.sharedUnpackQueue.getter();
  v5 = objc_msgSend(v1, "initWithLaunching:processVariant:overridePackageURLCachePath:on:", a1 & 1, v3, 0, v4);

  return v5;
}

id PackageProvisioner.__allocating_init(launching:onQueue:)(char a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v6;
  id v7;

  v3 = v2;
  v6 = (void *)swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  if (qword_B8118 != -1)
    swift_once(&qword_B8118, sub_508AC);
  v7 = objc_msgSend(v6, "initWithLaunching:processVariant:overridePackageURLCachePath:on:", a1 & 1, *(_QWORD *)(qword_B8EF0 + OBJC_IVAR___JSAProcessEnvironment__variant), 0, a2);

  return v7;
}

id PackageProvisioner.init(launching:onQueue:)(char a1, void *a2)
{
  void *v2;
  id v5;

  if (qword_B8118 != -1)
    swift_once(&qword_B8118, sub_508AC);
  v5 = objc_msgSend(v2, "initWithLaunching:processVariant:overridePackageURLCachePath:on:", a1 & 1, *(_QWORD *)(qword_B8EF0 + OBJC_IVAR___JSAProcessEnvironment__variant), 0, a2);

  return v5;
}

id PackageProvisioner.__allocating_init(launching:processVariant:overridePackageURLCachePath:on:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  id v11;

  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v11 = sub_37310(a1, a2, a3, a4, a5);

  return v11;
}

id PackageProvisioner.init(launching:processVariant:overridePackageURLCachePath:on:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v6;

  v6 = sub_37310(a1, a2, a3, a4, a5);

  return v6;
}

uint64_t PackageProvisioner.provision(completionHandler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;

  v5 = sub_29EF0(&qword_B8B00);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v16 - v9;
  if (*(_BYTE *)(v2 + OBJC_IVAR___JSAPackageProvisioner_isLaunching) == 1)
  {
    TaskPriority.init(rawValue:)(33);
    v11 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 0, 1, v11);
  }
  else
  {
    v12 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v10, 1, 1, v12);
  }
  sub_37B7C((uint64_t)v10, (uint64_t)v8, &qword_B8B00);
  v13 = (_QWORD *)swift_allocObject(&unk_9FDD0, 56, 7);
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = a1;
  v13[5] = a2;
  v13[6] = v2;
  swift_retain(a2);
  swift_retain(v2);
  v14 = sub_2EC38((uint64_t)v8, (uint64_t)&unk_B83D8, (uint64_t)v13);
  swift_release(v14);
  return sub_2E618((uint64_t)v10, &qword_B8B00);
}

uint64_t sub_2F7C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v8;

  v6[2] = a4;
  v6[3] = a5;
  v8 = (_QWORD *)swift_task_alloc(dword_B83A4);
  v6[4] = v8;
  *v8 = v6;
  v8[1] = sub_2F828;
  v8[7] = a6;
  return swift_task_switch(sub_2E9F4, a6, 0);
}

uint64_t sub_2F828(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 40) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_2F884, 0, 0);
}

uint64_t sub_2F884()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 40);
  (*(void (**)(void *))(v0 + 16))(v1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2F930()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1[38] = v0;
  v2 = type metadata accessor for ValidatedJetPackAssetLocations.BagKeyLocation(0);
  v1[39] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[40] = v3;
  v1[41] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger(0);
  v1[42] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[43] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v1[44] = v6;
  v1[45] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_29EF0(&qword_B8B00);
  v1[46] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_29EF0(&qword_B8438);
  v1[47] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v1[48] = v9;
  v1[49] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OSSignpostID(0);
  v1[50] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v1[51] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[52] = swift_task_alloc(v12);
  v1[53] = swift_task_alloc(v12);
  v13 = type metadata accessor for OSSignposter(0);
  v1[54] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v1[55] = v14;
  v1[56] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_2FA6C, v0, 0);
}

id sub_2FA6C()
{
  uint64_t v0;
  id result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_signpost_type_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, _QWORD);
  uint8_t *v10;
  uint64_t v11;
  os_signpost_id_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  void (*v28)(_QWORD, _QWORD);
  uint64_t v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  _QWORD *v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  result = JSASignpost();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v2 = v0 + 548;
  v3 = OSSignposter.init(logHandle:)();
  v4 = OSSignposter.logHandle.getter(v3);
  v5 = OSSignpostID.init(log:)(v4);
  v6 = OSSignposter.logHandle.getter(v5);
  v7 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v8 = *(_QWORD *)(v0 + 416);
    v75 = *(_QWORD *)(v0 + 400);
    v77 = *(_QWORD *)(v0 + 408);
    v9 = *(void (**)(uint64_t, _QWORD))(v77 + 16);
    v9(v8, *(_QWORD *)(v0 + 424));
    v10 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 67109120;
    *(_DWORD *)(v0 + 544) = qos_class_self();
    v11 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 544, v2, v10 + 4, v10 + 8);
    v12 = OSSignpostID.rawValue.getter(v11);
    _os_signpost_emit_with_name_impl(&dword_0, v6, v7, v12, "Package Provision", "qos: 0x%x", v10, 8u);
    swift_slowDealloc(v10, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v8, v75);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 408);

    v9 = *(void (**)(uint64_t, _QWORD))(v13 + 16);
  }
  v14 = *(_QWORD *)(v0 + 416);
  v15 = *(_QWORD *)(v0 + 304);
  ((void (*)(uint64_t, _QWORD, _QWORD))v9)(v14, *(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 400));
  v16 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  *(_QWORD *)(v0 + 456) = OSSignpostIntervalState.init(id:isOpen:)(v14, 1);
  v17 = objc_msgSend((id)objc_opt_self(BUBag), "defaultBag");
  *(_QWORD *)(v0 + 464) = v17;
  v18 = *(unsigned __int8 *)(v15 + OBJC_IVAR___JSAPackageProvisioner_isLaunching);
  *(_BYTE *)(v0 + 549) = v18;
  if (v18)
    v19 = 0;
  else
    v19 = 3;
  if (*(_QWORD *)(v15 + OBJC_IVAR___JSAPackageProvisioner_processVariant))
  {
    v20 = Logger.logObject.getter(v17);
    v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = swift_slowAlloc(32, -1);
      *(_DWORD *)v22 = 136315138;
      v80 = v23;
      if (v18)
        v24 = 0x68636E75616CLL;
      else
        v24 = 0x756F72676B636162;
      if (v18)
        v25 = 0xE600000000000000;
      else
        v25 = 0xEA0000000000646ELL;
      *(_QWORD *)(v0 + 264) = sub_3A180(v24, v25, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v22 + 4, v22 + 12);
      swift_bridgeObjectRelease(v25);
      _os_log_impl(&dword_0, v20, v21, "JSAPackageProvisioner [%s] Skipped regular package because running tests", v22, 0xCu);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      v26 = v23;
      v2 = v0 + 548;
      swift_slowDealloc(v26, -1, -1);
      v27 = v22;
LABEL_28:
      swift_slowDealloc(v27, -1, -1);
      goto LABEL_29;
    }
    goto LABEL_29;
  }
  v28 = (void (*)(_QWORD, _QWORD))v17;
  if (qword_B8140 != -1)
    swift_once(&qword_B8140, sub_54C84);
  v29 = swift_beginAccess(&byte_B9201, v0 + 240, 0, 0);
  if (byte_B9201 == 1)
  {
    v20 = Logger.logObject.getter(v29);
    v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      v78 = swift_slowAlloc(32, -1);
      v80 = v78;
      *(_DWORD *)v31 = 136315138;
      if (v18)
        v32 = 0x68636E75616CLL;
      else
        v32 = 0x756F72676B636162;
      if (v18)
        v33 = 0xE600000000000000;
      else
        v33 = 0xEA0000000000646ELL;
      *(_QWORD *)(v0 + 296) = sub_3A180(v32, v33, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v31 + 4, v31 + 12);
      swift_bridgeObjectRelease(v33);
      _os_log_impl(&dword_0, v20, v30, "JSAPackageProvisioner [%s] Skipped regular package because running from offline cache", v31, 0xCu);
      swift_arrayDestroy(v78, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v78, -1, -1);
      v27 = v31;
      goto LABEL_28;
    }
LABEL_29:

LABEL_30:
    if (*(_BYTE *)(v2 + 1) == 1)
    {
LABEL_31:
      v34 = (_QWORD *)swift_task_alloc(dword_B8444);
      *(_QWORD *)(v0 + 528) = v34;
      *v34 = v0;
      v34[1] = sub_30B68;
      return (id)sub_35554(2);
    }

    v35 = *(_QWORD *)(v0 + 448);
    v36 = *(_QWORD *)(v0 + 456);
    v37 = *(_QWORD *)(v0 + 432);
    v38 = *(_QWORD *)(v0 + 440);
    v40 = *(_QWORD *)(v0 + 416);
    v39 = *(_QWORD *)(v0 + 424);
    v41 = *(_QWORD *)(v0 + 400);
    v42 = *(_QWORD *)(v0 + 408);
    v43 = *(_QWORD *)(v0 + 392);
    v74 = *(_QWORD *)(v0 + 368);
    v76 = *(_QWORD *)(v0 + 360);
    v79 = *(_QWORD *)(v0 + 328);
    sub_30CD4(v35, v36);
    v44 = swift_release(v36);
    (*(void (**)(uint64_t, uint64_t, __n128))(v42 + 8))(v39, v41, v44);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v35, v37);
    swift_task_dealloc(v35);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v43);
    swift_task_dealloc(v74);
    swift_task_dealloc(v76);
    swift_task_dealloc(v79);
    return (id)(*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  v45 = (_QWORD *)(v0 + 548);
  if (qword_B8138 != -1)
    swift_once(&qword_B8138, sub_54A50);
  v46 = swift_beginAccess(&byte_B9200, v0 + 216, 0, 0);
  if (byte_B9200 == 1)
  {
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(12, -1);
      v50 = swift_slowAlloc(32, -1);
      *(_DWORD *)v49 = 136315138;
      v80 = v50;
      if (v18)
        v51 = 0x68636E75616CLL;
      else
        v51 = 0x756F72676B636162;
      if (v18)
        v52 = 0xE600000000000000;
      else
        v52 = 0xEA0000000000646ELL;
      *(_QWORD *)(v0 + 288) = sub_3A180(v51, v52, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v49 + 4, v49 + 12);
      swift_bridgeObjectRelease(v52);
      _os_log_impl(&dword_0, v47, v48, "JSAPackageProvisioner [%s] Skipped regular package because generating offline cache", v49, 0xCu);
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v49, -1, -1);
    }

    v2 = v0 + 548;
    goto LABEL_30;
  }
  if (v18)
  {
    if (qword_B80C0 != -1)
      swift_once(&qword_B80C0, sub_443CC);
    v53 = *(_QWORD *)(v0 + 384);
    v54 = *(_QWORD *)(v0 + 392);
    v55 = *(_QWORD *)(v0 + 376);
    v56 = sub_2D6E0(v55, (uint64_t)qword_B89A0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16))(v54, v56, v55);
    UserDefault.wrappedValue.getter(v45, v55);
    v57 = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 8))(v54, v55);
    if (*(_BYTE *)v45 == 1)
    {
      v58 = Logger.logObject.getter(v57);
      v59 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v58, v59))
      {
        v60 = (uint8_t *)swift_slowAlloc(12, -1);
        v61 = swift_slowAlloc(32, -1);
        v80 = v61;
        *(_DWORD *)v60 = 136315138;
        *(_QWORD *)(v0 + 280) = sub_3A180(0x68636E75616CLL, 0xE600000000000000, &v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v60 + 4, v60 + 12);
        swift_bridgeObjectRelease(0xE600000000000000);
        _os_log_impl(&dword_0, v58, v59, "JSAPackageProvisioner [%s] Skipped regular package due to user default", v60, 0xCu);
        swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v61, -1, -1);
        swift_slowDealloc(v60, -1, -1);
      }

      goto LABEL_31;
    }
  }
  v62 = *(_QWORD *)(v0 + 368);
  v63 = *(_QWORD *)(v0 + 304);
  sub_30F1C(v28, v19, (_QWORD *)(v0 + 136));
  v64 = type metadata accessor for TaskPriority(0);
  *(_QWORD *)(v0 + 472) = v64;
  v65 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56);
  *(_QWORD *)(v0 + 480) = v65;
  v65(v62, 1, 1, v64);
  sub_37824(v0 + 136, v0 + 176);
  v66 = sub_2A1FC(&qword_B8450, type metadata accessor for PackageProvisioner, (uint64_t)&protocol conformance descriptor for PackageProvisioner);
  v67 = swift_allocObject(&unk_9FEE0, 81, 7);
  *(_QWORD *)(v67 + 16) = v63;
  *(_QWORD *)(v67 + 24) = v66;
  *(_QWORD *)(v67 + 32) = v63;
  sub_378BC((__int128 *)(v0 + 176), v67 + 40);
  *(_BYTE *)(v67 + 80) = v19;
  swift_retain_n(v63, 2);
  v68 = sub_2ED84(v62, (uint64_t)&unk_B8458, v67);
  v69 = 0;
  *(_QWORD *)(v0 + 488) = v68;
  if (v18)
  {
    v70 = *(_QWORD *)(v0 + 368);
    v65(v70, 1, 1, v64);
    v71 = (_QWORD *)swift_allocObject(&unk_9FF30, 40, 7);
    v71[2] = 0;
    v71[3] = 0;
    v71[4] = v68;
    swift_retain(v68);
    v69 = sub_34868(v70, (uint64_t)&unk_B8490, (uint64_t)v71);
  }
  *(_QWORD *)(v0 + 496) = v69;
  v72 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
  *(_QWORD *)(v0 + 504) = v72;
  v73 = sub_29EF0(&qword_B8460);
  *v72 = v0;
  v72[1] = sub_304E0;
  return (id)Task<>.value.getter(v0 + 272, v68, v73);
}

uint64_t sub_304E0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 304);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 504));
  return swift_task_switch(sub_30538, v1, 0);
}

uint64_t sub_30538()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  __int128 *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;

  if (*(_QWORD *)(v0 + 272))
  {
    v39 = *(_QWORD *)(v0 + 272);
    v42 = (__int128 *)(v0 + 96);
    v44 = (_QWORD *)(v0 + 136);
    v1 = *(_QWORD *)(v0 + 496);
    if (v1)
    {
      swift_retain(*(_QWORD *)(v0 + 496));
      sub_29EF0(&qword_B8D30);
      Task.cancel()();
      swift_release(v1);
    }
    v2 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 480);
    v38 = *(_QWORD *)(v0 + 488);
    v3 = *(_QWORD *)(v0 + 472);
    v40 = *(void **)(v0 + 464);
    v5 = *(_QWORD *)(v0 + 360);
    v4 = *(_QWORD *)(v0 + 368);
    v7 = *(_QWORD *)(v0 + 344);
    v6 = *(_QWORD *)(v0 + 352);
    v8 = *(_QWORD *)(v0 + 336);
    v9 = *(_QWORD *)(v0 + 304);
    if (*(_BYTE *)(v0 + 549))
      v10 = 0;
    else
      v10 = 3;
    v37 = v10;
    objc_msgSend((id)objc_opt_self(JSAMetricsAppLaunchEvent), "updateUsedBootstrapFallback:", 0);
    v2(v4, 1, 1, v3);
    v11 = v9 + OBJC_IVAR___JSAPackageProvisioner_logger;
    sub_37824((uint64_t)v44, (uint64_t)v42);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v11, v8);
    v12 = *(unsigned __int8 *)(v7 + 80);
    v13 = (v12 + 72) & ~v12;
    v14 = v13 + v6;
    v15 = swift_allocObject(&unk_9FF08, v14 + 1, v12 | 7);
    *(_QWORD *)(v15 + 16) = 0;
    *(_QWORD *)(v15 + 24) = 0;
    sub_378BC(v42, v15 + 32);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v15 + v13, v5, v8);
    *(_BYTE *)(v15 + v14) = v37;
    v16 = sub_3B71C(v4, (uint64_t)&unk_B8480, v15);
    swift_release(v1);
    swift_release(v38);

    swift_release(v16);
    sub_2E618(v4, &qword_B8B00);
    sub_3789C(v44);
    goto LABEL_8;
  }
  if (*(_BYTE *)(v0 + 549) == 1)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
  }
  else
  {
    v28 = _stringCompareWithSmolCheck(_:_:expecting:)(0x756F72676B636162, 0xEA0000000000646ELL, 0x68636E75616CLL, 0xE600000000000000, 0);
    swift_bridgeObjectRelease(0xEA0000000000646ELL);
    if ((v28 & 1) == 0)
    {
      v35 = *(_QWORD *)(v0 + 488);
      v34 = *(_QWORD *)(v0 + 496);
      sub_3789C((_QWORD *)(v0 + 136));
      swift_release(v35);
      swift_release(v34);
      goto LABEL_16;
    }
  }
  v29 = *(_QWORD *)(v0 + 328);
  v30 = *(_QWORD *)(v0 + 312);
  sub_37824(v0 + 136, v0 + 56);
  v31 = sub_29EF0(&qword_B8468);
  if (swift_dynamicCast(v29, v0 + 56, v31, v30, 6))
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 320) + 8))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 312));
    sub_34FE4((_QWORD *)(v0 + 16));
    v32 = (_QWORD *)swift_task_alloc(dword_B8474);
    *(_QWORD *)(v0 + 512) = v32;
    *v32 = v0;
    v32[1] = sub_3094C;
    return sub_31E30(v0 + 16, 1);
  }
  v33 = *(_QWORD *)(v0 + 496);
  swift_release(*(_QWORD *)(v0 + 488));
  swift_release(v33);
  sub_3789C((_QWORD *)(v0 + 136));
LABEL_16:
  if (*(_BYTE *)(v0 + 549) != 1)
  {
    v39 = 0;

LABEL_8:
    v18 = *(_QWORD *)(v0 + 448);
    v17 = *(_QWORD *)(v0 + 456);
    v20 = *(_QWORD *)(v0 + 432);
    v19 = *(_QWORD *)(v0 + 440);
    v22 = *(_QWORD *)(v0 + 416);
    v21 = *(_QWORD *)(v0 + 424);
    v23 = *(_QWORD *)(v0 + 400);
    v24 = *(_QWORD *)(v0 + 408);
    v25 = *(_QWORD *)(v0 + 392);
    v41 = *(_QWORD *)(v0 + 368);
    v43 = *(_QWORD *)(v0 + 360);
    v45 = *(_QWORD *)(v0 + 328);
    sub_30CD4(v18, v17);
    v26 = swift_release(v17);
    (*(void (**)(uint64_t, uint64_t, __n128))(v24 + 8))(v21, v23, v26);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
    swift_task_dealloc(v18);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v25);
    swift_task_dealloc(v41);
    swift_task_dealloc(v43);
    swift_task_dealloc(v45);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v39);
  }
  v36 = (_QWORD *)swift_task_alloc(dword_B8444);
  *(_QWORD *)(v0 + 528) = v36;
  *v36 = v0;
  v36[1] = sub_30B68;
  return sub_35554(2);
}

uint64_t sub_3094C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)(*(_QWORD *)v1 + 16);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 512);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 304);
  *(_QWORD *)(*(_QWORD *)v1 + 520) = a1;
  swift_task_dealloc(v3);
  sub_3789C(v2);
  return swift_task_switch(sub_309B8, v4, 0);
}

uint64_t sub_309B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(_QWORD *)(v0 + 488);
  v1 = *(_QWORD *)(v0 + 496);
  if (*(_QWORD *)(v0 + 520))
  {
    v3 = *(void **)(v0 + 464);
    objc_msgSend((id)objc_opt_self(JSAMetricsAppLaunchEvent), "updateUsedBootstrapFallback:", 0);

    swift_release(v2);
    swift_release(v1);
    sub_3789C((_QWORD *)(v0 + 136));
    v19 = *(_QWORD *)(v0 + 520);
  }
  else
  {
    sub_3789C((_QWORD *)(v0 + 136));
    swift_release(v2);
    swift_release(v1);
    if (*(_BYTE *)(v0 + 549) == 1)
    {
      v4 = (_QWORD *)swift_task_alloc(dword_B8444);
      *(_QWORD *)(v0 + 528) = v4;
      *v4 = v0;
      v4[1] = sub_30B68;
      return sub_35554(2);
    }

    v19 = 0;
  }
  v7 = *(_QWORD *)(v0 + 448);
  v6 = *(_QWORD *)(v0 + 456);
  v9 = *(_QWORD *)(v0 + 432);
  v8 = *(_QWORD *)(v0 + 440);
  v11 = *(_QWORD *)(v0 + 416);
  v10 = *(_QWORD *)(v0 + 424);
  v12 = *(_QWORD *)(v0 + 400);
  v13 = *(_QWORD *)(v0 + 408);
  v14 = *(_QWORD *)(v0 + 392);
  v16 = *(_QWORD *)(v0 + 368);
  v17 = *(_QWORD *)(v0 + 360);
  v18 = *(_QWORD *)(v0 + 328);
  sub_30CD4(v7, v6);
  v15 = swift_release(v6);
  (*(void (**)(uint64_t, uint64_t, __n128))(v13 + 8))(v10, v12, v15);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  swift_task_dealloc(v7);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v19);
}

uint64_t sub_30B68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 528);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 304);
  *(_QWORD *)(*(_QWORD *)v1 + 536) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_30BC8, v3, 0);
}

uint64_t sub_30BC8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *(_QWORD *)(v0 + 536);
  v1 = *(void **)(v0 + 464);
  objc_msgSend((id)objc_opt_self(JSAMetricsAppLaunchEvent), "updateUsedBootstrapFallback:", 1);

  v3 = *(_QWORD *)(v0 + 448);
  v2 = *(_QWORD *)(v0 + 456);
  v5 = *(_QWORD *)(v0 + 432);
  v4 = *(_QWORD *)(v0 + 440);
  v7 = *(_QWORD *)(v0 + 416);
  v6 = *(_QWORD *)(v0 + 424);
  v8 = *(_QWORD *)(v0 + 400);
  v9 = *(_QWORD *)(v0 + 408);
  v10 = *(_QWORD *)(v0 + 392);
  v13 = *(_QWORD *)(v0 + 368);
  v14 = *(_QWORD *)(v0 + 360);
  v15 = *(_QWORD *)(v0 + 328);
  sub_30CD4(v3, v2);
  v11 = swift_release(v2);
  (*(void (**)(uint64_t, uint64_t, __n128))(v9 + 8))(v6, v8, v11);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc(v3);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v10);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v16);
}

uint64_t sub_30CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  uint64_t v15;
  os_signpost_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char v22;
  const char *v23;
  uint64_t v25;
  uint64_t v26;
  os_signpost_id_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  qos_class_t v30;
  uint64_t v31;

  v29 = type metadata accessor for OSSignpostError(0);
  v3 = *(_QWORD *)(v29 - 8);
  ((void (*)(void))__chkstk_darwin)();
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OSSignpostID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = ((uint64_t (*)(void))__chkstk_darwin)();
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v29 - v12;
  v14 = OSSignposter.logHandle.getter(v11);
  v15 = OSSignpostIntervalState.signpostID.getter();
  v16 = static os_signpost_type_t.end.getter(v15);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v17 = swift_retain(a2);
    checkForErrorAndConsumeState(state:)(v17);
    swift_release(a2);
    v18 = v29;
    v19 = v7;
    v20 = v10;
    v21 = v6;
    if ((*(unsigned int (**)(char *, uint64_t))(v3 + 88))(v5, v29) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v22 = 0;
      v23 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v18);
      v23 = "qos: 0x%x";
      v22 = 1;
    }
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v20, v13, v21);
    v25 = swift_slowAlloc(8, -1);
    *(_BYTE *)v25 = 0;
    *(_BYTE *)(v25 + 1) = v22;
    *(_WORD *)(v25 + 2) = 1024;
    v30 = qos_class_self();
    v26 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v25 + 4, v25 + 8);
    v27 = OSSignpostID.rawValue.getter(v26);
    _os_signpost_emit_with_name_impl(&dword_0, v14, v16, v27, "Package Provision", v23, (uint8_t *)v25, 8u);
    swift_slowDealloc(v25, -1, -1);

    v28 = *(void (**)(char *, uint64_t))(v19 + 8);
    v28(v13, v21);
    return ((uint64_t (*)(char *, uint64_t))v28)(v20, v21);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  }
}

uint64_t sub_30F1C@<X0>(void (*a1)(_QWORD, _QWORD)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t (*v43)(char *, _QWORD, _QWORD);
  uint64_t (*v44)(_QWORD, _QWORD, _QWORD);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t (*v52)(char *, char *, _QWORD *);
  char *v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t (*v61)(_QWORD, _QWORD, _QWORD);
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  void (*v66)(_QWORD, _QWORD);
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  void (*v82)(_QWORD, _QWORD);
  uint64_t v83;
  _QWORD *v84;
  id v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(_QWORD, _QWORD, _QWORD);
  char *v91;
  _QWORD *v92;
  Swift::String v93;
  char *v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  void (*v104)(_QWORD, _QWORD);
  char *v105;
  uint64_t (*v106)(_QWORD, _QWORD, _QWORD);
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t (*v119)(_QWORD, _QWORD, _QWORD);
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  uint64_t (*v132)(_QWORD, _QWORD, _QWORD);
  void (*v133)(char *, char *, uint64_t (*)(_QWORD, _QWORD, _QWORD));
  Swift::String v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  char *v140;
  void (*v141)(_QWORD, _QWORD);
  uint64_t v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  void (*v153)(_QWORD, _QWORD);
  _QWORD *v154;
  _QWORD *v155;
  char *v156;
  int v157;
  uint64_t v158;
  void (*v159)(char *, char *, uint64_t (*)(_QWORD, _QWORD, _QWORD));
  char *v160;
  uint64_t (*v161)(_QWORD, _QWORD, _QWORD);
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;

  v4 = v3;
  v152 = a2;
  v153 = a1;
  v155 = a3;
  v5 = sub_29EF0((uint64_t *)&unk_B8CA0);
  __chkstk_darwin(v5);
  v7 = (char *)&v142 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = (_QWORD *)type metadata accessor for URL(0);
  v150 = *(v154 - 1);
  v8 = __chkstk_darwin(v154);
  v144 = (char *)&v142 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v143 = (char *)&v142 - v11;
  v12 = __chkstk_darwin(v10);
  v148 = (char *)&v142 - v13;
  v14 = __chkstk_darwin(v12);
  v149 = (char *)&v142 - v15;
  v16 = __chkstk_darwin(v14);
  v147 = (char *)&v142 - v17;
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v142 - v19;
  __chkstk_darwin(v18);
  v151 = (char *)&v142 - v21;
  v22 = sub_29EF0(&qword_B8498);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (char *)&v142 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_29EF0(&qword_B8438);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v29 = (char *)&v142 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for JetPackAssetRequestSourcePolicy(0);
  v30 = __chkstk_darwin(v161);
  v32 = (char *)&v142 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v30);
  v145 = (char *)&v142 - v34;
  v35 = __chkstk_darwin(v33);
  v156 = (char *)&v142 - v36;
  v37 = __chkstk_darwin(v35);
  v146 = (char *)&v142 - v38;
  __chkstk_darwin(v37);
  v159 = (void (*)(char *, char *, uint64_t (*)(_QWORD, _QWORD, _QWORD)))v4;
  v160 = (char *)&v142 - v40;
  v157 = v4[OBJC_IVAR___JSAPackageProvisioner_isLaunching];
  v158 = v39;
  if (v157 != 1)
    goto LABEL_5;
  if (qword_B80E0 != -1)
    swift_once(&qword_B80E0, sub_44B3C);
  v41 = sub_2D6E0(v26, (uint64_t)qword_B8A00);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v29, v41, v26);
  UserDefault.wrappedValue.getter(&v162, v26);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
  v39 = v158;
  if ((v162 & 1) == 0)
    v42 = (unsigned int *)&enum case for JetPackAssetRequestSourcePolicy.standard(_:);
  else
LABEL_5:
    v42 = (unsigned int *)&enum case for JetPackAssetRequestSourcePolicy.remoteOnly(_:);
  v43 = *(uint64_t (**)(char *, _QWORD, _QWORD))(v39 + 104);
  v44 = v161;
  v45 = v43(v160, *v42, v161);
  if ((static Capabilities.isInternalBuild.getter(v45) & 1) == 0)
    goto LABEL_18;
  if (qword_B80D0 != -1)
    swift_once(&qword_B80D0, sub_448A0);
  v46 = sub_2D6E0(v22, (uint64_t)qword_B89D0);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v25, v46, v22);
  UserDefault.wrappedValue.getter(&v162, v22);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
  v47 = v163;
  if (!v163)
    goto LABEL_18;
  v48 = v162;
  if ((sub_43E40(0x6C61636F6CLL, 0xE500000000000000, v162, v163) & 1) == 0)
  {
    URL.init(string:)(v48, v47);
    swift_bridgeObjectRelease(v47);
    v67 = v150;
    if ((*(unsigned int (**)(char *, uint64_t, _QWORD *))(v150 + 48))(v7, 1, v154) != 1)
    {
      v105 = v148;
      v106 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v154;
      (*(void (**)(char *, char *, _QWORD *))(v67 + 32))(v148, v7, v154);
      v107 = v143;
      v159 = *(void (**)(char *, char *, uint64_t (*)(_QWORD, _QWORD, _QWORD)))(v67 + 16);
      v159(v143, v105, v106);
      v108 = v158;
      v109 = v145;
      v161 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v158 + 16);
      v110 = v161(v145, v160, v44);
      v111 = Logger.logObject.getter(v110);
      v112 = static os_log_type_t.default.getter();
      v113 = v112;
      if (os_log_type_enabled(v111, v112))
      {
        v114 = swift_slowAlloc(32, -1);
        v151 = (char *)swift_slowAlloc(96, -1);
        v162 = (uint64_t)v151;
        v115 = 8 * (char)v152;
        v116 = *(_QWORD *)&aLaunch[v115];
        *(_DWORD *)v114 = 136315650;
        LODWORD(v152) = v113;
        v117 = *(_QWORD *)&aLaunchNlaunchB[v115 + 24];
        v164 = sub_3A180(v116, v117, &v162);
        v118 = v107;
        v119 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v154;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, &v165, v114 + 4, v114 + 12);
        swift_bridgeObjectRelease(v117);
        *(_WORD *)(v114 + 12) = 2082;
        v120 = sub_2A1FC((unint64_t *)&qword_B8500, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v121 = dispatch thunk of CustomStringConvertible.description.getter(v119, v120);
        v123 = v122;
        v164 = sub_3A180(v121, v122, &v162);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, &v165, v114 + 14, v114 + 22);
        swift_bridgeObjectRelease(v123);
        v153 = *(void (**)(_QWORD, _QWORD))(v67 + 8);
        v153(v118, v119);
        *(_WORD *)(v114 + 22) = 2080;
        v124 = v156;
        v125 = v145;
        v161(v156, v145, v44);
        v126 = String.init<A>(describing:)(v124, v44);
        v128 = v127;
        v164 = sub_3A180(v126, v127, &v162);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, &v165, v114 + 24, v114 + 32);
        swift_bridgeObjectRelease(v128);
        v82 = *(void (**)(_QWORD, _QWORD))(v108 + 8);
        v82(v125, v44);
        _os_log_impl(&dword_0, v111, (os_log_type_t)v152, "JSAPackageProvisioner [%s] Step 1: Found user-specified boot url: %{public}s, loading with sourcePolicy %s", (uint8_t *)v114, 0x20u);
        v129 = v151;
        swift_arrayDestroy(v151, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v129, -1, -1);
        swift_slowDealloc(v114, -1, -1);

      }
      else
      {

        v153 = *(void (**)(_QWORD, _QWORD))(v67 + 8);
        v153(v107, v154);
        v82 = *(void (**)(_QWORD, _QWORD))(v108 + 8);
        v82(v109, v44);
        v124 = v156;
      }
      v130 = v144;
      v131 = v148;
      v132 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v154;
      v133 = v159;
      v159(v144, v148, (uint64_t (*)(_QWORD, _QWORD, _QWORD))v154);
      v134._countAndFlagsBits = 0x656A2E7865646E69;
      v134._object = (void *)0xED00006B63617074;
      URL.appendPathComponent(_:)(v134);
      v135 = v157;
      if (v157)
        v136 = 0x402E000000000000;
      else
        v136 = 0;
      v137 = swift_allocObject(&unk_A07F0, 25, 7);
      *(_QWORD *)(v137 + 16) = v136;
      *(_BYTE *)(v137 + 24) = v135 ^ 1;
      v138 = type metadata accessor for ValidatedJetPackAssetLocations.URLLocation(0);
      v139 = v155;
      v155[3] = v138;
      v139[4] = sub_2A1FC(&qword_B84F8, (uint64_t (*)(uint64_t))&type metadata accessor for ValidatedJetPackAssetLocations.URLLocation, (uint64_t)&protocol conformance descriptor for ValidatedJetPackAssetLocations.URLLocation);
      sub_37FA8(v139);
      v140 = v149;
      v133(v149, v130, v132);
      v69 = v160;
      v161(v124, v160, v44);
      ValidatedJetPackAssetLocations.URLLocation.init(_:sourcePolicy:requestConfiguration:)(v140, v124, sub_381BC, v137);
      v141 = v153;
      v153(v130, v132);
      v141(v131, v132);
      return ((uint64_t (*)(char *, uint64_t (*)(_QWORD, _QWORD, _QWORD)))v82)(v69, v44);
    }
    sub_2E618((uint64_t)v7, (uint64_t *)&unk_B8CA0);
LABEL_18:
    v68 = v158;
    v69 = v160;
    v154 = *(_QWORD **)(v158 + 16);
    v70 = ((uint64_t (*)(char *, char *, _QWORD))v154)(v32, v160, v44);
    v71 = Logger.logObject.getter(v70);
    v72 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v71, v72))
    {
      v73 = swift_slowAlloc(22, -1);
      v74 = swift_slowAlloc(64, -1);
      v162 = v74;
      v75 = 8 * (char)v152;
      v76 = *(_QWORD *)&aLaunch[v75];
      *(_DWORD *)v73 = 136315394;
      v77 = *(_QWORD *)&aLaunchNlaunchB[v75 + 24];
      v164 = sub_3A180(v76, v77, &v162);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, &v165, v73 + 4, v73 + 12);
      swift_bridgeObjectRelease(v77);
      *(_WORD *)(v73 + 12) = 2080;
      v78 = v156;
      ((void (*)(char *, char *, uint64_t (*)(_QWORD, _QWORD, _QWORD)))v154)(v156, v32, v161);
      v79 = String.init<A>(describing:)(v78, v161);
      v81 = v80;
      v164 = sub_3A180(v79, v80, &v162);
      v69 = v160;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, &v165, v73 + 14, v73 + 22);
      swift_bridgeObjectRelease(v81);
      v82 = *(void (**)(_QWORD, _QWORD))(v68 + 8);
      v82(v32, v161);
      _os_log_impl(&dword_0, v71, v72, "JSAPackageProvisioner [%s] Step 1: Loading JetPack using Bag Key with sourcePolicy %s", (uint8_t *)v73, 0x16u);
      swift_arrayDestroy(v74, 2, (char *)&type metadata for Any + 8);
      v83 = v74;
      v44 = v161;
      swift_slowDealloc(v83, -1, -1);
      swift_slowDealloc(v73, -1, -1);

      v84 = v155;
    }
    else
    {

      v82 = *(void (**)(_QWORD, _QWORD))(v68 + 8);
      v82(v32, v44);
      v84 = v155;
      v78 = v156;
    }
    v85 = objc_msgSend((id)objc_opt_self(BUBag), "jsAppUrlKey");
    v86 = v157;
    if (v157)
      v87 = 0x402E000000000000;
    else
      v87 = 0;
    v88 = swift_allocObject(&unk_A07C8, 25, 7);
    *(_QWORD *)(v88 + 16) = v87;
    *(_BYTE *)(v88 + 24) = v86 ^ 1;
    v84[3] = type metadata accessor for ValidatedJetPackAssetLocations.BagKeyLocation(0);
    v84[4] = sub_2A1FC(&qword_B8520, (uint64_t (*)(uint64_t))&type metadata accessor for ValidatedJetPackAssetLocations.BagKeyLocation, (uint64_t)&protocol conformance descriptor for ValidatedJetPackAssetLocations.BagKeyLocation);
    sub_37FA8(v84);
    ((void (*)(char *, char *, uint64_t (*)(_QWORD, _QWORD, _QWORD)))v154)(v78, v69, v44);
    v89 = (void (*)(_QWORD, _QWORD, _QWORD))v159;
    swift_retain(v159);
    ValidatedJetPackAssetLocations.BagKeyLocation.init(_:bag:sourcePolicy:urlTransformer:requestConfiguration:)(v85, v153, v78, sub_38070, v89, sub_381BC, v88);
    return ((uint64_t (*)(_QWORD, _QWORD))v82)(v69, v44);
  }
  swift_bridgeObjectRelease(v47);
  v49 = v150;
  if (qword_B8090 != -1)
    swift_once(&qword_B8090, sub_2EFC8);
  v50 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v154;
  v51 = sub_2D6E0((uint64_t)v154, (uint64_t)qword_B8388);
  v52 = *(uint64_t (**)(char *, char *, _QWORD *))(v49 + 16);
  v53 = v151;
  v52(v151, (char *)v51, v50);
  v54 = v52(v20, v53, v50);
  v55 = Logger.logObject.getter(v54);
  v56 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v55, v56))
  {
    v57 = swift_slowAlloc(22, -1);
    v153 = (void (*)(_QWORD, _QWORD))swift_slowAlloc(64, -1);
    v162 = (uint64_t)v153;
    v58 = 8 * (char)v152;
    v59 = *(_QWORD *)&aLaunch[v58];
    *(_DWORD *)v57 = 136315394;
    v60 = *(_QWORD *)&aLaunchNlaunchB[v58 + 24];
    v61 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v154;
    v164 = sub_3A180(v59, v60, &v162);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, &v165, v57 + 4, v57 + 12);
    swift_bridgeObjectRelease(v60);
    *(_WORD *)(v57 + 12) = 2082;
    v62 = sub_2A1FC((unint64_t *)&qword_B8500, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v63 = dispatch thunk of CustomStringConvertible.description.getter(v61, v62);
    v65 = v64;
    v164 = sub_3A180(v63, v64, &v162);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, &v165, v57 + 14, v57 + 22);
    swift_bridgeObjectRelease(v65);
    v159 = *(void (**)(char *, char *, uint64_t (*)(_QWORD, _QWORD, _QWORD)))(v150 + 8);
    ((void (*)(char *, uint64_t (*)(_QWORD, _QWORD, _QWORD)))v159)(v20, v61);
    _os_log_impl(&dword_0, v55, v56, "JSAPackageProvisioner [%s] Step 1: Found user-specified boot url: local, i.e. %{public}s, loading with sourcePolicy .remoteOnly", (uint8_t *)v57, 0x16u);
    v66 = v153;
    swift_arrayDestroy(v153, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v66, -1, -1);
    swift_slowDealloc(v57, -1, -1);

  }
  else
  {

    v159 = *(void (**)(char *, char *, uint64_t (*)(_QWORD, _QWORD, _QWORD)))(v49 + 8);
    ((void (*)(char *, _QWORD *))v159)(v20, v154);
  }
  v69 = v160;
  v91 = v147;
  v92 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v154;
  v52(v147, v151, v154);
  v93._countAndFlagsBits = 0x656A2E7865646E69;
  v93._object = (void *)0xED00006B63617074;
  URL.appendPathComponent(_:)(v93);
  v94 = v146;
  v44 = v161;
  v43(v146, enum case for JetPackAssetRequestSourcePolicy.remoteOnly(_:), v161);
  v95 = v157;
  if (v157)
    v96 = 0x402E000000000000;
  else
    v96 = 0;
  v97 = swift_allocObject(&unk_A0818, 25, 7);
  *(_QWORD *)(v97 + 16) = v96;
  *(_BYTE *)(v97 + 24) = v95 ^ 1;
  v98 = type metadata accessor for ValidatedJetPackAssetLocations.URLLocation(0);
  v99 = v155;
  v155[3] = v98;
  v99[4] = sub_2A1FC(&qword_B84F8, (uint64_t (*)(uint64_t))&type metadata accessor for ValidatedJetPackAssetLocations.URLLocation, (uint64_t)&protocol conformance descriptor for ValidatedJetPackAssetLocations.URLLocation);
  sub_37FA8(v99);
  v100 = v149;
  v52(v149, v91, v92);
  v101 = v158;
  v102 = v156;
  (*(void (**)(char *, char *, uint64_t (*)(_QWORD, _QWORD, _QWORD)))(v158 + 16))(v156, v94, v44);
  ValidatedJetPackAssetLocations.URLLocation.init(_:sourcePolicy:requestConfiguration:)(v100, v102, sub_381BC, v97);
  v82 = *(void (**)(_QWORD, _QWORD))(v101 + 8);
  v82(v94, v44);
  v103 = v91;
  v104 = (void (*)(_QWORD, _QWORD))v159;
  ((void (*)(char *, _QWORD *))v159)(v103, v92);
  v104(v151, v92);
  return ((uint64_t (*)(_QWORD, _QWORD))v82)(v69, v44);
}

uint64_t sub_31D58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  _QWORD *v6;
  _QWORD *v9;

  v6[2] = a1;
  v6[3] = a4;
  v9 = (_QWORD *)swift_task_alloc(dword_B8474);
  v6[4] = v9;
  *v9 = v6;
  v9[1] = sub_31DC0;
  return sub_31E30(a5, a6);
}

uint64_t sub_31DC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 40) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_31E1C, v3, 0);
}

uint64_t sub_31E1C()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_31E30(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v3 + 888) = v2;
  *(_BYTE *)(v3 + 1120) = a2;
  *(_QWORD *)(v3 + 880) = a1;
  v4 = sub_29EF0(&qword_B8498);
  *(_QWORD *)(v3 + 896) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 904) = v5;
  *(_QWORD *)(v3 + 912) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for BooksJetPackResourceBundle(0);
  *(_QWORD *)(v3 + 920) = v6;
  v7 = (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 928) = swift_task_alloc(v7);
  *(_QWORD *)(v3 + 936) = swift_task_alloc(v7);
  v8 = type metadata accessor for InMemoryJetPackResourceBundle(0);
  *(_QWORD *)(v3 + 944) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v3 + 952) = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 960) = swift_task_alloc(v10);
  *(_QWORD *)(v3 + 968) = swift_task_alloc(v10);
  v11 = type metadata accessor for URL(0);
  *(_QWORD *)(v3 + 976) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v3 + 984) = v12;
  *(_QWORD *)(v3 + 992) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (*(_QWORD *)(*(_QWORD *)(sub_29EF0(&qword_B84A8) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 1000) = swift_task_alloc(v13);
  *(_QWORD *)(v3 + 1008) = swift_task_alloc(v13);
  *(_QWORD *)(v3 + 1016) = swift_task_alloc(v13);
  v14 = sub_29EF0(&qword_B84B0);
  *(_QWORD *)(v3 + 1024) = v14;
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v3 + 1032) = v15;
  *(_QWORD *)(v3 + 1040) = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for JetPackAssetSession.Configuration(0);
  *(_QWORD *)(v3 + 1048) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ValidatedJetPackLoadingCoordinator(0);
  *(_QWORD *)(v3 + 1056) = v17;
  v18 = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(v3 + 1064) = v18;
  *(_QWORD *)(v3 + 1072) = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_31FE4, v2, 0);
}

uint64_t sub_31FE4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18[6];

  *(_QWORD *)(v1 + 1080) = OBJC_IVAR___JSAPackageProvisioner_logger;
  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(char *)(v1 + 1120);
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    *(_DWORD *)v5 = 136315138;
    v7 = *(_QWORD *)&aLaunch[8 * v4];
    v18[0] = v6;
    v8 = *(_QWORD *)&aLaunchNlaunchB[8 * v4 + 24];
    *(_QWORD *)(v1 + 872) = sub_3A180(v7, v8, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 872, v1 + 880, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease(v8);
    _os_log_impl(&dword_0, v2, v3, "JSAPackageProvisioner [%s] Step 2: Computing bootURL from defaults or bag", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v9 = objc_msgSend((id)objc_opt_self(BUBag), "defaultBag");
  *(_QWORD *)(v1 + 1088) = v9;
  v10 = type metadata accessor for JetPackAssetDiskCache(0);
  v11 = JetPackAssetDiskCache.__allocating_init()();
  *(_QWORD *)(v1 + 1096) = v11;
  v12 = *(_QWORD *)(v1 + 1048);
  v13 = *(_QWORD *)(v1 + 880);
  v18[3] = v10;
  v18[4] = (uint64_t)&protocol witness table for JetPackAssetDiskCache;
  v18[0] = v11;
  swift_retain(v11);
  JetPackAssetSession.Configuration.init(cache:)(v18);
  v14 = type metadata accessor for JetPackAssetSession(0);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v15 = JetPackAssetSession.init(configuration:)(v12);
  sub_37824(v13, v1 + 680);
  ValidatedJetPackLoadingCoordinator.init(session:assetLocation:bag:)(v15, v1 + 680, v9);
  v16 = (_QWORD *)swift_task_alloc(async function pointer to ValidatedJetPackLoadingCoordinator.getJetPackAsset<A>(unpackAsset:)[1]);
  *(_QWORD *)(v1 + 1104) = v16;
  *v16 = v1;
  v16[1] = sub_324E0;
  return ValidatedJetPackLoadingCoordinator.getJetPackAsset<A>(unpackAsset:)(*(_QWORD *)(v1 + 1040), &unk_B84C8, *(_QWORD *)(v1 + 888), *(_QWORD *)(v1 + 944), &protocol witness table for InMemoryJetPackResourceBundle);
}

uint64_t sub_324E0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1104);
  *(_QWORD *)(*v1 + 1112) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_34450;
  else
    v4 = sub_32544;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 888), 0);
}

void sub_32544()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  objc_class *v39;
  _BYTE *v40;
  uint64_t *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44[2];

  v1 = *(_QWORD *)(v0 + 1016);
  v2 = *(_QWORD *)(v0 + 1008);
  sub_37824(*(_QWORD *)(v0 + 880), v0 + 640);
  v3 = sub_29EF0(&qword_B8468);
  v4 = type metadata accessor for ValidatedJetPackAssetLocations.URLLocation(0);
  v5 = swift_dynamicCast(v1, v0 + 640, v3, v4, 6);
  v6 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v1, v5 ^ 1u, 1, v4);
  v7 = sub_37B7C(v1, v2, &qword_B84A8);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v42 = v9;
    v10 = *(char *)(v0 + 1120);
    v11 = swift_slowAlloc(22, -1);
    v43 = swift_slowAlloc(64, -1);
    v44[0] = v43;
    v12 = *(_QWORD *)&aLaunch[8 * v10];
    *(_DWORD *)v11 = 136315394;
    v13 = *(_QWORD *)&aLaunchNlaunchB[8 * v10 + 24];
    v14 = *(_QWORD *)(v0 + 1008);
    v15 = *(_QWORD *)(v0 + 1000);
    *(_QWORD *)(v0 + 856) = sub_3A180(v12, v13, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 856, v0 + 864, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease(v13);
    *(_WORD *)(v11 + 12) = 2082;
    sub_37B7C(v14, v15, &qword_B84A8);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v15, 1, v4);
    v17 = *(_QWORD *)(v0 + 1000);
    if (v16 == 1)
    {
      sub_2E618(*(_QWORD *)(v0 + 1000), &qword_B84A8);
      v18 = 0xE300000000000000;
      v19 = 6775138;
    }
    else
    {
      v21 = *(_QWORD *)(v0 + 992);
      v22 = *(_QWORD *)(v0 + 984);
      v23 = *(_QWORD *)(v0 + 976);
      ValidatedJetPackAssetLocations.URLLocation.url.getter();
      v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v17, v4);
      v19 = URL.description.getter(v24);
      v18 = v25;
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    }
    v26 = *(_QWORD *)(v0 + 1008);
    *(_QWORD *)(v0 + 864) = sub_3A180(v19, v18, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 864, v0 + 872, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease(v18);
    sub_2E618(v26, &qword_B84A8);
    _os_log_impl(&dword_0, v8, v42, "JSAPackageProvisioner [%s] Step 3: Decrypting and verifying JetPack from %{public}s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v43, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {
    v20 = *(_QWORD *)(v0 + 1008);

    sub_2E618(v20, &qword_B84A8);
  }
  v27 = *(_QWORD *)(v0 + 1024);
  v28 = *(_QWORD *)(v0 + 968);
  v29 = *(_QWORD *)(v0 + 960);
  v30 = *(_QWORD *)(v0 + 952);
  v31 = *(_QWORD *)(v0 + 944);
  v32 = *(char *)(v0 + 1120);
  v33 = sub_36C80(*(_QWORD *)(v0 + 1040), *(_QWORD *)(v0 + 1016));
  v35 = v34;
  ValidatedJetPackLoadingCoordinator.ValidatedJetPackResult.bundle.getter(v27);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v29, v28, v31);
  v36 = *(uint64_t **)(v0 + 936);
  v37 = *(_QWORD *)(v0 + 928);
  v38 = *(unsigned __int8 *)(v0 + 1120);
  BooksJetPackResourceBundle.init(memoryJetPack:provisionMode:)(*(char **)(v0 + 960), *(_QWORD *)&aLaunch[8 * v32], *(_QWORD *)&aLaunchNlaunchB[8 * v32 + 24], v36);
  sub_37BC0((uint64_t)v36, v37);
  v39 = (objc_class *)type metadata accessor for Package(0);
  v40 = objc_allocWithZone(v39);
  sub_37BC0(v37, (uint64_t)&v40[OBJC_IVAR___JSAPackage_jetPack]);
  v41 = (uint64_t *)&v40[OBJC_IVAR___JSAPackage_nameForJSContext];
  *v41 = v33;
  v41[1] = v35;
  v40[OBJC_IVAR___JSAPackage_isBundled] = 0;
  *(_QWORD *)(v0 + 720) = v40;
  *(_QWORD *)(v0 + 728) = v39;
  swift_bridgeObjectRetain(v35);
  objc_msgSendSuper2((objc_super *)(v0 + 720), "init");
  sub_37C04(v37);
  __asm { BR              X9 }
}

uint64_t sub_329E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,os_log_t log,os_log_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  uint64_t v54;
  void *v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  uint64_t v83;
  uint64_t v84;
  uint8_t *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  NSObject *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  os_log_type_t v138;
  uint64_t v139;

  sub_50D20();
  v57 = *(_BYTE *)(*(_QWORD *)(v56 - 96) + 1120);
  v58 = swift_allocObject(&unk_9FF58, 17, 7);
  *(_BYTE *)(v58 + 16) = v57;
  v59 = swift_allocObject(&unk_9FF80, 32, 7);
  *(_QWORD *)(v59 + 16) = sub_37C50;
  *(_QWORD *)(v59 + 24) = v58;
  v60 = v59;
  *(_QWORD *)(v56 - 136) = v59;
  v61 = swift_allocObject(&unk_9FFA8, 24, 7);
  *(_QWORD *)(v61 + 16) = v55;
  *(_QWORD *)(v56 - 128) = v61;
  v62 = swift_allocObject(&unk_9FFD0, 32, 7);
  *(_QWORD *)(v56 - 104) = v62;
  *(_QWORD *)(v62 + 16) = *(_QWORD *)(v56 - 120);
  *(_QWORD *)(v62 + 24) = v54;
  v63 = v55;
  ((void (*)())swift_bridgeObjectRetain)();
  *(_QWORD *)(v56 - 112) = v63;
  v130 = v58;
  v64 = swift_retain(v58);
  *(_QWORD *)(v56 - 168) = Logger.logObject.getter(v64);
  v138 = static os_log_type_t.default.getter();
  v65 = swift_allocObject(&unk_9FFF8, 17, 7);
  *(_BYTE *)(v65 + 16) = 32;
  v66 = swift_allocObject(&unk_A0020, 17, 7);
  *(_BYTE *)(v66 + 16) = 8;
  v67 = swift_allocObject(&unk_A0048, 32, 7);
  *(_QWORD *)(v67 + 16) = sub_37C5C;
  *(_QWORD *)(v67 + 24) = v60;
  v68 = swift_allocObject(&unk_A0070, 32, 7);
  *(_QWORD *)(v68 + 16) = sub_37D14;
  *(_QWORD *)(v68 + 24) = v67;
  v69 = v68;
  *(_QWORD *)(v56 - 152) = v68;
  v70 = swift_allocObject(&unk_A0098, 17, 7);
  *(_QWORD *)(v56 - 144) = v70;
  *(_BYTE *)(v70 + 16) = 34;
  v71 = swift_allocObject(&unk_A00C0, 17, 7);
  *(_QWORD *)(v56 - 160) = v71;
  *(_BYTE *)(v71 + 16) = 8;
  v72 = swift_allocObject(&unk_A00E8, 32, 7);
  *(_QWORD *)(v72 + 16) = sub_37CA8;
  *(_QWORD *)(v72 + 24) = v61;
  v73 = swift_allocObject(&unk_A0110, 32, 7);
  *(_QWORD *)(v73 + 16) = sub_38144;
  *(_QWORD *)(v73 + 24) = v72;
  v135 = v73;
  v137 = swift_allocObject(&unk_A0138, 17, 7);
  *(_BYTE *)(v137 + 16) = 34;
  v136 = swift_allocObject(&unk_A0160, 17, 7);
  *(_BYTE *)(v136 + 16) = 8;
  v74 = swift_allocObject(&unk_A0188, 32, 7);
  v75 = *(_QWORD *)(v56 - 104);
  *(_QWORD *)(v74 + 16) = sub_37CC0;
  *(_QWORD *)(v74 + 24) = v75;
  v76 = swift_allocObject(&unk_A01B0, 32, 7);
  *(_QWORD *)(v76 + 16) = sub_38144;
  *(_QWORD *)(v76 + 24) = v74;
  v77 = sub_29EF0(&qword_B84D0);
  v78 = ((uint64_t (*)(uint64_t))swift_initStackObject)(v77);
  sub_53258(v78, 9);
  *v79 = sub_37CFC;
  v79[1] = v65;
  v79[2] = sub_3814C;
  v79[3] = v66;
  v79[4] = sub_37D1C;
  v79[5] = v69;
  v80 = *(_QWORD *)(v56 - 144);
  v79[6] = sub_3814C;
  v79[7] = v80;
  v81 = *(_QWORD *)(v56 - 160);
  v79[8] = sub_3814C;
  v79[9] = v81;
  v79[10] = sub_38148;
  v79[11] = v73;
  v79[12] = sub_3814C;
  v79[13] = v137;
  v79[14] = sub_3814C;
  v79[15] = v136;
  v79[16] = sub_38148;
  v79[17] = v76;
  swift_retain(*(_QWORD *)(v56 - 136));
  v128 = v67;
  swift_retain(v67);
  swift_retain(*(_QWORD *)(v56 - 128));
  v132 = v72;
  swift_retain(v72);
  v82 = *(NSObject **)(v56 - 168);
  swift_retain(*(_QWORD *)(v56 - 104));
  swift_retain(v74);
  v126 = v65;
  swift_retain(v65);
  swift_retain(v66);
  swift_retain(*(_QWORD *)(v56 - 152));
  swift_retain(v80);
  swift_retain(v81);
  swift_retain(v73);
  swift_retain(v137);
  swift_retain(v136);
  swift_retain(v76);
  ((void (*)())swift_bridgeObjectRelease)();
  if (os_log_type_enabled(v82, v138))
  {
    v123 = v74;
    v83 = *(_QWORD *)(v56 - 96);
    v84 = *(char *)(v83 + 1120);
    v85 = (uint8_t *)swift_slowAlloc(32, -1);
    v118 = swift_slowAlloc(96, -1);
    *(_QWORD *)(v56 - 88) = v118;
    *(_WORD *)v85 = 770;
    v85[2] = 32;
    swift_release(v65);
    v85[3] = 8;
    swift_release(v66);
    v86 = *(_QWORD *)&aLaunch[8 * v84];
    v87 = *(_QWORD *)&aLaunchNlaunchB[8 * v84 + 24];
    v88 = *(_QWORD *)(v83 + 920);
    *(_QWORD *)(v83 + 768) = sub_3A180(v86, v87, (uint64_t *)(v56 - 88));
    ((void (*)(uint8_t *, uint8_t *))UnsafeMutableRawBufferPointer.copyMemory(from:))(v85 + 4, v85 + 12);
    swift_release(v130);
    swift_release(*(_QWORD *)(v56 - 136));
    swift_release(v128);
    swift_release(*(_QWORD *)(v56 - 152));
    ((void (*)())swift_bridgeObjectRelease)();
    v85[12] = 34;
    swift_release(*(_QWORD *)(v56 - 144));
    v85[13] = 8;
    swift_release(*(_QWORD *)(v56 - 160));
    v89 = sub_2A1FC(&qword_B84D8, type metadata accessor for BooksJetPackResourceBundle, (uint64_t)&protocol conformance descriptor for BooksJetPackResourceBundle);
    v90 = JetPackResourceBundle.version.getter(v88, v89);
    if (v91)
    {
      v92 = v90;
      v93 = v91;
    }
    else
    {
      if (qword_B8130 != -1)
        swift_once(&qword_B8130, sub_51450);
      v92 = qword_BC9A8;
      v93 = unk_BC9B0;
      ((void (*)())swift_bridgeObjectRetain)();
    }
    v94 = *(_QWORD **)(v56 - 96);
    v99 = v94[137];
    v100 = (void *)v94[136];
    v101 = v94[134];
    v102 = v94[133];
    *(_QWORD *)(v56 - 144) = v94[132];
    *(_QWORD *)(v56 - 136) = v101;
    *(_QWORD *)(v56 - 160) = v94[130];
    *(_QWORD *)(v56 - 152) = v102;
    v129 = v94[129];
    v131 = v94[128];
    v103 = v94[119];
    v125 = v94[118];
    v127 = v94[121];
    v104 = v94[117];
    v94[94] = sub_3A180(v92, v93, (uint64_t *)(v56 - 88));
    ((void (*)(uint8_t *, uint8_t *))UnsafeMutableRawBufferPointer.copyMemory(from:))(v85 + 14, v85 + 22);

    swift_release(*(_QWORD *)(v56 - 128));
    swift_release(v132);
    swift_release(v135);
    ((void (*)())swift_bridgeObjectRelease)();
    v85[22] = 34;
    swift_release(v137);
    v85[23] = 8;
    swift_release(v136);
    ((void (*)())swift_bridgeObjectRetain)();
    v94[95] = sub_3A180(*(_QWORD *)(v56 - 120), v134, (uint64_t *)(v56 - 88));
    ((void (*)(uint8_t *, uint8_t *))UnsafeMutableRawBufferPointer.copyMemory(from:))(v85 + 24, v85 + 32);
    swift_release(*(_QWORD *)(v56 - 104));
    swift_release(v123);
    swift_release(v76);
    ((void (*)(uint64_t))swift_bridgeObjectRelease_n)(2);
    v105 = *(NSObject **)(v56 - 168);
    _os_log_impl(&dword_0, v105, v138, "JSAPackageProvisioner [%s] Done: Provision succeeded with version=%{public}s, name=%{public}s", v85, 0x20u);
    swift_arrayDestroy(v118, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v118, -1, -1);
    swift_slowDealloc(v85, -1, -1);
    swift_release(v99);

    sub_37C04(v104);
    (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v127, v125);
    (*(void (**)(_QWORD, uint64_t))(v129 + 8))(*(_QWORD *)(v56 - 160), v131);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v56 - 152) + 8))(*(_QWORD *)(v56 - 136), *(_QWORD *)(v56 - 144));
  }
  else
  {
    v94 = *(_QWORD **)(v56 - 96);
    v95 = v94[137];
    v96 = (void *)v94[136];
    v97 = v94[134];
    v139 = v94[133];
    *(_QWORD *)(v56 - 120) = v94[132];
    v133 = v94[130];
    v122 = v94[129];
    v124 = v94[128];
    v119 = v94[119];
    v120 = v94[118];
    v121 = v94[121];
    v98 = v94[117];
    swift_release(v95);

    swift_release(v126);
    swift_release(v66);
    swift_release(v130);
    swift_release(*(_QWORD *)(v56 - 136));
    swift_release(v128);
    swift_release(*(_QWORD *)(v56 - 152));
    swift_release(*(_QWORD *)(v56 - 144));
    swift_release(*(_QWORD *)(v56 - 160));

    swift_release(*(_QWORD *)(v56 - 128));
    swift_release(v132);
    swift_release(v73);
    swift_release(v137);
    swift_release(v136);
    ((void (*)())swift_bridgeObjectRelease)();
    swift_release(*(_QWORD *)(v56 - 104));
    swift_release(v74);
    swift_release(v76);

    sub_37C04(v98);
    (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v121, v120);
    (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v133, v124);
    (*(void (**)(uint64_t, _QWORD))(v139 + 8))(v97, *(_QWORD *)(v56 - 120));
  }
  v106 = v94;
  sub_2E618(v94[127], &qword_B84A8);
  v107 = v94[134];
  v108 = v94[131];
  v109 = v94[130];
  v110 = v94[127];
  v111 = v94[126];
  v112 = v94[125];
  v113 = v106[124];
  v114 = v106[121];
  v115 = v106[120];
  v116 = v106[117];
  *(_QWORD *)(v56 - 120) = v106[116];
  *(_QWORD *)(v56 - 104) = v106[114];
  swift_task_dealloc(v107);
  swift_task_dealloc(v108);
  swift_task_dealloc(v109);
  swift_task_dealloc(v110);
  swift_task_dealloc(v111);
  swift_task_dealloc(v112);
  swift_task_dealloc(v113);
  swift_task_dealloc(v114);
  swift_task_dealloc(v115);
  swift_task_dealloc(v116);
  swift_task_dealloc(*(_QWORD *)(v56 - 120));
  swift_task_dealloc(*(_QWORD *)(v56 - 104));
  return ((uint64_t (*)(_QWORD))v106[1])(*(_QWORD *)(v56 - 112));
}

uint64_t sub_34450()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  __n128 v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *(_QWORD *)(v0 + 1096);
  v2 = *(_QWORD *)(v0 + 1072);
  v3 = *(_QWORD *)(v0 + 1064);
  v4 = *(_QWORD *)(v0 + 1056);

  v5 = swift_release(v1);
  v6.n128_f64[0] = (*(double (**)(uint64_t, uint64_t, __n128))(v3 + 8))(v2, v4, v5);
  v7 = *(_QWORD *)(v0 + 1112);
  swift_errorRetain(v7, v6);
  v9 = swift_errorRetain(v7, v8);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = *(char *)(v0 + 1120);
    v13 = swift_slowAlloc(22, -1);
    v14 = (uint64_t *)swift_slowAlloc(8, -1);
    v15 = swift_slowAlloc(32, -1);
    v33 = v15;
    v16 = *(_QWORD *)&aLaunch[8 * v12];
    *(_DWORD *)v13 = 136315394;
    v17 = *(_QWORD *)&aLaunchNlaunchB[8 * v12 + 24];
    *(_QWORD *)(v0 + 816) = sub_3A180(v16, v17, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 816, v0 + 824, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v13 + 12) = 2112;
    swift_errorRetain(v7, v18);
    v19 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 808) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 808, v0 + 816, v13 + 14, v13 + 22);
    *v14 = v19;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl(&dword_0, v10, v11, "JSAPackageProvisioner [%s] Error: Provision failed due to error=%@", (uint8_t *)v13, 0x16u);
    v20 = sub_29EF0(&qword_B84B8);
    swift_arrayDestroy(v14, 1, v20);
    swift_slowDealloc(v14, -1, -1);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v13, -1, -1);
    swift_errorRelease(v7);

  }
  else
  {
    swift_errorRelease(v7);

    swift_errorRelease(v7);
    swift_errorRelease(v7);
  }
  v21 = *(_QWORD *)(v0 + 1048);
  v22 = *(_QWORD *)(v0 + 1040);
  v23 = *(_QWORD *)(v0 + 1016);
  v24 = *(_QWORD *)(v0 + 1008);
  v25 = *(_QWORD *)(v0 + 1000);
  v26 = *(_QWORD *)(v0 + 992);
  v27 = *(_QWORD *)(v0 + 968);
  v28 = *(_QWORD *)(v0 + 960);
  v29 = *(_QWORD *)(v0 + 936);
  v31 = *(_QWORD *)(v0 + 928);
  v32 = *(_QWORD *)(v0 + 912);
  swift_task_dealloc(*(_QWORD *)(v0 + 1072));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_34738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_34750, 0, 0);
}

uint64_t sub_34750()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = sub_347A4;
  return static Task<>.sleep(nanoseconds:)(15000000000);
}

uint64_t sub_347A4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 24);
  v3 = *v1;
  swift_task_dealloc(v2);
  if (v0)
    return (*(uint64_t (**)(void))(v3 + 8))();
  else
    return swift_task_switch(sub_34810, 0, 0);
}

uint64_t sub_34810()
{
  uint64_t v0;

  sub_29EF0(&qword_B8460);
  Task.cancel()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_34868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned __int8 v16;
  _QWORD v18[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_2E618(a1, &qword_B8B00);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (!v9)
    {
LABEL_6:
      v15 = 0;
      return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v16 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (!v9)
      goto LABEL_6;
  }
  v10 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType(v9);
  swift_unknownObjectRetain(v9);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
  v14 = v13;
  swift_unknownObjectRelease(v9);
  if (!(v14 | v12))
    goto LABEL_6;
  v18[0] = 0;
  v18[1] = 0;
  v15 = v18;
  v18[2] = v12;
  v18[3] = v14;
  return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
}

uint64_t sub_3499C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)(v6 + 208) = a6;
  *(_QWORD *)(v6 + 104) = a4;
  *(_QWORD *)(v6 + 112) = a5;
  v7 = sub_29EF0(&qword_B8498);
  *(_QWORD *)(v6 + 120) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 128) = v8;
  *(_QWORD *)(v6 + 136) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  *(_QWORD *)(v6 + 144) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v6 + 152) = v10;
  *(_QWORD *)(v6 + 160) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_29EF0(&qword_B84A0);
  *(_QWORD *)(v6 + 168) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ValidatedJetPackAssetLocations.BagKeyLocation(0);
  *(_QWORD *)(v6 + 176) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 184) = v13;
  *(_QWORD *)(v6 + 192) = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_34A78, 0, 0);
}

uint64_t sub_34A78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 168);
  sub_37824(*(_QWORD *)(v0 + 104), v0 + 16);
  v4 = sub_29EF0(&qword_B8468);
  v5 = swift_dynamicCast(v3, v0 + 16, v4, v1, 6);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56);
  if ((v5 & 1) != 0)
  {
    v8 = *(_QWORD *)(v0 + 184);
    v7 = *(_QWORD *)(v0 + 192);
    v10 = *(_QWORD *)(v0 + 168);
    v9 = *(_QWORD *)(v0 + 176);
    v6(v10, 0, 1, v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v7, v10, v9);
    v11 = (_QWORD *)swift_task_alloc(async function pointer to ValidatedJetPackAssetLocations.BagKeyLocation.url()[1]);
    *(_QWORD *)(v0 + 200) = v11;
    *v11 = v0;
    v11[1] = sub_34BAC;
    return ValidatedJetPackAssetLocations.BagKeyLocation.url()(*(_QWORD *)(v0 + 160));
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 168);
    v6(v13, 1, 1, *(_QWORD *)(v0 + 176));
    sub_2E618(v13, &qword_B84A0);
    v14 = *(_QWORD *)(v0 + 160);
    v15 = *(_QWORD *)(v0 + 168);
    v16 = *(_QWORD *)(v0 + 136);
    swift_task_dealloc(*(_QWORD *)(v0 + 192));
    swift_task_dealloc(v15);
    swift_task_dealloc(v14);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_34BAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 200));
  if (v0)
  {
    swift_errorRelease(v0);
    v2 = sub_34F7C;
  }
  else
  {
    v2 = sub_34C18;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_34C18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = *(_QWORD *)(v0 + 152);
  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = URL.absoluteString.getter();
  v6 = v5;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (qword_B80D8 != -1)
    swift_once(&qword_B80D8, sub_44988);
  v8 = *(_QWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v0 + 136);
  v9 = *(_QWORD *)(v0 + 120);
  v10 = sub_2D6E0(v9, (uint64_t)qword_B89E8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  v11(v7, v10, v9);
  UserDefault.wrappedValue.getter((_QWORD *)(v0 + 56), v9);
  v12 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v12(v7, v9);
  v13 = *(_QWORD *)(v0 + 64);
  if (v13)
  {
    v14 = *(_QWORD *)(v0 + 56);
    if (v14 == v4 && v13 == v6)
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
LABEL_8:
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176));
      swift_bridgeObjectRelease(v6);
      goto LABEL_12;
    }
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, *(_QWORD *)(v0 + 64), v4, v6, 0);
    swift_bridgeObjectRelease(v13);
    if ((v15 & 1) != 0)
      goto LABEL_8;
  }
  v16 = *(_QWORD *)(v0 + 136);
  v17 = *(_QWORD *)(v0 + 120);
  v11(v16, v10, v17);
  *(_QWORD *)(v0 + 72) = v4;
  *(_QWORD *)(v0 + 80) = v6;
  swift_bridgeObjectRetain(v6);
  UserDefault.wrappedValue.setter(v0 + 72, v17);
  v12(v16, v17);
  v18 = swift_bridgeObjectRetain(v6);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = *(char *)(v0 + 208);
    v22 = swift_slowAlloc(22, -1);
    v23 = swift_slowAlloc(64, -1);
    v35 = v23;
    *(_DWORD *)v22 = 136315394;
    v24 = *(_QWORD *)&aLaunchNlaunchB[8 * v21 + 24];
    v32 = *(_QWORD *)(v0 + 184);
    v33 = *(_QWORD *)(v0 + 176);
    v34 = *(_QWORD *)(v0 + 192);
    *(_QWORD *)(v0 + 88) = sub_3A180(*(_QWORD *)&aLaunch[8 * v21], v24, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease(v24);
    *(_WORD *)(v22 + 12) = 2082;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v0 + 96) = sub_3A180(v4, v6, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v22 + 14, v22 + 22);
    swift_bridgeObjectRelease_n(v6, 3);
    _os_log_impl(&dword_0, v19, v20, "JSAPackageProvisioner [%s] Persisting LastCachedBootURL='%{public}s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v34, v33);
  }
  else
  {
    v26 = *(_QWORD *)(v0 + 184);
    v25 = *(_QWORD *)(v0 + 192);
    v27 = *(_QWORD *)(v0 + 176);
    swift_bridgeObjectRelease_n(v6, 2);

    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
  }
LABEL_12:
  v28 = *(_QWORD *)(v0 + 160);
  v29 = *(_QWORD *)(v0 + 168);
  v30 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v29);
  swift_task_dealloc(v28);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_34F7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176));
  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_34FE4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  char *v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;

  v2 = v1;
  v56 = a1;
  v3 = type metadata accessor for JetPackAssetRequestSourcePolicy(0);
  v59 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v58 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v57 = (char *)&v51 - v6;
  v7 = sub_29EF0(&qword_B8498);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_29EF0((uint64_t *)&unk_B8CA0);
  __chkstk_darwin(v11);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v54 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v51 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v51 - v21;
  if (qword_B80D8 != -1)
    swift_once(&qword_B80D8, sub_44988);
  v23 = sub_2D6E0(v7, (uint64_t)qword_B89E8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v23, v7);
  UserDefault.wrappedValue.getter(&v61, v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v62)
    v24 = v61;
  else
    v24 = 0;
  if (v62)
    v25 = v62;
  else
    v25 = 0xE000000000000000;
  URL.init(string:)(v24, v25);
  swift_bridgeObjectRelease(v25);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    if (qword_B8128 != -1)
      swift_once(&qword_B8128, sub_51370);
    v26 = sub_2D6E0(v14, (uint64_t)qword_BC990);
    v27 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
    v27(v22, v26, v14);
    sub_2E618((uint64_t)v13, (uint64_t *)&unk_B8CA0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v22, v13, v14);
    v27 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  }
  v55 = v2;
  v52 = (void (*)(char *, char *, uint64_t))v27;
  v53 = v22;
  v28 = ((uint64_t (*)(char *, char *, uint64_t))v27)(v20, v22, v14);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = swift_slowAlloc(22, -1);
    v32 = swift_slowAlloc(64, -1);
    v51 = v3;
    v33 = v32;
    v61 = v32;
    *(_DWORD *)v31 = 136315394;
    v60 = sub_3A180(0x6E2D68636E75616CLL, 0xED00006761622D6FLL, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v31 + 4, v31 + 12);
    *(_WORD *)(v31 + 12) = 2082;
    v34 = sub_2A1FC((unint64_t *)&qword_B8500, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v35 = dispatch thunk of CustomStringConvertible.description.getter(v14, v34);
    v37 = v36;
    v60 = sub_3A180(v35, v36, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v31 + 14, v31 + 22);
    swift_bridgeObjectRelease(v37);
    v38 = *(void (**)(char *, uint64_t))(v15 + 8);
    v38(v20, v14);
    _os_log_impl(&dword_0, v29, v30, "JSAPackageProvisioner [%s] Obtained fallbackURL='%{public}s", (uint8_t *)v31, 0x16u);
    swift_arrayDestroy(v33, 2, (char *)&type metadata for Any + 8);
    v39 = v33;
    v3 = v51;
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {

    v38 = *(void (**)(char *, uint64_t))(v15 + 8);
    v38(v20, v14);
  }
  v40 = v59;
  v41 = v57;
  (*(void (**)(char *, _QWORD, uint64_t))(v59 + 104))(v57, enum case for JetPackAssetRequestSourcePolicy.localOnly(_:), v3);
  v42 = *(_BYTE *)(v55 + OBJC_IVAR___JSAPackageProvisioner_isLaunching);
  if (v42)
    v43 = 0x402E000000000000;
  else
    v43 = 0;
  v44 = swift_allocObject(&unk_A0778, 25, 7);
  *(_QWORD *)(v44 + 16) = v43;
  *(_BYTE *)(v44 + 24) = v42 ^ 1;
  v45 = type metadata accessor for ValidatedJetPackAssetLocations.URLLocation(0);
  v46 = v56;
  v56[3] = v45;
  v46[4] = sub_2A1FC(&qword_B84F8, (uint64_t (*)(uint64_t))&type metadata accessor for ValidatedJetPackAssetLocations.URLLocation, (uint64_t)&protocol conformance descriptor for ValidatedJetPackAssetLocations.URLLocation);
  sub_37FA8(v46);
  v48 = v53;
  v47 = v54;
  v52(v54, v53, v14);
  v49 = v58;
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v58, v41, v3);
  ValidatedJetPackAssetLocations.URLLocation.init(_:sourcePolicy:requestConfiguration:)(v47, v49, sub_37FF4, v44);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v3);
  return ((uint64_t (*)(char *, uint64_t))v38)(v48, v14);
}

uint64_t sub_35554(char a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  *(_QWORD *)(v2 + 192) = v1;
  *(_BYTE *)(v2 + 466) = a1;
  *(_QWORD *)(v2 + 200) = swift_getObjectType(v1);
  v3 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for BooksJetPackResourceBundle(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 208) = swift_task_alloc(v3);
  *(_QWORD *)(v2 + 216) = swift_task_alloc(v3);
  v4 = type metadata accessor for InMemoryJetPackLoader(0);
  *(_QWORD *)(v2 + 224) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v2 + 232) = v5;
  *(_QWORD *)(v2 + 240) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for InMemoryJetPackResourceBundle(0);
  *(_QWORD *)(v2 + 248) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v2 + 256) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 264) = swift_task_alloc(v8);
  *(_QWORD *)(v2 + 272) = swift_task_alloc(v8);
  *(_QWORD *)(v2 + 280) = swift_task_alloc(v8);
  *(_QWORD *)(v2 + 288) = swift_task_alloc(v8);
  v9 = type metadata accessor for JetPackFileStreamSource(0);
  *(_QWORD *)(v2 + 296) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v2 + 304) = v10;
  *(_QWORD *)(v2 + 312) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_29EF0(&qword_B8438);
  *(_QWORD *)(v2 + 320) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v2 + 328) = v12;
  *(_QWORD *)(v2 + 336) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_29EF0((uint64_t *)&unk_B8CA0);
  *(_QWORD *)(v2 + 344) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL(0);
  *(_QWORD *)(v2 + 352) = v14;
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v2 + 360) = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 368) = swift_task_alloc(v16);
  *(_QWORD *)(v2 + 376) = swift_task_alloc(v16);
  *(_QWORD *)(v2 + 384) = swift_task_alloc(v16);
  *(_QWORD *)(v2 + 392) = swift_task_alloc(v16);
  *(_QWORD *)(v2 + 400) = swift_task_alloc(v16);
  return swift_task_switch(sub_35718, v1, 0);
}

uint64_t sub_35718()
{
  uint64_t v0;
  uint64_t ObjCClassFromMetadata;
  id v2;
  NSString v3;
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  Swift::String v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  void *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(*(_QWORD *)(v0 + 200));
  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v3 = String._bridgeToObjectiveC()();
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v2, "URLForResource:withExtension:", v3, v4);

  if (!v5)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 360) + 56))(*(_QWORD *)(v0 + 344), 1, 1, *(_QWORD *)(v0 + 352));
    goto LABEL_10;
  }
  v6 = *(_QWORD *)(v0 + 392);
  v7 = *(_QWORD *)(v0 + 352);
  v8 = *(_QWORD *)(v0 + 360);
  v9 = *(_QWORD *)(v0 + 344);
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v5);

  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
  v10(v9, v6, v7);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v9, 0, 1, v7);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v7) == 1)
  {
LABEL_10:
    sub_2E618(*(_QWORD *)(v0 + 344), (uint64_t *)&unk_B8CA0);
    return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000017, 0x8000000000088BF0, "JSApp/PackageProvisioner.swift", 30, 2, 255, 0);
  }
  v10(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 352));
  if (qword_B80F0 != -1)
    swift_once(&qword_B80F0, sub_44DB0);
  v12 = *(_QWORD *)(v0 + 328);
  v11 = *(_QWORD *)(v0 + 336);
  v13 = *(_QWORD *)(v0 + 320);
  v14 = sub_2D6E0(v13, (uint64_t)qword_B8A30);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  *(_QWORD *)(v0 + 408) = v15;
  v15(v11, v14, v13);
  UserDefault.wrappedValue.getter((_QWORD *)(v0 + 465), v13);
  v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  *(_QWORD *)(v0 + 416) = v16;
  v16(v11, v13);
  if (*(_BYTE *)(v0 + 465) == 1)
  {
    if (qword_B8090 != -1)
      swift_once(&qword_B8090, sub_2EFC8);
    v17 = *(_QWORD *)(v0 + 376);
    v18 = *(_QWORD *)(v0 + 384);
    v19 = *(_QWORD *)(v0 + 352);
    v20 = *(_QWORD *)(v0 + 360);
    v21 = sub_2D6E0(v19, (uint64_t)qword_B8388);
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
    v22(v17, v21, v19);
    v22(v18, v17, v19);
    v23._countAndFlagsBits = 0x656A2E7865646E69;
    v23._object = (void *)0xED00006B63617074;
    URL.appendPathComponent(_:)(v23);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v17, v19);
  }
  else
  {
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 360) + 16);
    v22(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 352));
  }
  v25 = *(_QWORD *)(v0 + 384);
  v26 = *(_QWORD *)(v0 + 368);
  v27 = *(_QWORD *)(v0 + 352);
  *(_QWORD *)(v0 + 424) = OBJC_IVAR___JSAPackageProvisioner_logger;
  v28 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v22)(v26, v25, v27);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = *(char *)(v0 + 466);
    v32 = swift_slowAlloc(22, -1);
    v33 = swift_slowAlloc(64, -1);
    v61 = v33;
    *(_DWORD *)v32 = 136315394;
    v34 = *(_QWORD *)&aLaunchNlaunchB[8 * v31 + 24];
    v35 = *(_QWORD *)(v0 + 368);
    v59 = *(_QWORD *)(v0 + 360);
    v60 = *(_QWORD *)(v0 + 352);
    *(_QWORD *)(v0 + 184) = sub_3A180(*(_QWORD *)&aLaunch[8 * v31], v34, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v32 + 4, v32 + 12);
    v36 = swift_bridgeObjectRelease(v34);
    *(_WORD *)(v32 + 12) = 2082;
    v37 = URL.path.getter(v36);
    v39 = v38;
    *(_QWORD *)(v0 + 160) = sub_3A180(v37, v38, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v32 + 14, v32 + 22);
    swift_bridgeObjectRelease(v39);
    v40 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
    v40(v35, v60);
    _os_log_impl(&dword_0, v29, v30, "JSAPackageProvisioner [%s] Step 4: Loading bundled JetPack at %{public}s", (uint8_t *)v32, 0x16u);
    swift_arrayDestroy(v33, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v32, -1, -1);

  }
  else
  {
    v43 = *(_QWORD *)(v0 + 360);
    v42 = *(_QWORD *)(v0 + 368);
    v44 = *(_QWORD *)(v0 + 352);

    v40 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
    v41 = ((uint64_t (*)(uint64_t, uint64_t))v40)(v42, v44);
  }
  *(_QWORD *)(v0 + 432) = v40;
  v46 = *(_QWORD *)(v0 + 304);
  v45 = *(_QWORD *)(v0 + 312);
  v47 = *(_QWORD *)(v0 + 296);
  v49 = *(_QWORD *)(v0 + 232);
  v48 = *(_QWORD *)(v0 + 240);
  v50 = *(_QWORD *)(v0 + 224);
  v51 = *(_QWORD *)(v0 + 192);
  v52 = URL.path.getter(v41);
  JetPackFileStreamSource.init(path:)(v52);
  sub_2F028();
  *(_QWORD *)(v0 + 40) = v47;
  *(_QWORD *)(v0 + 48) = &protocol witness table for JetPackFileStreamSource;
  v53 = sub_37FA8((_QWORD *)(v0 + 16));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v46 + 16))(v53, v45, v47);
  v54 = *(void **)(v51 + OBJC_IVAR___JSAPackageProvisioner_unpackQueue);
  *(_QWORD *)(v0 + 80) = sub_37F2C();
  *(_QWORD *)(v0 + 88) = &protocol witness table for OS_dispatch_queue;
  *(_QWORD *)(v0 + 56) = v54;
  v55 = v54;
  *(_QWORD *)(v0 + 440) = InMemoryJetPackLoader.bundle(from:on:)(v0 + 16, v0 + 56);
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v50);
  sub_3789C((_QWORD *)(v0 + 56));
  sub_3789C((_QWORD *)(v0 + 16));
  v56 = sub_29EF0(&qword_B84E8);
  v57 = sub_37F68(&qword_B84F0, &qword_B84E8);
  v58 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Future.then()[1]);
  *(_QWORD *)(v0 + 448) = v58;
  *v58 = v0;
  v58[1] = sub_35CFC;
  return dispatch thunk of Future.then()(*(_QWORD *)(v0 + 288), v56, v57);
}

uint64_t sub_35CFC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 448);
  *(_QWORD *)(*v1 + 456) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_36314;
  else
    v4 = sub_35D60;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 192), 0);
}

uint64_t sub_35D60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  objc_class *v48;
  _BYTE *v49;
  uint64_t *v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  void (*v69)(uint64_t, uint64_t, uint64_t);
  void (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  unint64_t v72;

  v1 = v0 + 120;
  v2 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 288);
  v5 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 256);
  v6 = swift_release(*(_QWORD *)(v0 + 440));
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v4 + 16);
  v8 = v7(v2, v3, v5, v6);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v69 = (void (*)(uint64_t, uint64_t, uint64_t))v7;
    v12 = *(_QWORD *)(v0 + 272);
    v11 = *(_QWORD *)(v0 + 280);
    v66 = *(_QWORD *)(v0 + 256);
    v13 = *(_QWORD *)(v0 + 248);
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v71 = v15;
    *(_DWORD *)v14 = 136315138;
    v69(v12, v11, v13);
    v16 = String.init<A>(describing:)(v12, v13);
    v18 = v17;
    *(_QWORD *)(v0 + 176) = sub_3A180(v16, v17, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v18);
    v19 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
    v20 = v11;
    v21 = v13;
    v1 = v0 + 120;
    v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))v69;
    v19(v20, v21);
    _os_log_impl(&dword_0, v9, v10, "JSAPackageProvisioner bundle provision succeeded with bundle %s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {
    v22 = *(_QWORD *)(v0 + 280);
    v23 = *(_QWORD *)(v0 + 248);
    v24 = *(_QWORD *)(v0 + 256);

    v19 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v19(v22, v23);
  }
  if (qword_B8140 != -1)
    swift_once(&qword_B8140, sub_54C84);
  swift_beginAccess(&byte_B9201, v1, 0, 0);
  if ((byte_B9201 & 1) != 0)
    goto LABEL_13;
  if (qword_B8138 != -1)
    swift_once(&qword_B8138, sub_54A50);
  swift_beginAccess(&byte_B9200, v0 + 96, 0, 0);
  if ((byte_B9200 & 1) != 0)
    goto LABEL_13;
  if (qword_B8118 != -1)
    swift_once(&qword_B8118, sub_508AC);
  if (*(_QWORD *)(qword_B8EF0 + OBJC_IVAR___JSAProcessEnvironment__variant) == 1)
  {
LABEL_13:
    if (qword_B80C0 != -1)
      swift_once(&qword_B80C0, sub_443CC);
    v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 408);
    v25 = *(void (**)(uint64_t, uint64_t))(v0 + 416);
    v27 = *(_QWORD *)(v0 + 336);
    v28 = *(_QWORD *)(v0 + 320);
    v29 = sub_2D6E0(v28, (uint64_t)qword_B89A0);
    v26(v27, v29, v28);
    UserDefault.wrappedValue.getter((_QWORD *)(v0 + 464), v28);
    v25(v27, v28);
    v30 = *(_BYTE *)(v0 + 464);
  }
  else
  {
    v30 = 1;
  }
  JetPackResourceBundle.version.getter(*(_QWORD *)(v0 + 248), &protocol witness table for InMemoryJetPackResourceBundle);
  v32 = v31;
  swift_bridgeObjectRelease(v31);
  v70 = v19;
  v68 = v30;
  if (!v32)
  {
    v52 = 0x64656C646E7562;
    v53 = 0xE700000000000000;
    goto LABEL_20;
  }
  v33 = *(_QWORD *)(v0 + 248);
  v71 = 0;
  v72 = 0xE000000000000000;
  result = JetPackResourceBundle.version.getter(v33, &protocol witness table for InMemoryJetPackResourceBundle);
  if (v35)
  {
    v36 = v35;
    String.append(_:)(*(Swift::String *)&result);
    swift_bridgeObjectRelease(v36);
    v37._countAndFlagsBits = 0x64656C646E75622DLL;
    v37._object = (void *)0xE800000000000000;
    String.append(_:)(v37);
    v52 = v71;
    v53 = v72;
LABEL_20:
    v38 = *(char *)(v0 + 466);
    ((void (*)(_QWORD, _QWORD, _QWORD))v7)(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 248));
    v39 = *(_QWORD *)&aLaunch[8 * v38];
    v40 = *(_QWORD *)&aLaunchNlaunchB[8 * v38 + 24];
    v41 = *(void (**)(uint64_t, uint64_t))(v0 + 432);
    v42 = *(_QWORD *)(v0 + 400);
    v43 = *(_QWORD *)(v0 + 384);
    v58 = *(_QWORD *)(v0 + 392);
    v59 = *(_QWORD *)(v0 + 376);
    v44 = *(_QWORD *)(v0 + 352);
    v60 = *(_QWORD *)(v0 + 368);
    v61 = *(_QWORD *)(v0 + 344);
    v56 = *(_QWORD *)(v0 + 296);
    v57 = *(_QWORD *)(v0 + 312);
    v54 = *(_QWORD *)(v0 + 288);
    v55 = *(_QWORD *)(v0 + 304);
    v64 = *(_QWORD *)(v0 + 280);
    v65 = *(_QWORD *)(v0 + 272);
    v62 = *(_QWORD *)(v0 + 336);
    v63 = *(char **)(v0 + 264);
    v45 = *(_QWORD *)(v0 + 248);
    v67 = *(_QWORD *)(v0 + 240);
    v47 = *(_QWORD *)(v0 + 208);
    v46 = *(uint64_t **)(v0 + 216);
    BooksJetPackResourceBundle.init(memoryJetPack:provisionMode:)(v63, v39, v40, v46);
    sub_37BC0((uint64_t)v46, v47);
    v48 = (objc_class *)type metadata accessor for Package(0);
    v49 = objc_allocWithZone(v48);
    sub_37BC0(v47, (uint64_t)&v49[OBJC_IVAR___JSAPackage_jetPack]);
    v50 = (uint64_t *)&v49[OBJC_IVAR___JSAPackage_nameForJSContext];
    *v50 = v52;
    v50[1] = v53;
    v49[OBJC_IVAR___JSAPackage_isBundled] = v68;
    *(_QWORD *)(v0 + 144) = v49;
    *(_QWORD *)(v0 + 152) = v48;
    v51 = objc_msgSendSuper2((objc_super *)(v0 + 144), "init");
    sub_37C04(v47);
    sub_37C04((uint64_t)v46);
    v70(v54, v45);
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v57, v56);
    v41(v43, v44);
    v41(v42, v44);
    swift_task_dealloc(v42);
    swift_task_dealloc(v58);
    swift_task_dealloc(v43);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v57);
    swift_task_dealloc(v54);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v63);
    swift_task_dealloc(v67);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    return (*(uint64_t (**)(id))(v0 + 8))(v51);
  }
  __break(1u);
  return result;
}

uint64_t sub_36314()
{
  _QWORD *v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t *v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = v0[57];
  v2 = swift_release(v0[55]);
  v3 = swift_errorRetain(v1, v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = v0[57];
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    v9.n128_u64[0] = 138412290;
    *(_DWORD *)v7 = 138412290;
    swift_errorRetain(v6, v9);
    v10 = _swift_stdlib_bridgeErrorToNSError(v6);
    v0[21] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 21, v0 + 22, v7 + 4, v7 + 12);
    *v8 = v10;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl(&dword_0, v4, v5, "JSAPackageProvisioner bundle provision failed due to error=%@", v7, 0xCu);
    v11 = sub_29EF0(&qword_B84B8);
    swift_arrayDestroy(v8, 1, v11);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {
    v12 = v0[57];

    swift_errorRelease(v12);
    swift_errorRelease(v12);
  }
  return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000017, 0x8000000000088C10, "JSApp/PackageProvisioner.swift", 30, 2, 280, 0);
}

uint64_t sub_364DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;

  v3[13] = a2;
  v3[14] = a3;
  v3[12] = a1;
  v5 = type metadata accessor for InMemoryJetPackLoader(0);
  v3[15] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[16] = v6;
  v3[17] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_36544, a3, 0);
}

uint64_t sub_36544()
{
  sub_2F028();
  return swift_task_switch(sub_36584, 0, 0);
}

uint64_t sub_36584()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = v0[16];
  v1 = v0[17];
  v4 = v0[14];
  v3 = v0[15];
  JetPackAsset.streamSource.getter();
  v5 = *(void **)(v4 + OBJC_IVAR___JSAPackageProvisioner_unpackQueue);
  v0[10] = sub_37F2C();
  v0[11] = &protocol witness table for OS_dispatch_queue;
  v0[7] = v5;
  v6 = v5;
  v0[18] = InMemoryJetPackLoader.bundle(from:on:)(v0 + 2, v0 + 7);
  sub_3789C(v0 + 2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_3789C(v0 + 7);
  v7 = sub_29EF0(&qword_B84E8);
  v8 = sub_37F68(&qword_B84F0, &qword_B84E8);
  v9 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Future.then()[1]);
  v0[19] = v9;
  *v9 = v0;
  v9[1] = sub_36690;
  return dispatch thunk of Future.then()(v0[12], v7, v8);
}

uint64_t sub_36690()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_36730;
  else
    v3 = sub_366F4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_366F4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 136);
  swift_release(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_36730()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 136);
  swift_release(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_3676C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = type metadata accessor for BooksJetPackResourceBundle(0);
  v1 = sub_2A1FC(&qword_B84D8, type metadata accessor for BooksJetPackResourceBundle, (uint64_t)&protocol conformance descriptor for BooksJetPackResourceBundle);
  v2 = JetPackResourceBundle.version.getter(v0, v1);
  if (v3)
    return v2;
  if (qword_B8130 != -1)
    swift_once(&qword_B8130, sub_51450);
  v4 = qword_BC9A8;
  swift_bridgeObjectRetain(unk_BC9B0);
  return v4;
}

id sub_3681C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v19;

  v8 = sub_29EF0(&qword_B8508);
  __chkstk_darwin(v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (void *)objc_opt_self(NSURLSessionConfiguration);
  v12 = (void *)objc_opt_self(AMSProcessInfo);
  v13 = objc_msgSend(v12, "currentProcess");
  v14 = objc_msgSend(v11, "ams_configurationWithProcessInfo:bag:", v13, a1);

  if ((a4 & 1) == 0)
    objc_msgSend(v14, "setTimeoutIntervalForRequest:", *(double *)&a3);
  v15 = swift_unknownObjectRetain(a1);
  Bag.init(from:)(v15);
  v16 = type metadata accessor for Bag(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v10, 0, 1, v16);
  v17 = objc_msgSend(v12, "currentProcess");
  static JetPackAMSRemoteStreamSource.defaultURLEncoder(forContentsOf:using:from:)(a2, v10, v17);

  sub_2E618((uint64_t)v10, &qword_B8508);
  return v14;
}

void PackageProvisioner.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  swift_defaultActor_initialize(v1);
  _swift_stdlib_reportUnimplementedInitializer("JSApp.PackageProvisioner", 24, "init()", 6, 0);
  __break(1u);
}

void PackageProvisioner.init()()
{
  uint64_t v0;

  swift_defaultActor_initialize(v0);
  _swift_stdlib_reportUnimplementedInitializer("JSApp.PackageProvisioner", 24, "init()", 6, 0);
  __break(1u);
}

uint64_t PackageProvisioner.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR___JSAPackageProvisioner_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR___JSAPackageProvisioner_packagePromise));

  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t PackageProvisioner.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR___JSAPackageProvisioner_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR___JSAPackageProvisioner_packagePromise));

  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t PackageProvisioner.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_36B20(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  if (qword_B8120 != -1)
    swift_once(&qword_B8120, sub_51358);
  v5 = qword_BC980;
  v6 = *(_QWORD *)algn_BC988;
  swift_bridgeObjectRetain(*(_QWORD *)algn_BC988);
  v7 = sub_3A180(v5, v6, a3);
  v8 = *a1;
  v9 = *a1 + 8;
  v11 = v7;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v8, v9);
  result = swift_bridgeObjectRelease(v6);
  *a1 = v9;
  return result;
}

uint64_t sub_36BC8(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 24) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 32) = v3;
  *v3 = v2;
  v3[1] = sub_36C30;
  return v5(v2 + 16);
}

uint64_t sub_36C30()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_QWORD **)(*v0 + 24);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 32));
  *v2 = *(_QWORD *)(v1 + 16);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_36C80(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  NSString v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  NSString *v45;
  unint64_t v46;
  char v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  int v53;
  char *v54;
  id v55;
  char *v56;
  Class isa;
  Class v58;
  id v59;
  uint64_t v60;
  void *v61;
  void *v62;
  Swift::String v63;
  Swift::String v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  __int128 v74;
  __int128 v75;

  v72 = a1;
  v3 = type metadata accessor for InMemoryJetPackResourceBundle(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TimeZone(0);
  v66 = *(_QWORD *)(v7 - 8);
  v67 = v7;
  __chkstk_darwin(v7);
  v65 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_29EF0(&qword_B84E0);
  __chkstk_darwin(v9);
  v69 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v70 = v11;
  v71 = v12;
  __chkstk_darwin(v11);
  v68 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_29EF0(&qword_B84A8);
  __chkstk_darwin(v14);
  v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_29EF0((uint64_t *)&unk_B8CA0);
  __chkstk_darwin(v17);
  v19 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for URL(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_37B7C(a2, (uint64_t)v16, &qword_B84A8);
  v24 = type metadata accessor for ValidatedJetPackAssetLocations.URLLocation(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v16, 1, v24) == 1)
  {
    sub_2E618((uint64_t)v16, &qword_B84A8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, 1, 1, v20);
LABEL_4:
    v26 = (uint64_t *)&unk_B8CA0;
    v27 = (uint64_t)v19;
LABEL_5:
    sub_2E618(v27, v26);
    goto LABEL_6;
  }
  ValidatedJetPackAssetLocations.URLLocation.url.getter();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v16, v24);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v19, 0, 1, v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
    goto LABEL_4;
  v33 = (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(v23, v19, v20);
  if ((URL.isFileURL.getter(v33) & 1) != 0)
  {
    v34 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
    URL.absoluteString.getter();
    v36 = v35;
    v37 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v36);
    v73 = 0;
    v38 = objc_msgSend(v34, "attributesOfItemAtPath:error:", v37, &v73);

    v39 = v73;
    if (v38)
    {
      type metadata accessor for FileAttributeKey(0);
      v41 = v40;
      v42 = sub_2A1FC(&qword_B8350, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_8DCB0);
      v43 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v38, v41, (char *)&type metadata for Any + 8, v42);
      v44 = v39;

      if (*(_QWORD *)(v43 + 16))
      {
        v45 = NSFileModificationDate;
        v46 = sub_4CEBC((uint64_t)v45);
        if ((v47 & 1) != 0)
        {
          sub_37EF0(*(_QWORD *)(v43 + 56) + 32 * v46, (uint64_t)&v74);
        }
        else
        {
          v74 = 0u;
          v75 = 0u;
        }

      }
      else
      {
        v74 = 0u;
        v75 = 0u;
      }
      swift_bridgeObjectRelease(v43);
      v50 = v71;
      if (*((_QWORD *)&v75 + 1))
      {
        v51 = v69;
        v52 = v70;
        v53 = swift_dynamicCast(v69, &v74, (char *)&type metadata for Any + 8, v70, 6);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v51, v53 ^ 1u, 1, v52);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v51, 1, v52) != 1)
        {
          v54 = v68;
          (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v68, v51, v52);
          v55 = objc_msgSend(objc_allocWithZone((Class)NSISO8601DateFormatter), "init");
          v56 = v65;
          static TimeZone.current.getter();
          isa = TimeZone._bridgeToObjectiveC()().super.isa;
          (*(void (**)(char *, uint64_t))(v66 + 8))(v56, v67);
          objc_msgSend(v55, "setTimeZone:", isa);

          objc_msgSend(v55, "setFormatOptions:", 544);
          *(_QWORD *)&v74 = 0x5B746F6F72;
          *((_QWORD *)&v74 + 1) = 0xE500000000000000;
          v58 = Date._bridgeToObjectiveC()().super.isa;
          v59 = objc_msgSend(v55, "stringFromDate:", v58);

          v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
          v62 = v61;

          v63._countAndFlagsBits = v60;
          v63._object = v62;
          String.append(_:)(v63);
          swift_bridgeObjectRelease(v62);
          v64._countAndFlagsBits = 93;
          v64._object = (void *)0xE100000000000000;
          String.append(_:)(v64);

          v29 = v74;
          (*(void (**)(char *, uint64_t))(v71 + 8))(v54, v52);
          (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
          return v29;
        }
        goto LABEL_24;
      }
      sub_2E618((uint64_t)&v74, &qword_B8B50);
    }
    else
    {
      v48 = v73;
      v49 = _convertNSErrorToError(_:)(v39);

      swift_willThrow();
      swift_errorRelease(v49);
      v50 = v71;
    }
    v51 = v69;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56))(v69, 1, 1, v70);
LABEL_24:
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
    v26 = &qword_B84E0;
    v27 = (uint64_t)v51;
    goto LABEL_5;
  }
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
LABEL_6:
  v28 = sub_29EF0(&qword_B84B0);
  ValidatedJetPackLoadingCoordinator.ValidatedJetPackResult.bundle.getter(v28);
  v29 = JetPackResourceBundle.version.getter(v3, &protocol witness table for InMemoryJetPackResourceBundle);
  v31 = v30;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (!v31)
    return 0x72616C75676572;
  return v29;
}

id sub_37310(char a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  _BYTE *v5;
  _BYTE *v6;
  objc_class *ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  double v18;
  objc_super v20;

  v6 = v5;
  ObjectType = (objc_class *)swift_getObjectType(v6);
  swift_bridgeObjectRelease(a4);
  swift_defaultActor_initialize(v6);
  v12 = OBJC_IVAR___JSAPackageProvisioner_logger;
  v13 = qword_B8188;
  swift_retain(v6);
  if (v13 != -1)
    swift_once(&qword_B8188, sub_56F1C);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_2D6E0(v14, (uint64_t)qword_B9320);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(&v6[v12], v15, v14);
  v6[OBJC_IVAR___JSAPackageProvisioner_state] = 0;
  v16 = OBJC_IVAR___JSAPackageProvisioner_packagePromise;
  sub_29EF0(&qword_B83B0);
  *(_QWORD *)&v6[v16] = Promise.__allocating_init()();
  *(_QWORD *)&v6[OBJC_IVAR___JSAPackageProvisioner_processVariant] = a2;
  v6[OBJC_IVAR___JSAPackageProvisioner_isLaunching] = a1 & 1;
  *(_QWORD *)&v6[OBJC_IVAR___JSAPackageProvisioner_unpackQueue] = a5;
  v17 = a5;
  *(_QWORD *)&v18 = swift_release(v6).n128_u64[0];
  v20.receiver = v6;
  v20.super_class = ObjectType;
  return objc_msgSendSuper2(&v20, "init", v18);
}

uint64_t sub_37458()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_3748C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t *v5;

  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc(dword_B83D4);
  v4 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_38150;
  *(_OWORD *)(v3 + 16) = v4;
  v5 = (uint64_t *)swift_task_alloc(dword_B83A4);
  *(_QWORD *)(v3 + 32) = v5;
  *v5 = v3;
  v5[1] = (uint64_t)sub_2F828;
  v5[7] = v2;
  return swift_task_switch(sub_2E9F4, v2, 0);
}

unint64_t sub_37520()
{
  unint64_t result;

  result = qword_B83F0;
  if (!qword_B83F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PackageProvisionerState, &type metadata for PackageProvisionerState);
    atomic_store(result, (unint64_t *)&qword_B83F0);
  }
  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for HotReloadState(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for HotReloadState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PackageProvisionerState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_37650 + 4 * byte_8DDAD[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_37684 + 4 * byte_8DDA8[v4]))();
}

uint64_t sub_37684(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_3768C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x37694);
  return result;
}

uint64_t sub_376A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x376A8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_376AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_376B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_376C0(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_376CC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for PackageProvisionerState()
{
  return &type metadata for PackageProvisionerState;
}

uint64_t sub_376E4()
{
  return type metadata accessor for PackageProvisioner(0);
}

uint64_t type metadata accessor for PackageProvisioner(uint64_t a1)
{
  uint64_t result;

  result = qword_B8428;
  if (!qword_B8428)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PackageProvisioner);
  return result;
}

uint64_t sub_37728(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_8DED8;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = &unk_8DEF0;
    v4[4] = &unk_8DF08;
    v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for PackageProvisioner(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for PackageProvisioner);
}

uint64_t dispatch thunk of PackageProvisioner.__allocating_init(launching:processVariant:overridePackageURLCachePath:on:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t sub_377F0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_37814()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_37824(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_37868()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  sub_3789C(v0 + 5);
  return swift_deallocObject(v0, 81, 7);
}

uint64_t sub_3789C(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_378BC(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_378D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = v1 + 40;
  v6 = *(_BYTE *)(v1 + 80);
  v7 = (_QWORD *)swift_task_alloc(dword_B844C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_2E488;
  v7[2] = a1;
  v7[3] = v4;
  v8 = (_QWORD *)swift_task_alloc(dword_B8474);
  v7[4] = v8;
  *v8 = v7;
  v8[1] = sub_31DC0;
  return sub_31E30(v5, v6);
}

uint64_t sub_37968()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 72) & ~v3;
  v5 = v3 | 7;
  v6 = *(_QWORD *)(v2 + 64) + v4 + 1;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  sub_3789C((_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_379E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(type metadata accessor for Logger(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + 32;
  v9 = v1 + v5;
  v10 = *(_BYTE *)(v1 + v5 + *(_QWORD *)(v4 + 64));
  v11 = (_QWORD *)swift_task_alloc(dword_B847C);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_38150;
  return sub_3499C(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_37A8C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_37AB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_B848C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_2E488;
  v3[2] = v2;
  return swift_task_switch(sub_34750, 0, 0);
}

uint64_t sub_37B18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_B84C4);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_38150;
  return sub_364DC(a1, a2, v2);
}

uint64_t sub_37B7C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_29EF0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_37BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BooksJetPackResourceBundle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_37C04(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BooksJetPackResourceBundle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_37C40()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

void sub_37C50(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

uint64_t sub_37C5C()
{
  uint64_t v0;
  uint64_t v2;

  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v2);
  return *(_QWORD *)&aLaunch[8 * (char)v2];
}

uint64_t sub_37CA8()
{
  return sub_3676C();
}

uint64_t sub_37CC0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t sub_37CEC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

_BYTE **sub_37CFC(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_3A75C(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_37D04()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_37D14()
{
  uint64_t v0;

  return sub_2ABE4(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_37D1C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return sub_3A008(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_37D24()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_37D34()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_37D44()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_37D54()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_37D64()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_37D74()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_37D98()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_37DA8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_37DB8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_37DDC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_37DEC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_37DFC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_37E0C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_37E1C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_37E2C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_37E3C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_37E4C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_37E70()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_37E80()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_37E90()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_37EA0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_37EB0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_37EC0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_37ED0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_37EE0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_37EF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_37F2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_B8AE0;
  if (!qword_B8AE0)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_B8AE0);
  }
  return result;
}

uint64_t sub_37F68(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_29F30(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for Promise<A>, v4);
    atomic_store(result, a1);
  }
  return result;
}

_QWORD *sub_37FA8(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_37FE4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 25, 7);
}

id sub_37FF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_3681C(a1, a2, *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 24));
}

uint64_t sub_38000(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_B8514);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_38150;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_B8510 + dword_B8510))(a1, v4);
}

void sub_38070(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  Swift::String v5;

  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  v5._countAndFlagsBits = 0x656A2E7865646E69;
  v5._object = (void *)0xED00006B63617074;
  URL.appendPathComponent(_:)(v5);
}

uint64_t sub_380D4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_380E4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_380F4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 25, 7);
}

uint64_t *sub_38104(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t BooksJetPackResourceBundle.init(memoryJetPack:provisionMode:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void (*v50)(char *, uint64_t);
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  void (*v57)(char *, uint64_t, uint64_t);
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;

  v61 = a3;
  v54 = a2;
  v56 = a4;
  v5 = type metadata accessor for InMemoryJetPackResourceBundle(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v59 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v63 = *(_QWORD *)(v8 - 8);
  v64 = v8;
  __chkstk_darwin(v8);
  v58 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL.DirectoryHint(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v55 - 8);
  v15 = __chkstk_darwin(v55);
  v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v53 - v18;
  v20 = sub_29EF0(&qword_B8528);
  __chkstk_darwin(v20);
  v22 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v65 = a1;
  v57 = v23;
  v23(v22, (uint64_t)a1, v5);
  v62 = v6;
  v24 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56);
  v60 = v5;
  v24(v22, 0, 1, v5);
  v25 = sub_29EF0(&qword_B8530);
  v26 = swift_allocObject(v25, ((*(unsigned int *)(v25 + 48) + 3) & 0x1FFFFFFFCLL) + 4, *(unsigned __int16 *)(v25 + 52) | 3);
  *(_DWORD *)(v26 + ((*(unsigned int *)(*(_QWORD *)v26 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_3A078((uint64_t)v22, v26 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v26 + 16));
  v27 = sub_3A0C0((uint64_t)v22);
  v28 = v56;
  *v56 = v26;
  static URL.temporaryDirectory.getter(v27);
  v67 = 0x556B63615074654ALL;
  v68 = 0xEF64656B6361706ELL;
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for URL.DirectoryHint.inferFromPath(_:), v10);
  v29 = sub_3A100();
  URL.appending<A>(component:directoryHint:)(&v67, v13, &type metadata for String, v29);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_bridgeObjectRelease(v68);
  v30 = v17;
  v31 = v55;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v30, v55);
  v32 = type metadata accessor for BooksJetPackResourceBundle(0);
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))((char *)v28 + *(int *)(v32 + 20), v19, v31);
  if (qword_B8160 != -1)
    swift_once(&qword_B8160, sub_56DC8);
  v33 = v64;
  v34 = sub_2D6E0(v64, (uint64_t)qword_B92A8);
  v35 = v63;
  v36 = v58;
  (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v58, v34, v33);
  v38 = v59;
  v37 = v60;
  v57(v59, (uint64_t)v65, v60);
  v39 = v61;
  v40 = swift_bridgeObjectRetain(v61);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.default.getter();
  v43 = v36;
  v44 = v39;
  if (os_log_type_enabled(v41, v42))
  {
    v45 = swift_slowAlloc(22, -1);
    v46 = swift_slowAlloc(64, -1);
    v67 = v46;
    *(_DWORD *)v45 = 136315394;
    swift_bridgeObjectRetain(v44);
    v66 = sub_3A180(v54, v44, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v45 + 4, v45 + 12);
    swift_bridgeObjectRelease_n(v44, 3);
    *(_WORD *)(v45 + 12) = 2082;
    v47 = JetPackResourceBundle.version.getter(v37, &protocol witness table for InMemoryJetPackResourceBundle);
    if (v48)
    {
      v49 = v48;
    }
    else
    {
      v47 = 0x302E302E30;
      v49 = 0xE500000000000000;
    }
    v66 = sub_3A180(v47, v49, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v45 + 14, v45 + 22);
    swift_bridgeObjectRelease(v49);
    v50 = *(void (**)(char *, uint64_t))(v62 + 8);
    v50(v38, v37);
    _os_log_impl(&dword_0, v41, v42, "Created in-memory JetPack for provisionMode=%s: %{public}s", (uint8_t *)v45, 0x16u);
    swift_arrayDestroy(v46, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v45, -1, -1);

    v50(v65, v37);
    return (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v43, v64);
  }
  else
  {

    v52 = *(void (**)(char *, uint64_t))(v62 + 8);
    v52(v38, v37);
    swift_bridgeObjectRelease_n(v44, 2);
    v52(v65, v37);
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v43, v33);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> BooksJetPackResourceBundle.evict()()
{
  uint64_t **v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint8_t *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  id v42;
  void *v43;
  void *v44;
  unsigned int v45;
  id v46;
  uint64_t v47;
  id v48;
  id v49;
  uint64_t v50;
  id v51;
  NSURL *v52;
  void *v53;
  void *v54;
  unsigned int v55;
  id v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  NSObject *v62;
  uint64_t v63;
  os_log_type_t v64;
  uint8_t *v65;
  void *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  void (*v71)(char *, uint64_t);
  uint8_t *v72;
  void (*v73)(char *, uint64_t);
  id v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  NSObject *v89;
  os_log_type_t v90;
  _BOOL4 v91;
  uint8_t *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t **v100;
  uint64_t v101;
  uint64_t v102;
  os_unfair_lock_s *v103;
  uint64_t v104;
  NSObject *v105;
  os_log_type_t v106;
  uint8_t *v107;
  void *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  _QWORD v114[2];
  void (*v115)(char *, char *, uint64_t);
  void (*v116)(char *, uint64_t, uint64_t);
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t **v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  id v134;

  v2 = type metadata accessor for JetPackPath(0);
  v125 = *(_QWORD *)(v2 - 8);
  v126 = v2;
  __chkstk_darwin(v2);
  v124 = (char *)v114 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = type metadata accessor for Logger(0);
  v129 = *(_QWORD *)(v132 - 8);
  v4 = __chkstk_darwin(v132);
  v120 = (char *)v114 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v131 = (char *)v114 - v6;
  v7 = type metadata accessor for BooksJetPackResourceBundle(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)v114 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)v114 - v11;
  v13 = sub_29EF0(&qword_B8528);
  __chkstk_darwin(v13);
  v15 = (char *)v114 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for InMemoryJetPackResourceBundle(0);
  v17 = __chkstk_darwin(v16);
  v127 = (char *)v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v123 = (char *)v114 - v20;
  __chkstk_darwin(v19);
  v22 = (char *)v114 - v21;
  v23 = v13;
  v25 = v24;
  OSAllocatedUnfairLock.valueWithLock.getter(*v0, v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v15, 1, v16) == 1)
  {
    sub_3A0C0((uint64_t)v15);
    return;
  }
  v119 = v25;
  v26 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
  v130 = v16;
  v26(v22, v15, v16);
  if (qword_B8160 != -1)
    swift_once(&qword_B8160, sub_56DC8);
  v121 = v1;
  v27 = sub_2D6E0(v132, (uint64_t)qword_B92A8);
  v122 = v0;
  v28 = sub_37BC0((uint64_t)v0, (uint64_t)v12);
  v118 = v27;
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.default.getter();
  v31 = os_log_type_enabled(v29, v30);
  v128 = v22;
  v117 = v10;
  if (v31)
  {
    v32 = (uint8_t *)swift_slowAlloc(12, -1);
    v33 = (void *)swift_slowAlloc(32, -1);
    v134 = v33;
    *(_DWORD *)v32 = 136446210;
    v116 = (void (*)(char *, uint64_t, uint64_t))(v32 + 4);
    v34 = v7;
    v35 = type metadata accessor for URL(0);
    v36 = sub_3A76C();
    v37 = v35;
    v7 = v34;
    v38 = dispatch thunk of CustomStringConvertible.description.getter(v37, v36);
    v40 = v39;
    v133 = sub_3A180(v38, v39, (uint64_t *)&v134);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v116, v32 + 12);
    swift_bridgeObjectRelease(v40);
    sub_37C04((uint64_t)v12);
    _os_log_impl(&dword_0, v29, v30, "Purging previous on-disk JetPack files at %{public}s", v32, 0xCu);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v32, -1, -1);
  }
  else
  {
    sub_37C04((uint64_t)v12);
  }

  v41 = (void *)objc_opt_self(NSFileManager);
  v42 = objc_msgSend(v41, "defaultManager");
  URL._bridgeToObjectiveC()((NSURL *)*(int *)(v7 + 20));
  v44 = v43;
  v134 = 0;
  v45 = objc_msgSend(v42, "removeItemAtURL:error:", v43, &v134);

  v46 = v134;
  v47 = v130;
  if (v45)
  {
    v48 = v134;
  }
  else
  {
    v49 = v134;
    v50 = _convertNSErrorToError(_:)(v46);

    swift_willThrow();
    swift_errorRelease(v50);
    v121 = 0;
  }
  v51 = objc_msgSend(v41, "defaultManager");
  URL._bridgeToObjectiveC()(v52);
  v54 = v53;
  v134 = 0;
  v55 = objc_msgSend(v51, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v53, 1, 0, &v134);

  v56 = v134;
  v57 = v119;
  v58 = v131;
  if (!v55)
  {
    v74 = v134;
    _convertNSErrorToError(_:)(v56);

    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v128, v47);
    return;
  }
  v114[1] = v7;
  v59 = v129;
  v60 = v132;
  v116 = *(void (**)(char *, uint64_t, uint64_t))(v129 + 16);
  v116(v131, v118, v132);
  v61 = v123;
  v115 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
  v115(v123, v128, v47);
  v62 = Logger.logObject.getter(v56);
  v63 = v57;
  v64 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v62, v64))
  {
    v65 = (uint8_t *)swift_slowAlloc(12, -1);
    v66 = (void *)swift_slowAlloc(32, -1);
    v134 = v66;
    *(_DWORD *)v65 = 136446210;
    v67 = JetPackResourceBundle.version.getter(v130, &protocol witness table for InMemoryJetPackResourceBundle);
    if (v68)
    {
      v69 = v68;
    }
    else
    {
      v67 = 0x302E302E30;
      v69 = 0xE500000000000000;
    }
    v70 = v61;
    v133 = sub_3A180(v67, v69, (uint64_t *)&v134);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v65 + 4, v65 + 12);
    swift_bridgeObjectRelease(v69);
    v71 = *(void (**)(char *, uint64_t))(v63 + 8);
    v71(v70, v130);
    _os_log_impl(&dword_0, v62, v64, "Persisting JetPack: %{public}s", v65, 0xCu);
    swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v66, -1, -1);
    v72 = v65;
    v47 = v130;
    swift_slowDealloc(v72, -1, -1);

    v73 = *(void (**)(char *, uint64_t))(v129 + 8);
    v73(v131, v132);
  }
  else
  {
    v75 = v61;
    v71 = *(void (**)(char *, uint64_t))(v63 + 8);
    v71(v75, v47);

    v73 = *(void (**)(char *, uint64_t))(v59 + 8);
    v73(v58, v60);
  }
  v76 = v121;
  v77 = v124;
  JetPackPath.init(components:)(_swiftEmptyArrayStorage);
  v78 = (uint64_t)v128;
  v79 = InMemoryJetPackResourceBundle.contentsOfDirectory(atPath:)(v77);
  v80 = v76;
  v81 = v127;
  if (v76)
  {
    (*(void (**)(char *, uint64_t))(v125 + 8))(v77, v126);
    v82 = v78;
    goto LABEL_21;
  }
  v84 = v79;
  (*(void (**)(char *, uint64_t))(v125 + 8))(v77, v126);
  sub_39208(v84, v78, (uint64_t)v122);
  swift_bridgeObjectRelease(v84);
  v85 = v120;
  v86 = v132;
  v116(v120, v118, v132);
  v87 = ((uint64_t (*)(char *, uint64_t, uint64_t))v115)(v81, v78, v47);
  v88 = v85;
  v89 = Logger.logObject.getter(v87);
  v90 = static os_log_type_t.default.getter();
  v91 = os_log_type_enabled(v89, v90);
  v121 = 0;
  if (v91)
  {
    v92 = (uint8_t *)swift_slowAlloc(12, -1);
    v131 = (char *)swift_slowAlloc(32, -1);
    v134 = v131;
    *(_DWORD *)v92 = 136446210;
    v93 = JetPackResourceBundle.version.getter(v47, &protocol witness table for InMemoryJetPackResourceBundle);
    if (v94)
    {
      v95 = v94;
    }
    else
    {
      v93 = 0x302E302E30;
      v95 = 0xE500000000000000;
    }
    v133 = sub_3A180(v93, v95, (uint64_t *)&v134);
    v47 = v130;
    v80 = v121;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v92 + 4, v92 + 12);
    swift_bridgeObjectRelease(v95);
    v71(v81, v47);
    _os_log_impl(&dword_0, v89, v90, "Done persisting JetPack: %{public}s", v92, 0xCu);
    v96 = v131;
    swift_arrayDestroy(v131, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v96, -1, -1);
    swift_slowDealloc(v92, -1, -1);

    v97 = v120;
    v98 = v132;
  }
  else
  {
    v71(v81, v47);

    v97 = v88;
    v98 = v86;
  }
  v73(v97, v98);
  v99 = (uint64_t)v117;
  v100 = v122;
  v101 = **v122;
  v102 = (uint64_t)*v122 + *(_QWORD *)(class metadata base offset for ManagedBuffer + v101 + 16);
  v103 = (os_unfair_lock_s *)((char *)*v122 + ((*(unsigned int *)(v101 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v103);
  sub_3A0C0(v102);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v119 + 56))(v102, 1, 1, v47);
  if (!v80)
  {
    os_unfair_lock_unlock(v103);
    v104 = sub_37BC0((uint64_t)v100, v99);
    v105 = Logger.logObject.getter(v104);
    v106 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v105, v106))
    {
      v107 = (uint8_t *)swift_slowAlloc(12, -1);
      v108 = (void *)swift_slowAlloc(32, -1);
      v134 = v108;
      *(_DWORD *)v107 = 136446210;
      v109 = type metadata accessor for URL(0);
      v110 = sub_3A76C();
      v111 = dispatch thunk of CustomStringConvertible.description.getter(v109, v110);
      v113 = v112;
      v133 = sub_3A180(v111, v112, (uint64_t *)&v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v107 + 4, v107 + 12);
      swift_bridgeObjectRelease(v113);
      sub_37C04((uint64_t)v117);
      _os_log_impl(&dword_0, v105, v106, "Using on-disk JetPack at %{public}s", v107, 0xCu);
      swift_arrayDestroy(v108, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v108, -1, -1);
      swift_slowDealloc(v107, -1, -1);

      v82 = (uint64_t)v128;
      v83 = v130;
      goto LABEL_22;
    }

    sub_37C04(v99);
    v82 = (uint64_t)v128;
LABEL_21:
    v83 = v47;
LABEL_22:
    v71((char *)v82, v83);
    return;
  }
  os_unfair_lock_unlock(v103);
  __break(1u);
}

uint64_t sub_39208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  NSURL *v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;

  v4 = v3;
  v67 = a2;
  v60 = type metadata accessor for URL.DirectoryHint(0);
  v65 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v58 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for URL(0);
  v57 = *(_QWORD *)(v59 - 8);
  v8 = __chkstk_darwin(v59);
  v50 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v52 = (char *)&v48 - v10;
  v11 = type metadata accessor for JetPackPath(0);
  v12 = *(_QWORD *)(v11 - 8);
  result = __chkstk_darwin(v11);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 16);
  if (!v16)
    return result;
  v55 = a3;
  v17 = a1 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v53 = enum case for URL.DirectoryHint.inferFromPath(_:);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v63 = *(_QWORD *)(v12 + 72);
  v64 = v18;
  v49 = a1;
  swift_bridgeObjectRetain(a1);
  v56 = v11;
  v19 = v12;
  v54 = v12;
  v51 = v15;
  while (1)
  {
    v64(v15, v17, v11);
    v20 = (void *)InMemoryJetPackResourceBundle.contentsOfDirectory(atPath:)(v15);
    if (v4)
      break;
    v21 = v20;
    v68 = v20;
    v22 = sub_29EF0(&qword_B8628);
    v23 = sub_3B678();
    if ((Collection.isNotEmpty.getter(v22, v23) & 1) != 0)
    {
      v66 = v16;
      v62 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      v24 = type metadata accessor for BooksJetPackResourceBundle(0);
      v25 = v55;
      v61 = v55 + *(int *)(v24 + 20);
      v68 = (id)JetPackPath.string.getter(v24);
      v69 = v26;
      v27 = v65;
      v28 = v58;
      v29 = v60;
      (*(void (**)(char *, _QWORD, uint64_t))(v65 + 104))(v58, v53, v60);
      v30 = sub_3A100();
      v31 = v52;
      URL.appending<A>(path:directoryHint:)(&v68, v28, &type metadata for String, v30);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v29);
      swift_bridgeObjectRelease(v69);
      URL._bridgeToObjectiveC()(v32);
      v34 = v33;
      (*(void (**)(char *, uint64_t))(v57 + 8))(v31, v59);
      v68 = 0;
      v35 = v62;
      LODWORD(v31) = objc_msgSend(v62, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v34, 0, 0, &v68);

      v36 = v68;
      if (!(_DWORD)v31)
      {
        v47 = v36;
        swift_bridgeObjectRelease(v21);
        swift_bridgeObjectRelease(v49);
        _convertNSErrorToError(_:)(v47);

        swift_willThrow();
        return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v51, v56);
      }
      sub_39208(v21, v67, v25);
      v19 = v54;
      v15 = v51;
      v11 = v56;
      (*(void (**)(char *, uint64_t))(v54 + 8))(v51, v56);
      swift_bridgeObjectRelease(v21);
      goto LABEL_11;
    }
    swift_bridgeObjectRelease(v21);
    v37 = InMemoryJetPackResourceBundle.fileData(atPath:)(v15);
    v39 = v38;
    if (v38 >> 60 != 15)
    {
      v40 = v37;
      v66 = v16;
      v41 = type metadata accessor for BooksJetPackResourceBundle(0);
      v62 = (id)(v55 + *(int *)(v41 + 20));
      v68 = (id)JetPackPath.string.getter(v41);
      v69 = v42;
      v43 = v58;
      v44 = v60;
      (*(void (**)(char *, _QWORD, uint64_t))(v65 + 104))(v58, v53, v60);
      v45 = sub_3A100();
      v46 = v50;
      URL.appending<A>(path:directoryHint:)(&v68, v43, &type metadata for String, v45);
      (*(void (**)(char *, uint64_t))(v65 + 8))(v43, v44);
      swift_bridgeObjectRelease(v69);
      Data.write(to:options:)(v46, 1, v40, v39);
      sub_3B6C4(v40, v39);
      (*(void (**)(char *, uint64_t))(v57 + 8))(v46, v59);
      v19 = v54;
      v11 = v56;
      (*(void (**)(char *, uint64_t))(v54 + 8))(v15, v56);
LABEL_11:
      v16 = v66;
      goto LABEL_4;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v15, v11);
LABEL_4:
    v17 += v63;
    if (!--v16)
      return swift_bridgeObjectRelease(v49);
  }
  (*(void (**)(char *, uint64_t))(v19 + 8))(v15, v11);
  return swift_bridgeObjectRelease(v49);
}

uint64_t BooksJetPackResourceBundle.fileData(atPath:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = v1;
  v27 = a1;
  v24 = type metadata accessor for URL.DirectoryHint(0);
  v3 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v25 = *(_QWORD *)(v6 - 8);
  v26 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_29EF0(&qword_B8528);
  __chkstk_darwin(v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for InMemoryJetPackResourceBundle(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  OSAllocatedUnfairLock.valueWithLock.getter(*v2, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_3A0C0((uint64_t)v11);
    type metadata accessor for BooksJetPackResourceBundle(0);
    v28 = JetPackPath.string.getter();
    v29 = v16;
    v17 = v24;
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for URL.DirectoryHint.inferFromPath(_:), v24);
    v18 = sub_3A100();
    URL.appending<A>(path:directoryHint:)(&v28, v5, &type metadata for String, v18);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v17);
    swift_bridgeObjectRelease(v29);
    v19 = v30;
    v20 = Data.init(contentsOf:options:)(v8, 0);
    if (!v19)
      v3 = v20;
    (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v26);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
    v21 = v30;
    v22 = InMemoryJetPackResourceBundle.fileData(atPath:)(v27);
    if (!v21)
      v3 = v22;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  return v3;
}

char *BooksJetPackResourceBundle.data(withName:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v6 = sub_29EF0(&qword_B8528);
  __chkstk_darwin(v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for InMemoryJetPackResourceBundle(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  OSAllocatedUnfairLock.valueWithLock.getter(*v2, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_3A0C0((uint64_t)v8);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    v13 = v12;
    v14 = InMemoryJetPackResourceBundle.data(withName:)(a1, a2);
    if (!v3)
      v13 = (char *)v14;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return v13;
}

_QWORD *BooksJetPackResourceBundle.contentsOfDirectory(atPath:)(void (*a1)(char *, uint64_t))
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  NSURL *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  id v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  char *v49;
  id v50;
  uint64_t v51;

  v47 = a1;
  v48 = type metadata accessor for JetPackPath(0);
  v2 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v49 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for URL.DirectoryHint(0);
  v43 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v42 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v44 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_29EF0(&qword_B8528);
  __chkstk_darwin(v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for InMemoryJetPackResourceBundle(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  OSAllocatedUnfairLock.valueWithLock.getter(*v1, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_3A0C0((uint64_t)v10);
    v15 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
    type metadata accessor for BooksJetPackResourceBundle(0);
    v50 = (id)JetPackPath.string.getter();
    v51 = v16;
    v18 = v42;
    v17 = v43;
    v19 = v46;
    (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v42, enum case for URL.DirectoryHint.inferFromPath(_:), v46);
    v20 = sub_3A100();
    URL.appending<A>(path:directoryHint:)(&v50, v18, &type metadata for String, v20);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v18, v19);
    swift_bridgeObjectRelease(v51);
    URL._bridgeToObjectiveC()(v21);
    v23 = v22;
    v24 = v44;
    v47 = *(void (**)(char *, uint64_t))(v44 + 8);
    v47(v7, v5);
    v50 = 0;
    v25 = objc_msgSend(v15, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", v23, 0, 16, &v50);

    v26 = v50;
    if (v25)
    {
      v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v25, v5);

      v28 = *(_QWORD *)(v27 + 16);
      if (v28)
      {
        v50 = &_swiftEmptyArrayStorage;
        sub_3A7D0(0, v28, 0);
        v29 = *(unsigned __int8 *)(v24 + 80);
        v43 = v27;
        v30 = v27 + ((v29 + 32) & ~v29);
        v46 = *(_QWORD *)(v24 + 72);
        v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 16);
        v32 = v5;
        do
        {
          v33 = v31(v7, v30, v5);
          v34 = URL.absoluteString.getter(v33);
          JetPackPath.init(_:)(v34);
          v47(v7, v5);
          v25 = v50;
          if ((swift_isUniquelyReferenced_nonNull_native(v50) & 1) == 0)
          {
            sub_3A7D0(0, v25[2] + 1, 1);
            v25 = v50;
          }
          v36 = v25[2];
          v35 = v25[3];
          if (v36 >= v35 >> 1)
          {
            sub_3A7D0(v35 > 1, v36 + 1, 1);
            v25 = v50;
          }
          v25[2] = v36 + 1;
          (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))((unint64_t)v25+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v36, v49, v48);
          v50 = v25;
          v30 += v46;
          --v28;
          v5 = v32;
        }
        while (v28);
        swift_bridgeObjectRelease(v43);
      }
      else
      {
        swift_bridgeObjectRelease(v27);
        return &_swiftEmptyArrayStorage;
      }
    }
    else
    {
      v39 = v26;
      _convertNSErrorToError(_:)(v26);

      swift_willThrow();
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    v25 = v14;
    v37 = v45;
    v38 = InMemoryJetPackResourceBundle.contentsOfDirectory(atPath:)(v47);
    if (!v37)
      v25 = (_QWORD *)v38;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  return v25;
}

uint64_t sub_39FE0(uint64_t a1)
{
  return BooksJetPackResourceBundle.fileData(atPath:)(a1);
}

_QWORD *sub_39FF4(void (*a1)(char *, uint64_t))
{
  return BooksJetPackResourceBundle.contentsOfDirectory(atPath:)(a1);
}

uint64_t sub_3A008(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v6 = a4();
  v8 = v7;
  v9 = sub_3A180(v6, v7, a3);
  v10 = *a1;
  v11 = *a1 + 8;
  v13 = v9;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v10, v11);
  result = swift_bridgeObjectRelease(v8);
  *a1 = v11;
  return result;
}

uint64_t sub_3A078(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_29EF0(&qword_B8528);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_3A0C0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_29EF0(&qword_B8528);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_3A100()
{
  unint64_t result;

  result = qword_B8538;
  if (!qword_B8538)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_B8538);
  }
  return result;
}

uint64_t type metadata accessor for BooksJetPackResourceBundle(uint64_t a1)
{
  uint64_t result;

  result = qword_B8598;
  if (!qword_B8598)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BooksJetPackResourceBundle);
  return result;
}

uint64_t sub_3A180(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_3A250(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_37EF0((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_37EF0((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_3789C(v12);
  return v7;
}

uint64_t sub_3A250(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_3A408(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_3A408(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_3A49C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_3A610(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_3A610(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_3A49C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_5B0C4(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_3A610(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_29EF0(&qword_B8638);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

_BYTE **sub_3A75C(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

unint64_t sub_3A76C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_B8500;
  if (!qword_B8500)
  {
    v1 = type metadata accessor for URL(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for URL, v1);
    atomic_store(result, (unint64_t *)&qword_B8500);
  }
  return result;
}

uint64_t sub_3A7B4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_3AC88(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_3A7D0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_3B498(a1, a2, a3, (_QWORD *)*v3, &qword_B8620, (uint64_t (*)(_QWORD))&type metadata accessor for JetPackPath);
  *v3 = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for BooksJetPackResourceBundle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for URL(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_retain(v4);
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for BooksJetPackResourceBundle(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_release(*a1);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *initializeWithCopy for BooksJetPackResourceBundle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = *a2;
  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for URL(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_retain(v4);
  v9(v6, v7, v8);
  return a1;
}

uint64_t *assignWithCopy for BooksJetPackResourceBundle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

_QWORD *initializeWithTake for BooksJetPackResourceBundle(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *assignWithTake for BooksJetPackResourceBundle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for BooksJetPackResourceBundle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_3AA94);
}

uint64_t sub_3AA94(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for BooksJetPackResourceBundle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_3AB1C);
}

char *sub_3AB1C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_3AB90(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_3AC08(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_3AE4C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_3AC24(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_3AFEC(a1, a2, a3, (_QWORD *)*v3, &qword_B85D0, &qword_B85D8);
  *v3 = result;
  return result;
}

uint64_t sub_3AC50(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_3B194(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_3AC6C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_3B2FC(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_3AC88(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_34;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_29EF0(&qword_B8640);
    v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 3);
  }
  else
  {
    v11 = &_swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 < a4 || v14 >= v15 + 8 * v8)
    {
      sub_29EF0(&qword_B82B8);
      swift_arrayInitWithTakeFrontToBack(v11 + 4, a4 + 4);
    }
    else if (v11 != a4)
    {
      sub_29EF0(&qword_B82B8);
      swift_arrayInitWithTakeBackToFront(v11 + 4, a4 + 4);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  if (v15 >= v14 + 8 * v8 || v14 >= v15 + 8 * v8)
  {
    sub_29EF0(&qword_B82B8);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_34:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_3AE4C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_29EF0(&qword_B85F0);
    v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 3);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 8 * v8)
      memmove(v11 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 8 * v8 || v14 >= v15 + 8 * v8)
  {
    sub_29EF0(&qword_B85F8);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_3AFD8(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_3AFEC(a1, a2, a3, a4, &qword_B85E0, &qword_B85E8);
}

uint64_t sub_3AFEC(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_29EF0(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 24 * v12 + 32, 7);
    v15 = j__malloc_size(v14);
    v14[2] = v11;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 24);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  v16 = (unint64_t)(v14 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v16 >= v17 + 24 * v11)
      memmove(v14 + 4, a4 + 4, 24 * v11);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v17 >= v16 + 24 * v11 || v16 >= v17 + 24 * v11)
  {
    sub_29EF0(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v14;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_3B194(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_29EF0(&qword_B8618);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_3B2FC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_29EF0(&qword_B8600);
    v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 5);
  }
  else
  {
    v11 = &_swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 32 * v8)
      memmove(v11 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 32 * v8 || v14 >= v15 + 32 * v8)
  {
    sub_29EF0(&qword_B8608);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_3B484(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_3B498(a1, a2, a3, a4, &qword_B8610, (uint64_t (*)(_QWORD))&type metadata accessor for URLQueryItem);
}

uint64_t sub_3B498(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_29EF0(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = *(_QWORD *)(a6(0) - 8);
  v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v23 = (char *)v18 + v22;
  v24 = (char *)a4 + v22;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v23 >= &v24[*(_QWORD *)(v21 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v23, v24);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v23, v24);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v25 = *(_QWORD *)(v21 + 72) * v11;
  v26 = &v23[v25];
  v27 = (unint64_t)&v24[v25];
  if (v24 >= v26 || (unint64_t)v23 >= v27)
  {
    swift_arrayInitWithCopy(v23);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

unint64_t sub_3B678()
{
  unint64_t result;
  uint64_t v1;

  result = qword_B8630;
  if (!qword_B8630)
  {
    v1 = sub_29F30(&qword_B8628);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_B8630);
  }
  return result;
}

uint64_t sub_3B6C4(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_3B6D8(result, a2);
  return result;
}

uint64_t sub_3B6D8(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_3B71C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD v22[4];

  v6 = sub_29EF0(&qword_B8B00);
  __chkstk_darwin(v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_3D8D0(a1, (uint64_t)v8);
  v9 = type metadata accessor for TaskPriority(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_2E618((uint64_t)v8, &qword_B8B00);
    v11 = 4096;
    v12 = *(_QWORD *)(a3 + 16);
    if (v12)
    {
LABEL_3:
      v13 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v12);
      swift_unknownObjectRetain(v12);
      v15 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v13);
      v17 = v16;
      swift_unknownObjectRelease(v12);
      goto LABEL_6;
    }
  }
  else
  {
    v18 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    v11 = v18 | 0x1000;
    v12 = *(_QWORD *)(a3 + 16);
    if (v12)
      goto LABEL_3;
  }
  v15 = 0;
  v17 = 0;
LABEL_6:
  v19 = swift_allocObject(&unk_A0A28, 32, 7);
  *(_QWORD *)(v19 + 16) = a2;
  *(_QWORD *)(v19 + 24) = a3;
  if (v17 | v15)
  {
    v22[0] = 0;
    v22[1] = 0;
    v20 = v22;
    v22[2] = v15;
    v22[3] = v17;
  }
  else
  {
    v20 = 0;
  }
  return swift_task_create(v11, v20, (char *)&type metadata for () + 8, &unk_B8D10, v19);
}

unint64_t URLParser.ParserURLType.init(rawValue:)(unint64_t a1)
{
  return sub_3D17C(a1);
}

BOOL sub_3B8C4(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_3B8D8()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_3B91C()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_3B944(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

unint64_t sub_3B984@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = sub_3D17C(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

void sub_3B9B4(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

id sub_3B9C0()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for URLParser()), "init");
  qword_B8648 = (uint64_t)result;
  return result;
}

uint64_t URLParser.type(for:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
  return swift_task_switch(sub_3BA0C, 0, 0);
}

uint64_t sub_3BA0C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[3];
  v2 = swift_task_alloc(32);
  v0[4] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[5] = v3;
  *v3 = v0;
  v3[1] = sub_3BAB4;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0x726F662865707974, 0xEA0000000000293ALL, sub_3D18C, v2, &type metadata for URLParser.ParserURLType);
}

uint64_t sub_3BAB4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 40));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_3BB10, 0, 0);
}

uint64_t sub_3BB10()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

void sub_3BB18(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  NSURL *v11;
  void *v12;
  void *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  double v22;
  id v23;
  id v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[5];
  uint64_t v29;

  v27 = a1;
  v26 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v26 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v26);
  v25 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_29EF0(&qword_B86D0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend((id)objc_opt_self(BUBag), "defaultBag");
  v10 = objc_msgSend(objc_allocWithZone((Class)AMSURLParser), "initWithBag:", v9);

  URL._bridgeToObjectiveC()(v11);
  v13 = v12;
  v24 = objc_msgSend(v10, "typeForURL:", v12);

  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
  v14 = v25;
  v15 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v25, a2, v26);
  v16 = *(unsigned __int8 *)(v6 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = *(unsigned __int8 *)(v3 + 80);
  v19 = (v7 + v18 + v17) & ~v18;
  v20 = swift_allocObject(&unk_A0A50, v19 + v4, v16 | v18 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v20 + v17, v8, v5);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v20 + v19, v14, v15);
  aBlock[4] = sub_3D9F4;
  v29 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_3D0AC;
  aBlock[3] = &unk_A0A68;
  v21 = _Block_copy(aBlock);
  *(_QWORD *)&v22 = swift_release(v29).n128_u64[0];
  v23 = v24;
  objc_msgSend(v24, "addFinishBlock:", v21, v22);
  _Block_release(v21);

}

uint64_t sub_3BD4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  __n128 v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;

  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
  {
LABEL_6:
    if (!a1)
      goto LABEL_22;
    goto LABEL_9;
  }
  swift_errorRetain(a2, v9);
  if (qword_B81A0 != -1)
    swift_once(&qword_B81A0, sub_56FDC);
  v12 = type metadata accessor for Logger(0);
  sub_2D6E0(v12, (uint64_t)qword_B9368);
  swift_errorRetain(a2, v13);
  v15 = swift_errorRetain(a2, v14);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v48 = a1;
    v18 = swift_slowAlloc(12, -1);
    v49 = a4;
    v19 = (uint8_t *)v18;
    v20 = swift_slowAlloc(32, -1);
    v50 = v7;
    v51 = a2;
    v21 = v20;
    v52 = v20;
    v22.n128_u64[0] = 136446210;
    *(_DWORD *)v19 = 136446210;
    v47 = v19 + 4;
    swift_errorRetain(a2, v22);
    v23 = sub_29EF0(&qword_B8D30);
    v24 = String.init<A>(describing:)(&v51, v23);
    v25 = v11;
    v26 = v8;
    v28 = v27;
    v51 = sub_3A180(v24, v27, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v47, v19 + 12);
    v29 = v28;
    v8 = v26;
    v11 = v25;
    a1 = v48;
    swift_bridgeObjectRelease(v29);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl(&dword_0, v16, v17, "Parsing commerce UI URL encountered error: %{public}s", v19, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    v30 = v21;
    v7 = v50;
    swift_slowDealloc(v30, -1, -1);
    v31 = v19;
    a4 = v49;
    swift_slowDealloc(v31, -1, -1);

    swift_errorRelease(a2);
    goto LABEL_6;
  }
  swift_errorRelease(a2);
  swift_errorRelease(a2);
  swift_errorRelease(a2);

  if (!a1)
  {
LABEL_22:
    v52 = 0;
    goto LABEL_23;
  }
LABEL_9:
  v52 = 0;
  v53 = 1;
  static Int._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v52);
  if ((v53 & 1) != 0)
    goto LABEL_22;
  v32 = v52;
  if (v52 == 2)
  {
    v52 = 3;
  }
  else if (v52 == 1)
  {
    v52 = 2;
  }
  else
  {
    if (v52)
    {
      if (qword_B81A0 != -1)
        swift_once(&qword_B81A0, sub_56FDC);
      v33 = type metadata accessor for Logger(0);
      sub_2D6E0(v33, (uint64_t)qword_B9368);
      v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a4, v7);
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v35, v36))
      {
        v37 = v11;
        v38 = swift_slowAlloc(22, -1);
        v39 = swift_slowAlloc(32, -1);
        v51 = v32;
        v52 = v39;
        *(_DWORD *)v38 = 134218242;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v38 + 4, v38 + 12);
        *(_WORD *)(v38 + 12) = 2080;
        v50 = v8;
        v40 = sub_3A76C();
        v41 = dispatch thunk of CustomStringConvertible.description.getter(v7, v40);
        v43 = v42;
        v51 = sub_3A180(v41, v42, &v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v38 + 14, v38 + 22);
        swift_bridgeObjectRelease(v43);
        (*(void (**)(char *, uint64_t))(v50 + 8))(v37, v7);
        _os_log_impl(&dword_0, v35, v36, "AMSURLParser returned an unknown type value %ld for %s", (uint8_t *)v38, 0x16u);
        swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v39, -1, -1);
        swift_slowDealloc(v38, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      }

      goto LABEL_22;
    }
    v52 = 1;
  }
LABEL_23:
  v44 = sub_29EF0(&qword_B86D0);
  return CheckedContinuation.resume(returning:)(&v52, v44);
}

uint64_t sub_3C2F0(uint64_t a1, const void *a2, void *a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v3[3] = a3;
  v7 = type metadata accessor for URL(0);
  v3[4] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[5] = v8;
  v3[6] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[7] = _Block_copy(a2);
  static URL._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v9 = a3;
  return swift_task_switch(sub_3C384, 0, 0);
}

uint64_t sub_3C384()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[6];
  v2 = swift_task_alloc(32);
  v0[8] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[9] = v3;
  *v3 = v0;
  v3[1] = sub_3C42C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0x726F662865707974, 0xEA0000000000293ALL, sub_3DA70, v2, &type metadata for URLParser.ParserURLType);
}

uint64_t sub_3C42C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 72));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_3C488, 0, 0);
}

uint64_t sub_3C488()
{
  uint64_t v0;
  uint64_t v1;
  void (**v2)(_QWORD, _QWORD);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(void (***)(_QWORD, _QWORD))(v0 + 56);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);

  v5 = *(_QWORD *)(v0 + 16);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  v2[2](v2, v5);
  _Block_release(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id URLParser.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "init");
}

id URLParser.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

id _s5JSApp9URLParserC6sharedACvgZ_0()
{
  if (qword_B8098 != -1)
    swift_once(&qword_B8098, sub_3B9C0);
  return (id)qword_B8648;
}

Swift::Void __swiftcall URLParser.isCommerceUIURLWithCallback(_:_:)(Swift::String a1, JSValue a2)
{
  objc_class *v2;
  objc_class *object;
  uint64_t countAndFlagsBits;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  JSValue *v10;
  objc_class *v11;
  objc_class *v12;
  uint64_t v13;
  uint64_t v14;

  object = (objc_class *)a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v6 = sub_29EF0(&qword_B8B00);
  __chkstk_darwin(v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = (JSValue *)swift_allocObject(&unk_A08C8, 64, 7);
  v10[2].super.isa = 0;
  v10[3].super.isa = 0;
  v10[4].super.isa = v2;
  v10[5].super.isa = (Class)countAndFlagsBits;
  v10[6].super.isa = object;
  v10[7].super.isa = a2.super.isa;
  v11 = v2;
  swift_bridgeObjectRetain(object);
  v12 = a2.super.isa;
  v13 = sub_3B71C((uint64_t)v8, (uint64_t)&unk_B8660, (uint64_t)v10);
  swift_release(v13);
  sub_2E618((uint64_t)v8, &qword_B8B00);
}

uint64_t sub_3C728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t);

  *(_QWORD *)(v7 + 16) = a7;
  v12 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_B86C8 + dword_B86C8);
  v10 = (_QWORD *)swift_task_alloc(unk_B86CC);
  *(_QWORD *)(v7 + 24) = v10;
  *v10 = v7;
  v10[1] = sub_3C798;
  return v12(a5, a6);
}

uint64_t sub_3C798(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *(_BYTE *)(*(_QWORD *)v1 + 32) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_3C7F4, 0, 0);
}

uint64_t sub_3C7F4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  Class isa;
  NSString v7;

  v1 = *(_BYTE *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = objc_msgSend((id)objc_opt_self(JSABridge), "sharedInstance");
  v4 = sub_29EF0(&qword_B86C0);
  v5 = swift_allocObject(v4, 64, 7);
  *(_OWORD *)(v5 + 16) = xmmword_8DFE0;
  *(_QWORD *)(v5 + 56) = &type metadata for Bool;
  *(_BYTE *)(v5 + 32) = v1;
  isa = Array._bridgeToObjectiveC()().super.isa;
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "enqueueValueCall:arguments:file:line:", v2, isa, v7, 147);

  swift_bridgeObjectRelease(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_3CA28(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v17;

  v8 = sub_29EF0(&qword_B8B00);
  __chkstk_darwin(v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = (_QWORD *)swift_allocObject(&unk_A0A00, 64, 7);
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = a1;
  v12[5] = a3;
  v12[6] = a4;
  v12[7] = a2;
  v13 = a2;
  v14 = a1;
  swift_bridgeObjectRetain(a4);
  v15 = sub_3B71C((uint64_t)v10, (uint64_t)&unk_B86B8, (uint64_t)v12);
  swift_release(v15);
  return sub_2E618((uint64_t)v10, &qword_B8B00);
}

uint64_t sub_3CB24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  v8 = (*(_QWORD *)(*(_QWORD *)(sub_29EF0((uint64_t *)&unk_B8CA0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[6] = swift_task_alloc(v8);
  v7[7] = swift_task_alloc(v8);
  v9 = type metadata accessor for URL(0);
  v7[8] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[9] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[10] = swift_task_alloc(v11);
  v7[11] = swift_task_alloc(v11);
  return swift_task_switch(sub_3CBCC, 0, 0);
}

uint64_t sub_3CBCC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  NSString v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  _QWORD *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(void **)(v0 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 64);
    v3 = *(_QWORD *)(v0 + 72);
    v4 = *(_QWORD *)(v0 + 56);
    v6 = *(_QWORD *)(v0 + 24);
    v5 = *(_QWORD *)(v0 + 32);
    v7 = (void *)objc_opt_self(BUBag);
    v8 = v1;
    v9 = objc_msgSend(v7, "defaultBag");
    v10 = objc_allocWithZone((Class)type metadata accessor for CampaignAttributor(0));
    *(_QWORD *)(v0 + 96) = CampaignAttributor.init(appBag:)(v9);
    URL.init(string:)(v6, v5);
    v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
    *(_QWORD *)(v0 + 104) = v11;
    if (v11(v4, 1, v2) != 1)
    {
      v20 = *(_QWORD *)(v0 + 88);
      v21 = *(_QWORD *)(v0 + 64);
      v22 = *(_QWORD *)(v0 + 56);
      v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 72) + 32);
      *(_QWORD *)(v0 + 112) = v23;
      v23(v20, v22, v21);
      v24 = (_QWORD *)swift_task_alloc(async function pointer to CampaignAttributor.processURL(_:ignoreMarketing:)[1]);
      *(_QWORD *)(v0 + 120) = v24;
      *v24 = v0;
      v24[1] = sub_3CDE8;
      return CampaignAttributor.processURL(_:ignoreMarketing:)(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 88), 0);
    }
    v12 = *(_QWORD *)(v0 + 40);
    sub_2E618(*(_QWORD *)(v0 + 56), (uint64_t *)&unk_B8CA0);
    v13 = *(void **)(v0 + 96);
    if (v12)
    {
      v14 = *(void **)(v0 + 40);
      v15 = *(void **)(v0 + 16);
      v16 = (void *)objc_opt_self(JSABridge);
      v17 = v14;
      v18 = objc_msgSend(v16, "sharedInstance");
      v19 = String._bridgeToObjectiveC()();
      objc_msgSend(v18, "enqueueValueCall:arguments:file:line:", v17, 0, v19, 158);

    }
    else
    {
      v17 = *(id *)(v0 + 16);

    }
  }
  v26 = *(_QWORD *)(v0 + 80);
  v28 = *(_QWORD *)(v0 + 48);
  v27 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_3CDE8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 120));
  return swift_task_switch(sub_3CE3C, 0, 0);
}

uint64_t sub_3CE3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  NSString v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Class isa;
  NSString v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 48);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 104))(v2, 1, v1) == 1)
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 88), v1);
    v3 = *(_QWORD *)(v0 + 40);
    sub_2E618(*(_QWORD *)(v0 + 48), (uint64_t *)&unk_B8CA0);
    v4 = *(void **)(v0 + 96);
    if (v3)
    {
      v5 = *(void **)(v0 + 40);
      v6 = *(void **)(v0 + 16);
      v7 = (void *)objc_opt_self(JSABridge);
      v8 = v5;
      v9 = objc_msgSend(v7, "sharedInstance");
      v10 = String._bridgeToObjectiveC()();
      objc_msgSend(v9, "enqueueValueCall:arguments:file:line:", v8, 0, v10, 158);

    }
    else
    {
      v8 = *(id *)(v0 + 16);

    }
  }
  else
  {
    v11 = *(void **)(v0 + 96);
    v27 = *(_QWORD *)(v0 + 88);
    v13 = *(_QWORD *)(v0 + 72);
    v12 = *(_QWORD *)(v0 + 80);
    v14 = *(void **)(v0 + 16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 112))(v12, v2, v1);
    v15 = objc_msgSend((id)objc_opt_self(JSABridge), "sharedInstance");
    v16 = sub_29EF0(&qword_B86C0);
    v17 = swift_allocObject(v16, 64, 7);
    *(_OWORD *)(v17 + 16) = xmmword_8DFE0;
    v18 = URL.absoluteString.getter(v17);
    *(_QWORD *)(v17 + 56) = &type metadata for String;
    *(_QWORD *)(v17 + 32) = v18;
    *(_QWORD *)(v17 + 40) = v19;
    isa = Array._bridgeToObjectiveC()().super.isa;
    v21 = String._bridgeToObjectiveC()();
    objc_msgSend(v15, "enqueueValueCall:arguments:file:line:", v14, isa, v21, 162);

    swift_bridgeObjectRelease(v17);
    v22 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v22(v12, v1);
    v22(v27, v1);
  }
  v23 = *(_QWORD *)(v0 + 80);
  v25 = *(_QWORD *)(v0 + 48);
  v24 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_3D0AC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

unint64_t sub_3D17C(unint64_t result)
{
  if (result > 3)
    return 0;
  return result;
}

void sub_3D18C(uint64_t a1)
{
  uint64_t v1;

  sub_3BB18(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_3D198()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v2 = v0[5];
  v3 = v0[6];
  v4 = v0[7];
  v5 = (_QWORD *)swift_task_alloc(dword_B865C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_38150;
  v5[2] = v4;
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_B86C8 + dword_B86C8);
  v6 = (_QWORD *)swift_task_alloc(unk_B86CC);
  v5[3] = v6;
  *v6 = v5;
  v6[1] = sub_3C798;
  return v8(v2, v3);
}

uint64_t sub_3D230(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[3] = a1;
  v2[4] = a2;
  v3 = sub_29EF0((uint64_t *)&unk_B8CA0);
  v2[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL(0);
  v2[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[7] = v5;
  v2[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_3D2B4, 0, 0);
}

uint64_t sub_3D2B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 40);
  URL.init(string:)(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_2E618(*(_QWORD *)(v0 + 40), (uint64_t *)&unk_B8CA0);
    v4 = *(_QWORD *)(v0 + 40);
    swift_task_dealloc(*(_QWORD *)(v0 + 64));
    swift_task_dealloc(v4);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 64);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 32))(v6, *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
    v7 = swift_task_alloc(32);
    *(_QWORD *)(v0 + 72) = v7;
    *(_QWORD *)(v7 + 16) = v6;
    v8 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 80) = v8;
    *v8 = v0;
    v8[1] = sub_3D3DC;
    return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x726F662865707974, 0xEA0000000000293ALL, sub_3DA70, v7, &type metadata for URLParser.ParserURLType);
  }
}

uint64_t sub_3D3DC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_3D438, 0, 0);
}

uint64_t sub_3D438()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
  v2 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(BOOL))(v0 + 8))(v1 != 0);
}

void _s5JSApp9URLParserC28processCampaignAttributedURLySo7JSValueCSSF_0(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  _QWORD v11[5];
  uint64_t v12;

  v4 = objc_msgSend((id)objc_opt_self(JSABridge), "sharedInstance");
  v5 = objc_msgSend(v4, "environment");

  v6 = objc_msgSend(v5, "context");
  v7 = swift_allocObject(&unk_A09B0, 32, 7);
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  v11[4] = sub_3D7E4;
  v12 = v7;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_3D0AC;
  v11[3] = &unk_A09C8;
  v8 = _Block_copy(v11);
  v9 = v12;
  swift_bridgeObjectRetain(a2);
  swift_release(v9);
  v10 = objc_msgSend((id)objc_opt_self(JSValue), "valueWithNewPromiseInContext:fromExecutor:", v6, v8);

  _Block_release(v8);
  if (!v10)
    __break(1u);
}

unint64_t sub_3D5DC()
{
  unint64_t result;

  result = qword_B8668;
  if (!qword_B8668)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for URLParser.ParserURLType, &type metadata for URLParser.ParserURLType);
    atomic_store(result, (unint64_t *)&qword_B8668);
  }
  return result;
}

uint64_t type metadata accessor for URLParser()
{
  return objc_opt_self(JSAURLParser);
}

ValueMetadata *type metadata accessor for URLParser.ParserURLType()
{
  return &type metadata for URLParser.ParserURLType;
}

uint64_t sub_3D654()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v2 = v0[5];
  v3 = v0[6];
  v4 = v0[7];
  v5 = (_QWORD *)swift_task_alloc(dword_B865C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_2E488;
  v5[2] = v4;
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_B86C8 + dword_B86C8);
  v6 = (_QWORD *)swift_task_alloc(unk_B86CC);
  v5[3] = v6;
  *v6 = v5;
  v6[1] = sub_3C798;
  return v8(v2, v3);
}

uint64_t sub_3D6EC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_3D720()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (const void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_B86A4);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_38150;
  return ((uint64_t (*)(uint64_t, const void *, void *))((char *)&dword_B86A0 + dword_B86A0))(v2, v3, v4);
}

uint64_t sub_3D794()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_3D7C0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_3D7E4(void *a1, void *a2)
{
  uint64_t v2;

  return sub_3CA28(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_3D7EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_3D7FC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_3D808()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_3D844(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc(dword_B86B4);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_38150;
  return sub_3CB24(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_3D8D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_29EF0(&qword_B8B00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_3D918()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_3D93C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = sub_29EF0(&qword_B86D0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_3D9F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(sub_29EF0(&qword_B86D0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  return sub_3BD4C(a1, a2, v2 + v6, v2 + ((v6 + v7 + v8) & ~v8));
}

id sub_3DB54()
{
  return sub_3E6B4(type metadata accessor for FigaroEventFieldCell);
}

uint64_t type metadata accessor for FigaroEventFieldCell()
{
  return objc_opt_self(_TtC5JSApp20FigaroEventFieldCell);
}

void sub_3DB80(uint64_t a1)
{
  char *v1;
  int64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  objc_super v38;
  _QWORD v39[3];
  _QWORD *v40;
  _QWORD *v41;
  __int128 v42;
  _QWORD *v43;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v43 = _swiftEmptyArrayStorage;
    v4 = v1;
    sub_3AC08(0, v3, 0);
    v5 = 0;
    v31 = a1;
    v33 = v3;
    v34 = a1 + 32;
    while (1)
    {
      v36 = v5;
      v6 = *(_QWORD *)(v34 + 8 * v5);
      v7 = *(_QWORD *)(v6 + 16);
      if (v7)
      {
        v8 = sub_29EF0(&qword_B85E0);
        v9 = (_QWORD *)swift_allocObject(v8, 24 * v7 + 32, 7);
        v10 = j__malloc_size(v9);
        v9[2] = v7;
        v9[3] = 2 * ((uint64_t)(v10 - 32) / 24);
        v11 = sub_3F52C((uint64_t)&v41, v9 + 4, v7, v6);
        v12 = (uint64_t)v41;
        v13 = *((_QWORD *)&v42 + 1);
        swift_bridgeObjectRetain_n(v6, 3);
        sub_2E5CC(v12);
        if (v11 != v7)
        {
          __break(1u);
          swift_release(v13);
          __break(1u);
          return;
        }
        swift_bridgeObjectRelease(v6);
      }
      else
      {
        swift_bridgeObjectRetain(*(_QWORD *)(v34 + 8 * v5));
        v9 = _swiftEmptyArrayStorage;
      }
      v41 = v9;
      sub_3E714(&v41);
      v14 = v41;
      v15 = v41[2];
      if (v15)
      {
        v35 = v6;
        v40 = _swiftEmptyArrayStorage;
        sub_3AC24(0, v15, 0);
        v16 = v40;
        v17 = v14 + 6;
        do
        {
          v18 = *(v17 - 1);
          v19 = *v17;
          v39[0] = *(v17 - 2);
          v39[1] = v18;
          v39[2] = v19;
          swift_bridgeObjectRetain_n(v18, 2);
          swift_unknownObjectRetain_n(v19, 2);
          v20 = sub_29EF0(&qword_B85E8);
          v21 = sub_29EF0(&qword_B85D8);
          swift_dynamicCast(&v41, v39, v20, v21, 7);
          v22 = v41;
          v37 = v42;
          swift_unknownObjectRelease(v19);
          swift_bridgeObjectRelease(v18);
          if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
          {
            sub_3AC24(0, v16[2] + 1, 1);
            v16 = v40;
          }
          v24 = v16[2];
          v23 = v16[3];
          if (v24 >= v23 >> 1)
          {
            sub_3AC24(v23 > 1, v24 + 1, 1);
            v16 = v40;
          }
          v16[2] = v24 + 1;
          v25 = &v16[3 * v24];
          v25[4] = v22;
          *(_OWORD *)(v25 + 5) = v37;
          v17 += 3;
          --v15;
        }
        while (v15);
        swift_bridgeObjectRelease(v35);
        swift_release(v14);
      }
      else
      {
        swift_bridgeObjectRelease(v6);
        swift_release(v14);
        v16 = _swiftEmptyArrayStorage;
      }
      v26 = v43;
      if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
      {
        sub_3AC08(0, v26[2] + 1, 1);
        v26 = v43;
      }
      v27 = v36;
      v29 = v26[2];
      v28 = v26[3];
      if (v29 >= v28 >> 1)
      {
        sub_3AC08(v28 > 1, v29 + 1, 1);
        v27 = v36;
        v26 = v43;
      }
      v5 = v27 + 1;
      v26[2] = v29 + 1;
      v26[v29 + 4] = v16;
      if (v5 == v33)
      {
        swift_bridgeObjectRelease(v31);
        v1 = v32;
        goto LABEL_23;
      }
    }
  }
  v30 = v1;
  swift_bridgeObjectRelease(a1);
  v26 = _swiftEmptyArrayStorage;
LABEL_23:
  *(_QWORD *)&v1[OBJC_IVAR____TtC5JSApp30FigaroEventFieldViewController_data] = v26;

  v38.receiver = v1;
  v38.super_class = (Class)type metadata accessor for FigaroEventFieldViewController();
  objc_msgSendSuper2(&v38, "initWithStyle:", 2);
}

uint64_t sub_3E08C(void *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  Class isa;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  void *v18;
  NSString v19;
  unint64_t *v20;
  id v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSString v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  id v41;
  void *v42;
  unint64_t v43;
  NSString v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  Swift::String v50;
  unint64_t v51;
  NSString v52;
  unint64_t *v53;
  id v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;

  v5 = v2;
  v8 = String._bridgeToObjectiveC()();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v10 = objc_msgSend(a1, "dequeueReusableCellWithIdentifier:forIndexPath:", v8, isa);

  v11 = *(_QWORD *)(v5 + OBJC_IVAR____TtC5JSApp30FigaroEventFieldViewController_data);
  v12 = IndexPath.section.getter();
  if ((v12 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v12 >= *(_QWORD *)(v11 + 16))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v8 = *(_QWORD **)(v11 + 8 * v12 + 32);
  v13 = swift_bridgeObjectRetain(v8);
  v14 = IndexPath.row.getter(v13);
  if ((v14 & 0x8000000000000000) != 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v14 >= v8[2])
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v15 = &v8[3 * v14];
  v16 = v15[5];
  v3 = (unint64_t *)v15[6];
  swift_bridgeObjectRetain(v16);
  swift_unknownObjectRetain(v3);
  swift_bridgeObjectRelease(v8);
  v17 = objc_msgSend(v10, "textLabel");
  if (v17)
  {
    v18 = v17;
    v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v16);
    objc_msgSend(v18, "setText:", v19);

  }
  else
  {
    swift_bridgeObjectRelease(v16);
  }
  v58 = v3;
  swift_unknownObjectRetain(v3);
  v4 = sub_29EF0(&qword_B8738);
  v8 = &type metadata for Swift.AnyObject;
  if (swift_dynamicCast(&v60, &v58, (char *)&type metadata for Swift.AnyObject + 8, v4, 6))
  {
    v20 = v60;
    v21 = objc_msgSend(v10, "detailTextLabel");
    if (v21)
    {
      v22 = v21;
      v58 = v20;
      v23 = sub_3FE18();
      BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v4, v23);
      v25 = v24;
      swift_bridgeObjectRelease(v20);
      v26 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v25);
      objc_msgSend(v22, "setText:", v26);

    }
    else
    {
      swift_bridgeObjectRelease(v20);
    }
    goto LABEL_38;
  }
  v58 = v3;
  swift_unknownObjectRetain(v3);
  v27 = sub_29EF0(&qword_B8740);
  if (!swift_dynamicCast(&v60, &v58, (char *)&type metadata for Swift.AnyObject + 8, v27, 6))
  {
    v41 = objc_msgSend(v10, "detailTextLabel");
    if (v41)
    {
      v42 = v41;
      v58 = 0;
      v59 = 0xE000000000000000;
      v60 = v3;
      _print_unlocked<A, B>(_:_:)(&v60, &v58, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v43 = v59;
      v44 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v43);
      objc_msgSend(v42, "setText:", v44);

    }
    goto LABEL_38;
  }
  a2 = (uint64_t)v60;
  v28 = objc_msgSend(v10, "detailTextLabel");
  if (!v28)
  {
    swift_bridgeObjectRelease(a2);
LABEL_38:
    swift_unknownObjectRelease(v3);
    return (uint64_t)v10;
  }
  v56 = v28;
  v58 = 0;
  v59 = 0xE000000000000000;
  if (!((unint64_t)a2 >> 62))
  {
    v29 = *(_QWORD *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFF8));
    if (v29)
      goto LABEL_15;
LABEL_36:
    swift_bridgeObjectRelease(a2);
    v32 = (unint64_t *)&_swiftEmptyArrayStorage;
LABEL_37:
    v60 = v32;
    v46 = sub_3FE18();
    v47 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v4, v46);
    v49 = v48;
    swift_bridgeObjectRelease(v32);
    v50._countAndFlagsBits = v47;
    v50._object = v49;
    String.append(_:)(v50);
    swift_bridgeObjectRelease(v49);
    v51 = v59;
    v52 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v51);
    objc_msgSend(v56, "setText:", v52);

    goto LABEL_38;
  }
LABEL_32:
  if (a2 < 0)
    v45 = a2;
  else
    v45 = a2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a2);
  v29 = _CocoaArrayWrapper.endIndex.getter(v45);
  swift_bridgeObjectRelease(a2);
  if (!v29)
    goto LABEL_36;
LABEL_15:
  v54 = v10;
  v55 = a2;
  v53 = v3;
  v60 = (unint64_t *)&_swiftEmptyArrayStorage;
  result = sub_3AC50(0, v29 & ~(v29 >> 63), 0);
  if ((v29 & 0x8000000000000000) == 0)
  {
    v31 = 0;
    v32 = v60;
    v33 = a2 & 0xC000000000000001;
    do
    {
      if (v33)
        v34 = specialized _ArrayBuffer._getElementSlowPath(_:)(v31, a2);
      else
        v34 = swift_unknownObjectRetain(*(_QWORD *)(a2 + 8 * v31 + 32));
      v57 = v34;
      v35 = String.init<A>(describing:)(&v57, v8 + 1);
      v37 = v36;
      v60 = v32;
      v39 = v32[2];
      v38 = v32[3];
      if (v39 >= v38 >> 1)
      {
        sub_3AC50(v38 > 1, v39 + 1, 1);
        a2 = v55;
        v32 = v60;
      }
      ++v31;
      v32[2] = v39 + 1;
      v40 = &v32[2 * v39];
      v40[4] = v35;
      v40[5] = v37;
    }
    while (v29 != v31);
    swift_bridgeObjectRelease(a2);
    v3 = v53;
    v10 = v54;
    goto LABEL_37;
  }
  __break(1u);
  return result;
}

id sub_3E6A8()
{
  return sub_3E6B4(type metadata accessor for FigaroEventFieldViewController);
}

id sub_3E6B4(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for FigaroEventFieldViewController()
{
  return objc_opt_self(_TtC5JSApp30FigaroEventFieldViewController);
}

Swift::Int sub_3E714(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = (_QWORD *)sub_3FE04(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = sub_3E77C(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_3E77C(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int v21;
  Swift::Int v22;
  uint64_t *v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  Swift::Int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  Swift::Int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  Swift::Int v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  __int128 v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  char v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  _QWORD *v111;
  Swift::Int v112;
  Swift::Int v113;
  uint64_t v114;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        return sub_3EEA0(0, v3, 1, a1);
      return result;
    }
    goto LABEL_154;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_162:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  v112 = result;
  v109 = a1;
  if (v3 < 2)
  {
    v9 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v13 = _swiftEmptyArrayStorage[2];
      v12 = (char *)_swiftEmptyArrayStorage;
LABEL_120:
      v101 = v12;
      v111 = v9;
      if (v13 < 2)
        goto LABEL_117;
      v102 = *v109;
      while (1)
      {
        v103 = v13 - 2;
        if (v13 < 2)
          goto LABEL_149;
        if (!v102)
          goto LABEL_161;
        v100 = v101;
        v104 = *(_QWORD *)&v101[16 * v103 + 32];
        v105 = *(_QWORD *)&v101[16 * v13 + 24];
        sub_3EF84((char *)(v102 + 24 * v104), (char *)(v102 + 24 * *(_QWORD *)&v101[16 * v13 + 16]), v102 + 24 * v105, __dst);
        if (v1)
          goto LABEL_116;
        if (v105 < v104)
          goto LABEL_150;
        if ((swift_isUniquelyReferenced_nonNull_native(v100) & 1) == 0)
          v100 = sub_3F518((uint64_t)v100);
        if (v103 >= *((_QWORD *)v100 + 2))
          goto LABEL_151;
        v106 = &v100[16 * v103 + 32];
        *(_QWORD *)v106 = v104;
        *((_QWORD *)v106 + 1) = v105;
        v107 = *((_QWORD *)v100 + 2);
        if (v13 > v107)
          goto LABEL_152;
        memmove(&v100[16 * v13 + 16], &v100[16 * v13 + 32], 16 * (v107 - v13));
        v101 = v100;
        *((_QWORD *)v100 + 2) = v107 - 1;
        v13 = v107 - 1;
        if (v107 <= 2)
          goto LABEL_117;
      }
    }
    v111 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_29EF0(&qword_B85E8);
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v6, v7);
    *(_QWORD *)(v8 + 16) = v6;
    v111 = (_QWORD *)v8;
    __dst = (char *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v110 = *a1 + 8;
  v108 = *a1 - 24;
  v12 = (char *)_swiftEmptyArrayStorage;
  v113 = v3;
  v114 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 >= v3)
      goto LABEL_46;
    v15 = (uint64_t *)(v11 + 24 * v10);
    v16 = *v15;
    v17 = v15[1];
    v18 = (_QWORD *)(v11 + 24 * v14);
    v19 = v18[1];
    if (v16 == *v18 && v17 == v19)
    {
      v22 = v14 + 2;
      if (v14 + 2 >= v3)
        goto LABEL_45;
      v21 = 0;
    }
    else
    {
      v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, *v18, v19, 1);
      v22 = v14 + 2;
      if (v14 + 2 >= v3)
        goto LABEL_36;
    }
    v23 = (uint64_t *)(v110 + 24 * v22);
    do
    {
      v25 = *(v23 - 1);
      v26 = *v23;
      v27 = (_QWORD *)(v11 + 24 * v10);
      v28 = v27[1];
      if (v25 == *v27 && v26 == v28)
      {
        if ((v21 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v21 ^ _stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, *v27, v28, 1)) & 1) != 0)
      {
        goto LABEL_36;
      }
      v23 += 3;
      v24 = v22 + 1;
      v10 = v22;
      v22 = v24;
    }
    while (v24 < v3);
    v22 = v24;
LABEL_36:
    v10 = v22;
    if ((v21 & 1) != 0)
    {
LABEL_37:
      if (v22 < v14)
        goto LABEL_157;
      if (v14 < v22)
      {
        v30 = 24 * v22;
        v31 = 24 * v14;
        v32 = v22;
        v33 = v14;
        do
        {
          if (v33 != --v32)
          {
            if (!v11)
              goto LABEL_160;
            v34 = v11 + v31;
            v35 = v11 + v30;
            v36 = *(_QWORD *)(v11 + v31);
            v37 = *(_OWORD *)(v11 + v31 + 8);
            v38 = *(_OWORD *)(v11 + v30 - 24);
            *(_QWORD *)(v34 + 16) = *(_QWORD *)(v11 + v30 - 8);
            *(_OWORD *)v34 = v38;
            *(_QWORD *)(v35 - 24) = v36;
            *(_OWORD *)(v35 - 16) = v37;
          }
          ++v33;
          v30 -= 24;
          v31 += 24;
        }
        while (v33 < v32);
      }
LABEL_45:
      v10 = v22;
    }
LABEL_46:
    if (v10 < v3)
    {
      if (__OFSUB__(v10, v14))
        goto LABEL_153;
      if (v10 - v14 < v112)
      {
        if (__OFADD__(v14, v112))
          goto LABEL_155;
        if (v14 + v112 >= v3)
          v39 = v3;
        else
          v39 = v14 + v112;
        if (v39 < v14)
          goto LABEL_156;
        if (v10 != v39)
        {
          v40 = v108 + 24 * v10;
          do
          {
            v41 = (uint64_t *)(v11 + 24 * v10);
            v42 = *v41;
            v43 = v41[1];
            v44 = v14;
            v45 = v40;
            do
            {
              v46 = *(_QWORD *)(v45 + 8);
              v47 = v42 == *(_QWORD *)v45 && v43 == v46;
              if (v47 || (_stringCompareWithSmolCheck(_:_:expecting:)(v42, v43, *(_QWORD *)v45, v46, 1) & 1) == 0)
                break;
              if (!v11)
                goto LABEL_158;
              v48 = *(_OWORD *)(v45 + 32);
              v49 = *(_QWORD *)(v45 + 16);
              v42 = *(_QWORD *)(v45 + 24);
              *(_OWORD *)(v45 + 24) = *(_OWORD *)v45;
              *(_QWORD *)(v45 + 40) = v49;
              *(_QWORD *)v45 = v42;
              *(_OWORD *)(v45 + 8) = v48;
              v43 = v48;
              v45 -= 24;
              ++v44;
            }
            while (v10 != v44);
            ++v10;
            v40 += 24;
          }
          while (v10 != v39);
          v10 = v39;
        }
      }
    }
    if (v10 < v14)
    {
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
      goto LABEL_162;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
      v12 = sub_3F258(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v51 = *((_QWORD *)v12 + 2);
    v50 = *((_QWORD *)v12 + 3);
    v13 = v51 + 1;
    if (v51 >= v50 >> 1)
      v12 = sub_3F258((char *)(v50 > 1), v51 + 1, 1, v12);
    *((_QWORD *)v12 + 2) = v13;
    v52 = v12 + 32;
    v53 = &v12[16 * v51 + 32];
    *(_QWORD *)v53 = v14;
    *((_QWORD *)v53 + 1) = v10;
    if (v51)
      break;
    v13 = 1;
    v11 = v114;
LABEL_15:
    v3 = v113;
    if (v10 >= v113)
    {
      v9 = v111;
      goto LABEL_120;
    }
  }
  v11 = v114;
  while (1)
  {
    v54 = v13 - 1;
    if (v13 >= 4)
    {
      v59 = &v52[16 * v13];
      v60 = *((_QWORD *)v59 - 8);
      v61 = *((_QWORD *)v59 - 7);
      v65 = __OFSUB__(v61, v60);
      v62 = v61 - v60;
      if (v65)
        goto LABEL_137;
      v64 = *((_QWORD *)v59 - 6);
      v63 = *((_QWORD *)v59 - 5);
      v65 = __OFSUB__(v63, v64);
      v57 = v63 - v64;
      v58 = v65;
      if (v65)
        goto LABEL_138;
      v66 = v13 - 2;
      v67 = &v52[16 * v13 - 32];
      v69 = *(_QWORD *)v67;
      v68 = *((_QWORD *)v67 + 1);
      v65 = __OFSUB__(v68, v69);
      v70 = v68 - v69;
      if (v65)
        goto LABEL_140;
      v65 = __OFADD__(v57, v70);
      v71 = v57 + v70;
      if (v65)
        goto LABEL_143;
      if (v71 >= v62)
      {
        v89 = &v52[16 * v54];
        v91 = *(_QWORD *)v89;
        v90 = *((_QWORD *)v89 + 1);
        v65 = __OFSUB__(v90, v91);
        v92 = v90 - v91;
        if (v65)
          goto LABEL_147;
        v82 = v57 < v92;
        goto LABEL_105;
      }
    }
    else
    {
      if (v13 != 3)
      {
        v83 = *((_QWORD *)v12 + 4);
        v84 = *((_QWORD *)v12 + 5);
        v65 = __OFSUB__(v84, v83);
        v76 = v84 - v83;
        v77 = v65;
        goto LABEL_99;
      }
      v56 = *((_QWORD *)v12 + 4);
      v55 = *((_QWORD *)v12 + 5);
      v65 = __OFSUB__(v55, v56);
      v57 = v55 - v56;
      v58 = v65;
    }
    if ((v58 & 1) != 0)
      goto LABEL_139;
    v66 = v13 - 2;
    v72 = &v52[16 * v13 - 32];
    v74 = *(_QWORD *)v72;
    v73 = *((_QWORD *)v72 + 1);
    v75 = __OFSUB__(v73, v74);
    v76 = v73 - v74;
    v77 = v75;
    if (v75)
      goto LABEL_142;
    v78 = &v52[16 * v54];
    v80 = *(_QWORD *)v78;
    v79 = *((_QWORD *)v78 + 1);
    v65 = __OFSUB__(v79, v80);
    v81 = v79 - v80;
    if (v65)
      goto LABEL_145;
    if (__OFADD__(v76, v81))
      goto LABEL_146;
    if (v76 + v81 >= v57)
    {
      v82 = v57 < v81;
LABEL_105:
      if (v82)
        v54 = v66;
      goto LABEL_107;
    }
LABEL_99:
    if ((v77 & 1) != 0)
      goto LABEL_141;
    v85 = &v52[16 * v54];
    v87 = *(_QWORD *)v85;
    v86 = *((_QWORD *)v85 + 1);
    v65 = __OFSUB__(v86, v87);
    v88 = v86 - v87;
    if (v65)
      goto LABEL_144;
    if (v88 < v76)
      goto LABEL_15;
LABEL_107:
    v93 = v54 - 1;
    if (v54 - 1 >= v13)
    {
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }
    if (!v11)
      goto LABEL_159;
    v94 = v11;
    v95 = &v52[16 * v93];
    v96 = *(_QWORD *)v95;
    v97 = &v52[16 * v54];
    v98 = *((_QWORD *)v97 + 1);
    sub_3EF84((char *)(v94 + 24 * *(_QWORD *)v95), (char *)(v94 + 24 * *(_QWORD *)v97), v94 + 24 * v98, __dst);
    if (v1)
      break;
    if (v98 < v96)
      goto LABEL_134;
    if (v54 > *((_QWORD *)v12 + 2))
      goto LABEL_135;
    *(_QWORD *)v95 = v96;
    *(_QWORD *)&v52[16 * v93 + 8] = v98;
    v99 = *((_QWORD *)v12 + 2);
    if (v54 >= v99)
      goto LABEL_136;
    v13 = v99 - 1;
    memmove(&v52[16 * v54], v97 + 16, 16 * (v99 - 1 - v54));
    *((_QWORD *)v12 + 2) = v99 - 1;
    v82 = v99 > 2;
    v11 = v114;
    if (!v82)
      goto LABEL_15;
  }
  v100 = v12;
LABEL_116:
  v101 = v100;
LABEL_117:
  swift_bridgeObjectRelease(v101);
  v111[2] = 0;
  return swift_bridgeObjectRelease(v111);
}

uint64_t sub_3EEA0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 24 * a3 - 24;
LABEL_5:
    v9 = (uint64_t *)(v7 + 24 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = v8;
    while (1)
    {
      v13 = *(_QWORD *)(v12 + 8);
      v14 = result == *(_QWORD *)v12 && v10 == v13;
      if (v14
        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v10, *(_QWORD *)v12, v13, 1),
            (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 24;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      v15 = *(_OWORD *)(v12 + 32);
      v16 = *(_QWORD *)(v12 + 16);
      result = *(_QWORD *)(v12 + 24);
      *(_OWORD *)(v12 + 24) = *(_OWORD *)v12;
      *(_QWORD *)(v12 + 40) = v16;
      *(_QWORD *)v12 = result;
      *(_OWORD *)(v12 + 8) = v15;
      v10 = v15;
      v12 -= 24;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_3EF84(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  __int128 v28;
  __int128 v29;
  uint64_t result;
  char *v31;
  char *v32;
  char *v33;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 24;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 24;
  v33 = __src;
  v32 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -23)
    {
      if (__dst != a2 || &a2[24 * v11] <= __dst)
        memmove(__dst, a2, 24 * v11);
      v19 = &v4[24 * v11];
      v31 = v19;
      v33 = v6;
      if (v7 < v6 && v10 >= 24)
      {
        v20 = a3 - 24;
        v21 = v6;
        while (1)
        {
          v22 = (char *)(v20 + 24);
          v23 = *((_QWORD *)v19 - 3);
          v24 = *((_QWORD *)v19 - 2);
          v25 = *((_QWORD *)v21 - 3);
          v26 = *((_QWORD *)v21 - 2);
          v21 -= 24;
          v27 = v23 == v25 && v24 == v26;
          if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v25, v26, 1) & 1) == 0)
          {
            v31 = v19 - 24;
            if (v22 < v19 || v20 >= (unint64_t)v19 || v22 != v19)
            {
              v29 = *(_OWORD *)(v19 - 24);
              *(_QWORD *)(v20 + 16) = *((_QWORD *)v19 - 1);
              *(_OWORD *)v20 = v29;
            }
            v21 = v6;
            v19 -= 24;
            if (v6 <= v7)
              goto LABEL_46;
          }
          else
          {
            if (v22 != v6 || v20 >= (unint64_t)v6)
            {
              v28 = *(_OWORD *)v21;
              *(_QWORD *)(v20 + 16) = *((_QWORD *)v21 + 2);
              *(_OWORD *)v20 = v28;
            }
            v33 = v21;
            if (v21 <= v7)
              goto LABEL_46;
          }
          v20 -= 24;
          v6 = v21;
          if (v19 <= v4)
            goto LABEL_46;
        }
      }
      goto LABEL_46;
    }
  }
  else if (v8 >= -23)
  {
    if (__dst != __src || &__src[24 * v9] <= __dst)
      memmove(__dst, __src, 24 * v9);
    v12 = &v4[24 * v9];
    v31 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      do
      {
        v13 = *((_QWORD *)v6 + 1);
        v14 = *((_QWORD *)v4 + 1);
        v15 = *(_QWORD *)v6 == *(_QWORD *)v4 && v13 == v14;
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v6, v13, *(_QWORD *)v4, v14, 1) & 1) == 0)
        {
          if (v7 != v4)
          {
            v18 = *(_OWORD *)v4;
            *((_QWORD *)v7 + 2) = *((_QWORD *)v4 + 2);
            *(_OWORD *)v7 = v18;
          }
          v4 += 24;
          v32 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 24;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
          {
            v17 = *(_OWORD *)v6;
            *((_QWORD *)v7 + 2) = *((_QWORD *)v6 + 2);
            *(_OWORD *)v7 = v17;
          }
        }
        v7 += 24;
        if (v4 >= v12)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v33 = v7;
    }
LABEL_46:
    sub_3F350((void **)&v33, (const void **)&v32, &v31);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_3F258(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_29EF0(&qword_B8730);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_3F350(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  char v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -24)
  {
    v7 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v7, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 24;
    if (result != v3 || result >= &v3[24 * v6])
      return (char *)memmove(result, v3, 24 * v6);
  }
  return result;
}

uint64_t sub_3F40C(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = type metadata accessor for URLQueryItem(0);
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_14;
  if (v8 / v7 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
    return swift_arrayInitWithTakeFrontToBack(v3, v4);
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront(v3, v4);
  return result;
}

char *sub_3F518(uint64_t a1)
{
  return sub_3F258(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_3F52C(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_39:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  v23 = -1 << *(_BYTE *)(a4 + 32);
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = *v20;
    v11[1] = v21;
    v11[2] = v22;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      swift_unknownObjectRetain(v22);
      goto LABEL_38;
    }
    v11 += 3;
    swift_bridgeObjectRetain(v21);
    result = swift_unknownObjectRetain(v22);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        v9 = 0;
        v12 = v17;
      }
      else
      {
        v18 = *(_QWORD *)(v6 + 8 * v12);
        if (v18)
          goto LABEL_14;
        v19 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_33;
        v18 = *(_QWORD *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          v17 = v19;
          goto LABEL_18;
        }
        v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          v18 = *(_QWORD *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            v17 = v12;
            goto LABEL_18;
          }
          v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            v9 = 0;
            goto LABEL_37;
          }
          v18 = *(_QWORD *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              v17 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_42;
              if (v17 >= v14)
              {
                v9 = 0;
                v12 = v14 - 1;
                goto LABEL_37;
              }
              v18 = *(_QWORD *)(v6 + 8 * v17);
              ++v19;
              if (v18)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v9 = 0;
        v12 = v17 + 2;
      }
LABEL_37:
      v10 = v13;
LABEL_38:
      v7 = v23;
      goto LABEL_39;
    }
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_3F744(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v8 = type metadata accessor for URLQueryItem(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v10);
  v15 = (char *)&v32 - v14;
  v39 = a4;
  v18 = *(_QWORD *)(a4 + 64);
  v17 = a4 + 64;
  v16 = v18;
  v37 = v17;
  v19 = -1 << *(_BYTE *)(v17 - 32);
  if (-v19 < 64)
    v20 = ~(-1 << -(char)v19);
  else
    v20 = -1;
  v21 = v20 & v16;
  if (!a2)
  {
    v22 = 0;
    a3 = 0;
LABEL_38:
    v31 = v37;
    *a1 = v39;
    a1[1] = v31;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }
  if (!a3)
  {
    v22 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v34 = -1 << *(_BYTE *)(v17 - 32);
  v35 = a1;
  v22 = 0;
  v23 = 0;
  v36 = (unint64_t)(63 - v19) >> 6;
  v33 = v36 - 1;
  v38 = a3;
  if (!v21)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    v29 = *(_QWORD *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v12, *(_QWORD *)(v39 + 56) + v29 * v25, v8);
    v30 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v30(v15, v12, v8);
    result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v15, v8);
    a3 = v38;
    if (v23 == v38)
      goto LABEL_37;
    a2 += v29;
    if (v21)
      goto LABEL_8;
LABEL_9:
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v26 >= v36)
      goto LABEL_32;
    v27 = *(_QWORD *)(v37 + 8 * v26);
    if (!v27)
      break;
LABEL_18:
    v21 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v22 = v26;
  }
  v22 += 2;
  if (v26 + 1 >= v36)
  {
    v21 = 0;
    v22 = v26;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v37 + 8 * v22);
  if (v27)
    goto LABEL_14;
  v28 = v26 + 2;
  if (v26 + 2 >= v36)
    goto LABEL_32;
  v27 = *(_QWORD *)(v37 + 8 * v28);
  if (v27)
    goto LABEL_17;
  v22 = v26 + 3;
  if (v26 + 3 >= v36)
  {
    v21 = 0;
    v22 = v26 + 2;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v37 + 8 * v22);
  if (v27)
  {
LABEL_14:
    v26 = v22;
    goto LABEL_18;
  }
  v28 = v26 + 4;
  if (v26 + 4 >= v36)
  {
LABEL_32:
    v21 = 0;
LABEL_36:
    a3 = v23;
LABEL_37:
    v19 = v34;
    a1 = v35;
    goto LABEL_38;
  }
  v27 = *(_QWORD *)(v37 + 8 * v28);
  if (v27)
  {
LABEL_17:
    v26 = v28;
    goto LABEL_18;
  }
  while (1)
  {
    v26 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v26 >= v36)
    {
      v21 = 0;
      v22 = v33;
      goto LABEL_36;
    }
    v27 = *(_QWORD *)(v37 + 8 * v26);
    ++v28;
    if (v27)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_3FA0C(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain(v21);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_3FC08(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain(v21);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_3FE04(_QWORD *a1)
{
  return sub_3AFD8(0, a1[2], 0, a1);
}

unint64_t sub_3FE18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_B8748;
  if (!qword_B8748)
  {
    v1 = sub_29F30(&qword_B8738);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_B8748);
  }
  return result;
}

uint64_t sub_3FE64(_QWORD *a1)
{
  return sub_3B484(0, a1[2], 0, a1);
}

uint64_t static BooksLocalizer.load(using:asPartOf:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;

  v2[7] = v1;
  v2[8] = type metadata accessor for AppleServicesLocalizer(0);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to static AppleServicesLocalizer.load(using:)[1]);
  v2[9] = v4;
  *v4 = v2;
  v4[1] = sub_3FEDC;
  return static AppleServicesLocalizer.load(using:)(a1);
}

uint64_t sub_3FEDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 72);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
    return (*(uint64_t (**)(void))(v6 + 8))();
  *(_QWORD *)(v4 + 80) = a1;
  return swift_task_switch(sub_3FF58, 0, 0);
}

uint64_t sub_3FF58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v0 + 64);
  *(_QWORD *)(v0 + 48) = &protocol witness table for AppleServicesLocalizer;
  *(_QWORD *)(v0 + 16) = v1;
  v3 = swift_allocObject(v2, 57, 7);
  *(_BYTE *)(v3 + 56) = 1;
  sub_378BC((__int128 *)(v0 + 16), v3 + 16);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t static BooksLocalizer.create(basedOn:asPartOf:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = a1[3];
  v2 = a1[4];
  v3 = sub_3FFF4(a1, v1);
  return sub_41B30((uint64_t)v3, v1, v2);
}

_QWORD *sub_3FFF4(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t static BooksLocalizer.fetch(contentsOf:for:asPartOf:)()
{
  return swift_task_switch(sub_4002C, 0, 0);
}

uint64_t sub_4002C()
{
  return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000003BLL, 0x8000000000089280, "JSApp/BooksLocalizer.swift", 26, 2, 31, 0);
}

uint64_t BooksLocalizer.jsExport.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[5];
  v2 = v0[6];
  sub_3FFF4(v0 + 2, v1);
  return dispatch thunk of Localizer.jsExport.getter(v1, v2);
}

uint64_t BooksLocalizer.locale.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[5];
  v2 = v0[6];
  sub_3FFF4(v0 + 2, v1);
  return dispatch thunk of Localizer.locale.getter(v1, v2);
}

uint64_t BooksLocalizer.hasString(forKey:using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;

  v7 = v3[5];
  v8 = v3[6];
  sub_3FFF4(v3 + 2, v7);
  return dispatch thunk of Localizer.hasString(forKey:using:)(a1, a2, a3, v7, v8) & 1;
}

Swift::Bool __swiftcall BooksLocalizer.isLocalizedString(_:)(Swift::String a1)
{
  _QWORD *v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v4 = v1[5];
  v5 = v1[6];
  sub_3FFF4(v1 + 2, v4);
  return dispatch thunk of Localizer.isLocalizedString(_:)(countAndFlagsBits, object, v4, v5) & 1;
}

uint64_t BooksLocalizer.string(forKey:with:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v9;
  uint64_t v10;

  v9 = v4[5];
  v10 = v4[6];
  sub_3FFF4(v4 + 2, v9);
  return dispatch thunk of Localizer.string(forKey:with:using:)(a1, a2, a3, a4, v9, v10);
}

uint64_t BooksLocalizer.string(forKey:with:defaultValue:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v25 = a4;
  v26 = a3;
  v9 = type metadata accessor for LocalizerLookupStrategy(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v24 = a5;
  v13(v12, a5, v9);
  v15 = v5[5];
  v14 = v5[6];
  sub_3FFF4(v5 + 2, v15);
  LOBYTE(v14) = dispatch thunk of Localizer.hasString(forKey:using:)(a1, a2, v12, v15, v14);
  v16 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if ((v14 & 1) != 0)
  {
    v17 = v5[5];
    v18 = v5[6];
    sub_3FFF4(v5 + 2, v17);
    return dispatch thunk of Localizer.string(forKey:with:defaultValue:using:)(a1, a2, v26, v25, v24, v17, v18);
  }
  else
  {
    v20 = LocalizerDefaultValue.description.getter(v16);
    v19 = v20;
    v22 = v21;
    if (v26)
    {
      v19 = sub_418BC(v20, v21, v26);
      swift_bridgeObjectRelease(v22);
    }
  }
  return v19;
}

uint64_t BooksLocalizer.decimal(forNumber:minimumFractionDigits:maximumFractionDigits:in:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6)
{
  return sub_403D4(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&dispatch thunk of Localizer.decimal(forNumber:minimumFractionDigits:maximumFractionDigits:in:));
}

uint64_t BooksLocalizer.percentage(forNumber:minimumFractionDigits:maximumFractionDigits:in:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6)
{
  return sub_403D4(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&dispatch thunk of Localizer.percentage(forNumber:minimumFractionDigits:maximumFractionDigits:in:));
}

uint64_t sub_403D4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  _QWORD *v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v13 = a3 & 1;
  v14 = a5 & 1;
  v15 = v7[5];
  v16 = v7[6];
  sub_3FFF4(v7 + 2, v15);
  return a7(a1, a2, v13, a4, v14, a6, v15, v16);
}

uint64_t BooksLocalizer.integer(for:in:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = v2[5];
  v6 = v2[6];
  sub_3FFF4(v2 + 2, v5);
  return dispatch thunk of Localizer.integer(for:in:)(a1, a2, v5, v6);
}

uint64_t BooksLocalizer.string(withCount:forKey:with:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v11;
  uint64_t v12;

  v11 = v5[5];
  v12 = v5[6];
  sub_3FFF4(v5 + 2, v11);
  return dispatch thunk of Localizer.string(withCount:forKey:with:using:)(a1, a2, a3, a4, a5, v11, v12);
}

uint64_t BooksLocalizer.string(withCount:forKey:with:defaultValue:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[64];

  v7 = v6;
  v33 = a5;
  v34 = a1;
  v35 = a4;
  v11 = type metadata accessor for LocalizerLookupStrategy(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v32 = a6;
  v15(v14, a6, v11);
  v16 = v7[5];
  v17 = v7[6];
  sub_3FFF4(v7 + 2, v16);
  LOBYTE(a6) = dispatch thunk of Localizer.hasString(forKey:using:)(a2, a3, v14, v16, v17);
  v18 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if ((a6 & 1) != 0)
  {
    v19 = v7[5];
    v20 = v7[6];
    sub_3FFF4(v7 + 2, v19);
    return dispatch thunk of Localizer.string(withCount:forKey:with:defaultValue:using:)(v34, a2, a3, v35, v33, v32, v19, v20);
  }
  else
  {
    v22 = LocalizerDefaultValue.description.getter(v18);
    v24 = v23;
    v25 = sub_29EF0((uint64_t *)&unk_B8760);
    inited = swift_initStackObject(v25, v37);
    *(_OWORD *)(inited + 16) = xmmword_8DFE0;
    *(_QWORD *)(inited + 32) = 0x746E756F63;
    *(_QWORD *)(inited + 40) = 0xE500000000000000;
    v36 = v34;
    *(_QWORD *)(inited + 48) = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    *(_QWORD *)(inited + 56) = v27;
    v28 = sub_40730(inited);
    v21 = sub_418BC(v22, v24, v28);
    v30 = v29;
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v28);
    if (v35)
    {
      v21 = sub_418BC(v21, v30, v35);
      swift_bridgeObjectRelease(v30);
    }
  }
  return v21;
}

unint64_t sub_40730(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_29EF0(&qword_B8860);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v10 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_4CF3C(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (_QWORD *)(v4[7] + 16 * result);
    *v14 = v10;
    v14[1] = v9;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_40850(uint64_t a1)
{
  return sub_40DB4(a1, &qword_B8850, &qword_B8858, (uint64_t (*)(uint64_t))sub_4CFA0);
}

unint64_t sub_4086C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_29EF0(&qword_B8868);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_37B7C(v7, (uint64_t)v16, &qword_B8870);
    result = sub_4CFA4((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v4[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_41BD8(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 72;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_409AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_29EF0(&qword_B8848);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_4CF3C(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_40AC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_29EF0(&qword_B8838);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_37B7C(v7, (uint64_t)&v16, &qword_B8840);
    v8 = v16;
    v9 = v17;
    result = sub_4CF3C(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_41BD8(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_40BF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = sub_29EF0(&qword_B8828);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v26 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v26);
    return (unint64_t)v8;
  }
  sub_29EF0(&qword_B8830);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = (char *)v5 + *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v28 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_37B7C(v13, (uint64_t)v5, &qword_B8828);
    v15 = *v5;
    v16 = v5[1];
    result = sub_4CF3C(*v5, v16);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v20 = (uint64_t *)(v8[6] + 16 * result);
    *v20 = v15;
    v20[1] = v16;
    v21 = v8[7];
    v22 = type metadata accessor for URLQueryItem(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v19, v10, v22);
    v23 = v8[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_12;
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v26 = v28;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_40D98(uint64_t a1)
{
  return sub_40DB4(a1, &qword_B8818, &qword_B8820, (uint64_t (*)(uint64_t))sub_4CFA0);
}

unint64_t sub_40DB4(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    v9 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_29EF0(a2);
  v8 = static _DictionaryStorage.allocate(capacity:)(v5);
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v9;
  }
  v11 = v8 + 64;
  v12 = a1 + 32;
  swift_retain(v8);
  while (1)
  {
    sub_37B7C(v12, (uint64_t)&v19, a3);
    v13 = v19;
    result = a4(v19);
    if ((v15 & 1) != 0)
      break;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v9[6] + 8 * result) = v13;
    result = (unint64_t)sub_41BD8(&v20, (_OWORD *)(v9[7] + 32 * result));
    v16 = v9[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      goto LABEL_11;
    v9[2] = v18;
    v12 += 40;
    if (!--v10)
    {
      swift_release(v9);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

Swift::String __swiftcall BooksLocalizer.formattedCount(_:)(Swift::Int a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  Swift::String result;

  v3 = v1[5];
  v4 = v1[6];
  sub_3FFF4(v1 + 2, v3);
  v5 = dispatch thunk of Localizer.formattedCount(_:)(a1, v3, v4);
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

Swift::String __swiftcall BooksLocalizer.fileSize(forBytes:)(Swift::Double forBytes)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  Swift::String result;

  v3 = v1[5];
  v4 = v1[6];
  sub_3FFF4(v1 + 2, v3);
  v5 = dispatch thunk of Localizer.fileSize(forBytes:)(v3, v4, forBytes);
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

uint64_t BooksLocalizer.formattedDate(format:date:withContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v9;
  uint64_t v10;

  v9 = v4[5];
  v10 = v4[6];
  sub_3FFF4(v4 + 2, v9);
  return dispatch thunk of Localizer.formattedDate(format:date:withContext:)(a1, a2, a3, a4, v9, v10);
}

uint64_t BooksLocalizer.formattedDate(format:date:inSentence:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v11;
  uint64_t v12;

  v11 = v5[5];
  v12 = v5[6];
  sub_3FFF4(v5 + 2, v11);
  return dispatch thunk of Localizer.formattedDate(format:date:inSentence:)(a1, a2, a3, a4, a5, v11, v12);
}

uint64_t BooksLocalizer.relativeDate(_:using:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = v2[5];
  v6 = v2[6];
  sub_3FFF4(v2 + 2, v5);
  return dispatch thunk of Localizer.relativeDate(_:using:)(a1, a2, v5, v6);
}

uint64_t BooksLocalizer.deinit()
{
  uint64_t v0;

  sub_3789C((_QWORD *)(v0 + 16));
  return v0;
}

uint64_t BooksLocalizer.__deallocating_deinit()
{
  uint64_t v0;

  sub_3789C((_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 57, 7);
}

uint64_t sub_410F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  sub_3FFF4((_QWORD *)(*(_QWORD *)v0 + 16), v1);
  return dispatch thunk of Localizer.jsExport.getter(v1, v2);
}

uint64_t sub_41138()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  sub_3FFF4((_QWORD *)(*(_QWORD *)v0 + 16), v1);
  return dispatch thunk of Localizer.locale.getter(v1, v2);
}

uint64_t sub_41184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;

  v7 = *(_QWORD *)(*(_QWORD *)v3 + 40);
  v8 = *(_QWORD *)(*(_QWORD *)v3 + 48);
  sub_3FFF4((_QWORD *)(*(_QWORD *)v3 + 16), v7);
  return dispatch thunk of Localizer.hasString(forKey:using:)(a1, a2, a3, v7, v8) & 1;
}

uint64_t sub_411EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(*(_QWORD *)v2 + 40);
  v6 = *(_QWORD *)(*(_QWORD *)v2 + 48);
  sub_3FFF4((_QWORD *)(*(_QWORD *)v2 + 16), v5);
  return dispatch thunk of Localizer.isLocalizedString(_:)(a1, a2, v5, v6) & 1;
}

uint64_t sub_4124C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(*(_QWORD *)v4 + 40);
  v10 = *(_QWORD *)(*(_QWORD *)v4 + 48);
  sub_3FFF4((_QWORD *)(*(_QWORD *)v4 + 16), v9);
  return dispatch thunk of Localizer.string(forKey:with:using:)(a1, a2, a3, a4, v9, v10);
}

uint64_t sub_412C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = a4;
  v28 = a3;
  v9 = type metadata accessor for LocalizerLookupStrategy(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v5;
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v26 = a5;
  v14(v12, a5, v9);
  v16 = v13[5];
  v15 = v13[6];
  sub_3FFF4(v13 + 2, v16);
  v17 = dispatch thunk of Localizer.hasString(forKey:using:)(a1, a2, v12, v16, v15);
  v18 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if ((v17 & 1) != 0)
  {
    v19 = v13[5];
    v20 = v13[6];
    sub_3FFF4(v13 + 2, v19);
    return dispatch thunk of Localizer.string(forKey:with:defaultValue:using:)(a1, a2, v28, v27, v26, v19, v20);
  }
  else
  {
    v22 = LocalizerDefaultValue.description.getter(v18);
    v21 = v22;
    v24 = v23;
    if (v28)
    {
      v21 = sub_418BC(v22, v23, v28);
      swift_bridgeObjectRelease(v24);
    }
  }
  return v21;
}

uint64_t sub_4142C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_4147C(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&dispatch thunk of Localizer.decimal(forNumber:minimumFractionDigits:maximumFractionDigits:in:));
}

uint64_t sub_41454(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_4147C(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&dispatch thunk of Localizer.percentage(forNumber:minimumFractionDigits:maximumFractionDigits:in:));
}

uint64_t sub_4147C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v14 = a3 & 1;
  v15 = a5 & 1;
  v16 = *(_QWORD *)(*(_QWORD *)v9 + 40);
  v17 = *(_QWORD *)(*(_QWORD *)v9 + 48);
  sub_3FFF4((_QWORD *)(*(_QWORD *)v9 + 16), v16);
  return a9(a1, a2, v14, a4, v15, a6, v16, v17);
}

uint64_t sub_4150C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(*(_QWORD *)v2 + 40);
  v6 = *(_QWORD *)(*(_QWORD *)v2 + 48);
  sub_3FFF4((_QWORD *)(*(_QWORD *)v2 + 16), v5);
  return dispatch thunk of Localizer.integer(for:in:)(a1, a2, v5, v6);
}

uint64_t sub_41568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;

  v11 = *(_QWORD *)(*(_QWORD *)v5 + 40);
  v12 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  sub_3FFF4((_QWORD *)(*(_QWORD *)v5 + 16), v11);
  return dispatch thunk of Localizer.string(withCount:forKey:with:using:)(a1, a2, a3, a4, a5, v11, v12);
}

uint64_t sub_415E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return BooksLocalizer.string(withCount:forKey:with:defaultValue:using:)(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_41604(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  sub_3FFF4((_QWORD *)(*(_QWORD *)v1 + 16), v3);
  return dispatch thunk of Localizer.formattedCount(_:)(a1, v3, v4);
}

uint64_t sub_41650(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  sub_3FFF4((_QWORD *)(*(_QWORD *)v1 + 16), v3);
  return dispatch thunk of Localizer.fileSize(forBytes:)(v3, v4, a1);
}

uint64_t sub_416A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(*(_QWORD *)v4 + 40);
  v10 = *(_QWORD *)(*(_QWORD *)v4 + 48);
  sub_3FFF4((_QWORD *)(*(_QWORD *)v4 + 16), v9);
  return dispatch thunk of Localizer.formattedDate(format:date:withContext:)(a1, a2, a3, a4, v9, v10);
}

uint64_t sub_41718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;

  v11 = *(_QWORD *)(*(_QWORD *)v5 + 40);
  v12 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  sub_3FFF4((_QWORD *)(*(_QWORD *)v5 + 16), v11);
  return dispatch thunk of Localizer.formattedDate(format:date:inSentence:)(a1, a2, a3, a4, a5, v11, v12);
}

uint64_t sub_41794(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(*(_QWORD *)v2 + 40);
  v6 = *(_QWORD *)(*(_QWORD *)v2 + 48);
  sub_3FFF4((_QWORD *)(*(_QWORD *)v2 + 16), v5);
  return dispatch thunk of Localizer.relativeDate(_:using:)(a1, a2, v5, v6);
}

uint64_t sub_417F0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v16[2];
  _QWORD v17[4];

  v4 = *a1;
  v5 = a1[1];
  v6._countAndFlagsBits = *a2;
  v7 = (void *)a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v17[2] = v4;
  v17[3] = v5;
  v17[0] = 16448;
  v17[1] = 0xE200000000000000;
  v6._object = v7;
  String.append(_:)(v6);
  v10._countAndFlagsBits = 16448;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  v16[0] = v8;
  v16[1] = v9;
  v11 = sub_3A100();
  v12 = ((uint64_t (*)(_QWORD *, _QWORD *, _QWORD, _QWORD, _QWORD, uint64_t, void *, void *, void *, unint64_t, unint64_t, unint64_t))StringProtocol.replacingOccurrences<A, B>(of:with:options:range:))(v17, v16, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v11, v11, v11);
  v14 = v13;
  result = swift_bridgeObjectRelease(0xE200000000000000);
  *a3 = v12;
  a3[1] = v14;
  return result;
}

uint64_t sub_418BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[4];
  uint64_t v28;
  uint64_t v29;

  v29 = a2;
  v5 = a2;
  v6 = a1;
  v28 = a1;
  v7 = a3 + 64;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a3 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  result = swift_bridgeObjectRetain(a3);
  v13 = 0;
  if (!v10)
    goto LABEL_5;
LABEL_4:
  v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = 16 * i;
    v20 = (uint64_t *)(*(_QWORD *)(a3 + 48) + v19);
    v21 = *v20;
    v6 = v20[1];
    v22 = (uint64_t *)(*(_QWORD *)(a3 + 56) + v19);
    v23 = *v22;
    v24 = v22[1];
    v27[0] = v21;
    v27[1] = v6;
    v27[2] = v23;
    v27[3] = v24;
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v24);
    sub_417F0(&v28, v27, &v25);
    swift_bridgeObjectRelease(v5);
    if (v3)
    {
      swift_release(a3);
      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRelease(v6);
      return v6;
    }
    swift_bridgeObjectRelease(v24);
    result = swift_bridgeObjectRelease(v6);
    v6 = v25;
    v5 = v26;
    v28 = v25;
    v29 = v26;
    if (v10)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v13++, 1))
      break;
    if (v13 >= v11)
      goto LABEL_26;
    v17 = *(_QWORD *)(v7 + 8 * v13);
    if (!v17)
    {
      v18 = v13 + 1;
      if (v13 + 1 >= v11)
        goto LABEL_26;
      v17 = *(_QWORD *)(v7 + 8 * v18);
      if (v17)
        goto LABEL_16;
      v18 = v13 + 2;
      if (v13 + 2 >= v11)
        goto LABEL_26;
      v17 = *(_QWORD *)(v7 + 8 * v18);
      if (v17)
        goto LABEL_16;
      v18 = v13 + 3;
      if (v13 + 3 >= v11)
        goto LABEL_26;
      v17 = *(_QWORD *)(v7 + 8 * v18);
      if (v17)
      {
LABEL_16:
        v13 = v18;
        goto LABEL_17;
      }
      v18 = v13 + 4;
      if (v13 + 4 < v11)
      {
        v17 = *(_QWORD *)(v7 + 8 * v18);
        if (!v17)
        {
          while (1)
          {
            v13 = v18 + 1;
            if (__OFADD__(v18, 1))
              goto LABEL_29;
            if (v13 >= v11)
              goto LABEL_26;
            v17 = *(_QWORD *)(v7 + 8 * v13);
            ++v18;
            if (v17)
              goto LABEL_17;
          }
        }
        goto LABEL_16;
      }
LABEL_26:
      swift_release(a3);
      return v6;
    }
LABEL_17:
    v10 = (v17 - 1) & v17;
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_41ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v10 = a2;
  v11 = a3;
  v5 = sub_37FA8(&v9);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(v5, a1, a2);
  v6 = type metadata accessor for BooksLocalizer();
  v7 = swift_allocObject(v6, 57, 7);
  *(_BYTE *)(v7 + 56) = 1;
  sub_378BC(&v9, v7 + 16);
  return v7;
}

uint64_t sub_41B30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  __chkstk_darwin(a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v6);
  return sub_41ABC((uint64_t)v6, a2, a3);
}

uint64_t type metadata accessor for BooksLocalizer()
{
  return objc_opt_self(_TtC5JSApp14BooksLocalizer);
}

uint64_t method lookup function for BooksLocalizer(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BooksLocalizer);
}

_OWORD *sub_41BD8(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_41BE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  _QWORD v33[5];
  unint64_t v34;

  v1 = a1;
  v34 = (unint64_t)&_swiftEmptyArrayStorage;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_2E594(0, &qword_B82C0, UIScene_ptr);
    v5 = sub_2E3B0(&qword_B82C8, &qword_B82C0, UIScene_ptr);
    v6 = Set.Iterator.init(_cocoa:)(v33, v3, v4, v5);
    v1 = v33[0];
    v30 = v33[1];
    v7 = v33[2];
    v8 = v33[3];
    v9 = v33[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v30 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    v6 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v13 = (unint64_t)(v7 + 64) >> 6;
  while (v1 < 0)
  {
    v17 = __CocoaSet.Iterator.next()(v6);
    if (!v17)
      goto LABEL_40;
    v18 = v17;
    v31 = v17;
    v19 = sub_2E594(0, &qword_B82C0, UIScene_ptr);
    swift_unknownObjectRetain(v18);
    swift_dynamicCast(&v32, &v31, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
    v20 = v32;
    swift_unknownObjectRelease(v18);
    v16 = v8;
    v14 = v9;
    if (!v20)
      goto LABEL_40;
LABEL_36:
    v24 = objc_opt_self(UIWindowScene);
    v25 = swift_dynamicCastObjCClass(v20, v24);
    if (v25)
    {
      v26 = v25;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v25);
      v28 = *(_QWORD *)((char *)&dword_10 + (v34 & 0xFFFFFFFFFFFFFF8));
      v27 = *(_QWORD *)((char *)&dword_18 + (v34 & 0xFFFFFFFFFFFFFF8));
      if (v28 >= v27 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
      v29 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v26);
      v6 = (_QWORD *)specialized Array._endMutation()(v29);
    }
    else
    {

    }
    v8 = v16;
    v9 = v14;
  }
  if (v9)
  {
    v14 = (v9 - 1) & v9;
    v15 = __clz(__rbit64(v9)) | (v8 << 6);
    v16 = v8;
LABEL_35:
    v20 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v15);
    if (!v20)
      goto LABEL_40;
    goto LABEL_36;
  }
  v21 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v21 >= v13)
      goto LABEL_40;
    v22 = *(_QWORD *)(v30 + 8 * v21);
    v16 = v8 + 1;
    if (!v22)
    {
      v16 = v8 + 2;
      if (v8 + 2 >= v13)
        goto LABEL_40;
      v22 = *(_QWORD *)(v30 + 8 * v16);
      if (!v22)
      {
        v16 = v8 + 3;
        if (v8 + 3 >= v13)
          goto LABEL_40;
        v22 = *(_QWORD *)(v30 + 8 * v16);
        if (!v22)
        {
          v16 = v8 + 4;
          if (v8 + 4 >= v13)
            goto LABEL_40;
          v22 = *(_QWORD *)(v30 + 8 * v16);
          if (!v22)
          {
            v16 = v8 + 5;
            if (v8 + 5 >= v13)
              goto LABEL_40;
            v22 = *(_QWORD *)(v30 + 8 * v16);
            if (!v22)
            {
              v23 = v8 + 6;
              while (v13 != v23)
              {
                v22 = *(_QWORD *)(v30 + 8 * v23++);
                if (v22)
                {
                  v16 = v23 - 1;
                  goto LABEL_34;
                }
              }
LABEL_40:
              sub_2E5CC(v1);
              return;
            }
          }
        }
      }
    }
LABEL_34:
    v14 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v16 << 6);
    goto LABEL_35;
  }
  __break(1u);
}

uint64_t sub_41F18()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for HotReloadStatusHUDManager();
  result = swift_initStaticObject(v0, &unk_B81C0);
  qword_BC978 = result;
  return result;
}

void sub_41F40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  char v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[2];
  _QWORD v35[4];
  _QWORD v36[6];
  uint64_t v37;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_2E594(0, &qword_B82E0, UIWindowScene_ptr);
    v5 = sub_2E3B0((unint64_t *)&qword_B82E8, &qword_B82E0, UIWindowScene_ptr);
    v6 = Set.Iterator.init(_cocoa:)(v36, v3, v4, v5);
    v1 = v36[0];
    v32 = v36[1];
    v7 = v36[2];
    v8 = v36[3];
    v9 = v36[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v32 = a1 + 56;
    v11 = ~v10;
    v12 = -v10;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v9 = v13 & *(_QWORD *)(a1 + 56);
    v6 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v7 = v11;
    v8 = 0;
  }
  v31 = (unint64_t)(v7 + 64) >> 6;
  v33 = v1;
  if (v1 < 0)
    goto LABEL_13;
LABEL_11:
  if (v9)
  {
    v14 = (v9 - 1) & v9;
    v15 = __clz(__rbit64(v9)) | (v8 << 6);
    v16 = v8;
    goto LABEL_32;
  }
  v21 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v21 < v31)
    {
      v22 = *(_QWORD *)(v32 + 8 * v21);
      v16 = v8 + 1;
      if (v22)
        goto LABEL_31;
      v16 = v8 + 2;
      if (v8 + 2 >= v31)
        goto LABEL_44;
      v22 = *(_QWORD *)(v32 + 8 * v16);
      if (v22)
        goto LABEL_31;
      v16 = v8 + 3;
      if (v8 + 3 >= v31)
        goto LABEL_44;
      v22 = *(_QWORD *)(v32 + 8 * v16);
      if (v22)
        goto LABEL_31;
      v16 = v8 + 4;
      if (v8 + 4 >= v31)
        goto LABEL_44;
      v22 = *(_QWORD *)(v32 + 8 * v16);
      if (v22)
      {
LABEL_31:
        v14 = (v22 - 1) & v22;
        v15 = __clz(__rbit64(v22)) + (v16 << 6);
LABEL_32:
        v20 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v15);
        if (v20)
        {
          while (1)
          {
            swift_beginAccess(&off_B8878, v34, 32, 0);
            v24 = objc_getAssociatedObject(v20, &off_B8878);
            swift_endAccess(v34);
            if (v24)
            {
              _bridgeAnyObjectToAny(_:)(v34, v24);
              swift_unknownObjectRelease(v24);
            }
            else
            {
              memset(v34, 0, sizeof(v34));
            }
            sub_42A84((uint64_t)v34, (uint64_t)v35);
            if (v35[3])
            {
              v25 = type metadata accessor for HotReloadStatusHUD();
              if ((swift_dynamicCast(&v37, v35, (char *)&type metadata for Any + 8, v25, 6) & 1) != 0)
              {
                v26 = v37;
                goto LABEL_41;
              }
            }
            else
            {
              sub_42ACC((uint64_t)v35);
            }
            v27 = type metadata accessor for HotReloadStatusHUD();
            v26 = swift_allocObject(v27, 88, 7);
            *(_OWORD *)(v26 + 24) = xmmword_8D4B0;
            *(_OWORD *)(v26 + 40) = xmmword_8D4C0;
            *(_QWORD *)(v26 + 56) = 0;
            *(_QWORD *)(v26 + 64) = 0x3FB999999999999ALL;
            *(_WORD *)(v26 + 72) = 0;
            *(_BYTE *)(v26 + 74) = 0;
            *(_QWORD *)(v26 + 80) = &_swiftEmptyArrayStorage;
            v28 = objc_allocWithZone((Class)type metadata accessor for HotReloadStatusHUDWindow());
            v29 = v20;
            *(_QWORD *)(v26 + 16) = objc_msgSend(v28, "initWithWindowScene:", v29);

            swift_beginAccess(&off_B8878, v35, 32, 0);
            swift_retain(v26);
            objc_setAssociatedObject(v29, &off_B8878, (id)v26, &stru_2E8.segname[9]);
            swift_endAccess(v35);
            swift_release(v26);
            v1 = v33;
LABEL_41:
            v30 = *(_BYTE *)(v26 + 73);
            swift_release(v26);
            if ((v30 & 1) != 0)
              goto LABEL_44;

            v8 = v16;
            v9 = v14;
            if ((v1 & 0x8000000000000000) == 0)
              goto LABEL_11;
LABEL_13:
            v17 = __CocoaSet.Iterator.next()(v6);
            if (v17)
            {
              v18 = v17;
              *(_QWORD *)&v34[0] = v17;
              v19 = sub_2E594(0, &qword_B82E0, UIWindowScene_ptr);
              swift_unknownObjectRetain(v18);
              swift_dynamicCast(v35, v34, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
              v20 = (id)v35[0];
              swift_unknownObjectRelease(v18);
              v16 = v8;
              v14 = v9;
              if (v20)
                continue;
            }
            goto LABEL_44;
          }
        }
        goto LABEL_44;
      }
      v16 = v8 + 5;
      if (v8 + 5 < v31)
      {
        v22 = *(_QWORD *)(v32 + 8 * v16);
        if (!v22)
        {
          v23 = v8 + 6;
          do
          {
            if (v31 == v23)
              goto LABEL_44;
            v22 = *(_QWORD *)(v32 + 8 * v23++);
          }
          while (!v22);
          v16 = v23 - 1;
        }
        goto LABEL_31;
      }
    }
LABEL_44:
    sub_2E5CC(v1);
    return;
  }
  __break(1u);
}

void sub_423D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  _OWORD v33[2];
  _QWORD v34[4];
  _QWORD v35[6];
  uint64_t v36;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_2E594(0, &qword_B82E0, UIWindowScene_ptr);
    v5 = sub_2E3B0((unint64_t *)&qword_B82E8, &qword_B82E0, UIWindowScene_ptr);
    v6 = Set.Iterator.init(_cocoa:)(v35, v3, v4, v5);
    v1 = v35[0];
    v32 = v35[1];
    v7 = v35[2];
    v8 = v35[3];
    v9 = v35[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v32 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    v6 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v31 = (unint64_t)(v7 + 64) >> 6;
  while (v1 < 0)
  {
    v22 = __CocoaSet.Iterator.next()(v6);
    if (!v22)
      goto LABEL_43;
    v23 = v22;
    *(_QWORD *)&v33[0] = v22;
    v24 = sub_2E594(0, &qword_B82E0, UIWindowScene_ptr);
    swift_unknownObjectRetain(v23);
    swift_dynamicCast(v34, v33, (char *)&type metadata for Swift.AnyObject + 8, v24, 7);
    v25 = (id)v34[0];
    swift_unknownObjectRelease(v23);
    v21 = v8;
    v19 = v9;
    if (!v25)
      goto LABEL_43;
LABEL_37:
    swift_beginAccess(&off_B8878, v33, 32, 0);
    v29 = objc_getAssociatedObject(v25, &off_B8878);
    swift_endAccess(v33);
    if (v29)
    {
      _bridgeAnyObjectToAny(_:)(v33, v29);
      swift_unknownObjectRelease(v29);
    }
    else
    {
      memset(v33, 0, sizeof(v33));
    }
    sub_42A84((uint64_t)v33, (uint64_t)v34);
    if (!v34[3])
    {
      sub_42ACC((uint64_t)v34);
LABEL_12:
      v13 = type metadata accessor for HotReloadStatusHUD();
      v14 = swift_allocObject(v13, 88, 7);
      *(_OWORD *)(v14 + 24) = xmmword_8D4B0;
      *(_OWORD *)(v14 + 40) = xmmword_8D4C0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_QWORD *)(v14 + 64) = 0x3FB999999999999ALL;
      *(_WORD *)(v14 + 72) = 0;
      *(_BYTE *)(v14 + 74) = 0;
      *(_QWORD *)(v14 + 80) = &_swiftEmptyArrayStorage;
      v15 = objc_allocWithZone((Class)type metadata accessor for HotReloadStatusHUDWindow());
      v16 = v25;
      *(_QWORD *)(v14 + 16) = objc_msgSend(v15, "initWithWindowScene:", v16);

      swift_beginAccess(&off_B8878, v34, 32, 0);
      swift_retain(v14);
      objc_setAssociatedObject(v16, &off_B8878, (id)v14, &stru_2E8.segname[9]);
      swift_endAccess(v34);
      swift_release(v14);
      goto LABEL_13;
    }
    v30 = type metadata accessor for HotReloadStatusHUD();
    if ((swift_dynamicCast(&v36, v34, (char *)&type metadata for Any + 8, v30, 6) & 1) == 0)
      goto LABEL_12;
    v14 = v36;
LABEL_13:
    v17 = swift_allocObject(&unk_A0B88, 24, 7);
    *(_QWORD *)(v17 + 16) = v25;
    v18 = v25;
    sub_5446C((char **)sub_42B30, v17);

    swift_release(v14);
    swift_release(v17);
    v8 = v21;
    v9 = v19;
  }
  if (v9)
  {
    v19 = (v9 - 1) & v9;
    v20 = __clz(__rbit64(v9)) | (v8 << 6);
    v21 = v8;
LABEL_36:
    v25 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v20);
    if (!v25)
      goto LABEL_43;
    goto LABEL_37;
  }
  v26 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v26 >= v31)
      goto LABEL_43;
    v27 = *(_QWORD *)(v32 + 8 * v26);
    v21 = v8 + 1;
    if (!v27)
    {
      v21 = v8 + 2;
      if (v8 + 2 >= v31)
        goto LABEL_43;
      v27 = *(_QWORD *)(v32 + 8 * v21);
      if (!v27)
      {
        v21 = v8 + 3;
        if (v8 + 3 >= v31)
          goto LABEL_43;
        v27 = *(_QWORD *)(v32 + 8 * v21);
        if (!v27)
        {
          v21 = v8 + 4;
          if (v8 + 4 >= v31)
            goto LABEL_43;
          v27 = *(_QWORD *)(v32 + 8 * v21);
          if (!v27)
          {
            v21 = v8 + 5;
            if (v8 + 5 >= v31)
              goto LABEL_43;
            v27 = *(_QWORD *)(v32 + 8 * v21);
            if (!v27)
            {
              v28 = v8 + 6;
              while (v31 != v28)
              {
                v27 = *(_QWORD *)(v32 + 8 * v28++);
                if (v27)
                {
                  v21 = v28 - 1;
                  goto LABEL_35;
                }
              }
LABEL_43:
              sub_2E5CC(v1);
              return;
            }
          }
        }
      }
    }
LABEL_35:
    v19 = (v27 - 1) & v27;
    v20 = __clz(__rbit64(v27)) + (v21 << 6);
    goto LABEL_36;
  }
  __break(1u);
}

uint64_t sub_42878(void *a1)
{
  _BYTE v3[24];

  swift_beginAccess(&off_B8878, v3, 32, 0);
  objc_setAssociatedObject(a1, &off_B8878, 0, &stru_2E8.segname[9]);
  return swift_endAccess(v3);
}

uint64_t sub_428D4()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for HotReloadStatusHUDManager()
{
  return objc_opt_self(_TtC5JSApp25HotReloadStatusHUDManager);
}

void *sub_42904()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char v4;
  void *result;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = type metadata accessor for DispatchPredicate(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (uint64_t *)((char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2E594(0, (unint64_t *)&qword_B8AE0, OS_dispatch_queue_ptr);
  *v3 = static OS_dispatch_queue.main.getter();
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for DispatchPredicate.onQueue(_:), v0);
  v4 = _dispatchPreconditionTest(_:)(v3);
  result = (void *)(*(uint64_t (**)(_QWORD *, uint64_t))(v1 + 8))(v3, v0);
  if ((v4 & 1) != 0)
  {
    result = (void *)_sSo13UIApplicationC5JSAppE20sharedIfNotExtensionABSgvgZ_0();
    if (result)
    {
      v6 = result;
      v7 = objc_msgSend(result, "connectedScenes");
      v8 = sub_2E594(0, &qword_B82C0, UIScene_ptr);
      v9 = sub_2E3B0(&qword_B82C8, &qword_B82C0, UIScene_ptr);
      v10 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v7, v8, v9);

      sub_41BE8(v10);
      v12 = v11;
      swift_bridgeObjectRelease(v10);
      v13 = sub_6A5F0(v12);

      swift_bridgeObjectRelease(v12);
      sub_423D0(v13);
      return (void *)swift_bridgeObjectRelease(v13);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_42A84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_29EF0(&qword_B8B50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_42ACC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_29EF0(&qword_B8B50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_42B0C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_42B30()
{
  uint64_t v0;

  return sub_42878(*(void **)(v0 + 16));
}

void *sub_42B38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char v4;
  void *result;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;

  v0 = type metadata accessor for DispatchPredicate(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (uint64_t *)((char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2E594(0, (unint64_t *)&qword_B8AE0, OS_dispatch_queue_ptr);
  *v3 = static OS_dispatch_queue.main.getter();
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for DispatchPredicate.onQueue(_:), v0);
  v4 = _dispatchPreconditionTest(_:)(v3);
  result = (void *)(*(uint64_t (**)(_QWORD *, uint64_t))(v1 + 8))(v3, v0);
  if ((v4 & 1) != 0)
  {
    result = (void *)_sSo13UIApplicationC5JSAppE20sharedIfNotExtensionABSgvgZ_0();
    if (result)
    {
      v6 = result;
      v7 = objc_msgSend(result, "connectedScenes");
      v8 = sub_2E594(0, &qword_B82C0, UIScene_ptr);
      v9 = sub_2E3B0(&qword_B82C8, &qword_B82C0, UIScene_ptr);
      v10 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v7, v8, v9);

      sub_41BE8(v10);
      v12 = v11;
      swift_bridgeObjectRelease(v10);
      v13 = sub_6A5F0(v12);

      swift_bridgeObjectRelease(v12);
      sub_41F40(v13);
      v15 = v14;
      swift_bridgeObjectRelease(v13);
      if (v15)
      {

        return &dword_0 + 1;
      }
      else
      {
        return 0;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_42CD0()
{
  qword_B8928 = 0x65696B6F6F43;
  unk_B8930 = 0xE600000000000000;
}

id RequestEncoder.__allocating_init(tokenService:bag:cookiesToSuppress:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  char *v7;
  id v8;
  objc_super v10;

  v7 = (char *)objc_allocWithZone(v3);
  *(_QWORD *)&v7[OBJC_IVAR___JSARequestEncoder_cookiesToSuppress] = a3;
  v10.receiver = v7;
  v10.super_class = v3;
  v8 = objc_msgSendSuper2(&v10, "initWithTokenService:bag:", a1, a2);
  swift_unknownObjectRelease(a1);
  swift_unknownObjectRelease(a2);
  return v8;
}

id RequestEncoder.init(tokenService:bag:cookiesToSuppress:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  id v6;
  objc_super v8;

  *(_QWORD *)&v3[OBJC_IVAR___JSARequestEncoder_cookiesToSuppress] = a3;
  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for RequestEncoder();
  v6 = objc_msgSendSuper2(&v8, "initWithTokenService:bag:", a1, a2);
  swift_unknownObjectRelease(a1);
  swift_unknownObjectRelease(a2);
  return v6;
}

uint64_t type metadata accessor for RequestEncoder()
{
  return objc_opt_self(JSARequestEncoder);
}

void sub_42E70(uint64_t a1, uint64_t a2)
{
  char *v2;
  void *v3;
  uint64_t ObjectType;
  uint64_t v6;
  Class isa;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  objc_class *v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;
  _QWORD aBlock[3];
  _QWORD *v20;
  void *(*v21)(void *);
  uint64_t v22;
  objc_super v23;

  v3 = v2;
  ObjectType = swift_getObjectType(v2);
  v6 = *(_QWORD *)&v2[OBJC_IVAR___JSARequestEncoder_cookiesToSuppress];
  swift_bridgeObjectRetain(v6);
  isa = URLRequest._bridgeToObjectiveC()().super.isa;
  sub_43050(a2, (uint64_t)aBlock);
  v8 = v20;
  if (v20)
  {
    v9 = sub_3FFF4(aBlock, (uint64_t)v20);
    v10 = *(v8 - 1);
    __chkstk_darwin(v9);
    v12 = (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v10 + 16))(v12);
    v13 = _bridgeAnythingToObjectiveC<A>(_:)(v12, v8);
    (*(void (**)(char *, _QWORD *))(v10 + 8))(v12, v8);
    sub_3789C(aBlock);
  }
  else
  {
    v13 = 0;
  }
  v14 = (objc_class *)type metadata accessor for RequestEncoder();
  v23.receiver = v3;
  v23.super_class = v14;
  v15 = objc_msgSendSuper2(&v23, "requestByEncodingRequest:parameters:", isa, v13);

  swift_unknownObjectRelease(v13);
  v16 = swift_allocObject(&unk_A0BB0, 32, 7);
  *(_QWORD *)(v16 + 16) = v6;
  *(_QWORD *)(v16 + 24) = ObjectType;
  v21 = sub_430BC;
  v22 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_43418;
  v20 = &unk_A0BC8;
  v17 = _Block_copy(aBlock);
  v18 = objc_msgSend(v15, "jsa_mapWithBlock:", v17, swift_release(v22).n128_f64[0]);
  _Block_release(v17);

  if (!v18)
    __break(1u);
}

uint64_t sub_43050(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_29EF0(&qword_B8B50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_43098()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

void *sub_430BC(void *a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v2 = sub_437E4(a1, *(_QWORD *)(v1 + 16));
  v3 = v2;
  return v2;
}

uint64_t sub_430E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void **i;
  void *v14;
  Swift::String v15;
  void *object;
  Swift::Bool v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  Swift::String v37;
  uint64_t v38;

  v5 = type metadata accessor for Logger(0);
  v6 = __chkstk_darwin(v5);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a2 + 16);
  if (!v10)
    return 1;
  v33 = v7;
  v34 = v6;
  v35 = v2;
  v12 = *a1;
  v11 = (void *)a1[1];
  swift_bridgeObjectRetain(a2);
  for (i = (void **)(a2 + 40); ; i += 2)
  {
    v14 = *i;
    v37._countAndFlagsBits = (uint64_t)*(i - 1);
    v37._object = v14;
    swift_bridgeObjectRetain_n(v14, 2);
    v15._countAndFlagsBits = 61;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    object = v37._object;
    v17 = String.hasPrefix(_:)(v37);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(object);
    if (v17)
      break;
    if (!--v10)
    {
      swift_bridgeObjectRelease(a2);
      return 1;
    }
  }
  swift_bridgeObjectRelease(a2);
  if (qword_B8190 != -1)
    swift_once(&qword_B8190, sub_56F5C);
  v19 = v34;
  v20 = sub_2D6E0(v34, (uint64_t)qword_B9338);
  v21 = v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v9, v20, v19);
  v22 = swift_bridgeObjectRetain_n(v11, 2);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(12, -1);
    v32 = swift_slowAlloc(32, -1);
    v38 = v32;
    *(_DWORD *)v25 = 136315138;
    v37._countAndFlagsBits = v12;
    v37._object = v11;
    v36[0] = 61;
    v36[1] = 0xE100000000000000;
    v26 = sub_3A100();
    v27 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(v36, &type metadata for String, &type metadata for String, v26, v26);
    v28 = v27;
    if (v27[2])
    {
      v30 = v27[4];
      v29 = v27[5];
      swift_bridgeObjectRetain(v29);
    }
    else
    {
      v29 = 0xE900000000000029;
      v30 = 0x6E776F6E6B6E7528;
    }
    swift_bridgeObjectRelease(v28);
    v37._countAndFlagsBits = sub_3A180(v30, v29, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v37._object, v25 + 4, v25 + 12);
    swift_bridgeObjectRelease_n(v11, 2);
    swift_bridgeObjectRelease(v29);
    _os_log_impl(&dword_0, v23, v24, "Suppressing cookie %s", v25, 0xCu);
    v31 = v32;
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v25, -1, -1);

    (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v34);
  }
  else
  {

    swift_bridgeObjectRelease_n(v11, 2);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v19);
  }
  return 0;
}

id sub_43418(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t (*v4)(void *);
  id v5;
  void *v6;

  v4 = *(uint64_t (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v6 = (void *)v4(a2);
  swift_release(v3);

  return v6;
}

uint64_t sub_4346C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_4347C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id RequestEncoder.__allocating_init(tokenService:bag:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_msgSend(objc_allocWithZone(v2), "initWithTokenService:bag:", a1, a2);
  swift_unknownObjectRelease(a1);
  swift_unknownObjectRelease(a2);
  return v5;
}

void RequestEncoder.init(tokenService:bag:)()
{
  _swift_stdlib_reportUnimplementedInitializer("JSApp.RequestEncoder", 20, "init(tokenService:bag:)", 23, 0);
  __break(1u);
}

id RequestEncoder.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RequestEncoder();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t method lookup function for RequestEncoder(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for RequestEncoder);
}

uint64_t dispatch thunk of RequestEncoder.__allocating_init(tokenService:bag:cookiesToSuppress:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_43684(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18[2];
  _QWORD *v19;

  v3 = result;
  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v5 = a2;
    v6 = 0;
    v7 = (uint64_t *)(result + 40);
    v8 = &_swiftEmptyArrayStorage;
    v16 = *(_QWORD *)(result + 16);
    while (v6 < *(_QWORD *)(v3 + 16))
    {
      v9 = *(v7 - 1);
      v10 = *v7;
      v18[0] = v9;
      v18[1] = v10;
      swift_bridgeObjectRetain(v10);
      v11 = sub_430E8(v18, v5);
      if (v2)
      {
        swift_release(v8);
        swift_bridgeObjectRelease(v3);
        v15 = v10;
        goto LABEL_16;
      }
      if ((v11 & 1) != 0)
      {
        result = swift_isUniquelyReferenced_nonNull_native(v8);
        v19 = v8;
        if ((result & 1) == 0)
        {
          result = sub_3AC50(0, v8[2] + 1, 1);
          v8 = v19;
        }
        v13 = v8[2];
        v12 = v8[3];
        if (v13 >= v12 >> 1)
        {
          result = sub_3AC50(v12 > 1, v13 + 1, 1);
          v8 = v19;
        }
        v8[2] = v13 + 1;
        v14 = (char *)&v8[2 * v13];
        *((_QWORD *)v14 + 4) = v9;
        *((_QWORD *)v14 + 5) = v10;
        v4 = v16;
        v5 = a2;
      }
      else
      {
        result = swift_bridgeObjectRelease(v10);
      }
      ++v6;
      v7 += 2;
      if (v4 == v6)
        goto LABEL_14;
    }
    __break(1u);
  }
  else
  {
    v8 = &_swiftEmptyArrayStorage;
LABEL_14:
    v15 = v3;
LABEL_16:
    swift_bridgeObjectRelease(v15);
    return (uint64_t)v8;
  }
  return result;
}

void *sub_437E4(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSString v31;
  NSString v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  uint64_t v42;
  uint64_t v43;

  v4 = type metadata accessor for CharacterSet(0);
  v40 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = a2;
  v7 = sub_29EF0(&qword_B8738);
  v8 = sub_43B8C(&qword_B8968, (uint64_t)&protocol conformance descriptor for [A]);
  if ((Collection.isNotEmpty.getter(v7, v8) & 1) != 0 && a1)
  {
    if (qword_B80A8 != -1)
      swift_once(&qword_B80A8, sub_42CD0);
    v9 = String._bridgeToObjectiveC()();
    v10 = objc_msgSend(a1, "valueForHTTPHeaderField:", v9);

    if (v10)
    {
      v39 = v8;
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      v13 = v12;

      v42 = v11;
      v43 = v13;
      v41[0] = 59;
      v41[1] = 0xE100000000000000;
      v14 = sub_3A100();
      v15 = StringProtocol.components<A>(separatedBy:)(v41, &type metadata for String, &type metadata for String, v14, v14);
      swift_bridgeObjectRelease(v13);
      v16 = *(_QWORD *)(v15 + 16);
      if (v16)
      {
        v36 = a2;
        v37 = v7;
        v38 = a1;
        v41[0] = &_swiftEmptyArrayStorage;
        sub_3AC50(0, v16, 0);
        v35 = v15;
        v17 = (uint64_t *)(v15 + 40);
        do
        {
          v18 = *v17;
          v42 = *(v17 - 1);
          v43 = v18;
          v19 = swift_bridgeObjectRetain(v18);
          static CharacterSet.whitespacesAndNewlines.getter(v19);
          v20 = StringProtocol.trimmingCharacters(in:)(v6, &type metadata for String, v14);
          v22 = v21;
          (*(void (**)(char *, uint64_t))(v40 + 8))(v6, v4);
          swift_bridgeObjectRelease(v18);
          v23 = (_QWORD *)v41[0];
          if ((swift_isUniquelyReferenced_nonNull_native(v41[0]) & 1) == 0)
          {
            sub_3AC50(0, v23[2] + 1, 1);
            v23 = (_QWORD *)v41[0];
          }
          v25 = v23[2];
          v24 = v23[3];
          if (v25 >= v24 >> 1)
          {
            sub_3AC50(v24 > 1, v25 + 1, 1);
            v23 = (_QWORD *)v41[0];
          }
          v17 += 2;
          v23[2] = v25 + 1;
          v26 = (char *)&v23[2 * v25];
          *((_QWORD *)v26 + 4) = v20;
          *((_QWORD *)v26 + 5) = v22;
          --v16;
        }
        while (v16);
        swift_bridgeObjectRelease(v35);
        v7 = v37;
        a1 = v38;
        a2 = v36;
      }
      else
      {
        swift_bridgeObjectRelease(v15);
        v23 = &_swiftEmptyArrayStorage;
      }
      swift_bridgeObjectRetain(a2);
      v27 = sub_43684((uint64_t)v23, a2);
      swift_bridgeObjectRelease(a2);
      v42 = v27;
      if ((Collection.isNotEmpty.getter(v7, v39) & 1) != 0)
      {
        v42 = v27;
        v28 = sub_43B8C((unint64_t *)&qword_B8748, (uint64_t)&protocol conformance descriptor for [A]);
        BidirectionalCollection<>.joined(separator:)(8251, 0xE200000000000000, v7, v28);
        v30 = v29;
        swift_bridgeObjectRelease(v27);
        v31 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v30);
        v32 = String._bridgeToObjectiveC()();
        objc_msgSend(a1, "setValue:forHTTPHeaderField:", v31, v32);

      }
      else
      {
        swift_bridgeObjectRelease(v27);
        v32 = String._bridgeToObjectiveC()();
        objc_msgSend(a1, "setValue:forHTTPHeaderField:", 0, v32);
      }

    }
  }
  return a1;
}

uint64_t sub_43B8C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_29F30(&qword_B8738);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static Defaults.alwaysReloadJS.getter()
{
  return sub_43C08(&qword_B80E0, (uint64_t)qword_B8A00, (uint64_t)sub_44B3C);
}

uint64_t static Defaults.launchWithBundleJS.getter()
{
  return sub_43C08(&qword_B80C0, (uint64_t)qword_B89A0, (uint64_t)sub_443CC);
}

uint64_t sub_43C08(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_29EF0(&qword_B8438);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1 != -1)
    swift_once(a1, a3);
  v10 = sub_2D6E0(v6, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  UserDefault.wrappedValue.getter(&v13, v6);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v13;
}

uint64_t static Defaults.allowUnsignedJetpack.getter()
{
  return sub_43C08(&qword_B80E8, (uint64_t)qword_B8A18, (uint64_t)sub_44C4C);
}

uint64_t static Defaults.lastCachedBootURL.getter()
{
  return sub_43D6C(&qword_B80D8, (uint64_t)qword_B89E8, (uint64_t)sub_44988);
}

uint64_t static Defaults.lastCachedBootURL.setter(uint64_t a1, uint64_t a2)
{
  return sub_446F0(a1, a2, &qword_B80D8, (uint64_t)qword_B89E8, (uint64_t)sub_44988);
}

uint64_t static Defaults.loadBundledJetPackFromJSRoot.getter()
{
  return sub_43C08(&qword_B80F0, (uint64_t)qword_B8A30, (uint64_t)sub_44DB0);
}

uint64_t static Defaults.bootURL.getter()
{
  return sub_43D6C(&qword_B80D0, (uint64_t)qword_B89D0, (uint64_t)sub_448A0);
}

uint64_t sub_43D6C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = sub_29EF0(&qword_B8498);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1 != -1)
    swift_once(a1, a3);
  v10 = sub_2D6E0(v6, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  UserDefault.wrappedValue.getter(&v12, v6);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v12;
}

uint64_t sub_43E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::String_optional v5;
  uint64_t countAndFlagsBits;
  void *object;
  char v8;
  Swift::String_optional v9;
  Swift::String_optional v10;
  void *v11;
  _BOOL8 v12;

  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  v5 = String.Iterator.next()();
  if (v5.value._object)
  {
    countAndFlagsBits = v5.value._countAndFlagsBits;
    object = v5.value._object;
    do
    {
      v10 = String.Iterator.next()();
      if (!v10.value._object)
      {
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(a4);
        swift_bridgeObjectRelease(a2);
        return 1;
      }
      if (countAndFlagsBits == v10.value._countAndFlagsBits && object == v10.value._object)
      {
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(v10.value._object);
      }
      else
      {
        v8 = _stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, v10.value._countAndFlagsBits, v10.value._object, 0);
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(v10.value._object);
        if ((v8 & 1) == 0)
        {
          swift_bridgeObjectRelease(a4);
          swift_bridgeObjectRelease(a2);
          return 0;
        }
      }
      v9 = String.Iterator.next()();
      countAndFlagsBits = v9.value._countAndFlagsBits;
      object = v9.value._object;
    }
    while (v9.value._object);
  }
  swift_bridgeObjectRelease(a4);
  v11 = String.Iterator.next()().value._object;
  swift_bridgeObjectRelease(a2);
  v12 = v11 == 0;
  swift_bridgeObjectRelease(v11);
  return v12;
}

uint64_t static Defaults.figaroTestingModeEnabled.getter()
{
  return sub_43C08(&qword_B80B0, (uint64_t)qword_B8970, (uint64_t)sub_440A8);
}

uint64_t static Defaults.figaroTestingModeEnabled.setter(char a1)
{
  return sub_4410C(a1, &qword_B80B0, (uint64_t)qword_B8970, (uint64_t)sub_440A8);
}

void (*static Defaults.figaroTestingModeEnabled.modify(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  v3 = sub_29EF0(&qword_B8438);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = malloc(*(_QWORD *)(v4 + 64));
  v2[6] = v5;
  if (qword_B80B0 != -1)
    swift_once(&qword_B80B0, sub_440A8);
  v6 = sub_2D6E0(v3, (uint64_t)qword_B8970);
  (*(void (**)(void *, uint64_t, uint64_t))(v4 + 16))(v5, v6, v3);
  v2[7] = UserDefault.wrappedValue.modify(v2, v3);
  return sub_440A4;
}

uint64_t sub_440A8(uint64_t a1)
{
  return sub_44DDC(a1, qword_B8970, (SEL *)&selRef_bu_groupUserDefaults, 0xD00000000000001ALL, 0x8000000000089480);
}

uint64_t static Defaults.hotReloadEnabled.getter()
{
  return sub_43C08(&qword_B80B8, (uint64_t)qword_B8988, (uint64_t)sub_442BC);
}

uint64_t static Defaults.hotReloadEnabled.setter(char a1)
{
  return sub_4410C(a1, &qword_B80B8, (uint64_t)qword_B8988, (uint64_t)sub_442BC);
}

uint64_t sub_4410C(char a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v8 = sub_29EF0(&qword_B8438);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a2 != -1)
    swift_once(a2, a4);
  v12 = sub_2D6E0(v8, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  v15 = a1 & 1;
  UserDefault.wrappedValue.setter(&v15, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

void (*static Defaults.hotReloadEnabled.modify(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  v3 = sub_29EF0(&qword_B8438);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = malloc(*(_QWORD *)(v4 + 64));
  v2[6] = v5;
  if (qword_B80B8 != -1)
    swift_once(&qword_B80B8, sub_442BC);
  v6 = sub_2D6E0(v3, (uint64_t)qword_B8988);
  (*(void (**)(void *, uint64_t, uint64_t))(v4 + 16))(v5, v6, v3);
  v2[7] = UserDefault.wrappedValue.modify(v2, v3);
  return sub_440A4;
}

uint64_t sub_442BC(uint64_t a1)
{
  return sub_44DDC(a1, qword_B8988, (SEL *)&selRef_standardUserDefaults, 0xD000000000000012, 0x8000000000089460);
}

uint64_t static Defaults.launchWithBundleJS.setter(char a1)
{
  return sub_4410C(a1, &qword_B80C0, (uint64_t)qword_B89A0, (uint64_t)sub_443CC);
}

void (*static Defaults.launchWithBundleJS.modify(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  v3 = sub_29EF0(&qword_B8438);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = malloc(*(_QWORD *)(v4 + 64));
  v2[6] = v5;
  if (qword_B80C0 != -1)
    swift_once(&qword_B80C0, sub_443CC);
  v6 = sub_2D6E0(v3, (uint64_t)qword_B89A0);
  (*(void (**)(void *, uint64_t, uint64_t))(v4 + 16))(v5, v6, v3);
  v2[7] = UserDefault.wrappedValue.modify(v2, v3);
  return sub_440A4;
}

uint64_t sub_443CC(uint64_t a1)
{
  return sub_44DDC(a1, qword_B89A0, (SEL *)&selRef_standardUserDefaults, 0xD000000000000014, 0x8000000000089500);
}

uint64_t static Defaults.showDebugMenu.getter()
{
  return sub_43C08(&qword_B80C8, (uint64_t)qword_B89B8, (uint64_t)sub_446A0);
}

uint64_t static Defaults.showDebugMenu.setter(char a1)
{
  return sub_4410C(a1, &qword_B80C8, (uint64_t)qword_B89B8, (uint64_t)sub_446A0);
}

void (*static Defaults.showDebugMenu.modify(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  v3 = sub_29EF0(&qword_B8438);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = malloc(*(_QWORD *)(v4 + 64));
  v2[6] = v5;
  if (qword_B80C8 != -1)
    swift_once(&qword_B80C8, sub_446A0);
  v6 = sub_2D6E0(v3, (uint64_t)qword_B89B8);
  (*(void (**)(void *, uint64_t, uint64_t))(v4 + 16))(v5, v6, v3);
  v2[7] = UserDefault.wrappedValue.modify(v2, v3);
  return sub_440A4;
}

uint64_t sub_446A0(uint64_t a1)
{
  return sub_44DDC(a1, qword_B89B8, (SEL *)&selRef_standardUserDefaults, 0x6544776F68534B42, 0xEF756E654D677562);
}

uint64_t static Defaults.bootURL.setter(uint64_t a1, uint64_t a2)
{
  return sub_446F0(a1, a2, &qword_B80D0, (uint64_t)qword_B89D0, (uint64_t)sub_448A0);
}

uint64_t sub_446F0(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v10 = sub_29EF0(&qword_B8498);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a3 != -1)
    swift_once(a3, a5);
  v14 = sub_2D6E0(v10, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  v16[0] = a1;
  v16[1] = a2;
  UserDefault.wrappedValue.setter(v16, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

void (*static Defaults.bootURL.modify(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  v3 = sub_29EF0(&qword_B8498);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = malloc(*(_QWORD *)(v4 + 64));
  v2[6] = v5;
  if (qword_B80D0 != -1)
    swift_once(&qword_B80D0, sub_448A0);
  v6 = sub_2D6E0(v3, (uint64_t)qword_B89D0);
  (*(void (**)(void *, uint64_t, uint64_t))(v4 + 16))(v5, v6, v3);
  v2[7] = UserDefault.wrappedValue.modify(v2, v3);
  return sub_440A4;
}

uint64_t sub_448A0(uint64_t a1)
{
  return sub_449AC(a1, qword_B89D0, 0x6C72752D746F6F62, 0xE800000000000000);
}

void (*static Defaults.lastCachedBootURL.modify(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  v3 = sub_29EF0(&qword_B8498);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = malloc(*(_QWORD *)(v4 + 64));
  v2[6] = v5;
  if (qword_B80D8 != -1)
    swift_once(&qword_B80D8, sub_44988);
  v6 = sub_2D6E0(v3, (uint64_t)qword_B89E8);
  (*(void (**)(void *, uint64_t, uint64_t))(v4 + 16))(v5, v6, v3);
  v2[7] = UserDefault.wrappedValue.modify(v2, v3);
  return sub_440A4;
}

uint64_t sub_44988(uint64_t a1)
{
  return sub_449AC(a1, qword_B89E8, 0xD000000000000011, 0x80000000000894C0);
}

uint64_t sub_449AC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  id v8;
  uint64_t v9;
  _QWORD v11[2];

  v7 = sub_29EF0(&qword_B8498);
  sub_38104(v7, a2);
  sub_2D6E0(v7, (uint64_t)a2);
  v8 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "bu_groupUserDefaults");
  v11[0] = 0;
  v11[1] = 0;
  v9 = sub_29EF0(&qword_B8A88);
  return UserDefault.init(_:defaults:defaultValue:)(a3, a4, v8, v11, v9);
}

uint64_t static Defaults.alwaysReloadJS.setter(char a1)
{
  return sub_4410C(a1, &qword_B80E0, (uint64_t)qword_B8A00, (uint64_t)sub_44B3C);
}

void (*static Defaults.alwaysReloadJS.modify(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  v3 = sub_29EF0(&qword_B8438);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = malloc(*(_QWORD *)(v4 + 64));
  v2[6] = v5;
  if (qword_B80E0 != -1)
    swift_once(&qword_B80E0, sub_44B3C);
  v6 = sub_2D6E0(v3, (uint64_t)qword_B8A00);
  (*(void (**)(void *, uint64_t, uint64_t))(v4 + 16))(v5, v6, v3);
  v2[7] = UserDefault.wrappedValue.modify(v2, v3);
  return sub_440A4;
}

uint64_t sub_44B3C(uint64_t a1)
{
  return sub_44DDC(a1, qword_B8A00, (SEL *)&selRef_bu_groupUserDefaults, 0xD000000000000010, 0x8000000000089520);
}

uint64_t static Defaults.allowUnsignedJetpack.setter(char a1)
{
  return sub_4410C(a1, &qword_B80E8, (uint64_t)qword_B8A18, (uint64_t)sub_44C4C);
}

void (*static Defaults.allowUnsignedJetpack.modify(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  v3 = sub_29EF0(&qword_B8438);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = malloc(*(_QWORD *)(v4 + 64));
  v2[6] = v5;
  if (qword_B80E8 != -1)
    swift_once(&qword_B80E8, sub_44C4C);
  v6 = sub_2D6E0(v3, (uint64_t)qword_B8A18);
  (*(void (**)(void *, uint64_t, uint64_t))(v4 + 16))(v5, v6, v3);
  v2[7] = UserDefault.wrappedValue.modify(v2, v3);
  return sub_440A4;
}

uint64_t sub_44C4C(uint64_t a1)
{
  return sub_44DDC(a1, qword_B8A18, (SEL *)&selRef_bu_groupUserDefaults, 0xD000000000000014, 0x80000000000894E0);
}

uint64_t static Defaults.loadBundledJetPackFromJSRoot.setter(char a1)
{
  return sub_4410C(a1, &qword_B80F0, (uint64_t)qword_B8A30, (uint64_t)sub_44DB0);
}

void (*static Defaults.loadBundledJetPackFromJSRoot.modify(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  v3 = sub_29EF0(&qword_B8438);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = malloc(*(_QWORD *)(v4 + 64));
  v2[6] = v5;
  if (qword_B80F0 != -1)
    swift_once(&qword_B80F0, sub_44DB0);
  v6 = sub_2D6E0(v3, (uint64_t)qword_B8A30);
  (*(void (**)(void *, uint64_t, uint64_t))(v4 + 16))(v5, v6, v3);
  v2[7] = UserDefault.wrappedValue.modify(v2, v3);
  return sub_440A4;
}

void sub_44D5C(_QWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (void *)*a1;
  v2 = *(void **)(*a1 + 48);
  v3 = *(_QWORD *)(*a1 + 32);
  v4 = *(_QWORD *)(*a1 + 40);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 56))(*a1, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v2, v3);
  free(v2);
  free(v1);
}

uint64_t sub_44DB0(uint64_t a1)
{
  return sub_44DDC(a1, qword_B8A30, (SEL *)&selRef_bu_groupUserDefaults, 0xD00000000000001CLL, 0x80000000000894A0);
}

uint64_t sub_44DDC(uint64_t a1, uint64_t *a2, SEL *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  id v10;
  char v12;

  v9 = sub_29EF0(&qword_B8438);
  sub_38104(v9, a2);
  sub_2D6E0(v9, (uint64_t)a2);
  v10 = objc_msgSend((id)objc_opt_self(NSUserDefaults), *a3);
  v12 = 0;
  return UserDefault.init(_:defaults:defaultValue:)(a4, a5, v10, &v12, &type metadata for Bool);
}

uint64_t sub_44E84()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  char v4;

  v0 = sub_29EF0(&qword_B8A90);
  sub_38104(v0, qword_B8A48);
  sub_2D6E0(v0, (uint64_t)qword_B8A48);
  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v4 = 2;
  v2 = sub_29EF0(&qword_B8A98);
  return UserDefault.init(_:defaults:defaultValue:)(0xD000000000000020, 0x8000000000089540, v1, &v4, v2);
}

id Defaults.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Defaults();
  return objc_msgSendSuper2(&v2, "init");
}

id Defaults.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Defaults();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t _s5JSApp8DefaultsC14bootURLIsLocalSbvgZ_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  void (*v5)(char *, uint64_t, uint64_t);
  void (*v6)(char *, uint64_t);
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v0 = sub_29EF0(&qword_B8498);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_B80D0 != -1)
    swift_once(&qword_B80D0, sub_448A0);
  v4 = sub_2D6E0(v0, (uint64_t)qword_B89D0);
  v5 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
  v5(v3, v4, v0);
  UserDefault.wrappedValue.getter(&v12, v0);
  v6 = *(void (**)(char *, uint64_t))(v1 + 8);
  v6(v3, v0);
  v7 = v13;
  if (v13
    && (v8 = sub_43E40(0x6C61636F6CLL, 0xE500000000000000, v12, v13), swift_bridgeObjectRelease(v7), (v8 & 1) != 0))
  {
    v9 = 1;
  }
  else
  {
    v5(v3, v4, v0);
    UserDefault.wrappedValue.getter(&v12, v0);
    v6(v3, v0);
    v10 = v13;
    if (v13)
    {
      v9 = sub_43E40(0x2F2F2F3A656C6966, 0xE800000000000000, v12, v13);
      swift_bridgeObjectRelease(v10);
    }
    else
    {
      v9 = 0;
    }
  }
  return v9 & 1;
}

uint64_t type metadata accessor for Defaults()
{
  return objc_opt_self(JSADefaults);
}

uint64_t sub_4517C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4[19] = a4;
  v5 = type metadata accessor for URL(0);
  v4[20] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[21] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[22] = swift_task_alloc(v7);
  v4[23] = swift_task_alloc(v7);
  v8 = type metadata accessor for MainActor(0);
  v4[24] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  v4[25] = v9;
  v4[26] = v10;
  return swift_task_switch(sub_45220, v9, v10);
}

uint64_t sub_45220()
{
  uint64_t v0;
  uint64_t v1;
  NSURL *v2;
  void *v3;
  void *v4;
  void *v5;
  unsigned __int8 v6;
  NSURL *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  Class isa;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = _sSo13UIApplicationC5JSAppE20sharedIfNotExtensionABSgvgZ_0();
  *(_QWORD *)(v0 + 216) = v1;
  if (v1)
  {
    v3 = (void *)v1;
    URL._bridgeToObjectiveC()(v2);
    v5 = v4;
    v6 = objc_msgSend(v3, "canOpenURL:", v4);

    if ((v6 & 1) != 0)
    {
      v8 = v0 + 16;
      URL._bridgeToObjectiveC()(v7);
      v10 = v9;
      *(_QWORD *)(v0 + 224) = v9;
      v11 = sub_40850((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for OpenExternalURLOptionsKey(0);
      sub_2A1FC(&qword_B8360, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_8DCF4);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      *(_QWORD *)(v0 + 232) = isa;
      swift_bridgeObjectRelease(v11);
      *(_QWORD *)(v0 + 56) = v0 + 240;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = sub_455A4;
      v13 = swift_continuation_init(v0 + 16, 0);
      *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
      v14 = (_QWORD *)(v0 + 80);
      v14[1] = 0x40000000;
      v14[2] = sub_45840;
      v14[3] = &unk_A1400;
      v14[4] = v13;
      objc_msgSend(v3, "jsa_openExternalURL:options:completionHandler:", v10, isa, v14);
      return swift_continuation_await(v8);
    }
    swift_release(*(_QWORD *)(v0 + 192));
    if (qword_B8148 != -1)
      swift_once(&qword_B8148, sub_56C98);
    v17 = *(_QWORD *)(v0 + 168);
    v16 = *(_QWORD *)(v0 + 176);
    v19 = *(_QWORD *)(v0 + 152);
    v18 = *(_QWORD *)(v0 + 160);
    v20 = type metadata accessor for Logger(0);
    sub_2D6E0(v20, (uint64_t)qword_B9260);
    v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v19, v18);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter();
    v24 = os_log_type_enabled(v22, v23);
    v26 = *(_QWORD *)(v0 + 168);
    v25 = *(_QWORD *)(v0 + 176);
    v27 = *(_QWORD *)(v0 + 160);
    if (v24)
    {
      v35 = *(_QWORD *)(v0 + 160);
      v28 = swift_slowAlloc(22, -1);
      v29 = swift_slowAlloc(64, -1);
      v36 = v29;
      *(_DWORD *)v28 = 136315394;
      *(_QWORD *)(v0 + 120) = sub_3A180(0xD000000000000013, 0x80000000000898F0, &v36);
      v30 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v28 + 4, v28 + 12);
      *(_WORD *)(v28 + 12) = 2080;
      v31 = URL.absoluteString.getter(v30);
      v33 = v32;
      *(_QWORD *)(v0 + 128) = sub_3A180(v31, v32, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v28 + 14, v28 + 22);
      swift_bridgeObjectRelease(v33);
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v35);
      _os_log_impl(&dword_0, v22, v23, "%s cannot open %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);

    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    }

  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 192));
  }
  v34 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v34);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_455A4()
{
  uint64_t v0;

  return swift_task_switch(sub_455E8, *(_QWORD *)(*(_QWORD *)v0 + 200), *(_QWORD *)(*(_QWORD *)v0 + 208));
}

uint64_t sub_455E8()
{
  uint64_t v0;
  void *v1;
  void *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;

  v1 = *(void **)(v0 + 224);
  v2 = *(void **)(v0 + 232);
  swift_release(*(_QWORD *)(v0 + 192));
  v3 = *(_BYTE *)(v0 + 240);

  if ((v3 & 1) != 0)
  {

  }
  else
  {
    if (qword_B8148 != -1)
      swift_once(&qword_B8148, sub_56C98);
    v4 = *(_QWORD *)(v0 + 152);
    v5 = *(_QWORD *)(v0 + 184);
    v6 = *(_QWORD *)(v0 + 160);
    v7 = *(_QWORD *)(v0 + 168);
    v8 = type metadata accessor for Logger(0);
    sub_2D6E0(v8, (uint64_t)qword_B9260);
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v4, v6);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter();
    v12 = os_log_type_enabled(v10, v11);
    v13 = *(void **)(v0 + 216);
    v14 = *(_QWORD *)(v0 + 184);
    if (v12)
    {
      v23 = *(_QWORD *)(v0 + 168);
      v24 = *(_QWORD *)(v0 + 160);
      v25 = *(void **)(v0 + 216);
      v15 = swift_slowAlloc(22, -1);
      v16 = swift_slowAlloc(64, -1);
      v26 = v16;
      *(_DWORD *)v15 = 136315394;
      *(_QWORD *)(v0 + 136) = sub_3A180(0xD000000000000013, 0x80000000000898F0, &v26);
      v17 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v15 + 4, v15 + 12);
      *(_WORD *)(v15 + 12) = 2080;
      v18 = URL.absoluteString.getter(v17);
      v20 = v19;
      *(_QWORD *)(v0 + 144) = sub_3A180(v18, v19, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v15 + 14, v15 + 22);
      swift_bridgeObjectRelease(v20);
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v14, v24);
      _os_log_impl(&dword_0, v10, v11, "%s failed to handle %s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy(v16, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);

    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 168) + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 160));

    }
  }
  v21 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_45840(uint64_t a1, char a2)
{
  **(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 40) = a2;
  return swift_continuation_resume();
}

double sub_45854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  double result;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v26 = a4;
  v29 = a3;
  v30 = a1;
  v31 = a2;
  v5 = sub_29EF0(&qword_B8CC8);
  v6 = *(_QWORD *)(v5 - 8);
  v27 = v5;
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v28 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_29EF0(&qword_B8B00);
  __chkstk_darwin(v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v29, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v30, v5);
  type metadata accessor for MainActor(0);
  v16 = swift_bridgeObjectRetain(a4);
  v17 = static MainActor.shared.getter(v16);
  v18 = *(unsigned __int8 *)(v9 + 80);
  v19 = (v18 + 40) & ~v18;
  v20 = *(unsigned __int8 *)(v6 + 80);
  v21 = (v10 + v20 + v19) & ~v20;
  v22 = (v7 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = (char *)swift_allocObject(&unk_A11F0, v22 + 8, v18 | v20 | 7);
  *((_QWORD *)v23 + 2) = v17;
  *((_QWORD *)v23 + 3) = &protocol witness table for MainActor;
  *((_QWORD *)v23 + 4) = v31;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v23[v19], v11, v8);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v23[v21], v28, v27);
  *(_QWORD *)&v23[v22] = v26;
  v24 = sub_2EC38((uint64_t)v14, (uint64_t)&unk_B8CD8, (uint64_t)v23);
  *(_QWORD *)&result = swift_release(v24).n128_u64[0];
  return result;
}

uint64_t sub_45A5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v7[6] = a6;
  v7[7] = a7;
  v7[4] = a4;
  v7[5] = a5;
  v8 = sub_29EF0(&qword_B8CC8);
  v7[8] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[9] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[10] = v10;
  v7[11] = swift_task_alloc((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  v7[12] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v7[13] = v12;
  v7[14] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for MainActor(0);
  v7[15] = static MainActor.shared.getter(v13);
  v14 = dispatch thunk of Actor.unownedExecutor.getter(v13, &protocol witness table for MainActor);
  return swift_task_switch(sub_45B24, v14, v15);
}

uint64_t sub_45B24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  NSURL *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  objc_class *v25;
  _BYTE *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  NSURL *v31;
  void *v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v1 = *(_QWORD *)(v0 + 32);
  v3 = swift_release(*(_QWORD *)(v0 + 120));
  if (v1 == 3)
  {
    v10 = *(_QWORD *)(v0 + 64);
    v11 = objc_msgSend((id)objc_opt_self(BUBag), "defaultBag");
    v12 = objc_allocWithZone((Class)AMSUIDynamicViewController);
    URL._bridgeToObjectiveC()(v13);
    v15 = v14;
    v8 = objc_msgSend(v12, "initWithBag:URL:", v11, v14);

    v16 = objc_msgSend((id)objc_opt_self(BUAccountsProvider), "sharedProvider");
    v17 = objc_msgSend(v16, "activeStoreAccount");

    objc_msgSend(v8, "setAccount:", v17);
    v9 = objc_msgSend(objc_allocWithZone((Class)UINavigationController), "initWithRootViewController:", v8);
    v18 = objc_msgSend((id)objc_opt_self(UIViewController), "jsa_topMostViewControllerForWindow:", 0);
    CheckedContinuation.resume(returning:)(objc_msgSend(v18, "present::", v9, 1), v10);

LABEL_6:
    goto LABEL_12;
  }
  if (v1 != 2)
  {
    if (v1 != 1)
    {
      CheckedContinuation.resume(returning:)(v2, *(_QWORD *)(v0 + 64));
      goto LABEL_12;
    }
    v4 = *(_QWORD *)(v0 + 112);
    v5 = *(_QWORD *)(v0 + 64);
    (*(void (**)(uint64_t, _QWORD, _QWORD, __n128))(*(_QWORD *)(v0 + 104) + 16))(v4, *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 96), v3);
    v6 = objc_allocWithZone((Class)type metadata accessor for WebViewController(0));
    v7 = sub_6EAF0(v4);
    v8 = objc_msgSend(objc_allocWithZone((Class)UINavigationController), "initWithRootViewController:", v7);

    v9 = objc_msgSend((id)objc_opt_self(UIViewController), "jsa_topMostViewControllerForWindow:", 0);
    CheckedContinuation.resume(returning:)(objc_msgSend(v9, "present::", v8, 1), v5);
    goto LABEL_6;
  }
  v20 = *(_QWORD *)(v0 + 104);
  v19 = *(_QWORD *)(v0 + 112);
  v21 = *(_QWORD *)(v0 + 96);
  v22 = *(_QWORD *)(v0 + 72);
  v45 = *(_QWORD *)(v0 + 88);
  v46 = *(_QWORD *)(v0 + 80);
  v23 = *(void **)(v0 + 56);
  v24 = *(_QWORD *)(v0 + 64);
  v44 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, _QWORD, uint64_t, __n128))(v20 + 16))(v19, *(_QWORD *)(v0 + 40), v21, v3);
  v25 = (objc_class *)type metadata accessor for AccountPageViewController();
  v26 = objc_allocWithZone(v25);
  v27 = OBJC_IVAR____TtC5JSApp25AccountPageViewController_pageType;
  v26[OBJC_IVAR____TtC5JSApp25AccountPageViewController_pageType] = 0;
  v28 = &v26[OBJC_IVAR____TtC5JSApp25AccountPageViewController_contentID];
  *v28 = 0;
  v28[1] = 0;
  v29 = &v26[OBJC_IVAR____TtC5JSApp25AccountPageViewController_onFinish];
  *v29 = 0;
  v29[1] = 0;
  v26[v27] = 0;
  v30 = v28[1];
  *v28 = 0;
  v28[1] = 0;
  swift_bridgeObjectRelease(v30);
  URL._bridgeToObjectiveC()(v31);
  v33 = v32;
  *(_QWORD *)(v0 + 16) = v26;
  *(_QWORD *)(v0 + 24) = v25;
  v34 = (char *)objc_msgSendSuper2((objc_super *)(v0 + 16), "initWithAccountURL:", v32);

  objc_msgSend(v34, "setDelegate:", v34);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v45, v44, v24);
  v35 = *(unsigned __int8 *)(v22 + 80);
  v36 = (v35 + 16) & ~v35;
  v37 = swift_allocObject(&unk_A1218, v36 + v46, v35 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v37 + v36, v45, v24);
  v38 = &v34[OBJC_IVAR____TtC5JSApp25AccountPageViewController_onFinish];
  v39 = *(_QWORD *)&v34[OBJC_IVAR____TtC5JSApp25AccountPageViewController_onFinish];
  v40 = *(_QWORD *)&v34[OBJC_IVAR____TtC5JSApp25AccountPageViewController_onFinish + 8];
  *(_QWORD *)v38 = sub_4ED0C;
  *((_QWORD *)v38 + 1) = v37;
  sub_2D4DC(v39, v40);
  if (v23)
    v41 = v23;
  else
    v41 = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRetain(v23);
  _sSo16UIViewControllerC5JSAppE7present_7options8animated10completionyAB_SDys11AnyHashableVypGSbyycSgtFZ_0(v34, (uint64_t)v41, 1, 0, 0);

  swift_bridgeObjectRelease(v41);
LABEL_12:
  v42 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v42);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_45F1C()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AccountController()), "init");
  qword_B8AA0 = (uint64_t)result;
  return result;
}

void AccountController.add(observer:)(uint64_t a1)
{
  char *v1;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  char *v8;
  char isEscapingClosureAtFileLocation;
  _QWORD v10[5];
  uint64_t v11;

  v3 = *(NSObject **)&v1[OBJC_IVAR___JSAAccountController_observerQueue];
  v4 = swift_allocObject(&unk_A0C00, 32, 7);
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = a1;
  v5 = swift_allocObject(&unk_A0C28, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_4612C;
  *(_QWORD *)(v5 + 24) = v4;
  v10[4] = sub_37D14;
  v11 = v5;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_2AC34;
  v10[3] = &unk_A0C40;
  v6 = _Block_copy(v10);
  v7 = v11;
  v8 = v1;
  swift_unknownObjectRetain(a1);
  swift_retain(v5);
  swift_release(v7);
  dispatch_sync(v3, v6);
  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 100, 196, 28, 1);
  swift_release(v5);
  swift_release(v4);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
}

uint64_t sub_4608C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE v9[24];

  v3 = (_QWORD *)(a1 + OBJC_IVAR___JSAAccountController_observers);
  swift_beginAccess(a1 + OBJC_IVAR___JSAAccountController_observers, v9, 33, 0);
  v4 = swift_unknownObjectRetain(a2);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v4);
  v6 = *(_QWORD *)((char *)&dword_10 + (*v3 & 0xFFFFFFFFFFFFFF8));
  v5 = *(_QWORD *)((char *)&dword_18 + (*v3 & 0xFFFFFFFFFFFFFF8));
  if (v6 >= v5 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
  v7 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, a2);
  specialized Array._endMutation()(v7);
  return swift_endAccess(v9);
}

uint64_t sub_4612C()
{
  uint64_t v0;

  return sub_4608C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_46134()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_46144(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_46154(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void AccountController.remove(observer:)(uint64_t a1)
{
  char *v1;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  char *v8;
  char isEscapingClosureAtFileLocation;
  _QWORD v10[5];
  uint64_t v11;

  v3 = *(NSObject **)&v1[OBJC_IVAR___JSAAccountController_observerQueue];
  v4 = swift_allocObject(&unk_A0C78, 32, 7);
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = a1;
  v5 = swift_allocObject(&unk_A0CA0, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_4637C;
  *(_QWORD *)(v5 + 24) = v4;
  v10[4] = sub_38144;
  v11 = v5;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_2AC34;
  v10[3] = &unk_A0CB8;
  v6 = _Block_copy(v10);
  v7 = v11;
  v8 = v1;
  swift_unknownObjectRetain(a1);
  swift_retain(v5);
  swift_release(v7);
  dispatch_sync(v3, v6);
  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 100, 203, 28, 1);
  swift_release(v5);
  swift_release(v4);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
}

uint64_t sub_462A4(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];

  v3 = (uint64_t *)(a1 + OBJC_IVAR___JSAAccountController_observers);
  swift_beginAccess(a1 + OBJC_IVAR___JSAAccountController_observers, v9, 33, 0);
  swift_unknownObjectRetain(a2);
  v4 = sub_4D820(v3, a2);
  result = swift_unknownObjectRelease(a2);
  v6 = *v3;
  if ((unint64_t)*v3 >> 62)
  {
    if (v6 < 0)
      v8 = *v3;
    else
      v8 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v8);
    result = swift_bridgeObjectRelease(v6);
    if (v7 >= v4)
      goto LABEL_3;
  }
  else
  {
    v7 = *(_QWORD *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFF8));
    if (v7 >= v4)
    {
LABEL_3:
      sub_5FFF8(v4, v7);
      return swift_endAccess(v9);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_4637C()
{
  uint64_t v0;

  return sub_462A4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_46384()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_463A0(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  id v7;

  swift_unknownObjectRetain(a3);
  v7 = a1;
  a4(a3);

  return swift_unknownObjectRelease(a3);
}

uint64_t AccountController.signIn(enableAccountCreation:)(char a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = v1;
  *(_BYTE *)(v2 + 64) = a1;
  return swift_task_switch(sub_46408, 0, 0);
}

uint64_t sub_46408()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;

  if (*(_BYTE *)(v0 + 64) == 1)
  {
    v1 = objc_msgSend(objc_allocWithZone((Class)AMSAuthenticateOptions), "init");
    v2 = v1;
    if (v1)
      objc_msgSend(v1, "setEnableAccountCreation:", 1);
  }
  else
  {
    v2 = 0;
  }
  *(_QWORD *)(v0 + 24) = v2;
  v3 = dword_B8ABC;
  v4 = v2;
  v5 = (_QWORD *)swift_task_alloc(v3);
  *(_QWORD *)(v0 + 32) = v5;
  *v5 = v0;
  v5[1] = sub_464BC;
  v6 = *(_QWORD *)(v0 + 16);
  v5[11] = v2;
  v5[12] = v6;
  return swift_task_switch(sub_465E0, 0, 0);
}

uint64_t sub_464BC(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();

  v8 = *v4;
  v9 = *(_QWORD *)(*v4 + 32);
  *(_QWORD *)(*v4 + 40) = v3;
  swift_task_dealloc(v9);
  if (v3)
  {
    v10 = sub_4658C;
  }
  else
  {

    *(_QWORD *)(v8 + 48) = a3;
    *(_QWORD *)(v8 + 56) = a2;
    *(_BYTE *)(v8 + 65) = a1 & 1;
    v10 = sub_46550;
  }
  return swift_task_switch(v10, 0, 0);
}

uint64_t sub_46550()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 65), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 48));
}

uint64_t sub_4658C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 24);

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_465C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 88) = a1;
  *(_QWORD *)(v2 + 96) = v1;
  return swift_task_switch(sub_465E0, 0, 0);
}

void sub_465E0()
{
  _QWORD *v0;
  id v1;
  unsigned int v2;
  char *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  v1 = objc_msgSend((id)objc_opt_self(BURestrictionsProvider), "sharedInstance");
  v2 = objc_msgSend(v1, "isAccountModificationAllowed");
  swift_unknownObjectRelease(v1);
  if (v2)
  {
    v3 = (char *)v0[12];
    v4 = *(NSObject **)&v3[OBJC_IVAR___JSAAccountController_observerQueue];
    v5 = swift_allocObject(&unk_A1620, 24, 7);
    *(_QWORD *)(v5 + 16) = v3;
    v6 = swift_allocObject(&unk_A1648, 32, 7);
    v0[2] = _NSConcreteStackBlock;
    *(_QWORD *)(v6 + 16) = sub_4F60C;
    *(_QWORD *)(v6 + 24) = v5;
    v0[6] = sub_38144;
    v0[7] = v6;
    v0[3] = 1107296256;
    v0[4] = sub_2AC34;
    v0[5] = &unk_A1660;
    v7 = _Block_copy(v0 + 2);
    v8 = v0[7];
    v9 = v3;
    swift_retain(v6);
    swift_release(v8);
    dispatch_sync(v4, v7);
    _Block_release(v7);
    LOBYTE(v4) = swift_isEscapingClosureAtFileLocation(v6, "", 100, 491, 28, 1);
    swift_release(v5);
    swift_release(v6);
    if ((v4 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v10 = v0[11];
      v11 = (void *)objc_opt_self(BUAccountsProvider);
      v12 = objc_msgSend(v11, "sharedProvider");
      v13 = objc_msgSend(v12, "activeStoreAccount");

      v14 = objc_msgSend(objc_allocWithZone((Class)AMSAuthenticateRequest), "initWithAccount:options:", v13, v10);
      v0[13] = v14;

      v15 = objc_msgSend(v11, "sharedProvider");
      v16 = objc_msgSend(v15, "currentStorefront");

      if (v16)
      {
        v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
        v19 = v18;

      }
      else
      {
        v17 = 0;
        v19 = 0;
      }
      v0[14] = v19;
      v20 = v0[12];
      v21 = (_QWORD *)swift_task_alloc(48);
      v0[15] = v21;
      v21[2] = v14;
      v21[3] = v20;
      v21[4] = v17;
      v21[5] = v19;
      v22 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
      v0[16] = v22;
      v23 = sub_29EF0(&qword_B8D80);
      *v22 = v0;
      v22[1] = sub_468E0;
      withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 8, 0, 0, 0x77286E496E676973, 0xED0000293A687469, sub_4F63C, v21, v23);
    }
  }
  else
  {
    ((void (*)(_QWORD, _QWORD, unint64_t))v0[1])(0, 0, 0xE000000000000000);
  }
}

uint64_t sub_468E0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 128);
  *(_QWORD *)(*v1 + 136) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_46990;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 120);
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 112));
    swift_task_dealloc(v5);
    v4 = sub_46954;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_46954()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
}

uint64_t sub_46990()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);

  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_46B08(char a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  id v7;
  uint64_t v8;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = dword_B8AB4;
  v7 = a3;
  v8 = swift_task_alloc(v6);
  v3[4] = v8;
  *(_QWORD *)v8 = v3;
  *(_QWORD *)(v8 + 8) = sub_46B94;
  *(_QWORD *)(v8 + 16) = v7;
  *(_BYTE *)(v8 + 64) = a1;
  return swift_task_switch(sub_46408, 0, 0);
}

uint64_t sub_46B94(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void (**v11)(_QWORD, _QWORD, _QWORD, _QWORD);
  void *v12;
  NSString v13;

  v5 = v3;
  v8 = *(_QWORD *)(*v4 + 32);
  v9 = *(void **)(*v4 + 16);
  v10 = *v4;
  swift_task_dealloc(v8);

  v11 = *(void (***)(_QWORD, _QWORD, _QWORD, _QWORD))(v10 + 24);
  if (v5)
  {
    v12 = (void *)_convertErrorToNSError(_:)(v5);
    swift_errorRelease(v5);
    ((void (**)(_QWORD, _QWORD, _QWORD, void *))v11)[2](v11, 0, 0, v12);

    _Block_release(v11);
  }
  else
  {
    v13 = String._bridgeToObjectiveC()();
    ((void (**)(_QWORD, _QWORD, NSString, _QWORD))v11)[2](v11, a1 & 1, v13, 0);

    _Block_release(v11);
    swift_bridgeObjectRelease(a3);
  }
  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t AccountController.signOut()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = v0;
  return swift_task_switch(sub_46C98, 0, 0);
}

void sub_46C98()
{
  _QWORD *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  char *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v1 = objc_msgSend((id)objc_opt_self(BURestrictionsProvider), "sharedInstance");
  v2 = objc_msgSend(v1, "isAccountModificationAllowed");
  swift_unknownObjectRelease(v1);
  if ((_DWORD)v2
    && (v3 = objc_msgSend((id)objc_opt_self(BUAccountsProvider), "sharedProvider"),
        v4 = objc_msgSend(v3, "activeStoreAccount"),
        v0[9] = v4,
        v3,
        v4))
  {
    v5 = (char *)v0[8];
    v6 = *(NSObject **)&v5[OBJC_IVAR___JSAAccountController_observerQueue];
    v7 = swift_allocObject(&unk_A0CF0, 24, 7);
    *(_QWORD *)(v7 + 16) = v5;
    v8 = swift_allocObject(&unk_A0D18, 32, 7);
    *(_QWORD *)(v8 + 16) = sub_4C038;
    *(_QWORD *)(v8 + 24) = v7;
    v0[6] = sub_38144;
    v0[7] = v8;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_2AC34;
    v0[5] = &unk_A0D30;
    v9 = _Block_copy(v0 + 2);
    v10 = v0[7];
    v11 = v5;
    swift_retain(v8);
    swift_release(v10);
    dispatch_sync(v6, v9);
    _Block_release(v9);
    LOBYTE(v9) = swift_isEscapingClosureAtFileLocation(v8, "", 100, 507, 28, 1);
    swift_release(v8);
    swift_release(v7);
    if ((v9 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v12 = v0[8];
      v13 = swift_task_alloc(32);
      v0[10] = v13;
      *(_QWORD *)(v13 + 16) = v4;
      *(_QWORD *)(v13 + 24) = v12;
      v14 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
      v0[11] = v14;
      *v14 = v0;
      v14[1] = sub_46EFC;
      withCheckedContinuation<A>(isolation:function:_:)(v0 + 12, 0, 0, 0x2874754F6E676973, 0xE900000000000029, sub_4C068, v13, &type metadata for Bool);
    }
  }
  else
  {
    ((void (*)(id))v0[1])(v2);
  }
}

uint64_t sub_46EFC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 88));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_46F58, 0, 0);
}

uint64_t sub_46F58()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 96));
}

void sub_46F8C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD aBlock[5];
  uint64_t v16;

  v6 = sub_29EF0(&qword_B8D78);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = objc_msgSend(a2, "bu_signOut");
  v10 = swift_allocObject(&unk_A0E80, 24, 7);
  swift_unknownObjectWeakInit(v10 + 16, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v11 = *(unsigned __int8 *)(v7 + 80);
  v12 = (v11 + 24) & ~v11;
  v13 = swift_allocObject(&unk_A1558, v12 + v8, v11 | 7);
  *(_QWORD *)(v13 + 16) = v10;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v13 + v12, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = sub_4F5A8;
  v16 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_474F4;
  aBlock[3] = &unk_A1570;
  v14 = _Block_copy(aBlock);
  objc_msgSend(v9, "addFinishBlock:", v14, swift_release(v16).n128_f64[0]);
  _Block_release(v14);

}

void sub_47108(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t Strong;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  __n128 v19;
  uint64_t v20;
  __n128 v21;
  __n128 v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  int v37;
  uint64_t v38;
  _QWORD v39[3];
  char v40[8];
  uint64_t v41;
  uint64_t aBlock[5];
  uint64_t v43;
  char v44[24];

  v38 = a4;
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3 += 16;
  swift_beginAccess(a3, v44, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a3);
  if (Strong)
  {
    v12 = (void *)Strong;
    v37 = a1;
    v13 = *(NSObject **)(Strong + OBJC_IVAR___JSAAccountController_observerQueue);
    v14 = swift_allocObject(&unk_A15A8, 24, 7);
    *(_QWORD *)(v14 + 16) = v12;
    v15 = swift_allocObject(&unk_A15D0, 32, 7);
    *(_QWORD *)(v15 + 16) = sub_4F978;
    *(_QWORD *)(v15 + 24) = v14;
    aBlock[4] = (uint64_t)sub_38144;
    v43 = v15;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_2AC34;
    aBlock[3] = (uint64_t)&unk_A15E8;
    v16 = _Block_copy(aBlock);
    v17 = v43;
    swift_retain(v15);
    v18 = v12;
    swift_release(v17);
    dispatch_sync(v13, v16);
    _Block_release(v16);
    LOBYTE(v17) = swift_isEscapingClosureAtFileLocation(v15, "", 100, 515, 28, 1);
    swift_release(v14);
    v19 = swift_release(v15);
    if ((v17 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      if (!a2)
      {
LABEL_8:
        LOBYTE(aBlock[0]) = v37 & 1;
        v34 = sub_29EF0(&qword_B8D78);
        CheckedContinuation.resume(returning:)(aBlock, v34);

        return;
      }
      swift_errorRetain(a2, v19);
      if (qword_B8148 == -1)
      {
LABEL_5:
        v20 = sub_2D6E0(v7, (uint64_t)qword_B9260);
        v21.n128_f64[0] = (*(double (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v20, v7);
        swift_errorRetain(a2, v21);
        v23 = swift_errorRetain(a2, v22);
        v24 = Logger.logObject.getter(v23);
        v25 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v24, v25))
        {
          v26 = swift_slowAlloc(22, -1);
          v36 = v18;
          v27 = v26;
          v28 = swift_slowAlloc(64, -1);
          v35 = v8;
          v29 = v28;
          aBlock[0] = v28;
          *(_DWORD *)v27 = 136315394;
          v41 = sub_3A180(0x2874754F6E676973, 0xE900000000000029, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, aBlock, v27 + 4, v27 + 12);
          *(_WORD *)(v27 + 12) = 2080;
          swift_getErrorValue(a2, v40, v39);
          v30 = Error.localizedDescription.getter(v39[1], v39[2]);
          v32 = v31;
          v41 = sub_3A180(v30, v31, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, aBlock, v27 + 14, v27 + 22);
          swift_bridgeObjectRelease(v32);
          swift_errorRelease(a2);
          swift_errorRelease(a2);
          _os_log_impl(&dword_0, v24, v25, "%s Unable to sign out due to %s", (uint8_t *)v27, 0x16u);
          swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v29, -1, -1);
          v33 = v27;
          v18 = v36;
          swift_slowDealloc(v33, -1, -1);

          swift_errorRelease(a2);
          (*(void (**)(char *, uint64_t))(v35 + 8))(v10, v7);
        }
        else
        {
          swift_errorRelease(a2);
          swift_errorRelease(a2);
          swift_errorRelease(a2);

          (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        }
        goto LABEL_8;
      }
    }
    swift_once(&qword_B8148, sub_56C98);
    goto LABEL_5;
  }
}

void sub_474F4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  id v7;

  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

uint64_t AccountController.presentGiftViewController(for:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_47570, 0, 0);
}

uint64_t sub_47570()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[3];
  v1 = v0[4];
  v3 = v0[2];
  v4 = (_QWORD *)swift_task_alloc(48);
  v0[5] = v4;
  v4[2] = v3;
  v4[3] = v2;
  v4[4] = v1;
  v5 = async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1];
  swift_bridgeObjectRetain(v1);
  v6 = (_QWORD *)swift_task_alloc(v5);
  v0[6] = v6;
  *v6 = v0;
  v6[1] = sub_47624;
  return withCheckedContinuation<A>(isolation:function:_:)(v6, 0, 0, 0xD000000000000024, 0x8000000000089580, sub_4C070, v4, (char *)&type metadata for () + 8);
}

uint64_t sub_47624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_4768C, 0, 0);
}

uint64_t sub_4768C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_47694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  double result;
  uint64_t v23;
  uint64_t v24;

  v24 = a2;
  v7 = sub_29EF0(&qword_B8CC8);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_29EF0(&qword_B8B00);
  __chkstk_darwin(v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  type metadata accessor for MainActor(0);
  swift_bridgeObjectRetain(a4);
  v15 = swift_bridgeObjectRetain(a3);
  v16 = static MainActor.shared.getter(v15);
  v17 = *(unsigned __int8 *)(v8 + 80);
  v18 = (v17 + 48) & ~v17;
  v19 = (v9 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = (char *)swift_allocObject(&unk_A1508, v19 + 8, v17 | 7);
  *((_QWORD *)v20 + 2) = v16;
  *((_QWORD *)v20 + 3) = &protocol witness table for MainActor;
  *((_QWORD *)v20 + 4) = v24;
  *((_QWORD *)v20 + 5) = a3;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v20[v18], v10, v7);
  *(_QWORD *)&v20[v19] = a4;
  v21 = sub_2EC38((uint64_t)v13, (uint64_t)&unk_B8D70, (uint64_t)v20);
  *(_QWORD *)&result = swift_release(v21).n128_u64[0];
  return result;
}

uint64_t sub_47828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7[6] = a6;
  v7[7] = a7;
  v7[4] = a4;
  v7[5] = a5;
  v8 = sub_29EF0(&qword_B8CC8);
  v7[8] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[9] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[10] = v10;
  v7[11] = swift_task_alloc((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_29EF0((uint64_t *)&unk_B8CA0);
  v7[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v7[13] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v7[14] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[15] = swift_task_alloc(v14);
  v7[16] = swift_task_alloc(v14);
  v15 = type metadata accessor for MainActor(0);
  v7[17] = static MainActor.shared.getter(v15);
  v16 = dispatch thunk of Actor.unownedExecutor.getter(v15, &protocol witness table for MainActor);
  return swift_task_switch(sub_47924, v16, v17);
}

uint64_t sub_47924()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  objc_class *v16;
  _BYTE *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  NSURL *v22;
  void *v23;
  void *v24;
  char *v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 136));
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(SKAccountPageGiftURLString);
  v6 = v5;
  URL.init(string:)(v4, v5);
  swift_bridgeObjectRelease(v6);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 32);
    v9 = *(_QWORD *)(v0 + 40);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 32))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
    v10 = HIBYTE(v9) & 0xF;
    if ((v9 & 0x2000000000000000) == 0)
      v10 = v8 & 0xFFFFFFFFFFFFLL;
    if (v10)
      URL.appendPathComponent(_:)(*(Swift::String *)(v0 + 32));
    v11 = *(_QWORD *)(v0 + 120);
    v12 = *(_QWORD *)(v0 + 112);
    v40 = *(_QWORD *)(v0 + 128);
    v41 = *(_QWORD *)(v0 + 96);
    v13 = *(_QWORD *)(v0 + 72);
    v37 = *(_QWORD *)(v0 + 88);
    v38 = *(_QWORD *)(v0 + 80);
    v36 = *(_QWORD *)(v0 + 64);
    v39 = *(void **)(v0 + 56);
    v14 = *(_QWORD *)(v0 + 40);
    v34 = *(_QWORD *)(v0 + 104);
    v35 = *(_QWORD *)(v0 + 48);
    v15 = *(_QWORD *)(v0 + 32);
    (*(void (**)(uint64_t))(v12 + 16))(v11);
    v16 = (objc_class *)type metadata accessor for AccountPageViewController();
    v17 = objc_allocWithZone(v16);
    v18 = OBJC_IVAR____TtC5JSApp25AccountPageViewController_pageType;
    v17[OBJC_IVAR____TtC5JSApp25AccountPageViewController_pageType] = 0;
    v19 = &v17[OBJC_IVAR____TtC5JSApp25AccountPageViewController_contentID];
    *v19 = 0;
    v19[1] = 0;
    v20 = &v17[OBJC_IVAR____TtC5JSApp25AccountPageViewController_onFinish];
    *v20 = 0;
    v20[1] = 0;
    v17[v18] = 1;
    v21 = v19[1];
    *v19 = v15;
    v19[1] = v9;
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRelease(v21);
    URL._bridgeToObjectiveC()(v22);
    v24 = v23;
    *(_QWORD *)(v0 + 16) = v17;
    *(_QWORD *)(v0 + 24) = v16;
    v25 = (char *)objc_msgSendSuper2((objc_super *)(v0 + 16), "initWithAccountURL:", v23);

    objc_msgSend(v25, "setDelegate:", v25);
    v26 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v26(v11, v34);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v37, v35, v36);
    v27 = *(unsigned __int8 *)(v13 + 80);
    v28 = (v27 + 16) & ~v27;
    v29 = swift_allocObject(&unk_A1530, v28 + v38, v27 | 7);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v29 + v28, v37, v36);
    v30 = &v25[OBJC_IVAR____TtC5JSApp25AccountPageViewController_onFinish];
    v31 = *(_QWORD *)&v25[OBJC_IVAR____TtC5JSApp25AccountPageViewController_onFinish];
    v32 = *(_QWORD *)&v25[OBJC_IVAR____TtC5JSApp25AccountPageViewController_onFinish + 8];
    *(_QWORD *)v30 = sub_4ED0C;
    *((_QWORD *)v30 + 1) = v29;
    sub_2D4DC(v31, v32);
    if (v39)
      v33 = v39;
    else
      v33 = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRetain(v39);
    _sSo16UIViewControllerC5JSAppE7present_7options8animated10completionyAB_SDys11AnyHashableVypGSbyycSgtFZ_0(v25, (uint64_t)v33, 1, 0, 0);

    swift_bridgeObjectRelease(v33);
    v26(v40, v34);
    swift_task_dealloc(v40);
    swift_task_dealloc(v11);
    swift_task_dealloc(v41);
    swift_task_dealloc(v37);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_47D18(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v10 = v9;
  if (a2)
    v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  else
    v11 = 0;
  v4[4] = v11;
  v4[5] = v10;
  v4[6] = v8;
  v12 = a4;
  return swift_task_switch(sub_47DBC, 0, 0);
}

uint64_t sub_47DBC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[5];
  v1 = v0[6];
  v3 = v0[4];
  v4 = (_QWORD *)swift_task_alloc(48);
  v0[7] = v4;
  v4[2] = v1;
  v4[3] = v2;
  v4[4] = v3;
  v5 = async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1];
  swift_bridgeObjectRetain(v3);
  v6 = (_QWORD *)swift_task_alloc(v5);
  v0[8] = v6;
  *v6 = v0;
  v6[1] = sub_47E70;
  return withCheckedContinuation<A>(isolation:function:_:)(v6, 0, 0, 0xD000000000000024, 0x8000000000089580, sub_4F8F0, v4, (char *)&type metadata for () + 8);
}

uint64_t sub_47E70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_47ED8, 0, 0);
}

uint64_t sub_47ED8()
{
  uint64_t v0;
  uint64_t v1;
  void (**v2)(_QWORD);
  void *v3;

  v1 = *(_QWORD *)(v0 + 32);
  v3 = *(void **)(v0 + 16);
  v2 = *(void (***)(_QWORD))(v0 + 24);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));

  swift_bridgeObjectRelease(v1);
  v2[2](v2);
  _Block_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AccountController.presentRedeemViewController(for:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_47F50, 0, 0);
}

uint64_t sub_47F50()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[3];
  v1 = v0[4];
  v3 = v0[2];
  v4 = (_QWORD *)swift_task_alloc(48);
  v0[5] = v4;
  v4[2] = v3;
  v4[3] = v2;
  v4[4] = v1;
  v5 = async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1];
  swift_bridgeObjectRetain(v1);
  v6 = (_QWORD *)swift_task_alloc(v5);
  v0[6] = v6;
  *v6 = v0;
  v6[1] = sub_48004;
  return withCheckedContinuation<A>(isolation:function:_:)(v6, 0, 0, 0xD000000000000026, 0x80000000000895B0, sub_4C07C, v4, (char *)&type metadata for () + 8);
}

uint64_t sub_48004()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_4F98C, 0, 0);
}

double sub_4806C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  double result;
  uint64_t v23;
  uint64_t v24;

  v24 = a2;
  v7 = sub_29EF0(&qword_B8CC8);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_29EF0(&qword_B8B00);
  __chkstk_darwin(v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  type metadata accessor for MainActor(0);
  swift_bridgeObjectRetain(a4);
  v15 = swift_bridgeObjectRetain(a3);
  v16 = static MainActor.shared.getter(v15);
  v17 = *(unsigned __int8 *)(v8 + 80);
  v18 = (v17 + 48) & ~v17;
  v19 = (v9 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = (char *)swift_allocObject(&unk_A14B8, v19 + 8, v17 | 7);
  *((_QWORD *)v20 + 2) = v16;
  *((_QWORD *)v20 + 3) = &protocol witness table for MainActor;
  *((_QWORD *)v20 + 4) = v24;
  *((_QWORD *)v20 + 5) = a3;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v20[v18], v10, v7);
  *(_QWORD *)&v20[v19] = a4;
  v21 = sub_2EC38((uint64_t)v13, (uint64_t)&unk_B8D60, (uint64_t)v20);
  *(_QWORD *)&result = swift_release(v21).n128_u64[0];
  return result;
}

uint64_t sub_48200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7[6] = a6;
  v7[7] = a7;
  v7[4] = a4;
  v7[5] = a5;
  v8 = sub_29EF0(&qword_B8CC8);
  v7[8] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[9] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[10] = v10;
  v7[11] = swift_task_alloc((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_29EF0((uint64_t *)&unk_B8CA0);
  v7[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v7[13] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v7[14] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[15] = swift_task_alloc(v14);
  v7[16] = swift_task_alloc(v14);
  v15 = type metadata accessor for MainActor(0);
  v7[17] = static MainActor.shared.getter(v15);
  v16 = dispatch thunk of Actor.unownedExecutor.getter(v15, &protocol witness table for MainActor);
  return swift_task_switch(sub_482FC, v16, v17);
}

uint64_t sub_482FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  objc_class *v18;
  _BYTE *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  NSURL *v24;
  void *v25;
  void *v26;
  char *v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 136));
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(SKAccountPageRedeemURLString);
  v6 = v5;
  URL.init(string:)(v4, v5);
  swift_bridgeObjectRelease(v6);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 40);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 32))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
    v9 = *(_QWORD *)(v0 + 40);
    if (v8)
    {
      v10 = *(_QWORD *)(v0 + 32);
      v11 = HIBYTE(v9) & 0xF;
      if ((v9 & 0x2000000000000000) == 0)
        v11 = v10 & 0xFFFFFFFFFFFFLL;
      if (v11)
      {
        v12 = *(_QWORD *)(v0 + 40);
        URL.appendPathComponent(_:)(*(Swift::String *)&v10);
        v9 = *(_QWORD *)(v0 + 40);
      }
    }
    v13 = *(_QWORD *)(v0 + 120);
    v14 = *(_QWORD *)(v0 + 112);
    v41 = *(_QWORD *)(v0 + 128);
    v42 = *(_QWORD *)(v0 + 96);
    v15 = *(_QWORD *)(v0 + 72);
    v38 = *(_QWORD *)(v0 + 88);
    v39 = *(_QWORD *)(v0 + 80);
    v16 = *(_QWORD *)(v0 + 64);
    v40 = *(void **)(v0 + 56);
    v36 = *(_QWORD *)(v0 + 104);
    v37 = *(_QWORD *)(v0 + 48);
    v17 = *(_QWORD *)(v0 + 32);
    (*(void (**)(uint64_t))(v14 + 16))(v13);
    v18 = (objc_class *)type metadata accessor for AccountPageViewController();
    v19 = objc_allocWithZone(v18);
    v20 = OBJC_IVAR____TtC5JSApp25AccountPageViewController_pageType;
    v19[OBJC_IVAR____TtC5JSApp25AccountPageViewController_pageType] = 0;
    v21 = &v19[OBJC_IVAR____TtC5JSApp25AccountPageViewController_contentID];
    *v21 = 0;
    v21[1] = 0;
    v22 = &v19[OBJC_IVAR____TtC5JSApp25AccountPageViewController_onFinish];
    *v22 = 0;
    v22[1] = 0;
    v19[v20] = 2;
    v23 = v21[1];
    *v21 = v17;
    v21[1] = v9;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRelease(v23);
    URL._bridgeToObjectiveC()(v24);
    v26 = v25;
    *(_QWORD *)(v0 + 16) = v19;
    *(_QWORD *)(v0 + 24) = v18;
    v27 = (char *)objc_msgSendSuper2((objc_super *)(v0 + 16), "initWithAccountURL:", v25);

    objc_msgSend(v27, "setDelegate:", v27);
    v28 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v28(v13, v36);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v38, v37, v16);
    v29 = *(unsigned __int8 *)(v15 + 80);
    v30 = (v29 + 16) & ~v29;
    v31 = swift_allocObject(&unk_A14E0, v30 + v39, v29 | 7);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v31 + v30, v38, v16);
    v32 = &v27[OBJC_IVAR____TtC5JSApp25AccountPageViewController_onFinish];
    v33 = *(_QWORD *)&v27[OBJC_IVAR____TtC5JSApp25AccountPageViewController_onFinish];
    v34 = *(_QWORD *)&v27[OBJC_IVAR____TtC5JSApp25AccountPageViewController_onFinish + 8];
    *(_QWORD *)v32 = sub_4ED0C;
    *((_QWORD *)v32 + 1) = v31;
    sub_2D4DC(v33, v34);
    if (v40)
      v35 = v40;
    else
      v35 = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRetain(v40);
    _sSo16UIViewControllerC5JSAppE7present_7options8animated10completionyAB_SDys11AnyHashableVypGSbyycSgtFZ_0(v27, (uint64_t)v35, 1, 0, 0);

    swift_bridgeObjectRelease(v35);
    v28(v41, v36);
    swift_task_dealloc(v41);
    swift_task_dealloc(v13);
    swift_task_dealloc(v42);
    swift_task_dealloc(v38);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_486F4(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  if (!a1)
  {
    v4[4] = 0;
    v4[5] = 0;
    if (a2)
      goto LABEL_3;
LABEL_5:
    v9 = 0;
    goto LABEL_6;
  }
  v4[4] = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4[5] = v8;
  if (!a2)
    goto LABEL_5;
LABEL_3:
  v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
LABEL_6:
  v4[6] = v9;
  v10 = a4;
  return swift_task_switch(sub_487A4, 0, 0);
}

uint64_t sub_487A4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[5];
  v1 = v0[6];
  v3 = v0[4];
  v4 = (_QWORD *)swift_task_alloc(48);
  v0[7] = v4;
  v4[2] = v3;
  v4[3] = v2;
  v4[4] = v1;
  v5 = async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1];
  swift_bridgeObjectRetain(v1);
  v6 = (_QWORD *)swift_task_alloc(v5);
  v0[8] = v6;
  *v6 = v0;
  v6[1] = sub_48858;
  return withCheckedContinuation<A>(isolation:function:_:)(v6, 0, 0, 0xD000000000000026, 0x80000000000895B0, sub_4F8EC, v4, (char *)&type metadata for () + 8);
}

uint64_t sub_48858()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_488C0, 0, 0);
}

uint64_t sub_488C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (**v3)(_QWORD);

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(void (***)(_QWORD))(v0 + 24);

  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);
  v3[2](v3);
  _Block_release(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id AccountController.init()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  objc_class *ObjectType;
  objc_super v21;
  void *v22;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  v19 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v2 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v1[OBJC_IVAR___JSAAccountController_observers] = &_swiftEmptyArrayStorage;
  v18 = OBJC_IVAR___JSAAccountController_observerQueue;
  v17[1] = sub_37F2C();
  v11 = v1;
  static DispatchQoS.unspecified.getter(v11);
  v22 = &_swiftEmptyArrayStorage;
  v12 = sub_2A1FC(&qword_B81F0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v13 = sub_29EF0((uint64_t *)&unk_B8AF0);
  v14 = sub_2A23C(&qword_B81F8, (uint64_t *)&unk_B8AF0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v13, v14, v5, v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v19);
  v15 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001FLL, 0x80000000000895E0, v10, v7, v4, 0);
  *(_QWORD *)&v1[v18] = v15;

  v21.receiver = v11;
  v21.super_class = ObjectType;
  return objc_msgSendSuper2(&v21, "init");
}

id _s5JSApp17AccountControllerC6sharedACvgZ_0()
{
  if (qword_B8100 != -1)
    swift_once(&qword_B8100, sub_45F1C);
  return (id)qword_B8AA0;
}

Swift::Void __swiftcall AccountController.openIForgot()()
{
  sub_4DB3C((uint64_t)&unk_A1428, (uint64_t)&unk_A1450, (uint64_t)&unk_B8D40, (uint64_t)&unk_B8D48);
}

uint64_t sub_48C38()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for Logger(0);
  v0[23] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[24] = v2;
  v0[25] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_29EF0(&qword_B8B00);
  v0[26] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL(0);
  v0[27] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v0[28] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v0[29] = v6;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v0[30] = swift_task_alloc(v7);
  v0[31] = swift_task_alloc(v7);
  return swift_task_switch(sub_48CF4, 0, 0);
}

uint64_t sub_48CF4()
{
  _QWORD *v0;
  _QWORD *v1;
  id v2;
  id v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0 + 2;
  v2 = objc_msgSend((id)objc_opt_self(BUBag), "defaultBag");
  v3 = objc_msgSend(v2, "forgottenPassword");
  v0[32] = v3;

  v0[7] = v0 + 18;
  v0[2] = v0;
  v0[3] = sub_48DD0;
  v4 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v5 = v0 + 10;
  v5[1] = 0x40000000;
  v5[2] = sub_49224;
  v5[3] = &unk_A1468;
  v5[4] = v4;
  objc_msgSend(v3, "jsa_valueWithCompletion:", v5);
  return swift_continuation_await(v1);
}

uint64_t sub_48DD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 264) = v1;
  if (v1)
    v2 = sub_48F7C;
  else
    v2 = sub_48E30;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_48E30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 224);
  v6 = *(_QWORD *)(v0 + 208);
  v7 = *(void **)(v0 + 144);

  static URL._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v8 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v6, 1, 1, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, v1, v4);
  v9 = type metadata accessor for MainActor(0);
  v10 = static MainActor.shared.getter(v9);
  v11 = *(unsigned __int8 *)(v5 + 80);
  v12 = (v11 + 32) & ~v11;
  v13 = swift_allocObject(&unk_A1490, v12 + v3, v11 | 7);
  *(_QWORD *)(v13 + 16) = v10;
  *(_QWORD *)(v13 + 24) = &protocol witness table for MainActor;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v13 + v12, v2, v4);
  v14 = sub_2EC38(v6, (uint64_t)&unk_B8D50, v13);
  swift_release(v14);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v4);
  v15 = *(_QWORD *)(v0 + 240);
  v17 = *(_QWORD *)(v0 + 200);
  v16 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_48F7C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  __n128 v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27[2];

  v1 = *(void **)(v0 + 256);
  swift_willThrow();

  if (qword_B8148 != -1)
    swift_once(&qword_B8148, sub_56C98);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 200);
  v6 = sub_2D6E0(v2, (uint64_t)qword_B9260);
  v7.n128_f64[0] = (*(double (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v6, v2);
  swift_errorRetain(v3, v7);
  v9 = swift_errorRetain(v3, v8);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.error.getter();
  v12 = os_log_type_enabled(v10, v11);
  v13 = *(_QWORD *)(v0 + 264);
  v15 = *(_QWORD *)(v0 + 192);
  v14 = *(_QWORD *)(v0 + 200);
  v16 = *(_QWORD *)(v0 + 184);
  if (v12)
  {
    v26 = *(_QWORD *)(v0 + 200);
    v17 = swift_slowAlloc(22, -1);
    v18 = swift_slowAlloc(64, -1);
    v27[0] = v18;
    *(_DWORD *)v17 = 136315394;
    *(_QWORD *)(v0 + 168) = sub_3A180(0x726F46496E65706FLL, 0xED00002928746F67, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v17 + 4, v17 + 12);
    *(_WORD *)(v17 + 12) = 2080;
    swift_getErrorValue(v13, v0 + 160, v0 + 120);
    v19 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
    v21 = v20;
    *(_QWORD *)(v0 + 176) = sub_3A180(v19, v20, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease(v21);
    swift_errorRelease(v13);
    swift_errorRelease(v13);
    _os_log_impl(&dword_0, v10, v11, "%s Unable to retrieve forgottenPassword from AMSBag due to %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    swift_errorRelease(v13);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v26, v16);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 264));
    swift_errorRelease(v13);
    swift_errorRelease(v13);

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  }
  v22 = *(_QWORD *)(v0 + 240);
  v24 = *(_QWORD *)(v0 + 200);
  v23 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall AccountController.openTermsAndConditions()()
{
  sub_4DB3C((uint64_t)&unk_A1380, (uint64_t)&unk_A13A8, (uint64_t)&unk_B8D00, (uint64_t)&unk_B8D10);
}

uint64_t sub_49290()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_29EF0(&qword_B8B00);
  v0[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = (*(_QWORD *)(*(_QWORD *)(sub_29EF0((uint64_t *)&unk_B8CA0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v0[24] = swift_task_alloc(v2);
  v0[25] = swift_task_alloc(v2);
  v3 = type metadata accessor for URL(0);
  v0[26] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v0[27] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v0[28] = v5;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v0[29] = swift_task_alloc(v6);
  v0[30] = swift_task_alloc(v6);
  return swift_task_switch(sub_49358, 0, 0);
}

uint64_t sub_49358()
{
  _QWORD *v0;
  _QWORD *v1;
  id v2;
  id v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0 + 2;
  v2 = objc_msgSend((id)objc_opt_self(BUBag), "defaultBag");
  v3 = objc_msgSend(v2, "p2ServiceTermsURL");
  v0[31] = v3;

  v0[7] = v0 + 18;
  v0[2] = v0;
  v0[3] = sub_49434;
  v4 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v5 = v0 + 10;
  v5[1] = 0x40000000;
  v5[2] = sub_49224;
  v5[3] = &unk_A13C0;
  v5[4] = v4;
  objc_msgSend(v3, "jsa_valueWithCompletion:", v5);
  return swift_continuation_await(v1);
}

uint64_t sub_49434()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 256) = v1;
  if (v1)
    v2 = sub_49630;
  else
    v2 = sub_49494;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_49494()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(void **)(v0 + 144);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;
  URL.init(string:)(v5, v6);
  swift_bridgeObjectRelease(v7);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {

    v9 = *(_QWORD *)(v0 + 232);
    v10 = *(_QWORD *)(v0 + 240);
    v12 = *(_QWORD *)(v0 + 216);
    v11 = *(_QWORD *)(v0 + 224);
    v13 = *(_QWORD *)(v0 + 208);
    v14 = *(_QWORD *)(v0 + 184);
    v24 = *(_QWORD *)(v0 + 200);
    v25 = *(_QWORD *)(v0 + 192);
    v15 = *(void (**)(uint64_t))(v12 + 32);
    v15(v10);
    v16 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v14, 1, 1, v16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v9, v10, v13);
    v17 = type metadata accessor for MainActor(0);
    v18 = static MainActor.shared.getter(v17);
    v19 = *(unsigned __int8 *)(v12 + 80);
    v20 = (v19 + 32) & ~v19;
    v21 = swift_allocObject(&unk_A13E8, v20 + v11, v19 | 7);
    *(_QWORD *)(v21 + 16) = v18;
    *(_QWORD *)(v21 + 24) = &protocol witness table for MainActor;
    ((void (*)(uint64_t, uint64_t, uint64_t))v15)(v21 + v20, v9, v13);
    v22 = sub_2EC38(v14, (uint64_t)&unk_B8D20, v21);
    v23 = swift_release(v22);
    (*(void (**)(uint64_t, uint64_t, __n128))(v12 + 8))(v10, v13, v23);
    swift_task_dealloc(v10);
    swift_task_dealloc(v9);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_49630()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  __n128 v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[2];

  v1 = *(void **)(v0 + 248);
  swift_willThrow();

  if (qword_B8148 != -1)
    swift_once(&qword_B8148, sub_56C98);
  v2 = *(_QWORD *)(v0 + 256);
  v3 = type metadata accessor for Logger(0);
  sub_2D6E0(v3, (uint64_t)qword_B9260);
  swift_errorRetain(v2, v4);
  v6 = swift_errorRetain(v2, v5);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 256);
  if (v9)
  {
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    v37[0] = v12;
    *(_DWORD *)v11 = 136315394;
    *(_QWORD *)(v0 + 168) = sub_3A180(0xD000000000000018, 0x80000000000898D0, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v11 + 4, v11 + 12);
    *(_WORD *)(v11 + 12) = 2080;
    swift_getErrorValue(v10, v0 + 160, v0 + 120);
    v13 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
    v15 = v14;
    *(_QWORD *)(v0 + 176) = sub_3A180(v13, v14, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease(v15);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl(&dword_0, v7, v8, "%s Unable to retrieve p2ServiceTermsURL from AMSBag due to %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 256));
    swift_errorRelease(v10);
  }

  v16 = *(_QWORD *)(v0 + 208);
  v17 = *(_QWORD *)(v0 + 216);
  v18 = *(_QWORD *)(v0 + 192);
  URL.init(string:)(0xD000000000000025, 0x80000000000898A0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v18, 1, v16);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 256));
    v20 = *(_QWORD *)(v0 + 232);
    v21 = *(_QWORD *)(v0 + 240);
    v23 = *(_QWORD *)(v0 + 216);
    v22 = *(_QWORD *)(v0 + 224);
    v24 = *(_QWORD *)(v0 + 208);
    v25 = *(_QWORD *)(v0 + 184);
    v35 = *(_QWORD *)(v0 + 192);
    v36 = *(_QWORD *)(v0 + 200);
    v26 = *(void (**)(uint64_t))(v23 + 32);
    v26(v21);
    v27 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v25, 1, 1, v27);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v20, v21, v24);
    v28 = type metadata accessor for MainActor(0);
    v29 = static MainActor.shared.getter(v28);
    v30 = *(unsigned __int8 *)(v23 + 80);
    v31 = (v30 + 32) & ~v30;
    v32 = swift_allocObject(&unk_A13E8, v31 + v22, v30 | 7);
    *(_QWORD *)(v32 + 16) = v29;
    *(_QWORD *)(v32 + 24) = &protocol witness table for MainActor;
    ((void (*)(uint64_t, uint64_t, uint64_t))v26)(v32 + v31, v20, v24);
    v33 = sub_2EC38(v25, (uint64_t)&unk_B8D20, v32);
    v34 = swift_release(v33);
    (*(void (**)(uint64_t, uint64_t, __n128))(v23 + 8))(v21, v24, v34);
    swift_task_dealloc(v21);
    swift_task_dealloc(v20);
    swift_task_dealloc(v36);
    swift_task_dealloc(v35);
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_499B4(uint64_t result, void *a2, char a3, void *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  id v11;

  v4 = *(_QWORD *)(result + 32);
  if (a4)
  {
    v6 = sub_29EF0(&qword_B8D30);
    v7 = swift_allocError(v6, &protocol self-conformance witness table for Error, 0, 0);
    *v8 = a4;
    v9 = a4;
    return swift_continuation_throwingResumeWithError(v4, v7);
  }
  else if (a2)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v4 + 64) + 40);
    *(_QWORD *)v10 = a2;
    *(_BYTE *)(v10 + 8) = a3;
    v11 = a2;
    return swift_continuation_throwingResume(v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall AccountController.presentGiftViewController(for:_:_:)(Swift::String_optional a1, JSValue _, Swift::OpaquePointer_optional a3)
{
  objc_class *v3;
  objc_class *rawValue;
  objc_class *object;
  uint64_t countAndFlagsBits;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  JSValue *v13;
  objc_class *v14;
  objc_class *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;

  rawValue = (objc_class *)a3.value._rawValue;
  object = (objc_class *)a1.value._object;
  countAndFlagsBits = a1.value._countAndFlagsBits;
  v8 = sub_29EF0(&qword_B8B00);
  __chkstk_darwin(v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!object)
    goto LABEL_6;
  v11 = ((unint64_t)object >> 56) & 0xF;
  if (((unint64_t)object & 0x2000000000000000) == 0)
    v11 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (v11)
  {
    v12 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v10, 1, 1, v12);
    v13 = (JSValue *)swift_allocObject(&unk_A0D68, 72, 7);
    v13[2].super.isa = 0;
    v13[3].super.isa = 0;
    v13[4].super.isa = v3;
    v13[5].super.isa = (Class)countAndFlagsBits;
    v13[6].super.isa = object;
    v13[7].super.isa = rawValue;
    v13[8].super.isa = _.super.isa;
    swift_bridgeObjectRetain(rawValue);
    v14 = v3;
    v15 = _.super.isa;
    swift_bridgeObjectRetain(object);
    v16 = sub_2EC38((uint64_t)v10, (uint64_t)&unk_B8B10, (uint64_t)v13);
    swift_release(v16);
  }
  else
  {
LABEL_6:
    v17 = objc_msgSend((id)objc_opt_self(JSABridge), "sharedInstance");
    v19 = String._bridgeToObjectiveC()();
    objc_msgSend(v17, "enqueueValueCall:arguments:file:line:", _.super.isa, 0, v19, 368);

  }
}

uint64_t sub_49C14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[4] = a7;
  v8[5] = a8;
  v8[2] = a5;
  v8[3] = a6;
  return swift_task_switch(sub_49C30, 0, 0);
}

uint64_t sub_49C30()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[3];
  v1 = v0[4];
  v3 = v0[2];
  v4 = (_QWORD *)swift_task_alloc(48);
  v0[6] = v4;
  v4[2] = v3;
  v4[3] = v2;
  v4[4] = v1;
  v5 = async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1];
  swift_bridgeObjectRetain(v1);
  v6 = (_QWORD *)swift_task_alloc(v5);
  v0[7] = v6;
  *v6 = v0;
  v6[1] = sub_49CE4;
  return withCheckedContinuation<A>(isolation:function:_:)(v6, 0, 0, 0xD000000000000024, 0x8000000000089580, sub_4F8F0, v4, (char *)&type metadata for () + 8);
}

uint64_t sub_49CE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 56));
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_49D4C, 0, 0);
}

uint64_t sub_49D4C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  NSString v3;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = objc_msgSend((id)objc_opt_self(JSABridge), "sharedInstance");
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "enqueueValueCall:arguments:file:line:", v1, 0, v3, 374);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall AccountController.presentRedeemViewController(for:_:_:)(JSValue a1, Swift::OpaquePointer_optional _, JSValue a3)
{
  objc_class *v3;
  objc_class *v4;
  objc_class *rawValue;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  JSValue *v11;
  objc_class *v12;
  objc_class *v13;
  objc_class *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(objc_class **)&_.is_nil;
  rawValue = (objc_class *)_.value._rawValue;
  v7 = sub_29EF0(&qword_B8B00);
  __chkstk_darwin(v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = (JSValue *)swift_allocObject(&unk_A0D90, 64, 7);
  v11[2].super.isa = 0;
  v11[3].super.isa = 0;
  v11[4].super.isa = a1.super.isa;
  v11[5].super.isa = v3;
  v11[6].super.isa = rawValue;
  v11[7].super.isa = v4;
  swift_bridgeObjectRetain(rawValue);
  v12 = a1.super.isa;
  v13 = v3;
  v14 = v4;
  v15 = sub_2EC38((uint64_t)v9, (uint64_t)&unk_B8B20, (uint64_t)v11);
  swift_release(v15);
}

uint64_t sub_49F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[10] = a6;
  v7[11] = a7;
  v7[8] = a4;
  v7[9] = a5;
  return swift_task_switch(sub_49FA8, 0, 0);
}

uint64_t sub_49FA8()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  if (objc_msgSend(*(id *)(v0 + 64), "isString")
    && (v1 = objc_msgSend(*(id *)(v0 + 64), "toString")) != 0)
  {
    v2 = v1;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v5 = v4;

  }
  else
  {
    v3 = 0;
    v5 = 0;
  }
  *(_QWORD *)(v0 + 96) = v5;
  v6 = *(_QWORD *)(v0 + 80);
  v7 = (_QWORD *)swift_task_alloc(48);
  *(_QWORD *)(v0 + 104) = v7;
  v7[2] = v3;
  v7[3] = v5;
  v7[4] = v6;
  v8 = async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1];
  swift_bridgeObjectRetain(v6);
  v9 = (_QWORD *)swift_task_alloc(v8);
  *(_QWORD *)(v0 + 112) = v9;
  *v9 = v0;
  v9[1] = sub_4A0AC;
  return withCheckedContinuation<A>(isolation:function:_:)(v9, 0, 0, 0xD000000000000026, 0x80000000000895B0, sub_4F8EC, v7, (char *)&type metadata for () + 8);
}

uint64_t sub_4A0AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 112));
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_4A114, 0, 0);
}

void sub_4A114()
{
  _QWORD *v0;
  char *v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  NSString v10;

  v1 = (char *)v0[9];
  swift_bridgeObjectRelease(v0[12]);
  v2 = *(NSObject **)&v1[OBJC_IVAR___JSAAccountController_observerQueue];
  v3 = swift_allocObject(&unk_A1308, 24, 7);
  *(_QWORD *)(v3 + 16) = v1;
  v4 = swift_allocObject(&unk_A1330, 32, 7);
  v0[2] = _NSConcreteStackBlock;
  *(_QWORD *)(v4 + 16) = sub_4EEE8;
  *(_QWORD *)(v4 + 24) = v3;
  v0[6] = sub_38144;
  v0[7] = v4;
  v0[3] = 1107296256;
  v0[4] = sub_2AC34;
  v0[5] = &unk_A1348;
  v5 = _Block_copy(v0 + 2);
  v6 = v0[7];
  v7 = v1;
  swift_retain(v4);
  swift_release(v6);
  dispatch_sync(v2, v5);
  _Block_release(v5);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation(v4, "", 100, 499, 28, 1);
  swift_release(v4);
  swift_release(v3);
  if ((v2 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v8 = v0[11];
    v9 = objc_msgSend((id)objc_opt_self(JSABridge), "sharedInstance");
    v10 = String._bridgeToObjectiveC()();
    objc_msgSend(v9, "enqueueValueCall:arguments:file:line:", v8, 0, v10, 384);

    ((void (*)(void))v0[1])();
  }
}

Swift::Void __swiftcall AccountController.viewAppleID(_:_:)(JSValue a1, Swift::OpaquePointer_optional a2)
{
  objc_class *rawValue;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  JSValue *v8;
  objc_class *v9;
  uint64_t v10;
  uint64_t v11;

  rawValue = (objc_class *)a2.value._rawValue;
  v4 = sub_29EF0(&qword_B8B00);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = (JSValue *)swift_allocObject(&unk_A0DB8, 48, 7);
  v8[2].super.isa = 0;
  v8[3].super.isa = 0;
  v8[4].super.isa = rawValue;
  v8[5].super.isa = a1.super.isa;
  swift_bridgeObjectRetain(rawValue);
  v9 = a1.super.isa;
  v10 = sub_2EC38((uint64_t)v6, (uint64_t)&unk_B8B30, (uint64_t)v8);
  swift_release(v10);
}

uint64_t sub_4A4E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_4A4FC, 0, 0);
}

uint64_t sub_4A4FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[2];
  v2 = swift_task_alloc(32);
  v0[4] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[5] = v3;
  *v3 = v0;
  v3[1] = sub_4A594;
  return withCheckedContinuation<A>(isolation:function:_:)(v3, 0, 0, 0xD000000000000011, 0x8000000000089850, sub_4EDA0, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_4A594()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 40));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_4A5F0, 0, 0);
}

uint64_t sub_4A5F0()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  NSString v3;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = objc_msgSend((id)objc_opt_self(JSABridge), "sharedInstance");
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "enqueueValueCall:arguments:file:line:", v1, 0, v3, 412);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_4A690(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  uint64_t v20;

  v4 = sub_29EF0(&qword_B8CC8);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_29EF0(&qword_B8B00);
  __chkstk_darwin(v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  type metadata accessor for MainActor(0);
  v12 = swift_bridgeObjectRetain(a2);
  v13 = static MainActor.shared.getter(v12);
  v14 = *(unsigned __int8 *)(v5 + 80);
  v15 = (v14 + 32) & ~v14;
  v16 = (v6 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = swift_allocObject(&unk_A12B8, v16 + 8, v14 | 7);
  *(_QWORD *)(v17 + 16) = v13;
  *(_QWORD *)(v17 + 24) = &protocol witness table for MainActor;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v17 + v15, v7, v4);
  *(_QWORD *)(v17 + v16) = a2;
  v18 = sub_2EC38((uint64_t)v10, (uint64_t)&unk_B8CF0, v17);
  *(_QWORD *)&result = swift_release(v18).n128_u64[0];
  return result;
}

uint64_t sub_4A808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5[4] = a4;
  v5[5] = a5;
  v6 = sub_29EF0(&qword_B8CC8);
  v5[6] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[7] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[8] = v8;
  v5[9] = swift_task_alloc((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_29EF0((uint64_t *)&unk_B8CA0);
  v5[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v5[11] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[12] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[13] = swift_task_alloc(v12);
  v5[14] = swift_task_alloc(v12);
  v13 = type metadata accessor for MainActor(0);
  v5[15] = static MainActor.shared.getter(v13);
  v14 = dispatch thunk of Actor.unownedExecutor.getter(v13, &protocol witness table for MainActor);
  return swift_task_switch(sub_4A900, v14, v15);
}

uint64_t sub_4A900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  objc_class *v14;
  _BYTE *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  NSURL *v20;
  void *v21;
  void *v22;
  char *v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 120));
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(SKAccountPageAccountURLString);
  v6 = v5;
  URL.init(string:)(v4, v5);
  swift_bridgeObjectRelease(v6);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 104);
    v9 = *(_QWORD *)(v0 + 112);
    v10 = *(_QWORD *)(v0 + 88);
    v11 = *(_QWORD *)(v0 + 96);
    v12 = *(_QWORD *)(v0 + 72);
    v13 = *(_QWORD *)(v0 + 56);
    v34 = *(_QWORD *)(v0 + 64);
    v35 = v9;
    v36 = *(void **)(v0 + 40);
    v37 = *(_QWORD *)(v0 + 80);
    v32 = *(_QWORD *)(v0 + 32);
    v33 = *(_QWORD *)(v0 + 48);
    (*(void (**)(uint64_t))(v11 + 32))(v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v8, v9, v10);
    v14 = (objc_class *)type metadata accessor for AccountPageViewController();
    v15 = objc_allocWithZone(v14);
    v16 = OBJC_IVAR____TtC5JSApp25AccountPageViewController_pageType;
    v15[OBJC_IVAR____TtC5JSApp25AccountPageViewController_pageType] = 0;
    v17 = &v15[OBJC_IVAR____TtC5JSApp25AccountPageViewController_contentID];
    *v17 = 0;
    v17[1] = 0;
    v18 = &v15[OBJC_IVAR____TtC5JSApp25AccountPageViewController_onFinish];
    *v18 = 0;
    v18[1] = 0;
    v15[v16] = 3;
    v19 = v17[1];
    *v17 = 0;
    v17[1] = 0;
    swift_bridgeObjectRelease(v19);
    URL._bridgeToObjectiveC()(v20);
    v22 = v21;
    *(_QWORD *)(v0 + 16) = v15;
    *(_QWORD *)(v0 + 24) = v14;
    v23 = (char *)objc_msgSendSuper2((objc_super *)(v0 + 16), "initWithAccountURL:", v21);

    objc_msgSend(v23, "setDelegate:", v23);
    v24 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v24(v8, v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v32, v33);
    v25 = *(unsigned __int8 *)(v13 + 80);
    v26 = (v25 + 16) & ~v25;
    v27 = swift_allocObject(&unk_A12E0, v26 + v34, v25 | 7);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v27 + v26, v12, v33);
    v28 = &v23[OBJC_IVAR____TtC5JSApp25AccountPageViewController_onFinish];
    v29 = *(_QWORD *)&v23[OBJC_IVAR____TtC5JSApp25AccountPageViewController_onFinish];
    v30 = *(_QWORD *)&v23[OBJC_IVAR____TtC5JSApp25AccountPageViewController_onFinish + 8];
    *(_QWORD *)v28 = sub_4ED0C;
    *((_QWORD *)v28 + 1) = v27;
    sub_2D4DC(v29, v30);
    if (v36)
      v31 = v36;
    else
      v31 = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRetain(v36);
    _sSo16UIViewControllerC5JSAppE7present_7options8animated10completionyAB_SDys11AnyHashableVypGSbyycSgtFZ_0(v23, (uint64_t)v31, 1, 0, 0);

    swift_bridgeObjectRelease(v31);
    v24(v35, v10);
    swift_task_dealloc(v35);
    swift_task_dealloc(v8);
    swift_task_dealloc(v37);
    swift_task_dealloc(v12);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

Swift::Void __swiftcall AccountController.signIn(_:)(JSValue a1)
{
  objc_class *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v7;
  JSValue *v8;
  objc_class *v9;
  objc_class *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = sub_29EF0(&qword_B8B00);
  __chkstk_darwin(v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(objc_allocWithZone((Class)AMSAuthenticateOptions), "init");
  objc_msgSend(v6, "setEnableAccountCreation:", 1);
  v7 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5, 1, 1, v7);
  v8 = (JSValue *)swift_allocObject(&unk_A0DE0, 56, 7);
  v8[2].super.isa = 0;
  v8[3].super.isa = 0;
  v8[4].super.isa = v1;
  v8[5].super.isa = (Class)v6;
  v8[6].super.isa = a1.super.isa;
  v9 = v1;
  v10 = a1.super.isa;
  v11 = sub_2EC38((uint64_t)v5, (uint64_t)&unk_B8B40, (uint64_t)v8);
  swift_release(v11);
}

uint64_t sub_4ADA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v9;

  *(_QWORD *)(v6 + 16) = a6;
  v9 = (_QWORD *)swift_task_alloc(dword_B8ABC);
  *(_QWORD *)(v6 + 24) = v9;
  *v9 = v6;
  v9[1] = sub_4AE0C;
  v9[11] = a5;
  v9[12] = a4;
  return swift_task_switch(sub_465E0, 0, 0);
}

uint64_t sub_4AE0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v7 = *v4;
  v8 = *(_QWORD *)(*v4 + 24);
  *(_QWORD *)(*v4 + 32) = v3;
  swift_task_dealloc(v8);
  if (v3)
  {
    v9 = sub_4AF88;
  }
  else
  {
    *(_QWORD *)(v7 + 40) = a3;
    *(_QWORD *)(v7 + 48) = a2;
    v9 = sub_4AE84;
  }
  return swift_task_switch(v9, 0, 0);
}

uint64_t sub_4AE84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  NSString v8;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = objc_msgSend((id)objc_opt_self(JSABridge), "sharedInstance");
  v5 = sub_29EF0(&qword_B86C0);
  v6 = swift_allocObject(v5, 64, 7);
  *(_OWORD *)(v6 + 16) = xmmword_8DFE0;
  *(_QWORD *)(v6 + 56) = &type metadata for String;
  *(_QWORD *)(v6 + 32) = v1;
  *(_QWORD *)(v6 + 40) = v2;
  isa = Array._bridgeToObjectiveC()().super.isa;
  v8 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "enqueueValueCall:arguments:file:line:", v3, isa, v8, 423);

  swift_bridgeObjectRelease(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_4AF88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  Class isa;
  NSString v7;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = objc_msgSend((id)objc_opt_self(JSABridge), "sharedInstance");
  v4 = sub_29EF0(&qword_B86C0);
  v5 = swift_allocObject(v4, 64, 7);
  *(_OWORD *)(v5 + 16) = xmmword_8DFE0;
  *(_QWORD *)(v5 + 56) = &type metadata for String;
  *(_QWORD *)(v5 + 32) = 0x64656C696146;
  *(_QWORD *)(v5 + 40) = 0xE600000000000000;
  isa = Array._bridgeToObjectiveC()().super.isa;
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "enqueueValueCall:arguments:file:line:", v2, isa, v7, 425);

  swift_bridgeObjectRelease(v5);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall AccountController.signOut(_:)(JSValue a1)
{
  char *v1;
  id v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char *v10;
  double v11;
  id v12;
  uint64_t v13;
  JSValue *v14;
  void *v15;
  uint64_t v16;
  objc_class *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  Class isa;
  id v22;
  void **aBlock;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;

  v3 = objc_msgSend((id)objc_opt_self(BUAccountsProvider), "sharedProvider");
  v4 = objc_msgSend(v3, "activeStoreAccount");

  if (v4)
  {
    v5 = *(NSObject **)&v1[OBJC_IVAR___JSAAccountController_observerQueue];
    v6 = swift_allocObject(&unk_A0E08, 24, 7);
    *(_QWORD *)(v6 + 16) = v1;
    v7 = swift_allocObject(&unk_A0E30, 32, 7);
    *(_QWORD *)(v7 + 16) = sub_4F958;
    *(_QWORD *)(v7 + 24) = v6;
    v27 = sub_38144;
    v28 = v7;
    aBlock = _NSConcreteStackBlock;
    v24 = 1107296256;
    v25 = sub_2AC34;
    v26 = &unk_A0E48;
    v8 = _Block_copy(&aBlock);
    v9 = v28;
    v10 = v1;
    swift_retain(v7);
    swift_release(v9);
    dispatch_sync(v5, v8);
    _Block_release(v8);
    LOBYTE(v5) = swift_isEscapingClosureAtFileLocation(v7, "", 100, 507, 28, 1);
    swift_release(v6);
    *(_QWORD *)&v11 = swift_release(v7).n128_u64[0];
    if ((v5 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v12 = objc_msgSend(v4, "bu_signOut", v11);
      v13 = swift_allocObject(&unk_A0E80, 24, 7);
      swift_unknownObjectWeakInit(v13 + 16, v10);
      v14 = (JSValue *)swift_allocObject(&unk_A0EA8, 32, 7);
      v14[2].super.isa = (Class)v13;
      v14[3].super.isa = a1.super.isa;
      v27 = sub_4DF8C;
      v28 = (uint64_t)v14;
      aBlock = _NSConcreteStackBlock;
      v24 = 1107296256;
      v25 = sub_474F4;
      v26 = &unk_A0EC0;
      v15 = _Block_copy(&aBlock);
      v16 = v28;
      v17 = a1.super.isa;
      objc_msgSend(v12, "addFinishBlock:", v15, swift_release(v16).n128_f64[0]);
      _Block_release(v15);

    }
  }
  else
  {
    v18 = objc_msgSend((id)objc_opt_self(JSABridge), "sharedInstance");
    v19 = sub_29EF0(&qword_B86C0);
    v20 = swift_allocObject(v19, 64, 7);
    *(_OWORD *)(v20 + 16) = xmmword_8DFE0;
    *(_QWORD *)(v20 + 56) = &type metadata for Bool;
    *(_BYTE *)(v20 + 32) = 1;
    isa = Array._bridgeToObjectiveC()().super.isa;
    v22 = String._bridgeToObjectiveC()();
    objc_msgSend(v18, "enqueueValueCall:arguments:file:line:", a1.super.isa, isa, v22, 439);

    swift_bridgeObjectRelease(v20);
  }
}

void sub_4B50C(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t Strong;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  Class isa;
  NSString v21;
  _QWORD aBlock[5];
  uint64_t v23;
  char v24[24];

  v7 = a3 + 16;
  swift_beginAccess(a3 + 16, v24, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v7);
  if (Strong)
  {
    v9 = (void *)Strong;
    v10 = *(NSObject **)(Strong + OBJC_IVAR___JSAAccountController_observerQueue);
    v11 = swift_allocObject(&unk_A1240, 24, 7);
    *(_QWORD *)(v11 + 16) = v9;
    v12 = swift_allocObject(&unk_A1268, 32, 7);
    *(_QWORD *)(v12 + 16) = sub_4ED70;
    *(_QWORD *)(v12 + 24) = v11;
    aBlock[4] = sub_38144;
    v23 = v12;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_2AC34;
    aBlock[3] = &unk_A1280;
    v13 = _Block_copy(aBlock);
    v14 = v23;
    v15 = v9;
    swift_retain(v12);
    swift_release(v14);
    dispatch_sync(v10, v13);
    _Block_release(v13);
    LOBYTE(v10) = swift_isEscapingClosureAtFileLocation(v12, "", 100, 515, 28, 1);
    swift_release(v11);
    swift_release(v12);
    if ((v10 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v16 = objc_msgSend((id)objc_opt_self(JSABridge), "sharedInstance");
      v17 = sub_29EF0(&qword_B86C0);
      v18 = swift_allocObject(v17, 96, 7);
      *(_OWORD *)(v18 + 16) = xmmword_8E270;
      *(_QWORD *)(v18 + 56) = &type metadata for Bool;
      *(_BYTE *)(v18 + 32) = a1 & 1;
      *(_QWORD *)(v18 + 88) = sub_29EF0(&qword_B8CE0);
      *(_QWORD *)(v18 + 64) = a2;
      swift_errorRetain(a2, v19);
      isa = Array._bridgeToObjectiveC()().super.isa;
      v21 = String._bridgeToObjectiveC()();
      objc_msgSend(v16, "enqueueValueCall:arguments:file:line:", a4, isa, v21, 436);

      swift_bridgeObjectRelease(v18);
    }
  }
}

Swift::Void __swiftcall AccountController.reauthenticateSignIn(with:_:)(Swift::OpaquePointer_optional with, JSValue _)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD *rawValue;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  NSString v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  NSString v17;
  uint64_t v18;
  _QWORD *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;

  v3 = v2;
  v4 = *(void **)&with.is_nil;
  rawValue = with.value._rawValue;
  v6 = sub_29EF0(&qword_B8B00);
  __chkstk_darwin(v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend(objc_allocWithZone((Class)AMSAuthenticateOptions), "init");
  if (!rawValue)
  {
    v28 = 0u;
    v29 = 0u;
LABEL_10:
    sub_2E618((uint64_t)&v28, &qword_B8B50);
    goto LABEL_11;
  }
  v24 = 0x695474706D6F7270;
  v25 = 0xEB00000000656C74;
  AnyHashable.init<A>(_:)(&v26, &v24, &type metadata for String, &protocol witness table for String);
  if (rawValue[2] && (v10 = sub_4CFA4((uint64_t)&v26), (v11 & 1) != 0))
  {
    sub_37EF0(rawValue[7] + 32 * v10, (uint64_t)&v28);
  }
  else
  {
    v28 = 0u;
    v29 = 0u;
  }
  sub_4E028((uint64_t)&v26);
  if (!*((_QWORD *)&v29 + 1))
    goto LABEL_10;
  if ((swift_dynamicCast(&v26, &v28, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
  {
    v12 = v27;
    v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v12);
    goto LABEL_12;
  }
LABEL_11:
  v13 = 0;
LABEL_12:
  objc_msgSend(v9, "setPromptTitle:", v13);

  if (!rawValue)
  {
    v28 = 0u;
    v29 = 0u;
LABEL_21:
    sub_2E618((uint64_t)&v28, &qword_B8B50);
    goto LABEL_22;
  }
  v24 = 0xD000000000000011;
  v25 = 0x8000000000089690;
  AnyHashable.init<A>(_:)(&v26, &v24, &type metadata for String, &protocol witness table for String);
  if (rawValue[2] && (v14 = sub_4CFA4((uint64_t)&v26), (v15 & 1) != 0))
  {
    sub_37EF0(rawValue[7] + 32 * v14, (uint64_t)&v28);
  }
  else
  {
    v28 = 0u;
    v29 = 0u;
  }
  sub_4E028((uint64_t)&v26);
  if (!*((_QWORD *)&v29 + 1))
    goto LABEL_21;
  if ((swift_dynamicCast(&v26, &v28, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
LABEL_22:
    v17 = 0;
    goto LABEL_23;
  }
  v16 = v27;
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v16);
LABEL_23:
  objc_msgSend(v9, "setReason:", v17);

  v18 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v8, 1, 1, v18);
  v19 = (_QWORD *)swift_allocObject(&unk_A0EF8, 56, 7);
  v19[2] = 0;
  v19[3] = 0;
  v19[4] = v3;
  v19[5] = v9;
  v19[6] = v4;
  v20 = v3;
  v21 = v4;
  v22 = sub_2EC38((uint64_t)v8, (uint64_t)&unk_B8B60, (uint64_t)v19);
  swift_release(v22);
}

uint64_t sub_4BAA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v9;

  *(_QWORD *)(v6 + 16) = a6;
  v9 = (_QWORD *)swift_task_alloc(dword_B8ABC);
  *(_QWORD *)(v6 + 24) = v9;
  *v9 = v6;
  v9[1] = sub_4BB10;
  v9[11] = a5;
  v9[12] = a4;
  return swift_task_switch(sub_465E0, 0, 0);
}

uint64_t sub_4BB10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v7 = *v4;
  v8 = *(_QWORD *)(*v4 + 24);
  *(_QWORD *)(*v4 + 32) = v3;
  swift_task_dealloc(v8);
  if (v3)
  {
    v9 = sub_4BC8C;
  }
  else
  {
    *(_QWORD *)(v7 + 40) = a3;
    *(_QWORD *)(v7 + 48) = a2;
    v9 = sub_4BB88;
  }
  return swift_task_switch(v9, 0, 0);
}

uint64_t sub_4BB88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  NSString v8;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = objc_msgSend((id)objc_opt_self(JSABridge), "sharedInstance");
  v5 = sub_29EF0(&qword_B86C0);
  v6 = swift_allocObject(v5, 64, 7);
  *(_OWORD *)(v6 + 16) = xmmword_8DFE0;
  *(_QWORD *)(v6 + 56) = &type metadata for String;
  *(_QWORD *)(v6 + 32) = v1;
  *(_QWORD *)(v6 + 40) = v2;
  isa = Array._bridgeToObjectiveC()().super.isa;
  v8 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "enqueueValueCall:arguments:file:line:", v3, isa, v8, 450);

  swift_bridgeObjectRelease(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_4BC8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  Class isa;
  NSString v7;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = objc_msgSend((id)objc_opt_self(JSABridge), "sharedInstance");
  v4 = sub_29EF0(&qword_B86C0);
  v5 = swift_allocObject(v4, 64, 7);
  *(_OWORD *)(v5 + 16) = xmmword_8DFE0;
  *(_QWORD *)(v5 + 56) = &type metadata for String;
  *(_QWORD *)(v5 + 32) = 0x64656C696146;
  *(_QWORD *)(v5 + 40) = 0xE600000000000000;
  isa = Array._bridgeToObjectiveC()().super.isa;
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "enqueueValueCall:arguments:file:line:", v2, isa, v7, 452);

  swift_bridgeObjectRelease(v5);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_4BE34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v10;

  *(_QWORD *)(v7 + 16) = a7;
  v10 = (_QWORD *)swift_task_alloc(dword_B8CC4);
  *(_QWORD *)(v7 + 24) = v10;
  *v10 = v7;
  v10[1] = sub_4BE9C;
  v10[5] = a4;
  v10[6] = a6;
  return swift_task_switch(sub_4D390, 0, 0);
}

uint64_t sub_4BE9C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 24));
  return swift_task_switch(sub_4BEF0, 0, 0);
}

uint64_t sub_4BEF0()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  NSString v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = objc_msgSend((id)objc_opt_self(JSABridge), "sharedInstance");
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "enqueueValueCall:arguments:file:line:", v1, 0, v3, 465);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_4C038()
{
  uint64_t v0;

  return sub_4C088(*(_QWORD *)(v0 + 16), (SEL *)&selRef_accountControllerWillAttemptSignOut_);
}

uint64_t sub_4C058()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_4C068(uint64_t a1)
{
  uint64_t v1;

  sub_46F8C(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

double sub_4C070(uint64_t a1)
{
  uint64_t *v1;

  return sub_47694(a1, v1[2], v1[3], v1[4]);
}

double sub_4C07C(uint64_t a1)
{
  uint64_t *v1;

  return sub_4806C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_4C088(uint64_t a1, SEL *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t i;
  void *v9;
  uint64_t v10;
  _BYTE v11[24];

  v4 = (uint64_t *)(a1 + OBJC_IVAR___JSAAccountController_observers);
  swift_beginAccess(a1 + OBJC_IVAR___JSAAccountController_observers, v11, 0, 0);
  v5 = *v4;
  if (!((unint64_t)v5 >> 62))
  {
    v6 = *(_QWORD *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFF8));
    result = swift_bridgeObjectRetain(v5);
    if (v6)
      goto LABEL_3;
    return swift_bridgeObjectRelease(v5);
  }
  if (v5 < 0)
    v10 = v5;
  else
    v10 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  result = _CocoaArrayWrapper.endIndex.getter(v10);
  v6 = result;
  if (!result)
    return swift_bridgeObjectRelease(v5);
LABEL_3:
  if (v6 >= 1)
  {
    for (i = 0; i != v6; ++i)
    {
      if ((v5 & 0xC000000000000001) != 0)
      {
        v9 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v5);
      }
      else
      {
        v9 = *(void **)(v5 + 8 * i + 32);
        swift_unknownObjectRetain(v9);
      }
      if ((objc_msgSend(v9, "respondsToSelector:", *a2) & 1) != 0)
        objc_msgSend(v9, *a2, a1);
      swift_unknownObjectRelease(v9);
    }
    return swift_bridgeObjectRelease(v5);
  }
  __break(1u);
  return result;
}

double sub_4C1B4(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  double result;
  uint64_t v28;
  uint64_t v29;

  v28 = a5;
  v29 = a4;
  v9 = sub_29EF0(&qword_B8D88);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_29EF0(&qword_B8B00);
  __chkstk_darwin(v13);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  type metadata accessor for MainActor(0);
  swift_bridgeObjectRetain(a5);
  v17 = a2;
  v18 = a3;
  v19 = static MainActor.shared.getter();
  v20 = *(unsigned __int8 *)(v10 + 80);
  v21 = (v20 + 48) & ~v20;
  v22 = (v11 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = (char *)swift_allocObject(&unk_A1698, v22 + 16, v20 | 7);
  *((_QWORD *)v23 + 2) = v19;
  *((_QWORD *)v23 + 3) = &protocol witness table for MainActor;
  *((_QWORD *)v23 + 4) = v17;
  *((_QWORD *)v23 + 5) = v18;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v23[v21], v12, v9);
  v24 = &v23[v22];
  v25 = v28;
  *(_QWORD *)v24 = v29;
  *((_QWORD *)v24 + 1) = v25;
  v26 = sub_2EC38((uint64_t)v15, (uint64_t)&unk_B8D98, (uint64_t)v23);
  *(_QWORD *)&result = swift_release(v26).n128_u64[0];
  return result;
}

uint64_t sub_4C360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8[11] = a7;
  v8[12] = a8;
  v8[9] = a5;
  v8[10] = a6;
  v8[8] = a4;
  v9 = sub_29EF0(&qword_B8D88);
  v8[13] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[14] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v8[15] = v11;
  v8[16] = swift_task_alloc((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for MainActor(0);
  v8[17] = static MainActor.shared.getter(v12);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(v12, &protocol witness table for MainActor);
  return swift_task_switch(sub_4C404, v13, v14);
}

uint64_t sub_4C404()
{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  swift_release(v0[17]);
  v1 = objc_msgSend((id)objc_opt_self(UIViewController), "jsa_topMostViewControllerForWindow:", 0);
  v2 = objc_opt_self(UINavigationController);
  v3 = (void *)swift_dynamicCastObjCClass(v1, v2);
  if (v3)
  {
    v4 = objc_msgSend(v3, "topViewController");
    if (v4)
    {
      v5 = v4;

      v1 = v5;
    }
  }
  v24 = v1;
  v6 = v0[16];
  v7 = v0[13];
  v8 = v0[14];
  v28 = v0[12];
  v9 = v0[10];
  v26 = v0[15];
  v27 = v0[11];
  v10 = v0[9];
  v11 = objc_msgSend(objc_allocWithZone((Class)AMSUIAuthenticateTask), "initWithRequest:presentingViewController:", v0[8], v1);
  objc_msgSend(v11, "setDelegate:", v10);
  v12 = objc_msgSend((id)objc_opt_self(BUBag), "defaultBag");
  objc_msgSend(v11, "setBag:", v12);

  v25 = objc_msgSend(v11, "performAuthentication");
  v13 = swift_allocObject(&unk_A0E80, 24, 7);
  swift_unknownObjectWeakInit(v13 + 16, v10);
  v14 = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, v9, v7);
  v15 = *(unsigned __int8 *)(v8 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = (v26 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v17 + 23) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject(&unk_A16C0, v18 + 8, v15 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v19 + v16, v6, v14);
  v20 = (_QWORD *)(v19 + v17);
  *v20 = v27;
  v20[1] = v28;
  *(_QWORD *)(v19 + v18) = v13;
  v0[6] = sub_4F848;
  v0[7] = v19;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_6EAE8;
  v0[5] = &unk_A16D8;
  v21 = _Block_copy(v0 + 2);
  v22 = v0[7];
  swift_bridgeObjectRetain(v28);
  objc_msgSend(v25, "addFinishBlock:", v21, swift_release(v22).n128_f64[0]);

  _Block_release(v21);
  swift_task_dealloc(v6);
  return ((uint64_t (*)(void))v0[1])();
}

void sub_4C694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t Strong;
  __n128 v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD aBlock[5];
  uint64_t v28;
  char v29[24];

  v11 = a6 + 16;
  swift_beginAccess(a6 + 16, v29, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v11);
  if (!Strong)
    goto LABEL_3;
  v14 = (void *)Strong;
  v15 = *(NSObject **)(Strong + OBJC_IVAR___JSAAccountController_observerQueue);
  v16 = swift_allocObject(&unk_A1710, 24, 7);
  *(_QWORD *)(v16 + 16) = v14;
  v26 = a2;
  v17 = a1;
  v18 = a3;
  v19 = a4;
  v20 = a5;
  v21 = swift_allocObject(&unk_A1738, 32, 7);
  *(_QWORD *)(v21 + 16) = sub_4F8BC;
  *(_QWORD *)(v21 + 24) = v16;
  aBlock[4] = sub_38144;
  v28 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2AC34;
  aBlock[3] = &unk_A1750;
  v22 = _Block_copy(aBlock);
  v23 = v28;
  v24 = v14;
  swift_retain(v21);
  swift_release(v23);
  dispatch_sync(v15, v22);
  _Block_release(v22);
  LOBYTE(v23) = swift_isEscapingClosureAtFileLocation(v21, "", 100, 483, 28, 1);
  v25 = v21;
  a5 = v20;
  a4 = v19;
  a3 = v18;
  a1 = v17;
  a2 = v26;
  swift_release(v25);
  swift_release(v16);

  if ((v23 & 1) != 0)
    __break(1u);
  else
LABEL_3:
    sub_4C850(a2, v13, a3, a1, a4, a5);
}

uint64_t sub_4C850(uint64_t a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[3];

  if (a1)
  {
    v21[0] = a1;
    swift_errorRetain(a1, a2);
    v6 = sub_29EF0(&qword_B8D88);
    return CheckedContinuation.resume(throwing:)(v21, v6);
  }
  if (a4)
  {
    v11 = objc_msgSend((id)objc_opt_self(BUAccountsProvider), "sharedProvider");
    v12 = objc_msgSend(v11, "currentStorefront");

    if (v12)
    {
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v15 = v14;

      if (a6)
      {
        if (v13 == a5 && v15 == a6)
        {
          swift_bridgeObjectRelease(v15);
LABEL_18:
          v18 = 0xE700000000000000;
          v19 = 0x73736563637553;
          goto LABEL_19;
        }
        v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v15, a5, a6, 0);
        swift_bridgeObjectRelease(v15);
        if ((v17 & 1) != 0)
          goto LABEL_18;
      }
      else
      {
        swift_bridgeObjectRelease(v15);
      }
    }
    else if (!a6)
    {
      goto LABEL_18;
    }
    v18 = 0x8000000000089960;
    v19 = 0xD000000000000010;
  }
  else
  {
    v18 = 0xE600000000000000;
    v19 = 0x64656C696146;
  }
LABEL_19:
  LOBYTE(v21[0]) = a4 != 0;
  v21[1] = v19;
  v21[2] = v18;
  v20 = sub_29EF0(&qword_B8D88);
  return CheckedContinuation.resume(returning:)(v21, v20);
}

uint64_t AccountController.authenticateTask(_:handle:completion:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_4E31C(a2, a3, a4);
}

void sub_4C9EC(void *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[5];
  uint64_t v14;

  v6 = (void *)objc_opt_self(UIViewController);
  v7 = a1;
  v8 = objc_msgSend(v6, "jsa_topMostViewControllerForWindow:", 0);
  v9 = objc_msgSend(objc_allocWithZone((Class)AMSUIAlertDialogTask), "initWithRequest:presentingViewController:", v7, v8);

  v10 = objc_msgSend(v9, "present");
  v13[4] = a2;
  v14 = a3;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_6EAE8;
  v13[3] = &unk_A1190;
  v11 = _Block_copy(v13);
  v12 = v14;
  swift_retain(a3);
  swift_release(v12);
  objc_msgSend(v10, "addFinishBlock:", v11);
  _Block_release(v11);

}

uint64_t sub_4CBB4(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_4CC18;
  return v6(a1);
}

uint64_t sub_4CC18()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_4CC64(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_38150;
  return v6();
}

uint64_t sub_4CCB8(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc(a4[1]);
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_38150;
  return v7();
}

uint64_t sub_4CD0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_2E618(a1, &qword_B8B00);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_A1038, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_B8C40, v16);
}

uint64_t sub_4CE58(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_4F8F4;
  return v6(a1);
}

unint64_t sub_4CEBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6);
  return sub_4D060(a1, v7);
}

unint64_t sub_4CF3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_4D1D4(a1, a2, v5);
}

unint64_t sub_4CFA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_4D2B4(a1, v4);
}

unint64_t sub_4CFD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6);
  return sub_4D060(a1, v7);
}

unint64_t sub_4D060(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_4D1D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_4D2B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_4ED10(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_4E028((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_4D378(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return swift_task_switch(sub_4D390, 0, 0);
}

uint64_t sub_4D390()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = qword_B8098;
  swift_bridgeObjectRetain(v0[6]);
  if (v1 != -1)
    swift_once(&qword_B8098, sub_3B9C0);
  v2 = v0[5];
  v3 = swift_task_alloc(32);
  v0[7] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[8] = v4;
  *v4 = v0;
  v4[1] = sub_4D468;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0x726F662865707974, 0xEA0000000000293ALL, sub_3D18C, v3, &type metadata for URLParser.ParserURLType);
}

uint64_t sub_4D468()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_4D4C4, 0, 0);
}

uint64_t sub_4D4C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v16;

  v1 = v0[2];
  if (qword_B8148 != -1)
    swift_once(&qword_B8148, sub_56C98);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_2D6E0(v2, (uint64_t)qword_B9260);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v16 = v7;
    *(_DWORD *)v6 = 136315138;
    v0[3] = v1;
    v8 = String.init<A>(reflecting:)(v0 + 3, &type metadata for URLParser.ParserURLType);
    v10 = v9;
    v0[4] = sub_3A180(v8, v9, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v10);
    _os_log_impl(&dword_0, v4, v5, "Handling commerce URL: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }

  v12 = v0[5];
  v11 = v0[6];
  v13 = (_QWORD *)swift_task_alloc(48);
  v0[9] = v13;
  v13[2] = v1;
  v13[3] = v12;
  v13[4] = v11;
  v14 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[10] = v14;
  *v14 = v0;
  v14[1] = sub_4D6C8;
  return withCheckedContinuation<A>(isolation:function:_:)(v14, 0, 0, 0xD000000000000014, 0x8000000000089830, sub_4EB48, v13, (char *)&type metadata for () + 8);
}

uint64_t sub_4D6C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_4768C, 0, 0);
}

uint64_t sub_4D730(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((unint64_t)a1 >> 62)
    goto LABEL_11;
  v4 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  v5 = 0;
  if (v4)
  {
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
      }
      else
      {
        v6 = *(_QWORD *)(a1 + 8 * v5 + 32);
        swift_unknownObjectRetain(v6);
      }
      swift_unknownObjectRelease(v6);
      if (v6 == a2)
        break;
      v7 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
        __break(1u);
LABEL_11:
        if (a1 < 0)
          v8 = a1;
        else
          v8 = a1 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a1);
        v4 = _CocoaArrayWrapper.endIndex.getter(v8);
        swift_bridgeObjectRelease(a1);
        v5 = 0;
        if (!v4)
          return v5;
      }
      else
      {
        ++v5;
        if (v7 == v4)
          return 0;
      }
    }
  }
  return v5;
}

uint64_t sub_4D820(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t i;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = *a1;
  v6 = swift_bridgeObjectRetain(*a1);
  v7 = sub_4D730(v6, a2);
  v9 = v8;
  swift_bridgeObjectRelease(v5);
  if (v2)
    return v7;
  if ((v9 & 1) == 0)
  {
    v10 = v7 + 1;
    if (__OFADD__(v7, 1))
      goto LABEL_57;
    v9 = *a1;
    if ((unint64_t)*a1 >> 62)
    {
LABEL_58:
      if ((v9 & 0x8000000000000000) != 0)
        v29 = v9;
      else
        v29 = v9 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v9);
      v30 = _CocoaArrayWrapper.endIndex.getter(v29);
      swift_bridgeObjectRelease(v9);
      if (v10 != v30)
        goto LABEL_6;
    }
    else if (v10 != *(_QWORD *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFF8)))
    {
LABEL_6:
      for (i = v7 + 5; ; ++i)
      {
        v9 = i - 4;
        v12 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v12);
        }
        else
        {
          if ((v9 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
            goto LABEL_58;
          }
          if (v9 >= *(_QWORD *)((char *)&dword_10 + (v12 & 0xFFFFFFFFFFFFF8)))
            goto LABEL_48;
          v13 = *(_QWORD *)(v12 + 8 * i);
          swift_unknownObjectRetain(v13);
        }
        swift_unknownObjectRelease(v13);
        if (v13 != a2)
          break;
LABEL_32:
        v10 = i - 3;
        if (__OFADD__(v9, 1))
          goto LABEL_49;
        v24 = *a1;
        if ((unint64_t)*a1 >> 62)
        {
          if (v24 < 0)
            v26 = *a1;
          else
            v26 = v24 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(*a1);
          v25 = _CocoaArrayWrapper.endIndex.getter(v26);
          swift_bridgeObjectRelease(v24);
        }
        else
        {
          v25 = *(_QWORD *)((char *)&dword_10 + (v24 & 0xFFFFFFFFFFFFF8));
        }
        if (v10 == v25)
          return v7;
      }
      if (v9 == v7)
      {
LABEL_31:
        if (__OFADD__(v7++, 1))
          goto LABEL_50;
        goto LABEL_32;
      }
      v10 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, *a1);
        v10 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
        {
LABEL_17:
          if ((v9 & 0x8000000000000000) != 0)
            goto LABEL_53;
          if (v9 >= *(_QWORD *)((char *)&dword_10 + (v10 & 0xFFFFFFFFFFFFF8)))
            goto LABEL_54;
          v15 = *(_QWORD *)(v10 + 8 * i);
          swift_unknownObjectRetain(v15);
          goto LABEL_20;
        }
      }
      else
      {
        if ((v7 & 0x8000000000000000) != 0)
          goto LABEL_51;
        if (v7 >= *(_QWORD *)((char *)&dword_10 + (v10 & 0xFFFFFFFFFFFFF8)))
          goto LABEL_52;
        v14 = *(_QWORD *)(v10 + 8 * v7 + 32);
        swift_unknownObjectRetain(v14);
        if ((v10 & 0xC000000000000001) == 0)
          goto LABEL_17;
      }
      v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v10);
      v10 = *a1;
LABEL_20:
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v10);
      *a1 = v10;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v10 < 0 || (v10 & 0x4000000000000000) != 0)
      {
        v10 = sub_5FF8C(v10);
        *a1 = v10;
      }
      v17 = *(_QWORD *)((char *)&stru_20.cmd + 8 * v7 + (v10 & 0xFFFFFFFFFFFFFF8));
      *(_QWORD *)((char *)&stru_20.cmd + 8 * v7 + (v10 & 0xFFFFFFFFFFFFFF8)) = v15;
      v18 = swift_unknownObjectRelease(v17);
      specialized Array._endMutation()(v18);
      v10 = *a1;
      v19 = swift_isUniquelyReferenced_nonNull_bridgeObject(*a1);
      *a1 = v10;
      if (!v19 || v10 < 0 || (v10 & 0x4000000000000000) != 0)
      {
        v10 = sub_5FF8C(v10);
        *a1 = v10;
      }
      if ((v9 & 0x8000000000000000) != 0)
        goto LABEL_55;
      v20 = v10 & 0xFFFFFFFFFFFFFF8;
      if (v9 >= *(_QWORD *)((char *)&dword_10 + (v10 & 0xFFFFFFFFFFFFFF8)))
        goto LABEL_56;
      v21 = *(_QWORD *)(v20 + 8 * i);
      *(_QWORD *)(v20 + 8 * i) = v14;
      v22 = swift_unknownObjectRelease(v21);
      specialized Array._endMutation()(v22);
      goto LABEL_31;
    }
    return v7;
  }
  v27 = *a1;
  if (!((unint64_t)v27 >> 62))
    return *(_QWORD *)((char *)&dword_10 + (v27 & 0xFFFFFFFFFFFFF8));
  if (v27 < 0)
    v31 = v27;
  else
    v31 = v27 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v27);
  v32 = _CocoaArrayWrapper.endIndex.getter(v31);
  swift_bridgeObjectRelease(v27);
  return v32;
}

double sub_4DB3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ObjectType;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  double result;
  _QWORD v27[4];

  v8 = sub_29EF0(&qword_B8B00);
  __chkstk_darwin(v8);
  v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TaskPriority(0);
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
  v13 = swift_allocObject(a1, 32, 7);
  *(_QWORD *)(v13 + 16) = 0;
  v14 = (_QWORD *)(v13 + 16);
  *(_QWORD *)(v13 + 24) = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_2E618((uint64_t)v10, &qword_B8B00);
    v15 = 0;
    v16 = 0;
    v17 = 7168;
  }
  else
  {
    v18 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
    v17 = v18 | 0x1C00;
    v19 = *v14;
    if (*v14)
    {
      v20 = *(_QWORD *)(v13 + 24);
      ObjectType = swift_getObjectType(*v14);
      swift_unknownObjectRetain(v19);
      v15 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v20);
      v16 = v22;
      swift_unknownObjectRelease(v19);
    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
  }
  v23 = swift_allocObject(a2, 32, 7);
  *(_QWORD *)(v23 + 16) = a3;
  *(_QWORD *)(v23 + 24) = v13;
  if (v16 | v15)
  {
    v27[0] = 0;
    v27[1] = 0;
    v24 = v27;
    v27[2] = v15;
    v27[3] = v16;
  }
  else
  {
    v24 = 0;
  }
  v25 = swift_task_create(v17, v24, (char *)&type metadata for () + 8, a4, v23);
  *(_QWORD *)&result = swift_release(v25).n128_u64[0];
  return result;
}

uint64_t sub_4DD04()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));

  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_4DD48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;

  v6 = *(_OWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = swift_task_alloc(dword_B8B0C);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_38150;
  *(_QWORD *)(v4 + 32) = v2;
  *(_QWORD *)(v4 + 40) = v3;
  *(_OWORD *)(v4 + 16) = v6;
  return swift_task_switch(sub_49C30, 0, 0);
}

uint64_t sub_4DDC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = swift_task_alloc(dword_B8B1C);
  v5 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_38150;
  *(_QWORD *)(v4 + 80) = v2;
  *(_QWORD *)(v4 + 88) = v3;
  *(_OWORD *)(v4 + 64) = v5;
  return swift_task_switch(sub_49FA8, 0, 0);
}

uint64_t sub_4DE38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = (_QWORD *)swift_task_alloc(dword_B8B2C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_38150;
  v4[2] = v2;
  v4[3] = v3;
  return swift_task_switch(sub_4A4FC, 0, 0);
}

uint64_t sub_4DE9C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = v0[4];
  v3 = v0[5];
  v4 = v0[6];
  v5 = (_QWORD *)swift_task_alloc(dword_B8B3C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_38150;
  v5[2] = v4;
  v6 = (_QWORD *)swift_task_alloc(dword_B8ABC);
  v5[3] = v6;
  *v6 = v5;
  v6[1] = sub_4AE0C;
  v6[11] = v3;
  v6[12] = v2;
  return swift_task_switch(sub_465E0, 0, 0);
}

uint64_t sub_4DF2C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_4DF3C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_4DF60()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_4DF8C(char a1, uint64_t a2)
{
  uint64_t v2;

  sub_4B50C(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_4DF98()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = v0[4];
  v3 = v0[5];
  v4 = v0[6];
  v5 = (_QWORD *)swift_task_alloc(dword_B8B5C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_38150;
  v5[2] = v4;
  v6 = (_QWORD *)swift_task_alloc(dword_B8ABC);
  v5[3] = v6;
  *v6 = v5;
  v6[1] = sub_4BB10;
  v6[11] = v3;
  v6[12] = v2;
  return swift_task_switch(sub_465E0, 0, 0);
}

uint64_t sub_4E028(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

uint64_t _s5JSApp17AccountControllerC04showb4ViewC04with__ySS_So7JSValueCSDys11AnyHashableVypGSgtF_0(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  __n128 v38;
  char *v39;
  int v40;
  uint64_t (*v41)(char *, char *, uint64_t);
  void *v42;
  _QWORD v43[4];

  v42 = a3;
  v7 = sub_29EF0(&qword_B8B00);
  __chkstk_darwin(v7);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_29EF0((uint64_t *)&unk_B8CA0);
  __chkstk_darwin(v10);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = __chkstk_darwin(v13);
  v17 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v16);
  v20 = (char *)&v39 - v19;
  v21 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v21 = a1 & 0xFFFFFFFFFFFFLL;
  if (v21)
  {
    URL.init(string:)(a1, a2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
    {
      return sub_2E618((uint64_t)v12, (uint64_t *)&unk_B8CA0);
    }
    else
    {
      v41 = *(uint64_t (**)(char *, char *, uint64_t))(v14 + 32);
      v22 = v41(v20, v12, v13);
      v23 = URL.path.getter(v22);
      v25 = v24;
      v43[2] = v23;
      v43[3] = v24;
      v43[0] = 0xD000000000000048;
      v43[1] = 0x80000000000897E0;
      v26 = sub_3A100();
      v27 = StringProtocol.contains<A>(_:)(v43, &type metadata for String, &type metadata for String, v26, v26);
      swift_bridgeObjectRelease(v25);
      if ((v27 & 1) != 0)
        v28 = 4;
      else
        v28 = 0;
      v40 = v28;
      v29 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v9, 1, 1, v29);
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v20, v13);
      v30 = *(unsigned __int8 *)(v14 + 80);
      v31 = (v30 + 32) & ~v30;
      v32 = v31 + v15;
      v39 = v9;
      v33 = ((v32 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
      v34 = swift_allocObject(&unk_A11C8, v33 + 8, v30 | 7);
      *(_QWORD *)(v34 + 16) = 0;
      *(_QWORD *)(v34 + 24) = 0;
      v41((char *)(v34 + v31), v17, v13);
      *(_BYTE *)(v34 + v32) = v40;
      *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFFF8) + v34 + 8) = a4;
      v35 = v42;
      *(_QWORD *)(v34 + v33) = v42;
      swift_bridgeObjectRetain(a4);
      v36 = v35;
      v37 = sub_2EC38((uint64_t)v39, (uint64_t)&unk_B8CB8, v34);
      v38 = swift_release(v37);
      return (*(uint64_t (**)(char *, uint64_t, __n128))(v14 + 8))(v20, v13, v38);
    }
  }
  return result;
}

uint64_t sub_4E31C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[5];
  _QWORD *v25;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v23 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_37F2C();
  v12 = (void *)static OS_dispatch_queue.main.getter();
  v13 = (_QWORD *)swift_allocObject(&unk_A1150, 40, 7);
  v13[2] = a1;
  v13[3] = a2;
  v13[4] = a3;
  aBlock[4] = sub_4E9D8;
  v25 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2A1A8;
  aBlock[3] = &unk_A1168;
  v14 = _Block_copy(aBlock);
  v15 = v25;
  v16 = a1;
  swift_retain(a3);
  swift_release(v15);
  static DispatchQoS.unspecified.getter(v17);
  aBlock[0] = &_swiftEmptyArrayStorage;
  v18 = sub_2A1FC((unint64_t *)&qword_B8210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_29EF0((uint64_t *)&unk_B8C90);
  v20 = sub_2A23C((unint64_t *)&qword_B8218, (uint64_t *)&unk_B8C90);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v19, v20, v6, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v22);
}

uint64_t type metadata accessor for AccountController()
{
  return objc_opt_self(JSAAccountController);
}

uint64_t sub_4E54C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_4E570(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_6EAEC(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_4E57C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_4E5BC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_4E5F4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_4E63C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v5 = (void *)v0[4];
  v4 = (void *)v0[5];
  v6 = (_QWORD *)swift_task_alloc(dword_B8C0C);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_38150;
  return ((uint64_t (*)(uint64_t, uint64_t, void *, void *))((char *)&dword_B8C08 + dword_B8C08))(v2, v3, v5, v4);
}

uint64_t sub_4E6B8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_B8C1C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_38150;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_B8C18 + dword_B8C18))(v2, v3, v4);
}

uint64_t sub_4E734(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_B8C2C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_38150;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_B8C28 + dword_B8C28))(a1, v4, v5, v6);
}

uint64_t sub_4E7B8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_4E7DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_B8C3C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_38150;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_B8C38 + dword_B8C38))(a1, v4);
}

uint64_t sub_4E850()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_4E88C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v5 = (void *)v0[4];
  v4 = (void *)v0[5];
  v6 = (_QWORD *)swift_task_alloc(dword_B8C4C);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_38150;
  return ((uint64_t (*)(uint64_t, uint64_t, void *, void *))((char *)&dword_B8C48 + dword_B8C48))(v2, v3, v5, v4);
}

uint64_t sub_4E90C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_4E938()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = *(_BYTE *)(v0 + 16);
  v4 = *(void **)(v0 + 24);
  v3 = *(void **)(v0 + 32);
  v5 = (_QWORD *)swift_task_alloc(dword_B8C6C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_38150;
  return ((uint64_t (*)(char, void *, void *))((char *)&dword_B8C68 + dword_B8C68))(v2, v4, v3);
}

uint64_t sub_4E9AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_4E9D8()
{
  uint64_t v0;

  sub_4C9EC(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_4E9E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + v0;
  v8 = ((v5 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 8));

  return swift_deallocObject(v0, v8 + 8, v6);
}

uint64_t sub_4EA84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + *(_QWORD *)(v2 + 64)) & 0xFFFFFFFFFFFFFFF8;
  v5 = v0 + v3;
  v6 = *(_QWORD *)(v4 + v0 + 8);
  v7 = *(_QWORD *)(v0 + ((v4 + 23) & 0xFFFFFFFFFFFFF8));
  v8 = (_QWORD *)swift_task_alloc(dword_B8CB4);
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = sub_38150;
  v8[2] = v7;
  v9 = (_QWORD *)swift_task_alloc(dword_B8CC4);
  v8[3] = v9;
  *v9 = v8;
  v9[1] = sub_4BE9C;
  v9[5] = v5;
  v9[6] = v6;
  return swift_task_switch(sub_4D390, 0, 0);
}

double sub_4EB48(uint64_t a1)
{
  uint64_t *v1;

  return sub_45854(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_4EB54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = sub_29EF0(&qword_B8CC8);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8) & ~v8;
  v10 = v3 | v8 | 7;
  v11 = (*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v11));
  return swift_deallocObject(v0, v11 + 8, v10);
}

uint64_t sub_4EC28(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(sub_29EF0(&qword_B8CC8) - 8);
  v8 = (v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = v1[2];
  v10 = v1[3];
  v11 = v1[4];
  v12 = (uint64_t)v1 + v5;
  v13 = (uint64_t)v1 + v8;
  v14 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFF8));
  v15 = (_QWORD *)swift_task_alloc(dword_B8CD4);
  *(_QWORD *)(v2 + 16) = v15;
  *v15 = v2;
  v15[1] = sub_38150;
  return sub_45A5C(a1, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_4ED10(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_4ED4C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_4ED70()
{
  uint64_t v0;

  return sub_4C088(*(_QWORD *)(v0 + 16), (SEL *)&selRef_accountControllerDidAttemptSignOut_);
}

uint64_t sub_4ED90()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

double sub_4EDA0(uint64_t a1)
{
  uint64_t v1;

  return sub_4A690(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_4EDA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_29EF0(&qword_B8CC8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_4EE3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(sub_29EF0(&qword_B8CC8) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc(dword_B8CEC);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_38150;
  return sub_4A808(a1, v6, v7, v8, v9);
}

uint64_t sub_4EEE8()
{
  uint64_t v0;

  return sub_4C088(*(_QWORD *)(v0 + 16), (SEL *)&selRef_accountControllerDidAttemptToRedeemCode_);
}

uint64_t sub_4EF08()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_4EF18()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_4EF3C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_B8CFC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_38150;
  return sub_49290();
}

uint64_t sub_4EFA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_B8D0C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_38150;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_B8D08 + dword_B8D08))(a1, v4);
}

uint64_t sub_4F014(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc(dword_B8D1C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_38150;
  return sub_4517C(a1, v5, v6, v7);
}

uint64_t sub_4F098()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_B8D3C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_38150;
  return sub_48C38();
}

uint64_t sub_4F0FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_B8D0C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_2E488;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_B8D08 + dword_B8D08))(a1, v4);
}

uint64_t sub_4F170()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_4F1E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc(dword_B8D1C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_2E488;
  return sub_4517C(a1, v5, v6, v7);
}

uint64_t sub_4F26C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(sub_29EF0(&qword_B8CC8) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = (uint64_t)v1 + v5;
  v11 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v12 = (_QWORD *)swift_task_alloc(dword_B8D5C);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_38150;
  return sub_48200(a1, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_4F330()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_29EF0(&qword_B8CC8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_4F3CC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(sub_29EF0(&qword_B8CC8) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = (uint64_t)v1 + v5;
  v11 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v12 = (_QWORD *)swift_task_alloc(dword_B8D6C);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_38150;
  return sub_47828(a1, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_4F48C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_29EF0(&qword_B8CC8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_4F4F0()
{
  uint64_t v0;

  v0 = sub_29EF0(&qword_B8CC8);
  return CheckedContinuation.resume(returning:)(v0, v0);
}

uint64_t sub_4F530()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  v1 = sub_29EF0(&qword_B8D78);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v0 + v4, v1, v7);
  return swift_deallocObject(v0, v5, v6);
}

void sub_4F5A8(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(sub_29EF0(&qword_B8D78) - 8) + 80);
  sub_47108(a1, a2, *(_QWORD *)(v2 + 16), v2 + ((v5 + 24) & ~v5));
}

uint64_t sub_4F5FC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_4F60C()
{
  uint64_t v0;

  return sub_4C088(*(_QWORD *)(v0 + 16), (SEL *)&selRef_accountControllerWillAttemptSignIn_);
}

uint64_t sub_4F62C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

double sub_4F63C(uint64_t a1)
{
  uint64_t v1;

  return sub_4C1B4(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_4F648()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_29EF0(&qword_B8D88);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_4F6F0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(sub_29EF0(&qword_B8D88) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = (uint64_t)v1 + v5;
  v11 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v12 = *v11;
  v13 = v11[1];
  v14 = (_QWORD *)swift_task_alloc(dword_B8D94);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_38150;
  return sub_4C360(a1, v6, v7, v8, v9, v10, v12, v13);
}

uint64_t sub_4F7B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = sub_29EF0(&qword_B8D88);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 8));
  swift_release(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v5);
}

void sub_4F848(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(sub_29EF0(&qword_B8D88) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_4C694(a1, a2, v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + v7 + 8), *(_QWORD *)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_4F8BC()
{
  uint64_t v0;

  return sub_4C088(*(_QWORD *)(v0 + 16), (SEL *)&selRef_accountControllerDidAttemptSignIn_);
}

uint64_t sub_4F8DC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_4F990()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v0 = sub_29EF0(&qword_B8EA0);
  v1 = swift_allocObject(v0, 80, 7);
  *(_OWORD *)(v1 + 16) = xmmword_8E2D0;
  v2 = type metadata accessor for BooksAppleAccountFeatureFlag(0);
  v3 = sub_2A1FC(&qword_B8EA8, (uint64_t (*)(uint64_t))&type metadata accessor for BooksAppleAccountFeatureFlag, (uint64_t)&protocol conformance descriptor for BooksAppleAccountFeatureFlag);
  *(_QWORD *)(v1 + 32) = v2;
  *(_QWORD *)(v1 + 40) = v3;
  v4 = type metadata accessor for BooksFeatureFlag(0);
  v5 = sub_2A1FC(&qword_B8EB0, (uint64_t (*)(uint64_t))&type metadata accessor for BooksFeatureFlag, (uint64_t)&protocol conformance descriptor for BooksFeatureFlag);
  *(_QWORD *)(v1 + 48) = v4;
  *(_QWORD *)(v1 + 56) = v5;
  v6 = type metadata accessor for BooksUIKitFeatureFlag(0);
  result = sub_2A1FC(&qword_B8EB8, (uint64_t (*)(uint64_t))&type metadata accessor for BooksUIKitFeatureFlag, (uint64_t)&protocol conformance descriptor for BooksUIKitFeatureFlag);
  *(_QWORD *)(v1 + 64) = v6;
  *(_QWORD *)(v1 + 72) = result;
  off_B8E60 = (int *)v1;
  return result;
}

uint64_t sub_4FA5C()
{
  int *v0;
  int64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t result;
  __int128 v15;
  int *v16;

  if (qword_B8108 != -1)
    swift_once(&qword_B8108, sub_4F990);
  v0 = off_B8E60;
  v1 = *(_QWORD *)((char *)&dword_10 + (_QWORD)off_B8E60);
  v2 = (int *)&_swiftEmptyArrayStorage;
  if (v1)
  {
    v16 = (int *)&_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(off_B8E60);
    sub_3AC6C(0, v1, 0);
    v3 = 0;
    v2 = (int *)&_swiftEmptyArrayStorage;
    do
    {
      v15 = *(_OWORD *)&v0[4 * v3 + 8];
      v4 = static DynamicFeatureFlagsKey.domain.getter();
      v5 = StaticString.description.getter(v4);
      v7 = v6;
      v16 = v2;
      v9 = *((_QWORD *)v2 + 2);
      v8 = *((_QWORD *)v2 + 3);
      if (v9 >= v8 >> 1)
      {
        sub_3AC6C(v8 > 1, v9 + 1, 1);
        v2 = v16;
      }
      ++v3;
      *((_QWORD *)v2 + 2) = v9 + 1;
      v10 = &v2[8 * v9];
      *((_QWORD *)v10 + 4) = v5;
      *((_QWORD *)v10 + 5) = v7;
      *((_OWORD *)v10 + 3) = v15;
    }
    while (v1 != v3);
    swift_bridgeObjectRelease(v0);
  }
  v11 = *((_QWORD *)v2 + 2);
  if (v11)
  {
    sub_29EF0(&qword_B8E98);
    v12 = (int *)static _DictionaryStorage.allocate(capacity:)(v11);
  }
  else
  {
    v12 = (int *)&_swiftEmptyDictionarySingleton;
  }
  v16 = v12;
  v13 = swift_bridgeObjectRetain(v2);
  sub_4FCD0(v13, 1, &v16);
  result = swift_bridgeObjectRelease(v2);
  off_B8E68 = v16;
  return result;
}

uint64_t type metadata accessor for JSAOSFeatureFlags()
{
  return objc_opt_self(_TtC5JSApp17JSAOSFeatureFlags);
}

uint64_t sub_4FCD0(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t result;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *i;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  char v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  Swift::String v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return swift_bridgeObjectRelease(a1);
  v8 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v44 = *(_OWORD *)(a1 + 48);
  swift_bridgeObjectRetain(a1);
  v48 = v8;
  v49 = v7;
  v9 = (_QWORD *)*a3;
  swift_bridgeObjectRetain(v7);
  v11 = sub_4CF3C(v8, v7);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    goto LABEL_23;
  v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_64C5C();
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v22 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v23 = (uint64_t *)(v22[6] + 16 * v11);
    *v23 = v8;
    v23[1] = v7;
    *(_OWORD *)(v22[7] + 16 * v11) = v44;
    v24 = v22[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v22[2] = v26;
    v27 = v4 - 1;
    if (v4 == 1)
      return swift_bridgeObjectRelease_n(a1, 2);
    for (i = (_OWORD *)(a1 + 80); ; i += 2)
    {
      v7 = *((_QWORD *)i - 1);
      v45 = *i;
      v48 = *((_QWORD *)i - 2);
      v29 = v48;
      v49 = v7;
      v30 = (_QWORD *)*a3;
      swift_bridgeObjectRetain(v7);
      v31 = sub_4CF3C(v48, v7);
      v33 = v30[2];
      v34 = (v32 & 1) == 0;
      v25 = __OFADD__(v33, v34);
      v35 = v33 + v34;
      if (v25)
        break;
      v36 = v32;
      if (v30[3] < v35)
      {
        sub_653F8(v35, 1);
        v31 = sub_4CF3C(v48, v7);
        if ((v36 & 1) != (v37 & 1))
          goto LABEL_25;
      }
      if ((v36 & 1) != 0)
        goto LABEL_10;
      v38 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      v39 = (uint64_t *)(v38[6] + 16 * v31);
      *v39 = v29;
      v39[1] = v7;
      *(_OWORD *)(v38[7] + 16 * v31) = v45;
      v40 = v38[2];
      v25 = __OFADD__(v40, 1);
      v41 = v40 + 1;
      if (v25)
        goto LABEL_24;
      v38[2] = v41;
      if (!--v27)
        return swift_bridgeObjectRelease_n(a1, 2);
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_653F8(v14, a2 & 1);
  v16 = sub_4CF3C(v8, v7);
  if ((v15 & 1) == (v17 & 1))
  {
    v11 = v16;
    if ((v15 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v19 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    v20.n128_f64[0] = swift_willThrow();
    v50 = v19;
    swift_errorRetain(v19, v20);
    v21 = sub_29EF0(&qword_B8D30);
    if ((swift_dynamicCast(v21, &v50, v21, &type metadata for _MergeError, 0) & 1) == 0)
    {
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease_n(a1, 2);
      return swift_errorRelease(v50);
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
LABEL_26:
  v46 = 0;
  v47 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v42._object = (void *)0x8000000000089B10;
  v42._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v42);
  _print_unlocked<A, B>(_:_:)(&v48, &v46, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v43._countAndFlagsBits = 39;
  v43._object = (void *)0xE100000000000000;
  String.append(_:)(v43);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v46, v47, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

uint64_t sub_50060(uint64_t a1, uint64_t a2, id a3)
{
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v28;
  uint64_t WitnessTable;
  __int128 v30;
  _QWORD v31[5];
  _QWORD v32[3];
  uint64_t v33;
  uint64_t v34;

  v6 = 0x736B6F6F42;
  if (objc_msgSend(a3, "isString")
    && (v7 = objc_msgSend(a3, "toString")) != 0)
  {
    v8 = v7;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

  }
  else
  {
    v10 = 0xE500000000000000;
  }
  if (qword_B8110 != -1)
    swift_once(&qword_B8110, sub_4FA5C);
  swift_beginAccess(&off_B8E68, v32, 32, 0);
  v11 = off_B8E68;
  if (!*(_QWORD *)((char *)&dword_10 + (_QWORD)off_B8E68))
    goto LABEL_12;
  swift_bridgeObjectRetain(v10);
  v12 = sub_4CF3C(v6, v10);
  if ((v13 & 1) == 0)
  {
    swift_bridgeObjectRelease(v10);
LABEL_12:
    swift_endAccess(v32);
    swift_bridgeObjectRelease(v10);
    goto LABEL_13;
  }
  v30 = *(_OWORD *)(*(_QWORD *)&stru_20.segname[(_QWORD)v11 + 16] + 16 * v12);
  swift_endAccess(v32);
  swift_bridgeObjectRelease_n(v10, 2);
  v14 = v30;
  v15 = type metadata accessor for Optional(0, v30);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v31[-2] - v17;
  swift_bridgeObjectRetain(a2);
  dispatch thunk of DynamicFeatureFlagsKey.init(key:)(a1, a2, v14, *((_QWORD *)&v30 + 1));
  v19 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1, v14) != 1)
  {
    *(_OWORD *)&v31[3] = v30;
    v22 = sub_37FA8(v31);
    (*(void (**)(_QWORD *, char *, uint64_t))(v19 + 32))(v22, v18, v14);
    sub_378BC((__int128 *)v31, (uint64_t)v32);
    v23 = v33;
    v24 = v34;
    sub_3FFF4(v32, v33);
    v25 = *(_QWORD *)(v24 + 8);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v24, v23, &protocol requirements base descriptor for DynamicFeatureFlagsKey, &associated type descriptor for DynamicFeatureFlagsKey.Domain);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v24, v23, AssociatedTypeWitness, &protocol requirements base descriptor for DynamicFeatureFlagsKey, &associated conformance descriptor for DynamicFeatureFlagsKey.DynamicFeatureFlagsKey.Domain: StaticFeatureFlagsDomain);
    v28 = type metadata accessor for StaticFeatureFlagsKey(255, AssociatedTypeWitness, AssociatedConformanceWitness);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for StaticFeatureFlagsKey<A>, v28);
    v20 = RawRepresentable<>.isEnabled.getter(v23, v25, WitnessTable);
    sub_3789C(v32);
    return v20 & 1;
  }
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
LABEL_13:
  v20 = 0;
  return v20 & 1;
}

uint64_t static JSADateComponentsFormatter.localizedHrMinDuration(second:locale:style:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return sub_5063C(a1, a2, a3, a4, 96, a5);
}

uint64_t static JSADateComponentsFormatter.localizedHrMinSecDuration(second:locale:style:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return sub_5063C(a1, a2, a3, a4, 224, a5);
}

uint64_t static JSADateComponentsFormatter.localizedMinSecDuration(second:locale:style:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return sub_5063C(a1, a2, a3, a4, 192, a5);
}

id sub_50344(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSString v17;

  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
  v11 = v10;
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(a5);
  v14 = v13;
  sub_5063C(v9, v11, v12, v13, a6, a1);
  v16 = v15;
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v14);
  if (v16)
  {
    v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v16);
  }
  else
  {
    v17 = 0;
  }
  return v17;
}

uint64_t sub_503F8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x74754F6C6C657073 && a2 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x74754F6C6C657073, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    return 4;
  }
  if (a1 == 1819047270 && a2 == 0xE400000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(1819047270, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    return 3;
  }
  if (a1 == 0x74726F6873 && a2 == 0xE500000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x74726F6873, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    return 2;
  }
  if (a1 == 0x6665697262 && a2 == 0xE500000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6665697262, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    return 5;
  }
  if (a1 == 0x6169766572626261 && a2 == 0xEB00000000646574
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6169766572626261, 0xEB00000000646574, a1, a2, 0) & 1) != 0)
  {
    return 1;
  }
  if (a1 != 0x6E6F697469736F70 || a2 != 0xEA00000000006C61)
    _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697469736F70, 0xEA00000000006C61, a1, a2, 0);
  return 0;
}

uint64_t sub_5063C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  id v21;
  Class isa;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v27;

  v12 = sub_29EF0(&qword_B8EE8);
  __chkstk_darwin(v12);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Calendar(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter(v17);
  swift_bridgeObjectRetain(a2);
  Locale.init(identifier:)(a1, a2);
  v20 = type metadata accessor for Locale(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v14, 0, 1, v20);
  Calendar.locale.setter(v14);
  v21 = objc_msgSend(objc_allocWithZone((Class)NSDateComponentsFormatter), "init");
  objc_msgSend(v21, "setAllowedUnits:", a5);
  objc_msgSend(v21, "setUnitsStyle:", sub_503F8(a3, a4));
  isa = Calendar._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v21, "setCalendar:", isa);

  v23 = objc_msgSend(v21, "stringFromTimeInterval:", a6);
  if (v23)
  {
    v24 = v23;
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);

  }
  else
  {

    v25 = 0;
  }
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  return v25;
}

uint64_t type metadata accessor for JSADateComponentsFormatter()
{
  return objc_opt_self(_TtC5JSApp26JSADateComponentsFormatter);
}

id static ProcessEnvironment.current.getter()
{
  if (qword_B8118 != -1)
    swift_once(&qword_B8118, sub_508AC);
  return (id)qword_B8EF0;
}

unint64_t ProcessEnvironmentVariant.init(rawValue:)(unint64_t result)
{
  if (result > 2)
    return 0;
  return result;
}

uint64_t *sub_50890@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  BOOL v3;

  v2 = *result;
  v3 = (unint64_t)*result > 2;
  if ((unint64_t)*result > 2)
    v2 = 0;
  *(_QWORD *)a2 = v2;
  *(_BYTE *)(a2 + 8) = v3;
  return result;
}

id sub_508AC()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ProcessEnvironment()), "init");
  qword_B8EF0 = (uint64_t)result;
  return result;
}

uint64_t sub_50928()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___JSAProcessEnvironment__variant);
}

id ProcessEnvironment.init()()
{
  char *v0;
  objc_super v2;

  *(_QWORD *)&v0[OBJC_IVAR___JSAProcessEnvironment__variant] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ProcessEnvironment();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for ProcessEnvironment()
{
  return objc_opt_self(JSAProcessEnvironment);
}

void sub_509DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char v6;
  id v7;
  id v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  void *v13;
  void *v14;
  unsigned __int8 v15;
  uint64_t v16;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_37F2C();
  *v5 = static OS_dispatch_queue.main.getter();
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v6 = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    v7 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
    v8 = objc_msgSend(v7, "environment");

    v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v8, &type metadata for String, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v9 + 16))
    {
      sub_4CF3C(0xD00000000000001BLL, 0x8000000000089C70);
      v11 = v10;
      swift_bridgeObjectRelease(v9);
      if ((v11 & 1) != 0)
      {
        v12 = 2;
LABEL_10:
        *(_QWORD *)(v1 + OBJC_IVAR___JSAProcessEnvironment__variant) = v12;
        return;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v9);
    }
    v13 = (void *)_sSo13UIApplicationC5JSAppE20sharedIfNotExtensionABSgvgZ_0();
    v12 = 0;
    if (v13)
    {
      v14 = v13;
      v15 = objc_msgSend(v13, "launchedToTest");

      if ((v15 & 1) != 0)
        v12 = 1;
    }
    goto LABEL_10;
  }
  __break(1u);
}

id ProcessEnvironment.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ProcessEnvironment();
  return objc_msgSendSuper2(&v2, "dealloc");
}

unint64_t sub_50BE8()
{
  unint64_t result;

  result = qword_B8F00;
  if (!qword_B8F00)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ProcessEnvironmentVariant, &type metadata for ProcessEnvironmentVariant);
    atomic_store(result, (unint64_t *)&qword_B8F00);
  }
  return result;
}

ValueMetadata *type metadata accessor for ProcessEnvironmentVariant()
{
  return &type metadata for ProcessEnvironmentVariant;
}

uint64_t method lookup function for ProcessEnvironment(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ProcessEnvironment);
}

uint64_t dispatch thunk of ProcessEnvironment.variant.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_68.segname[(swift_isaMask & *v0) - 8])();
}

uint64_t dispatch thunk of ProcessEnvironment.setup()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_68.segname[swift_isaMask & *v0])();
}

id Package.__allocating_init(jetPack:name:isBundled:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  objc_class *v4;
  _BYTE *v9;
  _QWORD *v10;
  id v11;
  objc_super v13;

  v9 = objc_allocWithZone(v4);
  sub_37BC0(a1, (uint64_t)&v9[OBJC_IVAR___JSAPackage_jetPack]);
  v10 = &v9[OBJC_IVAR___JSAPackage_nameForJSContext];
  *v10 = a2;
  v10[1] = a3;
  v9[OBJC_IVAR___JSAPackage_isBundled] = a4;
  v13.receiver = v9;
  v13.super_class = v4;
  v11 = objc_msgSendSuper2(&v13, "init");
  sub_37C04(a1);
  return v11;
}

uint64_t sub_50D20()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  unint64_t v15;
  void **v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **aBlock;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  void *v28;
  uint64_t (*v29)();
  uint64_t v30;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v2 = (char *)&v23 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DispatchQoS(0);
  v3 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_29EF0(&qword_B8498);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (uint64_t)objc_msgSend((id)objc_opt_self(JSADevice), "isInternalBuild");
  if ((_DWORD)result)
  {
    result = Package.isSupported.getter();
    if ((result & 1) == 0)
    {
      if (qword_B80D0 != -1)
        swift_once(&qword_B80D0, sub_448A0);
      v11 = sub_2D6E0(v6, (uint64_t)qword_B89D0);
      v12 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
      v12(v9, v11, v6);
      UserDefault.wrappedValue.getter(&aBlock, v6);
      v13 = *(void (**)(char *, uint64_t))(v7 + 8);
      v13(v9, v6);
      v14 = v26;
      result = swift_bridgeObjectRelease(v26);
      if (v14)
      {
        v12(v9, v11, v6);
        UserDefault.wrappedValue.getter(&aBlock, v6);
        v13(v9, v6);
        v15 = v26;
        if (!v26)
          goto LABEL_10;
        v16 = aBlock;
        result = swift_bridgeObjectRelease(v26);
        v17 = HIBYTE(v15) & 0xF;
        if ((v15 & 0x2000000000000000) == 0)
          v17 = (unint64_t)v16 & 0xFFFFFFFFFFFFLL;
        if (v17)
        {
LABEL_10:
          sub_37F2C();
          v18 = (void *)static OS_dispatch_queue.main.getter();
          v29 = sub_52DA0;
          v30 = 0;
          aBlock = _NSConcreteStackBlock;
          v26 = 1107296256;
          v27 = sub_2A1A8;
          v28 = &unk_A1800;
          v19 = _Block_copy(&aBlock);
          static DispatchQoS.unspecified.getter(v19);
          aBlock = (void **)&_swiftEmptyArrayStorage;
          v20 = sub_2A1FC((unint64_t *)&qword_B8210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          v21 = sub_29EF0((uint64_t *)&unk_B8C90);
          v22 = sub_5320C();
          dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v21, v22, v0, v20);
          OS_dispatch_queue.async(group:qos:flags:execute:)(0, v5, v2, v19);
          _Block_release(v19);

          (*(void (**)(char *, uint64_t))(v24 + 8))(v2, v0);
          return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v23);
        }
      }
    }
  }
  return result;
}

uint64_t Package.version.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = type metadata accessor for BooksJetPackResourceBundle(0);
  v1 = sub_2A1FC(&qword_B84D8, type metadata accessor for BooksJetPackResourceBundle, (uint64_t)&protocol conformance descriptor for BooksJetPackResourceBundle);
  v2 = JetPackResourceBundle.version.getter(v0, v1);
  if (v3)
    return v2;
  if (qword_B8130 != -1)
    swift_once(&qword_B8130, sub_51450);
  v4 = qword_BC9A8;
  swift_bridgeObjectRetain(unk_BC9B0);
  return v4;
}

uint64_t Package.isSupported.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];

  v0 = type metadata accessor for BooksJetPackResourceBundle(0);
  v1 = sub_2A1FC(&qword_B84D8, type metadata accessor for BooksJetPackResourceBundle, (uint64_t)&protocol conformance descriptor for BooksJetPackResourceBundle);
  v2 = JetPackResourceBundle.version.getter(v0, v1);
  if (v3)
  {
    v4 = v2;
    v5 = v3;
  }
  else
  {
    if (qword_B8130 != -1)
      swift_once(&qword_B8130, sub_51450);
    v4 = qword_BC9A8;
    v5 = unk_BC9B0;
    swift_bridgeObjectRetain(unk_BC9B0);
  }
  v14[2] = v4;
  v14[3] = v5;
  if (qword_B8120 != -1)
    swift_once(&qword_B8120, sub_51358);
  v14[0] = 758609453;
  v14[1] = 0xE400000000000000;
  v6 = sub_3A100();
  v7 = StringProtocol.contains<A>(_:)(v14, &type metadata for String, &type metadata for String, v6, v6);
  swift_bridgeObjectRelease(v5);
  if ((v7 & 1) != 0)
  {
    v8 = 1;
  }
  else
  {
    v9 = JetPackResourceBundle.version.getter(v0, v1);
    if (v10)
    {
      v11 = v9;
      v12 = v10;
      if (qword_B8130 != -1)
        swift_once(&qword_B8130, sub_51450);
    }
    else
    {
      if (qword_B8130 != -1)
        swift_once(&qword_B8130, sub_51450);
      v11 = qword_BC9A8;
      v12 = unk_BC9B0;
      swift_bridgeObjectRetain(unk_BC9B0);
    }
    if (v11 == qword_BC9A8 && v12 == unk_BC9B0)
      v8 = 1;
    else
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, qword_BC9A8, unk_BC9B0, 0);
    swift_bridgeObjectRelease(v12);
  }
  return v8 & 1;
}

uint64_t Package.nameForJSContext.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___JSAPackage_nameForJSContext);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___JSAPackage_nameForJSContext + 8));
  return v1;
}

uint64_t Package.isBundled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___JSAPackage_isBundled);
}

void sub_51358()
{
  qword_BC980 = 14198;
  *(_QWORD *)algn_BC988 = 0xE200000000000000;
}

uint64_t sub_51370()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v0 = sub_29EF0((uint64_t *)&unk_B8CA0);
  __chkstk_darwin(v0);
  v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URL(0);
  sub_38104(v3, qword_BC990);
  v4 = sub_2D6E0(v3, (uint64_t)qword_BC990);
  URL.init(string:)(0xD000000000000032, 0x8000000000089E30);
  v5 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v2, 1, v3);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v4, v2, v3);
  __break(1u);
  return result;
}

void sub_51450()
{
  qword_BC9A8 = 0x302E302E30;
  unk_BC9B0 = 0xE500000000000000;
}

id Package.init(jetPack:name:isBundled:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;
  objc_class *ObjectType;
  _QWORD *v10;
  id v11;
  objc_super v13;

  ObjectType = (objc_class *)swift_getObjectType(v4);
  sub_37BC0(a1, (uint64_t)&v4[OBJC_IVAR___JSAPackage_jetPack]);
  v10 = &v4[OBJC_IVAR___JSAPackage_nameForJSContext];
  *v10 = a2;
  v10[1] = a3;
  v4[OBJC_IVAR___JSAPackage_isBundled] = a4;
  v13.receiver = v4;
  v13.super_class = ObjectType;
  v11 = objc_msgSendSuper2(&v13, "init");
  sub_37C04(a1);
  return v11;
}

uint64_t Package.metadata(withName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE v14[16];

  v5 = sub_29EF0(&qword_B8528);
  __chkstk_darwin(v5);
  v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for InMemoryJetPackResourceBundle(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v14[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  OSAllocatedUnfairLock.valueWithLock.getter(*(_QWORD *)(v2 + OBJC_IVAR___JSAPackage_jetPack), v5);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_3A0C0((uint64_t)v7);
    return 0;
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(v11, v7, v8);
    v12 = InMemoryJetPackResourceBundle.data(withName:)(a1, a2);
    (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  }
  return v12;
}

uint64_t Package.data(atPath:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = v2;
  v32 = a1;
  v5 = type metadata accessor for URL.DirectoryHint(0);
  v28 = *(_QWORD *)(v5 - 8);
  v29 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v30 = *(_QWORD *)(v8 - 8);
  v31 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_29EF0(&qword_B8528);
  __chkstk_darwin(v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for InMemoryJetPackResourceBundle(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for JetPackPath(0);
  v33 = *(_QWORD *)(v18 - 8);
  v34 = v18;
  __chkstk_darwin(v18);
  v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (_QWORD *)(v3 + OBJC_IVAR___JSAPackage_jetPack);
  swift_bridgeObjectRetain(a2);
  JetPackPath.init(_:)(v32);
  OSAllocatedUnfairLock.valueWithLock.getter(*v21, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_3A0C0((uint64_t)v13);
    type metadata accessor for BooksJetPackResourceBundle(0);
    v35 = JetPackPath.string.getter();
    v36 = v22;
    v24 = v28;
    v23 = v29;
    (*(void (**)(char *, _QWORD, uint64_t))(v28 + 104))(v7, enum case for URL.DirectoryHint.inferFromPath(_:), v29);
    v25 = sub_3A100();
    URL.appending<A>(path:directoryHint:)(&v35, v7, &type metadata for String, v25);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v23);
    swift_bridgeObjectRelease(v36);
    v26 = Data.init(contentsOf:options:)(v10, 0);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v31);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
    v26 = InMemoryJetPackResourceBundle.fileData(atPath:)(v20);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  (*(void (**)(char *, uint64_t))(v33 + 8))(v20, v34);
  return v26;
}

uint64_t sub_51AD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = v2;
  v40 = a1;
  v5 = type metadata accessor for URL.DirectoryHint(0);
  v35 = *(_QWORD *)(v5 - 8);
  v36 = v5;
  __chkstk_darwin(v5);
  v34 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v37 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_29EF0(&qword_B8528);
  __chkstk_darwin(v10);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for InMemoryJetPackResourceBundle(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for JetPackPath(0);
  v38 = *(_QWORD *)(v17 - 8);
  v39 = v17;
  __chkstk_darwin(v17);
  v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (_QWORD *)(v3 + OBJC_IVAR___JSAPackage_jetPack);
  swift_bridgeObjectRetain(a2);
  JetPackPath.init(_:)(v40);
  OSAllocatedUnfairLock.valueWithLock.getter(*v20, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_3A0C0((uint64_t)v12);
    type metadata accessor for BooksJetPackResourceBundle(0);
    v41 = JetPackPath.string.getter();
    v42 = v21;
    v23 = v34;
    v22 = v35;
    v24 = v36;
    (*(void (**)(char *, _QWORD, uint64_t))(v35 + 104))(v34, enum case for URL.DirectoryHint.inferFromPath(_:), v36);
    v25 = sub_3A100();
    v26 = v37;
    URL.appending<A>(path:directoryHint:)(&v41, v23, &type metadata for String, v25);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v23, v24);
    swift_bridgeObjectRelease(v42);
    v27 = Data.init(contentsOf:options:)(v26, 0);
    v29 = v28;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v26, v7);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v19, v39);
LABEL_5:
    sub_531B0(v27, v29);
    sub_53048(v27, v29);
    v31 = v32;
    sub_3B6D8(v27, v29);
    sub_3B6D8(v27, v29);
    return v31;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
  v27 = InMemoryJetPackResourceBundle.fileData(atPath:)(v19);
  v29 = v30;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v19, v39);
  if (v29 >> 60 != 15)
    goto LABEL_5;
  return 0;
}

Swift::String_optional __swiftcall Package.string(atPath:)(Swift::String atPath)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  Swift::String_optional result;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v49;
  unint64_t v50;

  object = atPath._object;
  countAndFlagsBits = atPath._countAndFlagsBits;
  v2 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v2);
  v40 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL.DirectoryHint(0);
  v42 = *(_QWORD *)(v4 - 8);
  v43 = v4;
  __chkstk_darwin(v4);
  v41 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v44 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_29EF0(&qword_B8528);
  __chkstk_darwin(v9);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for InMemoryJetPackResourceBundle(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for JetPackPath(0);
  v45 = *(_QWORD *)(v16 - 8);
  v46 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (_QWORD *)(v1 + OBJC_IVAR___JSAPackage_jetPack);
  swift_bridgeObjectRetain(object);
  JetPackPath.init(_:)(countAndFlagsBits);
  OSAllocatedUnfairLock.valueWithLock.getter(*v19, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    v20 = v7;
    sub_3A0C0((uint64_t)v11);
    type metadata accessor for BooksJetPackResourceBundle(0);
    v49 = JetPackPath.string.getter();
    v50 = v21;
    v23 = v41;
    v22 = v42;
    v24 = v43;
    (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v41, enum case for URL.DirectoryHint.inferFromPath(_:), v43);
    v25 = sub_3A100();
    v26 = v44;
    URL.appending<A>(path:directoryHint:)(&v49, v23, &type metadata for String, v25);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v23, v24);
    swift_bridgeObjectRelease(v50);
    v29 = Data.init(contentsOf:options:)(v26, 0);
    v31 = v30;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v26, v6);
    v32 = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v18, v46);
LABEL_6:
    v49 = v29;
    v50 = v31;
    v34 = v40;
    static String.Encoding.utf8.getter(v32);
    v35 = sub_52D5C();
    v27 = String.init<A>(bytes:encoding:)(&v49, v34, &type metadata for Data, v35);
    v28 = v36;
    sub_3B6D8(v29, v31);
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
  v29 = InMemoryJetPackResourceBundle.fileData(atPath:)(v18);
  v31 = v33;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v32 = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v18, v46);
  if (v31 >> 60 != 15)
    goto LABEL_6;
  v27 = 0;
  v28 = 0;
LABEL_7:
  v37 = v27;
  v38 = v28;
  result.value._object = v38;
  result.value._countAndFlagsBits = v37;
  return result;
}

_QWORD *Package.dir(atPath:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  _QWORD *v11;
  int64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  _QWORD *v29;

  v4 = type metadata accessor for JetPackPath(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (void (*)(char *, uint64_t))((char *)&v25 - v9);
  swift_bridgeObjectRetain(a2);
  JetPackPath.init(_:)(a1);
  v11 = BooksJetPackResourceBundle.contentsOfDirectory(atPath:)(v10);
  v28 = *(void (**)(char *, uint64_t))(v5 + 8);
  v28((char *)v10, v4);
  v12 = v11[2];
  if (v12)
  {
    v29 = &_swiftEmptyArrayStorage;
    sub_3AC50(0, v12, 0);
    v13 = (char *)v11 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v14 = *(_QWORD *)(v5 + 72);
    v26 = v11;
    v27 = v14;
    v15 = *(uint64_t (**)(char *, char *, uint64_t))(v5 + 16);
    do
    {
      v16 = v15(v8, v13, v4);
      v17 = JetPackPath.string.getter(v16);
      v19 = v18;
      v28(v8, v4);
      v20 = v29;
      if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0)
      {
        sub_3AC50(0, v20[2] + 1, 1);
        v20 = v29;
      }
      v22 = v20[2];
      v21 = v20[3];
      if (v22 >= v21 >> 1)
      {
        sub_3AC50(v21 > 1, v22 + 1, 1);
        v20 = v29;
      }
      v20[2] = v22 + 1;
      v23 = (char *)&v20[2 * v22];
      *((_QWORD *)v23 + 4) = v17;
      *((_QWORD *)v23 + 5) = v19;
      v13 += v27;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease(v26);
  }
  else
  {
    swift_bridgeObjectRelease(v11);
    return &_swiftEmptyArrayStorage;
  }
  return v20;
}

_QWORD *Package.allLocalizationPaths.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  _QWORD *v13;
  _QWORD v14[4];
  _QWORD *v15;

  v0 = Package.dir(atPath:)(6516588, 0xE300000000000000);
  v1 = v0;
  v2 = v0[2];
  if (v2)
  {
    v3 = sub_3A100();
    v13 = v1;
    v4 = v1 + 5;
    v5 = &_swiftEmptyArrayStorage;
    do
    {
      v7 = *(v4 - 1);
      v6 = *v4;
      v14[2] = v7;
      v14[3] = v6;
      v14[0] = 45;
      v14[1] = 0xE100000000000000;
      swift_bridgeObjectRetain(v6);
      if ((StringProtocol.contains<A>(_:)(v14, &type metadata for String, &type metadata for String, v3, v3) & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
        v15 = v5;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_3AC50(0, v5[2] + 1, 1);
          v5 = v15;
        }
        v10 = v5[2];
        v9 = v5[3];
        if (v10 >= v9 >> 1)
        {
          sub_3AC50(v9 > 1, v10 + 1, 1);
          v5 = v15;
        }
        v5[2] = v10 + 1;
        v11 = (char *)&v5[2 * v10];
        *((_QWORD *)v11 + 4) = v7;
        *((_QWORD *)v11 + 5) = v6;
      }
      else
      {
        swift_bridgeObjectRelease(v6);
      }
      v4 += 2;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    swift_bridgeObjectRelease(v0);
    return &_swiftEmptyArrayStorage;
  }
  return v5;
}

Class sub_526FC(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4;
  uint64_t v5;
  Class isa;

  v4 = a1;
  v5 = a3();

  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v5);
  return isa;
}

void Package.allLocales.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  int64_t v2;
  _QWORD *v3;
  uint64_t v4;
  NSString v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;

  v0 = Package.allLocalizationPaths.getter();
  v1 = v0;
  v2 = v0[2];
  if (v2)
  {
    sub_3AC50(0, v2, 0);
    v3 = v1 + 5;
    while (1)
    {
      v4 = *v3;
      swift_bridgeObjectRetain(*v3);
      v5 = String._bridgeToObjectiveC()();
      v6 = objc_msgSend(v5, "lastPathComponent");

      if (!v6)
        break;
      v7 = objc_msgSend(v6, "stringByDeletingPathExtension");

      v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      v10 = v9;
      swift_bridgeObjectRelease(v4);

      v12 = _swiftEmptyArrayStorage[2];
      v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1)
        sub_3AC50(v11 > 1, v12 + 1, 1);
      v3 += 2;
      _swiftEmptyArrayStorage[2] = v12 + 1;
      v13 = (char *)&_swiftEmptyArrayStorage[2 * v12];
      *((_QWORD *)v13 + 4) = v8;
      *((_QWORD *)v13 + 5) = v10;
      if (!--v2)
      {
        swift_bridgeObjectRelease(v1);
        return;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease(v0);
  }
}

Swift::String __swiftcall Package.localizationPath(forLocale:)(Swift::String forLocale)
{
  void *object;
  uint64_t countAndFlagsBits;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  Class isa;
  uint64_t v7;
  uint64_t v8;
  Class v9;
  id v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  Swift::String v18;
  void *v19;
  Swift::String v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  void *v25;
  Swift::String result;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;

  object = forLocale._object;
  countAndFlagsBits = forLocale._countAndFlagsBits;
  v3 = (void *)objc_opt_self(NSBundle);
  Package.allLocales.getter();
  v5 = v4;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v5);
  v7 = sub_29EF0(&qword_B8618);
  v8 = swift_allocObject(v7, 48, 7);
  *(_OWORD *)(v8 + 16) = xmmword_8DFE0;
  *(_QWORD *)(v8 + 32) = countAndFlagsBits;
  *(_QWORD *)(v8 + 40) = object;
  swift_bridgeObjectRetain(object);
  v9 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v8);
  v10 = objc_msgSend(v3, "preferredLocalizationsFromArray:forPreferences:", isa, v9);

  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, &type metadata for String);
  v12 = Package.allLocalizationPaths.getter();
  v13 = v12;
  v14 = v12[2];
  if (v14)
  {
    swift_bridgeObjectRetain(v12);
    v15 = v13 + 5;
    while (1)
    {
      v17 = *(v15 - 1);
      v16 = *v15;
      v29 = v17;
      v30 = v16;
      v27 = 47;
      v28 = 0xE100000000000000;
      swift_bridgeObjectRetain(v16);
      v18._countAndFlagsBits = Array.description.getter(v11, &type metadata for String);
      v19 = v18._object;
      String.append(_:)(v18);
      swift_bridgeObjectRelease(v19);
      v20._countAndFlagsBits = 46;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      v21 = v28;
      v22 = sub_3A100();
      v23 = StringProtocol.contains<A>(_:)(&v27, &type metadata for String, &type metadata for String, v22, v22);
      swift_bridgeObjectRelease(v21);
      if ((v23 & 1) != 0)
        break;
      v15 += 2;
      swift_bridgeObjectRelease(v16);
      if (!--v14)
      {
        swift_bridgeObjectRelease(v11);
        swift_bridgeObjectRelease_n(v13, 2);
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease_n(v13, 2);
  }
  else
  {
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v13);
LABEL_7:
    v17 = 0;
    v16 = 0xE000000000000000;
  }
  v24 = v17;
  v25 = (void *)v16;
  result._object = v25;
  result._countAndFlagsBits = v24;
  return result;
}

Swift::Void __swiftcall Package.startEviction()()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  __n128 v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *oslog;
  uint64_t v12;
  uint64_t v13;

  BooksJetPackResourceBundle.evict()();
  if (v0)
  {
    if (qword_B8160 != -1)
      swift_once(&qword_B8160, sub_56DC8);
    v1 = type metadata accessor for Logger(0);
    sub_2D6E0(v1, (uint64_t)qword_B92A8);
    swift_errorRetain(v0, v2);
    v4 = swift_errorRetain(v0, v3);
    oslog = Logger.logObject.getter(v4);
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = (uint64_t *)swift_slowAlloc(8, -1);
      v8.n128_u64[0] = 138412290;
      *(_DWORD *)v6 = 138412290;
      swift_errorRetain(v0, v8);
      v9 = _swift_stdlib_bridgeErrorToNSError(v0);
      v12 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v6 + 4, v6 + 12);
      *v7 = v9;
      swift_errorRelease(v0);
      swift_errorRelease(v0);
      _os_log_impl(&dword_0, oslog, v5, "In-memory JetPack eviction failed: %@", v6, 0xCu);
      v10 = sub_29EF0(&qword_B84B8);
      swift_arrayDestroy(v7, 1, v10);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);

      swift_errorRelease(v0);
    }
    else
    {
      swift_errorRelease(v0);
      swift_errorRelease(v0);
      swift_errorRelease(v0);

    }
  }
}

unint64_t sub_52D5C()
{
  unint64_t result;

  result = qword_B8F30;
  if (!qword_B8F30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_B8F30);
  }
  return result;
}

uint64_t sub_52DA0()
{
  NSString v0;
  NSString v1;
  id v2;
  NSString v3;
  id v4;
  unint64_t v5;

  v0 = String._bridgeToObjectiveC()();
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", v0, v1, 1);

  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend((id)objc_opt_self(UIAlertAction), "actionWithTitle:style:handler:", v3, 0, 0);

  objc_msgSend(v2, "addAction:", v4);
  v5 = sub_4086C((uint64_t)&_swiftEmptyArrayStorage);
  _sSo16UIViewControllerC5JSAppE7present_7options8animated10completionyAB_SDys11AnyHashableVypGSbyycSgtFZ_0(v2, v5, 1, 0, 0);

  return swift_bridgeObjectRelease(v5);
}

void Package.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("JSApp.Package", 13, "init()", 6, 0);
  __break(1u);
}

uint64_t sub_52F60(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = 2 * a2;
  return result;
}

uint64_t sub_52F70()
{
  return type metadata accessor for Package(0);
}

uint64_t type metadata accessor for Package(uint64_t a1)
{
  uint64_t result;

  result = qword_B8F60;
  if (!qword_B8F60)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Package);
  return result;
}

uint64_t sub_52FB4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for BooksJetPackResourceBundle(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_8E460;
    v4[2] = &unk_8E478;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for Package(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for Package);
}

uint64_t dispatch thunk of Package.__allocating_init(jetPack:name:isBundled:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

void sub_53048(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = type metadata accessor for Data.Iterator(0);
  __chkstk_darwin(v3);
  __asm { BR              X10 }
}

_QWORD *sub_530C4()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;

  if (BYTE6(v0))
  {
    v6 = sub_29EF0(&qword_B8638);
    v4 = (_QWORD *)swift_allocObject(v6, BYTE6(v0) + 32, 7);
    v7 = j__malloc_size(v4);
    v4[2] = BYTE6(v0);
    v4[3] = 2 * v7 - 64;
    sub_531B0(v2, v0);
    v8 = ((uint64_t (*)(uint64_t, _QWORD *, _QWORD, uint64_t, unint64_t))Data._copyContents(initializing:))(v3, v4 + 4, BYTE6(v0), v2, v0);
    sub_3B6D8(v2, v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
    if (v8 != BYTE6(v0))
    {
      __break(1u);
      JUMPOUT(0x53198);
    }
  }
  return v4;
}

uint64_t sub_531B0(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_531F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_53204(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_5320C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_B8218;
  if (!qword_B8218)
  {
    v1 = sub_29F30((uint64_t *)&unk_B8C90);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_B8218);
  }
  return result;
}

id sub_53324()
{
  char *v0;
  void *v1;
  double v2;
  double v3;
  double v4;
  double v5;
  CGFloat v6;
  CGFloat v7;
  double v8;
  double v9;
  CGRect v11;
  CGRect v12;

  v1 = *(void **)&v0[OBJC_IVAR____TtC5JSAppP33_E222B00B621AE7255E22C290E7F82EA222HotReloadStatusHUDView_activityIndicatorView];
  objc_msgSend(v1, "bounds");
  v3 = v2;
  v5 = v4;
  objc_msgSend(v0, "frame");
  v6 = (CGRectGetHeight(v11) - v5) * 0.5;
  objc_msgSend(v1, "setFrame:", 10.0, v6, v3, v5);
  v12.origin.x = 10.0;
  v12.origin.y = v6;
  v12.size.width = v3;
  v12.size.height = v5;
  v7 = CGRectGetMaxY(v12) + 10.0;
  objc_msgSend(v0, "frame");
  v9 = v8 + -10.0 - v7;
  objc_msgSend(v0, "frame");
  return objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC5JSAppP33_E222B00B621AE7255E22C290E7F82EA222HotReloadStatusHUDView_label], "setFrame:", v7, 0.0, v9);
}

char *sub_53414(double a1, double a2, double a3, double a4)
{
  void *v4;
  id v9;
  char *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  char *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  double v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  objc_super v33;

  v9 = objc_allocWithZone((Class)UIActivityIndicatorView);
  v10 = v4;
  v11 = objc_msgSend(v9, "initWithFrame:", a1, a2, 50.0, 50.0);
  *(_QWORD *)&v10[OBJC_IVAR____TtC5JSAppP33_E222B00B621AE7255E22C290E7F82EA222HotReloadStatusHUDView_activityIndicatorView] = v11;
  v12 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", a1, a2, a3, a4);
  *(_QWORD *)&v10[OBJC_IVAR____TtC5JSAppP33_E222B00B621AE7255E22C290E7F82EA222HotReloadStatusHUDView_label] = v12;

  v33.receiver = v10;
  v33.super_class = (Class)type metadata accessor for HotReloadStatusHUDView();
  v13 = objc_msgSendSuper2(&v33, "initWithFrame:", a1, a2, a3, a4);
  v14 = (void *)objc_opt_self(UIColor);
  v15 = (char *)v13;
  v16 = objc_msgSend(v14, "secondarySystemBackgroundColor");
  objc_msgSend(v15, "setBackgroundColor:", v16);

  v17 = objc_msgSend(v15, "layer");
  objc_msgSend(v17, "setCornerRadius:", 15.0);

  v18 = objc_msgSend(v15, "layer");
  v19 = objc_msgSend(v14, "blackColor");
  v20 = objc_msgSend(v19, "CGColor");

  objc_msgSend(v18, "setShadowColor:", v20);
  v21 = objc_msgSend(v15, "layer");
  objc_msgSend(v21, "setShadowOffset:", 0.0, 1.0);

  v22 = objc_msgSend(v15, "layer");
  objc_msgSend(v22, "setShadowRadius:", 10.0);

  v23 = objc_msgSend(v15, "layer");
  LODWORD(v24) = 0.25;
  objc_msgSend(v23, "setShadowOpacity:", v24);

  v25 = *(void **)&v15[OBJC_IVAR____TtC5JSAppP33_E222B00B621AE7255E22C290E7F82EA222HotReloadStatusHUDView_activityIndicatorView];
  objc_msgSend(v25, "startAnimating");
  objc_msgSend(v15, "addSubview:", v25);
  v26 = OBJC_IVAR____TtC5JSAppP33_E222B00B621AE7255E22C290E7F82EA222HotReloadStatusHUDView_label;
  v27 = *(void **)&v15[OBJC_IVAR____TtC5JSAppP33_E222B00B621AE7255E22C290E7F82EA222HotReloadStatusHUDView_label];
  v28 = (void *)objc_opt_self(UIFont);
  v29 = v27;
  v30 = objc_msgSend(v28, "boldSystemFontOfSize:", 18.0);
  objc_msgSend(v29, "setFont:", v30);

  v31 = *(void **)&v15[v26];
  objc_msgSend(v31, "setAdjustsFontSizeToFitWidth:", 1);
  objc_msgSend(v15, "addSubview:", v31);

  return v15;
}

id sub_537C0()
{
  return sub_540D8((uint64_t (*)(_QWORD))type metadata accessor for HotReloadStatusHUDView);
}

uint64_t type metadata accessor for HotReloadStatusHUDView()
{
  return objc_opt_self(_TtC5JSAppP33_E222B00B621AE7255E22C290E7F82EA222HotReloadStatusHUDView);
}

void sub_53824()
{
  char *v0;
  id v1;
  uint64_t v2;
  void *v3;
  char *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSString v8;
  id v9;
  void *v10;
  objc_super v11;

  v11.receiver = v0;
  v11.super_class = (Class)type metadata accessor for HotReloadStatusHUDViewController();
  objc_msgSendSuper2(&v11, "viewDidLoad");
  v1 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for HotReloadStatusHUDView()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v2 = OBJC_IVAR____TtC5JSAppP33_E222B00B621AE7255E22C290E7F82EA232HotReloadStatusHUDViewController_hudView;
  v3 = *(void **)&v0[OBJC_IVAR____TtC5JSAppP33_E222B00B621AE7255E22C290E7F82EA232HotReloadStatusHUDViewController_hudView];
  *(_QWORD *)&v0[OBJC_IVAR____TtC5JSAppP33_E222B00B621AE7255E22C290E7F82EA232HotReloadStatusHUDViewController_hudView] = v1;

  v4 = *(char **)&v0[v2];
  if (v4)
  {
    v5 = *(_QWORD *)&v0[OBJC_IVAR____TtC5JSAppP33_E222B00B621AE7255E22C290E7F82EA232HotReloadStatusHUDViewController_text
                      + 8];
    v6 = *(void **)&v4[OBJC_IVAR____TtC5JSAppP33_E222B00B621AE7255E22C290E7F82EA222HotReloadStatusHUDView_label];
    v7 = v4;
    if (v5)
    {
      swift_bridgeObjectRetain(v5);
      v8 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v5);
    }
    else
    {
      v8 = 0;
    }
    objc_msgSend(v6, "setText:", v8);

  }
  v9 = objc_msgSend(v0, "view");
  if (v9)
  {
    if (*(_QWORD *)&v0[v2])
    {
      v10 = v9;
      objc_msgSend(v9, "addSubview:");

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_53998()
{
  char *v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double Width;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  objc_super v19;
  CGRect v20;

  v19.receiver = v0;
  v19.super_class = (Class)type metadata accessor for HotReloadStatusHUDViewController();
  objc_msgSendSuper2(&v19, "viewDidLayoutSubviews");
  v1 = *(void **)&v0[OBJC_IVAR____TtC5JSAppP33_E222B00B621AE7255E22C290E7F82EA232HotReloadStatusHUDViewController_hudView];
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v0, "view");
    if (v3)
    {
      v4 = v3;
      objc_msgSend(v3, "bounds");
      v6 = v5;
      v8 = v7;
      v10 = v9;
      v12 = v11;

      v20.origin.x = v6;
      v20.origin.y = v8;
      v20.size.width = v10;
      v20.size.height = v12;
      Width = CGRectGetWidth(v20);
      objc_msgSend(v2, "layoutMargins");
      v15 = Width - v14;
      objc_msgSend(v2, "layoutMargins");
      if (v15 - v16 <= 330.0)
        v17 = v15 - v16;
      else
        v17 = 330.0;
      objc_msgSend(v2, "layoutMargins");
      objc_msgSend(v2, "setFrame:", (Width - v17) * 0.5, v18 + 5.0, v17, 60.0);

    }
    else
    {
      __break(1u);
    }
  }
}

id sub_53C4C()
{
  return sub_540D8((uint64_t (*)(_QWORD))type metadata accessor for HotReloadStatusHUDViewController);
}

uint64_t type metadata accessor for HotReloadStatusHUDViewController()
{
  return objc_opt_self(_TtC5JSAppP33_E222B00B621AE7255E22C290E7F82EA232HotReloadStatusHUDViewController);
}

void sub_53CB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  char *v9;
  id v10;

  v3 = *(_QWORD *)(v2
                 + OBJC_IVAR____TtC5JSAppP33_E222B00B621AE7255E22C290E7F82EA224HotReloadStatusHUDWindow_hudViewController);
  v4 = (_QWORD *)(v3 + OBJC_IVAR____TtC5JSAppP33_E222B00B621AE7255E22C290E7F82EA232HotReloadStatusHUDViewController_text);
  v5 = *(_QWORD *)(v3
                 + OBJC_IVAR____TtC5JSAppP33_E222B00B621AE7255E22C290E7F82EA232HotReloadStatusHUDViewController_text
                 + 8);
  *v4 = a1;
  v4[1] = a2;
  swift_bridgeObjectRelease(v5);
  v6 = *(char **)(v3
                + OBJC_IVAR____TtC5JSAppP33_E222B00B621AE7255E22C290E7F82EA232HotReloadStatusHUDViewController_hudView);
  if (v6)
  {
    v7 = v4[1];
    v8 = *(void **)&v6[OBJC_IVAR____TtC5JSAppP33_E222B00B621AE7255E22C290E7F82EA222HotReloadStatusHUDView_label];
    v9 = v6;
    if (v7)
    {
      swift_bridgeObjectRetain(v7);
      v10 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v7);
    }
    else
    {
      v10 = 0;
    }
    objc_msgSend(v8, "setText:", v10);

  }
}

char *sub_53D8C(void *a1)
{
  void *v1;
  uint64_t v3;
  id v4;
  char *v5;
  id v6;
  id v7;
  void *v8;
  char *v9;
  id v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v25;
  UIWindowLevel v26;
  double v27;
  objc_super v28;

  v3 = type metadata accessor for HotReloadStatusHUDViewController();
  v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3));
  v5 = v1;
  v6 = objc_msgSend(v4, "init");
  *(_QWORD *)&v5[OBJC_IVAR____TtC5JSAppP33_E222B00B621AE7255E22C290E7F82EA224HotReloadStatusHUDWindow_hudViewController] = v6;

  v28.receiver = v5;
  v28.super_class = (Class)type metadata accessor for HotReloadStatusHUDWindow();
  v7 = objc_msgSendSuper2(&v28, "initWithWindowScene:", a1);
  v8 = (void *)objc_opt_self(UIScreen);
  v9 = (char *)v7;
  v10 = objc_msgSend(v8, "mainScreen");
  objc_msgSend(v10, "bounds");
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v18 = v17;

  objc_msgSend(v9, "setBounds:", v12, v14, v16, v18);
  objc_msgSend(v9, "setRootViewController:", *(_QWORD *)&v9[OBJC_IVAR____TtC5JSAppP33_E222B00B621AE7255E22C290E7F82EA224HotReloadStatusHUDWindow_hudViewController]);
  type metadata accessor for Level(0);
  v20 = v19;
  v26 = UIWindowLevelAlert;
  v25 = 0x3FF0000000000000;
  v21 = sub_548DC();
  v22 = v9;
  static _UIKitNumericRawRepresentable.+ infix(_:_:)(&v27, &v26, &v25, v20, v21);
  objc_msgSend(v22, "setWindowLevel:", v27);

  v23 = v22;
  objc_msgSend(v23, "makeKeyWindow");

  return v23;
}

id sub_540CC()
{
  return sub_540D8((uint64_t (*)(_QWORD))type metadata accessor for HotReloadStatusHUDWindow);
}

id sub_540D8(uint64_t (*a1)(_QWORD))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for HotReloadStatusHUDWindow()
{
  return objc_opt_self(_TtC5JSAppP33_E222B00B621AE7255E22C290E7F82EA224HotReloadStatusHUDWindow);
}

void sub_54140(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void **aBlock;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (void ***)((char *)&aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_37F2C();
  *v9 = static OS_dispatch_queue.main.getter();
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  v10 = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v11 = *(void **)(v3 + 16);
  swift_bridgeObjectRetain(a2);
  sub_53CB4(a1, a2);
  if ((*(_BYTE *)(v3 + 74) & 1) != 0)
  {
    if (qword_B8158 == -1)
    {
LABEL_4:
      v12 = type metadata accessor for Logger(0);
      sub_2D6E0(v12, (uint64_t)qword_B9290);
      v13 = Logger.logObject.getter();
      v14 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v13, v14))
      {
        v15 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v15 = 0;
        swift_slowDealloc(v15, -1, -1);
      }

      return;
    }
LABEL_12:
    swift_once(&qword_B8158, sub_56D80);
    goto LABEL_4;
  }
  if ((*(_BYTE *)(v3 + 72) & 1) == 0 && (*(_BYTE *)(v3 + 73) & 1) == 0)
  {
    *(_BYTE *)(v3 + 72) = 1;
    objc_msgSend(v11, "frame");
    objc_msgSend(v11, "setFrame:");
    objc_msgSend(v11, "setHidden:", 0);
    v16 = (void *)objc_opt_self(UIView);
    v25 = sub_54888;
    v26 = v3;
    aBlock = _NSConcreteStackBlock;
    v22 = 1107296256;
    v23 = sub_2A1A8;
    v24 = &unk_A18A0;
    v17 = _Block_copy(&aBlock);
    v18 = v26;
    swift_retain(v3);
    swift_release(v18);
    v25 = sub_548D0;
    v26 = v3;
    aBlock = _NSConcreteStackBlock;
    v22 = 1107296256;
    v23 = sub_54430;
    v24 = &unk_A18C8;
    v19 = _Block_copy(&aBlock);
    v20 = v26;
    swift_retain(v3);
    swift_release(v20);
    objc_msgSend(v16, "animateWithDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:", 0, v17, v19, 0.5, 0.0, 0.9, 0.1);
    _Block_release(v19);
    _Block_release(v17);
  }
}

uint64_t sub_54430(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

void sub_5446C(char **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void **aBlock;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;

  v3 = v2;
  v6 = (char *)type metadata accessor for DispatchPredicate(0);
  v7 = *((_QWORD *)v6 - 1);
  __chkstk_darwin(v6);
  v9 = (void ***)((char *)&aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_37F2C();
  *v9 = static OS_dispatch_queue.main.getter();
  (*(void (**)(_QWORD *, _QWORD, char *))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  v10 = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, char *))(v7 + 8))(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    v6 = sub_57944(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
    *a1 = v6;
    goto LABEL_4;
  }
  if (!a1)
    goto LABEL_7;
  v10 = swift_allocObject(&unk_A1888, 32, 7);
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  a1 = (char **)(v3 + 80);
  swift_beginAccess(v3 + 80, &aBlock, 33, 0);
  v6 = *(char **)(v3 + 80);
  swift_retain(a2);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
  *(_QWORD *)(v3 + 80) = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_11;
LABEL_4:
  v13 = *((_QWORD *)v6 + 2);
  v12 = *((_QWORD *)v6 + 3);
  if (v13 >= v12 >> 1)
  {
    v6 = sub_57944((char *)(v12 > 1), v13 + 1, 1, v6);
    *a1 = v6;
  }
  *((_QWORD *)v6 + 2) = v13 + 1;
  v14 = &v6[16 * v13];
  *((_QWORD *)v14 + 4) = sub_2AC14;
  *((_QWORD *)v14 + 5) = v10;
  swift_endAccess(&aBlock);
LABEL_7:
  if ((*(_BYTE *)(v3 + 74) & 1) == 0)
  {
    *(_WORD *)(v3 + 73) = 256;
    v15 = (void *)objc_opt_self(UIView);
    v24 = sub_547FC;
    v25 = v3;
    aBlock = _NSConcreteStackBlock;
    v21 = 1107296256;
    v22 = sub_2A1A8;
    v23 = &unk_A1828;
    v16 = _Block_copy(&aBlock);
    v17 = v25;
    swift_retain(v3);
    swift_release(v17);
    v24 = sub_5485C;
    v25 = v3;
    aBlock = _NSConcreteStackBlock;
    v21 = 1107296256;
    v22 = sub_54430;
    v23 = &unk_A1850;
    v18 = _Block_copy(&aBlock);
    v19 = v25;
    swift_retain(v3);
    swift_release(v19);
    objc_msgSend(v15, "animateWithDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:", 0, v16, v18, 0.5, 0.0, 0.9, 0.1);
    _Block_release(v18);
    _Block_release(v16);
  }
}

uint64_t sub_54710(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  _BYTE v10[24];

  objc_msgSend(*(id *)(a2 + 16), "setHidden:", 1);
  result = swift_beginAccess(a2 + 80, v10, 0, 0);
  v4 = *(_QWORD *)(a2 + 80);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain(v4);
    v6 = (_QWORD *)(v4 + 40);
    do
    {
      v8 = (void (*)(uint64_t))*(v6 - 1);
      v7 = *v6;
      v9 = swift_retain(*v6);
      v8(v9);
      swift_release(v7);
      v6 += 2;
      --v5;
    }
    while (v5);
    return swift_bridgeObjectRelease(v4);
  }
  return result;
}

uint64_t sub_547B0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  return swift_deallocClassInstance(v0, 88, 7);
}

uint64_t type metadata accessor for HotReloadStatusHUD()
{
  return objc_opt_self(_TtC5JSApp18HotReloadStatusHUD);
}

id sub_547FC()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 16);
  objc_msgSend(v1, "frame");
  return objc_msgSend(v1, "setFrame:");
}

uint64_t sub_54844(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_54854(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_5485C(uint64_t a1)
{
  uint64_t v1;

  return sub_54710(a1, v1);
}

uint64_t sub_54864()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

id sub_54888()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 16);
  objc_msgSend(v1, "frame");
  return objc_msgSend(v1, "setFrame:");
}

void sub_548D0()
{
  uint64_t v0;

  *(_WORD *)(v0 + 72) = 256;
}

unint64_t sub_548DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_B9178;
  if (!qword_B9178)
  {
    type metadata accessor for Level(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UIWindowLevel, v1);
    atomic_store(result, (unint64_t *)&qword_B9178);
  }
  return result;
}

uint64_t sub_5493C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t initializeBufferWithCopyOfBuffer for FigaroClickEvent.Location(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t sub_54988(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_549A8(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

uint64_t type metadata accessor for Weak(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_549DC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Weak);
}

uint64_t sub_549DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

unint64_t static OfflineCache.cachePath.getter()
{
  return 0xD000000000000025;
}

id sub_54A50()
{
  id result;

  result = sub_54A70();
  byte_B9200 = result & 1;
  return result;
}

id sub_54A70()
{
  id v0;
  NSString v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "BOOLForKey:", v1);

  if ((_DWORD)v2)
  {
    if (qword_B8180 != -1)
      swift_once(&qword_B8180, sub_56EDC);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_2D6E0(v3, (uint64_t)qword_B9308);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_0, v5, v6, "Generating the offline cache", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

  }
  return v2;
}

uint64_t static OfflineCache.generateCache.getter()
{
  return sub_54E54(&qword_B8138, (unsigned __int8 *)&byte_B9200);
}

uint64_t static OfflineCache.generateCache.setter(char a1)
{
  return sub_54F38(a1, &qword_B8138, &byte_B9200, (uint64_t)sub_54A50);
}

uint64_t (*static OfflineCache.generateCache.modify(uint64_t a1))(_QWORD)
{
  if (qword_B8138 != -1)
    swift_once(&qword_B8138, sub_54A50);
  swift_beginAccess(&byte_B9200, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_54C84()
{
  uint64_t result;

  result = sub_54CA4();
  byte_B9201 = result & 1;
  return result;
}

uint64_t sub_54CA4()
{
  id v0;
  NSString v1;
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _BYTE v9[24];

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "BOOLForKey:", v1);

  if (!v2)
    return 0;
  if (qword_B8138 != -1)
    swift_once(&qword_B8138, sub_54A50);
  swift_beginAccess(&byte_B9200, v9, 0, 0);
  if ((byte_B9200 & 1) != 0)
    return 0;
  if (qword_B8180 != -1)
    swift_once(&qword_B8180, sub_56EDC);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_2D6E0(v4, (uint64_t)qword_B9308);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_0, v6, v7, "Running from offline cache", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  return 1;
}

uint64_t static OfflineCache.runFromCache.getter()
{
  return sub_54E54(&qword_B8140, (unsigned __int8 *)&byte_B9201);
}

uint64_t sub_54E54(_QWORD *a1, unsigned __int8 *a2)
{
  _BYTE v4[24];

  if (*a1 != -1)
    swift_once();
  swift_beginAccess(a2, v4, 0, 0);
  return *a2;
}

uint64_t sub_54EC4(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned __int8 *a4, uint64_t a5)
{
  _BYTE v7[24];

  if (*a3 != -1)
    swift_once(a3, a5);
  swift_beginAccess(a4, v7, 0, 0);
  return *a4;
}

uint64_t static OfflineCache.runFromCache.setter(char a1)
{
  return sub_54F38(a1, &qword_B8140, &byte_B9201, (uint64_t)sub_54C84);
}

uint64_t sub_54F38(char a1, _QWORD *a2, _BYTE *a3, uint64_t a4)
{
  uint64_t result;
  _BYTE v7[24];

  if (*a2 != -1)
    swift_once(a2, a4);
  result = swift_beginAccess(a3, v7, 1, 0);
  *a3 = a1 & 1;
  return result;
}

uint64_t sub_54FB4(uint64_t a1, uint64_t a2, char a3, _QWORD *a4, _BYTE *a5, uint64_t a6)
{
  uint64_t result;
  _BYTE v9[24];

  if (*a4 != -1)
    swift_once(a4, a6);
  result = swift_beginAccess(a5, v9, 1, 0);
  *a5 = a3;
  return result;
}

uint64_t (*static OfflineCache.runFromCache.modify(uint64_t a1))(_QWORD)
{
  if (qword_B8140 != -1)
    swift_once(&qword_B8140, sub_54C84);
  swift_beginAccess(&byte_B9201, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_55084(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_57A50(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_551D4(uint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t *v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  int64_t v37;
  uint64_t v38;
  _QWORD v39[2];
  uint64_t v40;
  int64_t v41;
  unint64_t v42;

  v3 = *(_QWORD *)(result + 16);
  v4 = (_QWORD *)*v1;
  v5 = *(_QWORD *)(*v1 + 16);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v7 = result;
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v9 = v4[3] >> 1, v9 < v6))
  {
    if (v5 <= v6)
      v10 = v5 + v3;
    else
      v10 = v5;
    v4 = sub_57A50(isUniquelyReferenced_nonNull_native, v10, 1, v4);
    v9 = v4[3] >> 1;
  }
  v11 = v4[2];
  v12 = v9 - v11;
  result = sub_3FC08((uint64_t)v39, &v4[2 * v11 + 4], v9 - v11, v7);
  if (result < v3)
    goto LABEL_16;
  if (result)
  {
    v14 = v4[2];
    v15 = __OFADD__(v14, result);
    v16 = v14 + result;
    if (v15)
    {
      __break(1u);
      goto LABEL_50;
    }
    v4[2] = v16;
  }
  if (result != v12)
  {
    v17 = v39[0];
LABEL_14:
    result = sub_2E5CC(v17);
    *v1 = v4;
    return result;
  }
LABEL_17:
  v2 = v4[2];
  v3 = v39[0];
  v38 = v39[1];
  v13 = v40;
  v6 = v41;
  if (v42)
  {
    v18 = (v42 - 1) & v42;
    v19 = __clz(__rbit64(v42)) | (v41 << 6);
    v37 = (unint64_t)(v40 + 64) >> 6;
    goto LABEL_19;
  }
LABEL_50:
  v33 = v6 + 1;
  if (__OFADD__(v6, 1))
    goto LABEL_68;
  v37 = (unint64_t)(v13 + 64) >> 6;
  if (v33 >= v37)
  {
    v17 = v3;
    goto LABEL_14;
  }
  v34 = *(_QWORD *)(v38 + 8 * v33);
  v35 = v6 + 1;
  if (v34)
    goto LABEL_53;
  v35 = v6 + 2;
  if (v6 + 2 >= v37)
    goto LABEL_47;
  v34 = *(_QWORD *)(v38 + 8 * v35);
  if (!v34)
  {
    v35 = v6 + 3;
    if (v6 + 3 >= v37)
      goto LABEL_47;
    v34 = *(_QWORD *)(v38 + 8 * v35);
    if (!v34)
    {
      v35 = v6 + 4;
      if (v6 + 4 >= v37)
        goto LABEL_47;
      v34 = *(_QWORD *)(v38 + 8 * v35);
      if (!v34)
      {
        v35 = v6 + 5;
        if (v6 + 5 < v37)
        {
          v34 = *(_QWORD *)(v38 + 8 * v35);
          if (!v34)
          {
            v36 = v6 + 6;
            do
            {
              if (v37 == v36)
                goto LABEL_47;
              v34 = *(_QWORD *)(v38 + 8 * v36++);
            }
            while (!v34);
            v35 = v36 - 1;
          }
          goto LABEL_53;
        }
LABEL_47:
        v17 = v3;
        goto LABEL_14;
      }
    }
  }
LABEL_53:
  v18 = (v34 - 1) & v34;
  v19 = __clz(__rbit64(v34)) + (v35 << 6);
  v6 = v35;
LABEL_19:
  v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v19);
  v22 = *v20;
  v21 = v20[1];
  result = swift_bridgeObjectRetain(v21);
  while (1)
  {
    v23 = v4[3];
    v24 = v23 >> 1;
    if ((uint64_t)(v23 >> 1) < v2 + 1)
      break;
    if (v2 < v24)
      goto LABEL_24;
LABEL_21:
    v4[2] = v2;
  }
  result = (uint64_t)sub_57A50((_QWORD *)(v23 > 1), v2 + 1, 1, v4);
  v4 = (_QWORD *)result;
  v24 = *(_QWORD *)(result + 24) >> 1;
  if (v2 >= v24)
    goto LABEL_21;
  while (1)
  {
LABEL_24:
    v25 = &v4[2 * v2 + 4];
    *v25 = v22;
    v25[1] = v21;
    ++v2;
    if (v18)
    {
      v26 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v27 = v26 | (v6 << 6);
      goto LABEL_42;
    }
    v28 = v6 + 1;
    if (__OFADD__(v6, 1))
      break;
    if (v28 >= v37)
      goto LABEL_46;
    v29 = *(_QWORD *)(v38 + 8 * v28);
    v30 = v6 + 1;
    if (!v29)
    {
      v30 = v6 + 2;
      if (v6 + 2 >= v37)
        goto LABEL_46;
      v29 = *(_QWORD *)(v38 + 8 * v30);
      if (!v29)
      {
        v30 = v6 + 3;
        if (v6 + 3 >= v37)
          goto LABEL_46;
        v29 = *(_QWORD *)(v38 + 8 * v30);
        if (!v29)
        {
          v30 = v6 + 4;
          if (v6 + 4 >= v37)
            goto LABEL_46;
          v29 = *(_QWORD *)(v38 + 8 * v30);
          if (!v29)
          {
            v30 = v6 + 5;
            if (v6 + 5 >= v37)
              goto LABEL_46;
            v29 = *(_QWORD *)(v38 + 8 * v30);
            if (!v29)
            {
              v31 = v6 + 6;
              while (v37 != v31)
              {
                v29 = *(_QWORD *)(v38 + 8 * v31++);
                if (v29)
                {
                  v30 = v31 - 1;
                  goto LABEL_41;
                }
              }
LABEL_46:
              v4[2] = v2;
              goto LABEL_47;
            }
          }
        }
      }
    }
LABEL_41:
    v18 = (v29 - 1) & v29;
    v27 = __clz(__rbit64(v29)) + (v30 << 6);
    v6 = v30;
LABEL_42:
    v32 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v27);
    v22 = *v32;
    v21 = v32[1];
    if (v2 >= v24)
    {
      result = swift_bridgeObjectRetain(v21);
      goto LABEL_21;
    }
    result = swift_bridgeObjectRetain(v21);
  }
  __break(1u);
LABEL_68:
  __break(1u);
  return result;
}

_QWORD *static OfflineCache.cacheFileCandidatesForHTTPPreLaunch()()
{
  return sub_55668((void *)0x800000000008A370, (void *)0x800000000008A390);
}

_QWORD *static OfflineCache.cacheDirCandidatesForHTTPPostLaunch()()
{
  return sub_568A0((void *)0x800000000008A350);
}

_QWORD *static OfflineCache.cacheFileCandidatesForTUIPreLaunch()()
{
  return sub_55668((void *)0x800000000008A2F0, (void *)0x800000000008A310);
}

_QWORD *sub_55668(void *a1, void *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11[2];
  _QWORD *v12;

  v4 = _s5JSApp12OfflineCacheC011alternativeC5NamesSaySSGyFZ_0();
  v5 = v4;
  v12 = _swiftEmptyArrayStorage;
  v6 = v4[2];
  if (v6)
  {
    swift_bridgeObjectRetain(v4);
    v7 = v5 + 5;
    do
    {
      v8 = *v7;
      v11[0] = *(v7 - 1);
      v11[1] = v8;
      swift_bridgeObjectRetain(v8);
      sub_55764(v11, a1, a2, &v10);
      v7 += 2;
      swift_bridgeObjectRelease(v8);
      sub_55084(v10);
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease_n(v5, 2);
    return v12;
  }
  else
  {
    swift_bridgeObjectRelease(v4);
    return _swiftEmptyArrayStorage;
  }
}

uint64_t sub_55764@<X0>(uint64_t *a1@<X0>, void *a2@<X2>, void *a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t result;

  v5 = *a1;
  v6 = (void *)a1[1];
  v7 = sub_29EF0(&qword_B8618);
  v8 = swift_allocObject(v7, 64, 7);
  *(_OWORD *)(v8 + 16) = xmmword_8E270;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease(0xE000000000000000);
  v9._countAndFlagsBits = v5;
  v9._object = v6;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0x7473696C702ELL;
  v10._object = (void *)0xE600000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = 0xD00000000000001ALL;
  v11._object = a2;
  v12 = String.append(pathComponent:)(v11);
  swift_bridgeObjectRelease(a2);
  *(Swift::String *)(v8 + 32) = v12;
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease(0xE000000000000000);
  v13._countAndFlagsBits = v5;
  v13._object = v6;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0x7473696C702ELL;
  v14._object = (void *)0xE600000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0xD000000000000010;
  v15._object = a3;
  v16 = String.append(pathComponent:)(v15);
  result = swift_bridgeObjectRelease(a3);
  *(Swift::String *)(v8 + 48) = v16;
  *a4 = v8;
  return result;
}

Class sub_558F4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4;
  Class isa;

  swift_getObjCClassMetadata(a1);
  v4 = a3();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v4);
  return isa;
}

_QWORD *static OfflineCache.cacheDirCandidatesForTUIPostLaunch()()
{
  return sub_568A0((void *)0x800000000008A2D0);
}

Class sub_55974(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD *v3;
  Class isa;

  v3 = sub_568A0(a3);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v3);
  return isa;
}

id OfflineCache.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for OfflineCache();
  return objc_msgSendSuper2(&v2, "init");
}

id OfflineCache.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for OfflineCache();
  return objc_msgSendSuper2(&v2, "dealloc");
}

unint64_t sub_55A54()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _BYTE v77[664];

  v0 = sub_29EF0(&qword_B9230);
  inited = swift_initStackObject(v0, v77);
  *(_OWORD *)(inited + 16) = xmmword_8E5C0;
  *(_QWORD *)(inited + 32) = 0x50413032314ALL;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  v2 = sub_29EF0(&qword_B8618);
  v3 = swift_allocObject(v2, 64, 7);
  *(_OWORD *)(v3 + 16) = xmmword_8E270;
  *(_QWORD *)(v3 + 32) = 0x50413032314ALL;
  *(_QWORD *)(v3 + 40) = 0xE600000000000000;
  *(_QWORD *)(v3 + 48) = 0x50413132314ALL;
  *(_QWORD *)(v3 + 56) = 0xE600000000000000;
  *(_QWORD *)(inited + 48) = v3;
  *(_QWORD *)(inited + 56) = 0x50413132314ALL;
  *(_QWORD *)(inited + 64) = 0xE600000000000000;
  v4 = swift_allocObject(v2, 64, 7);
  *(_OWORD *)(v4 + 16) = xmmword_8E270;
  *(_QWORD *)(v4 + 32) = 0x50413032314ALL;
  *(_QWORD *)(v4 + 40) = 0xE600000000000000;
  *(_QWORD *)(v4 + 48) = 0x50413132314ALL;
  *(_QWORD *)(v4 + 56) = 0xE600000000000000;
  *(_QWORD *)(inited + 72) = v4;
  *(_QWORD *)(inited + 80) = 0x504131374ALL;
  *(_QWORD *)(inited + 88) = 0xE500000000000000;
  v5 = swift_allocObject(v2, 112, 7);
  *(_OWORD *)(v5 + 16) = xmmword_8E5D0;
  *(_QWORD *)(v5 + 32) = 0x504131374ALL;
  *(_QWORD *)(v5 + 40) = 0xE500000000000000;
  *(_QWORD *)(v5 + 48) = 0x504132374ALL;
  *(_QWORD *)(v5 + 56) = 0xE500000000000000;
  *(_QWORD *)(v5 + 64) = 0x504133374ALL;
  *(_QWORD *)(v5 + 72) = 0xE500000000000000;
  *(_QWORD *)(v5 + 80) = 0x50417331374ALL;
  *(_QWORD *)(v5 + 88) = 0xE600000000000000;
  *(_QWORD *)(v5 + 96) = 0x50417332374ALL;
  *(_QWORD *)(v5 + 104) = 0xE600000000000000;
  *(_QWORD *)(inited + 96) = ((uint64_t (*)(void))URLParser.ParserURLType.rawValue.getter)();
  *(_QWORD *)(inited + 104) = 0x504132374ALL;
  *(_QWORD *)(inited + 112) = 0xE500000000000000;
  v6 = swift_allocObject(v2, 112, 7);
  v7 = sub_52F60(v6, 5);
  *v8 = 0x504131374ALL;
  v8[1] = 0xE500000000000000;
  v8[2] = 0x504132374ALL;
  v8[3] = 0xE500000000000000;
  v8[4] = 0x504133374ALL;
  v8[5] = 0xE500000000000000;
  v8[6] = 0x50417331374ALL;
  v8[7] = 0xE600000000000000;
  v8[8] = 0x50417332374ALL;
  v8[9] = 0xE600000000000000;
  *(_QWORD *)(inited + 120) = URLParser.ParserURLType.rawValue.getter(v7);
  *(_QWORD *)(inited + 128) = 0x504133374ALL;
  *(_QWORD *)(inited + 136) = 0xE500000000000000;
  v9 = swift_allocObject(v2, 112, 7);
  v10 = sub_52F60(v9, 5);
  *v11 = 0x504131374ALL;
  v11[1] = 0xE500000000000000;
  v11[2] = 0x504132374ALL;
  v11[3] = 0xE500000000000000;
  v11[4] = 0x504133374ALL;
  v11[5] = 0xE500000000000000;
  v11[6] = 0x50417331374ALL;
  v11[7] = 0xE600000000000000;
  v11[8] = 0x50417332374ALL;
  v11[9] = 0xE600000000000000;
  *(_QWORD *)(inited + 144) = URLParser.ParserURLType.rawValue.getter(v10);
  *(_QWORD *)(inited + 152) = 0x50417331374ALL;
  *(_QWORD *)(inited + 160) = 0xE600000000000000;
  v12 = swift_allocObject(v2, 112, 7);
  v13 = sub_52F60(v12, 5);
  *v14 = 0x504131374ALL;
  v14[1] = 0xE500000000000000;
  v14[2] = 0x504132374ALL;
  v14[3] = 0xE500000000000000;
  v14[4] = 0x504133374ALL;
  v14[5] = 0xE500000000000000;
  v14[6] = 0x50417331374ALL;
  v14[7] = 0xE600000000000000;
  v14[8] = 0x50417332374ALL;
  v14[9] = 0xE600000000000000;
  *(_QWORD *)(inited + 168) = URLParser.ParserURLType.rawValue.getter(v13);
  *(_QWORD *)(inited + 176) = 0x50417332374ALL;
  *(_QWORD *)(inited + 184) = 0xE600000000000000;
  v15 = swift_allocObject(v2, 112, 7);
  v16 = sub_52F60(v15, 5);
  *v17 = 0x504131374ALL;
  v17[1] = 0xE500000000000000;
  v17[2] = 0x504132374ALL;
  v17[3] = 0xE500000000000000;
  v17[4] = 0x504133374ALL;
  v17[5] = 0xE500000000000000;
  v17[6] = 0x50417331374ALL;
  v17[7] = 0xE600000000000000;
  v17[8] = 0x50417332374ALL;
  v17[9] = 0xE600000000000000;
  *(_QWORD *)(inited + 192) = URLParser.ParserURLType.rawValue.getter(v16);
  *(_QWORD *)(inited + 200) = 0x504131384ALL;
  *(_QWORD *)(inited + 208) = 0xE500000000000000;
  v18 = swift_allocObject(v2, 80, 7);
  v19 = sub_52F60(v18, 3);
  *v20 = 0x504131384ALL;
  v20[1] = 0xE500000000000000;
  v20[2] = 0x504132384ALL;
  v20[3] = 0xE500000000000000;
  v20[4] = 0x504133384ALL;
  v20[5] = 0xE500000000000000;
  *(_QWORD *)(inited + 216) = URLParser.ParserURLType.rawValue.getter(v19);
  *(_QWORD *)(inited + 224) = 0x504132384ALL;
  *(_QWORD *)(inited + 232) = 0xE500000000000000;
  v21 = swift_allocObject(v2, 80, 7);
  v22 = sub_52F60(v21, 3);
  *v23 = 0x504131384ALL;
  v23[1] = 0xE500000000000000;
  v23[2] = 0x504132384ALL;
  v23[3] = 0xE500000000000000;
  v23[4] = 0x504133384ALL;
  v23[5] = 0xE500000000000000;
  *(_QWORD *)(inited + 240) = URLParser.ParserURLType.rawValue.getter(v22);
  *(_QWORD *)(inited + 248) = 0x504133384ALL;
  *(_QWORD *)(inited + 256) = 0xE500000000000000;
  v24 = swift_allocObject(v2, 80, 7);
  v25 = sub_52F60(v24, 3);
  *v26 = 0x504131384ALL;
  v26[1] = 0xE500000000000000;
  v26[2] = 0x504132384ALL;
  v26[3] = 0xE500000000000000;
  v26[4] = 0x504133384ALL;
  v26[5] = 0xE500000000000000;
  *(_QWORD *)(inited + 264) = URLParser.ParserURLType.rawValue.getter(v25);
  *(_QWORD *)(inited + 272) = 0x50413730324ALL;
  *(_QWORD *)(inited + 280) = 0xE600000000000000;
  v27 = swift_allocObject(v2, 64, 7);
  v28 = sub_52F60(v27, 2);
  *v29 = 0x50413730324ALL;
  v29[1] = 0xE600000000000000;
  v29[2] = 0x50413830324ALL;
  v29[3] = 0xE600000000000000;
  *(_QWORD *)(inited + 288) = URLParser.ParserURLType.rawValue.getter(v28);
  *(_QWORD *)(inited + 296) = 0x50413830324ALL;
  *(_QWORD *)(inited + 304) = 0xE600000000000000;
  v30 = swift_allocObject(v2, 64, 7);
  v31 = sub_52F60(v30, 2);
  *v32 = 0x50413730324ALL;
  v32[1] = 0xE600000000000000;
  v32[2] = 0x50413830324ALL;
  v32[3] = 0xE600000000000000;
  *(_QWORD *)(inited + 312) = URLParser.ParserURLType.rawValue.getter(v31);
  *(_QWORD *)(inited + 320) = 0x504138394ALL;
  *(_QWORD *)(inited + 328) = 0xE500000000000000;
  v33 = swift_allocObject(v2, 96, 7);
  v34 = sub_52F60(v33, 4);
  *v35 = 0x504138394ALL;
  v35[1] = 0xE500000000000000;
  v35[2] = 0x504139394ALL;
  v35[3] = 0xE500000000000000;
  v35[4] = 0x50416138394ALL;
  v35[5] = 0xE600000000000000;
  v35[6] = 0x50416139394ALL;
  v35[7] = 0xE600000000000000;
  *(_QWORD *)(inited + 336) = URLParser.ParserURLType.rawValue.getter(v34);
  *(_QWORD *)(inited + 344) = 0x504139394ALL;
  *(_QWORD *)(inited + 352) = 0xE500000000000000;
  v36 = swift_allocObject(v2, 96, 7);
  v37 = sub_52F60(v36, 4);
  *v38 = 0x504138394ALL;
  v38[1] = 0xE500000000000000;
  v38[2] = 0x504139394ALL;
  v38[3] = 0xE500000000000000;
  v38[4] = 0x50416138394ALL;
  v38[5] = 0xE600000000000000;
  v38[6] = 0x50416139394ALL;
  v38[7] = 0xE600000000000000;
  *(_QWORD *)(inited + 360) = URLParser.ParserURLType.rawValue.getter(v37);
  *(_QWORD *)(inited + 368) = 0x50416138394ALL;
  *(_QWORD *)(inited + 376) = 0xE600000000000000;
  v39 = swift_allocObject(v2, 96, 7);
  v40 = sub_52F60(v39, 4);
  *v41 = 0x504138394ALL;
  v41[1] = 0xE500000000000000;
  v41[2] = 0x504139394ALL;
  v41[3] = 0xE500000000000000;
  v41[4] = 0x50416138394ALL;
  v41[5] = 0xE600000000000000;
  v41[6] = 0x50416139394ALL;
  v41[7] = 0xE600000000000000;
  *(_QWORD *)(inited + 384) = URLParser.ParserURLType.rawValue.getter(v40);
  *(_QWORD *)(inited + 392) = 0x50416139394ALL;
  *(_QWORD *)(inited + 400) = 0xE600000000000000;
  v42 = swift_allocObject(v2, 96, 7);
  v43 = sub_52F60(v42, 4);
  *v44 = 0x504138394ALL;
  v44[1] = 0xE500000000000000;
  v44[2] = 0x504139394ALL;
  v44[3] = 0xE500000000000000;
  v44[4] = 0x50416138394ALL;
  v44[5] = 0xE600000000000000;
  v44[6] = 0x50416139394ALL;
  v44[7] = 0xE600000000000000;
  *(_QWORD *)(inited + 408) = URLParser.ParserURLType.rawValue.getter(v43);
  *(_QWORD *)(inited + 416) = 0x504136364ELL;
  *(_QWORD *)(inited + 424) = 0xE500000000000000;
  v45 = swift_allocObject(v2, 64, 7);
  v46 = sub_52F60(v45, 2);
  *v47 = 0x504136364ELL;
  v47[1] = 0xE500000000000000;
  v47[2] = 0x50416D36364ELL;
  v47[3] = 0xE600000000000000;
  *(_QWORD *)(inited + 432) = URLParser.ParserURLType.rawValue.getter(v46);
  *(_QWORD *)(inited + 440) = 0x50416D36364ELL;
  *(_QWORD *)(inited + 448) = 0xE600000000000000;
  v48 = swift_allocObject(v2, 64, 7);
  v49 = sub_52F60(v48, 2);
  *v50 = 0x504136364ELL;
  v50[1] = 0xE500000000000000;
  v50[2] = 0x50416D36364ELL;
  v50[3] = 0xE600000000000000;
  *(_QWORD *)(inited + 456) = URLParser.ParserURLType.rawValue.getter(v49);
  *(_QWORD *)(inited + 464) = 0x5041303144;
  *(_QWORD *)(inited + 472) = 0xE500000000000000;
  v51 = swift_allocObject(v2, 64, 7);
  v52 = sub_52F60(v51, 2);
  *v53 = 0x5041303144;
  v53[1] = 0xE500000000000000;
  v53[2] = 0x504131303144;
  v53[3] = 0xE600000000000000;
  *(_QWORD *)(inited + 480) = URLParser.ParserURLType.rawValue.getter(v52);
  *(_QWORD *)(inited + 488) = 0x504131303144;
  *(_QWORD *)(inited + 496) = 0xE600000000000000;
  v54 = swift_allocObject(v2, 64, 7);
  v55 = sub_52F60(v54, 2);
  *v56 = 0x5041303144;
  v56[1] = 0xE500000000000000;
  v56[2] = 0x504131303144;
  v56[3] = 0xE600000000000000;
  *(_QWORD *)(inited + 504) = URLParser.ParserURLType.rawValue.getter(v55);
  *(_QWORD *)(inited + 512) = 0x5041313144;
  *(_QWORD *)(inited + 520) = 0xE500000000000000;
  v57 = swift_allocObject(v2, 64, 7);
  v58 = sub_52F60(v57, 2);
  *v59 = 0x5041313144;
  v59[1] = 0xE500000000000000;
  v59[2] = 0x504131313144;
  v59[3] = 0xE600000000000000;
  *(_QWORD *)(inited + 528) = URLParser.ParserURLType.rawValue.getter(v58);
  *(_QWORD *)(inited + 536) = 0x504131313144;
  *(_QWORD *)(inited + 544) = 0xE600000000000000;
  v60 = swift_allocObject(v2, 64, 7);
  v61 = sub_52F60(v60, 2);
  *v62 = 0x5041313144;
  v62[1] = 0xE500000000000000;
  v62[2] = 0x504131313144;
  v62[3] = 0xE600000000000000;
  *(_QWORD *)(inited + 552) = URLParser.ParserURLType.rawValue.getter(v61);
  *(_QWORD *)(inited + 560) = 0x5041313244;
  *(_QWORD *)(inited + 568) = 0xE500000000000000;
  v63 = swift_allocObject(v2, 64, 7);
  v64 = sub_52F60(v63, 2);
  *v65 = 0x5041313244;
  v65[1] = 0xE500000000000000;
  v65[2] = 0x504131313244;
  v65[3] = 0xE600000000000000;
  *(_QWORD *)(inited + 576) = URLParser.ParserURLType.rawValue.getter(v64);
  *(_QWORD *)(inited + 584) = 0x504131313244;
  *(_QWORD *)(inited + 592) = 0xE600000000000000;
  v66 = swift_allocObject(v2, 64, 7);
  v67 = sub_52F60(v66, 2);
  *v68 = 0x5041313244;
  v68[1] = 0xE500000000000000;
  v68[2] = 0x504131313244;
  v68[3] = 0xE600000000000000;
  *(_QWORD *)(inited + 600) = URLParser.ParserURLType.rawValue.getter(v67);
  *(_QWORD *)(inited + 608) = 0x5041323244;
  *(_QWORD *)(inited + 616) = 0xE500000000000000;
  v69 = swift_allocObject(v2, 64, 7);
  v70 = sub_52F60(v69, 2);
  *v71 = 0x5041323244;
  v71[1] = 0xE500000000000000;
  v71[2] = 0x504131323244;
  v71[3] = 0xE600000000000000;
  *(_QWORD *)(inited + 624) = URLParser.ParserURLType.rawValue.getter(v70);
  *(_QWORD *)(inited + 632) = 0x504131323244;
  *(_QWORD *)(inited + 640) = 0xE600000000000000;
  v72 = swift_allocObject(v2, 64, 7);
  v73 = sub_52F60(v72, 2);
  *v74 = 0x5041323244;
  v74[1] = 0xE500000000000000;
  v74[2] = 0x504131323244;
  v74[3] = 0xE600000000000000;
  *(_QWORD *)(inited + 648) = URLParser.ParserURLType.rawValue.getter(v73);
  v75 = URLParser.ParserURLType.rawValue.getter(inited);
  return sub_409AC(v75);
}

uint64_t sub_560B4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  v2 = result;
  v3 = *(unsigned __int8 *)(result + 32);
  result += 32;
  if (v3)
  {
    v4 = 0;
    v5 = v1 - 1;
    v6 = v2 + 33;
    while (v5 != v4)
    {
      if (!*(unsigned __int8 *)(v6 + v4++))
        return static String._fromUTF8Repairing(_:)(result, v4);
    }
    __break(1u);
    goto LABEL_9;
  }
  v4 = 0;
  return static String._fromUTF8Repairing(_:)(result, v4);
}

uint64_t sub_560FC()
{
  size_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;
  size_t v4;

  v4 = 0;
  sysctlbyname("hw.model", 0, &v4, 0, 0);
  v0 = v4;
  if ((v4 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
  }
  else
  {
    if (v4)
    {
      v1 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(v4, &type metadata for Int8);
      v1[2] = v0;
      bzero(v1 + 4, v0);
    }
    else
    {
      v1 = _swiftEmptyArrayStorage;
    }
    sysctlbyname("hw.model", v1 + 4, &v4, 0, 0);
    v2 = sub_560B4((uint64_t)v1);
    swift_bridgeObjectRelease(v1);
    return v2;
  }
  return result;
}

uint64_t *_s5JSApp12OfflineCacheC011alternativeC5NamesSaySSGyFZ_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  id v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  Swift::String v21;
  Swift::String v22;
  void *object;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  id v27;
  char *v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;

  v1 = sub_560FC();
  v3 = v2;
  v49 = _swiftEmptyArrayStorage;
  v4 = sub_55A54();
  if (*(_QWORD *)(v4 + 16))
  {
    swift_bridgeObjectRetain(v3);
    v5 = sub_4CF3C(v1, v3);
    if ((v6 & 1) != 0)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRelease_n(v3, 2);
      swift_bridgeObjectRelease(v4);
      goto LABEL_6;
    }
    swift_bridgeObjectRelease(v3);
  }
  swift_bridgeObjectRelease(v4);
  v8 = sub_29EF0(&qword_B8618);
  v7 = swift_allocObject(v8, 48, 7);
  *(_OWORD *)(v7 + 16) = xmmword_8DFE0;
  *(_QWORD *)(v7 + 32) = v1;
  *(_QWORD *)(v7 + 40) = v3;
LABEL_6:
  v9 = (uint64_t *)&v49;
  sub_55084(v7);
  v10 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v10, "bounds");
  v12 = v11;
  v14 = v13;
  objc_msgSend(v10, "scale");
  if (v12 > v14)
    v16 = v12;
  else
    v16 = v14;
  v17 = v15 * v16;
  if (v14 >= v12)
    v18 = v12;
  else
    v18 = v14;
  if ((~*(_QWORD *)&v17 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v17 <= -9.22337204e18)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v17 >= 9.22337204e18)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v19 = v15 * v18;
  v48 = (uint64_t)v17;
  v46 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v47 = v20;
  v9 = &v46;
  v21._countAndFlagsBits = 120;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  if ((~*(_QWORD *)&v19 & 0x7FF0000000000000) == 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (v19 <= -9.22337204e18)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (v19 < 9.22337204e18)
  {
    v48 = (uint64_t)v19;
    v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v22._object;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(object);
    v7 = v46;
    v0 = v47;
    v9 = v49;
    if ((swift_isUniquelyReferenced_nonNull_native(v49) & 1) != 0)
      goto LABEL_19;
    goto LABEL_41;
  }
LABEL_40:
  __break(1u);
LABEL_41:
  v9 = sub_57A50(0, v9[2] + 1, 1, v9);
LABEL_19:
  v25 = v9[2];
  v24 = v9[3];
  if (v25 >= v24 >> 1)
    v9 = sub_57A50((_QWORD *)(v24 > 1), v25 + 1, 1, v9);
  v9[2] = v25 + 1;
  v26 = &v9[2 * v25];
  v26[4] = v7;
  v26[5] = v0;
  v27 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v28 = (char *)objc_msgSend(v27, "userInterfaceIdiom");

  v29 = v28 == (_BYTE *)&dword_0 + 1;
  if (v28 == (_BYTE *)&dword_0 + 1)
    v30 = 1684099177;
  else
    v30 = 0x656E6F685069;
  if (v29)
    v31 = 0xE400000000000000;
  else
    v31 = 0xE600000000000000;
  v33 = v9[2];
  v32 = v9[3];
  if (v33 >= v32 >> 1)
    v9 = sub_57A50((_QWORD *)(v32 > 1), v33 + 1, 1, v9);
  v9[2] = v33 + 1;
  v34 = &v9[2 * v33];
  v34[4] = v30;
  v34[5] = v31;
  v49 = v9;
  if (qword_B8180 != -1)
    swift_once(&qword_B8180, sub_56EDC);
  v35 = type metadata accessor for Logger(0);
  sub_2D6E0(v35, (uint64_t)qword_B9308);
  v36 = v49;
  v37 = swift_bridgeObjectRetain_n(v49, 2);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v38, v39))
  {
    v40 = (uint8_t *)swift_slowAlloc(12, -1);
    v41 = swift_slowAlloc(32, -1);
    v46 = v41;
    *(_DWORD *)v40 = 136446210;
    v42 = Array.description.getter(v36, &type metadata for String);
    v44 = v43;
    v48 = sub_3A180(v42, v43, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v40 + 4, v40 + 12);
    swift_bridgeObjectRelease_n(v36, 2);
    swift_bridgeObjectRelease(v44);
    _os_log_impl(&dword_0, v38, v39, "Offline Cache names to try: %{public}s", v40, 0xCu);
    swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v40, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v36, 2);
  }
  swift_beginAccess(&v49, &v46, 0, 0);
  return v49;
}

_QWORD *_s5JSApp12OfflineCacheC25cacheFileCandidatesForBagSaySSGyFZ_0()
{
  uint64_t *v0;
  uint64_t *v1;
  int64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  unint64_t v10;
  unint64_t v11;

  v0 = _s5JSApp12OfflineCacheC011alternativeC5NamesSaySSGyFZ_0();
  v1 = v0;
  v2 = v0[2];
  if (v2)
  {
    sub_3AC50(0, v2, 0);
    v3 = v1 + 5;
    do
    {
      v4 = *(v3 - 1);
      v5 = (void *)*v3;
      swift_bridgeObjectRetain(*v3);
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease(0xE000000000000000);
      v6._countAndFlagsBits = v4;
      v6._object = v5;
      String.append(_:)(v6);
      v7._countAndFlagsBits = 0x7473696C702ELL;
      v7._object = (void *)0xE600000000000000;
      String.append(_:)(v7);
      v8._countAndFlagsBits = 0xD000000000000013;
      v8._object = (void *)0x800000000008A330;
      v9 = String.append(pathComponent:)(v8);
      swift_bridgeObjectRelease(v5);
      swift_bridgeObjectRelease(0x800000000008A330);
      v11 = _swiftEmptyArrayStorage[2];
      v10 = _swiftEmptyArrayStorage[3];
      if (v11 >= v10 >> 1)
        sub_3AC50(v10 > 1, v11 + 1, 1);
      v3 += 2;
      _swiftEmptyArrayStorage[2] = v11 + 1;
      *(Swift::String *)&_swiftEmptyArrayStorage[2 * v11 + 4] = v9;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(v1);
  }
  else
  {
    swift_bridgeObjectRelease(v0);
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_568A0(void *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  int64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v13;

  v1 = _s5JSApp12OfflineCacheC011alternativeC5NamesSaySSGyFZ_0();
  v2 = v1;
  v3 = v1[2];
  if (v3)
  {
    sub_3AC50(0, v3, 0);
    v13 = v2;
    v4 = v2 + 5;
    do
    {
      v5 = *(v4 - 1);
      v6 = (void *)*v4;
      swift_bridgeObjectRetain(*v4);
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease(0xE000000000000000);
      v7._countAndFlagsBits = v5;
      v7._object = v6;
      String.append(_:)(v7);
      v8._countAndFlagsBits = 0xD00000000000001BLL;
      v8._object = a1;
      v9 = String.append(pathComponent:)(v8);
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(a1);
      v11 = _swiftEmptyArrayStorage[2];
      v10 = _swiftEmptyArrayStorage[3];
      if (v11 >= v10 >> 1)
        sub_3AC50(v10 > 1, v11 + 1, 1);
      v4 += 2;
      _swiftEmptyArrayStorage[2] = v11 + 1;
      *(Swift::String *)&_swiftEmptyArrayStorage[2 * v11 + 4] = v9;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    swift_bridgeObjectRelease(v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t type metadata accessor for OfflineCache()
{
  return objc_opt_self(JSAOfflineCache);
}

id HarConfiguration.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HarConfiguration();
  return objc_msgSendSuper2(&v2, "init");
}

id HarConfiguration.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HarConfiguration();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id _s5JSApp16HarConfigurationC5setupyyFZ_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unsigned int v4;
  void *v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = sub_29EF0(&qword_B8438);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend((id)objc_opt_self(JSADevice), "isInternalBuild");
  v5 = (void *)objc_opt_self(AMSDefaults);
  v6 = v5;
  if (v4)
  {
    objc_msgSend(v5, "setIncludeFullResponseInHARLogging:", 1);
    if (qword_B80B0 != -1)
      swift_once(&qword_B80B0, sub_440A8);
    v7 = sub_2D6E0(v0, (uint64_t)qword_B8970);
    (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v7, v0);
    UserDefault.wrappedValue.getter(&v12, v0);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    v8 = v12;
    v9 = (void *)objc_opt_self(AMSEphemeralDefaults);
    if (v8 == 1)
    {
      objc_msgSend(v9, "setHARLoggingItemLimit:", 200);
      return objc_msgSend(v6, "setIncludeFullRequestInHARLogging:", 1);
    }
    else
    {
      objc_msgSend(v9, "setHARLoggingItemLimit:", 50);
      return objc_msgSend(v6, "setIncludeFullRequestInHARLogging:", 0);
    }
  }
  else
  {
    objc_msgSend(v5, "setIncludeFullResponseInHARLogging:", 0);
    return objc_msgSend(v6, "setIncludeFullRequestInHARLogging:", 0);
  }
}

uint64_t type metadata accessor for HarConfiguration()
{
  return objc_opt_self(JSAHarConfiguration);
}

uint64_t sub_56C98(uint64_t a1)
{
  return sub_57008(a1, qword_B9260, 0xD000000000000017, 0x800000000008A4B0);
}

uint64_t static Logger.accountController.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_56D18(&qword_B8148, (uint64_t)qword_B9260, (uint64_t)sub_56C98, a1);
}

uint64_t sub_56CD8(uint64_t a1)
{
  return sub_57008(a1, qword_B9278, 0xD000000000000012, 0x800000000008A490);
}

uint64_t static Logger.figaroEvents.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_56D18(&qword_B8150, (uint64_t)qword_B9278, (uint64_t)sub_56CD8, a1);
}

uint64_t sub_56D18@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  if (*a1 != -1)
    swift_once(a1, a3);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_2D6E0(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a4, v7, v6);
}

uint64_t sub_56D80(uint64_t a1)
{
  return sub_57008(a1, qword_B9290, 0x6F482E707041534ALL, 0xEF64616F6C655274);
}

uint64_t static Logger.hotReload.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_56D18(&qword_B8158, (uint64_t)qword_B9290, (uint64_t)sub_56D80, a1);
}

uint64_t sub_56DC8(uint64_t a1)
{
  return sub_57008(a1, qword_B92A8, 0x654A2E707041534ALL, 0xED00006B63615074);
}

uint64_t static Logger.jetPack.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_56D18(&qword_B8160, (uint64_t)qword_B92A8, (uint64_t)sub_56DC8, a1);
}

uint64_t sub_56E10(uint64_t a1)
{
  return sub_57008(a1, qword_B92C0, 0xD000000000000012, 0x800000000008A470);
}

uint64_t static Logger.localization.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_56D18(&qword_B8168, (uint64_t)qword_B92C0, (uint64_t)sub_56E10, a1);
}

uint64_t sub_56E50(uint64_t a1)
{
  return sub_57008(a1, qword_B92D8, 0x6F4C2E707041534ALL, 0xEC00000070756B6FLL);
}

uint64_t static Logger.lookup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_56D18(&qword_B8170, (uint64_t)qword_B92D8, (uint64_t)sub_56E50, a1);
}

uint64_t sub_56E94(uint64_t a1)
{
  return sub_57008(a1, qword_B92F0, 0x654D2E707041534ALL, 0xED00007363697274);
}

uint64_t static Logger.metrics.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_56D18(&qword_B8178, (uint64_t)qword_B92F0, (uint64_t)sub_56E94, a1);
}

uint64_t sub_56EDC(uint64_t a1)
{
  return sub_57008(a1, qword_B9308, 0xD000000000000012, 0x800000000008A450);
}

uint64_t static Logger.offlineCache.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_56D18(&qword_B8180, (uint64_t)qword_B9308, (uint64_t)sub_56EDC, a1);
}

uint64_t sub_56F1C(uint64_t a1)
{
  return sub_57008(a1, qword_B9320, 0xD000000000000018, 0x8000000000088AC0);
}

uint64_t static Logger.packageProvisioner.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_56D18(&qword_B8188, (uint64_t)qword_B9320, (uint64_t)sub_56F1C, a1);
}

uint64_t sub_56F5C(uint64_t a1)
{
  return sub_57008(a1, qword_B9338, 0xD000000000000014, 0x8000000000089380);
}

uint64_t static Logger.requestEncoder.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_56D18(&qword_B8190, (uint64_t)qword_B9338, (uint64_t)sub_56F5C, a1);
}

uint64_t sub_56F9C(uint64_t a1)
{
  return sub_57008(a1, qword_B9350, 0xD000000000000019, 0x800000000008A430);
}

uint64_t static Logger.uiApplicationHelper.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_56D18(&qword_B8198, (uint64_t)qword_B9350, (uint64_t)sub_56F9C, a1);
}

uint64_t sub_56FDC(uint64_t a1)
{
  return sub_57008(a1, qword_B9368, 0x52552E707041534ALL, 0xEF7265737261504CLL);
}

uint64_t sub_57008(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for Logger(0);
  sub_38104(v7, a2);
  sub_2D6E0(v7, (uint64_t)a2);
  return Logger.init(subsystem:category:)(0xD000000000000010, 0x800000000008A410, a3, a4);
}

uint64_t static Logger.urlParser.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_56D18(&qword_B81A0, (uint64_t)qword_B9368, (uint64_t)sub_56FDC, a1);
}

uint64_t sub_571F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  id v16;
  id v17;
  int v18;
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  id v31;
  _QWORD v32[4];
  _QWORD v33[4];

  v3 = sub_29EF0((uint64_t *)&unk_B8CA0);
  __chkstk_darwin(v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v30 = (char *)&v26 - v11;
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    v27 = a1;
    v28 = v1;
    v13 = a1 + 32;
    swift_bridgeObjectRetain(a1);
    v14 = _swiftEmptyArrayStorage;
    v29 = v10;
    do
    {
      sub_37EF0(v13, (uint64_t)v33);
      sub_37EF0((uint64_t)v33, (uint64_t)v32);
      v15 = sub_5830C();
      if (swift_dynamicCast(&v31, v32, (char *)&type metadata for Any + 8, v15, 6))
      {
        v16 = v31;
        v17 = objc_msgSend(v31, "activityItem");
        _bridgeAnyObjectToAny(_:)(v32, v17);

        swift_unknownObjectRelease(v17);
      }
      else
      {
        sub_37EF0((uint64_t)v33, (uint64_t)v32);
      }
      v18 = swift_dynamicCast(v5, v32, (char *)&type metadata for Any + 8, v6, 6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, v18 ^ 1u, 1, v6);
      sub_3789C(v33);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
      {
        sub_58348((uint64_t)v5);
      }
      else
      {
        v19 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
        v20 = v30;
        v19(v30, v5, v6);
        v19(v10, v20, v6);
        if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
          v14 = (_QWORD *)sub_57B5C(0, v14[2] + 1, 1, (unint64_t)v14);
        v22 = v14[2];
        v21 = v14[3];
        if (v22 >= v21 >> 1)
          v14 = (_QWORD *)sub_57B5C(v21 > 1, v22 + 1, 1, (unint64_t)v14);
        v14[2] = v22 + 1;
        v23 = (unint64_t)v14
            + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
            + *(_QWORD *)(v7 + 72) * v22;
        v10 = v29;
        v19((char *)v23, v29, v6);
      }
      v13 += 32;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease(v27);
    v1 = v28;
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  v24 = *(_QWORD *)(v1 + OBJC_IVAR___JSACopyLinkActivity_items);
  *(_QWORD *)(v1 + OBJC_IVAR___JSACopyLinkActivity_items) = v14;
  return swift_bridgeObjectRelease(v24);
}

id sub_57524()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void *v6;
  id result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = v0;
  v2 = sub_29EF0((uint64_t *)&unk_B8CA0);
  __chkstk_darwin(v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)&v1[OBJC_IVAR___JSACopyLinkActivity_items];
  if (!v5 || !*(_QWORD *)(v5 + 16))
    return objc_msgSend(v1, "activityDidFinish:", 1);
  v6 = (void *)objc_opt_self(UIPasteboard);
  swift_bridgeObjectRetain(v5);
  result = objc_msgSend(v6, "generalPasteboard");
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = result;
    v9 = type metadata accessor for URL(0);
    v10 = *(_QWORD *)(v9 - 8);
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v4, v5 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)), v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v4, 0, 1, v9);
    swift_bridgeObjectRelease(v5);
    v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v4, 1, v9);
    if ((_DWORD)v11 == 1)
    {
      sub_58348((uint64_t)v4);
      v12 = 0;
    }
    else
    {
      URL.absoluteString.getter(v11);
      v14 = v13;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v4, v9);
      v12 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v14);
    }
    objc_msgSend(v8, "setString:", v12);

    return objc_msgSend(v1, "activityDidFinish:", 1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id CopyLinkActivity.init()()
{
  char *v0;
  objc_super v2;

  *(_QWORD *)&v0[OBJC_IVAR___JSACopyLinkActivity_items] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CopyLinkActivity();
  return objc_msgSendSuper2(&v2, "init");
}

id CopyLinkActivity.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CopyLinkActivity();
  return objc_msgSendSuper2(&v2, "dealloc");
}

char *sub_577F0(char *result, int64_t a2, char a3, unint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(a4 + 24);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *(_QWORD *)(a4 + 16);
    if (v7 <= v8)
      v9 = *(_QWORD *)(a4 + 16);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_29EF0(&qword_B8640);
      v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
      v14 = v11 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if ((unint64_t)v11 < a4 || (unint64_t)v14 >= a4 + 32 + 8 * v8)
        {
          sub_29EF0(&qword_B82B8);
          swift_arrayInitWithTakeFrontToBack(v14, a4 + 32);
        }
        else if (v11 != (char *)a4)
        {
          sub_29EF0(&qword_B82B8);
          swift_arrayInitWithTakeBackToFront(v14, a4 + 32);
        }
        *(_QWORD *)(a4 + 16) = 0;
        goto LABEL_26;
      }
    }
    sub_57E6C(0, v8, (unint64_t)v14, a4);
LABEL_26:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

char *sub_57944(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_29EF0(&qword_B93B8);
      v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
      v14 = v11 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[16 * v8 + 32])
          memmove(v14, a4 + 32, 16 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_57D64(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_57A50(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_29EF0(&qword_B8618);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_57F74(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_57B5C(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_29EF0(&qword_B93C8);
  v11 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
    goto LABEL_29;
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v20 = (unint64_t)v15 + v19;
  if ((a1 & 1) != 0)
  {
    v21 = a4 + v19;
    if ((unint64_t)v15 < a4 || v20 >= v21 + *(_QWORD *)(v18 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v19, v21);
    }
    else if (v15 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v19, v21);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_583B4(0, v8, v20, a4);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

uint64_t sub_57D64(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 16 * a1 + 32;
    v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_29EF0(&qword_B93C0);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_57E6C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v4;
    if (v6 >= v7 || v6 + 8 * v4 <= a3)
    {
      sub_29EF0(&qword_B82B8);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_57F74(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_58064()
{
  uint64_t v0;
  uint64_t ObjCClassFromMetadata;
  id v2;
  NSString v3;
  NSString v4;
  id v5;
  uint64_t v6;

  v0 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v0);
  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v3 = String._bridgeToObjectiveC()();
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v2, "localizedStringForKey:value:table:", v3, v4, 0);

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  return v6;
}

uint64_t sub_5813C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  id v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  _QWORD v19[4];
  _QWORD v20[4];

  v2 = type metadata accessor for URL(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v8 = (char *)&v15 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    return 0;
  v16 = v6;
  v17 = a1;
  v10 = a1 + 32;
  swift_bridgeObjectRetain(a1);
  while (1)
  {
    sub_37EF0(v10, (uint64_t)v20);
    sub_37EF0((uint64_t)v20, (uint64_t)v19);
    v11 = sub_5830C();
    if (!swift_dynamicCast(&v18, v19, (char *)&type metadata for Any + 8, v11, 6))
      break;
    v12 = v18;
    v13 = objc_msgSend(v18, "activityItem");
    _bridgeAnyObjectToAny(_:)(v19, v13);

    swift_unknownObjectRelease(v13);
    if ((swift_dynamicCast(v8, v19, (char *)&type metadata for Any + 8, v2, 6) & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v2);
      goto LABEL_11;
    }
LABEL_4:
    sub_3789C(v20);
    v10 += 32;
    if (!--v9)
    {
      swift_bridgeObjectRelease(v17);
      return 0;
    }
  }
  sub_37EF0((uint64_t)v20, (uint64_t)v19);
  if ((swift_dynamicCast(v5, v19, (char *)&type metadata for Any + 8, v2, 6) & 1) == 0)
    goto LABEL_4;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v2);
LABEL_11:
  sub_3789C(v20);
  swift_bridgeObjectRelease(v17);
  return 1;
}

unint64_t sub_5830C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_B9380;
  if (!qword_B9380)
  {
    v1 = objc_opt_self(JSAShare);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_B9380);
  }
  return result;
}

uint64_t sub_58348(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_29EF0((uint64_t *)&unk_B8CA0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for CopyLinkActivity()
{
  return objc_opt_self(JSACopyLinkActivity);
}

uint64_t method lookup function for CopyLinkActivity(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for CopyLinkActivity);
}

uint64_t sub_583B4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 72);
  v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  v12 = v10 * v4;
  v13 = a3 + v12;
  v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

id sub_585A4()
{
  return sub_3E6B4(type metadata accessor for FigaroEventCell);
}

uint64_t type metadata accessor for FigaroEventCell()
{
  return objc_opt_self(_TtC5JSApp15FigaroEventCell);
}

void sub_58628()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t ObjCClassFromMetadata;
  NSString v10;
  objc_super v11;

  v1 = v0;
  v11.receiver = v0;
  v11.super_class = (Class)type metadata accessor for FigaroEventViewController();
  objc_msgSendSuper2(&v11, "viewDidLoad");
  v2 = objc_msgSend(v0, "navigationItem");
  sub_5BE20();
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  objc_msgSend(v2, "setTitle:", v5);

  v6 = objc_msgSend(v1, "tableView");
  if (v6)
  {
    v7 = v6;
    v8 = type metadata accessor for FigaroEventCell();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v8);
    v10 = String._bridgeToObjectiveC()();
    objc_msgSend(v7, "registerClass:forCellReuseIdentifier:", ObjCClassFromMetadata, v10);

  }
  else
  {
    __break(1u);
  }
}

id sub_58810(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  NSString v6;
  NSIndexPath v7;
  id v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  void *v12;
  NSString v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSString v22;
  id v23;
  void *v24;
  unint64_t v25;
  NSString v26;
  uint64_t v27;
  objc_class *v28;
  uint64_t v29;
  unint64_t v30;
  Swift::String v31;
  unint64_t v32;
  NSString v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v3 = v2;
  v6 = String._bridgeToObjectiveC()();
  v7.super.isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v8 = objc_msgSend(a1, "dequeueReusableCellWithIdentifier:forIndexPath:", v6, v7.super.isa);

  v9 = IndexPath.section.getter();
  if (v9)
  {
    v3 = *(_QWORD *)(v3 + OBJC_IVAR____TtC5JSApp25FigaroEventViewController_baseFields);
    v9 = IndexPath.row.getter(v9);
    if ((v9 & 0x8000000000000000) != 0)
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v9 < *(_QWORD *)(v3 + 16))
      goto LABEL_7;
    __break(1u);
  }
  v3 = *(_QWORD *)(v3 + OBJC_IVAR____TtC5JSApp25FigaroEventViewController_eventFields);
  v9 = IndexPath.row.getter(v9);
  if ((v9 & 0x8000000000000000) != 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v9 >= *(_QWORD *)(v3 + 16))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
LABEL_7:
  v10 = v3 + 24 * v9;
  v6 = *(NSString *)(v10 + 40);
  v3 = *(_QWORD *)(v10 + 48);
  swift_bridgeObjectRetain(v6);
  swift_unknownObjectRetain(v3);
  v11 = objc_msgSend(v8, "textLabel");
  if (v11)
  {
    v12 = v11;
    swift_bridgeObjectRetain(v6);
    v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v6);
    objc_msgSend(v12, "setText:", v13);

  }
  v37 = v3;
  swift_unknownObjectRetain_n(v3, 2);
  v14 = sub_29EF0(&qword_B8740);
  if (swift_dynamicCast(&v39, &v37, (char *)&type metadata for Swift.AnyObject + 8, v14, 6))
  {
    a2 = v39;
    v37 = v3;
    swift_unknownObjectRetain(v3);
    v15 = sub_29EF0(&qword_B8738);
    if (swift_dynamicCast(&v39, &v37, (char *)&type metadata for Swift.AnyObject + 8, v15, 6))
    {
      swift_bridgeObjectRelease(a2);
      v16 = v39;
      v17 = objc_msgSend(v8, "detailTextLabel");
      if (v17)
      {
        v18 = v17;
        v37 = v16;
        v19 = sub_3FE18();
        BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v15, v19);
        v21 = v20;
        swift_bridgeObjectRelease(v16);
        v22 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v21);
        objc_msgSend(v18, "setText:", v22);

LABEL_23:
        v27 = 1;
        goto LABEL_24;
      }
      v34 = v16;
LABEL_22:
      swift_bridgeObjectRelease(v34);
      goto LABEL_23;
    }
    v28 = (objc_class *)objc_msgSend(v8, "detailTextLabel");
    if (!v28)
    {
      v34 = a2;
      goto LABEL_22;
    }
    v7.super.isa = v28;
    if (!((unint64_t)a2 >> 62))
    {
      v29 = *(_QWORD *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFF8));
LABEL_19:
      swift_bridgeObjectRelease(a2);
      v39 = v29;
      v37 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v38 = v30;
      v31._countAndFlagsBits = 0x746E656D656C6520;
      v31._object = (void *)0xEB00000000297328;
      String.append(_:)(v31);
      v32 = v38;
      v33 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v32);
      -[objc_class setText:](v7.super.isa, "setText:", v33);

      goto LABEL_23;
    }
LABEL_28:
    if (a2 < 0)
      v36 = a2;
    else
      v36 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v29 = _CocoaArrayWrapper.endIndex.getter(v36);
    swift_bridgeObjectRelease(a2);
    goto LABEL_19;
  }
  v23 = objc_msgSend(v8, "detailTextLabel");
  if (v23)
  {
    v24 = v23;
    v37 = 0;
    v38 = 0xE000000000000000;
    v39 = v3;
    _print_unlocked<A, B>(_:_:)(&v39, &v37, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v25 = v38;
    v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v25);
    objc_msgSend(v24, "setText:", v26);

  }
  v27 = 0;
LABEL_24:
  objc_msgSend(v8, "setAccessoryType:", v27);
  swift_bridgeObjectRelease(v6);
  swift_unknownObjectRelease_n(v3, 2);
  return v8;
}

unint64_t sub_58CF0(void *a1)
{
  char *v1;
  char *v2;
  Class isa;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  Class v16;
  NSString v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;

  v2 = v1;
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, "deselectRowAtIndexPath:animated:", isa, 1);

  result = IndexPath.section.getter();
  if (!result)
  {
LABEL_5:
    v6 = *(_QWORD *)&v2[OBJC_IVAR____TtC5JSApp25FigaroEventViewController_eventFields];
    result = IndexPath.row.getter(result);
    if ((result & 0x8000000000000000) == 0)
    {
      if (result < *(_QWORD *)(v6 + 16))
        goto LABEL_7;
LABEL_19:
      __break(1u);
      return result;
    }
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v6 = *(_QWORD *)&v2[OBJC_IVAR____TtC5JSApp25FigaroEventViewController_baseFields];
  result = IndexPath.row.getter(result);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (result >= *(_QWORD *)(v6 + 16))
  {
    __break(1u);
    goto LABEL_5;
  }
LABEL_7:
  v7 = v6 + 24 * result;
  v8 = *(_QWORD *)(v7 + 48);
  v9 = *(_QWORD *)(v7 + 40);
  v23 = v8;
  swift_unknownObjectRetain_n(v8, 2);
  swift_bridgeObjectRetain(v9);
  v10 = sub_29EF0(&qword_B9438);
  if ((swift_dynamicCast(&v22, &v23, (char *)&type metadata for Swift.AnyObject + 8, v10, 6) & 1) != 0)
  {
    v11 = v22;
    if (*(_QWORD *)(v22 + 16))
    {
      v12 = objc_allocWithZone((Class)type metadata accessor for FigaroEventFieldViewController());
      sub_3DB80(v11);
      v14 = v13;
      v15 = objc_msgSend(v13, "navigationItem");
      v16 = IndexPath._bridgeToObjectiveC()().super.isa;
      v17 = objc_msgSend(a1, "cellForRowAtIndexPath:", v16);

      if (v17)
      {
        v18 = objc_msgSend(v17, "textLabel");

        if (v18)
        {
          v17 = objc_msgSend(v18, "text");

          if (v17)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
            v20 = v19;

            v17 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v20);
          }
        }
        else
        {
          v17 = 0;
        }
      }
      objc_msgSend(v15, "setTitle:", v17);

      v21 = objc_msgSend(v2, "navigationController");
      objc_msgSend(v21, "pushViewController:animated:", v14, 1);

    }
    else
    {
      swift_bridgeObjectRelease(v22);
    }
  }
  swift_unknownObjectRelease(v8);
  return swift_bridgeObjectRelease(v9);
}

id sub_5908C()
{
  return sub_3E6B4(type metadata accessor for FigaroEventViewController);
}

uint64_t type metadata accessor for FigaroEventViewController()
{
  return objc_opt_self(_TtC5JSApp25FigaroEventViewController);
}

id sub_59100(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  objc_super v13;
  _QWORD *v14;
  uint64_t v15[4];
  char v16[24];

  *(_QWORD *)&v1[OBJC_IVAR____TtC5JSApp25FigaroEventViewController_event] = a1;
  swift_beginAccess(a1 + 40, v16, 0, 0);
  v3 = *(_QWORD *)(a1 + 40);
  swift_bridgeObjectRetain_n(v3, 2);
  v4 = v1;
  swift_retain(a1);
  v5 = sub_634B0(v3);
  swift_bridgeObjectRelease(v3);
  v15[0] = (uint64_t)v5;
  sub_3E714(v15);
  swift_bridgeObjectRelease(v3);
  v6 = v15[0];
  v7 = sub_59274(v15[0]);
  swift_release(v6);
  *(_QWORD *)&v4[OBJC_IVAR____TtC5JSApp25FigaroEventViewController_eventFields] = v7;
  swift_beginAccess(a1 + 32, v15, 0, 0);
  v8 = *(_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain_n(v8, 2);
  v9 = sub_634B0(v8);
  swift_bridgeObjectRelease(v8);
  v14 = v9;
  sub_3E714(&v14);
  swift_bridgeObjectRelease(v8);
  v10 = (uint64_t)v14;
  v11 = sub_59274((uint64_t)v14);
  swift_release(v10);
  *(_QWORD *)&v4[OBJC_IVAR____TtC5JSApp25FigaroEventViewController_baseFields] = v11;

  v13.receiver = v4;
  v13.super_class = (Class)type metadata accessor for FigaroEventViewController();
  return objc_msgSendSuper2(&v13, "initWithStyle:", 2);
}

_QWORD *sub_59274(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  __int128 v14;
  _QWORD v15[3];
  uint64_t v16;
  __int128 v17;
  _QWORD *v18;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v18 = _swiftEmptyArrayStorage;
    sub_3AC24(0, v1, 0);
    v2 = _swiftEmptyArrayStorage;
    v4 = (uint64_t *)(a1 + 48);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      v15[0] = *(v4 - 2);
      v15[1] = v5;
      v15[2] = v6;
      swift_bridgeObjectRetain_n(v5, 2);
      swift_unknownObjectRetain_n(v6, 2);
      v7 = sub_29EF0(&qword_B85E8);
      v8 = sub_29EF0(&qword_B85D8);
      swift_dynamicCast(&v16, v15, v7, v8, 7);
      v9 = v16;
      v14 = v17;
      swift_unknownObjectRelease(v6);
      swift_bridgeObjectRelease(v5);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_3AC24(0, v2[2] + 1, 1);
        v2 = v18;
      }
      v11 = v2[2];
      v10 = v2[3];
      if (v11 >= v10 >> 1)
      {
        sub_3AC24(v10 > 1, v11 + 1, 1);
        v2 = v18;
      }
      v2[2] = v11 + 1;
      v12 = &v2[3 * v11];
      v12[4] = v9;
      *(_OWORD *)(v12 + 5) = v14;
      v4 += 3;
      --v1;
    }
    while (v1);
  }
  return v2;
}

_QWORD *sub_593EC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  uint64_t v11;
  _QWORD *v12;

  v2 = *(_QWORD *)(a1 + 16);
  result = &_swiftEmptyArrayStorage;
  if (v2)
  {
    v12 = &_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *v4;
      v10[0] = *(v4 - 1);
      v10[1] = v5;
      swift_bridgeObjectRetain_n(v5, 2);
      swift_dynamicCast(&v11, v10, &type metadata for String, (char *)&type metadata for Swift.AnyObject + 8, 7);
      v6 = v11;
      v7 = swift_bridgeObjectRelease(v5);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v7);
      v8 = v12[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);
      v9 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v6);
      specialized ContiguousArray._endMutation()(v9);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v12;
  }
  return result;
}

float sub_594EC()
{
  uint64_t v0;

  return *(float *)(v0 + OBJC_IVAR___JSAStoreContentLookupRequest__priority);
}

void sub_5950C(float a1)
{
  uint64_t v1;

  *(float *)(v1 + OBJC_IVAR___JSAStoreContentLookupRequest__priority) = a1;
}

float (*sub_5951C(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = OBJC_IVAR___JSAStoreContentLookupRequest__priority;
  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v1 + v2);
  return sub_59540;
}

float sub_59540(uint64_t a1)
{
  float result;

  result = *(float *)(a1 + 16);
  *(float *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 8)) = result;
  return result;
}

uint64_t sub_595B8()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___JSAStoreContentLookupRequest__requestOptions));
}

uint64_t sub_5963C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  if ((*(_BYTE *)(v1 + OBJC_IVAR___JSAStoreContentLookupRequest_frozen) & 1) == 0)
  {
    v2 = *(_QWORD *)(v1 + OBJC_IVAR___JSAStoreContentLookupRequest__requestOptions);
    *(_QWORD *)(v1 + OBJC_IVAR___JSAStoreContentLookupRequest__requestOptions) = a1;
    a1 = v2;
  }
  return swift_bridgeObjectRelease(a1);
}

uint64_t *sub_59664(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  if ((*(_BYTE *)(*a2 + OBJC_IVAR___JSAStoreContentLookupRequest_frozen) & 1) == 0)
  {
    v3 = *result;
    v4 = *(_QWORD *)(v2 + OBJC_IVAR___JSAStoreContentLookupRequest__requestOptions);
    *(_QWORD *)(v2 + OBJC_IVAR___JSAStoreContentLookupRequest__requestOptions) = v3;
    swift_bridgeObjectRetain(v3);
    return (uint64_t *)swift_bridgeObjectRelease(v4);
  }
  return result;
}

uint64_t (*sub_596B8(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = OBJC_IVAR___JSAStoreContentLookupRequest__requestOptions;
  a1[2] = OBJC_IVAR___JSAStoreContentLookupRequest__requestOptions;
  v4 = *(_QWORD *)(v1 + v3);
  *a1 = v4;
  a1[1] = v1;
  swift_bridgeObjectRetain(v4);
  return sub_596FC;
}

uint64_t sub_596FC(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[1];
  if ((a2 & 1) != 0)
  {
    v3 = *a1;
    if (*(_BYTE *)(v2 + OBJC_IVAR___JSAStoreContentLookupRequest_frozen) != 1)
    {
      v4 = a1[2];
      v5 = *(_QWORD *)(v2 + v4);
      *(_QWORD *)(v2 + v4) = v3;
      swift_bridgeObjectRetain(v3);
      swift_bridgeObjectRelease(v5);
    }
  }
  else
  {
    v3 = *a1;
    if ((*(_BYTE *)(v2 + OBJC_IVAR___JSAStoreContentLookupRequest_frozen) & 1) == 0)
    {
      v6 = a1[2];
      v7 = *(_QWORD *)(v2 + v6);
      *(_QWORD *)(v2 + v6) = v3;
      v3 = v7;
    }
  }
  return swift_bridgeObjectRelease(v3);
}

_QWORD *sub_59814()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  uint64_t v12;
  _QWORD *v13;
  char v14[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR___JSAStoreContentLookupRequest__itemIdentifiers);
  swift_beginAccess(v0 + OBJC_IVAR___JSAStoreContentLookupRequest__itemIdentifiers, v14, 0, 0);
  v2 = *v1;
  v3 = *(_QWORD *)(v2 + 16);
  result = &_swiftEmptyArrayStorage;
  if (v3)
  {
    v13 = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v2);
    specialized ContiguousArray.reserveCapacity(_:)(v3);
    v5 = (uint64_t *)(v2 + 40);
    do
    {
      v6 = *v5;
      v11[0] = *(v5 - 1);
      v11[1] = v6;
      swift_bridgeObjectRetain_n(v6, 2);
      swift_dynamicCast(&v12, v11, &type metadata for String, (char *)&type metadata for Swift.AnyObject + 8, 7);
      v7 = v12;
      v8 = swift_bridgeObjectRelease(v6);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v8);
      v9 = v13[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9);
      v10 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v7);
      specialized ContiguousArray._endMutation()(v10);
      v5 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease(v2);
    return v13;
  }
  return result;
}

uint64_t sub_59998(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35[3];
  _QWORD v36[2];
  uint64_t v37;
  _BYTE v38[24];

  if ((*(_BYTE *)(v1 + OBJC_IVAR___JSAStoreContentLookupRequest_frozen) & 1) != 0)
    return swift_bridgeObjectRelease(a1);
  v4 = (_QWORD *)(v1 + OBJC_IVAR___JSAStoreContentLookupRequest__itemIdentifiers);
  swift_beginAccess(v1 + OBJC_IVAR___JSAStoreContentLookupRequest__itemIdentifiers, v38, 1, 0);
  v5 = (_QWORD *)*v4;
  *v4 = _swiftEmptyArrayStorage;
  result = swift_bridgeObjectRelease(v5);
  if (!a1)
    return result;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 >= 0)
      v34 = a1 & 0xFFFFFFFFFFFFFF8;
    else
      v34 = a1;
    swift_bridgeObjectRetain(a1);
    v6 = _CocoaArrayWrapper.endIndex.getter(v34);
    result = swift_bridgeObjectRelease(a1);
    if (v6)
      goto LABEL_6;
    return swift_bridgeObjectRelease(a1);
  }
  v6 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  if (!v6)
    return swift_bridgeObjectRelease(a1);
LABEL_6:
  if (v6 >= 1)
  {
    v7 = 0;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, a1);
      }
      else
      {
        v10 = *(_QWORD *)(a1 + 8 * v7 + 32);
        swift_unknownObjectRetain(v10);
      }
      v37 = v10;
      swift_unknownObjectRetain(v10);
      if (swift_dynamicCast(v36, &v37, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 0))
      {
        v11 = v36[0];
        v12 = v36[1];
        swift_beginAccess(v4, v35, 33, 0);
        v13 = (_QWORD *)*v4;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
        *v4 = v13;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v13 = sub_57A50(0, v13[2] + 1, 1, v13);
          *v4 = v13;
        }
        v16 = v13[2];
        v15 = v13[3];
        if (v16 >= v15 >> 1)
        {
          v13 = sub_57A50((_QWORD *)(v15 > 1), v16 + 1, 1, v13);
          *v4 = v13;
        }
        v13[2] = v16 + 1;
        v8 = &v13[2 * v16];
        v8[4] = v11;
        v8[5] = v12;
        swift_endAccess(v35);
        swift_unknownObjectRelease(v10);
        v9 = v37;
      }
      else
      {
        swift_unknownObjectRelease(v37);
        v36[0] = v10;
        swift_unknownObjectRetain(v10);
        if (!swift_dynamicCast(&v37, v36, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for UInt, 0))
        {
          swift_unknownObjectRelease(v36[0]);
          if (qword_B8170 != -1)
            swift_once(&qword_B8170, sub_56E50);
          v25 = type metadata accessor for Logger(0);
          sub_2D6E0(v25, (uint64_t)qword_B92D8);
          v26 = swift_unknownObjectRetain_n(v10, 2);
          v27 = Logger.logObject.getter(v26);
          v28 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v27, v28))
          {
            v29 = swift_slowAlloc(12, -1);
            v30 = swift_slowAlloc(32, -1);
            v35[0] = v30;
            *(_DWORD *)v29 = 136315138;
            v36[0] = v10;
            swift_unknownObjectRetain(v10);
            v31 = String.init<A>(describing:)(v36, (char *)&type metadata for Swift.AnyObject + 8);
            v33 = v32;
            *(_QWORD *)(v29 + 4) = sub_3A180(v31, v32, v35);
            swift_unknownObjectRelease_n(v10, 2);
            swift_bridgeObjectRelease(v33);
            _os_log_impl(&dword_0, v27, v28, "Invalid item identifier %s", (uint8_t *)v29, 0xCu);
            swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v30, -1, -1);
            swift_slowDealloc(v29, -1, -1);
            swift_unknownObjectRelease(v10);

          }
          else
          {

            swift_unknownObjectRelease_n(v10, 3);
          }
          goto LABEL_10;
        }
        v35[0] = v37;
        v17 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
        v19 = v18;
        swift_beginAccess(v4, v35, 33, 0);
        v20 = (_QWORD *)*v4;
        v21 = swift_isUniquelyReferenced_nonNull_native(*v4);
        *v4 = v20;
        if ((v21 & 1) == 0)
        {
          v20 = sub_57A50(0, v20[2] + 1, 1, v20);
          *v4 = v20;
        }
        v23 = v20[2];
        v22 = v20[3];
        if (v23 >= v22 >> 1)
        {
          v20 = sub_57A50((_QWORD *)(v22 > 1), v23 + 1, 1, v20);
          *v4 = v20;
        }
        v20[2] = v23 + 1;
        v24 = &v20[2 * v23];
        v24[4] = v17;
        v24[5] = v19;
        swift_endAccess(v35);
        swift_unknownObjectRelease(v10);
        v9 = v36[0];
      }
      swift_unknownObjectRelease(v9);
LABEL_10:
      if (v6 == ++v7)
        return swift_bridgeObjectRelease(a1);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_59E50@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _BYTE v8[24];

  v3 = (uint64_t *)(*a1 + OBJC_IVAR___JSAStoreContentLookupRequest__itemIdentifiers);
  swift_beginAccess(v3, v8, 0, 0);
  v4 = *v3;
  v5 = swift_bridgeObjectRetain(v4);
  v6 = sub_593EC(v5);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v6;
  return result;
}

void (*sub_59EC0(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = (uint64_t *)(v1 + OBJC_IVAR___JSAStoreContentLookupRequest__itemIdentifiers);
  swift_beginAccess(v1 + OBJC_IVAR___JSAStoreContentLookupRequest__itemIdentifiers, v3, 0, 0);
  v5 = *v4;
  v6 = swift_bridgeObjectRetain(v5);
  v7 = sub_593EC(v6);
  swift_bridgeObjectRelease(v5);
  v3[3] = v7;
  return sub_59F44;
}

void sub_59F44(void **a1, char a2)
{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v2 = *a1;
  v4 = (uint64_t *)((char *)*a1 + 24);
  v3 = *v4;
  if ((a2 & 1) != 0)
  {
    v5 = swift_bridgeObjectRetain(v3);
    sub_59998(v5);
    swift_bridgeObjectRelease(*v4);
  }
  else
  {
    sub_59998(v3);
  }
  free(v2);
}

void *sub_59FA4()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR___JSAStoreContentLookupRequest__onResponse);
  v2 = v1;
  return v1;
}

void sub_5A020(void *a1)
{
  uint64_t v1;
  void *v2;

  if ((*(_BYTE *)(v1 + OBJC_IVAR___JSAStoreContentLookupRequest_frozen) & 1) == 0)
  {
    v2 = *(void **)(v1 + OBJC_IVAR___JSAStoreContentLookupRequest__onResponse);
    *(_QWORD *)(v1 + OBJC_IVAR___JSAStoreContentLookupRequest__onResponse) = a1;
    a1 = v2;
  }

}

void sub_5A048(void **a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  id v4;
  id v5;

  v2 = *a2;
  if ((*(_BYTE *)(*a2 + OBJC_IVAR___JSAStoreContentLookupRequest_frozen) & 1) == 0)
  {
    v3 = *a1;
    v5 = *(id *)(v2 + OBJC_IVAR___JSAStoreContentLookupRequest__onResponse);
    *(_QWORD *)(v2 + OBJC_IVAR___JSAStoreContentLookupRequest__onResponse) = *a1;
    v4 = v3;

  }
}

void (*sub_5A0A0(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;

  v2 = OBJC_IVAR___JSAStoreContentLookupRequest__onResponse;
  a1[1] = v1;
  a1[2] = v2;
  v3 = *(void **)(v1 + v2);
  *a1 = v3;
  v4 = v3;
  return sub_5A0E4;
}

void sub_5A0E4(uint64_t a1, char a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;

  v2 = *(_QWORD *)(a1 + 8);
  if ((a2 & 1) != 0)
  {
    v3 = *(void **)a1;
    if (*(_BYTE *)(v2 + OBJC_IVAR___JSAStoreContentLookupRequest_frozen) != 1)
    {
      v4 = *(_QWORD *)(a1 + 16);
      v5 = *(void **)(v2 + v4);
      *(_QWORD *)(v2 + v4) = v3;
      v8 = v3;

      v3 = v8;
    }
  }
  else
  {
    v3 = *(void **)a1;
    if ((*(_BYTE *)(v2 + OBJC_IVAR___JSAStoreContentLookupRequest_frozen) & 1) == 0)
    {
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(void **)(v2 + v6);
      *(_QWORD *)(v2 + v6) = v3;
      v3 = v7;
    }
  }

}

id StoreContentLookupRequest.init()()
{
  _BYTE *v0;
  objc_super v2;

  *(_QWORD *)&v0[OBJC_IVAR___JSAStoreContentLookupRequest__requestOptions] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___JSAStoreContentLookupRequest__itemIdentifiers] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v0[OBJC_IVAR___JSAStoreContentLookupRequest__onResponse] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___JSAStoreContentLookupRequest_lookup] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___JSAStoreContentLookupRequest_lookupPromise] = 0;
  v0[OBJC_IVAR___JSAStoreContentLookupRequest_frozen] = 0;
  *(_DWORD *)&v0[OBJC_IVAR___JSAStoreContentLookupRequest__priority] = 2143289344;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StoreContentLookupRequest();
  return objc_msgSendSuper2(&v2, "init");
}

id StoreContentLookupRequest.__deallocating_deinit()
{
  _BYTE *v0;
  void *v1;
  objc_super v3;

  if ((v0[OBJC_IVAR___JSAStoreContentLookupRequest_frozen] & 1) == 0)
  {
    v1 = *(void **)&v0[OBJC_IVAR___JSAStoreContentLookupRequest__onResponse];
    *(_QWORD *)&v0[OBJC_IVAR___JSAStoreContentLookupRequest__onResponse] = 0;

  }
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for StoreContentLookupRequest();
  return objc_msgSendSuper2(&v3, "dealloc");
}

void sub_5A344()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  id v25;
  NSString v26;
  NSString v27;
  id v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  char v40;
  char v41;
  void *v42;
  uint64_t v43;
  id v44;
  Class isa;
  id v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  id v54;
  unint64_t v55;
  unsigned __int8 *v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  unsigned __int8 *v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  unsigned int v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t aBlock;
  unint64_t v71;
  void (*v72)(uint64_t, void *, void *);
  void *v73;
  void (*v74)(void *, uint64_t, __n128);
  uint64_t v75;
  char v76[24];

  v1 = *(void **)(v0 + OBJC_IVAR___JSAStoreContentLookupRequest__onResponse);
  if (v1)
  {
    v2 = v0;
    v3 = (uint64_t *)(v0 + OBJC_IVAR___JSAStoreContentLookupRequest__itemIdentifiers);
    swift_beginAccess(v0 + OBJC_IVAR___JSAStoreContentLookupRequest__itemIdentifiers, v76, 0, 0);
    v4 = *v3;
    v5 = v1;
    v6 = swift_bridgeObjectRetain(v4);
    v7 = (uint64_t)sub_593EC(v6);
    swift_bridgeObjectRelease(v4);
    if ((unint64_t)v7 >> 62)
    {
      if (v7 < 0)
        v64 = v7;
      else
        v64 = v7 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v7);
      v8 = _CocoaArrayWrapper.endIndex.getter(v64);
      swift_bridgeObjectRelease(v7);
    }
    else
    {
      v8 = *(_QWORD *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8));
    }
    swift_bridgeObjectRelease(v7);
    if (v8 < 1 || (*(_BYTE *)(v2 + OBJC_IVAR___JSAStoreContentLookupRequest_frozen) & 1) != 0)
      goto LABEL_42;
    *(_BYTE *)(v2 + OBJC_IVAR___JSAStoreContentLookupRequest_frozen) = 1;
    v9 = OBJC_IVAR___JSAStoreContentLookupRequest__requestOptions;
    v10 = *(_QWORD *)(v2 + OBJC_IVAR___JSAStoreContentLookupRequest__requestOptions);
    if (v10 && *(_QWORD *)(v10 + 16))
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v2 + OBJC_IVAR___JSAStoreContentLookupRequest__requestOptions));
      v11 = sub_4CF3C(0x72656C6C6163, 0xE600000000000000);
      if ((v12 & 1) != 0)
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v11);
        swift_unknownObjectRetain(v13);
        swift_bridgeObjectRelease(v10);
        v69 = v13;
        if ((swift_dynamicCast(&aBlock, &v69, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6) & 1) != 0)
        {
          v14 = v71;
          v15 = *(_QWORD *)(v2 + v9);
          if (!v15)
            goto LABEL_22;
          goto LABEL_17;
        }
      }
      else
      {
        swift_bridgeObjectRelease(v10);
      }
    }
    v16 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v17 = objc_msgSend(v16, "bundleIdentifier");

    if (v17)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v14 = v18;

      v15 = *(_QWORD *)(v2 + v9);
      if (!v15)
        goto LABEL_22;
    }
    else
    {
      v14 = 0x800000000008A410;
      v15 = *(_QWORD *)(v2 + v9);
      if (!v15)
        goto LABEL_22;
    }
LABEL_17:
    if (*(_QWORD *)(v15 + 16))
    {
      swift_bridgeObjectRetain(v15);
      v19 = sub_4CF3C(112, 0xE100000000000000);
      if ((v20 & 1) != 0)
      {
        v21 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v19);
        swift_unknownObjectRetain(v21);
        swift_bridgeObjectRelease(v15);
        v69 = v21;
        if ((swift_dynamicCast(&aBlock, &v69, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6) & 1) != 0)
        {
          v22 = v71;
LABEL_23:
          v24 = objc_msgSend((id)objc_opt_self(BUBag), "defaultBag");
          v25 = objc_allocWithZone((Class)AMSLookup);
          v26 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v14);
          v27 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v22);
          v28 = objc_msgSend(v25, "initWithBag:caller:keyProfile:", v24, v26, v27);

          v29 = OBJC_IVAR___JSAStoreContentLookupRequest_lookup;
          v30 = *(void **)(v2 + OBJC_IVAR___JSAStoreContentLookupRequest_lookup);
          *(_QWORD *)(v2 + OBJC_IVAR___JSAStoreContentLookupRequest_lookup) = v28;

          v31 = *(_QWORD *)(v2 + v9);
          if (v31 && *(_QWORD *)(v31 + 16))
          {
            swift_bridgeObjectRetain(*(_QWORD *)(v2 + v9));
            v32 = sub_4CF3C(0x6E6F6973726576, 0xE700000000000000);
            if ((v33 & 1) == 0)
            {
LABEL_36:
              swift_bridgeObjectRelease(v31);
              goto LABEL_37;
            }
            v34 = *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v32);
            swift_unknownObjectRetain(v34);
            swift_bridgeObjectRelease(v31);
            v69 = v34;
            if ((swift_dynamicCast(&aBlock, &v69, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6) & 1) != 0)
            {
              v31 = v71;
              v35 = HIBYTE(v71) & 0xF;
              v36 = aBlock & 0xFFFFFFFFFFFFLL;
              if ((v71 & 0x2000000000000000) != 0)
                v37 = HIBYTE(v71) & 0xF;
              else
                v37 = aBlock & 0xFFFFFFFFFFFFLL;
              if (v37)
              {
                if ((v71 & 0x1000000000000000) != 0)
                {
                  v39 = (uint64_t)sub_5B230(aBlock, v71, 10);
                  v41 = v68;
                  goto LABEL_78;
                }
                if ((v71 & 0x2000000000000000) == 0)
                {
                  if ((aBlock & 0x1000000000000000) != 0)
                    v38 = (unsigned __int8 *)((v71 & 0xFFFFFFFFFFFFFFFLL) + 32);
                  else
                    v38 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(aBlock, v71);
                  v39 = (uint64_t)sub_5B53C(v38, v36, 10);
                  v41 = v40 & 1;
LABEL_78:
                  swift_bridgeObjectRelease(v31);
                  if ((v41 & 1) == 0)
                    objc_msgSend(*(id *)(v2 + v29), "setVersion:", v39);
                  goto LABEL_37;
                }
                v71 &= 0xFFFFFFFFFFFFFFuLL;
                if (aBlock == 43)
                {
                  if (!v35)
                    goto LABEL_93;
                  if (v35 == 1 || (BYTE1(aBlock) - 48) > 9u)
                    goto LABEL_65;
                  v39 = (BYTE1(aBlock) - 48);
                  if (v35 != 2)
                  {
                    if ((BYTE2(aBlock) - 48) > 9u)
                      goto LABEL_65;
                    v39 = 10 * (BYTE1(aBlock) - 48) + (BYTE2(aBlock) - 48);
                    v55 = v35 - 3;
                    if (v55)
                    {
                      v56 = (unsigned __int8 *)&aBlock + 3;
                      while (1)
                      {
                        v57 = *v56 - 48;
                        if (v57 > 9)
                          goto LABEL_65;
                        v58 = 10 * v39;
                        if ((unsigned __int128)(v39 * (__int128)10) >> 64 != (10 * v39) >> 63)
                          goto LABEL_65;
                        v39 = v58 + v57;
                        if (__OFADD__(v58, v57))
                          goto LABEL_65;
                        v41 = 0;
                        ++v56;
                        if (!--v55)
                          goto LABEL_78;
                      }
                    }
                  }
                }
                else
                {
                  if (aBlock == 45)
                  {
                    if (v35)
                    {
                      if (v35 != 1 && (BYTE1(aBlock) - 48) <= 9u)
                      {
                        if (v35 == 2)
                        {
                          v41 = 0;
                          v39 = -(uint64_t)(BYTE1(aBlock) - 48);
                          goto LABEL_78;
                        }
                        if ((BYTE2(aBlock) - 48) <= 9u)
                        {
                          v39 = -10 * (BYTE1(aBlock) - 48) - (BYTE2(aBlock) - 48);
                          v63 = v35 - 3;
                          if (!v63)
                            goto LABEL_77;
                          v65 = (unsigned __int8 *)&aBlock + 3;
                          while (1)
                          {
                            v66 = *v65 - 48;
                            if (v66 > 9)
                              break;
                            v67 = 10 * v39;
                            if ((unsigned __int128)(v39 * (__int128)10) >> 64 != (10 * v39) >> 63)
                              break;
                            v39 = v67 - v66;
                            if (__OFSUB__(v67, v66))
                              break;
                            v41 = 0;
                            ++v65;
                            if (!--v63)
                              goto LABEL_78;
                          }
                        }
                      }
LABEL_65:
                      v39 = 0;
                      v41 = 1;
                      goto LABEL_78;
                    }
                    __break(1u);
LABEL_93:
                    __break(1u);
                    return;
                  }
                  if (!v35 || (aBlock - 48) > 9u)
                    goto LABEL_65;
                  v39 = (aBlock - 48);
                  if (v35 != 1)
                  {
                    if ((BYTE1(aBlock) - 48) > 9u)
                      goto LABEL_65;
                    v39 = 10 * (aBlock - 48) + (BYTE1(aBlock) - 48);
                    v59 = v35 - 2;
                    if (v59)
                    {
                      v60 = (unsigned __int8 *)&aBlock + 2;
                      while (1)
                      {
                        v61 = *v60 - 48;
                        if (v61 > 9)
                          goto LABEL_65;
                        v62 = 10 * v39;
                        if ((unsigned __int128)(v39 * (__int128)10) >> 64 != (10 * v39) >> 63)
                          goto LABEL_65;
                        v39 = v62 + v61;
                        if (__OFADD__(v62, v61))
                          goto LABEL_65;
                        v41 = 0;
                        ++v60;
                        if (!--v59)
                          goto LABEL_78;
                      }
                    }
                  }
                }
LABEL_77:
                v41 = 0;
                goto LABEL_78;
              }
              goto LABEL_36;
            }
          }
LABEL_37:
          v42 = *(void **)(v2 + v29);
          if (v42)
          {
            v43 = *v3;
            v44 = v42;
            swift_bridgeObjectRetain(v43);
            isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease(v43);
            v46 = objc_msgSend(v44, "performLookupWithBundleIdentifiers:itemIdentifiers:", 0, isa);

          }
          else
          {
            v46 = 0;
          }
          v47 = OBJC_IVAR___JSAStoreContentLookupRequest_lookupPromise;
          v48 = *(void **)(v2 + OBJC_IVAR___JSAStoreContentLookupRequest_lookupPromise);
          *(_QWORD *)(v2 + OBJC_IVAR___JSAStoreContentLookupRequest_lookupPromise) = v46;

          v49 = *(void **)(v2 + v47);
          if (v49)
          {
            v50 = swift_allocObject(&unk_A1958, 24, 7);
            swift_unknownObjectWeakInit(v50 + 16, v2);
            v51 = swift_allocObject(&unk_A1980, 32, 7);
            *(_QWORD *)(v51 + 16) = v5;
            *(_QWORD *)(v51 + 24) = v50;
            v74 = sub_5B210;
            v75 = v51;
            aBlock = (uint64_t)_NSConcreteStackBlock;
            v71 = 1107296256;
            v72 = sub_3D0AC;
            v73 = &unk_A1998;
            v52 = _Block_copy(&aBlock);
            v53 = v75;
            v54 = v5;
            v5 = v49;
            objc_msgSend(v5, "addFinishBlock:", v52, swift_release(v53).n128_f64[0]);

            _Block_release(v52);
          }
LABEL_42:

          return;
        }
      }
      else
      {
        swift_bridgeObjectRelease(v15);
      }
    }
LABEL_22:
    static String._unconditionallyBridgeFromObjectiveC(_:)(AMSLookupKeyProfileLockup);
    v22 = v23;
    goto LABEL_23;
  }
}

void sub_5AAEC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  uint64_t v7;
  uint64_t v9;
  __n128 v10;
  __n128 v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint8_t *v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  Class isa;
  NSString v46;
  uint64_t Strong;
  _BYTE *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  _QWORD v52[3];
  char v53[8];
  unint64_t v54;
  _OWORD v55[2];
  _OWORD v56[2];

  v7 = a4 + 16;
  if (a2)
  {
    swift_errorRetain(a2, a5);
    if (qword_B8170 != -1)
      swift_once(&qword_B8170, sub_56E50);
    v9 = type metadata accessor for Logger(0);
    sub_2D6E0(v9, (uint64_t)qword_B92D8);
    swift_errorRetain(a2, v10);
    v12 = swift_errorRetain(a2, v11);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v51 = a3;
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v56[0] = v16;
      *(_DWORD *)v15 = 136315138;
      swift_getErrorValue(a2, v53, v52);
      v17 = Error.localizedDescription.getter(v52[1], v52[2]);
      v19 = v18;
      *(_QWORD *)&v55[0] = sub_3A180(v17, v18, (uint64_t *)v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v55, (char *)v55 + 8, v15 + 4, v15 + 12);
      swift_bridgeObjectRelease(v19);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl(&dword_0, v13, v14, "Invalid item identifier %s", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      v20 = v15;
      a3 = v51;
      swift_slowDealloc(v20, -1, -1);

      swift_errorRelease(a2);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      swift_errorRelease(a2);

    }
  }
  v21 = sub_40AC4((uint64_t)_swiftEmptyArrayStorage);
  if (a1)
  {
    v22 = AMSLookupPropertyIsAuthenticated;
    v23 = objc_msgSend(a1, "valueForProperty:", AMSLookupPropertyIsAuthenticated);
    _bridgeAnyObjectToAny(_:)(v55, v23);
    swift_unknownObjectRelease(v23);
    sub_41BD8(v55, v56);
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v26 = v25;
    sub_37EF0((uint64_t)v56, (uint64_t)v55);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v21);
    v54 = v21;
    sub_5FC98(v55, v24, v26, isUniquelyReferenced_nonNull_native);
    v28 = v54;
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease(0x8000000000000000);
    sub_3789C(v56);
    v29 = AMSLookupPropertyResults;
    v30 = objc_msgSend(a1, "valueForProperty:", AMSLookupPropertyResults);
    _bridgeAnyObjectToAny(_:)(v55, v30);
    swift_unknownObjectRelease(v30);
    sub_41BD8(v55, v56);
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v33 = v32;
    sub_37EF0((uint64_t)v56, (uint64_t)v55);
    v34 = swift_isUniquelyReferenced_nonNull_native(v28);
    v54 = v28;
    sub_5FC98(v55, v31, v33, v34);
    v35 = v54;
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(0x8000000000000000);
    sub_3789C(v56);
    v36 = AMSLookupPropertyStatus;
    v37 = objc_msgSend(a1, "valueForProperty:", AMSLookupPropertyStatus);
    _bridgeAnyObjectToAny(_:)(v55, v37);
    swift_unknownObjectRelease(v37);
    sub_41BD8(v55, v56);
    v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v40 = v39;
    sub_37EF0((uint64_t)v56, (uint64_t)v55);
    v41 = swift_isUniquelyReferenced_nonNull_native(v35);
    v54 = v35;
    sub_5FC98(v55, v38, v40, v41);
    v21 = v54;
    swift_bridgeObjectRelease(v40);
    swift_bridgeObjectRelease(0x8000000000000000);
    sub_3789C(v56);
  }
  v42 = objc_msgSend((id)objc_opt_self(JSABridge), "sharedInstance");
  v43 = sub_29EF0(&qword_B86C0);
  v44 = swift_allocObject(v43, 64, 7);
  *(_OWORD *)(v44 + 16) = xmmword_8DFE0;
  *(_QWORD *)(v44 + 56) = sub_29EF0(&qword_B94A0);
  *(_QWORD *)(v44 + 32) = v21;
  isa = Array._bridgeToObjectiveC()().super.isa;
  v46 = String._bridgeToObjectiveC()();
  objc_msgSend(v42, "enqueueValueCall:arguments:file:line:", a3, isa, v46, 133);

  swift_bridgeObjectRelease(v44);
  swift_beginAccess(v7, v56, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v7);
  if (Strong)
  {
    v48 = (_BYTE *)Strong;
    v49 = *(void **)(Strong + OBJC_IVAR___JSAStoreContentLookupRequest_lookup);
    *(_QWORD *)(Strong + OBJC_IVAR___JSAStoreContentLookupRequest_lookup) = 0;

    v50 = *(void **)&v48[OBJC_IVAR___JSAStoreContentLookupRequest_lookupPromise];
    *(_QWORD *)&v48[OBJC_IVAR___JSAStoreContentLookupRequest_lookupPromise] = 0;

    v48[OBJC_IVAR___JSAStoreContentLookupRequest_frozen] = 0;
  }
}

void sub_5B034()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;

  v1 = OBJC_IVAR___JSAStoreContentLookupRequest_lookupPromise;
  objc_msgSend(*(id *)(v0 + OBJC_IVAR___JSAStoreContentLookupRequest_lookupPromise), "cancel");
  v2 = *(void **)(v0 + OBJC_IVAR___JSAStoreContentLookupRequest_lookup);
  *(_QWORD *)(v0 + OBJC_IVAR___JSAStoreContentLookupRequest_lookup) = 0;

  v3 = *(void **)(v0 + v1);
  *(_QWORD *)(v0 + v1) = 0;

  *(_BYTE *)(v0 + OBJC_IVAR___JSAStoreContentLookupRequest_frozen) = 0;
}

_QWORD *sub_5B0C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_29EF0(&qword_B8638);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_5B128(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

uint64_t type metadata accessor for StoreContentLookupRequest()
{
  return objc_opt_self(JSAStoreContentLookupRequest);
}

uint64_t sub_5B1C0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_5B1E4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_5B210(void *a1, uint64_t a2, __n128 a3)
{
  uint64_t v3;

  sub_5AAEC(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a3);
}

uint64_t sub_5B218(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_5B228(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unsigned __int8 *sub_5B230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  swift_bridgeObjectRetain(a2);
  v4 = String.init<A>(_:)(&v14, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v6 = v4;
  v7 = v5;
  if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v7) & 0xF;
    v14 = v6;
    v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }
  v6 = sub_5B7B8(v4, v5);
  v11 = v10;
  swift_bridgeObjectRelease(v7);
  v7 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 0x1000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }
LABEL_7:
  v12 = sub_5B53C(v8, v9, a3);
  swift_bridgeObjectRelease(v7);
  return v12;
}

float sub_5B314@<S0>(_QWORD *a1@<X0>, float *a2@<X8>)
{
  float result;

  result = *(float *)(*a1 + OBJC_IVAR___JSAStoreContentLookupRequest__priority);
  *a2 = result;
  return result;
}

float sub_5B32C(float *a1, _QWORD *a2)
{
  float result;

  result = *a1;
  *(float *)(*a2 + OBJC_IVAR___JSAStoreContentLookupRequest__priority) = *a1;
  return result;
}

uint64_t sub_5B344@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*a1 + OBJC_IVAR___JSAStoreContentLookupRequest__requestOptions);
  *a2 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_5B364(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_bridgeObjectRetain(*a1);
  return sub_59998(v1);
}

id sub_5B38C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = *(void **)(*a1 + OBJC_IVAR___JSAStoreContentLookupRequest__onResponse);
  *a2 = v2;
  return v2;
}

uint64_t method lookup function for StoreContentLookupRequest(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for StoreContentLookupRequest);
}

uint64_t dispatch thunk of StoreContentLookupRequest.priority.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_68.reloff + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of StoreContentLookupRequest.priority.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_68.flags + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of StoreContentLookupRequest.priority.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_68.reserved2 + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of StoreContentLookupRequest.requestOptions.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_B8.segname[(swift_isaMask & *v0) + 8])();
}

uint64_t dispatch thunk of StoreContentLookupRequest.requestOptions.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_B8.segname[(swift_isaMask & *v0) + 16])();
}

uint64_t dispatch thunk of StoreContentLookupRequest.requestOptions.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_B8.size + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of StoreContentLookupRequest.itemIdentifiers.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_B8.reserved2 + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of StoreContentLookupRequest.itemIdentifiers.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_108.sectname[swift_isaMask & *v0])();
}

uint64_t dispatch thunk of StoreContentLookupRequest.itemIdentifiers.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_108.segname[(swift_isaMask & *v0) - 8])();
}

uint64_t dispatch thunk of StoreContentLookupRequest.onResponse.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_108.size + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of StoreContentLookupRequest.onResponse.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_108.offset + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of StoreContentLookupRequest.onResponse.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_108.reloff + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of StoreContentLookupRequest.send()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_158.flags + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of StoreContentLookupRequest.cancel()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_158.reserved2 + (swift_isaMask & *v0)))();
}

unsigned __int8 *sub_5B53C(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_5B7B8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v6 = v5;
  v9 = sub_5B834(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_5B834(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_5B978(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_5B0C4(v12, 0);
      v5 = sub_5BA64((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v14;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }
}

unint64_t sub_5B978(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_5B128(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_5B128(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t sub_5BA64(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_5B128(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_5B128(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t _sSo13UIApplicationC5JSAppE20sharedIfNotExtensionABSgvgZ_0()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  unint64_t v4;
  void *ObjCClassFromMetadata;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t result;

  if ((_UIApplicationIsExtension() & 1) != 0)
  {
    if (qword_B8198 != -1)
      swift_once(&qword_B8198, sub_56F9C);
    v0 = type metadata accessor for Logger(0);
    sub_2D6E0(v0, (uint64_t)qword_B9350);
    v1 = Logger.logObject.getter();
    v2 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v1, v2))
    {
      v3 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_0, v1, v2, "Detected an extension trying to invoke sharedIfNotExtension", v3, 2u);
      swift_slowDealloc(v3, -1, -1);
    }

  }
  else
  {
    v4 = sub_5BDE4();
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v4);
    v6 = objc_msgSend(ObjCClassFromMetadata, "performSelector:", Selector.init(_:)(0xD000000000000011, 0x800000000008AA10));
    v7 = ObjCClassFromMetadata;
    if (v6)
    {
      swift_unknownObjectRetain(v6);
      v8 = objc_opt_self(UIApplication);
      result = swift_dynamicCastObjCClass(v6, v8);
      if (result)
        return result;
      swift_unknownObjectRelease(v6);
    }
  }
  return 0;
}

unint64_t sub_5BDE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_B94A8;
  if (!qword_B94A8)
  {
    v1 = objc_opt_self(UIApplication);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_B94A8);
  }
  return result;
}

uint64_t sub_5BE20()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD v18[4];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain(v2);
  sub_602F4(1, v1, v2);
  v4 = v3;
  swift_bridgeObjectRelease(v2);
  v5 = sub_60B0C();
  v6 = StringProtocol.capitalized.getter(&type metadata for Substring, v5);
  v8 = v7;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v2);
  v9 = sub_6037C(1uLL, v1, v2);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  swift_bridgeObjectRelease(v2);
  v18[0] = v9;
  v18[1] = v11;
  v18[2] = v13;
  v18[3] = v15;
  v16 = sub_60B50();
  swift_bridgeObjectRetain(v8);
  String.append<A>(contentsOf:)(v18, &type metadata for Substring, v16);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v15);
  return v6;
}

uint64_t sub_5BF34()
{
  return sub_5BF60(0x6570795465676170, 0xE800000000000000);
}

uint64_t sub_5BF4C()
{
  return sub_5BF60(0x644965676170, 0xE600000000000000);
}

uint64_t sub_5BF60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[24];
  uint64_t v19;

  v5 = v2;
  swift_beginAccess(v2 + 32, v18, 0, 0);
  v6 = *(_QWORD *)(v2 + 32);
  if (*(_QWORD *)(v6 + 16))
  {
    swift_bridgeObjectRetain(v6);
    v7 = sub_4CF3C(a1, a2);
    if ((v8 & 1) != 0)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
      swift_unknownObjectRetain(v9);
      swift_bridgeObjectRelease(v6);
      v19 = v9;
      if ((swift_dynamicCast(&v17, &v19, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6) & 1) != 0)return v17;
    }
    else
    {
      swift_bridgeObjectRelease(v6);
    }
  }
  v11 = *(_QWORD *)(v5 + 56);
  if (!v11)
    return 0;
  swift_beginAccess(v11 + 32, &v17, 0, 0);
  v12 = *(_QWORD *)(v11 + 32);
  if (!*(_QWORD *)(v12 + 16))
    return 0;
  swift_bridgeObjectRetain(v12);
  v13 = sub_4CF3C(a1, a2);
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease(v12);
    return 0;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v13);
  swift_unknownObjectRetain(v15);
  swift_bridgeObjectRelease(v12);
  v16 = v15;
  if (swift_dynamicCast(&v19, &v16, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6))return v19;
  else
    return 0;
}

uint64_t sub_5C0CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t i;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  char v26;
  uint64_t j;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  char v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t result;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _BYTE v73[24];

  v4[7] = 0;
  v4[2] = a1;
  v4[3] = a2;
  v6 = sub_29EF0(&qword_B8618);
  v7 = swift_allocObject(v6, 1120, 7);
  *(_OWORD *)(v7 + 16) = xmmword_8E6E0;
  *(_QWORD *)(v7 + 32) = 0xD000000000000011;
  *(_QWORD *)(v7 + 40) = 0x800000000008AC70;
  *(_QWORD *)(v7 + 48) = 7368801;
  *(_QWORD *)(v7 + 56) = 0xE300000000000000;
  *(_QWORD *)(v7 + 64) = 0x6973726556707061;
  *(_QWORD *)(v7 + 72) = 0xEA00000000006E6FLL;
  *(_QWORD *)(v7 + 80) = 0x7372655665736162;
  *(_QWORD *)(v7 + 88) = 0xEB000000006E6F69;
  *(_QWORD *)(v7 + 96) = 0x6449746E65696C63;
  *(_QWORD *)(v7 + 104) = 0xE800000000000000;
  *(_QWORD *)(v7 + 112) = 0x7365696B6F6F63;
  *(_QWORD *)(v7 + 120) = 0xE700000000000000;
  *(_QWORD *)(v7 + 128) = 1682535268;
  *(_QWORD *)(v7 + 136) = 0xE400000000000000;
  *(_QWORD *)(v7 + 144) = 0x6D6954746E657665;
  *(_QWORD *)(v7 + 152) = 0xE900000000000065;
  *(_QWORD *)(v7 + 160) = 0x707954746E657665;
  *(_QWORD *)(v7 + 168) = 0xE900000000000065;
  strcpy((char *)(v7 + 176), "hardwareFamily");
  *(_BYTE *)(v7 + 191) = -18;
  strcpy((char *)(v7 + 192), "hardwareModel");
  *(_WORD *)(v7 + 206) = -4864;
  *(_QWORD *)(v7 + 208) = 0x70704174736F68;
  *(_QWORD *)(v7 + 216) = 0xE700000000000000;
  strcpy((char *)(v7 + 224), "hostAppVersion");
  *(_BYTE *)(v7 + 239) = -18;
  *(_QWORD *)(v7 + 240) = 28777;
  *(_QWORD *)(v7 + 248) = 0xE200000000000000;
  *(_QWORD *)(v7 + 256) = 0x75746974614C7069;
  *(_QWORD *)(v7 + 264) = 0xEA00000000006564;
  *(_QWORD *)(v7 + 272) = 0x7469676E6F4C7069;
  *(_QWORD *)(v7 + 280) = 0xEB00000000656475;
  *(_QWORD *)(v7 + 288) = 0x726F7774654E7069;
  *(_QWORD *)(v7 + 296) = 0xE90000000000006BLL;
  strcpy((char *)(v7 + 304), "ipNetworkType");
  *(_WORD *)(v7 + 318) = -4864;
  strcpy((char *)(v7 + 320), "mescalStatus");
  *(_BYTE *)(v7 + 333) = 0;
  *(_WORD *)(v7 + 334) = -5120;
  *(_QWORD *)(v7 + 336) = 29551;
  *(_QWORD *)(v7 + 344) = 0xE200000000000000;
  strcpy((char *)(v7 + 352), "osBuildNumber");
  *(_WORD *)(v7 + 366) = -4864;
  strcpy((char *)(v7 + 368), "osMajorVersion");
  *(_BYTE *)(v7 + 383) = -18;
  *(_QWORD *)(v7 + 384) = 0x6F6973726556736FLL;
  *(_QWORD *)(v7 + 392) = 0xE90000000000006ELL;
  *(_QWORD *)(v7 + 400) = 1701273968;
  *(_QWORD *)(v7 + 408) = 0xE400000000000000;
  *(_QWORD *)(v7 + 416) = 0x746E6F4365676170;
  *(_QWORD *)(v7 + 424) = 0xEB00000000747865;
  *(_QWORD *)(v7 + 432) = 0x6174654465676170;
  *(_QWORD *)(v7 + 440) = 0xEB00000000736C69;
  *(_QWORD *)(v7 + 448) = 0x644965676170;
  *(_QWORD *)(v7 + 456) = 0xE600000000000000;
  *(_QWORD *)(v7 + 464) = 0x6570795465676170;
  *(_QWORD *)(v7 + 472) = 0xE800000000000000;
  *(_QWORD *)(v7 + 480) = 0x6C725565676170;
  *(_QWORD *)(v7 + 488) = 0xE700000000000000;
  *(_QWORD *)(v7 + 496) = 0x7461526C65786970;
  *(_QWORD *)(v7 + 504) = 0xEA00000000006F69;
  *(_QWORD *)(v7 + 512) = 0x656D695474736F70;
  *(_QWORD *)(v7 + 520) = 0xE800000000000000;
  *(_QWORD *)(v7 + 528) = 0x5474706965636572;
  *(_QWORD *)(v7 + 536) = 0xEB00000000656D69;
  strcpy((char *)(v7 + 544), "screenHeight");
  *(_BYTE *)(v7 + 557) = 0;
  *(_WORD *)(v7 + 558) = -5120;
  *(_QWORD *)(v7 + 560) = 0x69576E6565726373;
  *(_QWORD *)(v7 + 568) = 0xEB00000000687464;
  *(_QWORD *)(v7 + 576) = 0xD000000000000010;
  *(_QWORD *)(v7 + 584) = 0x800000000008AC90;
  strcpy((char *)(v7 + 592), "timezoneOffset");
  *(_BYTE *)(v7 + 607) = -18;
  *(_QWORD *)(v7 + 608) = 0x6369706F74;
  *(_QWORD *)(v7 + 616) = 0xE500000000000000;
  *(_QWORD *)(v7 + 624) = 0x6E65674172657375;
  *(_QWORD *)(v7 + 632) = 0xE900000000000074;
  *(_QWORD *)(v7 + 640) = 0x6570795472657375;
  *(_QWORD *)(v7 + 648) = 0xE800000000000000;
  *(_QWORD *)(v7 + 656) = 0xD000000000000011;
  *(_QWORD *)(v7 + 664) = 0x800000000008ACB0;
  *(_QWORD *)(v7 + 672) = 0xD000000000000010;
  *(_QWORD *)(v7 + 680) = 0x800000000008ACD0;
  *(_QWORD *)(v7 + 688) = 0xD000000000000011;
  *(_QWORD *)(v7 + 696) = 0x800000000008ACF0;
  *(_QWORD *)(v7 + 704) = 0xD000000000000011;
  *(_QWORD *)(v7 + 712) = 0x800000000008AD10;
  *(_QWORD *)(v7 + 720) = 0xD000000000000010;
  *(_QWORD *)(v7 + 728) = 0x800000000008AD30;
  *(_QWORD *)(v7 + 736) = 0xD000000000000014;
  *(_QWORD *)(v7 + 744) = 0x800000000008AD50;
  strcpy((char *)(v7 + 752), "eventVersion");
  *(_BYTE *)(v7 + 765) = 0;
  *(_WORD *)(v7 + 766) = -5120;
  *(_QWORD *)(v7 + 768) = 0x64656E6769537369;
  *(_QWORD *)(v7 + 776) = 0xEA00000000006E49;
  *(_QWORD *)(v7 + 784) = 0x65676175676E616CLL;
  *(_QWORD *)(v7 + 792) = 0xE800000000000000;
  *(_QWORD *)(v7 + 800) = 0x69536C616373656DLL;
  *(_QWORD *)(v7 + 808) = 0xEF65727574616E67;
  *(_QWORD *)(v7 + 816) = 0x6D726F6674616C70;
  *(_QWORD *)(v7 + 824) = 0xEA00000000006449;
  strcpy((char *)(v7 + 832), "platformName");
  *(_BYTE *)(v7 + 845) = 0;
  *(_WORD *)(v7 + 846) = -5120;
  *(_QWORD *)(v7 + 848) = 0x6F724665726F7473;
  *(_QWORD *)(v7 + 856) = 0xEA0000000000746ELL;
  *(_QWORD *)(v7 + 864) = 0xD000000000000011;
  *(_QWORD *)(v7 + 872) = 0x800000000008AD70;
  *(_QWORD *)(v7 + 880) = 0x54726573776F7262;
  *(_QWORD *)(v7 + 888) = 0xEB00000000657079;
  strcpy((char *)(v7 + 896), "browserVersion");
  *(_BYTE *)(v7 + 911) = -18;
  strcpy((char *)(v7 + 912), "clientVersion");
  *(_WORD *)(v7 + 926) = -4864;
  *(_QWORD *)(v7 + 928) = 0x697463656E6E6F63;
  *(_QWORD *)(v7 + 936) = 0xEA00000000006E6FLL;
  *(_QWORD *)(v7 + 944) = 0x6D726F6674616C70;
  *(_QWORD *)(v7 + 952) = 0xE800000000000000;
  strcpy((char *)(v7 + 960), "resourceRevNum");
  *(_BYTE *)(v7 + 975) = -18;
  *(_QWORD *)(v7 + 976) = 0x6167656C65447078;
  *(_QWORD *)(v7 + 984) = 0xEF6F666E49736574;
  *(_QWORD *)(v7 + 992) = 0x724674736F507078;
  *(_QWORD *)(v7 + 1000) = 0xEF79636E65757165;
  strcpy((char *)(v7 + 1008), "xpSendMethod");
  *(_BYTE *)(v7 + 1021) = 0;
  *(_WORD *)(v7 + 1022) = -5120;
  *(_QWORD *)(v7 + 1024) = 0xD000000000000013;
  *(_QWORD *)(v7 + 1032) = 0x800000000008AD90;
  strcpy((char *)(v7 + 1040), "capacityData");
  *(_BYTE *)(v7 + 1053) = 0;
  *(_WORD *)(v7 + 1054) = -5120;
  *(_QWORD *)(v7 + 1056) = 0xD000000000000015;
  *(_QWORD *)(v7 + 1064) = 0x800000000008ADB0;
  strcpy((char *)(v7 + 1072), "capacityDisk");
  *(_BYTE *)(v7 + 1085) = 0;
  *(_WORD *)(v7 + 1086) = -5120;
  strcpy((char *)(v7 + 1088), "capacitySystem");
  *(_BYTE *)(v7 + 1103) = -18;
  *(_QWORD *)(v7 + 1104) = 0xD000000000000017;
  *(_QWORD *)(v7 + 1112) = 0x800000000008ADD0;
  v70 = URLParser.ParserURLType.rawValue.getter(v7);
  v8 = 0;
  v4[4] = &_swiftEmptyDictionarySingleton;
  v9 = v4 + 4;
  v4[5] = &_swiftEmptyDictionarySingleton;
  v66 = v4;
  v67 = v4 + 5;
  v71 = a3;
  v12 = *(_QWORD *)(a3 + 64);
  v11 = a3 + 64;
  v10 = v12;
  v13 = 1 << *(_BYTE *)(v11 - 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v10;
  v68 = v11;
  v69 = (unint64_t)(v13 + 63) >> 6;
  if ((v14 & v10) == 0)
    goto LABEL_5;
LABEL_4:
  v16 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (i = v16 | (v8 << 6); ; i = __clz(__rbit64(v19)) + (v8 << 6))
  {
    if ((v21 = (uint64_t *)(*(_QWORD *)(v71 + 48) + 16 * i),
          v23 = *v21,
          v22 = v21[1],
          v24 = *(_QWORD *)(*(_QWORD *)(v71 + 56) + 8 * i),
          *v21 == 0xD000000000000011)
      && v22 == 0x800000000008AC70
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000008AC70, *v21, v21[1], 0) & 1) != 0
      || (v23 == 7368801 ? (v25 = v22 == 0xE300000000000000) : (v25 = 0), v25))
    {
      swift_bridgeObjectRetain(v22);
      swift_unknownObjectRetain(v24);
    }
    else
    {
      v26 = _stringCompareWithSmolCheck(_:_:expecting:)(7368801, 0xE300000000000000, v23, v22, 0);
      swift_bridgeObjectRetain(v22);
      swift_unknownObjectRetain(v24);
      if ((v26 & 1) == 0)
      {
        for (j = 0; j != 1056; j += 16)
        {
          v28 = *(_QWORD *)(v70 + j + 64);
          v29 = *(_QWORD *)(v70 + j + 72);
          v30 = v28 == v23 && v29 == v22;
          if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(v28, v29, v23, v22, 0) & 1) != 0)
            goto LABEL_40;
        }
        swift_beginAccess(v67, v73, 33, 0);
        swift_unknownObjectRetain(v24);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v67);
        v32 = (_QWORD *)*v67;
        *v67 = 0x8000000000000000;
        v34 = sub_4CF3C(v23, v22);
        v35 = v32[2];
        v36 = (v33 & 1) == 0;
        v37 = v35 + v36;
        if (__OFADD__(v35, v36))
          goto LABEL_66;
        v38 = v33;
        if (v32[3] < v37)
        {
          sub_65A00(v37, isUniquelyReferenced_nonNull_native);
          v39 = sub_4CF3C(v23, v22);
          if ((v38 & 1) != (v40 & 1))
            goto LABEL_68;
          v34 = v39;
          if ((v38 & 1) == 0)
            goto LABEL_58;
LABEL_50:
          v54 = v32[7];
          v55 = 8 * v34;
          swift_unknownObjectRelease(*(_QWORD *)(v54 + v55));
          *(_QWORD *)(v54 + v55) = v24;
LABEL_60:
          v60 = *v67;
          *v67 = v32;
          goto LABEL_55;
        }
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v33 & 1) != 0)
            goto LABEL_50;
        }
        else
        {
          sub_64FE8();
          if ((v38 & 1) != 0)
            goto LABEL_50;
        }
LABEL_58:
        v32[(v34 >> 6) + 8] |= 1 << v34;
        v61 = (uint64_t *)(v32[6] + 16 * v34);
        *v61 = v23;
        v61[1] = v22;
        *(_QWORD *)(v32[7] + 8 * v34) = v24;
        v62 = v32[2];
        v58 = __OFADD__(v62, 1);
        v63 = v62 + 1;
        if (v58)
          goto LABEL_67;
        v32[2] = v63;
        swift_bridgeObjectRetain(v22);
        goto LABEL_60;
      }
    }
LABEL_40:
    swift_beginAccess(v9, v73, 33, 0);
    swift_unknownObjectRetain(v24);
    v41 = swift_isUniquelyReferenced_nonNull_native(*v9);
    v42 = *v9;
    v72 = (_QWORD *)*v9;
    *v9 = 0x8000000000000000;
    v44 = sub_4CF3C(v23, v22);
    v45 = *(_QWORD *)(v42 + 16);
    v46 = (v43 & 1) == 0;
    v47 = v45 + v46;
    if (__OFADD__(v45, v46))
    {
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
    v48 = v43;
    if (*(_QWORD *)(v42 + 24) >= v47)
    {
      if ((v41 & 1) != 0)
      {
        v51 = v72;
        if ((v43 & 1) != 0)
          goto LABEL_47;
      }
      else
      {
        sub_64FE8();
        v51 = v72;
        if ((v48 & 1) != 0)
          goto LABEL_47;
      }
    }
    else
    {
      sub_65A00(v47, v41);
      v49 = sub_4CF3C(v23, v22);
      if ((v48 & 1) != (v50 & 1))
        goto LABEL_68;
      v44 = v49;
      v51 = v72;
      if ((v48 & 1) != 0)
      {
LABEL_47:
        v52 = v51[7];
        v53 = 8 * v44;
        swift_unknownObjectRelease(*(_QWORD *)(v52 + v53));
        *(_QWORD *)(v52 + v53) = v24;
        goto LABEL_54;
      }
    }
    v51[(v44 >> 6) + 8] |= 1 << v44;
    v56 = (uint64_t *)(v51[6] + 16 * v44);
    *v56 = v23;
    v56[1] = v22;
    *(_QWORD *)(v51[7] + 8 * v44) = v24;
    v57 = v51[2];
    v58 = __OFADD__(v57, 1);
    v59 = v57 + 1;
    if (v58)
      goto LABEL_63;
    v51[2] = v59;
    swift_bridgeObjectRetain(v22);
LABEL_54:
    v60 = *v9;
    *v9 = v51;
LABEL_55:
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v60);
    swift_endAccess(v73);
    swift_unknownObjectRelease(v24);
    if (v15)
      goto LABEL_4;
LABEL_5:
    v18 = v8 + 1;
    if (__OFADD__(v8, 1))
      goto LABEL_64;
    if (v18 >= v69)
    {
LABEL_61:
      swift_bridgeObjectRelease(v70);
      swift_release(v71);
      result = (uint64_t)v66;
      v66[6] = a4;
      return result;
    }
    v19 = *(_QWORD *)(v68 + 8 * v18);
    ++v8;
    if (!v19)
    {
      v8 = v18 + 1;
      if (v18 + 1 >= v69)
        goto LABEL_61;
      v19 = *(_QWORD *)(v68 + 8 * v8);
      if (!v19)
      {
        v8 = v18 + 2;
        if (v18 + 2 >= v69)
          goto LABEL_61;
        v19 = *(_QWORD *)(v68 + 8 * v8);
        if (!v19)
          break;
      }
    }
LABEL_18:
    v15 = (v19 - 1) & v19;
  }
  v20 = v18 + 3;
  if (v20 >= v69)
    goto LABEL_61;
  v19 = *(_QWORD *)(v68 + 8 * v20);
  if (v19)
  {
    v8 = v20;
    goto LABEL_18;
  }
  while (1)
  {
    v8 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v8 >= v69)
      goto LABEL_61;
    v19 = *(_QWORD *)(v68 + 8 * v8);
    ++v20;
    if (v19)
      goto LABEL_18;
  }
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

_QWORD *sub_5CD44()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  v1 = v0[7];
  v0[7] = 0;
  if (v1)
  {
    do
    {
      if (!swift_isUniquelyReferenced_native(v1))
        break;
      v2 = *(_QWORD *)(v1 + 56);
      swift_retain(v2);
      swift_release(v1);
      v1 = v2;
    }
    while (v2);
  }
  swift_release(v1);
  return v0;
}

uint64_t sub_5CDC4()
{
  uint64_t v0;

  sub_5CD44();
  return swift_deallocClassInstance(v0, 64, 7);
}

id sub_5CDE4()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MetricsController()), "init");
  qword_B94B0 = (uint64_t)result;
  return result;
}

id MetricsController.metrics.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___JSAMetricsController_metrics);
}

char *MetricsController.init()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  char *v15;
  id v16;
  id v17;
  NSString v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  objc_class *v26;
  id v27;
  id v28;
  char *v29;
  id v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  void **aBlock;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  objc_super v63;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v54 = *(_QWORD *)(v2 - 8);
  v55 = v2;
  __chkstk_darwin(v2);
  v53 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v4 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v51 = *(_QWORD *)(v10 - 8);
  v52 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = OBJC_IVAR___JSAMetricsController_metrics;
  v14 = (void *)objc_opt_self(BUBag);
  v15 = v1;
  v16 = objc_msgSend(v14, "defaultBag");
  v17 = objc_allocWithZone((Class)AMSMetrics);
  v18 = String._bridgeToObjectiveC()();
  v19 = objc_msgSend(v17, "initWithContainerID:bag:", v18, v16);

  v20 = AMSMetrics.withRemoteInspection.getter();
  *(_QWORD *)&v1[v13] = v20;
  *(_QWORD *)&v15[OBJC_IVAR___JSAMetricsController_experienceEvents] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v15[OBJC_IVAR___JSAMetricsController__performanceEvents] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v15[OBJC_IVAR___JSAMetricsController_acknowledgementObservation] = 0;
  v21 = OBJC_IVAR___JSAMetricsController_submissionQueue;
  sub_2E594(0, (unint64_t *)&qword_B8AE0, OS_dispatch_queue_ptr);
  v22 = static DispatchQoS.utility.getter();
  static OS_dispatch_queue.Attributes.initiallyInactive.getter(v22);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v50);
  *(_QWORD *)&v15[v21] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000017, 0x800000000008AA30, v12, v9, v6, 0);
  v23 = OBJC_IVAR___JSAMetricsController_isSuspended;
  v24 = sub_29EF0(&qword_B94F0);
  v25 = swift_allocObject(v24, 24, 7);
  *(_DWORD *)(v25 + 20) = 0;
  *(_BYTE *)(v25 + 16) = 0;
  *(_QWORD *)&v15[v23] = v25;
  *(_QWORD *)&v15[OBJC_IVAR___JSAMetricsController_suspensionAssertionProvider] = 0;

  v26 = (objc_class *)type metadata accessor for MetricsController();
  v63.receiver = v15;
  v63.super_class = v26;
  v27 = objc_msgSendSuper2(&v63, "init");
  v28 = objc_allocWithZone((Class)BUCountingAssertionProvider);
  v29 = (char *)v27;
  v30 = objc_msgSend(v28, "initWithDelegate:", v29);
  v31 = *(void **)&v29[OBJC_IVAR___JSAMetricsController_suspensionAssertionProvider];
  *(_QWORD *)&v29[OBJC_IVAR___JSAMetricsController_suspensionAssertionProvider] = v30;

  v32 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_B81B0 != -1)
    swift_once(&qword_B81B0, sub_5F768);
  v33 = qword_B94B8;
  v34 = swift_allocObject(&unk_A1A10, 24, 7);
  swift_unknownObjectWeakInit(v34 + 16, v29);
  v61 = sub_5F7C0;
  v62 = v34;
  aBlock = _NSConcreteStackBlock;
  v58 = 1107296256;
  v59 = sub_5D3F8;
  v60 = &unk_A1A28;
  v35 = _Block_copy(&aBlock);
  v36 = objc_msgSend(v32, "addObserverForName:object:queue:usingBlock:", v33, 0, 0, v35, swift_release(v62).n128_f64[0]);
  _Block_release(v35);

  v37 = *(_QWORD *)&v29[OBJC_IVAR___JSAMetricsController_acknowledgementObservation];
  *(_QWORD *)&v29[OBJC_IVAR___JSAMetricsController_acknowledgementObservation] = v36;
  swift_unknownObjectRelease(v37);
  objc_msgSend(*(id *)&v29[OBJC_IVAR___JSAMetricsController_metrics], "setFlushTimerEnabled:", 0);
  v38 = swift_allocObject(&unk_A1A10, 24, 7);
  swift_unknownObjectWeakInit(v38 + 16, v29);
  v61 = sub_5F7E0;
  v62 = v38;
  aBlock = _NSConcreteStackBlock;
  v58 = 1107296256;
  v59 = sub_2A1A8;
  v60 = &unk_A1A50;
  v39 = _Block_copy(&aBlock);
  v40 = swift_retain(v38);
  static DispatchQoS.unspecified.getter(v40);
  v56 = _swiftEmptyArrayStorage;
  v41 = sub_5F7E8();
  v42 = sub_29EF0((uint64_t *)&unk_B8C90);
  v43 = sub_5320C();
  v44 = v12;
  v45 = v53;
  v46 = v55;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v56, v42, v43, v55, v41);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v44, v45, v39);

  _Block_release(v39);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v45, v46);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v44, v52);
  v47 = v62;
  swift_release(v38);
  swift_release(v47);
  return v29;
}

uint64_t type metadata accessor for MetricsController()
{
  return objc_opt_self(JSAMetricsController);
}

void sub_5D3A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = (void *)Strong;
    sub_5D788();

  }
}

uint64_t sub_5D3F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *);
  uint64_t v11;

  v4 = type metadata accessor for Notification(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *))(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2);
  swift_retain(v8);
  v9(v7);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void sub_5D49C(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  char *v3;
  NSString v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  _BYTE v13[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v13, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (char *)Strong;
    v4 = (id)BUOnboardingBooksBundleID();
    if (!v4)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v6 = v5;
      v4 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v6);
    }
    v7 = objc_msgSend((id)objc_opt_self(AMSAcknowledgePrivacyTask), "acknowledgementNeededForPrivacyIdentifier:", v4);

    if ((v7 & 1) == 0)
    {
      if (qword_B8178 != -1)
        swift_once(&qword_B8178, sub_56E94);
      v8 = type metadata accessor for Logger(0);
      v9 = sub_2D6E0(v8, (uint64_t)qword_B92F0);
      v10 = Logger.logObject.getter(v9);
      v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v12 = 0;
        _os_log_impl(&dword_0, v10, v11, "Enabling auto flushing: User has acknowledged privacy.", v12, 2u);
        swift_slowDealloc(v12, -1, -1);
      }

      objc_msgSend(*(id *)&v3[OBJC_IVAR___JSAMetricsController_metrics], "setFlushTimerEnabled:", 1);
    }

  }
}

id MetricsController.__deallocating_deinit()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  objc_super v5;

  dispatch_activate(*(dispatch_object_t *)&v0[OBJC_IVAR___JSAMetricsController_submissionQueue]);
  v1 = *(_QWORD *)&v0[OBJC_IVAR___JSAMetricsController_acknowledgementObservation];
  if (v1)
  {
    v2 = (void *)objc_opt_self(NSNotificationCenter);
    swift_unknownObjectRetain(v1);
    v3 = objc_msgSend(v2, "defaultCenter");
    objc_msgSend(v3, "removeObserver:", v1);
    swift_unknownObjectRelease(v1);

  }
  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for MetricsController();
  return objc_msgSendSuper2(&v5, "dealloc");
}

void sub_5D788()
{
  char *v0;
  char *v1;
  NSString v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  int v15;
  uint64_t v16;

  v1 = v0;
  v2 = (id)BUOnboardingBooksBundleID();
  if (!v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v4 = v3;
    v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v4);
  }
  v5 = objc_msgSend((id)objc_opt_self(AMSAcknowledgePrivacyTask), "acknowledgementNeededForPrivacyIdentifier:", v2);

  if (qword_B8178 != -1)
    swift_once(&qword_B8178, sub_56E94);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_2D6E0(v6, (uint64_t)qword_B92F0);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 67109120;
    v15 = v5 ^ 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v10 + 4, v10 + 8);
    _os_log_impl(&dword_0, v8, v9, "Privacy acknowledgement changed to %{BOOL}d", v10, 8u);
    swift_slowDealloc(v10, -1, -1);
  }

  if ((v5 & 1) == 0)
  {
    dispatch_activate(*(dispatch_object_t *)&v1[OBJC_IVAR___JSAMetricsController_submissionQueue]);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_0, v12, v13, "Enabling autoflushing because user has acknowledged privacy, and flushing right away", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

    objc_msgSend(*(id *)&v1[OBJC_IVAR___JSAMetricsController_metrics], "setFlushTimerEnabled:", 1);
    objc_msgSend(v1, "flushUnreportedEvents");
  }
}

uint64_t sub_5D998()
{
  return sub_5D9B0(&OBJC_IVAR___JSAMetricsController_experienceEvents);
}

uint64_t sub_5D9A4()
{
  return sub_5D9B0(&OBJC_IVAR___JSAMetricsController__performanceEvents);
}

uint64_t sub_5D9B0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _BYTE v5[24];

  v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess(v2, v5, 1, 0);
  v3 = *v2;
  *v2 = (uint64_t)&_swiftEmptyArrayStorage;
  return swift_bridgeObjectRelease(v3);
}

void sub_5DA00()
{
  uint64_t v0;
  uint64_t v1;
  NSString v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;

  v1 = v0;
  v2 = (id)BUOnboardingBooksBundleID();
  if (!v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v4 = v3;
    v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v4);
  }
  v5 = objc_msgSend((id)objc_opt_self(AMSAcknowledgePrivacyTask), "acknowledgementNeededForPrivacyIdentifier:", v2);

  if ((v5 & 1) == 0)
  {
    if (qword_B8178 != -1)
      swift_once(&qword_B8178, sub_56E94);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_2D6E0(v6, (uint64_t)qword_B92F0);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_0, v8, v9, "Starting event submission", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    dispatch_activate(*(dispatch_object_t *)(v1 + OBJC_IVAR___JSAMetricsController_submissionQueue));
  }
}

id sub_5DB74()
{
  uint64_t v0;
  id result;

  result = *(id *)(v0 + OBJC_IVAR___JSAMetricsController_suspensionAssertionProvider);
  if (result)
    return objc_msgSend(result, "newAssertion");
  __break(1u);
  return result;
}

uint64_t sub_5DBB4(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t result;
  char v13;

  v3 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v3 < 0 || (v3 & 0x4000000000000000) != 0)
  {
    v3 = sub_5FF90(v3);
    *v1 = v3;
  }
  v5 = v3 & 0xFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      v9 = v5 + 8 * a1;
      v10 = *(_QWORD *)(v9 + 32);
      v11 = memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(_QWORD *)(v5 + 16) = v7;
      specialized Array._endMutation()(v11);
      return v10;
    }
  }
  v13 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v13, 1046, 0);
  __break(1u);
  return result;
}

void sub_5DC94(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSString v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  void **v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  id v59;
  NSString v60;
  id v61;
  unint64_t v62;
  Class isa;
  id v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  id v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  int v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  void **aBlock;
  uint64_t v99;
  uint64_t (*v100)(uint64_t);
  void *v101;
  void (*v102)();
  uint64_t v103;

  v5 = v4;
  v88 = a4;
  v9 = 0xE90000000000003ELL;
  v95 = 0x6E776F6E6B6E753CLL;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v93 = *(_QWORD *)(v10 - 8);
  v94 = v10;
  __chkstk_darwin(v10);
  v92 = (char *)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v90 = *(_QWORD *)(v12 - 8);
  v91 = v12;
  __chkstk_darwin(v12);
  v89 = (char *)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_29EF0(&qword_B8438);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain(a1);
  v18 = a2;
  v96 = a3;
  v19 = String._bridgeToObjectiveC()();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
  aBlock = (void **)a1;
  sub_5FDC8((uint64_t)v19, 0x6369706F74, 0xE500000000000000, isUniquelyReferenced_nonNull_native);
  v21 = (uint64_t)aBlock;
  swift_bridgeObjectRelease(0x8000000000000000);
  if (!*(_QWORD *)(a1 + 16))
  {
    v30 = a2;
    goto LABEL_29;
  }
  v22 = sub_4CF3C(0x6144746E6576655FLL, 0xEA00000000006174);
  if ((v23 & 1) == 0)
    goto LABEL_24;
  aBlock = *(void ***)(*(_QWORD *)(a1 + 56) + 8 * v22);
  swift_unknownObjectRetain(aBlock);
  v24 = sub_29EF0(&qword_B96F0);
  if ((swift_dynamicCast(&v97, &aBlock, (char *)&type metadata for Swift.AnyObject + 8, v24, 6) & 1) == 0)
    goto LABEL_24;
  v25 = v97[2];
  v87 = v97;
  if (v25
    && (v26 = sub_4CF3C(0x707954746E657665, 0xE900000000000065), (v27 & 1) != 0)
    && (v97 = *(_QWORD **)(v87[7] + 8 * v26),
        swift_unknownObjectRetain(v97),
        swift_dynamicCast(&aBlock, &v97, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6))|| *(_QWORD *)(a1 + 16)&& (v28 = sub_4CF3C(0x7954746E6576655FLL, 0xEA00000000006570), (v29 & 1) != 0)&& (v97 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 8 * v28), swift_unknownObjectRetain(v97), swift_dynamicCast(&aBlock, &v97, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6)))
  {
    v9 = v99;
    v95 = (uint64_t)aBlock;
  }
  v30 = a2;
  if (qword_B80C8 != -1)
    goto LABEL_66;
  while (1)
  {
    v31 = sub_2D6E0(v14, (uint64_t)qword_B89B8);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v31, v14);
    UserDefault.wrappedValue.getter(&aBlock, v14);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    if (aBlock != 1)
      break;
    v32 = type metadata accessor for FigaroEvent();
    v14 = swift_allocObject(v32, 64, 7);
    swift_bridgeObjectRetain(v9);
    sub_5C0CC(v95, v9, (uint64_t)v87, v21);
    v33 = (uint64_t *)(v5 + OBJC_IVAR___JSAMetricsController__performanceEvents);
    swift_beginAccess(v5 + OBJC_IVAR___JSAMetricsController__performanceEvents, &aBlock, 33, 0);
    v34 = *v33;
    if ((unint64_t)*v33 >> 62)
    {
      if (v34 < 0)
        v82 = *v33;
      else
        v82 = v34 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v33);
      v83 = _CocoaArrayWrapper.endIndex.getter(v82);
      swift_bridgeObjectRelease(v34);
      v34 = *v33;
      if (v83 < 100)
        goto LABEL_18;
    }
    else if (*(uint64_t *)((char *)&dword_10 + (v34 & 0xFFFFFFFFFFFFF8)) < 100)
    {
      goto LABEL_18;
    }
    if ((unint64_t)v34 >> 62)
    {
      if (v34 < 0)
        v84 = v34;
      else
        v84 = v34 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v34);
      v85 = _CocoaArrayWrapper.endIndex.getter(v84);
      swift_bridgeObjectRelease(v34);
      v36 = v85 - 1;
      if (__OFSUB__(v85, 1))
      {
LABEL_77:
        __break(1u);
        return;
      }
    }
    else
    {
      v35 = *(_QWORD *)((char *)&dword_10 + (v34 & 0xFFFFFFFFFFFFF8));
      v36 = v35 - 1;
      if (__OFSUB__(v35, 1))
        goto LABEL_77;
    }
    v37 = sub_5DBB4(v36);
    swift_release(v37);
    v34 = *v33;
LABEL_18:
    if (!((unint64_t)v34 >> 62))
      goto LABEL_38;
    if (v34 < 0)
      v38 = v34;
    else
      v38 = v34 & 0xFFFFFFFFFFFFFF8;
    swift_retain(v14);
    swift_bridgeObjectRetain(v34);
    v39 = _CocoaArrayWrapper.endIndex.getter(v38);
    swift_bridgeObjectRelease(v34);
    v21 = v96;
    if ((v39 & 0x8000000000000000) == 0)
      goto LABEL_39;
    __break(1u);
LABEL_24:
    v30 = v18;
    if (*(_QWORD *)(a1 + 16))
    {
      v40 = sub_4CF3C(0x707954746E657665, v9 + 39);
      if ((v41 & 1) != 0)
      {
        v97 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 8 * v40);
        swift_unknownObjectRetain(v97);
        if (swift_dynamicCast(&aBlock, &v97, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6))
        {
          v9 = v99;
          v95 = (uint64_t)aBlock;
        }
      }
    }
LABEL_29:
    if (qword_B80C8 != -1)
      swift_once(&qword_B80C8, sub_446A0);
    v42 = sub_2D6E0(v14, (uint64_t)qword_B89B8);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v42, v14);
    UserDefault.wrappedValue.getter(&aBlock, v14);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    if (aBlock != 1)
      goto LABEL_41;
    v43 = type metadata accessor for FigaroEvent();
    v14 = swift_allocObject(v43, 64, 7);
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(v9);
    sub_5C0CC(v95, v9, a1, v21);
    v44 = (uint64_t *)(v5 + OBJC_IVAR___JSAMetricsController_experienceEvents);
    swift_beginAccess(v5 + OBJC_IVAR___JSAMetricsController_experienceEvents, &aBlock, 33, 0);
    v21 = *v44;
    if ((unint64_t)*v44 >> 62)
    {
      if (v21 < 0)
        v77 = *v44;
      else
        v77 = v21 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v44);
      v78 = _CocoaArrayWrapper.endIndex.getter(v77);
      swift_bridgeObjectRelease(v21);
      v21 = *v44;
      if (v78 < 100)
        goto LABEL_37;
    }
    else if (*(uint64_t *)((char *)&dword_10 + (v21 & 0xFFFFFFFFFFFFF8)) < 100)
    {
      goto LABEL_37;
    }
    if ((unint64_t)v21 >> 62)
      goto LABEL_60;
    v30 = *(_QWORD *)((char *)&dword_10 + (v21 & 0xFFFFFFFFFFFFF8));
    v45 = v30 - 1;
    while (!__OFSUB__(v30, 1))
    {
      v46 = sub_5DBB4(v45);
      swift_release(v46);
      v21 = *v44;
LABEL_37:
      if (!((unint64_t)v21 >> 62))
      {
LABEL_38:
        swift_retain(v14);
        v21 = v96;
LABEL_39:
        sub_5F9C4(0, 0, v14);
        swift_endAccess(&aBlock);
        swift_release(v14);
        v30 = v18;
        goto LABEL_42;
      }
      if (v21 < 0)
        v79 = v21;
      else
        v79 = v21 & 0xFFFFFFFFFFFFFF8;
      swift_retain(v14);
      swift_bridgeObjectRetain(v21);
      v80 = _CocoaArrayWrapper.endIndex.getter(v79);
      swift_bridgeObjectRelease(v21);
      v21 = v96;
      if ((v80 & 0x8000000000000000) == 0)
        goto LABEL_39;
      __break(1u);
LABEL_60:
      if (v21 < 0)
        v81 = v21;
      else
        v81 = v21 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v21);
      v30 = _CocoaArrayWrapper.endIndex.getter(v81);
      swift_bridgeObjectRelease(v21);
      v45 = v30 - 1;
    }
    __break(1u);
LABEL_66:
    swift_once(&qword_B80C8, sub_446A0);
  }
  swift_bridgeObjectRelease(v87);
LABEL_41:
  swift_bridgeObjectRelease(v21);
  v21 = v96;
LABEL_42:
  if (qword_B8178 != -1)
    swift_once(&qword_B8178, sub_56E94);
  v47 = type metadata accessor for Logger(0);
  sub_2D6E0(v47, (uint64_t)qword_B92F0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain_n(v21, 2);
  v48 = swift_bridgeObjectRetain(v9);
  v49 = Logger.logObject.getter(v48);
  v50 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v49, v50))
  {
    v51 = swift_slowAlloc(32, -1);
    v52 = (void **)swift_slowAlloc(96, -1);
    aBlock = v52;
    *(_DWORD *)v51 = 136315650;
    swift_bridgeObjectRetain(v96);
    v97 = (_QWORD *)sub_3A180(v30, v96, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &aBlock, v51 + 4, v51 + 12);
    swift_bridgeObjectRelease_n(v96, 3);
    v87 = (_QWORD *)v5;
    *(_WORD *)(v51 + 12) = 2080;
    swift_bridgeObjectRetain(v9);
    v97 = (_QWORD *)sub_3A180(v95, v9, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &aBlock, v51 + 14, v51 + 22);
    swift_bridgeObjectRelease_n(v9, 3);
    *(_WORD *)(v51 + 22) = 2080;
    v53 = swift_bridgeObjectRetain(a1);
    v54 = Dictionary.description.getter(v53, &type metadata for String, (char *)&type metadata for Swift.AnyObject + 8, &protocol witness table for String);
    v56 = v55;
    swift_bridgeObjectRelease(a1);
    v97 = (_QWORD *)sub_3A180(v54, v56, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &aBlock, v51 + 24, v51 + 32);
    swift_bridgeObjectRelease_n(a1, 2);
    v57 = v56;
    v5 = (uint64_t)v87;
    swift_bridgeObjectRelease(v57);
    _os_log_impl(&dword_0, v49, v50, "recordEvent - topic: %s, eventType: %s, eventDictionary: %s", (uint8_t *)v51, 0x20u);
    swift_arrayDestroy(v52, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1, -1);
    v58 = v51;
    v21 = v96;
    swift_slowDealloc(v58, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease_n(v9, 2);
    swift_bridgeObjectRelease_n(v21, 2);
  }
  v59 = objc_allocWithZone((Class)AMSMetricsEvent);
  swift_bridgeObjectRetain(v21);
  v60 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v21);
  v61 = objc_msgSend(v59, "initWithTopic:", v60);

  v62 = sub_5E834(a1);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v62);
  objc_msgSend(v61, "addPropertiesWithDictionary:", isa);

  if ((v88 & 1) != 0)
  {
    v64 = objc_msgSend((id)objc_opt_self(BUAccountsProvider), "sharedProvider");
    v65 = objc_msgSend(v64, "activeStoreAccount");

    objc_msgSend(v61, "setAccount:", v65);
  }
  v66 = swift_allocObject(&unk_A1A10, 24, 7);
  swift_unknownObjectWeakInit(v66 + 16, v5);
  v67 = swift_allocObject(&unk_A1B30, 32, 7);
  *(_QWORD *)(v67 + 16) = v66;
  *(_QWORD *)(v67 + 24) = v61;
  v102 = sub_60BC8;
  v103 = v67;
  aBlock = _NSConcreteStackBlock;
  v99 = 1107296256;
  v100 = sub_2A1A8;
  v101 = &unk_A1B48;
  v68 = _Block_copy(&aBlock);
  swift_retain(v66);
  v69 = v61;
  v70 = v89;
  static DispatchQoS.unspecified.getter(v69);
  v97 = _swiftEmptyArrayStorage;
  v71 = sub_5F7E8();
  v72 = sub_29EF0((uint64_t *)&unk_B8C90);
  v73 = sub_5320C();
  v74 = v92;
  v75 = v94;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v97, v72, v73, v94, v71);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v70, v74, v68);
  _Block_release(v68);

  (*(void (**)(char *, uint64_t))(v93 + 8))(v74, v75);
  (*(void (**)(char *, uint64_t))(v90 + 8))(v70, v91);
  v76 = v103;
  swift_release(v66);
  swift_release(v76);
}

unint64_t sub_5E834(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t result;
  int64_t i;
  char *v11;
  char *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  _OWORD v46[2];

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_29EF0(&qword_B8838);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v37 = v1 + 64;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 64);
  v36 = (unint64_t)(63 - v4) >> 6;
  v7 = &v43;
  v8 = &v45;
  result = swift_bridgeObjectRetain(v1);
  i = 0;
  v11 = (char *)&type metadata for Swift.AnyObject + 8;
  v12 = (char *)&type metadata for Any + 8;
  if (v6)
    goto LABEL_10;
LABEL_11:
  v21 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v21 >= v36)
    goto LABEL_32;
  v22 = *(_QWORD *)(v37 + 8 * v21);
  v23 = i + 1;
  if (!v22)
  {
    v23 = i + 2;
    if (i + 2 >= v36)
      goto LABEL_32;
    v22 = *(_QWORD *)(v37 + 8 * v23);
    if (!v22)
    {
      v23 = i + 3;
      if (i + 3 >= v36)
        goto LABEL_32;
      v22 = *(_QWORD *)(v37 + 8 * v23);
      if (!v22)
      {
        v23 = i + 4;
        if (i + 4 >= v36)
          goto LABEL_32;
        v22 = *(_QWORD *)(v37 + 8 * v23);
        if (!v22)
        {
          v24 = i + 5;
          if (i + 5 < v36)
          {
            v22 = *(_QWORD *)(v37 + 8 * v24);
            if (v22)
            {
              v23 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v23 = v24 + 1;
              if (__OFADD__(v24, 1))
                goto LABEL_36;
              if (v23 >= v36)
                break;
              v22 = *(_QWORD *)(v37 + 8 * v23);
              ++v24;
              if (v22)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_2E5CC(v1);
          return (unint64_t)v3;
        }
      }
    }
  }
LABEL_26:
  v39 = (v22 - 1) & v22;
  v20 = __clz(__rbit64(v22)) + (v23 << 6);
  for (i = v23; ; v20 = __clz(__rbit64(v6)) | (i << 6))
  {
    v25 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v20);
    v26 = v25[1];
    v27 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v20);
    v41 = *v25;
    v42 = v26;
    v40 = v27;
    swift_bridgeObjectRetain(v26);
    swift_unknownObjectRetain(v27);
    swift_dynamicCast(v7, &v40, v11, v12, 7);
    v28 = v41;
    v29 = v42;
    sub_41BD8(v7, v8);
    sub_41BD8(v8, v46);
    sub_41BD8(v46, &v44);
    result = sub_4CF3C(v28, v29);
    v30 = result;
    if ((v31 & 1) != 0)
    {
      v38 = i;
      v13 = v8;
      v14 = v7;
      v15 = v1;
      v16 = v12;
      v17 = v11;
      v18 = (uint64_t *)(v3[6] + 16 * result);
      swift_bridgeObjectRelease(v18[1]);
      *v18 = v28;
      v18[1] = v29;
      v11 = v17;
      v12 = v16;
      v1 = v15;
      v7 = v14;
      v8 = v13;
      i = v38;
      v19 = (_QWORD *)(v3[7] + 32 * v30);
      sub_3789C(v19);
      result = (unint64_t)sub_41BD8(&v44, v19);
      v6 = v39;
      if (!v39)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v32 = (uint64_t *)(v3[6] + 16 * result);
    *v32 = v28;
    v32[1] = v29;
    result = (unint64_t)sub_41BD8(&v44, (_OWORD *)(v3[7] + 32 * result));
    v33 = v3[2];
    v34 = __OFADD__(v33, 1);
    v35 = v33 + 1;
    if (v34)
      goto LABEL_34;
    v3[2] = v35;
    v6 = v39;
    if (!v39)
      goto LABEL_11;
LABEL_10:
    v39 = (v6 - 1) & v6;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

void sub_5EB98(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  Class isa;
  uint64_t v11;
  _BYTE v12[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v12, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    v6 = *(id *)(Strong + OBJC_IVAR___JSAMetricsController_metrics);

    v7 = sub_29EF0(&qword_B96F8);
    v8 = swift_allocObject(v7, 40, 7);
    *(_OWORD *)(v8 + 16) = xmmword_8E6F0;
    *(_QWORD *)(v8 + 32) = a2;
    v11 = v8;
    specialized Array._endMutation()(v8);
    sub_2E594(0, &qword_B9700, AMSMetricsEvent_ptr);
    v9 = a2;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v11);
    objc_msgSend(v6, "enqueueEvents:", isa);

  }
}

id _s5JSApp17MetricsControllerC6sharedACvgZ_0()
{
  if (qword_B81A8 != -1)
    swift_once(&qword_B81A8, sub_5CDE4);
  return (id)qword_B94B0;
}

Swift::Void __swiftcall MetricsController.recordEvent(_:_:)(Swift::String a1, Swift::OpaquePointer a2)
{
  void *object;
  uint64_t countAndFlagsBits;
  char v5;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  if (a1._countAndFlagsBits == 0xD000000000000010 && a1._object == (void *)0x800000000008AA70)
    v5 = 1;
  else
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)(a1._countAndFlagsBits, a1._object, 0xD000000000000010, 0x800000000008AA70, 0);
  sub_5DC94((uint64_t)a2._rawValue, countAndFlagsBits, (unint64_t)object, v5 & 1);
}

Swift::Void __swiftcall MetricsController.recordPersonalizedEvent(_:_:)(Swift::String a1, Swift::OpaquePointer a2)
{
  sub_5DC94((uint64_t)a2._rawValue, a1._countAndFlagsBits, (unint64_t)a1._object, 1);
}

Swift::Void __swiftcall MetricsController.flushUnreportedEvents()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v0 = sub_29EF0(&qword_B8B00);
  __chkstk_darwin(v0);
  v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = swift_allocObject(&unk_A1A10, 24, 7);
  swift_unknownObjectWeakInit(v4 + 16);
  v5 = (_QWORD *)swift_allocObject(&unk_A1A88, 40, 7);
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = v4;
  v6 = sub_3B71C((uint64_t)v2, (uint64_t)&unk_B9508, (uint64_t)v5);
  swift_release(v6);
  sub_5F984((uint64_t)v2);
}

uint64_t sub_5F010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[11] = a4;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v4[12] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[13] = v6;
  v4[14] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v4[15] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[16] = v8;
  v4[17] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_5F098, 0, 0);
}

uint64_t sub_5F098()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t Strong;
  char *v3;
  NSString v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  v1 = v0[11] + 16;
  swift_beginAccess(v1, v0 + 8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (char *)Strong;
    v4 = (id)BUOnboardingBooksBundleID();
    if (!v4)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v6 = v5;
      v4 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v6);
    }
    v7 = objc_msgSend((id)objc_opt_self(AMSAcknowledgePrivacyTask), "acknowledgementNeededForPrivacyIdentifier:", v4);

    if ((v7 & 1) != 0)
    {
      if (qword_B8178 != -1)
        swift_once(&qword_B8178, sub_56E94);
      v8 = type metadata accessor for Logger(0);
      v9 = sub_2D6E0(v8, (uint64_t)qword_B92F0);
      v10 = Logger.logObject.getter(v9);
      v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v12 = 0;
        _os_log_impl(&dword_0, v10, v11, "Skipping flushing: User has not acknowledged privacy yet.", v12, 2u);
        swift_slowDealloc(v12, -1, -1);

      }
      else
      {

      }
    }
    else
    {
      if (qword_B8178 != -1)
        swift_once(&qword_B8178, sub_56E94);
      v13 = type metadata accessor for Logger(0);
      v14 = sub_2D6E0(v13, (uint64_t)qword_B92F0);
      v15 = Logger.logObject.getter(v14);
      v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v17 = 0;
        _os_log_impl(&dword_0, v15, v16, "Flushing events", v17, 2u);
        swift_slowDealloc(v17, -1, -1);
      }
      v19 = v0[16];
      v18 = v0[17];
      v20 = v0[14];
      v30 = v0[15];
      v22 = v0[12];
      v21 = v0[13];

      v23 = static DispatchQoS.userInitiated.getter();
      static DispatchWorkItemFlags.enforceQoS.getter(v23);
      v24 = swift_allocObject(&unk_A1A10, 24, 7);
      swift_unknownObjectWeakInit(v24 + 16);
      v0[6] = sub_60B94;
      v0[7] = v24;
      v0[2] = _NSConcreteStackBlock;
      v0[3] = 1107296256;
      v0[4] = sub_2A1A8;
      v0[5] = &unk_A1AD0;
      v25 = _Block_copy(v0 + 2);
      swift_retain(v24);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v18, v20, v25);
      _Block_release(v25);
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v30);
      swift_release(v0[7]);
      swift_release(v24);
      v26 = *(_QWORD *)&v3[OBJC_IVAR___JSAMetricsController_isSuspended];
      v27 = swift_task_alloc(32);
      *(_QWORD *)(v27 + 16) = v3;
      os_unfair_lock_lock((os_unfair_lock_t)(v26 + 20));
      if (*(_BYTE *)(v26 + 16) == 1)
      {
        dispatch_resume(*(dispatch_object_t *)(*(_QWORD *)(v27 + 16) + OBJC_IVAR___JSAMetricsController_submissionQueue));
        *(_BYTE *)(v26 + 16) = 0;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(v26 + 20));

      swift_task_dealloc(v27);
    }
  }
  v28 = v0[14];
  swift_task_dealloc(v0[17]);
  swift_task_dealloc(v28);
  return ((uint64_t (*)(void))v0[1])();
}

void sub_5F424(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  id v4;
  id v5;
  void *v6;
  _QWORD aBlock[6];
  _BYTE v8[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    v4 = *(id *)(Strong + OBJC_IVAR___JSAMetricsController_metrics);

    v5 = objc_msgSend(v4, "flush");
    aBlock[4] = sub_5F508;
    aBlock[5] = 0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_3D0AC;
    aBlock[3] = &unk_A1AF8;
    v6 = _Block_copy(aBlock);
    objc_msgSend(v5, "addFinishBlock:", v6);
    _Block_release(v6);

  }
}

void sub_5F508()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *oslog;

  if (qword_B8178 != -1)
    swift_once(&qword_B8178, sub_56E94);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_2D6E0(v0, (uint64_t)qword_B92F0);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_0, oslog, v2, "Finished flushing events", v3, 2u);
    swift_slowDealloc(v3, -1, -1);
  }

}

NSString sub_5F768()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_B94B8 = (uint64_t)result;
  return result;
}

uint64_t sub_5F79C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_5F7C0(uint64_t a1)
{
  uint64_t v1;

  sub_5D3A8(a1, v1);
}

uint64_t sub_5F7C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_5F7D8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_5F7E0()
{
  uint64_t v0;

  sub_5D49C(v0);
}

unint64_t sub_5F7E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_B8210;
  if (!qword_B8210)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_B8210);
  }
  return result;
}

id static NSNotificationName.privacyAcknowledgementDidChange.getter()
{
  if (qword_B81B0 != -1)
    swift_once(&qword_B81B0, sub_5F768);
  return (id)qword_B94B8;
}

uint64_t static MetricsController.privacyAcknowledgementDidChange.getter()
{
  if (qword_B81B0 != -1)
    swift_once(&qword_B81B0, sub_5F768);
  return static String._unconditionallyBridgeFromObjectiveC(_:)(qword_B94B8);
}

uint64_t sub_5F918(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_B9504);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_38150;
  return sub_5F010(a1, v4, v5, v6);
}

uint64_t sub_5F984(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_29EF0(&qword_B8B00);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_5F9C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = a3;
    v5 = a2;
    v6 = a1;
    v7 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      v9 = *(_QWORD *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8));
      if (v9 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v7 < 0)
    v24 = v7;
  else
    v24 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v9 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease(v7);
  if (v9 < v5)
    goto LABEL_34;
LABEL_4:
  v9 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v8 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v7 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    v10 = *(_QWORD *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8));
    v11 = v10 + v8;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v7 < 0)
      v26 = v7;
    else
      v26 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v14 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v7);
    goto LABEL_15;
  }
LABEL_37:
  if (v7 < 0)
    v25 = v7;
  else
    v25 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v10 = _CocoaArrayWrapper.endIndex.getter(v25);
  swift_bridgeObjectRelease(v7);
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
    goto LABEL_42;
LABEL_8:
  v7 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *v4 = v7;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((char *)&dword_18 + (v7 & 0xFFFFFFFFFFFFFF8)) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if ((unint64_t)v7 >> 62)
    goto LABEL_43;
  v14 = *(_QWORD *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8));
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain(v7);
  v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v14, 1, v7);
  swift_bridgeObjectRelease(*v4);
  *v4 = v7;
  v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = (_QWORD *)(v13 + 32 + 8 * v6);
  v16 = type metadata accessor for FigaroEvent();
  v17 = (char *)swift_arrayDestroy(v15, v9, v16);
  if (!v8)
  {
LABEL_28:
    *v15 = v3;
    return specialized Array._endMutation()(v17);
  }
  if (!((unint64_t)v7 >> 62))
  {
    v18 = *(_QWORD *)(v13 + 16);
    v19 = v18 - v5;
    if (!__OFSUB__(v18, v5))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v7 < 0)
    v27 = v7;
  else
    v27 = v13;
  swift_bridgeObjectRetain(v7);
  v28 = _CocoaArrayWrapper.endIndex.getter(v27);
  swift_bridgeObjectRelease(v7);
  v19 = v28 - v5;
  if (__OFSUB__(v28, v5))
    goto LABEL_52;
LABEL_21:
  if ((v19 & 0x8000000000000000) == 0)
  {
    v17 = (char *)(v15 + 1);
    v20 = (char *)(v13 + 32 + 8 * v5);
    if (v15 + 1 != (_QWORD *)v20 || v17 >= &v20[8 * v19])
      v17 = (char *)memmove(v17, v20, 8 * v19);
    if (!((unint64_t)v7 >> 62))
    {
      v21 = *(_QWORD *)(v13 + 16);
      v22 = v21 + v8;
      if (!__OFADD__(v21, v8))
      {
LABEL_27:
        *(_QWORD *)(v13 + 16) = v22;
        goto LABEL_28;
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v7 < 0)
      v29 = v7;
    else
      v29 = v13;
    swift_bridgeObjectRetain(v7);
    v30 = _CocoaArrayWrapper.endIndex.getter(v29);
    v17 = (char *)swift_bridgeObjectRelease(v7);
    v22 = v30 + v8;
    if (!__OFADD__(v30, v8))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

_OWORD *sub_5FC98(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_4CF3C(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(v18[7] + 32 * v12);
        sub_3789C(v19);
        return sub_41BD8(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_64E04();
      goto LABEL_7;
    }
    sub_65704(v15, a4 & 1);
    v21 = sub_4CF3C(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_5FF24(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain(a3);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_5FDC8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_4CF3C(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_64FE8();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_unknownObjectRelease(*(_QWORD *)(v19 + 8 * v12));
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain(a3);
    }
    goto LABEL_14;
  }
  sub_65A00(v15, a4 & 1);
  v21 = sub_4CF3C(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

_OWORD *sub_5FF24(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_41BD8(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t sub_5FF90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  }
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0, a1);
}

uint64_t sub_5FFF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v7 = *(_QWORD *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFF8));
      if (v7 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v5 < 0)
    v26 = v5;
  else
    v26 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v7 = _CocoaArrayWrapper.endIndex.getter(v26);
  swift_bridgeObjectRelease(v5);
  if (v7 < v2)
    goto LABEL_34;
LABEL_4:
  v5 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v6 = v4 - v2;
  if (__OFSUB__(0, v5))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v7 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v8 = *(_QWORD *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8));
    v9 = v8 - v5;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v7 < 0)
      v28 = v7;
    else
      v28 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v12 = _CocoaArrayWrapper.endIndex.getter(v28);
    swift_bridgeObjectRelease(v7);
    v7 = *v3;
    goto LABEL_15;
  }
LABEL_37:
  if (v7 < 0)
    v27 = v7;
  else
    v27 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v8 = _CocoaArrayWrapper.endIndex.getter(v27);
  swift_bridgeObjectRelease(v7);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
    goto LABEL_42;
LABEL_8:
  v7 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *v3 = v7;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v11 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((char *)&dword_18 + (v7 & 0xFFFFFFFFFFFFFF8)) >> 1)
      goto LABEL_18;
    v8 = 1;
  }
  if ((unint64_t)v7 >> 62)
    goto LABEL_43;
  v12 = *(_QWORD *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8));
LABEL_15:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain(v7);
  v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1, v7);
  v14 = *v3;
  *v3 = v13;
  swift_bridgeObjectRelease(v14);
  v11 = *v3 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = v11 + 32;
  v16 = (char *)(v11 + 32 + 8 * v4);
  v17 = sub_29EF0(&qword_B9708);
  v18 = (void *)swift_arrayDestroy(v16, v5, v17);
  if (!v6)
    return specialized Array._endMutation()(v18);
  v19 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v20 = *(_QWORD *)((char *)&dword_10 + (v19 & 0xFFFFFFFFFFFFF8));
    v21 = v20 - v2;
    if (!__OFSUB__(v20, v2))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v19 < 0)
    v29 = *v3;
  else
    v29 = v19 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v3);
  v30 = _CocoaArrayWrapper.endIndex.getter(v29);
  v18 = (void *)swift_bridgeObjectRelease(v19);
  v21 = v30 - v2;
  if (__OFSUB__(v30, v2))
    goto LABEL_52;
LABEL_21:
  if ((v21 & 0x8000000000000000) == 0)
  {
    v22 = (char *)(v15 + 8 * v2);
    if (v4 != v2 || v16 >= &v22[8 * v21])
      v18 = memmove(v16, v22, 8 * v21);
    v2 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v23 = *(_QWORD *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8));
      v24 = v23 + v6;
      if (!__OFADD__(v23, v6))
      {
LABEL_27:
        *(_QWORD *)((char *)&dword_10 + (*v3 & 0xFFFFFFFFFFFFF8)) = v24;
        return specialized Array._endMutation()(v18);
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v2 < 0)
      v31 = v2;
    else
      v31 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v32 = _CocoaArrayWrapper.endIndex.getter(v31);
    v18 = (void *)swift_bridgeObjectRelease(v2);
    v24 = v32 + v6;
    if (!__OFADD__(v32, v6))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  v33 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v33, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_602F4(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v5 = a2;
    v6 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v6 = 11;
    v7 = v6 | (v5 << 16);
    v8 = String.index(_:offsetBy:limitedBy:)(15, result, v7, a2, a3);
    if ((v9 & 1) != 0)
      v10 = v7;
    else
      v10 = v8;
    return String.subscript.getter(15, v10, a2, a3);
  }
  return result;
}

unint64_t sub_6037C(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v5 = HIBYTE(a3) & 0xF;
    else
      v5 = a2 & 0xFFFFFFFFFFFFLL;
    v6 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v6 = 11;
    v7 = v6 | (v5 << 16);
    result = String.index(_:offsetBy:limitedBy:)(15, result, v7, a2, a3);
    if ((v8 & 1) != 0)
      result = v7;
    if (4 * v5 >= result >> 14)
      return String.subscript.getter(result, v7, a2, a3);
  }
  __break(1u);
  return result;
}

uint64_t sub_60418()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[24];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[24];
  _BYTE v38[24];
  _BYTE v39[32];

  v1 = (uint64_t *)(v0 + OBJC_IVAR___JSAMetricsController__performanceEvents);
  swift_beginAccess(v0 + OBJC_IVAR___JSAMetricsController__performanceEvents, v39, 0, 0);
  v30 = v1;
  v2 = *v1;
  if ((unint64_t)*v1 >> 62)
    goto LABEL_43;
  v3 = *(_QWORD *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(*v1);
  if (!v3)
  {
LABEL_47:
    swift_bridgeObjectRelease(v2);
    return *v30;
  }
LABEL_3:
  v4 = v2 & 0xC000000000000001;
  v29 = (uint64_t *)(v0 + OBJC_IVAR___JSAMetricsController_experienceEvents);
  swift_beginAccess(v0 + OBJC_IVAR___JSAMetricsController_experienceEvents, v38, 0, 0);
  v5 = 0;
  v6 = v2 & 0xFFFFFFFFFFFFFF8;
  v7 = v2 + 32;
  v27 = v2 & 0xC000000000000001;
  v28 = v2;
  v25 = v2 + 32;
  v26 = v2 & 0xFFFFFFFFFFFFFF8;
  while (1)
  {
    if (v4)
    {
      v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v2);
      v9 = __OFADD__(v5++, 1);
      if (v9)
        goto LABEL_41;
    }
    else
    {
      if (v5 >= *(_QWORD *)(v6 + 16))
        goto LABEL_42;
      v8 = *(_QWORD *)(v7 + 8 * v5);
      swift_retain(v8);
      v9 = __OFADD__(v5++, 1);
      if (v9)
      {
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        if (v2 < 0)
          v24 = v2;
        else
          v24 = v2 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v2);
        v3 = _CocoaArrayWrapper.endIndex.getter(v24);
        if (!v3)
          goto LABEL_47;
        goto LABEL_3;
      }
    }
    if (!*(_QWORD *)(v8 + 56))
    {
      swift_beginAccess(v8 + 40, v37, 0, 0);
      v0 = *(_QWORD *)(v8 + 40);
      if (*(_QWORD *)(v0 + 16))
      {
        swift_bridgeObjectRetain(*(_QWORD *)(v8 + 40));
        v10 = sub_4CF3C(0xD000000000000014, 0x800000000008AC50);
        if ((v11 & 1) == 0)
        {
          swift_release(v8);
          swift_bridgeObjectRelease(v0);
          goto LABEL_5;
        }
        v12 = *(_QWORD *)(*(_QWORD *)(v0 + 56) + 8 * v10);
        swift_unknownObjectRetain(v12);
        swift_bridgeObjectRelease(v0);
        v36 = v12;
        if ((swift_dynamicCast(&v34, &v36, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6) & 1) != 0)break;
      }
    }
    swift_release(v8);
LABEL_5:
    if (v5 == v3)
      goto LABEL_47;
  }
  v31 = v35;
  v32 = v34;
  v13 = *v29;
  if (!((unint64_t)*v29 >> 62))
  {
    v14 = *(_QWORD *)((char *)&dword_10 + (v13 & 0xFFFFFFFFFFFFF8));
    result = swift_bridgeObjectRetain(*v29);
    if (v14)
      goto LABEL_18;
    goto LABEL_40;
  }
  if (v13 < 0)
    v23 = *v29;
  else
    v23 = v13 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v29);
  result = _CocoaArrayWrapper.endIndex.getter(v23);
  v14 = result;
  if (!result)
  {
LABEL_40:
    swift_bridgeObjectRelease(v31);
    swift_bridgeObjectRelease(v13);
    swift_release(v8);
    v4 = v27;
    v2 = v28;
    v7 = v25;
    v6 = v26;
    goto LABEL_5;
  }
LABEL_18:
  if (v14 >= 1)
  {
    v16 = 0;
    while (1)
    {
      if ((v13 & 0xC000000000000001) != 0)
      {
        v17 = specialized _ArrayBuffer._getElementSlowPath(_:)(v16, v13);
      }
      else
      {
        v17 = *(_QWORD *)(v13 + 8 * v16 + 32);
        swift_retain(v17);
      }
      swift_beginAccess(v17 + 40, v33, 0, 0);
      v0 = *(_QWORD *)(v17 + 40);
      if (!*(_QWORD *)(v0 + 16))
        goto LABEL_33;
      swift_bridgeObjectRetain(*(_QWORD *)(v17 + 40));
      v18 = sub_4CF3C(0xD000000000000014, 0x800000000008AC50);
      if ((v19 & 1) != 0)
        break;
      swift_release(v17);
      swift_bridgeObjectRelease(v0);
LABEL_21:
      if (v14 == ++v16)
        goto LABEL_40;
    }
    v20 = *(_QWORD *)(*(_QWORD *)(v0 + 56) + 8 * v18);
    swift_unknownObjectRetain(v20);
    swift_bridgeObjectRelease(v0);
    v36 = v20;
    if ((swift_dynamicCast(&v34, &v36, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6) & 1) == 0)
      goto LABEL_33;
    v0 = v35;
    if (v34 == v32 && v35 == v31)
    {
      swift_bridgeObjectRelease(v31);
      goto LABEL_32;
    }
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v35, v32, v31, 0);
    swift_bridgeObjectRelease(v0);
    if ((v21 & 1) != 0)
    {
LABEL_32:
      v22 = *(_QWORD *)(v8 + 56);
      *(_QWORD *)(v8 + 56) = v17;
    }
    else
    {
LABEL_33:
      v22 = v17;
    }
    swift_release(v22);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

void _s5JSApp17MetricsControllerC32countingAssertProviderTransition9toNonZeroySo019BUCountingAssertionF0C_tF_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;

  v1 = v0;
  if (qword_B8178 != -1)
    swift_once(&qword_B8178, sub_56E94);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_2D6E0(v2, (uint64_t)qword_B92F0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_0, v4, v5, "Pausing event submission due to assertion", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = *(_QWORD *)(v1 + OBJC_IVAR___JSAMetricsController_isSuspended);
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 20));
  if ((*(_BYTE *)(v7 + 16) & 1) == 0)
  {
    dispatch_suspend(*(dispatch_object_t *)(v1 + OBJC_IVAR___JSAMetricsController_submissionQueue));
    *(_BYTE *)(v7 + 16) = 1;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 20));
}

void _s5JSApp17MetricsControllerC32countingAssertProviderTransition6toZeroySo019BUCountingAssertionF0C_tF_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;

  v1 = v0;
  if (qword_B8178 != -1)
    swift_once(&qword_B8178, sub_56E94);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_2D6E0(v2, (uint64_t)qword_B92F0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_0, v4, v5, "Resuming event submission due to assertion invalidation", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = *(_QWORD *)(v1 + OBJC_IVAR___JSAMetricsController_isSuspended);
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 20));
  if (*(_BYTE *)(v7 + 16) == 1)
  {
    dispatch_resume(*(dispatch_object_t *)(v1 + OBJC_IVAR___JSAMetricsController_submissionQueue));
    *(_BYTE *)(v7 + 16) = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 20));
}

uint64_t type metadata accessor for FigaroEvent()
{
  return objc_opt_self(_TtC5JSApp11FigaroEvent);
}

uint64_t method lookup function for MetricsController(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for MetricsController);
}

uint64_t dispatch thunk of MetricsController.clearPerformanceEvents()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_108.sectname[swift_isaMask & *v0])();
}

uint64_t dispatch thunk of MetricsController.startSubmissionIfAllowed()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_108.segname[(swift_isaMask & *v0) - 8])();
}

uint64_t dispatch thunk of MetricsController.newSuspensionAssertion()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_108.segname[swift_isaMask & *v0])();
}

uint64_t sub_60A74()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_60AA0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_B9504);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_2E488;
  return sub_5F010(a1, v4, v5, v6);
}

unint64_t sub_60B0C()
{
  unint64_t result;

  result = qword_B96E0;
  if (!qword_B96E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_B96E0);
  }
  return result;
}

unint64_t sub_60B50()
{
  unint64_t result;

  result = qword_B96E8;
  if (!qword_B96E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_B96E8);
  }
  return result;
}

void sub_60B94()
{
  uint64_t v0;

  sub_5F424(v0);
}

uint64_t sub_60B9C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_60BC8()
{
  uint64_t v0;

  sub_5EB98(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_60BF0(char a1)
{
  return *(_QWORD *)&aUnknown_4[8 * a1];
}

uint64_t sub_60C10(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6D657449626174;
  else
    v3 = 0x6E6F74747562;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x6D657449626174;
  else
    v5 = 0x6E6F74747562;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_60CAC(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_60CF8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_60D68 + 4 * byte_8E774[a2]))(0x68536E6F69746361);
}

uint64_t sub_60D68(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x68536E6F69746361 && v1 == 0xEB00000000746565)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x68536E6F69746361, 0xEB00000000746565, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEB00000000746565);
  return v2 & 1;
}

uint64_t sub_60E1C(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = 8 * a1;
  v3 = *(_QWORD *)&aButton_1[v2];
  v4 = *(_QWORD *)&aReadthisdontsh[v2 + 16];
  v5 = 8 * a2;
  v6 = *(_QWORD *)&aButton_1[v5];
  v7 = *(_QWORD *)&aReadthisdontsh[v5 + 16];
  if (v3 == v6 && v4 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v6, *(_QWORD *)&aReadthisdontsh[8 * a2 + 16], 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  return v9 & 1;
}

uint64_t sub_60EA0(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = 8 * a1;
  v3 = *(_QWORD *)&aActioncoaction[v2];
  v4 = *(_QWORD *)&aActioncoaction[v2 + 64];
  v5 = 8 * a2;
  v6 = *(_QWORD *)&aActioncoaction[v5];
  v7 = *(_QWORD *)&aActioncoaction[v5 + 64];
  if (v3 == v6 && v4 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v6, *(_QWORD *)&aActioncoaction[8 * a2 + 64], 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  return v9 & 1;
}

uint64_t sub_60F24(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = 8 * a1;
  v3 = *(_QWORD *)&aUnknown_4[v2];
  v4 = *(_QWORD *)&aTerminat_0[v2 + 8];
  v5 = 8 * a2;
  v6 = *(_QWORD *)&aUnknown_4[v5];
  v7 = *(_QWORD *)&aTerminat_0[v5 + 8];
  if (v3 == v6 && v4 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v6, *(_QWORD *)&aTerminat_0[8 * a2 + 8], 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  return v9 & 1;
}

Swift::Int sub_60FA8(char a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  v2 = 8 * a1;
  v3 = *(_QWORD *)&aTerminat_0[v2 + 8];
  String.hash(into:)(v5, *(_QWORD *)&aUnknown_4[v2], v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_61010(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_61064()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x68536E6F69746361, 0xEB00000000746565);
  swift_bridgeObjectRelease(0xEB00000000746565);
  return Hasher._finalize()();
}

Swift::Int sub_610E0(char a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  if ((a1 & 1) != 0)
    v2 = 0x6D657449626174;
  else
    v2 = 0x6E6F74747562;
  if ((a1 & 1) != 0)
    v3 = 0xE700000000000000;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int sub_6115C(char a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  v2 = 8 * a1;
  v3 = *(_QWORD *)&aReadthisdontsh[v2 + 16];
  String.hash(into:)(v5, *(_QWORD *)&aButton_1[v2], v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_611C4(uint64_t a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;

  v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0)
    v3 = 0x6D657449626174;
  else
    v3 = 0x6E6F74747562;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE700000000000000;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

void sub_61218(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_6125C(uint64_t a1)
{
  String.hash(into:)(a1, 0x68536E6F69746361, 0xEB00000000746565);
  return swift_bridgeObjectRelease(0xEB00000000746565);
}

uint64_t sub_612C4(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8 * a2;
  v3 = *(_QWORD *)&aReadthisdontsh[v2 + 16];
  String.hash(into:)(a1, *(_QWORD *)&aButton_1[v2], v3);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_61304(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8 * a2;
  v3 = *(_QWORD *)&aActioncoaction[v2 + 64];
  String.hash(into:)(a1, *(_QWORD *)&aActioncoaction[v2], v3);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_61344(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8 * a2;
  v3 = *(_QWORD *)&aTerminat_0[v2 + 8];
  String.hash(into:)(a1, *(_QWORD *)&aUnknown_4[v2], v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_61384(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  v3 = 8 * a2;
  v4 = *(_QWORD *)&aTerminat_0[v3 + 8];
  String.hash(into:)(v6, *(_QWORD *)&aUnknown_4[v3], v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

Swift::Int sub_613E8(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  v3 = 8 * a2;
  v4 = *(_QWORD *)&aActioncoaction[v3 + 64];
  String.hash(into:)(v6, *(_QWORD *)&aActioncoaction[v3], v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

Swift::Int sub_6144C(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  v3 = 8 * a2;
  v4 = *(_QWORD *)&aReadthisdontsh[v3 + 16];
  String.hash(into:)(v6, *(_QWORD *)&aButton_1[v3], v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_614B0(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_61500()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x68536E6F69746361, 0xEB00000000746565);
  swift_bridgeObjectRelease(0xEB00000000746565);
  return Hasher._finalize()();
}

Swift::Int sub_6157C(uint64_t a1, char a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  if ((a2 & 1) != 0)
    v3 = 0x6D657449626174;
  else
    v3 = 0x6E6F74747562;
  if ((a2 & 1) != 0)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE600000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_615F4(char *a1, char *a2)
{
  return sub_60F24(*a1, *a2);
}

Swift::Int sub_61600()
{
  char *v0;

  return sub_60FA8(*v0);
}

uint64_t sub_61608(uint64_t a1)
{
  char *v1;

  return sub_61344(a1, *v1);
}

Swift::Int sub_61610(uint64_t a1)
{
  char *v1;

  return sub_61384(a1, *v1);
}

unint64_t sub_61618@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_61C70(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_61644@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_60BF0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_6166C()
{
  uint64_t v0;
  __CFNotificationCenter *v1;

  *(_BYTE *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  swift_unknownObjectWeakInit(v0 + 24, 0);
  v1 = CFNotificationCenterGetDarwinNotifyCenter();
  JUMPOUT(0x61724);
}

uint64_t sub_616E8()
{
  __CFNotificationCenter *v0;
  const void *v1;
  uint64_t v2;
  __CFString *v3;

  v3 = (__CFString *)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000000088710);
  CFNotificationCenterAddObserver(v0, v1, (CFNotificationCallback)sub_61990, v3, 0, CFNotificationSuspensionBehaviorDeliverImmediately);

  return sub_61784(v2);
}

uint64_t sub_61784()
{
  __CFNotificationCenter *v0;
  const void *v1;
  uint64_t v2;
  __CFString *v3;

  v3 = (__CFString *)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000000088710);
  CFNotificationCenterAddObserver(v0, v1, (CFNotificationCallback)sub_61990, v3, 0, CFNotificationSuspensionBehaviorDeliverImmediately);

  return ((uint64_t (*)(uint64_t))loc_6182C)(v2);
}

uint64_t sub_61820()
{
  __CFNotificationCenter *v0;
  const void *v1;
  __CFString *v2;

  v2 = (__CFString *)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000000088710);
  CFNotificationCenterAddObserver(v0, v1, (CFNotificationCallback)sub_61990, v2, 0, CFNotificationSuspensionBehaviorDeliverImmediately);

  return ((uint64_t (*)(void))loc_618DC)();
}

const void *sub_618B8()
{
  __CFNotificationCenter *v0;
  const void *v1;
  __CFString *v2;

  v2 = (__CFString *)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000000088710);
  CFNotificationCenterAddObserver(v0, v1, (CFNotificationCallback)sub_61990, v2, 0, CFNotificationSuspensionBehaviorDeliverImmediately);

  return v1;
}

void sub_61990(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v8;
  id v9;
  id v10;

  v8 = a1;
  v9 = a3;
  v10 = a5;
  sub_61CDC(a2, a3);

}

uint64_t sub_619FC()
{
  const void *v0;
  __CFNotificationCenter *v1;

  v1 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(v1, v0);

  sub_61CB8((uint64_t)v0 + 24);
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for HotReloadNotificationObserver()
{
  return objc_opt_self(_TtC5JSApp29HotReloadNotificationObserver);
}

uint64_t storeEnumTagSinglePayload for HotReloadState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_61AB0 + 4 * byte_8E78D[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_61AE4 + 4 * byte_8E788[v4]))();
}

uint64_t sub_61AE4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_61AEC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x61AF4);
  return result;
}

uint64_t sub_61B00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x61B08);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_61B0C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_61B14(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HotReloadState()
{
  return &type metadata for HotReloadState;
}

unint64_t sub_61B34()
{
  unint64_t result;

  result = qword_B97F0;
  if (!qword_B97F0)
  {
    result = swift_getWitnessTable(&unk_8E888, &type metadata for HotReloadState);
    atomic_store(result, (unint64_t *)&qword_B97F0);
  }
  return result;
}

uint64_t sub_61B78()
{
  return 1;
}

Swift::Int sub_61B80(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  String.hash(into:)(v2, 0x6B63696C63, 0xE500000000000000);
  return Hasher._finalize()();
}

Swift::Int sub_61BC8()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  String.hash(into:)(v1, 0x6B63696C63, 0xE500000000000000);
  return Hasher._finalize()();
}

uint64_t sub_61C14(uint64_t a1)
{
  return String.hash(into:)(a1, 0x6B63696C63, 0xE500000000000000);
}

unint64_t sub_61C28(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_9F238, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

unint64_t sub_61C70(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_9F2B8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

uint64_t sub_61CB8(uint64_t a1)
{
  swift_unknownObjectWeakDestroy(a1);
  return a1;
}

void sub_61CDC(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  char v16;
  char v17;
  uint64_t Strong;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  Swift::String v22;

  if (a1)
  {
    v4 = type metadata accessor for HotReloadNotificationObserver();
    v5 = swift_unknownObjectRetain(a1);
    v6 = swift_dynamicCastClass(v5, v4);
    if (v6 && a2)
    {
      v7 = v6;
      v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
      v10 = v9;
      v21 = a2;
      v22._countAndFlagsBits = v8;
      v22._object = v10;
      v11 = sub_61C28(v22);
      if (v11 != 4)
      {
        v16 = *(_BYTE *)(v7 + 16);
        v17 = v11 + 1;
        *(_BYTE *)(v7 + 16) = v11 + 1;
        Strong = swift_unknownObjectWeakLoadStrong(v7 + 24);
        if (Strong)
        {
          v19 = Strong;
          sub_2DACC(v16, v17);
          swift_unknownObjectRelease(a1);
          v20 = v19;
        }
        else
        {
          v20 = a1;
        }
        swift_unknownObjectRelease(v20);
        goto LABEL_15;
      }
      swift_unknownObjectRelease(a1);

    }
    else
    {
      swift_unknownObjectRelease(a1);
    }
  }
  if (qword_B8158 != -1)
    swift_once(&qword_B8158, sub_56D80);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_2D6E0(v12, (uint64_t)qword_B9290);
  v21 = Logger.logObject.getter(v13);
  v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_0, v21, v14, "An unexpected error has occurred during darwin notification handling. Hot Reload may not work correctly.", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }
LABEL_15:

}

id sub_61E78(uint64_t a1, uint64_t a2, void *a3)
{
  _BYTE *v3;
  objc_class *ObjectType;
  _QWORD *v7;
  _QWORD *v8;
  NSString v9;
  id v10;
  objc_super v12;

  ObjectType = (objc_class *)swift_getObjectType(v3);
  v3[OBJC_IVAR____TtC5JSApp25AccountPageViewController_pageType] = 0;
  v7 = &v3[OBJC_IVAR____TtC5JSApp25AccountPageViewController_contentID];
  *v7 = 0;
  v7[1] = 0;
  v8 = &v3[OBJC_IVAR____TtC5JSApp25AccountPageViewController_onFinish];
  *v8 = 0;
  v8[1] = 0;
  if (a2)
  {
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v9 = 0;
  }
  v12.receiver = v3;
  v12.super_class = ObjectType;
  v10 = objc_msgSendSuper2(&v12, "initWithNibName:bundle:", v9, a3);

  return v10;
}

uint64_t type metadata accessor for AccountPageViewController()
{
  return objc_opt_self(_TtC5JSApp25AccountPageViewController);
}

void sub_62238(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  id v12;
  _QWORD v13[5];
  _QWORD *v14;

  v2 = v1;
  ObjectType = swift_getObjectType(v1);
  v5 = swift_dynamicCastClass(a1, ObjectType);
  if (v5)
  {
    if (v5 == v1)
    {
      v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5JSApp25AccountPageViewController_onFinish);
      v7 = *(_QWORD *)(v2 + OBJC_IVAR____TtC5JSApp25AccountPageViewController_onFinish + 8);
      v8 = swift_allocObject(&unk_A1CF8, 24, 7);
      swift_unknownObjectWeakInit(v8 + 16);
      v9 = (_QWORD *)swift_allocObject(&unk_A1D20, 40, 7);
      v9[2] = v6;
      v9[3] = v7;
      v9[4] = v8;
      v13[4] = sub_625B0;
      v14 = v9;
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 1107296256;
      v13[2] = sub_2A1A8;
      v13[3] = &unk_A1D38;
      v10 = _Block_copy(v13);
      v11 = v14;
      sub_2A1EC(v6, v7);
      sub_2A1EC(v6, v7);
      v12 = a1;
      objc_msgSend(v12, "dismissViewControllerAnimated:completion:", 1, v10, swift_release(v11).n128_f64[0]);
      _Block_release(v10);
      sub_2D4DC(v6, v7);

    }
  }
}

void sub_62380(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];

  v3 = a3 + 16;
  if (a1)
    a1();
  swift_beginAccess(v3, v9, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    v6 = (_QWORD *)(Strong + OBJC_IVAR____TtC5JSApp25AccountPageViewController_onFinish);
    v7 = *(_QWORD *)(Strong + OBJC_IVAR____TtC5JSApp25AccountPageViewController_onFinish);
    v8 = v6[1];
    *v6 = 0;
    v6[1] = 0;
    sub_2D4DC(v7, v8);

  }
}

uint64_t storeEnumTagSinglePayload for AccountPageViewController.PageType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_62490 + 4 * byte_8E9D5[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_624C4 + 4 * byte_8E9D0[v4]))();
}

uint64_t sub_624C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_624CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x624D4);
  return result;
}

uint64_t sub_624E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x624E8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_624EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_624F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccountPageViewController.PageType()
{
  return &type metadata for AccountPageViewController.PageType;
}

unint64_t sub_62514()
{
  unint64_t result;

  result = qword_B98A0;
  if (!qword_B98A0)
  {
    result = swift_getWitnessTable(&unk_8EA44, &type metadata for AccountPageViewController.PageType);
    atomic_store(result, (unint64_t *)&qword_B98A0);
  }
  return result;
}

uint64_t sub_62558()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_6257C()
{
  _QWORD *v0;

  if (v0[2])
    swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

void sub_625B0()
{
  uint64_t v0;

  sub_62380(*(void (**)(void))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_625BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_625CC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_625D4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  if (v7 == a1 && v8 == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0);
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v11 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v13 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v14 = *(v11 - 1);
    v15 = *v11;
    v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0) & 1) != 0)
      return 1;
    result = 0;
    v11 += 2;
    if (v13 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t NSURL.isSafeExternalURL.getter()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  id v6;
  id v7;
  id v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t inited;
  _QWORD *v19;
  _BYTE v21[480];
  _QWORD *v22;

  v1 = objc_msgSend(v0, "scheme");
  if (!v1)
  {
    v14 = 0;
    return v14 & 1;
  }
  v2 = v1;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v4 = v3;

  v5 = String.lowercased()();
  swift_bridgeObjectRelease(v4);
  v6 = objc_msgSend((id)objc_opt_self(BUBag), "defaultBag");
  v7 = objc_msgSend(v6, "mobileURLHandlers");

  v22 = 0;
  v8 = objc_msgSend(v7, "jsa_valueWithError:", &v22);
  v9 = v22;
  if (!v8)
  {
    v15 = v22;
    v16 = _convertNSErrorToError(_:)(v9);

    swift_willThrow();
    swift_errorRelease(v16);
    goto LABEL_10;
  }
  v10 = v8;
  v22 = 0;
  v11 = v9;
  static Array._conditionallyBridgeFromObjectiveC(_:result:)(v10, &v22, &type metadata for String);

  v12 = v22;
  if (!v22)
  {
LABEL_10:
    v17 = sub_29EF0(&qword_B8618);
    inited = swift_initStackObject(v17, v21);
    *(_OWORD *)(inited + 16) = xmmword_8EA70;
    *(_QWORD *)(inited + 32) = 1886680168;
    *(_QWORD *)(inited + 40) = 0xE400000000000000;
    *(_QWORD *)(inited + 48) = 0x7370747468;
    *(_QWORD *)(inited + 56) = 0xE500000000000000;
    *(_QWORD *)(inited + 64) = 1936553065;
    *(_QWORD *)(inited + 72) = 0xE400000000000000;
    *(_QWORD *)(inited + 80) = 0x7070612D736D7469;
    *(_QWORD *)(inited + 88) = 0xE900000000000073;
    *(_QWORD *)(inited + 96) = 0x6F6F622D736D7469;
    *(_QWORD *)(inited + 104) = 0xEA0000000000736BLL;
    *(_QWORD *)(inited + 112) = 0x6973756D2D737469;
    *(_QWORD *)(inited + 120) = 0xE900000000000063;
    *(_QWORD *)(inited + 128) = 0x656469762D737469;
    *(_QWORD *)(inited + 136) = 0xEA0000000000736FLL;
    *(_QWORD *)(inited + 144) = 0x73736D7469;
    *(_QWORD *)(inited + 152) = 0xE500000000000000;
    *(_QWORD *)(inited + 160) = 0x7070612D736D7469;
    *(_QWORD *)(inited + 168) = 0xEA00000000007373;
    *(_QWORD *)(inited + 176) = 0x6F6F622D736D7469;
    *(_QWORD *)(inited + 184) = 0xEB0000000073736BLL;
    *(_QWORD *)(inited + 192) = 0x6F746C69616DLL;
    *(_QWORD *)(inited + 200) = 0xE600000000000000;
    *(_QWORD *)(inited + 208) = 0x7366657270;
    *(_QWORD *)(inited + 216) = 0xE500000000000000;
    *(_QWORD *)(inited + 224) = 1702065510;
    *(_QWORD *)(inited + 232) = 0xE400000000000000;
    *(_QWORD *)(inited + 240) = 0x636973756DLL;
    *(_QWORD *)(inited + 248) = 0xE500000000000000;
    *(_QWORD *)(inited + 256) = 0x73636973756DLL;
    *(_QWORD *)(inited + 264) = 0xE600000000000000;
    *(_QWORD *)(inited + 272) = 0x63672D736D7469;
    *(_QWORD *)(inited + 280) = 0xE700000000000000;
    *(_QWORD *)(inited + 288) = 0x7363672D736D7469;
    *(_QWORD *)(inited + 296) = 0xE800000000000000;
    strcpy((char *)(inited + 304), "itms-itunesu");
    *(_BYTE *)(inited + 317) = 0;
    *(_WORD *)(inited + 318) = -5120;
    strcpy((char *)(inited + 320), "itms-itunesus");
    *(_WORD *)(inited + 334) = -4864;
    *(_QWORD *)(inited + 336) = 0x6973756D2D737469;
    *(_QWORD *)(inited + 344) = 0xEA00000000007363;
    *(_QWORD *)(inited + 352) = 0x656469762D737469;
    *(_QWORD *)(inited + 360) = 0xEB0000000073736FLL;
    strcpy((char *)(inited + 368), "itms-podcasts");
    *(_WORD *)(inited + 382) = -4864;
    strcpy((char *)(inited + 384), "itms-podcastss");
    *(_BYTE *)(inited + 399) = -18;
    *(_QWORD *)(inited + 400) = 0x786F62656F6873;
    *(_QWORD *)(inited + 408) = 0xE700000000000000;
    *(_QWORD *)(inited + 416) = 0x6F69646172737469;
    *(_QWORD *)(inited + 424) = 0xE800000000000000;
    *(_QWORD *)(inited + 432) = 0x6974616E6576696CLL;
    *(_QWORD *)(inited + 440) = 0xEA00000000006E6FLL;
    *(_QWORD *)(inited + 448) = 0xD000000000000014;
    *(_QWORD *)(inited + 456) = 0x800000000008AFD0;
    *(_QWORD *)(inited + 464) = 0x656764697262;
    *(_QWORD *)(inited + 472) = 0xE600000000000000;
    v19 = (_QWORD *)URLParser.ParserURLType.rawValue.getter(inited);
    v14 = sub_625D4(v5._countAndFlagsBits, (uint64_t)v5._object, v19);
    swift_bridgeObjectRelease(v19);
LABEL_11:
    swift_bridgeObjectRelease(v5._object);

    return v14 & 1;
  }
  v13 = sub_625D4(v5._countAndFlagsBits, (uint64_t)v5._object, v22);
  swift_bridgeObjectRelease(v12);
  if ((v13 & 1) == 0 && (v5._countAndFlagsBits != 0x656764697262 || v5._object != (void *)0xE600000000000000))
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v5._countAndFlagsBits, v5._object, 0x656764697262, 0xE600000000000000, 0);
    goto LABEL_11;
  }
  swift_bridgeObjectRelease(v5._object);

  v14 = 1;
  return v14 & 1;
}

void __swiftcall NSURL.parametrize(_:)(NSURL *__return_ptr retstr, Swift::OpaquePointer a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void (**v6)(unint64_t, char *, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void (**v35)(unint64_t, char *, uint64_t);
  void (*v36)(unint64_t, char *, uint64_t);
  _QWORD *v37;
  char *v38;
  unint64_t v39;
  void (**v40)(unint64_t, char *, uint64_t);
  uint64_t v41;
  void (*v42)(unint64_t, char *, uint64_t);
  void (*v43)(unint64_t, char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v50;
  unint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  char v57;
  _QWORD *v58;
  uint64_t *v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char v83;
  unint64_t v84;
  uint64_t v85;
  _BOOL8 v86;
  uint64_t v87;
  char v88;
  unint64_t v89;
  char v90;
  _QWORD *v91;
  uint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(char *, uint64_t, uint64_t);
  char *v106;
  NSURL *v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(char *, uint64_t);
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  id v118;
  void (*v119)(unint64_t, char *, uint64_t);
  char *v120;
  void (**v121)(unint64_t, char *, uint64_t);
  char *v122;
  _QWORD *rawValue;
  uint64_t v124;
  char *v125;
  char *v126;
  _QWORD *v127;

  v3 = sub_29EF0((uint64_t *)&unk_B8CA0);
  __chkstk_darwin(v3);
  v5 = (char *)&v108 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = type metadata accessor for URLQueryItem(0);
  v6 = *(void (***)(unint64_t, char *, uint64_t))(v124 - 8);
  v7 = __chkstk_darwin(v124);
  v126 = (char *)&v108 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v125 = (char *)&v108 - v10;
  v11 = __chkstk_darwin(v9);
  v122 = (char *)&v108 - v12;
  __chkstk_darwin(v11);
  v120 = (char *)&v108 - v13;
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v108 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v108 - v19;
  v21 = sub_29EF0(&qword_B98A8);
  __chkstk_darwin(v21);
  v23 = (char *)&v108 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for URLComponents(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = (id)__chkstk_darwin(v118);
  v117 = (char *)&v108 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  rawValue = a2._rawValue;
  if (!*((_QWORD *)a2._rawValue + 2))
    goto LABEL_4;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v26);
  URLComponents.init(url:resolvingAgainstBaseURL:)(v20, 0);
  v28 = *(void (**)(char *, uint64_t))(v15 + 8);
  v28(v20, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) == 1)
  {
    sub_2E618((uint64_t)v23, &qword_B98A8);
    v26 = v118;
LABEL_4:
    v29 = v26;
    return;
  }
  v110 = v28;
  v30 = (*(uint64_t (**)(char *, char *, uint64_t))(v25 + 32))(v117, v23, v24);
  v31 = URLComponents.queryItems.getter(v30);
  v115 = v14;
  v116 = v5;
  v111 = v18;
  v112 = v25;
  v113 = v24;
  v114 = v15;
  if (v31)
  {
    v32 = *(_QWORD *)(v31 + 16);
    v33 = v124;
    v121 = v6;
    v109 = v31;
    if (v32)
    {
      v34 = v31 + ((*((unsigned __int8 *)v6 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v6 + 80));
      v35 = v6;
      v36 = v6[9];
      v119 = v35[2];
      v37 = &_swiftEmptyDictionarySingleton;
      v38 = v120;
      while (1)
      {
        v43 = v119;
        v44 = ((uint64_t (*)(char *, unint64_t, uint64_t))v119)(v38, v34, v33);
        v45 = URLQueryItem.name.getter(v44);
        v46 = v33;
        v48 = v47;
        v43((unint64_t)v122, v38, v46);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v37);
        v127 = v37;
        v51 = sub_4CF3C(v45, v48);
        v52 = v37[2];
        v53 = (v50 & 1) == 0;
        v54 = v52 + v53;
        if (__OFADD__(v52, v53))
        {
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
          goto LABEL_65;
        }
        v55 = v50;
        if (v37[3] >= v54)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v58 = v127;
            if ((v50 & 1) != 0)
              goto LABEL_8;
          }
          else
          {
            sub_6519C();
            v58 = v127;
            if ((v55 & 1) != 0)
              goto LABEL_8;
          }
        }
        else
        {
          sub_65D14(v54, isUniquelyReferenced_nonNull_native);
          v56 = sub_4CF3C(v45, v48);
          if ((v55 & 1) != (v57 & 1))
            goto LABEL_66;
          v51 = v56;
          v58 = v127;
          if ((v55 & 1) != 0)
          {
LABEL_8:
            v39 = v58[7] + v51 * (_QWORD)v36;
            v40 = v121;
            v41 = v124;
            v121[5](v39, v122, v124);
            goto LABEL_9;
          }
        }
        v58[(v51 >> 6) + 8] |= 1 << v51;
        v59 = (uint64_t *)(v58[6] + 16 * v51);
        *v59 = v45;
        v59[1] = v48;
        v121[4](v58[7] + v51 * (_QWORD)v36, v122, v124);
        v60 = v58[2];
        v61 = __OFADD__(v60, 1);
        v62 = v60 + 1;
        if (v61)
          goto LABEL_64;
        v58[2] = v62;
        swift_bridgeObjectRetain(v48);
        v41 = v124;
        v40 = v121;
LABEL_9:
        v37 = v127;
        swift_bridgeObjectRelease(v48);
        swift_bridgeObjectRelease(0x8000000000000000);
        v42 = v40[1];
        v38 = v120;
        ((void (*)(char *, uint64_t))v42)(v120, v41);
        v34 += (unint64_t)v36;
        --v32;
        v33 = v41;
        if (!v32)
          goto LABEL_23;
      }
    }
    v37 = &_swiftEmptyDictionarySingleton;
LABEL_23:
    swift_bridgeObjectRelease(v109);
    v6 = v121;
  }
  else
  {
    v37 = (_QWORD *)sub_40BF8((uint64_t)_swiftEmptyArrayStorage);
    v33 = v124;
  }
  v63 = rawValue[8];
  v121 = (void (**)(unint64_t, char *, uint64_t))(rawValue + 8);
  v64 = 1 << *((_BYTE *)rawValue + 32);
  v65 = -1;
  if (v64 < 64)
    v65 = ~(-1 << v64);
  v66 = v65 & v63;
  v122 = (char *)((unint64_t)(v64 + 63) >> 6);
  swift_bridgeObjectRetain(rawValue);
  v67 = 0;
  while (1)
  {
    if (v66)
    {
      v69 = __clz(__rbit64(v66));
      v66 &= v66 - 1;
      v70 = v69 | (v67 << 6);
      goto LABEL_45;
    }
    v71 = v67 + 1;
    if (__OFADD__(v67, 1))
      goto LABEL_62;
    if (v71 >= (uint64_t)v122)
    {
LABEL_56:
      swift_release(rawValue);
      swift_bridgeObjectRetain_n(v37, 2);
      v96 = sub_635A4((uint64_t)v37);
      swift_bridgeObjectRelease(v37);
      v127 = v96;
      sub_637A0(&v127);
      swift_bridgeObjectRelease(v37);
      v97 = v117;
      v98 = URLComponents.queryItems.setter(v127);
      v99 = (uint64_t)v116;
      URLComponents.url.getter(v98);
      v100 = v114;
      v101 = v115;
      v102 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v114 + 48))(v99, 1, v115);
      v104 = v112;
      v103 = v113;
      if (v102 == 1)
      {
        (*(void (**)(char *, uint64_t))(v112 + 8))(v97, v113);
        sub_2E618(v99, (uint64_t *)&unk_B8CA0);
        v118;
      }
      else
      {
        v105 = *(void (**)(char *, uint64_t, uint64_t))(v100 + 32);
        v106 = v111;
        v105(v111, v99, v101);
        URL._bridgeToObjectiveC()(v107);
        v110(v106, v101);
        (*(void (**)(char *, uint64_t))(v104 + 8))(v97, v103);
      }
      swift_bridgeObjectRelease(v37);
      return;
    }
    v72 = (unint64_t)v121[v71];
    ++v67;
    if (!v72)
    {
      v67 = v71 + 1;
      if (v71 + 1 >= (uint64_t)v122)
        goto LABEL_56;
      v72 = (unint64_t)v121[v67];
      if (!v72)
      {
        v67 = v71 + 2;
        if (v71 + 2 >= (uint64_t)v122)
          goto LABEL_56;
        v72 = (unint64_t)v121[v67];
        if (!v72)
          break;
      }
    }
LABEL_44:
    v66 = (v72 - 1) & v72;
    v70 = __clz(__rbit64(v72)) + (v67 << 6);
LABEL_45:
    v74 = 16 * v70;
    v75 = (uint64_t *)(rawValue[6] + v74);
    v77 = *v75;
    v76 = v75[1];
    v78 = (uint64_t *)(rawValue[7] + v74);
    v79 = *v78;
    v80 = v78[1];
    swift_bridgeObjectRetain(v76);
    swift_bridgeObjectRetain(v80);
    v81 = v125;
    URLQueryItem.init(name:value:)(v77, v76, v79, v80);
    swift_bridgeObjectRelease(v80);
    v6[2]((unint64_t)v126, v81, v33);
    v82 = swift_isUniquelyReferenced_nonNull_native(v37);
    v127 = v37;
    v84 = sub_4CF3C(v77, v76);
    v85 = v37[2];
    v86 = (v83 & 1) == 0;
    v87 = v85 + v86;
    if (__OFADD__(v85, v86))
    {
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
    v88 = v83;
    if (v37[3] >= v87)
    {
      if ((v82 & 1) != 0)
      {
        v91 = v127;
        if ((v83 & 1) != 0)
          goto LABEL_27;
      }
      else
      {
        sub_6519C();
        v91 = v127;
        if ((v88 & 1) != 0)
          goto LABEL_27;
      }
    }
    else
    {
      sub_65D14(v87, v82);
      v89 = sub_4CF3C(v77, v76);
      if ((v88 & 1) != (v90 & 1))
        goto LABEL_66;
      v84 = v89;
      v91 = v127;
      if ((v88 & 1) != 0)
      {
LABEL_27:
        v68 = v91[7] + (_QWORD)v6[9] * v84;
        v33 = v124;
        v6[5](v68, v126, v124);
        goto LABEL_28;
      }
    }
    v91[(v84 >> 6) + 8] |= 1 << v84;
    v92 = (uint64_t *)(v91[6] + 16 * v84);
    *v92 = v77;
    v92[1] = v76;
    v93 = v91[7] + (_QWORD)v6[9] * v84;
    v33 = v124;
    v6[4](v93, v126, v124);
    v94 = v91[2];
    v61 = __OFADD__(v94, 1);
    v95 = v94 + 1;
    if (v61)
      goto LABEL_61;
    v91[2] = v95;
    swift_bridgeObjectRetain(v76);
LABEL_28:
    v37 = v127;
    swift_bridgeObjectRelease(v76);
    swift_bridgeObjectRelease(0x8000000000000000);
    ((void (*)(char *, uint64_t))v6[1])(v125, v33);
  }
  v73 = v71 + 3;
  if (v73 >= (uint64_t)v122)
    goto LABEL_56;
  v72 = (unint64_t)v121[v73];
  if (v72)
  {
    v67 = v73;
    goto LABEL_44;
  }
  while (1)
  {
    v67 = v73 + 1;
    if (__OFADD__(v73, 1))
      break;
    if (v67 >= (uint64_t)v122)
      goto LABEL_56;
    v72 = (unint64_t)v121[v67];
    ++v73;
    if (v72)
      goto LABEL_44;
  }
LABEL_65:
  __break(1u);
LABEL_66:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  swift_release(v127);
  __break(1u);
}

_QWORD *sub_634B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_29EF0(&qword_B85E0);
  v4 = (_QWORD *)swift_allocObject(v3, 24 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v4[2] = v1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 24);
  v6 = sub_3F52C((uint64_t)&v9, v4 + 4, v1, a1);
  v7 = v9;
  swift_bridgeObjectRetain(a1);
  sub_2E5CC(v7);
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_635A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_29EF0(&qword_B8610);
  v4 = *(_QWORD *)(type metadata accessor for URLQueryItem(0) - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = (_QWORD *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  result = (_QWORD *)j__malloc_size(v8);
  if (v5)
  {
    if ((_QWORD *)((char *)result - v7) != (_QWORD *)0x8000000000000000 || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      v11 = sub_3F744(&v13, (uint64_t)v8 + v7, v1, a1);
      v12 = v13;
      swift_bridgeObjectRetain(a1);
      sub_2E5CC(v12);
      if (v11 == v1)
        return v8;
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_636BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_29EF0(&qword_B8618);
  v4 = (_QWORD *)swift_allocObject(v3, 16 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  v7 = sub_3FA0C((uint64_t)&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_2E5CC(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

Swift::Int sub_637A0(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  Swift::Int result;
  uint64_t v6[2];

  v2 = *(_QWORD *)(type metadata accessor for URLQueryItem(0) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_3FE64(v3);
  v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_63820(v6);
  *a1 = v3;
  return result;
}

Swift::Int sub_63820(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  Swift::Int result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  Swift::Int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(char *, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  void (*v87)(char *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  char *v90;
  void (*v91)(char *, uint64_t, uint64_t);
  unint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  BOOL v118;
  uint64_t v119;
  char v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  BOOL v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  unint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  Swift::Int v153;
  char *v154;
  uint64_t v155;
  char *v156;
  char *v157;
  char *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  char *v169;
  Swift::Int v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;

  v2 = v1;
  v4 = type metadata accessor for URLQueryItem(0);
  v173 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v160 = (char *)&v152 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v167 = (char *)&v152 - v8;
  v9 = __chkstk_darwin(v7);
  v169 = (char *)&v152 - v10;
  v11 = __chkstk_darwin(v9);
  v168 = (char *)&v152 - v12;
  v13 = __chkstk_darwin(v11);
  v156 = (char *)&v152 - v14;
  v15 = __chkstk_darwin(v13);
  v163 = (char *)&v152 - v16;
  v17 = __chkstk_darwin(v15);
  v158 = (char *)&v152 - v18;
  __chkstk_darwin(v17);
  v157 = (char *)&v152 - v19;
  v172 = a1;
  v20 = a1[1];
  result = _minimumMergeRunLength(_:)(v20);
  if (result >= v20)
  {
    if (v20 < 0)
      goto LABEL_150;
    if (v20)
      return sub_643B8(0, v20, 1, v172);
    return result;
  }
  if (v20 >= 0)
    v22 = v20;
  else
    v22 = v20 + 1;
  if (v20 < -1)
    goto LABEL_158;
  v153 = result;
  if (v20 < 2)
  {
    v27 = (char *)_swiftEmptyArrayStorage;
    v26 = (char *)_swiftEmptyArrayStorage
        + ((*(unsigned __int8 *)(v173 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v173 + 80));
    v152 = _swiftEmptyArrayStorage;
    if (v20 != 1)
    {
      v29 = _swiftEmptyArrayStorage[2];
LABEL_116:
      if (v29 >= 2)
      {
        v144 = *v172;
        do
        {
          v145 = v29 - 2;
          if (v29 < 2)
            goto LABEL_145;
          if (!v144)
            goto LABEL_157;
          v146 = *(_QWORD *)&v27[16 * v145 + 32];
          v147 = *(_QWORD *)&v27[16 * v29 + 24];
          v148 = v26;
          sub_64680(v144 + *(_QWORD *)(v173 + 72) * v146, v144 + *(_QWORD *)(v173 + 72) * *(_QWORD *)&v27[16 * v29 + 16], v144 + *(_QWORD *)(v173 + 72) * v147, (unint64_t)v26);
          if (v2)
            break;
          if (v147 < v146)
            goto LABEL_146;
          if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0)
            v27 = sub_3F518((uint64_t)v27);
          if (v145 >= *((_QWORD *)v27 + 2))
            goto LABEL_147;
          v149 = &v27[16 * v145 + 32];
          *(_QWORD *)v149 = v146;
          *((_QWORD *)v149 + 1) = v147;
          v150 = *((_QWORD *)v27 + 2);
          if (v29 > v150)
            goto LABEL_148;
          memmove(&v27[16 * v29 + 16], &v27[16 * v29 + 32], 16 * (v150 - v29));
          *((_QWORD *)v27 + 2) = v150 - 1;
          v29 = v150 - 1;
          v26 = v148;
        }
        while (v150 > 2);
      }
LABEL_127:
      swift_bridgeObjectRelease(v27);
      v151 = v152;
      v152[2] = 0;
      return swift_bridgeObjectRelease(v151);
    }
  }
  else
  {
    v23 = v22 >> 1;
    v24 = static Array._allocateBufferUninitialized(minimumCapacity:)(v22 >> 1, v4);
    *(_QWORD *)(v24 + 16) = v23;
    v25 = *(unsigned __int8 *)(v173 + 80);
    v152 = (_QWORD *)v24;
    v26 = (char *)(v24 + ((v25 + 32) & ~v25));
  }
  v28 = 0;
  v27 = (char *)_swiftEmptyArrayStorage;
  v162 = v26;
  v166 = v4;
  while (1)
  {
    v30 = v28;
    v31 = v28 + 1;
    if (v28 + 1 >= v20)
    {
      v42 = v28 + 1;
      goto LABEL_67;
    }
    v170 = v20;
    v32 = *v172;
    v33 = *(_QWORD *)(v173 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v173 + 16);
    v34(v157, *v172 + v33 * v31, v4);
    v161 = v30;
    v159 = v32;
    v171 = v33;
    v35 = ((uint64_t (*)(char *, uint64_t, uint64_t))v34)(v158, v32 + v33 * v30, v4);
    v36 = URLQueryItem.name.getter(v35);
    v38 = v37;
    v40 = URLQueryItem.name.getter(v36);
    v41 = v39;
    if (v36 == v40 && v38 == v39)
    {
      LODWORD(v165) = 0;
      v41 = v38;
    }
    else
    {
      LODWORD(v165) = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v38, v40, v39, 1);
    }
    v43 = v156;
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease(v41);
    v44 = *(void (**)(char *, uint64_t))(v173 + 8);
    v45 = v166;
    v44(v158, v166);
    v44(v157, v45);
    v42 = v161 + 2;
    if (v161 + 2 < v170)
    {
      v154 = v27;
      v155 = v2;
      v164 = v171 * v31;
      v46 = v159;
      v47 = v171 * v42;
      while (1)
      {
        v48 = v166;
        v34(v163, v46 + v47, v166);
        v49 = ((uint64_t (*)(char *, uint64_t, uint64_t))v34)(v43, v46 + v164, v48);
        v50 = URLQueryItem.name.getter(v49);
        v52 = v51;
        v54 = URLQueryItem.name.getter(v50);
        v55 = v53;
        if (v50 == v54 && v52 == v53)
        {
          v56 = 0;
          v55 = v52;
        }
        else
        {
          v56 = _stringCompareWithSmolCheck(_:_:expecting:)(v50, v52, v54, v53, 1);
        }
        swift_bridgeObjectRelease(v52);
        swift_bridgeObjectRelease(v55);
        v57 = v166;
        v44(v43, v166);
        v44(v163, v57);
        if (((v165 ^ v56) & 1) != 0)
          break;
        ++v42;
        v46 += v171;
        if (v170 == v42)
        {
          v58 = v170;
          v42 = v170;
          v27 = v154;
          v2 = v155;
          goto LABEL_32;
        }
      }
      v27 = v154;
      v2 = v155;
    }
    v58 = v170;
LABEL_32:
    v30 = v161;
    v59 = v159;
    if ((v165 & 1) == 0)
      break;
    if (v42 < v161)
      goto LABEL_151;
    if (v161 >= v42)
      break;
    v154 = v27;
    v155 = v2;
    v60 = 0;
    v61 = v171 * (v42 - 1);
    v62 = v42 * v171;
    v63 = v161;
    v64 = v161 * v171;
    do
    {
      if (v63 != v42 + v60 - 1)
      {
        if (!v59)
          goto LABEL_156;
        v68 = v42;
        v69 = v59 + v64;
        v70 = v59 + v61;
        v165 = *(_QWORD *)(v173 + 32);
        ((void (*)(char *, uint64_t, uint64_t))v165)(v160, v59 + v64, v166);
        if (v64 < v61 || v69 >= v59 + v62)
        {
          v65 = v59 + v64;
          v66 = v59 + v61;
          v67 = v166;
          swift_arrayInitWithTakeFrontToBack(v65, v66);
        }
        else
        {
          v67 = v166;
          if (v64 != v61)
            swift_arrayInitWithTakeBackToFront(v69, v70);
        }
        ((void (*)(uint64_t, char *, uint64_t))v165)(v70, v160, v67);
        v42 = v68;
        v59 = v159;
      }
      ++v63;
      --v60;
      v61 -= v171;
      v62 -= v171;
      v64 += v171;
    }
    while (v63 < v42 + v60);
    v27 = v154;
    v2 = v155;
    v71 = v166;
    v30 = v161;
    v58 = v170;
    if (v42 < v170)
      goto LABEL_48;
LABEL_67:
    if (v42 < v30)
      goto LABEL_144;
    if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0)
      v27 = sub_3F258(0, *((_QWORD *)v27 + 2) + 1, 1, v27);
    v93 = *((_QWORD *)v27 + 2);
    v92 = *((_QWORD *)v27 + 3);
    v29 = v93 + 1;
    v26 = v162;
    v171 = v42;
    if (v93 >= v92 >> 1)
    {
      v143 = sub_3F258((char *)(v92 > 1), v93 + 1, 1, v27);
      v26 = v162;
      v27 = v143;
    }
    *((_QWORD *)v27 + 2) = v29;
    v94 = v27 + 32;
    v95 = &v27[16 * v93 + 32];
    v96 = v171;
    *(_QWORD *)v95 = v30;
    *((_QWORD *)v95 + 1) = v96;
    if (v93)
    {
      while (1)
      {
        v97 = v29 - 1;
        if (v29 >= 4)
        {
          v102 = &v94[16 * v29];
          v103 = *((_QWORD *)v102 - 8);
          v104 = *((_QWORD *)v102 - 7);
          v108 = __OFSUB__(v104, v103);
          v105 = v104 - v103;
          if (v108)
            goto LABEL_133;
          v107 = *((_QWORD *)v102 - 6);
          v106 = *((_QWORD *)v102 - 5);
          v108 = __OFSUB__(v106, v107);
          v100 = v106 - v107;
          v101 = v108;
          if (v108)
            goto LABEL_134;
          v109 = v29 - 2;
          v110 = &v94[16 * v29 - 32];
          v112 = *(_QWORD *)v110;
          v111 = *((_QWORD *)v110 + 1);
          v108 = __OFSUB__(v111, v112);
          v113 = v111 - v112;
          if (v108)
            goto LABEL_136;
          v108 = __OFADD__(v100, v113);
          v114 = v100 + v113;
          if (v108)
            goto LABEL_139;
          if (v114 >= v105)
          {
            v132 = &v94[16 * v97];
            v134 = *(_QWORD *)v132;
            v133 = *((_QWORD *)v132 + 1);
            v108 = __OFSUB__(v133, v134);
            v135 = v133 - v134;
            if (v108)
              goto LABEL_143;
            v125 = v100 < v135;
            goto LABEL_104;
          }
        }
        else
        {
          if (v29 != 3)
          {
            v126 = *((_QWORD *)v27 + 4);
            v127 = *((_QWORD *)v27 + 5);
            v108 = __OFSUB__(v127, v126);
            v119 = v127 - v126;
            v120 = v108;
            goto LABEL_98;
          }
          v99 = *((_QWORD *)v27 + 4);
          v98 = *((_QWORD *)v27 + 5);
          v108 = __OFSUB__(v98, v99);
          v100 = v98 - v99;
          v101 = v108;
        }
        if ((v101 & 1) != 0)
          goto LABEL_135;
        v109 = v29 - 2;
        v115 = &v94[16 * v29 - 32];
        v117 = *(_QWORD *)v115;
        v116 = *((_QWORD *)v115 + 1);
        v118 = __OFSUB__(v116, v117);
        v119 = v116 - v117;
        v120 = v118;
        if (v118)
          goto LABEL_138;
        v121 = &v94[16 * v97];
        v123 = *(_QWORD *)v121;
        v122 = *((_QWORD *)v121 + 1);
        v108 = __OFSUB__(v122, v123);
        v124 = v122 - v123;
        if (v108)
          goto LABEL_141;
        if (__OFADD__(v119, v124))
          goto LABEL_142;
        if (v119 + v124 >= v100)
        {
          v125 = v100 < v124;
LABEL_104:
          if (v125)
            v97 = v109;
          goto LABEL_106;
        }
LABEL_98:
        if ((v120 & 1) != 0)
          goto LABEL_137;
        v128 = &v94[16 * v97];
        v130 = *(_QWORD *)v128;
        v129 = *((_QWORD *)v128 + 1);
        v108 = __OFSUB__(v129, v130);
        v131 = v129 - v130;
        if (v108)
          goto LABEL_140;
        if (v131 < v119)
          goto LABEL_14;
LABEL_106:
        v136 = v97 - 1;
        if (v97 - 1 >= v29)
        {
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
          goto LABEL_153;
        }
        if (!*v172)
          goto LABEL_155;
        v137 = v27;
        v138 = &v94[16 * v136];
        v139 = *(_QWORD *)v138;
        v140 = &v94[16 * v97];
        v141 = *((_QWORD *)v140 + 1);
        sub_64680(*v172 + *(_QWORD *)(v173 + 72) * *(_QWORD *)v138, *v172 + *(_QWORD *)(v173 + 72) * *(_QWORD *)v140, *v172 + *(_QWORD *)(v173 + 72) * v141, (unint64_t)v26);
        if (v2)
        {
          v27 = v137;
          goto LABEL_127;
        }
        if (v141 < v139)
          goto LABEL_130;
        if (v97 > *((_QWORD *)v137 + 2))
          goto LABEL_131;
        *(_QWORD *)v138 = v139;
        *(_QWORD *)&v94[16 * v136 + 8] = v141;
        v142 = *((_QWORD *)v137 + 2);
        if (v97 >= v142)
          goto LABEL_132;
        v27 = v137;
        v29 = v142 - 1;
        memmove(&v94[16 * v97], v140 + 16, 16 * (v142 - 1 - v97));
        *((_QWORD *)v137 + 2) = v142 - 1;
        v26 = v162;
        if (v142 <= 2)
          goto LABEL_14;
      }
    }
    v29 = 1;
LABEL_14:
    v20 = v172[1];
    v28 = v171;
    v4 = v166;
    if (v171 >= v20)
      goto LABEL_116;
  }
  v71 = v166;
  if (v42 >= v58)
    goto LABEL_67;
LABEL_48:
  if (__OFSUB__(v42, v30))
    goto LABEL_149;
  if (v42 - v30 >= v153)
    goto LABEL_67;
  if (__OFADD__(v30, v153))
    goto LABEL_152;
  if (v30 + v153 >= v58)
    v72 = v58;
  else
    v72 = v30 + v153;
  if (v72 >= v30)
  {
    if (v42 != v72)
    {
      v161 = v30;
      v154 = v27;
      v155 = v2;
      v73 = *(_QWORD *)(v173 + 72);
      v164 = *(_QWORD *)(v173 + 16);
      v165 = v73;
      v170 = v42 * v73;
      v171 = v73 * (v42 - 1);
      v159 = v72;
      do
      {
        v75 = 0;
        v76 = v161;
        while (1)
        {
          v77 = *v172;
          v78 = (uint64_t (*)(char *, uint64_t, uint64_t))v164;
          ((void (*)(char *, Swift::Int, uint64_t))v164)(v168, v170 + v75 + *v172, v71);
          v79 = v78(v169, v171 + v75 + v77, v71);
          v80 = URLQueryItem.name.getter(v79);
          v82 = v81;
          v84 = URLQueryItem.name.getter(v80);
          v85 = v83;
          if (v80 == v84 && v82 == v83)
            break;
          v86 = _stringCompareWithSmolCheck(_:_:expecting:)(v80, v82, v84, v83, 1);
          swift_bridgeObjectRelease(v82);
          swift_bridgeObjectRelease(v85);
          v87 = *(void (**)(char *, uint64_t))(v173 + 8);
          v71 = v166;
          v87(v169, v166);
          v87(v168, v71);
          if ((v86 & 1) == 0)
            goto LABEL_58;
          v88 = *v172;
          if (!*v172)
            goto LABEL_154;
          v89 = v88 + v170 + v75;
          v90 = (char *)(v88 + v171 + v75);
          v91 = *(void (**)(char *, uint64_t, uint64_t))(v173 + 32);
          v91(v167, v89, v71);
          swift_arrayInitWithTakeFrontToBack(v89, v90);
          v91(v90, (uint64_t)v167, v71);
          v75 -= v165;
          if (v42 == ++v76)
            goto LABEL_58;
        }
        swift_bridgeObjectRelease_n(v82, 2);
        v74 = *(void (**)(char *, uint64_t))(v173 + 8);
        v71 = v166;
        v74(v169, v166);
        v74(v168, v71);
LABEL_58:
        ++v42;
        v171 += v165;
        v170 += v165;
      }
      while (v42 != v159);
      v42 = v159;
      v27 = v154;
      v2 = v155;
      v30 = v161;
    }
    goto LABEL_67;
  }
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_643B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t *v41;
  _QWORD *v42;
  char *v43;
  char *v44;
  uint64_t v45;

  v41 = a4;
  v35 = a1;
  v6 = type metadata accessor for URLQueryItem(0);
  v42 = *(_QWORD **)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v40 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v44 = (char *)&v33 - v10;
  result = __chkstk_darwin(v9);
  v43 = (char *)&v33 - v12;
  v39 = a3;
  v34 = a2;
  if (a3 != a2)
  {
    v13 = v42[9];
    v36 = (uint64_t (*)(char *, uint64_t, uint64_t))v42[2];
    v37 = v13;
    v14 = v13 * (v39 - 1);
    v45 = v13 * v39;
LABEL_6:
    v16 = 0;
    v17 = v35;
    v38 = v14;
    while (1)
    {
      v18 = *v41;
      v19 = v36;
      v36(v43, v45 + v16 + *v41, v6);
      v20 = v19(v44, v14 + v16 + v18, v6);
      v21 = URLQueryItem.name.getter(v20);
      v23 = v22;
      v25 = URLQueryItem.name.getter(v21);
      v26 = v24;
      if (v21 == v25 && v23 == v24)
      {
        swift_bridgeObjectRelease_n(v23, 2);
        v15 = (void (*)(char *, uint64_t))v42[1];
        v15(v44, v6);
        result = ((uint64_t (*)(char *, uint64_t))v15)(v43, v6);
        v14 = v38;
LABEL_5:
        v14 += v37;
        v45 += v37;
        if (++v39 == v34)
          return result;
        goto LABEL_6;
      }
      v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v23, v25, v24, 1);
      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease(v26);
      v28 = (void (*)(char *, uint64_t))v42[1];
      v28(v44, v6);
      result = ((uint64_t (*)(char *, uint64_t))v28)(v43, v6);
      v14 = v38;
      if ((v27 & 1) == 0)
        goto LABEL_5;
      v29 = *v41;
      if (!*v41)
        break;
      v30 = v29 + v45 + v16;
      v31 = v29 + v38 + v16;
      v32 = (void (*)(char *, uint64_t, uint64_t))v42[4];
      v32(v40, v30, v6);
      swift_arrayInitWithTakeFrontToBack(v30, v31);
      result = ((uint64_t (*)(uint64_t, char *, uint64_t))v32)(v31, v40, v6);
      v16 -= v37;
      if (v39 == ++v17)
        goto LABEL_5;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_64680(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  char v35;
  void (*v36)(char *, uint64_t);
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v42;
  unint64_t v43;
  uint64_t (*v44)(char *, unint64_t, uint64_t);
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  void (*v54)(char *, uint64_t);
  BOOL v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t result;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;

  v8 = type metadata accessor for URLQueryItem(0);
  v9 = __chkstk_darwin(v8);
  v65 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v64 = (char *)&v61 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v61 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v61 - v16;
  v19 = *(_QWORD *)(v18 + 72);
  v66 = v18;
  v67 = v19;
  if (!v19)
  {
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  if (a2 - a1 == 0x8000000000000000 && v67 == -1)
    goto LABEL_69;
  v20 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v67 == -1)
    goto LABEL_70;
  v21 = (uint64_t)(a2 - a1) / v67;
  v70 = a1;
  v69 = a4;
  v22 = v20 / v67;
  if (v21 >= v20 / v67)
  {
    if ((v22 & 0x8000000000000000) == 0)
    {
      v24 = v22 * v67;
      if (a4 < a2 || a2 + v24 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v40 = a4 + v24;
      v68 = a4 + v24;
      v70 = a2;
      if (v24 >= 1 && a1 < a2)
      {
        v42 = -v67;
        v67 = *(_QWORD *)(v66 + 16);
        v62 = a4;
        v63 = a1;
        do
        {
          v43 = a3;
          v44 = (uint64_t (*)(char *, unint64_t, uint64_t))v67;
          ((void (*)(char *, unint64_t, uint64_t))v67)(v64, v40 + v42, v8);
          v45 = a2 + v42;
          v46 = v44(v65, a2 + v42, v8);
          v47 = URLQueryItem.name.getter(v46);
          v49 = v48;
          v51 = URLQueryItem.name.getter(v47);
          v52 = v50;
          if (v47 == v51 && v49 == v50)
          {
            v53 = 0;
            v52 = v49;
          }
          else
          {
            v53 = _stringCompareWithSmolCheck(_:_:expecting:)(v47, v49, v51, v50, 1);
          }
          swift_bridgeObjectRelease(v49);
          swift_bridgeObjectRelease(v52);
          a3 += v42;
          v54 = *(void (**)(char *, uint64_t))(v66 + 8);
          v54(v65, v8);
          v54(v64, v8);
          if ((v53 & 1) != 0)
          {
            if (v43 < a2 || a3 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v43 + v42, a2 + v42);
              v56 = v62;
              v57 = v63;
            }
            else
            {
              v55 = v43 == a2;
              v56 = v62;
              v57 = v63;
              if (!v55)
                swift_arrayInitWithTakeBackToFront(a3, a2 + v42);
            }
            v70 += v42;
          }
          else
          {
            v58 = v68;
            v59 = v68 + v42;
            v68 += v42;
            if (v43 < v58 || a3 >= v58)
            {
              swift_arrayInitWithTakeFrontToBack(v43 + v42, v59);
              v45 = a2;
              v56 = v62;
              v57 = v63;
            }
            else
            {
              v57 = v63;
              if (v43 != v58)
                swift_arrayInitWithTakeBackToFront(v43 + v42, v59);
              v45 = a2;
              v56 = v62;
            }
          }
          v40 = v68;
          if (v68 <= v56)
            break;
          a2 = v45;
        }
        while (v45 > v57);
      }
LABEL_67:
      sub_3F40C(&v70, &v69, (uint64_t *)&v68);
      return 1;
    }
  }
  else if ((v21 & 0x8000000000000000) == 0)
  {
    v23 = v21 * v67;
    if (a4 < a1 || a1 + v23 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v65 = (char *)(a4 + v23);
    v68 = a4 + v23;
    if (v23 >= 1 && a2 < a3)
    {
      v26 = *(void (**)(char *, unint64_t, uint64_t))(v66 + 16);
      while (1)
      {
        v26(v17, a2, v8);
        v27 = ((uint64_t (*)(char *, unint64_t, uint64_t))v26)(v15, a4, v8);
        v28 = URLQueryItem.name.getter(v27);
        v30 = v29;
        v32 = URLQueryItem.name.getter(v28);
        v33 = v31;
        if (v28 == v32 && v30 == v31)
          break;
        v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, v32, v31, 1);
        swift_bridgeObjectRelease(v30);
        swift_bridgeObjectRelease(v33);
        v36 = *(void (**)(char *, uint64_t))(v66 + 8);
        v36(v15, v8);
        v36(v17, v8);
        if ((v35 & 1) == 0)
          goto LABEL_31;
        v37 = v70;
        v38 = a2 + v67;
        if (v70 < a2 || v70 >= v38)
        {
          swift_arrayInitWithTakeFrontToBack(v70, a2);
        }
        else if (v70 == a2)
        {
          v37 = a2;
        }
        else
        {
          swift_arrayInitWithTakeBackToFront(v70, a2);
        }
LABEL_37:
        v70 = v37 + v67;
        a4 = v69;
        if (v69 < (unint64_t)v65)
        {
          a2 = v38;
          if (v38 < a3)
            continue;
        }
        goto LABEL_67;
      }
      swift_bridgeObjectRelease_n(v30, 2);
      v34 = *(void (**)(char *, uint64_t))(v66 + 8);
      v34(v15, v8);
      v34(v17, v8);
LABEL_31:
      v37 = v70;
      v39 = v69 + v67;
      if (v70 < v69 || v70 >= v39)
      {
        swift_arrayInitWithTakeFrontToBack(v70, v69);
      }
      else if (v70 != v69)
      {
        swift_arrayInitWithTakeBackToFront(v70, v69);
      }
      v69 = v39;
      v38 = a2;
      goto LABEL_37;
    }
    goto LABEL_67;
  }
LABEL_71:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void sub_64C5C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_29EF0(&qword_B8E98);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v20;
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_64E04()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  sub_29EF0(&qword_B8838);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    swift_release(v2);
LABEL_28:
    *v1 = v4;
    return;
  }
  v25 = v1;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_37EF0(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_41BD8(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void sub_64FE8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_29EF0(&qword_B98C0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    swift_unknownObjectRetain(v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_6519C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = type metadata accessor for URLQueryItem(0);
  v1 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_29EF0(&qword_B8830);
  v31 = v0;
  v4 = *v0;
  v5 = static _DictionaryStorage.copy(original:)(*v0);
  v6 = *(_QWORD *)(v4 + 16);
  v35 = v5;
  if (!v6)
  {
    swift_release(v4);
    v29 = v35;
    v28 = v31;
LABEL_28:
    *v28 = v29;
    return;
  }
  v7 = v5;
  v8 = (void *)(v5 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)v8 >= v4 + 64 + 8 * v9)
  {
    memmove(v8, (const void *)(v4 + 64), 8 * v9);
    v7 = v35;
  }
  v32 = v4 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v4 + 16);
  v12 = 1 << *(_BYTE *)(v4 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v4 + 64);
  v33 = (unint64_t)(v12 + 63) >> 6;
  v15 = v34;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v25 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v33)
      goto LABEL_26;
    v26 = *(_QWORD *)(v32 + 8 * v25);
    ++v11;
    if (!v26)
    {
      v11 = v25 + 1;
      if (v25 + 1 >= v33)
        goto LABEL_26;
      v26 = *(_QWORD *)(v32 + 8 * v11);
      if (!v26)
        break;
    }
LABEL_25:
    v14 = (v26 - 1) & v26;
    v17 = __clz(__rbit64(v26)) + (v11 << 6);
LABEL_12:
    v18 = 16 * v17;
    v19 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v17);
    v21 = *v19;
    v20 = v19[1];
    v22 = *(_QWORD *)(v1 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(_QWORD *)(v4 + 56) + v22, v15);
    v23 = v35;
    v24 = (_QWORD *)(*(_QWORD *)(v35 + 48) + v18);
    *v24 = v21;
    v24[1] = v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v23 + 56) + v22, v3, v15);
    swift_bridgeObjectRetain(v20);
  }
  v27 = v25 + 2;
  if (v27 >= v33)
  {
LABEL_26:
    swift_release(v4);
    v28 = v31;
    v29 = v35;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v32 + 8 * v27);
  if (v26)
  {
    v11 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v11 >= v33)
      goto LABEL_26;
    v26 = *(_QWORD *)(v32 + 8 * v11);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void sub_653F8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  _QWORD v41[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_29EF0(&qword_B8E98);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v3;
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }
    v24 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v24 >= v12)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v38 + 8 * v24);
    ++v14;
    if (!v26)
    {
      v14 = v24 + 1;
      if (v24 + 1 >= v12)
        goto LABEL_36;
      v26 = *(_QWORD *)(v38 + 8 * v14);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v37;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v38 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v14 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v14 >= v12)
              goto LABEL_36;
            v26 = *(_QWORD *)(v38 + 8 * v14);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v14 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    v32 = 16 * v23;
    v33 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v32);
    v35 = *v33;
    v34 = v33[1];
    v40 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v32);
    if ((v39 & 1) == 0)
      swift_bridgeObjectRetain(v34);
    Hasher.init(_seed:)(v41, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v41, v35, v34);
    v15 = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v18 == v29;
        if (v18 == v29)
          v18 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v31 == -1);
      v19 = __clz(__rbit64(~v31)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 16 * v19;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v20);
    *v21 = v35;
    v21[1] = v34;
    *(_OWORD *)(*(_QWORD *)(v8 + 56) + v20) = v40;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v37;
  v25 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v25, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_65704(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  _QWORD v37[9];
  _OWORD v38[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_29EF0(&qword_B8838);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    swift_retain(v5);
    v13 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return;
        }
        if (v18 >= v35)
          goto LABEL_37;
        v19 = v36[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v35)
            goto LABEL_37;
          v19 = v36[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v35)
            {
LABEL_37:
              swift_release(v5);
              v3 = v34;
              if ((a2 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v36[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_44;
                if (v13 >= v35)
                  goto LABEL_37;
                v19 = v36[v13];
                ++v20;
                if (v19)
                  goto LABEL_24;
              }
            }
            v13 = v20;
          }
        }
LABEL_24:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        sub_41BD8(v24, v38);
      }
      else
      {
        sub_37EF0((uint64_t)v24, (uint64_t)v38);
        swift_bridgeObjectRetain(v22);
      }
      Hasher.init(_seed:)(v37, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v37, v23, v22);
      v25 = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = v25 & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v14 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      sub_41BD8(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v14));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
  *v3 = v8;
}

void sub_65A00(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_29EF0(&qword_B98C0);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_unknownObjectRetain(v33);
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_65D14(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  int v44;
  char *v45;
  uint64_t v46;
  _QWORD v47[9];

  v3 = v2;
  v46 = type metadata accessor for URLQueryItem(0);
  v6 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v45 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_29EF0(&qword_B8830);
  v44 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v41 = v3;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v43 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v42 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  swift_retain(v8);
  v16 = 0;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v16 << 6);
      goto LABEL_24;
    }
    v21 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return;
    }
    if (v21 >= v42)
      goto LABEL_36;
    v22 = v43[v21];
    ++v16;
    if (!v22)
    {
      v16 = v21 + 1;
      if (v21 + 1 >= v42)
        goto LABEL_36;
      v22 = v43[v16];
      if (!v22)
        break;
    }
LABEL_23:
    v14 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v16 << 6);
LABEL_24:
    v24 = *(_QWORD *)(v8 + 56);
    v25 = v8;
    v26 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v20);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(_QWORD *)(v6 + 72);
    v30 = v24 + v29 * v20;
    if ((v44 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v45, v30, v46);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v45, v30, v46);
      swift_bridgeObjectRetain(v27);
    }
    Hasher.init(_seed:)(v47, *(_QWORD *)(v10 + 40));
    String.hash(into:)(v47, v28, v27);
    v31 = Hasher._finalize()();
    v32 = -1 << *(_BYTE *)(v10 + 32);
    v33 = v31 & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v15 + 8 * v34);
      }
      while (v38 == -1);
      v17 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v15 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v17);
    *v18 = v28;
    v18[1] = v27;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v10 + 56) + v29 * v17, v45, v46);
    ++*(_QWORD *)(v10 + 16);
    v8 = v25;
  }
  v23 = v21 + 2;
  if (v23 < v42)
  {
    v22 = v43[v23];
    if (!v22)
    {
      while (1)
      {
        v16 = v23 + 1;
        if (__OFADD__(v23, 1))
          goto LABEL_43;
        if (v16 >= v42)
          goto LABEL_36;
        v22 = v43[v16];
        ++v23;
        if (v22)
          goto LABEL_23;
      }
    }
    v16 = v23;
    goto LABEL_23;
  }
LABEL_36:
  swift_release(v8);
  v3 = v41;
  if ((v44 & 1) != 0)
  {
    v39 = 1 << *(_BYTE *)(v8 + 32);
    if (v39 >= 64)
      bzero(v43, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v43 = -1 << v39;
    *(_QWORD *)(v8 + 16) = 0;
  }
LABEL_41:
  swift_release(v8);
  *v3 = v10;
}

void sub_6607C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_29EF0(&qword_B8860);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v42 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v40 = v3;
  v41 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v13 << 6);
      goto LABEL_34;
    }
    v24 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v24 >= v41)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v42 + 8 * v24);
    ++v13;
    if (!v26)
    {
      v13 = v24 + 1;
      if (v24 + 1 >= v41)
        goto LABEL_36;
      v26 = *(_QWORD *)(v42 + 8 * v13);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v13 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v13 >= v41)
              goto LABEL_36;
            v26 = *(_QWORD *)(v42 + 8 * v13);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v13 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v13 << 6);
LABEL_34:
    v32 = 16 * v23;
    v33 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v32);
    v35 = *v33;
    v34 = v33[1];
    v36 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v32);
    v37 = *v36;
    v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v33[1]);
      swift_bridgeObjectRetain(v38);
    }
    Hasher.init(_seed:)(v44, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v44, v35, v34);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v17 == v29;
        if (v17 == v29)
          v17 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 16 * v18;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
    *v20 = v35;
    v20[1] = v34;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 56) + v19);
    *v21 = v37;
    v21[1] = v38;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v40;
  v25 = (_QWORD *)(v5 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

uint64_t _sSo5NSURLC5JSAppE11queryString3for13escapedValuesSSSDys11AnyHashableVypG_SbtFZ_0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  char *v10;
  char *v11;
  uint64_t result;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  void *countAndFlagsBits;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *object;
  char *v26;
  char *v27;
  int64_t v28;
  char *v29;
  Swift::String v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  Swift::String v36;
  void *v37;
  Swift::String v38;
  Swift::String v39;
  void *v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char *v49;
  int64_t v50;
  Swift::String v51;
  Swift::String v52;
  void *v53;
  _OWORD v54[2];
  __int128 v55;
  __int128 v56;
  _OWORD v57[2];
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  unint64_t v64;

  v47 = a2;
  v46 = type metadata accessor for CharacterSet(0);
  v45 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v44 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = 0;
  v64 = 0xE000000000000000;
  v4 = *(_QWORD *)(a1 + 64);
  v43 = a1 + 64;
  v5 = *(_BYTE *)(a1 + 32);
  v48 = 1;
  v6 = 1 << v5;
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v4;
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = (char *)v57 + 8;
  v11 = &v62;
  v42 = v9 - 1;
  result = swift_bridgeObjectRetain(a1);
  v50 = 0;
  v49 = (char *)&type metadata for Any + 8;
  if (!v8)
    goto LABEL_8;
LABEL_6:
  v13 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v14 = v13 | (v50 << 6);
  while (2)
  {
    sub_4ED10(*(_QWORD *)(a1 + 48) + 40 * v14, (uint64_t)&v55);
    sub_37EF0(*(_QWORD *)(a1 + 56) + 32 * v14, (uint64_t)v10);
    while (1)
    {
      sub_668E4((uint64_t)&v55, (uint64_t)&v59);
      if (!*((_QWORD *)&v60 + 1))
      {
        swift_release(a1);
        return v63;
      }
      v55 = v59;
      v56 = v60;
      *(_QWORD *)&v57[0] = v61;
      sub_41BD8(v11, v54);
      sub_37EF0((uint64_t)v54, (uint64_t)&v52);
      v18 = sub_6692C();
      if ((swift_dynamicCast(&v51, &v52, v49, v18, 6) & 1) != 0)
      {
        countAndFlagsBits = (void *)v51._countAndFlagsBits;
        v20 = objc_msgSend((id)v51._countAndFlagsBits, "stringValue");
        v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        v23 = v22;

        v53 = &type metadata for String;
        v52._countAndFlagsBits = v21;
        v52._object = v23;
        sub_3789C(v54);
        sub_41BD8(&v52, v54);
      }
      sub_37EF0((uint64_t)v54, (uint64_t)&v52);
      if ((swift_dynamicCast(&v51, &v52, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
      {
        object = v51._object;
        v24 = v51._countAndFlagsBits;
        if ((v47 & 1) != 0)
        {
          v26 = v11;
          v27 = v10;
          v28 = v9;
          v52 = v51;
          v29 = v44;
          static CharacterSet.urlQueryAllowed.getter();
          v30._countAndFlagsBits = 723926335;
          v30._object = (void *)0xE400000000000000;
          CharacterSet.remove(charactersIn:)(v30);
          v31 = sub_3A100();
          v32 = StringProtocol.addingPercentEncoding(withAllowedCharacters:)(v29, &type metadata for String, v31);
          v34 = v33;
          (*(void (**)(char *, uint64_t))(v45 + 8))(v29, v46);
          if (v34)
          {
            swift_bridgeObjectRelease(object);
            v24 = v32;
            object = v34;
          }
          v9 = v28;
          v10 = v27;
          v11 = v26;
        }
        if ((v48 & 1) != 0)
        {
          v52._countAndFlagsBits = AnyHashable.description.getter();
          v52._object = v35;
        }
        else
        {
          v52._countAndFlagsBits = 38;
          v52._object = (void *)0xE100000000000000;
          v36._countAndFlagsBits = AnyHashable.description.getter();
          v37 = v36._object;
          String.append(_:)(v36);
          swift_bridgeObjectRelease(v37);
        }
        v38._countAndFlagsBits = 61;
        v38._object = (void *)0xE100000000000000;
        String.append(_:)(v38);
        v39._countAndFlagsBits = v24;
        v39._object = object;
        String.append(_:)(v39);
        swift_bridgeObjectRelease(object);
        v40 = v52._object;
        String.append(_:)(v52);
        swift_bridgeObjectRelease(v40);
        sub_3789C(v54);
        result = sub_4E028((uint64_t)&v55);
        v48 = 0;
        if (v8)
          goto LABEL_6;
      }
      else
      {
        sub_3789C(v54);
        result = sub_4E028((uint64_t)&v55);
        if (v8)
          goto LABEL_6;
      }
LABEL_8:
      v15 = v50 + 1;
      if (__OFADD__(v50, 1))
      {
        __break(1u);
        goto LABEL_41;
      }
      if (v15 < v9)
      {
        v16 = *(_QWORD *)(v43 + 8 * v15);
        if (v16)
          goto LABEL_11;
        v17 = v50 + 2;
        ++v50;
        if (v15 + 1 < v9)
        {
          v16 = *(_QWORD *)(v43 + 8 * v17);
          if (v16)
            goto LABEL_14;
          v50 = v15 + 1;
          if (v15 + 2 < v9)
          {
            v16 = *(_QWORD *)(v43 + 8 * (v15 + 2));
            if (v16)
            {
              v15 += 2;
              goto LABEL_11;
            }
            v17 = v15 + 3;
            v50 = v15 + 2;
            if (v15 + 3 < v9)
              break;
          }
        }
      }
LABEL_25:
      v8 = 0;
      v58 = 0;
      memset(v57, 0, sizeof(v57));
      v55 = 0u;
      v56 = 0u;
    }
    v16 = *(_QWORD *)(v43 + 8 * v17);
    if (v16)
    {
LABEL_14:
      v15 = v17;
LABEL_11:
      v8 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v15 << 6);
      v50 = v15;
      continue;
    }
    break;
  }
  while (1)
  {
    v15 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v15 >= v9)
    {
      v50 = v42;
      goto LABEL_25;
    }
    v16 = *(_QWORD *)(v43 + 8 * v15);
    ++v17;
    if (v16)
      goto LABEL_11;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_668E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_29EF0(&qword_B98B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_6692C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_B98B8;
  if (!qword_B98B8)
  {
    v1 = objc_opt_self(NSNumber);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_B98B8);
  }
  return result;
}

_QWORD *sub_66968(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  _QWORD *result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = (_QWORD *)swift_bridgeObjectRetain(a1);
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v12 >= v6)
      goto LABEL_23;
    v13 = *(_QWORD *)(v2 + 8 * v12);
    ++v8;
    if (!v13)
    {
      v8 = v12 + 1;
      if (v12 + 1 >= v6)
        goto LABEL_23;
      v13 = *(_QWORD *)(v2 + 8 * v8);
      if (!v13)
      {
        v8 = v12 + 2;
        if (v12 + 2 >= v6)
          goto LABEL_23;
        v13 = *(_QWORD *)(v2 + 8 * v8);
        if (!v13)
        {
          v8 = v12 + 3;
          if (v12 + 3 >= v6)
            goto LABEL_23;
          v13 = *(_QWORD *)(v2 + 8 * v8);
          if (!v13)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v8 << 6);
LABEL_5:
    v11 = swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v10));
    result = (_QWORD *)sub_551D4(v11);
  }
  v14 = v12 + 4;
  if (v14 >= v6)
  {
LABEL_23:
    swift_release(a1);
    return _swiftEmptyArrayStorage;
  }
  v13 = *(_QWORD *)(v2 + 8 * v14);
  if (v13)
  {
    v8 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v8 >= v6)
      goto LABEL_23;
    v13 = *(_QWORD *)(v2 + 8 * v8);
    ++v14;
    if (v13)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t BooksLocalizerFactory.__allocating_init(package:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  sub_6AC74((uint64_t)a1 + OBJC_IVAR___JSAPackage_jetPack, v3 + OBJC_IVAR____TtC5JSApp21BooksLocalizerFactory_jetPack, type metadata accessor for BooksJetPackResourceBundle);

  return v3;
}

uint64_t BooksLocalizerFactory.init(package:)(void *a1)
{
  uint64_t v1;

  sub_6AC74((uint64_t)a1 + OBJC_IVAR___JSAPackage_jetPack, v1 + OBJC_IVAR____TtC5JSApp21BooksLocalizerFactory_jetPack, type metadata accessor for BooksJetPackResourceBundle);

  return v1;
}

uint64_t sub_66B80(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v3[62] = a2;
  v3[63] = v2;
  v3[61] = a1;
  v3[64] = *v2;
  v4 = type metadata accessor for AppleServicesLocalizer.Configuration(0);
  v3[65] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[66] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[67] = swift_task_alloc(v6);
  v3[68] = swift_task_alloc(v6);
  v7 = type metadata accessor for BagLanguageSource(0);
  v3[69] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[70] = v8;
  v3[71] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Bag(0);
  v3[72] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[73] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[74] = swift_task_alloc(v11);
  v3[75] = swift_task_alloc(v11);
  v12 = type metadata accessor for BooksBagLanguageSource(0);
  v3[76] = v12;
  v13 = (*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[77] = swift_task_alloc(v13);
  v3[78] = swift_task_alloc(v13);
  v14 = type metadata accessor for JetPackPath(0);
  v3[79] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_66CB0, 0, 0);
}

uint64_t sub_66CB0()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  __int128 **v18;
  uint64_t v20;
  uint64_t v21;
  __int128 **v22;

  v1 = *((_QWORD *)v0 + 79);
  v2 = *((_QWORD *)v0 + 63);
  v3 = sub_29EF0(&qword_B98D0);
  v4 = *(_QWORD *)(type metadata accessor for Dependency(0) - 8);
  v5 = swift_allocObject(v3, ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ 3 * *(_QWORD *)(v4 + 72), *(unsigned __int8 *)(v4 + 80) | 7);
  *(_OWORD *)(v5 + 16) = xmmword_8E2D0;
  v6 = sub_2E594(0, &qword_B98D8, AMSURLSession_ptr);
  Dependency.init<A>(satisfying:with:)(v6, sub_67E94, 0, v6);
  v7 = sub_2E594(0, &qword_B98E0, AMSProcessInfo_ptr);
  Dependency.init<A>(satisfying:with:)(v7, sub_67EA8, 0, v7);
  v8 = sub_29EF0(&qword_B98E8);
  Dependency.init<A>(satisfying:with:)(v8, sub_67EF8, 0, v8);
  *((_QWORD *)v0 + 58) = v5;
  v9 = sub_29EF0(&qword_B98F0);
  v10 = sub_67F68();
  *((_QWORD *)v0 + 80) = dispatch thunk of BaseObjectGraph.adding<A>(allDependencies:)(v0 + 29, v9, v10);
  swift_bridgeObjectRelease(v5);
  v11 = v2 + OBJC_IVAR____TtC5JSApp21BooksLocalizerFactory_jetPack;
  *((_QWORD *)v0 + 20) = type metadata accessor for BooksJetPackResourceBundle(0);
  *((_QWORD *)v0 + 21) = sub_2A1FC(&qword_B84D8, type metadata accessor for BooksJetPackResourceBundle, (uint64_t)&protocol conformance descriptor for BooksJetPackResourceBundle);
  v12 = sub_37FA8((_QWORD *)v0 + 17);
  sub_6AC74(v11, (uint64_t)v12, type metadata accessor for BooksJetPackResourceBundle);
  JetPackPath.init(_:)(0x736A2E7865646E69);
  *((_QWORD *)v0 + 15) = type metadata accessor for LocalizedStringsBundle(0);
  *((_QWORD *)v0 + 16) = &protocol witness table for LocalizedStringsBundle;
  sub_37FA8((_QWORD *)v0 + 12);
  LocalizedStringsBundle.init(resourceBundle:indexPath:)((char *)v0 + 136, v1);
  sub_378BC(v0 + 6, (uint64_t)v0 + 56);
  v13 = sub_6A7DC();
  if (v13)
  {
    v14 = v13;
    swift_bridgeObjectRetain_n(v13, 2);
    v15 = sub_66968(v14);
    swift_bridgeObjectRelease(v14);
    v16 = sub_6A748((uint64_t)v15);
    swift_bridgeObjectRelease(v15);
    v17 = sub_636BC(v16);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v14);
    *((_QWORD *)v0 + 84) = v14;
    *((_QWORD *)v0 + 83) = v17;
    v18 = (__int128 **)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
    *((_QWORD *)v0 + 85) = v18;
    *v18 = v0;
    v18[1] = (__int128 *)sub_672E0;
    return BaseObjectGraph.inject<A>(_:)(*((_QWORD *)v0 + 75), *((_QWORD *)v0 + 72), *((_QWORD *)v0 + 72));
  }
  else
  {
    v20 = *((_QWORD *)v0 + 10);
    v21 = *((_QWORD *)v0 + 11);
    sub_3FFF4((_QWORD *)v0 + 7, v20);
    v22 = (__int128 **)swift_task_alloc(async function pointer to dispatch thunk of LocalizedStringsDataSource.fetchLanguages()[1]);
    *((_QWORD *)v0 + 81) = v22;
    *v22 = v0;
    v22[1] = (__int128 *)sub_67228;
    return dispatch thunk of LocalizedStringsDataSource.fetchLanguages()(v20, v21);
  }
}

uint64_t sub_67228(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 648);
  v5 = *(_QWORD **)v2;
  v5[82] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_67778, 0, 0);
  v5[84] = 0;
  v5[83] = a1;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v5[85] = v7;
  *v7 = v5;
  v7[1] = sub_672E0;
  return BaseObjectGraph.inject<A>(_:)(v5[75], v5[72], v5[72]);
}

uint64_t sub_672E0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 680);
  *(_QWORD *)(*v1 + 688) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 672);
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 664));
    swift_bridgeObjectRelease(v4);
    v5 = sub_6782C;
  }
  else
  {
    v5 = sub_67358;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_67358()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *(_QWORD *)(v0 + 672);
  v21 = *(_QWORD *)(v0 + 664);
  v22 = *(_QWORD *)(v0 + 624);
  v1 = *(_QWORD *)(v0 + 616);
  v2 = *(_QWORD *)(v0 + 608);
  v3 = *(_QWORD *)(v0 + 600);
  v4 = *(_QWORD *)(v0 + 592);
  v5 = *(_QWORD *)(v0 + 584);
  v6 = *(_QWORD *)(v0 + 576);
  v7 = *(_QWORD *)(v0 + 568);
  v8 = *(_QWORD *)(v0 + 560);
  v20 = *(_QWORD *)(v0 + 552);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v9(v1, v3, v6);
  v9(v4, v3, v6);
  BagLanguageSource.init(bag:timeout:defaultLanguages:)(v4, 0x4000000000000000, 0, sub_6825C, 0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v1 + *(int *)(v2 + 20), v7, v20);
  v10 = *(int *)(v2 + 24);
  v11 = (_QWORD *)(v0 + 176);
  *(_QWORD *)(v1 + v10) = v21;
  sub_6AC30(v1, v22);
  sub_37824(v0 + 56, v0 + 176);
  if (v23)
  {
    v12 = *(_QWORD *)(v0 + 672);
    *(_QWORD *)(v0 + 240) = &type metadata for NativeDataSource;
    *(_QWORD *)(v0 + 248) = sub_6ABEC();
    *(_QWORD *)(v0 + 216) = v12;
    v13 = v0 + 216;
  }
  else
  {
    v12 = 0;
    v13 = v0 + 216;
    *(_QWORD *)(v0 + 248) = 0;
    *(_OWORD *)(v0 + 216) = 0u;
    *(_OWORD *)(v0 + 232) = 0u;
  }
  *(_QWORD *)(v0 + 696) = v12;
  v14 = *(_QWORD *)(v0 + 640);
  v15 = *(_QWORD *)(v0 + 624);
  v16 = *(char **)(v0 + 544);
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v0 + 608);
  *(_QWORD *)(v0 + 48) = sub_2A1FC(&qword_B9908, type metadata accessor for BooksBagLanguageSource, (uint64_t)&unk_8EB58);
  v17 = sub_37FA8((_QWORD *)(v0 + 16));
  sub_6AC74(v15, (uint64_t)v17, type metadata accessor for BooksBagLanguageSource);
  swift_bridgeObjectRetain(v12);
  sub_67FE8((uint64_t)v11, v13, v0 + 16, v14, v16);
  sub_3789C(v11);
  sub_3789C((_QWORD *)(v0 + 16));
  sub_2E618(v13, &qword_B9910);
  *(_QWORD *)(v0 + 704) = type metadata accessor for AppleServicesLocalizer(0);
  v18 = (_QWORD *)swift_task_alloc(async function pointer to static AppleServicesLocalizer.load(using:)[1]);
  *(_QWORD *)(v0 + 712) = v18;
  *v18 = v0;
  v18[1] = sub_67590;
  return static AppleServicesLocalizer.load(using:)(*(_QWORD *)(v0 + 544));
}

uint64_t sub_67590(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = (_QWORD *)*v2;
  v3[52] = v2;
  v3[53] = a1;
  v3[54] = v1;
  v4 = v3[89];
  v3[90] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_678E0;
  }
  else
  {
    swift_bridgeObjectRelease(v3[87]);
    v5 = sub_67604;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_67604()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 424);
  v2 = *(_QWORD *)(v0 + 640);
  v12 = *(_QWORD *)(v0 + 632);
  v3 = *(_QWORD *)(v0 + 624);
  v13 = *(_QWORD *)(v0 + 616);
  v14 = *(_QWORD *)(v0 + 600);
  v15 = *(_QWORD *)(v0 + 592);
  v16 = *(_QWORD *)(v0 + 568);
  v4 = *(_QWORD *)(v0 + 544);
  v17 = *(_QWORD *)(v0 + 536);
  v5 = *(_QWORD *)(v0 + 528);
  v6 = *(_QWORD *)(v0 + 520);
  v7 = *(uint64_t **)(v0 + 488);
  *(_QWORD *)(v0 + 280) = *(_QWORD *)(v0 + 704);
  *(_QWORD *)(v0 + 288) = &protocol witness table for AppleServicesLocalizer;
  *(_QWORD *)(v0 + 256) = v1;
  v8 = type metadata accessor for BooksLocalizer();
  v9 = swift_allocObject(v8, 57, 7);
  *(_BYTE *)(v9 + 56) = 1;
  sub_378BC((__int128 *)(v0 + 256), v9 + 16);
  v7[3] = v8;
  v7[4] = sub_2A1FC(&qword_B9920, (uint64_t (*)(uint64_t))type metadata accessor for BooksLocalizer, (uint64_t)&protocol conformance descriptor for BooksLocalizer);
  v10 = swift_release(v2);
  *v7 = v9;
  (*(void (**)(uint64_t, uint64_t, __n128))(v5 + 8))(v4, v6, v10);
  sub_6ACFC(v3, type metadata accessor for BooksBagLanguageSource);
  sub_3789C((_QWORD *)(v0 + 56));
  swift_task_dealloc(v12);
  swift_task_dealloc(v3);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v4);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_67778()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release(*(_QWORD *)(v0 + 640));
  sub_3789C((_QWORD *)(v0 + 56));
  v1 = *(_QWORD *)(v0 + 624);
  v2 = *(_QWORD *)(v0 + 616);
  v3 = *(_QWORD *)(v0 + 600);
  v4 = *(_QWORD *)(v0 + 592);
  v5 = *(_QWORD *)(v0 + 568);
  v6 = *(_QWORD *)(v0 + 544);
  v7 = *(_QWORD *)(v0 + 536);
  swift_task_dealloc(*(_QWORD *)(v0 + 632));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_6782C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release(*(_QWORD *)(v0 + 640));
  sub_3789C((_QWORD *)(v0 + 56));
  v1 = *(_QWORD *)(v0 + 624);
  v2 = *(_QWORD *)(v0 + 616);
  v3 = *(_QWORD *)(v0 + 600);
  v4 = *(_QWORD *)(v0 + 592);
  v5 = *(_QWORD *)(v0 + 568);
  v6 = *(_QWORD *)(v0 + 544);
  v7 = *(_QWORD *)(v0 + 536);
  swift_task_dealloc(*(_QWORD *)(v0 + 632));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_678E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  __n128 v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t *v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;

  v1 = v0 + 56;
  if (qword_B8168 != -1)
    swift_once(&qword_B8168, sub_56E10);
  v2 = *(_QWORD *)(v0 + 720);
  v3 = type metadata accessor for Logger(0);
  sub_2D6E0(v3, (uint64_t)qword_B92C0);
  swift_errorRetain(v2, v4);
  v6 = swift_errorRetain(v2, v5);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 720);
  if (v9)
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = (uint64_t *)swift_slowAlloc(8, -1);
    v13.n128_u64[0] = 138412290;
    *(_DWORD *)v11 = 138412290;
    swift_errorRetain(v10, v13);
    v14 = _swift_stdlib_bridgeErrorToNSError(v10);
    *(_QWORD *)(v0 + 472) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 472, v0 + 480, v11 + 4, v11 + 12);
    *v12 = v14;
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl(&dword_0, v7, v8, "Failed to create AppleServicesLocalizer: %@. Falling back to native language source.", v11, 0xCu);
    v15 = sub_29EF0(&qword_B84B8);
    swift_arrayDestroy(v12, 1, v15);
    v16 = v12;
    v1 = v0 + 56;
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 720));
    swift_errorRelease(v10);
  }
  v17 = *(_QWORD *)(v0 + 672);

  sub_37824(v1, v0 + 296);
  if (v17)
  {
    v18 = *(_QWORD *)(v0 + 696);
    *(_QWORD *)(v0 + 360) = &type metadata for NativeDataSource;
    *(_QWORD *)(v0 + 368) = sub_6ABEC();
    *(_QWORD *)(v0 + 336) = v18;
  }
  else
  {
    *(_QWORD *)(v0 + 368) = 0;
    *(_OWORD *)(v0 + 336) = 0u;
    *(_OWORD *)(v0 + 352) = 0u;
  }
  v19 = *(_QWORD *)(v0 + 640);
  v20 = *(char **)(v0 + 536);
  *(_QWORD *)(v0 + 400) = &type metadata for NativeLanguageSource;
  *(_QWORD *)(v0 + 408) = sub_6ACB8();
  sub_67FE8(v0 + 296, v0 + 336, v0 + 376, v19, v20);
  sub_3789C((_QWORD *)(v0 + 296));
  sub_3789C((_QWORD *)(v0 + 376));
  sub_2E618(v0 + 336, &qword_B9910);
  v21 = (_QWORD *)swift_task_alloc(async function pointer to static AppleServicesLocalizer.load(using:)[1]);
  *(_QWORD *)(v0 + 728) = v21;
  *v21 = v0;
  v21[1] = sub_67B78;
  return static AppleServicesLocalizer.load(using:)(*(_QWORD *)(v0 + 536));
}

uint64_t sub_67B78(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = (_QWORD *)*v2;
  v3[55] = v2;
  v3[56] = a1;
  v3[57] = v1;
  v4 = v3[91];
  v3[92] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_67D80;
  else
    v5 = sub_67BE4;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_67BE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 536);
  v2 = *(_QWORD *)(v0 + 528);
  v3 = *(_QWORD *)(v0 + 520);
  swift_errorRelease(*(_QWORD *)(v0 + 720));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 448);
  v5 = *(_QWORD *)(v0 + 640);
  v6 = *(_QWORD *)(v0 + 624);
  v15 = *(_QWORD *)(v0 + 632);
  v16 = *(_QWORD *)(v0 + 616);
  v17 = *(_QWORD *)(v0 + 600);
  v18 = *(_QWORD *)(v0 + 592);
  v19 = *(_QWORD *)(v0 + 568);
  v7 = *(_QWORD *)(v0 + 544);
  v20 = *(_QWORD *)(v0 + 536);
  v8 = *(_QWORD *)(v0 + 528);
  v9 = *(_QWORD *)(v0 + 520);
  v10 = *(uint64_t **)(v0 + 488);
  *(_QWORD *)(v0 + 280) = *(_QWORD *)(v0 + 704);
  *(_QWORD *)(v0 + 288) = &protocol witness table for AppleServicesLocalizer;
  *(_QWORD *)(v0 + 256) = v4;
  v11 = type metadata accessor for BooksLocalizer();
  v12 = swift_allocObject(v11, 57, 7);
  *(_BYTE *)(v12 + 56) = 1;
  sub_378BC((__int128 *)(v0 + 256), v12 + 16);
  v10[3] = v11;
  v10[4] = sub_2A1FC(&qword_B9920, (uint64_t (*)(uint64_t))type metadata accessor for BooksLocalizer, (uint64_t)&protocol conformance descriptor for BooksLocalizer);
  v13 = swift_release(v5);
  *v10 = v12;
  (*(void (**)(uint64_t, uint64_t, __n128))(v8 + 8))(v7, v9, v13);
  sub_6ACFC(v6, type metadata accessor for BooksBagLanguageSource);
  sub_3789C((_QWORD *)(v0 + 56));
  swift_task_dealloc(v15);
  swift_task_dealloc(v6);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v7);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_67D80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 720);
  v2 = *(_QWORD *)(v0 + 624);
  v3 = *(_QWORD *)(v0 + 544);
  v4 = *(_QWORD *)(v0 + 536);
  v5 = *(_QWORD *)(v0 + 528);
  v6 = *(_QWORD *)(v0 + 520);
  swift_release(*(_QWORD *)(v0 + 640));
  swift_errorRelease(v1);
  v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v7(v4, v6);
  v7(v3, v6);
  sub_6ACFC(v2, type metadata accessor for BooksBagLanguageSource);
  sub_3789C((_QWORD *)(v0 + 56));
  v8 = *(_QWORD *)(v0 + 624);
  v9 = *(_QWORD *)(v0 + 616);
  v10 = *(_QWORD *)(v0 + 600);
  v11 = *(_QWORD *)(v0 + 592);
  v12 = *(_QWORD *)(v0 + 568);
  v13 = *(_QWORD *)(v0 + 544);
  v14 = *(_QWORD *)(v0 + 536);
  swift_task_dealloc(*(_QWORD *)(v0 + 632));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for BooksBagLanguageSource(uint64_t a1)
{
  return sub_6AD54(a1, qword_B9AD8, (uint64_t)&nominal type descriptor for BooksBagLanguageSource);
}

id sub_67E94@<X0>(_QWORD *a1@<X8>)
{
  return sub_67EBC(AMSURLSession_ptr, (SEL *)&selRef_defaultSession, a1);
}

id sub_67EA8@<X0>(_QWORD *a1@<X8>)
{
  return sub_67EBC(AMSProcessInfo_ptr, (SEL *)&selRef_currentProcess, a1);
}

id sub_67EBC@<X0>(_QWORD *a1@<X0>, SEL *a2@<X1>, _QWORD *a3@<X8>)
{
  id result;

  result = objc_msgSend((id)objc_opt_self(*a1), *a2);
  *a3 = result;
  return result;
}

uint64_t sub_67EF8@<X0>(_QWORD *a1@<X8>)
{
  id v2;
  uint64_t result;

  v2 = objc_msgSend((id)objc_opt_self(ACAccountStore), "bu_sharedAccountStore");
  result = sub_2E594(0, &qword_B9B78, ACAccountStore_ptr);
  a1[3] = result;
  a1[4] = &protocol witness table for ACAccountStore;
  *a1 = v2;
  return result;
}

unint64_t sub_67F68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_B98F8;
  if (!qword_B98F8)
  {
    v1 = sub_29F30(&qword_B98F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_B98F8);
  }
  return result;
}

_QWORD *sub_67FB4(_QWORD *result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result[3] - 8);
  if ((*(_DWORD *)(v1 + 80) & 0x20000) != 0)
    return (_QWORD *)swift_slowDealloc(*result, *(_QWORD *)(v1 + 64)+ ((*(_DWORD *)(v1 + 80) + 16) & ~(unint64_t)*(_DWORD *)(v1 + 80)), *(_DWORD *)(v1 + 80) | 7);
  return result;
}

uint64_t sub_67FE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _QWORD v28[5];

  v25 = a2;
  v9 = type metadata accessor for LocalizerLookupStrategy(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AppleServicesLocalizer.Configuration(0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v24 - v17;
  v19 = a1;
  v21 = v20;
  sub_37824(v19, (uint64_t)v28);
  sub_37824(a3, (uint64_t)&v26);
  swift_retain(a4);
  AppleServicesLocalizer.Configuration.init(dataSource:languageSource:objectGraph:)(v28, &v26, a4);
  v28[3] = &type metadata for BooksLocalizerPreference;
  v28[4] = sub_6B828();
  AppleServicesLocalizer.Configuration.withClientPreferences(_:)(v28);
  v22 = *(void (**)(char *, uint64_t))(v21 + 8);
  v22(v16, v13);
  sub_2E618((uint64_t)v28, &qword_B9B60);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for LocalizerLookupStrategy.dataSourceThenNative(_:), v9);
  AppleServicesLocalizer.Configuration.withDefaultLookupStrategy(_:)(v12);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v22(v18, v13);
  sub_6B86C(v25, (uint64_t)&v26);
  if (!v27)
    return sub_2E618((uint64_t)&v26, &qword_B9910);
  sub_378BC(&v26, (uint64_t)v28);
  AppleServicesLocalizer.Configuration.withNativeStringsDataSource(_:)(v28);
  sub_3789C(v28);
  v22(a5, v13);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(a5, v18, v13);
}

uint64_t BooksLocalizerFactory.deinit()
{
  uint64_t v0;

  sub_6ACFC(v0 + OBJC_IVAR____TtC5JSApp21BooksLocalizerFactory_jetPack, type metadata accessor for BooksJetPackResourceBundle);
  return v0;
}

uint64_t BooksLocalizerFactory.__deallocating_deinit()
{
  uint64_t v0;

  sub_6ACFC(v0 + OBJC_IVAR____TtC5JSApp21BooksLocalizerFactory_jetPack, type metadata accessor for BooksJetPackResourceBundle);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_6825C()
{
  return 0;
}

uint64_t sub_68264()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1[4] = v0;
  v1[5] = type metadata accessor for BooksBagLanguageSource(0);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to BagLanguageSource.fetchLanguages()[1]);
  v1[6] = v2;
  *v2 = v1;
  v2[1] = sub_682C4;
  return BagLanguageSource.fetchLanguages()();
}

uint64_t sub_682C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*v2 + 48);
  v4 = *v2;
  *(_QWORD *)(v4 + 56) = a1;
  swift_task_dealloc(v3);
  if (v1)
    return (*(uint64_t (**)(void))(v4 + 8))();
  else
    return swift_task_switch(sub_68338, 0, 0);
}

uint64_t sub_68338()
{
  uint64_t v0;
  void *v1;
  Class isa;
  Class v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  os_log_type_t type;
  uint64_t v24;
  uint64_t v25;

  v1 = (void *)objc_opt_self(NSBundle);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v3 = Array._bridgeToObjectiveC()().super.isa;
  v4 = objc_msgSend(v1, "preferredLocalizationsFromArray:forPreferences:", isa, v3);

  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, &type metadata for String);
  if (qword_B8168 != -1)
    swift_once(&qword_B8168, sub_56E10);
  v6 = *(_QWORD *)(v0 + 56);
  v7 = type metadata accessor for Logger(0);
  sub_2D6E0(v7, (uint64_t)qword_B92C0);
  swift_bridgeObjectRetain_n(v5, 2);
  v8 = swift_bridgeObjectRetain(v6);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  v11 = os_log_type_enabled(v9, v10);
  v12 = *(_QWORD *)(v0 + 56);
  if (v11)
  {
    v13 = swift_slowAlloc(22, -1);
    v24 = swift_slowAlloc(64, -1);
    v25 = v24;
    *(_DWORD *)v13 = 136315394;
    v14 = swift_bridgeObjectRetain(v12);
    type = v10;
    v15 = Array.description.getter(v14, &type metadata for String);
    v17 = v16;
    swift_bridgeObjectRelease(v12);
    *(_QWORD *)(v0 + 16) = sub_3A180(v15, v17, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease_n(v12, 2);
    *(_WORD *)(v13 + 12) = 2080;
    v18 = swift_bridgeObjectRetain(v5);
    v19 = Array.description.getter(v18, &type metadata for String);
    v21 = v20;
    swift_bridgeObjectRelease(v5);
    *(_QWORD *)(v0 + 24) = sub_3A180(v19, v21, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease_n(v5, 2);
    _os_log_impl(&dword_0, v9, type, "BooksBagLanguageSource: languages from bag %s coerced to %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 56), 2);
    swift_bridgeObjectRelease_n(v5, 2);
  }

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
}

void sub_68624(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for Locale(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for BooksBagLanguageSource(0);
  BagLanguageSource.locale(forLanguage:)(a1, a2);
  if (qword_B8168 != -1)
    swift_once(&qword_B8168, sub_56E10);
  v10 = type metadata accessor for Logger(0);
  sub_2D6E0(v10, (uint64_t)qword_B92C0);
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v21 = v15;
    *(_DWORD *)v14 = 136315138;
    v16 = sub_2A1FC(&qword_B9B48, (uint64_t (*)(uint64_t))&type metadata accessor for Locale, (uint64_t)&protocol conformance descriptor for Locale);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v6, v16);
    v19 = v18;
    v20 = sub_3A180(v17, v18, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v19);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    _os_log_impl(&dword_0, v12, v13, "BooksBagLanguageSource: Computed locale=%s based on bag languages", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

}

uint64_t sub_68858()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_B9B54);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_6889C;
  return sub_68264();
}

uint64_t sub_6889C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*v2 + 16);
  v5 = *v2;
  v6 = swift_task_dealloc(v4);
  if (!v1)
    v6 = a1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

BOOL sub_688F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v0 = sub_29EF0(&qword_B8A90);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_B80F8 != -1)
    swift_once(&qword_B80F8, sub_44E84);
  v4 = sub_2D6E0(v0, (uint64_t)qword_B8A48);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v0);
  UserDefault.wrappedValue.getter(&v7, v0);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return (v7 & 1) == 0;
}

uint64_t sub_689CC()
{
  return LocalizerPreferences.preferredPluralCategory(forCount:in:)();
}

uint64_t sub_689E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  return swift_task_switch(sub_68A00, 0, 0);
}

uint64_t sub_68A00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  unint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int *v14;
  Swift::Int v15;
  uint64_t v17;

  if (qword_B8168 != -1)
    swift_once(&qword_B8168, sub_56E10);
  v1 = *(_QWORD *)(v0 + 40);
  v2 = type metadata accessor for Logger(0);
  sub_2D6E0(v2, (uint64_t)qword_B92C0);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 40);
  if (v6)
  {
    v8 = *(_QWORD *)(v0 + 32);
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v17 = v10;
    *(_DWORD *)v9 = 136446210;
    swift_bridgeObjectRetain(v7);
    *(_QWORD *)(v0 + 16) = sub_3A180(v8, v7, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(v7, 3);
    _os_log_impl(&dword_0, v4, v5, "Using '%{public}s' strings from JetTranslations.json", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 40), 2);
  }

  v11 = *(_QWORD *)(v0 + 40);
  v12 = *(_QWORD *)(v0 + 48);
  v14 = *(Swift::Int **)(v0 + 24);
  v13 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain(v11);
  v15 = sub_6B43C(v12, v13, v11);
  swift_bridgeObjectRelease(v11);
  v14[3] = (Swift::Int)&type metadata for NativeDataSource.NativeLocalizedStrings;
  v14[4] = sub_6B7E4();
  *v14 = v15;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_68BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  swift_bridgeObjectRetain(a2);
  v6 = sub_4CF3C(a1, a2);
  if ((v7 & 1) != 0)
  {
    v8 = (uint64_t *)(*(_QWORD *)(a3 + 56) + 16 * v6);
    v9 = *v8;
    swift_bridgeObjectRetain(v8[1]);
  }
  else
  {
    v9 = 0;
  }
  swift_bridgeObjectRelease(a2);
  return v9;
}

uint64_t sub_68C84(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_68BFC(a1, a2, *v2);
}

uint64_t sub_68C8C()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = *v0;
  return swift_task_switch(sub_68CA8, 0, 0);
}

uint64_t sub_68CA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = swift_bridgeObjectRetain(v1);
  v3 = sub_66968(v2);
  swift_bridgeObjectRelease(v1);
  v4 = sub_6A748((uint64_t)v3);
  swift_bridgeObjectRelease(v3);
  v5 = sub_636BC(v4);
  swift_bridgeObjectRelease(v4);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v5);
}

uint64_t sub_68D28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;

  v8 = *v3;
  v9 = (_QWORD *)swift_task_alloc(dword_B9B3C);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_2E488;
  v9[5] = a3;
  v9[6] = v8;
  v9[3] = a1;
  v9[4] = a2;
  return swift_task_switch(sub_68A00, 0, 0);
}

uint64_t sub_68DA0()
{
  return swift_task_switch(sub_68DB4, 0, 0);
}

uint64_t sub_68DB4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = static Locale.preferredLanguages.getter();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_68DE4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain(a2);
  return Locale.init(identifier:)(a1, a2);
}

uint64_t sub_68E24(Swift::Int *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  id v19;
  char v20;
  void *v21;
  id v22;
  Swift::Int v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  Swift::Int v32;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = a2;
    v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease(v6);

      v31 = v9;
      v10 = sub_2E594(0, &qword_B82E0, UIWindowScene_ptr);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v32, &v31, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v32;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_6926C(v7, result + 1);
    v32 = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v29 = v24 + 1;
      v30 = v8;
      sub_69460(v29);
      v25 = v32;
    }
    else
    {
      v25 = v23;
      v26 = v8;
    }
    sub_699D8((uint64_t)v8, v25);
    v28 = *v3;
    *v3 = v25;
  }
  else
  {
    v12 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain(v6);
    v13 = NSObject._rawHashValue(seed:)(v12);
    v14 = -1 << *(_BYTE *)(v6 + 32);
    v15 = v13 & ~v14;
    if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
    {
      sub_2E594(0, &qword_B82E0, UIWindowScene_ptr);
      v16 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
      v17 = static NSObject.== infix(_:_:)();

      if ((v17 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v6);
        v21 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v15);
        *a1 = (Swift::Int)v21;
        v22 = v21;
        return 0;
      }
      v18 = ~v14;
      while (1)
      {
        v15 = (v15 + 1) & v18;
        if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          break;
        v19 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
        v20 = static NSObject.== infix(_:_:)();

        if ((v20 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    sub_69A58((uint64_t)v8, v15, isUniquelyReferenced_nonNull_native);
    v28 = *v3;
    *v3 = v32;
  }
  swift_bridgeObjectRelease(v28);
  *a1 = (Swift::Int)v8;
  return 1;
}

uint64_t sub_690C0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_69BDC(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

Swift::Int sub_6926C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    sub_29EF0(&qword_B9B80);
    v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v23 = v4;
    v5 = __CocoaSet.makeIterator()(a1);
    v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      v7 = v6;
      v8 = sub_2E594(0, &qword_B82E0, UIWindowScene_ptr);
      do
      {
        v21 = v7;
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
        v4 = v23;
        v16 = *(_QWORD *)(v23 + 16);
        if (*(_QWORD *)(v23 + 24) <= v16)
        {
          sub_69460(v16 + 1);
          v4 = v23;
        }
        v9 = v22;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v11 = v4 + 56;
        v12 = -1 << *(_BYTE *)(v4 + 32);
        v13 = result & ~v12;
        v14 = v13 >> 6;
        if (((-1 << v13) & ~*(_QWORD *)(v4 + 56 + 8 * (v13 >> 6))) != 0)
        {
          v15 = __clz(__rbit64((-1 << v13) & ~*(_QWORD *)(v4 + 56 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v17 = 0;
          v18 = (unint64_t)(63 - v12) >> 6;
          do
          {
            if (++v14 == v18 && (v17 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v19 = v14 == v18;
            if (v14 == v18)
              v14 = 0;
            v17 |= v19;
            v20 = *(_QWORD *)(v11 + 8 * v14);
          }
          while (v20 == -1);
          v15 = __clz(__rbit64(~v20)) + (v14 << 6);
        }
        *(_QWORD *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = v9;
        ++*(_QWORD *)(v4 + 16);
        v7 = __CocoaSet.Iterator.next()(result);
      }
      while (v7);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v4;
}

void sub_69460(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_29EF0(&qword_B9B80);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v30 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v8 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v15 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v16 = v15 | (v13 << 6);
      }
      else
      {
        v17 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v17 >= v11)
          goto LABEL_36;
        v18 = v8[v17];
        ++v13;
        if (!v18)
        {
          v13 = v17 + 1;
          if (v17 + 1 >= v11)
            goto LABEL_36;
          v18 = v8[v13];
          if (!v18)
          {
            v13 = v17 + 2;
            if (v17 + 2 >= v11)
              goto LABEL_36;
            v18 = v8[v13];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v11)
              {
LABEL_36:
                swift_release(v3);
                v2 = v30;
                v29 = 1 << *(_BYTE *)(v3 + 32);
                if (v29 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v29;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v13 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v13 >= v11)
                    goto LABEL_36;
                  v18 = v8[v13];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v13 = v19;
            }
          }
        }
LABEL_26:
        v10 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v13 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
      v21 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = v21 & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_696FC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_29EF0(&qword_B9B68);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    swift_retain(v3);
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v17 >= v10)
          goto LABEL_36;
        v18 = v33[v17];
        ++v12;
        if (!v18)
        {
          v12 = v17 + 1;
          if (v17 + 1 >= v10)
            goto LABEL_36;
          v18 = v33[v12];
          if (!v18)
          {
            v12 = v17 + 2;
            if (v17 + 2 >= v10)
              goto LABEL_36;
            v18 = v33[v12];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v33[v19];
              if (!v18)
              {
                while (1)
                {
                  v12 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v12 >= v10)
                    goto LABEL_36;
                  v18 = v33[v12];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v12 = v19;
            }
          }
        }
LABEL_26:
        v9 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
      v21 = *v20;
      v22 = v20[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v21, v22);
      v23 = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v13 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
      *v14 = v21;
      v14[1] = v22;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

unint64_t sub_699D8(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  unint64_t result;

  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
  result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

void sub_69A58(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v4 = v3;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_14;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_69460(v9);
  }
  else
  {
    if (v8 > v7)
    {
      sub_69D74();
      goto LABEL_14;
    }
    sub_6A0CC(v9);
  }
  v10 = *v3;
  v11 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v3 + 40));
  v12 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v13 = sub_2E594(0, &qword_B82E0, UIWindowScene_ptr);
    v14 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * a2);
    v15 = static NSObject.== infix(_:_:)();

    if ((v15 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
      __break(1u);
    }
    else
    {
      v16 = ~v12;
      while (1)
      {
        a2 = (a2 + 1) & v16;
        if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v17 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * a2);
        v18 = static NSObject.== infix(_:_:)();

        if ((v18 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v19 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v19 + 48) + 8 * a2) = a1;
  v20 = *(_QWORD *)(v19 + 16);
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (v21)
    __break(1u);
  else
    *(_QWORD *)(v19 + 16) = v22;
}

void sub_69BDC(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v5 = v4;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_696FC(v11);
  }
  else
  {
    if (v10 > v9)
    {
      sub_69F1C();
      goto LABEL_22;
    }
    sub_6A344(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v29, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v29, a1, a2);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a3 = v13 & ~v14;
  v15 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v16 = *(_QWORD *)(v12 + 48);
    v17 = (_QWORD *)(v16 + 16 * a3);
    v18 = v17[1];
    v19 = *v17 == a1 && v18 == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v20 = ~v14;
      while (1)
      {
        a3 = (a3 + 1) & v20;
        if (((*(_QWORD *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v21 = (_QWORD *)(v16 + 16 * a3);
        v22 = v21[1];
        v23 = *v21 == a1 && v22 == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, a1, a2, 0) & 1) != 0)
          goto LABEL_21;
      }
    }
  }
LABEL_22:
  v24 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v25 = (_QWORD *)(*(_QWORD *)(v24 + 48) + 16 * a3);
  *v25 = a1;
  v25[1] = a2;
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v28;
}

void sub_69D74()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v1 = v0;
  sub_29EF0(&qword_B9B80);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v13)
      goto LABEL_28;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_28;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
      {
        v9 = v19 + 2;
        if (v19 + 2 >= v13)
          goto LABEL_28;
        v20 = *(_QWORD *)(v6 + 8 * v9);
        if (!v20)
          break;
      }
    }
LABEL_27:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v18 = v17;
  }
  v21 = v19 + 3;
  if (v21 >= v13)
    goto LABEL_28;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_69F1C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_29EF0(&qword_B9B68);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_6A0CC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::Int v20;
  id v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_29EF0(&qword_B9B80);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v30 = v2;
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_27;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v11)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v13;
    if (!v18)
    {
      v13 = v17 + 1;
      if (v17 + 1 >= v11)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v13);
      if (!v18)
      {
        v13 = v17 + 2;
        if (v17 + 2 >= v11)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v13);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v13 << 6);
LABEL_27:
    v20 = *(_QWORD *)(v6 + 40);
    v21 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    v22 = NSObject._rawHashValue(seed:)(v20);
    v23 = -1 << *(_BYTE *)(v6 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v25);
      }
      while (v29 == -1);
      v14 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v21;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v11)
  {
LABEL_36:
    swift_release_n(v3, 2);
    v2 = v30;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v13 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v13 >= v11)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v13);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

void sub_6A344(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_29EF0(&qword_B9B68);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  swift_retain(v3);
  v12 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v12;
    if (!v18)
    {
      v12 = v17 + 1;
      if (v17 + 1 >= v32)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v12);
      if (!v18)
      {
        v12 = v17 + 2;
        if (v17 + 2 >= v32)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v12);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_27:
    v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v21 = *v20;
    v22 = v20[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v22);
    String.hash(into:)(v33, v21, v22);
    v23 = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v13 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
    *v14 = v21;
    v14[1] = v22;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v32)
  {
LABEL_36:
    swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v12 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v12 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v12);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

uint64_t sub_6A5F0(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void **v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;

  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v13 = a1;
    else
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  }
  v4 = sub_2E594(0, &qword_B82E0, UIWindowScene_ptr);
  v5 = sub_6B8B4();
  result = Set.init(minimumCapacity:)(v3, v4, v5);
  v15 = result;
  if (v2)
  {
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = _CocoaArrayWrapper.endIndex.getter(v8);
    result = swift_bridgeObjectRelease(a1);
    if (!v7)
      return v15;
  }
  else
  {
    v7 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
    if (!v7)
      return v15;
  }
  if (v7 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v7; ++i)
      {
        v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        sub_68E24((Swift::Int *)&v14, v10);

      }
    }
    else
    {
      v11 = (void **)(a1 + 32);
      do
      {
        v12 = *v11++;
        sub_68E24((Swift::Int *)&v14, v12);

        --v7;
      }
      while (v7);
    }
    return v15;
  }
  __break(1u);
  return result;
}

uint64_t sub_6A748(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_690C0(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_6A7DC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t ObjCClassFromMetadata;
  id v12;
  NSString v13;
  NSString v14;
  id v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  Class isa;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36[4];

  v0 = sub_29EF0((uint64_t *)&unk_B8CA0);
  __chkstk_darwin(v0);
  v2 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v34 - v8;
  v10 = type metadata accessor for NativeDataSource.BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v10);
  v12 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v13 = String._bridgeToObjectiveC()();
  v14 = String._bridgeToObjectiveC()();
  v15 = objc_msgSend(v12, "URLForResource:withExtension:", v13, v14);

  if (!v15)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
    goto LABEL_5;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v15);

  v16 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
  v16(v2, v7, v3);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v2, 0, 1, v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
LABEL_5:
    sub_2E618((uint64_t)v2, (uint64_t *)&unk_B8CA0);
    goto LABEL_6;
  }
  v16(v9, v2, v3);
  v23 = Data.init(contentsOf:options:)(v9, 0);
  v25 = v24;
  v26 = (void *)objc_opt_self(NSJSONSerialization);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v36[0] = 0;
  v28 = objc_msgSend(v26, "JSONObjectWithData:options:error:", isa, 0, v36);

  v29 = v36[0];
  if (v28)
  {
    v30 = v36[0];
    _bridgeAnyObjectToAny(_:)(v36, v28);
    sub_3B6D8(v23, v25);
    swift_unknownObjectRelease(v28);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    v31 = sub_29EF0(&qword_B9B70);
    if ((swift_dynamicCast(&v35, v36, (char *)&type metadata for Any + 8, v31, 6) & 1) != 0)
      return v35;
  }
  else
  {
    v32 = v36[0];
    v33 = _convertNSErrorToError(_:)(v29);

    swift_willThrow();
    sub_3B6D8(v23, v25);
    swift_errorRelease(v33);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }
LABEL_6:
  if (qword_B8168 != -1)
    swift_once(&qword_B8168, sub_56E10);
  v17 = type metadata accessor for Logger(0);
  v18 = sub_2D6E0(v17, (uint64_t)qword_B92C0);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl(&dword_0, v19, v20, "Can't decode JetTranslations.json, ignoring bundled translations!", v21, 2u);
    swift_slowDealloc(v21, -1, -1);
  }

  return 0;
}

unint64_t sub_6ABEC()
{
  unint64_t result;

  result = qword_B9900;
  if (!qword_B9900)
  {
    result = swift_getWitnessTable(&unk_8EB88, &type metadata for NativeDataSource);
    atomic_store(result, (unint64_t *)&qword_B9900);
  }
  return result;
}

uint64_t sub_6AC30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BooksBagLanguageSource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_6AC74(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_6ACB8()
{
  unint64_t result;

  result = qword_B9918;
  if (!qword_B9918)
  {
    result = swift_getWitnessTable(&unk_8EB28, &type metadata for NativeLanguageSource);
    atomic_store(result, (unint64_t *)&qword_B9918);
  }
  return result;
}

uint64_t sub_6ACFC(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_6AD38()
{
  return type metadata accessor for BooksLocalizerFactory(0);
}

uint64_t type metadata accessor for BooksLocalizerFactory(uint64_t a1)
{
  return sub_6AD54(a1, (uint64_t *)&unk_B9950, (uint64_t)&nominal type descriptor for BooksLocalizerFactory);
}

uint64_t sub_6AD54(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_6AD88(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for BooksJetPackResourceBundle(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for BooksLocalizerFactory(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BooksLocalizerFactory);
}

uint64_t dispatch thunk of BooksLocalizerFactory.__allocating_init(package:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of BooksLocalizerFactory.storeLocalizer(asPartOf:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v6 = *(int **)(*(_QWORD *)v2 + 96);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc(v6[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_2E488;
  return v9(a1, a2);
}

uint64_t type metadata accessor for NativeDataSource.BundleFinder()
{
  return objc_opt_self(_TtCV5JSAppP33_797274DDA8844F6BAB739C8B27306A6416NativeDataSource12BundleFinder);
}

ValueMetadata *type metadata accessor for NativeLanguageSource()
{
  return &type metadata for NativeLanguageSource;
}

ValueMetadata *type metadata accessor for NativeDataSource()
{
  return &type metadata for NativeDataSource;
}

uint64_t *sub_6AEBC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for Bag(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for BagLanguageSource(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = *(uint64_t *)((char *)a2 + v12);
    *(uint64_t *)((char *)a1 + v12) = v13;
    swift_bridgeObjectRetain(v13);
  }
  return a1;
}

uint64_t sub_6AF7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for Bag(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for BagLanguageSource(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24)));
}

uint64_t sub_6AFEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for Bag(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for BagLanguageSource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = *(_QWORD *)(a2 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t sub_6B080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for Bag(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for BagLanguageSource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = *(_QWORD *)(a2 + v11);
  v13 = *(_QWORD *)(a1 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t sub_6B120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Bag(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for BagLanguageSource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_6B1B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for Bag(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for BagLanguageSource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = *(_QWORD *)(a1 + v11);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_6B248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_6B254);
}

uint64_t sub_6B254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for Bag(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for BagLanguageSource(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_6B2FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_6B308);
}

uint64_t sub_6B308(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for Bag(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for BagLanguageSource(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t sub_6B3AC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = type metadata accessor for Bag(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for BagLanguageSource(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

Swift::Int sub_6B43C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int result;
  int64_t i;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  int64_t v47;
  _QWORD v48[9];
  _QWORD *v49;

  v6 = a1 + 64;
  v5 = *(_QWORD *)(a1 + 64);
  v45 = &_swiftEmptyDictionarySingleton;
  v49 = &_swiftEmptyDictionarySingleton;
  v7 = -1 << *(_BYTE *)(a1 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & v5;
  v47 = (unint64_t)(63 - v7) >> 6;
  result = swift_bridgeObjectRetain(a1);
  i = 0;
  if (v9)
    goto LABEL_7;
LABEL_8:
  v14 = i + 1;
  if (__OFADD__(i, 1))
  {
    __break(1u);
    goto LABEL_46;
  }
  if (v14 >= v47)
    goto LABEL_44;
  v15 = *(_QWORD *)(v6 + 8 * v14);
  v16 = i + 1;
  if (!v15)
  {
    v16 = i + 2;
    if (i + 2 >= v47)
      goto LABEL_44;
    v15 = *(_QWORD *)(v6 + 8 * v16);
    if (!v15)
    {
      v16 = i + 3;
      if (i + 3 >= v47)
        goto LABEL_44;
      v15 = *(_QWORD *)(v6 + 8 * v16);
      if (!v15)
      {
        v16 = i + 4;
        if (i + 4 >= v47)
          goto LABEL_44;
        v15 = *(_QWORD *)(v6 + 8 * v16);
        if (!v15)
        {
          v17 = i + 5;
          if (i + 5 < v47)
          {
            v15 = *(_QWORD *)(v6 + 8 * v17);
            if (v15)
            {
              v16 = i + 5;
              goto LABEL_23;
            }
            while (1)
            {
              v16 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_47;
              if (v16 >= v47)
                break;
              v15 = *(_QWORD *)(v6 + 8 * v16);
              ++v17;
              if (v15)
                goto LABEL_23;
            }
          }
LABEL_44:
          sub_2E5CC(a1);
          return (Swift::Int)v45;
        }
      }
    }
  }
LABEL_23:
  v9 = (v15 - 1) & v15;
  v13 = __clz(__rbit64(v15)) + (v16 << 6);
  for (i = v16; ; v13 = v12 | (i << 6))
  {
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v20 = *v18;
    v19 = v18[1];
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v13);
    v22 = *(_QWORD *)(v21 + 16);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v21);
    if (!v22)
    {
LABEL_6:
      swift_bridgeObjectRelease(v21);
      result = swift_bridgeObjectRelease(v19);
      if (!v9)
        goto LABEL_8;
      goto LABEL_7;
    }
    swift_bridgeObjectRetain(a3);
    v23 = sub_4CF3C(a2, a3);
    if ((v24 & 1) != 0)
    {
      v28 = (uint64_t *)(*(_QWORD *)(v21 + 56) + 16 * v23);
      v43 = v28[1];
      v44 = *v28;
      swift_bridgeObjectRetain(v43);
      swift_bridgeObjectRelease(a3);
    }
    else
    {
      swift_bridgeObjectRelease(a3);
      if (!*(_QWORD *)(v21 + 16))
        goto LABEL_6;
      v25 = sub_4CF3C(0x73752D6E65, 0xE500000000000000);
      if ((v26 & 1) == 0)
        goto LABEL_6;
      v27 = (uint64_t *)(*(_QWORD *)(v21 + 56) + 16 * v25);
      v43 = v27[1];
      v44 = *v27;
      swift_bridgeObjectRetain(v43);
    }
    v29 = v45;
    v30 = v45[2];
    if (v45[3] <= v30)
    {
      sub_6607C(v30 + 1, 1);
      v29 = v49;
    }
    v45 = v29;
    Hasher.init(_seed:)(v48, v29[5]);
    String.hash(into:)(v48, v20, v19);
    result = Hasher._finalize()();
    v31 = (char *)(v45 + 8);
    v32 = -1 << *((_BYTE *)v45 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~v45[(v33 >> 6) + 8]) == 0)
      break;
    v35 = __clz(__rbit64((-1 << v33) & ~v45[(v33 >> 6) + 8])) | v33 & 0x7FFFFFFFFFFFFFC0;
LABEL_42:
    *(_QWORD *)&v31[(v35 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v35;
    v40 = 16 * v35;
    v41 = (_QWORD *)(v45[6] + v40);
    *v41 = v20;
    v41[1] = v19;
    v42 = (_QWORD *)(v45[7] + v40);
    *v42 = v44;
    v42[1] = v43;
    ++v45[2];
    result = swift_bridgeObjectRelease(v21);
    if (!v9)
      goto LABEL_8;
LABEL_7:
    v12 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
  }
  v36 = 0;
  v37 = (unint64_t)(63 - v32) >> 6;
  while (++v34 != v37 || (v36 & 1) == 0)
  {
    v38 = v34 == v37;
    if (v34 == v37)
      v34 = 0;
    v36 |= v38;
    v39 = *(_QWORD *)&v31[8 * v34];
    if (v39 != -1)
    {
      v35 = __clz(__rbit64(~v39)) + (v34 << 6);
      goto LABEL_42;
    }
  }
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

unint64_t sub_6B7E4()
{
  unint64_t result;

  result = qword_B9B40;
  if (!qword_B9B40)
  {
    result = swift_getWitnessTable(&unk_8EC28, &type metadata for NativeDataSource.NativeLocalizedStrings);
    atomic_store(result, (unint64_t *)&qword_B9B40);
  }
  return result;
}

unint64_t sub_6B828()
{
  unint64_t result;

  result = qword_B9B58;
  if (!qword_B9B58)
  {
    result = swift_getWitnessTable(&unk_8EBF8, &type metadata for BooksLocalizerPreference);
    atomic_store(result, (unint64_t *)&qword_B9B58);
  }
  return result;
}

uint64_t sub_6B86C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_29EF0(&qword_B9910);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_6B8B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_B82E8;
  if (!qword_B82E8)
  {
    v1 = sub_2E594(255, &qword_B82E0, UIWindowScene_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_B82E8);
  }
  return result;
}

ValueMetadata *type metadata accessor for BooksLocalizerPreference()
{
  return &type metadata for BooksLocalizerPreference;
}

ValueMetadata *type metadata accessor for NativeDataSource.NativeLocalizedStrings()
{
  return &type metadata for NativeDataSource.NativeLocalizedStrings;
}

uint64_t sub_6B92C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

void sub_6B938(double a1, uint64_t a2, void *a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  void *v11;
  uint64_t v12;
  _QWORD v13[5];
  uint64_t v14;

  if (a6)
  {
    v13[4] = a6;
    v14 = a7;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256;
    v13[2] = sub_2A1A8;
    v13[3] = &unk_A1F20;
    v11 = _Block_copy(v13);
    v12 = v14;
    swift_retain(a7);
    *(_QWORD *)&a1 = swift_release(v12).n128_u64[0];
  }
  else
  {
    v11 = 0;
  }
  objc_msgSend(a3, "presentViewController:animated:completion:", a4, a5 & 1, v11, a1);
  _Block_release(v11);
}

uint64_t sub_6B9F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

void _sSo16UIViewControllerC5JSAppE7present_7options8animated10completionyAB_SDys11AnyHashableVypGSbyycSgtFZ_0(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  double v16;
  unint64_t v17;
  char v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  void *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  id v40;
  void *v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  Class isa;
  id v47;
  id v48;
  id v49;
  id v50;
  unint64_t v51;
  char v52;
  id v53;
  double v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  id v59;
  id v60;
  void *v61;
  uint64_t v62;
  void *v63;
  void **aBlock;
  uint64_t v65;
  void *v66;
  void *v67;
  void (*v68)(uint64_t, double);
  uint64_t v69;
  _QWORD v70[2];
  __int128 v71;
  __int128 v72;

  strcpy((char *)v70, "preferredSize");
  HIWORD(v70[1]) = -4864;
  AnyHashable.init<A>(_:)(&aBlock, v70, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a2 + 16) && (v10 = sub_4CFA4((uint64_t)&aBlock), (v11 & 1) != 0))
  {
    sub_37EF0(*(_QWORD *)(a2 + 56) + 32 * v10, (uint64_t)&v71);
  }
  else
  {
    v71 = 0u;
    v72 = 0u;
  }
  sub_4E028((uint64_t)&aBlock);
  if (!*((_QWORD *)&v72 + 1))
  {
    sub_42ACC((uint64_t)&v71);
    goto LABEL_20;
  }
  v12 = sub_29EF0(&qword_B9B88);
  if ((swift_dynamicCast(v70, &v71, (char *)&type metadata for Any + 8, v12, 6) & 1) == 0)
  {
LABEL_20:
    v25 = a1;
    goto LABEL_21;
  }
  v13 = v70[0];
  if (!*(_QWORD *)(v70[0] + 16)
    || (v14 = sub_4CF3C(0x6874646977, 0xE500000000000000), (v15 & 1) == 0)
    || !*(_QWORD *)(v13 + 16)
    || (v16 = *(double *)(*(_QWORD *)(v13 + 56) + 8 * v14),
        v17 = sub_4CF3C(0x746867696568, 0xE600000000000000),
        (v18 & 1) == 0))
  {
    swift_bridgeObjectRelease(v13);
    goto LABEL_20;
  }
  v19 = *(double *)(*(_QWORD *)(v13 + 56) + 8 * v17);
  swift_bridgeObjectRelease(v13);
  v20 = objc_opt_self(UINavigationController);
  v21 = swift_dynamicCastObjCClass(a1, v20);
  if (!v21)
  {
    v25 = a1;
    goto LABEL_37;
  }
  v22 = (void *)v21;
  v23 = objc_allocWithZone((Class)UIViewController);
  v24 = a1;
  v25 = objc_msgSend(v23, "init");
  objc_msgSend(v25, "addChildViewController:", v22);
  v26 = objc_msgSend(v22, "view");
  if (!v26)
  {
    __break(1u);
    goto LABEL_39;
  }
  v27 = v26;
  v63 = v24;
  objc_msgSend(v26, "setAutoresizingMask:", 18);

  v28 = objc_msgSend(v22, "view");
  if (!v28)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v29 = v28;
  v30 = objc_msgSend(v25, "view");
  if (!v30)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v31 = v30;
  objc_msgSend(v30, "bounds");
  v33 = v32;
  v35 = v34;
  v37 = v36;
  v39 = v38;

  objc_msgSend(v29, "setFrame:", v33, v35, v37, v39);
  v40 = objc_msgSend(v25, "view");
  if (!v40)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v41 = v40;
  v42 = objc_msgSend(v22, "view");
  if (!v42)
  {
LABEL_42:
    __break(1u);
    return;
  }
  v43 = v42;
  objc_msgSend(v41, "addSubview:", v42);

  objc_msgSend(v22, "didMoveToParentViewController:", v25);
LABEL_37:
  objc_msgSend(v25, "setPreferredContentSize:", v16, v19);
LABEL_21:
  v44 = objc_msgSend((id)objc_opt_self(JSABridge), "sharedInstance");
  v45 = objc_msgSend(v44, "windowManager");

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v47 = objc_msgSend(v45, "windowFromOptions:", isa);

  v48 = objc_msgSend((id)objc_opt_self(UIViewController), "jsa_topMostViewControllerForWindow:", v47);
  v49 = objc_msgSend(v48, "traitCollection");
  v50 = objc_msgSend(v49, "userInterfaceStyle");

  objc_msgSend(v25, "setOverrideUserInterfaceStyle:", v50);
  v70[0] = 0xD000000000000011;
  v70[1] = 0x800000000008B0C0;
  AnyHashable.init<A>(_:)(&aBlock, v70, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a2 + 16) && (v51 = sub_4CFA4((uint64_t)&aBlock), (v52 & 1) != 0))
  {
    sub_37EF0(*(_QWORD *)(a2 + 56) + 32 * v51, (uint64_t)&v71);
  }
  else
  {
    v71 = 0u;
    v72 = 0u;
  }
  sub_4E028((uint64_t)&aBlock);
  if (*((_QWORD *)&v72 + 1))
  {
    if ((swift_dynamicCast(v70, &v71, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) != 0)
      objc_msgSend(v25, "setModalPresentationStyle:", v70[0]);
  }
  else
  {
    sub_42ACC((uint64_t)&v71);
  }
  v53 = objc_msgSend(v48, "transitionCoordinator");
  if (v53)
  {
    v55 = v53;
    v56 = swift_allocObject(&unk_A1EE0, 56, 7);
    *(_QWORD *)(v56 + 16) = v48;
    *(_QWORD *)(v56 + 24) = v25;
    *(_BYTE *)(v56 + 32) = a3 & 1;
    *(_QWORD *)(v56 + 40) = a4;
    *(_QWORD *)(v56 + 48) = a5;
    v68 = sub_6C20C;
    v69 = v56;
    aBlock = _NSConcreteStackBlock;
    v65 = 1107296256;
    v66 = sub_6B9F8;
    v67 = &unk_A1EF8;
    v57 = _Block_copy(&aBlock);
    v58 = v69;
    v59 = v48;
    sub_2A1EC(a4, a5);
    v60 = v25;
    objc_msgSend(v55, "animateAlongsideTransition:completion:", 0, v57, swift_release(v58).n128_f64[0]);

    _Block_release(v57);
    swift_unknownObjectRelease(v55);
    v25 = v47;
  }
  else
  {
    if (a4)
    {
      v68 = (void (*)(uint64_t, double))a4;
      v69 = a5;
      aBlock = _NSConcreteStackBlock;
      v65 = 1107296256;
      v66 = sub_2A1A8;
      v67 = &unk_A1EA8;
      v61 = _Block_copy(&aBlock);
      v62 = v69;
      swift_retain(a5);
      *(_QWORD *)&v54 = swift_release(v62).n128_u64[0];
    }
    else
    {
      v61 = 0;
    }
    objc_msgSend(v48, "presentViewController:animated:completion:", v25, a3 & 1, v61, v54);

    _Block_release(v61);
  }

}

uint64_t sub_6C188()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_6C1AC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_6C1B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_6C1C8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_6C1D0()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_6C20C(uint64_t a1, double a2)
{
  uint64_t v2;

  sub_6B938(a2, a1, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

Swift::Void __swiftcall JSABridge.enqueueValueCall(_:arguments:f:l:)(JSValue _, Swift::OpaquePointer_optional arguments, Swift::String f, Swift::Int l)
{
  void *v4;
  void *object;
  NSArray v7;
  id v8;

  object = f._object;
  if (arguments.value._rawValue)
    v7.super.isa = Array._bridgeToObjectiveC()().super.isa;
  else
    v7.super.isa = 0;
  v8 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "enqueueValueCall:arguments:file:line:", _.super.isa, v7.super.isa, v8, object);

}

void JSABridge.enqueueBlockPrefersSync(_:f:l:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v8;
  uint64_t v9;
  NSString v10;
  _QWORD v11[5];
  uint64_t v12;

  v11[4] = a1;
  v12 = a2;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_6C39C;
  v11[3] = &unk_A1F48;
  v8 = _Block_copy(v11);
  v9 = v12;
  swift_retain(a2);
  swift_release(v9);
  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "enqueueBlockPrefersSync:file:line:", v8, v10, a5);

  _Block_release(v8);
}

void sub_6C39C(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

uint64_t sub_6C3EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_6C3FC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_6C43C()
{
  char *v0;
  CGFloat v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  double MinY;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  objc_super v12;
  CGRect v13;
  CGRect v14;
  CGRect v15;
  CGRect v16;
  CGRect v17;

  v12.receiver = v0;
  v12.super_class = (Class)type metadata accessor for FigaroSummaryCell();
  objc_msgSendSuper2(&v12, "layoutSubviews");
  objc_msgSend(v0, "frame");
  v1 = CGRectGetWidth(v13) + -60.0;
  v2 = OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_iconImageView;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_iconImageView], "setFrame:", 20.0, 15.0, 30.0, 30.0);
  v3 = OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_eventNameLabel;
  v4 = *(void **)&v0[v2];
  v5 = *(id *)&v0[OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_eventNameLabel];
  objc_msgSend(v4, "frame");
  MinY = CGRectGetMinY(v14);
  objc_msgSend(*(id *)&v0[v2], "frame");
  objc_msgSend(v5, "setFrame:", 60.0, MinY, v1, CGRectGetHeight(v15));

  v7 = OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_pageTypeLabel;
  v8 = *(void **)&v0[v3];
  v9 = *(id *)&v0[OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_pageTypeLabel];
  objc_msgSend(v8, "frame");
  objc_msgSend(v9, "setFrame:", 60.0, CGRectGetMaxY(v16) + 2.5, v1, 15.0);

  v10 = *(void **)&v0[v7];
  v11 = *(id *)&v0[OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_pageIdLabel];
  objc_msgSend(v10, "frame");
  objc_msgSend(v11, "setFrame:", 60.0, CGRectGetMaxY(v17) + 2.5, v1, 15.0);

}

void sub_6C610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  const char *v7;
  BOOL v8;
  unint64_t v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  char v13;
  id v14;
  NSString v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  NSString v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  Swift::String v27;
  NSString v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  Swift::String v34;
  id v35;

  v1 = v0;
  v2 = OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_figaroEvent;
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_figaroEvent);
  if (!v3)
    goto LABEL_62;
  v5 = *(_QWORD *)(v3 + 16);
  v4 = *(_QWORD *)(v3 + 24);
  swift_bridgeObjectRetain(v4);
  if (!v4)
    goto LABEL_62;
  v6 = v5 == 0x746E756F636361 && v4 == 0xE700000000000000;
  if (!v6
    && (_stringCompareWithSmolCheck(_:_:expecting:)(0x746E756F636361, 0xE700000000000000, v5, v4, 0) & 1) == 0)
  {
    v8 = v5 == 0x636E75614C707061 && v4 == 0xE900000000000068;
    if (v8
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x636E75614C707061, 0xE900000000000068, v5, v4, 0) & 1) != 0)
    {
      swift_bridgeObjectRelease(v4);
      v9 = 0xEA00000000006C6CLL;
      goto LABEL_64;
    }
    v10 = v5 == 0x6B63696C63 && v4 == 0xE500000000000000;
    if (v10
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6B63696C63, 0xE500000000000000, v5, v4, 0) & 1) != 0)
    {
      swift_bridgeObjectRelease(v4);
      v7 = "hand.point.right.fill";
      goto LABEL_63;
    }
    v11 = v5 == 0x676F6C616964 && v4 == 0xE600000000000000;
    if (v11
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x676F6C616964, 0xE600000000000000, v5, v4, 0) & 1) != 0)
    {
      swift_bridgeObjectRelease(v4);
      v7 = "exclamationmark.shield.fill";
      goto LABEL_63;
    }
    v12 = v5 == 0x44646E4167617264 && v4 == 0xEB00000000706F72;
    if (v12
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x44646E4167617264, 0xEB00000000706F72, v5, v4, 0) & 1) != 0)
    {
      swift_bridgeObjectRelease(v4);
      v9 = 0xEE006C6C69662E77;
      goto LABEL_64;
    }
    if (v5 == 0x7265746E65 && v4 == 0xE500000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x7265746E65, 0xE500000000000000, v5, v4, 0) & 1) != 0)
    {
      swift_bridgeObjectRelease(v4);
      v7 = "hand.thumbsup.fill";
      goto LABEL_63;
    }
    if (v5 == 1953069157 && v4 == 0xE400000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(1953069157, 0xE400000000000000, v5, v4, 0) & 1) != 0)
    {
      swift_bridgeObjectRelease(v4);
      v7 = "hand.thumbsdown.fill";
      goto LABEL_63;
    }
    if (v5 == 0x6973736572706D69 && v4 == 0xEB00000000736E6FLL
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6973736572706D69, 0xEB00000000736E6FLL, v5, v4, 0) & 1) != 0)
    {
      swift_bridgeObjectRelease(v4);
      v9 = 0xEA00000000007365;
      goto LABEL_64;
    }
    if (v5 == 0x616964656DLL && v4 == 0xE500000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x616964656DLL, 0xE500000000000000, v5, v4, 0) & 1) != 0)
    {
      swift_bridgeObjectRelease(v4);
      v9 = 0xE90000000000006CLL;
      goto LABEL_64;
    }
    if (v5 == 1701273968 && v4 == 0xE400000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(1701273968, 0xE400000000000000, v5, v4, 0) & 1) != 0)
    {
      swift_bridgeObjectRelease(v4);
      v7 = "viewfinder.circle.fill";
      goto LABEL_63;
    }
    if (v5 == 0x646E655265676170 && v4 == 0xEA00000000007265
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x646E655265676170, 0xEA00000000007265, v5, v4, 0) & 1) != 0)
    {
      swift_bridgeObjectRelease(v4);
      v7 = "hourglass.tophalf.fill";
      goto LABEL_63;
    }
    if (v5 == 0x686372616573 && v4 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease(0xE600000000000000);
LABEL_61:
      v7 = "magnifyingglass.circle.fill";
      goto LABEL_63;
    }
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0x686372616573, 0xE600000000000000, v5, v4, 0);
    swift_bridgeObjectRelease(v4);
    if ((v13 & 1) != 0)
      goto LABEL_61;
LABEL_62:
    v7 = "questionmark.diamond.fill";
    goto LABEL_63;
  }
  swift_bridgeObjectRelease(v4);
  v7 = "person.crop.circle.fill";
LABEL_63:
  v9 = (unint64_t)(v7 - 32) | 0x8000000000000000;
LABEL_64:
  v14 = *(id *)(v1 + OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_iconImageView);
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  v16 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v15);

  objc_msgSend(v14, "setImage:", v16);
  v17 = *(_QWORD *)(v1 + v2);
  if (v17)
  {
    swift_retain(*(_QWORD *)(v1 + v2));
    sub_5BE20();
    v19 = v18;
    swift_release(v17);
    v20 = *(id *)(v1 + OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_eventNameLabel);
    v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v19);
  }
  else
  {
    v20 = *(id *)(v1 + OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_eventNameLabel);
    v21 = String._bridgeToObjectiveC()();
  }
  objc_msgSend(v20, "setText:", v21);

  v22 = *(_QWORD *)(v1 + v2);
  if (v22 && (swift_retain(*(_QWORD *)(v1 + v2)), v23 = sub_5BF34(), v25 = v24, swift_release(v22), v25))
  {
    v26 = *(id *)(v1 + OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_pageTypeLabel);
    v27._countAndFlagsBits = v23;
    v27._object = v25;
    String.append(_:)(v27);
    swift_bridgeObjectRelease(v25);
    v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(0xEB00000000203A65);
  }
  else
  {
    v26 = *(id *)(v1 + OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_pageTypeLabel);
    v28 = String._bridgeToObjectiveC()();
  }
  objc_msgSend(v26, "setText:", v28);

  v29 = *(_QWORD *)(v1 + v2);
  if (v29 && (swift_retain(*(_QWORD *)(v1 + v2)), v30 = sub_5BF4C(), v32 = v31, swift_release(v29), v32))
  {
    v33 = *(id *)(v1 + OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_pageIdLabel);
    v34._countAndFlagsBits = v30;
    v34._object = v32;
    String.append(_:)(v34);
    swift_bridgeObjectRelease(v32);
    v35 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(0xE900000000000020);
    objc_msgSend(v33, "setText:", v35);
  }
  else
  {
    v33 = *(id *)(v1 + OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_pageIdLabel);
    v35 = String._bridgeToObjectiveC()();
    objc_msgSend(v33, "setText:", v35);
  }

}

id sub_6CE9C()
{
  return sub_3E6B4(type metadata accessor for FigaroSummaryCell);
}

id FigaroSummaryViewController.init()()
{
  void *v0;
  uint64_t v1;
  char *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  Class isa;
  id v10;
  id v11;
  objc_super v13;
  _BYTE v14[24];

  v1 = qword_B81A8;
  v2 = v0;
  if (v1 != -1)
    swift_once(&qword_B81A8, sub_5CDE4);
  v3 = (uint64_t *)(qword_B94B0 + OBJC_IVAR___JSAMetricsController_experienceEvents);
  swift_beginAccess(qword_B94B0 + OBJC_IVAR___JSAMetricsController_experienceEvents, v14, 0, 0);
  v4 = *v3;
  *(_QWORD *)&v2[OBJC_IVAR___JSAFigaroSummaryViewController_experienceEvents] = *v3;
  swift_bridgeObjectRetain(v4);
  v5 = sub_60418();
  *(_QWORD *)&v2[OBJC_IVAR___JSAFigaroSummaryViewController_performanceEvents] = v5;
  v6 = sub_29EF0(&qword_B86C0);
  v7 = swift_allocObject(v6, 96, 7);
  *(_OWORD *)(v7 + 16) = xmmword_8E270;
  *(_QWORD *)(v7 + 32) = 0x6E65697265707845;
  *(_QWORD *)(v7 + 40) = 0xEA00000000006563;
  *(_QWORD *)(v7 + 88) = &type metadata for String;
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 64) = 0x616D726F66726550;
  *(_QWORD *)(v7 + 72) = 0xEB0000000065636ELL;
  v8 = objc_allocWithZone((Class)UISegmentedControl);
  swift_bridgeObjectRetain(v5);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v7);
  v10 = objc_msgSend(v8, "initWithItems:", isa);

  *(_QWORD *)&v2[OBJC_IVAR___JSAFigaroSummaryViewController_segmentedControl] = v10;
  v11 = objc_msgSend(objc_allocWithZone((Class)UIToolbar), "init");
  *(_QWORD *)&v2[OBJC_IVAR___JSAFigaroSummaryViewController_toolbar] = v11;

  v13.receiver = v2;
  v13.super_class = (Class)type metadata accessor for FigaroSummaryViewController();
  return objc_msgSendSuper2(&v13, "initWithStyle:", 0);
}

void sub_6D14C()
{
  void *v0;
  void *v1;
  objc_class *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  NSString v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSString v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _UNKNOWN **v21;
  id v22;
  char **v23;
  id v24;
  char *v25;
  NSString v26;
  _QWORD *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, objc_class *);
  id v35;
  uint64_t v36;
  uint64_t v37;
  Class isa;
  void *v39;
  void *v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  Class v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t ObjCClassFromMetadata;
  NSString v49;
  _QWORD v50[3];
  objc_class *v51;
  objc_super v52;

  v1 = v0;
  v2 = (objc_class *)type metadata accessor for FigaroSummaryViewController();
  v52.receiver = v0;
  v52.super_class = v2;
  objc_msgSendSuper2(&v52, "viewDidLoad");
  v3 = objc_msgSend(v0, "tableView");
  if (!v3)
  {
    __break(1u);
    goto LABEL_13;
  }
  v4 = v3;
  objc_msgSend(v3, "setAllowsSelectionDuringEditing:", 0);

  v5 = objc_msgSend(v1, "tableView");
  if (!v5)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v6 = v5;
  objc_msgSend(v5, "setAllowsMultipleSelectionDuringEditing:", 1);

  v7 = objc_msgSend(v1, "tableView");
  if (!v7)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = v7;
  objc_msgSend(v7, "setRowHeight:", 95.0);

  v9 = objc_msgSend(v1, "navigationItem");
  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v9, "setTitle:", v10);

  v11 = objc_msgSend(v1, "navigationItem");
  v12 = sub_29EF0(&qword_B96F8);
  v13 = swift_allocObject(v12, 48, 7);
  *(_OWORD *)(v13 + 16) = xmmword_8EC50;
  v51 = v2;
  v50[0] = v1;
  v14 = v1;
  v15 = String._bridgeToObjectiveC()();
  if (v2)
  {
    v16 = sub_3FFF4(v50, (uint64_t)v2);
    v17 = *((_QWORD *)v2 - 1);
    __chkstk_darwin(v16);
    v19 = (char *)v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v17 + 16))(v19);
    v20 = _bridgeAnythingToObjectiveC<A>(_:)(v19, v2);
    (*(void (**)(char *, objc_class *))(v17 + 8))(v19, v2);
    sub_3789C(v50);
  }
  else
  {
    v20 = 0;
  }
  v21 = &JSGlobalContextSetUnhandledRejectionCallback_ptr;
  v22 = objc_allocWithZone((Class)UIBarButtonItem);
  v23 = &selRef_pushViewController_animated_;
  v24 = objc_msgSend(v22, "initWithTitle:style:target:action:", v15, 0, v20, "infoTapped:", v50[0]);

  swift_unknownObjectRelease(v20);
  *(_QWORD *)(v13 + 32) = v24;
  v51 = v2;
  v50[0] = v14;
  v25 = (char *)v14;
  v26 = String._bridgeToObjectiveC()();
  if (v2)
  {
    v27 = sub_3FFF4(v50, (uint64_t)v2);
    v28 = v11;
    v29 = v12;
    v30 = *((_QWORD *)v2 - 1);
    __chkstk_darwin(v27);
    v32 = (char *)v50 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v30 + 16))(v32);
    v33 = _bridgeAnythingToObjectiveC<A>(_:)(v32, v2);
    v34 = *(void (**)(char *, objc_class *))(v30 + 8);
    v12 = v29;
    v11 = v28;
    v21 = &JSGlobalContextSetUnhandledRejectionCallback_ptr;
    v34(v32, v2);
    v23 = &selRef_pushViewController_animated_;
    sub_3789C(v50);
  }
  else
  {
    v33 = 0;
  }
  v35 = objc_msgSend(objc_allocWithZone((Class)v21[129]), v23[32], v26, 0, v33, "trashTapped:");

  v36 = swift_unknownObjectRelease(v33);
  *(_QWORD *)(v13 + 40) = v35;
  v50[0] = v13;
  specialized Array._endMutation()(v36);
  v37 = v50[0];
  sub_6DECC();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v37);
  objc_msgSend(v11, "setRightBarButtonItems:", isa);

  v39 = *(void **)&v25[OBJC_IVAR___JSAFigaroSummaryViewController_segmentedControl];
  objc_msgSend(v39, "setSelectedSegmentIndex:", 0);
  objc_msgSend(v39, "addTarget:action:forControlEvents:", v25, "valueChanged:", 4096);
  v40 = *(void **)&v25[OBJC_IVAR___JSAFigaroSummaryViewController_toolbar];
  v41 = swift_allocObject(v12, 40, 7);
  *(_OWORD *)(v41 + 16) = xmmword_8E6F0;
  v42 = objc_msgSend(objc_allocWithZone((Class)v21[129]), "initWithCustomView:", v39);
  *(_QWORD *)(v41 + 32) = v42;
  v50[0] = v41;
  specialized Array._endMutation()(v42);
  v43 = v50[0];
  v44 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v43);
  objc_msgSend(v40, "setItems:", v44);

  objc_msgSend(v40, "sizeToFit");
  v45 = objc_msgSend(v25, "tableView");
  if (v45)
  {
    v46 = v45;
    v47 = type metadata accessor for FigaroSummaryCell();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v47);
    v49 = String._bridgeToObjectiveC()();
    objc_msgSend(v46, "registerClass:forCellReuseIdentifier:", ObjCClassFromMetadata, v49);

    return;
  }
LABEL_15:
  __break(1u);
}

unint64_t sub_6D888(void *a1)
{
  uint64_t v1;
  NSString v3;
  Class isa;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  uint64_t v16;
  uint64_t v17;

  v3 = String._bridgeToObjectiveC()();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v5 = objc_msgSend(a1, "dequeueReusableCellWithIdentifier:forIndexPath:", v3, isa);

  v6 = type metadata accessor for FigaroSummaryCell();
  v7 = swift_dynamicCastClass(v5, v6);
  if (!v7)
    return (unint64_t)v5;
  v8 = v7;
  v9 = *(void **)(v1 + OBJC_IVAR___JSAFigaroSummaryViewController_segmentedControl);
  v10 = v5;
  v11 = objc_msgSend(v9, "selectedSegmentIndex");
  v12 = &OBJC_IVAR___JSAFigaroSummaryViewController_experienceEvents;
  if (v11)
    v12 = &OBJC_IVAR___JSAFigaroSummaryViewController_performanceEvents;
  v13 = *(_QWORD *)(v1 + *v12);
  v14 = swift_bridgeObjectRetain(v13);
  result = IndexPath.row.getter(v14);
  if ((v13 & 0xC000000000000001) != 0)
  {
    v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(result, v13);
    goto LABEL_8;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)((char *)&dword_10 + (v13 & 0xFFFFFFFFFFFFF8)))
  {
    v16 = *(_QWORD *)(v13 + 8 * result + 32);
    swift_retain(v16);
LABEL_8:
    swift_bridgeObjectRelease(v13);
    v17 = *(_QWORD *)(v8 + OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_figaroEvent);
    *(_QWORD *)(v8 + OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_figaroEvent) = v16;
    swift_retain(v16);
    swift_release(v17);
    sub_6C610();

    swift_release(v16);
    return v8;
  }
  __break(1u);
  return result;
}

void sub_6DAB8(void *a1)
{
  char *v1;
  Class isa;
  id v4;
  uint64_t *v5;
  uint64_t v6;
  id v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  id v12;

  if ((objc_msgSend(a1, "isEditing") & 1) == 0)
  {
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    objc_msgSend(a1, "deselectRowAtIndexPath:animated:", isa, 1);

    v4 = objc_msgSend(*(id *)&v1[OBJC_IVAR___JSAFigaroSummaryViewController_segmentedControl], "selectedSegmentIndex");
    v5 = &OBJC_IVAR___JSAFigaroSummaryViewController_experienceEvents;
    if (v4)
      v5 = &OBJC_IVAR___JSAFigaroSummaryViewController_performanceEvents;
    v6 = *(_QWORD *)&v1[*v5];
    swift_bridgeObjectRetain(v6);
    v7 = objc_msgSend(v1, "navigationController");
    if (v7)
    {
      v8 = v7;
      v9 = IndexPath.row.getter(v7);
      if ((v6 & 0xC000000000000001) != 0)
      {
        v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v6);
        goto LABEL_9;
      }
      if ((v9 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v9 < *(_QWORD *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFF8)))
      {
        v10 = *(_QWORD *)(v6 + 8 * v9 + 32);
        swift_retain(v10);
LABEL_9:
        swift_bridgeObjectRelease(v6);
        v11 = objc_allocWithZone((Class)type metadata accessor for FigaroEventViewController());
        v12 = sub_59100(v10);
        objc_msgSend(v8, "pushViewController:animated:", v12, 1, swift_release(v10).n128_f64[0]);

        return;
      }
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease(v6);
    }
  }
}

id FigaroSummaryViewController.__allocating_init(style:)(uint64_t a1)
{
  objc_class *v1;

  return objc_msgSend(objc_allocWithZone(v1), "initWithStyle:", a1);
}

void FigaroSummaryViewController.init(style:)()
{
  _swift_stdlib_reportUnimplementedInitializer("JSApp.FigaroSummaryViewController", 33, "init(style:)", 12, 0);
  __break(1u);
}

id FigaroSummaryViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  objc_class *v4;
  NSString v7;
  id v8;

  v4 = v3;
  if (a2)
  {
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v7 = 0;
  }
  v8 = objc_msgSend(objc_allocWithZone(v4), "initWithNibName:bundle:", v7, a3);

  return v8;
}

void FigaroSummaryViewController.init(nibName:bundle:)()
{
  _swift_stdlib_reportUnimplementedInitializer("JSApp.FigaroSummaryViewController", 33, "init(nibName:bundle:)", 21, 0);
  __break(1u);
}

id FigaroSummaryViewController.__deallocating_deinit()
{
  return sub_3E6B4(type metadata accessor for FigaroSummaryViewController);
}

uint64_t type metadata accessor for FigaroSummaryViewController()
{
  return objc_opt_self(JSAFigaroSummaryViewController);
}

unint64_t sub_6DECC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_B9BB0;
  if (!qword_B9BB0)
  {
    v1 = objc_opt_self(UIBarButtonItem);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_B9BB0);
  }
  return result;
}

uint64_t type metadata accessor for FigaroSummaryCell()
{
  return objc_opt_self(_TtC5JSApp17FigaroSummaryCell);
}

char *sub_6DF28(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v4;
  id v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSString v10;
  char *v11;
  uint64_t v12;
  void *v13;
  char *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  objc_super v37;

  *(_QWORD *)&v2[OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_figaroEvent] = 0;
  v4 = OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_iconImageView;
  v5 = objc_allocWithZone((Class)UIImageView);
  v6 = v2;
  *(_QWORD *)&v2[v4] = objc_msgSend(v5, "init");
  v7 = OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_eventNameLabel;
  *(_QWORD *)&v6[v7] = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v8 = OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_pageTypeLabel;
  *(_QWORD *)&v6[v8] = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v9 = OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_pageIdLabel;
  *(_QWORD *)&v6[v9] = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");

  if (a2)
  {
    v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v10 = 0;
  }
  v37.receiver = v6;
  v37.super_class = (Class)type metadata accessor for FigaroSummaryCell();
  v11 = (char *)objc_msgSendSuper2(&v37, "initWithStyle:reuseIdentifier:", 0, v10);

  v12 = OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_iconImageView;
  v13 = *(void **)&v11[OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_iconImageView];
  v14 = v11;
  objc_msgSend(v13, "setContentMode:", 1);
  v15 = *(void **)&v11[v12];
  v16 = (void *)objc_opt_self(UIColor);
  v17 = v15;
  v18 = objc_msgSend(v16, "labelColor");
  objc_msgSend(v17, "setTintColor:", v18);

  v19 = OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_eventNameLabel;
  v20 = *(void **)&v14[OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_eventNameLabel];
  v21 = (void *)objc_opt_self(UIFont);
  v22 = v20;
  v23 = objc_msgSend(v21, "boldSystemFontOfSize:", 20.0);
  objc_msgSend(v22, "setFont:", v23);

  v24 = OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_pageTypeLabel;
  v25 = *(id *)&v14[OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_pageTypeLabel];
  v26 = objc_msgSend(v21, "systemFontOfSize:", 13.0);
  objc_msgSend(v25, "setFont:", v26);

  v27 = OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_pageIdLabel;
  v28 = *(id *)&v14[OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_pageIdLabel];
  v29 = objc_msgSend(v21, "systemFontOfSize:", 13.0);
  objc_msgSend(v28, "setFont:", v29);

  v30 = *(_QWORD *)&v14[OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_figaroEvent];
  *(_QWORD *)&v14[OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_figaroEvent] = 0;
  v31 = objc_msgSend(v14, "contentView", swift_release(v30).n128_f64[0]);
  objc_msgSend(v31, "addSubview:", *(_QWORD *)&v11[v12]);

  v32 = objc_msgSend(v14, "contentView");
  objc_msgSend(v32, "addSubview:", *(_QWORD *)&v14[v19]);

  v33 = objc_msgSend(v14, "contentView");
  objc_msgSend(v33, "addSubview:", *(_QWORD *)&v14[v24]);

  v34 = objc_msgSend(v14, "contentView");
  v35 = *(id *)&v14[v27];
  objc_msgSend(v34, "addSubview:", v35);

  return v14;
}

void sub_6E294()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)&v0[OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_figaroEvent] = 0;
  v1 = OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_iconImageView;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");
  v2 = OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_eventNameLabel;
  *(_QWORD *)&v0[v2] = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v3 = OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_pageTypeLabel;
  *(_QWORD *)&v0[v3] = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v4 = OBJC_IVAR____TtC5JSApp17FigaroSummaryCell_pageIdLabel;
  *(_QWORD *)&v0[v4] = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000000089230, "JSApp/FigaroSummaryViewController.swift", 39, 2, 105, 0);
  __break(1u);
}

void sub_6E380()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  id v5;

  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", v1, v2, 1);

  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend((id)objc_opt_self(UIAlertAction), "actionWithTitle:style:handler:", v3, 0, 0);

  objc_msgSend(v5, "addAction:", v4);
  objc_msgSend(v0, "present::", v5, 1);

}

void sub_6E4A0()
{
  char *v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  _BYTE v7[24];

  if (objc_msgSend(*(id *)&v0[OBJC_IVAR___JSAFigaroSummaryViewController_segmentedControl], "selectedSegmentIndex"))
  {
    if (qword_B81A8 != -1)
      swift_once(&qword_B81A8, sub_5CDE4);
    v1 = (uint64_t *)(qword_B94B0 + OBJC_IVAR___JSAMetricsController__performanceEvents);
    swift_beginAccess(qword_B94B0 + OBJC_IVAR___JSAMetricsController__performanceEvents, v7, 1, 0);
    v2 = &OBJC_IVAR___JSAFigaroSummaryViewController_performanceEvents;
  }
  else
  {
    if (qword_B81A8 != -1)
      swift_once(&qword_B81A8, sub_5CDE4);
    v1 = (uint64_t *)(qword_B94B0 + OBJC_IVAR___JSAMetricsController_experienceEvents);
    swift_beginAccess(qword_B94B0 + OBJC_IVAR___JSAMetricsController_experienceEvents, v7, 1, 0);
    v2 = &OBJC_IVAR___JSAFigaroSummaryViewController_experienceEvents;
  }
  v3 = *v1;
  *v1 = (uint64_t)_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v3);
  v4 = *(_QWORD *)&v0[*v2];
  *(_QWORD *)&v0[*v2] = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v4);
  v5 = objc_msgSend(v0, "tableView");
  if (v5)
  {
    v6 = v5;
    objc_msgSend(v5, "reloadData");

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_6E5E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  if (objc_msgSend(*(id *)(v0 + OBJC_IVAR___JSAFigaroSummaryViewController_segmentedControl), "selectedSegmentIndex"))
    v1 = OBJC_IVAR___JSAFigaroSummaryViewController_performanceEvents;
  else
    v1 = OBJC_IVAR___JSAFigaroSummaryViewController_experienceEvents;
  v2 = *(_QWORD *)(v0 + v1);
  if (!((unint64_t)v2 >> 62))
    return *(_QWORD *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8));
  if (v2 < 0)
    v4 = *(_QWORD *)(v0 + v1);
  else
    v4 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v2);
  v5 = _CocoaArrayWrapper.endIndex.getter(v4);
  swift_bridgeObjectRelease(v2);
  return v5;
}

uint64_t method lookup function for FigaroSummaryViewController(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for FigaroSummaryViewController);
}

uint64_t type metadata accessor for BundleFinder()
{
  return objc_opt_self(_TtC5JSAppP33_D5191EA8D7B8FE3CF969E80B4E4716D412BundleFinder);
}

Swift::String_optional __swiftcall NSFileManager.pathForCacheDirectory(with:)(Swift::String with)
{
  void *v1;
  void *v2;
  void *object;
  void *countAndFlagsBits;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  NSArray *v12;
  _QWORD *v13;
  id v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  NSString v21;
  unsigned __int8 v22;
  NSString v23;
  unsigned int v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  Swift::String_optional result;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  id v35[2];
  char v36[24];
  _QWORD v37[3];

  v2 = v1;
  object = with._object;
  countAndFlagsBits = (void *)with._countAndFlagsBits;
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_B8118 != -1)
    swift_once(&qword_B8118, sub_508AC);
  v9 = *(_QWORD *)(qword_B8EF0 + OBJC_IVAR___JSAProcessEnvironment__variant);
  if (v9 == 2)
  {
    v12 = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, 1uLL, 1);
    v13 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, &type metadata for String);

    if (!v13[2])
    {
      swift_bridgeObjectRelease(v13);
      goto LABEL_21;
    }
    v10 = v13[4];
    v11 = v13[5];
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    v10 = 0xD000000000000025;
    if (v9 == 1)
      goto LABEL_12;
    if (v9)
    {
      v37[0] = *(_QWORD *)(qword_B8EF0 + OBJC_IVAR___JSAProcessEnvironment__variant);
      v29 = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for ProcessEnvironmentVariant, v37, &type metadata for ProcessEnvironmentVariant, &type metadata for Int);
      __break(1u);
      goto LABEL_24;
    }
    if (qword_B8138 != -1)
      swift_once(&qword_B8138, sub_54A50);
    swift_beginAccess(&byte_B9200, v37, 0, 0);
    if ((byte_B9200 & 1) != 0)
      goto LABEL_12;
    if (qword_B8140 != -1)
      swift_once(&qword_B8140, sub_54C84);
    swift_beginAccess(&byte_B9201, v36, 0, 0);
    if ((byte_B9201 & 1) != 0)
    {
LABEL_12:
      v11 = 0x800000000008A250;
    }
    else
    {
      v14 = objc_msgSend((id)objc_opt_self(BUAppGroup), "books");
      v15 = objc_msgSend(v14, "containerURL");

      static URL._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v10 = URL.path.getter(v16);
      v11 = v17;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
  v35[0] = countAndFlagsBits;
  v35[1] = object;
  v33 = v10;
  v34 = v11;
  swift_bridgeObjectRetain(v11);
  v33 = String.init<A>(_:)(&v33, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v34 = v18;
  String.append<A>(contentsOf:)(v35, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v11);
  v20 = v33;
  v19 = (void *)v34;
  LOBYTE(v33) = 0;
  v21 = String._bridgeToObjectiveC()();
  v22 = objc_msgSend(v2, "fileExistsAtPath:isDirectory:", v21, &v33);

  if ((v22 & 1) == 0)
  {
    v23 = String._bridgeToObjectiveC()();
    v35[0] = 0;
    v24 = objc_msgSend(v2, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v23, 1, 0, v35);

    v25 = v35[0];
    if (v24)
    {
      v26 = v35[0];
      goto LABEL_22;
    }
    v27 = v35[0];
    swift_bridgeObjectRelease(v19);
    v28 = _convertNSErrorToError(_:)(v25);

    swift_willThrow();
    swift_errorRelease(v28);
LABEL_21:
    v20 = 0;
    v19 = 0;
  }
LABEL_22:
  v29 = v20;
  v30 = v19;
LABEL_24:
  result.value._object = v30;
  result.value._countAndFlagsBits = v29;
  return result;
}

id sub_6EAF0(uint64_t a1)
{
  char *v1;
  char *v2;
  objc_class *ObjectType;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  NSURL *v14;
  void *v15;
  void *v16;
  objc_super v18;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType(v2);
  v5 = &v2[OBJC_IVAR____TtC5JSApp17WebViewController_url];
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v5, a1, v6);
  v8 = objc_msgSend((id)objc_opt_self(BUBag), "defaultBag");
  v9 = objc_msgSend((id)objc_opt_self(BUAccountsProvider), "sharedProvider");
  v10 = objc_msgSend(v9, "activeStoreAccount");

  v18.receiver = v2;
  v18.super_class = ObjectType;
  v11 = objc_msgSendSuper2(&v18, "initWithBag:account:clientInfo:", v8, v10, 0);

  v12 = v11;
  objc_msgSend(v12, "setDelegate:", v12);
  v13 = v12;
  URL._bridgeToObjectiveC()(v14);
  v16 = v15;

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
  return v13;
}

uint64_t sub_6ED40()
{
  return type metadata accessor for WebViewController(0);
}

uint64_t type metadata accessor for WebViewController(uint64_t a1)
{
  uint64_t result;

  result = qword_B9CF8;
  if (!qword_B9CF8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WebViewController);
  return result;
}

uint64_t sub_6ED84(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_6EF48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  if (a2)
    v5 = _convertErrorToNSError(_:)(a2);
  else
    v5 = 0;
  v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);

}

uint64_t sub_6F118()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_6F13C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_6EF48(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_6F154(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_6F164(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_6F18C@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_9F350, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_6F1DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_713FC();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_6F200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_715F0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t FigaroEventBuilding.build()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double (*v16)(char *, uint64_t, uint64_t);
  __n128 v17;
  __n128 v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  Class isa;
  id v36;
  id v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v42;
  unint64_t v43;
  _QWORD v44[3];
  _BYTE v45[16];
  id v46;
  _BYTE v47[24];
  uint64_t v48[4];

  v3 = v2;
  v6 = *(_QWORD *)(a1 - 8);
  v7 = __chkstk_darwin(a1);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v42 - v10;
  v12 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v13 = JSONEncoder.init()();
  v31 = dispatch thunk of JSONEncoder.encode<A>(_:)(v2, a1, *(_QWORD *)(a2 + 8));
  v33 = v32;
  swift_release(v13);
  v34 = (void *)objc_opt_self(NSJSONSerialization);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v46 = 0;
  v36 = objc_msgSend(v34, "JSONObjectWithData:options:error:", isa, 4, &v46);

  v37 = v46;
  if (v36)
  {
    _bridgeAnyObjectToAny(_:)(v48, v36);
    swift_unknownObjectRelease(v36);
    sub_37EF0((uint64_t)v48, (uint64_t)&v46);
    v38 = sub_29EF0(&qword_B9D70);
    if (swift_dynamicCast(&v43, &v46, (char *)&type metadata for Any + 8, v38, 6))
    {
      sub_3B6D8(v31, v33);
      v30 = v43;
    }
    else
    {
      v30 = sub_40D98((uint64_t)_swiftEmptyArrayStorage);
      sub_3B6D8(v31, v33);
    }
    sub_3789C(v48);
  }
  else
  {
    v39 = v37;
    v40 = _convertNSErrorToError(_:)(v37);

    swift_willThrow();
    sub_3B6D8(v31, v33);
    if (qword_B8150 != -1)
      swift_once(&qword_B8150, sub_56CD8);
    v14 = type metadata accessor for Logger(0);
    sub_2D6E0(v14, (uint64_t)qword_B9278);
    v15 = v6;
    v16 = *(double (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v17.n128_f64[0] = v16(v11, v3, a1);
    swift_errorRetain(v40, v17);
    v19 = swift_errorRetain(v40, v18);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc(22, -1);
      v42 = swift_slowAlloc(64, -1);
      v48[0] = v42;
      *(_DWORD *)v22 = 136315394;
      v16(v9, (uint64_t)v11, a1);
      v23 = String.init<A>(describing:)(v9, a1);
      v25 = v24;
      v46 = (id)sub_3A180(v23, v24, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v22 + 4, v22 + 12);
      swift_bridgeObjectRelease(v25);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v11, a1);
      *(_WORD *)(v22 + 12) = 2080;
      swift_getErrorValue(v40, v45, v44);
      v26 = Error.localizedDescription.getter(v44[1], v44[2]);
      v28 = v27;
      v46 = (id)sub_3A180(v26, v27, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v22 + 14, v22 + 22);
      swift_bridgeObjectRelease(v28);
      swift_errorRelease(v40);
      swift_errorRelease(v40);
      _os_log_impl(&dword_0, v20, v21, "Unable to build %s due to error: %s", (uint8_t *)v22, 0x16u);
      v29 = v42;
      swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v11, a1);
      swift_errorRelease(v40);
      swift_errorRelease(v40);
    }

    v30 = sub_40D98((uint64_t)_swiftEmptyArrayStorage);
    swift_errorRelease(v40);
  }
  return v30;
}

JSApp::FigaroClickEvent::ActionContext_optional __swiftcall FigaroClickEvent.ActionContext.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  Swift::OpaquePointer v2;

  v2._rawValue = &off_9F388;
  return (JSApp::FigaroClickEvent::ActionContext_optional)sub_6FBF4(rawValue, v2, v1);
}

uint64_t FigaroClickEvent.ActionContext.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_6F6D8 + 4 * byte_8ECF0[*v0]))(0xD000000000000010, 0x80000000000887E0);
}

uint64_t sub_6F6D8()
{
  return 0x68536E6F69746361;
}

uint64_t sub_6F6F8()
{
  return 0x6553736569726553;
}

uint64_t sub_6F718()
{
  return 0x736569726553;
}

void sub_6F72C(char *a1)
{
  sub_60CAC(*a1);
}

void sub_6F738()
{
  char *v0;

  sub_61010(*v0);
}

void sub_6F740(uint64_t a1)
{
  char *v1;

  sub_61218(a1, *v1);
}

void sub_6F748(uint64_t a1)
{
  char *v1;

  sub_614B0(a1, *v1);
}

JSApp::FigaroClickEvent::ActionContext_optional sub_6F750(Swift::String *a1)
{
  return FigaroClickEvent.ActionContext.init(rawValue:)(*a1);
}

uint64_t sub_6F75C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = FigaroClickEvent.ActionContext.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_6F780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_716BC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

JSApp::FigaroClickEvent::Location::Type_optional __swiftcall FigaroClickEvent.Location.Type.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  Swift::Int v5;
  JSApp::FigaroClickEvent::Location::Type_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_9F408, v3);
  result.value = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *v4 = v7;
  return result;
}

uint64_t FigaroClickEvent.Location.Type.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x6D657449626174;
  else
    return 0x6E6F74747562;
}

uint64_t sub_6F864(char *a1, char *a2)
{
  return sub_60C10(*a1, *a2);
}

Swift::Int sub_6F870()
{
  char *v0;

  return sub_610E0(*v0);
}

uint64_t sub_6F878(uint64_t a1)
{
  char *v1;

  return sub_611C4(a1, *v1);
}

Swift::Int sub_6F880(uint64_t a1)
{
  char *v1;

  return sub_6157C(a1, *v1);
}

JSApp::FigaroClickEvent::Location::Type_optional sub_6F888(Swift::String *a1)
{
  return FigaroClickEvent.Location.Type.init(rawValue:)(*a1);
}

uint64_t sub_6F894@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = FigaroClickEvent.Location.Type.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_6F8B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_71678();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void __swiftcall FigaroClickEvent.Location.init(adamId:name:locationPosition:locationType:)(JSApp::FigaroClickEvent::Location *__return_ptr retstr, Swift::String_optional adamId, Swift::String_optional name, Swift::Int locationPosition, JSApp::FigaroClickEvent::Location::Type locationType)
{
  JSApp::FigaroClickEvent::Location::Type v5;

  v5 = *(_BYTE *)locationType;
  retstr->adamId = adamId;
  retstr->name = name;
  retstr->locationPosition = locationPosition;
  retstr->locationType = v5;
}

uint64_t sub_6F91C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_6F954 + 4 * byte_8ECF4[a1]))(0xD000000000000010, 0x800000000008B530);
}

uint64_t sub_6F954()
{
  return 0x64496D616461;
}

uint64_t sub_6F968()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_6F988()
{
  return 1701667182;
}

uint64_t sub_6F998()
{
  unsigned __int8 *v0;

  return sub_6F91C(*v0);
}

uint64_t sub_6F9A0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_71410(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_6F9C4()
{
  return 0;
}

void sub_6F9D0(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_6F9DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_70258();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_6FA04(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_70258();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t FigaroClickEvent.Location.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;

  v3 = sub_29EF0(&qword_B9D78);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v7 = v1[1];
  v9 = v1[2];
  v21 = v1[3];
  v22 = v9;
  v20 = v1[4];
  v19 = *((unsigned __int8 *)v1 + 40);
  v10 = a1[3];
  v11 = a1[4];
  sub_3FFF4(a1, v10);
  v12 = sub_70258();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FigaroClickEvent.Location.CodingKeys, &type metadata for FigaroClickEvent.Location.CodingKeys, v12, v10, v11);
  v28 = 0;
  v13 = v23;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v8, v7, &v28, v3);
  if (!v13)
  {
    v14 = v20;
    v15 = v19;
    v27 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v21, &v27, v3);
    v26 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v26, v3);
    v25 = v15;
    v24 = 3;
    v16 = sub_7029C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v25, &v24, v3, &type metadata for FigaroClickEvent.Location.Type, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_6FBD4(_QWORD *a1)
{
  return FigaroClickEvent.Location.encode(to:)(a1);
}

JSApp::FigaroClickEvent::TargetType_optional __swiftcall FigaroClickEvent.TargetType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  Swift::OpaquePointer v2;

  v2._rawValue = &off_9F458;
  return (JSApp::FigaroClickEvent::TargetType_optional)sub_6FBF4(rawValue, v2, v1);
}

uint64_t sub_6FBF4@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X2>, char *a3@<X8>)
{
  void *object;
  Swift::String v4;
  unint64_t v7;
  uint64_t result;
  char v9;

  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  v7 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(object);
  v9 = 4;
  if (v7 < 4)
    v9 = v7;
  *a3 = v9;
  return result;
}

uint64_t FigaroClickEvent.TargetType.rawValue.getter()
{
  char *v0;

  return *(_QWORD *)&aButton_2[8 * *v0];
}

uint64_t sub_6FC6C(char *a1, char *a2)
{
  return sub_60E1C(*a1, *a2);
}

Swift::Int sub_6FC78()
{
  char *v0;

  return sub_6115C(*v0);
}

uint64_t sub_6FC80(uint64_t a1)
{
  char *v1;

  return sub_612C4(a1, *v1);
}

Swift::Int sub_6FC88(uint64_t a1)
{
  char *v1;

  return sub_6144C(a1, *v1);
}

JSApp::FigaroClickEvent::TargetType_optional sub_6FC90(Swift::String *a1)
{
  return FigaroClickEvent.TargetType.init(rawValue:)(*a1);
}

uint64_t sub_6FC9C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = FigaroClickEvent.TargetType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_6FCC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_71634();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void FigaroClickEvent.actionContext.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t FigaroClickEvent.actionDetails.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 8));
}

uint64_t FigaroClickEvent.actionType.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t FigaroClickEvent.actionURLString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return v1;
}

uint64_t FigaroClickEvent.locations.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48));
}

uint64_t FigaroClickEvent.targetId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 64));
  return v1;
}

void FigaroClickEvent.targetType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 72);
}

uint64_t sub_6FD98(char a1)
{
  return *(_QWORD *)&aActioncoaction_0[8 * a1];
}

uint64_t sub_6FDB8(char *a1, char *a2)
{
  return sub_60EA0(*a1, *a2);
}

Swift::Int sub_6FDC4()
{
  char *v0;

  return sub_613E8(0, *v0);
}

uint64_t sub_6FDD0(uint64_t a1)
{
  char *v1;

  return sub_61304(a1, *v1);
}

Swift::Int sub_6FDD8(uint64_t a1)
{
  char *v1;

  return sub_613E8(a1, *v1);
}

unint64_t sub_6FDE0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_715A8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_6FE0C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_6FD98(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_6FE34()
{
  char *v0;

  return sub_6FD98(*v0);
}

unint64_t sub_6FE3C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_715A8(a1);
  *a2 = result;
  return result;
}

void sub_6FE60(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_6FE6C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_702E0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_6FE94(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_702E0();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 FigaroClickEvent.init(actionContext:actionDetails:actionType:actionURLString:locations:targetId:targetType:)@<Q0>(unsigned __int8 *a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, unint64_t a8@<X7>, __n128 *a9@<X8>, unsigned __int8 *a10)
{
  unsigned __int8 v10;
  __n128 result;

  v10 = *a10;
  a9->n128_u8[0] = *a1;
  a9->n128_u64[1] = a2;
  result = *a3;
  a9[1] = *a3;
  a9[2].n128_u64[0] = a4;
  a9[2].n128_u64[1] = a5;
  a9[3].n128_u64[0] = a6;
  a9[3].n128_u64[1] = a7;
  a9[4].n128_u64[0] = a8;
  a9[4].n128_u8[8] = v10;
  return result;
}

uint64_t FigaroClickEvent.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _QWORD v43[4];
  int v44;
  char v45;

  v41 = type metadata accessor for JSONObject(0);
  v3 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_29EF0(&qword_B9D90);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = *v1;
  v10 = *((_QWORD *)v1 + 1);
  v11 = *((_QWORD *)v1 + 3);
  v39 = *((_QWORD *)v1 + 2);
  v40 = v11;
  v12 = *((_QWORD *)v1 + 4);
  v37 = *((_QWORD *)v1 + 5);
  v38 = v12;
  v13 = *((_QWORD *)v1 + 6);
  v14 = *((_QWORD *)v1 + 7);
  v33 = v10;
  v34 = v14;
  v35 = *((_QWORD *)v1 + 8);
  v36 = v13;
  v44 = v1[72];
  v15 = a1[3];
  v16 = a1[4];
  v17 = a1;
  v18 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_3FFF4(v17, v15);
  v19 = sub_702E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FigaroClickEvent.CodingKeys, &type metadata for FigaroClickEvent.CodingKeys, v19, v15, v16);
  LOBYTE(v43[0]) = v9;
  v45 = 0;
  v20 = sub_70324();
  v21 = v42;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v43, &v45, v6, &type metadata for FigaroClickEvent.ActionContext, v20);
  if (!v21)
  {
    v23 = v38;
    v22 = v39;
    v24 = v37;
    v42 = v5;
    v25 = v41;
    LOBYTE(v43[0]) = 2;
    if (!v40)
      v22 = 0x7375636F66;
    KeyedEncodingContainer.encode(_:forKey:)(v22);
    LOBYTE(v43[0]) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, v24, v43, v6);
    LOBYTE(v43[0]) = 4;
    v26 = sub_70368();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v26, v43, v6, &type metadata for FigaroEventType, v26);
    v43[0] = v36;
    v45 = 5;
    v27 = sub_29EF0(&qword_B9DB0);
    v28 = sub_703AC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v43, &v45, v6, v27, v28);
    LOBYTE(v43[0]) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v34);
    LOBYTE(v43[0]) = v44;
    v45 = 7;
    v29 = sub_70454();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v43, &v45, v6, &type metadata for FigaroClickEvent.TargetType, v29);
    v43[3] = sub_29EF0(&qword_B94A0);
    v43[0] = v33;
    swift_bridgeObjectRetain(v33);
    v30 = v42;
    JSONObject.init(wrapping:)(v43);
    LOBYTE(v43[0]) = 1;
    v31 = sub_70498();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v30, v43, v6, v25, v31);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v30, v25);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v18, v6);
}

uint64_t sub_70244(_QWORD *a1)
{
  return FigaroClickEvent.encode(to:)(a1);
}

unint64_t sub_70258()
{
  unint64_t result;

  result = qword_B9D80;
  if (!qword_B9D80)
  {
    result = swift_getWitnessTable(&unk_8F390, &type metadata for FigaroClickEvent.Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_B9D80);
  }
  return result;
}

unint64_t sub_7029C()
{
  unint64_t result;

  result = qword_B9D88;
  if (!qword_B9D88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FigaroClickEvent.Location.Type, &type metadata for FigaroClickEvent.Location.Type);
    atomic_store(result, (unint64_t *)&qword_B9D88);
  }
  return result;
}

unint64_t sub_702E0()
{
  unint64_t result;

  result = qword_B9D98;
  if (!qword_B9D98)
  {
    result = swift_getWitnessTable(&unk_8F340, &type metadata for FigaroClickEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_B9D98);
  }
  return result;
}

unint64_t sub_70324()
{
  unint64_t result;

  result = qword_B9DA0;
  if (!qword_B9DA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FigaroClickEvent.ActionContext, &type metadata for FigaroClickEvent.ActionContext);
    atomic_store(result, (unint64_t *)&qword_B9DA0);
  }
  return result;
}

unint64_t sub_70368()
{
  unint64_t result;

  result = qword_B9DA8;
  if (!qword_B9DA8)
  {
    result = swift_getWitnessTable(&unk_8F318, &type metadata for FigaroEventType);
    atomic_store(result, (unint64_t *)&qword_B9DA8);
  }
  return result;
}

unint64_t sub_703AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_B9DB8;
  if (!qword_B9DB8)
  {
    v1 = sub_29F30(&qword_B9DB0);
    sub_70410();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_B9DB8);
  }
  return result;
}

unint64_t sub_70410()
{
  unint64_t result;

  result = qword_B9DC0;
  if (!qword_B9DC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FigaroClickEvent.Location, &type metadata for FigaroClickEvent.Location);
    atomic_store(result, (unint64_t *)&qword_B9DC0);
  }
  return result;
}

unint64_t sub_70454()
{
  unint64_t result;

  result = qword_B9DC8;
  if (!qword_B9DC8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FigaroClickEvent.TargetType, &type metadata for FigaroClickEvent.TargetType);
    atomic_store(result, (unint64_t *)&qword_B9DC8);
  }
  return result;
}

unint64_t sub_70498()
{
  unint64_t result;
  uint64_t v1;

  result = qword_B9DD0;
  if (!qword_B9DD0)
  {
    v1 = type metadata accessor for JSONObject(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for JSONObject, v1);
    atomic_store(result, (unint64_t *)&qword_B9DD0);
  }
  return result;
}

unint64_t sub_704E4()
{
  unint64_t result;

  result = qword_B9DD8;
  if (!qword_B9DD8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FigaroClickEvent.ActionContext, &type metadata for FigaroClickEvent.ActionContext);
    atomic_store(result, (unint64_t *)&qword_B9DD8);
  }
  return result;
}

unint64_t sub_7052C()
{
  unint64_t result;

  result = qword_B9DE0;
  if (!qword_B9DE0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FigaroClickEvent.Location.Type, &type metadata for FigaroClickEvent.Location.Type);
    atomic_store(result, (unint64_t *)&qword_B9DE0);
  }
  return result;
}

unint64_t sub_70574()
{
  unint64_t result;

  result = qword_B9DE8;
  if (!qword_B9DE8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FigaroClickEvent.TargetType, &type metadata for FigaroClickEvent.TargetType);
    atomic_store(result, (unint64_t *)&qword_B9DE8);
  }
  return result;
}

unint64_t sub_705B8(uint64_t a1)
{
  unint64_t result;

  result = sub_705DC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_705DC()
{
  unint64_t result;

  result = qword_B9DF0;
  if (!qword_B9DF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FigaroClickEvent, &type metadata for FigaroClickEvent);
    atomic_store(result, (unint64_t *)&qword_B9DF0);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for FigaroActionType(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for FigaroActionType(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for FigaroActionType(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

__n128 initializeWithTake for FigaroActionType(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *assignWithTake for FigaroActionType(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for FigaroActionType(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FigaroActionType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_70774(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_7078C(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for FigaroActionType()
{
  return &type metadata for FigaroActionType;
}

uint64_t destroy for FigaroClickEvent(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[6]);
  return swift_bridgeObjectRelease(a1[8]);
}

uint64_t initializeWithCopy for FigaroClickEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v5;
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t assignWithCopy for FigaroClickEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

__n128 initializeWithTake for FigaroClickEvent(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for FigaroClickEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  v7 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for FigaroClickEvent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 73))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FigaroClickEvent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 73) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FigaroClickEvent()
{
  return &type metadata for FigaroClickEvent;
}

ValueMetadata *type metadata accessor for FigaroClickEvent.ActionContext()
{
  return &type metadata for FigaroClickEvent.ActionContext;
}

uint64_t destroy for FigaroClickEvent.Location(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for FigaroClickEvent.Location(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for FigaroClickEvent.Location(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

__n128 initializeWithTake for FigaroClickEvent.Location(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for FigaroClickEvent.Location(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for FigaroClickEvent.Location(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FigaroClickEvent.Location(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FigaroClickEvent.Location()
{
  return &type metadata for FigaroClickEvent.Location;
}

uint64_t getEnumTagSinglePayload for FigaroClickEvent.Location.Type(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FigaroClickEvent.Location.Type(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_70DB8 + 4 * byte_8ECFD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_70DEC + 4 * byte_8ECF8[v4]))();
}

uint64_t sub_70DEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_70DF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x70DFCLL);
  return result;
}

uint64_t sub_70E08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x70E10);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_70E14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_70E1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_70E28(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for FigaroClickEvent.Location.Type()
{
  return &type metadata for FigaroClickEvent.Location.Type;
}

ValueMetadata *type metadata accessor for FigaroClickEvent.TargetType()
{
  return &type metadata for FigaroClickEvent.TargetType;
}

uint64_t getEnumTagSinglePayload for FigaroEventType(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for FigaroEventType(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_70EE8 + 4 * byte_8ED02[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_70F08 + 4 * byte_8ED07[v4]))();
}

_BYTE *sub_70EE8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_70F08(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_70F10(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_70F18(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_70F20(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_70F28(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_70F34()
{
  return 0;
}

ValueMetadata *type metadata accessor for FigaroEventType()
{
  return &type metadata for FigaroEventType;
}

uint64_t getEnumTagSinglePayload for FigaroClickEvent.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FigaroClickEvent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_71028 + 4 * byte_8ED11[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_7105C + 4 * byte_8ED0C[v4]))();
}

uint64_t sub_7105C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_71064(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x7106CLL);
  return result;
}

uint64_t sub_71078(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x71080);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_71084(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_7108C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FigaroClickEvent.CodingKeys()
{
  return &type metadata for FigaroClickEvent.CodingKeys;
}

uint64_t _s5JSApp16FigaroClickEventV13ActionContextOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s5JSApp16FigaroClickEventV13ActionContextOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_71184 + 4 * byte_8ED1B[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_711B8 + 4 * byte_8ED16[v4]))();
}

uint64_t sub_711B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_711C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x711C8);
  return result;
}

uint64_t sub_711D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x711DCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_711E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_711E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FigaroClickEvent.Location.CodingKeys()
{
  return &type metadata for FigaroClickEvent.Location.CodingKeys;
}

unint64_t sub_71208()
{
  unint64_t result;

  result = qword_B9DF8;
  if (!qword_B9DF8)
  {
    result = swift_getWitnessTable(&unk_8F160, &type metadata for FigaroClickEvent.Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_B9DF8);
  }
  return result;
}

unint64_t sub_71250()
{
  unint64_t result;

  result = qword_B9E00;
  if (!qword_B9E00)
  {
    result = swift_getWitnessTable(&unk_8F250, &type metadata for FigaroClickEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_B9E00);
  }
  return result;
}

unint64_t sub_71298()
{
  unint64_t result;

  result = qword_B9E08;
  if (!qword_B9E08)
  {
    result = swift_getWitnessTable(&unk_8F2F0, &type metadata for FigaroEventType);
    atomic_store(result, (unint64_t *)&qword_B9E08);
  }
  return result;
}

unint64_t sub_712E0()
{
  unint64_t result;

  result = qword_B9E10;
  if (!qword_B9E10)
  {
    result = swift_getWitnessTable(&unk_8F188, &type metadata for FigaroClickEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_B9E10);
  }
  return result;
}

unint64_t sub_71328()
{
  unint64_t result;

  result = qword_B9E18;
  if (!qword_B9E18)
  {
    result = swift_getWitnessTable(&unk_8F1B0, &type metadata for FigaroClickEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_B9E18);
  }
  return result;
}

unint64_t sub_71370()
{
  unint64_t result;

  result = qword_B9E20;
  if (!qword_B9E20)
  {
    result = swift_getWitnessTable(&unk_8F0D0, &type metadata for FigaroClickEvent.Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_B9E20);
  }
  return result;
}

unint64_t sub_713B8()
{
  unint64_t result;

  result = qword_B9E28;
  if (!qword_B9E28)
  {
    result = swift_getWitnessTable(&unk_8F0F8, &type metadata for FigaroClickEvent.Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_B9E28);
  }
  return result;
}

uint64_t sub_713FC()
{
  return 0x6B63696C63;
}

uint64_t sub_71410(uint64_t a1, unint64_t a2)
{
  BOOL v3;
  unint64_t v6;
  char v7;

  v3 = a1 == 0x64496D616461 && a2 == 0xE600000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)(0x64496D616461, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  if (a1 == 1701667182 && a2 == 0xE400000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  if (a1 == 0xD000000000000010)
  {
    v6 = 0x800000000008B530;
    if (a2 == 0x800000000008B530)
      goto LABEL_15;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000000008B530, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
LABEL_15:
    swift_bridgeObjectRelease(v6);
    return 2;
  }
  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEC00000065707954)
  {
    swift_bridgeObjectRelease(0xEC00000065707954);
    return 3;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xEC00000065707954, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

unint64_t sub_715A8(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_9F4D8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 8)
    return 8;
  else
    return v3;
}

unint64_t sub_715F0()
{
  unint64_t result;

  result = qword_B9E30;
  if (!qword_B9E30)
  {
    result = swift_getWitnessTable(&unk_8F278, &type metadata for FigaroEventType);
    atomic_store(result, (unint64_t *)&qword_B9E30);
  }
  return result;
}

unint64_t sub_71634()
{
  unint64_t result;

  result = qword_B9E38;
  if (!qword_B9E38)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FigaroClickEvent.TargetType, &type metadata for FigaroClickEvent.TargetType);
    atomic_store(result, (unint64_t *)&qword_B9E38);
  }
  return result;
}

unint64_t sub_71678()
{
  unint64_t result;

  result = qword_B9E40;
  if (!qword_B9E40)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FigaroClickEvent.Location.Type, &type metadata for FigaroClickEvent.Location.Type);
    atomic_store(result, (unint64_t *)&qword_B9E40);
  }
  return result;
}

unint64_t sub_716BC()
{
  unint64_t result;

  result = qword_B9E48;
  if (!qword_B9E48)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FigaroClickEvent.ActionContext, &type metadata for FigaroClickEvent.ActionContext);
    atomic_store(result, (unint64_t *)&qword_B9E48);
  }
  return result;
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC5JSAppP33_2C93636777A58BB219FEB840AB69A03119ResourceBundleClass);
}

void sub_71730(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_fault_impl(&dword_0, a2, OS_LOG_TYPE_FAULT, "%@", (uint8_t *)&v2, 0xCu);
}

void sub_717A4(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_0, log, OS_LOG_TYPE_ERROR, "Unable to invoke parental approval JS callback due to missing JSValue", v1, 2u);
}

void sub_717E4(void *a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "context"));
  v4 = 138412290;
  v5 = v3;
  _os_log_fault_impl(&dword_0, a2, OS_LOG_TYPE_FAULT, "JS code error: Some native JS API that uses globalThis.App as the owner for JSManagedValue is called too early, before JS evaluation is complete. Context: %@", (uint8_t *)&v4, 0xCu);

}

void sub_71878(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_99E0(&dword_0, a1, a3, "JSAEnvironment too many recursive exceptions, bailing out", a5, a6, a7, a8, 0);
}

void sub_718AC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_99F0(&dword_0, a2, a3, "JSAEnvironment exception: %{public}@", a5, a6, a7, a8, 2u);
  sub_9A00();
}

void sub_71910(uint64_t a1, NSObject *a2)
{
  int v2;
  const char *v3;
  __int16 v4;
  uint64_t v5;

  v2 = 136446466;
  v3 = "-[JSAEnvironment loadScript:name:version:isBundled:completion:]_block_invoke";
  v4 = 2112;
  v5 = a1;
  _os_log_error_impl(&dword_0, a2, OS_LOG_TYPE_ERROR, "JSAEnvironment %{public}s Loading script caused an exception: %@", (uint8_t *)&v2, 0x16u);
  sub_9A00();
}

void sub_71994(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_99F0(&dword_0, a1, a3, "JSAEnvironment %{public}s unable to encode the string using ASCII encoding, something is wrong with javascript app", a5, a6, a7, a8, 2u);
  sub_9A00();
}

void sub_71A04(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_99E0(&dword_0, a1, a3, "JSAEnvironment failed to register objects due to invalid nativeJSObject", a5, a6, a7, a8, 0);
}

void sub_71A38(uint64_t a1, NSObject *a2)
{
  int v2;
  const char *v3;
  __int16 v4;
  uint64_t v5;

  v2 = 136315394;
  v3 = "-[JSAMetricsAppLaunchEvent metricsDictionary]";
  v4 = 2112;
  v5 = a1;
  _os_log_debug_impl(&dword_0, a2, OS_LOG_TYPE_DEBUG, "%s: %@", (uint8_t *)&v2, 0x16u);
}

void sub_71AC0(int a1, NSObject *a2)
{
  int v2;
  const char *v3;
  __int16 v4;
  int v5;

  v2 = 136315394;
  v3 = "-[JSAMetricsAppLaunchEvent metricsDictionary]_block_invoke";
  v4 = 1026;
  v5 = a1;
  _os_log_error_impl(&dword_0, a2, OS_LOG_TYPE_ERROR, "%s: Could not read processStartTime, reason: %{public}d", (uint8_t *)&v2, 0x12u);
}

void sub_71B48(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_99F0(&dword_0, a2, a3, "Only string is allowed for request header or URL param values. Dropping this value: %@.", a5, a6, a7, a8, 2u);
}

void sub_71BB0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_99F0(&dword_0, a2, a3, "Only non-empty string is allowed for request header or URL param keys. Dropping this key: %@.", a5, a6, a7, a8, 2u);
}

void sub_71C18(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl(&dword_0, log, OS_LOG_TYPE_FAULT, "_managedCallback should be released already", v1, 2u);
}

void sub_71C58(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl(&dword_0, log, OS_LOG_TYPE_FAULT, "[JSALocalStorage] Failed to create dedicated app group user defaults", v1, 2u);
}

void sub_71C98(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_99F0(&dword_0, a1, a3, "%{public}s Starting timer with invalid timeout", a5, a6, a7, a8, 2u);
  sub_9A00();
}

void sub_71D08(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_99F0(&dword_0, a1, a3, "%{public}s Starting timer with empty handler", a5, a6, a7, a8, 2u);
  sub_9A00();
}

void sub_71D78(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_99F0(&dword_0, a2, a3, "JSAFoundation Unknown timer: %@", a5, a6, a7, a8, 2u);
  sub_9A00();
}

void sub_71DDC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_11E70();
  sub_99F0(&dword_0, v0, v1, "The following key is not in the bag: %{public}@", v2, v3, v4, v5, v6);
  sub_9A00();
}

void sub_71E3C()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;

  sub_11E70();
  v3 = 2114;
  v4 = v0;
  _os_log_error_impl(&dword_0, v1, OS_LOG_TYPE_ERROR, "An error occurred while trying to get the bag key %{public}@, error=%{public}@", v2, 0x16u);
  sub_9A00();
}

void sub_71EB8(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl(&dword_0, log, OS_LOG_TYPE_FAULT, "Offline cache bag is nil.", v1, 2u);
}

void sub_71EF8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_11E70();
  sub_99F0(&dword_0, v0, v1, "could not write cache to disk (error): %@", v2, v3, v4, v5, v6);
  sub_9A00();
}

void sub_71F58()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_11E70();
  sub_99F0(&dword_0, v0, v1, "could not create keyed archive: %@", v2, v3, v4, v5, v6);
  sub_9A00();
}

void sub_71FB8(os_log_t log)
{
  int v1;
  const char *v2;

  v1 = 136315138;
  v2 = "-[JSAThread enqueueBlockSync:]";
  _os_log_fault_impl(&dword_0, log, OS_LOG_TYPE_FAULT, "%s must not be run on JSAThread!", (uint8_t *)&v1, 0xCu);
}

void sub_72038()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_11E70();
  sub_1677C(&dword_0, v0, v1, "Could not read cache dir from disk: %{public}@", v2);
  sub_9A00();
}

void sub_7209C(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_0, log, OS_LOG_TYPE_ERROR, "Could not decode cached response.", v1, 2u);
}

void sub_720DC()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_16794();
  sub_16788(&dword_0, v0, (uint64_t)v0, "Could not decode cached response. jsonError: %{public}@, unarchiveError: %{public}@", v1);
  sub_9A00();
}

void sub_72144()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_16794();
  sub_16788(&dword_0, v0, (uint64_t)v0, "Unable to serialize offline cache response for key: %{public}@, error: %{public}@", v1);
  sub_9A00();
}

void sub_721AC()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_11E70();
  sub_1677C(&dword_0, v0, v1, "could not write cache to disk (error): %@", v2);
  sub_9A00();
}

void sub_72210()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_11E70();
  sub_1677C(&dword_0, v0, v1, "could not create keyed archive: %@", v2);
  sub_9A00();
}

void sub_72274(id *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a1, "absoluteString"));
  sub_11E70();
  sub_1677C(&dword_0, a2, v4, "request not found in offline cache: %{public}@", v5);

}

void sub_72300(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  const char *v6;
  __int16 v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
  v5 = 136446978;
  v6 = "-[JSAStoreHTTPRequest _enqueue]_block_invoke_3";
  v7 = 2114;
  v8 = v4;
  v9 = 2112;
  v10 = v3;
  v11 = 2114;
  v12 = a2;
  _os_log_error_impl(&dword_0, log, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ request to %@ failed with error: %{public}@", (uint8_t *)&v5, 0x2Au);
}

void sub_723A8()
{
  NSObject *v0;
  uint64_t v1;
  int v2[6];

  v2[0] = 136446466;
  sub_167AC();
  sub_16788(&dword_0, v0, v1, "%{public}s failed to make an NSURL with string \"%{public}@\"", (uint8_t *)v2);
  sub_9A00();
}

void sub_72418()
{
  NSObject *v0;
  uint64_t v1;
  int v2[6];

  v2[0] = 136446466;
  sub_167AC();
  sub_16788(&dword_0, v0, v1, "%{public}s setting an invalid HTTP method \"%{public}@\"", (uint8_t *)v2);
  sub_9A00();
}

void sub_72488(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_207C8(&dword_0, a2, a3, "%{public}s %p: bridged but no valid feed, why?", a5, a6, a7, a8, 2u);
  sub_9A00();
}

void sub_72504()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  sub_207EC();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x20u);
}

void sub_72590()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  sub_207EC();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x1Cu);
}

void sub_72624()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_207D8();
  sub_207C8(&dword_0, v0, v1, "%{public}s %p: Failed to take session assertion.", v2, v3, v4, v5, 2u);
  sub_9A00();
}

void sub_72690()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_207D8();
  sub_207C8(&dword_0, v0, v1, "%{public}s %p: Failed to take session assertion.", v2, v3, v4, v5, 2u);
  sub_9A00();
}

void sub_726FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_207D8();
  sub_207C8(&dword_0, v0, v1, "%{public}s %p: Failed to take session assertion.", v2, v3, v4, v5, 2u);
  sub_9A00();
}

void sub_72768(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl(&dword_0, a2, OS_LOG_TYPE_ERROR, "Incoming parameter is either UIViewController or NSDictionary. Makes no sense to create a BSUIFeedController with no options. viewControllerOrOptions=%@", (uint8_t *)&v2, 0xCu);
  sub_9A00();
}

void sub_727D8()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  sub_207EC();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x16u);
  sub_9A00();
}

void sub_72854()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_23858();
  sub_23840(&dword_0, v0, v1, "initializeEnvironmentWithDataSource called more than once", v2, v3, v4, v5, v6);
  sub_23850();
}

void sub_72880()
{
  os_log_t v0;
  uint8_t v1[16];

  sub_23858();
  _os_log_error_impl(&dword_0, v0, OS_LOG_TYPE_ERROR, "Failed to provision package for launch", v1, 2u);
  sub_23850();
}

void sub_728B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_23858();
  sub_23840(&dword_0, v0, v1, "Unable to provision any JS, Books failed to launch!", v2, v3, v4, v5, v6);
  sub_23850();
}

void sub_728E4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_99F0(&dword_0, a1, a3, "%{public}s failed to downloaded new package in the background", a5, a6, a7, a8, 2u);
  sub_9A00();
}

void sub_72954(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_99F0(&dword_0, a1, a3, "%{public}s failed to provision package for upgrade", a5, a6, a7, a8, 2u);
  sub_9A00();
}

void sub_729C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_23858();
  sub_23840(&dword_0, v0, v1, "JSABridge: templateBundleRegistrar is not set", v2, v3, v4, v5, v6);
  sub_23850();
}

void sub_729F0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_99F0(&dword_0, a1, a3, "%{public}s JSAThread took more than 10 seconds to process an enqueued block. There is a serious issue.", a5, a6, a7, a8, 2u);
  sub_9A00();
}

void sub_72A60(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_99F0(&dword_0, a2, a3, "Failed to set unhandled promise rejection handler: %@", a5, a6, a7, a8, 2u);
}

void sub_72AC8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_99F0(&dword_0, a2, a3, "Invalid type for unhandled promise rejection handler: %@", a5, a6, a7, a8, 2u);
}

void sub_72B30(os_log_t log)
{
  int v1;
  const char *v2;

  v1 = 136446210;
  v2 = "-[JSAStore platform]";
  _os_log_error_impl(&dword_0, log, OS_LOG_TYPE_ERROR, "%{public}s unable to get the platform correctly", (uint8_t *)&v1, 0xCu);
}

id objc_msgSend_JSGlobalContextRef(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "JSGlobalContextRef");
}

id objc_msgSend_JSONObjectWithData_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "JSONObjectWithData:options:error:");
}

id objc_msgSend_JSValueRef(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "JSValueRef");
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URL");
}

id objc_msgSend_URLForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLForKey:");
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUID");
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUIDString");
}

id objc_msgSend__aq_loadPostLaunchCaches(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_aq_loadPostLaunchCaches");
}

id objc_msgSend__aq_saveOfflineCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_aq_saveOfflineCache");
}

id objc_msgSend__beforeJSAppLaunchBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_beforeJSAppLaunchBlock");
}

id objc_msgSend__colorWithHexValue_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_colorWithHexValue:alpha:");
}

id objc_msgSend__convertOrCreateViewController_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_convertOrCreateViewController:completion:");
}

id objc_msgSend__error(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_error");
}

id objc_msgSend__errorForAirplaneMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_errorForAirplaneMode");
}

id objc_msgSend__exceptionHandlerReentrantCountPtr(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_exceptionHandlerReentrantCountPtr");
}

id objc_msgSend__exposeObjectsAndClassesToContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_exposeObjectsAndClassesToContext:");
}

id objc_msgSend__httpBody(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_httpBody");
}

id objc_msgSend__initWithSuiteName_container_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithSuiteName:container:");
}

id objc_msgSend__loadCacheFromCandidatePaths_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadCacheFromCandidatePaths:");
}

id objc_msgSend__performPendingBlocks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performPendingBlocks");
}

id objc_msgSend__saveOfflineCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_saveOfflineCache:");
}

id objc_msgSend__sceneIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sceneIdentifier");
}

id objc_msgSend__setPreferredTransition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPreferredTransition:");
}

id objc_msgSend__updateRestrictionsAndNotifyIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateRestrictionsAndNotifyIfNeeded");
}

id objc_msgSend_abandoned(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "abandoned");
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "absoluteString");
}

id objc_msgSend_access(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "access");
}

id objc_msgSend_accessQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessQueue");
}

id objc_msgSend_account(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "account");
}

id objc_msgSend_accountDidAttemptSignOut_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountDidAttemptSignOut:");
}

id objc_msgSend_accountHandlers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountHandlers");
}

id objc_msgSend_accountWillAttemptSignOut_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountWillAttemptSignOut:");
}

id objc_msgSend_activationState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activationState");
}

id objc_msgSend_activeStoreAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeStoreAccount");
}

id objc_msgSend_activityItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityItem");
}

id objc_msgSend_addBagKey_valueType_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBagKey:valueType:defaultValue:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addFinishBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFinishBlock:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:");
}

id objc_msgSend_addObserver_accountTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:accountTypes:");
}

id objc_msgSend_addObserver_forKeyPath_options_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:forKeyPath:options:context:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addObserverForName_object_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserverForName:object:queue:usingBlock:");
}

id objc_msgSend_addTimer_forMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTimer:forMode:");
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allKeys");
}

id objc_msgSend_ams_DSID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_DSID");
}

id objc_msgSend_ams_addCookies_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_addCookies:");
}

id objc_msgSend_ams_cookies(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_cookies");
}

id objc_msgSend_ams_filterUsingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_filterUsingTest:");
}

id objc_msgSend_ams_firstName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_firstName");
}

id objc_msgSend_ams_fullName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_fullName");
}

id objc_msgSend_ams_lastName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_lastName");
}

id objc_msgSend_ams_removeCookiesMatchingProperties_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_removeCookiesMatchingProperties:error:");
}

id objc_msgSend_ams_saveAccount_verifyCredentials_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_saveAccount:verifyCredentials:");
}

id objc_msgSend_analyticsTrackerForFeedController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "analyticsTrackerForFeedController:");
}

id objc_msgSend_appForOwnership(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appForOwnership");
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:");
}

id objc_msgSend_arguments(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arguments");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "array");
}

id objc_msgSend_arrayByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByAddingObjectsFromArray:");
}

id objc_msgSend_arrayForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayForKey:");
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_bag(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bag");
}

id objc_msgSend_bagChangeHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bagChangeHandler");
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedStringWithOptions:");
}

id objc_msgSend_block(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "block");
}

id objc_msgSend_books(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "books");
}

id objc_msgSend_BOOLForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLForKey:");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLValue");
}

id objc_msgSend_bounds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bounds");
}

id objc_msgSend_bridgeCompletion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bridgeCompletion");
}

id objc_msgSend_bu_errorWithDomain_code_alertTitle_alertMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bu_errorWithDomain:code:alertTitle:alertMessage:");
}

id objc_msgSend_bu_errorWithDomain_code_description_underlyingError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bu_errorWithDomain:code:description:underlyingError:");
}

id objc_msgSend_bu_groupUserDefaults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bu_groupUserDefaults");
}

id objc_msgSend_bu_gzipDeflate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bu_gzipDeflate");
}

id objc_msgSend_bu_gzipInflate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bu_gzipInflate");
}

id objc_msgSend_bu_objectsMatching_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bu_objectsMatching:");
}

id objc_msgSend_bu_sharedAccountStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bu_sharedAccountStore");
}

id objc_msgSend_bu_signOut(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bu_signOut");
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleIdentifier");
}

id objc_msgSend_bundlePath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundlePath");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bytes");
}

id objc_msgSend_cacheDirCandidatesForHTTPPostLaunch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cacheDirCandidatesForHTTPPostLaunch");
}

id objc_msgSend_cacheFileCandidatesForBag(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cacheFileCandidatesForBag");
}

id objc_msgSend_cacheFileCandidatesForHTTPPreLaunch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cacheFileCandidatesForHTTPPreLaunch");
}

id objc_msgSend_cachePath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachePath");
}

id objc_msgSend_calendar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendar");
}

id objc_msgSend_calendarIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarIdentifier");
}

id objc_msgSend_callWithArguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callWithArguments:");
}

id objc_msgSend_callback(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callback");
}

id objc_msgSend_callbackQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callbackQueue");
}

id objc_msgSend_canOpenURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canOpenURL:");
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancel");
}

id objc_msgSend_characterSetWithCharactersInString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterSetWithCharactersInString:");
}

id objc_msgSend_checkForUpgradeWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkForUpgradeWithCompletion:");
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "code");
}

id objc_msgSend_comment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "comment");
}

id objc_msgSend_commentURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commentURL");
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_constructWithArguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constructWithArguments:");
}

id objc_msgSend_consumePendingLaunchEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "consumePendingLaunchEvent");
}

id objc_msgSend_containerURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containerURL");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsString:");
}

id objc_msgSend_contentsOfDirectoryAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentsOfDirectoryAtPath:error:");
}

id objc_msgSend_context(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "context");
}

id objc_msgSend_cookieStorageChangeHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cookieStorageChangeHandler");
}

id objc_msgSend_cookiesForURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cookiesForURL:");
}

id objc_msgSend_cookiesToSuppress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cookiesToSuppress");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copy");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_createDataTaskWithRequest_activity_dataTaskCreationCompletionHandler_requestCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDataTaskWithRequest:activity:dataTaskCreationCompletionHandler:requestCompletionHandler:");
}

id objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_currentArguments(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentArguments");
}

id objc_msgSend_currentCalendar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentCalendar");
}

id objc_msgSend_currentDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentDevice");
}

id objc_msgSend_currentLocale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentLocale");
}

id objc_msgSend_currentPackage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentPackage");
}

id objc_msgSend_currentProcess(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentProcess");
}

id objc_msgSend_currentRunLoop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentRunLoop");
}

id objc_msgSend_currentStackNameForFeedController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentStackNameForFeedController:");
}

id objc_msgSend_currentStorefront(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentStorefront");
}

id objc_msgSend_currentThread(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentThread");
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "data");
}

id objc_msgSend_dataAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataAtPath:");
}

id objc_msgSend_dataSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataSource");
}

id objc_msgSend_dataTaskWithRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataTaskWithRequest:completionHandler:");
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataWithContentsOfFile_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfFile:options:error:");
}

id objc_msgSend_dataWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfURL:");
}

id objc_msgSend_dataWithJSONObject_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithJSONObject:options:error:");
}

id objc_msgSend_dataWithPropertyList_format_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithPropertyList:format:options:error:");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "date");
}

id objc_msgSend_debugAssertRunningOnJSAThread(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "debugAssertRunningOnJSAThread");
}

id objc_msgSend_defaultBag(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultBag");
}

id objc_msgSend_defaultBagKeysDictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultBagKeysDictionary");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultCenter");
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultManager");
}

id objc_msgSend_defaultSessionConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultSessionConfiguration");
}

id objc_msgSend_defaultURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultURL");
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultWorkspace");
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "delegate");
}

id objc_msgSend_dequeueAllRecords(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dequeueAllRecords");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "description");
}

id objc_msgSend_deviceGUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceGUID");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionary");
}

id objc_msgSend_dictionaryForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryForKey:");
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithCapacity:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_didFinishLaunchingWithMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFinishLaunchingWithMetrics:");
}

id objc_msgSend_disableATS(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableATS");
}

id objc_msgSend_diskUsage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "diskUsage");
}

id objc_msgSend_displayGamut(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayGamut");
}

id objc_msgSend_displayNameForKey_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayNameForKey:value:");
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "domain");
}

id objc_msgSend_doubleForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleForKey:");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleValue");
}

id objc_msgSend_enqueueBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueBlock:");
}

id objc_msgSend_enqueueBlock_file_line_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueBlock:file:line:");
}

id objc_msgSend_enqueueBlockForInitialLaunch_file_line_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueBlockForInitialLaunch:file:line:");
}

id objc_msgSend_enqueueBlockPrefersSync_file_line_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueBlockPrefersSync:file:line:");
}

id objc_msgSend_enqueueBlockSync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueBlockSync:");
}

id objc_msgSend_enqueueManagedValueCall_arguments_file_line_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueManagedValueCall:arguments:file:line:");
}

id objc_msgSend_enqueueRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueRecord:");
}

id objc_msgSend_enqueueValueCall_arguments_file_line_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueValueCall:arguments:file:line:");
}

id objc_msgSend_enqueueValueInvocation_method_arguments_file_line_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueValueInvocation:method:arguments:file:line:");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_environment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "environment");
}

id objc_msgSend_errorOnlyCompletionHandlerAdapter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorOnlyCompletionHandlerAdapter");
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_exceptionWithName_reason_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exceptionWithName:reason:userInfo:");
}

id objc_msgSend_expirationDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expirationDate");
}

id objc_msgSend_expiresDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expiresDate");
}

id objc_msgSend_feed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feed");
}

id objc_msgSend_feedBridged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedBridged");
}

id objc_msgSend_feedController_addAlphaOverrideToItem_alpha_animated_duration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedController:addAlphaOverrideToItem:alpha:animated:duration:");
}

id objc_msgSend_feedController_addObserver_forTrigger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedController:addObserver:forTrigger:");
}

id objc_msgSend_feedController_collectAndFlush_accumulatedImpressionsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedController:collectAndFlush:accumulatedImpressionsWithCompletion:");
}

id objc_msgSend_feedController_collectStatsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedController:collectStatsWithCompletion:");
}

id objc_msgSend_feedController_collectVisibleImpressionsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedController:collectVisibleImpressionsWithCompletion:");
}

id objc_msgSend_feedController_didLoadCardResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedController:didLoadCardResource:");
}

id objc_msgSend_feedController_dismissKeyboard_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedController:dismissKeyboard:");
}

id objc_msgSend_feedController_removeAlphaOverrideFromItem_animated_duration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedController:removeAlphaOverrideFromItem:animated:duration:");
}

id objc_msgSend_feedController_removeObserver_forTrigger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedController:removeObserver:forTrigger:");
}

id objc_msgSend_feedController_requestToRenderSharableImage_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedController:requestToRenderSharableImage:completion:");
}

id objc_msgSend_feedController_requestToSetNavigationBarHidden_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedController:requestToSetNavigationBarHidden:animated:");
}

id objc_msgSend_feedController_scrollToItem_animated_skipVoiceOverFocus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedController:scrollToItem:animated:skipVoiceOverFocus:");
}

id objc_msgSend_feedController_viewStateDidUpdate_fromPreviousState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedController:viewStateDidUpdate:fromPreviousState:");
}

id objc_msgSend_feedController_wantsToAppendCards_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedController:wantsToAppendCards:options:");
}

id objc_msgSend_feedController_wantsToCreateNewFeedWithOptions_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedController:wantsToCreateNewFeedWithOptions:completion:");
}

id objc_msgSend_feedController_wantsToDismissViewControllerAnimated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedController:wantsToDismissViewControllerAnimated:completion:");
}

id objc_msgSend_feedController_wantsToPerformRawActionModel_shouldReportFigaro_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedController:wantsToPerformRawActionModel:shouldReportFigaro:");
}

id objc_msgSend_feedController_wantsToPopToRootViewControllerAnimated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedController:wantsToPopToRootViewControllerAnimated:completion:");
}

id objc_msgSend_feedController_wantsToPopViewController_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedController:wantsToPopViewController:completion:");
}

id objc_msgSend_feedController_wantsToPresentCardsWithCardArray_focusedIndex_animated_options_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedController:wantsToPresentCardsWithCardArray:focusedIndex:animated:options:completion:");
}

id objc_msgSend_feedController_wantsToPresentViewController_animated_params_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedController:wantsToPresentViewController:animated:params:");
}

id objc_msgSend_feedController_wantsToPresentViewControllerInPopover_withParams_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedController:wantsToPresentViewControllerInPopover:withParams:");
}

id objc_msgSend_feedController_wantsToPushViewController_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedController:wantsToPushViewController:animated:");
}

id objc_msgSend_feedController_wantsToReplaceCurrentViewController_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedController:wantsToReplaceCurrentViewController:animated:");
}

id objc_msgSend_feedController_wantsToSlideInFeedViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedController:wantsToSlideInFeedViewController:");
}

id objc_msgSend_feedController_wantsToUpdateContentWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedController:wantsToUpdateContentWithData:");
}

id objc_msgSend_feedController_wantsToUpdateNavBarBackgroundOpacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedController:wantsToUpdateNavBarBackgroundOpacity:");
}

id objc_msgSend_feedController_wantsToUpdateSearchText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedController:wantsToUpdateSearchText:");
}

id objc_msgSend_feedControllerDidUpdateMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedControllerDidUpdateMetadata:");
}

id objc_msgSend_feedControllerIsOnScreen_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedControllerIsOnScreen:");
}

id objc_msgSend_feedControllerWillHotReload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedControllerWillHotReload:");
}

id objc_msgSend_fileExistsAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:");
}

id objc_msgSend_fileExistsAtPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:isDirectory:");
}

id objc_msgSend_finishWithResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishWithResult:");
}

id objc_msgSend_firstWeekday(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstWeekday");
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "floatValue");
}

id objc_msgSend_generalExecutionRecordQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generalExecutionRecordQueue");
}

id objc_msgSend_generateCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateCache");
}

id objc_msgSend_get_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "get:completion:");
}

id objc_msgSend_getItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getItem:");
}

id objc_msgSend_globalObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "globalObject");
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasProperty:");
}

id objc_msgSend_hasReachabilityCallbackScheduled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasReachabilityCallbackScheduled");
}

id objc_msgSend_hasRecommendationsEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasRecommendationsEnabled");
}

id objc_msgSend_hasStarted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasStarted");
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_headers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headers");
}

id objc_msgSend_hideLoadingViewForFeedController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hideLoadingViewForFeedController:");
}

id objc_msgSend_host(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "host");
}

id objc_msgSend_hostViewControllerForFeedController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hostViewControllerForFeedController:");
}

id objc_msgSend_hosting(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hosting");
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identifier");
}

id objc_msgSend_imageWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageWithData:");
}

id objc_msgSend_incrementPostLaunchCacheCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incrementPostLaunchCacheCount");
}

id objc_msgSend_indexOfObjectPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObjectPassingTest:");
}

id objc_msgSend_indexedCookies(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexedCookies");
}

id objc_msgSend_infoDictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "infoDictionary");
}

id objc_msgSend_initByReferencingFileURL_MIMEType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initByReferencingFileURL:MIMEType:");
}

id objc_msgSend_initWithActivityItems_applicationActivities_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithActivityItems:applicationActivities:");
}

id objc_msgSend_initWithArray_ownerObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArray:ownerObject:");
}

id objc_msgSend_initWithBase64EncodedString_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBase64EncodedString:options:");
}

id objc_msgSend_initWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBlock:");
}

id objc_msgSend_initWithCallback_callbackArgs_ownerObject_repeating_interval_timer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCallback:callbackArgs:ownerObject:repeating:interval:timer:");
}

id objc_msgSend_initWithClientIdentifier_bag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClientIdentifier:bag:");
}

id objc_msgSend_initWithConfiguration_delegate_delegateQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:delegate:delegateQueue:");
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:encoding:");
}

id objc_msgSend_initWithDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:");
}

id objc_msgSend_initWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionary:");
}

id objc_msgSend_initWithFireDate_interval_target_selector_userInfo_repeats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFireDate:interval:target:selector:userInfo:repeats:");
}

id objc_msgSend_initWithHosting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHosting:");
}

id objc_msgSend_initWithItemProvider_properties_placeholderImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithItemProvider:properties:placeholderImage:");
}

id objc_msgSend_initWithKey_valueType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKey:valueType:");
}

id objc_msgSend_initWithLaunching_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLaunching:");
}

id objc_msgSend_initWithLaunching_onQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLaunching:onQueue:");
}

id objc_msgSend_initWithManagedValue_method_arguments_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithManagedValue:method:arguments:type:");
}

id objc_msgSend_initWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:");
}

id objc_msgSend_initWithName_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:value:");
}

id objc_msgSend_initWithNativeCookie_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNativeCookie:");
}

id objc_msgSend_initWithNotifyBlock_blockDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNotifyBlock:blockDescription:");
}

id objc_msgSend_initWithProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProperties:");
}

id objc_msgSend_initWithRequest_bag_presentingViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequest:bag:presentingViewController:");
}

id objc_msgSend_initWithRequest_presentingViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequest:presentingViewController:");
}

id objc_msgSend_initWithTarget_selector_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTarget:selector:object:");
}

id objc_msgSend_initWithTitle_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTitle:block:");
}

id objc_msgSend_initWithTokenService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTokenService:");
}

id objc_msgSend_initWithTokenService_bag_cookiesToSuppress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTokenService:bag:cookiesToSuppress:");
}

id objc_msgSend_initWithURL_cachePolicy_timeoutInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:cachePolicy:timeoutInterval:");
}

id objc_msgSend_initWithValue_method_arguments_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithValue:method:arguments:type:");
}

id objc_msgSend_initWithWindowProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithWindowProvider:");
}

id objc_msgSend_integerForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "integerForKey:");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "integerValue");
}

id objc_msgSend_interval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interval");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidate");
}

id objc_msgSend_invalidationTimers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidationTimers");
}

id objc_msgSend_invocationWithMethodSignature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invocationWithMethodSignature:");
}

id objc_msgSend_invoke(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invoke");
}

id objc_msgSend_invokeMethod_withArguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invokeMethod:withArguments:");
}

id objc_msgSend_isAccountModificationAllowed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAccountModificationAllowed");
}

id objc_msgSend_isArray(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isArray");
}

id objc_msgSend_isBookStoreAllowed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBookStoreAllowed");
}

id objc_msgSend_isBoolean(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBoolean");
}

id objc_msgSend_isBundled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBundled");
}

id objc_msgSend_isDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDate");
}

id objc_msgSend_isDirty(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDirty");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToArray:");
}

id objc_msgSend_isEqualToNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToNumber:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isExplicitContentAllowed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isExplicitContentAllowed");
}

id objc_msgSend_isFileURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFileURL");
}

id objc_msgSend_isFinished(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFinished");
}

id objc_msgSend_isGlobalICloudDriveSyncOptedIn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isGlobalICloudDriveSyncOptedIn");
}

id objc_msgSend_isInstanceOf_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInstanceOf:");
}

id objc_msgSend_isInternalBuild(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInternalBuild");
}

id objc_msgSend_isKeyWindow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isKeyWindow");
}

id objc_msgSend_isLoaded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLoaded");
}

id objc_msgSend_isMainThread(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMainThread");
}

id objc_msgSend_isNull(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNull");
}

id objc_msgSend_isNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNumber");
}

id objc_msgSend_isObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isObject");
}

id objc_msgSend_isPresentedForFeedController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPresentedForFeedController:");
}

id objc_msgSend_isReachable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isReachable");
}

id objc_msgSend_isRepeating(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRepeating");
}

id objc_msgSend_isRunningInStoreDemoMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRunningInStoreDemoMode");
}

id objc_msgSend_isRunningOfflineCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRunningOfflineCache");
}

id objc_msgSend_isRunningOnThread(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRunningOnThread");
}

id objc_msgSend_isScriptLoaded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isScriptLoaded");
}

id objc_msgSend_isSecure(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSecure");
}

id objc_msgSend_isSessionOnly(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSessionOnly");
}

id objc_msgSend_isStoreAccountManagedAppleID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isStoreAccountManagedAppleID");
}

id objc_msgSend_isString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isString");
}

id objc_msgSend_isUserSignedInToiCloud(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isUserSignedInToiCloud");
}

id objc_msgSend_isValueManaged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isValueManaged");
}

id objc_msgSend_jsBootstrapEndTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jsBootstrapEndTime");
}

id objc_msgSend_jsBootstrapStartTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jsBootstrapStartTime");
}

id objc_msgSend_jsValuesWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jsValuesWithContext:");
}

id objc_msgSend_jsa_colorWithHexString_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jsa_colorWithHexString:alpha:");
}

id objc_msgSend_jsa_initWithScriptingCookie_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jsa_initWithScriptingCookie:");
}

id objc_msgSend_jsa_isSafeExternalURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jsa_isSafeExternalURL");
}

id objc_msgSend_jsa_normalizedArtworkURLOfSize_withFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jsa_normalizedArtworkURLOfSize:withFormat:");
}

id objc_msgSend_jsa_openExternalURL_options_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jsa_openExternalURL:options:completionHandler:");
}

id objc_msgSend_jsa_parametrize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jsa_parametrize:");
}

id objc_msgSend_jsa_queryStringForParameters_escapedValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jsa_queryStringForParameters:escapedValues:");
}

id objc_msgSend_jsa_sharedApplicationIfNotExtension(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jsa_sharedApplicationIfNotExtension");
}

id objc_msgSend_jsa_stringDictionaryForRequestHeaderOrURLParam(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jsa_stringDictionaryForRequestHeaderOrURLParam");
}

id objc_msgSend_jsa_topMostViewControllerForWindow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jsa_topMostViewControllerForWindow:");
}

id objc_msgSend_jsa_validBooleanValueForProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jsa_validBooleanValueForProperty:");
}

id objc_msgSend_jsa_validIntegerValueForProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jsa_validIntegerValueForProperty:");
}

id objc_msgSend_jsa_validURLValueForProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jsa_validURLValueForProperty:");
}

id objc_msgSend_jsa_valueWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jsa_valueWithError:");
}

id objc_msgSend_key(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "key");
}

id objc_msgSend_keyEntries(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyEntries");
}

id objc_msgSend_keyWindow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyWindow");
}

id objc_msgSend_keyWindowSceneIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyWindowSceneIdentifier");
}

id objc_msgSend_keyWindowSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyWindowSize");
}

id objc_msgSend_lastBagStorefront(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastBagStorefront");
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastObject");
}

id objc_msgSend_lastPathComponent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastPathComponent");
}

id objc_msgSend_lastScriptCacheDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastScriptCacheDate");
}

id objc_msgSend_launchCorrelationKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchCorrelationKey");
}

id objc_msgSend_launchEndTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchEndTime");
}

id objc_msgSend_launchExecutionRecordQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchExecutionRecordQueue");
}

id objc_msgSend_launchPackageProvisioner(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchPackageProvisioner");
}

id objc_msgSend_launchiCloudFamilySettings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchiCloudFamilySettings");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "length");
}

id objc_msgSend_loadScript_name_version_isBundled_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadScript:name:version:isBundled:completion:");
}

id objc_msgSend_loadScriptFromPackage_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadScriptFromPackage:completion:");
}

id objc_msgSend_localApproveRequestWithItemIdentifier_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localApproveRequestWithItemIdentifier:completion:");
}

id objc_msgSend_localStoreAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localStoreAccount");
}

id objc_msgSend_localeIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localeIdentifier");
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedDescription");
}

id objc_msgSend_localizedFailureReason(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedFailureReason");
}

id objc_msgSend_logUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logUUID");
}

id objc_msgSend_lowercaseRestrictedHeaders(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lowercaseRestrictedHeaders");
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lowercaseString");
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainBundle");
}

id objc_msgSend_mainScreen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainScreen");
}

id objc_msgSend_makeKeyWindow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeKeyWindow");
}

id objc_msgSend_managedArgs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "managedArgs");
}

id objc_msgSend_managedCallback(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "managedCallback");
}

id objc_msgSend_managedValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "managedValue");
}

id objc_msgSend_managedValueWithValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "managedValueWithValue:");
}

id objc_msgSend_managedValueWithValue_andOwner_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "managedValueWithValue:andOwner:");
}

id objc_msgSend_markJSBootstrapEndTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markJSBootstrapEndTime");
}

id objc_msgSend_markJSBootstrapStartTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markJSBootstrapStartTime");
}

id objc_msgSend_markLaunchEndTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markLaunchEndTime");
}

id objc_msgSend_maximumAge(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maximumAge");
}

id objc_msgSend_message(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "message");
}

id objc_msgSend_metadata(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metadata");
}

id objc_msgSend_method(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "method");
}

id objc_msgSend_methodSignatureForSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "methodSignatureForSelector:");
}

id objc_msgSend_metricsDictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metricsDictionary");
}

id objc_msgSend_metricsForFeedController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metricsForFeedController:");
}

id objc_msgSend_model(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "model");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutableCopy");
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "name");
}

id objc_msgSend_nameForJSContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nameForJSContext");
}

id objc_msgSend_nativeJSObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nativeJSObject");
}

id objc_msgSend_navigationBarInitialBackgroundOpacity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationBarInitialBackgroundOpacity");
}

id objc_msgSend_networkCallbackValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "networkCallbackValue");
}

id objc_msgSend_newAnalyticsSessionAssertionForFeedController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newAnalyticsSessionAssertionForFeedController:");
}

id objc_msgSend_newAnalyticsSessionExtendingAssertionForFeedController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newAnalyticsSessionExtendingAssertionForFeedController:");
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "null");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithFloat:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "object");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_objectRegistrationsForBridge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectRegistrationsForBridge:");
}

id objc_msgSend_onResponse(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onResponse");
}

id objc_msgSend_onTimeoutManagedValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onTimeoutManagedValue");
}

id objc_msgSend_openSensitiveURL_withOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openSensitiveURL:withOptions:");
}

id objc_msgSend_openURL_referrerURL_referrerApplicationName_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openURL:referrerURL:referrerApplicationName:options:");
}

id objc_msgSend_options(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "options");
}

id objc_msgSend_originURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "originURL");
}

id objc_msgSend_packagePromise(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "packagePromise");
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "path");
}

id objc_msgSend_pendingBlocks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pendingBlocks");
}

id objc_msgSend_pendingPackageVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pendingPackageVersion");
}

id objc_msgSend_performAuthentication(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAuthentication");
}

id objc_msgSend_performSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:");
}

id objc_msgSend_personalized(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "personalized");
}

id objc_msgSend_popoverPresentationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "popoverPresentationController");
}

id objc_msgSend_portList(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "portList");
}

id objc_msgSend_postNotificationName_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:");
}

id objc_msgSend_postNotificationName_object_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:userInfo:");
}

id objc_msgSend_preferredLocalizations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredLocalizations");
}

id objc_msgSend_present(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "present");
}

id objc_msgSend_presentEngagement(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentEngagement");
}

id objc_msgSend_presentViewController_::(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentViewController:::");
}

id objc_msgSend_presentViewController_animated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentViewController:animated:completion:");
}

id objc_msgSend_presentedViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentedViewController");
}

id objc_msgSend_presentingViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentingViewController");
}

id objc_msgSend_promiseWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "promiseWithError:");
}

id objc_msgSend_promiseWithResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "promiseWithResult:");
}

id objc_msgSend_properties(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "properties");
}

id objc_msgSend_provisionWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "provisionWithCompletionHandler:");
}

id objc_msgSend_reachabilityRef(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reachabilityRef");
}

id objc_msgSend_recordValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordValue");
}

id objc_msgSend_records(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "records");
}

id objc_msgSend_registerBagKeySet_forProfile_profileVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerBagKeySet:forProfile:profileVersion:");
}

id objc_msgSend_registerItemForTypeIdentifier_loadHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerItemForTypeIdentifier:loadHandler:");
}

id objc_msgSend_registerObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerObjects:");
}

id objc_msgSend_registerTemplateBundlesFromPackage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerTemplateBundlesFromPackage:");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllObjects");
}

id objc_msgSend_removeItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItem:");
}

id objc_msgSend_removeManagedReference_withOwner_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeManagedReference:withOwner:");
}

id objc_msgSend_removeManagedReferences(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeManagedReferences");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:");
}

id objc_msgSend_removeObserver_accountTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:accountTypes:");
}

id objc_msgSend_removeObserver_forKeyPath_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:forKeyPath:context:");
}

id objc_msgSend_replaceOccurrencesOfString_withString_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceOccurrencesOfString:withString:options:range:");
}

id objc_msgSend_requestEntriesCompletionBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestEntriesCompletionBlock");
}

id objc_msgSend_requestEntriesWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestEntriesWithCompletion:");
}

id objc_msgSend_requestStartDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestStartDate");
}

id objc_msgSend_requestWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithURL:");
}

id objc_msgSend_requestWithURL_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithURL:completionHandler:");
}

id objc_msgSend_requiredBlockingBagLoad(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requiredBlockingBagLoad");
}

id objc_msgSend_resetImpressionsForFeedController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetImpressionsForFeedController:");
}

id objc_msgSend_resourceFetchType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceFetchType");
}

id objc_msgSend_responseCorrelationId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "responseCorrelationId");
}

id objc_msgSend_responseEndDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "responseEndDate");
}

id objc_msgSend_responseForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "responseForKey:");
}

id objc_msgSend_responseHeaders(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "responseHeaders");
}

id objc_msgSend_responseStartDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "responseStartDate");
}

id objc_msgSend_responseStatusCode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "responseStatusCode");
}

id objc_msgSend_restrictionHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restrictionHandler");
}

id objc_msgSend_restrictionsQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restrictionsQueue");
}

id objc_msgSend_resultWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resultWithCompletion:");
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resume");
}

id objc_msgSend_rootViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rootViewController");
}

id objc_msgSend_runFromCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runFromCache");
}

id objc_msgSend_runLoop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runLoop");
}

id objc_msgSend_runLoopSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runLoopSource");
}

id objc_msgSend_scale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scale");
}

id objc_msgSend_scanHexInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanHexInt:");
}

id objc_msgSend_scannerWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scannerWithString:");
}

id objc_msgSend_scheme(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheme");
}

id objc_msgSend_sessionWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionWithConfiguration:");
}

id objc_msgSend_setAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccount:");
}

id objc_msgSend_setAccountHandlers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountHandlers:");
}

id objc_msgSend_setActivityItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivityItem:");
}

id objc_msgSend_setAllowsCellularAccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsCellularAccess:");
}

id objc_msgSend_setArgument_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setArgument:atIndex:");
}

id objc_msgSend_setBarButtonItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBarButtonItem:");
}

id objc_msgSend_setBody_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBody:");
}

id objc_msgSend_setCallback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCallback:");
}

id objc_msgSend_setCharactersToBeSkipped_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCharactersToBeSkipped:");
}

id objc_msgSend_setCoalescingDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCoalescingDelay:");
}

id objc_msgSend_setCompletionWithItemsHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletionWithItemsHandler:");
}

id objc_msgSend_setCookieStorageChangeHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCookieStorageChangeHandler:");
}

id objc_msgSend_setCurrentPackage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentPackage:");
}

id objc_msgSend_setDataSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDataSource:");
}

id objc_msgSend_setDateStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateStyle:");
}

id objc_msgSend_setExceptionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExceptionHandler:");
}

id objc_msgSend_setExcludedActivityTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExcludedActivityTypes:");
}

id objc_msgSend_setFeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFeed:");
}

id objc_msgSend_setFeedBridged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFeedBridged:");
}

id objc_msgSend_setHTTPBody_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHTTPBody:");
}

id objc_msgSend_setHTTPMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHTTPMethod:");
}

id objc_msgSend_setHTTPShouldUsePipelining_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHTTPShouldUsePipelining:");
}

id objc_msgSend_setHasReachabilityCallbackScheduled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasReachabilityCallbackScheduled:");
}

id objc_msgSend_setHasStarted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasStarted:");
}

id objc_msgSend_setHeaders_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHeaders:");
}

id objc_msgSend_setHost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHost:");
}

id objc_msgSend_setImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImage:");
}

id objc_msgSend_setIndexedCookies_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIndexedCookies:");
}

id objc_msgSend_setInspectable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInspectable:");
}

id objc_msgSend_setInvalidationTimers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvalidationTimers:");
}

id objc_msgSend_setIsLoadingScript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsLoadingScript:");
}

id objc_msgSend_setIsScriptLoaded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsScriptLoaded:");
}

id objc_msgSend_setItem::(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItem::");
}

id objc_msgSend_setKeyWindow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyWindow:");
}

id objc_msgSend_setKeyWindowSceneIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyWindowSceneIdentifier:");
}

id objc_msgSend_setKeyWindowSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyWindowSize:");
}

id objc_msgSend_setLastBagStorefront_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastBagStorefront:");
}

id objc_msgSend_setLastScriptCacheDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastScriptCacheDate:");
}

id objc_msgSend_setLaunchExecutionRecordQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLaunchExecutionRecordQueue:");
}

id objc_msgSend_setLaunchPackageProvisioner_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLaunchPackageProvisioner:");
}

id objc_msgSend_setLocalizedDateFormatFromTemplate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalizedDateFormatFromTemplate:");
}

id objc_msgSend_setMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMethod:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setName:");
}

id objc_msgSend_setNetworkCallbackValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNetworkCallbackValue:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOptions:");
}

id objc_msgSend_setOutput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOutput:");
}

id objc_msgSend_setPackagePromise_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPackagePromise:");
}

id objc_msgSend_setPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPath:");
}

id objc_msgSend_setPendingPackageVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingPackageVersion:");
}

id objc_msgSend_setPerformanceMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerformanceMetrics:");
}

id objc_msgSend_setPresentingViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPresentingViewController:");
}

id objc_msgSend_setProtocolHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProtocolHandler:");
}

id objc_msgSend_setQualityOfService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQualityOfService:");
}

id objc_msgSend_setQueryItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueryItems:");
}

id objc_msgSend_setReachabilityRef_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReachabilityRef:");
}

id objc_msgSend_setRequestCachePolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestCachePolicy:");
}

id objc_msgSend_setRequestEntriesCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestEntriesCompletionBlock:");
}

id objc_msgSend_setResponse_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResponse:forKey:");
}

id objc_msgSend_setScheme_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScheme:");
}

id objc_msgSend_setSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelector:");
}

id objc_msgSend_setSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSession:");
}

id objc_msgSend_setSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSource:");
}

id objc_msgSend_setSourceView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSourceView:");
}

id objc_msgSend_setState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setState:");
}

id objc_msgSend_setStatusCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStatusCode:");
}

id objc_msgSend_setSummary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSummary:");
}

id objc_msgSend_setTarget_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTarget:");
}

id objc_msgSend_setTemplateRegistrationPromise_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTemplateRegistrationPromise:");
}

id objc_msgSend_setTimeStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeStyle:");
}

id objc_msgSend_setTimeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeZone:");
}

id objc_msgSend_setTimeoutInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeoutInterval:");
}

id objc_msgSend_setTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitle:");
}

id objc_msgSend_setURLCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setURLCache:");
}

id objc_msgSend_setUrl_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUrl:");
}

id objc_msgSend_setValue_forHTTPHeaderField_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forHTTPHeaderField:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_setValue_forProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forProperty:");
}

id objc_msgSend_setWindowManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWindowManager:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_set_atsContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_atsContext:");
}

id objc_msgSend_set_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_error:");
}

id objc_msgSend_setup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setup");
}

id objc_msgSend_setupWithPackage_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupWithPackage:completion:");
}

id objc_msgSend_sharedController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedController");
}

id objc_msgSend_sharedHTTPCookieStorage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedHTTPCookieStorage");
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedInstance");
}

id objc_msgSend_sharedOfflineCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedOfflineCache");
}

id objc_msgSend_sharedProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedProvider");
}

id objc_msgSend_sharedURLCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedURLCache");
}

id objc_msgSend_shouldSuppressResponseDialogs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldSuppressResponseDialogs");
}

id objc_msgSend_showLoadingViewForFeedController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showLoadingViewForFeedController:");
}

id objc_msgSend_signOutWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signOutWithCompletion:");
}

id objc_msgSend_signalWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signalWithCompletion:");
}

id objc_msgSend_sortedArrayUsingSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingSelector:");
}

id objc_msgSend_source(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "source");
}

id objc_msgSend_standardUserDefaults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "standardUserDefaults");
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "start");
}

id objc_msgSend_startWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startWithCompletion:");
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "state");
}

id objc_msgSend_statusCode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusCode");
}

id objc_msgSend_storeDidAttemptSignOut_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeDidAttemptSignOut:");
}

id objc_msgSend_storeWillAttemptSignOut_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeWillAttemptSignOut:");
}

id objc_msgSend_stringByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingPathComponent:");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForKey:");
}

id objc_msgSend_stringFromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromDate:");
}

id objc_msgSend_stringFromDate_dateFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromDate:dateFormat:");
}

id objc_msgSend_stringFromDate_dateStyle_timeStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromDate:dateStyle:timeStyle:");
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringValue");
}

id objc_msgSend_stringWithContentsOfFile_encoding_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithContentsOfFile:encoding:error:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithString:");
}

id objc_msgSend_subarrayWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subarrayWithRange:");
}

id objc_msgSend_subscribe_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscribe:");
}

id objc_msgSend_synchronize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronize");
}

id objc_msgSend_taskMetrics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "taskMetrics");
}

id objc_msgSend_tearDownWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tearDownWithCompletion:");
}

id objc_msgSend_templateBundleRegistrar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "templateBundleRegistrar");
}

id objc_msgSend_templateRegistrationPromise(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "templateRegistrationPromise");
}

id objc_msgSend_thenWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "thenWithBlock:");
}

id objc_msgSend_thread(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "thread");
}

id objc_msgSend_threadDictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "threadDictionary");
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSince1970");
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceReferenceDate");
}

id objc_msgSend_timeZoneForSecondsFromGMT_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeZoneForSecondsFromGMT:");
}

id objc_msgSend_timer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timer");
}

id objc_msgSend_timerWithTimeInterval_target_selector_userInfo_repeats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timerWithTimeInterval:target:selector:userInfo:repeats:");
}

id objc_msgSend_title(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "title");
}

id objc_msgSend_toArray(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toArray");
}

id objc_msgSend_toBool(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toBool");
}

id objc_msgSend_toDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toDate");
}

id objc_msgSend_toDictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toDictionary");
}

id objc_msgSend_toNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toNumber");
}

id objc_msgSend_toObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toObject");
}

id objc_msgSend_toObjectOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toObjectOfClass:");
}

id objc_msgSend_toString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toString");
}

id objc_msgSend_traitCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "traitCollection");
}

id objc_msgSend_transactionMetrics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transactionMetrics");
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "type");
}

id objc_msgSend_unarchivedObjectOfClasses_fromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchivedObjectOfClasses:fromData:error:");
}

id objc_msgSend_uniqueIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uniqueIdentifier");
}

id objc_msgSend_unregisterOnNetworkChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterOnNetworkChange");
}

id objc_msgSend_unsubscribe_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsubscribe:");
}

id objc_msgSend_updateContentWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateContentWithData:");
}

id objc_msgSend_updateQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateQueue");
}

id objc_msgSend_updateWindowSizeIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWindowSizeIfNeeded:");
}

id objc_msgSend_upgradePackage_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "upgradePackage:completion:");
}

id objc_msgSend_url(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "url");
}

id objc_msgSend_usedBootstrapFallback(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "usedBootstrapFallback");
}

id objc_msgSend_userAgentForProcessInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userAgentForProcessInfo:");
}

id objc_msgSend_userDefaults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userDefaults");
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInfo");
}

id objc_msgSend_userInterfaceIdiom(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInterfaceIdiom");
}

id objc_msgSend_username(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "username");
}

id objc_msgSend_value(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "value");
}

id objc_msgSend_valueForProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForProperty:");
}

id objc_msgSend_valueType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueType");
}

id objc_msgSend_valueWithBytes_objCType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithBytes:objCType:");
}

id objc_msgSend_valueWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithCompletion:");
}

id objc_msgSend_valueWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithError:");
}

id objc_msgSend_valueWithJSValueRef_inContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithJSValueRef:inContext:");
}

id objc_msgSend_valueWithNewObjectInContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithNewObjectInContext:");
}

id objc_msgSend_valueWithObject_inContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithObject:inContext:");
}

id objc_msgSend_values(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "values");
}

id objc_msgSend_version(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "version");
}

id objc_msgSend_view(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "view");
}

id objc_msgSend_viewIfLoaded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewIfLoaded");
}

id objc_msgSend_viewState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewState");
}

id objc_msgSend_virtualMachine(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "virtualMachine");
}

id objc_msgSend_weakToStrongObjectsMapTable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weakToStrongObjectsMapTable");
}

id objc_msgSend_window(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "window");
}

id objc_msgSend_windowFromOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "windowFromOptions:");
}

id objc_msgSend_windowHostingWindowSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "windowHostingWindowSize");
}

id objc_msgSend_windowManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "windowManager");
}

id objc_msgSend_windowProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "windowProvider");
}

id objc_msgSend_windowProviderForBridge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "windowProviderForBridge:");
}

id objc_msgSend_windowScene(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "windowScene");
}

id objc_msgSend_writeToFile_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToFile:options:error:");
}

id objc_msgSend_zoomWithSourceViewProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zoomWithSourceViewProvider:");
}
