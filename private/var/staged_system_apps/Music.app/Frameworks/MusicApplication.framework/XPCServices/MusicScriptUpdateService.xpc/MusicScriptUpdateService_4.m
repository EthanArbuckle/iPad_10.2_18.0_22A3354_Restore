uint64_t CTRunRef.status.getter()
{
  const __CTRun *v0;

  return CTRunGetStatus(v0);
}

CFIndex CTRunRef.stringIndices.getter()
{
  return sub_100209B38((uint64_t)&type metadata for Int, (void (*)(const __CTRun *, _QWORD, _QWORD, _QWORD *))&_CTRunGetStringIndices);
}

char *sub_1002097E8(char *result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t i;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (uint64_t)result;
  v2 = *((_QWORD *)result + 2);
  if (v2 < 2)
    return (char *)v1;
  v3 = 0;
  v4 = v2 >> 1;
  for (i = v2 + 3; ; --i)
  {
    if (v3 == i - 4)
      goto LABEL_5;
    v6 = *(_QWORD *)(v1 + 16);
    if (v3 >= v6)
      break;
    if (i - 4 >= v6)
      goto LABEL_12;
    v7 = *(_QWORD *)(v1 + 8 * v3 + 32);
    v8 = *(_QWORD *)(v1 + 8 * i);
    result = (char *)swift_isUniquelyReferenced_nonNull_native(v1);
    if ((result & 1) == 0)
    {
      result = sub_100223A9C(v1);
      v1 = (uint64_t)result;
    }
    *(_QWORD *)(v1 + 8 * v3 + 32) = v8;
    *(_QWORD *)(v1 + 8 * i) = v7;
LABEL_5:
    if (v4 == ++v3)
      return (char *)v1;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_1002098A0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  char v7;
  unint64_t v8;
  uint64_t i;
  id v10;
  void *v11;
  char v12;
  uint64_t v13;

  v3 = result;
  if ((unint64_t)a2 >> 62)
    goto LABEL_21;
  v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v4)
  {
    if ((a2 & 0xC000000000000001) != 0)
    {
      v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
    }
    else
    {
      if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return result;
      }
      v5 = *(id *)(a2 + 32);
    }
    v6 = v5;
    sub_10020AF10();
    v7 = static NSObject.== infix(_:_:)(v6, v3);

    if ((v7 & 1) != 0)
      return 0;
    for (i = 0; ; ++i)
    {
      v8 = i + 1;
      if (__OFADD__(i, 1))
        break;
      if (v8 == v4)
        return 0;
      if ((a2 & 0xC000000000000001) != 0)
      {
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i + 1, a2);
      }
      else
      {
        if ((v8 & 0x8000000000000000) != 0)
          goto LABEL_19;
        if (v8 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_20;
        v10 = *(id *)(a2 + 32 + 8 * v8);
      }
      v11 = v10;
      v12 = static NSObject.== infix(_:_:)(v10, v3);

      if ((v12 & 1) != 0)
        return v8;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    if (a2 < 0)
      v13 = a2;
    else
      v13 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter(v13);
    result = swift_bridgeObjectRelease();
  }
  return 0;
}

Swift::Void __swiftcall CTRunRef.draw(in:range:)(CGContextRef in, __C::_NSRange range)
{
  const __CTRun *v2;

  CTRunDraw(v2, in, (CFRange)range);
}

double CTRunRef.typographicBounds(range:)(CFRange range)
{
  const __CTRun *v1;

  return CTRunGetTypographicBounds(v1, range, 0, 0, 0);
}

double CTRunRef.typographicBounds(forGlyphAtIndex:)(CFRange range)
{
  const __CTRun *v1;
  CFRange v3;

  v3.location = range.location;
  v3.length = 1;
  return CTRunGetTypographicBounds(v1, v3, 0, 0, 0);
}

CFIndex CTRunRef.cfStringRange.getter()
{
  const __CTRun *v0;

  return CTRunGetStringRange(v0).location;
}

CFIndex CTRunRef.positions.getter()
{
  const __CTRun *v0;
  CFIndex result;
  CFIndex v2;
  uint64_t v3;
  uint64_t v4;
  const __CTRun *v5;
  CGPoint *v6;
  const __CTRun *v7;
  CFRange v8;

  result = CTRunGetGlyphCount(v0);
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = result;
    if (result)
    {
      _s3__C7CGPointVMa_0(0);
      v4 = v3;
      v5 = v0;
      v6 = (CGPoint *)static Array._allocateBufferUninitialized(minimumCapacity:)(v2, v4);
      *(_QWORD *)&v6[1].x = v2;
    }
    else
    {
      v7 = v0;
      v6 = (CGPoint *)_swiftEmptyArrayStorage;
    }
    v8.location = 0;
    v8.length = 0;
    CTRunGetPositions(v0, v8, v6 + 2);
    result = CTRunGetGlyphCount(v0);
    if (v2 >= result)
    {
      *(_QWORD *)&v6[1].x = result;

      return (CFIndex)v6;
    }
  }
  __break(1u);
  return result;
}

CFIndex CTRunRef.glyphCount.getter()
{
  const __CTRun *v0;

  return CTRunGetGlyphCount(v0);
}

CFIndex CTRunRef.glyphs.getter()
{
  return sub_100209B38((uint64_t)&type metadata for UInt16, (void (*)(const __CTRun *, _QWORD, _QWORD, _QWORD *))&CTRunGetGlyphs);
}

CFIndex sub_100209B38(uint64_t a1, void (*a2)(const __CTRun *, _QWORD, _QWORD, _QWORD *))
{
  const __CTRun *v2;
  CFIndex result;
  CFIndex v6;
  const __CTRun *v7;
  _QWORD *v8;

  result = CTRunGetGlyphCount(v2);
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = result;
    v7 = v2;
    if (v6)
    {
      v8 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(v6, a1);
      v8[2] = v6;
    }
    else
    {
      v8 = &_swiftEmptyArrayStorage;
    }
    a2(v7, 0, 0, v8 + 4);
    result = CTRunGetGlyphCount(v7);
    if (v6 >= result)
    {
      v8[2] = result;

      return (CFIndex)v8;
    }
  }
  __break(1u);
  return result;
}

void *CTLabel.Frame.colorOverride.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;
  _BYTE v5[24];

  v1 = (void **)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_colorOverride);
  swift_beginAccess(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_colorOverride, v5, 0, 0);
  v2 = *v1;
  v3 = v2;
  return v2;
}

void CTLabel.Frame.colorOverride.setter(void *a1)
{
  char *v1;
  void **v3;
  void *v4;
  id v5;
  _BYTE v6[24];

  v3 = (void **)&v1[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_colorOverride];
  swift_beginAccess(&v1[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_colorOverride], v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  v5 = a1;

  objc_msgSend(v1, "setNeedsDisplay");
}

id (*CTLabel.Frame.colorOverride.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess(v1 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_colorOverride, a1, 33, 0);
  return sub_100209CDC;
}

id sub_100209CDC(uint64_t a1, char a2)
{
  id result;

  result = (id)swift_endAccess(a1);
  if ((a2 & 1) == 0)
    return objc_msgSend(*(id *)(a1 + 24), "setNeedsDisplay");
  return result;
}

id CTLabel.Frame.__allocating_init(ctFrame:suggestedSize:colorOverride:)(void *a1, void *a2, double a3, double a4)
{
  objc_class *v4;
  char *v9;
  void **v10;
  double *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  objc_super v17;
  _BYTE v18[24];

  v9 = (char *)objc_allocWithZone(v4);
  v10 = (void **)&v9[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_colorOverride];
  *v10 = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_ctFrame] = a1;
  v11 = (double *)&v9[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_suggestedSize];
  *v11 = a3;
  v11[1] = a4;
  swift_beginAccess(v10, v18, 1, 0);
  v12 = *v10;
  *v10 = a2;
  v13 = a1;
  v14 = a2;

  v17.receiver = v9;
  v17.super_class = v4;
  v15 = objc_msgSendSuper2(&v17, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);

  return v15;
}

id CTLabel.Frame.init(ctFrame:suggestedSize:colorOverride:)(void *a1, void *a2, double a3, double a4)
{
  char *v4;
  void **v7;
  double *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  objc_super v14;
  _BYTE v15[24];

  v7 = (void **)&v4[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_colorOverride];
  *v7 = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_ctFrame] = a1;
  v8 = (double *)&v4[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_suggestedSize];
  *v8 = a3;
  v8[1] = a4;
  swift_beginAccess(v7, v15, 1, 0);
  v9 = *v7;
  *v7 = a2;
  v10 = a1;
  v11 = a2;

  v14.receiver = v4;
  v14.super_class = (Class)type metadata accessor for CTLabel.Frame();
  v12 = objc_msgSendSuper2(&v14, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);

  return v12;
}

double CTLabel.Frame.sizeThatFits(_:)()
{
  uint64_t v0;

  return *(double *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_suggestedSize);
}

void CTLabel.Frame.draw(_:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  uint64_t v4;
  CGContext *v9;
  CGContext *v10;
  id *v11;
  id v12;
  CGColor *v13;
  _BYTE v14[24];
  CGRect v15;

  v9 = UIGraphicsGetCurrentContext();
  if (v9)
  {
    v10 = v9;
    CGContextTranslateCTM(v9, 0.0, *(CGFloat *)(v4 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_suggestedSize + 8));
    CGContextScaleCTM(v10, 1.0, -1.0);
    CTFrameDraw(*(CTFrameRef *)(v4 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_ctFrame), v10);
    v11 = (id *)(v4 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_colorOverride);
    swift_beginAccess(v11, v14, 0, 0);
    if (*v11)
    {
      v12 = *v11;
      CGContextSetBlendMode(v10, kCGBlendModeOverlay);
      v13 = (CGColor *)objc_msgSend(v12, "CGColor");
      CGContextSetFillColorWithColor(v10, v13);

      v15.origin.x = a1;
      v15.origin.y = a2;
      v15.size.width = a3;
      v15.size.height = a4;
      CGContextFillRect(v10, v15);

    }
  }
}

void CTLabel.Frame.init(frame:)()
{
  sub_10020A7A4((uint64_t)"MusicUtilities.Frame", 20);
}

id CTLabel.Frame.__deallocating_deinit()
{
  return sub_10018E6F4(type metadata accessor for CTLabel.Frame);
}

id CTLabel.Line.__allocating_init(ctLine:size:useExtendedLineBounds:)(void *a1, char a2, double a3, double a4)
{
  objc_class *v4;
  _BYTE *v9;
  double *v10;
  id v11;
  id v12;
  objc_super v14;

  v9 = objc_allocWithZone(v4);
  *(_QWORD *)&v9[OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_ctLine] = a1;
  v10 = (double *)&v9[OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_size];
  *v10 = a3;
  v10[1] = a4;
  v9[OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_useExtendedLineBounds] = a2;
  v14.receiver = v9;
  v14.super_class = v4;
  v11 = a1;
  v12 = objc_msgSendSuper2(&v14, "initWithFrame:", 0.0, 0.0, a3, a4);
  objc_msgSend(v12, "setOpaque:", 0, v14.receiver, v14.super_class);

  return v12;
}

id CTLabel.Line.init(ctLine:size:useExtendedLineBounds:)(void *a1, char a2, double a3, double a4)
{
  _BYTE *v4;
  double *v8;
  id v9;
  id v10;
  objc_super v12;

  *(_QWORD *)&v4[OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_ctLine] = a1;
  v8 = (double *)&v4[OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_size];
  *v8 = a3;
  v8[1] = a4;
  v4[OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_useExtendedLineBounds] = a2;
  v12.receiver = v4;
  v12.super_class = (Class)type metadata accessor for CTLabel.Line();
  v9 = a1;
  v10 = objc_msgSendSuper2(&v12, "initWithFrame:", 0.0, 0.0, a3, a4);
  objc_msgSend(v10, "setOpaque:", 0, v12.receiver, v12.super_class);

  return v10;
}

void CTLabel.Line.init(frame:)()
{
  sub_10020A7A4((uint64_t)"MusicUtilities.Line", 19);
}

id CTLabel.Line.__deallocating_deinit()
{
  return sub_10018E6F4(type metadata accessor for CTLabel.Line);
}

id CTLabel.Run.__allocating_init(ctRun:size:range:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  objc_class *v5;
  char *v11;
  double *v12;
  char *v13;
  objc_super v15;

  v11 = (char *)objc_allocWithZone(v5);
  *(_QWORD *)&v11[OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_ctRun] = a1;
  v12 = (double *)&v11[OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_size];
  *v12 = a4;
  v12[1] = a5;
  v13 = &v11[OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_range];
  *(_QWORD *)v13 = a2;
  *((_QWORD *)v13 + 1) = a3;
  v15.receiver = v11;
  v15.super_class = v5;
  return objc_msgSendSuper2(&v15, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
}

id CTLabel.Run.init(ctRun:size:range:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  char *v5;
  double *v6;
  char *v7;
  objc_super v9;

  *(_QWORD *)&v5[OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_ctRun] = a1;
  v6 = (double *)&v5[OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_size];
  *v6 = a4;
  v6[1] = a5;
  v7 = &v5[OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_range];
  *(_QWORD *)v7 = a2;
  *((_QWORD *)v7 + 1) = a3;
  v9.receiver = v5;
  v9.super_class = (Class)type metadata accessor for CTLabel.Run();
  return objc_msgSendSuper2(&v9, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
}

double CTLabel.Run.sizeThatFits(_:)()
{
  uint64_t v0;

  return *(double *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_size);
}

void CTLabel.Run.init(frame:)()
{
  sub_10020A7A4((uint64_t)"MusicUtilities.Run", 18);
}

id CTLabel.Run.__deallocating_deinit()
{
  return sub_10018E6F4(type metadata accessor for CTLabel.Run);
}

id CTLabel.Glyph.__allocating_init(cgGlyph:size:)(__int16 a1, double a2, double a3)
{
  objc_class *v3;
  char *v7;
  double *v8;
  objc_super v10;

  v7 = (char *)objc_allocWithZone(v3);
  *(_WORD *)&v7[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Glyph_cgGlyph] = a1;
  v8 = (double *)&v7[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Glyph_size];
  *v8 = a2;
  v8[1] = a3;
  v10.receiver = v7;
  v10.super_class = v3;
  return objc_msgSendSuper2(&v10, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
}

id CTLabel.Glyph.init(cgGlyph:size:)(__int16 a1, double a2, double a3)
{
  char *v3;
  double *v4;
  objc_super v6;

  *(_WORD *)&v3[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Glyph_cgGlyph] = a1;
  v4 = (double *)&v3[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Glyph_size];
  *v4 = a2;
  v4[1] = a3;
  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for CTLabel.Glyph();
  return objc_msgSendSuper2(&v6, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
}

double CTLabel.Glyph.sizeThatFits(_:)()
{
  uint64_t v0;

  return *(double *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Glyph_size);
}

id UIStackView.SpacerView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), "initWithFrame:", a1, a2, a3, a4);
}

void CTLabel.Glyph.init(frame:)()
{
  sub_10020A7A4((uint64_t)"MusicUtilities.Glyph", 20);
}

void sub_10020A7A4(uint64_t a1, uint64_t a2)
{
  _swift_stdlib_reportUnimplementedInitializer(a1, a2, "init(frame:)", 12, 0);
  __break(1u);
}

void sub_10020A7D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _swift_stdlib_reportUnimplementedInitializer(a3, a4, "init(frame:)", 12, 0);
  __break(1u);
}

id CTLabel.Glyph.__deallocating_deinit()
{
  return sub_10018E6F4(type metadata accessor for CTLabel.Glyph);
}

_QWORD *sub_10020A808(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  uint64_t v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_100497970);
    v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[5 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    v14 = sub_100005574(&qword_100497978);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v14);
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_10020A93C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_100497968);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_10020AA34(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_100497950);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for String);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

size_t sub_10020AB34(size_t a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10003EDE4(a1, a2, a3, a4, &qword_100497948, (uint64_t (*)(_QWORD))&type metadata accessor for URLQueryItem);
}

size_t sub_10020AB48(size_t a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10003EDE4(a1, a2, a3, a4, &qword_100497980, _s9_ObserverC18HandlerAssociationVMa);
}

CGPoint **sub_10020AB5C(CGPoint **result, const __CTFrame *a2)
{
  uint64_t v2;
  CGPoint *v4;
  uint64_t v5;
  CGPoint *v6;
  CGPoint *v7[2];
  CGFloat v8;

  if (((unint64_t)result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v4 = (CGPoint *)result;
  if (result)
  {
    _s3__C7CGPointVMa_0(0);
    v6 = (CGPoint *)static Array._allocateBufferUninitialized(minimumCapacity:)(v4, v5);
    *(_QWORD *)&v6[1].x = v4;
  }
  else
  {
    v6 = (CGPoint *)_swiftEmptyArrayStorage;
  }
  v7[1] = v4;
  v8 = 0.0;
  v7[0] = v6 + 2;
  result = sub_100208BF8(v7, (uint64_t *)&v8, a2);
  if (v2)
  {
    if (*(uint64_t *)&v8 <= (uint64_t)v4)
    {
      v6[1].x = v8;
      swift_bridgeObjectRelease();
      return (CGPoint **)v6;
    }
    goto LABEL_12;
  }
  if (*(uint64_t *)&v8 <= (uint64_t)v4)
  {
    v6[1].x = v8;
    return (CGPoint **)v6;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for CTLabel.Frame()
{
  return objc_opt_self(_TtCO14MusicUtilities7CTLabel5Frame);
}

uint64_t type metadata accessor for CTLabel.Line()
{
  return objc_opt_self(_TtCO14MusicUtilities7CTLabel4Line);
}

void _s14MusicUtilities7CTLabelO4LineC4drawyySo6CGRectVF_0()
{
  uint64_t v0;
  CGContext *v1;
  CTLineBoundsOptions v2;
  double y;
  double v4;
  double v5;
  CGContext *c;
  CGRect BoundsWithOptions;

  v1 = UIGraphicsGetCurrentContext();
  if (v1)
  {
    c = v1;
    CGContextTranslateCTM(v1, 0.0, *(CGFloat *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_size + 8));
    CGContextScaleCTM(c, 1.0, -1.0);
    if (*(_BYTE *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_useExtendedLineBounds))
      v2 = 32;
    else
      v2 = 0;
    BoundsWithOptions = CTLineGetBoundsWithOptions((CTLineRef)*(_QWORD *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_ctLine), v2);
    y = BoundsWithOptions.origin.y;
    v4 = CGContextRef.textPosition.getter((__n128)BoundsWithOptions.origin);
    CGContextRef.textPosition.setter(v4, v5 - y);
    CTLineDraw(*(CTLineRef *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_ctLine), c);

  }
}

uint64_t type metadata accessor for CTLabel.Run()
{
  return objc_opt_self(_TtCO14MusicUtilities7CTLabel3Run);
}

void _s14MusicUtilities7CTLabelO3RunC4drawyySo6CGRectVF_0()
{
  uint64_t v0;
  CGContext *v1;
  CGContext *c;

  v1 = UIGraphicsGetCurrentContext();
  if (v1)
  {
    c = v1;
    CGContextTranslateCTM(v1, 0.0, *(CGFloat *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_size + 8));
    CGContextScaleCTM(c, 1.0, -1.0);
    CTRunDraw(*(CTRunRef *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_ctRun), c, *(CFRange *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_range));

  }
}

uint64_t type metadata accessor for CTLabel.Glyph()
{
  return objc_opt_self(_TtCO14MusicUtilities7CTLabel5Glyph);
}

CGContext *_s14MusicUtilities7CTLabelO5GlyphC4drawyySo6CGRectVF_0()
{
  uint64_t v0;
  CGContext *result;
  CGContext *v2;
  uint64_t v3;
  Swift::OpaquePointer v4;
  uint64_t v5;
  Swift::OpaquePointer v6;

  result = UIGraphicsGetCurrentContext();
  if (result)
  {
    v2 = result;
    CGContextTranslateCTM(result, 0.0, *(CGFloat *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Glyph_size + 8));
    CGContextScaleCTM(v2, 1.0, -1.0);
    v3 = sub_100005574(&qword_100497958);
    v4._rawValue = (void *)swift_allocObject(v3, 34, 7);
    *((_OWORD *)v4._rawValue + 1) = xmmword_100384A80;
    *((_WORD *)v4._rawValue + 16) = *(_WORD *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Glyph_cgGlyph);
    v5 = sub_100005574(&qword_100497960);
    v6._rawValue = (void *)swift_allocObject(v5, 48, 7);
    *((_OWORD *)v6._rawValue + 1) = xmmword_100384A80;
    *((_QWORD *)v6._rawValue + 4) = 0;
    *((_QWORD *)v6._rawValue + 5) = 0;
    CGContextRef.showGlyphs(_:at:)(v4, v6);

    swift_bridgeObjectRelease();
    return (CGContext *)swift_bridgeObjectRelease();
  }
  return result;
}

ValueMetadata *type metadata accessor for CTLabel()
{
  return &type metadata for CTLabel;
}

unint64_t sub_10020AF10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100497EA0;
  if (!qword_100497EA0)
  {
    v1 = objc_opt_self(UIViewController);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100497EA0);
  }
  return result;
}

uint64_t static OS_dispatch_queue.asyncOnMainIfNeeded(_:)(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  __n128 v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void **aBlock;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  void *v31;
  uint64_t (*v32)(void);
  uint64_t v33;
  uint64_t v34;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend((id)objc_opt_self(NSThread), "isMainThread"))
    return a1();
  v13 = sub_1001FF558();
  v21 = (void *)static OS_dispatch_queue.main.getter(v13, v14, v15, v16, v17, v18, v19, v20, aBlock, v29, v30, v31, v32, v33, v34);
  v32 = a1;
  v33 = a2;
  aBlock = _NSConcreteStackBlock;
  v29 = 1107296256;
  v30 = sub_1000BED80;
  v31 = &unk_100457A58;
  v22 = _Block_copy(&aBlock);
  v23 = v33;
  swift_retain(a2);
  v24 = swift_release(v23);
  static DispatchQoS.unspecified.getter(v24);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v25 = sub_10020081C();
  v26 = sub_100005574((uint64_t *)&unk_100497EE0);
  v27 = sub_1001FF5AC();
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v26, v27, v4, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10020B124(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_10020B134(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t DeinitTriggeredClosure.__allocating_init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_allocObject(v2, 32, 7);
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t DeinitTriggeredClosure.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

uint64_t DeinitTriggeredClosure.deinit()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;

  v1 = v0;
  v2 = *(void (**)(void))(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v2();
  swift_release(v3);
  return v1;
}

uint64_t DeinitTriggeredClosure.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;

  v1 = v0;
  v2 = *(void (**)(void))(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v2();
  swift_release(v3);
  return swift_deallocClassInstance(v1, 32, 7);
}

void static OS_dispatch_queue.syncOnMainIfNeeded(_:)(void (*a1)(void), uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  __n128 v16;
  _QWORD v17[5];
  uint64_t v18;

  if (objc_msgSend((id)objc_opt_self(NSThread), "isMainThread"))
  {
    a1();
  }
  else
  {
    v4 = sub_1001FF558();
    v12 = static OS_dispatch_queue.main.getter(v4, v5, v6, v7, v8, v9, v10, v11);
    v13 = swift_allocObject(&unk_100457A90, 32, 7);
    *(_QWORD *)(v13 + 16) = a1;
    *(_QWORD *)(v13 + 24) = a2;
    v17[4] = sub_1000B0290;
    v18 = v13;
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 1107296256;
    v17[2] = sub_100009BD0;
    v17[3] = &unk_100457AA8;
    v14 = _Block_copy(v17);
    v15 = v18;
    swift_retain(v13);
    swift_release(v15);
    dispatch_sync((dispatch_queue_t)v12, v14);

    _Block_release(v14);
    LOBYTE(v12) = swift_isEscapingClosureAtFileLocation(v13, "", 135, 40, 46, 1, v16);
    swift_release(v13);
    if ((v12 & 1) != 0)
      __break(1u);
  }
}

uint64_t sub_10020B318()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void OS_dispatch_queue.asyncAfter(_:block:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t);
  void *v21;
  __n128 v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD aBlock[5];
  uint64_t v30;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v27 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchTime(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v26 - v18;
  static DispatchTime.now()(v17);
  + infix(_:_:)(v16, a3);
  v20 = *(void (**)(char *, uint64_t))(v13 + 8);
  v20(v16, v12);
  aBlock[4] = a1;
  v30 = a2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000BED80;
  aBlock[3] = &unk_100457AD0;
  v21 = _Block_copy(aBlock);
  swift_retain(a2);
  static DispatchQoS.unspecified.getter(v22);
  v28 = _swiftEmptyArrayStorage;
  v23 = sub_10020081C();
  v24 = sub_100005574((uint64_t *)&unk_100497EE0);
  v25 = sub_1001FF5AC();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v24, v25, v6, v23);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v19, v11, v8, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v26);
  v20(v19, v12);
  swift_release(v30);
}

double OS_dispatch_queue.asyncAfterUIFeedbackDeadline(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  double result;
  uint64_t v23;
  _QWORD *v24;
  _QWORD aBlock[5];
  uint64_t v26;

  v4 = type metadata accessor for DispatchTime(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v23 - v9;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock[4] = a1;
  v26 = a2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000BED80;
  aBlock[3] = &unk_100457AF8;
  v14 = _Block_copy(aBlock);
  v24 = _swiftEmptyArrayStorage;
  v15 = sub_10020081C();
  swift_retain(a2);
  v16 = sub_100005574((uint64_t *)&unk_100497EE0);
  v17 = sub_1001FF5AC();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v16, v17, v11, v15);
  v18 = type metadata accessor for DispatchWorkItem(0);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v19 = DispatchWorkItem.init(flags:block:)(v13, v14);
  swift_release(v26);
  static DispatchTime.now()(v20);
  + infix(_:_:)(v8, 2.0);
  v21 = *(void (**)(char *, uint64_t))(v5 + 8);
  v21(v8, v4);
  OS_dispatch_queue.asyncAfter(deadline:execute:)(v10, v19);
  v21(v10, v4);
  *(_QWORD *)&result = swift_release(v19).n128_u64[0];
  return result;
}

uint64_t OS_dispatch_queue.asyncAfterUIFeedbackDeadline(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, uint64_t);
  uint64_t v12;

  v2 = type metadata accessor for DispatchTime(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v12 - v8;
  static DispatchTime.now()(v7);
  + infix(_:_:)(v6, 2.0);
  v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v6, v2);
  OS_dispatch_queue.asyncAfter(deadline:execute:)(v9, a1);
  return ((uint64_t (*)(char *, uint64_t))v10)(v9, v2);
}

uint64_t static OS_dispatch_queue.UIFeedbackDeadline.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v0 = type metadata accessor for DispatchTime(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchTime.now()(v2);
  + infix(_:_:)(v4, 2.0);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t type metadata accessor for DeinitTriggeredClosure()
{
  return objc_opt_self(_TtC14MusicUtilities22DeinitTriggeredClosure);
}

void NSFileManager.createDirectoryIfNeeded(at:)()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  unsigned int v5;
  NSURL *v6;
  void *v7;
  void *v8;
  unsigned int v9;
  NSURL *v10;
  NSURL *v11;
  void *v12;
  void *v13;
  unsigned int v14;
  NSURL *v15;
  NSURL *v16;
  __n128 v17;
  NSURL *v18;

  v1 = v0;
  URL.path.getter();
  v3 = v2;
  LOBYTE(v18) = 0;
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v0, "fileExistsAtPath:isDirectory:", v4, &v18);
  swift_bridgeObjectRelease(v3);

  if (v5)
  {
    if ((v18 & 1) != 0)
      return;
    URL._bridgeToObjectiveC()((NSURL *)v18);
    v8 = v7;
    v18 = 0;
    v9 = objc_msgSend(v0, "removeItemAtURL:error:", v7, &v18);

    v10 = v18;
    if (!v9)
      goto LABEL_7;
    v11 = v18;
  }
  URL._bridgeToObjectiveC()(v6);
  v13 = v12;
  v18 = 0;
  v14 = objc_msgSend(v1, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v12, 1, 0, &v18);

  v10 = v18;
  if (v14)
  {
    v15 = v18;
    return;
  }
LABEL_7:
  v16 = v10;
  _convertNSErrorToError(_:)(v10);

  swift_willThrow(v17);
}

Swift::tuple_exists_Bool_isDirectory_Bool __swiftcall NSFileManager.directoryExists(at:)(Swift::String at)
{
  void *v1;
  NSString v2;
  unsigned __int8 v3;
  Swift::Bool v4;
  Swift::Bool v5;
  Swift::tuple_exists_Bool_isDirectory_Bool result;
  char v7;

  v7 = 0;
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "fileExistsAtPath:isDirectory:", v2, &v7);

  v5 = v3;
  result.isDirectory = v4;
  result.exists = v5;
  return result;
}

uint64_t NSFileManager.groupCacheURL(for:)@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  NSString v14;
  id v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v2 = v1;
  v4 = sub_100005574(&qword_100497A28);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v20 - v8;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = String._bridgeToObjectiveC()();
  v15 = objc_msgSend(v2, "containerURLForSecurityApplicationGroupIdentifier:", v14);

  if (v15)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v15);

    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v16(v7, 0, 1, v10);
  }
  else
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v16(v7, 1, 1, v10);
  }
  sub_10020BC94((uint64_t)v7, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_10020BCDC((uint64_t)v9);
    v17 = 1;
  }
  else
  {
    URL.appendingPathComponent(_:isDirectory:)(0x7972617262694CLL, 0xE700000000000000, 1);
    v18 = *(void (**)(char *, uint64_t))(v11 + 8);
    v18(v9, v10);
    URL.appendingPathComponent(_:isDirectory:)(0x736568636143, 0xE600000000000000, 1);
    v18(v13, v10);
    v17 = 0;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v16)(a1, v17, 1, v10);
}

uint64_t sub_10020BC94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005574(&qword_100497A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10020BCDC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005574(&qword_100497A28);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10020BD20()
{
  unint64_t result;

  result = qword_100497A30;
  if (!qword_100497A30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NSFileManager.Failure, &type metadata for NSFileManager.Failure);
    atomic_store(result, (unint64_t *)&qword_100497A30);
  }
  return result;
}

uint64_t _s7FailureOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10020BDA8 + 4 * asc_100393B28[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10020BDC8 + 4 * byte_100393B2D[v4]))();
}

_BYTE *sub_10020BDA8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10020BDC8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10020BDD0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10020BDD8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10020BDE0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10020BDE8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NSFileManager.Failure()
{
  return &type metadata for NSFileManager.Failure;
}

uint64_t String.sha256Data.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  v4 = type metadata accessor for SHA256Digest(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for String.Encoding(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter(v10);
  v13 = String.data(using:allowLossyConversion:)(v12, 0, a1, a2);
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  if (v15 >> 60 != 15)
  {
    sub_1000516F8(v13, v15);
    Data.Digest.SHA256.getter(v13, v15);
    sub_1000067D4(v13, v15);
    v23 = v4;
    v16 = sub_100006924(&qword_100497A38, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256Digest, (uint64_t)&protocol conformance descriptor for SHA256Digest);
    v24 = v16;
    v17 = sub_1000207D4(v22);
    (*(void (**)(_QWORD *, char *, uint64_t))(v5 + 16))(v17, v7, v4);
    sub_10000ABC8(v22, v23);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)(&v21, sub_10018FBE0, 0, &type metadata for Data._Representation, v4, v16);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v18 = v21;
    sub_10000682C(v22);
    sub_1000067D4(v13, v15);
    return v18;
  }
  return v13;
}

uint64_t Data.digest.getter(uint64_t a1, unint64_t a2)
{
  sub_1000516F8(a1, a2);
  return a1;
}

void Data.Digest.SHA256.getter(uint64_t a1, unint64_t a2)
{
  sub_10020C114(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, &qword_100497A40, (uint64_t)&protocol conformance descriptor for SHA256);
}

void Data.Digest.MD5.getter(uint64_t a1, unint64_t a2)
{
  sub_10020C114(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for Insecure.MD5, &qword_100497A48, (uint64_t)&protocol conformance descriptor for Insecure.MD5);
}

void Data.Digest.SHA512.getter(uint64_t a1, unint64_t a2)
{
  sub_10020C114(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for SHA512, &qword_100497A50, (uint64_t)&protocol conformance descriptor for SHA512);
}

void sub_10020C114(uint64_t a1, unint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;

  v10 = a3(0);
  __chkstk_darwin(v10);
  sub_1000516F8(a1, a2);
  v11 = sub_100006924(a4, a3, a5);
  dispatch thunk of HashFunction.init()(v10, v11);
  __asm { BR              X9 }
}

uint64_t sub_10020C1E4()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 - 112) = v1;
  *(_WORD *)(v5 - 104) = v0;
  *(_BYTE *)(v5 - 102) = BYTE2(v0);
  *(_BYTE *)(v5 - 101) = BYTE3(v0);
  *(_BYTE *)(v5 - 100) = BYTE4(v0);
  *(_BYTE *)(v5 - 99) = BYTE5(v0);
  dispatch thunk of HashFunction.update(bufferPointer:)(v5 - 112, v5 - 112 + BYTE6(v0), v2, v4);
  sub_1000067E8(v1, v0);
  ((void (*)(uint64_t, uint64_t))dispatch thunk of HashFunction.finalize())(v2, v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 128) + 8))(v3, v2);
  return sub_1000067E8(v1, v0);
}

uint64_t sub_10020C3BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = __DataStorage._bytes.getter();
  v13 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v13 += a1 - result;
  }
  v14 = __OFSUB__(a2, a1);
  v15 = a2 - a1;
  if (v14)
  {
    __break(1u);
    goto LABEL_13;
  }
  v16 = __DataStorage._length.getter();
  if (v16 >= v15)
    v17 = v15;
  else
    v17 = v16;
  v18 = v13 + v17;
  if (v13)
    v19 = v18;
  else
    v19 = 0;
  v20 = a5(0);
  v21 = sub_100006924(a6, a5, a7);
  return dispatch thunk of HashFunction.update(bufferPointer:)(v13, v19, v20, v21);
}

uint64_t *_s6DigestVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_1000516F8(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t _s6DigestVwxx(uint64_t a1)
{
  return sub_1000067E8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *_s6DigestVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  sub_1000516F8(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_1000067E8(v5, v6);
  return a1;
}

uint64_t *_s6DigestVwta(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1000067E8(v3, v4);
  return a1;
}

uint64_t _s6DigestVwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t _s6DigestVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Data.Digest()
{
  return &type metadata for Data.Digest;
}

uint64_t sub_10020C608(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;

  if (a5 >= 1)
    v5 = a4;
  else
    v5 = 0;
  if (!a2)
  {
LABEL_19:
    a3 = 0;
    goto LABEL_20;
  }
  if (!a3)
  {
LABEL_20:
    *(_QWORD *)result = a4;
    *(_QWORD *)(result + 8) = a5;
    *(_QWORD *)(result + 16) = v5;
    *(_BYTE *)(result + 24) = a5 < 1;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v6 = a4 + a5;
    v7 = __OFADD__(a4, a5);
    if (v5 > v6)
      v6 = v5;
    if (a5 >= 1)
    {
      v8 = 0;
      v9 = v6 - v5;
      while (!v7)
      {
        if (v9 == v8)
        {
          v5 += v8;
          a3 = v9;
          goto LABEL_20;
        }
        *(_QWORD *)(a2 + 8 * v8) = v5 + v8;
        if (a3 - 1 == v8)
        {
          v5 += v8 + 1;
          goto LABEL_20;
        }
        ++v8;
      }
      __break(1u);
      goto LABEL_24;
    }
    v5 = 0;
    goto LABEL_19;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t Array.append(_:if:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t);
  char v12;
  uint64_t v14;

  v6 = *(_QWORD *)(a4 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(a1);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v11(v8);
  if ((v12 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
    Array.append(_:)(v10, a4);
  }
  return v12 & 1;
}

uint64_t Array.append<A>(contentsOf:if:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(uint64_t);
  char v15;
  uint64_t v17;

  v10 = *(_QWORD *)(a5 - 8);
  v11 = __chkstk_darwin(a1);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v14(v11);
  if ((v15 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, a5);
    Array.append<A>(contentsOf:)(v13, a4, a5, a6);
  }
  return v15 & 1;
}

uint64_t Array.item(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t WitnessTable;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v10 = type metadata accessor for Array(0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v10);
  Collection.firstIndex(where:)(&v14, a1, a2, v10, WitnessTable);
  if ((v15 & 1) != 0)
  {
    v12 = 1;
  }
  else
  {
    Array.subscript.getter(v14, a3, a4);
    v12 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(a5, v12, 1, a4);
}

Swift::Void __swiftcall Array.moveItem(at:to:)(Swift::Int at, Swift::Int to)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = v2;
  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(at);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v14 - v11;
  Array.remove(at:)(v10, v13);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v12, v5);
  Array.insert(_:at:)(v9, to, v3);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
}

uint64_t Array.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  v8 = type metadata accessor for Array(0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v8);
  RandomAccessCollection<>.indices.getter(&v15, v8, WitnessTable, &protocol witness table for Int);
  v14 = v15;
  v13 = a1;
  v10 = sub_100005574(&qword_100497A60);
  if ((Range.contains(_:)(&v13, v10) & 1) != 0)
  {
    Array.subscript.getter(a1, a2, a3);
    v11 = 0;
  }
  else
  {
    v11 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a4, v11, 1, a3);
}

uint64_t Array.inserting(separator:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[4];

  v4[2] = a3;
  v4[3] = a1;
  return Array.inserting(separator:)((uint64_t)sub_10020CAC0, (uint64_t)v4, a2, a3);
}

uint64_t sub_10020CAC0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v1 + 16) - 8) + 16))(a1, *(_QWORD *)(v1 + 24));
}

uint64_t Array.inserting(separator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD v12[10];

  v5 = a3;
  result = Array.count.getter(a3, a4);
  if (result < 2)
  {
    swift_bridgeObjectRetain();
    return v5;
  }
  if (result + 0x4000000000000000 >= 0)
  {
    v12[8] = 0;
    v12[9] = 2 * result - 1;
    __chkstk_darwin(result);
    v12[2] = a4;
    v12[3] = v5;
    v12[4] = a1;
    v12[5] = a2;
    v9 = sub_100005574(&qword_100497A60);
    v10 = sub_10020CF04();
    return sub_10020CC14((void (*)(char *, char *))sub_10020CBCC, (uint64_t)v12, v9, a4, (uint64_t)&type metadata for Never, v10, (uint64_t)&protocol witness table for Never, v11);
  }
  __break(1u);
  return result;
}

uint64_t sub_10020CBCC(_QWORD *a1)
{
  uint64_t v1;

  if ((*a1 & 1) != 0)
    return (*(uint64_t (**)(void))(v1 + 32))();
  else
    return Array.subscript.getter(*a1 / 2, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 16));
}

uint64_t sub_10020CC14(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  uint64_t result;
  Swift::Int v29;
  void (*v30)(_BYTE *, _QWORD);
  void (*v31)(char *);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *);
  uint64_t v49;
  char *v50;
  Swift::Int v51;
  uint64_t v52;
  _BYTE v53[32];
  uint64_t v54;

  v40 = a5;
  v41 = a8;
  v48 = a1;
  v49 = a2;
  v39 = *(_QWORD *)(a5 - 8);
  __chkstk_darwin(a1);
  v50 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(v13 + 8));
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = __chkstk_darwin(AssociatedTypeWitness);
  v18 = (char *)&v39 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = swift_getAssociatedTypeWitness(0, a6);
  v42 = *(_QWORD *)(v21 - 8);
  v43 = v21;
  __chkstk_darwin(v21);
  v23 = (char *)&v39 - v22;
  v24 = dispatch thunk of Collection.count.getter(a3, a6);
  if (!v24)
    return static Array._allocateUninitialized(_:)(0, a4);
  v46 = AssociatedTypeWitness;
  v25 = v8;
  v26 = a4;
  v27 = v24;
  v54 = ContiguousArray.init()(v26);
  v44 = type metadata accessor for ContiguousArray(0, v26);
  ContiguousArray.reserveCapacity(_:)(v27);
  v47 = v25;
  result = dispatch thunk of Collection.startIndex.getter(a3);
  if ((v27 & 0x8000000000000000) == 0)
  {
    v29 = v27;
    v45 = v20;
    while (v29)
    {
      v51 = v29;
      v30 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read(v53, v23, a3, a6);
      v31 = *(void (**)(char *))(v15 + 16);
      v32 = v15;
      v33 = v46;
      v31(v18);
      v30(v53, 0);
      v34 = v23;
      v35 = v18;
      v36 = v45;
      v37 = v52;
      v48(v35, v50);
      if (v37)
      {
        (*(void (**)(char *, uint64_t))(v32 + 8))(v35, v33);
        (*(void (**)(char *, uint64_t))(v42 + 8))(v34, v43);
        v38 = swift_release(v54);
        return (*(uint64_t (**)(uint64_t, char *, uint64_t, __n128))(v39 + 32))(v41, v50, v40, v38);
      }
      v52 = 0;
      (*(void (**)(char *, uint64_t))(v32 + 8))(v35, v33);
      ContiguousArray.append(_:)(v36, v44);
      result = dispatch thunk of Collection.formIndex(after:)(v34, a3, a6);
      v29 = v51 - 1;
      v15 = v32;
      v18 = v35;
      v23 = v34;
      if (v51 == 1)
      {
        (*(void (**)(char *, uint64_t))(v42 + 8))(v34, v43);
        return v54;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_10020CF04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100497A68;
  if (!qword_100497A68)
  {
    v1 = sub_100005600(&qword_100497A60);
    sub_10020CF70();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Range<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100497A68);
  }
  return result;
}

unint64_t sub_10020CF70()
{
  unint64_t result;

  result = qword_100497A70;
  if (!qword_100497A70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_100497A70);
  }
  return result;
}

uint64_t Set.insert(_:if:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(uint64_t);
  char v14;
  uint64_t v16;

  v8 = *(_QWORD *)(a5 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(a1);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v13(v10) & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
    v14 = Set.insert(_:)(a1, v12, a5);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, 1, 1, v8);
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t Set<>.first<A>(alike:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t WitnessTable;
  _QWORD v10[10];

  v10[9] = a2;
  v10[2] = a3;
  v10[3] = a4;
  v10[4] = a5;
  v10[5] = a6;
  v10[6] = a7;
  v10[7] = a1;
  v7 = type metadata accessor for Set(0, a3, a5);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v7);
  return Sequence.first(where:)(sub_10020D268, v10, v7, WitnessTable);
}

uint64_t sub_10020D120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedConformanceWitness;
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;

  v22 = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a6);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = __chkstk_darwin(AssociatedTypeWitness);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v21 - v15;
  dispatch thunk of Identifiable.id.getter(a3, a6);
  dispatch thunk of Identifiable.id.getter(a4, v22);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a6, a3, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v18 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v14, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v14, AssociatedTypeWitness);
  v19(v16, AssociatedTypeWitness);
  return v18 & 1;
}

uint64_t sub_10020D268(uint64_t a1)
{
  uint64_t *v1;

  return sub_10020D120(a1, v1[7], v1[2], v1[3], v1[4], v1[5], v1[6]) & 1;
}

uint64_t NSBundle.displayName.getter()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v1 = objc_msgSend(v0, "localizedInfoDictionary");
  if (!v1)
  {
    v8 = 0u;
    v9 = 0u;
    goto LABEL_11;
  }
  v2 = v1;
  v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  if (!*(_QWORD *)(v3 + 16)
    || (v4 = sub_1002121C8(0xD000000000000013, 0x80000001003B7130, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10009AC10), (v5 & 1) == 0))
  {
    v8 = 0u;
    v9 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  sub_10000684C(*(_QWORD *)(v3 + 56) + 32 * v4, (uint64_t)&v8);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v9 + 1))
  {
LABEL_11:
    sub_100008758((uint64_t)&v8, &qword_100497470);
    return 0;
  }
  if (swift_dynamicCast(&v7, &v8, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    return v7;
  else
    return 0;
}

uint64_t NSBundle.exportedTypeDeclarations.getter()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "objectForInfoDictionaryKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_1002015B0((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    v3 = sub_100005574(&qword_100497A78);
    if (swift_dynamicCast(&v5, v7, (char *)&type metadata for Any + 8, v3, 6))
      return v5;
    else
      return 0;
  }
  else
  {
    sub_100008758((uint64_t)v7, &qword_100497470);
    return 0;
  }
}

uint64_t Comparable.clamp(to:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for ClosedRange(0);
  return ClosedRange.clamp(_:)(v0, v1);
}

uint64_t ClosedRange.clamp(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a2 + 24);
  max<A>(_:_:)(v2);
  min<A>(_:_:)(v7, v2 + *(int *)(a2 + 36), v4, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ClosedRange<>.scaledValue(relativeTo:relativeValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t AssociatedConformanceWitness;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v51 = a5;
  v50 = a4;
  v44 = a2;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) + 8);
  v8 = *(_QWORD *)(v7 + 16);
  v9 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v8);
  v11 = __chkstk_darwin(AssociatedTypeWitness);
  v13 = (char *)&v43 - v12;
  v14 = __chkstk_darwin(v11);
  v46 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v43 - v17;
  v19 = __chkstk_darwin(v16);
  v47 = (char *)&v43 - v20;
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v43 - v22;
  __chkstk_darwin(v21);
  v25 = (char *)&v43 - v24;
  v48 = a3;
  v49 = v7;
  v26 = a1 + *(int *)(a3 + 36);
  v27 = *(_QWORD *)(v7 + 8);
  v45 = a1;
  v28 = a1;
  v30 = v29;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)(v26, v28, v9, v27);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, v9, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_1003929D0, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  v32 = v13;
  v33 = v50;
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v32, v9, v8);
  LOBYTE(v7) = dispatch thunk of static Comparable.> infix(_:_:)(v25, v23, v9, *(_QWORD *)(*(_QWORD *)(v33 + 24) + 8));
  v34 = *(void (**)(char *, uint64_t))(v30 + 8);
  v34(v23, v9);
  if ((v7 & 1) != 0)
  {
    v35 = v45;
    v36 = v27;
    v37 = v48;
    ClosedRange.clamp(_:)(v44, v48);
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)(v23, v35, v9, v36);
    v38 = v47;
    dispatch thunk of static FloatingPoint./ infix(_:_:)(v18, v25, v9, v33);
    v34(v18, v9);
    v39 = *(int *)(v37 + 36);
    v40 = v52;
    v41 = v46;
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)(v52 + v39, v52, v9, v36);
    dispatch thunk of static Numeric.* infix(_:_:)(v41, v38, v9, v49);
    v34(v41, v9);
    dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)(v18, v40, v9, v36);
    v34(v18, v9);
    v34(v38, v9);
    v34(v23, v9);
    return ((uint64_t (*)(char *, uint64_t))v34)(v25, v9);
  }
  else
  {
    v34(v25, v9);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v51, v52, v9);
  }
}

void Data.hexRepresentation.getter(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10020D90C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  __int16 v4;
  char v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v3 = v0;
  v4 = v1;
  v5 = BYTE2(v1);
  v6 = BYTE3(v1);
  v7 = BYTE4(v1);
  v8 = BYTE5(v1);
  sub_10020DB00((uint64_t)&v3, (uint64_t)&v3 + BYTE6(v1), v0, v1);
  sub_1000067E8(v0, v1);
  if (v10)
    return v9;
  else
    return 0;
}

void sub_10020DB00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v5);
  __asm { BR              X9 }
}

uint64_t sub_10020DB80()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  uint8x16_t v21;
  unint64_t v22;
  int8x16_t *v23;
  char *v24;
  int8x16_t v25;
  uint8x16_t v26;
  uint8x16_t v27;
  int8x16_t v28;
  unint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  char v33;
  unsigned int v34;
  int v35;
  int v36;
  char v37;
  uint64_t result;
  uint64_t v39;
  int8x16x2_t v40;

  if (BYTE6(v4) + 0x4000000000000000 < 0)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v6 = swift_slowAlloc(2 * BYTE6(v4), -1);
  v7 = v6;
  if (!v5)
  {
    v8 = BYTE6(v4);
    goto LABEL_9;
  }
  if (v5 == 1)
  {
    LODWORD(v8) = HIDWORD(v3) - v3;
    if (!__OFSUB__(HIDWORD(v3), (_DWORD)v3))
    {
      v8 = (int)v8;
      goto LABEL_8;
    }
    __break(1u);
LABEL_36:
    __break(1u);
    JUMPOUT(0x10020DD98);
  }
  v10 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  v11 = __OFSUB__(v9, v10);
  v8 = v9 - v10;
  if (v11)
    goto LABEL_36;
LABEL_8:
  if (v8 < 0)
  {
LABEL_34:
    __break(1u);
    JUMPOUT(0x10020DD88);
  }
LABEL_9:
  if (v8)
  {
    v12 = v8 - 1;
    if ((unint64_t)(v8 - 1) >= 0x4000000000000000)
      v13 = 0x4000000000000000;
    else
      v13 = v8 - 1;
    if (v13 <= 0xF)
      goto LABEL_18;
    if (v12 >= 0x4000000000000000)
      v12 = 0x4000000000000000;
    if (v6 >= v12 + v2 + 1 || v6 + 2 * v12 + 2 <= v2)
    {
      v15 = v13 + 1;
      v16 = v15 & 0xF;
      if ((v15 & 0xF) == 0)
        v16 = 16;
      v14 = v15 - v16;
      v17.i64[0] = 0x9F9F9F9F9F9F9F9FLL;
      v17.i64[1] = 0x9F9F9F9F9F9F9F9FLL;
      v18.i64[0] = 0x5757575757575757;
      v18.i64[1] = 0x5757575757575757;
      v19.i64[0] = 0x3030303030303030;
      v19.i64[1] = 0x3030303030303030;
      v20.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v20.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      v21.i64[0] = 0x909090909090909;
      v21.i64[1] = 0x909090909090909;
      v22 = v14;
      v23 = (int8x16_t *)v2;
      v24 = (char *)v6;
      do
      {
        v25 = *v23++;
        v26.i64[0] = 0x5757575757575757;
        v26.i64[1] = 0x5757575757575757;
        v27.i64[0] = 0x3030303030303030;
        v27.i64[1] = 0x3030303030303030;
        v40.val[0] = vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v25, v17), (int8x16_t)vsraq_n_u8(v26, (uint8x16_t)v25, 4uLL), (int8x16_t)vsraq_n_u8(v27, (uint8x16_t)v25, 4uLL));
        v28 = vandq_s8(v25, v20);
        v40.val[1] = vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v28, v21), vaddq_s8(v28, v18), vorrq_s8(v28, v19));
        vst2q_s8(v24, v40);
        v24 += 32;
        v22 -= 16;
      }
      while (v22);
    }
    else
    {
LABEL_18:
      v14 = 0;
    }
    v29 = v14 - 0x4000000000000000;
    v30 = (_BYTE *)(v6 + 2 * v14 + 1);
    v31 = v8 - v14;
    v32 = (unsigned __int8 *)(v2 + v14);
    while (v29)
    {
      v34 = *v32++;
      v33 = v34;
      v35 = (v34 >> 4) + 87;
      v36 = (v34 >> 4) | 0x30;
      if (v34 > 0x9F)
        LOBYTE(v36) = v35;
      *(v30 - 1) = v36;
      if ((v33 & 0xFu) <= 9)
        v37 = v33 & 0xF | 0x30;
      else
        v37 = (v33 & 0xF) + 87;
      *v30 = v37;
      v30 += 2;
      ++v29;
      if (!--v31)
        goto LABEL_31;
    }
    __break(1u);
    goto LABEL_33;
  }
LABEL_31:
  ((void (*)(void))static String.Encoding.utf8.getter)();
  result = ((uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))String.init(bytesNoCopy:length:encoding:freeWhenDone:))(v7, 2 * BYTE6(v4), v1, 1);
  *v0 = result;
  v0[1] = v39;
  return result;
}

uint64_t sub_10020DDA8()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = sub_1001FD90C((uint64_t)&off_1004562C8);
  v1 = sub_100005574(&qword_100497B90);
  result = swift_arrayDestroy(&unk_1004562E8, 22, v1);
  static Data.Hexadecimal.hexToDecimalMapping = v0;
  return result;
}

uint64_t *Data.Hexadecimal.hexToDecimalMapping.unsafeMutableAddressor()
{
  if (qword_100496D20 != -1)
    swift_once(&qword_100496D20, sub_10020DDA8);
  return &static Data.Hexadecimal.hexToDecimalMapping;
}

uint64_t static Data.Hexadecimal.hexToDecimalMapping.getter()
{
  _BYTE v1[24];

  if (qword_100496D20 != -1)
    swift_once(&qword_100496D20, sub_10020DDA8);
  swift_beginAccess(&static Data.Hexadecimal.hexToDecimalMapping, v1, 0, 0);
  return swift_bridgeObjectRetain();
}

uint64_t static Data.Hexadecimal.hexToDecimalMapping.setter(uint64_t a1)
{
  _BYTE v3[24];

  if (qword_100496D20 != -1)
    swift_once(&qword_100496D20, sub_10020DDA8);
  swift_beginAccess(&static Data.Hexadecimal.hexToDecimalMapping, v3, 1, 0);
  static Data.Hexadecimal.hexToDecimalMapping = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static Data.Hexadecimal.hexToDecimalMapping.modify(uint64_t a1))(_QWORD)
{
  if (qword_100496D20 != -1)
    swift_once(&qword_100496D20, sub_10020DDA8);
  swift_beginAccess(&static Data.Hexadecimal.hexToDecimalMapping, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t Data.init(hexString:)(uint64_t a1, void *a2)
{
  Swift::String v4;
  uint64_t v5;
  __int16 v6;
  Swift::String_optional v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  _QWORD v14[3];
  __int128 v15;

  if ((String.count.getter(a1, a2) & 1) != 0)
  {
    v14[0] = 48;
    v14[1] = 0xE100000000000000;
    v4._countAndFlagsBits = a1;
    v4._object = a2;
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
  }
  v5 = 0;
  LOBYTE(v6) = 0;
  v15 = xmmword_100384BC0;
  while (1)
  {
    v8 = String.Iterator.next()();
    if (!v8.value._object)
      break;
    if (qword_100496D20 != -1)
      swift_once(&qword_100496D20, sub_10020DDA8);
    swift_beginAccess(&static Data.Hexadecimal.hexToDecimalMapping, v14, 32, 0);
    v9 = static Data.Hexadecimal.hexToDecimalMapping;
    if (!*(_QWORD *)(static Data.Hexadecimal.hexToDecimalMapping + 16)
      || (v10 = sub_1002121C8(v8.value._countAndFlagsBits, (uint64_t)v8.value._object, (void (*)(_QWORD *, uint64_t, uint64_t))&Character.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10009AC10), (v11 & 1) == 0))
    {
      swift_endAccess(v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000067E8(v15, *((unint64_t *)&v15 + 1));
      return 0;
    }
    v12 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 56) + v10);
    swift_endAccess(v14);
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
    {
      if (((v12 + v6) & 0x100) == 0)
        __asm { BR              X11 }
      goto LABEL_18;
    }
    v6 = 16 * (v12 & 0xF) + v6;
    if ((v6 & 0x100) != 0)
      goto LABEL_17;
    if (__OFADD__(v5++, 1))
    {
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
    }
  }
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_10020E220()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v0 = sub_100005574(&qword_100497A90);
  __chkstk_darwin(v0);
  v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Calendar.Identifier(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Calendar(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000086DC(v9, static Calendar.musicDefaultCalendar);
  v12 = sub_1000086B4(v7, (uint64_t)static Calendar.musicDefaultCalendar);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Calendar.Identifier.gregorian(_:), v3);
  Calendar.init(identifier:)(v6);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  TimeZone.init(secondsFromGMT:)(0);
  v13 = type metadata accessor for TimeZone(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v2, 1, v13);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    Calendar.timeZone.setter(v2);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v12, v11, v7);
  }
  return result;
}

uint64_t Calendar.musicDefaultCalendar.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_100496D28 != -1)
    swift_once(&qword_100496D28, sub_10020E220);
  v0 = type metadata accessor for Calendar(0);
  return sub_1000086B4(v0, (uint64_t)static Calendar.musicDefaultCalendar);
}

uint64_t static Calendar.musicDefaultCalendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_100496D28 != -1)
    swift_once(&qword_100496D28, sub_10020E220);
  v2 = type metadata accessor for Calendar(0);
  v3 = sub_1000086B4(v2, (uint64_t)static Calendar.musicDefaultCalendar);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

id static NSDateFormatter.iso8601ExtendedDateFormatter.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  Class isa;
  NSString v9;
  uint64_t v10;
  uint64_t v11;
  Class v12;
  uint64_t v14;

  v0 = sub_100005574(&qword_100497A90);
  __chkstk_darwin(v0);
  v2 = (char *)&v14 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Locale(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  Locale.init(identifier:)(0x4F505F53555F6E65, 0xEB00000000584953);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  objc_msgSend(v7, "setLocale:", isa);

  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v7, "setDateFormat:", v9);

  TimeZone.init(secondsFromGMT:)(0);
  v10 = type metadata accessor for TimeZone(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v2, 1, v10) != 1)
  {
    v12 = TimeZone._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v2, v10);
  }
  objc_msgSend(v7, "setTimeZone:", v12);

  return v7;
}

id static NSDateFormatter.dayNameDateFormatter.getter()
{
  id v0;
  NSString v1;

  v0 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  v1 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setLocalizedDateFormatFromTemplate:", v1);

  return v0;
}

void sub_10020E67C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  uint64_t v5;
  Class isa;
  uint64_t v7;

  v0 = type metadata accessor for TimeZone(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  objc_msgSend(v4, "setDateStyle:", 3);
  if (qword_100496D28 != -1)
    swift_once(&qword_100496D28, sub_10020E220);
  v5 = type metadata accessor for Calendar(0);
  sub_1000086B4(v5, (uint64_t)static Calendar.musicDefaultCalendar);
  Calendar.timeZone.getter();
  isa = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  objc_msgSend(v4, "setTimeZone:", isa);

  static NSDateFormatter.releaseDateFormatter = (uint64_t)v4;
}

uint64_t *NSDateFormatter.releaseDateFormatter.unsafeMutableAddressor()
{
  if (qword_100496D30 != -1)
    swift_once(&qword_100496D30, sub_10020E67C);
  return &static NSDateFormatter.releaseDateFormatter;
}

id static NSDateFormatter.releaseDateFormatter.getter()
{
  return sub_1000B8EAC(&qword_100496D30, (id *)&static NSDateFormatter.releaseDateFormatter);
}

id sub_10020E7EC()
{
  id v0;
  id result;

  v0 = objc_msgSend(objc_allocWithZone((Class)NSDateComponentsFormatter), "init");
  objc_msgSend(v0, "setUnitsStyle:", 3);
  result = objc_msgSend(v0, "setAllowedUnits:", 96);
  static NSDateFormatter.collectionsDurationFormatter = (uint64_t)v0;
  return result;
}

uint64_t *NSDateFormatter.collectionsDurationFormatter.unsafeMutableAddressor()
{
  if (qword_100496D38 != -1)
    swift_once(&qword_100496D38, sub_10020E7EC);
  return &static NSDateFormatter.collectionsDurationFormatter;
}

id static NSDateFormatter.collectionsDurationFormatter.getter()
{
  return sub_1000B8EAC(&qword_100496D38, (id *)&static NSDateFormatter.collectionsDurationFormatter);
}

uint64_t Dictionary.filterIncludingPairsWithStringValues()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t TupleTypeMetadata2;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  _QWORD v64[2];
  uint64_t v65;
  int64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  uint64_t v83;

  v77 = a3;
  v7 = *(_QWORD *)(a3 - 8);
  v8 = __chkstk_darwin(a1);
  v76 = (char *)v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v8);
  v71 = (char *)v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v79 = (char *)v64 - v13;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v14, v15, "key value ", 0);
  v17 = type metadata accessor for Optional(0, TupleTypeMetadata2);
  v73 = *(_QWORD *)(v17 - 8);
  v74 = v17;
  v18 = __chkstk_darwin(v17);
  v20 = (char *)v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)v64 - v21;
  v23 = swift_getTupleTypeMetadata2(0, a2, &type metadata for String, 0, 0);
  v24 = static Array._allocateUninitialized(_:)(0, v23);
  v72 = a4;
  v83 = Dictionary.init(dictionaryLiteral:)(v24, a2, &type metadata for String, a4);
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v25 = a1;
    else
      v25 = a1 & 0xFFFFFFFFFFFFFF8;
    v26 = __CocoaDictionary.makeIterator()(v25);
    v65 = 0;
    v27 = 0;
    v28 = 0;
    v29 = v26 | 0x8000000000000000;
  }
  else
  {
    v30 = -1 << *(_BYTE *)(a1 + 32);
    v27 = ~v30;
    v31 = *(_QWORD *)(a1 + 64);
    v65 = a1 + 64;
    v32 = -v30;
    if (v32 < 64)
      v33 = ~(-1 << v32);
    else
      v33 = -1;
    v28 = v33 & v31;
    v29 = a1;
  }
  v75 = v29;
  v66 = (unint64_t)(v27 + 64) >> 6;
  v67 = v29 & 0x7FFFFFFFFFFFFFFFLL;
  v64[0] = v66 - 1;
  v64[1] = v27;
  result = swift_bridgeObjectRetain();
  v35 = v75;
  v36 = 0;
  v37 = v7;
  v69 = v7;
  v70 = v20;
  v68 = v22;
  if ((v75 & 0x8000000000000000) == 0)
    goto LABEL_16;
LABEL_11:
  v38 = __CocoaDictionary.Iterator.next()(result);
  if (v38)
  {
    v40 = v38;
    v41 = v39;
    _forceBridgeFromObjectiveC<A>(_:_:)(v38, a2, a2);
    swift_unknownObjectRelease(v40);
    v42 = v77;
    _forceBridgeFromObjectiveC<A>(_:_:)(v41, v77, v77);
    swift_unknownObjectRelease(v41);
    v43 = 0;
    v44 = v36;
    v78 = v28;
    v45 = v69;
    goto LABEL_25;
  }
  v43 = 1;
  v44 = v36;
  v78 = v28;
  v45 = v69;
LABEL_24:
  v42 = v77;
  while (1)
  {
    while (1)
    {
      while (1)
      {
LABEL_25:
        v55 = *(_QWORD *)(TupleTypeMetadata2 - 8);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56))(v20, v43, 1, TupleTypeMetadata2);
        (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v22, v20, v74);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v22, 1, TupleTypeMetadata2) == 1)
        {
          sub_1000F38AC(v75);
          return v83;
        }
        v56 = &v22[*(int *)(TupleTypeMetadata2 + 48)];
        (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v79, v22, a2);
        v57 = v76;
        (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v76, v56, v42);
        if (swift_dynamicCast(&v81, v57, v42, &type metadata for String, 0))
        {
          v46 = v81;
          v47 = v82;
          goto LABEL_15;
        }
        v58 = sub_1000087DC(0, &qword_100497A98, NSNumber_ptr);
        if (swift_dynamicCast(&v81, v57, v42, v58, 0))
        {
          v59 = v81;
          v60 = objc_msgSend(v81, "description");
          v46 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
          v47 = v61;

          v45 = v69;
          v57 = v76;
LABEL_15:
          v37 = v45;
          (*(void (**)(char *, uint64_t))(v45 + 8))(v57, v77);
          v48 = v79;
          v49 = v80;
          v50 = v71;
          (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v71, v79, a2);
          v81 = v46;
          v82 = v47;
          v51 = type metadata accessor for Dictionary(0, a2, &type metadata for String, v72);
          Dictionary.subscript.setter(&v81, v50, v51);
          result = (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v48, a2);
          v36 = v44;
          v28 = v78;
          v20 = v70;
          v35 = v75;
          if ((v75 & 0x8000000000000000) != 0)
            goto LABEL_11;
          goto LABEL_16;
        }
        v62 = v42;
        v37 = v45;
        (*(void (**)(char *, uint64_t))(v45 + 8))(v57, v62);
        result = (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v79, a2);
        v36 = v44;
        v28 = v78;
        v35 = v75;
        if ((v75 & 0x8000000000000000) != 0)
          goto LABEL_11;
LABEL_16:
        if (v28)
        {
          v78 = (v28 - 1) & v28;
          v52 = __clz(__rbit64(v28)) | (v36 << 6);
          v44 = v36;
          v45 = v37;
          v42 = v77;
          goto LABEL_18;
        }
        v44 = v36 + 1;
        if (__OFADD__(v36, 1))
        {
          __break(1u);
          goto LABEL_46;
        }
        v45 = v37;
        if (v44 >= v66)
        {
          v78 = 0;
          v43 = 1;
          v44 = v36;
          goto LABEL_24;
        }
        v54 = *(_QWORD *)(v65 + 8 * v44);
        v42 = v77;
        if (!v54)
          break;
LABEL_22:
        v78 = (v54 - 1) & v54;
        v52 = __clz(__rbit64(v54)) + (v44 << 6);
LABEL_18:
        v53 = v35;
        (*(void (**)(char *, unint64_t, uint64_t))(v80 + 16))(v20, *(_QWORD *)(v35 + 48) + *(_QWORD *)(v80 + 72) * v52, a2);
        (*(void (**)(char *, unint64_t, uint64_t))(v45 + 16))(&v20[*(int *)(TupleTypeMetadata2 + 48)], *(_QWORD *)(v53 + 56) + *(_QWORD *)(v45 + 72) * v52, v42);
        v43 = 0;
        v22 = v68;
      }
      if (v36 + 2 < v66)
        break;
      v78 = 0;
      v43 = 1;
    }
    v54 = *(_QWORD *)(v65 + 8 * (v36 + 2));
    if (v54)
    {
      v44 = v36 + 2;
      goto LABEL_22;
    }
    v63 = v36 + 3;
    if (v36 + 3 < v66)
      break;
    v78 = 0;
    v43 = 1;
    v44 = v36 + 2;
  }
  v54 = *(_QWORD *)(v65 + 8 * v63);
  if (v54)
  {
    v44 = v36 + 3;
    goto LABEL_22;
  }
  while (1)
  {
    v44 = v63 + 1;
    if (__OFADD__(v63, 1))
      break;
    if (v44 >= v66)
    {
      v78 = 0;
      v43 = 1;
      v44 = v64[0];
      goto LABEL_25;
    }
    v54 = *(_QWORD *)(v65 + 8 * v44);
    ++v63;
    if (v54)
      goto LABEL_22;
  }
LABEL_46:
  __break(1u);
  return result;
}

uint64_t Dictionary.filteredDictionary(_:)(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t TupleTypeMetadata2;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  int64_t v37;
  char *v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  int64_t v60;
  _QWORD v61[2];
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t (*v71)(char *, char *);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;

  v77 = a4;
  v71 = a1;
  v72 = a2;
  v10 = type metadata accessor for Optional(0, a5);
  v11 = __chkstk_darwin(v10);
  v66 = (char *)v61 - v12;
  v75 = *(_QWORD *)(a5 - 8);
  v13 = __chkstk_darwin(v11);
  v79 = (char *)v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = *(_QWORD *)(a4 - 8);
  v15 = __chkstk_darwin(v13);
  v65 = (char *)v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)v61 - v17;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, a4, a5, "key value ", 0);
  v20 = type metadata accessor for Optional(0, TupleTypeMetadata2);
  v73 = *(_QWORD *)(v20 - 8);
  v74 = v20;
  v21 = __chkstk_darwin(v20);
  v68 = (char *)v61 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v24 = (char *)v61 - v23;
  v25 = swift_getTupleTypeMetadata2(0, a4, a5, 0, 0);
  v26 = static Array._allocateUninitialized(_:)(0, v25);
  v67 = a6;
  v80 = Dictionary.init(dictionaryLiteral:)(v26, a4, a5, a6);
  if ((a3 & 0xC000000000000001) != 0)
  {
    if (a3 < 0)
      v27 = a3;
    else
      v27 = a3 & 0xFFFFFFFFFFFFFF8;
    v28 = __CocoaDictionary.makeIterator()(v27);
    v62 = 0;
    v29 = 0;
    v30 = 0;
    v31 = v28 | 0x8000000000000000;
  }
  else
  {
    v32 = -1 << *(_BYTE *)(a3 + 32);
    v29 = ~v32;
    v33 = *(_QWORD *)(a3 + 64);
    v62 = a3 + 64;
    v34 = -v32;
    if (v34 < 64)
      v35 = ~(-1 << v34);
    else
      v35 = -1;
    v30 = v35 & v33;
    v31 = a3;
  }
  v63 = (unint64_t)(v29 + 64) >> 6;
  v64 = v31 & 0x7FFFFFFFFFFFFFFFLL;
  v61[0] = v63 - 1;
  v61[1] = v29;
  result = swift_bridgeObjectRetain();
  v37 = 0;
  v38 = v68;
  v69 = TupleTypeMetadata2;
  v70 = v31;
  while ((v31 & 0x8000000000000000) != 0)
  {
    v42 = __CocoaDictionary.Iterator.next()(result);
    if (v42)
    {
      v44 = v42;
      v45 = v43;
      _forceBridgeFromObjectiveC<A>(_:_:)(v42, v77, v77);
      swift_unknownObjectRelease(v44);
      _forceBridgeFromObjectiveC<A>(_:_:)(v45, a5, a5);
      swift_unknownObjectRelease(v45);
      v41 = 0;
    }
    else
    {
      v41 = 1;
    }
    v40 = v37;
    v78 = v30;
LABEL_25:
    v47 = *(_QWORD *)(TupleTypeMetadata2 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56))(v38, v41, 1, TupleTypeMetadata2);
    (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v24, v38, v74);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v24, 1, TupleTypeMetadata2) == 1)
    {
      sub_1000F38AC(v31);
      return v80;
    }
    v48 = &v24[*(int *)(TupleTypeMetadata2 + 48)];
    v50 = v76;
    v49 = v77;
    v51 = v24;
    (*(void (**)(char *, char *, uint64_t))(v76 + 32))(v18, v24, v77);
    v52 = v75;
    v53 = v79;
    (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v79, v48, a5);
    if ((v71(v18, v53) & 1) != 0)
    {
      v54 = v18;
      v55 = v65;
      (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v65, v54, v49);
      v56 = v66;
      (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v66, v79, a5);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v56, 0, 1, a5);
      v57 = type metadata accessor for Dictionary(0, v49, a5, v67);
      v58 = v56;
      v53 = v79;
      v59 = v55;
      v18 = v54;
      v38 = v68;
      Dictionary.subscript.setter(v58, v59, v57);
    }
    (*(void (**)(char *, uint64_t))(v52 + 8))(v53, a5);
    result = (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v18, v49);
    v37 = v40;
    v30 = v78;
    v24 = v51;
    TupleTypeMetadata2 = v69;
    v31 = v70;
  }
  if (v30)
  {
    v78 = (v30 - 1) & v30;
    v39 = __clz(__rbit64(v30)) | (v37 << 6);
    v40 = v37;
    goto LABEL_15;
  }
  v40 = v37 + 1;
  if (__OFADD__(v37, 1))
  {
    __break(1u);
    goto LABEL_43;
  }
  if (v40 >= v63)
  {
    v78 = 0;
    v41 = 1;
    v40 = v37;
    goto LABEL_25;
  }
  v46 = *(_QWORD *)(v62 + 8 * v40);
  if (v46)
    goto LABEL_21;
  if (v37 + 2 >= v63)
  {
    v78 = 0;
    v41 = 1;
    goto LABEL_25;
  }
  v46 = *(_QWORD *)(v62 + 8 * (v37 + 2));
  if (v46)
  {
    v40 = v37 + 2;
    goto LABEL_21;
  }
  v60 = v37 + 3;
  if (v37 + 3 >= v63)
  {
    v78 = 0;
    v41 = 1;
    v40 = v37 + 2;
    goto LABEL_25;
  }
  v46 = *(_QWORD *)(v62 + 8 * v60);
  if (v46)
  {
    v40 = v37 + 3;
LABEL_21:
    v78 = (v46 - 1) & v46;
    v39 = __clz(__rbit64(v46)) + (v40 << 6);
LABEL_15:
    (*(void (**)(char *, unint64_t, uint64_t))(v76 + 16))(v38, *(_QWORD *)(v31 + 48) + *(_QWORD *)(v76 + 72) * v39, v77);
    (*(void (**)(char *, unint64_t, uint64_t))(v75 + 16))(&v38[*(int *)(TupleTypeMetadata2 + 48)], *(_QWORD *)(v31 + 56) + *(_QWORD *)(v75 + 72) * v39, a5);
    v41 = 0;
    goto LABEL_25;
  }
  while (1)
  {
    v40 = v60 + 1;
    if (__OFADD__(v60, 1))
      break;
    if (v40 >= v63)
    {
      v78 = 0;
      v41 = 1;
      v40 = v61[0];
      goto LABEL_25;
    }
    v46 = *(_QWORD *)(v62 + 8 * v40);
    ++v60;
    if (v46)
      goto LABEL_21;
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t IndexPath.safeSection.getter()
{
  if ((unint64_t)(IndexPath.count.getter() - 1) > 1)
    return NSNotFound.getter();
  else
    return IndexPath.subscript.getter(0);
}

uint64_t IndexPath.safeSection.setter(uint64_t a1)
{
  uint64_t result;

  result = IndexPath.count.getter();
  if ((unint64_t)(result - 1) <= 1)
    return IndexPath.subscript.setter(a1, 0);
  return result;
}

uint64_t (*IndexPath.safeSection.modify(uint64_t *a1))(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  a1[1] = v1;
  if ((unint64_t)(IndexPath.count.getter() - 1) > 1)
    v3 = NSNotFound.getter();
  else
    v3 = IndexPath.subscript.getter(0);
  *a1 = v3;
  return sub_10020F4D8;
}

uint64_t sub_10020F4D8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  result = IndexPath.count.getter();
  if ((unint64_t)(result - 1) <= 1)
    return IndexPath.subscript.setter(v1, 0);
  return result;
}

uint64_t IndexPath.safeItem.getter()
{
  if ((unint64_t)IndexPath.count.getter() > 1)
    return IndexPath.subscript.getter(1);
  else
    return NSNotFound.getter();
}

unint64_t IndexPath.safeItem.setter(uint64_t a1)
{
  unint64_t result;

  result = IndexPath.count.getter();
  if (result >= 2)
    return IndexPath.subscript.setter(a1, 1);
  return result;
}

unint64_t (*IndexPath.safeItem.modify(uint64_t *a1))(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  a1[1] = v1;
  if ((unint64_t)IndexPath.count.getter() > 1)
    v3 = IndexPath.subscript.getter(1);
  else
    v3 = NSNotFound.getter();
  *a1 = v3;
  return sub_10020F5C0;
}

unint64_t sub_10020F5C0(uint64_t *a1)
{
  uint64_t v1;
  unint64_t result;

  v1 = *a1;
  result = IndexPath.count.getter();
  if (result >= 2)
    return IndexPath.subscript.setter(v1, 1);
  return result;
}

void *String.nonBreakingSpace.unsafeMutableAddressor()
{
  return &static String.nonBreakingSpace;
}

uint64_t static String.nonBreakingSpace.getter()
{
  return 41154;
}

Swift::String __swiftcall String.trim()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  Swift::String result;
  _QWORD v16[2];

  v2 = v1;
  v3 = v0;
  v4 = type metadata accessor for CharacterSet(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = v3;
  v16[1] = v2;
  v8 = objc_msgSend((id)objc_opt_self(NSCharacterSet), "whitespaceAndNewlineCharacterSet");
  static CharacterSet._unconditionallyBridgeFromObjectiveC(_:)();

  v9 = sub_10021309C();
  v10 = StringProtocol.trimmingCharacters(in:)(v7, &type metadata for String, v9);
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v13 = v10;
  v14 = v12;
  result._object = v14;
  result._countAndFlagsBits = v13;
  return result;
}

Swift::String __swiftcall String.removeSpaces()()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void *v4;
  Swift::String result;
  _QWORD v6[2];
  _QWORD v7[2];
  uint64_t v8;
  uint64_t v9;

  v8 = v0;
  v9 = v1;
  v7[0] = 32;
  v7[1] = 0xE100000000000000;
  v6[0] = 0;
  v6[1] = 0xE000000000000000;
  v2 = sub_10021309C();
  v3 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v7, v6, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v2, v2, v2);
  result._object = v4;
  result._countAndFlagsBits = v3;
  return result;
}

Swift::String __swiftcall String.replace(usingRegexPattern:with:options:)(Swift::String usingRegexPattern, Swift::String with, NSRegularExpressionOptions options)
{
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *object;
  uint64_t countAndFlagsBits;
  id v10;
  void *v11;
  uint64_t v12;
  NSString v13;
  NSString v14;
  id v15;
  void *v16;
  uint64_t v17;
  void *v18;
  Swift::String result;

  v5 = v4;
  v6 = v3;
  object = usingRegexPattern._object;
  countAndFlagsBits = usingRegexPattern._countAndFlagsBits;
  objc_allocWithZone((Class)NSRegularExpression);
  swift_bridgeObjectRetain();
  v10 = sub_1002120C8(countAndFlagsBits, (uint64_t)object, options);
  v11 = v10;
  if (v10)
  {
    v12 = String.count.getter(v6, v5);
    v13 = String._bridgeToObjectiveC()();
    v14 = String._bridgeToObjectiveC()();
    v15 = objc_msgSend(v11, "stringByReplacingMatchesInString:options:range:withTemplate:", v13, 0, 0, v12, v14);

    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v5 = v16;

  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v17 = v6;
  v18 = v5;
  result._object = v18;
  result._countAndFlagsBits = v17;
  return result;
}

Swift::String __swiftcall String.htmlizedString()()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  Swift::String result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v18 = v0;
  v19 = v1;
  v16 = 10;
  v17 = 0xE100000000000000;
  v14 = 1047683644;
  v15 = 0xE400000000000000;
  v2 = sub_10021309C();
  v3 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v16, &v14, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v2, v2, v2);
  v5 = sub_10020F998(v3, v4);
  v7 = v6;
  swift_bridgeObjectRelease();
  v18 = v5;
  v19 = v7;
  v16 = 38;
  v17 = 0xE100000000000000;
  v14 = 0x3B706D6126;
  v15 = 0xE500000000000000;
  v8 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v16, &v14, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v2, v2, v2);
  v10 = v9;
  swift_bridgeObjectRelease();
  v11 = v8;
  v12 = v10;
  result._object = v12;
  result._countAndFlagsBits = v11;
  return result;
}

unint64_t sub_10020F998(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t result;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  char v41;
  uint64_t *v42;
  void *v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void *v51;
  Swift::String v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;

  v4 = sub_100005574(&qword_100497AA8);
  __chkstk_darwin(v4);
  v60 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = 0;
  v67 = 0xE000000000000000;
  v6 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v6 = a1 & 0xFFFFFFFFFFFFLL;
  v7 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v7 = 11;
  v57 = 4 * v6;
  v64 = a1;
  v65 = a2;
  v61 = v7 | (v6 << 16);
  v62 = 38;
  v63 = 0xE100000000000000;
  v8 = type metadata accessor for Locale(0);
  v9 = 0;
  v10 = 15;
  v58 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56);
  v59 = v8;
  v55 = a1;
  v56 = a2;
  while (1)
  {
    v12 = (uint64_t)v60;
    v58(v60, 1, 1, v59);
    v13 = sub_10021309C();
    v14 = StringProtocol.range<A>(of:options:range:locale:)(&v62, 0, v10, v61, 0, v12, &type metadata for String, &type metadata for String, v13, v13);
    v16 = v15;
    sub_100008758(v12, &qword_100497AA8);
    result = swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
    {
      v17 = v10 >> 14;
      goto LABEL_35;
    }
    v17 = v14 >> 14;
    if (v14 >> 14 < v9)
    {
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    v18 = String.subscript.getter(v10, v14, a1, a2);
    String.append(contentsOf:)(v18);
    result = swift_bridgeObjectRelease();
    v64 = a1;
    v65 = a2;
    v62 = 59;
    v63 = 0xE100000000000000;
    if (v57 < v17)
      goto LABEL_38;
    v19 = (uint64_t)v60;
    v58(v60, 1, 1, v59);
    StringProtocol.range<A>(of:options:range:locale:)(&v62, 0, v14, v61, 0, v19, &type metadata for String, &type metadata for String, v13, v13);
    v10 = v20;
    v22 = v21;
    sub_100008758(v19, &qword_100497AA8);
    result = swift_bridgeObjectRelease();
    if ((v22 & 1) != 0)
      break;
    v9 = v10 >> 14;
    if (v10 >> 14 < v17)
      goto LABEL_40;
    v23 = String.subscript.getter(v14, v10, a1, a2);
    v25 = v24;
    v27 = v26;
    v29 = v28;
    if (sub_100212D80(8998, (void *)0xE200000000000000, v23, v24, v26, v28))
    {
      result = Substring.index(_:offsetBy:)(v23, 2, v23, v25, v27, v29);
      if (v25 >> 14 < result >> 14)
        goto LABEL_41;
      v30 = ((uint64_t (*)(void))Substring.subscript.getter)();
      v32 = v31;
      v34 = v33;
      v36 = v35;
      if (sub_100212D80(120, (void *)0xE100000000000000, v30, v31, v33, v35))
      {
        swift_bridgeObjectRelease();
        v37 = 16;
        v38 = 3;
      }
      else
      {
        v45 = sub_100212D80(88, (void *)0xE100000000000000, v30, v32, v34, v36);
        swift_bridgeObjectRelease();
        if (v45)
          v37 = 16;
        else
          v37 = 10;
        if (v45)
          v38 = 3;
        else
          v38 = 2;
      }
      v46 = Substring.index(_:offsetBy:)(v23, v38, v23, v25, v27, v29);
      result = Substring.index(_:offsetBy:)(v25, -1, v23, v25, v27, v29);
      if (result >> 14 < v46 >> 14)
        goto LABEL_42;
      v47 = Substring.subscript.getter(v46, result, v23, v25, v27, v29);
      v44 = sub_100210414(v47, v48, v49, v50, v37);
      v43 = v51;
      swift_bridgeObjectRelease();
      if (v43)
      {
        swift_bridgeObjectRelease();
        goto LABEL_32;
      }
    }
    else
    {
      if (qword_100496D40 != -1)
        swift_once(&qword_100496D40, sub_100210304);
      v39 = off_100497A58;
      if (*((_QWORD *)off_100497A58 + 2))
      {
        swift_bridgeObjectRetain();
        v40 = sub_100212240(v23, v25, v27, v29);
        if ((v41 & 1) != 0)
        {
          v42 = (uint64_t *)(v39[7] + 16 * v40);
          v44 = *v42;
          v43 = (void *)v42[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease_n(v29, 2);
LABEL_32:
          v52._countAndFlagsBits = v44;
          v52._object = v43;
          String.append(_:)(v52);
          goto LABEL_8;
        }
        swift_bridgeObjectRelease();
      }
    }
    String.append(contentsOf:)(v23);
LABEL_8:
    a1 = v55;
    result = swift_bridgeObjectRelease();
    a2 = v56;
    v64 = a1;
    v65 = v56;
    v62 = 38;
    v63 = 0xE100000000000000;
    if (v57 < v9)
      goto LABEL_39;
  }
  v10 = v14;
LABEL_35:
  if (v57 >= v17)
  {
    v53 = String.subscript.getter(v10, v61, a1, a2);
    String.append(contentsOf:)(v53);
    swift_bridgeObjectRelease();
    return v66;
  }
LABEL_43:
  __break(1u);
  return result;
}

Swift::String __swiftcall String.insensitiveCompareString()()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  Swift::String_optional v9;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String_optional v12;
  Swift::String v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  Swift::String result;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;

  v2 = v1;
  v3 = v0;
  v4 = sub_100005574(&qword_100497AA8);
  __chkstk_darwin(v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = 0xE000000000000000;
  v31 = 0;
  v32 = 0xE000000000000000;
  v8 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v8 = v3 & 0xFFFFFFFFFFFFLL;
  v27 = v3;
  v28 = v2;
  v29 = 0;
  v30 = v8;
  swift_bridgeObjectRetain();
  v9 = String.Iterator.next()();
  if (v9.value._object)
  {
    countAndFlagsBits = v9.value._countAndFlagsBits;
    object = v9.value._object;
    do
    {
      if ((Character.isPunctuation.getter(countAndFlagsBits, object) & 1) == 0)
      {
        v13._countAndFlagsBits = countAndFlagsBits;
        v13._object = object;
        String.append(_:)(v13);
      }
      swift_bridgeObjectRelease();
      v12 = String.Iterator.next()();
      countAndFlagsBits = v12.value._countAndFlagsBits;
      object = v12.value._object;
    }
    while (v12.value._object);
    v14 = v31;
    v7 = v32;
  }
  else
  {
    v14 = 0;
  }
  swift_bridgeObjectRelease();
  v27 = v14;
  v28 = v7;
  v15 = sub_10021309C();
  v16 = StringProtocol.localizedLowercase.getter(&type metadata for String, v15);
  v18 = v17;
  v19 = swift_bridgeObjectRelease();
  v27 = v16;
  v28 = v18;
  static Locale.current.getter(v19);
  v20 = type metadata accessor for Locale(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v6, 0, 1, v20);
  v21 = StringProtocol.folding(options:locale:)(128, v6, &type metadata for String, v15);
  v23 = v22;
  sub_100008758((uint64_t)v6, &qword_100497AA8);
  swift_bridgeObjectRelease();
  v24 = v21;
  v25 = v23;
  result._object = v25;
  result._countAndFlagsBits = v24;
  return result;
}

id String.BOOLValue.getter()
{
  NSString v0;
  id v1;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend(v0, "BOOLValue");

  return v1;
}

BOOL String.containsExcessiveHeightCharacters.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t, uint64_t);
  void *v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  _BOOL8 v18;
  void (*v20)(char *, char *, uint64_t);
  unint64_t v21;
  char v22;
  _QWORD v23[2];

  sub_100005574(&qword_100497AB0);
  __chkstk_darwin();
  v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v7 = (char *)v23 - v6;
  v8 = type metadata accessor for CharacterSet(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin();
  v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = CTFontCopySystemUIFontExcessiveLineHeightCharacterSet(v10);
  v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  if (v13
    && (v15 = (void *)v13,
        v14(v5, 1, 1, v8),
        v16 = sub_100006924(&qword_100497AB8, (uint64_t (*)(uint64_t))&type metadata accessor for CharacterSet, (uint64_t)&protocol conformance descriptor for CharacterSet), dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)(v15, v5, v8, v16), v15, v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48), v17(v5, 1, v8) != 1))
  {
    v20 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v20(v7, v5, v8);
    v14(v7, 0, 1, v8);
    if (v17(v7, 1, v8) != 1)
    {
      v20(v12, v7, v8);
      v23[0] = a1;
      v23[1] = a2;
      v21 = sub_10021309C();
      StringProtocol.rangeOfCharacter(from:options:range:)(v12, 0, 0, 0, 1, &type metadata for String, v21);
      v18 = (v22 & 1) == 0;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      return v18;
    }
  }
  else
  {
    v14(v7, 1, 1, v8);
  }
  sub_100008758((uint64_t)v7, &qword_100497AB0);
  return 0;
}

BOOL String.containsCharacter(from:)(uint64_t a1)
{
  unint64_t v2;
  char v3;

  v2 = sub_10021309C();
  StringProtocol.rangeOfCharacter(from:options:range:)(a1, 0, 0, 0, 1, &type metadata for String, v2);
  return (v3 & 1) == 0;
}

void *sub_100210304()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *result;
  uint64_t v18;

  v0 = sub_100005574(&qword_100497B88);
  inited = swift_initStackObject(v0, &v18);
  *(_OWORD *)(inited + 16) = xmmword_100384AE0;
  *(_QWORD *)(inited + 32) = Substring.init(_:)(0x3B746F757126, 0xE600000000000000);
  *(_QWORD *)(inited + 40) = v2;
  *(_QWORD *)(inited + 48) = v3;
  *(_QWORD *)(inited + 56) = v4;
  *(_QWORD *)(inited + 64) = 34;
  *(_QWORD *)(inited + 72) = 0xE100000000000000;
  *(_QWORD *)(inited + 80) = Substring.init(_:)(0x3B706D6126, 0xE500000000000000);
  *(_QWORD *)(inited + 88) = v5;
  *(_QWORD *)(inited + 96) = v6;
  *(_QWORD *)(inited + 104) = v7;
  *(_QWORD *)(inited + 112) = 38;
  *(_QWORD *)(inited + 120) = 0xE100000000000000;
  *(_QWORD *)(inited + 128) = Substring.init(_:)(0x3B736F706126, 0xE600000000000000);
  *(_QWORD *)(inited + 136) = v8;
  *(_QWORD *)(inited + 144) = v9;
  *(_QWORD *)(inited + 152) = v10;
  *(_QWORD *)(inited + 160) = 39;
  *(_QWORD *)(inited + 168) = 0xE100000000000000;
  *(_QWORD *)(inited + 176) = Substring.init(_:)(997485606, 0xE400000000000000);
  *(_QWORD *)(inited + 184) = v11;
  *(_QWORD *)(inited + 192) = v12;
  *(_QWORD *)(inited + 200) = v13;
  *(_QWORD *)(inited + 208) = 60;
  *(_QWORD *)(inited + 216) = 0xE100000000000000;
  *(_QWORD *)(inited + 224) = Substring.init(_:)(997484326, 0xE400000000000000);
  *(_QWORD *)(inited + 232) = v14;
  *(_QWORD *)(inited + 240) = v15;
  *(_QWORD *)(inited + 248) = v16;
  *(_QWORD *)(inited + 256) = 62;
  *(_QWORD *)(inited + 264) = 0xE100000000000000;
  result = (void *)sub_1001FCA34(inited);
  off_100497A58 = result;
  return result;
}

uint64_t sub_100210414(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;

  if ((unint64_t)(a5 - 37) < 0xFFFFFFFFFFFFFFDDLL)
  {
    __break(1u);
    goto LABEL_15;
  }
  if ((a2 ^ a1) < 0x4000)
    return 0;
  v11 = sub_100212F14(a1, a2, a3, a4, a5);
  if ((v11 & 0x10000000000) != 0)
  {
    swift_bridgeObjectRetain();
    v5 = sub_100212850(a1, a2, a3, a4, a5);
    swift_bridgeObjectRelease();
    if ((v5 & 0x100000000) != 0)
      return 0;
  }
  else
  {
    LODWORD(v5) = v11;
    if ((v11 & 0x100000000) != 0)
      return 0;
  }
  result = 0;
  if (WORD1(v5) <= 0x10u && (v5 & 0xFFFFF800) != 0xD800)
  {
    if ((v5 & 0xFFFFFF80) == 0)
    {
      if (v5 > 0xFF)
      {
        __break(1u);
        return result;
      }
      v13 = (v5 + 1);
      goto LABEL_12;
    }
LABEL_15:
    v15 = (v5 & 0x3F) << 8;
    v13 = (v15 | (v5 >> 6)) + 33217;
    v16 = (v15 | (v5 >> 6) & 0x3F) << 8;
    v17 = (((v16 | (v5 >> 12) & 0x3F) << 8) | (v5 >> 18)) - 2122219023;
    v18 = (v16 | (v5 >> 12)) + 8487393;
    if (WORD1(v5))
      v18 = v17;
    if (v5 >= 0x800)
      v13 = v18;
LABEL_12:
    v14 = __clz(v13);
    v19 = (v13 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (v14 >> 3)) & 7)));
    return static String._uncheckedFromUTF8(_:)(&v19, 4 - (v14 >> 3));
  }
  return result;
}

uint64_t Optional<A>.isEmpty.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  v3 = v2 == 0;
  return !a2 || v3;
}

uint64_t Optional<A>.nonEmpty.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (!a2)
    return 0;
  v2 = a1;
  v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v3 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v3)
    return 0;
  swift_bridgeObjectRetain();
  return v2;
}

NSAttributedString __swiftcall NSAttributedString.init(string:attributes:replacingPlaceholder:withImage:imageAttributes:)(Swift::String string, Swift::OpaquePointer attributes, Swift::String replacingPlaceholder, UIImage_optional withImage, Swift::OpaquePointer imageAttributes)
{
  Class isa;
  id v6;
  NSString v7;
  uint64_t v8;
  uint64_t v9;
  Class v10;
  id v11;
  NSString v12;
  NSString v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  Class v19;
  id v20;
  id v21;
  uint64_t v23;

  isa = withImage.value.super.isa;
  static String.localizedStringWithFormat(_:_:)();
  v6 = objc_allocWithZone((Class)NSMutableAttributedString);
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  _s3__C3KeyVMa_0(0);
  v9 = v8;
  sub_100006924(&qword_100496ED0, (uint64_t (*)(uint64_t))_s3__C3KeyVMa_0, (uint64_t)&unk_100393274);
  v23 = v9;
  v10 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v11 = objc_msgSend(v6, "initWithString:attributes:", v7, v10);

  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v12, "rangeOfString:options:", v13, 129);
  v16 = v15;

  if (isa)
  {
    v17 = (void *)objc_opt_self(NSTextAttachment);
    isa = isa;
    v18 = objc_msgSend(v17, "textAttachmentWithImage:", isa);
    v19 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v20 = objc_msgSend((id)objc_opt_self(NSAttributedString), "attributedStringWithAttachment:attributes:", v18, v19);

  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = objc_msgSend(objc_allocWithZone((Class)NSAttributedString), "init");
  }
  objc_msgSend(v11, "replaceCharactersInRange:withAttributedString:", v14, v16, v20, v23);
  v21 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), "initWithAttributedString:", v11);

  return (NSAttributedString)v21;
}

void sub_1002108C0()
{
  static Double.epsilon = 0x3E80000000000000;
}

uint64_t *Double.epsilon.unsafeMutableAddressor()
{
  if (qword_100496D48 != -1)
    swift_once(&qword_100496D48, sub_1002108C0);
  return &static Double.epsilon;
}

double static Double.epsilon.getter()
{
  if (qword_100496D48 != -1)
    swift_once(&qword_100496D48, sub_1002108C0);
  return *(double *)&static Double.epsilon;
}

double TimeIntervalSyntaxSugar.minutes.getter(uint64_t a1, uint64_t a2)
{
  return (*(double (**)(void))(a2 + 16))() * 60.0;
}

double TimeIntervalSyntaxSugar.hours.getter(uint64_t a1, uint64_t a2)
{
  return (*(double (**)(void))(a2 + 24))() * 60.0;
}

double sub_100210998()
{
  uint64_t *v0;

  return (double)*v0;
}

double sub_1002109A4()
{
  uint64_t *v0;

  return (double)*v0 * 60.0;
}

double sub_1002109BC()
{
  uint64_t *v0;

  return (double)*v0 * 60.0 * 60.0;
}

double sub_1002109D8()
{
  double *v0;

  return *v0 * 60.0;
}

double sub_1002109EC()
{
  double *v0;

  return *v0 * 60.0 * 60.0;
}

uint64_t _NSRange.init(range:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v7 = String.Index.samePosition(in:)(a3, a4, a1);
  if ((v8 & 1) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000024, 0x80000001003B71D0, "MusicUtilities/Foundation+Utilities.swift", 41, 2, 726, 0);
  }
  else
  {
    v9 = v7;
    v10 = String.Index.samePosition(in:)(a3, a4, a2);
    if ((v11 & 1) == 0)
    {
      v12 = v10;
      v13 = String.UTF16View.distance(from:to:)(15, v9, a3, a4);
      String.UTF16View.distance(from:to:)(v9, v12, a3, a4);
      swift_bridgeObjectRelease(a4);
      return v13;
    }
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000024, 0x80000001003B7200, "MusicUtilities/Foundation+Utilities.swift", 41, 2, 727, 0);
  }
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v7 = String.index(after:)(a2, a3, a4);
  v8 = String.Index.samePosition(in:)(a3, a4, a1);
  if ((v9 & 1) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000024, 0x80000001003B71D0, "MusicUtilities/Foundation+Utilities.swift", 41, 2, 726, 0);
  }
  else
  {
    v10 = v8;
    v11 = String.Index.samePosition(in:)(a3, a4, v7);
    if ((v12 & 1) == 0)
    {
      v13 = v11;
      v14 = String.UTF16View.distance(from:to:)(15, v10, a3, a4);
      String.UTF16View.distance(from:to:)(v10, v13, a3, a4);
      swift_bridgeObjectRelease(a4);
      return v14;
    }
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000024, 0x80000001003B7200, "MusicUtilities/Foundation+Utilities.swift", 41, 2, 727, 0);
  }
  __break(1u);
  return result;
}

Swift::Bool __swiftcall _NSRange.contains(_:)(__C::_NSRange a1)
{
  Swift::Int v1;
  uint64_t v2;

  if (a1.location >= v1)
  {
    if (__OFADD__(a1.location, a1.length))
    {
      __break(1u);
    }
    else if (!__OFADD__(v1, v2))
    {
      LOBYTE(a1.location) = v1 + v2 >= a1.location + a1.length;
      return a1.location;
    }
    __break(1u);
    return a1.location;
  }
  LOBYTE(a1.location) = 0;
  return a1.location;
}

__C::_NSRange __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _NSRange.convert(from:to:preserveLength:)(Swift::String from, Swift::String to, Swift::Bool preserveLength)
{
  void *object;
  uint64_t countAndFlagsBits;
  unint64_t v6;
  Swift::Int v7;
  NSString v8;
  NSString v9;
  id v10;
  Swift::Int v11;
  Swift::Int v12;
  __C::_NSRange v13;
  __C::_NSRange v14;
  uint64_t location;
  Swift::Int length;
  __C::_NSRange v17;
  unint64_t v18;
  _BYTE *v19;
  __n128 v20;
  __C::_NSRange result;
  Swift::String v22;
  Swift::String v23;

  v23 = from;
  object = from._object;
  countAndFlagsBits = from._countAndFlagsBits;
  v22 = to;
  v6 = sub_10021309C();
  if ((StringProtocol.contains<A>(_:)(&v22, &type metadata for String, &type metadata for String, v6, v6) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v7 = String.UTF16View.count.getter(countAndFlagsBits, object);
    swift_bridgeObjectRelease();
    v8 = String._bridgeToObjectiveC()();
    v9 = String._bridgeToObjectiveC()();
    v10 = objc_msgSend(v8, "rangeOfString:", v9, v22._countAndFlagsBits, v22._object, v23._countAndFlagsBits, v23._object);
    v12 = v11;

    v13.location = 0;
    v13.length = v7;
    v14.location = (Swift::Int)v10;
    v14.length = v12;
    v17 = _NSRange.convert(from:to:preserveLength:)(v13, v14, preserveLength);
    length = v17.length;
    location = v17.location;
  }
  else
  {
    v18 = sub_1002130E0();
    swift_allocError(&type metadata for _NSRange.ConversionError, v18, 0, 0);
    *v19 = 4;
    location = swift_willThrow(v20);
  }
  result.length = length;
  result.location = location;
  return result;
}

__C::_NSRange __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _NSRange.convert(from:to:preserveLength:)(__C::_NSRange from, __C::_NSRange to, Swift::Bool preserveLength)
{
  Swift::Int v3;
  uint64_t v4;
  Swift::Int v5;
  char v6;
  unint64_t v7;
  char *v8;
  __n128 v9;
  uint64_t v10;
  __C::_NSRange v12;
  Swift::Int v13;
  char v14;

  if (to.location < from.location)
    goto LABEL_5;
  if (__OFADD__(to.location, to.length))
  {
    __break(1u);
    goto LABEL_19;
  }
  v5 = from.location + from.length;
  if (__OFADD__(from.location, from.length))
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v5 < to.location + to.length)
  {
LABEL_5:
    v6 = 0;
LABEL_6:
    v7 = sub_1002130E0();
    swift_allocError(&type metadata for _NSRange.ConversionError, v7, 0, 0);
    *v8 = v6;
    from.location = swift_willThrow(v9);
    return from;
  }
  if (v3 < from.location)
  {
LABEL_11:
    v6 = 1;
    goto LABEL_6;
  }
  v10 = v4;
  if (__OFADD__(v3, v4))
    goto LABEL_20;
  if (v5 < v3 + v4)
    goto LABEL_11;
  if (__OFSUB__(v3, to.location))
  {
LABEL_21:
    __break(1u);
    return from;
  }
  v12.location = 0;
  v12.length = v13;
  *(__C::_NSRange_optional *)&from.location = _NSRange.intersection(_:)(v12);
  if ((v14 & 1) != 0)
  {
    v6 = 2;
    goto LABEL_6;
  }
  if (preserveLength && from.length != v10)
  {
    v6 = 3;
    goto LABEL_6;
  }
  return from;
}

Swift::Bool __swiftcall _NSRange.intersects(_:)(__C::_NSRange a1)
{
  Swift::Int v1;
  uint64_t v2;

  if (__OFADD__(v1, v2))
  {
    __break(1u);
    goto LABEL_13;
  }
  if (__OFADD__(a1.location, a1.length))
  {
LABEL_13:
    __break(1u);
    return a1.location;
  }
  if (v1 >= a1.location && a1.location + a1.length > v1)
    return 1;
  LOBYTE(a1.location) = a1.location >= v1 && v1 + v2 > a1.location;
  return a1.location;
}

uint64_t sub_100210EEC()
{
  uint64_t result;

  result = NSNotFound.getter();
  static _NSRange.notFound = result;
  unk_1004A2F30 = 0;
  return result;
}

uint64_t *_NSRange.notFound.unsafeMutableAddressor()
{
  if (qword_100496D50 != -1)
    swift_once(&qword_100496D50, sub_100210EEC);
  return &static _NSRange.notFound;
}

uint64_t static _NSRange.notFound.getter()
{
  if (qword_100496D50 != -1)
    swift_once(&qword_100496D50, sub_100210EEC);
  return static _NSRange.notFound;
}

Swift::tuple_first___C__NSRange_second___C__NSRange __swiftcall _NSRange.difference(_:)(__C::_NSRange a1)
{
  Swift::Int v1;
  Swift::Int v2;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  BOOL v6;
  Swift::Int v7;
  _BOOL4 v8;
  Swift::Int v9;
  Swift::Int v11;
  Swift::Int v12;
  Swift::tuple_first___C__NSRange_second___C__NSRange result;

  v3 = v2;
  v4 = v1;
  v5 = v1 + v2;
  v6 = __OFADD__(v1, v2);
  if (v1 < a1.location)
  {
    if (!v6)
      goto LABEL_10;
    __break(1u);
  }
  if (v6)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (__OFADD__(a1.location, a1.length))
  {
LABEL_52:
    __break(1u);
LABEL_53:
    swift_once(&qword_100496D50, sub_100210EEC);
    goto LABEL_43;
  }
  if (a1.location + a1.length >= v5)
  {
    if (qword_100496D50 == -1)
    {
LABEL_45:
      v4 = static _NSRange.notFound;
      v3 = unk_1004A2F30;
      v7 = static _NSRange.notFound;
      v9 = unk_1004A2F30;
      goto LABEL_46;
    }
LABEL_48:
    swift_once(&qword_100496D50, sub_100210EEC);
    goto LABEL_45;
  }
LABEL_10:
  v7 = a1.location + a1.length;
  if (__OFADD__(a1.location, a1.length))
  {
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (v4 < a1.location || v7 <= v4)
    goto LABEL_27;
  v8 = 0;
  v3 = a1.location - v4;
  if (!__OFSUB__(a1.location, v4))
  {
    while (1)
    {
      v9 = v5 - v7;
      if (__OFSUB__(v5, v7))
        goto LABEL_50;
      if (!v8)
        break;
      if (v7 >= v5)
        goto LABEL_38;
      v5 = v4 + v3;
      if (__OFADD__(v4, v3))
      {
        __break(1u);
LABEL_55:
        v11 = a1.location + a1.length;
        v12 = v9;
        swift_once(&qword_100496D50, sub_100210EEC);
        v9 = v12;
        v7 = v11;
LABEL_42:
        v4 = v7;
        v3 = v9;
        goto LABEL_43;
      }
      if (v5 < v7)
        goto LABEL_46;
      if (__OFADD__(v7, v9))
      {
        __break(1u);
        goto LABEL_57;
      }
      if (v5 <= v7 + v9)
        v5 = v7 + v9;
      if (v7 < v4)
        v4 = a1.location + a1.length;
      v3 = v5 - v4;
      if (!__OFSUB__(v5, v4))
        goto LABEL_38;
      __break(1u);
LABEL_27:
      if (a1.location < v4 || v5 <= a1.location)
        goto LABEL_38;
      v8 = v4 < a1.location && v3 > 0;
      v3 = a1.location - v4;
      if (__OFSUB__(a1.location, v4))
        goto LABEL_37;
    }
    if (v7 < v5)
    {
      if (qword_100496D50 != -1)
        goto LABEL_55;
      goto LABEL_42;
    }
    if (qword_100496D50 == -1)
      goto LABEL_45;
    goto LABEL_48;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  if (qword_100496D50 != -1)
    goto LABEL_53;
LABEL_43:
  v7 = static _NSRange.notFound;
  v9 = unk_1004A2F30;
LABEL_46:
  a1.location = v4;
  a1.length = v3;
LABEL_57:
  result.first = a1;
  result.second.length = v9;
  result.second.location = v7;
  return result;
}

uint64_t _NSRange.extendRangeToBounds(of:allowedCharacterSet:forbiddenCharacterSet:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  unint64_t v35;
  unint64_t v36;
  const char *v37;
  _BYTE v38[16];
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;

  v42 = a3;
  v43 = a4;
  v6 = a2;
  v7 = a1;
  v8 = Range<>.init(_:in:)(a5, a6, a1, a2);
  if ((v10 & 1) != 0)
  {
LABEL_22:
    v35 = 0xD00000000000001FLL;
    v40 = 0;
    v39 = 674;
    v36 = 0x80000001003B7230;
    goto LABEL_26;
  }
  v11 = v8;
  v12 = v9;
  v13 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0)
    v13 = v7 & 0xFFFFFFFFFFFFLL;
  v14 = 4 * v13;
  v44 = v6;
  v41 = 4 * v13;
LABEL_5:
  if (v11 >= 0x4000)
  {
    v17 = String.index(before:)(v11, v7, v6);
    if (v12 >> 14 >= v17 >> 14)
    {
      v18 = 0;
      v19 = v17;
      v16 = v12;
      do
      {
        v45 = v11;
        v20 = String.subscript.getter(v17, v7, v6);
        v21 = v7;
        v23 = v22;
        __chkstk_darwin(v20);
        v39 = v42;
        swift_bridgeObjectRetain();
        v24 = sub_1002115A8((uint64_t (*)(_QWORD *))sub_100213124, (uint64_t)v38, v20, v23);
        v25 = swift_bridgeObjectRelease();
        __chkstk_darwin(v25);
        v39 = v43;
        v26 = sub_10021185C(0, (void (*)(uint64_t *__return_ptr, char *, _QWORD *))sub_100213140, (uint64_t)v38, v20, v23);
        v7 = v21;
        v14 = v41;
        swift_bridgeObjectRelease();
        v6 = v44;
        if ((v24 & 1) == 0 || (v26 & 1) != 0)
        {
          v11 = v45;
          if ((v18 & 1) != 0)
            goto LABEL_18;
        }
        else
        {
          v11 = v19;
          v16 = v12;
          if ((v18 & 1) == 0)
            goto LABEL_5;
        }
LABEL_10:
        v15 = 1;
        if (v14 == v16 >> 14)
          goto LABEL_9;
        v12 = String.index(after:)(v16, v7, v6);
        v18 = 1;
        v17 = v16;
        v19 = v11;
      }
      while (v12 >> 14 >= v11 >> 14);
      __break(1u);
    }
    __break(1u);
    goto LABEL_22;
  }
  v15 = 0;
  v16 = v12;
LABEL_9:
  if ((v15 & 1) == 0)
    goto LABEL_10;
LABEL_18:
  swift_bridgeObjectRetain();
  v27 = String.Index.samePosition(in:)(v7, v6, v11);
  if ((v28 & 1) != 0)
  {
    v40 = 0;
    v39 = 726;
    v37 = "Lower Bound not found in UTF-16 view";
  }
  else
  {
    v29 = v27;
    v30 = String.Index.samePosition(in:)(v7, v6, v16);
    if ((v31 & 1) == 0)
    {
      v32 = v30;
      v33 = String.UTF16View.distance(from:to:)(15, v29, v7, v6);
      String.UTF16View.distance(from:to:)(v29, v32, v7, v6);
      swift_bridgeObjectRelease();
      return v33;
    }
    v40 = 0;
    v39 = 727;
    v37 = "Upper Bound not found in UTF-16 view";
  }
  v36 = (unint64_t)(v37 - 32) | 0x8000000000000000;
  v35 = 0xD000000000000024;
LABEL_26:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v35, v36, "MusicUtilities/Foundation+Utilities.swift", 41, 2, v39, v40);
  __break(1u);
  return result;
}

uint64_t sub_100211490(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  _QWORD v14[2];

  v4 = type metadata accessor for CharacterSet(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005574(&qword_100497AB0);
  __chkstk_darwin(v8);
  v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  sub_100213B64(a2, (uint64_t)v10);
  v12 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    v12 = CharacterSet.contains(_:)(v11);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v12 & 1;
}

uint64_t sub_1002115A8(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  uint64_t v22;

  v5 = a3 & 0xFFFFFFFFFFFFLL;
  v22 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) != 0)
    v6 = HIBYTE(a4) & 0xF;
  else
    v6 = a3 & 0xFFFFFFFFFFFFLL;
  if (v6)
  {
    v19 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    v20 = a4 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    v10 = 0;
    while (1)
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        v13 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)(v10 << 16, a3, a4);
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v21[0] = a3;
          v21[1] = v20;
          v11 = v21;
          v12 = v22;
        }
        else
        {
          v11 = (_QWORD *)v19;
          v12 = v5;
          if ((a3 & 0x1000000000000000) == 0)
            v11 = (_QWORD *)_StringObject.sharedUTF8.getter(a3, a4);
        }
        v13 = _decodeScalar(_:startingAt:)(v11, v12, v10);
      }
      v15 = v14;
      LODWORD(v21[0]) = v13;
      v16 = a1(v21);
      if (v4)
      {
        swift_bridgeObjectRelease(a4);
        return v17 & 1;
      }
      if ((v16 & 1) == 0)
        break;
      v10 += v15;
      if (v10 >= v6)
      {
        swift_bridgeObjectRelease(a4);
        v17 = 1;
        return v17 & 1;
      }
    }
    swift_bridgeObjectRelease(a4);
    v17 = 0;
  }
  else
  {
    v17 = 1;
  }
  return v17 & 1;
}

uint64_t sub_1002116E4@<X0>(_BYTE *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t result;
  uint64_t v21;

  v8 = type metadata accessor for CharacterSet(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005574(&qword_100497AB0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v21 - v16;
  LOBYTE(a1) = *a1;
  v18 = *a2;
  sub_100213B64(a3, (uint64_t)&v21 - v16);
  if ((a1 & 1) != 0)
  {
    v19 = 1;
  }
  else
  {
    sub_100213B64((uint64_t)v17, (uint64_t)v15);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v15, 1, v8) == 1)
    {
      v19 = 0;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v15, v8);
      v19 = CharacterSet.contains(_:)(v18);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
  }
  result = sub_100008758((uint64_t)v17, &qword_100497AB0);
  *a4 = v19 & 1;
  return result;
}

uint64_t sub_10021185C(char a1, void (*a2)(uint64_t *__return_ptr, char *, _QWORD *), uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  uint64_t v22;

  BYTE1(v22) = a1;
  v6 = a4 & 0xFFFFFFFFFFFFLL;
  v20 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) != 0)
    v7 = HIBYTE(a5) & 0xF;
  else
    v7 = a4 & 0xFFFFFFFFFFFFLL;
  if (v7)
  {
    v18 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
    v19 = a5 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    v11 = 0;
    do
    {
      if ((a5 & 0x1000000000000000) != 0)
      {
        v14 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)(v11 << 16, a4, a5);
      }
      else
      {
        if ((a5 & 0x2000000000000000) != 0)
        {
          v13 = v20;
          v21[0] = a4;
          v21[1] = v19;
          v12 = v21;
        }
        else
        {
          v12 = (_QWORD *)v18;
          v13 = v6;
          if ((a4 & 0x1000000000000000) == 0)
            v12 = (_QWORD *)_StringObject.sharedUTF8.getter(a4, a5);
        }
        v14 = _decodeScalar(_:startingAt:)(v12, v13, v11);
      }
      v16 = v15;
      LODWORD(v21[0]) = v14;
      a2(&v22, (char *)&v22 + 1, v21);
      if (v5)
        break;
      v11 += v16;
      LOBYTE(v16) = v22;
      BYTE1(v22) = v22;
    }
    while (v11 < v7);
    swift_bridgeObjectRelease(a5);
  }
  else
  {
    LOBYTE(v16) = a1;
  }
  return v16 & 1;
}

Swift::Int_optional __swiftcall _NSRange.NSRangeIterator.next()()
{
  uint64_t v0;
  Swift::Int v1;
  Swift::Bool v2;
  uint64_t v3;
  Swift::Int_optional result;

  v1 = *(_QWORD *)(v0 + 16);
  if ((*(_BYTE *)(v0 + 24) & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 8);
    if (__OFADD__(*(_QWORD *)v0, v3))
    {
      __break(1u);
    }
    else if (v1 >= *(_QWORD *)v0 + v3)
    {
      v1 = 0;
      v2 = 1;
    }
    else
    {
      v2 = 0;
      *(_QWORD *)(v0 + 16) = v1 + 1;
    }
  }
  result.value = v1;
  result.is_nil = v2;
  return result;
}

void sub_1002119D8(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(v1 + 16);
  if ((*(_BYTE *)(v1 + 24) & 1) != 0)
    goto LABEL_6;
  v3 = *(_QWORD *)(v1 + 8);
  if (!__OFADD__(*(_QWORD *)v1, v3))
  {
    if (v2 < *(_QWORD *)v1 + v3)
    {
      v4 = 0;
      *(_QWORD *)(v1 + 16) = v2 + 1;
LABEL_7:
      *(_QWORD *)a1 = v2;
      *(_BYTE *)(a1 + 8) = v4;
      return;
    }
    v2 = 0;
LABEL_6:
    v4 = 1;
    goto LABEL_7;
  }
  __break(1u);
}

void sub_100211A30(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1[1];
  if (v2 >= 1)
    v3 = *v1;
  else
    v3 = 0;
  *(_QWORD *)a1 = *v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v2 < 1;
}

void sub_100211A50()
{
  uint64_t *v0;

  sub_1002126D8(*v0, v0[1]);
}

uint64_t sub_100211A58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_10020C608(a1, a2, a3, *v3, v3[1]);
}

uint64_t WeakWrapper.value.setter(uint64_t a1)
{
  uint64_t v1;

  swift_unknownObjectWeakAssign(v1, a1);
  return swift_unknownObjectRelease(a1);
}

uint64_t (*WeakWrapper.value.modify(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = swift_unknownObjectWeakLoadStrong(v1);
  return sub_100211AC4;
}

uint64_t sub_100211AC4(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1;
  swift_unknownObjectWeakAssign(a1[1], *a1);
  return swift_unknownObjectRelease(v1);
}

uint64_t WeakWrapper.init(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = swift_unknownObjectWeakInit(a2, 0);
  swift_unknownObjectWeakAssign(v3, a1);
  return swift_unknownObjectRelease(a1);
}

uint64_t Int.romanNumeral.getter(uint64_t a1)
{
  unint64_t i;

  if (a1 < 1)
    return 0;
  for (i = 0; i != 13; ++i)
  {
    if (i >= 0xD)
    {
      __break(1u);
      JUMPOUT(0x100211CA0);
    }
    if (a1 >= qword_100393FB0[*((char *)&off_1004564F8 + i + 32)])
      __asm { BR              X9 }
  }
  return 0;
}

_UNKNOWN **static RomanNumerals.allCases.getter()
{
  return &off_1004564F8;
}

uint64_t RomanNumerals.arabicNumber.getter(char a1)
{
  return qword_100393FB0[a1];
}

uint64_t RomanNumerals.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100211D1C + 4 * byte_100393C20[a1]))(77, 0xE100000000000000);
}

uint64_t sub_100211D1C()
{
  return 19779;
}

uint64_t sub_100211D28()
{
  return 68;
}

uint64_t sub_100211D30()
{
  return 17475;
}

uint64_t sub_100211D3C()
{
  return 67;
}

uint64_t sub_100211D44()
{
  return 17240;
}

uint64_t sub_100211D50()
{
  return 76;
}

uint64_t sub_100211D58()
{
  return 19544;
}

uint64_t sub_100211D64()
{
  return 88;
}

uint64_t sub_100211D6C()
{
  return 22601;
}

uint64_t sub_100211D78()
{
  return 86;
}

uint64_t sub_100211D80()
{
  return 22089;
}

uint64_t sub_100211D8C()
{
  return 73;
}

uint64_t sub_100211D98(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = *a2;
  v3 = RomanNumerals.rawValue.getter(*a1);
  v5 = v4;
  v6 = RomanNumerals.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_100211E20()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = RomanNumerals.rawValue.getter(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100211E80(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = RomanNumerals.rawValue.getter(*v1);
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease();
}

Swift::Int sub_100211EC0()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = RomanNumerals.rawValue.getter(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_100211F1C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s14MusicUtilities13RomanNumeralsO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100211F48@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = RomanNumerals.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100211F70(_QWORD *a1@<X8>)
{
  *a1 = &off_1004564F8;
}

Swift::Int sub_100211F80()
{
  Swift::Int result;

  result = sub_100213A24((uint64_t)&off_100456680);
  static NSDirectionalEdgeInsets.Edge.all = result;
  return result;
}

uint64_t *NSDirectionalEdgeInsets.Edge.all.unsafeMutableAddressor()
{
  if (qword_100496D58 != -1)
    swift_once(&qword_100496D58, sub_100211F80);
  return &static NSDirectionalEdgeInsets.Edge.all;
}

uint64_t static NSDirectionalEdgeInsets.Edge.all.getter()
{
  if (qword_100496D58 != -1)
    swift_once(&qword_100496D58, sub_100211F80);
  return swift_bridgeObjectRetain();
}

double NSDirectionalEdgeInsets.init(edge:length:)(uint64_t a1, double a2)
{
  double v4;

  if (sub_1000C792C(0, a1))
    v4 = a2;
  else
    v4 = 0.0;
  sub_1000C792C(1u, a1);
  sub_1000C792C(2u, a1);
  sub_1000C792C(3u, a1);
  swift_bridgeObjectRelease();
  return v4;
}

id sub_1002120C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  NSString v6;
  id v7;
  id v8;
  id v9;
  id v10;
  __n128 v11;
  id v13;

  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v13 = 0;
  v7 = objc_msgSend(v3, "initWithPattern:options:error:", v6, a3, &v13);

  v8 = v13;
  if (v7)
  {
    v9 = v13;
  }
  else
  {
    v10 = v13;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow(v11);
  }
  return v7;
}

uint64_t sub_1002121A0(uint64_t a1, uint64_t a2)
{
  return sub_1002121C8(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10009AC10);
}

uint64_t sub_1002121B4(uint64_t a1, uint64_t a2)
{
  return sub_1002121C8(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))&Character.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10009AC10);
}

uint64_t sub_1002121C8(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, Swift::Int))
{
  Swift::Int v7;
  _QWORD v10[9];

  Hasher.init(_seed:)(v10);
  a3(v10, a1, a2);
  v7 = Hasher._finalize()();
  return a4(a1, a2, v7);
}

unint64_t sub_100212240(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = dispatch thunk of Hashable._rawHashValue(seed:)(*(_QWORD *)(v4 + 40), &type metadata for Substring, &protocol witness table for Substring);
  return sub_1002123C0(a1, a2, a3, a4, v9);
}

unint64_t sub_1002122C8(Swift::UInt a1)
{
  Swift::Int v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return sub_1002124F8(a1, v2);
}

unint64_t sub_100212320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8);
  if (a2)
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    String.hash(into:)(v8, a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v6 = Hasher._finalize()();
  return sub_100212594(a1, a2, a3, v6);
}

unint64_t sub_1002123C0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  BOOL v22;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  char v34;
  int v35;

  v6 = v5 + 64;
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = a5 & ~v7;
  if (((*(_QWORD *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v11 = *(_QWORD *)(v5 + 48);
    v12 = (unint64_t *)(v11 + 32 * v8);
    v13 = *v12;
    v14 = v12[1];
    v15 = v12[2];
    v16 = v12[3];
    v17 = v13 >> 16;
    v18 = v14 >> 16;
    v19 = a1 >> 16;
    v20 = a2 >> 16;
    v21 = v15 == a3 && v16 == a4;
    v22 = v21 && v17 == v19;
    if (!v22 || v18 != v20)
    {
      v34 = 0;
      if ((_stringCompareInternal(_:_:_:_:expecting:)(v15, v16, v17, v18, a3, a4, v19, v20, v34) & 1) == 0)
      {
        v24 = ~v7;
        do
        {
          v8 = (v8 + 1) & v24;
          if (((*(_QWORD *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
            break;
          v25 = (_QWORD *)(v11 + 32 * v8);
          v26 = v25[2];
          v27 = v25[3];
          v28 = *v25 >> 16;
          v29 = v25[1] >> 16;
          v30 = v26 == a3 && v27 == a4;
          v31 = v30 && v28 == v19;
          if (v31 && v29 == v20)
            break;
          LOBYTE(v35) = 0;
        }
        while ((_stringCompareInternal(_:_:_:_:expecting:)(v26, v27, v28, v29, a3, a4, v19, v20, v35) & 1) == 0);
      }
    }
  }
  return v8;
}

unint64_t sub_1002124F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_100212594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v11;
  id v12;
  char v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  BOOL v17;

  v5 = v4 + 64;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = a4 & ~v6;
  if (((*(_QWORD *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
  {
    v8 = v4;
    v11 = ~v6;
    do
    {
      v14 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 24 * v7);
      v15 = v14[1];
      v16 = (void *)v14[2];
      if (v15)
      {
        if (a2)
        {
          v17 = *v14 == a1 && v15 == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v14[1], a1, a2, 0) & 1) != 0)
          {
LABEL_3:
            sub_1000087DC(0, (unint64_t *)&unk_100497EB0, NSObject_ptr);
            swift_bridgeObjectRetain();
            v12 = v16;
            v13 = static NSObject.== infix(_:_:)(v12, a3);

            swift_bridgeObjectRelease();
            if ((v13 & 1) != 0)
              return v7;
          }
        }
      }
      else if (!a2)
      {
        goto LABEL_3;
      }
      v7 = (v7 + 1) & v11;
    }
    while (((*(_QWORD *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  }
  return v7;
}

void sub_1002126D8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;

  v2 = _swiftEmptyArrayStorage;
  v22 = a2 < 1;
  if (a2 < 1)
  {
    v4 = 0;
  }
  else
  {
    v3 = a1;
    if (__OFADD__(a1, a2))
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    v4 = 0;
    if (a1 <= a1 + a2)
      v5 = a1 + a2;
    else
      v5 = a1;
    v6 = &_swiftEmptyArrayStorage[4];
    while (v5 != v3)
    {
      if (!v4)
      {
        v7 = v2[3];
        if ((uint64_t)((v7 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_33;
        v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
        if (v8 <= 1)
          v9 = 1;
        else
          v9 = v8;
        v10 = sub_100005574(&qword_100497968);
        v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
        v12 = j__malloc_size(v11);
        v13 = v12 - 32;
        if (v12 < 32)
          v13 = v12 - 25;
        v14 = v13 >> 3;
        v11[2] = v9;
        v11[3] = 2 * (v13 >> 3);
        v15 = (unint64_t)(v11 + 4);
        v16 = v2[3] >> 1;
        if (v2[2])
        {
          if (v11 != v2 || v15 >= (unint64_t)&v2[v16 + 4])
            memmove(v11 + 4, v2 + 4, 8 * v16);
          v2[2] = 0;
        }
        v6 = (_QWORD *)(v15 + 8 * v16);
        v4 = (v14 & 0x7FFFFFFFFFFFFFFFLL) - v16;
        swift_release(v2);
        v2 = v11;
      }
      v18 = __OFSUB__(v4--, 1);
      if (v18)
      {
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      *v6++ = v3++;
      if (v22)
        break;
    }
  }
  v19 = v2[3];
  if (v19 < 2)
    return;
  v20 = v19 >> 1;
  v18 = __OFSUB__(v20, v4);
  v21 = v20 - v4;
  if (v18)
  {
LABEL_35:
    __break(1u);
    return;
  }
  v2[2] = v21;
}

uint64_t sub_100212850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v17 = a1;
  v18 = a2;
  v19 = a3;
  v20 = a4;
  v6 = sub_100213BAC();
  swift_bridgeObjectRetain();
  v7 = String.init<A>(_:)(&v17, &type metadata for Substring, &protocol witness table for Substring, v6);
  v9 = v7;
  v10 = v8;
  if ((v8 & 0x1000000000000000) == 0)
  {
    if ((v8 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v12 = HIBYTE(v10) & 0xF;
    v17 = v9;
    v18 = v10 & 0xFFFFFFFFFFFFFFLL;
    v11 = (unsigned __int8 *)&v17;
    goto LABEL_7;
  }
  v9 = sub_100212BC0(v7, v8);
  v14 = v13;
  swift_bridgeObjectRelease();
  v10 = v14;
  if ((v14 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v9 & 0x1000000000000000) != 0)
  {
    v11 = (unsigned __int8 *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v12 = v9 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v11 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v9, v10);
  }
LABEL_7:
  v15 = sub_100212940(v11, v12, a5);
  swift_bridgeObjectRelease();
  return v15 | ((((unint64_t)v15 >> 32) & 1) << 32);
}

unsigned __int8 *sub_100212940(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  unsigned __int8 v13;
  unint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  unint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  unint64_t v31;
  unsigned __int8 v32;

  v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      v16 = a2 - 1;
      if (a2 != 1)
      {
        v17 = a3 + 87;
        if (a3 > 10)
        {
          v18 = a3 + 55;
        }
        else
        {
          v17 = 97;
          v18 = 65;
        }
        if (a3 <= 10)
          v19 = a3 + 48;
        else
          v19 = 58;
        if (result)
        {
          v8 = 0;
          v20 = result + 1;
          do
          {
            v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                v12 = 0;
                v13 = 1;
                if (v21 < 0x61 || v21 >= v17)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v22 = -87;
              }
              else
              {
                v22 = -55;
              }
            }
            else
            {
              v22 = -48;
            }
            v23 = v8 * (unint64_t)a3;
            if ((v23 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v24 = v21 + v22;
            v8 = v23 + v24;
            if (__CFADD__((_DWORD)v23, v24))
              goto LABEL_72;
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          v13 = 0;
          v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      v12 = 0;
      v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        v25 = a3 + 87;
        if (a3 > 10)
        {
          v26 = a3 + 55;
        }
        else
        {
          v25 = 97;
          v26 = 65;
        }
        if (a3 <= 10)
          v27 = a3 + 48;
        else
          v27 = 58;
        if (result)
        {
          v28 = 0;
          do
          {
            v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                v12 = 0;
                v13 = 1;
                if (v29 < 0x61 || v29 >= v25)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v30 = -87;
              }
              else
              {
                v30 = -55;
              }
            }
            else
            {
              v30 = -48;
            }
            v31 = v28 * (unint64_t)a3;
            if ((v31 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v32 = v29 + v30;
            v28 = v31 + v32;
            if (__CFADD__((_DWORD)v31, v32))
              goto LABEL_72;
            ++result;
            --a2;
          }
          while (a2);
          v13 = 0;
          v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      v4 = a2 - 1;
      if (a2 != 1)
      {
        v5 = a3 + 87;
        if (a3 > 10)
        {
          v6 = a3 + 55;
        }
        else
        {
          v5 = 97;
          v6 = 65;
        }
        if (a3 <= 10)
          v7 = a3 + 48;
        else
          v7 = 58;
        if (result)
        {
          v8 = 0;
          v9 = result + 1;
          while (1)
          {
            v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                v12 = 0;
                v13 = 1;
                if (v10 < 0x61 || v10 >= v5)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v11 = -87;
              }
              else
              {
                v11 = -55;
              }
            }
            else
            {
              v11 = -48;
            }
            v14 = v8 * (unint64_t)a3;
            if ((v14 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v15 = v10 + v11;
            v8 = v14 - v15;
            if (v14 < v15)
              goto LABEL_72;
            ++v9;
            if (!--v4)
              goto LABEL_48;
          }
        }
LABEL_71:
        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100212BC0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v8 = sub_100212C3C(v4, v5, v6, v7);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_100212C3C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_1001EB2D4(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_100229620(v12, 0);
      v5 = sub_1001EB3C0((unint64_t)v14, v8 + 32, v9, a1, a2, v5, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v13 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v13;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v14 + v8, v9 - v8);
  }
}

BOOL sub_100212D80(uint64_t a1, void *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String_optional v16;
  void *object;
  _BOOL8 v18;

  v10 = a4 >> 14;
  swift_bridgeObjectRetain();
  if (v10 == a3 >> 14)
  {
LABEL_10:
    object = String.Iterator.next()().value._object;
    swift_bridgeObjectRelease(a2);
    v18 = object == 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    v11 = a3;
    while (1)
    {
      while (1)
      {
        v13 = Substring.subscript.getter(v11, a3, a4, a5, a6);
        v15 = v14;
        v11 = Substring.index(after:)(v11, a3, a4, a5, a6);
        v16 = String.Iterator.next()();
        if (!v16.value._object)
        {
          swift_bridgeObjectRelease(a6);
          swift_bridgeObjectRelease(v15);
          v18 = 1;
          goto LABEL_13;
        }
        if (v13 != v16.value._countAndFlagsBits || v16.value._object != v15)
          break;
        swift_bridgeObjectRelease(v15);
        swift_bridgeObjectRelease(v16.value._object);
        if (v10 == v11 >> 14)
        {
LABEL_9:
          swift_bridgeObjectRelease(a6);
          goto LABEL_10;
        }
      }
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v15, v16.value._countAndFlagsBits, v16.value._object, 0);
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v16.value._object);
      if ((v12 & 1) == 0)
        break;
      if (v10 == v11 >> 14)
        goto LABEL_9;
    }
    swift_bridgeObjectRelease(a6);
    v18 = 0;
LABEL_13:
    object = a2;
  }
  swift_bridgeObjectRelease(object);
  return v18;
}

uint64_t sub_100212F14(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t result;
  _QWORD v13[2];
  unsigned __int8 v14;

  if ((a4 & 0x1000000000000000) != 0)
  {
    LODWORD(result) = 0;
    v14 = 0;
    return result | ((unint64_t)v14 << 32) | (((a4 >> 60) & 1) << 40);
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v13[0] = a3;
    v13[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v11 = v13;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v11 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v11 = (_QWORD *)_StringObject.sharedUTF8.getter(a3, a4);
  }
  result = sub_100213158((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    v14 = BYTE4(result) & 1;
    return result | ((unint64_t)v14 << 32) | (((a4 >> 60) & 1) << 40);
  }
  return result;
}

void sub_100212FE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = __DataStorage._bytes.getter();
  if (v9)
  {
    v10 = __DataStorage._offset.getter();
    if (__OFSUB__(a1, v10))
    {
LABEL_13:
      __break(1u);
      return;
    }
    v9 += a1 - v10;
  }
  v11 = __OFSUB__(a2, a1);
  v12 = a2 - a1;
  if (v11)
  {
    __break(1u);
    goto LABEL_13;
  }
  v13 = __DataStorage._length.getter();
  if (v13 >= v12)
    v14 = v12;
  else
    v14 = v13;
  v15 = v9 + v14;
  if (v9)
    v16 = v15;
  else
    v16 = 0;
  sub_10020DB00(v9, v16, a4, a5);
}

unint64_t sub_10021309C()
{
  unint64_t result;

  result = qword_100497AA0;
  if (!qword_100497AA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100497AA0);
  }
  return result;
}

unint64_t sub_1002130E0()
{
  unint64_t result;

  result = qword_100497AC0;
  if (!qword_100497AC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _NSRange.ConversionError, &type metadata for _NSRange.ConversionError);
    atomic_store(result, (unint64_t *)&qword_100497AC0);
  }
  return result;
}

uint64_t sub_100213124(unsigned int *a1)
{
  uint64_t v1;

  return sub_100211490(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_100213140@<X0>(_BYTE *a1@<X0>, unsigned int *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;

  return sub_1002116E4(a1, a2, *(_QWORD *)(v3 + 16), a3);
}

uint64_t sub_100213158(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  unsigned int v29;
  unsigned __int8 v30;
  unint64_t v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned int v38;
  char v39;
  unint64_t v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned int v45;
  char v46;
  unint64_t v47;
  unsigned __int8 v48;

  v10 = a2;
  v11 = result;
  v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    result = sub_10018F878(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v15 = a2 >> 16;
      if (v14 != v13)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v16 = HIBYTE(a5) & 0xF;
  if (v16 < a2 >> 16)
    goto LABEL_104;
  result = String.UTF8View._foreignDistance(from:to:)(15, a2, a4, a5);
  v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    result = sub_10018F878(v10, a4, a5);
    v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    result = sub_10018F878(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v17 = a4 & 0xFFFFFFFFFFFFLL;
  if (v17 < v10 >> 16)
    goto LABEL_100;
  if (v17 < a3 >> 16)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  result = String.UTF8View._foreignDistance(from:to:)(v10, a3, a4, a5);
LABEL_21:
  v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_99;
  }
  if (v18 < v15)
  {
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11)
    v19 = 0;
  v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v33 = a6 + 87;
        if (a6 > 10)
        {
          v34 = a6 + 55;
        }
        else
        {
          v33 = 97;
          v34 = 65;
        }
        if (a6 <= 10)
          v35 = a6 + 48;
        else
          v35 = 58;
        if (v19)
        {
          v24 = 0;
          v36 = v19 + 1;
          v37 = result - 1;
          do
          {
            v38 = *v36;
            if (v38 < 0x30 || v38 >= v35)
            {
              if (v38 < 0x41 || v38 >= v34)
              {
                v29 = 0;
                v30 = 1;
                if (v38 < 0x61 || v38 >= v33)
                  return v29 | ((unint64_t)v30 << 32);
                v39 = -87;
              }
              else
              {
                v39 = -55;
              }
            }
            else
            {
              v39 = -48;
            }
            v40 = v24 * (unint64_t)a6;
            if ((v40 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_96;
            v41 = v38 + v39;
            v24 = v40 + v41;
            if (__CFADD__((_DWORD)v40, v41))
              goto LABEL_96;
            ++v36;
            --v37;
          }
          while (v37);
LABEL_94:
          v30 = 0;
          v29 = v24;
          return v29 | ((unint64_t)v30 << 32);
        }
        goto LABEL_95;
      }
      goto LABEL_96;
    }
    goto LABEL_103;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      v42 = a6 + 87;
      if (a6 > 10)
      {
        v43 = a6 + 55;
      }
      else
      {
        v42 = 97;
        v43 = 65;
      }
      if (a6 <= 10)
        v44 = a6 + 48;
      else
        v44 = 58;
      if (v19)
      {
        v24 = 0;
        while (1)
        {
          v45 = *v19;
          if (v45 < 0x30 || v45 >= v44)
          {
            if (v45 < 0x41 || v45 >= v43)
            {
              v29 = 0;
              v30 = 1;
              if (v45 < 0x61 || v45 >= v42)
                return v29 | ((unint64_t)v30 << 32);
              v46 = -87;
            }
            else
            {
              v46 = -55;
            }
          }
          else
          {
            v46 = -48;
          }
          v47 = v24 * (unint64_t)a6;
          if ((v47 & 0xFFFFFFFF00000000) != 0)
            goto LABEL_96;
          v48 = v45 + v46;
          v24 = v47 + v48;
          if (__CFADD__((_DWORD)v47, v48))
            goto LABEL_96;
          ++v19;
          if (!--result)
            goto LABEL_94;
        }
      }
      goto LABEL_95;
    }
LABEL_96:
    v29 = 0;
    v30 = 1;
    return v29 | ((unint64_t)v30 << 32);
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v21 = a6 + 87;
      if (a6 > 10)
      {
        v22 = a6 + 55;
      }
      else
      {
        v21 = 97;
        v22 = 65;
      }
      if (a6 <= 10)
        v23 = a6 + 48;
      else
        v23 = 58;
      if (v19)
      {
        v24 = 0;
        v25 = v19 + 1;
        v26 = result - 1;
        while (1)
        {
          v27 = *v25;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              v29 = 0;
              v30 = 1;
              if (v27 < 0x61 || v27 >= v21)
                return v29 | ((unint64_t)v30 << 32);
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v31 = v24 * (unint64_t)a6;
          if ((v31 & 0xFFFFFFFF00000000) != 0)
            goto LABEL_96;
          v32 = v27 + v28;
          v24 = v31 - v32;
          if (v31 < v32)
            goto LABEL_96;
          ++v25;
          if (!--v26)
            goto LABEL_94;
        }
      }
LABEL_95:
      v29 = 0;
      v30 = 0;
      return v29 | ((unint64_t)v30 << 32);
    }
    goto LABEL_96;
  }
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

unint64_t _s14MusicUtilities13RomanNumeralsO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100456528, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xD)
    return 13;
  else
    return v3;
}

unint64_t sub_1002135C8()
{
  unint64_t result;

  result = qword_100497AC8;
  if (!qword_100497AC8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _NSRange.ConversionError, &type metadata for _NSRange.ConversionError);
    atomic_store(result, (unint64_t *)&qword_100497AC8);
  }
  return result;
}

unint64_t sub_100213610()
{
  unint64_t result;

  result = qword_100497AD0;
  if (!qword_100497AD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _NSRange.NSRangeIterator, &type metadata for _NSRange.NSRangeIterator);
    atomic_store(result, (unint64_t *)&qword_100497AD0);
  }
  return result;
}

unint64_t sub_100213658()
{
  unint64_t result;

  result = qword_100497AD8;
  if (!qword_100497AD8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RomanNumerals, &type metadata for RomanNumerals);
    atomic_store(result, (unint64_t *)&qword_100497AD8);
  }
  return result;
}

uint64_t sub_10021369C()
{
  return sub_10002FFB8(&qword_100497AE0, &qword_100497AE8, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_1002136CC()
{
  unint64_t result;

  result = qword_100497AF0[0];
  if (!qword_100497AF0[0])
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NSDirectionalEdgeInsets.Edge, &type metadata for NSDirectionalEdgeInsets.Edge);
    atomic_store(result, qword_100497AF0);
  }
  return result;
}

ValueMetadata *type metadata accessor for Data.Hexadecimal()
{
  return &type metadata for Data.Hexadecimal;
}

_BYTE *_s15ConversionErrorOwCP(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t _s15ConversionErrorOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100213778 + 4 * byte_100393C32[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1002137AC + 4 * byte_100393C2D[v4]))();
}

uint64_t sub_1002137AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002137B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002137BCLL);
  return result;
}

uint64_t sub_1002137C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002137D0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1002137D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002137DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for _NSRange.ConversionError()
{
  return &type metadata for _NSRange.ConversionError;
}

__n128 _s15NSRangeIteratorVwcp(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s15NSRangeIteratorVwet(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t _s15NSRangeIteratorVwst(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 25) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _NSRange.NSRangeIterator()
{
  return &type metadata for _NSRange.NSRangeIterator;
}

uint64_t type metadata accessor for WeakWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100031DCC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakWrapper);
}

uint64_t storeEnumTagSinglePayload for RomanNumerals(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_1002138D8 + 4 * byte_100393C3C[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_10021390C + 4 * byte_100393C37[v4]))();
}

uint64_t sub_10021390C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100213914(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10021391CLL);
  return result;
}

uint64_t sub_100213928(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100213930);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_100213934(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10021393C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RomanNumerals()
{
  return &type metadata for RomanNumerals;
}

uint64_t _s4EdgeOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1002139A4 + 4 * byte_100393C46[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1002139D8 + 4 * byte_100393C41[v4]))();
}

uint64_t sub_1002139D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002139E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002139E8);
  return result;
}

uint64_t sub_1002139F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002139FCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100213A00(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100213A08(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NSDirectionalEdgeInsets.Edge()
{
  return &type metadata for NSDirectionalEdgeInsets.Edge;
}

Swift::Int sub_100213A24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;
  Swift::Int result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _QWORD v19[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100005574(&qword_100497B78);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = *(unsigned __int8 *)(v6 + v4);
      Hasher.init(_seed:)(v19);
      Hasher._combine(_:)(v7);
      result = Hasher._finalize()();
      v9 = -1 << *(_BYTE *)(v3 + 32);
      v10 = result & ~v9;
      v11 = v10 >> 6;
      v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
      v13 = 1 << v10;
      v14 = *(_QWORD *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(unsigned __int8 *)(v14 + v10) == (_DWORD)v7)
          goto LABEL_3;
        v15 = ~v9;
        while (1)
        {
          v10 = (v10 + 1) & v15;
          v11 = v10 >> 6;
          v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
          v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0)
            break;
          if (*(unsigned __int8 *)(v14 + v10) == (_DWORD)v7)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
      *(_BYTE *)(v14 + v10) = v7;
      v16 = *(_QWORD *)(v3 + 16);
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_100213B64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005574(&qword_100497AB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100213BAC()
{
  unint64_t result;

  result = qword_100497B80;
  if (!qword_100497B80)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_100497B80);
  }
  return result;
}

BOOL static MPModelObject.LoggingComponent.__derived_enum_less_than(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 < a2;
}

BOOL sub_100213C00(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_100213C14(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_100213C28(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_100213C3C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

void MPModelObject.humanDescription(including:)(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t ObjectType;
  Swift::String v5;
  void *object;
  Swift::String v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  __n128 v14;
  void **v15;
  unint64_t v16;
  uint64_t (*v17)(uint64_t);
  void *v18;
  uint64_t (*v19)();
  uint64_t v20;
  _QWORD v21[2];

  v2 = v1;
  v15 = 0;
  v16 = 0xE000000000000000;
  ObjectType = swift_getObjectType();
  v5._countAndFlagsBits = _typeName(_:qualified:)(ObjectType, 0);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7._countAndFlagsBits = 8250;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  v21[0] = v1;
  _print_unlocked<A, B>(_:_:)(v21, &v15, &type metadata for UnsafeMutableRawPointer, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v21[0] = v15;
  v21[1] = v16;
  v8 = (void *)objc_opt_self(MPModelObject);
  v9 = (_QWORD *)swift_allocObject(&unk_1004580A8, 40, 7);
  v9[2] = a1;
  v9[3] = v21;
  v9[4] = v2;
  v10 = swift_allocObject(&unk_1004580D0, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_1002140EC;
  *(_QWORD *)(v10 + 24) = v9;
  v19 = sub_1000B0290;
  v20 = v10;
  v15 = _NSConcreteStackBlock;
  v16 = 1107296256;
  v17 = sub_100009BD0;
  v18 = &unk_1004580E8;
  v11 = _Block_copy(&v15);
  v12 = v20;
  swift_bridgeObjectRetain();
  v13 = v2;
  swift_retain(v10);
  objc_msgSend(v8, "performWithoutEnforcement:", v11, swift_release(v12).n128_f64[0]);
  _Block_release(v11);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation(v10, "", 136, 24, 49, 1, v14);
  swift_release(v10);
  if ((v2 & 1) != 0)
    __break(1u);
  else
    swift_release(v9);
}

double sub_100213E1C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  objc_class *ObjCClassFromMetadata;
  objc_ivar *InstanceVariable;
  id v27;
  id v28;
  uint64_t v29;
  Swift::String v30;
  void *object;
  double result;
  _OWORD v33[2];
  _QWORD v34[2];

  v5 = swift_bridgeObjectRetain();
  v6 = sub_1002249F0(v5);
  swift_bridgeObjectRelease(a1);
  *(_QWORD *)&v33[0] = v6;
  sub_10021501C((char **)v33);
  v7 = *(_QWORD *)&v33[0];
  v8 = *(_QWORD *)(*(_QWORD *)&v33[0] + 16);
  if (v8)
  {
    swift_retain(*(_QWORD *)&v33[0]);
    v9 = 0;
    while (*(_BYTE *)(v7 + v9 + 32))
    {
      if (*(_BYTE *)(v7 + v9 + 32) == 1)
      {
        *(_QWORD *)&v33[0] = 23328;
        *((_QWORD *)&v33[0] + 1) = 0xE200000000000000;
        v19 = objc_msgSend(a3, "shortDescription");
        v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
        v22 = v21;

        v23._countAndFlagsBits = v20;
        v23._object = v22;
        String.append(_:)(v23);
        swift_bridgeObjectRelease(v22);
        v24._countAndFlagsBits = 93;
        v24._object = (void *)0xE100000000000000;
        String.append(_:)(v24);
        goto LABEL_4;
      }
      sub_100215084();
      ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
      InstanceVariable = class_getInstanceVariable(ObjCClassFromMetadata, "_storage");
      if (!InstanceVariable)
        goto LABEL_6;
      strcpy((char *)v34, " properties=");
      BYTE5(v34[1]) = 0;
      HIWORD(v34[1]) = -5120;
      v27 = object_getIvar(a3, InstanceVariable);
      if (v27)
      {
        v28 = v27;
        _bridgeAnyObjectToAny(_:)(v27);
        swift_unknownObjectRelease(v28);
      }
      else
      {
        memset(v33, 0, sizeof(v33));
      }
      v29 = sub_100005574(&qword_100497470);
      v30._countAndFlagsBits = String.init<A>(describing:)(v33, v29);
      object = v30._object;
      String.append(_:)(v30);
      swift_bridgeObjectRelease(object);
      v16 = v34[0];
      v17 = v34[1];
LABEL_5:
      v18 = v17;
      String.append(_:)(*(Swift::String *)&v16);
      swift_bridgeObjectRelease(v17);
LABEL_6:
      if (v8 == ++v9)
      {
        swift_release_n(v7, 2);
        return result;
      }
    }
    strcpy((char *)v33, " identifiers=");
    HIWORD(v33[0]) = -4864;
    v10 = objc_msgSend(a3, "identifiers");
    v11 = objc_msgSend(v10, "description");
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    v15._countAndFlagsBits = v12;
    v15._object = v14;
    String.append(_:)(v15);

    swift_bridgeObjectRelease(v14);
LABEL_4:
    v17 = *((_QWORD *)&v33[0] + 1);
    v16 = *(_QWORD *)&v33[0];
    goto LABEL_5;
  }
  *(_QWORD *)&result = swift_release(*(_QWORD *)&v33[0]).n128_u64[0];
  return result;
}

uint64_t sub_1002140C0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

double sub_1002140EC()
{
  uint64_t v0;

  return sub_100213E1C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1002140F8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100214108(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100214118(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

unint64_t sub_100214124()
{
  unint64_t result;

  result = qword_100497B98;
  if (!qword_100497B98)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MPModelObject.LoggingComponent, &type metadata for MPModelObject.LoggingComponent);
    atomic_store(result, (unint64_t *)&qword_100497B98);
  }
  return result;
}

uint64_t _s16LoggingComponentOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1002141B4 + 4 * byte_100394025[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1002141E8 + 4 * byte_100394020[v4]))();
}

uint64_t sub_1002141E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002141F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002141F8);
  return result;
}

uint64_t sub_100214204(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10021420CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100214210(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100214218(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MPModelObject.LoggingComponent()
{
  return &type metadata for MPModelObject.LoggingComponent;
}

uint64_t sub_10021426C()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;

  v1 = v0;
  v2 = objc_msgSend(v0, "title");
  if (v2)
  {
    v3 = v2;
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v6 = v5;

  }
  else
  {
    v6 = (void *)0xED0000676E6F5320;
    v4 = 0x64656C7469746E55;
  }
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  v8._countAndFlagsBits = 34;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v9 = objc_msgSend(v1, "album");
  if (v9)
  {
    v10 = v9;
    v11 = objc_msgSend(v9, "shortDescription");
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    v15._countAndFlagsBits = v12;
    v15._object = v14;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v14);
    v16._countAndFlagsBits = 0x206D75626C41203BLL;
    v16._object = (void *)0xE800000000000000;
    String.append(_:)(v16);

    swift_bridgeObjectRelease(0xE800000000000000);
  }
  v17 = objc_msgSend(v1, "artist");
  if (v17)
  {
    v18 = v17;
    v19 = objc_msgSend(v17, "shortDescription");
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    v23._countAndFlagsBits = v20;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease(v22);
    v24._countAndFlagsBits = 0x747369747241203BLL;
    v24._object = (void *)0xE900000000000020;
    String.append(_:)(v24);

    swift_bridgeObjectRelease(0xE900000000000020);
  }
  return 0x22203A656C746954;
}

uint64_t sub_100214634()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;

  v1 = objc_msgSend(v0, "name");
  if (v1)
  {
    v2 = v1;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v5 = v4;

  }
  else
  {
    v5 = (void *)0x80000001003B0520;
    v3 = 0xD000000000000011;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v5);
  v7._countAndFlagsBits = 34;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0x22203A656D614ELL;
}

uint64_t sub_1002146F8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t (*v18)@<X0>(uint64_t *@<X8>);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v20 = 0x203A65707954;
  v21 = 0xE600000000000000;
  v1 = swift_allocObject(&unk_1004581B0, 24, 7);
  *(_QWORD *)(v1 + 16) = v0;
  v2 = swift_allocObject(&unk_1004581D8, 32, 7);
  *(_QWORD *)(v2 + 16) = sub_100214FC0;
  *(_QWORD *)(v2 + 24) = v1;
  v18 = sub_100214FF4;
  v19 = v2;
  v3 = v0;
  v4 = sub_100005574(&qword_100497BA0);
  v5._countAndFlagsBits = String.init<A>(describing:)(&v18, v4);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 2236475;
  v6._object = (void *)0xE300000000000000;
  String.append(_:)(v6);
  v7 = objc_msgSend(v3, "anyObject", v18, v19);
  v8 = v7;
  if (v7)
  {
    v9 = objc_msgSend(v7, "shortDescription");

    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v8 = v11;

  }
  else
  {
    v10 = 0;
  }
  v12 = Optional<A>.description.getter(v10, v8);
  v14 = v13;
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 34;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  return v20;
}

uint64_t sub_1002149EC()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;

  v1 = v0;
  v2 = objc_msgSend(v0, "title");
  if (v2)
  {
    v3 = v2;
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v6 = v5;

  }
  else
  {
    v6 = (void *)0x80000001003B7290;
    v4 = 0xD000000000000010;
  }
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  v8._countAndFlagsBits = 34;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v9 = objc_msgSend(v1, "show");
  if (v9)
  {
    v10 = v9;
    v11 = objc_msgSend(v9, "shortDescription");
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    v15._countAndFlagsBits = v12;
    v15._object = v14;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v14);
    v16._countAndFlagsBits = 0x20776F6853203BLL;
    v16._object = (void *)0xE700000000000000;
    String.append(_:)(v16);

    swift_bridgeObjectRelease(0xE700000000000000);
  }
  v17 = objc_msgSend(v1, "season");
  if (v17)
  {
    v18 = v17;
    v19 = objc_msgSend(v17, "shortDescription");
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    v23._countAndFlagsBits = v20;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease(v22);
    v24._countAndFlagsBits = 0x6E6F73616553203BLL;
    v24._object = (void *)0xE900000000000020;
    String.append(_:)(v24);

    swift_bridgeObjectRelease(0xE900000000000020);
  }
  return 0x22203A656C746954;
}

id sub_100214CCC(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;

  v4 = a1;
  a3();
  v6 = v5;

  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  return v7;
}

uint64_t sub_100214D24()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;

  v1 = objc_msgSend(v0, "name");
  if (v1)
  {
    v2 = v1;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v5 = v4;

  }
  else
  {
    v5 = (void *)0x80000001003B7270;
    v3 = 0xD000000000000010;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v5);
  v7._countAndFlagsBits = 34;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0x22203A656D614ELL;
}

uint64_t sub_100214F9C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_100214FC0()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "type");
}

uint64_t sub_100214FD0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100214FF4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t sub_10021501C(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_100225844((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_1002150C0(v5);
  *a1 = v2;
  return result;
}

unint64_t sub_100215084()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100497BA8;
  if (!qword_100497BA8)
  {
    v1 = objc_opt_self(MPModelObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100497BA8);
  }
  return result;
}

uint64_t sub_1002150C0(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  Swift::Int v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  Swift::Int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  Swift::Int v17;
  Swift::Int v18;
  char v19;
  Swift::Int v20;
  _BYTE *v21;
  unsigned int v22;
  Swift::Int v23;
  _BYTE *v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  char v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  Swift::Int v94;
  uint64_t v95;
  unsigned __int8 *v96;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return result;
      v78 = 0;
      v79 = *v2;
      v80 = 1;
      while (1)
      {
        v81 = *(unsigned __int8 *)(v79 + v80);
        v82 = v78;
        do
        {
          v83 = *(unsigned __int8 *)(v79 + v82);
          if (v81 >= v83)
            break;
          if (!v79)
            goto LABEL_144;
          *(_BYTE *)(v79 + v82 + 1) = v83;
          *(_BYTE *)(v79 + v82--) = v81;
        }
        while (v82 != -1);
        ++v80;
        ++v78;
        if (v80 == v3)
          return result;
      }
    }
    goto LABEL_140;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_139;
  v93 = result;
  v94 = v3;
  if (v3 <= 1)
  {
    v7 = _swiftEmptyArrayStorage;
    v96 = (unsigned __int8 *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v11 = _swiftEmptyArrayStorage[2];
      v10 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_104;
    }
    v92 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    result = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for MPModelObject.LoggingComponent);
    *(_QWORD *)(result + 16) = v6;
    v3 = v94;
    v92 = (_QWORD *)result;
    v96 = (unsigned __int8 *)(result + 32);
  }
  v8 = 0;
  v91 = v2;
  v9 = *v2;
  v10 = (char *)_swiftEmptyArrayStorage;
  v95 = *v2;
  while (1)
  {
    v12 = v8++;
    if (v8 < v3)
    {
      v13 = *(unsigned __int8 *)(v9 + v8);
      v14 = *(unsigned __int8 *)(v9 + v12);
      v8 = v12 + 2;
      if (v12 + 2 < v3)
      {
        v15 = v13;
        while (1)
        {
          v16 = *(unsigned __int8 *)(v9 + v8);
          if (v13 < v14 == v16 >= v15)
            break;
          ++v8;
          v15 = v16;
          if (v3 == v8)
          {
            v8 = v3;
            break;
          }
        }
      }
      if (v13 < v14)
      {
        if (v8 < v12)
          goto LABEL_141;
        if (v12 < v8)
        {
          v17 = v8 - 1;
          v18 = v12;
          do
          {
            if (v18 != v17)
            {
              if (!v9)
                goto LABEL_147;
              v19 = *(_BYTE *)(v9 + v18);
              *(_BYTE *)(v9 + v18) = *(_BYTE *)(v9 + v17);
              *(_BYTE *)(v9 + v17) = v19;
            }
            v58 = ++v18 < v17--;
          }
          while (v58);
        }
      }
    }
    if (v8 < v3)
    {
      if (__OFSUB__(v8, v12))
        goto LABEL_138;
      if (v8 - v12 < v93)
      {
        v20 = v12 + v93;
        if (__OFADD__(v12, v93))
          goto LABEL_142;
        if (v20 >= v3)
          v20 = v3;
        if (v20 < v12)
          goto LABEL_143;
        if (v8 != v20)
        {
          v21 = (_BYTE *)(v9 + v8);
          do
          {
            v22 = *(unsigned __int8 *)(v9 + v8);
            v23 = v12;
            v24 = v21;
            do
            {
              v25 = *(v24 - 1);
              if (v22 >= v25)
                break;
              if (!v9)
                goto LABEL_145;
              *v24 = v25;
              *--v24 = v22;
              ++v23;
            }
            while (v8 != v23);
            ++v8;
            ++v21;
          }
          while (v8 != v20);
          v8 = v20;
        }
      }
    }
    if (v8 < v12)
    {
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }
    result = swift_isUniquelyReferenced_nonNull_native(v10);
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_100225738(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
      v10 = (char *)result;
    }
    v27 = *((_QWORD *)v10 + 2);
    v26 = *((_QWORD *)v10 + 3);
    v11 = v27 + 1;
    v9 = v95;
    if (v27 >= v26 >> 1)
    {
      result = (uint64_t)sub_100225738((char *)(v26 > 1), v27 + 1, 1, v10);
      v9 = v95;
      v10 = (char *)result;
    }
    *((_QWORD *)v10 + 2) = v11;
    v28 = v10 + 32;
    v29 = &v10[16 * v27 + 32];
    *(_QWORD *)v29 = v12;
    *((_QWORD *)v29 + 1) = v8;
    if (v27)
      break;
    v11 = 1;
LABEL_15:
    v3 = v94;
    if (v8 >= v94)
    {
      v2 = v91;
      v7 = v92;
LABEL_104:
      v92 = v7;
      if (v11 < 2)
      {
LABEL_115:
        v77 = v10;
        goto LABEL_116;
      }
      v84 = *v2;
      while (1)
      {
        v85 = v11 - 2;
        if (v11 < 2)
          break;
        if (!v84)
          goto LABEL_148;
        v76 = (uint64_t)v10;
        v86 = v10 + 32;
        v87 = *(_QWORD *)&v10[16 * v85 + 32];
        v88 = *(_QWORD *)&v10[16 * v11 + 24];
        result = sub_1002156F4((unsigned __int8 *)(v84 + v87), (unsigned __int8 *)(v84 + v86[2 * v11 - 2]), v84 + v88, v96);
        if (v1)
          goto LABEL_95;
        if (v88 < v87)
          goto LABEL_135;
        result = swift_isUniquelyReferenced_nonNull_native(v76);
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_100225830(v76);
          v76 = result;
        }
        if (v85 >= *(_QWORD *)(v76 + 16))
          goto LABEL_136;
        v89 = (_QWORD *)(v76 + 32 + 16 * v85);
        *v89 = v87;
        v89[1] = v88;
        v90 = *(_QWORD *)(v76 + 16);
        if (v11 > v90)
          goto LABEL_137;
        result = (uint64_t)memmove((void *)(v76 + 32 + 16 * (v11 - 1)), (const void *)(v76 + 32 + 16 * v11), 16 * (v90 - v11));
        v10 = (char *)v76;
        *(_QWORD *)(v76 + 16) = v90 - 1;
        v11 = v90 - 1;
        if (v90 <= 2)
          goto LABEL_115;
      }
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
      return result;
    }
  }
  while (1)
  {
    v30 = v11 - 1;
    if (v11 >= 4)
    {
      v35 = &v28[2 * v11];
      v36 = *(v35 - 8);
      v37 = *(v35 - 7);
      v41 = __OFSUB__(v37, v36);
      v38 = v37 - v36;
      if (v41)
        goto LABEL_122;
      v40 = *(v35 - 6);
      v39 = *(v35 - 5);
      v41 = __OFSUB__(v39, v40);
      v33 = v39 - v40;
      v34 = v41;
      if (v41)
        goto LABEL_123;
      v42 = v11 - 2;
      v43 = &v28[2 * v11 - 4];
      v45 = *v43;
      v44 = v43[1];
      v41 = __OFSUB__(v44, v45);
      v46 = v44 - v45;
      if (v41)
        goto LABEL_124;
      v41 = __OFADD__(v33, v46);
      v47 = v33 + v46;
      if (v41)
        goto LABEL_126;
      if (v47 >= v38)
      {
        v65 = &v28[2 * v30];
        v67 = *v65;
        v66 = v65[1];
        v41 = __OFSUB__(v66, v67);
        v68 = v66 - v67;
        if (v41)
          goto LABEL_132;
        v58 = v33 < v68;
        goto LABEL_84;
      }
    }
    else
    {
      if (v11 != 3)
      {
        v59 = *((_QWORD *)v10 + 4);
        v60 = *((_QWORD *)v10 + 5);
        v41 = __OFSUB__(v60, v59);
        v52 = v60 - v59;
        v53 = v41;
        goto LABEL_78;
      }
      v32 = *((_QWORD *)v10 + 4);
      v31 = *((_QWORD *)v10 + 5);
      v41 = __OFSUB__(v31, v32);
      v33 = v31 - v32;
      v34 = v41;
    }
    if ((v34 & 1) != 0)
      goto LABEL_125;
    v42 = v11 - 2;
    v48 = &v28[2 * v11 - 4];
    v50 = *v48;
    v49 = v48[1];
    v51 = __OFSUB__(v49, v50);
    v52 = v49 - v50;
    v53 = v51;
    if (v51)
      goto LABEL_127;
    v54 = &v28[2 * v30];
    v56 = *v54;
    v55 = v54[1];
    v41 = __OFSUB__(v55, v56);
    v57 = v55 - v56;
    if (v41)
      goto LABEL_129;
    if (__OFADD__(v52, v57))
      goto LABEL_131;
    if (v52 + v57 >= v33)
    {
      v58 = v33 < v57;
LABEL_84:
      if (v58)
        v30 = v42;
      goto LABEL_86;
    }
LABEL_78:
    if ((v53 & 1) != 0)
      goto LABEL_128;
    v61 = &v28[2 * v30];
    v63 = *v61;
    v62 = v61[1];
    v41 = __OFSUB__(v62, v63);
    v64 = v62 - v63;
    if (v41)
      goto LABEL_130;
    if (v64 < v52)
      goto LABEL_15;
LABEL_86:
    v69 = v30 - 1;
    if (v30 - 1 >= v11)
    {
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    if (!v9)
      goto LABEL_146;
    v70 = &v28[2 * v69];
    v71 = *v70;
    v72 = v28;
    v73 = &v28[2 * v30];
    v74 = v73[1];
    result = sub_1002156F4((unsigned __int8 *)(v9 + *v70), (unsigned __int8 *)(v9 + *v73), v9 + v74, v96);
    if (v1)
      break;
    if (v74 < v71)
      goto LABEL_119;
    if (v30 > *((_QWORD *)v10 + 2))
      goto LABEL_120;
    *v70 = v71;
    v72[2 * v69 + 1] = v74;
    v75 = *((_QWORD *)v10 + 2);
    if (v30 >= v75)
      goto LABEL_121;
    v11 = v75 - 1;
    result = (uint64_t)memmove(v73, v73 + 2, 16 * (v75 - 1 - v30));
    v28 = v72;
    *((_QWORD *)v10 + 2) = v75 - 1;
    v9 = v95;
    if (v75 <= 2)
      goto LABEL_15;
  }
  v76 = (uint64_t)v10;
LABEL_95:
  v77 = (char *)v76;
LABEL_116:
  swift_bridgeObjectRelease(v77);
  v92[2] = 0;
  return swift_bridgeObjectRelease(v92);
}

uint64_t sub_1002156F4(unsigned __int8 *__dst, unsigned __int8 *__src, unint64_t a3, unsigned __int8 *a4)
{
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  BOOL v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 v16;
  unsigned int v17;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = a3 - (_QWORD)__src;
  if (__src - __dst < (uint64_t)(a3 - (_QWORD)__src))
  {
    if (a4 != __dst || __src <= a4)
      memmove(a4, __dst, v8);
    v10 = &v4[v8];
    if ((unint64_t)v6 >= a3 || v8 < 1)
    {
LABEL_15:
      v6 = v7;
      if (v7 != v4)
        goto LABEL_38;
      goto LABEL_37;
    }
    while (1)
    {
      v11 = *v6;
      if (v11 >= *v4)
        break;
      v12 = v7 == v6++;
      if (!v12)
        goto LABEL_12;
LABEL_13:
      ++v7;
      if (v4 >= v10 || (unint64_t)v6 >= a3)
        goto LABEL_15;
    }
    LOBYTE(v11) = *v4;
    v12 = v7 == v4++;
    if (v12)
      goto LABEL_13;
LABEL_12:
    *v7 = v11;
    goto LABEL_13;
  }
  if (a4 != __src || a3 <= (unint64_t)a4)
    memmove(a4, __src, a3 - (_QWORD)__src);
  v10 = &v4[v9];
  if (v7 >= v6 || v9 < 1)
  {
LABEL_36:
    if (v6 != v4)
      goto LABEL_38;
    goto LABEL_37;
  }
  v13 = (unsigned __int8 *)(a3 - 1);
  v14 = v6;
  while (1)
  {
    v15 = v13 + 1;
    v17 = *--v14;
    v16 = v17;
    if (*(v10 - 1) >= v17)
    {
      v16 = *(v10 - 1);
      v14 = v6;
      if (v15 != v10)
      {
        --v10;
LABEL_32:
        *v13 = v16;
        goto LABEL_33;
      }
      if (v13 >= v10--)
        goto LABEL_32;
    }
    else if (v15 != v6 || v13 >= v6)
    {
      goto LABEL_32;
    }
LABEL_33:
    if (v14 <= v7)
      break;
    --v13;
    v6 = v14;
    if (v10 <= v4)
    {
      v6 = v14;
      goto LABEL_36;
    }
  }
  v6 = v14;
  if (v14 != v4)
  {
LABEL_38:
    memmove(v6, v4, v10 - v4);
    return 1;
  }
LABEL_37:
  if (v6 >= v10)
    goto LABEL_38;
  return 1;
}

char *sub_1002158C8(char *result)
{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  v2 = *((_QWORD *)result + 2);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= *((_QWORD *)v3 + 3) >> 1)
  {
    if (*((_QWORD *)v6 + 2))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v11 = v4 + v2;
  else
    v11 = v4;
  result = sub_10020AA34(result, v11, 1, v3);
  v3 = result;
  if (!*((_QWORD *)v6 + 2))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = *((_QWORD *)v3 + 2);
  if ((*((_QWORD *)v3 + 3) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = (char *)swift_arrayInitWithCopy(&v3[16 * v7 + 32], v6 + 32, v2, &type metadata for String);
  if (!v2)
  {
LABEL_14:
    result = (char *)swift_bridgeObjectRelease(v6);
    *v1 = v3;
    return result;
  }
  v8 = *((_QWORD *)v3 + 2);
  v9 = __OFADD__(v8, v2);
  v10 = v8 + v2;
  if (!v9)
  {
    *((_QWORD *)v3 + 2) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1002159B0(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;

  v2 = *(_QWORD *)(result + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  result = sub_10020AB34(result, v14, 1, v3);
  v3 = (_QWORD *)result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = v3[2];
  v8 = (v3[3] >> 1) - v7;
  result = type metadata accessor for URLQueryItem(0);
  if (v8 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v9 = *(_QWORD *)(result - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  result = swift_arrayInitWithCopy((char *)v3 + v10 + *(_QWORD *)(v9 + 72) * v7, v6 + v10, v2, result);
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

char *String.components(wrappedToLineLength:bullet:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v10 = type metadata accessor for CharacterSet(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = a4;
  v26 = a5;
  static CharacterSet.newlines.getter(v12);
  v15 = sub_10021309C();
  v16 = StringProtocol.components(separatedBy:)(v14, &type metadata for String, v15);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  v17 = (char *)_swiftEmptyArrayStorage;
  v24 = (char *)_swiftEmptyArrayStorage;
  v18 = *(_QWORD *)(v16 + 16);
  if (v18)
  {
    swift_bridgeObjectRetain();
    v19 = (uint64_t *)(v16 + 40);
    do
    {
      v20 = *v19;
      v25 = *(v19 - 1);
      v26 = v20;
      swift_bridgeObjectRetain();
      sub_100215C00(&v24, &v25, a2, a3, a1, &v23);
      swift_bridgeObjectRelease(v17);
      swift_bridgeObjectRelease(v20);
      v17 = v23;
      v24 = v23;
      v19 += 2;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease(v16);
  }
  swift_bridgeObjectRelease(v16);
  return v17;
}

void sub_100215C00(char **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, char **a6@<X8>)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  NSString v21;
  void *v22;
  uint64_t v23;
  id v24;
  void *v25;
  __n128 v26;
  char **v27;
  char *v28;
  char *v29;
  void (*v30)(char *, uint64_t);
  unint64_t v31;
  Swift::String v32;
  void *v33;
  __n128 v34;
  char *v35;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  Swift::Int v50;
  Swift::String v51;
  uint64_t v52;
  Swift::String v53;
  void *v54;
  Swift::String v55;
  void *v56;
  Swift::String v57;
  void *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  char **v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  id v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  Swift::String v83;
  char v84[24];
  Swift::String v85;
  char *v86;

  v78 = a5;
  v74 = a4;
  v11 = type metadata accessor for CharacterSet(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  v17 = *a2;
  v16 = a2[1];
  v86 = v15;
  v18 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000) == 0)
    v18 = v17 & 0xFFFFFFFFFFFFLL;
  if (v18)
  {
    v71 = a6;
    v72 = v6;
    v19 = objc_allocWithZone((Class)NSScanner);
    v77 = v11;
    v20 = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v16);
    v22 = v20;
    v23 = v77;
    v24 = objc_msgSend(v22, "initWithString:", v21);

    v73 = a3;
    v85._countAndFlagsBits = sub_100216180(a3, v74, (uint64_t)&v86);
    v85._object = v25;
    v26 = swift_beginAccess(&v86, v84, 1, 0);
    static CharacterSet.whitespaces.getter(v26);
    v27 = (char **)NSScanner.scanUpToCharacters(from:)(v14);
    v29 = v28;
    v30 = *(void (**)(char *, uint64_t))(v12 + 8);
    v30(v14, v23);
    if (v29)
    {
      v31 = HIBYTE(v74) & 0xF;
      if ((v74 & 0x2000000000000000) == 0)
        v31 = v73 & 0xFFFFFFFFFFFFLL;
      v75 = v24;
      v76 = v31;
      while (1)
      {
        object = v85._object;
        countAndFlagsBits = v85._countAndFlagsBits;
        swift_bridgeObjectRetain();
        v38 = String.count.getter(countAndFlagsBits, object);
        swift_bridgeObjectRelease(object);
        v39 = String.count.getter(v27, v29);
        v40 = v38 + v39;
        if (__OFADD__(v38, v39))
          break;
        v41 = __OFADD__(v40, 1);
        v42 = v40 + 1;
        if (v41)
          goto LABEL_39;
        if (v42 <= v78)
        {
          v83._countAndFlagsBits = (uint64_t)v27;
          v83._object = v29;
          swift_bridgeObjectRetain();
          v32._countAndFlagsBits = 32;
          v32._object = (void *)0xE100000000000000;
          String.append(_:)(v32);
          swift_bridgeObjectRelease(v29);
          v33 = v83._object;
          String.append(_:)(v83);
          swift_bridgeObjectRelease(v33);
        }
        else
        {
          v83._countAndFlagsBits = countAndFlagsBits;
          v83._object = object;
          v81 = 606827356;
          v82 = 0xE400000000000000;
          v79 = 0;
          v80 = 0xE000000000000000;
          v43 = sub_10021309C();
          countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v81, &v79, 1024, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v43, v43, v43);
          v38 = v44;
          swift_bridgeObjectRelease(object);
          v45 = v86;
          if ((swift_isUniquelyReferenced_nonNull_native(v86) & 1) == 0)
            v45 = sub_10020AA34(0, *((_QWORD *)v45 + 2) + 1, 1, v45);
          v47 = *((_QWORD *)v45 + 2);
          v46 = *((_QWORD *)v45 + 3);
          if (v47 >= v46 >> 1)
            v45 = sub_10020AA34((char *)(v46 > 1), v47 + 1, 1, v45);
          *((_QWORD *)v45 + 2) = v47 + 1;
          v48 = &v45[16 * v47];
          *((_QWORD *)v48 + 4) = countAndFlagsBits;
          *((_QWORD *)v48 + 5) = v38;
          v86 = v45;
          if (v76)
          {
            v49 = String.count.getter(v73, v74);
            v50 = v49 + 1;
            v24 = v75;
            v23 = v77;
            if (__OFADD__(v49, 1))
              goto LABEL_40;
            v51._countAndFlagsBits = 32;
            v51._object = (void *)0xE100000000000000;
            v53 = String.init(repeating:count:)(v51, v50);
            v52 = v53._countAndFlagsBits;
            v54 = v53._object;
          }
          else
          {
            v52 = 0;
            v54 = (void *)0xE000000000000000;
            v24 = v75;
            v23 = v77;
          }
          v83._countAndFlagsBits = v52;
          v83._object = v54;
          swift_bridgeObjectRetain();
          v55._countAndFlagsBits = (uint64_t)v27;
          v55._object = v29;
          String.append(_:)(v55);
          swift_bridgeObjectRelease(v54);
          swift_bridgeObjectRelease(v29);
          v56 = v83._object;
          swift_bridgeObjectRetain();
          v57._countAndFlagsBits = 32;
          v57._object = (void *)0xE100000000000000;
          String.append(_:)(v57);
          swift_bridgeObjectRelease(v56);
          v85 = v83;
        }
        static CharacterSet.whitespaces.getter(v34);
        v27 = (char **)NSScanner.scanUpToCharacters(from:)(v14);
        v29 = v35;
        v30(v14, v23);
        if (!v29)
          goto LABEL_22;
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
    }
    else
    {
LABEL_22:
      v58 = v85._object;
      v59 = ((unint64_t)v85._object >> 56) & 0xF;
      if (((uint64_t)v85._object & 0x2000000000000000) == 0)
        v59 = v85._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      if (!v59)
      {

        swift_bridgeObjectRelease(v58);
        v27 = v71;
LABEL_37:
        *v27 = v86;
        return;
      }
      v83 = v85;
      v81 = 606827356;
      v82 = 0xE400000000000000;
      v79 = 0;
      v80 = 0xE000000000000000;
      v60 = sub_10021309C();
      v38 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v81, &v79, 1024, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v60, v60, v60);
      countAndFlagsBits = v61;
      swift_bridgeObjectRelease(v58);
      v29 = v86;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v86);
      v27 = v71;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
LABEL_26:
        v64 = *((_QWORD *)v29 + 2);
        v63 = *((_QWORD *)v29 + 3);
        if (v64 >= v63 >> 1)
          v29 = sub_10020AA34((char *)(v63 > 1), v64 + 1, 1, v29);
        *((_QWORD *)v29 + 2) = v64 + 1;
        v65 = &v29[16 * v64];
        *((_QWORD *)v65 + 4) = v38;
        *((_QWORD *)v65 + 5) = countAndFlagsBits;
        v86 = v29;

        goto LABEL_37;
      }
    }
    v29 = sub_10020AA34(0, *((_QWORD *)v29 + 2) + 1, 1, v29);
    goto LABEL_26;
  }
  v66 = *((_QWORD *)v15 + 2);
  swift_bridgeObjectRetain();
  if (v66)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
      v15 = sub_10020AA34(0, v66 + 1, 1, v15);
    v68 = *((_QWORD *)v15 + 2);
    v67 = *((_QWORD *)v15 + 3);
    if (v68 >= v67 >> 1)
      v15 = sub_10020AA34((char *)(v67 > 1), v68 + 1, 1, v15);
    *((_QWORD *)v15 + 2) = v68 + 1;
    v69 = &v15[16 * v68];
    *((_QWORD *)v69 + 4) = v17;
    *((_QWORD *)v69 + 5) = v16;
  }
  *a6 = v15;
}

uint64_t sub_100216180(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  Swift::Int v8;
  Swift::String v9;
  Swift::String v10;
  _BYTE v11[24];

  v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v3 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v3)
    return 0;
  swift_beginAccess(a3, v11, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)a3 + 16))
  {
    result = String.count.getter(a1, a2);
    v8 = result + 1;
    if (__OFADD__(result, 1))
    {
      __break(1u);
    }
    else
    {
      v9._countAndFlagsBits = 32;
      v9._object = (void *)0xE100000000000000;
      return String.init(repeating:count:)(v9, v8)._countAndFlagsBits;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    v10._countAndFlagsBits = 32;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    return a1;
  }
  return result;
}

char *Array<A>.asciiBoxed()(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  Swift::String v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  Swift::String v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  Swift::String v38;
  void *object;
  unint64_t v40;
  Swift::String v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  Swift::String v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;

  v65 = *(_QWORD *)(a1 + 16);
  if (v65)
  {
    v3 = a1 + 32;
    swift_bridgeObjectRetain();
    v4 = 0;
    v5 = 0;
    v63 = v3;
    do
    {
      v66 = *(_QWORD **)(v3 + 8 * v4);
      v6 = v66[2];
      if (v6)
      {
        v8 = v66[4];
        v7 = v66[5];
        swift_bridgeObjectRetain();
        v9 = v6 - 1;
        if (v9)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v10 = v66 + 7;
          v1 = v7;
          do
          {
            v11 = *(v10 - 1);
            v12 = *v10;
            swift_bridgeObjectRetain();
            v2 = String.count.getter(v8, v1);
            v13 = String.count.getter(v11, v12);
            v10 += 2;
            v14 = v2 < v13;
            if (v2 < v13)
              v15 = v7;
            else
              v15 = v12;
            if (v14)
              v7 = v12;
            if (v14)
              v8 = v11;
            if (v14)
              v1 = v12;
            swift_bridgeObjectRelease(v15);
            --v9;
          }
          while (v9);
          swift_bridgeObjectRelease(v66);
          v7 = v1;
          v3 = v63;
        }
        else
        {
          swift_bridgeObjectRetain();
        }
        v16 = String.count.getter(v8, v7);
        swift_bridgeObjectRelease(v66);
        swift_bridgeObjectRelease(v7);
        if (v16 > v5)
          v5 = v16;
      }
      else
      {
        v5 &= ~(v5 >> 63);
      }
      ++v4;
    }
    while (v4 != v65);
    swift_bridgeObjectRelease(a1);
    v17 = v5 + 2;
    if (__OFADD__(v5, 2))
    {
      __break(1u);
      goto LABEL_51;
    }
  }
  else
  {
    v5 = 0;
    v17 = 2;
  }
  v70 = 11376098;
  v71 = 0xA300000000000000;
  v68 = 8426722;
  v69 = 0xA300000000000000;
  v18 = sub_10021309C();
  v19 = StringProtocol.padding<A>(toLength:withPad:startingAt:)(v17, &v68, 0, &type metadata for String, &type metadata for String, v18, v18);
  v21 = v20;
  v70 = v19;
  v71 = v20;
  swift_bridgeObjectRetain();
  v22._countAndFlagsBits = 11441634;
  v22._object = (void *)0xA300000000000000;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(v21);
  v2 = v71;
  v62 = v70;
  v70 = 10261730;
  v71 = 0xA300000000000000;
  v68 = 8426722;
  v69 = 0xA300000000000000;
  v23 = StringProtocol.padding<A>(toLength:withPad:startingAt:)(v17, &v68, 0, &type metadata for String, &type metadata for String, v18, v18);
  v25 = v24;
  v70 = v23;
  v71 = v24;
  swift_bridgeObjectRetain();
  v26._countAndFlagsBits = 10786018;
  v26._object = (void *)0xA300000000000000;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(v25);
  v1 = v71;
  if (!v65)
  {
LABEL_51:
    v28 = (char *)_swiftEmptyArrayStorage;
    v56 = v2;
    goto LABEL_52;
  }
  v59 = v70;
  swift_bridgeObjectRetain();
  v27 = 0;
  v28 = (char *)_swiftEmptyArrayStorage;
  v60 = v1;
  v61 = v2;
  do
  {
    if (v27)
      v29 = v1;
    else
      v29 = v2;
    v30 = *(_QWORD *)(a1 + 32 + 8 * v27);
    if (v27)
      v31 = v59;
    else
      v31 = v62;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v67 = v27;
    if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
      v28 = sub_10020AA34(0, *((_QWORD *)v28 + 2) + 1, 1, v28);
    v33 = *((_QWORD *)v28 + 2);
    v32 = *((_QWORD *)v28 + 3);
    if (v33 >= v32 >> 1)
      v28 = sub_10020AA34((char *)(v32 > 1), v33 + 1, 1, v28);
    *((_QWORD *)v28 + 2) = v33 + 1;
    v34 = &v28[16 * v33];
    *((_QWORD *)v34 + 4) = v31;
    *((_QWORD *)v34 + 5) = v29;
    v35 = *(_QWORD *)(v30 + 16);
    v64 = v30;
    if (v35)
    {
      v36 = (unint64_t *)(v30 + 40);
      do
      {
        v37 = *v36;
        v70 = *(v36 - 1);
        v71 = v37;
        v68 = 32;
        v69 = 0xE100000000000000;
        v38._countAndFlagsBits = StringProtocol.padding<A>(toLength:withPad:startingAt:)(v5, &v68, 0, &type metadata for String, &type metadata for String, v18, v18);
        object = v38._object;
        v70 = 545428706;
        v71 = 0xA400000000000000;
        String.append(_:)(v38);
        swift_bridgeObjectRelease(object);
        v40 = v71;
        swift_bridgeObjectRetain();
        v41._countAndFlagsBits = 8557794;
        v41._object = (void *)0xA300000000000000;
        String.append(_:)(v41);
        swift_bridgeObjectRelease(v40);
        v43 = v70;
        v42 = v71;
        v45 = *((_QWORD *)v28 + 2);
        v44 = *((_QWORD *)v28 + 3);
        if (v45 >= v44 >> 1)
          v28 = sub_10020AA34((char *)(v44 > 1), v45 + 1, 1, v28);
        v36 += 2;
        *((_QWORD *)v28 + 2) = v45 + 1;
        v46 = &v28[16 * v45];
        *((_QWORD *)v46 + 4) = v43;
        *((_QWORD *)v46 + 5) = v42;
        --v35;
      }
      while (v35);
    }
    v27 = v67 + 1;
    swift_bridgeObjectRelease(v64);
    v1 = v60;
    v2 = v61;
  }
  while (v67 + 1 != v65);
  v70 = 11572706;
  v71 = 0xA300000000000000;
  v68 = 8426722;
  v69 = 0xA300000000000000;
  v47 = StringProtocol.padding<A>(toLength:withPad:startingAt:)(v17, &v68, 0, &type metadata for String, &type metadata for String, v18, v18);
  v49 = v48;
  v70 = v47;
  v71 = v48;
  swift_bridgeObjectRetain();
  v50._countAndFlagsBits = 11507170;
  v50._object = (void *)0xA300000000000000;
  String.append(_:)(v50);
  swift_bridgeObjectRelease(v49);
  v51 = v70;
  v52 = v71;
  v54 = *((_QWORD *)v28 + 2);
  v53 = *((_QWORD *)v28 + 3);
  if (v54 >= v53 >> 1)
    v28 = sub_10020AA34((char *)(v53 > 1), v54 + 1, 1, v28);
  *((_QWORD *)v28 + 2) = v54 + 1;
  v55 = &v28[16 * v54];
  *((_QWORD *)v55 + 4) = v51;
  *((_QWORD *)v55 + 5) = v52;
  swift_bridgeObjectRelease(v60);
  v1 = v61;
  v56 = a1;
LABEL_52:
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v56);
  return v28;
}

{
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[40];

  v2 = sub_100005574(&qword_100497BB0);
  inited = swift_initStackObject(v2, v9);
  *(_OWORD *)(inited + 16) = xmmword_100384A80;
  *(_QWORD *)(inited + 32) = a1;
  v4 = inited + 32;
  swift_bridgeObjectRetain();
  v5 = Array<A>.asciiBoxed()(inited);
  swift_setDeallocating(inited);
  v6 = *(_QWORD *)(inited + 16);
  v7 = sub_100005574(&qword_100497BB8);
  swift_arrayDestroy(v4, v6, v7);
  return v5;
}

char *Array<A>.appendStringComponents(_:lineLength:bullet:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v10 = type metadata accessor for CharacterSet(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = a1;
  v26 = a2;
  static CharacterSet.newlines.getter(v12);
  v15 = sub_10021309C();
  v16 = StringProtocol.components(separatedBy:)(v14, &type metadata for String, v15);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  v17 = (char *)_swiftEmptyArrayStorage;
  v24 = (char *)_swiftEmptyArrayStorage;
  v18 = *(_QWORD *)(v16 + 16);
  if (v18)
  {
    swift_bridgeObjectRetain();
    v19 = (uint64_t *)(v16 + 40);
    do
    {
      v20 = *v19;
      v25 = *(v19 - 1);
      v26 = v20;
      swift_bridgeObjectRetain();
      sub_100215C00(&v24, &v25, a4, a5, a3, &v23);
      swift_bridgeObjectRelease(v17);
      swift_bridgeObjectRelease(v20);
      v17 = v23;
      v24 = v23;
      v19 += 2;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease(v16);
  }
  swift_bridgeObjectRelease(v16);
  return sub_1002158C8(v17);
}

uint64_t Optional<A>.isArtworkVisuallyIdentical(to:)(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  result = (a2 | a1) == 0;
  if (a2)
  {
    if (a1)
      return (uint64_t)objc_msgSend((id)a2, "isArtworkVisuallyIdenticalToCatalog:");
  }
  return result;
}

uint64_t MPCPlaybackIntentOptions.debugDescription.getter(char a1)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;

  if ((a1 & 1) == 0)
  {
    v2 = (char *)_swiftEmptyArrayStorage;
    if ((a1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_7;
  }
  v2 = sub_10020AA34(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  v4 = *((_QWORD *)v2 + 2);
  v3 = *((_QWORD *)v2 + 3);
  if (v4 >= v3 >> 1)
    v2 = sub_10020AA34((char *)(v3 > 1), v4 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v4 + 1;
  v5 = &v2[16 * v4];
  *((_QWORD *)v5 + 4) = 0x656D6D4979616C70;
  *((_QWORD *)v5 + 5) = 0xEF796C6574616964;
  if ((a1 & 2) != 0)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10020AA34(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
    v7 = *((_QWORD *)v2 + 2);
    v6 = *((_QWORD *)v2 + 3);
    if (v7 >= v6 >> 1)
      v2 = sub_10020AA34((char *)(v6 > 1), v7 + 1, 1, v2);
    *((_QWORD *)v2 + 2) = v7 + 1;
    v8 = &v2[16 * v7];
    *((_QWORD *)v8 + 4) = 0x6575517465736572;
    *((_QWORD *)v8 + 5) = 0xEA00000000006575;
  }
LABEL_12:
  if ((a1 & 4) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10020AA34(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
    v10 = *((_QWORD *)v2 + 2);
    v9 = *((_QWORD *)v2 + 3);
    if (v10 >= v9 >> 1)
      v2 = sub_10020AA34((char *)(v9 > 1), v10 + 1, 1, v2);
    *((_QWORD *)v2 + 2) = v10 + 1;
    v11 = &v2[16 * v10];
    *((_QWORD *)v11 + 4) = 0x4E70556F54646461;
    *((_QWORD *)v11 + 5) = 0xEF64616548747865;
    if ((a1 & 8) == 0)
    {
LABEL_14:
      if ((a1 & 0x10) == 0)
        goto LABEL_31;
      goto LABEL_26;
    }
  }
  else if ((a1 & 8) == 0)
  {
    goto LABEL_14;
  }
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_10020AA34(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v13 = *((_QWORD *)v2 + 2);
  v12 = *((_QWORD *)v2 + 3);
  if (v13 >= v12 >> 1)
    v2 = sub_10020AA34((char *)(v12 > 1), v13 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v13 + 1;
  v14 = &v2[16 * v13];
  *((_QWORD *)v14 + 4) = 0x4E70556F54646461;
  *((_QWORD *)v14 + 5) = 0xEF6C696154747865;
  if ((a1 & 0x10) != 0)
  {
LABEL_26:
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10020AA34(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
    v16 = *((_QWORD *)v2 + 2);
    v15 = *((_QWORD *)v2 + 3);
    if (v16 >= v15 >> 1)
      v2 = sub_10020AA34((char *)(v15 > 1), v16 + 1, 1, v2);
    *((_QWORD *)v2 + 2) = v16 + 1;
    v17 = &v2[16 * v16];
    *((_QWORD *)v17 + 4) = 0x5074726174736572;
    *((_QWORD *)v17 + 5) = 0xEF6B63616279616CLL;
  }
LABEL_31:
  v18 = sub_100005574(&qword_100497BB8);
  v19 = sub_100216E70();
  v20 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v18, v19);
  v22 = v21;
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = v20;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 93;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  return 91;
}

uint64_t sub_100216CE4()
{
  _QWORD *v0;

  return MPCPlaybackIntentOptions.debugDescription.getter(*v0);
}

void *MPMediaLibraryFilteringOptions.none.unsafeMutableAddressor()
{
  return &static MPMediaLibraryFilteringOptions.none;
}

__C::MPMediaLibraryFilteringOptions __swiftcall MPMediaLibraryFilteringOptions.init(_:)(NSNumber_optional a1)
{
  Class isa;
  objc_class *v2;

  if (a1.value.super.super.isa)
  {
    isa = a1.value.super.super.isa;
    v2 = (objc_class *)-[objc_class unsignedIntegerValue](a1.value.super.super.isa, "unsignedIntegerValue");

    a1.value.super.super.isa = v2;
  }
  return (__C::MPMediaLibraryFilteringOptions)a1.value.super.super.isa;
}

uint64_t MPMediaLibraryFilteringOptions.itemRequestFilteringOptions.getter(char a1)
{
  return a1 & 2;
}

uint64_t static PropertySetCombinator.buildBlock(_:)(uint64_t a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t result;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;

  v2 = objc_msgSend((id)objc_opt_self(MPPropertySet), "emptyPropertySet");
  v3 = v2;
  if (!((unint64_t)a1 >> 62))
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v5 = v2;
    result = swift_bridgeObjectRetain();
    v7 = v3;
    if (v4)
      goto LABEL_3;
LABEL_13:

    swift_bridgeObjectRelease(a1);
    return (uint64_t)v7;
  }
  if (a1 < 0)
    v12 = a1;
  else
    v12 = a1 & 0xFFFFFFFFFFFFFF8;
  v13 = v2;
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter(v12);
  v4 = result;
  v7 = v3;
  if (!result)
    goto LABEL_13;
LABEL_3:
  if (v4 >= 1)
  {
    v8 = 0;
    v9 = v3;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a1);
      else
        v10 = *(id *)(a1 + 8 * v8 + 32);
      v11 = v10;
      ++v8;
      v7 = objc_msgSend(v9, "propertySetByCombiningWithPropertySet:", v10);

      v9 = v7;
    }
    while (v4 != v8);
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

unint64_t sub_100216E70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100497BC0;
  if (!qword_100497BC0)
  {
    v1 = sub_100005600(&qword_100497BB8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100497BC0);
  }
  return result;
}

ValueMetadata *type metadata accessor for PropertySetCombinator()
{
  return &type metadata for PropertySetCombinator;
}

uint64_t GenericMusicItem.innerMusicItem.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t (*v12)(uint64_t);
  unint64_t *v13;
  void *v14;
  _QWORD *v15;
  uint64_t result;
  uint64_t v17;

  v2 = v1;
  v4 = type metadata accessor for GenericMusicItem(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 == enum case for GenericMusicItem.album(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = type metadata accessor for Album(0);
    v10 = v9;
    v11 = &protocol witness table for Album;
LABEL_5:
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v11;
LABEL_19:
    v15 = sub_1000207D4((_QWORD *)a1);
    return (*(uint64_t (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v15, v7, v10);
  }
  if (v8 == enum case for GenericMusicItem.artist(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = type metadata accessor for Artist(0);
    v10 = v9;
    v11 = &protocol witness table for Artist;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.composer(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v10 = type metadata accessor for Composer(0);
    v12 = (uint64_t (*)(uint64_t))&type metadata accessor for Composer;
    *(_QWORD *)(a1 + 24) = v10;
    v13 = (unint64_t *)&unk_100497C10;
    v14 = &protocol conformance descriptor for Composer;
LABEL_18:
    *(_QWORD *)(a1 + 32) = sub_100006924(v13, v12, (uint64_t)v14);
    goto LABEL_19;
  }
  if (v8 == enum case for GenericMusicItem.creditArtist(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v10 = type metadata accessor for CreditArtist(0);
    v12 = (uint64_t (*)(uint64_t))&type metadata accessor for CreditArtist;
    *(_QWORD *)(a1 + 24) = v10;
    v13 = (unint64_t *)&unk_100497C08;
    v14 = &protocol conformance descriptor for CreditArtist;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.curator(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = type metadata accessor for Curator(0);
    v10 = v9;
    v11 = &protocol witness table for Curator;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.editorialItem(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v10 = type metadata accessor for EditorialItem(0);
    v12 = (uint64_t (*)(uint64_t))&type metadata accessor for EditorialItem;
    *(_QWORD *)(a1 + 24) = v10;
    v13 = (unint64_t *)&unk_100497C00;
    v14 = &protocol conformance descriptor for EditorialItem;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.genre(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = type metadata accessor for Genre(0);
    v10 = v9;
    v11 = &protocol witness table for Genre;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v10 = type metadata accessor for MusicMovie(0);
    v12 = (uint64_t (*)(uint64_t))&type metadata accessor for MusicMovie;
    *(_QWORD *)(a1 + 24) = v10;
    v13 = (unint64_t *)&unk_100497BF8;
    v14 = &protocol conformance descriptor for MusicMovie;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = type metadata accessor for MusicVideo(0);
    v10 = v9;
    v11 = &protocol witness table for MusicVideo;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.playlist(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = type metadata accessor for Playlist(0);
    v10 = v9;
    v11 = &protocol witness table for Playlist;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.radioShow(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = type metadata accessor for RadioShow(0);
    v10 = v9;
    v11 = &protocol witness table for RadioShow;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.recordLabel(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = type metadata accessor for RecordLabel(0);
    v10 = v9;
    v11 = &protocol witness table for RecordLabel;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.socialProfile(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v10 = type metadata accessor for SocialProfile(0);
    v12 = (uint64_t (*)(uint64_t))&type metadata accessor for SocialProfile;
    *(_QWORD *)(a1 + 24) = v10;
    v13 = (unint64_t *)&unk_100497BF0;
    v14 = &protocol conformance descriptor for SocialProfile;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = type metadata accessor for Song(0);
    v10 = v9;
    v11 = &protocol witness table for Song;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.station(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = type metadata accessor for Station(0);
    v10 = v9;
    v11 = &protocol witness table for Station;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.tvEpisode(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v10 = type metadata accessor for TVEpisode(0);
    v12 = (uint64_t (*)(uint64_t))&type metadata accessor for TVEpisode;
    *(_QWORD *)(a1 + 24) = v10;
    v13 = (unint64_t *)&unk_100497BE8;
    v14 = &protocol conformance descriptor for TVEpisode;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.tvSeason(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v10 = type metadata accessor for TVSeason(0);
    v12 = (uint64_t (*)(uint64_t))&type metadata accessor for TVSeason;
    *(_QWORD *)(a1 + 24) = v10;
    v13 = (unint64_t *)&unk_100497BE0;
    v14 = &protocol conformance descriptor for TVSeason;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.tvShow(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v10 = type metadata accessor for TVShow(0);
    v12 = (uint64_t (*)(uint64_t))&type metadata accessor for TVShow;
    *(_QWORD *)(a1 + 24) = v10;
    v13 = (unint64_t *)&unk_100497BD8;
    v14 = &protocol conformance descriptor for TVShow;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.uploadedAudio(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v10 = type metadata accessor for UploadedAudio(0);
    v12 = (uint64_t (*)(uint64_t))&type metadata accessor for UploadedAudio;
    *(_QWORD *)(a1 + 24) = v10;
    v13 = (unint64_t *)&unk_100497BD0;
    v14 = &protocol conformance descriptor for UploadedAudio;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v10 = type metadata accessor for UploadedVideo(0);
    v12 = (uint64_t (*)(uint64_t))&type metadata accessor for UploadedVideo;
    *(_QWORD *)(a1 + 24) = v10;
    v13 = (unint64_t *)&unk_100497BC8;
    v14 = &protocol conformance descriptor for UploadedVideo;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.other(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    result = swift_bridgeObjectRelease(*((_QWORD *)v7 + 1));
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

uint64_t GenericMusicItem.catalogID.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v0 = type metadata accessor for TVShow(0);
  v46 = *(_QWORD *)(v0 - 8);
  v47 = v0;
  __chkstk_darwin(v0);
  v45 = (char *)&v45 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for TVSeason(0);
  v49 = *(_QWORD *)(v2 - 8);
  v50 = v2;
  __chkstk_darwin(v2);
  v48 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TVEpisode(0);
  v52 = *(_QWORD *)(v4 - 8);
  v53 = v4;
  __chkstk_darwin(v4);
  v51 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Song(0);
  v55 = *(_QWORD *)(v6 - 8);
  v56 = v6;
  __chkstk_darwin(v6);
  v54 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Playlist(0);
  v58 = *(_QWORD *)(v8 - 8);
  v59 = v8;
  __chkstk_darwin(v8);
  v57 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MusicVideo(0);
  v61 = *(_QWORD *)(v10 - 8);
  v62 = v10;
  __chkstk_darwin(v10);
  v60 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for MusicMovie(0);
  v63 = *(_QWORD *)(v12 - 8);
  v64 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Artist(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Album(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for GenericMusicItem(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v45 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v26, v65, v23);
  v27 = (*(uint64_t (**)(char *, uint64_t))(v24 + 88))(v26, v23);
  if (v27 == enum case for GenericMusicItem.album(_:))
  {
    (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
    v28 = (*(uint64_t (**)(char *, char *, uint64_t))(v20 + 32))(v22, v26, v19);
    v29 = Album.catalogID.getter(v28);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
    return v29;
  }
  if (v27 != enum case for GenericMusicItem.artist(_:))
  {
    if (v27 != enum case for GenericMusicItem.composer(_:)
      && v27 != enum case for GenericMusicItem.curator(_:)
      && v27 != enum case for GenericMusicItem.editorialItem(_:)
      && v27 != enum case for GenericMusicItem.genre(_:))
    {
      if (v27 == enum case for GenericMusicItem.musicMovie(_:))
      {
        (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
        v32 = v63;
        v31 = v64;
        v33 = (*(uint64_t (**)(char *, char *, uint64_t))(v63 + 32))(v14, v26, v64);
        v29 = MusicMovie.catalogID.getter(v33);
        (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v31);
        return v29;
      }
      if (v27 == enum case for GenericMusicItem.musicVideo(_:))
      {
        (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
        v34 = v60;
        v35 = v61;
        v36 = v62;
        v37 = (*(uint64_t (**)(char *, char *, uint64_t))(v61 + 32))(v60, v26, v62);
        v38 = MusicVideo.catalogID.getter(v37);
LABEL_16:
        v29 = v38;
        (*(void (**)(char *, uint64_t))(v35 + 8))(v34, v36);
        return v29;
      }
      if (v27 == enum case for GenericMusicItem.playlist(_:))
      {
        (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
        v34 = v57;
        v35 = v58;
        v36 = v59;
        v39 = (*(uint64_t (**)(char *, char *, uint64_t))(v58 + 32))(v57, v26, v59);
        v38 = Playlist.catalogID.getter(v39);
        goto LABEL_16;
      }
      if (v27 != enum case for GenericMusicItem.radioShow(_:)
        && v27 != enum case for GenericMusicItem.recordLabel(_:)
        && v27 != enum case for GenericMusicItem.socialProfile(_:))
      {
        if (v27 == enum case for GenericMusicItem.song(_:))
        {
          (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
          v34 = v54;
          v35 = v55;
          v36 = v56;
          v40 = (*(uint64_t (**)(char *, char *, uint64_t))(v55 + 32))(v54, v26, v56);
          v38 = Song.catalogID.getter(v40);
          goto LABEL_16;
        }
        if (v27 != enum case for GenericMusicItem.station(_:))
        {
          if (v27 == enum case for GenericMusicItem.tvEpisode(_:))
          {
            (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
            v34 = v51;
            v35 = v52;
            v36 = v53;
            v42 = (*(uint64_t (**)(char *, char *, uint64_t))(v52 + 32))(v51, v26, v53);
            v38 = TVEpisode.catalogID.getter(v42);
            goto LABEL_16;
          }
          if (v27 == enum case for GenericMusicItem.tvSeason(_:))
          {
            (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
            v34 = v48;
            v35 = v49;
            v36 = v50;
            v43 = (*(uint64_t (**)(char *, char *, uint64_t))(v49 + 32))(v48, v26, v50);
            v38 = TVSeason.catalogID.getter(v43);
            goto LABEL_16;
          }
          if (v27 == enum case for GenericMusicItem.tvShow(_:))
          {
            (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
            v34 = v45;
            v35 = v46;
            v36 = v47;
            v44 = (*(uint64_t (**)(char *, char *, uint64_t))(v46 + 32))(v45, v26, v47);
            v38 = TVShow.catalogID.getter(v44);
            goto LABEL_16;
          }
        }
      }
    }
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    return 0;
  }
  (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
  v30 = (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(v18, v26, v15);
  v29 = Artist.catalogID.getter(v30);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  return v29;
}

uint64_t Playlist.Entry.InternalItem.musicItem.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  int v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  unint64_t *v15;
  void *v16;
  void *v17;
  _QWORD *v18;
  uint64_t result;
  uint64_t v20;
  Swift::String v21;
  void *object;
  unint64_t v23;
  unint64_t v24;

  v2 = v1;
  v4 = type metadata accessor for Playlist.Entry.InternalItem(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v23 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v23 - v9, v2, v4);
  v12 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v10, v4);
  if (v12 == enum case for Playlist.Entry.InternalItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v10, v4);
    v13 = type metadata accessor for MusicMovie(0);
    v14 = (uint64_t (*)(uint64_t))&type metadata accessor for MusicMovie;
    a1[3] = v13;
    v15 = (unint64_t *)&unk_100497BF8;
    v16 = &protocol conformance descriptor for MusicMovie;
LABEL_3:
    v17 = (void *)sub_100006924(v15, v14, (uint64_t)v16);
LABEL_8:
    a1[4] = v17;
    v18 = sub_1000207D4(a1);
    return (*(uint64_t (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v18, v10, v13);
  }
  if (v12 == enum case for Playlist.Entry.InternalItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v10, v4);
    v13 = type metadata accessor for MusicVideo(0);
    a1[3] = v13;
    v17 = &protocol witness table for MusicVideo;
    goto LABEL_8;
  }
  if (v12 == enum case for Playlist.Entry.InternalItem.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v10, v4);
    v13 = type metadata accessor for Song(0);
    a1[3] = v13;
    v17 = &protocol witness table for Song;
    goto LABEL_8;
  }
  if (v12 == enum case for Playlist.Entry.InternalItem.tvEpisode(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v10, v4);
    v13 = type metadata accessor for TVEpisode(0);
    v14 = (uint64_t (*)(uint64_t))&type metadata accessor for TVEpisode;
    a1[3] = v13;
    v15 = (unint64_t *)&unk_100497BE8;
    v16 = &protocol conformance descriptor for TVEpisode;
    goto LABEL_3;
  }
  if (v12 == enum case for Playlist.Entry.InternalItem.uploadedAudio(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v10, v4);
    v13 = type metadata accessor for UploadedAudio(0);
    v14 = (uint64_t (*)(uint64_t))&type metadata accessor for UploadedAudio;
    a1[3] = v13;
    v15 = (unint64_t *)&unk_100497BD0;
    v16 = &protocol conformance descriptor for UploadedAudio;
    goto LABEL_3;
  }
  if (v12 == enum case for Playlist.Entry.InternalItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v10, v4);
    v13 = type metadata accessor for UploadedVideo(0);
    v14 = (uint64_t (*)(uint64_t))&type metadata accessor for UploadedVideo;
    a1[3] = v13;
    v15 = (unint64_t *)&unk_100497BC8;
    v16 = &protocol conformance descriptor for UploadedVideo;
    goto LABEL_3;
  }
  v11(v8, v2, v4);
  v23 = 0;
  v24 = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease(v24);
  v23 = 0xD000000000000028;
  v24 = 0x80000001003B7300;
  v20 = sub_100006924(&qword_100497C18, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist.Entry.InternalItem, (uint64_t)&protocol conformance descriptor for Playlist.Entry.InternalItem);
  v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v4, v20);
  object = v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(object);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v23, v24, "MusicUtilities/MusicKit+Utilities.swift", 39, 2, 73, 0);
  __break(1u);
  return result;
}

uint64_t sub_100217F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_10021B384();
  return static ApproximatelyEquatable<>.==~ infix(_:_:)(a1, a2, a3, a4, v8);
}

uint64_t static ApproximatelyComparable<>.<~ infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100217FA0(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))&dispatch thunk of static Comparable.< infix(_:_:));
}

uint64_t static ApproximatelyComparable<>.>~ infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100217FA0(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))&dispatch thunk of static Comparable.> infix(_:_:));
}

uint64_t sub_100217FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  if ((dispatch thunk of static ApproximatelyEquatable.==~ infix(_:_:)(a1, a2, a3, a5) & 1) != 0)
    return 0;
  else
    return a7(a1, a2, a3, a6) & 1;
}

uint64_t Result.init(success:failure:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v37 = a2;
  v39 = a6;
  v38 = type metadata accessor for Optional(0, a4);
  v10 = *(_QWORD *)(v38 - 8);
  v11 = __chkstk_darwin(v38);
  v13 = (char *)&v34 - v12;
  v35 = *(_QWORD *)(a4 - 8);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(v14);
  v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Result(0, a3, a4, a5);
  v36 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v22 = (char *)&v34 - v21;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(a1, 1, a3) != 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v37, v38);
    v30 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 32);
    v30(v19, a1, a3);
    v30(v22, (uint64_t)v19, a3);
    v31 = 0;
    v27 = v39;
    v28 = v36;
LABEL_6:
    swift_storeEnumTagMultiPayload(v22, v20, v31);
    (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v27, v22, v20);
    v29 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v27, v29, 1, v20);
  }
  v23 = type metadata accessor for Optional(0, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(a1, v23);
  v24 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v13, v37, v38);
  v25 = v35;
  v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48))(v13, 1, a4);
  v27 = v39;
  v28 = v36;
  if (v26 != 1)
  {
    v32 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
    v32(v16, v13, a4);
    v32(v22, v16, a4);
    v31 = 1;
    goto LABEL_6;
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v24);
  v29 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v27, v29, 1, v20);
}

uint64_t Collection.limited(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v13;

  __chkstk_darwin(a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a2);
  if (dispatch thunk of Collection.count.getter(a2, a3) > a1)
  {
    v9 = dispatch thunk of Collection.count.getter(a2, a3);
    v10 = __OFSUB__(v9, a1);
    v11 = v9 - a1;
    if (!v10)
      return Sequence.dropLast(_:)(v11, a2, *(_QWORD *)(a3 + 8));
    __break(1u);
  }
  v11 = 0;
  return Sequence.dropLast(_:)(v11, a2, *(_QWORD *)(a3 + 8));
}

uint64_t Collection.asyncMap<A>(transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[8] = a5;
  v6[9] = v5;
  v6[6] = a3;
  v6[7] = a4;
  v6[4] = a1;
  v6[5] = a2;
  v7 = type metadata accessor for Optional(0, a4);
  v6[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[11] = v8;
  v6[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10021838C, 0, 0);
}

void sub_10021838C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 48);
  v12 = *(_OWORD *)(v0 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v1, 1, 1, v6);
  v8 = dispatch thunk of Collection.count.getter(v7, v5);
  v9 = sub_100205298(v1, v8, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v4);
  *(_QWORD *)(v0 + 16) = v9;
  swift_getTupleTypeMetadata2(0, &type metadata for Int, v6, 0, 0);
  v10 = swift_task_alloc(80);
  *(_QWORD *)(v0 + 104) = v10;
  *(_QWORD *)(v10 + 16) = v7;
  *(_QWORD *)(v10 + 24) = v6;
  *(_QWORD *)(v10 + 32) = v5;
  *(_QWORD *)(v10 + 40) = v3;
  *(_OWORD *)(v10 + 48) = v12;
  *(_QWORD *)(v10 + 64) = v0 + 16;
  *(_QWORD *)&v12 = (char *)&dword_100497C38 + dword_100497C38;
  v11 = (_QWORD *)swift_task_alloc(unk_100497C3C);
  *(_QWORD *)(v0 + 112) = v11;
  *v11 = v0;
  v11[1] = sub_1002184E0;
  __asm { BR              X0; sub_10021916C }
}

uint64_t sub_1002184E0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 112);
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100218638;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 104));
    v4 = sub_10021854C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10021854C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t WitnessTable;
  uint64_t v6;
  __int128 v8;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 24) = *(_QWORD *)(v0 + 16);
  v3 = swift_task_alloc(48);
  v8 = *(_OWORD *)(v0 + 56);
  *(_QWORD *)(v3 + 16) = v2;
  *(_OWORD *)(v3 + 24) = v8;
  v4 = type metadata accessor for Array(0);
  swift_bridgeObjectRetain();
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
  v6 = Sequence.compactMap<A>(_:)(sub_10021A88C, v3, v4, v8, WitnessTable);
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
}

uint64_t sub_100218638()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10021867C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t TupleTypeMetadata2;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;

  v8[9] = a8;
  v8[10] = v31;
  v8[7] = a6;
  v8[8] = a7;
  v8[5] = a4;
  v8[6] = a5;
  v8[3] = a2;
  v8[4] = a3;
  v11 = type metadata accessor for Optional(0, a8);
  v8[11] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[12] = v12;
  v8[13] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v31 + 8);
  v8[14] = v13;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v13);
  v8[15] = AssociatedTypeWitness;
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8[16] = v15;
  v16 = *(_QWORD *)(v15 + 64);
  v8[17] = v16;
  v8[18] = swift_task_alloc((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100005574(&qword_1004976A0);
  v8[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for Int, a8, 0, 0);
  v8[20] = TupleTypeMetadata2;
  v19 = type metadata accessor for Optional(0, TupleTypeMetadata2);
  v8[21] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v19 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100005600(&qword_100496F20);
  v8[22] = v20;
  v21 = ((uint64_t (*)(_QWORD, uint64_t, uint64_t, void *))type metadata accessor for ThrowingTaskGroup.Iterator)(0, TupleTypeMetadata2, v20, &protocol self-conformance witness table for Error);
  v8[23] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v8[24] = v22;
  v8[25] = swift_task_alloc((*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = swift_getTupleTypeMetadata2(255, &type metadata for Int, AssociatedTypeWitness, "offset element ", 0);
  v8[26] = v23;
  v24 = type metadata accessor for Optional(0, v23);
  v8[27] = v24;
  v25 = *(_QWORD *)(v24 - 8);
  v8[28] = v25;
  v26 = (*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[29] = swift_task_alloc(v26);
  v8[30] = swift_task_alloc(v26);
  v27 = type metadata accessor for EnumeratedSequence(0, a7, v13);
  v8[31] = v27;
  v8[32] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v27 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for EnumeratedSequence.Iterator(0, a7, v13);
  v8[33] = v28;
  v29 = *(_QWORD *)(v28 - 8);
  v8[34] = v29;
  v8[35] = swift_task_alloc((*(_QWORD *)(v29 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1002188C8, 0, 0);
}

uint64_t sub_1002188C8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  Swift::Int v23;
  __C::_NSRange v24;
  __C::_NSRange v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = v0[31];
  v35 = v0[26];
  v28 = v0[16];
  v29 = v0[28];
  Sequence.enumerated()(v0[8], v0[14]);
  EnumeratedSequence.makeIterator()(v1);
  while (1)
  {
    v3 = v0[29];
    v2 = v0[30];
    v5 = v0[26];
    v4 = v0[27];
    EnumeratedSequence.Iterator.next()(v0[33]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32))(v2, v3, v4);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48))(v2, 1, v5) == 1)
      break;
    v6 = (uint64_t *)v0[30];
    v7 = v0[19];
    v33 = v0[20];
    v34 = v0[22];
    v8 = v0[17];
    v9 = (char *)v0[18];
    v10 = v0[15];
    v11 = v0[6];
    v31 = v0[10];
    v32 = v0[5];
    v12 = (char *)v6 + *(int *)(v35 + 48);
    v13 = *v6;
    v14 = type metadata accessor for TaskPriority(0);
    v30 = *((_OWORD *)v0 + 4);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v7, 1, 1, v14);
    v15 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
    v15(v9, v12, v10);
    v16 = *(unsigned __int8 *)(v28 + 80);
    v17 = (v16 + 80) & ~v16;
    v18 = swift_allocObject(&unk_100458358, v17 + v8, v16 | 7);
    *(_QWORD *)(v18 + 16) = 0;
    *(_QWORD *)(v18 + 24) = 0;
    *(_OWORD *)(v18 + 32) = v30;
    *(_QWORD *)(v18 + 48) = v31;
    *(_QWORD *)(v18 + 56) = v13;
    *(_QWORD *)(v18 + 64) = v32;
    *(_QWORD *)(v18 + 72) = v11;
    v15((char *)(v18 + v17), v9, v10);
    v19 = type metadata accessor for ThrowingTaskGroup(0, v33, v34, &protocol self-conformance witness table for Error);
    swift_retain(v11);
    sub_100218FE8(v7, (uint64_t)&unk_100497CD8, v18, v19);
    sub_100206070(v7);
  }
  v20 = v0[22];
  v21 = v0[20];
  v22 = (_QWORD *)v0[3];
  (*(void (**)(_QWORD, _QWORD))(v0[34] + 8))(v0[35], v0[33]);
  ThrowingTaskGroup.makeAsyncIterator()(*v22, v21, v20, &protocol self-conformance witness table for Error);
  v23 = type metadata accessor for Array(0);
  v0[36] = v23;
  Array._makeMutableAndUnique()();
  v24.location = v23;
  CFRange.init(_:)(v24);
  Array._makeMutableAndUnique()();
  v25.location = v23;
  CFRange.init(_:)(v25);
  v26 = (_QWORD *)swift_task_alloc(_sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
  v0[37] = v26;
  *v26 = v0;
  v26[1] = sub_100218B70;
  return _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v0[21], 0, 0, v0[23], v0 + 2);
}

uint64_t sub_100218B70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 296));
  if (v0)
    v2 = sub_100218E18;
  else
    v2 = sub_100218BD4;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100218BD4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __C::_NSRange v22;
  _QWORD *v23;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(unint64_t **)(v0 + 168);
  if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 48))(v2, 1, v1) == 1)
  {
    v3 = *(_QWORD *)(v0 + 280);
    v4 = *(_QWORD *)(v0 + 256);
    v6 = *(_QWORD *)(v0 + 232);
    v5 = *(_QWORD *)(v0 + 240);
    v7 = *(_QWORD *)(v0 + 200);
    v9 = *(_QWORD *)(v0 + 144);
    v8 = *(_QWORD *)(v0 + 152);
    v10 = *(_QWORD *)(v0 + 104);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(v7, *(_QWORD *)(v0 + 184));
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v2);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 288);
    v13 = *(_QWORD *)(v0 + 96);
    v14 = *(_QWORD *)(v0 + 104);
    v15 = *(_QWORD *)(v0 + 88);
    v16 = *(_QWORD *)(v0 + 72);
    v17 = *(uint64_t **)(v0 + 56);
    v18 = *v2;
    v19 = (char *)v2 + *(int *)(v1 + 48);
    v20 = *(_QWORD *)(v16 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v14, v19, v16);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(v14, 0, 1, v16);
    Array._makeMutableAndUnique()();
    v21 = *v17;
    sub_100205248(v18, *v17, v15);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v13 + 40))(v21+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72) * v18, v14, v15);
    v22.location = v12;
    CFRange.init(_:)(v22);
    v23 = (_QWORD *)swift_task_alloc(*((unsigned int *)&_sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu + 1));
    *(_QWORD *)(v0 + 304) = v23;
    *v23 = v0;
    v23[1] = sub_100218DB4;
    return _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(*(_QWORD *)(v0 + 168), 0, 0, *(_QWORD *)(v0 + 184), v0 + 16);
  }
}

uint64_t sub_100218DB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 304));
  if (v0)
    v2 = sub_100218E18;
  else
    v2 = sub_100218BD4;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100218E18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 280);
  v2 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 168);
  v8 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 152);
  v10 = *(_QWORD *)(v0 + 104);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(v5, *(_QWORD *)(v0 + 184));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100218EE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;

  v7[6] = a7;
  v7[7] = v9;
  v7[4] = a5;
  v7[5] = a6;
  v7[2] = a1;
  v7[3] = a4;
  return swift_task_switch(sub_100218F08, 0, 0);
}

uint64_t sub_100218F08()
{
  _QWORD *v0;
  int *v1;
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  _QWORD *v5;
  int *v7;

  v2 = v0[3];
  v1 = (int *)v0[4];
  v3 = (_QWORD *)v0[2];
  v4 = (char *)v3 + *(int *)(swift_getTupleTypeMetadata2(0, &type metadata for Int, v0[7], 0, 0) + 48);
  *v3 = v2;
  v7 = (int *)((char *)v1 + *v1);
  v5 = (_QWORD *)swift_task_alloc(v1[1]);
  v0[8] = v5;
  *v5 = v0;
  v5[1] = sub_100218FA0;
  return ((uint64_t (*)(char *, _QWORD))v7)(v4, v0[6]);
}

uint64_t sub_100218FA0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 64));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

double sub_100218FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  double result;
  _QWORD v30[3];
  _QWORD v31[4];

  v5 = v4;
  v10 = sub_100005574(&qword_1004976A0);
  __chkstk_darwin(v10);
  v12 = (char *)&v30[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100205C00(a1, (uint64_t)v12);
  v13 = type metadata accessor for TaskPriority(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v15 == 1)
  {
    sub_100206070((uint64_t)v12);
    v16 = 12544;
    v17 = *(_QWORD *)(a3 + 16);
    if (v17)
    {
LABEL_3:
      v18 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType();
      swift_unknownObjectRetain(v17);
      v20 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v18);
      v22 = v21;
      swift_unknownObjectRelease(v17);
      goto LABEL_6;
    }
  }
  else
  {
    v23 = TaskPriority.rawValue.getter(v15);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v12, v13);
    v16 = v23 | 0x3100;
    v17 = *(_QWORD *)(a3 + 16);
    if (v17)
      goto LABEL_3;
  }
  v20 = 0;
  v22 = 0;
LABEL_6:
  v24 = *v5;
  v25 = *(_QWORD *)(a4 + 16);
  v26 = (_QWORD *)(v22 | v20);
  if (v22 | v20)
  {
    v31[0] = 0;
    v31[1] = 0;
    v26 = v31;
    v31[2] = v20;
    v31[3] = v22;
  }
  v30[0] = 1;
  v30[1] = v26;
  v30[2] = v24;
  v27 = swift_task_create(v16, v30, v25, a2, a3);
  *(_QWORD *)&result = swift_release(v27).n128_u64[0];
  return result;
}

uint64_t sub_10021916C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v18;
  _QWORD *v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (sub_10037B730(2, 18, 0, 0))
  {
    v18 = (_QWORD *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
    *(_QWORD *)(v9 + 24) = v18;
    *v18 = v9;
    v18[1] = sub_10001ACC0;
    return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100497CC8 + dword_100497CC8);
    v20 = (_QWORD *)swift_task_alloc(unk_100497CCC);
    *(_QWORD *)(v9 + 16) = v20;
    *v20 = v9;
    v20[1] = sub_10000EA88;
    return v21(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

BOOL Collection<>.contains(approximatelyMatching:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BOOL8 v14;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v8 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v8);
  v10 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v16[-v12];
  v17 = a2;
  v18 = a3;
  v19 = a4;
  v20 = a1;
  Sequence.first(where:)(sub_10021A8E0, v16, a2, v8);
  v14 = (*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(v13, 1, AssociatedTypeWitness) != 1;
  (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
  return v14;
}

uint64_t Collection<>.first(approximatelyMatching:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[8];

  v5[2] = a2;
  v5[3] = a3;
  v5[4] = a4;
  v5[5] = a1;
  return Sequence.first(where:)(sub_10021A8E0, v5, a2, *(_QWORD *)(a3 + 8));
}

_QWORD *Collection<>.firstIndex(approximatelyMatching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD v6[8];

  v6[2] = a2;
  v6[3] = a3;
  v6[4] = a4;
  v6[5] = a1;
  return Collection.firstIndex(where:)(a5, sub_10021A8E0, v6, a2, a3);
}

uint64_t static DisplayUnit.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t TupleTypeMetadata2;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  char *v24;
  char v25;
  void (*v26)(char *, uint64_t);
  char *v27;
  uint64_t v28;
  char *v29;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v34 = a1;
  v35 = a2;
  v36 = *(_QWORD *)(a3 - 8);
  v4 = __chkstk_darwin(a1);
  v32 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v31 = (char *)&v31 - v6;
  v33 = v7;
  v9 = type metadata accessor for DisplayUnit(0, v8, v7, v7);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v31 - v14;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v9, v9, 0, 0);
  v17 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v18 = __chkstk_darwin(TupleTypeMetadata2);
  v20 = (char *)&v31 - v19;
  v21 = (char *)&v31 + *(int *)(v18 + 48) - v19;
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v22((char *)&v31 - v19, v34, v9);
  v22(v21, v35, v9);
  if (swift_getEnumCaseMultiPayload(v20, v9) != 1)
  {
    v22(v15, (uint64_t)v20, v9);
    if (swift_getEnumCaseMultiPayload(v21, v9) != 1)
    {
      v28 = v36;
      v29 = v31;
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v31, v21, a3);
      v25 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v29, a3, v33);
      v26 = *(void (**)(char *, uint64_t))(v28 + 8);
      v26(v29, a3);
      v27 = v15;
      goto LABEL_6;
    }
LABEL_8:
    (*(void (**)(char *, uint64_t))(v36 + 8))(v15, a3);
    v25 = 0;
    v10 = v17;
    v9 = TupleTypeMetadata2;
    goto LABEL_9;
  }
  v22(v13, (uint64_t)v20, v9);
  if (swift_getEnumCaseMultiPayload(v21, v9) != 1)
  {
    v15 = v13;
    goto LABEL_8;
  }
  v23 = v36;
  v24 = v32;
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v32, v21, a3);
  v25 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v24, a3, v33);
  v26 = *(void (**)(char *, uint64_t))(v23 + 8);
  v26(v24, a3);
  v27 = v13;
LABEL_6:
  v26(v27, a3);
LABEL_9:
  (*(void (**)(char *, uint64_t))(v10 + 8))(v20, v9);
  return v25 & 1;
}

uint64_t sub_1002196F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static DisplayUnit.__derived_enum_equals(_:_:)(a1, a2, *(_QWORD *)(a3 + 16));
}

uint64_t ClosedRange<>.linearMap(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;

  v4 = v3;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(a1);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v23 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v23 - v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v23 - v16, v4, v8);
  v18 = v4 + *(int *)(a2 + 36);
  v19 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8);
  v20 = *(_QWORD *)(v19 + 8);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)(v18, v4, v8, v20);
  dispatch thunk of static Numeric.* infix(_:_:)(a1, v12, v8, v19);
  v21 = *(void (**)(char *, uint64_t))(v9 + 8);
  v21(v12, v8);
  dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)(v17, v15, v8, v20);
  v21(v15, v8);
  return ((uint64_t (*)(char *, uint64_t))v21)(v17, v8);
}

uint64_t ClosedRange<>.normalize(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = v3;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(a1);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v19 - v13;
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 16) + 8) + 8);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)(v12, v4, v7, v16);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)(v4 + *(int *)(a2 + 36), v4, v7, v16);
  dispatch thunk of static FloatingPoint./ infix(_:_:)(v14, v11, v7, a3);
  v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v11, v7);
  return ((uint64_t (*)(char *, uint64_t))v17)(v14, v7);
}

uint64_t ClosedRange<>.clampedNormalize(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(a1);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  ClosedRange.clamp(_:)(v7, v10);
  ClosedRange<>.normalize(_:)((uint64_t)v9, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t Array.extract(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  swift_bridgeObjectRetain();
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], a3);
  v8 = _ArrayProtocol.filter(_:)(a1, a2, a3, WitnessTable);
  if (!v3)
  {
    v9 = swift_getWitnessTable(&protocol conformance descriptor for [A], a3);
    v10 = swift_getWitnessTable(&protocol conformance descriptor for [A], a3);
    RangeReplaceableCollection<>.removeAll(where:)(a1, a2, a3, v9, v10);
  }
  return v8;
}

uint64_t Array.extractFirst(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t WitnessTable;
  uint64_t result;
  uint64_t v13;
  char v14;

  v10 = *v4;
  swift_bridgeObjectRetain();
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], a3);
  Collection.firstIndex(where:)(&v13, a1, a2, a3, WitnessTable);
  result = swift_bridgeObjectRelease(v10);
  if (!v5)
  {
    if ((v14 & 1) != 0)
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 56))(a4, 1, 1);
    }
    else
    {
      Array.remove(at:)(v13, a3);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 56))(a4, 0, 1);
    }
  }
  return result;
}

uint64_t Array.removingDuplicates<A>(with:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  _QWORD v11[7];
  uint64_t v12;

  v6 = Set.init()(*(_QWORD *)(class metadata base offset for KeyPath + *a1 + 8), a3);
  v11[6] = a2;
  v12 = v6;
  v11[2] = a3;
  v11[3] = &v12;
  v11[4] = a1;
  v7 = type metadata accessor for Array(0);
  swift_bridgeObjectRetain();
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v7);
  v9 = _ArrayProtocol.filter(_:)(sub_10021A970, v11, v7, WitnessTable);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_100219C8C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];

  v5 = *(_QWORD *)(class metadata base offset for KeyPath + *a3 + 8);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(a1);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)v16 - v11;
  swift_getAtKeyPath(v10, v13);
  v14 = type metadata accessor for Set(0, v5, a4);
  LOBYTE(a4) = Set.insert(_:)(v12, v9, v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  return a4 & 1;
}

uint64_t Collection.removingDuplicates<A>(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v9 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v11 = &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = Set.init()(*(_QWORD *)(class metadata base offset for KeyPath + v12 + 8), v13);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v11, v4, a2);
  v17 = a2;
  v18 = a3;
  v19 = a4;
  v20 = &v22;
  v21 = a1;
  v14 = Sequence.filter(_:)(sub_10021A990, v16, a2, *(_QWORD *)(a3 + 8));
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_100219E64(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];

  v7 = *(_QWORD *)(class metadata base offset for KeyPath + *a3 + 8);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(a1);
  v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)v18 - v13;
  swift_getAtKeyPath(v12, v15);
  v16 = type metadata accessor for Set(0, v7, a6);
  LOBYTE(a6) = Set.insert(_:)(v14, v11, v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
  return a6 & 1;
}

uint64_t Sequence.sorted<A>(by:comparator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v7[10];

  v7[2] = a4;
  v7[3] = a5;
  v7[4] = a6;
  v7[5] = a2;
  v7[6] = a3;
  v7[7] = a1;
  return Sequence.sorted(by:)(sub_10021A9B4, v7, a4, a5);
}

uint64_t sub_100219F98(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, char *), uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  _QWORD v19[2];

  v5 = a5;
  v8 = *(_QWORD *)(class metadata base offset for KeyPath + *a5 + 8);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(a1);
  v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)v19 - v14;
  swift_getAtKeyPath(v13, v16);
  swift_getAtKeyPath(a2, v5);
  LOBYTE(v5) = a3(v15, v12);
  v17 = *(void (**)(char *, uint64_t))(v9 + 8);
  v17(v12, v8);
  v17(v15, v8);
  return v5 & 1;
}

uint64_t Sequence<>.excluding(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;

  v8 = (_QWORD *)swift_allocObject(&unk_100458330, 48, 7);
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  v8[5] = a1;
  swift_bridgeObjectRetain();
  v9 = Sequence.exclude(_:)((uint64_t)sub_10021B440, (uint64_t)v8, a2, a3);
  swift_release(v8);
  return v9;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;

  v14 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3);
  v8 = type metadata accessor for Array(0);
  swift_bridgeObjectRetain();
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v8);
  v10 = Set.init<A>(_:)(&v14, AssociatedTypeWitness, v8, a4, WitnessTable);
  v11 = (_QWORD *)swift_allocObject(&unk_100458308, 48, 7);
  v11[2] = a2;
  v11[3] = a3;
  v11[4] = a4;
  v11[5] = v10;
  v12 = Sequence.exclude(_:)((uint64_t)sub_10021B3EC, (uint64_t)v11, a2, a3);
  swift_release(v11);
  return v12;
}

uint64_t sub_10021A130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t WitnessTable;

  swift_getAssociatedTypeWitness(255, a4);
  v7 = type metadata accessor for Array(0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v7);
  return Sequence<>.contains(_:)(a1, v7, WitnessTable, a5) & 1;
}

uint64_t Sequence.exclude(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  __chkstk_darwin(a1);
  (*(void (**)(_BYTE *, uint64_t))(v10 + 16))(&v12[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], v4);
  v13 = a3;
  v14 = a4;
  v15 = a1;
  v16 = a2;
  return Sequence.filter(_:)(sub_10021A9D8, v12, a3, a4);
}

uint64_t Sequence<>.exclude(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[8];

  v5[2] = a2;
  v5[3] = a3;
  v5[4] = a4;
  v5[5] = a1;
  return Sequence.exclude(_:)((uint64_t)sub_10021AA00, (uint64_t)v5, a2, a3);
}

{
  _QWORD v5[8];

  v5[2] = a2;
  v5[3] = a3;
  v5[4] = a4;
  v5[5] = a1;
  return Sequence.exclude(_:)((uint64_t)sub_10021AA7C, (uint64_t)v5, a2, a3);
}

uint64_t Sequence<>.exclude(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[2] = a2;
  v4[3] = a3;
  v4[4] = a1;
  return Sequence.exclude(_:)((uint64_t)sub_10021AA68, (uint64_t)v4, a2, a3);
}

uint64_t sub_10021A444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8[37] = a7;
  v8[38] = a8;
  v8[35] = a1;
  v8[36] = a6;
  if (a4)
  {
    ObjectType = swift_getObjectType();
    v11 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, a5);
    v13 = v12;
  }
  else
  {
    v11 = 0;
    v13 = 0;
  }
  v8[39] = v11;
  v8[40] = v13;
  return swift_task_switch(sub_10021A4B4, v11, v13);
}

uint64_t sub_10021A4B4()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  _QWORD *v4;
  int *v6;

  v1 = v0[38];
  v2 = (int *)v0[36];
  swift_taskGroup_initialize(v0 + 2, v1);
  v3 = sub_100005574(&qword_100496F20);
  v0[41] = v3;
  v0[34] = ThrowingTaskGroup.init(group:)(v0 + 2, v1, v3, &protocol self-conformance witness table for Error);
  v6 = (int *)((char *)v2 + *v2);
  v4 = (_QWORD *)swift_task_alloc(v2[1]);
  v0[42] = v4;
  *v4 = v0;
  v4[1] = sub_10021A568;
  return ((uint64_t (*)(_QWORD, _QWORD *))v6)(v0[35], v0 + 34);
}

uint64_t sub_10021A568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 336);
  v3 = *(_QWORD **)v1;
  v3[43] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10021A630, v3[39], v3[40]);
  v5 = v3[41];
  v6 = v3[38];
  v7 = (_QWORD *)swift_task_alloc(async function pointer to ThrowingTaskGroup.awaitAllRemainingTasks()[1]);
  v3[45] = v7;
  v8 = type metadata accessor for ThrowingTaskGroup(0, v6, v5, &protocol self-conformance witness table for Error);
  *v7 = v3;
  v7[1] = sub_10021A758;
  return ThrowingTaskGroup.awaitAllRemainingTasks()(v8);
}

uint64_t sub_10021A630()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[41];
  v2 = v0[38];
  ThrowingTaskGroup.cancelAll()();
  v3 = (_QWORD *)swift_task_alloc(async function pointer to ThrowingTaskGroup.awaitAllRemainingTasks()[1]);
  v0[44] = v3;
  v4 = type metadata accessor for ThrowingTaskGroup(0, v2, v1, &protocol self-conformance witness table for Error);
  *v3 = v0;
  v3[1] = sub_10021A6C8;
  return ThrowingTaskGroup.awaitAllRemainingTasks()(v4);
}

uint64_t sub_10021A6C8()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 352));
  return swift_task_switch(sub_10021A714, *(_QWORD *)(v1 + 312), *(_QWORD *)(v1 + 320));
}

uint64_t sub_10021A714()
{
  uint64_t v0;
  __n128 v1;

  v1.n128_f64[0] = swift_taskGroup_destroy(v0 + 16);
  swift_willThrow(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10021A758()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 360));
  return swift_task_switch(sub_10021A7A4, *(_QWORD *)(v1 + 312), *(_QWORD *)(v1 + 320));
}

uint64_t sub_10021A7A4()
{
  uint64_t v0;
  double v1;

  v1 = swift_taskGroup_destroy(v0 + 16);
  return (*(uint64_t (**)(double))(v0 + 8))(v1);
}

void sub_10021A7D8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100497C2C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10000F894;
  __asm { BR              X9; sub_10021867C }
}

uint64_t sub_10021A88C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = type metadata accessor for Optional(0, *(_QWORD *)(v2 + 24));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
}

uint64_t sub_10021A8E0(uint64_t a1)
{
  return sub_10021A8F8(a1) & 1;
}

uint64_t sub_10021A8F8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;

  v3 = v1[3];
  v5 = v1[4];
  v4 = v1[5];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(v3 + 8));
  return dispatch thunk of static ApproximatelyEquatable.==~ infix(_:_:)(a1, v4, AssociatedTypeWitness, v5) & 1;
}

uint64_t type metadata accessor for DisplayUnit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100031DCC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DisplayUnit);
}

uint64_t sub_10021A970(uint64_t a1)
{
  uint64_t v1;

  return sub_100219C8C(a1, *(_QWORD *)(v1 + 24), *(_QWORD **)(v1 + 32), *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_10021A990(uint64_t a1)
{
  uint64_t v1;

  return sub_100219E64(a1, *(_QWORD *)(v1 + 40), *(_QWORD **)(v1 + 48), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32)) & 1;
}

uint64_t sub_10021A9B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100219F98(a1, a2, *(uint64_t (**)(char *, char *))(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD **)(v2 + 56)) & 1;
}

BOOL sub_10021A9D8()
{
  uint64_t v0;

  return ((*(uint64_t (**)(void))(v0 + 32))() & 1) == 0;
}

uint64_t sub_10021AA00(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;

  v3 = v1[3];
  v5 = v1[4];
  v4 = v1[5];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v3);
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, v4, AssociatedTypeWitness, v5) & 1;
}

BOOL sub_10021AA68(_QWORD *a1)
{
  uint64_t v1;

  return *a1 == *(_QWORD *)(v1 + 32);
}

uint64_t sub_10021AA7C(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;

  v2 = v1[3];
  v4 = v1[4];
  v3 = v1[5];
  v5 = *a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v2);
  v8 = v3;
  v9 = v5;
  return dispatch thunk of static Equatable.== infix(_:_:)(&v9, &v8, AssociatedTypeWitness, v4) & 1;
}

uint64_t sub_10021AAF0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = v4[0];
    swift_initEnumMetadataMultiPayload(a1, 0, 2, v4);
    return 0;
  }
  return result;
}

uint64_t *sub_10021AB58(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if (v6 <= 7 && (unint64_t)(v5 + 1) <= 0x18 && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    v10 = *((unsigned __int8 *)a2 + v5);
    if (v10 >= 2)
    {
      if (v5 <= 3)
        v11 = v5;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
    *((_BYTE *)v3 + v5) = v10 == 1;
  }
  else
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain(v9);
  }
  return v3;
}

uint64_t sub_10021AC5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  v8 = v6 == 1;
  (*(void (**)(uint64_t))(v4 + 16))(a1);
  *(_BYTE *)(a1 + v5) = v8;
  return a1;
}

uint64_t sub_10021AD18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    v8 = *(unsigned __int8 *)(a2 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    v10 = v8 == 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v5);
    *(_BYTE *)(a1 + v7) = v10;
  }
  return a1;
}

uint64_t sub_10021AE00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  v8 = v6 == 1;
  (*(void (**)(uint64_t))(v4 + 32))(a1);
  *(_BYTE *)(a1 + v5) = v8;
  return a1;
}

uint64_t sub_10021AEBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    v8 = *(unsigned __int8 *)(a2 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    v10 = v8 == 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v5);
    *(_BYTE *)(a1 + v7) = v10;
  }
  return a1;
}

uint64_t sub_10021AFA4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  if (!a2)
    return 0;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 < 0xFF)
    goto LABEL_19;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_19;
      goto LABEL_12;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_19;
      goto LABEL_12;
    }
    if (v8 < 2)
    {
LABEL_19:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_19;
LABEL_12:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_10021B05C + 4 * byte_100394199[(v4 - 1)]))();
}

void sub_10021B0A8(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = &dword_100000004;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = &_mh_execute_header.magic + 1;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_10021B244(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_10021B280 + 4 * byte_1003941A7[v3]))();
}

void sub_10021B2C8(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 1)
  {
    v5 = a2 - 2;
    if (v4 < 4)
    {
      v6 = v5 >> (8 * v4);
      v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

unint64_t sub_10021B384()
{
  unint64_t result;

  result = qword_100497CC0;
  if (!qword_100497CC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Double, &type metadata for Double);
    atomic_store(result, (unint64_t *)&qword_100497CC0);
  }
  return result;
}

uint64_t sub_10021B3C8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10021B3EC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;

  v3 = v1[3];
  v5 = v1[4];
  v4 = v1[5];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v3);
  return Set.contains(_:)(a1, v4, AssociatedTypeWitness, v5);
}

uint64_t sub_10021B440(uint64_t a1)
{
  uint64_t *v1;

  return sub_10021A130(a1, v1[5], v1[2], v1[3], v1[4]);
}

uint64_t sub_10021B44C()
{
  char *v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(*((_QWORD *)v0 + 6) + 8));
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 80) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*((_QWORD *)v0 + 2));
  v7 = swift_release(*((_QWORD *)v0 + 9));
  (*(void (**)(char *, uint64_t, __n128))(v2 + 8))(&v0[v4], AssociatedTypeWitness, v7);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10021B4E4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  swift_getAssociatedTypeWitness(0, *(_QWORD *)(*(_QWORD *)(v0 + 48) + 8));
  v2 = (_QWORD *)swift_task_alloc(dword_100497CD4);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10000EA88;
  __asm { BR              X9; sub_100218EE0 }
}

uint64_t Text.withChevron<A>(_:tintColor:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  NSString v20;
  id v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t result;
  uint64_t v50;
  id v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;

  v54 = a4;
  v53 = a5 & 1;
  v16 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a1;
  v20 = String._bridgeToObjectiveC()();
  v21 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v20, v19);

  if (v21)
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 2);
    v22._countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v22);
    v23._countAndFlagsBits = 41154;
    v23._object = (void *)0xA200000000000000;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v23);
    v24._countAndFlagsBits = 0;
    v24._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v24);
    v25 = Image.init(uiImage:)(objc_msgSend(v21, "imageWithRenderingMode:", 2));
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
    swift_release(v25);
    v26._countAndFlagsBits = 0;
    v26._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v26);
    v27 = LocalizedStringKey.init(stringInterpolation:)(v18);
    v28 = Text.init(_:tableName:bundle:comment:)(v27);
    v30 = v29;
    v52 = a9;
    v31 = a6;
    v33 = v32 & 1;
    v35 = Text.foregroundStyle<A>(_:)(a2, v28, v29, v33, v34, a7, a8);
    v51 = v21;
    v37 = v36;
    v39 = v38;
    v41 = v40 & 1;
    sub_10003B4D0(v28, v30, v33);
    swift_bridgeObjectRelease();
    v42 = v31;
    a9 = v52;
    v43 = static Text.+ infix(_:_:)(a3, v54, v53, v42, v35, v37, v41, v39);
    v45 = v44;
    LOBYTE(v30) = v46;
    a6 = v47;

    v48 = v30 & 1;
    sub_10003B4D0(v35, v37, v41);
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a9 = v43;
  }
  else
  {
    *(_QWORD *)a9 = a3;
    v45 = v54;
    v48 = v53;
    sub_10003B4C0(a3, v54, v53);
    result = swift_bridgeObjectRetain();
  }
  *(_QWORD *)(a9 + 8) = v45;
  *(_BYTE *)(a9 + 16) = v48;
  *(_QWORD *)(a9 + 24) = a6;
  return result;
}

uint64_t Text.playableForegroundStyle<A>(_:isPlayable:)(int *a1, char a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, void *a7, void *a8)
{
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v29;
  int v30;
  int v31;

  __chkstk_darwin(a1);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, int *, uint64_t))(v18 + 16))(v17, a1, v19);
  if (swift_dynamicCast(&v31, v17, a7, &type metadata for HierarchicalShapeStyle, 6))
  {
    if ((a2 & 1) != 0)
      v20 = v31;
    else
      v20 = static HierarchicalShapeStyle.tertiary.getter();
    v30 = v20;
    v21 = a5 & 1;
    v26 = &type metadata for HierarchicalShapeStyle;
    v27 = &protocol witness table for HierarchicalShapeStyle;
    v22 = &v30;
    v23 = a3;
    v24 = a4;
    v25 = a6;
  }
  else
  {
    v21 = a5 & 1;
    v22 = a1;
    v23 = a3;
    v24 = a4;
    v25 = a6;
    v26 = a7;
    v27 = a8;
  }
  return Text.foregroundStyle<A>(_:)(v22, v23, v24, v21, v25, v26, v27);
}

uint64_t View.playableForegroundStyle<A>(_:isPlayable:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;

  v19 = a5;
  v9 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(a1);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PlayableForegroundStyle(0, v12, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v19 - v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a4);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v17, v11, a4);
  v17[*(int *)(v14 + 36)] = a2;
  View.modifier<A>(_:)(v17, a3, v14, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t type metadata accessor for PlayableForegroundStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100031DCC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlayableForegroundStyle);
}

uint64_t sub_10021BAB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t WitnessTable;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _DWORD v89[3];

  v68 = a1;
  v73 = a3;
  WitnessTable = swift_getWitnessTable(&unk_100394300, a2);
  v5 = type metadata accessor for _ViewModifier_Content(255, a2, WitnessTable);
  v6 = *(_QWORD *)(a2 + 16);
  v64 = *(_QWORD *)(a2 + 24);
  v72 = type metadata accessor for _ForegroundStyleModifier(255, v6);
  v7 = type metadata accessor for ModifiedContent(0, v5, v72);
  v65 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v66 = (char *)&v63 - v11;
  v12 = sub_100005600(&qword_100497DF8);
  v69 = v5;
  v13 = type metadata accessor for ModifiedContent(0, v5, v12);
  v63 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v63 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v63 - v21;
  v23 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v20);
  v25 = (char *)&v63 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for _ConditionalContent(0, v13, v7);
  v70 = *(_QWORD *)(v26 - 8);
  v71 = v26;
  __chkstk_darwin(v26);
  v67 = (char *)&v63 - v27;
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v29 = v74;
  v28(v25, v74, v6);
  if (swift_dynamicCast(v89, v25, v6, &type metadata for HierarchicalShapeStyle, 6))
  {
    v66 = v16;
    v65 = v7;
    v30 = v69;
    v31 = v22;
    v32 = v63;
    if ((*(_BYTE *)(v29 + *(int *)(a2 + 36)) & 1) != 0)
      v33 = v89[0];
    else
      v33 = static HierarchicalShapeStyle.quaternary.getter();
    v89[0] = v33;
    v46 = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v30);
    View.foregroundStyle<A>(_:)(v89, v30, &type metadata for HierarchicalShapeStyle, v46, &protocol witness table for HierarchicalShapeStyle);
    v47 = sub_10002FFB8(&qword_100497E00, &qword_100497DF8, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    v77 = v46;
    v78 = v47;
    v48 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
    v49 = *(void (**)(char *, char *, uint64_t))(v32 + 16);
    v49(v31, v19, v13);
    v50 = v31;
    v40 = *(void (**)(char *, uint64_t))(v32 + 8);
    v40(v19, v13);
    v51 = (uint64_t)v66;
    v49(v66, v50, v13);
    v35 = v72;
    v52 = swift_getWitnessTable(&protocol conformance descriptor for _ForegroundStyleModifier<A>, v72);
    v75 = v46;
    v76 = v52;
    v7 = v65;
    v53 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v65);
    v43 = v67;
    sub_100035EB0(v51, v13, v7, v48, v53);
    v40((char *)v51, v13);
    v44 = v50;
    v45 = v13;
  }
  else
  {
    v30 = v69;
    v34 = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v69);
    View.foregroundStyle<A>(_:)(v29, v30, v6, v34, v64);
    v35 = v72;
    v36 = swift_getWitnessTable(&protocol conformance descriptor for _ForegroundStyleModifier<A>, v72);
    v87 = v34;
    v88 = v36;
    v74 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v7);
    v37 = v65;
    v38 = *(void (**)(char *, char *, uint64_t))(v65 + 16);
    v39 = v66;
    v38(v66, v10, v7);
    v40 = *(void (**)(char *, uint64_t))(v37 + 8);
    v40(v10, v7);
    v38(v10, v39, v7);
    v41 = sub_10002FFB8(&qword_100497E00, &qword_100497DF8, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    v85 = v34;
    v86 = v41;
    v42 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
    v43 = v67;
    sub_100035F74((uint64_t)v10, v13, v7, v42, v74);
    v40(v10, v7);
    v44 = v39;
    v45 = v7;
  }
  v40(v44, v45);
  v54 = v73;
  v56 = v70;
  v55 = v71;
  v57 = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v30);
  v58 = sub_10002FFB8(&qword_100497E00, &qword_100497DF8, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
  v83 = v57;
  v84 = v58;
  v59 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
  v60 = swift_getWitnessTable(&protocol conformance descriptor for _ForegroundStyleModifier<A>, v35);
  v81 = v57;
  v82 = v60;
  v61 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v7);
  v79 = v59;
  v80 = v61;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v55);
  (*(void (**)(uint64_t, char *, uint64_t))(v56 + 16))(v54, v43, v55);
  return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v43, v55);
}

uint64_t ListChevron.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v4 = swift_allocObject(&unk_1004583A8, 32, 7);
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  swift_retain(a2);
  v5 = sub_100005574(&qword_100497CE0);
  v6 = sub_10021C58C();
  return Button.init(action:label:)(sub_100009BB0, v4, sub_10021C0DC, 0, v5, v6);
}

uint64_t sub_10021C0B8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10021C0DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  double v18;
  uint64_t v19;
  unint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t OpaqueTypeConformance2;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;

  v54 = a1;
  v52 = sub_100005574(&qword_100497D08);
  __chkstk_darwin(v52);
  v59 = (char *)&v48 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for Image.Scale(0);
  v55 = *(_QWORD *)(v2 - 8);
  v56 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005574(&qword_100497E08);
  v57 = *(_QWORD *)(v5 - 8);
  v58 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005574(&qword_100497D00);
  __chkstk_darwin(v8);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005574(&qword_100497E10);
  v50 = *(_QWORD *)(v11 - 8);
  v51 = v11;
  __chkstk_darwin(v11);
  v49 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005574(&qword_100497CF8);
  __chkstk_darwin(v13);
  v53 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = Image.init(systemName:)(0x2E6E6F7276656863, 0xEF64726177726F66);
  v16 = static Font.body.getter();
  KeyPath = swift_getKeyPath(&unk_100394350);
  v60 = v15;
  v61 = KeyPath;
  v62 = v16;
  v18 = static Font.Weight.semibold.getter();
  v19 = sub_100005574(&qword_100497D18);
  v20 = sub_10021C7AC();
  View.fontWeight(_:)(*(_QWORD *)&v18, 0, v19, v20);
  swift_release(v16);
  swift_release(KeyPath);
  v21 = swift_release(v15);
  v23 = v55;
  v22 = v56;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v55 + 104))(v4, enum case for Image.Scale.small(_:), v56, v21);
  v24 = swift_getKeyPath(&unk_100394380);
  v25 = (uint64_t *)&v10[*(int *)(v8 + 36)];
  v26 = sub_100005574(&qword_100497D40);
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))((char *)v25 + *(int *)(v26 + 28), v4, v22);
  *v25 = v24;
  v28 = v57;
  v27 = v58;
  (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v10, v7, v58);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v4, v22);
  v29 = v7;
  v30 = (uint64_t)v59;
  (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v27);
  v31 = enum case for DynamicTypeSize.accessibility1(_:);
  v32 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v30, v31, v32);
  v33 = sub_100006924(&qword_100497E18, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v30, v30, v32, v33);
  if ((result & 1) != 0)
  {
    v35 = sub_10021C700();
    v36 = sub_10002FFB8(&qword_100497D48, &qword_100497D08, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    v37 = v49;
    v38 = v52;
    View.dynamicTypeSize<A>(_:)(v30, v8, v52, v35, v36);
    sub_100008758(v30, &qword_100497D08);
    sub_100008758((uint64_t)v10, &qword_100497D00);
    v60 = v8;
    v61 = v38;
    v62 = v35;
    v63 = v36;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v60, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    v40 = (uint64_t)v53;
    v41 = v51;
    View.accessibilityHidden(_:)(1, v51, OpaqueTypeConformance2);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v37, v41);
    v42 = objc_msgSend((id)objc_opt_self(UIColor), "tertiaryLabelColor");
    v43 = Color.init(uiColor:)(v42);
    v44 = swift_getKeyPath(&unk_1003943B0);
    v60 = v43;
    swift_retain(v43);
    v45 = AnyShapeStyle.init<A>(_:)(&v60, &type metadata for Color, &protocol witness table for Color);
    v46 = v54;
    sub_10021CEF0(v40, v54);
    swift_release(v43);
    v47 = (uint64_t *)(v46 + *(int *)(sub_100005574(&qword_100497CE0) + 36));
    *v47 = v44;
    v47[1] = v45;
    return sub_100008758(v40, &qword_100497CF8);
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_10021C58C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100497CE8;
  if (!qword_100497CE8)
  {
    v1 = sub_100005600(&qword_100497CE0);
    sub_10021C610();
    sub_10002FFB8(&qword_100497D58, &qword_100497D60, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100497CE8);
  }
  return result;
}

unint64_t sub_10021C610()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100497CF0;
  if (!qword_100497CF0)
  {
    v1 = sub_100005600(&qword_100497CF8);
    v2[0] = sub_100005600(&qword_100497D00);
    v2[1] = sub_100005600(&qword_100497D08);
    v2[2] = sub_10021C700();
    v2[3] = sub_10002FFB8(&qword_100497D48, &qword_100497D08, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    sub_100006924(&qword_100497D50, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100497CF0);
  }
  return result;
}

unint64_t sub_10021C700()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100497D10;
  if (!qword_100497D10)
  {
    v1 = sub_100005600(&qword_100497D00);
    v2[0] = sub_100005600(&qword_100497D18);
    v2[1] = sub_10021C7AC();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
    sub_10002FFB8(&qword_100497D38, &qword_100497D40, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100497D10);
  }
  return result;
}

unint64_t sub_10021C7AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100497D20;
  if (!qword_100497D20)
  {
    v1 = sub_100005600(&qword_100497D18);
    sub_10002FFB8(&qword_100497D28, &qword_100497D30, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100497D20);
  }
  return result;
}

uint64_t sub_10021C830()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = *v0;
  v1 = v0[1];
  v3 = swift_allocObject(&unk_1004584A8, 32, 7);
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  swift_retain(v1);
  v4 = sub_100005574(&qword_100497CE0);
  v5 = sub_10021C58C();
  return Button.init(action:label:)(sub_10000AD24, v3, sub_10021C0DC, 0, v4, v5);
}

uint64_t _UIHostingView.init(content:)(uint64_t a1)
{
  void (*v1)(void);
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v1 = (void (*)(void))__chkstk_darwin(a1);
  v3 = (char *)&v5 - v2;
  v1();
  return dispatch thunk of _UIHostingView.__allocating_init(rootView:)(v3);
}

uint64_t sub_10021C92C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ListChevron.body>>, 1);
}

ValueMetadata *type metadata accessor for ListChevron()
{
  return &type metadata for ListChevron;
}

void *sub_10021C94C()
{
  return &protocol witness table for Text;
}

uint64_t sub_10021C958(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = type metadata accessor for PlayableForegroundStyle(255, a1[1], a1[3], a4);
  v6 = type metadata accessor for ModifiedContent(255, v4, v5);
  swift_getWitnessTable(&unk_100394300, v5);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
}

uint64_t sub_10021C9D0()
{
  return sub_10002FFB8(&qword_100497D68, qword_100497D70, (uint64_t)&protocol conformance descriptor for Button<A>);
}

uint64_t sub_10021C9FC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1003942D8;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t sub_10021CA70(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_21;
  v9 = v7 + 1;
  v10 = 8 * (v7 + 1);
  if ((v7 + 1) > 3)
    goto LABEL_7;
  v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    v11 = *(_DWORD *)(a1 + v9);
    if (v11)
      goto LABEL_14;
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2)
        goto LABEL_21;
LABEL_7:
      v11 = *(unsigned __int8 *)(a1 + v9);
      if (!*(_BYTE *)(a1 + v9))
        goto LABEL_21;
LABEL_14:
      v13 = (v11 - 1) << v10;
      if (v9 > 3)
        v13 = 0;
      if ((_DWORD)v7 == -1)
        return v6 + v13 + 1;
      if (v9 > 3)
        LODWORD(v9) = 4;
      return ((uint64_t (*)(void))((char *)&loc_10021CB30 + 4 * byte_100394240[(v9 - 1)]))();
    }
    v11 = *(unsigned __int16 *)(a1 + v9);
    if (*(_WORD *)(a1 + v9))
      goto LABEL_14;
  }
LABEL_21:
  if (v5 >= 0xFE)
    return (*(uint64_t (**)(void))(v4 + 48))();
  v15 = *(unsigned __int8 *)(v7 + a1);
  if (v15 < 2)
    return 0;
  return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
}

void sub_10021CBA4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  size_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 1;
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = &dword_100000004;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v7 != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t sub_10021CD7C(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_1003DF72C, 1);
}

uint64_t sub_10021CDB0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10021CDD8(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_10021CE00()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_10021CE20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for Image.Scale(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.imageScale.setter(v4);
}

uint64_t sub_10021CEA0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tint.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10021CEC8(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tint.setter(v1);
}

uint64_t sub_10021CEF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005574(&qword_100497CF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10021CF38(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a1;
  v5 = type metadata accessor for PlayableForegroundStyle(255, *a1, a1[1], a4);
  WitnessTable = swift_getWitnessTable(&unk_100394300, v5);
  v7 = type metadata accessor for _ViewModifier_Content(255, v5, WitnessTable);
  v8 = sub_100005600(&qword_100497DF8);
  v9 = type metadata accessor for ModifiedContent(255, v7, v8);
  v10 = type metadata accessor for _ForegroundStyleModifier(255, v4);
  v11 = type metadata accessor for ModifiedContent(255, v7, v10);
  v12 = type metadata accessor for _ConditionalContent(255, v9, v11);
  swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v7);
  sub_10002FFB8(&qword_100497E00, &qword_100497DF8, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v9);
  swift_getWitnessTable(&protocol conformance descriptor for _ForegroundStyleModifier<A>, v10);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v11);
  return swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v12);
}

uint64_t sub_10021D098(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v3;
  if (!(_DWORD)result || v3 < 0 || (v3 & 0x4000000000000000) != 0)
  {
    result = sub_1001B7088(v3);
    v3 = result;
    *v1 = result;
  }
  v5 = v3 & 0xFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = v5 + 8 * a1;
    v9 = *(_QWORD *)(v8 + 32);
    v10 = memmove((void *)(v8 + 32), (const void *)(v8 + 40), 8 * (v6 - 1 - a1));
    *(_QWORD *)(v5 + 16) = v7;
    specialized Array._endMutation()(v10);
    return v9;
  }
  return result;
}

uint64_t sub_10021D12C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v5 = (_QWORD *)*v2;
  result = swift_isUniquelyReferenced_nonNull_native(*v2);
  if ((result & 1) == 0)
  {
    result = sub_100223AC4(v5);
    v5 = (_QWORD *)result;
  }
  v7 = v5[2];
  if (v7 <= a1)
  {
    __break(1u);
  }
  else
  {
    v8 = v7 - 1;
    v9 = _s9_ObserverC18HandlerAssociationVMa(0);
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(_QWORD *)(v10 + 72);
    v12 = (unint64_t)v5
        + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
        + v11 * a1;
    result = sub_100222D58(v12, a2);
    if (v11 > 0 || v12 >= v12 + v11 + v11 * (v8 - a1))
    {
      result = swift_arrayInitWithTakeFrontToBack(v12, v12 + v11, v8 - a1, v9);
    }
    else if (v11)
    {
      result = swift_arrayInitWithTakeBackToFront(v12);
    }
    v5[2] = v8;
    *v2 = v5;
  }
  return result;
}

UIBarButtonItem __swiftcall UIBarButtonItem.init(image:style:)(UIImage_optional image, UIBarButtonItemStyle style)
{
  Class isa;
  id v3;

  isa = image.value.super.isa;
  v3 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), "initWithImage:style:target:action:", image.value.super.isa, *(_QWORD *)&image.is_nil, 0, 0);

  return (UIBarButtonItem)v3;
}

void *UIBarButtonItem.spacerBarButtonTag.unsafeMutableAddressor()
{
  return &static UIBarButtonItem.spacerBarButtonTag;
}

uint64_t static UIBarButtonItem.spacerBarButtonTag.getter()
{
  return 9999;
}

id static UIBarButtonItem.spacerBarButtonItem()()
{
  id v0;
  id v1;

  v0 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 1.0);
  v1 = objc_msgSend(objc_allocWithZone((Class)UIBarButtonItem), "initWithCustomView:", v0);
  objc_msgSend(v1, "setTag:", 9999);

  return v1;
}

void UIWindowScene.mainWindow.getter()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  __objc2_prot *v11;

  v1 = objc_msgSend(v0, "delegate");
  if (v1)
  {
    v2 = v1;
    v11 = &OBJC_PROTOCOL___UIWindowSceneDelegate;
    v3 = (void *)swift_dynamicCastObjCProtocolConditional(v1, 1, &v11);
    if (v3)
    {
      v4 = v3;
      if ((objc_msgSend(v3, "respondsToSelector:", "window") & 1) != 0)
      {
        objc_msgSend(v4, "window");
        swift_unknownObjectRelease(v2);
        return;
      }
    }
    swift_unknownObjectRelease(v2);
  }
  v5 = objc_msgSend(v0, "windows");
  v6 = sub_1000087DC(0, &qword_100497E20, UIWindow_ptr);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0)
      v9 = v7;
    else
      v9 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease();
    if (!v10)
      goto LABEL_11;
  }
  else if (!*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return;
  }
  if ((v7 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)(0, v7);
    goto LABEL_11;
  }
  if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v8 = *(id *)(v7 + 32);
    goto LABEL_11;
  }
  __break(1u);
}

id UIWindowScene.rootViewController.getter()
{
  void *v0;
  void *v1;
  id v2;

  UIWindowScene.mainWindow.getter();
  v1 = v0;
  v2 = objc_msgSend(v0, "rootViewController");

  return v2;
}

BOOL UISceneActivationState.isForeground.getter(unint64_t a1)
{
  return a1 < 2;
}

uint64_t static UICollectionReusableView.reuseIdentifier.getter()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_100005574(&qword_100497E88);
  return String.init<A>(describing:)(&v2, v0);
}

void UICollectionView.register<A>(_:reuseIdentifier:)()
{
  void *v0;
  uint64_t ObjCClassFromMetadata;
  id v2;

  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "registerClass:forCellWithReuseIdentifier:", ObjCClassFromMetadata, v2);

}

void UICollectionView.register<A>(_:ofKind:reuseIdentifier:)()
{
  void *v0;
  uint64_t ObjCClassFromMetadata;
  NSString v2;
  id v3;

  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "registerClass:forSupplementaryViewOfKind:withReuseIdentifier:", ObjCClassFromMetadata, v2, v3);

}

uint64_t UICollectionView.dequeue<A>(_:forItemAt:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  NSString v14;
  Class isa;
  id v16;
  uint64_t result;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  Swift::String v21;
  unint64_t v22;
  unint64_t v23;

  v6 = v5;
  v10 = type metadata accessor for IndexPath(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = String._bridgeToObjectiveC()();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v16 = objc_msgSend(v6, "dequeueReusableCellWithReuseIdentifier:forIndexPath:", v14, isa);

  result = swift_dynamicCastUnknownClass(v16, a5);
  if (!result)
  {

    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
    v22 = 0;
    v23 = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    v22 = 0xD00000000000001ELL;
    v23 = 0x80000001003B7390;
    v18._countAndFlagsBits = _typeName(_:qualified:)(a1, 0);
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 544497952;
    v19._object = (void *)0xE400000000000000;
    String.append(_:)(v19);
    v20 = sub_100006924(&qword_100497E90, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
    v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v10, v20);
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v22, v23, "MusicUtilities/UIKit+Utilities.swift", 36, 2, 83, 0);
    __break(1u);
  }
  return result;
}

uint64_t UICollectionView.dequeue<A>(_:ofKind:for:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  void *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  NSString v15;
  NSString v16;
  Class isa;
  id v18;
  uint64_t result;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v8 = v7;
  v26 = a1;
  v11 = type metadata accessor for IndexPath(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = String._bridgeToObjectiveC()();
  v16 = String._bridgeToObjectiveC()();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v18 = objc_msgSend(v8, "dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:", v15, v16, isa);

  result = swift_dynamicCastUnknownClass(v18, a7);
  if (!result)
  {

    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a4, v11);
    v27 = 0;
    v28 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v20._object = (void *)0x80000001003B73B0;
    v20._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v20);
    v21._countAndFlagsBits = _typeName(_:qualified:)(v26, 0);
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 544497952;
    v22._object = (void *)0xE400000000000000;
    String.append(_:)(v22);
    v23 = sub_100006924(&qword_100497E90, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
    v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v11, v23);
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v27, v28, "MusicUtilities/UIKit+Utilities.swift", 36, 2, 89, 0);
    __break(1u);
  }
  return result;
}

uint64_t UICollectionView.globalIndex(for:)()
{
  void *v0;
  id v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  v1 = objc_msgSend(v0, "numberOfSections");
  result = IndexPath.section.getter();
  if (__OFADD__(result, 1))
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    return result;
  }
  if (result + 1 >= (uint64_t)v1)
    v3 = (uint64_t)v1;
  else
    v3 = result + 1;
  if (v3 < 0)
    goto LABEL_20;
  if (!v3)
    return 0;
  v4 = 0;
  v5 = 0;
  while (1)
  {
    if (v3 == v5)
    {
      __break(1u);
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    v6 = (uint64_t)objc_msgSend(v0, "numberOfItemsInSection:", v5);
    result = IndexPath.section.getter();
    if (v5 == result)
      break;
    v7 = __OFADD__(v4, v6);
    v4 += v6;
    if (v7)
      goto LABEL_18;
    if (v3 == ++v5)
      return 0;
  }
  if (IndexPath.item.getter() >= v6)
    return 0;
  v8 = IndexPath.item.getter();
  v7 = __OFADD__(v4, v8);
  result = v4 + v8;
  if (v7)
    goto LABEL_21;
  return result;
}

uint64_t UICollectionView.indexPath(forGlobalIndex:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = v2;
  v6 = sub_100005574(&qword_100497E98);
  __chkstk_darwin(v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for IndexPath(0);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  v10(a2, 1, 1, v9);
  result = (uint64_t)objc_msgSend(v3, "numberOfSections");
  if (result < 0)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
  else
  {
    v12 = result;
    if (result)
    {
      v13 = 0;
      v14 = 0;
      while (1)
      {
        if (v12 == v14)
        {
          __break(1u);
LABEL_13:
          __break(1u);
          goto LABEL_14;
        }
        result = (uint64_t)objc_msgSend(v3, "numberOfItemsInSection:", v14);
        if (__OFADD__(v13, result))
          goto LABEL_13;
        if (v13 + result > a1)
          break;
        ++v14;
        v13 += result;
        if (v12 == v14)
          return result;
      }
      result = a1 - v13;
      if (__OFSUB__(a1, v13))
        goto LABEL_15;
      IndexPath.init(item:section:)(result, v14);
      sub_10022203C(a2);
      v10((uint64_t)v8, 0, 1, v9);
      return sub_10022207C((uint64_t)v8, a2);
    }
  }
  return result;
}

unint64_t UICollectionView.totalItemCount.getter()
{
  void *v0;
  unint64_t result;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;

  result = (unint64_t)objc_msgSend(v0, "numberOfSections");
  if ((result & 0x8000000000000000) == 0)
  {
    v2 = 0;
    v3 = result;
    if (!result)
      return v2;
    v4 = 0;
    while (1)
    {
      result = (unint64_t)objc_msgSend(v0, "numberOfItemsInSection:", v4);
      v5 = __OFADD__(v2, result);
      v2 += result;
      if (v5)
        break;
      if (v3 == ++v4)
        return v2;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

char *UICollectionView.isLast(indexPath:)(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *result;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v2 = v1;
  v4 = type metadata accessor for IndexPath(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = IndexPath.section.getter(v6);
  result = (char *)objc_msgSend(v2, "numberOfSections");
  v11 = result - 1;
  if (__OFSUB__(result, 1))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  if ((char *)v9 == v11)
  {
    v13 = IndexPath.item.getter(v12);
    v14 = (char *)objc_msgSend(v2, "numberOfItemsInSection:", v9);
    result = (char *)(*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    if (!__OFSUB__(v14, 1))
      return (char *)(v13 == (_QWORD)(v14 - 1));
    goto LABEL_8;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return 0;
}

uint64_t UICollectionView.visibleSupplementaryElements(of:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  NSString v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;

  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v2, "indexPathsForVisibleSupplementaryElementsOfKind:", v5);

  v7 = type metadata accessor for IndexPath(0);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  v9 = (_QWORD *)swift_allocObject(&unk_100458570, 40, 7);
  v9[2] = v2;
  v9[3] = a1;
  v9[4] = a2;
  v10 = v2;
  swift_bridgeObjectRetain();
  return v8;
}

void sub_10021DE54(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  Class isa;
  id v10;

  v6 = *(int *)(sub_100005574((uint64_t *)&unk_100497F30) + 48);
  v7 = type metadata accessor for IndexPath(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a3, a1, v7);
  v8 = String._bridgeToObjectiveC()();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v10 = objc_msgSend(a2, "supplementaryViewForElementKind:atIndexPath:", v8, isa);

  *(_QWORD *)(a3 + v6) = v10;
}

id UICollectionView.clearSelection(using:animated:)(void *a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id result;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void (*v28)(char *, unint64_t, uint64_t);
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  Class isa;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  id v36;
  void **aBlock;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  void *v40;
  void *v41;
  uint64_t v42;

  v3 = v2;
  v35 = a2;
  v5 = type metadata accessor for IndexPath(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005574(&qword_100497E98);
  __chkstk_darwin(v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = v3;
  result = objc_msgSend(v3, "indexPathsForSelectedItems");
  if (result)
  {
    v13 = result;
    v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(result, v5);

    if (a1)
    {
      v15 = swift_allocObject(&unk_100458598, 33, 7);
      v16 = v36;
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = v16;
      *(_BYTE *)(v15 + 32) = v35 & 1;
      v41 = sub_100222104;
      v42 = v15;
      aBlock = _NSConcreteStackBlock;
      v38 = 1107296256;
      v39 = sub_1001A3290;
      v40 = &unk_1004585B0;
      v17 = _Block_copy(&aBlock);
      v18 = v42;
      swift_unknownObjectRetain(a1);
      swift_bridgeObjectRetain();
      v19 = v16;
      swift_release(v18);
      v20 = swift_allocObject(&unk_1004585E8, 32, 7);
      *(_QWORD *)(v20 + 16) = v14;
      *(_QWORD *)(v20 + 24) = v19;
      v41 = sub_100222168;
      v42 = v20;
      aBlock = _NSConcreteStackBlock;
      v38 = 1107296256;
      v39 = sub_1001A3290;
      v40 = &unk_100458600;
      v21 = _Block_copy(&aBlock);
      v22 = v42;
      v23 = v19;
      objc_msgSend(a1, "animateAlongsideTransition:completion:", v17, v21, swift_release(v22).n128_f64[0]);
      _Block_release(v21);
      _Block_release(v17);
      return (id)swift_unknownObjectRelease(a1);
    }
    else
    {
      v24 = v14;
      v25 = *(_QWORD *)(v14 + 16);
      if (v25)
      {
        v26 = v24 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
        v27 = *(_QWORD *)(v6 + 72);
        v28 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
        v34 = v24;
        swift_bridgeObjectRetain();
        while (1)
        {
          v28(v11, v26, v5);
          v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
          v29(v11, 0, 1, v5);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
            break;
          (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
          isa = IndexPath._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v36, "deselectItemAtIndexPath:animated:", isa, v35 & 1);

          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
          v26 += v27;
          if (!--v25)
          {
            v31 = v34;
            goto LABEL_10;
          }
        }
        v32 = v34;
      }
      else
      {
        v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
        v31 = swift_bridgeObjectRetain();
LABEL_10:
        v29(v11, 1, 1, v5);
        v32 = v31;
      }
      return (id)swift_bridgeObjectRelease_n(v32, 2);
    }
  }
  return result;
}

uint64_t sub_10021E228(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  Class isa;
  _QWORD v20[2];
  uint64_t v21;
  id v22;

  v22 = a3;
  v6 = type metadata accessor for IndexPath(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005574(&qword_100497E98);
  __chkstk_darwin(v10);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a2 + 16);
  v20[1] = a2;
  if (v13)
  {
    v14 = a2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v21 = *(_QWORD *)(v7 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    swift_bridgeObjectRetain();
    v16 = a4 & 1;
    while (1)
    {
      v15(v12, v14, v6);
      v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
      v17(v12, 0, 1, v6);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
      isa = IndexPath._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v22, "deselectItemAtIndexPath:animated:", isa, v16);

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      v14 += v21;
      if (!--v13)
        goto LABEL_7;
    }
  }
  else
  {
    v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    swift_bridgeObjectRetain();
LABEL_7:
    v17(v12, 1, 1, v6);
  }
  return swift_bridgeObjectRelease();
}

id sub_10021E3E0(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  Class isa;
  uint64_t v19;
  id v20;

  v20 = a3;
  v5 = type metadata accessor for IndexPath(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005574(&qword_100497E98);
  __chkstk_darwin(v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend(a1, "isCancelled");
  if ((_DWORD)result)
  {
    v13 = *(_QWORD *)(a2 + 16);
    v19 = a2;
    if (v13)
    {
      v14 = a2 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
      v15 = *(_QWORD *)(v6 + 72);
      v16 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
      swift_bridgeObjectRetain();
      while (1)
      {
        v16(v11, v14, v5);
        v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
        v17(v11, 0, 1, v5);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
          break;
        (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
        isa = IndexPath._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v20, "selectItemAtIndexPath:animated:scrollPosition:", isa, 0, 0, v19);

        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        v14 += v15;
        if (!--v13)
          goto LABEL_8;
      }
    }
    else
    {
      v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
      swift_bridgeObjectRetain();
LABEL_8:
      v17(v11, 1, 1, v5);
    }
    return (id)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t UICollectionView.isDraggingCell(at:)()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Class isa;
  id v14;
  id v15;
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v1 = v0;
  v2 = type metadata accessor for UICellConfigurationState.DragState(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v19 - v7;
  v9 = type metadata accessor for UICellConfigurationState(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v14 = objc_msgSend(v1, "cellForItemAtIndexPath:", isa);

  if (v14)
  {
    v15 = objc_msgSend(v14, "_bridgedConfigurationState");
    static UICellConfigurationState._unconditionallyBridgeFromObjectiveC(_:)();

    UICellConfigurationState.cellDragState.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for UICellConfigurationState.DragState.dragging(_:), v2);
    v16 = static UICellConfigurationState.DragState.== infix(_:_:)(v8, v6);

    v17 = *(void (**)(char *, uint64_t))(v3 + 8);
    v17(v6, v2);
    v17(v8, v2);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

void *UICollectionView.elementKindGlobalHeader.unsafeMutableAddressor()
{
  return &static UICollectionView.elementKindGlobalHeader;
}

unint64_t static UICollectionView.elementKindGlobalHeader.getter()
{
  return 0xD000000000000023;
}

id UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), "initWithRed:green:blue:alpha:", (double)a1 / 255.0, (double)a2 / 255.0, (double)a3 / 255.0, a4);
}

id UIColor.interpolate(to:ratio:)(void *a1, double a2)
{
  void *v2;
  double v4;
  double v5;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  v4 = fmin(a2, 1.0);
  if (a2 < 0.0)
    v5 = 0.0;
  else
    v5 = v4;
  v13 = 0.0;
  v14 = 0.0;
  v11 = 0.0;
  v12 = 0.0;
  v9 = 0.0;
  v10 = 0.0;
  v7 = 0.0;
  v8 = 0.0;
  objc_msgSend(v2, "getRed:green:blue:alpha:", &v14, &v12, &v10, &v8);
  objc_msgSend(a1, "getRed:green:blue:alpha:", &v13, &v11, &v9, &v7);
  return objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", (1.0 - v5) * v14 + v5 * v13, (1.0 - v5) * v12 + v5 * v11, (1.0 - v5) * v10 + v5 * v9, (1.0 - v5) * v8 + v5 * v7);
}

double UIColor.hsba.getter()
{
  return sub_10021E9B0((SEL *)&selRef_getHue_saturation_brightness_alpha_);
}

double UIColor.rgba.getter()
{
  return sub_10021E9B0((SEL *)&selRef_getRed_green_blue_alpha_);
}

double sub_10021E9B0(SEL *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v6 = 0.0;
  v4 = 0;
  v5 = 0;
  v3 = 0;
  objc_msgSend(v1, *a1, &v6, &v5, &v4, &v3);
  return v6;
}

UIImage_optional __swiftcall UIImage.init(systemName:font:scale:)(Swift::String systemName, UIFont font, UIImageSymbolScale scale)
{
  void *object;
  void *ObjCClassFromMetadata;
  NSString v7;
  id v8;
  objc_class *v9;
  Swift::Bool v10;
  objc_class *v11;
  UIImage_optional result;

  object = systemName._object;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  v8 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithFont:scale:", font.super.isa, scale);
  v9 = (objc_class *)objc_msgSend(ObjCClassFromMetadata, "systemImageNamed:withConfiguration:", v7, v8);

  v11 = v9;
  result.value.super.isa = v11;
  result.is_nil = v10;
  return result;
}

id UIImage.init(systemName:pointSize:weight:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *ObjCClassFromMetadata;
  NSString v8;
  id v9;
  id v10;

  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v9 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:weight:", a4, a1);
  v10 = objc_msgSend(ObjCClassFromMetadata, "systemImageNamed:withConfiguration:", v8, v9);

  return v10;
}

UIImage_optional __swiftcall UIImage.byCroppingToUniformCenter()()
{
  objc_class *v0;
  objc_class *v1;
  objc_class *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  Swift::Bool v7;
  double v8;
  double v9;
  double v10;
  double v11;
  objc_class *v12;
  double v13;
  double v14;
  UIImage_optional result;

  v1 = v0;
  v2 = v0;
  -[objc_class size](v2, "size");
  v4 = v3;
  v6 = v5;
  v13 = v5;
  v14 = v3;
  if ((static ApproximatelyEquatable.!=~ infix(_:_:)(&v14, &v13) & 1) != 0)
  {
    if (v6 >= v4)
    {
      v9 = round((v6 - v4) * 0.5);
      v8 = 0.0;
      v10 = v4;
      v11 = v4;
    }
    else
    {
      v8 = round((v4 - v6) * 0.5);
      v9 = 0.0;
      v10 = v6;
      v11 = v6;
    }
    v1 = (objc_class *)UIImage.byCropping(to:)(v8, v9, v10, v11);

  }
  v12 = v1;
  result.value.super.isa = v12;
  result.is_nil = v7;
  return result;
}

id UIImage.byCropping(to:)(double a1, double a2, double a3, double a4)
{
  void *v4;
  void *v5;
  CGImage *v10;
  CGImage *v11;
  double v12;
  double v13;
  char v14;
  double v15;
  double v16;
  double v17;
  double v18;
  CGImageRef v19;
  CGImageRef v20;
  id v21;
  _QWORD v23[2];
  _QWORD v24[2];

  v5 = v4;
  v10 = (CGImage *)objc_msgSend(v4, "CGImage");
  if (!v10)
    return 0;
  v11 = v10;
  _s3__C6CGSizeVMa_0(0);
  *(double *)v24 = a3;
  *(double *)&v24[1] = a4;
  v23[0] = 0;
  v23[1] = 0;
  if ((static ApproximatelyEquatable.!=~ infix(_:_:)(v24, v23) & 1) == 0)
    goto LABEL_7;
  objc_msgSend(v4, "scale");
  v13 = v12;
  *(double *)v24 = v12;
  v23[0] = 0x3FF0000000000000;
  v14 = static ApproximatelyEquatable.!=~ infix(_:_:)(v24, v23);
  v15 = v13 * a1;
  v16 = v13 * a2;
  v17 = v13 * a3;
  v18 = v13 * a4;
  if ((v14 & 1) == 0)
  {
    v18 = a4;
    v17 = a3;
    v16 = a2;
    v15 = a1;
  }
  v19 = CGImageCreateWithImageInRect(v11, *(CGRect *)&v15);
  if (!v19)
  {
LABEL_7:

    return 0;
  }
  v20 = v19;
  v21 = objc_msgSend(objc_allocWithZone((Class)UIImage), "initWithCGImage:scale:orientation:", v19, objc_msgSend(v5, "imageOrientation"), v13);

  return v21;
}

UIViewController_optional __swiftcall UINavigationController.removeViewController(_:animated:)(UIViewController _, Swift::Bool animated)
{
  void *v2;
  void *v3;
  id v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  Class isa;
  Swift::Bool v13;
  objc_class *v14;
  UIViewController_optional result;

  v3 = v2;
  v6 = objc_msgSend(v2, "viewControllers");
  v7 = sub_1000087DC(0, (unint64_t *)&qword_100497EA0, UIViewController_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  swift_bridgeObjectRetain();
  v9 = sub_1002098A0((uint64_t)_.super.super.isa, v8);
  LOBYTE(v6) = v10;
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v11 = 0;
  }
  else
  {
    v11 = sub_10021D098(v9);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v3, "setViewControllers:animated:", isa, animated);

  }
  v14 = (objc_class *)v11;
  result.value.super.super.isa = v14;
  result.is_nil = v13;
  return result;
}

double UIScrollView.normalizedContentOffset.getter()
{
  void *v0;
  double v1;
  double v2;
  double v3;

  objc_msgSend(v0, "adjustedContentInset");
  v2 = v1;
  objc_msgSend(v0, "contentOffset");
  return v2 + v3;
}

uint64_t UIScrollView.isScrolling.getter()
{
  void *v0;

  if ((objc_msgSend(v0, "isDragging") & 1) != 0
    || (objc_msgSend(v0, "isDecelerating") & 1) != 0
    || (objc_msgSend(v0, "_isVerticalBouncing") & 1) != 0)
  {
    return 1;
  }
  else
  {
    return (uint64_t)objc_msgSend(v0, "_isHorizontalBouncing");
  }
}

uint64_t static UIStackView.SpacerView.layerClass.getter()
{
  return sub_1000087DC(0, &qword_100497EA8, CATransformLayer_ptr);
}

id UIStackView.SpacerView.init(frame:)(double a1, double a2, double a3, double a4)
{
  void *v4;
  objc_super v10;

  v10.receiver = v4;
  v10.super_class = (Class)type metadata accessor for UIStackView.SpacerView();
  return objc_msgSendSuper2(&v10, "initWithFrame:", a1, a2, a3, a4);
}

id UIStackView.SpacerView.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  objc_super v5;

  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for UIStackView.SpacerView();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

id UIStackView.SpacerView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UIStackView.SpacerView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id UIView.forAutolayout.getter()
{
  void *v0;
  id v2;

  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  return v2;
}

double UIView.Shadow.opacity.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void UIView.Shadow.opacity.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

double UIView.Shadow.offset.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void UIView.Shadow.offset.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 24) = a1;
  *(double *)(v2 + 32) = a2;
}

uint64_t UIView.Shadow.init(color:opacity:radius:offset:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  *(_QWORD *)a2 = result;
  *(double *)(a2 + 8) = a3;
  *(double *)(a2 + 16) = a4;
  *(double *)(a2 + 24) = a5;
  *(double *)(a2 + 32) = a6;
  return result;
}

void UIView.Shadow.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  id v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;

  v3 = *(id *)v1;
  NSObject.hash(into:)(a1);
  sub_100222190((id *)v1);
  if ((*(_QWORD *)(v1 + 8) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *(_QWORD *)(v1 + 8);
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  if ((*(_QWORD *)(v1 + 16) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = *(_QWORD *)(v1 + 16);
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  v6 = *(_QWORD *)(v1 + 32);
  if ((*(_QWORD *)(v1 + 24) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = *(_QWORD *)(v1 + 24);
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v8 = v6;
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
}

BOOL static UIView.Shadow.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_1000087DC(0, (unint64_t *)&unk_100497EB0, NSObject_ptr);
  return (static NSObject.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2) & 1) != 0
      && *(double *)(a1 + 8) == *(double *)(a2 + 8)
      && *(double *)(a1 + 16) == *(double *)(a2 + 16)
      && *(double *)(a1 + 24) == *(double *)(a2 + 24)
      && *(double *)(a1 + 32) == *(double *)(a2 + 32);
}

Swift::Int UIView.Shadow.hashValue.getter()
{
  uint64_t v0;
  id v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8);
  v1 = *(id *)v0;
  NSObject.hash(into:)(v8);
  sub_100222190((id *)v0);
  if ((*(_QWORD *)(v0 + 8) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *(_QWORD *)(v0 + 8);
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  if ((*(_QWORD *)(v0 + 16) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = *(_QWORD *)(v0 + 16);
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  v4 = *(_QWORD *)(v0 + 32);
  if ((*(_QWORD *)(v0 + 24) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = *(_QWORD *)(v0 + 24);
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v6 = v4;
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

Swift::Int sub_10021F3F0()
{
  return UIView.Shadow.hashValue.getter();
}

void sub_10021F428(uint64_t a1)
{
  UIView.Shadow.hash(into:)(a1);
}

Swift::Int sub_10021F460()
{
  uint64_t v0;
  void *v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  double v4;
  double v5;
  id v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  _QWORD v10[9];

  v1 = *(void **)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(double *)(v0 + 24);
  v5 = *(double *)(v0 + 32);
  Hasher.init(_seed:)(v10);
  v6 = v1;
  NSObject.hash(into:)(v10);

  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = v2;
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v8 = v3;
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
  sub_1002221B8(v4, v5);
  return Hasher._finalize()();
}

BOOL sub_10021F4F0(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  char v12;
  _BOOL8 result;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v6 = a1[3];
  v5 = a1[4];
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v11 = a2[3];
  v10 = a2[4];
  sub_1000087DC(0, (unint64_t *)&unk_100497EB0, NSObject_ptr);
  v12 = static NSObject.== infix(_:_:)(*(_QWORD *)&v2, *(_QWORD *)&v7);
  result = 0;
  if ((v12 & 1) != 0 && v3 == v8 && v4 == v9)
    return v5 == v10 && v6 == v11;
  return result;
}

id UIView.shadowPathIsBounds.getter()
{
  void *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(v0, "layer");
  v2 = objc_msgSend(v1, "shadowPathIsBounds");

  return v2;
}

void UIView.shadowPathIsBounds.setter(char a1)
{
  void *v1;
  id v3;

  v3 = objc_msgSend(v1, "layer");
  objc_msgSend(v3, "setShadowPathIsBounds:", a1 & 1);

}

void (*UIView.shadowPathIsBounds.modify(uint64_t a1))(uint64_t a1)
{
  void *v1;
  id v3;
  unsigned __int8 v4;

  *(_QWORD *)a1 = v1;
  v3 = objc_msgSend(v1, "layer");
  v4 = objc_msgSend(v3, "shadowPathIsBounds");

  *(_BYTE *)(a1 + 8) = v4;
  return sub_10021F69C;
}

void sub_10021F69C(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(unsigned __int8 *)(a1 + 8);
  v2 = objc_msgSend(*(id *)a1, "layer");
  objc_msgSend(v2, "setShadowPathIsBounds:", v1);

}

void UIView.shadow.getter(uint64_t a1@<X8>)
{
  void *v1;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  float v8;
  float v9;
  double v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  v4 = objc_msgSend(v1, "layer");
  v5 = objc_msgSend(v4, "shadowColor");

  if (v5)
  {
    v6 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithCGColor:", v5);

    v3 = v6;
  }
  v7 = objc_msgSend(v1, "layer");
  objc_msgSend(v7, "shadowOpacity");
  v9 = v8;

  v10 = v9;
  v11 = objc_msgSend(v1, "layer");
  objc_msgSend(v11, "shadowRadius");
  v13 = v12;

  v14 = objc_msgSend(v1, "layer");
  objc_msgSend(v14, "shadowOffset");
  v16 = v15;
  v18 = v17;

  *(_QWORD *)a1 = v3;
  *(double *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v18;
}

void UIView.shadow.setter(uint64_t a1)
{
  void *v1;
  id v3;
  id v4;
  id v5;
  id v6;
  double v7;
  id v8;

  v3 = objc_msgSend(v1, "layer");
  v4 = objc_msgSend(*(id *)a1, "CGColor");
  objc_msgSend(v3, "setShadowColor:", v4);

  v5 = objc_msgSend(v1, "layer");
  objc_msgSend(v5, "setShadowOffset:", *(double *)(a1 + 24), *(double *)(a1 + 32));

  v6 = objc_msgSend(v1, "layer");
  objc_msgSend(v6, "setShadowRadius:", *(double *)(a1 + 16));

  v8 = objc_msgSend(v1, "layer");
  v7 = *(double *)(a1 + 8);
  *(float *)&v7 = v7;
  objc_msgSend(v8, "setShadowOpacity:", v7);
  sub_100222190((id *)a1);

}

void (*UIView.shadow.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x80uLL);
  *a1 = v3;
  v3[15] = v1;
  UIView.shadow.getter((uint64_t)(v3 + 10));
  return sub_10021F9B4;
}

void sub_10021F9B4(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  id v5;

  v2 = *a1;
  v3 = *a1 + 80;
  v4 = *(_OWORD *)(*a1 + 96);
  if ((a2 & 1) != 0)
  {
    *(_OWORD *)v2 = *(_OWORD *)v3;
    *(_OWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 32) = *(_QWORD *)(v3 + 32);
    v5 = *(id *)v2;
    UIView.shadow.setter(v2);

  }
  else
  {
    *(_OWORD *)(v2 + 40) = *(_OWORD *)v3;
    *(_OWORD *)(v2 + 56) = v4;
    *(_QWORD *)(v2 + 72) = *(_QWORD *)(v3 + 32);
    UIView.shadow.setter(v2 + 40);
  }
  free((void *)v2);
}

uint64_t UIView.Border.init(view:)(void *a1)
{
  uint64_t v2;

  v2 = sub_1002223F0(a1);

  return v2;
}

uint64_t static UIView.Border.__derived_struct_equals(_:_:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  if ((a2 & 1) != 0)
  {
    if ((a5 & 1) == 0)
      return 0;
  }
  else if ((a5 & 1) != 0)
  {
    return 0;
  }
  if (*(double *)&a1 == *(double *)&a4)
  {
    sub_1000087DC(0, (unint64_t *)&unk_100497EB0, NSObject_ptr);
    return static NSObject.== infix(_:_:)(a3, a6) & 1;
  }
  return 0;
}

uint64_t sub_10021FAE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a2 + 16);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) == 0)
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 8) & 1) != 0)
  {
    return 0;
  }
  if (*(double *)a1 == *(double *)a2)
  {
    sub_1000087DC(0, (unint64_t *)&unk_100497EB0, NSObject_ptr);
    return static NSObject.== infix(_:_:)(v2, v3) & 1;
  }
  return 0;
}

uint64_t UIView.border.getter()
{
  void *v0;
  id v1;
  uint64_t v2;

  v1 = v0;
  v2 = sub_1002223F0(v1);

  return v2;
}

void UIView.border.setter(uint64_t a1, char a2, void *a3)
{
  void *v3;
  id v6;
  id v7;
  id v8;
  double v9;
  double v10;
  id v11;
  id v12;

  if (a3)
  {
    v6 = objc_msgSend(v3, "layer");
    v7 = v6;
    if ((a2 & 1) != 0)
    {
      objc_msgSend(v6, "setBorderWidth:", *(double *)&a1);
    }
    else
    {
      v8 = objc_msgSend(v3, "traitCollection");
      objc_msgSend(v8, "displayScale");
      v10 = v9;

      objc_msgSend(v7, "setBorderWidth:", *(double *)&a1 / fmax(v10, 1.0));
    }
  }
  else
  {
    v7 = objc_msgSend(v3, "layer");
    objc_msgSend(v7, "setBorderWidth:", 0.0);
  }

  v11 = objc_msgSend(v3, "layer");
  if (a3)
    v12 = objc_msgSend(a3, "CGColor");
  else
    v12 = 0;
  objc_msgSend(v11, "setBorderColor:", v12);

}

void (*UIView.border.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  a1[3] = (uint64_t)v1;
  v3 = v1;
  v4 = sub_1002223F0(v3);
  v6 = v5;
  v8 = v7;

  *a1 = v4;
  a1[1] = v6;
  a1[2] = v8;
  return sub_10021FD5C;
}

void sub_10021FD5C(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = *a1;
  v3 = a1[1];
  v4 = (void *)a1[2];
  if ((a2 & 1) != 0)
  {
    v5 = v4;
    UIView.border.setter(v2, v3, v4);

  }
  else
  {
    UIView.border.setter(*a1, v3, v4);
  }
}

double UIView.untransformedFrame.getter()
{
  void *v0;
  double v1;
  CGFloat v2;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  double v10;
  double Width;
  id v12;
  double v13;
  double v14;
  id v15;
  CGRect v17;
  CGRect v18;
  CGRect v19;
  CGRect v20;

  objc_msgSend(v0, "bounds");
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  objc_msgSend(v0, "center");
  v10 = v9;
  v17.origin.x = v2;
  v17.origin.y = v4;
  v17.size.width = v6;
  v17.size.height = v8;
  Width = CGRectGetWidth(v17);
  v12 = objc_msgSend(v0, "layer");
  objc_msgSend(v12, "anchorPoint");
  v14 = v13;

  v18.origin.x = v2;
  v18.origin.y = v4;
  v18.size.width = v6;
  v18.size.height = v8;
  CGRectGetHeight(v18);
  v15 = objc_msgSend(v0, "layer");
  objc_msgSend(v15, "anchorPoint");

  v19.origin.x = v2;
  v19.origin.y = v4;
  v19.size.width = v6;
  v19.size.height = v8;
  CGRectGetWidth(v19);
  v20.origin.x = v2;
  v20.origin.y = v4;
  v20.size.width = v6;
  v20.size.height = v8;
  CGRectGetHeight(v20);
  return v10 - Width * v14;
}

id UIView.untransformedFrame.setter(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  void *v4;
  double MinX;
  double Width;
  id v11;
  double v12;
  double v13;
  double v14;
  double MinY;
  double Height;
  id v17;
  double v18;
  double v19;
  CGRect v21;
  CGRect v22;
  CGRect v23;

  MinX = CGRectGetMinX(*(CGRect *)&a1);
  v21.origin.x = a1;
  v21.origin.y = a2;
  v21.size.width = a3;
  v21.size.height = a4;
  Width = CGRectGetWidth(v21);
  v11 = objc_msgSend(v4, "layer");
  objc_msgSend(v11, "anchorPoint");
  v13 = v12;

  v14 = MinX + Width * v13;
  v22.origin.x = a1;
  v22.origin.y = a2;
  v22.size.width = a3;
  v22.size.height = a4;
  MinY = CGRectGetMinY(v22);
  v23.origin.x = a1;
  v23.origin.y = a2;
  v23.size.width = a3;
  v23.size.height = a4;
  Height = CGRectGetHeight(v23);
  v17 = objc_msgSend(v4, "layer");
  objc_msgSend(v17, "anchorPoint");
  v19 = v18;

  objc_msgSend(v4, "setCenter:", v14, MinY + Height * v19);
  objc_msgSend(v4, "bounds");
  return objc_msgSend(v4, "setBounds:");
}

void (*UIView.untransformedFrame.modify(double **a1))(CGFloat **a1)
{
  uint64_t v1;
  double *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (double *)malloc(0x28uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 4) = v1;
  *v3 = UIView.untransformedFrame.getter();
  *((_QWORD *)v3 + 1) = v4;
  *((_QWORD *)v3 + 2) = v5;
  *((_QWORD *)v3 + 3) = v6;
  return sub_1002200AC;
}

void sub_1002200AC(CGFloat **a1)
{
  CGFloat *v1;

  v1 = *a1;
  UIView.untransformedFrame.setter(**a1, (*a1)[1], (*a1)[2], (*a1)[3]);
  free(v1);
}

float UIView.contentCompressionResistancePriority.getter()
{
  void *v0;
  id v1;
  float v2;
  float v3;

  v1 = v0;
  objc_msgSend(v1, "contentCompressionResistancePriorityForAxis:", 0);
  v3 = v2;
  objc_msgSend(v1, "contentCompressionResistancePriorityForAxis:", 1);

  return v3;
}

float UIView.CompressionResistancePriority.init(view:)(void *a1)
{
  float v2;
  float v3;

  objc_msgSend(a1, "contentCompressionResistancePriorityForAxis:", 0);
  v3 = v2;
  objc_msgSend(a1, "contentCompressionResistancePriorityForAxis:", 1);

  return v3;
}

id UIView.contentCompressionResistancePriority.setter(double a1, float a2)
{
  void *v2;
  double v4;

  objc_msgSend(v2, "setContentCompressionResistancePriority:forAxis:", 0);
  *(float *)&v4 = a2;
  return objc_msgSend(v2, "setContentCompressionResistancePriority:forAxis:", 1, v4);
}

id (*UIView.contentCompressionResistancePriority.modify(uint64_t a1))(uint64_t a1, double a2)
{
  void *v1;
  id v3;
  int v4;
  int v5;
  int v6;
  int v7;

  *(_QWORD *)a1 = v1;
  v3 = v1;
  objc_msgSend(v3, "contentCompressionResistancePriorityForAxis:", 0);
  v5 = v4;
  objc_msgSend(v3, "contentCompressionResistancePriorityForAxis:", 1);
  v7 = v6;

  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = v7;
  return sub_10022024C;
}

id sub_10022024C(uint64_t a1, double a2)
{
  id v2;
  int v3;
  double v4;

  v2 = *(id *)a1;
  LODWORD(a2) = *(_DWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 12);
  objc_msgSend(*(id *)a1, "setContentCompressionResistancePriority:forAxis:", 0, a2);
  LODWORD(v4) = v3;
  return objc_msgSend(v2, "setContentCompressionResistancePriority:forAxis:", 1, v4);
}

void UIView.CompressionResistancePriority.horizontal.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

float UIView.CompressionResistancePriority.vertical.getter(double a1, float a2)
{
  return a2;
}

double UIView.maxReadableContentWidth(for:)()
{
  return 1500.0;
}

UIImage *UIView.screenshot.getter()
{
  void *v0;
  double v1;
  CGFloat v2;
  double v3;
  CGFloat v4;
  unsigned __int8 v5;
  UIImage *v6;
  CGSize v8;

  objc_msgSend(v0, "bounds");
  v2 = v1;
  v4 = v3;
  v5 = objc_msgSend(v0, "isOpaque");
  v8.width = v2;
  v8.height = v4;
  UIGraphicsBeginImageContextWithOptions(v8, v5, 0.0);
  objc_msgSend(v0, "bounds");
  objc_msgSend(v0, "drawViewHierarchyInRect:afterScreenUpdates:", 1);
  v6 = UIGraphicsGetImageFromCurrentImageContext();
  UIGraphicsEndImageContext();
  return v6;
}

Swift::Void __swiftcall UIView.visualizeLayout(with:)(UIColor with)
{
  void *v1;
  void *v2;
  id v4;
  id v5;
  id v6;
  objc_class *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  id v24;
  Class isa;

  v2 = v1;
  v4 = objc_msgSend(v2, "viewWithTag:", 1234);
  if (v4)
  {
    v24 = v4;
    objc_msgSend(v2, "bringSubviewToFront:");

  }
  else
  {
    v5 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
    v6 = -[objc_class colorWithAlphaComponent:](with.super.isa, "colorWithAlphaComponent:", 0.2);
    objc_msgSend(v5, "setBackgroundColor:", v6);

    v7 = with.super.isa;
    UIView.border.setter(0x3FF0000000000000, 1, with.super.isa);
    objc_msgSend(v5, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    objc_msgSend(v5, "setTag:", 1234);
    objc_msgSend(v5, "setUserInteractionEnabled:", 0);
    objc_msgSend(v2, "addSubview:", v5);
    v8 = (void *)objc_opt_self(NSLayoutConstraint);
    v9 = sub_100005574(&qword_1004972B0);
    v10 = swift_allocObject(v9, 64, 7);
    *(_OWORD *)(v10 + 16) = xmmword_100384C00;
    v11 = objc_msgSend(v5, "topAnchor");
    v12 = objc_msgSend(v2, "topAnchor");
    v13 = objc_msgSend(v11, "constraintEqualToAnchor:", v12);

    *(_QWORD *)(v10 + 32) = v13;
    v14 = objc_msgSend(v5, "bottomAnchor");
    v15 = objc_msgSend(v2, "bottomAnchor");
    v16 = objc_msgSend(v14, "constraintEqualToAnchor:", v15);

    *(_QWORD *)(v10 + 40) = v16;
    v17 = objc_msgSend(v5, "leadingAnchor");
    v18 = objc_msgSend(v2, "leadingAnchor");
    v19 = objc_msgSend(v17, "constraintEqualToAnchor:", v18);

    *(_QWORD *)(v10 + 48) = v19;
    v20 = objc_msgSend(v5, "trailingAnchor");
    v21 = objc_msgSend(v2, "trailingAnchor");
    v22 = objc_msgSend(v20, "constraintEqualToAnchor:", v21);

    *(_QWORD *)(v10 + 56) = v22;
    specialized Array._endMutation()(v23);
    sub_1000087DC(0, &qword_100497EC0, NSLayoutConstraint_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v8, "activateConstraints:", isa);

  }
}

void sub_100220694(UIColor a1)
{
  UIView.visualizeLayout(with:)(a1);
}

void UIView.traverseViewHierarchy(_:)(void (*a1)(void *, char *), uint64_t a2)
{
  void *v2;
  void *v3;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  char v17;

  v3 = v2;
  v17 = 0;
  a1(v3, &v17);
  if ((v17 & 1) != 0)
    return;
  v6 = objc_msgSend(v3, "subviews");
  v7 = sub_1000087DC(0, &qword_100497EC8, UIView_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  if ((unint64_t)v8 >> 62)
  {
LABEL_19:
    if (v8 < 0)
      v16 = v8;
    else
      v16 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
    if (v9)
      goto LABEL_4;
LABEL_16:
    swift_bridgeObjectRelease();
    return;
  }
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v9)
    goto LABEL_16;
LABEL_4:
  if ((v8 & 0xC000000000000001) != 0)
  {
    v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v8);
    v10 = v8 & 0xFFFFFFFFFFFFFF8;
LABEL_7:
    v12 = 0;
    v13 = v9 - 1;
    while (1)
    {
      sub_1002224FC(v11, a1, a2, &v17);

      if (v13 == v12)
        goto LABEL_16;
      v14 = v12 + 1;
      if ((v8 & 0xC000000000000001) != 0)
      {
        v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12 + 1, v8);
      }
      else
      {
        if (v14 >= *(_QWORD *)(v10 + 16))
          goto LABEL_18;
        v15 = *(id *)(v8 + 8 * v12 + 40);
      }
      v11 = v15;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
      ++v12;
      if (v17 == 1)
      {

        goto LABEL_16;
      }
    }
  }
  v10 = v8 & 0xFFFFFFFFFFFFFF8;
  if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v11 = *(id *)(v8 + 32);
    goto LABEL_7;
  }
  __break(1u);
}

void UIView.statusBarFrame.getter(uint64_t a1@<X8>)
{
  void *v1;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = objc_msgSend(v1, "window");
  v4 = 0;
  if (v3)
  {
    v5 = v3;
    v6 = objc_msgSend(v3, "windowScene");

    if (v6)
    {
      v7 = objc_msgSend(v6, "statusBarManager");
      if (v7)
      {
        v8 = v7;
        if ((objc_msgSend(v7, "isStatusBarHidden") & 1) == 0)
        {
          objc_msgSend(v8, "statusBarFrame");
          v14 = v13;
          v16 = v15;
          v18 = v17;
          v20 = v19;
          v21 = objc_msgSend(v6, "screen");
          v22 = objc_msgSend(v21, "coordinateSpace");

          objc_msgSend(v1, "convertRect:fromCoordinateSpace:", v22, v14, v16, v18, v20);
          v4 = v23;
          v10 = v24;
          v11 = v25;
          v12 = v26;

          swift_unknownObjectRelease(v22);
          v9 = 0;
          goto LABEL_8;
        }

      }
      else
      {

      }
    }
  }
  v9 = 1;
  v10 = 0;
  v11 = 0;
  v12 = 0;
LABEL_8:
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 24) = v12;
  *(_BYTE *)(a1 + 32) = v9;
}

Swift::Void __swiftcall UILayoutGuide.visualizeLayout(with:)(UIColor with)
{
  void *v1;
  void *v2;
  id v4;
  void *v5;
  objc_class *v6;
  id v7;
  id v8;
  objc_class *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  Class isa;

  v2 = v1;
  v4 = objc_msgSend(v2, "owningView");
  if (v4)
  {
    v5 = v4;
    v6 = (objc_class *)objc_msgSend(v4, "viewWithTag:", 1234);
    if (v6)
    {
      isa = v6;
      objc_msgSend(v5, "bringSubviewToFront:");
    }
    else
    {
      v7 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
      v8 = -[objc_class colorWithAlphaComponent:](with.super.isa, "colorWithAlphaComponent:", 0.2);
      objc_msgSend(v7, "setBackgroundColor:", v8);

      v9 = with.super.isa;
      UIView.border.setter(0x3FF0000000000000, 1, with.super.isa);
      objc_msgSend(v7, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
      objc_msgSend(v7, "setTag:", 1234);
      objc_msgSend(v7, "setUserInteractionEnabled:", 0);
      objc_msgSend(v5, "addSubview:", v7);
      v10 = (void *)objc_opt_self(NSLayoutConstraint);
      v11 = sub_100005574(&qword_1004972B0);
      v12 = swift_allocObject(v11, 64, 7);
      *(_OWORD *)(v12 + 16) = xmmword_100384C00;
      v13 = objc_msgSend(v7, "topAnchor");
      v14 = objc_msgSend(v2, "topAnchor");
      v15 = objc_msgSend(v13, "constraintEqualToAnchor:", v14);

      *(_QWORD *)(v12 + 32) = v15;
      v16 = objc_msgSend(v7, "bottomAnchor");
      v17 = objc_msgSend(v2, "bottomAnchor");
      v18 = objc_msgSend(v16, "constraintEqualToAnchor:", v17);

      *(_QWORD *)(v12 + 40) = v18;
      v19 = objc_msgSend(v7, "leadingAnchor");
      v20 = objc_msgSend(v2, "leadingAnchor");
      v21 = objc_msgSend(v19, "constraintEqualToAnchor:", v20);

      *(_QWORD *)(v12 + 48) = v21;
      v22 = objc_msgSend(v7, "trailingAnchor");
      v23 = objc_msgSend(v2, "trailingAnchor");
      v24 = objc_msgSend(v22, "constraintEqualToAnchor:", v23);

      *(_QWORD *)(v12 + 56) = v24;
      specialized Array._endMutation()(v25);
      sub_1000087DC(0, &qword_100497EC0, NSLayoutConstraint_ptr);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v10, "activateConstraints:", isa);

      v5 = v7;
    }

  }
}

void sub_100220D94(UIColor a1)
{
  UILayoutGuide.visualizeLayout(with:)(a1);
}

BOOL UIViewController.canPresentViewControllers.getter()
{
  void *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(v0, "popoverPresentationController");
  v2 = v1;
  if (v1)

  return v2 == 0;
}

BOOL UIViewController.canBeDismissed.getter()
{
  void *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(v0, "presentingViewController");
  v2 = v1;
  if (v1)

  return v2 != 0;
}

Swift::Void __swiftcall UIViewController.dismiss(after:)(Swift::Double after)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  void *v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[5];
  uint64_t v38;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v36 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v34 = *(_QWORD *)(v7 - 8);
  v35 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchTime(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v33 - v15;
  v17 = sub_1000087DC(0, (unint64_t *)&qword_100497ED0, OS_dispatch_queue_ptr);
  v25 = (void *)static OS_dispatch_queue.main.getter(v17, v18, v19, v20, v21, v22, v23, v24);
  static DispatchTime.now()(v25);
  + infix(_:_:)(v14, after);
  v26 = *(void (**)(char *, uint64_t))(v11 + 8);
  v26(v14, v10);
  v27 = swift_allocObject(&unk_100458638, 24, 7);
  swift_unknownObjectWeakInit(v27 + 16, v2);
  aBlock[4] = sub_1002226F8;
  v38 = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000BED80;
  aBlock[3] = &unk_100458650;
  v28 = _Block_copy(aBlock);
  v29 = swift_release(v38);
  static DispatchQoS.unspecified.getter(v29);
  aBlock[0] = _swiftEmptyArrayStorage;
  v30 = sub_100006924((unint64_t *)&qword_100496FE0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v31 = sub_100005574((uint64_t *)&unk_100497EE0);
  v32 = sub_1001FF5AC();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v31, v32, v4, v30);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v16, v9, v6, v28);
  _Block_release(v28);

  (*(void (**)(char *, uint64_t))(v36 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v35);
  v26(v16, v10);
}

void sub_100221118(uint64_t a1)
{
  uint64_t v1;
  void *Strong;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  _BYTE v8[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    v4 = objc_msgSend(Strong, "presentingViewController");
    if (v4)
    {
      v5 = v4;
      v6 = objc_msgSend(v4, "presentedViewController");
      if (v6)
      {
        v7 = v6;
        sub_1000087DC(0, (unint64_t *)&unk_100497EB0, NSObject_ptr);
        if ((static NSObject.== infix(_:_:)(v7, v3) & 1) != 0)
          objc_msgSend(v5, "dismissViewControllerAnimated:completion:", 1, 0);

        v3 = v5;
      }
      else
      {
        v7 = v5;
      }

      v3 = v7;
    }

  }
}

Swift::Void __swiftcall UIViewController.add(_:)(UIViewController a1)
{
  void *v1;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;

  objc_msgSend(v1, "addChildViewController:", a1.super.super.isa);
  if (!objc_msgSend(v1, "isViewLoaded"))
    goto LABEL_6;
  v3 = objc_msgSend(v1, "view");
  if (!v3)
  {
    __break(1u);
    goto LABEL_8;
  }
  v4 = v3;
  v5 = -[objc_class view](a1.super.super.isa, "view");
  if (!v5)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v6 = v5;
  objc_msgSend(v4, "addSubview:", v5);

  v7 = objc_msgSend(v1, "view");
  if (v7)
  {
    v8 = v7;
    objc_msgSend(v7, "setNeedsLayout");

LABEL_6:
    -[objc_class didMoveToParentViewController:](a1.super.super.isa, "didMoveToParentViewController:", v1);
    return;
  }
LABEL_9:
  __break(1u);
}

Swift::Void __swiftcall UIViewController.remove(_:)(UIViewController a1)
{
  id v1;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  unsigned int v9;
  id v10;
  void *v11;

  v3 = -[objc_class parentViewController](a1.super.super.isa, "parentViewController");
  if (v3)
  {
    v4 = v3;

    if (v4 == v1)
    {
      -[objc_class willMoveToParentViewController:](a1.super.super.isa, "willMoveToParentViewController:", 0);
      if (!objc_msgSend(v1, "isViewLoaded")
        || !-[objc_class isViewLoaded](a1.super.super.isa, "isViewLoaded"))
      {
        goto LABEL_11;
      }
      v5 = -[objc_class view](a1.super.super.isa, "view");
      if (v5)
      {
        v6 = v5;
        v7 = objc_msgSend(v1, "view");
        if (v7)
        {
          v8 = v7;
          v9 = objc_msgSend(v6, "isDescendantOfView:", v7);

          if (!v9)
          {
LABEL_11:
            -[objc_class removeFromParentViewController](a1.super.super.isa, "removeFromParentViewController");
            return;
          }
          v10 = -[objc_class view](a1.super.super.isa, "view");
          if (v10)
          {
            v11 = v10;
            objc_msgSend(v10, "removeFromSuperview");

            goto LABEL_11;
          }
LABEL_14:
          __break(1u);
          return;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_14;
    }
  }
}

Swift::Bool __swiftcall UIViewController.isDescendant(of:)(UIViewController of)
{
  void *v1;
  objc_class *v3;
  objc_class *v4;
  id v5;
  void *v6;
  Swift::Bool v7;

  v3 = (objc_class *)objc_msgSend(v1, "parentViewController");
  if (v3 && (v4 = v3, v3, v4 == of.super.super.isa))
  {
    LOBYTE(v5) = 1;
  }
  else
  {
    v5 = objc_msgSend(v1, "parentViewController");
    if (v5)
    {
      v6 = v5;
      v7 = UIViewController.isDescendant(of:)(of);

      LOBYTE(v5) = v7;
    }
  }
  return (char)v5;
}

void UIViewController.traverseViewControllerHierarchy(_:)(void (*a1)(void *, char *, __n128), uint64_t a2)
{
  void *v2;
  void *v3;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  double v14;
  id v15;
  void *v16;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE v19[31];
  char v20;

  v3 = v2;
  v20 = 0;
  ((void (*)(void *, char *))a1)(v3, &v20);
  v6 = objc_msgSend(v3, "childViewControllers");
  v7 = sub_1000087DC(0, (unint64_t *)&qword_100497EA0, UIViewController_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  if ((unint64_t)v8 >> 62)
    goto LABEL_17;
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v9)
  {
    swift_beginAccess(&v20, v19, 0, 0);
    v10 = 4;
    while (1)
    {
      v11 = (v8 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, v8)
          : *(id *)(v8 + 8 * v10);
      v12 = v11;
      v13 = v10 - 3;
      if (__OFADD__(v10 - 4, 1))
        break;
      if ((v20 & 1) != 0)
      {

        goto LABEL_12;
      }
      sub_100222700(v11, a1, a2, &v20);

      ++v10;
      if (v13 == v9)
        goto LABEL_12;
    }
    __break(1u);
LABEL_17:
    if (v8 < 0)
      v17 = v8;
    else
      v17 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease();
  }
LABEL_12:
  swift_bridgeObjectRelease();
  *(_QWORD *)&v14 = swift_beginAccess(&v20, v18, 0, 0).n128_u64[0];
  if ((v20 & 1) == 0)
  {
    v15 = objc_msgSend(v3, "presentedViewController", v14);
    if (v15)
    {
      v16 = v15;
      sub_100222700(v15, a1, a2, &v20);

    }
  }
}

uint64_t sub_100221680(uint64_t a1, _BYTE *a2, void (*a3)(uint64_t, _BYTE *), uint64_t a4, _BYTE *a5)
{
  uint64_t result;
  _BYTE v10[24];

  swift_beginAccess(a5, v10, 33, 0);
  a3(a1, a5);
  swift_endAccess(v10);
  result = swift_beginAccess(a5, v10, 0, 0);
  *a2 = *a5;
  return result;
}

NSLayoutConstraint __swiftcall NSLayoutConstraint.with(priority:)(__C::UILayoutPriority priority)
{
  void *v1;
  id v3;

  objc_msgSend(v1, "setPriority:", *(double *)&priority.rawValue);
  return (NSLayoutConstraint)v3;
}

void UIView.constrainToBounds(of:useLayoutMarginsGuide:padding:)()
{
  uint64_t v0;
  uint64_t inited;
  unint64_t v2;
  void *v3;
  Class isa;
  _BYTE v5[96];

  v0 = sub_100005574(&qword_100497EF0);
  inited = swift_initStackObject(v0, v5);
  *(_OWORD *)(inited + 16) = xmmword_100384BB0;
  *(_QWORD *)(inited + 32) = 3;
  *(_QWORD *)(inited + 40) = 0x3FF0000000000000;
  *(_QWORD *)(inited + 48) = 5;
  *(_QWORD *)(inited + 56) = 0x3FF0000000000000;
  *(_QWORD *)(inited + 64) = 6;
  *(_QWORD *)(inited + 72) = 0xBFF0000000000000;
  *(_QWORD *)(inited + 80) = 4;
  *(_QWORD *)(inited + 88) = 0xBFF0000000000000;
  v2 = sub_1001FDA20(inited);
  swift_setDeallocating(inited);
  sub_100222200(v2, (uint64_t (*)(_QWORD, double))sub_100222908);
  swift_bridgeObjectRelease();
  v3 = (void *)objc_opt_self(NSLayoutConstraint);
  sub_1000087DC(0, &qword_100497EC0, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v3, "activateConstraints:", isa);
  swift_bridgeObjectRelease();

}

id sub_1002218A8(uint64_t a1, void *a2, char a3, void *a4, double a5, double a6)
{
  id v12;
  id v13;
  id v14;
  _QWORD v16[4];
  _QWORD v17[4];

  v17[3] = sub_1000087DC(0, &qword_100497EC8, UIView_ptr);
  v17[0] = a2;
  v12 = a2;
  if ((a3 & 1) != 0)
    v13 = objc_msgSend(a4, "layoutMarginsGuide");
  else
    v13 = a4;
  v14 = v13;
  sub_1000087DC(0, &qword_100497EC0, NSLayoutConstraint_ptr);
  v16[3] = sub_1000087DC(0, (unint64_t *)&unk_100497EB0, NSObject_ptr);
  v16[0] = v14;
  return sub_10022199C(v17, a1, 0, v16, a1, 1.0, a5 * a6);
}

id sub_10022199C(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, double a6, double a7)
{
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  id v25;
  uint64_t v27;
  uint64_t v28;

  v14 = a1[3];
  v15 = sub_10000ABC8(a1, v14);
  v16 = _bridgeAnythingToObjectiveC<A>(_:)(v15, v14);
  v17 = a4[3];
  if (v17)
  {
    v18 = sub_10000ABC8(a4, a4[3]);
    v27 = a5;
    v28 = a2;
    v19 = a3;
    v20 = *(_QWORD *)(v17 - 8);
    __chkstk_darwin(v18);
    v22 = (char *)&v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v20 + 16))(v22);
    v23 = _bridgeAnythingToObjectiveC<A>(_:)(v22, v17);
    v24 = *(void (**)(char *, uint64_t))(v20 + 8);
    a3 = v19;
    v24(v22, v17);
    a5 = v27;
    a2 = v28;
    sub_10000682C(a4);
  }
  else
  {
    v23 = 0;
  }
  v25 = objc_msgSend((id)swift_getObjCClassFromMetadata(), "constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:", v16, a2, a3, v23, a5, a6, a7);
  swift_unknownObjectRelease(v16);
  swift_unknownObjectRelease(v23);
  sub_10000682C(a1);
  return v25;
}

void Array<A>.activate()(uint64_t a1)
{
  sub_100221B94(a1, (SEL *)&selRef_activateConstraints_);
}

void UIView.addSubviewAnchoredToBounds(_:useLayoutMarginsGuide:padding:)(void *a1)
{
  void *v1;

  objc_msgSend(a1, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v1, "addSubview:", a1);
  UIView.constrainToBounds(of:useLayoutMarginsGuide:padding:)();
}

void Array<A>.deactivate()(uint64_t a1)
{
  sub_100221B94(a1, (SEL *)&selRef_deactivateConstraints_);
}

void sub_100221B94(uint64_t a1, SEL *a2)
{
  void *v3;
  Class isa;

  v3 = (void *)objc_opt_self(NSLayoutConstraint);
  sub_1000087DC(0, &qword_100497EC0, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v3, *a2, isa);

}

uint64_t NSTextAlignment.init(languageCode:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = type metadata accessor for Locale.Language(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = Locale.Language.init(identifier:)(a1, a2);
  v9 = Locale.Language.characterDirection.getter(v8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v10 = 4;
  if (v9 == 2)
    v10 = 2;
  if (v9 == 1)
    return 0;
  else
    return v10;
}

Swift::Void __swiftcall NSTextAlignment.flip()()
{
  uint64_t *v0;
  uint64_t v1;

  if (*v0)
  {
    if (*v0 != 2)
      return;
    v1 = 0;
  }
  else
  {
    v1 = 2;
  }
  *v0 = v1;
}

uint64_t NSTextAlignment.ctTextAlignment.getter(unint64_t a1)
{
  if (a1 >= 5)
    return 4;
  else
    return (0x403010200uLL >> (8 * a1));
}

uint64_t UIViewPropertyAnimator.UpdateReason.init(rawValue:)(unint64_t a1)
{
  if (a1 >= 4)
    return 3;
  else
    return 0x2010003u >> (8 * a1);
}

_QWORD *sub_100221D24@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;

  if (*result >= 4uLL)
    v2 = 3;
  else
    v2 = 0x2010003u >> (8 * *result);
  *a2 = v2;
  return result;
}

void UIViewPropertyAnimator.addModifiedAnimations(with:animations:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];
  uint64_t v8;

  v7[4] = a2;
  v8 = a3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_1000BED80;
  v7[3] = &unk_100458678;
  v5 = _Block_copy(v7);
  v6 = v8;
  swift_retain(a3);
  objc_msgSend(v3, "addAnimations:", v5, swift_release(v6).n128_f64[0]);
  _Block_release(v5);
}

UIViewPropertyAnimator __swiftcall UIViewPropertyAnimator.init(springTimingParameters:)(UISpringTimingParameters springTimingParameters)
{
  id v2;
  id v3;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  -[objc_class settlingDuration](springTimingParameters.super.isa, "settlingDuration");
  v3 = objc_msgSend(v2, "initWithDuration:timingParameters:", springTimingParameters.super.isa);

  return (UIViewPropertyAnimator)v3;
}

id UISpringTimingParameters.init(dampingRatio:response:)(double a1, double a2)
{
  double v2;
  double v3;

  v2 = 6.28318531 / a2 * (6.28318531 / a2);
  v3 = sqrt(v2);
  return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), "initWithMass:stiffness:damping:initialVelocity:", 1.0, v2, (v3 + v3) * a1, 0.0, 0.0);
}

id UIView.setAnchorPoint(_:preserveFrame:)(char a1, double a2, double a3)
{
  void *v3;
  double v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;

  if ((a1 & 1) == 0)
    return objc_msgSend(v3, "setAnchorPoint:", a2, a3);
  v6 = UIView.untransformedFrame.getter();
  v8 = v7;
  v10 = v9;
  v12 = v11;
  objc_msgSend(v3, "setAnchorPoint:", a2, a3);
  return UIView.untransformedFrame.setter(v6, v8, v10, v12);
}

double sub_100221F34()
{
  double result;

  static UIView.Shadow.identity = (uint64_t)objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  unk_1004A2F48 = xmmword_1003952B0;
  result = 0.0;
  unk_1004A2F58 = xmmword_1003952C0;
  return result;
}

uint64_t *UIView.Shadow.identity.unsafeMutableAddressor()
{
  if (qword_100496D60 != -1)
    swift_once(&qword_100496D60, sub_100221F34);
  return &static UIView.Shadow.identity;
}

id static UIView.Shadow.identity.getter@<X0>(uint64_t a1@<X8>)
{
  void *v2;

  if (qword_100496D60 != -1)
    swift_once(&qword_100496D60, sub_100221F34);
  v2 = (void *)static UIView.Shadow.identity;
  *(_QWORD *)a1 = static UIView.Shadow.identity;
  *(_OWORD *)(a1 + 8) = unk_1004A2F48;
  *(_OWORD *)(a1 + 24) = unk_1004A2F58;
  return v2;
}

uint64_t sub_10022203C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005574(&qword_100497E98);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10022207C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005574(&qword_100497E98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002220C4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1002220F0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_10021DE54(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_1002220FC()
{
  return sub_100222130(33);
}

uint64_t sub_100222104(uint64_t a1)
{
  uint64_t v1;

  return sub_10021E228(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_BYTE *)(v1 + 32));
}

uint64_t sub_100222110(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100222120(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_100222128()
{
  return sub_100222130(32);
}

uint64_t sub_100222130(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 16));

  return swift_deallocObject(v1, a1, 7);
}

id sub_100222168(void *a1)
{
  uint64_t v1;

  return sub_10021E3E0(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t type metadata accessor for UIStackView.SpacerView()
{
  return objc_opt_self(_TtCE14MusicUtilitiesCSo11UIStackView10SpacerView);
}

id *sub_100222190(id *a1)
{

  return a1;
}

void sub_1002221B8(double a1, double a2)
{
  Swift::UInt64 v3;
  Swift::UInt64 v4;

  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = *(_QWORD *)&a1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *(_QWORD *)&a2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
}

_QWORD *sub_100222200(uint64_t a1, uint64_t (*a2)(_QWORD, double))
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v3 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v3);
    result = (_QWORD *)sub_10015099C(a1);
    v5 = (uint64_t)result;
    v7 = v6;
    v8 = 0;
    v9 = a1 + 64;
    v20 = v3;
    while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(_BYTE *)(a1 + 32))
    {
      v11 = (unint64_t)v5 >> 6;
      if ((*(_QWORD *)(v9 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0)
        goto LABEL_22;
      if (*(_DWORD *)(a1 + 36) != v7)
        goto LABEL_23;
      v22 = v8;
      v12 = a2(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v5), *(double *)(*(_QWORD *)(a1 + 56) + 8 * v5));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v12);
      v13 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
      v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v12);
      result = (_QWORD *)specialized ContiguousArray._endMutation()(v14);
      v10 = 1 << *(_BYTE *)(a1 + 32);
      if (v5 >= v10)
        goto LABEL_24;
      v15 = *(_QWORD *)(v9 + 8 * v11);
      if ((v15 & (1 << v5)) == 0)
        goto LABEL_25;
      if (*(_DWORD *)(a1 + 36) != v7)
        goto LABEL_26;
      v16 = v15 & (-2 << (v5 & 0x3F));
      if (v16)
      {
        v10 = __clz(__rbit64(v16)) | v5 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        v17 = v11 + 1;
        v18 = (unint64_t)(v10 + 63) >> 6;
        if (v11 + 1 < v18)
        {
          v19 = *(_QWORD *)(v9 + 8 * v17);
          if (v19)
          {
LABEL_18:
            v10 = __clz(__rbit64(v19)) + (v17 << 6);
          }
          else
          {
            while (v18 - 2 != v11)
            {
              v19 = *(_QWORD *)(a1 + 80 + 8 * v11++);
              if (v19)
              {
                v17 = v11 + 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
      v8 = v22 + 1;
      v5 = v10;
      if (v22 + 1 == v20)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  return result;
}

uint64_t sub_1002223F0(void *a1)
{
  id v2;
  double v3;
  double v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = objc_msgSend(a1, "layer");
  objc_msgSend(v2, "borderWidth");
  v4 = v3;

  if (v4 <= 0.0)
    return 0;
  v5 = objc_msgSend(a1, "layer");
  v6 = objc_msgSend(v5, "borderColor");

  if (!v6)
    return 0;
  v7 = objc_msgSend(a1, "layer");
  objc_msgSend(v7, "borderWidth");
  v9 = v8;

  v10 = v9;
  objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithCGColor:", v6);

  return v10;
}

void sub_1002224FC(void *a1, void (*a2)(void *, char *), uint64_t a3, char *a4)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  _QWORD v16[5];
  char v17;

  v16[2] = a2;
  v16[3] = a3;
  v16[4] = a4;
  a2(a1, a4);
  v17 = *a4;
  if ((v17 & 1) == 0)
  {
    v6 = objc_msgSend(a1, "subviews");
    v7 = sub_1000087DC(0, &qword_100497EC8, UIView_ptr);
    v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

    if ((unint64_t)v8 >> 62)
      goto LABEL_20;
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v9)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      return;
    }
    while (1)
    {
      if ((v8 & 0xC000000000000001) != 0)
      {
        v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v8);
        v10 = v8 & 0xFFFFFFFFFFFFFF8;
      }
      else
      {
        v10 = v8 & 0xFFFFFFFFFFFFFF8;
        if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        v11 = *(id *)(v8 + 32);
      }
      v12 = 0;
      while (1)
      {
        sub_1002224FC(v11, sub_100222D18, v16, &v17);

        if (v9 - 1 == v12)
          goto LABEL_16;
        v13 = v12 + 1;
        if ((v8 & 0xC000000000000001) != 0)
        {
          v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12 + 1, v8);
        }
        else
        {
          if (v13 >= *(_QWORD *)(v10 + 16))
            goto LABEL_19;
          v14 = *(id *)(v8 + 8 * v12 + 40);
        }
        v11 = v14;
        if (__OFADD__(v13, 1))
          break;
        ++v12;
        if (v17 == 1)
        {

LABEL_16:
          swift_bridgeObjectRelease();
          return;
        }
      }
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      if (v8 < 0)
        v15 = v8;
      else
        v15 = v8 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v9 = _CocoaArrayWrapper.endIndex.getter(v15);
      swift_bridgeObjectRelease();
      if (!v9)
        goto LABEL_24;
    }
  }
}

uint64_t sub_1002226D4()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1002226F8()
{
  uint64_t v0;

  sub_100221118(v0);
}

void sub_100222700(void *a1, void (*a2)(void *, char *, __n128), uint64_t a3, char *a4)
{
  __n128 v7;
  double v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  double v17;
  id v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[6];
  _BYTE v22[24];
  _BYTE v23[24];
  _BYTE v24[31];
  char v25;

  v21[2] = a2;
  v21[3] = a3;
  v21[4] = a4;
  v7 = swift_beginAccess(a4, v24, 33, 0);
  a2(a1, a4, v7);
  swift_endAccess(v24);
  *(_QWORD *)&v8 = swift_beginAccess(a4, v24, 0, 0).n128_u64[0];
  v25 = *a4;
  v9 = objc_msgSend(a1, "childViewControllers", v8);
  v10 = sub_1000087DC(0, (unint64_t *)&qword_100497EA0, UIViewController_ptr);
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

  if ((unint64_t)v11 >> 62)
    goto LABEL_17;
  v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v12)
  {
    swift_beginAccess(&v25, v23, 0, 0);
    v13 = 4;
    while (1)
    {
      v14 = (v11 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13 - 4, v11)
          : *(id *)(v11 + 8 * v13);
      v15 = v14;
      v16 = v13 - 3;
      if (__OFADD__(v13 - 4, 1))
        break;
      if (v25 == 1)
      {

        goto LABEL_12;
      }
      sub_100222700(v14, sub_100222D0C, v21, &v25);

      ++v13;
      if (v16 == v12)
        goto LABEL_12;
    }
    __break(1u);
LABEL_17:
    if (v11 < 0)
      v20 = v11;
    else
      v20 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease();
  }
LABEL_12:
  swift_bridgeObjectRelease();
  *(_QWORD *)&v17 = swift_beginAccess(&v25, v22, 0, 0).n128_u64[0];
  if ((v25 & 1) == 0)
  {
    v18 = objc_msgSend(a1, "presentedViewController", v17);
    if (v18)
    {
      v19 = v18;
      sub_100222700(v18, sub_100222D0C, v21, &v25);

    }
  }
}

id sub_100222908(uint64_t a1, double a2)
{
  uint64_t v2;

  return sub_1002218A8(a1, *(void **)(v2 + 16), *(_BYTE *)(v2 + 24), *(void **)(v2 + 32), a2, *(double *)(v2 + 40));
}

unint64_t sub_100222920()
{
  unint64_t result;

  result = qword_100497EF8;
  if (!qword_100497EF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UIView.Shadow, &type metadata for UIView.Shadow);
    atomic_store(result, (unint64_t *)&qword_100497EF8);
  }
  return result;
}

unint64_t sub_100222968()
{
  unint64_t result;

  result = qword_100497F00;
  if (!qword_100497F00)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UIViewPropertyAnimator.UpdateReason, &type metadata for UIViewPropertyAnimator.UpdateReason);
    atomic_store(result, (unint64_t *)&qword_100497F00);
  }
  return result;
}

uint64_t _s6ShadowVwcp(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = v3;
  return a1;
}

uint64_t _s6ShadowVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

__n128 _s6ShadowVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s6ShadowVwta(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for UIView.Shadow()
{
  return &type metadata for UIView.Shadow;
}

uint64_t _s6BorderVwCP(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = v3;
  return a1;
}

void _s6BorderVwxx(uint64_t a1)
{

}

uint64_t _s6BorderVwca(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v3 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v3;
  v4 = (void *)a2[2];
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  v6 = v4;

  return a1;
}

__n128 _s6BorderVwtk(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t _s6BorderVwta(uint64_t a1, uint64_t a2)
{
  void *v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  return a1;
}

uint64_t _s6BorderVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s6BorderVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UIView.Border()
{
  return &type metadata for UIView.Border;
}

_QWORD *_s29CompressionResistancePriorityVwCP(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for UIView.CompressionResistancePriority()
{
  return &type metadata for UIView.CompressionResistancePriority;
}

uint64_t _s12UpdateReasonOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100222C8C + 4 * byte_1003943E5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100222CC0 + 4 * byte_1003943E0[v4]))();
}

uint64_t sub_100222CC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100222CC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100222CD0);
  return result;
}

uint64_t sub_100222CDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100222CE4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100222CE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100222CF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UIViewPropertyAnimator.UpdateReason()
{
  return &type metadata for UIViewPropertyAnimator.UpdateReason;
}

uint64_t sub_100222D0C(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  return sub_100221680(a1, a2, *(void (**)(uint64_t, _BYTE *))(v2 + 16), *(_QWORD *)(v2 + 24), *(_BYTE **)(v2 + 32));
}

uint64_t sub_100222D18(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  _BYTE *v4;
  uint64_t result;

  v4 = *(_BYTE **)(v2 + 32);
  result = (*(uint64_t (**)(uint64_t, _BYTE *))(v2 + 16))(a1, v4);
  *a2 = *v4;
  return result;
}

uint64_t sub_100222D58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s9_ObserverC18HandlerAssociationVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t URL.appending(_:)(uint64_t a1, uint64_t a2, char a3)
{
  return URL.appendingPathComponent(_:isDirectory:)(a1, a2, (a3 & 1) == 0);
}

uint64_t URL.init(string:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6 = sub_100005574(&qword_100497A28);
  __chkstk_darwin(v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
    goto LABEL_4;
  URL.init(string:)(a1, a2);
  swift_bridgeObjectRelease();
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    sub_100008758((uint64_t)v8, &qword_100497A28);
LABEL_4:
    v11 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a3, 1, 1, v11);
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v8, v9);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(a3, 0, 1, v9);
}

void URL.parametrize(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  _QWORD *v74;

  v5 = sub_100005574(&qword_100497A28);
  __chkstk_darwin(v5);
  v63 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for URLQueryItem(0);
  v71 = *(_QWORD *)(v73 - 8);
  v7 = __chkstk_darwin(v73);
  v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v72 = (char *)&v58 - v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v58 - v12;
  v14 = sub_100005574(&qword_100497FA0);
  __chkstk_darwin(v14);
  v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for URLComponents(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v64 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for URL(0);
  v21 = *(_QWORD *)(v20 - 8);
  v60 = a2;
  v61 = v21;
  v22 = *(void (**)(uint64_t, uint64_t))(v21 + 16);
  v62 = v20;
  v22(a2, v2);
  if (*(_QWORD *)(a1 + 16))
  {
    URLComponents.init(url:resolvingAgainstBaseURL:)(v2, 0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
    {
      sub_100008758((uint64_t)v16, &qword_100497FA0);
    }
    else
    {
      v58 = v18;
      v59 = v17;
      v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(v64, v16, v17);
      v24 = URLComponents.queryItems.getter(v23);
      if (v24)
        v25 = (char *)v24;
      else
        v25 = (char *)_swiftEmptyArrayStorage;
      v26 = swift_bridgeObjectRetain();
      v27 = sub_100224AC4(v26);
      swift_bridgeObjectRelease();
      v74 = v27;
      sub_100224988(&v74);
      v28 = v74;
      v69 = v74[2];
      if (v69)
      {
        v29 = 0;
        v67 = v74;
        v68 = v74 + 4;
        v65 = v13;
        v66 = v9;
        while (v29 < v28[2])
        {
          v70 = v29;
          v33 = &v68[4 * v29];
          v34 = *v33;
          v35 = v33[1];
          v37 = v33[2];
          v36 = v33[3];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          URLQueryItem.init(name:value:)(v34, v35, v37, v36);
          swift_bridgeObjectRelease();
          v38 = *((_QWORD *)v25 + 2);
          if (v38)
          {
            v39 = v71;
            v40 = (*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
            v41 = v25;
            swift_bridgeObjectRetain();
            v42 = 0;
            v43 = *(_QWORD *)(v39 + 72);
            v44 = *(uint64_t (**)(char *, char *, uint64_t))(v39 + 16);
            while (1)
            {
              v45 = v44(v72, &v41[v40], v73);
              v46 = URLQueryItem.name.getter(v45);
              if (v46 == v34 && v47 == v35)
                break;
              v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v46, v47, v34, v35, 0);
              swift_bridgeObjectRelease();
              (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v73);
              if ((v48 & 1) != 0)
                goto LABEL_25;
              ++v42;
              v40 += v43;
              if (v38 == v42)
              {
                swift_bridgeObjectRelease();
                v25 = v41;
                swift_bridgeObjectRelease();
                v13 = v65;
                v9 = v66;
                v28 = v67;
                goto LABEL_20;
              }
            }
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v73);
LABEL_25:
            swift_bridgeObjectRelease();
            v25 = v41;
            swift_bridgeObjectRelease();
            if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0)
              v25 = (char *)sub_100223AB0(v41);
            v28 = v67;
            if (v42 >= *((_QWORD *)v25 + 2))
              goto LABEL_34;
            v51 = &v25[v40];
            v13 = v65;
            (*(void (**)(char *, char *, uint64_t))(v71 + 40))(v51, v65, v73);
            v9 = v66;
          }
          else
          {
            swift_bridgeObjectRelease();
            v44 = *(uint64_t (**)(char *, char *, uint64_t))(v71 + 16);
LABEL_20:
            v44(v9, v13, v73);
            if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) == 0)
              v25 = (char *)sub_10020AB34(0, *((_QWORD *)v25 + 2) + 1, 1, v25);
            v50 = *((_QWORD *)v25 + 2);
            v49 = *((_QWORD *)v25 + 3);
            if (v50 >= v49 >> 1)
              v25 = (char *)sub_10020AB34(v49 > 1, v50 + 1, 1, v25);
            *((_QWORD *)v25 + 2) = v50 + 1;
            v30 = v71;
            v31 = (unint64_t)&v25[((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))
                                       + *(_QWORD *)(v71 + 72) * v50];
            v32 = v73;
            (*(void (**)(unint64_t, char *, uint64_t))(v71 + 32))(v31, v9, v73);
            (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v32);
          }
          v29 = v70 + 1;
          if (v70 + 1 == v69)
            goto LABEL_29;
        }
        __break(1u);
LABEL_34:
        __break(1u);
        swift_release(v28);
        __break(1u);
      }
      else
      {
LABEL_29:
        swift_release(v28);
        v52 = v64;
        v53 = URLComponents.queryItems.setter(v25);
        v54 = (uint64_t)v63;
        URLComponents.url.getter(v53);
        (*(void (**)(char *, uint64_t))(v58 + 8))(v52, v59);
        v56 = v61;
        v55 = v62;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v54, 1, v62) == 1)
        {
          sub_100008758(v54, &qword_100497A28);
        }
        else
        {
          v57 = v60;
          (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v60, v55);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 32))(v57, v54, v55);
        }
      }
    }
  }
}

uint64_t static URL.+ infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return URL.appendingPathComponent(_:isDirectory:)(a2, a3, (a4 & 1) == 0);
}

uint64_t URLComponents.queryItemsDictionary.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t (*v10)(char *, unint64_t, uint64_t);
  uint64_t i;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, unint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;

  v0 = type metadata accessor for URLQueryItem(0);
  v37 = *(_QWORD *)(v0 - 8);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = URLComponents.queryItems.getter(v1);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = *(_QWORD *)(v4 + 16);
  if (!v6)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v7 = (_QWORD *)sub_1001FCB70((uint64_t)_swiftEmptyArrayStorage);
  v8 = (*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
  v32 = v5;
  v33 = v3;
  v9 = v5 + v8;
  v10 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v37 + 16);
  v35 = *(_QWORD *)(v37 + 72);
  v36 = v10;
  v34 = v0;
  for (i = v10(v3, v9, v0); ; i = v36(v3, v9, v0))
  {
    v13 = URLQueryItem.value.getter(i);
    if (v14)
      break;
LABEL_6:
    (*(void (**)(char *, uint64_t))(v37 + 8))(v3, v0);
    v9 += v35;
    if (!--v6)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v7;
    }
  }
  v38 = v14;
  v15 = v13;
  URLQueryItem.name.getter(v13);
  v16 = String.lowercased()();
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
  v39 = v7;
  v19 = sub_1002121A0(v16._countAndFlagsBits, (uint64_t)v16._object);
  v20 = v7[2];
  v21 = (v18 & 1) == 0;
  v22 = v20 + v21;
  if (!__OFADD__(v20, v21))
  {
    v23 = v18;
    if (v7[3] < v22)
    {
      sub_100223AD8(v22, isUniquelyReferenced_nonNull_native);
      v24 = sub_1002121A0(v16._countAndFlagsBits, (uint64_t)v16._object);
      if ((v23 & 1) != (v25 & 1))
        goto LABEL_26;
      v19 = v24;
      v26 = v38;
      v7 = v39;
      if ((v23 & 1) == 0)
        goto LABEL_16;
LABEL_4:
      v12 = (uint64_t *)(v7[7] + 16 * v19);
      swift_bridgeObjectRelease();
      *v12 = v15;
      v12[1] = v26;
LABEL_5:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = v33;
      v0 = v34;
      goto LABEL_6;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v26 = v38;
      v7 = v39;
      if ((v18 & 1) != 0)
        goto LABEL_4;
    }
    else
    {
      sub_100224450();
      v26 = v38;
      v7 = v39;
      if ((v23 & 1) != 0)
        goto LABEL_4;
    }
LABEL_16:
    v7[(v19 >> 6) + 8] |= 1 << v19;
    *(Swift::String *)(v7[6] + 16 * v19) = v16;
    v27 = (uint64_t *)(v7[7] + 16 * v19);
    *v27 = v15;
    v27[1] = v26;
    v28 = v7[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
      goto LABEL_25;
    v7[2] = v30;
    swift_bridgeObjectRetain();
    goto LABEL_5;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

_QWORD *sub_1002236E8(_QWORD *result, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 56;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_BYTE *)(*(_QWORD *)(a4 + 48) + v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_10022387C(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_39:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  v27 = -1 << *(_BYTE *)(a4 + 32);
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = 16 * v16;
    v21 = (uint64_t *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v23 = *v21;
    v22 = v21[1];
    v24 = (uint64_t *)(*(_QWORD *)(a4 + 56) + v20);
    v25 = *v24;
    v26 = v24[1];
    *v11 = v23;
    v11[1] = v22;
    v11[2] = v25;
    v11[3] = v26;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 4;
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        v9 = 0;
        v12 = v17;
      }
      else
      {
        v18 = *(_QWORD *)(v6 + 8 * v12);
        if (v18)
          goto LABEL_14;
        v19 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_33;
        v18 = *(_QWORD *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          v17 = v19;
          goto LABEL_18;
        }
        v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          v18 = *(_QWORD *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            v17 = v12;
            goto LABEL_18;
          }
          v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            v9 = 0;
            goto LABEL_37;
          }
          v18 = *(_QWORD *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              v17 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_42;
              if (v17 >= v14)
              {
                v9 = 0;
                v12 = v14 - 1;
                goto LABEL_37;
              }
              v18 = *(_QWORD *)(v6 + 8 * v17);
              ++v19;
              if (v18)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v9 = 0;
        v12 = v17 + 2;
      }
LABEL_37:
      v10 = v13;
LABEL_38:
      v7 = v27;
      goto LABEL_39;
    }
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

char *sub_100223A9C(uint64_t a1)
{
  return sub_10020A93C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

size_t sub_100223AB0(_QWORD *a1)
{
  return sub_10020AB34(0, a1[2], 0, a1);
}

size_t sub_100223AC4(_QWORD *a1)
{
  return sub_10020AB48(0, a1[2], 0, a1);
}

void sub_100223AD8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005574(&qword_100496EE8);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v42 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v40 = v3;
  v41 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v13 << 6);
      goto LABEL_34;
    }
    v24 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v24 >= v41)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v42 + 8 * v24);
    ++v13;
    if (!v26)
    {
      v13 = v24 + 1;
      if (v24 + 1 >= v41)
        goto LABEL_36;
      v26 = *(_QWORD *)(v42 + 8 * v13);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v13 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v13 >= v41)
              goto LABEL_36;
            v26 = *(_QWORD *)(v42 + 8 * v13);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v13 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v13 << 6);
LABEL_34:
    v32 = 16 * v23;
    v33 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v32);
    v35 = *v33;
    v34 = v33[1];
    v36 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v32);
    v37 = *v36;
    v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)(v44);
    String.hash(into:)(v44, v35, v34);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v17 == v29;
        if (v17 == v29)
          v17 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 16 * v18;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
    *v20 = v35;
    v20[1] = v34;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 56) + v19);
    *v21 = v37;
    v21[1] = v38;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v40;
  v25 = (_QWORD *)(v5 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_100223DFC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  Swift::Int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  char v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005574(&qword_100496EE0);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    swift_retain(v5);
    v13 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return;
        }
        if (v18 >= v37)
          goto LABEL_39;
        v19 = v38[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v37)
            goto LABEL_39;
          v19 = v38[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v37)
            {
LABEL_39:
              swift_release(v5);
              v3 = v36;
              if ((v39 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v5 + 32);
                if (v35 >= 64)
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v35;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v38[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_46;
                if (v13 >= v37)
                  goto LABEL_39;
                v19 = v38[v13];
                ++v20;
                if (v19)
                  goto LABEL_24;
              }
            }
            v13 = v20;
          }
        }
LABEL_24:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 24 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (void *)v21[2];
      v25 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
      if ((v39 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        v26 = v24;
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)(v40);
      if (v22)
      {
        Hasher._combine(_:)(1uLL);
        swift_bridgeObjectRetain();
        String.hash(into:)(v40, v23, v22);
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      v27 = Hasher._finalize()();
      v28 = -1 << *(_BYTE *)(v8 + 32);
      v29 = v27 & ~v28;
      v30 = v29 >> 6;
      if (((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }
          v33 = v30 == v32;
          if (v30 == v32)
            v30 = 0;
          v31 |= v33;
          v34 = *(_QWORD *)(v12 + 8 * v30);
        }
        while (v34 == -1);
        v14 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 24 * v14);
      *v15 = v23;
      v15[1] = v22;
      v15[2] = v24;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v14) = v25;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
  *v3 = v8;
}

void sub_10022413C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005574(&qword_100496F18);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)(v38);
    String.hash(into:)(v38, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_100224450()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  sub_100005574(&qword_100496EE8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_100224608()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v1 = v0;
  sub_100005574(&qword_100496EE0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 24 * v15);
    v18 = v17[1];
    v19 = (void *)v17[2];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = *v17;
    v22[1] = v18;
    v22[2] = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    v23 = v19;
    swift_bridgeObjectRetain();
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1002247D4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100005574(&qword_100496F18);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_100224988(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_100225858(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = sub_100224D70(v5);
  *a1 = v2;
  return result;
}

_QWORD *sub_1002249F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100005574(&qword_100497FC0);
  v4 = swift_allocObject(v3, v1 + 32, 7);
  v5 = j__malloc_size((const void *)v4);
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = 2 * v5 - 64;
  v6 = sub_1002236E8(&v9, (_BYTE *)(v4 + 32), v1, a1);
  v7 = v9;
  swift_bridgeObjectRetain();
  sub_1000F38AC(v7);
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return (_QWORD *)v4;
}

_QWORD *sub_100224AC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100005574(&qword_100497FA8);
  v4 = (_QWORD *)swift_allocObject(v3, 32 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 1;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 5);
  v7 = sub_10022387C((uint64_t)&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain();
  sub_1000F38AC(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

uint64_t sub_100224BAC()
{
  return swift_bridgeObjectRetain();
}

uint64_t _s9ComponentOwxx(uint64_t *a1)
{
  return sub_100224BC4(*a1, a1[1]);
}

uint64_t sub_100224BC4(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a2);
}

uint64_t _s9ComponentOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  sub_100224BAC();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s9ComponentOwca(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  sub_100224BAC();
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_100224BC4(v6, v7);
  return a1;
}

__n128 _s9ComponentOwtk(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t _s9ComponentOwta(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_100224BC4(v4, v5);
  return a1;
}

uint64_t _s9ComponentOwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s9ComponentOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_100224D4C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_100224D54(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for URL.Component()
{
  return &type metadata for URL.Component;
}

uint64_t sub_100224D70(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v20;
  Swift::Int v21;
  uint64_t *v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  Swift::Int v32;
  _OWORD *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  Swift::Int v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  Swift::Int v44;
  _QWORD *v45;
  uint64_t v46;
  __int128 *v47;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  char v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  Swift::Int v115;
  uint64_t v116;
  char *v117;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return sub_10022542C(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_151;
  v114 = result;
  v111 = a1;
  if (v3 <= 1)
  {
    v8 = _swiftEmptyArrayStorage;
    v117 = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v12 = _swiftEmptyArrayStorage[2];
      v11 = (char *)_swiftEmptyArrayStorage;
LABEL_117:
      result = (uint64_t)v11;
      v113 = v8;
      if (v12 >= 2)
      {
        v103 = *v111;
        do
        {
          v104 = v12 - 2;
          if (v12 < 2)
            goto LABEL_146;
          if (!v103)
            goto LABEL_159;
          v105 = result;
          v106 = *(_QWORD *)(result + 32 + 16 * v104);
          v107 = *(_QWORD *)(result + 32 + 16 * (v12 - 1) + 8);
          result = sub_10022550C((char *)(v103 + 32 * v106), (char *)(v103 + 32 * *(_QWORD *)(result + 32 + 16 * (v12 - 1))), v103 + 32 * v107, v117);
          if (v1)
            break;
          if (v107 < v106)
            goto LABEL_147;
          result = swift_isUniquelyReferenced_nonNull_native(v105);
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_100225830(v105);
            v105 = result;
          }
          if (v104 >= *(_QWORD *)(v105 + 16))
            goto LABEL_148;
          v108 = (_QWORD *)(v105 + 32 + 16 * v104);
          *v108 = v106;
          v108[1] = v107;
          v109 = *(_QWORD *)(v105 + 16);
          if (v12 > v109)
            goto LABEL_149;
          memmove((void *)(v105 + 32 + 16 * (v12 - 1)), (const void *)(v105 + 32 + 16 * v12), 16 * (v109 - v12));
          result = v105;
          *(_QWORD *)(v105 + 16) = v109 - 1;
          v12 = v109 - 1;
        }
        while (v109 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      v113[2] = 0;
      return swift_bridgeObjectRelease();
    }
    v113 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_100005574(&qword_100497FB0);
    result = static Array._allocateBufferUninitialized(minimumCapacity:)(v6, v7);
    *(_QWORD *)(result + 16) = v6;
    v113 = (_QWORD *)result;
    v117 = (char *)(result + 32);
  }
  v9 = 0;
  v10 = *a1;
  v112 = *a1 + 8;
  v110 = *a1 + 24;
  v11 = (char *)_swiftEmptyArrayStorage;
  v115 = v3;
  v116 = *a1;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_45;
    v14 = (uint64_t *)(v10 + 32 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (uint64_t *)(v10 + 32 * v13);
    result = *v17;
    v18 = v17[1];
    if (*v17 == v15 && v18 == v16)
    {
      v21 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_44;
      v20 = 0;
    }
    else
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v18, v15, v16, 1);
      v20 = result;
      v21 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v22 = (uint64_t *)(v112 + 32 * v21);
    do
    {
      v24 = *(v22 - 1);
      v25 = *v22;
      v26 = (uint64_t *)(v10 + 32 * v9);
      result = *v26;
      v27 = v26[1];
      if (*v26 == v24 && v27 == v25)
      {
        if ((v20 & 1) != 0)
          goto LABEL_37;
      }
      else
      {
        result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v27, v24, v25, 1);
        if (((v20 ^ result) & 1) != 0)
          goto LABEL_36;
      }
      v22 += 4;
      v23 = v21 + 1;
      v9 = v21;
      v21 = v23;
    }
    while (v23 < v3);
    v21 = v23;
LABEL_36:
    v9 = v21;
    if ((v20 & 1) != 0)
    {
LABEL_37:
      if (v21 < v13)
        goto LABEL_155;
      if (v13 < v21)
      {
        v29 = 32 * v21;
        v30 = 32 * v13;
        v31 = v21;
        v32 = v13;
        do
        {
          if (v32 != --v31)
          {
            if (!v10)
              goto LABEL_158;
            v33 = (_OWORD *)(v10 + v30);
            v34 = v10 + v29;
            v35 = *(_OWORD *)(v10 + v30);
            v36 = *(_QWORD *)(v10 + v30 + 16);
            v37 = *(_QWORD *)(v10 + v30 + 24);
            v38 = *(_OWORD *)(v10 + v29 - 16);
            *v33 = *(_OWORD *)(v10 + v29 - 32);
            v33[1] = v38;
            *(_OWORD *)(v34 - 32) = v35;
            *(_QWORD *)(v34 - 16) = v36;
            *(_QWORD *)(v34 - 8) = v37;
          }
          ++v32;
          v29 -= 32;
          v30 += 32;
        }
        while (v32 < v31);
      }
LABEL_44:
      v9 = v21;
    }
LABEL_45:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_150;
      if (v9 - v13 < v114)
        break;
    }
LABEL_66:
    if (v9 < v13)
      goto LABEL_145;
    result = swift_isUniquelyReferenced_nonNull_native(v11);
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_100225738(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
      v11 = (char *)result;
    }
    v53 = *((_QWORD *)v11 + 2);
    v52 = *((_QWORD *)v11 + 3);
    v12 = v53 + 1;
    if (v53 >= v52 >> 1)
    {
      result = (uint64_t)sub_100225738((char *)(v52 > 1), v53 + 1, 1, v11);
      v11 = (char *)result;
    }
    *((_QWORD *)v11 + 2) = v12;
    v54 = v11 + 32;
    v55 = &v11[16 * v53 + 32];
    *(_QWORD *)v55 = v13;
    *((_QWORD *)v55 + 1) = v9;
    if (v53)
    {
      v10 = v116;
      while (1)
      {
        v56 = v12 - 1;
        if (v12 >= 4)
        {
          v61 = &v54[2 * v12];
          v62 = *(v61 - 8);
          v63 = *(v61 - 7);
          v67 = __OFSUB__(v63, v62);
          v64 = v63 - v62;
          if (v67)
            goto LABEL_134;
          v66 = *(v61 - 6);
          v65 = *(v61 - 5);
          v67 = __OFSUB__(v65, v66);
          v59 = v65 - v66;
          v60 = v67;
          if (v67)
            goto LABEL_135;
          v68 = v12 - 2;
          v69 = &v54[2 * v12 - 4];
          v71 = *v69;
          v70 = v69[1];
          v67 = __OFSUB__(v70, v71);
          v72 = v70 - v71;
          if (v67)
            goto LABEL_136;
          v67 = __OFADD__(v59, v72);
          v73 = v59 + v72;
          if (v67)
            goto LABEL_138;
          if (v73 >= v64)
          {
            v91 = &v54[2 * v56];
            v93 = *v91;
            v92 = v91[1];
            v67 = __OFSUB__(v92, v93);
            v94 = v92 - v93;
            if (v67)
              goto LABEL_144;
            v84 = v59 < v94;
            goto LABEL_104;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v85 = *((_QWORD *)v11 + 4);
            v86 = *((_QWORD *)v11 + 5);
            v67 = __OFSUB__(v86, v85);
            v78 = v86 - v85;
            v79 = v67;
            goto LABEL_98;
          }
          v58 = *((_QWORD *)v11 + 4);
          v57 = *((_QWORD *)v11 + 5);
          v67 = __OFSUB__(v57, v58);
          v59 = v57 - v58;
          v60 = v67;
        }
        if ((v60 & 1) != 0)
          goto LABEL_137;
        v68 = v12 - 2;
        v74 = &v54[2 * v12 - 4];
        v76 = *v74;
        v75 = v74[1];
        v77 = __OFSUB__(v75, v76);
        v78 = v75 - v76;
        v79 = v77;
        if (v77)
          goto LABEL_139;
        v80 = &v54[2 * v56];
        v82 = *v80;
        v81 = v80[1];
        v67 = __OFSUB__(v81, v82);
        v83 = v81 - v82;
        if (v67)
          goto LABEL_141;
        if (__OFADD__(v78, v83))
          goto LABEL_143;
        if (v78 + v83 >= v59)
        {
          v84 = v59 < v83;
LABEL_104:
          if (v84)
            v56 = v68;
          goto LABEL_106;
        }
LABEL_98:
        if ((v79 & 1) != 0)
          goto LABEL_140;
        v87 = &v54[2 * v56];
        v89 = *v87;
        v88 = v87[1];
        v67 = __OFSUB__(v88, v89);
        v90 = v88 - v89;
        if (v67)
          goto LABEL_142;
        if (v90 < v78)
          goto LABEL_15;
LABEL_106:
        v95 = v56 - 1;
        if (v56 - 1 >= v12)
        {
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        if (!v10)
          goto LABEL_157;
        v96 = v11;
        v97 = v10;
        v98 = &v54[2 * v95];
        v99 = *v98;
        v100 = &v54[2 * v56];
        v101 = v100[1];
        result = sub_10022550C((char *)(v97 + 32 * *v98), (char *)(v97 + 32 * *v100), v97 + 32 * v101, v117);
        if (v1)
          goto LABEL_114;
        if (v101 < v99)
          goto LABEL_131;
        if (v56 > *((_QWORD *)v96 + 2))
          goto LABEL_132;
        *v98 = v99;
        v54[2 * v95 + 1] = v101;
        v102 = *((_QWORD *)v96 + 2);
        if (v56 >= v102)
          goto LABEL_133;
        v11 = v96;
        v12 = v102 - 1;
        result = (uint64_t)memmove(&v54[2 * v56], v100 + 2, 16 * (v102 - 1 - v56));
        *((_QWORD *)v96 + 2) = v102 - 1;
        v84 = v102 > 2;
        v10 = v116;
        if (!v84)
          goto LABEL_15;
      }
    }
    v12 = 1;
    v10 = v116;
LABEL_15:
    v3 = v115;
    if (v9 >= v115)
    {
      v8 = v113;
      goto LABEL_117;
    }
  }
  if (__OFADD__(v13, v114))
    goto LABEL_153;
  if (v13 + v114 >= v3)
    v39 = v3;
  else
    v39 = v13 + v114;
  if (v39 >= v13)
  {
    if (v9 != v39)
    {
      v40 = (_QWORD *)(v110 + 32 * v9);
      do
      {
        v41 = (uint64_t *)(v10 + 32 * v9);
        v42 = *v41;
        v43 = v41[1];
        v44 = v13;
        v45 = v40;
        do
        {
          result = *(v45 - 7);
          v46 = *(v45 - 6);
          v47 = (__int128 *)(v45 - 7);
          if (result == v42 && v46 == v43)
            break;
          result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v46, v42, v43, 1);
          if ((result & 1) == 0)
            break;
          if (!v10)
            goto LABEL_156;
          v50 = *v47;
          v49 = *(_OWORD *)(v45 - 5);
          *(v45 - 4) = *v45;
          v45 -= 4;
          v42 = v45[1];
          v43 = v45[2];
          v51 = v45[3];
          v47[2] = v50;
          v47[3] = v49;
          *(v45 - 3) = v42;
          *(v45 - 2) = v43;
          *(v45 - 1) = v51;
          ++v44;
        }
        while (v9 != v44);
        ++v9;
        v40 += 4;
      }
      while (v9 != v39);
      v9 = v39;
    }
    goto LABEL_66;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
  return result;
}

uint64_t sub_10022542C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 *v15;
  BOOL v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 32 * a3 + 24;
LABEL_5:
    v9 = (uint64_t *)(v7 + 32 * v4);
    v10 = *v9;
    v11 = v9[1];
    v12 = v6;
    v13 = (_QWORD *)v8;
    while (1)
    {
      result = *(v13 - 7);
      v14 = *(v13 - 6);
      v15 = (__int128 *)(v13 - 7);
      v16 = result == v10 && v14 == v11;
      if (v16 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v14, v10, v11, 1), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 32;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      v18 = *v15;
      v17 = *(_OWORD *)(v13 - 5);
      *(v13 - 4) = *v13;
      v13 -= 4;
      v10 = v13[1];
      v11 = v13[2];
      v19 = v13[3];
      v15[2] = v18;
      v15[3] = v17;
      *(v13 - 3) = v10;
      *(v13 - 2) = v11;
      *(v13 - 1) = v19;
      if (v4 == ++v12)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10022550C(char *__dst, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  BOOL v27;
  BOOL v28;
  __int128 v29;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = __src - __dst + 31;
  if (__src - __dst >= 0)
    v9 = __src - __dst;
  v10 = v9 >> 5;
  v11 = a3 - (_QWORD)__src;
  v12 = a3 - (_QWORD)__src + 31;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v12 = a3 - (_QWORD)__src;
  v13 = v12 >> 5;
  if (v10 >= v12 >> 5)
  {
    if (a4 != __src || &__src[32 * v13] <= a4)
      memmove(a4, __src, 32 * v13);
    v14 = &v4[32 * v13];
    if (v7 >= v6 || v11 < 32)
      goto LABEL_48;
    v20 = (char *)(a3 - 32);
    while (1)
    {
      v21 = v20 + 32;
      v22 = *((_QWORD *)v14 - 4);
      v23 = *((_QWORD *)v14 - 3);
      v24 = *((_QWORD *)v6 - 4);
      v25 = *((_QWORD *)v6 - 3);
      v26 = v6 - 32;
      v27 = v24 == v22 && v25 == v23;
      if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v22, v23, 1) & 1) == 0)
      {
        v26 = v14 - 32;
        if (v21 != v14)
        {
          v14 -= 32;
LABEL_45:
          v29 = *((_OWORD *)v26 + 1);
          *(_OWORD *)v20 = *(_OWORD *)v26;
          *((_OWORD *)v20 + 1) = v29;
          goto LABEL_46;
        }
        v28 = v20 >= v14;
        v14 -= 32;
        if (v28)
          goto LABEL_45;
      }
      else
      {
        if (v21 != v6)
        {
          v6 -= 32;
          goto LABEL_45;
        }
        v28 = v20 >= v6;
        v6 -= 32;
        if (v28)
          goto LABEL_45;
      }
LABEL_46:
      if (v6 > v7)
      {
        v20 -= 32;
        if (v14 > v4)
          continue;
      }
      goto LABEL_48;
    }
  }
  if (a4 != __dst || &__dst[32 * v10] <= a4)
    memmove(a4, __dst, 32 * v10);
  v14 = &v4[32 * v10];
  if ((unint64_t)v6 < a3 && v8 >= 32)
  {
    while (1)
    {
      v15 = *((_QWORD *)v6 + 1);
      v16 = *((_QWORD *)v4 + 1);
      v17 = *(_QWORD *)v4 == *(_QWORD *)v6 && v16 == v15;
      if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v4, v16, *(_QWORD *)v6, v15, 1) & 1) == 0)
        break;
      v18 = v6;
      v17 = v7 == v6;
      v6 += 32;
      if (!v17)
        goto LABEL_20;
LABEL_21:
      v7 += 32;
      if (v4 >= v14 || (unint64_t)v6 >= a3)
        goto LABEL_23;
    }
    v18 = v4;
    v17 = v7 == v4;
    v4 += 32;
    if (v17)
      goto LABEL_21;
LABEL_20:
    v19 = *((_OWORD *)v18 + 1);
    *(_OWORD *)v7 = *(_OWORD *)v18;
    *((_OWORD *)v7 + 1) = v19;
    goto LABEL_21;
  }
LABEL_23:
  v6 = v7;
LABEL_48:
  if (v6 != v4 || v6 >= &v4[(v14 - v4 + (v14 - v4 < 0 ? 0x1FuLL : 0)) & 0xFFFFFFFFFFFFFFE0])
    memmove(v6, v4, 32 * ((v14 - v4) / 32));
  return 1;
}

char *sub_100225738(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_100497FB8);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100225830(uint64_t a1)
{
  return sub_100225738(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_100225844(uint64_t a1)
{
  return sub_10022D200(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_100225858(_QWORD *a1)
{
  return sub_10022D2E8(0, a1[2], 0, a1);
}

uint64_t static NSUserDefaults.observe<A>(_:in:valueChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (**v37)();
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v43 = a4;
  v44 = a5;
  v42 = a2;
  v11 = *(_QWORD *)(a6 - 8);
  __chkstk_darwin(a1);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = _s20KeyValueRegistrationC10IdentifierVMa(0);
  v39 = *(_QWORD *)(v14 - 8);
  v15 = *(_QWORD *)(v39 + 64);
  v16 = __chkstk_darwin(v14);
  v40 = (uint64_t)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v16);
  v41 = (uint64_t)&v39 - v18;
  __chkstk_darwin(v17);
  v20 = (char *)&v39 - v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, a6);
  v21 = *(_QWORD *)(a7 + 40);
  v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a7 + 8) + 8) + 8);
  swift_bridgeObjectRetain();
  v23 = String.init<A>(_:)(v13, a6, v21, v22);
  v25 = v24;
  _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v26 = &v20[*(int *)(v14 + 20)];
  *(_QWORD *)v26 = v42;
  *((_QWORD *)v26 + 1) = a3;
  v27 = (uint64_t *)&v20[*(int *)(v14 + 24)];
  *v27 = v23;
  v27[1] = v25;
  if (qword_100496D68 != -1)
    swift_once(&qword_100496D68, sub_1002279B4);
  v28 = qword_100497FC8;
  v29 = *(_QWORD *)(qword_100497FC8
                  + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_lock);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v29 + 16));
  v30 = v45;
  sub_100227A88(v28, (uint64_t)v20, v43, v44);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v29 + 16));
  if (v30)
  {
    sub_100006798((uint64_t)v20, _s20KeyValueRegistrationC10IdentifierVMa);
  }
  else
  {
    v31 = v41;
    sub_1001FFCE4((uint64_t)v20, v41);
    v32 = v40;
    sub_1000648AC((uint64_t)v20, v40, _s20KeyValueRegistrationC10IdentifierVMa);
    v33 = *(unsigned __int8 *)(v39 + 80);
    v34 = (v33 + 16) & ~v33;
    v35 = swift_allocObject(&unk_1004589D0, v34 + v15, v33 | 7);
    sub_1000648AC(v32, v35 + v34, _s20KeyValueRegistrationC10IdentifierVMa);
    v36 = type metadata accessor for NSUserDefaults.KeyValueRegistration(0);
    v29 = swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
    sub_1000648AC(v31, v29 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_identifier, _s20KeyValueRegistrationC10IdentifierVMa);
    v37 = (void (**)())(v29 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_onInvalidate);
    *v37 = sub_1001FFE08;
    v37[1] = (void (*)())v35;
  }
  return v29;
}

uint64_t sub_100225B0C(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  char v22;
  uint64_t v23;
  int64_t v24;
  _QWORD v25[4];
  uint64_t (*v26)(_QWORD *);

  v26 = a1;
  v4 = v3;
  v23 = a3 + 64;
  v6 = 1 << *(_BYTE *)(a3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a3 + 64);
  v24 = (unint64_t)(v6 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  if (!v8)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v11 | (v10 << 6); ; i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 24 * i);
    v18 = *v16;
    v17 = v16[1];
    v19 = (void *)v16[2];
    v20 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * i);
    v25[0] = *v16;
    v25[1] = v17;
    v25[2] = v19;
    v25[3] = v20;
    swift_bridgeObjectRetain();
    v21 = v19;
    swift_bridgeObjectRetain();
    v22 = v26(v25);
    if (v4)
    {
      swift_release(a3);
      swift_bridgeObjectRelease(v20);

      swift_bridgeObjectRelease(v17);
      return v18;
    }
    if ((v22 & 1) != 0)
    {
      swift_release(a3);
      return v18;
    }
    swift_bridgeObjectRelease(v20);

    result = swift_bridgeObjectRelease(v17);
    if (v8)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v10++, 1))
      break;
    if (v10 >= v24)
      goto LABEL_28;
    v14 = *(_QWORD *)(v23 + 8 * v10);
    if (!v14)
    {
      v15 = v10 + 1;
      if (v10 + 1 >= v24)
        goto LABEL_28;
      v14 = *(_QWORD *)(v23 + 8 * v15);
      if (v14)
        goto LABEL_16;
      v15 = v10 + 2;
      if (v10 + 2 >= v24)
        goto LABEL_28;
      v14 = *(_QWORD *)(v23 + 8 * v15);
      if (v14)
        goto LABEL_16;
      v15 = v10 + 3;
      if (v10 + 3 >= v24)
        goto LABEL_28;
      v14 = *(_QWORD *)(v23 + 8 * v15);
      if (v14)
      {
LABEL_16:
        v10 = v15;
        goto LABEL_17;
      }
      v15 = v10 + 4;
      if (v10 + 4 < v24)
      {
        v14 = *(_QWORD *)(v23 + 8 * v15);
        if (!v14)
        {
          while (1)
          {
            v10 = v15 + 1;
            if (__OFADD__(v15, 1))
              goto LABEL_31;
            if (v10 >= v24)
              goto LABEL_28;
            v14 = *(_QWORD *)(v23 + 8 * v10);
            ++v15;
            if (v14)
              goto LABEL_17;
          }
        }
        goto LABEL_16;
      }
LABEL_28:
      swift_release(a3);
      return 0;
    }
LABEL_17:
    v8 = (v14 - 1) & v14;
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t UserDefault.init(wrappedValue:defaults:key:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v12;
  char *v13;
  uint64_t v14;

  *(_QWORD *)a7 = a2;
  v12 = type metadata accessor for UserDefault(0, a4, a5, a6);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(&a7[*(int *)(v12 + 44)], a3, a4);
  v13 = &a7[*(int *)(v12 + 48)];
  v14 = type metadata accessor for Optional(0, a5);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v13, a1, v14);
}

uint64_t UserDefault.init<A>(wrappedValue:defaults:key:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v25 = a2;
  v26 = a7;
  v24 = a9;
  __chkstk_darwin(a1);
  v16 = (uint64_t *)((char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = type metadata accessor for Optional(0, v17);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v23 - v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))((char *)&v23 - v20, a1, v18);
  dispatch thunk of RawRepresentable.rawValue.getter(v16, a6, a8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 8))(a3, a6);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a1, v18);
  return UserDefault.init(wrappedValue:defaults:key:)((uint64_t)v21, v25, (uint64_t)v16, a4, a5, v26, v24);
}

uint64_t UserDefault.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  void (*v17)(char *, _QWORD, uint64_t, uint64_t);
  void (*v19)(uint64_t, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[2];

  v3 = v2;
  v22 = a2;
  v5 = *(_QWORD *)(a1 - 8);
  v6 = __chkstk_darwin(a1);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v6 + 24);
  v10 = type metadata accessor for Optional(0, v9);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v21 - v12;
  NSUserDefaults.subscript.getter(v2 + *(int *)(a1 + 44), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32), v23);
  v14 = sub_100005574(&qword_100497470);
  v15 = swift_dynamicCast(v13, v23, v14, v9, 6);
  v16 = *(_QWORD *)(v9 - 8);
  v17 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56);
  v17(v13, v15 ^ 1u, 1, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v3, a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v9) == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))(v22, &v8[*(int *)(a1 + 48)], v10);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
    v19 = *(void (**)(uint64_t, char *, uint64_t))(v16 + 32);
    v20 = v22;
    v19(v22, v13, v9);
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v17)(v20, 0, 1, v9);
  }
}

double NSUserDefaults.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  void *v4;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  id v14;
  double result;
  uint64_t v16;

  __chkstk_darwin(a1);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v9);
  String.init<A>(_:)(v9, a2, *(_QWORD *)(a3 + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 8) + 8));
  v12 = v11;
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  v14 = objc_msgSend(v4, "objectForKey:", v13);

  if (v14)
  {
    _bridgeAnyObjectToAny(_:)(v14);
    swift_unknownObjectRelease(v14);
  }
  else
  {
    result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

uint64_t UserDefault.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_10022A354(a1, a2);
  v4 = type metadata accessor for Optional(0, *(_QWORD *)(a2 + 24));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

uint64_t NSUserDefaults.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSString v19;
  uint64_t v21;
  uint64_t v22;
  NSString v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v5 = v4;
  v10 = *(_QWORD *)(a3 - 8);
  v11 = __chkstk_darwin(a1);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10022A4A8(v11, (uint64_t)&v24);
  if (v25)
  {
    sub_10009B168(&v24, &v26);
    v14 = v27;
    v15 = sub_10000ABC8(&v26, v27);
    v16 = _bridgeAnythingToObjectiveC<A>(_:)(v15, v14);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a2, a3);
    String.init<A>(_:)(v13, a3, *(_QWORD *)(a4 + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 8) + 8));
    v18 = v17;
    v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v18);
    objc_msgSend(v5, "setObject:forKey:", v16, v19);
    swift_unknownObjectRelease(v16);

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, a3);
    sub_1002015F8(a1);
    return sub_10000682C(&v26);
  }
  else
  {
    sub_1002015F8((uint64_t)&v24);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a2, a3);
    String.init<A>(_:)(v13, a3, *(_QWORD *)(a4 + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 8) + 8));
    v22 = v21;
    v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v22);
    objc_msgSend(v5, "removeObjectForKey:", v23);

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, a3);
    return sub_1002015F8(a1);
  }
}

void (*UserDefault.wrappedValue.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = type metadata accessor for Optional(0, *(_QWORD *)(a2 + 24));
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v9 = malloc(v8);
  v5[5] = v9;
  UserDefault.wrappedValue.getter(a2, (uint64_t)v9);
  return sub_100226450;
}

void sub_100226450(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, uint64_t);

  v2 = *a1;
  v3 = (void *)(*a1)[4];
  v4 = (void *)(*a1)[5];
  v5 = (*a1)[2];
  v6 = (*a1)[3];
  v7 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    sub_10022A354((uint64_t)v3, v7);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
  }
  else
  {
    sub_10022A354((*a1)[5], v7);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v8(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t UserDefault.defaultValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 48);
  v5 = type metadata accessor for Optional(0, *(_QWORD *)(a1 + 24));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

void NSUserDefaults.Suite.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)(a1, a2, a3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t static NSUserDefaults.Suite.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
    return a4 == 0;
  if (!a4)
    return 0;
  if (a1 == a3 && a2 == a4)
    return 1;
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0);
}

Swift::Int NSUserDefaults.Suite.hashValue.getter(uint64_t a1, uint64_t a2)
{
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  if (a2)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)(v5, a1, a2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

Swift::Int sub_100226648()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4);
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)(v4, v1, v2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void sub_1002266B4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[1];
  if (v3)
  {
    v4 = *v1;
    Hasher._combine(_:)(1uLL);
    String.hash(into:)(a1, v4, v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int sub_100226718()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4);
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)(v4, v1, v2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t sub_100226780(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1[1];
  v4 = a2[1];
  if (!v3)
    return v4 == 0;
  if (!v4)
    return 0;
  v5 = *a1;
  if (v5 == *a2 && v3 == v4)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v5, v3, *a2, v4, 0);
}

id NSUserDefaults.init(suite:)(uint64_t a1, uint64_t a2)
{
  id v3;
  NSString v4;
  id v5;

  if (!a2)
    return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), "initWithSuiteName:", 0);
  v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "initWithSuiteName:", v4);

  swift_bridgeObjectRelease(a2);
  if (v5)

  return v5;
}

void (*NSUserDefaults.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t *a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  size_t v11;

  v9 = malloc(0x70uLL);
  *a1 = v9;
  v9[8] = a3;
  v9[9] = a4;
  v10 = *(_QWORD *)(a3 - 8);
  v9[10] = v4;
  v9[11] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v9[12] = malloc(v11);
  v9[13] = malloc(v11);
  (*(void (**)(void))(v10 + 16))();
  NSUserDefaults.subscript.getter(a2, a3, a4, v9);
  return sub_100226920;
}

void sub_100226920(uint64_t *a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (uint64_t *)*a1;
  v4 = *(void **)(*a1 + 96);
  v3 = *(void **)(*a1 + 104);
  if ((a2 & 1) != 0)
  {
    v5 = v2[11];
    v7 = v2[8];
    v6 = v2[9];
    sub_10022A4A8(*a1, (uint64_t)(v2 + 4));
    (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v4, v3, v7);
    NSUserDefaults.subscript.setter((uint64_t)(v2 + 4), (uint64_t)v4, v7, v6);
    sub_1002015F8((uint64_t)v2);
  }
  else
  {
    NSUserDefaults.subscript.setter(*a1, v2[13], v2[8], v2[9]);
  }
  free(v3);
  free(v4);
  free(v2);
}

uint64_t NSUserDefaults.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  double v12;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a2);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v11 = (char *)&v14 - v10;
  dispatch thunk of RawRepresentable.rawValue.getter((uint64_t *)((char *)&v14 - v10), a1, a2);
  v12 = NSUserDefaults.subscript.getter((uint64_t)v11, AssociatedTypeWitness, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t, double))(v9 + 8))(v11, AssociatedTypeWitness, v12);
}

uint64_t NSUserDefaults.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_10022A4F0(a1, a2, a3, a4, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
}

void (*NSUserDefaults.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t *a1, char a2)
{
  uint64_t v5;
  _QWORD *v10;
  uint64_t v11;

  v10 = malloc(0x70uLL);
  *a1 = v10;
  v10[10] = a5;
  v10[11] = v5;
  v10[8] = a3;
  v10[9] = a4;
  v11 = *(_QWORD *)(a3 - 8);
  v10[12] = v11;
  v10[13] = malloc(*(_QWORD *)(v11 + 64));
  (*(void (**)(void))(v11 + 16))();
  NSUserDefaults.subscript.getter(a3, a4, a5, v10);
  return sub_100226B8C;
}

void sub_100226B8C(uint64_t *a1, char a2)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (_QWORD *)*a1;
  if ((a2 & 1) != 0)
  {
    v4 = v2[12];
    v3 = (void *)v2[13];
    v5 = v2[10];
    v7 = v2[8];
    v6 = v2[9];
    sub_10022A4A8(*a1, (uint64_t)(v2 + 4));
    sub_10022A4F0((uint64_t)(v2 + 4), (uint64_t)v3, v7, v6, v5);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v7);
    sub_1002015F8((uint64_t)v2);
  }
  else
  {
    v8 = v2[12];
    v3 = (void *)v2[13];
    v9 = v2[8];
    sub_10022A4F0(*a1, (uint64_t)v3, v9, v2[9], v2[10]);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v3, v9);
  }
  free(v3);
  free(v2);
}

uint64_t _sSo14NSUserDefaultsC14MusicUtilitiesE8MigratorV3keyxvg_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 44));
}

uint64_t NSUserDefaults.Migrator.init(userDefaults:key:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  char *v8;

  *a6 = a1;
  v8 = (char *)a6 + *(int *)(type metadata accessor for NSUserDefaults.Migrator(0, a3, a4, a5) + 44);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(v8, a2, a3);
}

uint64_t NSUserDefaults.Migrator.init<A>(userDefaults:key:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v14 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v16 = (uint64_t *)((char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  dispatch thunk of RawRepresentable.rawValue.getter(v16, v17, v18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a2, a5);
  *(_QWORD *)a7 = a1;
  v19 = type metadata accessor for NSUserDefaults.Migrator(0, a3, a4, a6);
  return (*(uint64_t (**)(char *, _QWORD *, uint64_t))(v14 + 32))(&a7[*(int *)(v19 + 44)], v16, a3);
}

uint64_t NSUserDefaults.Migrator.migrateValue<A, B>(to:valueTransformer:destination:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t WitnessTable;
  uint64_t v37;
  __n128 v38;
  id v39;
  uint64_t v41;
  uint64_t v42;
  id *v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(id *, uint64_t);
  id v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  id *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *);
  id v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  _OWORD v81[2];
  char *v82;

  v9 = v8;
  v59 = a7;
  v71 = a4;
  v74 = a3;
  v75 = a2;
  v66 = a1;
  v60 = a8;
  v72 = a6;
  v65 = *(_QWORD *)(a6 - 8);
  v11 = __chkstk_darwin(a1);
  v70 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v11);
  v62 = (id *)((char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = *(_QWORD *)(v16 + 16);
  v73 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v14);
  v61 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = v19;
  v20 = type metadata accessor for Optional(0, v19);
  v67 = *(_QWORD *)(v20 - 8);
  v68 = v20;
  v21 = __chkstk_darwin(v20);
  v64 = (char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v82 = (char *)&v59 - v23;
  v24 = *(_QWORD *)(a5 + 24);
  v25 = type metadata accessor for Optional(0, v24);
  v26 = *(_QWORD *)(v25 - 8);
  v77 = v25;
  v78 = v26;
  __chkstk_darwin(v25);
  v28 = (char *)&v59 - v27;
  v29 = v8 + *(int *)(a5 + 44);
  v30 = *(_QWORD *)(a5 + 32);
  NSUserDefaults.subscript.getter(v29, v17, v30, v81);
  sub_10022A4A8((uint64_t)v81, (uint64_t)&v79);
  v31 = sub_100005574(&qword_100497470);
  v32 = swift_dynamicCast(v28, &v79, v31, v24, 6);
  v33 = *(_QWORD *)(v24 - 8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v28, v32 ^ 1u, 1, v24);
  sub_10022A4A8((uint64_t)v81, (uint64_t)&v79);
  v34 = *((_QWORD *)&v80 + 1);
  sub_1002015F8((uint64_t)&v79);
  if (v34 && (*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v28, 1, v24) == 1)
  {
    v35 = _s8MigratorV5ErrorOMa(0, v17, v24, v30);
    WitnessTable = swift_getWitnessTable(&unk_100394840, v35);
    swift_allocError(v35, WitnessTable, 0, 0);
    v38.n128_f64[0] = (*(double (**)(uint64_t, uint64_t, uint64_t))(v73 + 16))(v37, v29, v17);
    swift_willThrow(v38);
LABEL_5:
    sub_1002015F8((uint64_t)v81);
    return (*(uint64_t (**)(char *, uint64_t))(v78 + 8))(v28, v77);
  }
  v39 = v76;
  v75(v28);
  if (v39)
    goto LABEL_5;
  v41 = (uint64_t)v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v61, v29, v17);
  v79 = 0u;
  v80 = 0u;
  NSUserDefaults.subscript.setter((uint64_t)&v79, v41, v17, v30);
  v42 = v63;
  v43 = v62;
  (*(void (**)(id *, uint64_t, uint64_t))(v63 + 16))(v62, v9, a5);
  v44 = v71;
  if (v71)
  {
    v76 = v71;
  }
  else
  {
    v45 = *v43;
    v44 = v71;
    v76 = v45;
  }
  v46 = v72;
  v47 = (uint64_t)v70;
  v49 = v67;
  v48 = v68;
  v50 = *(void (**)(id *, uint64_t))(v42 + 8);
  v51 = v44;
  v50(v43, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16))(v47, v66, v46);
  v52 = v64;
  (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v64, v82, v48);
  v53 = v69;
  v54 = *(_QWORD *)(v69 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v69) == 1)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v52, v48);
    v79 = 0u;
    v80 = 0u;
  }
  else
  {
    *((_QWORD *)&v80 + 1) = v53;
    v55 = sub_1000207D4(&v79);
    (*(void (**)(_QWORD *, char *, uint64_t))(v54 + 32))(v55, v52, v53);
  }
  v56 = v60;
  v57 = v76;
  v58 = v77;
  NSUserDefaults.subscript.setter((uint64_t)&v79, v47, v72, v59);

  sub_1002015F8((uint64_t)v81);
  (*(void (**)(uint64_t, char *, uint64_t))(v49 + 32))(v56, v82, v48);
  return (*(uint64_t (**)(char *, uint64_t))(v78 + 8))(v28, v58);
}

uint64_t NSUserDefaults.Migrator.migrateValue<A, B>(to:valueTransformer:destination:)@<X0>(void (*a1)(char *)@<X1>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  v23 = a6;
  v21 = a3;
  v22 = a4;
  v20 = a9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a7);
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v17 = (char *)&v19 - v16;
  dispatch thunk of RawRepresentable.rawValue.getter((uint64_t *)((char *)&v19 - v16), a5, a7);
  NSUserDefaults.Migrator.migrateValue<A, B>(to:valueTransformer:destination:)((uint64_t)v17, a1, a2, v21, v22, AssociatedTypeWitness, v20, a8);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, AssociatedTypeWitness);
}

double NSUserDefaults.Migrator.migrateValue<A>(to:destination:)@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  double result;

  v12 = *(_QWORD *)(a3 + 24);
  v13 = swift_allocObject(&unk_1004589F8, 24, 7);
  *(_QWORD *)(v13 + 16) = v12;
  NSUserDefaults.Migrator.migrateValue<A, B>(to:valueTransformer:destination:)(a1, (void (*)(char *))sub_1001FDD40, v13, a2, a3, a4, a5, a6);
  *(_QWORD *)&result = swift_release(v13).n128_u64[0];
  return result;
}

uint64_t (*static NSUserDefaults.ValueTransformer<>.identity.getter(uint64_t a1))@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(swift_allocObject(&unk_1004589F8, 24, 7) + 16) = a1;
  return sub_1001FDD40;
}

uint64_t NSUserDefaults.Migrator.migrateValue<A>(to:destination:)@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  double v15;
  uint64_t v17;

  v17 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4);
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v14 = (char *)&v17 - v13;
  dispatch thunk of RawRepresentable.rawValue.getter((uint64_t *)((char *)&v17 - v13), a3, a4);
  v15 = NSUserDefaults.Migrator.migrateValue<A>(to:destination:)((uint64_t)v14, a1, a2, AssociatedTypeWitness, v17, a6);
  return (*(uint64_t (**)(char *, uint64_t, double))(v12 + 8))(v14, AssociatedTypeWitness, v15);
}

uint64_t NSUserDefaults.migrateValue<A, B>(for:to:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  void *v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  double v20;
  uint64_t v22;
  void *v23;

  v22 = a5;
  v23 = a2;
  v9 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for NSUserDefaults.Migrator(0, v12, v13, v14);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v22 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a3);
  *(_QWORD *)v18 = v5;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v18[*(int *)(v15 + 44)], v11, a3);
  v19 = v5;
  v20 = NSUserDefaults.Migrator.migrateValue<A>(to:destination:)(a1, v23, v15, a3, a4, v22);
  return (*(uint64_t (**)(char *, uint64_t, double))(v16 + 8))(v18, v15, v20);
}

uint64_t NSUserDefaults.migrateValue<A, B>(for:to:)@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v14 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v12 = (char *)&v14 - v11;
  dispatch thunk of RawRepresentable.rawValue.getter((uint64_t *)((char *)&v14 - v11), a2, a3);
  NSUserDefaults.migrateValue<A, B>(for:to:)((uint64_t)v12, a1, AssociatedTypeWitness, v14, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
}

Swift::Void __swiftcall NSUserDefaults.KeyValueRegistration.invalidate()()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_onInvalidate))();
}

uint64_t NSUserDefaults.KeyValueRegistration.deinit()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_onInvalidate;
  (*(void (**)(void))(v0 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_onInvalidate))();
  sub_100006798(v0 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_identifier, _s20KeyValueRegistrationC10IdentifierVMa);
  swift_release(*(_QWORD *)(v1 + 8));
  return v0;
}

uint64_t NSUserDefaults.KeyValueRegistration.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_onInvalidate;
  (*(void (**)(void))(v0 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_onInvalidate))();
  sub_100006798(v0 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_identifier, _s20KeyValueRegistrationC10IdentifierVMa);
  swift_release(*(_QWORD *)(v1 + 8));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

void sub_100227834(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_100496D68 != -1)
    swift_once(&qword_100496D68, sub_1002279B4);
  v2 = qword_100497FC8;
  v3 = *(_QWORD *)(qword_100497FC8
                 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_lock);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v3 + 16));
  sub_10022807C(v2, a1);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + 16));
}

uint64_t static NSUserDefaults.observe<A>(_:in:valueChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v19 = a5;
  v20 = a8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a7);
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v16 = (char *)&v19 - v15;
  dispatch thunk of RawRepresentable.rawValue.getter((uint64_t *)((char *)&v19 - v15), a6, a7);
  v17 = static NSUserDefaults.observe<A>(_:in:valueChanged:)((uint64_t)v16, a2, a3, a4, v19, AssociatedTypeWitness, v20);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
  return v17;
}

id sub_1002279B4()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)_s9_ObserverCMa()), "init");
  qword_100497FC8 = (uint64_t)result;
  return result;
}

uint64_t sub_100227A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t *v15;
  id v16;
  uint64_t v17;
  id v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  id v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t *v34;
  __n128 v35;
  uint64_t v37;
  id v38;
  NSString v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v51;
  id v52;
  char v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[16];
  uint64_t v63;
  _QWORD v64[3];
  _BYTE v65[24];
  uint64_t v66;

  v58 = a3;
  v59 = a4;
  v57 = _s9_ObserverC18HandlerAssociationVMa(0);
  v60 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = a1;
  v8 = (uint64_t *)(a1
                 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_registeredSuites);
  swift_beginAccess(a1+ OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_registeredSuites, v65, 0, 0);
  v9 = *v8;
  v63 = a2;
  swift_bridgeObjectRetain();
  v10 = sub_100225B0C((uint64_t (*)(_QWORD *))sub_10022C61C, (uint64_t)v62, v9);
  v12 = v11;
  v14 = v13;
  swift_bridgeObjectRelease();
  v61 = a2;
  if (v14)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000087DC(0, &qword_100498418, NSUserDefaults_ptr);
    v15 = (uint64_t *)(a2 + *(int *)(_s20KeyValueRegistrationC10IdentifierVMa(0) + 20));
    v10 = *v15;
    v12 = v15[1];
    swift_bridgeObjectRetain();
    v16 = NSUserDefaults.init(suite:)(v10, v12);
    if (!v16)
    {
      v33 = sub_10022C638();
      swift_allocError(&_s5ErrorON, v33, 0, 0);
      *v34 = v10;
      v34[1] = v12;
      swift_bridgeObjectRetain();
      return swift_willThrow(v35);
    }
    v14 = v16;
    swift_bridgeObjectRetain();
  }
  v17 = *v8;
  if (*(_QWORD *)(*v8 + 16))
  {
    swift_bridgeObjectRetain();
    v18 = v14;
    swift_bridgeObjectRetain();
    v19 = sub_100212320(v10, v12, (uint64_t)v18);
    if ((v20 & 1) != 0)
    {
      v55 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v19);
      swift_bridgeObjectRetain();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v55 = sub_1001FCDCC((uint64_t)_swiftEmptyArrayStorage);
LABEL_10:
  v21 = *v8;
  if (!*(_QWORD *)(*v8 + 16))
  {
LABEL_20:
    v32 = _swiftEmptyArrayStorage;
    goto LABEL_21;
  }
  swift_bridgeObjectRetain();
  v22 = v14;
  swift_bridgeObjectRetain();
  v23 = sub_100212320(v10, v12, (uint64_t)v22);
  if ((v24 & 1) == 0)
  {

    swift_bridgeObjectRelease();
LABEL_19:
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  v25 = *(_QWORD *)(*(_QWORD *)(v21 + 56) + 8 * v23);
  swift_bridgeObjectRetain();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v26 = _s20KeyValueRegistrationC10IdentifierVMa(0);
  if (!*(_QWORD *)(v25 + 16))
    goto LABEL_19;
  v27 = (uint64_t *)(v61 + *(int *)(v26 + 24));
  v28 = *v27;
  v29 = v27[1];
  swift_bridgeObjectRetain();
  v30 = sub_1002121A0(v28, v29);
  if ((v31 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  v32 = *(_QWORD **)(*(_QWORD *)(v25 + 56) + 8 * v30);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_21:
  v37 = v32[2];
  v56 = v10;
  if (!v37)
  {
    _s20KeyValueRegistrationC10IdentifierVMa(0);
    v38 = v14;
    v39 = String._bridgeToObjectiveC()();
    objc_msgSend(v38, "addObserver:forKeyPath:options:context:", v54, v39, 0, 0);

  }
  v40 = type metadata accessor for UUID(0);
  v41 = v61;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v7, v61, v40);
  v42 = &v7[*(int *)(v57 + 20)];
  v43 = v59;
  *(_QWORD *)v42 = v58;
  *((_QWORD *)v42 + 1) = v43;
  swift_retain(v43);
  if ((swift_isUniquelyReferenced_nonNull_native(v32) & 1) == 0)
    v32 = (_QWORD *)sub_10020AB48(0, v32[2] + 1, 1, v32);
  v45 = v32[2];
  v44 = v32[3];
  if (v45 >= v44 >> 1)
    v32 = (_QWORD *)sub_10020AB48(v44 > 1, v45 + 1, 1, v32);
  v32[2] = v45 + 1;
  sub_1000648AC((uint64_t)v7, (uint64_t)v32+ ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))+ *(_QWORD *)(v60 + 72) * v45, _s9_ObserverC18HandlerAssociationVMa);
  v46 = (uint64_t *)(v41 + *(int *)(_s20KeyValueRegistrationC10IdentifierVMa(0) + 24));
  v47 = *v46;
  v48 = v46[1];
  swift_bridgeObjectRetain();
  v49 = v55;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v55);
  v64[0] = v49;
  sub_100229B0C((uint64_t)v32, v47, v48, isUniquelyReferenced_nonNull_native);
  v51 = v64[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess(v8, v64, 33, 0);
  swift_bridgeObjectRetain();
  v52 = v14;
  v53 = swift_isUniquelyReferenced_nonNull_native(*v8);
  v66 = *v8;
  *v8 = 0x8000000000000000;
  sub_100229984(v51, v56, v12, v52, v53);
  *v8 = v66;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess(v64);

  return swift_bridgeObjectRelease();
}

uint64_t _s20KeyValueRegistrationC10IdentifierVMa(uint64_t a1)
{
  return sub_1000091AC(a1, qword_1004983D0, (uint64_t)&_s20KeyValueRegistrationC10IdentifierVMn);
}

uint64_t sub_100227FC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(_s20KeyValueRegistrationC10IdentifierVMa(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v5 = v2 | 7;
  v6 = v0 + v3;
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4, v5);
}

uint64_t type metadata accessor for NSUserDefaults.KeyValueRegistration(uint64_t a1)
{
  return sub_1000091AC(a1, qword_1004981A0, (uint64_t)&nominal type descriptor for NSUserDefaults.KeyValueRegistration);
}

uint64_t type metadata accessor for UserDefault(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100031DCC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UserDefault);
}

uint64_t sub_10022807C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  id v33;
  NSString v34;
  id v35;
  uint64_t (*v36)(_QWORD);
  uint64_t *v37;
  void (*v38)(_QWORD *);
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  char isUniquelyReferenced_nonNull_native;
  _QWORD v44[2];
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  void (*v48)(_BYTE *, _QWORD);
  char v49[16];
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[4];
  _BYTE v53[32];
  char v54[32];
  uint64_t v55;

  v5 = _s9_ObserverC18HandlerAssociationVMa(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (uint64_t *)(a1
                 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_registeredSuites);
  swift_beginAccess(a1+ OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_registeredSuites, v54, 0, 0);
  v10 = *v9;
  v50 = a2;
  swift_bridgeObjectRetain();
  v48 = (void (*)(_BYTE *, _QWORD))sub_100225B0C((uint64_t (*)(_QWORD *))sub_10022C68C, (uint64_t)v49, v10);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v17 = v2;
  result = swift_bridgeObjectRelease();
  if (v14)
  {
    v19 = _s20KeyValueRegistrationC10IdentifierVMa(0);
    if (*(_QWORD *)(v16 + 16))
    {
      v47 = a1;
      v20 = (uint64_t *)(a2 + *(int *)(v19 + 24));
      v21 = *v20;
      v22 = v20[1];
      v46 = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v23 = sub_1002121A0(v21, v22);
      if ((v24 & 1) != 0)
      {
        v45 = v12;
        v25 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v23);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v55 = v25;
        v26 = *(_QWORD *)(v25 + 16);
        if (v26)
        {
          v44[1] = v17;
          v27 = v25 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
          v28 = *(_QWORD *)(v6 + 72);
          swift_bridgeObjectRetain();
          v29 = 0;
          while ((static UUID.== infix(_:_:)(v27, a2) & 1) == 0)
          {
            ++v29;
            v27 += v28;
            if (v26 == v29)
            {

              swift_bridgeObjectRelease_n(v25, 2);
              goto LABEL_11;
            }
          }
          swift_bridgeObjectRelease();
          v30 = v45;
          swift_bridgeObjectRetain();
          v31 = v14;
          sub_10021D12C(v29, (uint64_t)v8);
          sub_100006798((uint64_t)v8, _s9_ObserverC18HandlerAssociationVMa);
          v32 = v55;
          if (!*(_QWORD *)(v55 + 16))
          {
            v33 = v31;
            v34 = String._bridgeToObjectiveC()();
            objc_msgSend(v33, "removeObserver:forKeyPath:", v47, v34);

          }
          swift_bridgeObjectRetain();
          v35 = v31;
          v36 = sub_1002289F4((uint64_t)v53);
          v38 = sub_1002284AC(v52, (uint64_t)v48, v30, v35);
          v39 = *v37;
          if (*v37)
          {
            v40 = v37;
            v48 = (void (*)(_BYTE *, _QWORD))v36;
            v41 = *v46;
            v42 = v46[1];
            swift_bridgeObjectRetain();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v39);
            v51 = *v40;
            *v40 = 0x8000000000000000;
            sub_100229B0C(v32, v41, v42, isUniquelyReferenced_nonNull_native);
            *v40 = v51;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            ((void (*)(_QWORD *, _QWORD))v38)(v52, 0);

            swift_bridgeObjectRelease();
            v48(v53, 0);
          }
          else
          {
            swift_bridgeObjectRelease();
            ((void (*)(_QWORD *, _QWORD))v38)(v52, 0);

            swift_bridgeObjectRelease();
            ((void (*)(_BYTE *, _QWORD))v36)(v53, 0);
          }

          swift_bridgeObjectRelease_n(v30, 2);
          return swift_bridgeObjectRelease();
        }

        swift_bridgeObjectRelease();
      }
      else
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    else
    {

    }
LABEL_11:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

BOOL sub_100228420(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *a1;
  v3 = a1[1];
  v4 = (_QWORD *)(a2 + *(int *)(_s20KeyValueRegistrationC10IdentifierVMa(0) + 20));
  v5 = v4[1];
  if (!v3)
    return v5 == 0;
  if (!v5)
    return 0;
  if (v2 == *v4 && v3 == v5)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v2, v3, *v4, v5, 0) & 1;
}

void (*sub_1002284AC(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4))(_QWORD *a1)
{
  _QWORD *v8;

  v8 = malloc(0x38uLL);
  *a1 = v8;
  v8[4] = a3;
  v8[5] = a4;
  swift_bridgeObjectRetain();
  v8[6] = sub_100229C68(v8, a2, a3, a4);
  return sub_100228524;
}

void sub_100228524(_QWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  v1 = (void *)*a1;
  v2 = *(void **)(*a1 + 40);
  v3 = *(_QWORD *)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 48))(*a1, 0);
  swift_bridgeObjectRelease(v3);

  free(v1);
}

void sub_10022856C(uint64_t a1, void *a2, uint64_t a3, Class isa, uint64_t a5)
{
  char *v5;
  NSString v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  objc_class *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(__int128 *);
  NSString v35;
  id v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD v39[3];
  objc_super v40;
  __int128 v41;
  __int128 v42;

  v9 = a2;
  v38 = a1;
  if (!a2)
  {
LABEL_9:
    sub_10022A4A8(a3, (uint64_t)&v41);
    v22 = *((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1))
    {
      v23 = sub_10000ABC8(&v41, *((uint64_t *)&v42 + 1));
      v24 = *(_QWORD *)(v22 - 8);
      __chkstk_darwin(v23);
      v26 = (char *)&v37 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v24 + 16))(v26);
      v27 = _bridgeAnythingToObjectiveC<A>(_:)(v26, v22);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v22);
      sub_10000682C(&v41);
      if (!isa)
      {
LABEL_12:
        v28 = (objc_class *)_s9_ObserverCMa();
        v40.receiver = v5;
        v40.super_class = v28;
        objc_msgSendSuper2(&v40, "observeValueForKeyPath:ofObject:change:context:", v9, v27, isa, a5);

        swift_unknownObjectRelease(v27);
LABEL_13:

        return;
      }
    }
    else
    {
      v27 = 0;
      if (!isa)
        goto LABEL_12;
    }
    type metadata accessor for NSKeyValueChangeKey(0);
    sub_10022C5D4();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    goto LABEL_12;
  }
  sub_10022A4A8(a3, (uint64_t)&v41);
  if (!*((_QWORD *)&v42 + 1))
  {
    sub_1002015F8((uint64_t)&v41);
    goto LABEL_8;
  }
  v10 = sub_1000087DC(0, &qword_100498418, NSUserDefaults_ptr);
  if ((swift_dynamicCast(v39, &v41, (char *)&type metadata for Any + 8, v10, 6) & 1) == 0)
  {
LABEL_8:
    v9 = String._bridgeToObjectiveC()();
    goto LABEL_9;
  }
  v11 = (void *)v39[0];
  v12 = *(_QWORD *)&v5[OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_lock];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v12 + 16));
  swift_beginAccess(&v5[OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_registeredSuites], v39, 0, 0);
  isa = v11;
  v13 = swift_bridgeObjectRetain();
  sub_100229FE8(v13, isa);
  v15 = v14;
  v17 = v16;
  swift_bridgeObjectRelease();

  if (!v15)
    goto LABEL_16;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_10022A180(v17, v38, (uint64_t)v9);
  v19 = v18;
  v21 = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v19)
    swift_bridgeObjectRelease();
  else
LABEL_16:
    v21 = _swiftEmptyArrayStorage;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 16));
  v29 = v21[2];
  if (!v29)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v30 = _s9_ObserverC18HandlerAssociationVMa(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = (char *)v21 + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80));
  v33 = *(_QWORD *)(v31 + 72);
  v37 = v21;
  swift_bridgeObjectRetain();
  do
  {
    v34 = *(void (**)(__int128 *))&v32[*(int *)(v30 + 20)];
    v35 = String._bridgeToObjectiveC()();
    v36 = -[objc_class valueForKey:](isa, "valueForKey:", v35);

    if (v36)
    {
      _bridgeAnyObjectToAny(_:)(v36);
      swift_unknownObjectRelease(v36);
    }
    else
    {
      v41 = 0u;
      v42 = 0u;
    }
    v34(&v41);
    sub_1002015F8((uint64_t)&v41);
    v32 += v33;
    --v29;
  }
  while (v29);

  swift_bridgeObjectRelease_n(v37, 2);
}

uint64_t (*sub_1002289F4(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1+ OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_registeredSuites, a1, 33, 0);
  return j__swift_endAccess;
}

Swift::Int sub_100228A38()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v2 = *v0;
  v1 = v0[1];
  Hasher.init(_seed:)(v4);
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    String.hash(into:)(v4, v2, v1);
    swift_bridgeObjectRelease(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void sub_100228AB4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[1];
  if (v3)
  {
    v4 = *v1;
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    String.hash(into:)(a1, v4, v3);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int sub_100228B28()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v2 = *v0;
  v1 = v0[1];
  Hasher.init(_seed:)(v4);
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    String.hash(into:)(v4, v2, v1);
    swift_bridgeObjectRelease(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t sub_100228BA0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v3 = a1[1];
  v4 = a1[2];
  v5 = a2[1];
  v6 = a2[2];
  if (v3)
  {
    if (v5)
    {
      v7 = *a1;
      v8 = v7 == *a2 && v3 == v5;
      if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v3, *a2, v5, 0) & 1) != 0)
        goto LABEL_8;
    }
  }
  else if (!v5)
  {
LABEL_8:
    sub_1000087DC(0, (unint64_t *)&unk_100497EB0, NSObject_ptr);
    return static NSObject.== infix(_:_:)(v4, v6) & 1;
  }
  return 0;
}

id sub_100228C28()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)_s9_ObserverCMa();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t NSUserDefaults.encodeValue(_:forKey:)(_QWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  Class isa;
  NSString v12;

  v2 = v1;
  v3 = a1[3];
  v4 = a1[5];
  v5 = sub_10000ABC8(a1, v3);
  v6 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v7 = JSONEncoder.init()();
  v8 = dispatch thunk of JSONEncoder.encode<A>(_:)(v5, v3, v4);
  v10 = v9;
  swift_release(v7);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v12 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setValue:forKey:", isa, v12);

  return sub_1000067E8(v8, v10);
}

uint64_t NSUserDefaults.decodeValue<A>(_:forKey:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  void *v3;
  NSString v7;
  id v8;
  __n128 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  _OWORD v17[2];
  _QWORD v18[4];

  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v3, "valueForKey:", v7);

  if (v8)
  {
    _bridgeAnyObjectToAny(_:)(v8);
    swift_unknownObjectRelease(v8);
  }
  else
  {
    memset(v17, 0, sizeof(v17));
  }
  sub_1002015B0((uint64_t)v17, (uint64_t)v18);
  if (!v18[3])
  {
    sub_1002015F8((uint64_t)v18);
    goto LABEL_8;
  }
  if ((swift_dynamicCast(v16, v18, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) == 0)
  {
LABEL_8:
    v14 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(a1 - 8) + 56))(a3, v14, 1, a1, v9);
  }
  v11 = v16[0];
  v10 = v16[1];
  v12 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v13 = JSONDecoder.init()();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(a1, v11, v10, a1, a2);
  sub_1000067E8(v11, v10);
  v9 = swift_release(v13);
  v14 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(a1 - 8) + 56))(a3, v14, 1, a1, v9);
}

uint64_t sub_10022925C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for Logger(0, a2);
  sub_1000086DC(v2, qword_100497FD0);
  sub_1000086B4(v2, (uint64_t)qword_100497FD0);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001003ACFD0, 0x6166654472657355, 0xEC00000073746C75);
}

uint64_t sub_1002292D8(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  char *v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  uint64_t result;

  v6 = (char *)a4();
  v8 = sub_100229328(v6, v7, a3);
  v9 = (_QWORD *)*a1;
  *(_QWORD *)*a1 = v8;
  result = swift_bridgeObjectRelease();
  *a1 = v9 + 1;
  return result;
}

char *sub_100229328(char *a1, char *a2, uint64_t *a3)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v12[3];
  void *ObjectType;

  v6 = sub_1002293F8(v12, 0, 0, 1, (uint64_t)a1, (unint64_t)a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_10000684C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_10000684C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_10000682C(v12);
  return v7;
}

char *sub_1002293F8(char **a1, void *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  char *result;
  uint64_t v10;
  char *v11;
  _QWORD v12[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v10 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v10)
        {
          v12[0] = a5;
          v12[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          memcpy(__dst, v12, HIBYTE(a6) & 0xF);
          result = 0;
          *((_BYTE *)__dst + v10) = 0;
          *a1 = (char *)__dst;
          return result;
        }
      }
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = sub_1002294F4(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    result = (char *)((a6 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    result = (char *)_StringObject.sharedUTF8.getter(a5, a6);
    if (!result)
    {
      __break(1u);
      return result;
    }
  }
  *a1 = result;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return (char *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

char *sub_1002294F4(uint64_t a1, unint64_t a2)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (char *)sub_100229588(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_100229684(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v4 = *((_QWORD *)v2 + 2);
  v3 = *((_QWORD *)v2 + 3);
  if (v4 >= v3 >> 1)
    v2 = sub_100229684((char *)(v3 > 1), v4 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v4 + 1;
  v2[v4 + 32] = 0;
  return v2;
}

_QWORD *sub_100229588(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  char v7;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_9;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_100229620(v4, 0);
      result = (_QWORD *)_StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v7 & 1) != 0)
        break;
      if (result == (_QWORD *)v4)
        return v5;
      __break(1u);
LABEL_9:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_100229620(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_100005574(&qword_100498420);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

char *sub_100229684(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_100498420);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

unint64_t sub_10022976C(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  Swift::Int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 *v19;
  __int128 v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD v30[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 24 * v6);
        v11 = *v9;
        v10 = v9[1];
        v12 = (void *)v9[2];
        Hasher.init(_seed:)(v30);
        if (v10)
        {
          Hasher._combine(_:)(1uLL);
          v13 = v12;
          swift_bridgeObjectRetain();
          String.hash(into:)(v30, v11, v10);
        }
        else
        {
          Hasher._combine(_:)(0);
          v14 = v12;
        }
        v15 = Hasher._finalize()();

        result = swift_bridgeObjectRelease(v10);
        v16 = v15 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v16 < v8)
            goto LABEL_5;
        }
        else if (v16 >= v8)
        {
          goto LABEL_14;
        }
        if (v3 >= (uint64_t)v16)
        {
LABEL_14:
          v17 = *(_QWORD *)(a2 + 48);
          v18 = v17 + 24 * v3;
          v19 = (__int128 *)(v17 + 24 * v6);
          if (v3 != v6 || v18 >= (unint64_t)v19 + 24)
          {
            v20 = *v19;
            *(_QWORD *)(v18 + 16) = *((_QWORD *)v19 + 2);
            *(_OWORD *)v18 = v20;
          }
          v21 = *(_QWORD *)(a2 + 56);
          v22 = (_QWORD *)(v21 + 8 * v3);
          v23 = (_QWORD *)(v21 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v22 >= v23 + 1))
          {
            *v22 = *v23;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v25 = *v24;
    v26 = (-1 << v3) - 1;
  }
  else
  {
    v24 = (uint64_t *)(v4 + 8 * (result >> 6));
    v26 = *v24;
    v25 = (-1 << result) - 1;
  }
  *v24 = v26 & v25;
  v27 = *(_QWORD *)(a2 + 16);
  v28 = __OFSUB__(v27, 1);
  v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

id sub_100229984(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  id result;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v6 = v5;
  v11 = *v5;
  v13 = sub_100212320(a2, a3, (uint64_t)a4);
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v17 = v12;
  v18 = *(_QWORD *)(v11 + 24);
  if (v18 >= v16 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v18 >= v16 && (a5 & 1) == 0)
  {
    sub_100224608();
LABEL_7:
    v19 = (_QWORD *)*v6;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = v19[7];
      result = (id)swift_bridgeObjectRelease();
      *(_QWORD *)(v20 + 8 * v13) = a1;
      return result;
    }
LABEL_11:
    v19[(v13 >> 6) + 8] |= 1 << v13;
    v24 = (uint64_t *)(v19[6] + 24 * v13);
    *v24 = a2;
    v24[1] = a3;
    v24[2] = (uint64_t)a4;
    *(_QWORD *)(v19[7] + 8 * v13) = a1;
    v25 = v19[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (!v26)
    {
      v19[2] = v27;
      swift_bridgeObjectRetain();
      return a4;
    }
    goto LABEL_14;
  }
  sub_100223DFC(v16, a5 & 1);
  v22 = sub_100212320(a2, a3, (uint64_t)a4);
  if ((v17 & 1) == (v23 & 1))
  {
    v13 = v22;
    v19 = (_QWORD *)*v6;
    if ((v17 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&_s9_ObserverC16SuiteAssociationVN);
  __break(1u);
  return result;
}

uint64_t sub_100229B0C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1002121A0(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1002247D4();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_10022413C(v15, a4 & 1);
  v21 = sub_1002121A0(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void (*sub_100229C68(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4))(uint64_t a1)
{
  _QWORD *v4;
  _QWORD *v9;
  char isUniquelyReferenced_nonNull_native;
  id v11;

  v9 = malloc(0x60uLL);
  *a1 = v9;
  v9[8] = a3;
  v9[9] = a4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  swift_bridgeObjectRetain();
  v11 = a4;
  v9[10] = sub_100229EE4(v9);
  v9[11] = sub_100229D64(v9 + 4, a2, a3, (uint64_t)v11, isUniquelyReferenced_nonNull_native);
  return sub_100229D10;
}

void sub_100229D10(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  uint64_t v3;
  void *v4;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 80);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  v4 = *(void **)(*(_QWORD *)a1 + 72);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 88))(*(_QWORD *)a1 + 32, 0);
  swift_bridgeObjectRelease(v3);

  v2(v1, 0);
  free(v1);
}

void (*sub_100229D64(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5))(uint64_t **a1)
{
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  void (*result)(uint64_t **);

  v6 = v5;
  v12 = malloc(0x38uLL);
  *a1 = v12;
  v12[3] = a4;
  v12[4] = v6;
  v12[1] = a2;
  v12[2] = a3;
  v13 = *v6;
  v15 = sub_100212320(a2, a3, a4);
  *((_BYTE *)v12 + 48) = v14 & 1;
  v16 = *(_QWORD *)(v13 + 16);
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
  }
  else
  {
    v19 = v14;
    v20 = *(_QWORD *)(v13 + 24);
    if (v20 >= v18 && (a5 & 1) != 0)
    {
LABEL_7:
      v12[5] = v15;
      if ((v19 & 1) != 0)
      {
LABEL_8:
        v21 = *(_QWORD *)(*(_QWORD *)(*v6 + 56) + 8 * v15);
LABEL_12:
        *v12 = v21;
        return sub_100229EA4;
      }
LABEL_11:
      v21 = 0;
      goto LABEL_12;
    }
    if (v20 >= v18 && (a5 & 1) == 0)
    {
      sub_100224608();
      goto LABEL_7;
    }
    sub_100223DFC(v18, a5 & 1);
    v22 = sub_100212320(a2, a3, a4);
    if ((v19 & 1) == (v23 & 1))
    {
      v15 = v22;
      v12[5] = v22;
      if ((v19 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&_s9_ObserverC16SuiteAssociationVN);
  __break(1u);
  return result;
}

void sub_100229EA4(uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  sub_100229F10(*a1, *((_BYTE *)*a1 + 48), (uint64_t *)(*a1)[4], (*a1)[5], (*a1)[1], (*a1)[2], (void *)(*a1)[3]);
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t (*sub_100229EE4(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_100229F04;
}

uint64_t sub_100229F04(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

uint64_t *sub_100229F10(uint64_t *result, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  id v16;

  v9 = *result;
  if (!*result)
  {
    if ((a2 & 1) != 0)
    {
      swift_arrayDestroy(*(_QWORD *)(*a3 + 48) + 24 * a4, 1, &_s9_ObserverC16SuiteAssociationVN);
      sub_10022976C(a4, *a3);
    }
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  v10 = (_QWORD *)*a3;
  if ((a2 & 1) != 0)
  {
    *(_QWORD *)(v10[7] + 8 * a4) = v9;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  v10[(a4 >> 6) + 8] |= 1 << a4;
  v12 = (_QWORD *)(v10[6] + 24 * a4);
  *v12 = a5;
  v12[1] = a6;
  v12[2] = a7;
  *(_QWORD *)(v10[7] + 8 * a4) = v9;
  v13 = v10[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (!v14)
  {
    v10[2] = v15;
    swift_bridgeObjectRetain();
    v16 = a7;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

uint64_t sub_100229FE8(uint64_t result, void *a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  id v16;

  v3 = 0;
  v4 = result + 64;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v12 = v3 + 1;
    if (__OFADD__(v3, 1))
      break;
    if (v12 >= v8)
      return 0;
    v13 = *(_QWORD *)(v4 + 8 * v12);
    ++v3;
    if (!v13)
    {
      v3 = v12 + 1;
      if (v12 + 1 >= v8)
        return 0;
      v13 = *(_QWORD *)(v4 + 8 * v3);
      if (!v13)
      {
        v3 = v12 + 2;
        if (v12 + 2 >= v8)
          return 0;
        v13 = *(_QWORD *)(v4 + 8 * v3);
        if (!v13)
        {
          v3 = v12 + 3;
          if (v12 + 3 >= v8)
            return 0;
          v13 = *(_QWORD *)(v4 + 8 * v3);
          if (!v13)
          {
            v14 = v12 + 4;
            if (v14 >= v8)
              return 0;
            v13 = *(_QWORD *)(v4 + 8 * v14);
            if (!v13)
            {
              while (1)
              {
                v3 = v14 + 1;
                if (__OFADD__(v14, 1))
                  goto LABEL_27;
                if (v3 >= v8)
                  return 0;
                v13 = *(_QWORD *)(v4 + 8 * v3);
                ++v14;
                if (v13)
                  goto LABEL_22;
              }
            }
            v3 = v14;
          }
        }
      }
    }
LABEL_22:
    v7 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v3 << 6);
LABEL_5:
    v11 = *(_QWORD *)(result + 48);
    if (*(void **)(v11 + 24 * v10 + 16) == a2)
    {
      v15 = *(_QWORD *)(v11 + 24 * v10);
      swift_bridgeObjectRetain();
      v16 = a2;
      swift_bridgeObjectRetain();
      return v15;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_10022A180(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int64_t v19;

  v5 = result;
  v6 = 0;
  v7 = result + 64;
  v8 = 1 << *(_BYTE *)(result + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(result + 64);
  v19 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v12 = v11 | (v6 << 6);
      goto LABEL_22;
    }
    v13 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v13 >= v19)
      return 0;
    v14 = *(_QWORD *)(v7 + 8 * v13);
    ++v6;
    if (!v14)
    {
      v6 = v13 + 1;
      if (v13 + 1 >= v19)
        return 0;
      v14 = *(_QWORD *)(v7 + 8 * v6);
      if (!v14)
      {
        v6 = v13 + 2;
        if (v13 + 2 >= v19)
          return 0;
        v14 = *(_QWORD *)(v7 + 8 * v6);
        if (!v14)
        {
          v6 = v13 + 3;
          if (v13 + 3 >= v19)
            return 0;
          v14 = *(_QWORD *)(v7 + 8 * v6);
          if (!v14)
            break;
        }
      }
    }
LABEL_21:
    v10 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v6 << 6);
LABEL_22:
    v16 = (_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v12);
    v17 = *v16;
    if (*v16 == a2 && v16[1] == a3)
    {
      v17 = a2;
LABEL_29:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return v17;
    }
    result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v16[1], a2, a3, 0);
    if ((result & 1) != 0)
      goto LABEL_29;
  }
  v15 = v13 + 4;
  if (v15 >= v19)
    return 0;
  v14 = *(_QWORD *)(v7 + 8 * v15);
  if (v14)
  {
    v6 = v15;
    goto LABEL_21;
  }
  while (1)
  {
    v6 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v6 >= v19)
      return 0;
    v14 = *(_QWORD *)(v7 + 8 * v6);
    ++v15;
    if (v14)
      goto LABEL_21;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_10022A354(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v18;
  __int128 v19;

  v5 = *(_QWORD *)(a2 + 24);
  v6 = type metadata accessor for Optional(0, v5);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v18 - v9;
  v11 = *(_QWORD *)(a2 + 16);
  __chkstk_darwin(v8);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v13, v2 + *(int *)(a2 + 44), v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  v15 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v10, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v18 = 0u;
    v19 = 0u;
  }
  else
  {
    *((_QWORD *)&v19 + 1) = v5;
    v16 = sub_1000207D4(&v18);
    (*(void (**)(_QWORD *, char *, uint64_t))(v15 + 32))(v16, v10, v5);
  }
  return NSUserDefaults.subscript.setter((uint64_t)&v18, (uint64_t)v13, v11, *(_QWORD *)(a2 + 32));
}

uint64_t sub_10022A4A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005574(&qword_100497470);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10022A4F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  _BYTE *v11;
  _BYTE v13[32];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4);
  __chkstk_darwin(AssociatedTypeWitness);
  v11 = &v13[-v10];
  dispatch thunk of RawRepresentable.rawValue.getter(&v13[-v10], a3, a4);
  sub_10022A4A8(a1, (uint64_t)v13);
  NSUserDefaults.subscript.setter((uint64_t)v13, (uint64_t)v11, AssociatedTypeWitness, a5);
  return sub_1002015F8(a1);
}

uint64_t type metadata accessor for NSUserDefaults.Migrator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100031DCC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NSUserDefaults.Migrator);
}

uint64_t _s8MigratorV5ErrorOMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100031DCC(a1, a2, a3, a4, (uint64_t)&_s8MigratorV5ErrorOMn);
}

uint64_t sub_10022A5DC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

unint64_t sub_10022A5F0()
{
  unint64_t result;

  result = qword_100497FF0[0];
  if (!qword_100497FF0[0])
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NSUserDefaults.Suite, &type metadata for NSUserDefaults.Suite);
    atomic_store(result, qword_100497FF0);
  }
  return result;
}

uint64_t sub_10022A634(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  v5[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Optional(319, *(_QWORD *)(a1 + 24));
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 0, 3, v5, a1 + 40);
      return 0;
    }
  }
  return result;
}

void **sub_10022A6D0(void **a1, void **a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  int v12;
  char *v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  char *v20;
  void *v21;

  v5 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(v4 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = *(_QWORD *)(v6 + 64) + v9;
  if (*(_DWORD *)(v8 + 84))
    v11 = *(_QWORD *)(v8 + 64);
  else
    v11 = *(_QWORD *)(v8 + 64) + 1;
  v12 = (*(_DWORD *)(v8 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000;
  v13 = (char *)*a2;
  *a1 = *a2;
  if ((v9 | v7) > 7 || v12 != 0 || v11 + ((v10 + ((v7 + 8) & ~v7)) & ~v9) > 0x18)
  {
    a1 = (void **)&v13[((v9 | v7) & 0xF8 ^ 0x1F8) & ((v9 | v7) + 16)];
    swift_retain(v13);
  }
  else
  {
    v16 = ~v9;
    v17 = ((unint64_t)a1 + v7 + 8) & ~v7;
    v18 = ((unint64_t)a2 + v7 + 8) & ~v7;
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    v20 = v13;
    v19(v17, v18, v5);
    v21 = (void *)((v17 + v10) & v16);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))((v18 + v10) & v16, 1, v4))
    {
      memcpy(v21, (const void *)((v18 + v10) & v16), v11);
    }
    else
    {
      (*(void (**)(void *, uint64_t, uint64_t))(v8 + 16))(v21, (v18 + v10) & v16, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v21, 0, 1, v4);
    }
  }
  return a1;
}

uint64_t sub_10022A834(id *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = ((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (v5 + v6 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v8 + 8))(v9, v7);
  return result;
}

void **sub_10022A8D8(void **a1, void **a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  size_t v20;

  v5 = *a2;
  *a1 = *a2;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v12 = v5;
  v11(v9, v10, v6);
  v13 = *(_QWORD *)(v7 + 64);
  v14 = *(_QWORD *)(a3 + 24);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v13 + v16;
  v18 = (void *)((v17 + v9) & ~v16);
  v19 = (const void *)((v17 + v10) & ~v16);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v19, 1, v14))
  {
    if (*(_DWORD *)(v15 + 84))
      v20 = *(_QWORD *)(v15 + 64);
    else
      v20 = *(_QWORD *)(v15 + 64) + 1;
    memcpy(v18, v19, v20);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v18, v19, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, v14);
  }
  return a1;
}

void **sub_10022A9DC(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t (*v20)(void *, uint64_t, uint64_t);
  int v21;
  size_t v22;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = v6;

  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = ((unint64_t)a1 + v10 + 8) & ~v10;
  v12 = ((unint64_t)a2 + v10 + 8) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v9 + 24))(v11, v12);
  v13 = *(_QWORD *)(v9 + 64);
  v14 = *(_QWORD *)(a3 + 24);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v13 + v16;
  v18 = (void *)((v17 + v11) & ~v16);
  v19 = (void *)((v17 + v12) & ~v16);
  v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v12) = v20(v18, 1, v14);
  v21 = v20(v19, 1, v14);
  if ((_DWORD)v12)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 16))(v18, v19, v14);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, v14);
      return a1;
    }
  }
  else
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 24))(v18, v19, v14);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v18, v14);
  }
  if (*(_DWORD *)(v15 + 84))
    v22 = *(_QWORD *)(v15 + 64);
  else
    v22 = *(_QWORD *)(v15 + 64) + 1;
  memcpy(v18, v19, v22);
  return a1;
}

_QWORD *sub_10022AB2C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  size_t v16;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v7, v8);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = *(_QWORD *)(a3 + 24);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = v9 + v12;
  v14 = (void *)((v13 + v7) & ~v12);
  v15 = (const void *)((v13 + v8) & ~v12);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v15, 1, v10))
  {
    if (*(_DWORD *)(v11 + 84))
      v16 = *(_QWORD *)(v11 + 64);
    else
      v16 = *(_QWORD *)(v11 + 64) + 1;
    memcpy(v14, v15, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v14, v15, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
  }
  return a1;
}

void **sub_10022AC20(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t (*v18)(void *, uint64_t, uint64_t);
  int v19;
  size_t v20;

  v6 = *a1;
  *a1 = *a2;

  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = *(_QWORD *)(a3 + 24);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v11 + v14;
  v16 = (void *)((v15 + v9) & ~v14);
  v17 = (void *)((v15 + v10) & ~v14);
  v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  LODWORD(v10) = v18(v16, 1, v12);
  v19 = v18(v17, 1, v12);
  if ((_DWORD)v10)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v16, v17, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
      return a1;
    }
  }
  else
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v16, v17, v12);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v16, v12);
  }
  if (*(_DWORD *)(v13 + 84))
    v20 = *(_QWORD *)(v13 + 64);
  else
    v20 = *(_QWORD *)(v13 + 64) + 1;
  memcpy(v16, v17, v20);
  return a1;
}

uint64_t sub_10022AD6C(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (!v8)
    v9 = 0;
  if (v6 <= v9)
    v10 = v9;
  else
    v10 = *(_DWORD *)(v5 + 84);
  if (v10 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = v10;
  if (v8)
    v12 = *(_QWORD *)(v7 + 64);
  else
    v12 = *(_QWORD *)(v7 + 64) + 1;
  if (!a2)
    return 0;
  v13 = *(unsigned __int8 *)(v5 + 80);
  v14 = *(_QWORD *)(v5 + 64);
  v15 = *(unsigned __int8 *)(v7 + 80);
  v16 = a2 - v11;
  if (a2 <= v11)
    goto LABEL_31;
  v17 = v12 + ((v14 + v15 + ((v13 + 8) & ~v13)) & ~v15);
  v18 = 8 * v17;
  if (v17 > 3)
    goto LABEL_15;
  v20 = ((v16 + ~(-1 << v18)) >> v18) + 1;
  if (HIWORD(v20))
  {
    v19 = *(_DWORD *)((char *)a1 + v17);
    if (v19)
      goto LABEL_22;
LABEL_31:
    if ((v10 & 0x80000000) == 0)
    {
      v23 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v23) = -1;
      return (v23 + 1);
    }
    v24 = ((unint64_t)a1 + v13 + 8) & ~v13;
    if (v6 == v11)
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(v24, *(unsigned int *)(v5 + 84), v4);
    if (v8 >= 2)
    {
      v25 = (*(uint64_t (**)(uint64_t))(v7 + 48))((v24 + v14 + v15) & ~v15);
      if (v25 >= 2)
        return v25 - 1;
      else
        return 0;
    }
    return 0;
  }
  if (v20 > 0xFF)
  {
    v19 = *(unsigned __int16 *)((char *)a1 + v17);
    if (*(_WORD *)((char *)a1 + v17))
      goto LABEL_22;
    goto LABEL_31;
  }
  if (v20 < 2)
    goto LABEL_31;
LABEL_15:
  v19 = *((unsigned __int8 *)a1 + v17);
  if (!*((_BYTE *)a1 + v17))
    goto LABEL_31;
LABEL_22:
  v21 = (v19 - 1) << v18;
  if (v17 > 3)
    v21 = 0;
  if ((_DWORD)v17)
  {
    if (v17 <= 3)
      v22 = v17;
    else
      v22 = 4;
    __asm { BR              X12 }
  }
  return v11 + v21 + 1;
}

void sub_10022AF48(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  size_t v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v10 = v9 - 1;
  if (!v9)
    v10 = 0;
  if (*(_DWORD *)(v7 + 84) <= v10)
    v11 = v10;
  else
    v11 = *(_DWORD *)(v7 + 84);
  if (v11 <= 0x7FFFFFFF)
    v12 = 0x7FFFFFFF;
  else
    v12 = v11;
  v13 = *(_QWORD *)(v8 + 64);
  if (!v9)
    ++v13;
  v14 = v13
      + ((*(_QWORD *)(v7 + 64)
        + *(unsigned __int8 *)(v8 + 80)
        + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  v15 = a3 >= v12;
  v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 > 3)
    {
      v6 = &_mh_execute_header.magic + 1;
      if (v12 < a2)
        goto LABEL_21;
      goto LABEL_28;
    }
    v17 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
    if (HIWORD(v17))
    {
      v6 = &dword_100000004;
      if (v12 < a2)
      {
LABEL_21:
        v18 = ~v12 + a2;
        if (v14 < 4)
        {
          if ((_DWORD)v14)
          {
            v19 = v18 & ~(-1 << (8 * v14));
            bzero(a1, v14);
            if ((_DWORD)v14 == 3)
            {
              *a1 = v19;
              *((_BYTE *)a1 + 2) = BYTE2(v19);
            }
            else if ((_DWORD)v14 == 2)
            {
              *a1 = v19;
            }
            else
            {
              *(_BYTE *)a1 = v19;
            }
          }
        }
        else
        {
          bzero(a1, v14);
          *(_DWORD *)a1 = v18;
        }
        __asm { BR              X10 }
      }
LABEL_28:
      __asm { BR              X6 }
    }
    if (v17 >= 0x100)
      v6 = 2;
    else
      v6 = v17 > 1;
  }
  if (v12 < a2)
    goto LABEL_21;
  goto LABEL_28;
}

void sub_10022B180()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_10022B188()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

ValueMetadata *type metadata accessor for NSUserDefaults.Suite()
{
  return &type metadata for NSUserDefaults.Suite;
}

uint64_t type metadata accessor for NSUserDefaults.ValueTransformer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100031DCC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NSUserDefaults.ValueTransformer);
}

uint64_t sub_10022B1C8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 40);
    return 0;
  }
  return result;
}

void **sub_10022B244(void **a1, void **a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  char *v9;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  char *v15;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 8) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = (char *)*a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (void **)&v9[(v6 & 0xF8 ^ 0x1F8) & (v6 + 16)];
    swift_retain(v9);
  }
  else
  {
    v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    v15 = v9;
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t sub_10022B300(id *a1, uint64_t a2)
{

  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((unint64_t)a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

void **sub_10022B344(void **a1, void **a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  id v11;

  v4 = *a2;
  *a1 = *a2;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v11 = v4;
  v10(v8, v9, v5);
  return a1;
}

void **sub_10022B3B4(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = v6;

  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v9 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v9 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

_QWORD *sub_10022B420(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void **sub_10022B470(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;

  v6 = *a1;
  *a1 = *a2;

  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_10022B4D8(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 8) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(_WORD *)((char *)a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
      v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((_BYTE *)a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_10022B5AC + 4 * byte_10039460E[(v9 - 1)]))();
}

void sub_10022B61C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = &dword_100000004;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_10022B810()
{
  return type metadata accessor for NSUserDefaults.KeyValueRegistration(0);
}

uint64_t sub_10022B818(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = _s20KeyValueRegistrationC10IdentifierVMa(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for () + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t _s9_ObserverCMa()
{
  return objc_opt_self(_TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer);
}

uint64_t *sub_10022B8B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
  }
  swift_retain(v11);
  return a1;
}

double sub_10022B940(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8)).n128_u64[0];
  return result;
}

uint64_t sub_10022B988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_retain(v10);
  return a1;
}

uint64_t sub_10022B9F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  v11 = v8[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_retain(v10);
  swift_release(v11);
  return a1;
}

uint64_t sub_10022BA64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10022BAC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  swift_release(v8);
  return a1;
}

uint64_t sub_10022BB28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10022BB34);
}

uint64_t sub_10022BB34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10022BBB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10022BBBC);
}

uint64_t sub_10022BBBC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t _s9_ObserverC18HandlerAssociationVMa(uint64_t a1)
{
  return sub_1000091AC(a1, qword_1004982C0, (uint64_t)&_s9_ObserverC18HandlerAssociationVMn);
}

uint64_t sub_10022BC48(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

void _s9_ObserverC16SuiteAssociationVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));

}

_QWORD *_s9_ObserverC16SuiteAssociationVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain();
  v5 = v4;
  return a1;
}

_QWORD *_s9_ObserverC16SuiteAssociationVwca(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;

  *a1 = *a2;
  v4 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  v5 = (void *)a2[2];
  v6 = (void *)a1[2];
  a1[2] = v5;
  v7 = v5;

  return a1;
}

_QWORD *_s9_ObserverC16SuiteAssociationVwta(_QWORD *a1, uint64_t a2)
{
  void *v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = (void *)a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);

  return a1;
}

ValueMetadata *_s9_ObserverC16SuiteAssociationVMa()
{
  return &_s9_ObserverC16SuiteAssociationVN;
}

uint64_t sub_10022BDD4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8);
    swift_initEnumMetadataSingleCase(a1, 0, v4 + 64);
    result = 0;
    *(_DWORD *)(*(_QWORD *)(a1 - 8) + 84) = *(_DWORD *)(v4 + 84);
  }
  return result;
}

uint64_t sub_10022BE34(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_10022BEE4 + 4 * byte_10039461C[(v7 - 1)]))();
}

void sub_10022BF34(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = &dword_100000004;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t *sub_10022C0E4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)a1 + v9);
    v14 = (uint64_t *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10022C190(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

uint64_t sub_10022C1E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10022C268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v8[1];
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v10);
  v11 = *(int *)(a3 + 24);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *v12 = *v13;
  v14 = v12[1];
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v14);
  return a1;
}

uint64_t sub_10022C310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_10022C374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = *(int *)(a3 + 24);
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  return a1;
}

uint64_t sub_10022C3FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10022C408);
}

uint64_t sub_10022C408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10022C488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10022C494);
}

uint64_t sub_10022C494(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_10022C510(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1003947A8;
    v4[2] = &unk_1003947C0;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_10022C590()
{
  unint64_t result;

  result = qword_100498410;
  if (!qword_100498410)
  {
    result = swift_getWitnessTable(&unk_1003947D8, &_s9_ObserverC16SuiteAssociationVN);
    atomic_store(result, (unint64_t *)&qword_100498410);
  }
  return result;
}

unint64_t sub_10022C5D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100496F50;
  if (!qword_100496F50)
  {
    type metadata accessor for NSKeyValueChangeKey(255);
    result = swift_getWitnessTable(&unk_10039340C, v1);
    atomic_store(result, (unint64_t *)&qword_100496F50);
  }
  return result;
}

BOOL sub_10022C61C(uint64_t *a1)
{
  uint64_t v1;

  return sub_100228420(a1, *(_QWORD *)(v1 + 16));
}

unint64_t sub_10022C638()
{
  unint64_t result;

  result = qword_100498428;
  if (!qword_100498428)
  {
    result = swift_getWitnessTable(&unk_100394880, &_s5ErrorON);
    atomic_store(result, (unint64_t *)&qword_100498428);
  }
  return result;
}

ValueMetadata *_s5ErrorOMa()
{
  return &_s5ErrorON;
}

BOOL sub_10022C68C(uint64_t *a1)
{
  return sub_10022C61C(a1);
}

uint64_t sub_10022C6A4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
    return String.subscript.getter(15, a1, a2);
  else
    return 0;
}

void sub_10022C6E4()
{
  qword_100498430 = (uint64_t)&off_1004566A8;
}

void sub_10022C6F8()
{
  qword_100498438 = (uint64_t)&off_1004566D8;
}

void sub_10022C70C()
{
  off_100498440 = &off_100456708;
}

char *sub_10022C720()
{
  void *v0;
  char *v1;
  char *result;

  if (qword_100496D88 != -1)
    swift_once(&qword_100496D88, sub_10022C70C);
  v0 = off_100498440;
  if (qword_100496D78 != -1)
    swift_once(&qword_100496D78, sub_10022C6E4);
  swift_bridgeObjectRetain();
  v1 = (char *)swift_bridgeObjectRetain();
  result = sub_1002158C8(v1);
  qword_1004A2F78 = (uint64_t)v0;
  return result;
}

uint64_t sub_10022C7D0()
{
  char *v0;
  int64_t v1;
  _QWORD *v2;
  Swift::String v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  if (qword_100496D88 != -1)
    swift_once(&qword_100496D88, sub_10022C70C);
  v0 = (char *)off_100498440;
  v1 = *((_QWORD *)off_100498440 + 2);
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_10022D1E4(0, v1, 0);
    v2 = v0 + 40;
    do
    {
      v9 = *(v2 - 1);
      v10 = *v2;
      swift_bridgeObjectRetain_n(*v2, 2);
      v3._countAndFlagsBits = 115;
      v3._object = (void *)0xE100000000000000;
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      v5 = _swiftEmptyArrayStorage[2];
      v4 = _swiftEmptyArrayStorage[3];
      if (v5 >= v4 >> 1)
        sub_10022D1E4((char *)(v4 > 1), v5 + 1, 1);
      v2 += 2;
      _swiftEmptyArrayStorage[2] = v5 + 1;
      v6 = &_swiftEmptyArrayStorage[2 * v5];
      v6[4] = v9;
      v6[5] = v10;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  if (qword_100496D80 != -1)
    swift_once(&qword_100496D80, sub_10022C6F8);
  swift_bridgeObjectRetain();
  v7 = (char *)swift_bridgeObjectRetain();
  sub_1002158C8(v7);
  result = swift_bridgeObjectRelease();
  qword_1004A2F80 = (uint64_t)_swiftEmptyArrayStorage;
  return result;
}

uint64_t URL.replacingSchemeWithHTTP.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;

  v2 = v1;
  v4 = sub_100005574(&qword_100497FA0);
  __chkstk_darwin(v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URLComponents(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init(url:resolvingAgainstBaseURL:)(v2, 0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_100008758((uint64_t)v6, &qword_100497FA0);
LABEL_9:
    v18 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a1, 1, 1, v18);
  }
  v11 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  v12 = URLComponents.scheme.getter(v11);
  if (!v13)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    goto LABEL_9;
  }
  v14 = v12;
  v15 = v13;
  if (qword_100496D98 != -1)
    swift_once(&qword_100496D98, sub_10022C7D0);
  if ((sub_1000AA2B8(v14, v15, (_QWORD *)qword_1004A2F80) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v16 = 0x7370747468;
    v17 = 0xE500000000000000;
  }
  else
  {
    if (qword_100496D90 != -1)
      swift_once(&qword_100496D90, sub_10022C720);
    v20 = sub_1000AA2B8(v14, v15, (_QWORD *)qword_1004A2F78);
    v21 = swift_bridgeObjectRelease();
    if ((v20 & 1) == 0)
      goto LABEL_15;
    v16 = 1886680168;
    v17 = 0xE400000000000000;
  }
  v21 = URLComponents.scheme.setter(v16, v17);
LABEL_15:
  URLComponents.url.getter(v21);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Void __swiftcall URLComponents.appendPath(_:)(Swift::String a1)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void (*v9)(_QWORD *, _QWORD);
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  Swift::String v15;
  void (*v16)(_QWORD *, _QWORD);
  Swift::String v17;
  _QWORD v18[4];

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v3 = URLComponents.path.getter();
  v5 = sub_10022CD08(v3, v4);
  v7 = v6;
  swift_bridgeObjectRelease();
  if (v7)
  {
    if (v5 == 47 && v7 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_6:
      v9 = (void (*)(_QWORD *, _QWORD))URLComponents.path.modify(v18);
      v10._countAndFlagsBits = countAndFlagsBits;
      v10._object = object;
      String.append(_:)(v10);
      v9(v18, 0);
      return;
    }
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, 47, 0xE100000000000000, 0);
    swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
      goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  v11 = sub_10022C6A4(countAndFlagsBits, (unint64_t)object);
  v13 = v12;
  swift_bridgeObjectRelease();
  if (v13)
  {
    if (v11 == 47 && v13 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_12:
      swift_bridgeObjectRetain();
      goto LABEL_14;
    }
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(47, 0xE100000000000000, v11, v13, 0);
    swift_bridgeObjectRelease();
    if ((v14 & 1) != 0)
      goto LABEL_12;
  }
  v18[0] = 47;
  v18[1] = 0xE100000000000000;
  v15._countAndFlagsBits = countAndFlagsBits;
  v15._object = object;
  String.append(_:)(v15);
  countAndFlagsBits = 47;
  object = (void *)0xE100000000000000;
LABEL_14:
  v16 = (void (*)(_QWORD *, _QWORD))URLComponents.path.modify(v18);
  v17._countAndFlagsBits = countAndFlagsBits;
  v17._object = object;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v16(v18, 0);
}

uint64_t sub_10022CD08(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 0;
  v5 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v5 = 11;
  v6 = String.index(before:)(v5 | (v2 << 16), a1, a2);
  return String.subscript.getter(v6, a1, a2);
}

Swift::Void __swiftcall URLComponents.appendQueryItems(_:)(Swift::OpaquePointer a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = URLComponents.queryItems.getter(a1._rawValue);
  if (v2)
  {
    v4 = v2;
    v3 = swift_bridgeObjectRetain();
    sub_1002159B0(v3);
    URLComponents.queryItems.setter(v4);
  }
  else
  {
    swift_bridgeObjectRetain();
    URLComponents.queryItems.setter(a1._rawValue);
  }
}

BOOL URL.isSafariScriptURL.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, unint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _BOOL8 v33;
  uint64_t v34;
  _QWORD v36[2];
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;

  v1 = type metadata accessor for URLQueryItem(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)v36 - v6;
  v8 = sub_100005574(&qword_100498448);
  __chkstk_darwin(v8);
  v10 = (char *)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005574(&qword_100497FA0);
  __chkstk_darwin(v11);
  v13 = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URLComponents(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init(url:resolvingAgainstBaseURL:)(v0, 0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_100008758((uint64_t)v13, &qword_100497FA0);
    return 0;
  }
  v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
  v19 = URLComponents.queryItems.getter(v18);
  if (!v19)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    return 0;
  }
  v20 = *(_QWORD *)(v19 + 16);
  if (!v20)
  {
    v34 = 1;
    goto LABEL_24;
  }
  v37 = v17;
  v38 = v15;
  v39 = v14;
  v40 = v10;
  v21 = v19 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v22 = *(_QWORD *)(v2 + 72);
  v23 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v2 + 16);
  v36[1] = v19;
  swift_bridgeObjectRetain();
  v42 = (unint64_t)"registeredSuites";
  v41 = 0x80000001003B7570;
  while (1)
  {
    v25 = v23(v7, v21, v1);
    v26 = URLQueryItem.name.getter(v25);
    if (v26 == 0x6E6F69746361 && v27 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
      v28 = v23(v5, (unint64_t)v7, v1);
    }
    else
    {
      v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, 0x6E6F69746361, 0xE600000000000000, 0);
      swift_bridgeObjectRelease();
      v28 = v23(v5, (unint64_t)v7, v1);
      if ((v29 & 1) == 0)
        goto LABEL_6;
    }
    v30 = URLQueryItem.value.getter(v28);
    if (!v31)
    {
LABEL_6:
      v24 = *(void (**)(char *, uint64_t))(v2 + 8);
      v24(v5, v1);
      goto LABEL_7;
    }
    if (v30 == 0xD000000000000016 && v31 == v41)
      break;
    v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, 0xD000000000000016, v42 | 0x8000000000000000, 0);
    swift_bridgeObjectRelease();
    v24 = *(void (**)(char *, uint64_t))(v2 + 8);
    v24(v5, v1);
    if ((v32 & 1) != 0)
      goto LABEL_22;
LABEL_7:
    v24(v7, v1);
    v21 += v22;
    if (!--v20)
    {
      swift_bridgeObjectRelease();
      v34 = 1;
      v10 = v40;
      goto LABEL_23;
    }
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
LABEL_22:
  swift_bridgeObjectRelease();
  v10 = v40;
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v40, v7, v1);
  v34 = 0;
LABEL_23:
  v15 = v38;
  v14 = v39;
  v17 = v37;
LABEL_24:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v10, v34, 1, v1);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  swift_bridgeObjectRelease();
  v33 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v10, 1, v1) != 1;
  sub_100008758((uint64_t)v10, &qword_100498448);
  return v33;
}

ValueMetadata *type metadata accessor for URL.ITMSSchemes()
{
  return &type metadata for URL.ITMSSchemes;
}

char *sub_10022D1E4(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_10022D408(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_10022D200(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_100497FC0);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v8);
  }
  swift_release(a4);
  return v11;
}

_QWORD *sub_10022D2E8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_100497FA8);
    v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 5);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[4 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
  }
  else
  {
    v15 = sub_100005574(&qword_100497FB0);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v15);
  }
  swift_release(a4);
  return v11;
}

char *sub_10022D408(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_100497950);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for String);
  }
  swift_release(a4);
  return v11;
}

const char *Feature.MediaPlayer.domain.getter()
{
  return "MediaPlayer";
}

uint64_t Feature.MediaPlayer.feature.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_10022D548 + 4 * asc_1003948E0[a1]))("image_decoding", 14);
}

const char *sub_10022D548()
{
  return "UpgradeOnPlay";
}

const char *sub_10022D55C()
{
  return "QueueFA";
}

const char *sub_10022D570()
{
  return "RSuntory";
}

uint64_t sub_10022D584()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_10022D5AC + 4 * byte_1003948E4[*v0]))("image_decoding", 14);
}

const char *sub_10022D5AC()
{
  return "UpgradeOnPlay";
}

const char *sub_10022D5C0()
{
  return "QueueFA";
}

const char *sub_10022D5D4()
{
  return "RSuntory";
}

const char *Feature.MediaControls.domain.getter()
{
  return "MediaControls";
}

const char *Feature.MediaControls.feature.getter()
{
  return "NewVolumeControlsMusic";
}

const char *Feature.MusicKit.domain.getter()
{
  return "MusicKit";
}

const char *Feature.MusicKit.feature.getter()
{
  return "yuma";
}

const char *Feature.MediaRemote.domain.getter()
{
  return "MediaRemote";
}

const char *Feature.MediaRemote.feature.getter()
{
  return "cayenne_music_bottom_player_routing";
}

unint64_t sub_10022D66C()
{
  unint64_t result;

  result = qword_100498450;
  if (!qword_100498450)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Feature.MediaPlayer, &type metadata for Feature.MediaPlayer);
    atomic_store(result, (unint64_t *)&qword_100498450);
  }
  return result;
}

unint64_t sub_10022D6B4()
{
  unint64_t result;

  result = qword_100498458;
  if (!qword_100498458)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Feature.MediaControls, &type metadata for Feature.MediaControls);
    atomic_store(result, (unint64_t *)&qword_100498458);
  }
  return result;
}

unint64_t sub_10022D6FC()
{
  unint64_t result;

  result = qword_100498460;
  if (!qword_100498460)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Feature.MusicKit, &type metadata for Feature.MusicKit);
    atomic_store(result, (unint64_t *)&qword_100498460);
  }
  return result;
}

unint64_t sub_10022D744()
{
  unint64_t result;

  result = qword_100498468;
  if (!qword_100498468)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Feature.MediaRemote, &type metadata for Feature.MediaRemote);
    atomic_store(result, (unint64_t *)&qword_100498468);
  }
  return result;
}

uint64_t _s11MediaPlayerOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10022D7D4 + 4 * byte_1003948ED[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10022D808 + 4 * byte_1003948E8[v4]))();
}

uint64_t sub_10022D808(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10022D810(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10022D818);
  return result;
}

uint64_t sub_10022D824(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10022D82CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10022D830(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10022D838(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Feature.MediaPlayer()
{
  return &type metadata for Feature.MediaPlayer;
}

ValueMetadata *type metadata accessor for Feature.MediaControls()
{
  return &type metadata for Feature.MediaControls;
}

ValueMetadata *type metadata accessor for Feature.MusicKit()
{
  return &type metadata for Feature.MusicKit;
}

uint64_t _s13MediaControlsOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10022D8BC + 4 * byte_1003948F2[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10022D8DC + 4 * byte_1003948F7[v4]))();
}

_BYTE *sub_10022D8BC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10022D8DC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10022D8E4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10022D8EC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10022D8F4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10022D8FC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Feature.MediaRemote()
{
  return &type metadata for Feature.MediaRemote;
}

const char *Feature.Music.domain.getter()
{
  return "Music";
}

uint64_t Feature.Music.feature.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_10022D960 + 4 * byte_100394B90[a1]))("potluck", 7);
}

const char *sub_10022D960()
{
  return "dci_multi_select";
}

const char *sub_10022D98C()
{
  return "razzmatazz";
}

const char *sub_10022D9B4()
{
  return "symphony";
}

const char *sub_10022D9C8()
{
  return "mantis";
}

const char *sub_10022D9DC()
{
  return "qulh";
}

const char *sub_10022D9F0()
{
  return "inline_large_title";
}

const char *sub_10022DA04()
{
  return "image_playground_covers";
}

const char *sub_10022DA18()
{
  return "in_with_the_new";
}

unint64_t sub_10022DA30()
{
  unint64_t result;

  result = qword_100498470;
  if (!qword_100498470)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Feature.Music, &type metadata for Feature.Music);
    atomic_store(result, (unint64_t *)&qword_100498470);
  }
  return result;
}

uint64_t sub_10022DA74()
{
  unsigned __int8 *v0;

  return Feature.Music.feature.getter(*v0);
}

uint64_t _s5MusicOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s5MusicOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_10022DB6C + 4 * byte_100394BA1[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_10022DBA0 + 4 * byte_100394B9C[v4]))();
}

uint64_t sub_10022DBA0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10022DBA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10022DBB0);
  return result;
}

uint64_t sub_10022DBBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10022DBC4);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_10022DBC8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10022DBD0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Feature.Music()
{
  return &type metadata for Feature.Music;
}

const char *Feature.Accessibility.domain.getter()
{
  return "Accessibility";
}

const char *Feature.Accessibility.feature.getter()
{
  return "HapticMusic";
}

unint64_t sub_10022DC18()
{
  unint64_t result;

  result = qword_100498478;
  if (!qword_100498478)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Feature.Accessibility, &type metadata for Feature.Accessibility);
    atomic_store(result, (unint64_t *)&qword_100498478);
  }
  return result;
}

uint64_t _s13AccessibilityOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10022DC9C + 4 * byte_100394C48[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10022DCBC + 4 * byte_100394C4D[v4]))();
}

_BYTE *sub_10022DC9C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10022DCBC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10022DCC4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10022DCCC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10022DCD4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10022DCDC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Feature.Accessibility()
{
  return &type metadata for Feature.Accessibility;
}

uint64_t Feature.UIP.isEnabled.getter(char a1)
{
  char v1;
  char v2;
  char v3;
  _QWORD v5[3];
  ValueMetadata *v6;
  unint64_t v7;

  if ((a1 & 1) != 0)
  {
    v6 = &_s3UIPO5MusicON;
    v7 = sub_10022DDD0();
    LOBYTE(v5[0]) = 1;
    v3 = isFeatureEnabled(_:)(v5);
    sub_10000682C(v5);
    if ((v3 & 1) == 0)
    {
      v2 = 0;
      return v2 & 1;
    }
    v6 = &_s3UIPO5UIKitON;
    v7 = sub_10022DE14();
    LOBYTE(v5[0]) = 1;
    goto LABEL_6;
  }
  v6 = &_s3UIPO5MusicON;
  v7 = sub_10022DDD0();
  LOBYTE(v5[0]) = 0;
  v1 = isFeatureEnabled(_:)(v5);
  sub_10000682C(v5);
  v2 = 0;
  if ((v1 & 1) != 0)
  {
    v6 = &_s3UIPO5UIKitON;
    v7 = sub_10022DE14();
    LOBYTE(v5[0]) = 0;
LABEL_6:
    v2 = isFeatureEnabled(_:)(v5);
    sub_10000682C(v5);
  }
  return v2 & 1;
}

unint64_t sub_10022DDD0()
{
  unint64_t result;

  result = qword_100498480;
  if (!qword_100498480)
  {
    result = swift_getWitnessTable(&unk_100394E84, &_s3UIPO5MusicON);
    atomic_store(result, (unint64_t *)&qword_100498480);
  }
  return result;
}

unint64_t sub_10022DE14()
{
  unint64_t result;

  result = qword_100498488;
  if (!qword_100498488)
  {
    result = swift_getWitnessTable(&unk_100394E54, &_s3UIPO5UIKitON);
    atomic_store(result, (unint64_t *)&qword_100498488);
  }
  return result;
}

const char *sub_10022DE58()
{
  return "Music";
}

const char *sub_10022DE6C()
{
  _BYTE *v0;

  if (*v0)
    return "uip_fluid_transitions";
  else
    return "uip_floating_tab_bar";
}

const char *sub_10022DE98()
{
  return "UIKit";
}

unint64_t sub_10022DEB0()
{
  unint64_t result;

  result = qword_100498490;
  if (!qword_100498490)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Feature.UIP, &type metadata for Feature.UIP);
    atomic_store(result, (unint64_t *)&qword_100498490);
  }
  return result;
}

ValueMetadata *type metadata accessor for Feature.UIP()
{
  return &type metadata for Feature.UIP;
}

ValueMetadata *_s3UIPO5UIKitOMa()
{
  return &_s3UIPO5UIKitON;
}

uint64_t _s3UIPOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10022DF64 + 4 * byte_100394D01[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10022DF98 + 4 * byte_100394CFC[v4]))();
}

uint64_t sub_10022DF98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10022DFA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10022DFA8);
  return result;
}

uint64_t sub_10022DFB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10022DFBCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10022DFC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10022DFC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s3UIPO5MusicOMa()
{
  return &_s3UIPO5MusicON;
}

unint64_t sub_10022DFE8()
{
  unint64_t result;

  result = qword_100498498;
  if (!qword_100498498)
  {
    result = swift_getWitnessTable(&unk_100394DC4, &_s3UIPO5MusicON);
    atomic_store(result, (unint64_t *)&qword_100498498);
  }
  return result;
}

unint64_t sub_10022E030()
{
  unint64_t result;

  result = qword_1004984A0;
  if (!qword_1004984A0)
  {
    result = swift_getWitnessTable(&unk_100394E2C, &_s3UIPO5UIKitON);
    atomic_store(result, (unint64_t *)&qword_1004984A0);
  }
  return result;
}

uint64_t FeatureFlagsKey.isEnabled.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD v6[5];

  v3 = a1;
  v6[3] = a1;
  v6[4] = a2;
  v4 = sub_1000207D4(v6);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v4, v2, v3);
  LOBYTE(v3) = isFeatureEnabled(_:)(v6);
  sub_10000682C(v6);
  return v3 & 1;
}

ValueMetadata *type metadata accessor for Feature()
{
  return &type metadata for Feature;
}

uint64_t GestureRecognizerHandler.__allocating_init<A>(gestureRecognizer:handler:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = swift_allocObject(v4, 40, 7);
  GestureRecognizerHandler.init<A>(gestureRecognizer:handler:)(a1, a2, a3, a4);
  return v9;
}

uint64_t GestureRecognizerHandler.init<A>(gestureRecognizer:handler:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  _QWORD *v10;
  uint64_t Strong;
  void *v12;

  v9 = swift_unknownObjectWeakInit(v4 + 16, 0);
  swift_unknownObjectWeakAssign(v9, a1);
  v10 = (_QWORD *)swift_allocObject(&unk_100459450, 40, 7);
  v10[2] = a4;
  v10[3] = a2;
  v10[4] = a3;
  *(_QWORD *)(v4 + 24) = sub_100200FC4;
  *(_QWORD *)(v4 + 32) = v10;
  Strong = swift_unknownObjectWeakLoadStrong(v4 + 16);
  if (Strong)
  {
    v12 = (void *)Strong;
    swift_retain(v4);
    objc_msgSend(v12, "addTarget:action:", v4, "handleActionFromGestureRecognizer:");

    swift_release(v4);
  }

  return v4;
}

uint64_t sub_10022E20C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t GestureRecognizerHandler.deinit()
{
  uint64_t v0;
  void *Strong;
  void *v2;

  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (Strong)
  {
    v2 = Strong;
    objc_msgSend(Strong, "removeTarget:action:", v0, "handleActionFromGestureRecognizer:");

  }
  swift_unknownObjectWeakDestroy(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 32));
  return v0;
}

uint64_t GestureRecognizerHandler.__deallocating_deinit()
{
  uint64_t v0;
  void *Strong;
  void *v2;

  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (Strong)
  {
    v2 = Strong;
    objc_msgSend(Strong, "removeTarget:action:", v0, "handleActionFromGestureRecognizer:");

  }
  swift_unknownObjectWeakDestroy(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t sub_10022E348()
{
  uint64_t result;

  result = swift_slowAlloc(1, -1);
  qword_1004984A8 = result;
  return result;
}

uint64_t UIGestureRecognizerHandling<>.addHandler(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  id v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  const void *v20;
  Class isa;
  _QWORD *v23;
  _OWORD v24[2];
  _QWORD v25[4];

  v4 = v3;
  if (qword_100496DA0 != -1)
    swift_once(&qword_100496DA0, sub_10022E348);
  v8 = objc_getAssociatedObject(v4, (const void *)qword_1004984A8);
  if (v8)
  {
    v9 = v8;
    _bridgeAnyObjectToAny(_:)(v8);
    swift_unknownObjectRelease(v9);
  }
  else
  {
    memset(v24, 0, sizeof(v24));
  }
  sub_1002015B0((uint64_t)v24, (uint64_t)v25);
  if (v25[3])
  {
    v10 = sub_100005574(&qword_1004984B0);
    if (swift_dynamicCast(&v23, v25, (char *)&type metadata for Any + 8, v10, 6))
    {
      v11 = v23;
      goto LABEL_11;
    }
  }
  else
  {
    sub_1002015F8((uint64_t)v25);
  }
  v11 = _swiftEmptyArrayStorage;
LABEL_11:
  v25[0] = v11;
  v12 = type metadata accessor for GestureRecognizerHandler();
  v13 = (_QWORD *)swift_allocObject(&unk_100459478, 40, 7);
  v13[2] = a3;
  v13[3] = a1;
  v13[4] = a2;
  v14 = swift_allocObject(v12, 40, 7);
  v15 = v4;
  swift_retain(a2);
  GestureRecognizerHandler.init<A>(gestureRecognizer:handler:)(v15, (uint64_t)sub_10022E5F0, (uint64_t)v13, a3);
  v16 = swift_retain(v14);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v16);
  v18 = *(_QWORD *)((v25[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
  v17 = *(_QWORD *)((v25[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v18 >= v17 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
  v19 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v14);
  specialized Array._endMutation()(v19);
  v20 = (const void *)qword_1004984A8;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_setAssociatedObject(v15, v20, isa, (void *)1);

  return v14;
}

uint64_t type metadata accessor for GestureRecognizerHandler()
{
  return objc_opt_self(_TtC14MusicUtilities24GestureRecognizerHandler);
}

uint64_t sub_10022E594(void *a1, void (*a2)(_QWORD *, id), uint64_t a3, uint64_t a4)
{
  _QWORD v5[5];

  v5[3] = a4;
  v5[4] = &protocol witness table for UIGestureRecognizer;
  v5[0] = a1;
  a2(v5, objc_msgSend(a1, "state"));
  return sub_10000682C(v5);
}

uint64_t sub_10022E5F0(void *a1)
{
  uint64_t v1;

  return sub_10022E594(a1, *(void (**)(_QWORD *, id))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16));
}

void UIGestureRecognizerHandling<>.removeHandler(_:)(uint64_t a1)
{
  void *v1;
  id v3;
  id v4;
  uint64_t v5;
  _QWORD *v6;
  const void *v7;
  Class isa;
  _QWORD *v9;
  _OWORD v10[2];
  _BYTE v11[24];
  uint64_t v12;

  if (qword_100496DA0 != -1)
    swift_once(&qword_100496DA0, sub_10022E348);
  v3 = objc_getAssociatedObject(v1, (const void *)qword_1004984A8);
  if (v3)
  {
    v4 = v3;
    _bridgeAnyObjectToAny(_:)(v3);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  sub_1002015B0((uint64_t)v10, (uint64_t)v11);
  if (!v12)
  {
    sub_1002015F8((uint64_t)v11);
    goto LABEL_10;
  }
  v5 = sub_100005574(&qword_1004984B0);
  if (!swift_dynamicCast(&v9, v11, (char *)&type metadata for Any + 8, v5, 6))
  {
LABEL_10:
    v6 = _swiftEmptyArrayStorage;
    goto LABEL_11;
  }
  v6 = v9;
LABEL_11:
  swift_retain(a1);
  sub_10022E794((uint64_t)v6, a1);
  swift_bridgeObjectRelease();
  swift_release(a1);
  v7 = (const void *)qword_1004984A8;
  type metadata accessor for GestureRecognizerHandler();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_setAssociatedObject(v1, v7, isa, (void *)1);

}

uint64_t sub_10022E754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UIGestureRecognizerHandling<>.addHandler(_:)(a1, a2, a3);
}

void sub_10022E774(uint64_t a1)
{
  UIGestureRecognizerHandling<>.removeHandler(_:)(a1);
}

_QWORD *sub_10022E794(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;

  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      v5 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
        v9 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_13:
          __break(1u);
          return _swiftEmptyArrayStorage;
        }
LABEL_9:
        if (v8 == a2)
        {
          swift_release(a2);
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          v6 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
          v7 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v8);
          specialized ContiguousArray._endMutation()(v7);
        }
        ++v5;
        if (v9 == v4)
          return _swiftEmptyArrayStorage;
      }
      if (v5 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_16:
      if (a1 < 0)
        v11 = a1;
      else
        v11 = a1 & 0xFFFFFFFFFFFFFF8;
      v4 = _CocoaArrayWrapper.endIndex.getter(v11);
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    v8 = *(_QWORD *)(a1 + 8 * v5 + 32);
    swift_retain(v8);
    v9 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_13;
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

double KeyboardAvoidance.beginFrame.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

double KeyboardAvoidance.endFrame.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

double KeyboardAvoidance.animationDuration.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 64);
}

uint64_t KeyboardAvoidance.animationCurve.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

uint64_t KeyboardAvoidance.local.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t KeyboardAvoidance.animationOptions.getter()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 72) << 16;
  if (result < 0)
    __break(1u);
  return result;
}

uint64_t KeyboardAvoidance.init(notification:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[88];

  sub_10022FAA8(a1, (uint64_t)v4);
  return sub_1000149A8((uint64_t)v4, a2, &qword_100498580);
}

void KeyboardAvoidance.animate(alongsideKeyboard:completion:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  v5 = *(_QWORD *)(v4 + 72) << 16;
  if (v5 < 0)
  {
    __break(1u);
  }
  else
  {
    v16 = a1;
    v17 = a2;
    v12 = _NSConcreteStackBlock;
    v13 = 1107296256;
    v14 = sub_1000BED80;
    v15 = &unk_1004594A8;
    v9 = _Block_copy(&v12);
    v10 = v17;
    swift_retain(a2);
    swift_release(v10);
    if (a3)
    {
      v16 = a3;
      v17 = a4;
      v12 = _NSConcreteStackBlock;
      v13 = 1107296256;
      v14 = sub_100204BB4;
      v15 = &unk_1004594D0;
      a3 = _Block_copy(&v12);
      v11 = v17;
      swift_retain(a4);
      swift_release(v11);
    }
    objc_msgSend((id)objc_opt_self(UIView), "animateWithDuration:delay:options:animations:completion:", v5, v9, a3, *(double *)(v4 + 64), 0.0);
    _Block_release(a3);
    _Block_release(v9);
  }
}

void KeyboardAvoidance.animate(alongsideKeyboard:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  double v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[5];
  uint64_t v12;

  v5 = objc_opt_self(UIView);
  v6 = *(_QWORD *)(v2 + 72) << 16;
  if (v6 < 0)
  {
    __break(1u);
  }
  else
  {
    v7 = (void *)v5;
    v8 = *(double *)(v2 + 64);
    v11[4] = a1;
    v12 = a2;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_1000BED80;
    v11[3] = &unk_1004594F8;
    v9 = _Block_copy(v11);
    v10 = v12;
    swift_retain(a2);
    swift_release(v10);
    objc_msgSend(v7, "animateWithDuration:delay:options:animations:completion:", v6, v9, 0, v8, 0.0);
    _Block_release(v9);
  }
}

Swift::Void __swiftcall KeyboardAvoidance.animateContentScrollView(in:)(UIViewController in)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  double v9;
  void *v10;
  uint64_t v11;
  objc_class *v12;
  _QWORD v13[5];
  uint64_t v14;

  v3 = swift_allocObject(&unk_100459530, 112, 7);
  v4 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v3 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v3 + 64) = v4;
  *(_OWORD *)(v3 + 80) = *(_OWORD *)(v1 + 64);
  *(_BYTE *)(v3 + 96) = *(_BYTE *)(v1 + 80);
  v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v3 + 32) = v5;
  *(UIViewController *)(v3 + 104) = in;
  v6 = objc_opt_self(UIView);
  v7 = *(_QWORD *)(v1 + 72) << 16;
  if (v7 < 0)
  {
    __break(1u);
  }
  else
  {
    v8 = (void *)v6;
    v9 = *(double *)(v1 + 64);
    v13[4] = sub_10022FFA0;
    v14 = v3;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256;
    v13[2] = sub_1000BED80;
    v13[3] = &unk_100459548;
    v10 = _Block_copy(v13);
    v11 = v14;
    v12 = in.super.super.isa;
    swift_retain(v3);
    swift_release(v11);
    objc_msgSend(v8, "animateWithDuration:delay:options:animations:completion:", v7, v10, 0, v9, 0.0);
    _Block_release(v10);
    swift_release(v3);
  }
}

Swift::Void __swiftcall KeyboardAvoidance.applyAdditionalSafeAreaInsets(to:)(UIViewController to)
{
  double *v1;
  id v3;
  void *v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  id v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double Height;
  double MinY;
  double v21;
  CGRect v22;
  CGRect v23;

  if (-[objc_class isViewLoaded](to.super.super.isa, "isViewLoaded"))
  {
    v3 = -[objc_class view](to.super.super.isa, "view");
    if (v3)
    {
      v4 = v3;
      objc_msgSend(v3, "convertRect:fromView:", 0, v1[4], v1[5], v1[6], v1[7]);
      v6 = v5;
      v8 = v7;
      v10 = v9;
      v12 = v11;
      v13 = -[objc_class view](to.super.super.isa, "view");
      if (v13)
      {
        v14 = v13;
        objc_msgSend(v13, "safeAreaInsets");
        v16 = v15;

        -[objc_class additionalSafeAreaInsets](to.super.super.isa, "additionalSafeAreaInsets");
        v18 = v16 - v17;
        objc_msgSend(v4, "frame");
        Height = CGRectGetHeight(v22);
        v23.origin.x = v6;
        v23.origin.y = v8;
        v23.size.width = v10;
        v23.size.height = v12;
        MinY = CGRectGetMinY(v23);

        if (Height - MinY - v18 < 0.0)
          v21 = 0.0;
        else
          v21 = Height - MinY - v18;
        -[objc_class setAdditionalSafeAreaInsets:](to.super.super.isa, "setAdditionalSafeAreaInsets:", 0.0, 0.0, v21, 0.0);
      }
      else
      {
        __break(1u);
      }
    }
  }
}

void KeyboardAvoidance.additionalSafeAreaInsets(for:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  double *v2;
  double v5;
  id v6;
  void *v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  id v16;
  void *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double Height;
  double MinY;
  char v24;
  CGRect v25;
  CGRect v26;

  v5 = 0.0;
  if (!objc_msgSend(a1, "isViewLoaded")
    || (v6 = objc_msgSend(a1, "view")) == 0)
  {
    v24 = 1;
LABEL_8:
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(double *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 24) = 0;
    *(_BYTE *)(a2 + 32) = v24;
    return;
  }
  v7 = v6;
  objc_msgSend(v6, "convertRect:fromView:", 0, v2[4], v2[5], v2[6], v2[7]);
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v16 = objc_msgSend(a1, "view");
  if (v16)
  {
    v17 = v16;
    objc_msgSend(v16, "safeAreaInsets");
    v19 = v18;

    objc_msgSend(a1, "additionalSafeAreaInsets");
    v21 = v19 - v20;
    objc_msgSend(v7, "frame");
    Height = CGRectGetHeight(v25);
    v26.origin.x = v9;
    v26.origin.y = v11;
    v26.size.width = v13;
    v26.size.height = v15;
    MinY = CGRectGetMinY(v26);

    v24 = 0;
    if (Height - MinY - v21 < 0.0)
      v5 = 0.0;
    else
      v5 = Height - MinY - v21;
    goto LABEL_8;
  }
  __break(1u);
}

void KeyboardAvoidance.recommendedScrollRect(in:preferredVisibleRect:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double *v3;
  uint64_t v7;
  __int128 v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  double v17;
  CGFloat v18;
  double v19;
  double v20;
  double v21;
  CGFloat v22;
  id v23;
  double v24;
  double v25;
  double v26;
  double v27;
  id v28;
  double v29;
  double v30;
  double v31;
  double Height;
  CGFloat x;
  CGFloat v34;
  CGFloat width;
  double v36;
  double v37;
  char v38;
  double v39;
  uint64_t v40;
  double v41;
  double v42;
  CGFloat v43;
  CGFloat v44;
  double v45;
  double v46;
  double v47;
  double v48;
  CGFloat y;
  double v50;
  _BYTE v51[40];
  CGRect v52;
  char v53;
  _OWORD v54[2];
  char v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;

  v7 = swift_allocObject(&unk_100459580, 48, 7);
  sub_100230240(a1, (uint64_t)v51);
  sub_1000149A8((uint64_t)v51, (uint64_t)v54, &qword_100498588);
  if (v55 == 1)
  {
    swift_deallocUninitializedObject(v7, 48, 7);
LABEL_13:
    v38 = 1;
    x = 0.0;
    v34 = 0.0;
    width = 0.0;
    v39 = 0.0;
    goto LABEL_14;
  }
  v8 = v54[1];
  *(_OWORD *)(v7 + 16) = v54[0];
  *(_OWORD *)(v7 + 32) = v8;
  v9 = objc_msgSend(a1, "contentScrollViewForEdge:", 1);
  if (!v9)
  {
    v40 = v7;
    goto LABEL_12;
  }
  v10 = v9;
  v11 = objc_msgSend(a1, "view");
  if (v11)
  {
    v12 = v11;
    v13 = objc_msgSend(v11, "window");

    if (!v13
      || (v14 = objc_msgSend(v13, "windowScene"), v13, !v14)
      || (v15 = objc_msgSend(v14, "screen"), v14, !v15))
    {
      swift_release(v7);

      goto LABEL_13;
    }
    *(_QWORD *)(v7 + 16) = 0;
    v16 = swift_allocObject(&unk_100459580, 48, 7);
    objc_msgSend(v10, "bounds");
    v18 = v17;
    v20 = v19;
    v22 = v21;
    *(double *)(v16 + 16) = v17;
    *(double *)(v16 + 24) = v19;
    *(double *)(v16 + 32) = v21;
    v23 = objc_msgSend(v15, "coordinateSpace");
    v24 = v3[4];
    v25 = v3[5];
    v26 = v3[6];
    v27 = v3[7];
    v28 = v10;
    objc_msgSend(v23, "convertRect:toCoordinateSpace:", v28, v24, v25, v26, v27);
    v30 = v29;

    swift_unknownObjectRelease(v23);
    v31 = v30 - v20;
    *(double *)(v16 + 40) = v30 - v20;
    v56.origin.x = v18;
    v56.origin.y = v20;
    v56.size.width = v22;
    v56.size.height = v30 - v20;
    Height = CGRectGetHeight(v56);
    if (CGRectGetHeight(*(CGRect *)(v7 + 16)) > Height)
    {
      x = *(double *)(v7 + 16);
      v34 = *(double *)(v7 + 24);
      width = *(double *)(v7 + 32);
      v36 = *(double *)(v7 + 40);
      v57.origin.x = v18;
      v57.origin.y = v20;
      v57.size.width = v22;
      v57.size.height = v31;
      v37 = CGRectGetHeight(v57);
      swift_release(v7);
      swift_release(v16);

      v38 = 0;
      v39 = v36 - v37;
LABEL_14:
      *(CGFloat *)a3 = x;
      *(CGFloat *)(a3 + 8) = v34;
      *(CGFloat *)(a3 + 16) = width;
      *(double *)(a3 + 24) = v39;
      *(_BYTE *)(a3 + 32) = v38;
      return;
    }
    sub_1000149A8(a2, (uint64_t)&v52, &qword_100498588);
    if ((v53 & 1) == 0)
    {
      y = v52.origin.y;
      v59 = CGRectUnion(*(CGRect *)(v7 + 16), v52);
      x = v59.origin.x;
      v34 = v59.origin.y;
      width = v59.size.width;
      v39 = v59.size.height;
      v59.origin.x = v18;
      v59.origin.y = v20;
      v59.size.width = v22;
      v59.size.height = v31;
      v50 = CGRectGetHeight(v59);
      v60.origin.x = x;
      v60.origin.y = v34;
      v60.size.width = width;
      v60.size.height = v39;
      if (CGRectGetHeight(v60) <= v50)
      {
        v61.origin.x = v18;
        v61.origin.y = v20;
        v61.size.width = v22;
        v61.size.height = v31;
        v45 = CGRectGetWidth(v61);
        v62.origin.x = x;
        v62.origin.y = v34;
        v62.size.width = width;
        v62.size.height = v39;
        if (CGRectGetWidth(v62) <= v45)
          goto LABEL_23;
      }
      v44 = y;
LABEL_22:
      x = sub_10023037C(v7, v16, v28, v44);
      v34 = v46;
      width = v47;
      v39 = v48;
LABEL_23:
      swift_release(v7);

      swift_release(v16);
      v38 = 0;
      goto LABEL_14;
    }
    objc_msgSend(v28, "contentOffset");
    v42 = v41;
    if (v41 > CGRectGetMinY(*(CGRect *)(v7 + 16))
      || (v58.origin.x = v18,
          v58.origin.y = v20,
          v58.size.width = v22,
          v58.size.height = v31,
          v43 = v42 + CGRectGetHeight(v58),
          CGRectGetMaxY(*(CGRect *)(v7 + 16)) > v43))
    {
      v44 = v42;
      goto LABEL_22;
    }
    swift_release(v7);

    v40 = v16;
LABEL_12:
    swift_release(v40);
    goto LABEL_13;
  }
  __break(1u);
}

uint64_t static KeyboardAvoidance.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  char v4;

  if (CGRectEqualToRect(*(CGRect *)a1, *(CGRect *)a2)
    && CGRectEqualToRect(*(CGRect *)(a1 + 32), *(CGRect *)(a2 + 32))
    && *(double *)(a1 + 64) == *(double *)(a2 + 64)
    && *(_QWORD *)(a1 + 72) == *(_QWORD *)(a2 + 72))
  {
    v4 = ((*(_BYTE *)(a1 + 80) & 1) == 0) ^ *(_BYTE *)(a2 + 80);
  }
  else
  {
    v4 = 0;
  }
  return v4 & 1;
}

uint64_t sub_10022F420(uint64_t a1, uint64_t a2)
{
  CGFloat v2;
  double v3;
  CGFloat v4;
  uint64_t v5;
  int v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  double v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  CGFloat v15;
  CGFloat v16;
  CGRect v17;
  CGRect v18;

  v2 = *(double *)(a1 + 48);
  v15 = *(double *)(a1 + 40);
  v16 = *(double *)(a1 + 32);
  v4 = *(double *)(a1 + 56);
  v3 = *(double *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(unsigned __int8 *)(a1 + 80);
  v7 = *(double *)(a2 + 32);
  v8 = *(double *)(a2 + 40);
  v9 = *(double *)(a2 + 48);
  v10 = *(double *)(a2 + 56);
  v11 = *(double *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(unsigned __int8 *)(a2 + 80);
  result = CGRectEqualToRect(*(CGRect *)a1, *(CGRect *)a2);
  if ((_DWORD)result)
  {
    v17.origin.y = v15;
    v17.origin.x = v16;
    v17.size.width = v2;
    v17.size.height = v4;
    v18.origin.x = v7;
    v18.origin.y = v8;
    v18.size.width = v9;
    v18.size.height = v10;
    result = CGRectEqualToRect(v17, v18);
    if ((_DWORD)result)
    {
      result = 0;
      if (v3 == v11)
      {
        if (v5 == v12)
          return v6 ^ v13 ^ 1u;
        else
          return 0;
      }
    }
  }
  return result;
}

uint64_t KeyboardObserver.update.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_retain(a3);
  return a2;
}

uint64_t KeyboardObserver.init(options:update:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  swift_retain(a3);
  v6 = swift_bridgeObjectRetain();
  sub_10022F81C(v6, a2, a3);
  swift_bridgeObjectRelease();
  swift_release(a3);
  return a1;
}

uint64_t sub_10022F5A0(uint64_t a1, uint64_t (*a2)(uint64_t, _OWORD *), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[88];
  _OWORD v13[5];
  char v14;
  _OWORD v15[5];
  char v16;

  v7 = type metadata accessor for Notification(0);
  __chkstk_darwin(v7);
  v9 = &v12[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t))(v10 + 16))(v9, a1);
  sub_10022FAA8((uint64_t)v9, (uint64_t)v12);
  result = sub_1000149A8((uint64_t)v12, (uint64_t)v13, &qword_100498580);
  if (v14 != 2)
  {
    v15[2] = v13[2];
    v15[3] = v13[3];
    v15[4] = v13[4];
    v16 = v14;
    v15[0] = v13[0];
    v15[1] = v13[1];
    return a2(a4, v15);
  }
  return result;
}

uint64_t sub_10022F698(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t sub_10022F738(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_10022F81C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  int64_t v6;
  int v7;
  int v8;
  char v9;
  char v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t Strong;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  id v28;
  uint64_t v29;
  uint64_t v30;

  v3 = a1;
  v4 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v4)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v4);
    v6 = sub_10022F698(v3);
    v8 = v7;
    v10 = v9 & 1;
    v30 = v3 + 56;
    result = (_QWORD *)objc_opt_self(NSNotificationCenter);
    v28 = result;
    v29 = v3;
    while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(v3 + 32))
    {
      if (((*(_QWORD *)(v30 + (((unint64_t)v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
        goto LABEL_11;
      if (*(_DWORD *)(v3 + 36) != v8)
        goto LABEL_12;
      v11 = *(char *)(*(_QWORD *)(v3 + 48) + v6);
      v12 = *(void **)*(&off_100459768 + v11);
      v13 = swift_allocObject(&unk_100459750, 33, 7);
      *(_QWORD *)(v13 + 16) = a2;
      *(_QWORD *)(v13 + 24) = a3;
      *(_BYTE *)(v13 + 32) = v11;
      v14 = type metadata accessor for NotificationObserver();
      v15 = swift_allocObject(v14, 64, 7);
      v16 = swift_unknownObjectWeakInit(v15 + 24, 0);
      *(_QWORD *)(v15 + 16) = v12;
      swift_unknownObjectWeakAssign(v16, 0);
      *(_BYTE *)(v15 + 32) = 1;
      *(_QWORD *)(v15 + 48) = sub_100230824;
      *(_QWORD *)(v15 + 56) = v13;
      v17 = v12;
      swift_retain(a3);
      swift_retain(v13);
      v18 = objc_msgSend(v28, "defaultCenter");
      *(_QWORD *)(v15 + 40) = v18;
      Strong = swift_unknownObjectWeakLoadStrong(v15 + 24);
      v20 = v17;
      v21 = v18;
      swift_retain(v15);
      objc_msgSend(v21, "addObserver:selector:name:object:", v15, "handleNotification:", v20, Strong);

      swift_release(v15);
      swift_unknownObjectRelease(Strong);

      swift_release(v13);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v22);
      v23 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v23);
      v24 = v15;
      v3 = v29;
      v25 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v24);
      specialized ContiguousArray._endMutation()(v25);
      result = (_QWORD *)sub_10022F738(v6, v8, v10 & 1, v29);
      v6 = (int64_t)result;
      v8 = v26;
      v10 = v27 & 1;
      if (!--v4)
      {
        sub_100230830((uint64_t)result, v26, v27 & 1);
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  return result;
}

uint64_t sub_10022FAA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  id v34;
  float v35;
  float v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  id v40;
  id v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  unsigned __int8 v48;
  double v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  _QWORD v55[5];
  __int128 v56;
  __int128 v57;

  v4 = Notification.userInfo.getter(a1);
  if (!v4)
    goto LABEL_32;
  v5 = v4;
  v53 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(UIKeyboardFrameBeginUserInfoKey);
  v54 = v6;
  AnyHashable.init<A>(_:)(v55, &v53, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v5 + 16) && (v7 = sub_1000A580C((uint64_t)v55), (v8 & 1) != 0))
  {
    sub_10000684C(*(_QWORD *)(v5 + 56) + 32 * v7, (uint64_t)&v56);
  }
  else
  {
    v56 = 0u;
    v57 = 0u;
  }
  sub_10009B178((uint64_t)v55);
  if (!*((_QWORD *)&v57 + 1))
    goto LABEL_29;
  v9 = sub_1000087DC(0, (unint64_t *)&qword_100496DB0, NSValue_ptr);
  if ((swift_dynamicCast(&v53, &v56, (char *)&type metadata for Any + 8, v9, 6) & 1) == 0)
    goto LABEL_31;
  v10 = v53;
  objc_msgSend(v53, "CGRectValue");
  v52 = v11;
  v13 = v12;
  v15 = v14;
  v17 = v16;

  v53 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(UIKeyboardFrameEndUserInfoKey);
  v54 = v18;
  AnyHashable.init<A>(_:)(v55, &v53, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v5 + 16) && (v19 = sub_1000A580C((uint64_t)v55), (v20 & 1) != 0))
  {
    sub_10000684C(*(_QWORD *)(v5 + 56) + 32 * v19, (uint64_t)&v56);
  }
  else
  {
    v56 = 0u;
    v57 = 0u;
  }
  sub_10009B178((uint64_t)v55);
  if (!*((_QWORD *)&v57 + 1))
    goto LABEL_29;
  if ((swift_dynamicCast(&v53, &v56, (char *)&type metadata for Any + 8, v9, 6) & 1) == 0)
    goto LABEL_31;
  v21 = v53;
  objc_msgSend(v53, "CGRectValue");
  v23 = v22;
  v25 = v24;
  v27 = v26;
  v29 = v28;

  v53 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(UIKeyboardAnimationDurationUserInfoKey);
  v54 = v30;
  AnyHashable.init<A>(_:)(v55, &v53, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v5 + 16) && (v31 = sub_1000A580C((uint64_t)v55), (v32 & 1) != 0))
  {
    sub_10000684C(*(_QWORD *)(v5 + 56) + 32 * v31, (uint64_t)&v56);
  }
  else
  {
    v56 = 0u;
    v57 = 0u;
  }
  sub_10009B178((uint64_t)v55);
  if (!*((_QWORD *)&v57 + 1))
    goto LABEL_29;
  v33 = sub_1000087DC(0, &qword_100497A98, NSNumber_ptr);
  if ((swift_dynamicCast(&v53, &v56, (char *)&type metadata for Any + 8, v33, 6) & 1) == 0)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  v34 = v53;
  objc_msgSend(v53, "floatValue");
  v36 = v35;

  v53 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(UIKeyboardAnimationCurveUserInfoKey);
  v54 = v37;
  AnyHashable.init<A>(_:)(v55, &v53, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v5 + 16) && (v38 = sub_1000A580C((uint64_t)v55), (v39 & 1) != 0))
  {
    sub_10000684C(*(_QWORD *)(v5 + 56) + 32 * v38, (uint64_t)&v56);
  }
  else
  {
    v56 = 0u;
    v57 = 0u;
  }
  sub_10009B178((uint64_t)v55);
  if (!*((_QWORD *)&v57 + 1))
  {
LABEL_29:
    swift_bridgeObjectRelease();
LABEL_30:
    sub_1002015F8((uint64_t)&v56);
    goto LABEL_32;
  }
  if ((swift_dynamicCast(&v53, &v56, (char *)&type metadata for Any + 8, v33, 6) & 1) == 0)
    goto LABEL_31;
  v40 = v53;
  v41 = objc_msgSend(v53, "integerValue");

  v53 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(UIKeyboardIsLocalUserInfoKey);
  v54 = v42;
  AnyHashable.init<A>(_:)(v55, &v53, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v5 + 16) && (v43 = sub_1000A580C((uint64_t)v55), (v44 & 1) != 0))
  {
    sub_10000684C(*(_QWORD *)(v5 + 56) + 32 * v43, (uint64_t)&v56);
  }
  else
  {
    v56 = 0u;
    v57 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10009B178((uint64_t)v55);
  if (!*((_QWORD *)&v57 + 1))
    goto LABEL_30;
  if ((swift_dynamicCast(&v53, &v56, (char *)&type metadata for Any + 8, v33, 6) & 1) != 0)
  {
    v50 = v53;
    v48 = objc_msgSend(v53, "BOOLValue");

    v49 = v36;
    v51 = type metadata accessor for Notification(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 8))(a1, v51);
    v47 = v52;
    goto LABEL_33;
  }
LABEL_32:
  v45 = type metadata accessor for Notification(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 8))(a1, v45);
  v41 = 0;
  v47 = 0;
  v13 = 0;
  v48 = 2;
  v15 = 0;
  v17 = 0;
  v23 = 0;
  v25 = 0;
  v27 = 0;
  v29 = 0;
  v49 = 0.0;
LABEL_33:
  *(_QWORD *)a2 = v47;
  *(_QWORD *)(a2 + 8) = v13;
  *(_QWORD *)(a2 + 16) = v15;
  *(_QWORD *)(a2 + 24) = v17;
  *(_QWORD *)(a2 + 32) = v23;
  *(_QWORD *)(a2 + 40) = v25;
  *(_QWORD *)(a2 + 48) = v27;
  *(_QWORD *)(a2 + 56) = v29;
  *(double *)(a2 + 64) = v49;
  *(_QWORD *)(a2 + 72) = v41;
  *(_BYTE *)(a2 + 80) = v48;
  return result;
}

uint64_t sub_10022FF64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_10022FF74(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_10022FF7C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 112, 7);
}

void sub_10022FFA0()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 104);
  KeyboardAvoidance.applyAdditionalSafeAreaInsets(to:)((UIViewController)v1);
  sub_10022FFE0(v1);
}

uint64_t sub_10022FFD0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 48, 7);
}

void sub_10022FFE0(void *a1)
{
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  char v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  id v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  id v29;

  v1 = objc_msgSend(a1, "contentScrollView");
  if (v1)
  {
    v29 = v1;
    v2 = objc_msgSend(v1, "firstResponder");
    if (v2)
    {
      v3 = v2;
      objc_opt_self(UIView);
      v4 = swift_dynamicCastObjCClass(v3);
      if (v4)
      {
        v5 = (void *)v4;
        v6 = v3;
        v7 = objc_msgSend(v5, "superview");
        if (v7)
        {
          v8 = v7;
          sub_1000087DC(0, &qword_100497EC8, UIView_ptr);
          while (1)
          {
            v9 = v8;
            v10 = v29;
            v11 = static NSObject.== infix(_:_:)(v9, v10);

            if ((v11 & 1) != 0)
              break;
            objc_opt_self(UICollectionReusableView);
            if (swift_dynamicCastObjCClass(v9)
              || (objc_opt_self(UITableViewCell), swift_dynamicCastObjCClass(v9)))
            {
              v9 = v9;

              v5 = v9;
              break;
            }
            v8 = objc_msgSend(v9, "superview");

            if (!v8)
              goto LABEL_10;
          }
        }
        else
        {
LABEL_10:
          v9 = 0;
        }
        objc_msgSend(v5, "frame");
        v13 = v12;
        v15 = v14;
        v17 = v16;
        v19 = v18;
        v20 = objc_msgSend(v5, "superview");
        objc_msgSend(v29, "convertRect:fromView:", v20, v13, v15, v17, v19);
        v22 = v21;
        v24 = v23;
        v26 = v25;
        v28 = v27;

        objc_msgSend(v29, "scrollRectToVisible:animated:", 0, v22, v24, v26, v28);
        v29 = v5;
      }

    }
  }
}

void sub_100230240(void *a1@<X0>, uint64_t a2@<X8>)
{
  char v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = 1;
  v4 = objc_msgSend(a1, "contentScrollViewForEdge:", 1);
  v5 = 0;
  if (!v4)
    goto LABEL_7;
  v6 = v4;
  v7 = objc_msgSend(v4, "firstResponder");
  if (!v7)
  {
LABEL_6:

    v3 = 1;
LABEL_7:
    v22 = 0;
    v24 = 0;
    v26 = 0;
    goto LABEL_8;
  }
  v8 = v7;
  objc_opt_self(UIView);
  v9 = (void *)swift_dynamicCastObjCClass(v8);
  if (!v9)
  {

    goto LABEL_6;
  }
  v10 = v9;
  objc_msgSend(v9, "frame");
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v19 = objc_msgSend(v10, "superview");
  objc_msgSend(v6, "convertRect:fromView:", v19, v12, v14, v16, v18);
  v5 = v20;
  v22 = v21;
  v24 = v23;
  v26 = v25;

  v3 = 0;
LABEL_8:
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v22;
  *(_QWORD *)(a2 + 16) = v24;
  *(_QWORD *)(a2 + 24) = v26;
  *(_BYTE *)(a2 + 32) = v3;
}

double sub_10023037C(uint64_t a1, uint64_t a2, void *a3, CGFloat a4)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  _BYTE v12[24];
  _BYTE v13[24];
  _BYTE v14[24];
  _BYTE v15[24];
  _BYTE v16[24];

  v8 = a1 + 16;
  v9 = a2 + 16;
  swift_beginAccess(a1 + 16, v16, 0, 0);
  v10 = *(double *)(a1 + 16);
  swift_beginAccess(v9, v15, 0, 0);
  CGRectGetHeight(*(CGRect *)(a2 + 16));
  swift_beginAccess(v8, v14, 0, 0);
  CGRectGetHeight(*(CGRect *)(a1 + 16));
  swift_beginAccess(v8, v13, 0, 0);
  if (CGRectGetMinY(*(CGRect *)(a1 + 16)) > a4)
  {
    objc_msgSend(a3, "adjustedContentInset");
    swift_beginAccess(v8, v12, 0, 0);
    CGRectGetMaxY(*(CGRect *)(a1 + 16));
  }
  return v10;
}

unint64_t sub_1002304BC()
{
  unint64_t result;

  result = qword_100498590;
  if (!qword_100498590)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for KeyboardObserver.Option, &type metadata for KeyboardObserver.Option);
    atomic_store(result, (unint64_t *)&qword_100498590);
  }
  return result;
}

__n128 initializeWithCopy for KeyboardAvoidance(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for KeyboardAvoidance(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 81))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 80);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyboardAvoidance(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 81) = 0;
    if (a2)
      *(_BYTE *)(result + 80) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyboardAvoidance()
{
  return &type metadata for KeyboardAvoidance;
}

uint64_t destroy for KeyboardObserver(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_release(a1[2]);
  return swift_bridgeObjectRelease(a1[3]);
}

uint64_t initializeWithCopy for KeyboardObserver(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRetain();
  swift_retain(v3);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for KeyboardObserver(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  v5 = a2[2];
  v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_retain(v5);
  swift_release(v6);
  v7 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for KeyboardObserver(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease(*a1);
  *(_OWORD *)a1 = *a2;
  swift_release(a1[2]);
  v4 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for KeyboardObserver()
{
  return &type metadata for KeyboardObserver;
}

uint64_t storeEnumTagSinglePayload for KeyboardObserver.Option(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100230780 + 4 * byte_100394F65[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1002307B4 + 4 * asc_100394F60[v4]))();
}

uint64_t sub_1002307B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002307BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002307C4);
  return result;
}

uint64_t sub_1002307D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002307D8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1002307DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002307E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyboardObserver.Option()
{
  return &type metadata for KeyboardObserver.Option;
}

uint64_t sub_100230800()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 33, 7);
}

uint64_t sub_100230824(uint64_t a1)
{
  uint64_t v1;

  return sub_10022F5A0(a1, *(uint64_t (**)(uint64_t, _OWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32));
}

uint64_t sub_100230830(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t Signpost.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for OSSignpostID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

id Signpost.log.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(type metadata accessor for Signpost(0) + 20));
}

uint64_t type metadata accessor for Signpost(uint64_t a1)
{
  uint64_t result;

  result = qword_1004985F8;
  if (!qword_1004985F8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Signpost);
  return result;
}

uint64_t Signpost.name.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for Signpost(0) + 24));
}

uint64_t Signpost.init(name:object:log:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void *a5@<X4>, char *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  id v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v29;
  int v30;

  v30 = a3;
  v29 = a2;
  v10 = sub_100005574(&qword_100498598);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v29 - v14;
  v16 = type metadata accessor for OSSignpostID(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v29 - v21;
  v23 = a5;
  swift_unknownObjectRetain(a4);
  OSSignpostID.init(log:object:)(v23, a4);
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v15, v22, v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, v16);
  sub_100230C70((uint64_t)v15, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v13, 1, v16) == 1)
  {
    OSSignpostID.init(log:)(v23);
    sub_100230CB8((uint64_t)v15);
    sub_100230CB8((uint64_t)v13);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(a6, v20, v16);
  }
  else
  {
    sub_100230CB8((uint64_t)v15);
    v24 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v24(v20, v13, v16);
    v24(a6, v20, v16);
  }
  swift_unknownObjectRelease(a4);
  v25 = type metadata accessor for Signpost(0);
  *(_QWORD *)&a6[*(int *)(v25 + 20)] = v23;
  v26 = &a6[*(int *)(v25 + 24)];
  v27 = v29;
  *(_QWORD *)v26 = a1;
  *((_QWORD *)v26 + 1) = v27;
  v26[16] = v30;
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v22, v16);
}

uint64_t Signpost.init(name:id:log:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, void *a5@<X4>, char *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t result;
  char *v21;
  uint64_t v22;

  v12 = sub_100005574(&qword_100498598);
  __chkstk_darwin(v12);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for OSSignpostID(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100230C70(a4, (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    OSSignpostID.init(log:)(a5);
    sub_100230CB8(a4);
    sub_100230CB8((uint64_t)v14);
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(a6, v18, v15);
  }
  else
  {
    sub_100230CB8(a4);
    v19 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    v19(v18, v14, v15);
    v19(a6, v18, v15);
  }
  result = type metadata accessor for Signpost(0);
  *(_QWORD *)&a6[*(int *)(result + 20)] = a5;
  v21 = &a6[*(int *)(result + 24)];
  *(_QWORD *)v21 = a1;
  *((_QWORD *)v21 + 1) = a2;
  v21[16] = a3;
  return result;
}

uint64_t sub_100230C70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005574(&qword_100498598);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100230CB8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005574(&qword_100498598);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Signpost.emit(dso:)(uint64_t a1)
{
  return sub_100230D34(a1, (uint64_t (*)(void))&static os_signpost_type_t.event.getter);
}

uint64_t Signpost.emit(dso:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  return sub_100230D94(a1, a2, a3, a4, a5, (uint64_t (*)(void))&static os_signpost_type_t.event.getter);
}

uint64_t Signpost.begin(dso:)(uint64_t a1)
{
  return sub_100230D34(a1, (uint64_t (*)(void))&static os_signpost_type_t.begin.getter);
}

uint64_t Signpost.begin(dso:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  return sub_100230D94(a1, a2, a3, a4, a5, (uint64_t (*)(void))&static os_signpost_type_t.begin.getter);
}

uint64_t Signpost.end(dso:)(uint64_t a1)
{
  return sub_100230D34(a1, (uint64_t (*)(void))&static os_signpost_type_t.end.getter);
}

uint64_t sub_100230D34(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = a2();
  v5 = type metadata accessor for Signpost(0);
  return os_signpost(_:dso:log:name:signpostID:)(v4, a1, *(_QWORD *)(v2 + *(int *)(v5 + 20)), *(_QWORD *)(v2 + *(int *)(v5 + 24)), *(_QWORD *)(v2 + *(int *)(v5 + 24) + 8), *(unsigned __int8 *)(v2 + *(int *)(v5 + 24) + 16), v2);
}

uint64_t Signpost.end(dso:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  return sub_100230D94(a1, a2, a3, a4, a5, (uint64_t (*)(void))&static os_signpost_type_t.end.getter);
}

uint64_t sub_100230D94(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t (*a6)(void))
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char v15;

  v12 = a6();
  v13 = type metadata accessor for Signpost(0);
  v15 = a4;
  return os_signpost(_:dso:log:name:signpostID:_:_:)(v12, a1, *(_QWORD *)(v6 + *(int *)(v13 + 20)), *(_QWORD *)(v6 + *(int *)(v13 + 24)), *(_QWORD *)(v6 + *(int *)(v13 + 24) + 8), *(unsigned __int8 *)(v6 + *(int *)(v13 + 24) + 16), v6, a2, a3, v15, a5);
}

uint64_t static Signpost.interval<A>(name:log:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, void *a4@<X3>, uint64_t (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  id v23;
  id v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v35[3];
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  unsigned int v38;

  v35[2] = a6;
  v36 = a5;
  v38 = a3;
  v37 = a2;
  v35[1] = a7;
  v9 = type metadata accessor for OSSignpostID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005574(&qword_100498598);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)v35 - v17;
  v19 = type metadata accessor for Signpost(0);
  __chkstk_darwin(v19);
  v21 = (char *)v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v18, 1, 1, v9);
  sub_100230C70((uint64_t)v18, (uint64_t)v16);
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v16, 1, v9);
  v23 = a4;
  v24 = v23;
  if (v22 == 1)
  {
    OSSignpostID.init(log:)(v23);
    sub_100230CB8((uint64_t)v18);
    sub_100230CB8((uint64_t)v16);
    v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v21, v12, v9);
  }
  else
  {
    sub_100230CB8((uint64_t)v18);
    v26 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v26(v12, v16, v9);
    v25 = ((uint64_t (*)(char *, char *, uint64_t))v26)(v21, v12, v9);
  }
  *(_QWORD *)&v21[*(int *)(v19 + 20)] = v24;
  v27 = &v21[*(int *)(v19 + 24)];
  v28 = v37;
  *(_QWORD *)v27 = a1;
  *((_QWORD *)v27 + 1) = v28;
  v29 = v38;
  v27[16] = v38;
  v30 = static os_signpost_type_t.begin.getter(v25);
  v31 = os_signpost(_:dso:log:name:signpostID:)(v30, &_mh_execute_header, v24, a1, v28, v29, v21);
  v32 = v36(v31);
  v33 = static os_signpost_type_t.end.getter(v32);
  os_signpost(_:dso:log:name:signpostID:)(v33, &_mh_execute_header, v24, a1, v28, v29, v21);
  return sub_1000C5A28((uint64_t)v21);
}

uint64_t *initializeBufferWithCopyOfBuffer for Signpost(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char *v11;
  char *v12;
  id v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for OSSignpostID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v10;
    v11 = (char *)a1 + v9;
    v12 = (char *)a2 + v9;
    *(_OWORD *)v11 = *(_OWORD *)v12;
    v11[16] = v12[16];
    v13 = v10;
  }
  return a1;
}

void destroy for Signpost(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OSSignpostID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

}

uint64_t initializeWithCopy for Signpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  v6 = type metadata accessor for OSSignpostID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
  v12 = v9;
  return a1;
}

uint64_t assignWithCopy for Signpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for OSSignpostID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a2 + v7);
  v9 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v10 = v8;

  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_QWORD *)(v12 + 8) = *(_QWORD *)(v13 + 8);
  *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
  return a1;
}

uint64_t initializeWithTake for Signpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for OSSignpostID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
  return a1;
}

uint64_t assignWithTake for Signpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for OSSignpostID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  v9 = *(int *)(a3 + 24);
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Signpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100231344);
}

uint64_t sub_100231344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for OSSignpostID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for Signpost(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002313CC);
}

uint64_t sub_1002313CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for OSSignpostID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_100231444(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for OSSignpostID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = &unk_100395068;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

void UnfairLock.locked<A>(_:)(void (*a1)(void))
{
  uint64_t v1;

  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 16));
  a1();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 16));
}

uint64_t UnfairLock.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  _DWORD *v2;

  v1 = swift_allocObject(v0, 24, 7);
  v2 = (_DWORD *)swift_slowAlloc(4, -1);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = 0;
  return v1;
}

uint64_t UnfairLock.init()()
{
  uint64_t v0;
  _DWORD *v1;

  v1 = (_DWORD *)swift_slowAlloc(4, -1);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = 0;
  return v0;
}

uint64_t UnfairLock.deinit()
{
  uint64_t v0;

  swift_slowDealloc(*(_QWORD *)(v0 + 16), -1, -1);
  return v0;
}

uint64_t UnfairLock.__deallocating_deinit()
{
  uint64_t v0;

  swift_slowDealloc(*(_QWORD *)(v0 + 16), -1, -1);
  return swift_deallocClassInstance(v0, 24, 7);
}

Swift::Void __swiftcall UnfairLock.assertOwned()()
{
  uint64_t v0;

  os_unfair_lock_assert_owner(*(const os_unfair_lock **)(v0 + 16));
}

Swift::Void __swiftcall UnfairLock.assertNotOwned()()
{
  uint64_t v0;

  os_unfair_lock_assert_not_owner(*(const os_unfair_lock **)(v0 + 16));
}

uint64_t type metadata accessor for UnfairLock()
{
  return objc_opt_self(_TtC14MusicUtilities10UnfairLock);
}

uint64_t WeakArray.endIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = type metadata accessor for WeakArray.WeakBox(0, a2, a2, a4);
  return Array.endIndex.getter(a1, v5);
}

uint64_t type metadata accessor for WeakArray.WeakBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100031DCC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakArray.WeakBox);
}

uint64_t WeakArray.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t Strong;
  _BYTE v9[8];

  v6 = type metadata accessor for WeakArray.WeakBox(0, a3, a3, a4);
  Array.subscript.getter(a1, a2, v6);
  Strong = swift_unknownObjectWeakLoadStrong(v9);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v9, v6);
  return Strong;
}

{
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  type metadata accessor for WeakArray.WeakBox(255, a3, a3, a4);
  v7 = type metadata accessor for Array(0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v7);
  RandomAccessCollection<>.indices.getter(&v15, v7, WitnessTable, &protocol witness table for Int);
  v14 = v15;
  v13 = a1;
  v9 = sub_100005574(&qword_100497A60);
  v11 = Range.contains(_:)(&v13, v9);
  result = 0;
  if ((v11 & 1) != 0)
    return WeakArray.subscript.getter(a1, a2, a3, v10);
  return result;
}

Swift::Int __swiftcall WeakArray.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

uint64_t WeakArray.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  v11[5] = a1;
  v11[2] = a2;
  v4 = type metadata accessor for Array(0);
  v6 = type metadata accessor for WeakArray.WeakBox(0, a2, a2, v5);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
  v9 = sub_10020CC14((void (*)(char *, char *))sub_100231898, (uint64_t)v11, v4, v6, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v8);
  swift_bridgeObjectRelease(a1);
  return v9;
}

uint64_t sub_10023184C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  swift_unknownObjectRetain(*a1);
  v4 = swift_unknownObjectWeakInit(a2, 0);
  swift_unknownObjectWeakAssign(v4, v3);
  return swift_unknownObjectRelease(v3);
}

uint64_t sub_100231898@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10023184C(a1, a2);
}

uint64_t WeakArray.append(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[8];

  v3 = *(_QWORD *)(a2 + 16);
  swift_unknownObjectRetain(a1);
  swift_unknownObjectWeakInit(v7, 0);
  swift_unknownObjectWeakAssign(v7, a1);
  swift_unknownObjectRelease(a1);
  type metadata accessor for WeakArray.WeakBox(255, v3, v3, v4);
  v5 = type metadata accessor for Array(0);
  return Array.append(_:)(v7, v5);
}

uint64_t WeakArray.remove(at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  _BYTE v9[8];

  v5 = type metadata accessor for WeakArray.WeakBox(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 16), a4);
  v6 = type metadata accessor for Array(0);
  Array.remove(at:)(a1, v6);
  Strong = swift_unknownObjectWeakLoadStrong(v9);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v9, v5);
  return Strong;
}

uint64_t WeakArray.remove(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  WeakArray.reap()();
  v10 = *(_QWORD *)(a2 + 16);
  v11 = a1;
  type metadata accessor for WeakArray.WeakBox(255, v10, v10, v4);
  v5 = type metadata accessor for Array(0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v5);
  v7 = swift_getWitnessTable(&protocol conformance descriptor for [A], v5);
  return RangeReplaceableCollection<>.removeAll(where:)(sub_100231AE0, &v9, v5, WitnessTable, v7);
}

Swift::Void __swiftcall WeakArray.reap()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t WitnessTable;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *(_QWORD *)(v0 + 16);
  type metadata accessor for WeakArray.WeakBox(255, v6, v6, v1);
  v2 = type metadata accessor for Array(0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v2);
  v4 = swift_getWitnessTable(&protocol conformance descriptor for [A], v2);
  RangeReplaceableCollection<>.removeAll(where:)(sub_100231B24, &v5, v2, WitnessTable, v4);
}

uint64_t sub_100231AE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 24);
  result = swift_unknownObjectWeakLoadStrong(a1);
  if (result)
  {
    v4 = result;
    swift_unknownObjectRelease(result);
    return v4 == v2;
  }
  return result;
}

BOOL sub_100231B24(uint64_t a1)
{
  uint64_t Strong;
  uint64_t v2;

  Strong = swift_unknownObjectWeakLoadStrong(a1);
  v2 = Strong;
  if (Strong)
    swift_unknownObjectRelease(Strong);
  return v2 == 0;
}

uint64_t WeakArray.allElements.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t WitnessTable;
  _QWORD v8[6];

  v8[5] = a1;
  v8[2] = a2;
  v5 = type metadata accessor for WeakArray(0, a2, a3, a4);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for WeakArray<A>, v5);
  return Sequence.compactMap<A>(_:)(sub_100231BD4, v8, v5, a2, WitnessTable);
}

uint64_t sub_100231BD4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_unknownObjectRetain(v2);
}

uint64_t type metadata accessor for WeakArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100031DCC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakArray);
}

uint64_t sub_100231BFC(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for WeakArray<A>, a1);
}

void *sub_100231C0C()
{
  return &protocol witness table for Int;
}

uint64_t sub_100231C18(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for DefaultIndices<A>, a1);
}

uint64_t sub_100231C28(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for Slice<A>, a1);
}

uint64_t sub_100231C38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t *v4;
  uint64_t result;

  result = WeakArray.endIndex.getter(*v4, *(_QWORD *)(a1 + 16), a2, a3);
  *a4 = result;
  return result;
}

void (*sub_100231C68(uint64_t **a1, uint64_t *a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t *v3;
  uint64_t *v7;
  uint64_t (*v8)(_QWORD *);
  uint64_t v9;

  v7 = (uint64_t *)malloc(0x30uLL);
  *a1 = v7;
  v8 = sub_100231CF8(v7, *a2, *v3, *(_QWORD *)(a3 + 16));
  v7[4] = v9;
  v7[5] = (uint64_t)v8;
  return sub_100231CCC;
}

void sub_100231CCC(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 40))(*a1);
  free(v1);
}

uint64_t (*sub_100231CF8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4))(_QWORD *a1)
{
  *a1 = WeakArray.subscript.getter(a2, a3, a4, a4);
  return sub_100089154;
}

void sub_100231D44(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t sub_100231D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100232004(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for Range, (uint64_t (*)(char *, char *, uint64_t, uint64_t))&dispatch thunk of static Comparable.< infix(_:_:));
}

uint64_t sub_100231D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100232004(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for ClosedRange, (uint64_t (*)(char *, char *, uint64_t, uint64_t))&dispatch thunk of static Comparable.<= infix(_:_:));
}

_QWORD *sub_100231DAC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    *a2 = *result + 1;
  return result;
}

_QWORD *sub_100231DC4(_QWORD *result)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    ++*result;
  return result;
}

uint64_t sub_100231DDC(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for IndexingIterator<A>, a1);
}

void sub_100231DEC(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = 0;
}

uint64_t sub_100231DF8(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for WeakArray<A>, a1);
  return Collection.underestimatedCount.getter(a1, WitnessTable);
}

uint64_t sub_100231E2C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t WitnessTable;
  uint64_t v4;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for WeakArray<A>, a1);
  v4 = j___ss32_copyCollectionToContiguousArrayys0dE0Vy7ElementQzGxSlRzlF(v1, a1, WitnessTable);
  swift_bridgeObjectRelease(*v1);
  return v4;
}

uint64_t sub_100231E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char v17;
  void (*v18)(char *, uint64_t, uint64_t);
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t result;
  void (*v22)(char *, uint64_t);
  uint64_t v23;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, &protocol requirements base descriptor for Collection, &associated conformance descriptor for Collection.Collection.Index: Comparable);
  v10 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v23 - v15;
  v17 = dispatch thunk of static Comparable.<= infix(_:_:)(a2, a1, AssociatedTypeWitness, AssociatedConformanceWitness);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v18(v16, a1, v10);
  v18(v14, a2, v10);
  if ((v17 & 1) == 0)
  {
    v22 = *(void (**)(char *, uint64_t))(v11 + 8);
    v22(v14, v10);
    result = ((uint64_t (*)(char *, uint64_t))v22)(v16, v10);
    goto LABEL_5;
  }
  v19 = dispatch thunk of static Comparable.<= infix(_:_:)(&v16[*(int *)(v10 + 36)], &v14[*(int *)(v10 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  v20 = *(void (**)(char *, uint64_t))(v11 + 8);
  v20(v14, v10);
  result = ((uint64_t (*)(char *, uint64_t))v20)(v16, v10);
  if ((v19 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_100232004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t (*v25)(char *, char *, uint64_t, uint64_t);

  v25 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, &protocol requirements base descriptor for Collection, &associated conformance descriptor for Collection.Collection.Index: Comparable);
  v13 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v24 - v16;
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v15);
  v20 = (char *)&v24 - v19;
  v21 = dispatch thunk of static Comparable.<= infix(_:_:)(a2, a1, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a2, v13);
  if ((v21 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    result = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, AssociatedTypeWitness);
    goto LABEL_5;
  }
  v22 = v25(v20, &v17[*(int *)(v13 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  result = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, AssociatedTypeWitness);
  if ((v22 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t WeakValuesDictionary.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, 24, 7);
  WeakValuesDictionary.init()();
  return v1;
}

_QWORD *WeakValuesDictionary.init()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t TupleTypeMetadata2;
  uint64_t v5;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 80);
  v3 = sub_1001FD4E8();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v2, v3, 0, 0);
  v5 = static Array._allocateUninitialized(_:)(0, TupleTypeMetadata2);
  v0[2] = Dictionary.init(dictionaryLiteral:)(v5, v2, v3, *(_QWORD *)(v1 + 96));
  return v0;
}

uint64_t WeakValuesDictionary.subscript.getter(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  uint64_t v12;
  _OWORD v13[2];
  id v14[4];
  _BYTE v15[24];

  v3 = (_QWORD *)*v1;
  swift_beginAccess(v1 + 2, v15, 0, 0);
  v4 = v1[2];
  v5 = v3[10];
  v6 = sub_1001FD4E8();
  v7 = v3[12];
  swift_bridgeObjectRetain();
  Dictionary.subscript.getter(v14, a1, v4, v5, v6, v7);
  swift_bridgeObjectRelease();
  v8 = v14[0];
  if (v14[0])
  {
    v9 = objc_msgSend(v14[0], "weakObjectValue");
    if (v9)
    {
      v10 = v9;
      _bridgeAnyObjectToAny(_:)(v9);

      swift_unknownObjectRelease(v10);
    }
    else
    {

      memset(v13, 0, sizeof(v13));
    }
    sub_1002015B0((uint64_t)v13, (uint64_t)v14);
    if (v14[3])
    {
      if ((swift_dynamicCast(&v12, v14, (char *)&type metadata for Any + 8, v3[11], 6) & 1) != 0)
        return v12;
    }
    else
    {
      sub_1002015F8((uint64_t)v14);
    }
  }
  return 0;
}

void WeakValuesDictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  id v19;

  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 80);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(a1);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v8)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
    v18[0] = a1;
    v11 = *(_QWORD *)(v5 + 88);
    swift_unknownObjectRetain(a1);
    v12 = _bridgeAnythingToObjectiveC<A>(_:)(v18, v11);
    v13 = objc_msgSend((id)objc_opt_self(NSValue), "valueWithWeakObject:", v12);
    swift_unknownObjectRelease(v12);
    v19 = v13;
    swift_beginAccess(v2 + 2, v18, 33, 0);
    v14 = sub_1001FD4E8();
    v15 = type metadata accessor for Dictionary(0, v6, v14, *(_QWORD *)(v5 + 96));
    Dictionary.subscript.setter(&v19, v10, v15);
    swift_endAccess(v18);
    swift_unknownObjectRelease_n(a1, 2);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  }
  else
  {
    swift_beginAccess(v2 + 2, v18, 33, 0);
    v16 = sub_1001FD4E8();
    v17 = type metadata accessor for Dictionary(0, v6, v16, *(_QWORD *)(v5 + 96));
    Dictionary.removeValue(forKey:)(&v19, a2, v17);
    swift_endAccess(v18);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);

  }
}

void (*WeakValuesDictionary.subscript.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  v5[1] = v2;
  v6 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v5[5] = malloc(v8);
  (*(void (**)(void))(v7 + 16))();
  *v5 = WeakValuesDictionary.subscript.getter(a2);
  return sub_1002325D4;
}

void sub_1002325D4(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v2 = *a1;
  v3 = **a1;
  v4 = (void *)(*a1)[4];
  v5 = (void *)(*a1)[5];
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v2[3] + 32))((*a1)[4], v5, v2[2]);
    v6 = swift_unknownObjectRetain(v3);
    WeakValuesDictionary.subscript.setter(v6, (uint64_t)v4);
    swift_unknownObjectRelease(*v2);
  }
  else
  {
    WeakValuesDictionary.subscript.setter(**a1, (uint64_t)v5);
  }
  free(v5);
  free(v4);
  free(v2);
}

Swift::Void __swiftcall WeakValuesDictionary.compact()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  char *v29;
  void *v30;
  uint64_t v31;
  id v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  unint64_t v44;
  int64_t v45;
  char *v46;
  char *v47;
  void *v48;
  char *v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  Swift::Bool IsNativeType;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  _QWORD *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  int64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t i;
  _QWORD *v81;
  uint64_t v82;
  _OWORD v83[2];
  _QWORD v84[4];
  char v85[24];
  uint64_t v86;

  v81 = (_QWORD *)*v0;
  v1 = v81[10];
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin();
  v4 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v74 = (char *)&v63 - v5;
  v63 = v6;
  __chkstk_darwin();
  v75 = (char *)&v63 - v7;
  v70 = sub_1001FD4E8();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v1, v70, "key value ", 0);
  v9 = type metadata accessor for Optional(0, TupleTypeMetadata2);
  v78 = *(_QWORD *)(v9 - 8);
  v79 = v9;
  __chkstk_darwin();
  v76 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v77 = (char *)&v63 - v11;
  v86 = static Array._allocateUninitialized(_:)(0, v1);
  v66 = v0 + 2;
  swift_beginAccess(v0 + 2, v85, 0, 0);
  v12 = v0[2];
  v67 = v4;
  if ((v12 & 0xC000000000000001) != 0)
  {
    if (v12 < 0)
      v13 = v12;
    else
      v13 = v12 & 0xFFFFFFFFFFFFFF8;
    v14 = __CocoaDictionary.makeIterator()(v13);
    v68 = 0;
    v15 = 0;
    v16 = 0;
    v17 = v14 | 0x8000000000000000;
  }
  else
  {
    v18 = -1 << *(_BYTE *)(v12 + 32);
    v15 = ~v18;
    v19 = *(_QWORD *)(v12 + 64);
    v68 = v12 + 64;
    v20 = -v18;
    if (v20 < 64)
      v21 = ~(-1 << v20);
    else
      v21 = -1;
    v16 = v21 & v19;
    v17 = v12;
  }
  v72 = v17 & 0x7FFFFFFFFFFFFFFFLL;
  v65 = v15;
  v71 = (unint64_t)(v15 + 64) >> 6;
  v64 = v71 - 1;
  v22 = swift_bridgeObjectRetain();
  v23 = 0;
  v73 = (char *)&type metadata for Any + 8;
  v69 = (char *)&type metadata for Swift.AnyObject + 8;
  for (i = v17; ; v17 = i)
  {
    if ((v17 & 0x8000000000000000) != 0)
    {
      v34 = __CocoaDictionary.Iterator.next()(v22);
      if (v34)
      {
        v37 = v34;
        v38 = v35;
        v39 = v76;
        _forceBridgeFromObjectiveC<A>(_:_:)(v34, v1, v1);
        swift_unknownObjectRelease(v37);
        v40 = *(int *)(TupleTypeMetadata2 + 48);
        *(_QWORD *)&v83[0] = v38;
        swift_unknownObjectRetain(v38);
        swift_dynamicCast(v84, v83, v69, v70, 7);
        v41 = v84[0];
        v42 = v38;
        v29 = v39;
        v43 = swift_unknownObjectRelease(v42);
        *(_QWORD *)&v39[v40] = v41;
        v31 = *(_QWORD *)(TupleTypeMetadata2 - 8);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v31 + 56))(v39, 0, 1, TupleTypeMetadata2, v43);
      }
      else
      {
        v31 = *(_QWORD *)(TupleTypeMetadata2 - 8);
        v29 = v76;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v31 + 56))(v76, 1, 1, TupleTypeMetadata2, v36);
      }
      v33 = v23;
      v26 = v16;
    }
    else
    {
      if (v16)
      {
        v26 = (v16 - 1) & v16;
        v27 = __clz(__rbit64(v16)) | (v23 << 6);
        v28 = v23;
LABEL_17:
        v29 = v76;
        (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v76, *(_QWORD *)(v17 + 48) + *(_QWORD *)(v2 + 72) * v27, v1);
        v30 = *(void **)(*(_QWORD *)(v17 + 56) + 8 * v27);
        *(_QWORD *)&v29[*(int *)(TupleTypeMetadata2 + 48)] = v30;
        v31 = *(_QWORD *)(TupleTypeMetadata2 - 8);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v29, 0, 1, TupleTypeMetadata2);
        v32 = v30;
        v33 = v28;
        goto LABEL_38;
      }
      v28 = v23 + 1;
      if (__OFADD__(v23, 1))
      {
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        return;
      }
      v33 = v23;
      if (v28 < v71)
      {
        v44 = *(_QWORD *)(v68 + 8 * v28);
        v17 = i;
        if (v44)
          goto LABEL_23;
        v33 = v23 + 1;
        if (v23 + 2 < v71)
        {
          v44 = *(_QWORD *)(v68 + 8 * (v23 + 2));
          v17 = i;
          if (v44)
          {
            v28 = v23 + 2;
LABEL_23:
            v26 = (v44 - 1) & v44;
            v27 = __clz(__rbit64(v44)) + (v28 << 6);
            goto LABEL_17;
          }
          v45 = v23 + 3;
          v33 = v23 + 2;
          if (v23 + 3 < v71)
          {
            v44 = *(_QWORD *)(v68 + 8 * v45);
            v17 = i;
            if (v44)
            {
              v28 = v23 + 3;
              goto LABEL_23;
            }
            while (1)
            {
              v28 = v45 + 1;
              if (__OFADD__(v45, 1))
                goto LABEL_57;
              if (v28 >= v71)
                break;
              v44 = *(_QWORD *)(v68 + 8 * v28);
              ++v45;
              if (v44)
                goto LABEL_23;
            }
            v33 = v64;
          }
        }
      }
      v31 = *(_QWORD *)(TupleTypeMetadata2 - 8);
      v29 = v76;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v76, 1, 1, TupleTypeMetadata2);
      v26 = 0;
    }
LABEL_38:
    v46 = v77;
    (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v77, v29, v79);
    v47 = v46;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v46, 1, TupleTypeMetadata2) == 1)
      break;
    v48 = *(void **)&v46[*(int *)(TupleTypeMetadata2 + 48)];
    v49 = v75;
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v75, v47, v1);
    v50 = objc_msgSend(v48, "weakObjectValue");
    if (v50)
    {
      v51 = v50;
      _bridgeAnyObjectToAny(_:)(v50);
      swift_unknownObjectRelease(v51);
    }
    else
    {
      memset(v83, 0, sizeof(v83));
    }
    sub_1002015B0((uint64_t)v83, (uint64_t)v84);
    if (!v84[3])
    {
      sub_1002015F8((uint64_t)v84);
LABEL_12:
      v24 = v74;
      (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v74, v49, v1);
      v25 = type metadata accessor for Array(0);
      Array.append(_:)(v24, v25);

      goto LABEL_13;
    }
    if ((swift_dynamicCast(&v82, v84, v73, v81[11], 6) & 1) == 0)
      goto LABEL_12;

    swift_unknownObjectRelease(v82);
LABEL_13:
    v22 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v49, v1);
    v23 = v33;
    v16 = v26;
  }
  sub_1000F38AC(i);
  v52 = v86;
  v53 = Array.endIndex.getter(v86, v1);
  v54 = v67;
  v55 = v70;
  v56 = v66;
  if (!v53)
    goto LABEL_55;
  v57 = 0;
  while (2)
  {
    IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)(v57, IsNativeType, v52, v1);
    if (IsNativeType)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v54, v52+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v57, v1);
      v59 = v57 + 1;
      if (__OFADD__(v57, 1))
        break;
      goto LABEL_49;
    }
    v61 = _ArrayBuffer._getElementSlowPath(_:)(v57, v52, v1);
    if (v63 != 8)
      goto LABEL_58;
    v62 = v61;
    v84[0] = v61;
    (*(void (**)(char *, _QWORD *, uint64_t))(v2 + 16))(v54, v84, v1);
    swift_unknownObjectRelease(v62);
    v59 = v57 + 1;
    if (!__OFADD__(v57, 1))
    {
LABEL_49:
      swift_beginAccess(v56, v84, 33, 0);
      v60 = type metadata accessor for Dictionary(0, v1, v55, v81[12]);
      Dictionary.removeValue(forKey:)(v83, v54, v60);
      swift_endAccess(v84);

      (*(void (**)(char *, uint64_t))(v2 + 8))(v54, v1);
      ++v57;
      if (v59 == Array.endIndex.getter(v52, v1))
        goto LABEL_55;
      continue;
    }
    break;
  }
  __break(1u);
LABEL_55:
  swift_bridgeObjectRelease();
}

uint64_t WeakValuesDictionary.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return v0;
}

uint64_t sub_100232DE0(uint64_t a1)
{
  char *v2;

  v2 = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_initClassMetadata2(a1, 0, 1, &v2, a1 + 104);
}

uint64_t type metadata accessor for WeakValuesDictionary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100031DCC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakValuesDictionary);
}

uint64_t sub_100232E30()
{
  uint64_t result;

  result = sub_100232E4C();
  qword_1004A2F90 = result;
  return result;
}

uint64_t sub_100232E4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  void (*v22)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unsigned int (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  char *v41;
  uint64_t *v42;
  char *v43;
  char *v44;
  id v45;
  NSURL *v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  char *v51;
  uint64_t result;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  char *v56;
  void (*v57)(uint64_t, char *, uint64_t);
  char *v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, _QWORD, uint64_t, uint64_t);
  _QWORD *v62;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin();
  v58 = (char *)&v53 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = *(_QWORD *)(sub_100005574(&qword_1004991A0) - 8);
  __chkstk_darwin();
  v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v7 = (char *)&v53 - v6;
  __chkstk_darwin();
  v9 = (char *)&v53 - v8;
  __chkstk_darwin();
  v57 = (void (*)(uint64_t, char *, uint64_t))((char *)&v53 - v10);
  __chkstk_darwin();
  v12 = (char *)&v53 - v11;
  v54 = sub_1002520D0((uint64_t)_swiftEmptyArrayStorage);
  v13 = sub_100005574(&qword_1004991A8);
  v14 = *(_QWORD *)(v3 + 72);
  v15 = *(unsigned __int8 *)(v3 + 80);
  v16 = (v15 + 32) & ~v15;
  v60 = v14;
  v17 = swift_allocObject(v13, v16 + 3 * v14, v15 | 7);
  *(_OWORD *)(v17 + 16) = xmmword_100384A40;
  v55 = v16;
  v53 = v17;
  v18 = v17 + v16;
  v19 = (void *)objc_opt_self(NSBundle);
  v20 = objc_msgSend(v19, "mainBundle");
  v21 = objc_msgSend(v20, "resourceURL");

  v59 = v1;
  if (v21)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v21);

    v22 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v1 + 56);
    v23 = v12;
    v24 = 0;
  }
  else
  {
    v22 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v1 + 56);
    v23 = v12;
    v24 = 1;
  }
  v61 = v22;
  v22((uint64_t)v23, v24, 1, v0);
  sub_1002366D8((uint64_t)v12, v18);
  type metadata accessor for BundleFinder();
  v25 = objc_msgSend(v19, "bundleForClass:", swift_getObjCClassFromMetadata());
  v26 = objc_msgSend(v25, "resourceURL");

  if (v26)
  {
    v27 = (uint64_t)v57;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v26);

    v28 = 0;
  }
  else
  {
    v28 = 1;
    v27 = (uint64_t)v57;
  }
  v29 = v61;
  v61(v27, v28, 1, v0);
  v30 = v60;
  sub_1002366D8(v27, v18 + v60);
  v31 = v18 + 2 * v30;
  v32 = objc_msgSend(v19, "mainBundle");
  v33 = objc_msgSend(v32, "bundleURL");

  v34 = v58;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v33);

  v35 = v59;
  v57 = *(void (**)(uint64_t, char *, uint64_t))(v59 + 32);
  v57(v31, v34, v0);
  v29(v31, 0, 1, v0);
  v62 = v54;
  sub_1002E3FF0(v53);
  v36 = v62[2];
  if (v36)
  {
    v37 = &qword_1004991A0;
    v38 = (uint64_t)v62 + v55;
    v54 = v62;
    v55 = 0x80000001003B7A00;
    v56 = v9;
    do
    {
      sub_100014A7C(v38, (uint64_t)v7, v37);
      v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
      if (v39(v7, 1, v0) == 1)
      {
        sub_100236720((uint64_t)v7);
        v40 = 1;
      }
      else
      {
        URL.appendingPathComponent(_:)(0xD000000000000022, v55);
        (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v0);
        v40 = 0;
      }
      v61((uint64_t)v9, v40, 1, v0);
      sub_100014A7C((uint64_t)v9, (uint64_t)v5, v37);
      if (v39(v5, 1, v0) == 1)
      {
        sub_100236720((uint64_t)v9);
      }
      else
      {
        v41 = v7;
        v42 = v37;
        v43 = v5;
        v44 = v58;
        v57((uint64_t)v58, v43, v0);
        v45 = objc_allocWithZone((Class)NSBundle);
        URL._bridgeToObjectiveC()(v46);
        v48 = v47;
        v49 = v45;
        v35 = v59;
        v50 = objc_msgSend(v49, "initWithURL:", v48);

        v51 = v44;
        v5 = v43;
        v37 = v42;
        v7 = v41;
        v9 = v56;
        (*(void (**)(char *, uint64_t))(v35 + 8))(v51, v0);
        sub_100236720((uint64_t)v9);
        if (v50)
        {
          swift_bridgeObjectRelease();
          return (uint64_t)v50;
        }
      }
      v38 += v60;
      --v36;
    }
    while (v36);
  }
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000037, 0x80000001003B79C0, "MusicCoreUI/resource_bundle_accessor.swift", 42, 2, 44, 0);
  __break(1u);
  return result;
}

void variable initialization expression of Artwork.caching(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

id variable initialization expression of Artwork.decoration@<X0>(_QWORD *a1@<X8>)
{
  int *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id result;

  v2 = (int *)type metadata accessor for Artwork.Decoration(0);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (char *)a1 + v2[5];
  v4 = type metadata accessor for UIView.Corner(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = v2[6];
  result = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  *(_QWORD *)((char *)a1 + v5) = result;
  *(_QWORD *)((char *)a1 + v2[7]) = 1;
  return result;
}

uint64_t variable initialization expression of Artwork.size()
{
  return 0;
}

double variable initialization expression of Artwork.View._laidBounds()
{
  return 0.0;
}

uint64_t variable initialization expression of Artwork.Decoration.corner@<X0>(uint64_t a1@<X8>)
{
  return sub_10000BE74((uint64_t (*)(_QWORD))&type metadata accessor for UIView.Corner, a1);
}

id variable initialization expression of Artwork.Decoration.fillColor()
{
  return objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
}

id variable initialization expression of Artwork.Placeholder.background()
{
  return objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemFillColor");
}

uint64_t variable initialization expression of Artwork.Placeholder.tint()
{
  uint64_t v0;
  id v1;

  if (qword_100498880 != -1)
    swift_once(&qword_100498880, sub_10023D424);
  v0 = qword_100499740;
  v1 = (id)qword_100499740;
  return v0;
}

id variable initialization expression of Artwork.Placeholder.symbolConfiguration()
{
  return objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithWeight:", 4);
}

double variable initialization expression of Artwork.Placeholder.imageScaleFactor()
{
  return 0.5;
}

double static CGFloat.squareAspectRatio.getter()
{
  return 1.0;
}

id variable initialization expression of Artwork.Placeholder.View.contentView()
{
  return objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");
}

unint64_t sub_100233550(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005574(&qword_1004991B0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (unint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v9 = *(v6 - 1);
    v10 = *v6;
    swift_bridgeObjectRetain();
    sub_1000516F8(v9, v10);
    result = sub_10009ABAC(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (uint64_t *)(v4[7] + 16 * result);
    *v14 = v9;
    v14[1] = v10;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100233674(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005574(&qword_100499198);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_10009ABAC(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10023378C(uint64_t a1)
{
  return sub_1002337A4(a1, &qword_100499190);
}

unint64_t sub_100233798(uint64_t a1)
{
  return sub_1002337A4(a1, &qword_100499188);
}

unint64_t sub_1002337A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  unint64_t result;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005574(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (void **)(a1 + 48);
  while (1)
  {
    v8 = (uint64_t)*(v7 - 2);
    v9 = (uint64_t)*(v7 - 1);
    v10 = *v7;
    swift_bridgeObjectRetain();
    v11 = v10;
    result = sub_10009ABAC(v8, v9);
    if ((v13 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v14 = (uint64_t *)(v5[6] + 16 * result);
    *v14 = v8;
    v14[1] = v9;
    *(_QWORD *)(v5[7] + 8 * result) = v11;
    v15 = v5[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v5[2] = v17;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002338B8(uint64_t a1)
{
  return sub_1000998E4(a1, &qword_100499158, &qword_100499160, (uint64_t (*)(uint64_t))sub_1000A5808);
}

unint64_t sub_1002338D4(uint64_t a1)
{
  return sub_1000998E4(a1, &qword_100499178, &qword_100499180, (uint64_t (*)(uint64_t))sub_1000A5808);
}

unint64_t sub_1002338F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005574(&qword_100499168);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 2);
    v8 = *((_QWORD *)v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain();
    result = sub_10009ABAC(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_BYTE *)(v4[7] + result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 24;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100233A00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  id *v6;
  char v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005574(&qword_100499150);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (id *)(a1 + 40);
  while (1)
  {
    v7 = *((_BYTE *)v6 - 8);
    v8 = *v6;
    result = sub_10025A2A0(v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v4[6] + result) = v7;
    *(_QWORD *)(v4[7] + 8 * result) = v8;
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t variable initialization expression of Lyrics.translationMap()
{
  return sub_100233674((uint64_t)_swiftEmptyArrayStorage);
}

unint64_t variable initialization expression of LyricsLoader.lyricsOperations()
{
  return sub_1002337A4((uint64_t)_swiftEmptyArrayStorage, &qword_100499190);
}

uint64_t variable initialization expression of LyricsLoader.accessQueue()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  _QWORD *v15;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin();
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin();
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DispatchQoS(0);
  __chkstk_darwin();
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000087DC(0, (unint64_t *)&qword_100499FB0, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v9);
  v15 = _swiftEmptyArrayStorage;
  v10 = sub_100006924((unint64_t *)&unk_100498E10, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v11 = sub_100005574((uint64_t *)&unk_100499FC0);
  v12 = sub_100233CE4();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v15, v11, v12, v4, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001BLL, 0x80000001003B78F0, v8, v6, v3, 0);
}

unint64_t sub_100233CE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100498E20;
  if (!qword_100498E20)
  {
    v1 = sub_100005600((uint64_t *)&unk_100499FC0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100498E20);
  }
  return result;
}

id variable initialization expression of LyricsLoader.operationQueue()
{
  id v0;

  v0 = objc_msgSend(objc_allocWithZone((Class)NSOperationQueue), "init");
  objc_msgSend(v0, "setMaxConcurrentOperationCount:", 1);
  return v0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.firstLineStartingPosition()
{
  return 60.0;
}

void variable initialization expression of SyncedLyricsViewController.Specs.selectedLinePosition(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0x4028000000000000;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.lineSpacing()
{
  return 25.0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.backgroundVocalsTopSpacing()
{
  return 15.0;
}

CGFloat variable initialization expression of SyncedLyricsViewController.Specs.backgroundVocalsDeselectedTransform@<D0>(_OWORD *a1@<X8>)
{
  return sub_100234938(a1, 0.9);
}

double variable initialization expression of SyncedLyricsViewController.Specs.lineDelay()
{
  return 0.05;
}

uint64_t variable initialization expression of SyncedLyricsViewController.Specs.font()
{
  sub_1000087DC(0, (unint64_t *)&qword_100498E28, UIFont_ptr);
  return static UIFont.preferredFont(forTextStyle:weight:)(UIFontTextStyleLargeTitle, UIFontWeightBold);
}

uint64_t variable initialization expression of SyncedLyricsViewController.Specs.backgroundVocalsFont()
{
  sub_1000087DC(0, (unint64_t *)&qword_100498E28, UIFont_ptr);
  return static UIFont.shortEmphasizedPreferredFont(forTextStyle:)(UIFontTextStyleTitle2);
}

id variable initialization expression of SyncedLyricsViewController.Specs.writtenByFont()
{
  return sub_100233E6C((double *)&UIFontWeightBold);
}

id variable initialization expression of SyncedLyricsViewController.Specs.songwritersNamesFont()
{
  return sub_100233E6C((double *)&UIFontWeightMedium);
}

id sub_100233E6C(double *a1)
{
  return objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:weight:", 22.0, *a1);
}

double variable initialization expression of SyncedLyricsViewController.Specs.emphasizingScaleRange()
{
  return 1.0;
}

id variable initialization expression of SyncedLyricsViewController.Specs.selectedTextColor()
{
  return sub_100234688((SEL *)&selRef_labelColor, (uint64_t)&unk_10045A1B8, (uint64_t)sub_100234A10, (uint64_t)&unk_10045A1D0);
}

id variable initialization expression of SyncedLyricsViewController.Specs.selectedUpcomingTextColor()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  _QWORD v13[5];
  uint64_t v14;

  v0 = (void *)objc_opt_self(UIColor);
  v1 = objc_msgSend(v0, "whiteColor");
  v2 = objc_msgSend(v1, "colorWithAlphaComponent:", 0.35);

  v3 = objc_msgSend(v0, "labelColor");
  v4 = objc_msgSend(v3, "colorWithAlphaComponent:", 0.85);

  v5 = objc_allocWithZone((Class)UIColor);
  v6 = swift_allocObject(&unk_10045A208, 32, 7);
  *(_QWORD *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v2;
  v13[4] = sub_1002369FC;
  v14 = v6;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_100234A18;
  v13[3] = &unk_10045A220;
  v7 = _Block_copy(v13);
  v8 = v14;
  v9 = v4;
  v10 = v2;
  v11 = objc_msgSend(v5, "initWithDynamicProvider:", v7, swift_release(v8).n128_f64[0]);

  _Block_release(v7);
  return v11;
}

id variable initialization expression of SyncedLyricsViewController.Specs.deselectedTextColor()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  _QWORD v13[5];
  uint64_t v14;

  v0 = (void *)objc_opt_self(UIColor);
  v1 = objc_msgSend(v0, "whiteColor");
  v2 = objc_msgSend(v1, "colorWithAlphaComponent:", 0.175);

  v3 = objc_msgSend(v0, "labelColor");
  v4 = objc_msgSend(v3, "colorWithAlphaComponent:", 0.4);

  v5 = objc_allocWithZone((Class)UIColor);
  v6 = swift_allocObject(&unk_10045A258, 32, 7);
  *(_QWORD *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v2;
  v13[4] = sub_1002369FC;
  v14 = v6;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_100234A18;
  v13[3] = &unk_10045A270;
  v7 = _Block_copy(v13);
  v8 = v14;
  v9 = v4;
  v10 = v2;
  v11 = objc_msgSend(v5, "initWithDynamicProvider:", v7, swift_release(v8).n128_f64[0]);

  _Block_release(v7);
  return v11;
}

id variable initialization expression of SyncedLyricsViewController.Specs.selectedBackgroundVocalsTextColor()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  _QWORD v13[5];
  uint64_t v14;

  v0 = (void *)objc_opt_self(UIColor);
  v1 = objc_msgSend(v0, "whiteColor");
  v2 = objc_msgSend(v1, "colorWithAlphaComponent:", 0.35);

  v3 = objc_msgSend(v0, "labelColor");
  v4 = objc_msgSend(v3, "colorWithAlphaComponent:", 0.85);

  v5 = objc_allocWithZone((Class)UIColor);
  v6 = swift_allocObject(&unk_10045A2A8, 32, 7);
  *(_QWORD *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v2;
  v13[4] = sub_1002369FC;
  v14 = v6;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_100234A18;
  v13[3] = &unk_10045A2C0;
  v7 = _Block_copy(v13);
  v8 = v14;
  v9 = v4;
  v10 = v2;
  v11 = objc_msgSend(v5, "initWithDynamicProvider:", v7, swift_release(v8).n128_f64[0]);

  _Block_release(v7);
  return v11;
}

id variable initialization expression of SyncedLyricsViewController.Specs.selectedUpcomingBackgroundVocalsTextColor()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  _QWORD v13[5];
  uint64_t v14;

  v0 = (void *)objc_opt_self(UIColor);
  v1 = objc_msgSend(v0, "whiteColor");
  v2 = objc_msgSend(v1, "colorWithAlphaComponent:", 0.175);

  v3 = objc_msgSend(v0, "labelColor");
  v4 = objc_msgSend(v3, "colorWithAlphaComponent:", 0.65);

  v5 = objc_allocWithZone((Class)UIColor);
  v6 = swift_allocObject(&unk_10045A2F8, 32, 7);
  *(_QWORD *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v2;
  v13[4] = sub_1002369FC;
  v14 = v6;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_100234A18;
  v13[3] = &unk_10045A310;
  v7 = _Block_copy(v13);
  v8 = v14;
  v9 = v4;
  v10 = v2;
  v11 = objc_msgSend(v5, "initWithDynamicProvider:", v7, swift_release(v8).n128_f64[0]);

  _Block_release(v7);
  return v11;
}

id variable initialization expression of SyncedLyricsViewController.Specs.deselectedScrollTextColor()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  _QWORD v13[5];
  uint64_t v14;

  v0 = (void *)objc_opt_self(UIColor);
  v1 = objc_msgSend(v0, "whiteColor");
  v2 = objc_msgSend(v1, "colorWithAlphaComponent:", 0.4);

  v3 = objc_msgSend(v0, "labelColor");
  v4 = objc_msgSend(v3, "colorWithAlphaComponent:", 0.4);

  v5 = objc_allocWithZone((Class)UIColor);
  v6 = swift_allocObject(&unk_10045A348, 32, 7);
  *(_QWORD *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v2;
  v13[4] = sub_1002369FC;
  v14 = v6;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_100234A18;
  v13[3] = &unk_10045A360;
  v7 = _Block_copy(v13);
  v8 = v14;
  v9 = v4;
  v10 = v2;
  v11 = objc_msgSend(v5, "initWithDynamicProvider:", v7, swift_release(v8).n128_f64[0]);

  _Block_release(v7);
  return v11;
}

CGFloat variable initialization expression of SyncedLyricsViewController.Specs.deselectedTransform@<D0>(_OWORD *a1@<X8>)
{
  return sub_100234938(a1, 0.98);
}

id variable initialization expression of SyncedLyricsViewController.Specs.hiddenTextColor()
{
  return objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
}

double variable initialization expression of SyncedLyricsViewController.Specs.lineTapProgressFreezeDuration()
{
  return 0.1;
}

double variable initialization expression of SyncedLyricsViewController.Specs.glowRadius()
{
  return 5.0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.glowRange()
{
  return 0.0;
}

id variable initialization expression of SyncedLyricsViewController.Specs.lineProgressionGradientColor()
{
  return sub_100234688((SEL *)&selRef_tintColor, (uint64_t)&unk_10045A398, (uint64_t)sub_1002369FC, (uint64_t)&unk_10045A3B0);
}

id sub_100234688(SEL *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  _QWORD v19[5];
  uint64_t v20;

  v8 = (void *)objc_opt_self(UIColor);
  v9 = objc_msgSend(v8, "whiteColor");
  v10 = objc_msgSend(v8, *a1);
  v11 = objc_allocWithZone((Class)UIColor);
  v12 = swift_allocObject(a2, 32, 7);
  *(_QWORD *)(v12 + 16) = v10;
  *(_QWORD *)(v12 + 24) = v9;
  v19[4] = a3;
  v20 = v12;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 1107296256;
  v19[2] = sub_100234A18;
  v19[3] = a4;
  v13 = _Block_copy(v19);
  v14 = v20;
  v15 = v10;
  v16 = v9;
  v17 = objc_msgSend(v11, "initWithDynamicProvider:", v13, swift_release(v14).n128_f64[0]);

  _Block_release(v13);
  return v17;
}

id variable initialization expression of SyncedLyricsViewController.Specs.lineProgressionBackgroundVocalsGradientColor()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  _QWORD v13[5];
  uint64_t v14;

  v0 = (void *)objc_opt_self(UIColor);
  v1 = objc_msgSend(v0, "whiteColor");
  v2 = objc_msgSend(v1, "colorWithAlphaComponent:", 0.175);

  v3 = objc_msgSend(v0, "tintColor");
  v4 = objc_msgSend(v3, "colorWithAlphaComponent:", 0.175);

  v5 = objc_allocWithZone((Class)UIColor);
  v6 = swift_allocObject(&unk_10045A3E8, 32, 7);
  *(_QWORD *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v2;
  v13[4] = sub_1002369FC;
  v14 = v6;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_100234A18;
  v13[3] = &unk_10045A400;
  v7 = _Block_copy(v13);
  v8 = v14;
  v9 = v4;
  v10 = v2;
  v11 = objc_msgSend(v5, "initWithDynamicProvider:", v7, swift_release(v8).n128_f64[0]);

  _Block_release(v7);
  return v11;
}

double variable initialization expression of SyncedLyricsViewController.Specs.lineProgressionGradientFeather()
{
  return 30.0;
}

CGFloat variable initialization expression of SyncedLyricsViewController.Specs.touchDownTransform@<D0>(_OWORD *a1@<X8>)
{
  return sub_100234938(a1, 0.95);
}

CGFloat sub_100234938@<D0>(_OWORD *a1@<X8>, CGFloat a2@<D0>)
{
  CGFloat result;
  __int128 v4;
  __int128 v5;
  CGAffineTransform v6;

  CGAffineTransformMakeScale(&v6, a2, a2);
  result = v6.a;
  v4 = *(_OWORD *)&v6.c;
  v5 = *(_OWORD *)&v6.tx;
  *a1 = *(_OWORD *)&v6.a;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

double variable initialization expression of SyncedLyricsViewController.Specs.vocalGroupWidthCoefficient()
{
  return 0.85;
}

id variable initialization expression of SyncedLyricsViewController.Specs.highlightViewBackgroundColor()
{
  return objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithWhite:alpha:", 1.0, 0.08);
}

double variable initialization expression of SyncedLyricsViewController.Specs.highlightViewMargin()
{
  return 16.0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.instrumentalBreakVisualizationMinSeconds()
{
  return 7.0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.instrumentalBreakViewHeight()
{
  return 40.0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.syllableLift()
{
  return 2.0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.lineFinishProgressAnimationDuration()
{
  return 0.25;
}

uint64_t sub_1002349E4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_100234A10(void *a1)
{
  uint64_t v1;

  return sub_100281738(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

id sub_100234A18(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t (*v4)(void);
  id v5;
  void *v6;

  v4 = *(uint64_t (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v6 = (void *)v4();
  swift_release(v3);

  return v6;
}

uint64_t sub_100234A68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100234A78(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

double variable initialization expression of SyncedLyricsViewController.bottomTapAreaHeight()
{
  return Int.seconds.getter(0);
}

void *variable initialization expression of SyncedLyricsViewController.specs@<X0>(void *a1@<X8>)
{
  _BYTE v3[544];

  sub_100281C24(0, 0, v3);
  return memcpy(a1, v3, 0x219uLL);
}

id variable initialization expression of SyncedLyricsViewController.scrollView()
{
  return objc_msgSend(objc_allocWithZone((Class)UIScrollView), "init");
}

id variable initialization expression of SyncedLyricsViewController.tapFeedbackGenerator()
{
  return objc_msgSend(objc_allocWithZone((Class)UISelectionFeedbackGenerator), "init");
}

id variable initialization expression of LineProgressGradientView.gradientView()
{
  return sub_100235214((void (*)(_QWORD))type metadata accessor for LineProgressGradientView.GradientView);
}

uint64_t variable initialization expression of NoticePresenter._notice@<X0>(uint64_t a1@<X8>)
{
  return sub_10000BE74(type metadata accessor for Notice, a1);
}

__n128 variable initialization expression of NoticePresenter.uiKitConfiguration@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  CGFloat bottom;
  CGFloat trailing;
  __n128 result;
  __n128 v6;

  if (qword_100498AA8 != -1)
    swift_once(&qword_100498AA8, sub_100298208);
  v2 = static NoticePresenter.defaultEdgePadding;
  v6 = *(__n128 *)&NSDirectionalEdgeInsetsZero.top;
  bottom = NSDirectionalEdgeInsetsZero.bottom;
  trailing = NSDirectionalEdgeInsetsZero.trailing;
  swift_unknownObjectWeakInit(a1, 0);
  *(_BYTE *)(a1 + 8) = 2;
  *(_QWORD *)(a1 + 16) = v2;
  result = v6;
  *(__n128 *)(a1 + 24) = v6;
  *(CGFloat *)(a1 + 40) = bottom;
  *(CGFloat *)(a1 + 48) = trailing;
  return result;
}

uint64_t variable initialization expression of NoticePresentingModifier._controller()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for NoticePresenter(0);
  v1 = sub_100006924(&qword_100498E30, type metadata accessor for NoticePresenter, (uint64_t)&protocol conformance descriptor for NoticePresenter);
  return EnvironmentObject.init()(v0, v1);
}

double variable initialization expression of ArtistRazzmatazzView._rowHeight()
{
  return 75.0;
}

uint64_t variable initialization expression of ArtworkImage.Placeholder.View._placeholderStyle@<X0>(_QWORD *a1@<X8>)
{
  return sub_10023540C((uint64_t)&unk_1003956B0, &qword_100498E38, a1);
}

uint64_t variable initialization expression of ArtworkImage.Placeholder.View._colorSchemeContrast@<X0>(_QWORD *a1@<X8>)
{
  return sub_10023540C((uint64_t)&unk_1003956D8, (uint64_t *)&unk_100498E40, a1);
}

uint64_t variable initialization expression of ArtworkImage.Placeholder.View.Style.blendMode@<X0>(uint64_t a1@<X8>)
{
  return sub_10000BE74((uint64_t (*)(_QWORD))&type metadata accessor for BlendMode, a1);
}

uint64_t variable initialization expression of Card.DisplayStyle._displayCornerRadius()
{
  return swift_getKeyPath(&unk_100395708);
}

uint64_t sub_100234C80@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.displayCornerRadius.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_100234CB0(uint64_t a1)
{
  return EnvironmentValues.displayCornerRadius.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t variable initialization expression of Collaboration.Flow.View._dismiss@<X0>(_QWORD *a1@<X8>)
{
  return sub_10023540C((uint64_t)&unk_100395738, &qword_10049F780, a1);
}

uint64_t sub_100234CF0()
{
  return EnvironmentValues.dismiss.getter();
}

double variable initialization expression of Card.ViewController.maxRegularWidth()
{
  return 414.0;
}

uint64_t variable initialization expression of CarouselView.selectedItem@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = type metadata accessor for Binding(0, a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
}

uint64_t variable initialization expression of CarouselView._scrollViewProxy@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for ScrollViewProxy(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t variable initialization expression of CarouselView._layoutDirection@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  *a1 = swift_getKeyPath(&unk_100395768);
  v2 = sub_100005574((uint64_t *)&unk_100498E50);
  return swift_storeEnumTagMultiPayload(a1, v2, 0);
}

uint64_t variable initialization expression of CircularProgressView._state()
{
  return 0;
}

id variable initialization expression of CircularProgressView.trackLayer()
{
  return objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
}

uint64_t variable initialization expression of Collaboration.Management.Model._hasNetworkConnectivity()
{
  _QWORD v1[15];

  static ApplicationCapabilities.shared.getter((uint64_t)v1);
  sub_1000BC0D0(v1);
  return BYTE1(v1[0]);
}

uint64_t variable initialization expression of Collaboration.Management.Model.$__lazy_storage_$_artworkViewModel@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = sub_100005574((uint64_t *)&unk_10049F7D0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t variable initialization expression of Collaboration.Management.View._dynamicTypeSize@<X0>(_QWORD *a1@<X8>)
{
  return sub_10023540C((uint64_t)&unk_100395798, &qword_100498E60, a1);
}

uint64_t variable initialization expression of Collaboration.Management.View._openURL@<X0>(_QWORD *a1@<X8>)
{
  return sub_10023540C((uint64_t)&unk_1003957C8, &qword_100498E68, a1);
}

uint64_t variable initialization expression of PlaylistCurators.View._horizontalSizeClass@<X0>(_QWORD *a1@<X8>)
{
  return sub_10023540C((uint64_t)&unk_1003957F8, &qword_100498E70, a1);
}

uint64_t sub_100234EC0()
{
  return EnvironmentValues.horizontalSizeClass.getter();
}

uint64_t sub_100234EE0(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v5;

  sub_100005574(&qword_100499170);
  __chkstk_darwin();
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100014A7C(a1, (uint64_t)v3, &qword_100499170);
  return EnvironmentValues.horizontalSizeClass.setter(v3);
}

uint64_t variable initialization expression of Collaboration.Flow.Collaborator.artwork@<X0>(uint64_t a1@<X8>)
{
  return sub_10000BE74((uint64_t (*)(_QWORD))&type metadata accessor for Artwork, a1);
}

uint64_t variable initialization expression of InlineProfileEditingView.Context._name()
{
  return 0;
}

uint64_t variable initialization expression of InlineProfileEditingView._imagePickerSourceType()
{
  return 1;
}

uint64_t variable initialization expression of MoreLabel._layoutDirection@<X0>(_QWORD *a1@<X8>)
{
  return sub_10023540C((uint64_t)&unk_100395768, (uint64_t *)&unk_100498E50, a1);
}

uint64_t variable initialization expression of MoreLabel._accessibilityShowButtonShapes()
{
  return swift_getKeyPath(&unk_100395828);
}

uint64_t variable initialization expression of LoadingView.style()
{
  return 0x10000000000;
}

id variable initialization expression of LoadingView.label()
{
  return objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
}

id variable initialization expression of LoadingView.activityIndicator()
{
  return objc_msgSend(objc_allocWithZone((Class)UIActivityIndicatorView), "initWithActivityIndicatorStyle:", 100);
}

uint64_t variable initialization expression of NoticeView._dismiss()
{
  return swift_getKeyPath(&unk_100395858);
}

UIFontTextStyle variable initialization expression of SymbolButton.Configuration.symbol@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = UIFontTextStyleSubheadline;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  *(_OWORD *)(a1 + 48) = xmmword_1003952D0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = -1;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 112) = 0;
  return UIFontTextStyleSubheadline;
}

UIFontTextStyle SymbolButton.Title.init()@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = UIFontTextStyleSubheadline;
  *(UIFontWeight *)(a1 + 24) = UIFontWeightSemibold;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  return UIFontTextStyleSubheadline;
}

double variable initialization expression of SymbolButton.Configuration.material@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

double variable initialization expression of SymbolButton.Configuration.customView@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

double variable initialization expression of SymbolButton.Configuration.symbolToTextSpacing()
{
  return 4.0;
}

double variable initialization expression of SymbolButton.Configuration.minimumSize()
{
  return sub_1002355A8(&qword_100498D18, (uint64_t)&static SymbolButton.Configuration.platterMinimumSize);
}

CGFloat variable initialization expression of SymbolButton.Configuration.contentInsets()
{
  return NSDirectionalEdgeInsetsZero.top;
}

uint64_t variable initialization expression of SymbolButton.Configuration.accessibility()
{
  return 1;
}

uint64_t variable initialization expression of PlayIntentButtonWrapper._playIntentButtonMaterial()
{
  return swift_getKeyPath(&unk_100395880);
}

char *variable initialization expression of PlayIntentLayoutHelper.playButton()
{
  type metadata accessor for SymbolButton(0);
  return SymbolButton.__allocating_init(intent:)(0);
}

char *variable initialization expression of PlayIntentLayoutHelper.shuffleButton()
{
  type metadata accessor for SymbolButton(0);
  return SymbolButton.__allocating_init(intent:)(1);
}

uint64_t variable initialization expression of PlayIntentLayoutHelper.configuration()
{
  return 513;
}

id variable initialization expression of QRCodeOverlayViewController.backgroundView()
{
  return objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "init");
}

id variable initialization expression of QRCodeOverlayViewController.qrCodeView()
{
  return sub_100235214((void (*)(_QWORD))type metadata accessor for QRCodeOverlayViewController.ContainerView);
}

id sub_100235214(void (*a1)(_QWORD))
{
  a1(0);
  return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), "init");
}

id variable initialization expression of QRCodeOverlayViewController.logoView()
{
  NSString v0;
  id v1;
  id v2;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v0);

  v2 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithImage:", v1);
  return v2;
}

id variable initialization expression of QRCodeOverlayViewController.titleLabel()
{
  return objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
}

id variable initialization expression of QRCodeOverlayViewController.subtitleLabelEffectView()
{
  id v0;
  id v1;

  if (qword_100498CA0 != -1)
    swift_once(&qword_100498CA0, sub_10033FA18);
  v0 = objc_msgSend((id)objc_opt_self(UIVibrancyEffect), "effectForBlurEffect:", qword_1004A3EE8);
  v1 = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "initWithEffect:", v0);

  return v1;
}

id variable initialization expression of QRCodeOverlayViewController.ContainerView.imageView()
{
  return sub_100235460((Class *)UIImageView_ptr);
}

id variable initialization expression of QRCodeOverlayViewController.ContainerView.overlayLayer()
{
  return objc_msgSend(objc_allocWithZone((Class)CALayer), "init");
}

uint64_t variable initialization expression of QRCodeOverlayViewController.ImageViewRepresentable._foregroundColor()
{
  return swift_getKeyPath(&unk_1003958A8);
}

uint64_t sub_1002353D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.effectiveForegroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t variable initialization expression of Reactions.StackView._colorScheme@<X0>(_QWORD *a1@<X8>)
{
  return sub_10023540C((uint64_t)&unk_1003958D8, &qword_100498ED8, a1);
}

uint64_t sub_10023540C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;

  *a3 = swift_getKeyPath(a1);
  v5 = sub_100005574(a2);
  return swift_storeEnumTagMultiPayload(a3, v5, 0);
}

id variable initialization expression of SliderView.stackView()
{
  return sub_100235460((Class *)UIStackView_ptr);
}

id variable initialization expression of SliderView.remainingTrack()
{
  return sub_100235460((Class *)UIView_ptr);
}

id sub_100235460(Class *a1)
{
  id v1;
  id v2;

  v1 = objc_msgSend(objc_allocWithZone(*a1), "init");
  v2 = UIView.forAutolayout.getter();

  return v2;
}

id variable initialization expression of SliderView.feedbackGenerator()
{
  return objc_msgSend(objc_allocWithZone((Class)UIImpactFeedbackGenerator), "initWithStyle:", 0);
}

id variable initialization expression of SliderView.trackLayoutGuide()
{
  return objc_msgSend(objc_allocWithZone((Class)UILayoutGuide), "init");
}

id variable initialization expression of SliderView.elapsedTrackColor()
{
  return objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
}

id variable initialization expression of SliderView.remainingTrackColor()
{
  return objc_msgSend((id)objc_opt_self(UIColor), "systemFillColor");
}

id variable initialization expression of SliderView.trackingColor()
{
  if (qword_100498920 != -1)
    swift_once(&qword_100498920, sub_10024DEF0);
  return (id)static UIColor.MusicTint.normal;
}

double variable initialization expression of SymbolButton.hitRectMinimumSize()
{
  return sub_1002355A8(&qword_100498D20, (uint64_t)&static SymbolButton.Configuration.hitRectMinimumSize);
}

double sub_1002355A8(_QWORD *a1, uint64_t a2)
{
  if (*a1 != -1)
    swift_once();
  return *(double *)a2;
}

id variable initialization expression of SymbolButton.containerView()
{
  return objc_msgSend(objc_allocWithZone((Class)UIView), "init");
}

id variable initialization expression of SymbolButton.materialView()
{
  objc_class *v0;
  id v1;
  objc_super v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v4 = 1;
  v0 = (objc_class *)type metadata accessor for SymbolButton.MaterialView();
  v5 = 0u;
  v6 = 0u;
  v7 = 0;
  v3.receiver = objc_allocWithZone(v0);
  v3.super_class = v0;
  v1 = objc_msgSendSuper2(&v3, "initWithEffect:", 0);
  sub_10035AF88((uint64_t)&v4);

  return v1;
}

id variable initialization expression of SymbolButton.backgroundView()
{
  double v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  _BYTE v6[24];

  if (qword_100498CF8 != -1)
    swift_once(&qword_100498CF8, sub_100355D50);
  swift_beginAccess(&static SymbolButton.Background.clear, v6, 0, 0);
  v0 = *(double *)&static SymbolButton.Background.clear;
  v1 = (void *)qword_1004A4078;
  v2 = qword_1004A4080;
  v3 = qword_1004A4088;
  objc_allocWithZone((Class)type metadata accessor for SymbolButton.BackgroundView());
  swift_bridgeObjectRetain();
  v4 = v1;
  return sub_10035B374(v1, v0, v2, v3);
}

uint64_t variable initialization expression of SymbolButton.$__lazy_storage_$_metrics@<X0>(uint64_t a1@<X8>)
{
  return sub_10000BE74(type metadata accessor for SymbolButton.Metrics, a1);
}

double variable initialization expression of SymbolButton.Update.animationOptions()
{
  return 0.0;
}

double variable initialization expression of SymbolButton.Update.AnimationOptions.relativeStartTime()
{
  return 0.0;
}

UIFontTextStyle variable initialization expression of SymbolButton.Symbol.style()
{
  return UIFontTextStyleSubheadline;
}

uint64_t variable initialization expression of SymbolButton.Symbol.weight()
{
  return 6;
}

uint64_t variable initialization expression of SymbolButton.Symbol.offset()
{
  return 0;
}

UIFontWeight variable initialization expression of SymbolButton.Title.weight()
{
  return UIFontWeightSemibold;
}

CGFloat variable initialization expression of SymbolButton.CustomView.insets()
{
  return UIEdgeInsetsZero.top;
}

double variable initialization expression of VerticalToggleSlider.packageDefinition@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

float variable initialization expression of VerticalToggleSlider.minLevelOffsetRatio()
{
  double v0;

  if (qword_100498D88 != -1)
    swift_once(&qword_100498D88, sub_100370E40);
  v0 = *((double *)&xmmword_1004A1688 + 1);
  if (qword_100498D78 != -1)
    swift_once(&qword_100498D78, sub_100370E18);
  return 1.0 / v0 * *(double *)&qword_1004A1670;
}

uint64_t variable initialization expression of VerticalToggleSlider.growAnchorPoint()
{
  return 8;
}

float variable initialization expression of VerticalToggleSlider.internalValueRange()
{
  return 0.0;
}

float variable initialization expression of VerticalToggleSlider._maxValue()
{
  return 1.0;
}

float variable initialization expression of VerticalToggleSlider._minValue()
{
  return 0.0;
}

id variable initialization expression of VerticalToggleSlider.blurEffect()
{
  if (qword_100498D60 != -1)
    swift_once(&qword_100498D60, sub_10036FC94);
  return objc_msgSend((id)objc_opt_self(UIBlurEffect), "effectWithBlurRadius:", *(double *)&qword_1004A1640);
}

double variable initialization expression of VerticalToggleSlider.shapeChange()
{
  if (qword_100498D68 != -1)
    swift_once(&qword_100498D68, sub_1003705DC);
  return *(double *)&xmmword_1004A1648;
}

void variable initialization expression of VerticalToggleSlider.growTransform(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0x3FF0000000000000;
  a1[4] = 0;
  a1[5] = 0;
}

id variable initialization expression of WaveformPlayIndicator.colorPalette()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;

  v0 = (void *)objc_opt_self(UIColor);
  v1 = objc_msgSend(v0, "tintColor");
  v2 = objc_msgSend(v0, "labelColor");
  v3 = objc_msgSend(v2, "colorWithAlphaComponent:", 0.35);

  v4 = objc_msgSend(v0, "labelColor");
  v5 = objc_msgSend(v4, "colorWithAlphaComponent:", 0.2);

  v6 = objc_msgSend(v0, "labelColor");
  v7 = objc_msgSend(v6, "colorWithAlphaComponent:", 0.6);

  return v1;
}

id variable initialization expression of WaveformPlayIndicator.waveform()
{
  return objc_msgSend((id)objc_opt_self(MRUWaveformData), "zero");
}

uint64_t variable initialization expression of WaveformPlayIndicator.cannedAnimationAsset()
{
  uint64_t v0;

  v0 = type metadata accessor for BouncyBarsAsset();
  swift_allocObject(v0, 56, 7);
  return sub_1003775B8();
}

NSNumber sub_100235AA8()
{
  return CGFloat._bridgeToObjectiveC()();
}

uint64_t sub_100235AB0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = static CGFloat._forceBridgeFromObjectiveC(_:result:)(a1, &v6);
  v4 = v7;
  v5 = v6;
  if (v7)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

uint64_t sub_100235B00(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v7 = 0;
  v8 = 1;
  v3 = static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v7);
  v4 = v8;
  v5 = v7;
  if (v8)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return v3 & 1;
}

void sub_100235B54(double *a1@<X8>)
{
  *a1 = static CGFloat._unconditionallyBridgeFromObjectiveC(_:)();
}

BOOL sub_100235B78(double *a1, double *a2)
{
  return *a1 == *a2;
}

double sub_100235B8C@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

uint64_t sub_100235B98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100006924(&qword_100499140, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_100395CAC);
  v3 = sub_100006924(&qword_100499148, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_100395C4C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100235C1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100006924(&qword_100499130, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_100395E04);
  v3 = sub_100006924(&qword_100499138, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_100395DA4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100235CA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = sub_100006924(&qword_100499118, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_100395F5C);
  v3 = sub_100006924(&qword_100499120, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_100395EFC);
  v4 = sub_100236694();
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, v4);
}

uint64_t sub_100235D40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100006924(&qword_100499238, (uint64_t (*)(uint64_t))type metadata accessor for NLLanguage, (uint64_t)&unk_100396BBC);
  v3 = sub_100006924(&qword_100499240, (uint64_t (*)(uint64_t))type metadata accessor for NLLanguage, (uint64_t)&unk_100396B5C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100235DC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100006924((unint64_t *)&qword_100499258, (uint64_t (*)(uint64_t))_s3__C3KeyVMa_1, (uint64_t)&unk_100396C90);
  v3 = sub_100006924((unint64_t *)&unk_100499260, (uint64_t (*)(uint64_t))_s3__C3KeyVMa_1, (uint64_t)&unk_100396924);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100235E48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100006924(&qword_100499248, (uint64_t (*)(uint64_t))_s3__C25OpenExternalURLOptionsKeyVMa_0, (uint64_t)&unk_100396C4C);
  v3 = sub_100006924(&qword_100499250, (uint64_t (*)(uint64_t))_s3__C25OpenExternalURLOptionsKeyVMa_0, (uint64_t)&unk_100396A38);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100235ECC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100006924(&qword_1004990F8, (uint64_t (*)(uint64_t))type metadata accessor for CAGradientLayerType, (uint64_t)&unk_1003964EC);
  v3 = sub_100006924((unint64_t *)&unk_100499100, (uint64_t (*)(uint64_t))type metadata accessor for CAGradientLayerType, (uint64_t)&unk_10039648C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100235F50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100006924(&qword_10049FE30, (uint64_t (*)(uint64_t))type metadata accessor for InfoKey, (uint64_t)&unk_10039675C);
  v3 = sub_100006924(&qword_100499110, (uint64_t (*)(uint64_t))type metadata accessor for InfoKey, (uint64_t)&unk_100396124);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100235FD4()
{
  double *v0;

  return Double.hashValue.getter(*v0);
}

void sub_100235FDC()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

uint64_t sub_10023600C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  if ((*v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *v1;
  else
    v2 = 0;
  return static Hasher._hash(seed:_:)(a1, v2);
}

__n128 initializeWithCopy for VerticalToggleSlider.ShapeChange(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
  sub_1000068B4(a1, &qword_100498F78, (uint64_t)&unk_10045A5B8);
}

void type metadata accessor for KeyframeAnimationOptions(uint64_t a1)
{
  sub_1000068B4(a1, &qword_100498F80, (uint64_t)&unk_10045A5E8);
}

void type metadata accessor for UIUserInterfaceStyle(uint64_t a1)
{
  sub_1000068B4(a1, &qword_100498F88, (uint64_t)&unk_10045A610);
}

void type metadata accessor for CGPath(uint64_t a1)
{
  sub_1000068B4(a1, &qword_100498F90, (uint64_t)&unk_10045A630);
}

void _s3__C7CGColorCMa_0(uint64_t a1)
{
  sub_1000068B4(a1, &qword_100498F98, (uint64_t)&unk_10045A660);
}

void type metadata accessor for CAGradientLayerType(uint64_t a1)
{
  sub_1000068B4(a1, &qword_100498FA0, (uint64_t)&unk_10045A690);
}

void _s3__C6CTLineCMa_0(uint64_t a1)
{
  sub_1000068B4(a1, &qword_100498FA8, (uint64_t)&unk_10045A6B8);
}

void _s3__C7CTFrameCMa_0(uint64_t a1)
{
  sub_1000068B4(a1, &qword_100498FB0, (uint64_t)&unk_10045A6E8);
}

void type metadata accessor for CTFramesetter(uint64_t a1)
{
  sub_1000068B4(a1, &qword_100498FB8, (uint64_t)&unk_10045A718);
}

void type metadata accessor for NSTextAlignment(uint64_t a1)
{
  sub_1000068B4(a1, &qword_100498FC0, (uint64_t)&unk_10045A748);
}

__n128 initializeWithTake for Artwork.Content(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void _s3__C8_NSRangeVMa_0(uint64_t a1)
{
  sub_1000068B4(a1, &qword_100498FC8, (uint64_t)&unk_10045A7C0);
}

__n128 _s11PlaceholderVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void _s3__C17CGAffineTransformVMa_0(uint64_t a1)
{
  sub_1000068B4(a1, &qword_100498FD0, (uint64_t)&unk_10045A840);
}

void type metadata accessor for UIAxis(uint64_t a1)
{
  sub_1000068B4(a1, &qword_100498FD8, (uint64_t)&unk_10045A878);
}

void type metadata accessor for UIRectCorner(uint64_t a1)
{
  sub_1000068B4(a1, &qword_100498FE0, (uint64_t)&unk_10045A8A0);
}

void _s3__C7CGPointVMa_1(uint64_t a1)
{
  sub_1000068B4(a1, &qword_100498FE8, (uint64_t)&unk_10045A920);
}

void _s3__C6CGSizeVMa_1(uint64_t a1)
{
  sub_1000068B4(a1, &qword_100498FF0, (uint64_t)&unk_10045A9A0);
}

void type metadata accessor for InfoKey(uint64_t a1)
{
  sub_1000068B4(a1, &qword_100498FF8, (uint64_t)&unk_10045A9C8);
}

void _s3__C6CGRectVMa_1(uint64_t a1)
{
  sub_1000068B4(a1, &qword_100499000, (uint64_t)&unk_10045AA48);
}

void type metadata accessor for UIOffset(uint64_t a1)
{
  sub_1000068B4(a1, &qword_100499008, (uint64_t)&unk_10045AAC8);
}

void type metadata accessor for SymbolScale(uint64_t a1)
{
  sub_1000068B4(a1, &qword_100499010, (uint64_t)&unk_10045AAF0);
}

void type metadata accessor for SymbolWeight(uint64_t a1)
{
  sub_1000068B4(a1, &qword_100499018, (uint64_t)&unk_10045AB10);
}

void type metadata accessor for Weight(uint64_t a1)
{
  sub_1000068B4(a1, &qword_100499020, (uint64_t)&unk_10045AB30);
}

void type metadata accessor for TextStyle(uint64_t a1)
{
  sub_1000068B4(a1, &qword_100499028, (uint64_t)&unk_10045AB58);
}

void type metadata accessor for UIContentSizeCategory(uint64_t a1)
{
  sub_1000068B4(a1, &qword_100499030, (uint64_t)&unk_10045AB80);
}

void _s3__C23NSDirectionalEdgeInsetsVMa_0(uint64_t a1)
{
  sub_1000068B4(a1, &qword_100499038, (uint64_t)&unk_10045AC00);
}

uint64_t sub_1002362A0()
{
  return sub_100006924(&qword_100499040, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_100395C10);
}

uint64_t sub_1002362CC()
{
  return sub_100006924(&qword_100499048, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_100395BE4);
}

uint64_t sub_1002362F8()
{
  return sub_100006924(&qword_100499050, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_100395C80);
}

uint64_t sub_100236324()
{
  return sub_100006924(&qword_100499058, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_100395D68);
}

uint64_t sub_100236350()
{
  return sub_100006924(&qword_100499060, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_100395D3C);
}

uint64_t sub_10023637C()
{
  return sub_100006924(&qword_100499068, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_100395DD8);
}

uint64_t sub_1002363A8()
{
  return sub_100006924(&qword_100499070, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_100395EC0);
}

uint64_t sub_1002363D4()
{
  return sub_100006924(&qword_100499078, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_100395E94);
}

uint64_t sub_100236400()
{
  return sub_100006924(&qword_100499080, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_100395F30);
}

uint64_t sub_10023642C()
{
  return sub_100006924(&qword_100499088, (uint64_t (*)(uint64_t))type metadata accessor for InfoKey, (uint64_t)&unk_1003960E8);
}

uint64_t sub_100236458()
{
  return sub_100006924(&qword_100499090, (uint64_t (*)(uint64_t))type metadata accessor for InfoKey, (uint64_t)&unk_1003960BC);
}

uint64_t sub_100236484()
{
  return sub_100006924(&qword_100499098, (uint64_t (*)(uint64_t))type metadata accessor for UIAxis, (uint64_t)&unk_100396240);
}

uint64_t sub_1002364B0()
{
  return sub_100006924(&qword_1004990A0, (uint64_t (*)(uint64_t))type metadata accessor for UIAxis, (uint64_t)&unk_10039620C);
}

uint64_t sub_1002364DC()
{
  return sub_100006924(&qword_1004990A8, (uint64_t (*)(uint64_t))type metadata accessor for UIAxis, (uint64_t)&unk_10039626C);
}

uint64_t sub_100236508()
{
  return sub_100006924(&qword_1004990B0, (uint64_t (*)(uint64_t))type metadata accessor for UIAxis, (uint64_t)&unk_1003962A8);
}

uint64_t sub_100236534()
{
  return sub_100006924(&qword_1004990B8, (uint64_t (*)(uint64_t))type metadata accessor for CAGradientLayerType, (uint64_t)&unk_100396450);
}

uint64_t sub_100236560()
{
  return sub_100006924(&qword_1004990C0, (uint64_t (*)(uint64_t))type metadata accessor for CAGradientLayerType, (uint64_t)&unk_100396424);
}

uint64_t sub_10023658C()
{
  return sub_100006924(&qword_1004990C8, (uint64_t (*)(uint64_t))type metadata accessor for CAGradientLayerType, (uint64_t)&unk_1003964C0);
}

uint64_t sub_1002365B8()
{
  return sub_100006924(&qword_1004990D0, (uint64_t (*)(uint64_t))type metadata accessor for KeyframeAnimationOptions, (uint64_t)&unk_1003965EC);
}

uint64_t sub_1002365E4()
{
  return sub_100006924(&qword_1004990D8, (uint64_t (*)(uint64_t))type metadata accessor for KeyframeAnimationOptions, (uint64_t)&unk_1003965B8);
}

uint64_t sub_100236610()
{
  return sub_100006924(&qword_1004990E0, (uint64_t (*)(uint64_t))type metadata accessor for KeyframeAnimationOptions, (uint64_t)&unk_100396618);
}

uint64_t sub_10023663C()
{
  return sub_100006924(&qword_1004990E8, (uint64_t (*)(uint64_t))type metadata accessor for KeyframeAnimationOptions, (uint64_t)&unk_100396654);
}

uint64_t sub_100236668()
{
  return sub_100006924(&qword_1004990F0, (uint64_t (*)(uint64_t))type metadata accessor for InfoKey, (uint64_t)&unk_100396158);
}

unint64_t sub_100236694()
{
  unint64_t result;

  result = qword_100499128;
  if (!qword_100499128)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_100499128);
  }
  return result;
}

uint64_t sub_1002366D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005574(&qword_1004991A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100236720(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005574(&qword_1004991A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for NLLanguage(uint64_t a1)
{
  sub_1000068B4(a1, &qword_1004991B8, (uint64_t)&unk_10045AC30);
}

void _s3__C25OpenExternalURLOptionsKeyVMa_0(uint64_t a1)
{
  sub_1000068B4(a1, &qword_1004991C0, (uint64_t)&unk_10045AC58);
}

void type metadata accessor for CTParagraphStyle(uint64_t a1)
{
  sub_1000068B4(a1, &qword_1004991C8, (uint64_t)&unk_10045AC80);
}

void _s3__C5CTRunCMa_0(uint64_t a1)
{
  sub_1000068B4(a1, &qword_1004991D0, (uint64_t)&unk_10045ACB0);
}

void _s3__C3KeyVMa_1(uint64_t a1)
{
  sub_1000068B4(a1, &qword_1004991D8, (uint64_t)&unk_10045ACE0);
}

void type metadata accessor for CLLocationCoordinate2D(uint64_t a1)
{
  sub_1000068B4(a1, &qword_1004991E0, (uint64_t)&unk_10045AD60);
}

void type metadata accessor for UIUserInterfaceLayoutDirection(uint64_t a1)
{
  sub_1000068B4(a1, &qword_1004991E8, (uint64_t)&unk_10045AD88);
}

uint64_t sub_1002367EC()
{
  return sub_100006924(&qword_1004991F0, (uint64_t (*)(uint64_t))_s3__C3KeyVMa_1, (uint64_t)&unk_1003968E8);
}

uint64_t sub_100236818()
{
  return sub_100006924(&qword_1004991F8, (uint64_t (*)(uint64_t))_s3__C3KeyVMa_1, (uint64_t)&unk_1003968BC);
}

uint64_t sub_100236844()
{
  return sub_100006924(&qword_100499200, (uint64_t (*)(uint64_t))_s3__C25OpenExternalURLOptionsKeyVMa_0, (uint64_t)&unk_1003969FC);
}

uint64_t sub_100236870()
{
  return sub_100006924(&qword_100499208, (uint64_t (*)(uint64_t))_s3__C25OpenExternalURLOptionsKeyVMa_0, (uint64_t)&unk_1003969D0);
}

uint64_t sub_10023689C()
{
  return sub_100006924(&qword_100499210, (uint64_t (*)(uint64_t))type metadata accessor for NLLanguage, (uint64_t)&unk_100396B20);
}

uint64_t sub_1002368C8()
{
  return sub_100006924(&qword_100499218, (uint64_t (*)(uint64_t))type metadata accessor for NLLanguage, (uint64_t)&unk_100396AF4);
}

uint64_t sub_1002368F4()
{
  return sub_100006924(&qword_100499220, (uint64_t (*)(uint64_t))type metadata accessor for NLLanguage, (uint64_t)&unk_100396B90);
}

uint64_t sub_100236920()
{
  return sub_100006924(&qword_100499228, (uint64_t (*)(uint64_t))_s3__C25OpenExternalURLOptionsKeyVMa_0, (uint64_t)&unk_100396A6C);
}

uint64_t sub_10023694C()
{
  return sub_100006924(&qword_100499230, (uint64_t (*)(uint64_t))_s3__C3KeyVMa_1, (uint64_t)&unk_100396958);
}

void Card.ViewController.hostingController.setter()
{
  swift_deletedMethodError();
  __break(1u);
}

uint64_t Artwork.caching.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100014A7C(v1, a1, &qword_1004993F0);
}

uint64_t Artwork.caching.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_100129EBC(a1, v1, &qword_1004993F0);
}

void *Artwork.content.getter()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 24);
  sub_100236A74(v1, *(void **)(v0 + 32));
  return v1;
}

id sub_100236A74(id result, void *a2)
{
  id v2;

  if (a2)
  {
    v2 = result;
    return a2;
  }
  return result;
}

void Artwork.content.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100236AD4(*(void **)(v2 + 24), *(void **)(v2 + 32));
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
}

void sub_100236AD4(void *a1, void *a2)
{
  if (a2)
  {

  }
}

uint64_t Artwork.decoration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Artwork(0);
  return sub_100082248(v1 + *(int *)(v3 + 24), a1, type metadata accessor for Artwork.Decoration);
}

uint64_t type metadata accessor for Artwork(uint64_t a1)
{
  return sub_1000091AC(a1, qword_100499500, (uint64_t)&nominal type descriptor for Artwork);
}

uint64_t type metadata accessor for Artwork.Decoration(uint64_t a1)
{
  return sub_1000091AC(a1, qword_1004996D0, (uint64_t)&nominal type descriptor for Artwork.Decoration);
}

uint64_t Artwork.decoration.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for Artwork(0) + 24);
  return sub_100236B94(a1, v3);
}

uint64_t sub_100236B94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Artwork.Decoration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

CFRange (__swiftcall *Artwork.decoration.modify())(__C::_NSRange)
{
  type metadata accessor for Artwork(0);
  return CFRange.init(_:);
}

uint64_t Artwork.placeholder.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Artwork(0);
  return sub_100014A7C(v1 + *(int *)(v3 + 28), a1, &qword_1004993F8);
}

uint64_t Artwork.placeholder.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Artwork(0);
  return sub_100129EBC(a1, v1 + *(int *)(v3 + 28), &qword_1004993F8);
}

CFRange (__swiftcall *Artwork.placeholder.modify())(__C::_NSRange)
{
  type metadata accessor for Artwork(0);
  return CFRange.init(_:);
}

uint64_t Artwork.size.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for Artwork(0) + 32));
}

uint64_t Artwork.size.setter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v10;

  result = type metadata accessor for Artwork(0);
  v10 = v4 + *(int *)(result + 32);
  *(_QWORD *)v10 = a1;
  *(_QWORD *)(v10 + 8) = a2;
  *(_QWORD *)(v10 + 16) = a3;
  *(_BYTE *)(v10 + 24) = a4;
  return result;
}

CFRange (__swiftcall *Artwork.size.modify())(__C::_NSRange)
{
  type metadata accessor for Artwork(0);
  return CFRange.init(_:);
}

double Artwork.init()@<D0>(uint64_t a1@<X8>)
{
  int *v2;
  _QWORD *v3;
  int *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  double result;

  v2 = (int *)type metadata accessor for Artwork(0);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  v3 = (_QWORD *)(a1 + v2[6]);
  v4 = (int *)type metadata accessor for Artwork.Decoration(0);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = 0;
  v5 = (char *)v3 + v4[5];
  v6 = type metadata accessor for UIView.Corner(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = v4[6];
  *(_QWORD *)((char *)v3 + v7) = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  *(_QWORD *)((char *)v3 + v4[7]) = 1;
  v8 = (_OWORD *)(a1 + v2[7]);
  v8[1] = 0u;
  v8[2] = 0u;
  *v8 = 0u;
  v9 = a1 + v2[8];
  result = 0.0;
  *(_OWORD *)v9 = xmmword_1003952E0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_BYTE *)(v9 + 24) = 0;
  return result;
}

uint64_t static Artwork.with(_:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  _QWORD *v5;
  int *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;

  v4 = (int *)type metadata accessor for Artwork(0);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 32) = 0;
  v5 = (_QWORD *)(a2 + v4[6]);
  v6 = (int *)type metadata accessor for Artwork.Decoration(0);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = 0;
  v7 = (char *)v5 + v6[5];
  v8 = type metadata accessor for UIView.Corner(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = v6[6];
  *(_QWORD *)((char *)v5 + v9) = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  *(_QWORD *)((char *)v5 + v6[7]) = 1;
  v10 = (_OWORD *)(a2 + v4[7]);
  v10[1] = 0u;
  v10[2] = 0u;
  *v10 = 0u;
  v11 = a2 + v4[8];
  *(_OWORD *)v11 = xmmword_1003952E0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_BYTE *)(v11 + 24) = 0;
  return a1(a2);
}

char *sub_100236F48()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  id v3;
  char *v4;
  uint64_t v6;

  __chkstk_darwin();
  v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100082248(v0, (uint64_t)v2, type metadata accessor for Artwork);
  v3 = objc_allocWithZone((Class)type metadata accessor for Artwork.View(0));
  v4 = Artwork.View.init(configuration:)((uint64_t)v2);
  sub_100006924(&qword_1004994A0, type metadata accessor for Artwork.View, (uint64_t)&protocol conformance descriptor for Artwork.View);
  return v4;
}

uint64_t sub_100236FF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100082248(v1, a1, type metadata accessor for Artwork);
}

char *Artwork.View.__allocating_init(configuration:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return Artwork.View.init(configuration:)(a1);
}

char *Artwork.View.init(configuration:)(uint64_t a1)
{
  char *v1;
  objc_class *ObjectType;
  char *v4;
  char *v5;
  uint64_t v6;
  id v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  uint64_t v27;
  _QWORD v28[5];
  objc_super v29;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = &v1[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageDidChangeHandler];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = &v1[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View__laidBounds];
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v6 = OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView;
  v7 = objc_allocWithZone((Class)UIImageView);
  v8 = v1;
  *(_QWORD *)&v1[v6] = objc_msgSend(v7, "init");
  v9 = &v8[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  sub_100082248(a1, (uint64_t)&v8[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration], type metadata accessor for Artwork);

  v29.receiver = v8;
  v29.super_class = ObjectType;
  v10 = (char *)objc_msgSendSuper2(&v29, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v10, "setContentMode:", 4);
  v11 = OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView;
  v12 = objc_msgSend(*(id *)&v10[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView], "layer");
  objc_msgSend(v12, "setMinificationFilter:", kCAFilterTrilinear);

  v13 = objc_msgSend(*(id *)&v10[v11], "layer");
  objc_msgSend(v13, "setMagnificationFilter:", kCAFilterTrilinear);

  v14 = *(void **)&v10[v11];
  objc_msgSend(v14, "setContentMode:", 2);
  objc_msgSend(v14, "setClipsToBounds:", 1);
  objc_msgSend(v14, "setAccessibilityIgnoresInvertColors:", 1);
  objc_msgSend(v10, "addSubview:", v14);
  v15 = a1 + *(int *)(type metadata accessor for Artwork(0) + 28);
  v16 = *(void **)(v15 + 24);
  if (v16)
  {
    v17 = *(void **)&v10[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView];
    if (v17)
    {
      v18 = *(void **)v15;
      v19 = *(void **)(v15 + 8);
      v20 = *(void **)(v15 + 16);
      v21 = *(_QWORD *)(v15 + 32);
      v22 = *(_QWORD *)(v15 + 40);
      v27 = *(_QWORD *)&v10[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView + 8];
      v23 = swift_getObjectType();
      v28[3] = &type metadata for Artwork.Placeholder;
      v28[4] = sub_10023B468();
      v24 = (_QWORD *)swift_allocObject(&unk_10045AFA0, 64, 7);
      v28[0] = v24;
      v24[2] = v18;
      v24[3] = v19;
      v24[4] = v20;
      v24[5] = v16;
      v24[6] = v21;
      v24[7] = v22;
      sub_10023B4B4(v18, v19, v20, v16);
      sub_10023B4B4(v18, v19, v20, v16);
      v25 = v17;
      dispatch thunk of UIContentView.configuration.setter(v28, v23, v27);
      sub_10023B4F8(v18, v19, v20, v16);

    }
  }
  sub_1002380B8();
  sub_100237C8C();

  sub_100006798(a1, type metadata accessor for Artwork);
  return v10;
}

uint64_t Artwork.View.typedConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_100082248(v3, a1, type metadata accessor for Artwork);
}

uint64_t Artwork.View.typedConfiguration.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  char *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  id v21;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t ObjectType;
  uint64_t v28;
  _QWORD v29[5];
  _BYTE v30[24];

  v2 = v1;
  v4 = type metadata accessor for Artwork(0);
  __chkstk_darwin();
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v8 = (char *)&v23 - v7;
  __chkstk_darwin();
  v10 = (char *)&v23 - v9;
  v11 = v2 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration;
  swift_beginAccess(v2 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration, v30, 0, 0);
  sub_100082248(v11, (uint64_t)v10, type metadata accessor for Artwork);
  swift_beginAccess(v11, v29, 33, 0);
  sub_10023B5F4(a1, v11);
  swift_endAccess(v29);
  sub_100082248(v11, (uint64_t)v8, type metadata accessor for Artwork);
  v12 = _s11MusicCoreUI7ArtworkV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v8, (uint64_t)v10);
  sub_100006798((uint64_t)v8, type metadata accessor for Artwork);
  if ((v12 & 1) == 0)
  {
    sub_100082248(v11, (uint64_t)v6, type metadata accessor for Artwork);
    v13 = &v6[*(int *)(v4 + 28)];
    v14 = (void *)*((_QWORD *)v13 + 3);
    if (v14 && *(_QWORD *)(v2 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView))
    {
      v15 = *(void **)v13;
      v16 = (void *)*((_QWORD *)v13 + 1);
      v17 = (void *)*((_QWORD *)v13 + 2);
      v18 = *((_QWORD *)v13 + 4);
      v19 = *((_QWORD *)v13 + 5);
      v25 = *(id *)(v2 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView);
      v26 = v18;
      v28 = *(_QWORD *)(v2 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView + 8);
      ObjectType = swift_getObjectType();
      v29[3] = &type metadata for Artwork.Placeholder;
      v29[4] = sub_10023B468();
      v20 = (_QWORD *)swift_allocObject(&unk_10045AFA0, 64, 7);
      v29[0] = v20;
      v20[2] = v15;
      v20[3] = v16;
      v20[4] = v17;
      v20[5] = v14;
      v20[6] = v26;
      v20[7] = v19;
      v24 = v17;
      sub_10023B4B4(v15, v16, v17, v14);
      sub_10023B4B4(v15, v16, v17, v14);
      v21 = v25;
      dispatch thunk of UIContentView.configuration.setter(v29, ObjectType, v28);
      sub_10023B4F8(v15, v16, v24, v14);

    }
    sub_1002380B8();
    sub_100237C8C();
    sub_100006798((uint64_t)v6, type metadata accessor for Artwork);
  }
  sub_100006798(a1, type metadata accessor for Artwork);
  return sub_100006798((uint64_t)v10, type metadata accessor for Artwork);
}

void (*Artwork.View.typedConfiguration.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  void *v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for Artwork(0) - 8) + 64);
  v3[4] = malloc(v4);
  v5 = malloc(v4);
  v3[5] = v5;
  v6 = v1 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration;
  swift_beginAccess(v6, v3, 0, 0);
  sub_100082248(v6, (uint64_t)v5, type metadata accessor for Artwork);
  return sub_1002376F4;
}

void sub_1002376F4(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 32);
  v4 = *(void **)(*(_QWORD *)a1 + 40);
  if ((a2 & 1) != 0)
  {
    sub_100082248(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)v3, type metadata accessor for Artwork);
    Artwork.View.typedConfiguration.setter((uint64_t)v3);
    sub_100006798((uint64_t)v4, type metadata accessor for Artwork);
  }
  else
  {
    Artwork.View.typedConfiguration.setter(*(_QWORD *)(*(_QWORD *)a1 + 40));
  }
  free(v4);
  free(v3);
  free(v2);
}

id Artwork.View.currentImage.getter()
{
  uint64_t v0;

  return objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                               + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView), "image"));
}

uint64_t Artwork.View.imageDidChangeHandler.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageDidChangeHandler);
  swift_beginAccess(v0 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageDidChangeHandler, v4, 0, 0);
  v2 = *v1;
  sub_10003A434(*v1, v1[1]);
  return v2;
}

uint64_t Artwork.View.imageDidChangeHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageDidChangeHandler);
  swift_beginAccess(v5, v9, 1, 0);
  v6 = *v5;
  v7 = v5[1];
  *v5 = a1;
  v5[1] = a2;
  return sub_10003A5C8(v6, v7);
}

uint64_t (*Artwork.View.imageDidChangeHandler.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageDidChangeHandler, a1, 33, 0);
  return j__swift_endAccess;
}

Swift::Void __swiftcall Artwork.View.layoutSubviews()()
{
  char *v0;
  double v1;
  double v2;
  double v3;
  double v4;
  unint64_t v5;
  __n128 v6;
  unint64_t v7;
  __n128 v8;
  double v9;
  double v10;
  double v11;
  char *v12;
  uint64_t v13;
  double MaxY;
  double MaxX;
  void *v16;
  void *v17;
  char *v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  objc_super v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;

  v31.receiver = v0;
  v31.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v31, "layoutSubviews");
  objc_msgSend(v0, "bounds");
  v2 = v1;
  v4 = v3;
  objc_msgSend(v0, "bounds");
  v6.n128_u64[0] = v5;
  v8.n128_u64[0] = v7;
  v9 = Artwork.View.fittingImageSize(in:)(v6, v8);
  v11 = v10;
  v12 = (char *)objc_msgSend(v0, "contentMode") - 4;
  v13 = 3;
  switch((unint64_t)v12)
  {
    case 0uLL:
      break;
    case 1uLL:
      v13 = 1;
      break;
    case 2uLL:
      objc_msgSend(v0, "bounds");
      MaxY = CGRectGetMaxY(v32);
      v33.origin.x = v2;
      v33.origin.y = v4;
      v33.size.width = v9;
      v33.size.height = v11;
      v4 = MaxY - CGRectGetHeight(v33);
      v13 = 1;
      break;
    case 3uLL:
      goto LABEL_6;
    case 4uLL:
      objc_msgSend(v0, "bounds");
      MaxX = CGRectGetMaxX(v34);
      v35.origin.x = v2;
      v35.origin.y = v4;
      v35.size.width = v9;
      v35.size.height = v11;
      v2 = MaxX - CGRectGetWidth(v35);
LABEL_6:
      v13 = 2;
      break;
    default:
      v13 = 0;
      break;
  }
  v16 = *(void **)&v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView];
  CGRect.centeringAlong(axes:in:)(v13, v2, v4, v9, v11);
  objc_msgSend(v16, "setFrame:");
  v17 = *(void **)&v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView];
  if (v17)
    objc_msgSend(v17, "setFrame:", v2, v4, v9, v11);
  v18 = &v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View__laidBounds];
  v19 = *(double *)&v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View__laidBounds];
  v20 = *(double *)&v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View__laidBounds + 8];
  v21 = *(double *)&v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View__laidBounds + 16];
  v22 = *(double *)&v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View__laidBounds + 24];
  objc_msgSend(v0, "bounds");
  v37.origin.x = v23;
  v37.origin.y = v24;
  v37.size.width = v25;
  v37.size.height = v26;
  v36.origin.x = v19;
  v36.origin.y = v20;
  v36.size.width = v21;
  v36.size.height = v22;
  if (!CGRectEqualToRect(v36, v37))
  {
    objc_msgSend(v0, "bounds");
    *(_QWORD *)v18 = v27;
    *((_QWORD *)v18 + 1) = v28;
    *((_QWORD *)v18 + 2) = v29;
    *((_QWORD *)v18 + 3) = v30;
    sub_100237C8C();
  }
  sub_1002380B8();
}

double Artwork.View.fittingImageSize(in:)(__n128 a1, __n128 a2)
{
  char *v2;
  double v3;
  double v4;
  id v5;
  double v6;
  void *v7;
  uint64_t v8;
  char v9;
  char v10;
  double v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  double v24;
  id v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  double v33;
  double v34;

  v3 = a2.n128_f64[0];
  v4 = a1.n128_f64[0];
  if (a1.n128_f64[0] == 0.0 && a2.n128_f64[0] == 0.0)
  {
    v5 = objc_msgSend(v2, "artworkCatalog");
    v6 = 0.0;
    if (v5)
    {
      v7 = v5;
      *(double *)&v8 = COERCE_DOUBLE(MPArtworkCatalog.originalSize.getter());
      v10 = v9;

      if ((v10 & 1) == 0)
        return *(double *)&v8;
    }
    return v6;
  }
  v11 = CGSize.aspectRatio.getter(a1, a2);
  v12 = objc_msgSend(*(id *)&v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView], "image");
  if (v12)
  {
    v13 = v12;
    objc_msgSend(v12, "size");
    v15 = v14;
    v17 = v16;

  }
  else
  {
    v25 = objc_msgSend(v2, "artworkCatalog");
    if (!v25)
      return v4;
    v26 = v25;
    v27 = MPArtworkCatalog.originalSize.getter();
    v29 = v28;
    v31 = v30;

    if ((v31 & 1) != 0)
      return v4;
    v15 = v27;
    v17 = v29;
  }
  v18.n128_u64[0] = v15;
  v19.n128_u64[0] = v17;
  v33 = v11;
  v34 = CGSize.aspectRatio.getter(v18, v19);
  if ((static ApproximatelyEquatable.!=~ infix(_:_:)(&v34, &v33) & 1) == 0)
    return v4;
  v20.n128_u64[0] = v15;
  v21.n128_u64[0] = v17;
  if (vabdd_f64(v11, CGSize.aspectRatio.getter(v20, v21)) <= 0.1)
    return v4;
  v22.n128_u64[0] = v15;
  v23.n128_u64[0] = v17;
  v24 = CGSize.aspectRatio.getter(v22, v23);
  if (v24 <= 1.0)
  {
    v6 = v24 * v3;
    if (v24 * v3 > v4)
      return v4;
  }
  else
  {
    v6 = v4;
    if (v4 / v24 > v3)
      return v24 * v3;
  }
  return v6;
}

void sub_100237C8C()
{
  char *v0;
  char *v1;
  uint64_t ObjectType;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  char v7;
  double v8;
  double v9;
  void *v10;
  id v11;
  id v12;
  NSString v13;
  uint64_t v14;
  id v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  id v33;
  void *v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  id v41;
  char v42;
  uint64_t v43;
  id v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[24];

  v1 = v0;
  ObjectType = swift_getObjectType();
  v3 = objc_msgSend(v0, "artworkCatalog");
  v4 = (uint64_t)&v1[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration];
  swift_beginAccess(&v1[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration], v48, 32, 0);
  if (*(_QWORD *)(v4 + 32))
  {
    v5 = *(void **)(v4 + 32);
    v6 = v5;
  }
  else
  {
    v5 = 0;
  }
  swift_endAccess(v48);
  v7 = Optional<A>.isArtworkVisuallyIdentical(to:)((uint64_t)v5, (unint64_t)v3);

  if ((v7 & 1) == 0)
  {
    objc_msgSend(v1, "clearArtworkCatalogs");
    sub_100238D1C(0);
  }
  objc_msgSend(v1, "bounds");
  if (v9 == 0.0 && v8 == 0.0 || (v10 = *(void **)(v4 + 32)) == 0)
  {
    sub_100238D1C(0);
    objc_msgSend(v1, "setNeedsLayout");
    return;
  }
  sub_100014A7C(v4, (uint64_t)v48, &qword_1004993F0);
  sub_100014A7C((uint64_t)v48, (uint64_t)&v45, &qword_1004993F0);
  if (v46)
  {
    v11 = v10;
    swift_bridgeObjectRetain();
    sub_10023C028((uint64_t)&v45);
  }
  else
  {
    v12 = v10;
    sub_100008758((uint64_t)&v45, &qword_1004993F0);
  }
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_100014A7C((uint64_t)v48, (uint64_t)&v45, &qword_1004993F0);
  if (v46)
  {
    v14 = swift_weakLoadStrong(&v47);
    sub_10023C028((uint64_t)&v45);
  }
  else
  {
    sub_100008758((uint64_t)&v45, &qword_1004993F0);
    v14 = 0;
  }
  objc_msgSend(v10, "setCacheIdentifier:forCacheReference:", v13, v14);

  v15 = objc_msgSend(v1, "traitCollection", swift_unknownObjectRelease(v14).n128_f64[0]);
  objc_msgSend(v15, "displayScale");
  v17 = v16;

  objc_msgSend(v10, "setDestinationScale:", v17);
  v18 = v4 + *(int *)(type metadata accessor for Artwork(0) + 32);
  v19 = *(unsigned __int8 *)(v18 + 8);
  if (v19 == 255)
  {
    objc_msgSend(v1, "bounds");
    v21 = v20;
    v23 = v22;
  }
  else
  {
    v24 = *(_QWORD *)(v18 + 16);
    v25 = *(_QWORD *)v18;
    v26 = *(_BYTE *)(v18 + 24);
    objc_msgSend(v1, "bounds");
    v28 = v27;
    v30 = v29;
    sub_100239F20(v27, v29, v25, v19);
    v21 = v31;
    sub_100239F20(v28, v30, v24, v26);
    v23 = v32;
  }
  objc_msgSend(v10, "setFittingSize:", v21, v23);
  objc_msgSend(v10, "setRenderHint:", (unint64_t)objc_msgSend(v10, "renderHint") | 1);
  v33 = objc_msgSend(v1, "artworkCatalog");
  if (v33)
  {
    v34 = v33;
    objc_msgSend(v33, "scaledFittingSize");
    v36 = v35;
    v38 = v37;

    objc_msgSend(v10, "scaledFittingSize");
    if (v36 == v40 && v38 == v39)
    {
      v41 = objc_msgSend(v1, "artworkCatalog");

      if (v41)
      {
        sub_100008758((uint64_t)v48, &qword_1004993F0);

        return;
      }
    }
  }
  else
  {
    objc_msgSend(v10, "scaledFittingSize");
  }
  MPArtworkCatalog.expectedRatio.getter();
  if ((v42 & 1) == 0)
    objc_msgSend(v1, "setNeedsLayout");
  v45 = v1;
  v43 = swift_allocObject(&unk_10045B1D8, 32, 7);
  *(_QWORD *)(v43 + 16) = v10;
  *(_QWORD *)(v43 + 24) = ObjectType;
  v44 = v10;
  MPArtworkCatalog.setDestination<A>(_:for:completion:)((uint64_t)&v45, 1, (uint64_t)sub_10023D2EC, v43, ObjectType);

  swift_release(v43);
  sub_100008758((uint64_t)v48, &qword_1004993F0);
}

uint64_t sub_1002380B8()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _BOOL8 v34;
  id v35;
  void (*v36)(uint64_t, uint64_t, uint64_t, int *);
  char *v37;
  uint64_t v38;
  int v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  id v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t *v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  id v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  char *v77;
  uint64_t *v78;
  uint64_t v79;
  id v80;
  uint64_t *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  void (*v86)(uint64_t, uint64_t, uint64_t, int *);
  int v87;
  char *v88;
  uint64_t (*v89)(uint64_t *, uint64_t, int *);
  char v90[32];

  v1 = v0;
  sub_100005574(&qword_100499730);
  __chkstk_darwin();
  v77 = (char *)&v76 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v78 = (uint64_t *)((char *)&v76 - v3);
  __chkstk_darwin();
  v85 = (char *)&v76 - v4;
  __chkstk_darwin();
  v83 = (char *)&v76 - v5;
  __chkstk_darwin();
  v81 = (uint64_t *)((char *)&v76 - v6);
  __chkstk_darwin();
  v84 = (char *)&v76 - v7;
  __chkstk_darwin();
  v89 = (uint64_t (*)(uint64_t *, uint64_t, int *))((char *)&v76 - v8);
  __chkstk_darwin();
  v10 = (uint64_t *)((char *)&v76 - v9);
  __chkstk_darwin();
  v12 = (char *)&v76 - v11;
  sub_100005574(&qword_1004A1050);
  __chkstk_darwin();
  v76 = (uint64_t)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v82 = (uint64_t)&v76 - v14;
  __chkstk_darwin();
  v79 = (uint64_t)&v76 - v15;
  __chkstk_darwin();
  v17 = (char *)&v76 - v16;
  v18 = (int *)type metadata accessor for Artwork.Decoration(0);
  v19 = *((_QWORD *)v18 - 1);
  __chkstk_darwin();
  v21 = (char *)&v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v23 = (char *)&v76 - v22;
  v80 = *(id *)&v1[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView];
  objc_msgSend(v80, "frame");
  v25 = v24;
  v27 = v26;
  v28 = &v1[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration];
  swift_beginAccess(&v1[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration], v90, 0, 0);
  v29 = (uint64_t)&v28[*(int *)(type metadata accessor for Artwork(0) + 24)];
  v88 = v23;
  sub_100082248(v29, (uint64_t)v23, type metadata accessor for Artwork.Decoration);
  v30 = *(_QWORD *)(v29 + v18[7]);
  if ((v30 & 1) != 0 && v25 < v27)
  {
    sub_100082248((uint64_t)v88, (uint64_t)v21, type metadata accessor for Artwork.Decoration);
    v31 = (uint64_t)v89;
LABEL_6:
    sub_100014A7C((uint64_t)&v21[v18[5]], (uint64_t)v17, &qword_1004A1050);
    sub_100006798((uint64_t)v21, type metadata accessor for Artwork.Decoration);
    v32 = type metadata accessor for UIView.Corner(0);
    v33 = 1;
    v34 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 48))(v17, 1, v32) != 1;
    sub_100008758((uint64_t)v17, &qword_1004A1050);
    objc_msgSend(v1, "setClipsToBounds:", v34);
    v35 = *(id *)&v88[v18[6]];
    goto LABEL_8;
  }
  sub_100082248((uint64_t)v88, (uint64_t)v21, type metadata accessor for Artwork.Decoration);
  v31 = (uint64_t)v89;
  if ((v30 & 2) != 0 && v27 < v25)
    goto LABEL_6;
  sub_100006798((uint64_t)v21, type metadata accessor for Artwork.Decoration);
  objc_msgSend(v1, "setClipsToBounds:", 0);
  v35 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  v33 = 0;
LABEL_8:
  objc_msgSend(v1, "setBackgroundColor:", v35);

  if (v33)
  {
    sub_100082248((uint64_t)v88, (uint64_t)v12, type metadata accessor for Artwork.Decoration);
    v36 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v19 + 56);
    v37 = v12;
    v38 = 0;
  }
  else
  {
    v36 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v19 + 56);
    v37 = v12;
    v38 = 1;
  }
  v86 = v36;
  v36((uint64_t)v37, v38, 1, v18);
  sub_100014A7C((uint64_t)v12, (uint64_t)v10, &qword_100499730);
  v89 = *(uint64_t (**)(uint64_t *, uint64_t, int *))(v19 + 48);
  v39 = v89(v10, 1, v18);
  v87 = v33;
  if (v39 == 1)
  {
    v40 = v1;
    sub_100008758((uint64_t)v10, &qword_100499730);
    v41 = 0;
    LOBYTE(v42) = 0;
    v43 = 0;
  }
  else
  {
    v41 = *v10;
    v42 = v10[1];
    v43 = (void *)v10[2];
    v44 = v43;
    v45 = v1;
    sub_100006798((uint64_t)v10, type metadata accessor for Artwork.Decoration);
  }
  v46 = (uint64_t)v84;
  UIView.border.setter(v41, v42, v43);
  sub_100014A7C((uint64_t)v12, v31, &qword_100499730);
  if (v89((uint64_t *)v31, 1, v18) == 1)
  {
    sub_100008758(v31, &qword_100499730);
    v47 = type metadata accessor for UIView.Corner(0);
    v48 = v79;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v79, 1, 1, v47);
  }
  else
  {
    v48 = v79;
    sub_100014A7C(v31 + v18[5], v79, &qword_1004A1050);
    sub_100006798(v31, type metadata accessor for Artwork.Decoration);
  }
  v49 = (uint64_t)v85;
  v50 = (uint64_t)v83;
  v51 = v81;
  UIView.corner.setter(v48);

  sub_100008758((uint64_t)v12, &qword_100499730);
  if ((v87 & 1) != 0)
  {
    v52 = 1;
  }
  else
  {
    sub_100082248((uint64_t)v88, v46, type metadata accessor for Artwork.Decoration);
    v52 = 0;
  }
  v86(v46, v52, 1, v18);
  sub_100014A7C(v46, (uint64_t)v51, &qword_100499730);
  if (v89(v51, 1, v18) == 1)
  {
    v53 = v80;
    v54 = v80;
    sub_100008758((uint64_t)v51, &qword_100499730);
    v55 = 0;
    LOBYTE(v56) = 0;
    v57 = 0;
  }
  else
  {
    v55 = *v51;
    v56 = v51[1];
    v57 = (void *)v51[2];
    v58 = v57;
    v53 = v80;
    v59 = v80;
    sub_100006798((uint64_t)v51, type metadata accessor for Artwork.Decoration);
  }
  v60 = v87;
  UIView.border.setter(v55, v56, v57);
  sub_100014A7C(v46, v50, &qword_100499730);
  if (v89((uint64_t *)v50, 1, v18) == 1)
  {
    sub_100008758(v50, &qword_100499730);
    v61 = type metadata accessor for UIView.Corner(0);
    v62 = v82;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v82, 1, 1, v61);
  }
  else
  {
    v62 = v82;
    sub_100014A7C(v50 + v18[5], v82, &qword_1004A1050);
    sub_100006798(v50, type metadata accessor for Artwork.Decoration);
  }
  UIView.corner.setter(v62);

  sub_100008758(v46, &qword_100499730);
  if ((v60 & 1) != 0)
  {
    v63 = 1;
  }
  else
  {
    sub_100082248((uint64_t)v88, v49, type metadata accessor for Artwork.Decoration);
    v63 = 0;
  }
  v86(v49, v63, 1, v18);
  v64 = *(void **)&v1[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView];
  if (v64)
  {
    v65 = v78;
    sub_100014A7C(v49, (uint64_t)v78, &qword_100499730);
    if (v89(v65, 1, v18) == 1)
    {
      v66 = v64;
      sub_100008758((uint64_t)v65, &qword_100499730);
      v67 = 0;
      LOBYTE(v68) = 0;
      v69 = 0;
    }
    else
    {
      v67 = *v65;
      v68 = v65[1];
      v69 = (void *)v65[2];
      v70 = v69;
      v71 = v64;
      sub_100006798((uint64_t)v65, type metadata accessor for Artwork.Decoration);
    }
    v72 = (uint64_t)v77;
    UIView.border.setter(v67, v68, v69);
    sub_100014A7C(v49, v72, &qword_100499730);
    if (v89((uint64_t *)v72, 1, v18) == 1)
    {
      sub_100008758(v72, &qword_100499730);
      v73 = type metadata accessor for UIView.Corner(0);
      v74 = v76;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v76, 1, 1, v73);
    }
    else
    {
      v74 = v76;
      sub_100014A7C(v72 + v18[5], v76, &qword_1004A1050);
      sub_100006798(v72, type metadata accessor for Artwork.Decoration);
    }
    UIView.corner.setter(v74);

  }
  sub_100008758(v49, &qword_100499730);
  return sub_100006798((uint64_t)v88, type metadata accessor for Artwork.Decoration);
}

double Artwork.View.intrinsicContentSize.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  __n128 v4;
  _BYTE v6[24];

  v1 = v0 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration;
  swift_beginAccess(v0 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration, v6, 0, 0);
  v2 = v1 + *(int *)(type metadata accessor for Artwork(0) + 32);
  if (*(_BYTE *)(v2 + 8) == 2 && *(_BYTE *)(v2 + 24) == 2)
  {
    v4.n128_u64[0] = *(_QWORD *)(v2 + 16);
    v3.n128_u64[0] = *(_QWORD *)v2;
  }
  else
  {
    v3.n128_u64[0] = 0;
    v4.n128_u64[0] = 0;
  }
  return Artwork.View.fittingImageSize(in:)(v3, v4);
}

double Artwork.View.sizeThatFits(_:)(double a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  __n128 v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char v12;
  double v13;
  _BYTE v15[24];

  v5 = v2 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration;
  swift_beginAccess(v2 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration, v15, 0, 0);
  v6 = v5 + *(int *)(type metadata accessor for Artwork(0) + 32);
  v9 = *(unsigned __int8 *)(v6 + 8);
  if (v9 == 255)
  {
    v7.n128_f64[0] = a1;
    v8.n128_f64[0] = a2;
    return Artwork.View.fittingImageSize(in:)(v7, v8);
  }
  else
  {
    v11 = *(_QWORD *)(v6 + 16);
    v12 = *(_BYTE *)(v6 + 24);
    sub_100239F20(a1, a2, *(_QWORD *)v6, v9);
    v10 = v13;
    sub_100239F20(a1, a2, v11, v12);
  }
  return v10;
}

double Artwork.Size.computedSize(in:)(uint64_t a1, char a2, uint64_t a3, char a4, double a5, double a6)
{
  double v10;
  double v11;

  sub_100239F20(a5, a6, a1, a2);
  v11 = v10;
  sub_100239F20(a5, a6, a3, a4);
  return v11;
}

void sub_100238D1C(uint64_t a1)
{
  char *v1;
  char *v2;
  void *v4;
  char *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  _BOOL8 v10;
  id v11;
  uint64_t v12;
  char *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  char *v25;
  uint64_t v26;
  char *v27;
  void *v28;
  char *v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  char v33[24];
  char v34[24];
  _QWORD v35[6];

  v2 = v1;
  v4 = *(void **)&v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView];
  objc_msgSend(v4, "setImage:", a1);
  v5 = &v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration];
  swift_beginAccess(&v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration], v34, 0, 0);
  if (*((_QWORD *)v5 + 4) && (v6 = (void *)*((_QWORD *)v5 + 3)) != 0)
    v7 = v6;
  else
    v7 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  v8 = v7;
  objc_msgSend(v4, "setBackgroundColor:", v7);

  if (a1 || (v11 = objc_msgSend(v2, "artworkCatalog"), v11, !v11))
  {
    if (*((_QWORD *)v5 + 4))
    {
      v9 = *(void **)&v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView];
      if (!v9)
        goto LABEL_16;
      v10 = 1;
      goto LABEL_15;
    }
  }
  v12 = type metadata accessor for Artwork(0);
  v13 = &v5[*(int *)(v12 + 28)];
  v14 = (void *)*((_QWORD *)v13 + 3);
  if (v14)
  {
    v16 = *(void **)v13;
    v15 = (void *)*((_QWORD *)v13 + 1);
    v17 = (void *)*((_QWORD *)v13 + 2);
    v18 = *((_QWORD *)v13 + 4);
    v19 = *((_QWORD *)v13 + 5);
    v35[0] = *(_QWORD *)v13;
    v35[1] = v15;
    v35[2] = v17;
    v35[3] = v14;
    v35[4] = v18;
    v35[5] = v19;
    v20 = &v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView];
    if (!*(_QWORD *)&v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView])
    {
      objc_allocWithZone((Class)type metadata accessor for Artwork.Placeholder.View());
      sub_10023B4B4(v16, v15, v17, v14);
      v21 = v17;
      v22 = v14;
      v23 = v16;
      v24 = v15;
      v25 = Artwork.Placeholder.View.init(configuration:)((uint64_t)v35);
      v26 = sub_100006924(&qword_100499728, (uint64_t (*)(uint64_t))type metadata accessor for Artwork.Placeholder.View, (uint64_t)&protocol conformance descriptor for Artwork.Placeholder.View);
      objc_msgSend(v25, "setClipsToBounds:", 1);
      v27 = v25;
      objc_msgSend(v2, "addSubview:", v27);

      v28 = *(void **)v20;
      *(_QWORD *)v20 = v27;
      *((_QWORD *)v20 + 1) = v26;

    }
  }
  v9 = *(void **)&v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView];
  if (v9)
  {
    v10 = *(_QWORD *)&v5[*(int *)(v12 + 28) + 24] == 0;
LABEL_15:
    objc_msgSend(v9, "setHidden:", v10);
  }
LABEL_16:
  sub_1002380B8();
  v29 = &v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageDidChangeHandler];
  swift_beginAccess(v29, v33, 0, 0);
  v30 = *(void (**)(uint64_t))v29;
  if (*(_QWORD *)v29)
  {
    v31 = *((_QWORD *)v29 + 1);
    v32 = swift_retain(v31);
    v30(v32);
    sub_10003A5C8((uint64_t)v30, v31);
  }
}

void sub_100238FD0(_QWORD *a1, void *a2, void *a3, uint64_t a4)
{
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  _QWORD aBlock[5];
  _QWORD *v22;

  v6 = (void *)*a1;
  v7 = swift_dynamicCastClass(*a1, a4);
  if (v7)
  {
    v8 = (void *)v7;
    v20 = v6;
    v9 = objc_msgSend(a2, "imageRepresentation");
    if (v9)
    {
      v19 = v9;
      v10 = objc_msgSend(v9, "image");
      if (v10)
      {
        v11 = v10;
        if ((objc_msgSend(v19, "isImagePrepared") & 1) != 0)
        {
          v12 = v11;
          sub_100238D1C((uint64_t)v11);

          objc_msgSend(v8, "setNeedsLayout");
        }
        else
        {
          v13 = (_QWORD *)swift_allocObject(&unk_10045B200, 40, 7);
          v13[2] = a3;
          v13[3] = v11;
          v13[4] = v8;
          aBlock[4] = sub_10023D328;
          v22 = v13;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_1000F7EF4;
          aBlock[3] = &unk_10045B218;
          v14 = _Block_copy(aBlock);
          v15 = v22;
          v16 = v20;
          v17 = v11;
          v18 = a3;
          objc_msgSend(v17, "prepareForDisplayWithCompletionHandler:", v14, swift_release(v15).n128_f64[0]);

          _Block_release(v14);
        }
        return;
      }

    }
    sub_100238D1C(0);
    objc_msgSend(v8, "setNeedsLayout");

  }
}

uint64_t sub_10023919C(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD aBlock[5];
  _QWORD *v40;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v38 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v36 = *(_QWORD *)(v11 - 8);
  v37 = v11;
  __chkstk_darwin();
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000087DC(0, (unint64_t *)&qword_100499FB0, OS_dispatch_queue_ptr);
  v22 = (void *)static OS_dispatch_queue.main.getter(v14, v15, v16, v17, v18, v19, v20, v21);
  v23 = (_QWORD *)swift_allocObject(&unk_10045B250, 48, 7);
  v23[2] = a2;
  v23[3] = a1;
  v23[4] = a3;
  v23[5] = a4;
  aBlock[4] = sub_10023D354;
  v40 = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000BED80;
  aBlock[3] = &unk_10045B268;
  v24 = _Block_copy(aBlock);
  v25 = v40;
  v26 = a1;
  v27 = a3;
  v28 = a4;
  v29 = a2;
  v30 = swift_release(v25);
  static DispatchQoS.unspecified.getter(v30);
  aBlock[0] = _swiftEmptyArrayStorage;
  v31 = sub_100006924((unint64_t *)&unk_10049B100, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v32 = sub_100005574(&qword_100499718);
  v33 = sub_10023D360();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v32, v33, v8, v31);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v24);
  _Block_release(v24);

  (*(void (**)(char *, uint64_t))(v38 + 8))(v10, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v13, v37);
}

void sub_1002393B0(void *a1, void *a2, void *a3, id a4)
{
  id v8;
  void *v9;
  id v10;
  char v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v8 = objc_msgSend(a4, "artworkCatalog");
  if (v8)
  {
    v9 = v8;
    sub_1000087DC(0, (unint64_t *)&qword_10049E540, MPArtworkCatalog_ptr);
    v10 = a1;
    v11 = static NSObject.== infix(_:_:)(v10, v9);

    if ((v11 & 1) != 0)
    {
      if (a2)
      {
        v13 = a2;
        sub_100238D1C((uint64_t)a2);

      }
      else
      {
        if (qword_100498B20 != -1)
          swift_once(&qword_100498B20, sub_1002C6668);
        v14 = type metadata accessor for Logger(0, v12);
        sub_1000086B4(v14, (uint64_t)static Logger.artwork);
        v15 = a3;
        v16 = Logger.logObject.getter(v15);
        v17 = static os_log_type_t.error.getter(v16);
        if (os_log_type_enabled(v16, v17))
        {
          v18 = swift_slowAlloc(12, -1);
          v19 = (_QWORD *)swift_slowAlloc(8, -1);
          *(_DWORD *)v18 = 138412290;
          *(_QWORD *)(v18 + 4) = v15;
          *v19 = v15;
          _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failed to prepare image: %@", (uint8_t *)v18, 0xCu);
          v20 = sub_100005574(&qword_100499720);
          swift_arrayDestroy(v19, 1, v20);
          swift_slowDealloc(v19, -1, -1);
          swift_slowDealloc(v18, -1, -1);

        }
        else
        {

        }
        sub_100238D1C((uint64_t)v15);
      }
      objc_msgSend(a4, "setNeedsLayout");
    }
  }
}

void Gradient.View.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer("MusicCoreUI.View", 16, "init(frame:)", 12, 0);
  __break(1u);
}

uint64_t sub_100239674@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE v6[24];

  a1[3] = type metadata accessor for Artwork(0);
  a1[4] = sub_100006924(&qword_100499450, type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
  v3 = sub_1000207D4(a1);
  v4 = v1 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration;
  swift_beginAccess(v4, v6, 0, 0);
  return sub_100082248(v4, (uint64_t)v3, type metadata accessor for Artwork);
}

uint64_t sub_10023970C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE v8[40];

  v2 = type metadata accessor for Artwork(0);
  __chkstk_darwin();
  v4 = &v8[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_1000244B0((uint64_t)a1, (uint64_t)v8);
  v5 = sub_100005574(&qword_100499710);
  swift_dynamicCast(v4, v8, v5, v2, 7);
  Artwork.View.typedConfiguration.setter((uint64_t)v4);
  return sub_10000682C(a1);
}

void (*sub_1002397B0(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = malloc(0xD0uLL);
  *a1 = v3;
  v3[23] = v1;
  v4 = type metadata accessor for Artwork(0);
  v3[24] = v4;
  v3[25] = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[3] = v4;
  v3[4] = sub_100006924(&qword_100499450, type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
  v5 = sub_1000207D4(v3);
  v6 = v1 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration;
  swift_beginAccess(v6, v3 + 20, 0, 0);
  sub_100082248(v6, (uint64_t)v5, type metadata accessor for Artwork);
  return sub_100239884;
}

void sub_100239884(uint64_t *a1, char a2)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (_QWORD *)*a1;
  if ((a2 & 1) != 0)
  {
    v4 = v2[24];
    v3 = (void *)v2[25];
    sub_1000244B0(*a1, (uint64_t)(v2 + 5));
    sub_1000244B0((uint64_t)(v2 + 5), (uint64_t)(v2 + 10));
    v5 = sub_100005574(&qword_100499710);
    swift_dynamicCast(v3, v2 + 10, v5, v4, 7);
    Artwork.View.typedConfiguration.setter((uint64_t)v3);
    sub_10000682C(v2 + 5);
  }
  else
  {
    v6 = v2[24];
    v3 = (void *)v2[25];
    sub_1000244B0(*a1, (uint64_t)(v2 + 15));
    v7 = sub_100005574(&qword_100499710);
    swift_dynamicCast(v3, v2 + 15, v7, v6, 7);
    Artwork.View.typedConfiguration.setter((uint64_t)v3);
  }
  sub_10000682C(v2);
  free(v3);
  free(v2);
}

uint64_t sub_10023996C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType(v3);
  return UIContentView.supports(_:)(a1, ObjectType, a3);
}

double Artwork.Caching.init(reference:identifier:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  double result;

  v8 = swift_weakInit(a4 + 2, 0);
  *a4 = a2;
  a4[1] = a3;
  swift_weakAssign(v8, a1);
  *(_QWORD *)&result = swift_release(a1).n128_u64[0];
  return result;
}

void Artwork.Caching.init(reference:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;

  v4 = swift_weakInit(a2 + 2, 0);
  swift_weakAssign(v4, a1);
  swift_release(a1);
  *a2 = 0xD00000000000001CLL;
  a2[1] = 0x80000001003B7A30;
}

void *Artwork.Caching.Reference.defaultIdentifier.unsafeMutableAddressor()
{
  return &static Artwork.Caching.Reference.defaultIdentifier;
}

unint64_t static Artwork.Caching.Reference.defaultIdentifier.getter()
{
  return 0xD00000000000001CLL;
}

uint64_t Artwork.Caching.Reference.__allocating_init()()
{
  uint64_t v0;

  return swift_allocObject(v0, 16, 7);
}

BOOL static Artwork.Caching.Reference.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

void *Artwork.Content.init(catalog:background:)(uint64_t a1, void *a2)
{
  if (!a1)
  {

    return 0;
  }
  return a2;
}

uint64_t static Artwork.Content.__derived_struct_equals(_:_:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  void *v7;
  id v8;
  id v9;

  if (a1)
  {
    if (a3)
    {
      v7 = a1;
      sub_1000087DC(0, (unint64_t *)&qword_1004A1510, UIColor_ptr);
      v8 = a3;
      v9 = v7;
      LOBYTE(v7) = static NSObject.== infix(_:_:)(v9, v8);

      if ((v7 & 1) != 0)
        goto LABEL_4;
    }
  }
  else if (!a3)
  {
LABEL_4:
    sub_1000087DC(0, (unint64_t *)&qword_10049A0D0, NSObject_ptr);
    return static NSObject.== infix(_:_:)(a2, a4) & 1;
  }
  return 0;
}

uint64_t sub_100239B84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  char v8;

  v3 = *(void **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v5 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a1)
  {
    if (v5)
    {
      sub_1000087DC(0, (unint64_t *)&qword_1004A1510, UIColor_ptr);
      v6 = v5;
      v7 = v3;
      v8 = static NSObject.== infix(_:_:)(v7, v6);

      if ((v8 & 1) != 0)
        goto LABEL_4;
    }
  }
  else if (!v5)
  {
LABEL_4:
    sub_1000087DC(0, (unint64_t *)&qword_10049A0D0, NSObject_ptr);
    return static NSObject.== infix(_:_:)(v2, v4) & 1;
  }
  return 0;
}

uint64_t Artwork.Decoration.border.getter()
{
  uint64_t *v0;
  uint64_t v1;
  id v2;

  v1 = *v0;
  v2 = (id)v0[2];
  return v1;
}

void Artwork.Decoration.border.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)v3 = a1;
  *(_QWORD *)(v3 + 8) = a2;
  *(_QWORD *)(v3 + 16) = a3;
}

uint64_t Artwork.Decoration.corner.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Artwork.Decoration(0);
  return sub_100014A7C(v1 + *(int *)(v3 + 20), a1, &qword_1004A1050);
}

uint64_t Artwork.Decoration.corner.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Artwork.Decoration(0);
  return sub_100129EBC(a1, v1 + *(int *)(v3 + 20), &qword_1004A1050);
}

CFRange (__swiftcall *Artwork.Decoration.corner.modify())(__C::_NSRange)
{
  type metadata accessor for Artwork.Decoration(0);
  return CFRange.init(_:);
}

id Artwork.Decoration.fillColor.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(type metadata accessor for Artwork.Decoration(0) + 24));
}

void Artwork.Decoration.fillColor.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(type metadata accessor for Artwork.Decoration(0) + 24);

  *(_QWORD *)(v1 + v3) = a1;
}

CFRange (__swiftcall *Artwork.Decoration.fillColor.modify())(__C::_NSRange)
{
  type metadata accessor for Artwork.Decoration(0);
  return CFRange.init(_:);
}

uint64_t Artwork.Decoration.fillAxes.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for Artwork.Decoration(0) + 28));
}

uint64_t Artwork.Decoration.fillAxes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Artwork.Decoration(0);
  *(_QWORD *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

CFRange (__swiftcall *Artwork.Decoration.fillAxes.modify())(__C::_NSRange)
{
  type metadata accessor for Artwork.Decoration(0);
  return CFRange.init(_:);
}

uint64_t static Artwork.Decoration.with(_:)@<X0>(uint64_t (*a1)(_QWORD *)@<X0>, _QWORD *a2@<X8>)
{
  int *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (int *)type metadata accessor for Artwork.Decoration(0);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v5 = (char *)a2 + v4[5];
  v6 = type metadata accessor for UIView.Corner(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = v4[6];
  *(_QWORD *)((char *)a2 + v7) = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  *(_QWORD *)((char *)a2 + v4[7]) = 1;
  return a1(a2);
}

uint64_t sub_100239F20(double a1, double a2, uint64_t a3, char a4)
{
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  void *v8;
  Swift::String v9;
  uint64_t result;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  void *object;
  Swift::String v16;

  if (!a4)
  {
    if (a1 != 1.79769313e308)
      return result;
    _StringGuts.grow(_:)(67);
    v12._countAndFlagsBits = 0x6F69736E656D6944;
    v12._object = (void *)0xE90000000000006ELL;
    String.append(_:)(v12);
    v13._object = (void *)0x80000001003B7BC0;
    v13._countAndFlagsBits = 0xD000000000000030;
    String.append(_:)(v13);
    v14._countAndFlagsBits = CGSize.description.getter(1.79769313e308, a2);
    object = v14._object;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(object);
    v16._countAndFlagsBits = 0x696C61766E49203ALL;
    v16._object = (void *)0xEF68746469772064;
    String.append(_:)(v16);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "MusicCoreUI/ArtworkConfiguration.swift", 38, 2, 362, 0);
LABEL_10:
    __break(1u);
    return result;
  }
  if (a4 == 1 && a2 == 1.79769313e308)
  {
    _StringGuts.grow(_:)(68);
    v5._countAndFlagsBits = 0x6F69736E656D6944;
    v5._object = (void *)0xE90000000000006ELL;
    String.append(_:)(v5);
    v6._object = (void *)0x80000001003B7BC0;
    v6._countAndFlagsBits = 0xD000000000000030;
    String.append(_:)(v6);
    v7._countAndFlagsBits = CGSize.description.getter(a1, 1.79769313e308);
    v8 = v7._object;
    String.append(_:)(v7);
    swift_bridgeObjectRelease(v8);
    v9._countAndFlagsBits = 0xD000000000000010;
    v9._object = (void *)0x80000001003B7C00;
    String.append(_:)(v9);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "MusicCoreUI/ArtworkConfiguration.swift", 38, 2, 366, 0);
    goto LABEL_10;
  }
  return result;
}

BOOL static Artwork.Size.Dimension.__derived_enum_equals(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  _BOOL4 v4;
  _BOOL4 v5;

  if (a2)
  {
    v4 = *(double *)&a1 == *(double *)&a3;
    if (a4 != 1)
      v4 = 0;
    v5 = a4 == 2 && *(double *)&a1 == *(double *)&a3;
    if (a2 == 1)
      return v4;
    else
      return v5;
  }
  else
  {
    return !a4 && *(double *)&a1 == *(double *)&a3;
  }
}

uint64_t sub_10023A1A0(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  int v4;

  v2 = *(double *)a1;
  v3 = *(double *)a2;
  v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(_BYTE *)(a1 + 8))
  {
    if (*(_BYTE *)(a1 + 8) == 1)
    {
      if (v4 == 1 && v2 == v3)
        return 1;
    }
    else if (v4 == 2 && v2 == v3)
    {
      return 1;
    }
  }
  else if (!*(_BYTE *)(a2 + 8) && v2 == v3)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_10023A224(uint64_t a1, uint64_t a2)
{
  return _s11MusicCoreUI7ArtworkV4SizeV23__derived_struct_equalsySbAE_AEtFZ_0(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24), *(_QWORD *)a2, *(_BYTE *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_BYTE *)(a2 + 24));
}

uint64_t sub_10023A24C(uint64_t a1)
{
  return sub_10023A2CC(a1, static Artwork.Decoration.grid, &qword_100498990, (uint64_t)static UIView.Corner.medium, (uint64_t)sub_100250260);
}

uint64_t Artwork.Decoration.grid.unsafeMutableAddressor()
{
  return sub_10023A610(&qword_100498868, (uint64_t)static Artwork.Decoration.grid, (uint64_t)sub_10023A24C);
}

uint64_t static Artwork.Decoration.grid.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10023A66C(&qword_100498868, (uint64_t)static Artwork.Decoration.grid, (uint64_t)sub_10023A24C, a1);
}

uint64_t sub_10023A2A8(uint64_t a1)
{
  return sub_10023A2CC(a1, static Artwork.Decoration.list, &qword_100498988, (uint64_t)static UIView.Corner.small, (uint64_t)sub_1002501B4);
}

uint64_t sub_10023A2CC(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  char *v10;
  int *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t result;
  uint64_t v22;

  sub_100005574(&qword_1004A1050);
  __chkstk_darwin();
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for Artwork.Decoration(0);
  sub_1000086DC((uint64_t)v11, a2);
  v12 = (_QWORD *)sub_1000086B4((uint64_t)v11, (uint64_t)a2);
  if (qword_100498970 != -1)
    swift_once(&qword_100498970, sub_10024FF08);
  v13 = static UIView.Border.artwork;
  v14 = byte_1004A3248;
  v15 = *a3;
  v16 = (id)qword_1004A3250;
  if (v15 != -1)
    swift_once(a3, a5);
  v17 = type metadata accessor for UIView.Corner(0);
  v18 = sub_1000086B4(v17, a4);
  v19 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v10, v18, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v10, 0, 1, v17);
  v20 = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  *v12 = v13;
  v12[1] = v14;
  v12[2] = v16;
  result = sub_10023D280((uint64_t)v10, (uint64_t)v12 + v11[5]);
  *(_QWORD *)((char *)v12 + v11[6]) = v20;
  *(_QWORD *)((char *)v12 + v11[7]) = 1;
  return result;
}

uint64_t Artwork.Decoration.list.unsafeMutableAddressor()
{
  return sub_10023A610(&qword_100498870, (uint64_t)static Artwork.Decoration.list, (uint64_t)sub_10023A2A8);
}

uint64_t static Artwork.Decoration.list.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10023A66C(&qword_100498870, (uint64_t)static Artwork.Decoration.list, (uint64_t)sub_10023A2A8, a1);
}

uint64_t sub_10023A4A0()
{
  uint64_t v0;
  char *v1;
  int *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t result;
  uint64_t v10;

  sub_100005574(&qword_1004A1050);
  __chkstk_darwin();
  v1 = (char *)&v10 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = (int *)type metadata accessor for Artwork.Decoration(0);
  sub_1000086DC((uint64_t)v2, static Artwork.Decoration.round);
  v3 = (_QWORD *)sub_1000086B4((uint64_t)v2, (uint64_t)static Artwork.Decoration.round);
  if (qword_100498970 != -1)
    swift_once(&qword_100498970, sub_10024FF08);
  v4 = static UIView.Border.artwork;
  v5 = byte_1004A3248;
  v6 = qword_1004A3250;
  static UIView.Corner.rounded.getter((id)qword_1004A3250);
  v7 = type metadata accessor for UIView.Corner(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v1, 0, 1, v7);
  v8 = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  *v3 = v4;
  v3[1] = v5;
  v3[2] = v6;
  result = sub_10023D280((uint64_t)v1, (uint64_t)v3 + v2[5]);
  *(_QWORD *)((char *)v3 + v2[6]) = v8;
  *(_QWORD *)((char *)v3 + v2[7]) = 1;
  return result;
}

uint64_t Artwork.Decoration.round.unsafeMutableAddressor()
{
  return sub_10023A610(&qword_100498878, (uint64_t)static Artwork.Decoration.round, (uint64_t)sub_10023A4A0);
}

uint64_t sub_10023A610(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (*a1 != -1)
    swift_once(a1, a3);
  v4 = type metadata accessor for Artwork.Decoration(0);
  return sub_1000086B4(v4, a2);
}

uint64_t static Artwork.Decoration.round.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10023A66C(&qword_100498878, (uint64_t)static Artwork.Decoration.round, (uint64_t)sub_10023A4A0, a1);
}

uint64_t sub_10023A66C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  if (*a1 != -1)
    swift_once(a1, a3);
  v6 = type metadata accessor for Artwork.Decoration(0);
  v7 = sub_1000086B4(v6, a2);
  return sub_100082248(v7, a4, type metadata accessor for Artwork.Decoration);
}

uint64_t Artwork.Decoration.scaled(using:compatibleWith:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  id v28;
  uint64_t v29;

  v4 = v3;
  sub_100005574(&qword_1004A1050);
  __chkstk_darwin();
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UIView.Corner.Radius(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin();
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v15 = (char *)&v28 - v14;
  sub_100082248(v4, a3, type metadata accessor for Artwork.Decoration);
  if (*(_QWORD *)(v4 + 16) && *(_QWORD *)(a3 + 16))
  {
    v16 = *(_DWORD *)(v4 + 8);
    objc_msgSend(a1, "scaledValueForValue:compatibleWithTraitCollection:", a2, *(double *)v4);
    *(_QWORD *)a3 = v17;
    *(_BYTE *)(a3 + 8) = v16 & 1;
  }
  v28 = a1;
  v29 = a2;
  v18 = type metadata accessor for Artwork.Decoration(0);
  sub_100014A7C(v4 + *(int *)(v18 + 20), (uint64_t)v9, &qword_1004A1050);
  v19 = type metadata accessor for UIView.Corner(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v9, 1, v19);
  if ((_DWORD)v22 == 1)
    return sub_100008758((uint64_t)v9, &qword_1004A1050);
  UIView.Corner.radius.getter(v22);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v9, v19);
  v24 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v15, v10);
  if ((_DWORD)v24 != enum case for UIView.Corner.Radius.value(_:))
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v15, v10);
  v25 = v24;
  (*(void (**)(char *, uint64_t))(v11 + 96))(v15, v10);
  result = v21((char *)(a3 + *(int *)(v18 + 20)), 1, v19);
  if (!(_DWORD)result)
  {
    v26 = v15[8];
    objc_msgSend(v28, "scaledValueForValue:compatibleWithTraitCollection:", v29, *(double *)v15);
    *(_QWORD *)v13 = v27;
    v13[8] = v26;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 104))(v13, v25, v10);
    return UIView.Corner.radius.setter(v13);
  }
  return result;
}

uint64_t _s11MusicCoreUI7ArtworkV4SizeV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8)
{
  uint64_t result;

  if (a2)
  {
    if (a2 == 1)
    {
      result = 0;
      if (a6 != 1)
        return result;
    }
    else
    {
      result = 0;
      if (a6 != 2)
        return result;
    }
  }
  else
  {
    result = 0;
    if (a6)
      return result;
  }
  if (*(double *)&a1 == *(double *)&a5)
  {
    if (a4)
    {
      if (a4 == 1)
      {
        if (a8 == 1 && *(double *)&a3 == *(double *)&a7)
          return 1;
      }
      else if (a8 == 2 && *(double *)&a3 == *(double *)&a7)
      {
        return 1;
      }
    }
    else if (!a8 && *(double *)&a3 == *(double *)&a7)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t _s11MusicCoreUI7ArtworkV7CachingV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  uint64_t result;
  uint64_t Strong;
  uint64_t v11;
  uint64_t v12;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  v7 = v4 == *a2 && v5 == v6;
  if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0), result = 0, (v8 & 1) != 0))
  {
    Strong = swift_weakLoadStrong(a1 + 2);
    v11 = swift_weakLoadStrong(a2 + 2);
    v12 = v11;
    if (Strong)
    {
      swift_release(Strong);
      if (v12)
      {
        swift_release(v12);
        if (Strong == v12)
          return 1;
      }
    }
    else
    {
      if (!v11)
        return 1;
      swift_release(v11);
    }
    return 0;
  }
  return result;
}

BOOL _s11MusicCoreUI7ArtworkV10DecorationV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  id v23;
  id v24;
  char v25;
  char v26;
  char v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;

  v4 = type metadata accessor for UIView.Corner(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005574(&qword_1004A10C0);
  __chkstk_darwin();
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005574(&qword_1004A1050);
  __chkstk_darwin();
  __chkstk_darwin();
  __chkstk_darwin();
  v14 = (void *)a1[2];
  v15 = (void *)a2[2];
  if (v14)
  {
    if (!v15)
      return 0;
    v44 = v13;
    v45 = (uint64_t)&v40 - v11;
    v42 = v7;
    v43 = v12;
    v16 = *a1;
    v17 = v4;
    v18 = a1[1];
    v40 = *a2;
    v41 = v16;
    v19 = v5;
    v20 = v10;
    v21 = a1;
    v22 = a2[1];
    v23 = v15;
    v24 = v14;
    v25 = v18 & 1;
    v4 = v17;
    v47 = v25;
    v26 = v25;
    v27 = v22 & 1;
    a1 = v21;
    v10 = v20;
    v5 = v19;
    v46 = v27;
    LOBYTE(v19) = static UIView.Border.__derived_struct_equals(_:_:)(v41, v26, (uint64_t)v24, v40, v27, (uint64_t)v23);

    if ((v19 & 1) == 0)
      return 0;
  }
  else
  {
    v44 = v13;
    v45 = (uint64_t)&v40 - v11;
    v42 = v7;
    v43 = v12;
    if (v15)
      return 0;
  }
  v28 = (int *)type metadata accessor for Artwork.Decoration(0);
  v29 = v45;
  sub_100014A7C((uint64_t)a1 + v28[5], v45, &qword_1004A1050);
  v30 = v44;
  sub_100014A7C((uint64_t)a2 + v28[5], v44, &qword_1004A1050);
  v31 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_100014A7C(v29, (uint64_t)v10, &qword_1004A1050);
  sub_100014A7C(v30, v31, &qword_1004A1050);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v32((uint64_t)v10, 1, v4) != 1)
  {
    v33 = v43;
    sub_100014A7C((uint64_t)v10, v43, &qword_1004A1050);
    if (v32(v31, 1, v4) != 1)
    {
      v41 = (uint64_t)a2;
      v34 = v42;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v42, v31, v4);
      v35 = sub_100006924((unint64_t *)&unk_1004A1500, (uint64_t (*)(uint64_t))&type metadata accessor for UIView.Corner, (uint64_t)&protocol conformance descriptor for UIView.Corner);
      v36 = dispatch thunk of static Equatable.== infix(_:_:)(v33, v34, v4, v35);
      v37 = *(void (**)(char *, uint64_t))(v5 + 8);
      v37(v34, v4);
      sub_100008758(v30, &qword_1004A1050);
      sub_100008758(v45, &qword_1004A1050);
      v37((char *)v33, v4);
      sub_100008758((uint64_t)v10, &qword_1004A1050);
      if ((v36 & 1) == 0)
        return 0;
      goto LABEL_13;
    }
    sub_100008758(v30, &qword_1004A1050);
    sub_100008758(v45, &qword_1004A1050);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v33, v4);
LABEL_11:
    sub_100008758((uint64_t)v10, &qword_1004A10C0);
    return 0;
  }
  sub_100008758(v30, &qword_1004A1050);
  sub_100008758(v29, &qword_1004A1050);
  if (v32(v31, 1, v4) != 1)
    goto LABEL_11;
  v41 = (uint64_t)a2;
  sub_100008758((uint64_t)v10, &qword_1004A1050);
LABEL_13:
  sub_1000087DC(0, (unint64_t *)&qword_10049A0D0, NSObject_ptr);
  v38 = v41;
  if ((static NSObject.== infix(_:_:)(*(uint64_t *)((char *)a1 + v28[6]), *(_QWORD *)(v41 + v28[6])) & 1) != 0)
    return *(uint64_t *)((char *)a1 + v28[7]) == *(_QWORD *)(v38 + v28[7]);
  return 0;
}

uint64_t _s11MusicCoreUI7ArtworkV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  char v15;
  char v16;
  int *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  BOOL v43;
  void *v44;
  void *v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  _BYTE v50[24];
  _QWORD v51[6];
  void *v52;
  void *v53;
  void *v54;
  __int128 v55;
  void *v56;

  sub_100014A7C(a1, (uint64_t)v51, &qword_1004993F0);
  sub_100014A7C(a2, (uint64_t)v50, &qword_1004993F0);
  sub_100014A7C((uint64_t)v51, (uint64_t)&v52, &qword_1004993F0);
  sub_100014A7C((uint64_t)v50, (uint64_t)&v55, &qword_1004993F0);
  if (v53)
  {
    sub_100014A7C((uint64_t)&v52, (uint64_t)&v48, &qword_1004993F0);
    if (*((_QWORD *)&v55 + 1))
    {
      sub_10023D3AC(&v55, &v46);
      if (v48 == v46
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v48, *((_QWORD *)&v48 + 1), v46, *((_QWORD *)&v46 + 1), 0) & 1) != 0)
      {
        v4 = swift_weakLoadStrong(&v49);
        v5 = swift_weakLoadStrong(&v47);
        v6 = v5;
        if (v4)
        {
          swift_release(v4);
          if (v6)
          {
            swift_release(v6);
            if (v4 == v6)
              goto LABEL_18;
          }
        }
        else
        {
          if (!v5)
          {
LABEL_18:
            sub_10023C028((uint64_t)&v46);
            sub_100008758((uint64_t)v50, &qword_1004993F0);
            sub_100008758((uint64_t)v51, &qword_1004993F0);
            sub_10023C028((uint64_t)&v48);
            goto LABEL_19;
          }
          swift_release(v5);
        }
      }
      sub_10023C028((uint64_t)&v46);
      sub_100008758((uint64_t)v50, &qword_1004993F0);
      sub_100008758((uint64_t)v51, &qword_1004993F0);
      sub_10023C028((uint64_t)&v48);
      v7 = &qword_1004993F0;
LABEL_16:
      sub_100008758((uint64_t)&v52, v7);
      return 0;
    }
    sub_100008758((uint64_t)v50, &qword_1004993F0);
    sub_100008758((uint64_t)v51, &qword_1004993F0);
    sub_10023C028((uint64_t)&v48);
LABEL_12:
    v7 = (uint64_t *)&unk_100499738;
    goto LABEL_16;
  }
  sub_100008758((uint64_t)v50, &qword_1004993F0);
  sub_100008758((uint64_t)v51, &qword_1004993F0);
  if (*((_QWORD *)&v55 + 1))
    goto LABEL_12;
LABEL_19:
  sub_100008758((uint64_t)&v52, &qword_1004993F0);
  v9 = *(void **)(a1 + 32);
  v10 = *(void **)(a2 + 32);
  if (!v9)
  {
    if (!v10)
      goto LABEL_33;
    return 0;
  }
  if (!v10)
    return 0;
  v11 = *(void **)(a1 + 24);
  v12 = *(void **)(a2 + 24);
  if (v11)
  {
    if (!v12)
    {
      sub_100236A74(*(id *)(a1 + 24), *(void **)(a1 + 32));
      sub_100236A74(v11, v9);
      sub_100236A74(0, v10);
      goto LABEL_30;
    }
    sub_1000087DC(0, (unint64_t *)&qword_1004A1510, UIColor_ptr);
    sub_100236A74(v11, v9);
    sub_100236A74(v11, v9);
    sub_100236A74(v12, v10);
    v13 = v12;
    v14 = v11;
    v15 = static NSObject.== infix(_:_:)(v14, v13);

    if ((v15 & 1) == 0)
    {

LABEL_30:
      sub_100236AD4(v11, v9);
      return 0;
    }
  }
  else
  {
    sub_100236A74(0, *(void **)(a1 + 32));
    sub_100236A74(0, v9);
    if (v12)
    {
      sub_100236A74(v12, v10);

      goto LABEL_30;
    }
    sub_100236A74(0, v10);
    v14 = 0;
    v13 = 0;
  }
  sub_1000087DC(0, (unint64_t *)&qword_10049A0D0, NSObject_ptr);
  v16 = static NSObject.== infix(_:_:)(v9, v10);

  sub_100236AD4(v11, v9);
  if ((v16 & 1) == 0)
    return 0;
LABEL_33:
  v17 = (int *)type metadata accessor for Artwork(0);
  if (!_s11MusicCoreUI7ArtworkV10DecorationV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t *)(a1 + v17[6]), (uint64_t *)(a2 + v17[6])))return 0;
  v18 = v17[7];
  v19 = *(void **)(a1 + v18);
  v20 = *(void **)(a1 + v18 + 8);
  v22 = *(void **)(a1 + v18 + 16);
  v21 = *(void **)(a1 + v18 + 24);
  v24 = *(_QWORD *)(a1 + v18 + 32);
  v23 = *(_QWORD *)(a1 + v18 + 40);
  v25 = (void **)(a2 + v18);
  v27 = *v25;
  v26 = v25[1];
  v28 = v25[2];
  v29 = v25[3];
  v30 = v25[4];
  v31 = v25[5];
  if (!v21)
  {
    if (!v29)
      goto LABEL_40;
LABEL_39:
    v33 = *v25;
    v45 = *v25;
    v34 = v19;
    v35 = v25[2];
    sub_10023B4B4(v19, v20, v22, v21);
    sub_10023B4B4(v33, v26, v35, v29);
    sub_10023B4F8(v34, v20, v22, v21);
    sub_10023B4F8(v45, v26, v35, v29);
    return 0;
  }
  if (!v29)
    goto LABEL_39;
  v51[0] = v19;
  v51[1] = v20;
  v51[2] = v22;
  v51[3] = v21;
  v51[4] = v24;
  v51[5] = v23;
  v52 = v27;
  v53 = v26;
  v54 = v28;
  *(_QWORD *)&v55 = v29;
  *((_QWORD *)&v55 + 1) = v30;
  v56 = v31;
  v44 = v27;
  v32 = v19;
  v41 = v28;
  v42 = v19;
  sub_10023B4B4(v19, v20, v22, v21);
  sub_10023B4B4(v32, v20, v22, v21);
  sub_10023B4B4(v44, v26, v41, v29);
  v43 = _s11MusicCoreUI7ArtworkV11PlaceholderV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)v51, (uint64_t)&v52);

  sub_10023B4F8(v42, v20, v22, v21);
  if (!v43)
    return 0;
LABEL_40:
  v36 = v17[8];
  v37 = a1 + v36;
  v38 = *(unsigned __int8 *)(a1 + v36 + 8);
  v39 = a2 + v36;
  v40 = *(unsigned __int8 *)(v39 + 8);
  if (v38 == 255)
  {
    if (v40 != 255)
      return 0;
  }
  else if (v40 == 255
         || (_s11MusicCoreUI7ArtworkV4SizeV23__derived_struct_equalsySbAE_AEtFZ_0(*(_QWORD *)v37, v38, *(_QWORD *)(v37 + 16), *(_BYTE *)(v37 + 24), *(_QWORD *)v39, v40, *(_QWORD *)(v39 + 16), *(_BYTE *)(v39 + 24)) & 1) == 0)
  {
    return 0;
  }
  return 1;
}

unint64_t sub_10023B468()
{
  unint64_t result;

  result = qword_100499410;
  if (!qword_100499410)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Artwork.Placeholder, &type metadata for Artwork.Placeholder);
    atomic_store(result, (unint64_t *)&qword_100499410);
  }
  return result;
}

uint64_t sub_10023B4AC()
{
  return sub_10019A37C(64);
}

id sub_10023B4B4(id result, void *a2, void *a3, void *a4)
{
  void *v5;
  id v6;
  id v7;
  id v8;

  if (a4)
  {
    v5 = result;
    v6 = a3;
    v7 = a4;
    v8 = v5;
    return a2;
  }
  return result;
}

void sub_10023B4F8(void *a1, void *a2, void *a3, void *a4)
{
  if (a4)
  {

  }
}

void _s11MusicCoreUI7ArtworkV4ViewC5coderAESgSo7NSCoderC_tcfc_0()
{
  char *v0;
  char *v1;
  char *v2;
  uint64_t v3;
  char *v4;

  v1 = &v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageDidChangeHandler];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  v2 = &v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View__laidBounds];
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  v3 = OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView;
  *(_QWORD *)&v0[v3] = objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");
  v4 = &v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001003B2590, "MusicCoreUI/ArtworkConfiguration.swift", 38, 2, 53, 0);
  __break(1u);
}

uint64_t sub_10023B5F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Artwork(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_10023B638()
{
  return sub_100006924(&qword_100499418, type metadata accessor for Artwork.View, (uint64_t)&protocol conformance descriptor for Artwork.View);
}

uint64_t type metadata accessor for Artwork.View(uint64_t a1)
{
  return sub_1000091AC(a1, (uint64_t *)&unk_100499570, (uint64_t)&nominal type descriptor for Artwork.View);
}

uint64_t sub_10023B678(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100006924(&qword_100499448, type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
  result = sub_100006924(&qword_100499450, type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10023B6D4()
{
  return sub_100006924(&qword_100499458, type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
}

uint64_t sub_10023B700(uint64_t a1)
{
  uint64_t result;

  result = sub_100006924(&qword_1004994A0, type metadata accessor for Artwork.View, (uint64_t)&protocol conformance descriptor for Artwork.View);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for Artwork(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void *v17;
  int *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  id v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  __int128 v40;
  uint64_t v41;
  _OWORD *v42;
  _OWORD *v43;
  char *__dst;
  uint64_t v46;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v8);
  }
  else
  {
    v7 = a2[1];
    if (v7)
    {
      *a1 = *a2;
      a1[1] = v7;
      swift_bridgeObjectRetain();
      swift_weakCopyInit(a1 + 2, a2 + 2);
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
    }
    v9 = (void **)(a2 + 3);
    v10 = (void *)a2[4];
    if (v10)
    {
      v11 = *v9;
      a1[3] = v11;
      a1[4] = v10;
      v12 = v11;
      v13 = v10;
    }
    else
    {
      *(_OWORD *)(a1 + 3) = *(_OWORD *)v9;
    }
    v46 = a3;
    v14 = *(int *)(a3 + 24);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    *(_QWORD *)v15 = *(_QWORD *)((char *)a2 + v14);
    v15[8] = *((_BYTE *)a2 + v14 + 8);
    v17 = *(void **)((char *)a2 + v14 + 16);
    *((_QWORD *)v15 + 2) = v17;
    v18 = (int *)type metadata accessor for Artwork.Decoration(0);
    v19 = v18[5];
    __dst = &v15[v19];
    v20 = &v16[v19];
    v21 = type metadata accessor for UIView.Corner(0);
    v22 = *(_QWORD *)(v21 - 8);
    v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
    v24 = v17;
    if (v23(v20, 1, v21))
    {
      v25 = sub_100005574(&qword_1004A1050);
      memcpy(__dst, v20, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(__dst, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v21);
    }
    v26 = v18[6];
    v27 = *(void **)&v16[v26];
    *(_QWORD *)&v15[v26] = v27;
    *(_QWORD *)&v15[v18[7]] = *(_QWORD *)&v16[v18[7]];
    v28 = *(int *)(v46 + 28);
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = *(void **)((char *)a2 + v28 + 24);
    v32 = v27;
    if (v31)
    {
      v33 = *(void **)v30;
      v34 = (void *)*((_QWORD *)v30 + 1);
      *(_QWORD *)v29 = *(_QWORD *)v30;
      *((_QWORD *)v29 + 1) = v34;
      v35 = (void *)*((_QWORD *)v30 + 2);
      *((_QWORD *)v29 + 2) = v35;
      *((_QWORD *)v29 + 3) = v31;
      *((_OWORD *)v29 + 2) = *((_OWORD *)v30 + 2);
      v36 = v33;
      v37 = v34;
      v38 = v35;
      v39 = v31;
    }
    else
    {
      v40 = *((_OWORD *)v30 + 1);
      *(_OWORD *)v29 = *(_OWORD *)v30;
      *((_OWORD *)v29 + 1) = v40;
      *((_OWORD *)v29 + 2) = *((_OWORD *)v30 + 2);
    }
    v41 = *(int *)(v46 + 32);
    v42 = (_OWORD *)((char *)a1 + v41);
    v43 = (_OWORD *)((char *)a2 + v41);
    *v42 = *v43;
    *(_OWORD *)((char *)v42 + 9) = *(_OWORD *)((char *)v43 + 9);
  }
  return a1;
}

void destroy for Artwork(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id *v9;

  if (*(_QWORD *)(a1 + 8))
  {
    swift_bridgeObjectRelease();
    swift_weakDestroy(a1 + 16);
  }
  if (*(_QWORD *)(a1 + 32))
  {

  }
  v4 = a1 + *(int *)(a2 + 24);

  v5 = type metadata accessor for Artwork.Decoration(0);
  v6 = v4 + *(int *)(v5 + 20);
  v7 = type metadata accessor for UIView.Corner(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);

  v9 = (id *)(a1 + *(int *)(a2 + 28));
  if (v9[3])
  {

  }
}

_QWORD *initializeWithCopy for Artwork(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  void **v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  char *v13;
  char *v14;
  void *v15;
  int *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  __int128 v38;
  uint64_t v39;
  _OWORD *v40;
  _OWORD *v41;
  char *__dst;
  uint64_t v44;

  v6 = a2[1];
  if (v6)
  {
    *a1 = *a2;
    a1[1] = v6;
    swift_bridgeObjectRetain();
    swift_weakCopyInit(a1 + 2, a2 + 2);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
  }
  v7 = (void **)(a2 + 3);
  v8 = (void *)a2[4];
  if (v8)
  {
    v9 = *v7;
    a1[3] = v9;
    a1[4] = v8;
    v10 = v9;
    v11 = v8;
  }
  else
  {
    *(_OWORD *)(a1 + 3) = *(_OWORD *)v7;
  }
  v44 = a3;
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)((char *)a2 + v12);
  v13[8] = *((_BYTE *)a2 + v12 + 8);
  v15 = *(void **)((char *)a2 + v12 + 16);
  *((_QWORD *)v13 + 2) = v15;
  v16 = (int *)type metadata accessor for Artwork.Decoration(0);
  v17 = v16[5];
  __dst = &v13[v17];
  v18 = &v14[v17];
  v19 = type metadata accessor for UIView.Corner(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v15;
  if (v21(v18, 1, v19))
  {
    v23 = sub_100005574(&qword_1004A1050);
    memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(__dst, v18, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
  }
  v24 = v16[6];
  v25 = *(void **)&v14[v24];
  *(_QWORD *)&v13[v24] = v25;
  *(_QWORD *)&v13[v16[7]] = *(_QWORD *)&v14[v16[7]];
  v26 = *(int *)(v44 + 28);
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = *(void **)((char *)a2 + v26 + 24);
  v30 = v25;
  if (v29)
  {
    v31 = *(void **)v28;
    v32 = (void *)*((_QWORD *)v28 + 1);
    *(_QWORD *)v27 = *(_QWORD *)v28;
    *((_QWORD *)v27 + 1) = v32;
    v33 = (void *)*((_QWORD *)v28 + 2);
    *((_QWORD *)v27 + 2) = v33;
    *((_QWORD *)v27 + 3) = v29;
    *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
    v34 = v31;
    v35 = v32;
    v36 = v33;
    v37 = v29;
  }
  else
  {
    v38 = *((_OWORD *)v28 + 1);
    *(_OWORD *)v27 = *(_OWORD *)v28;
    *((_OWORD *)v27 + 1) = v38;
    *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
  }
  v39 = *(int *)(v44 + 32);
  v40 = (_OWORD *)((char *)a1 + v39);
  v41 = (_OWORD *)((char *)a2 + v39);
  *v40 = *v41;
  *(_OWORD *)((char *)v40 + 9) = *(_OWORD *)((char *)v41 + 9);
  return a1;
}

uint64_t assignWithCopy for Artwork(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  int *v27;
  uint64_t v28;
  void *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void *, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  id v48;
  void *v49;
  void *v50;
  id v51;
  void *v52;
  void *v53;
  id v54;
  void *v55;
  void *v56;
  id v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  id v62;
  id v63;
  id v64;
  id v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _OWORD *v71;
  __int128 *v72;
  __int128 v73;
  uint64_t v75;
  _QWORD *v76;

  v6 = a2[1];
  if (*(_QWORD *)(a1 + 8))
  {
    if (v6)
    {
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_weakCopyAssign(a1 + 16, a2 + 2);
    }
    else
    {
      sub_10023C028(a1);
      v7 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = v7;
    }
  }
  else if (v6)
  {
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = a2[1];
    swift_bridgeObjectRetain();
    swift_weakCopyInit(a1 + 16, a2 + 2);
  }
  else
  {
    v8 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_OWORD *)a1 = v8;
  }
  v9 = a2[4];
  if (*(_QWORD *)(a1 + 32))
  {
    if (v9)
    {
      v10 = *(void **)(a1 + 24);
      v11 = (void *)a2[3];
      *(_QWORD *)(a1 + 24) = v11;
      v12 = v11;

      v13 = (void *)a2[4];
      v14 = *(void **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = v13;
      v15 = v13;

      goto LABEL_15;
    }
    sub_10023C058((id *)(a1 + 24));
  }
  else if (v9)
  {
    v16 = (void *)a2[3];
    *(_QWORD *)(a1 + 24) = v16;
    v17 = (void *)a2[4];
    *(_QWORD *)(a1 + 32) = v17;
    v18 = v16;
    v19 = v17;
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
LABEL_15:
  v75 = a3;
  v76 = a2;
  v20 = *(int *)(a3 + 24);
  v21 = a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = *(_QWORD *)((char *)a2 + v20);
  *(_BYTE *)(v21 + 8) = v22[8];
  *(_QWORD *)v21 = v23;
  v24 = (void *)*((_QWORD *)v22 + 2);
  v25 = *(void **)(v21 + 16);
  *(_QWORD *)(v21 + 16) = v24;
  v26 = v24;

  v27 = (int *)type metadata accessor for Artwork.Decoration(0);
  v28 = v27[5];
  v29 = (void *)(v21 + v28);
  v30 = &v22[v28];
  v31 = type metadata accessor for UIView.Corner(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(void *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v35)
  {
    (*(void (**)(void *, uint64_t))(v32 + 8))(v29, v31);
LABEL_20:
    v36 = sub_100005574(&qword_1004A1050);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_21;
  }
  (*(void (**)(void *, char *, uint64_t))(v32 + 24))(v29, v30, v31);
LABEL_21:
  v37 = v27[6];
  v38 = *(void **)&v22[v37];
  v39 = *(void **)(v21 + v37);
  *(_QWORD *)(v21 + v37) = v38;
  v40 = v38;

  *(_QWORD *)(v21 + v27[7]) = *(_QWORD *)&v22[v27[7]];
  v41 = *(int *)(v75 + 28);
  v42 = a1 + v41;
  v43 = (char *)v76 + v41;
  v44 = *(_QWORD *)(a1 + v41 + 24);
  v45 = *(_QWORD *)((char *)v76 + v41 + 24);
  if (v44)
  {
    if (v45)
    {
      v46 = *(id *)v42;
      v47 = *(void **)v43;
      *(_QWORD *)v42 = *(_QWORD *)v43;
      v48 = v47;

      v49 = *(void **)(v42 + 8);
      v50 = (void *)*((_QWORD *)v43 + 1);
      *(_QWORD *)(v42 + 8) = v50;
      v51 = v50;

      v52 = *(void **)(v42 + 16);
      v53 = (void *)*((_QWORD *)v43 + 2);
      *(_QWORD *)(v42 + 16) = v53;
      v54 = v53;

      v55 = (void *)*((_QWORD *)v43 + 3);
      v56 = *(void **)(v42 + 24);
      *(_QWORD *)(v42 + 24) = v55;
      v57 = v55;

      *(_QWORD *)(v42 + 32) = *((_QWORD *)v43 + 4);
      *(_QWORD *)(v42 + 40) = *((_QWORD *)v43 + 5);
    }
    else
    {
      sub_10023C088((id *)v42);
      v67 = *((_OWORD *)v43 + 1);
      v66 = *((_OWORD *)v43 + 2);
      *(_OWORD *)v42 = *(_OWORD *)v43;
      *(_OWORD *)(v42 + 16) = v67;
      *(_OWORD *)(v42 + 32) = v66;
    }
  }
  else if (v45)
  {
    v58 = *(void **)v43;
    *(_QWORD *)v42 = *(_QWORD *)v43;
    v59 = (void *)*((_QWORD *)v43 + 1);
    *(_QWORD *)(v42 + 8) = v59;
    v60 = (void *)*((_QWORD *)v43 + 2);
    *(_QWORD *)(v42 + 16) = v60;
    v61 = (void *)*((_QWORD *)v43 + 3);
    *(_QWORD *)(v42 + 24) = v61;
    *(_QWORD *)(v42 + 32) = *((_QWORD *)v43 + 4);
    *(_QWORD *)(v42 + 40) = *((_QWORD *)v43 + 5);
    v62 = v58;
    v63 = v59;
    v64 = v60;
    v65 = v61;
  }
  else
  {
    v68 = *(_OWORD *)v43;
    v69 = *((_OWORD *)v43 + 2);
    *(_OWORD *)(v42 + 16) = *((_OWORD *)v43 + 1);
    *(_OWORD *)(v42 + 32) = v69;
    *(_OWORD *)v42 = v68;
  }
  v70 = *(int *)(v75 + 32);
  v71 = (_OWORD *)(a1 + v70);
  v72 = (__int128 *)((char *)v76 + v70);
  v73 = *v72;
  *(_OWORD *)((char *)v71 + 9) = *(__int128 *)((char *)v72 + 9);
  *v71 = v73;
  return a1;
}

uint64_t sub_10023C028(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_weakDestroy(a1 + 16);
  return a1;
}

id *sub_10023C058(id *a1)
{

  return a1;
}

id *sub_10023C088(id *a1)
{
  _s12RecipeColorsVwxx(a1);
  return a1;
}

uint64_t initializeWithTake for Artwork(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  _OWORD *v21;
  _OWORD *v22;

  if (*(_QWORD *)(a2 + 8))
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    swift_weakTakeInit(a1 + 16, a2 + 16);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_OWORD *)v7 = *(_OWORD *)(a2 + v6);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(a2 + v6 + 16);
  v9 = (int *)type metadata accessor for Artwork.Decoration(0);
  v10 = v9[5];
  v11 = (void *)(v7 + v10);
  v12 = (const void *)(v8 + v10);
  v13 = type metadata accessor for UIView.Corner(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = sub_100005574(&qword_1004A1050);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  *(_QWORD *)(v7 + v9[6]) = *(_QWORD *)(v8 + v9[6]);
  *(_QWORD *)(v7 + v9[7]) = *(_QWORD *)(v8 + v9[7]);
  v16 = a3[7];
  v17 = a3[8];
  v18 = (_OWORD *)(a1 + v16);
  v19 = (_OWORD *)(a2 + v16);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v18[2] = v19[2];
  v21 = (_OWORD *)(a1 + v17);
  v22 = (_OWORD *)(a2 + v17);
  *(_OWORD *)((char *)v21 + 9) = *(_OWORD *)((char *)v22 + 9);
  *v21 = *v22;
  return a1;
}

uint64_t assignWithTake for Artwork(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  int *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  __int128 v32;
  uint64_t v33;
  _OWORD *v34;
  _OWORD *v35;
  uint64_t v37;
  _QWORD *v38;

  v6 = a2[1];
  if (*(_QWORD *)(a1 + 8))
  {
    if (v6)
    {
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v6;
      swift_bridgeObjectRelease();
      swift_weakTakeAssign(a1 + 16, a2 + 2);
      goto LABEL_8;
    }
    sub_10023C028(a1);
  }
  else if (v6)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    swift_weakTakeInit(a1 + 16, a2 + 2);
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = a2[2];
LABEL_8:
  if (*(_QWORD *)(a1 + 32))
  {
    if (a2[4])
    {
      v7 = *(void **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = a2[3];

      v8 = *(void **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = a2[4];

      goto LABEL_13;
    }
    sub_10023C058((id *)(a1 + 24));
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
LABEL_13:
  v37 = a3;
  v38 = a2;
  v9 = *(int *)(a3 + 24);
  v10 = a1 + v9;
  v11 = (char *)a2 + v9;
  *(_QWORD *)v10 = *(_QWORD *)((char *)a2 + v9);
  *(_BYTE *)(v10 + 8) = *((_BYTE *)a2 + v9 + 8);
  v12 = *(void **)(a1 + v9 + 16);
  *(_QWORD *)(v10 + 16) = *(_QWORD *)((char *)a2 + v9 + 16);

  v13 = (int *)type metadata accessor for Artwork.Decoration(0);
  v14 = v13[5];
  v15 = (void *)(v10 + v14);
  v16 = &v11[v14];
  v17 = type metadata accessor for UIView.Corner(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v21)
  {
    (*(void (**)(void *, uint64_t))(v18 + 8))(v15, v17);
LABEL_18:
    v22 = sub_100005574(&qword_1004A1050);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
LABEL_19:
  v23 = v13[6];
  v24 = *(void **)(v10 + v23);
  *(_QWORD *)(v10 + v23) = *(_QWORD *)&v11[v23];

  *(_QWORD *)(v10 + v13[7]) = *(_QWORD *)&v11[v13[7]];
  v25 = *(int *)(v37 + 28);
  v26 = a1 + v25;
  v27 = (char *)v38 + v25;
  if (!*(_QWORD *)(a1 + v25 + 24))
  {
LABEL_23:
    v32 = *((_OWORD *)v27 + 1);
    *(_OWORD *)v26 = *(_OWORD *)v27;
    *(_OWORD *)(v26 + 16) = v32;
    goto LABEL_24;
  }
  if (!*((_QWORD *)v27 + 3))
  {
    sub_10023C088((id *)v26);
    goto LABEL_23;
  }
  v28 = *(id *)v26;
  *(_QWORD *)v26 = *(_QWORD *)v27;

  v29 = *(void **)(v26 + 8);
  *(_QWORD *)(v26 + 8) = *((_QWORD *)v27 + 1);

  v30 = *(void **)(v26 + 16);
  *(_QWORD *)(v26 + 16) = *((_QWORD *)v27 + 2);

  v31 = *(void **)(v26 + 24);
  *(_QWORD *)(v26 + 24) = *((_QWORD *)v27 + 3);

LABEL_24:
  *(_OWORD *)(v26 + 32) = *((_OWORD *)v27 + 2);
  v33 = *(int *)(v37 + 32);
  v34 = (_OWORD *)(a1 + v33);
  v35 = (_OWORD *)((char *)v38 + v33);
  *v34 = *v35;
  *(_OWORD *)((char *)v34 + 9) = *(_OWORD *)((char *)v35 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for Artwork(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10023C500);
}

uint64_t sub_10023C500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for Artwork.Decoration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for Artwork(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10023C594);
}

uint64_t sub_10023C594(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v7 = type metadata accessor for Artwork.Decoration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_10023C608(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_100396EB8;
  v4[1] = &unk_100396ED0;
  result = type metadata accessor for Artwork.Decoration(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_100396EE8;
    v4[4] = &unk_100396F00;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10023C698()
{
  return type metadata accessor for Artwork.View(0);
}

uint64_t sub_10023C6A0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for Artwork(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100396ED0;
    v4[2] = " ";
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[4] = &unk_100396ED0;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t destroy for Artwork.Caching(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_weakDestroy(a1 + 16);
}

_QWORD *initializeWithCopy for Artwork.Caching(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2 + 2;
  swift_bridgeObjectRetain();
  swift_weakCopyInit(a1 + 2, v4);
  return a1;
}

_QWORD *assignWithCopy for Artwork.Caching(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  swift_weakCopyAssign(a1 + 2, a2 + 2);
  return a1;
}

_OWORD *initializeWithTake for Artwork.Caching(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_weakTakeInit(a1 + 1, a2 + 1);
  return a1;
}

_QWORD *assignWithTake for Artwork.Caching(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  swift_weakTakeAssign(a1 + 2, a2 + 2);
  return a1;
}

ValueMetadata *type metadata accessor for Artwork.Caching()
{
  return &type metadata for Artwork.Caching;
}

uint64_t type metadata accessor for Artwork.Caching.Reference()
{
  return objc_opt_self(_TtCVV11MusicCoreUI7Artwork7Caching9Reference);
}

_QWORD *initializeBufferWithCopyOfBuffer for Artwork.Content(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  v6 = v4;
  return a1;
}

uint64_t assignWithCopy for Artwork.Content(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  return a1;
}

uint64_t assignWithTake for Artwork.Content(uint64_t a1, _OWORD *a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for Artwork.Content()
{
  return &type metadata for Artwork.Content;
}

_QWORD *initializeBufferWithCopyOfBuffer for Artwork.Decoration(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  void *v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = (void *)a2[2];
    *(_QWORD *)(a1 + 16) = v7;
    v8 = a3[5];
    v9 = (void *)(a1 + v8);
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UIView.Corner(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
    v14 = v7;
    if (v13(v10, 1, v11))
    {
      v15 = sub_100005574(&qword_1004A1050);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v17 = a3[6];
    v18 = a3[7];
    v19 = *(void **)((char *)a2 + v17);
    *(_QWORD *)((char *)v4 + v17) = v19;
    *(_QWORD *)((char *)v4 + v18) = *(uint64_t *)((char *)a2 + v18);
    v20 = v19;
  }
  return v4;
}

void destroy for Artwork.Decoration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UIView.Corner(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);

}

uint64_t initializeWithCopy for Artwork.Decoration(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for UIView.Corner(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v6;
  if (v12(v9, 1, v10))
  {
    v14 = sub_100005574(&qword_1004A1050);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v15 = a3[6];
  v16 = a3[7];
  v17 = *(void **)(a2 + v15);
  *(_QWORD *)(a1 + v15) = v17;
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);
  v18 = v17;
  return a1;
}

uint64_t assignWithCopy for Artwork.Decoration(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  v7 = (void *)a2[2];
  v8 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  v9 = v7;

  v10 = a3[5];
  v11 = (void *)(a1 + v10);
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UIView.Corner(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = sub_100005574(&qword_1004A1050);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  v19 = a3[6];
  v20 = *(void **)((char *)a2 + v19);
  v21 = *(void **)(a1 + v19);
  *(_QWORD *)(a1 + v19) = v20;
  v22 = v20;

  *(_QWORD *)(a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for Artwork.Decoration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[5];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for UIView.Corner(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100005574(&qword_1004A1050);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  return a1;
}

uint64_t assignWithTake for Artwork.Decoration(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = type metadata accessor for UIView.Corner(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = sub_100005574(&qword_1004A1050);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  v16 = a3[6];
  v17 = *(void **)(a1 + v16);
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);

  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for Artwork.Decoration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10023CFAC);
}

uint64_t sub_10023CFAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100005574(&qword_1004A1050);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for Artwork.Decoration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10023D03C);
}

uint64_t sub_10023D03C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100005574(&qword_1004A1050);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

void sub_10023D0BC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_100396F60;
  sub_10023D14C(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

void sub_10023D14C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1004A11C0)
  {
    v2 = type metadata accessor for UIView.Corner(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1004A11C0);
  }
}

__n128 initializeWithCopy for Artwork.Size(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Artwork.Size(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Artwork.Size(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Artwork.Size()
{
  return &type metadata for Artwork.Size;
}

uint64_t initializeBufferWithCopyOfBuffer for Artwork.Size.Dimension(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t sub_10023D268(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Artwork.Size.Dimension()
{
  return &type metadata for Artwork.Size.Dimension;
}

uint64_t sub_10023D280(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005574(&qword_1004A1050);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10023D2C8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_10023D2EC(_QWORD *a1, void *a2)
{
  uint64_t v2;

  sub_100238FD0(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_10023D2F4()
{
  id *v0;

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10023D328(void *a1)
{
  void **v1;

  return sub_10023919C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10023D334(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_10023D344(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_10023D34C()
{
  return sub_10019A37C(48);
}

void sub_10023D354()
{
  void **v0;

  sub_1002393B0(v0[2], v0[3], v0[4], v0[5]);
}

unint64_t sub_10023D360()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10049B110;
  if (!qword_10049B110)
  {
    v1 = sub_100005600(&qword_100499718);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10049B110);
  }
  return result;
}

_OWORD *sub_10023D3AC(_OWORD *a1, _OWORD *a2)
{
  *a2 = *a1;
  swift_weakTakeInit(a2 + 1, a1 + 1);
  return a2;
}

void *Artwork.Placeholder.tint.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 8);
  v2 = v1;
  return v1;
}

double Radiosity.Specs.Radiosity.blurRadius.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void Radiosity.Specs.Radiosity.blurRadius.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 32) = a1;
}

id sub_10023D424()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(UIColor), "tertiaryLabelColor");
  qword_100499740 = (uint64_t)result;
  return result;
}

__n128 static Artwork.Placeholder.with(_:)@<Q0>(void (*a1)(__int128 *)@<X0>, uint64_t a2@<X8>)
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  __n128 result;
  __int128 v11;
  uint64_t v12;
  id v13;
  __int128 v14;

  v4 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemFillColor");
  if (qword_100498880 != -1)
    swift_once(&qword_100498880, sub_10023D424);
  v5 = (void *)qword_100499740;
  v6 = (void *)objc_opt_self(UIImageSymbolConfiguration);
  v7 = v5;
  *(_QWORD *)&v11 = v4;
  *((_QWORD *)&v11 + 1) = v5;
  v12 = 0;
  v13 = objc_msgSend(v6, "configurationWithWeight:", 4);
  v14 = xmmword_1003952F0;
  a1(&v11);
  v8 = v12;
  v9 = v13;
  result = (__n128)v14;
  *(_OWORD *)a2 = v11;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v9;
  *(__n128 *)(a2 + 32) = result;
  return result;
}

id Artwork.Placeholder.preferredSymbolConfiguration(in:)(double a1, double a2)
{
  uint64_t v2;
  double v3;
  double v4;
  void *v5;
  id v6;
  id v7;

  if (a1 > a2)
    v3 = a1;
  else
    v3 = a2;
  if (a2 < a1)
    a1 = a2;
  if (v3 * *(double *)(v2 + 32) >= a1)
    v4 = a1;
  else
    v4 = v3 * *(double *)(v2 + 32);
  v5 = *(void **)(v2 + 24);
  v6 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:", v4);
  v7 = objc_msgSend(v5, "configurationByApplyingConfiguration:", v6);

  return v7;
}

void Artwork.Placeholder.image(with:graphicsFormat:)(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  _OWORD *v4;
  id v5;
  void *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  __n128 v14;
  _QWORD v15[5];
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;

  v4 = (_OWORD *)v3;
  v5 = objc_msgSend(objc_allocWithZone((Class)UIGraphicsImageRenderer), "initWithSize:format:", a1, a2, a3);
  v17 = 0;
  sub_1000149A8(v3, (uint64_t)&v20, &qword_100499758);
  sub_1000149A8(v3 + 8, (uint64_t)&v19, &qword_100499758);
  sub_1000149A8(v3 + 16, (uint64_t)&v18, &qword_100499760);
  v6 = *(void **)(v3 + 24);
  v7 = swift_allocObject(&unk_10045B300, 72, 7);
  v8 = v4[1];
  *(_OWORD *)(v7 + 16) = *v4;
  *(_OWORD *)(v7 + 32) = v8;
  *(_OWORD *)(v7 + 48) = v4[2];
  *(_QWORD *)(v7 + 64) = &v17;
  v9 = swift_allocObject(&unk_10045B328, 32, 7);
  *(_QWORD *)(v9 + 16) = sub_10023DAFC;
  *(_QWORD *)(v9 + 24) = v7;
  v15[4] = sub_100009BB0;
  v16 = v9;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  v15[2] = sub_1000E776C;
  v15[3] = &unk_10045B340;
  v10 = _Block_copy(v15);
  v11 = v16;
  sub_1000BC564(&v20);
  sub_1000BC564(&v19);
  sub_1000BC564(&v18);
  v12 = v6;
  swift_retain(v9);
  v13 = objc_msgSend(v5, "imageWithActions:", v10, swift_release(v11).n128_f64[0]);

  _Block_release(v10);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation(v9, "", 129, 60, 36, 1, v14);
  swift_release(v9);
  if ((v5 & 1) != 0)
    __break(1u);
  else
    swift_release(v7);
}

void sub_10023D7D4(void *a1, uint64_t a2, void **a3)
{
  id v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  double v20;
  double v21;
  double v22;
  double v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  double v32;
  double v33;
  double v34;
  double v35;
  id v36;
  double v37;
  double v38;
  id v39;
  void *v40;
  _BYTE v41[8];
  id v42;

  v6 = objc_msgSend(a1, "format");
  objc_msgSend(v6, "bounds");
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;

  v15 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemBackgroundColor");
  objc_msgSend(v15, "setFill");

  v16 = (void *)objc_opt_self(UIBezierPath);
  v17 = objc_msgSend(v16, "bezierPathWithRect:", v8, v10, v12, v14);
  objc_msgSend(v17, "fill");

  if (*(_QWORD *)a2)
  {
    v18 = *(id *)a2;
    objc_msgSend(v18, "setFill");
    v19 = objc_msgSend(v16, "bezierPathWithRect:", v8, v10, v12, v14);
    objc_msgSend(v19, "fill");

  }
  if (v12 > v14)
    v20 = v12;
  else
    v20 = v14;
  if (v14 >= v12)
    v21 = v12;
  else
    v21 = v14;
  v22 = v20 * *(double *)(a2 + 32);
  if (v22 >= v21)
    v23 = v21;
  else
    v23 = v22;
  v24 = *(void **)(a2 + 24);
  v25 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:", v23);
  v26 = objc_msgSend(v24, "configurationByApplyingConfiguration:", v25);

  sub_1000149A8(a2 + 16, (uint64_t)v41, &qword_100499760);
  sub_1000149A8((uint64_t)v41, (uint64_t)&v42, &qword_100499760);
  if (v42)
  {
    v27 = objc_msgSend(v42, "imageWithSymbolConfiguration:", v26);
    if (v27)
    {
      v28 = v27;
      v29 = *(void **)(a2 + 8);
      if (v29)
      {
        v30 = v29;
        v31 = objc_msgSend(v28, "imageWithTintColor:", v30);

        v28 = v31;
      }
      objc_msgSend(v28, "size");
      v33 = v32;
      v35 = v34;
      v36 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
      objc_msgSend(v36, "scale");
      v38 = v37;

      CGRect.centeringAlong(axes:bounds:scale:)(3, v8, v10, v12, v14, v38, v8, v10, v33, v35);
      objc_msgSend(v28, "drawInRect:");

    }
  }
  v39 = objc_msgSend(a1, "currentImage");

  v40 = *a3;
  *a3 = v39;

}

uint64_t sub_10023DAF4()
{
  return sub_10019A37C(72);
}

void sub_10023DAFC(void *a1)
{
  uint64_t v1;

  sub_10023D7D4(a1, v1 + 16, *(void ***)(v1 + 64));
}

uint64_t sub_10023DB08()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10023DB18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_10023DB28(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

char *Artwork.Placeholder.View.__allocating_init(configuration:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return Artwork.Placeholder.View.init(configuration:)(a1);
}

char *Artwork.Placeholder.View.init(configuration:)(uint64_t a1)
{
  char *v1;
  char *v2;
  objc_class *ObjectType;
  uint64_t v5;
  id v6;
  char *v7;
  void *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  id v12;
  char *v13;
  uint64_t v14;
  char *v15;
  objc_super v17;
  id v18;
  id v19;
  id v20;
  _OWORD v21[3];

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v5 = OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_contentView;
  v6 = objc_allocWithZone((Class)UIImageView);
  v7 = v1;
  *(_QWORD *)&v2[v5] = objc_msgSend(v6, "init");
  sub_1000149A8(a1, (uint64_t)&v20, &qword_100499758);
  sub_1000149A8(a1 + 8, (uint64_t)&v19, &qword_100499758);
  sub_1000149A8(a1 + 16, (uint64_t)&v18, &qword_100499760);
  v8 = *(void **)(a1 + 24);
  v9 = &v7[OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration];
  v10 = *(_OWORD *)a1;
  v11 = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v9 + 1) = *(_OWORD *)(a1 + 16);
  *((_OWORD *)v9 + 2) = v11;
  *(_OWORD *)v9 = v10;
  sub_1000BC564(&v20);
  sub_1000BC564(&v19);
  sub_1000BC564(&v18);
  v12 = v8;

  v17.receiver = v7;
  v17.super_class = ObjectType;
  v13 = (char *)objc_msgSendSuper2(&v17, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v14 = *(_QWORD *)&v13[OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_contentView];
  v15 = v13;
  objc_msgSend(v15, "addSubview:", v14);
  memset(v21, 0, sizeof(v21));
  sub_10023DCDC((uint64_t)v21);
  sub_100222190(&v20);
  sub_100222190(&v19);
  sub_100222190(&v18);

  return v15;
}

void sub_10023DCDC(uint64_t a1)
{
  char *v1;
  char *v2;
  void *v4;
  char *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  char v25;
  id v26;
  id v27;
  char v28;
  uint64_t v29;
  char v30[24];
  void *v31;
  char v32[24];
  uint64_t v33;
  double v34;
  char v35[16];
  id v36;
  uint64_t v37;

  v2 = v1;
  sub_1000149A8(a1, (uint64_t)v30, &qword_1004993F8);
  v4 = v31;
  v5 = &v1[OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration];
  swift_beginAccess(v5, &v29, 0, 0);
  v7 = *(void **)v5;
  v6 = (void *)*((_QWORD *)v5 + 1);
  v8 = (void *)*((_QWORD *)v5 + 2);
  v9 = (void *)*((_QWORD *)v5 + 3);
  v11 = *((double *)v5 + 4);
  v10 = *((double *)v5 + 5);
  if (*(_QWORD *)v5)
  {
    v12 = v8;
    v13 = v9;
    v14 = v6;
    v15 = v7;
  }
  else
  {
    v16 = (void *)objc_opt_self(UIColor);
    v12 = v8;
    v17 = v9;
    v14 = v6;
    v15 = objc_msgSend(v16, "clearColor");
    v7 = 0;
  }
  v18 = v7;
  objc_msgSend(v2, "setBackgroundColor:", v15);

  v19 = *(void **)&v2[OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_contentView];
  objc_msgSend(v19, "setHidden:", v8 == 0);
  objc_msgSend(v19, "setImage:", v12);
  objc_msgSend(v19, "setTintColor:", v14);
  objc_msgSend(v19, "setAlpha:", v10);
  v20 = objc_msgSend(v2, "superview");

  if (!v20)
    goto LABEL_18;
  sub_1000149A8(a1, (uint64_t)v35, &qword_1004993F8);
  if (!v37)
  {
    if (!v8)
      goto LABEL_14;
    goto LABEL_17;
  }
  v21 = v36;
  v22 = v36;
  v23 = v22;
  if (!v8)
  {
    if (!v21)
      goto LABEL_14;

LABEL_17:
    objc_msgSend(v2, "setNeedsLayout");
    goto LABEL_18;
  }
  if (!v21)
    goto LABEL_17;
  sub_1000087DC(0, &qword_10049FE40, UIImage_ptr);
  v24 = v12;
  v25 = static NSObject.== infix(_:_:)(v24, v23);

  if ((v25 & 1) == 0)
    goto LABEL_17;
LABEL_14:
  sub_1000149A8(a1, (uint64_t)v32, &qword_1004993F8);
  if (!v33)
    goto LABEL_17;
  if (v11 != v34)
    goto LABEL_17;
  sub_1000087DC(0, &qword_100499830, UIImageSymbolConfiguration_ptr);
  v26 = v9;
  v27 = v4;
  v28 = static NSObject.== infix(_:_:)(v26, v27);

  if ((v28 & 1) == 0)
    goto LABEL_17;
LABEL_18:

}

void Artwork.Placeholder.View.init(coder:)()
{
  char *v0;
  uint64_t v1;

  v1 = OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_contentView;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001003B2590, "MusicCoreUI/ArtworkPlaceholder.swift", 36, 2, 100, 0);
  __break(1u);
}

id Artwork.Placeholder.View.typedConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v11;
  _BYTE v12[24];

  v3 = v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration;
  swift_beginAccess(v3, v12, 0, 0);
  v4 = *(void **)v3;
  v5 = *(void **)(v3 + 8);
  v6 = *(void **)(v3 + 16);
  v11 = *(id *)(v3 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v11;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v3 + 32);
  v7 = v4;
  v8 = v5;
  v9 = v6;
  return v11;
}

void Artwork.Placeholder.View.typedConfiguration.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 *v3;
  __int128 v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  __int128 v11;
  id v12;
  id v13;
  __int128 v14;
  void *v15;
  id v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[24];
  id v25;
  id v26;
  id v27;
  _QWORD v28[6];
  __int128 v29;
  _OWORD v30[2];
  __int128 v31;
  _OWORD v32[2];
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38[2];

  v3 = (__int128 *)(v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration);
  swift_beginAccess(v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration, v24, 1, 0);
  v4 = v3[1];
  v31 = *v3;
  v32[0] = v4;
  v32[1] = v3[2];
  v22 = *((_QWORD *)v3 + 1);
  v23 = *(_QWORD *)v3;
  v20 = *((_QWORD *)v3 + 3);
  v21 = *((_QWORD *)v3 + 2);
  v18 = *((_QWORD *)v3 + 5);
  v19 = *((_QWORD *)v3 + 4);
  sub_1000149A8((uint64_t)&v31, (uint64_t)&v33, &qword_100499758);
  sub_1000149A8((uint64_t)&v31 + 8, (uint64_t)&v34, &qword_100499758);
  sub_1000149A8((uint64_t)v32, (uint64_t)&v35, &qword_100499760);
  v5 = (void *)*((_QWORD *)&v32[0] + 1);
  sub_1000149A8(a1, (uint64_t)&v27, &qword_100499758);
  sub_1000149A8(a1 + 8, (uint64_t)&v26, &qword_100499758);
  sub_1000149A8(a1 + 16, (uint64_t)&v25, &qword_100499760);
  v6 = *(void **)(a1 + 24);
  v8 = *(void **)v3;
  v7 = (void *)*((_QWORD *)v3 + 1);
  v10 = (void *)*((_QWORD *)v3 + 2);
  v9 = (void *)*((_QWORD *)v3 + 3);
  v11 = *(_OWORD *)(a1 + 16);
  *v3 = *(_OWORD *)a1;
  v3[1] = v11;
  v3[2] = *(_OWORD *)(a1 + 32);
  sub_1000BC564(&v33);
  sub_1000BC564(&v34);
  sub_1000BC564(&v35);
  v12 = v5;
  sub_1000BC564(&v27);
  sub_1000BC564(&v26);
  sub_1000BC564(&v25);
  v13 = v6;

  v14 = v3[1];
  v29 = *v3;
  v30[0] = v14;
  v30[1] = v3[2];
  sub_1000149A8((uint64_t)&v29, (uint64_t)&v36, &qword_100499758);
  sub_1000149A8((uint64_t)&v29 + 8, (uint64_t)&v37, &qword_100499758);
  sub_1000149A8((uint64_t)v30, (uint64_t)v38, &qword_100499760);
  v15 = (void *)*((_QWORD *)&v30[0] + 1);
  sub_1000BC564(&v36);
  sub_1000BC564(&v37);
  sub_1000BC564(v38);
  v16 = v15;
  v17 = _s11MusicCoreUI7ArtworkV11PlaceholderV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)&v29, (uint64_t)&v31);
  sub_100222190(&v36);
  sub_100222190(&v37);
  sub_100222190(v38);

  if (!v17)
  {
    v28[0] = v23;
    v28[1] = v22;
    v28[2] = v21;
    v28[3] = v20;
    v28[4] = v19;
    v28[5] = v18;
    sub_10023DCDC((uint64_t)v28);
  }
  sub_100222190(&v27);
  sub_100222190(&v26);
  sub_100222190(&v25);

  sub_100222190(&v33);
  sub_100222190(&v34);
  sub_100222190(&v35);

}

void (*Artwork.Placeholder.View.typedConfiguration.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v3 = malloc(0xC8uLL);
  *a1 = v3;
  v3[24] = v1;
  v4 = v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration;
  swift_beginAccess(v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration, v3 + 18, 0, 0);
  v5 = *(void **)v4;
  v6 = *(void **)(v4 + 8);
  v7 = *(void **)(v4 + 16);
  v8 = *(void **)(v4 + 24);
  v3[6] = *(_QWORD *)v4;
  v3[7] = v6;
  v3 += 6;
  v3[2] = v7;
  v3[3] = v8;
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v4 + 32);
  v9 = v7;
  v10 = v8;
  v11 = v5;
  v12 = v6;
  return sub_10023E44C;
}

void sub_10023E44C(uint64_t *a1, char a2)
{
  uint64_t v2;
  _OWORD *v3;
  __int128 v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = *a1;
  v3 = (_OWORD *)(*a1 + 48);
  v4 = *(_OWORD *)(*a1 + 64);
  if ((a2 & 1) != 0)
  {
    *(_OWORD *)v2 = *v3;
    *(_OWORD *)(v2 + 16) = v4;
    *(_OWORD *)(v2 + 32) = v3[2];
    sub_1000149A8(v2, v2 + 168, &qword_100499758);
    sub_1000149A8(v2 + 8, v2 + 176, &qword_100499758);
    sub_1000149A8(v2 + 16, v2 + 184, &qword_100499760);
    v5 = *(void **)(v2 + 24);
    sub_1000BC564((id *)(v2 + 168));
    sub_1000BC564((id *)(v2 + 176));
    sub_1000BC564((id *)(v2 + 184));
    v6 = v5;
    Artwork.Placeholder.View.typedConfiguration.setter(v2);
    v7 = *(void **)(v2 + 48);
    v8 = *(void **)(v2 + 56);
    v9 = *(void **)(v2 + 64);

  }
  else
  {
    *(_OWORD *)(v2 + 96) = *v3;
    *(_OWORD *)(v2 + 112) = v4;
    *(_OWORD *)(v2 + 128) = v3[2];
    Artwork.Placeholder.View.typedConfiguration.setter(v2 + 96);
  }
  free((void *)v2);
}

Swift::Void __swiftcall Artwork.Placeholder.View.layoutSubviews()()
{
  char *v0;
  void *v1;
  char *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  id v7;
  id v8;
  id v9;
  id v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  double v25;
  id v26;
  id v27;
  id v28;
  id v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  id v35;
  id v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  char v45[24];
  objc_super v46;

  v46.receiver = v0;
  v46.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v46, "layoutSubviews");
  v1 = *(void **)&v0[OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_contentView];
  v2 = &v0[OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration];
  swift_beginAccess(&v0[OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration], v45, 0, 0);
  v3 = *(void **)v2;
  v4 = (void *)*((_QWORD *)v2 + 1);
  v5 = (void *)*((_QWORD *)v2 + 3);
  v6 = *((double *)v2 + 4);
  v7 = *((id *)v2 + 2);
  v8 = v5;
  v9 = v3;
  v10 = v4;
  objc_msgSend(v0, "bounds");
  if (v11 > v12)
    v13 = v11;
  else
    v13 = v12;
  if (v12 >= v11)
    v14 = v11;
  else
    v14 = v12;
  v15 = v6 * v13;
  if (v15 >= v14)
    v16 = v14;
  else
    v16 = v15;
  v17 = (void *)objc_opt_self(UIImageSymbolConfiguration);
  v18 = objc_msgSend(v17, "configurationWithPointSize:", v16);
  v19 = objc_msgSend(v8, "configurationByApplyingConfiguration:", v18);

  objc_msgSend(v1, "setPreferredSymbolConfiguration:", v19);
  if (objc_msgSend((id)objc_opt_self(UIView), "_isInAnimationBlock")
    && (v20 = *((_QWORD *)v2 + 2)) != 0)
  {
    v21 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithImage:", v20);
    v22 = *(void **)v2;
    v23 = (void *)*((_QWORD *)v2 + 1);
    v24 = (void *)*((_QWORD *)v2 + 3);
    v25 = *((double *)v2 + 4);
    v26 = *((id *)v2 + 2);
    v27 = v24;
    v28 = v22;
    v29 = v23;
    objc_msgSend(v0, "bounds");
    if (v30 > v31)
      v32 = v30;
    else
      v32 = v31;
    if (v31 >= v30)
      v33 = v30;
    else
      v33 = v31;
    v34 = v25 * v32;
    if (v34 >= v33)
      v34 = v33;
    v35 = objc_msgSend(v17, "configurationWithPointSize:", v34);
    v36 = objc_msgSend(v27, "configurationByApplyingConfiguration:", v35);

    objc_msgSend(v21, "setPreferredSymbolConfiguration:", v36);
    objc_msgSend(v1, "setContentMode:", 1);
    objc_msgSend(v0, "bounds");
    objc_msgSend(v21, "sizeThatFits:", v37, v38);
    CGRect.centeringAlong(axes:in:)(3, 0.0, 0.0, v39, v40);
    objc_msgSend(v1, "setFrame:");

  }
  else
  {
    objc_msgSend(v1, "setContentMode:", 4);
    objc_msgSend(v0, "bounds");
    objc_msgSend(v1, "sizeThatFits:", v41, v42);
    CGRect.centeringAlong(axes:in:)(3, 0.0, 0.0, v43, v44);
    objc_msgSend(v1, "setFrame:");
  }
}

char *sub_10023E93C(_OWORD *a1)
{
  objc_class *v1;
  __int128 v2;
  id v3;
  _OWORD v5[3];

  v2 = a1[1];
  v5[0] = *a1;
  v5[1] = v2;
  v5[2] = a1[2];
  v3 = objc_allocWithZone(v1);
  return Artwork.Placeholder.View.init(configuration:)((uint64_t)v5);
}

id sub_10023E980@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v11;
  _BYTE v12[24];

  v3 = v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration;
  swift_beginAccess(v3, v12, 0, 0);
  v4 = *(void **)v3;
  v11 = *(id *)(v3 + 8);
  v5 = *(void **)(v3 + 16);
  v6 = *(void **)(v3 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v3 + 32);
  v7 = v5;
  v8 = v6;
  v9 = v4;
  return v11;
}

void sub_10023E9F8(_OWORD *a1)
{
  __int128 v1;
  _OWORD v2[3];

  v1 = a1[1];
  v2[0] = *a1;
  v2[1] = v1;
  v2[2] = a1[2];
  Artwork.Placeholder.View.typedConfiguration.setter((uint64_t)v2);
}

void (*sub_10023EA28(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Artwork.Placeholder.View.typedConfiguration.modify(v2);
  return sub_1000F3374;
}

id sub_10023EA6C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v12;
  _BYTE v13[24];

  a1[3] = (uint64_t)&type metadata for Artwork.Placeholder;
  a1[4] = sub_10023B468();
  v3 = swift_allocObject(&unk_10045B408, 64, 7);
  *a1 = v3;
  v4 = v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration;
  swift_beginAccess(v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration, v13, 0, 0);
  v5 = *(void **)v4;
  v12 = *(id *)(v4 + 8);
  v6 = *(void **)(v4 + 16);
  v7 = *(void **)(v4 + 24);
  *(_QWORD *)(v3 + 16) = *(_QWORD *)v4;
  *(_QWORD *)(v3 + 24) = v12;
  *(_QWORD *)(v3 + 32) = v6;
  *(_QWORD *)(v3 + 40) = v7;
  *(_OWORD *)(v3 + 48) = *(_OWORD *)(v4 + 32);
  v8 = v6;
  v9 = v7;
  v10 = v5;
  return v12;
}

uint64_t sub_10023EB14(_QWORD *a1)
{
  uint64_t v2;
  _OWORD v4[3];
  _BYTE v5[40];
  _OWORD v6[3];

  sub_1000244B0((uint64_t)a1, (uint64_t)v5);
  v2 = sub_100005574(&qword_100499710);
  swift_dynamicCast(v4, v5, v2, &type metadata for Artwork.Placeholder, 7);
  v6[0] = v4[0];
  v6[1] = v4[1];
  v6[2] = v4[2];
  Artwork.Placeholder.View.typedConfiguration.setter((uint64_t)v6);
  return sub_10000682C(a1);
}

void (*sub_10023EB8C(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;

  v3 = malloc(0x128uLL);
  *a1 = v3;
  v3[36] = v1;
  v3[26] = &type metadata for Artwork.Placeholder;
  v3[27] = sub_10023B468();
  v4 = swift_allocObject(&unk_10045B408, 64, 7);
  v3[23] = v4;
  v5 = v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration;
  swift_beginAccess(v5, v3 + 33, 0, 0);
  v6 = *(void **)v5;
  v7 = *(void **)(v5 + 8);
  v8 = *(void **)(v5 + 16);
  v9 = *(void **)(v5 + 24);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)v5;
  *(_QWORD *)(v4 + 24) = v7;
  *(_QWORD *)(v4 + 32) = v8;
  *(_QWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(v5 + 32);
  v10 = v8;
  v11 = v9;
  v12 = v6;
  v13 = v7;
  return sub_10023EC54;
}

void sub_10023EC54(void **a1, char a2)
{
  _OWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;

  v2 = *a1;
  v3 = (char *)*a1 + 96;
  v4 = (uint64_t)*a1 + 144;
  v5 = (char *)*a1 + 184;
  if ((a2 & 1) != 0)
  {
    sub_1000244B0((uint64_t)*a1 + 184, (uint64_t)(v2 + 14));
    sub_1000244B0((uint64_t)(v2 + 14), v4);
    v6 = sub_100005574(&qword_100499710);
    swift_dynamicCast(v3, v4, v6, &type metadata for Artwork.Placeholder, 7);
    v7 = v3[1];
    *v2 = *v3;
    v2[1] = v7;
    v2[2] = v3[2];
    Artwork.Placeholder.View.typedConfiguration.setter((uint64_t)v2);
    sub_10000682C((_QWORD *)v2 + 28);
  }
  else
  {
    sub_1000244B0((uint64_t)*a1 + 184, v4);
    v8 = sub_100005574(&qword_100499710);
    swift_dynamicCast(v3, v4, v8, &type metadata for Artwork.Placeholder, 7);
    v9 = v3[1];
    v2[3] = *v3;
    v2[4] = v9;
    v2[5] = v3[2];
    Artwork.Placeholder.View.typedConfiguration.setter((uint64_t)(v2 + 3));
  }
  sub_10000682C(v5);
  free(v2);
}

char *sub_10023ED60()
{
  __int128 *v0;
  __int128 v1;
  void *v2;
  id v3;
  id v4;
  char *v5;
  uint64_t v6;
  __int128 v8;
  _OWORD v9[2];
  id v10;
  id v11;
  id v12;

  v1 = v0[1];
  v8 = *v0;
  v9[0] = v1;
  v9[1] = v0[2];
  sub_1000149A8((uint64_t)&v8, (uint64_t)&v10, &qword_100499758);
  sub_1000149A8((uint64_t)&v8 + 8, (uint64_t)&v11, &qword_100499758);
  sub_1000149A8((uint64_t)v9, (uint64_t)&v12, &qword_100499760);
  v2 = (void *)*((_QWORD *)&v9[0] + 1);
  v3 = objc_allocWithZone((Class)type metadata accessor for Artwork.Placeholder.View());
  sub_1000BC564(&v10);
  sub_1000BC564(&v11);
  sub_1000BC564(&v12);
  v4 = v2;
  v5 = Artwork.Placeholder.View.init(configuration:)((uint64_t)&v8);
  sub_100241D38(&qword_100499728, v6, (uint64_t (*)(uint64_t))type metadata accessor for Artwork.Placeholder.View, (uint64_t)&protocol conformance descriptor for Artwork.Placeholder.View);
  return v5;
}

id sub_10023EE3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v9;

  v2 = *(void **)v1;
  v9 = *(id *)(v1 + 8);
  v3 = *(void **)(v1 + 16);
  v4 = *(void **)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  v5 = v3;
  v6 = v4;
  v7 = v2;
  return v9;
}

BOOL sub_10023EE90(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[3];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return _s11MusicCoreUI7ArtworkV11PlaceholderV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)v7, (uint64_t)v8);
}

double sub_10023EED4()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  NSString v5;
  id v6;
  id v7;
  double result;

  v0 = (void *)objc_opt_self(UIColor);
  v1 = objc_msgSend(v0, "blackColor");
  v2 = objc_msgSend(v1, "colorWithAlphaComponent:", 0.1);

  v3 = objc_msgSend(v0, "whiteColor");
  v4 = objc_msgSend(v3, "colorWithAlphaComponent:", 0.12);

  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v5);

  v7 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithWeight:", 3);
  static Artwork.Placeholder.nowPlaying = (uint64_t)v2;
  unk_1004A3000 = v4;
  qword_1004A3008 = (uint64_t)v6;
  unk_1004A3010 = v7;
  result = 0.46;
  xmmword_1004A3018 = xmmword_100395300;
  return result;
}

uint64_t *Artwork.Placeholder.nowPlaying.unsafeMutableAddressor()
{
  if (qword_100498888 != -1)
    swift_once(&qword_100498888, sub_10023EED4);
  return &static Artwork.Placeholder.nowPlaying;
}

id static Artwork.Placeholder.nowPlaying.getter@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10;

  if (qword_100498888 != -1)
    swift_once(&qword_100498888, sub_10023EED4);
  v2 = (void *)static Artwork.Placeholder.nowPlaying;
  v3 = (void *)unk_1004A3000;
  v5 = (void *)qword_1004A3008;
  v4 = unk_1004A3010;
  v10 = (id)unk_1004A3010;
  *(_QWORD *)a1 = static Artwork.Placeholder.nowPlaying;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_1004A3018;
  v6 = v2;
  v7 = v3;
  v8 = v5;
  return v10;
}

double sub_10023F0C8()
{
  void *v0;
  id v1;
  id v2;
  NSString v3;
  id v4;
  id v5;
  double result;

  v0 = (void *)objc_opt_self(UIColor);
  v1 = objc_msgSend(v0, "tertiarySystemFillColor");
  v2 = objc_msgSend(v0, "quaternaryLabelColor");
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v3);

  v5 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithWeight:", 3);
  static Artwork.Placeholder.miniPlayer = (uint64_t)v1;
  unk_1004A3030 = v2;
  qword_1004A3038 = (uint64_t)v4;
  unk_1004A3040 = v5;
  result = 0.46;
  xmmword_1004A3048 = xmmword_100395300;
  return result;
}

uint64_t *Artwork.Placeholder.miniPlayer.unsafeMutableAddressor()
{
  if (qword_100498890 != -1)
    swift_once(&qword_100498890, sub_10023F0C8);
  return &static Artwork.Placeholder.miniPlayer;
}

id static Artwork.Placeholder.miniPlayer.getter@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10;

  if (qword_100498890 != -1)
    swift_once(&qword_100498890, sub_10023F0C8);
  v2 = (void *)static Artwork.Placeholder.miniPlayer;
  v3 = (void *)unk_1004A3030;
  v5 = (void *)qword_1004A3038;
  v4 = unk_1004A3040;
  v10 = (id)unk_1004A3040;
  *(_QWORD *)a1 = static Artwork.Placeholder.miniPlayer;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_1004A3048;
  v6 = v2;
  v7 = v3;
  v8 = v5;
  return v10;
}

void static Artwork.Placeholder.device(representing:basedOn:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  char v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  id v25;
  char v26;
  id v27;
  char v28;
  uint64_t v29;
  id v30;
  id v31;
  void *v32;

  v6 = *(void **)a2;
  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a2 + 24);
  v9 = (void *)objc_opt_self(MPAVRoutingController);
  v10 = v7;
  v11 = v8;
  v12 = v6;
  v13 = objc_msgSend(v9, "_symbolImageForRoute:", a1);
  v14 = v13;
  if (v7)
  {
    v32 = v6;
    v15 = (void *)objc_opt_self(UIColor);
    v16 = v10;
    v17 = v14;
    v18 = objc_msgSend(v15, "secondaryLabelColor");
    sub_1000087DC(0, (unint64_t *)&qword_1004A1510, UIColor_ptr);
    v19 = static NSObject.== infix(_:_:)(v18, v16);

    if ((v19 & 1) != 0)
    {

      v20 = objc_msgSend(v15, "labelColor");
    }
    else
    {
      v24 = v16;
      v25 = objc_msgSend(v15, "tertiaryLabelColor");
      v26 = static NSObject.== infix(_:_:)(v25, v24);

      if ((v26 & 1) != 0)
      {

        v20 = objc_msgSend(v15, "secondaryLabelColor");
      }
      else
      {
        v23 = v24;
        v27 = objc_msgSend(v15, "quaternaryLabelColor");
        v28 = static NSObject.== infix(_:_:)(v27, v23);

        if ((v28 & 1) == 0)
        {
LABEL_12:
          v6 = v32;
          goto LABEL_13;
        }

        v20 = objc_msgSend(v15, "tertiaryLabelColor");
      }
    }
    v23 = v20;
    goto LABEL_12;
  }
  v21 = qword_100498880;
  v22 = v13;
  if (v21 != -1)
    swift_once(&qword_100498880, sub_10023D424);
  v23 = (id)qword_100499740;
LABEL_13:
  v29 = *(_QWORD *)(a2 + 40);
  v30 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithHierarchicalColor:", v23);
  v31 = objc_msgSend(v11, "configurationByApplyingConfiguration:", v30);

  *a3 = v6;
  a3[1] = v7;
  a3[2] = v14;
  a3[3] = v31;
  a3[4] = 0x3FE0000000000000;
  a3[5] = v29;
}

id sub_10023F51C()
{
  NSString v0;
  id v1;
  id v2;
  id v3;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v0);

  v2 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithWeight:", 3);
  v3 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemFillColor");
  if (qword_100498880 != -1)
    swift_once(&qword_100498880, sub_10023D424);
  static Artwork.Placeholder.music = (uint64_t)v3;
  unk_1004A3060 = qword_100499740;
  qword_1004A3068 = (uint64_t)v1;
  unk_1004A3070 = v2;
  xmmword_1004A3078 = xmmword_100395310;
  return (id)qword_100499740;
}

uint64_t *Artwork.Placeholder.music.unsafeMutableAddressor()
{
  if (qword_100498898 != -1)
    swift_once(&qword_100498898, sub_10023F51C);
  return &static Artwork.Placeholder.music;
}

id static Artwork.Placeholder.music.getter@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10;

  if (qword_100498898 != -1)
    swift_once(&qword_100498898, sub_10023F51C);
  v2 = (void *)static Artwork.Placeholder.music;
  v3 = (void *)unk_1004A3060;
  v5 = (void *)qword_1004A3068;
  v4 = unk_1004A3070;
  v10 = (id)unk_1004A3070;
  *(_QWORD *)a1 = static Artwork.Placeholder.music;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_1004A3078;
  v6 = v2;
  v7 = v3;
  v8 = v5;
  return v10;
}

id sub_10023F6E0()
{
  NSString v0;
  id v1;
  id v2;
  id v3;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v0);

  v2 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithWeight:", 5);
  v3 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemFillColor");
  if (qword_100498880 != -1)
    swift_once(&qword_100498880, sub_10023D424);
  static Artwork.Placeholder.musicVideo = (uint64_t)v3;
  unk_1004A3090 = qword_100499740;
  qword_1004A3098 = (uint64_t)v1;
  unk_1004A30A0 = v2;
  xmmword_1004A30A8 = xmmword_1003952F0;
  return (id)qword_100499740;
}

uint64_t *Artwork.Placeholder.musicVideo.unsafeMutableAddressor()
{
  if (qword_1004988A0 != -1)
    swift_once(&qword_1004988A0, sub_10023F6E0);
  return &static Artwork.Placeholder.musicVideo;
}

id static Artwork.Placeholder.musicVideo.getter@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10;

  if (qword_1004988A0 != -1)
    swift_once(&qword_1004988A0, sub_10023F6E0);
  v2 = (void *)static Artwork.Placeholder.musicVideo;
  v3 = (void *)unk_1004A3090;
  v5 = (void *)qword_1004A3098;
  v4 = unk_1004A30A0;
  v10 = (id)unk_1004A30A0;
  *(_QWORD *)a1 = static Artwork.Placeholder.musicVideo;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_1004A30A8;
  v6 = v2;
  v7 = v3;
  v8 = v5;
  return v10;
}

id sub_10023F8B4()
{
  NSString v0;
  id v1;
  id v2;
  id v3;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v0);

  v2 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithWeight:", 5);
  v3 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemFillColor");
  if (qword_100498880 != -1)
    swift_once(&qword_100498880, sub_10023D424);
  static Artwork.Placeholder.tv = (uint64_t)v3;
  unk_1004A30C0 = qword_100499740;
  qword_1004A30C8 = (uint64_t)v1;
  unk_1004A30D0 = v2;
  xmmword_1004A30D8 = xmmword_1003952F0;
  return (id)qword_100499740;
}

uint64_t *Artwork.Placeholder.tv.unsafeMutableAddressor()
{
  if (qword_1004988A8 != -1)
    swift_once(&qword_1004988A8, sub_10023F8B4);
  return &static Artwork.Placeholder.tv;
}

id static Artwork.Placeholder.tv.getter@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10;

  if (qword_1004988A8 != -1)
    swift_once(&qword_1004988A8, sub_10023F8B4);
  v2 = (void *)static Artwork.Placeholder.tv;
  v3 = (void *)unk_1004A30C0;
  v5 = (void *)qword_1004A30C8;
  v4 = unk_1004A30D0;
  v10 = (id)unk_1004A30D0;
  *(_QWORD *)a1 = static Artwork.Placeholder.tv;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_1004A30D8;
  v6 = v2;
  v7 = v3;
  v8 = v5;
  return v10;
}

id sub_10023FA70()
{
  NSString v0;
  id v1;
  id v2;
  id v3;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v0);

  v2 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithWeight:", 4);
  v3 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemFillColor");
  if (qword_100498880 != -1)
    swift_once(&qword_100498880, sub_10023D424);
  static Artwork.Placeholder.microphone = (uint64_t)v3;
  unk_1004A30F0 = qword_100499740;
  qword_1004A30F8 = (uint64_t)v1;
  unk_1004A3100 = v2;
  xmmword_1004A3108 = xmmword_100395300;
  return (id)qword_100499740;
}

uint64_t *Artwork.Placeholder.microphone.unsafeMutableAddressor()
{
  if (qword_1004988B0 != -1)
    swift_once(&qword_1004988B0, sub_10023FA70);
  return &static Artwork.Placeholder.microphone;
}

id static Artwork.Placeholder.microphone.getter@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10;

  if (qword_1004988B0 != -1)
    swift_once(&qword_1004988B0, sub_10023FA70);
  v2 = (void *)static Artwork.Placeholder.microphone;
  v3 = (void *)unk_1004A30F0;
  v5 = (void *)qword_1004A30F8;
  v4 = unk_1004A3100;
  v10 = (id)unk_1004A3100;
  *(_QWORD *)a1 = static Artwork.Placeholder.microphone;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_1004A3108;
  v6 = v2;
  v7 = v3;
  v8 = v5;
  return v10;
}

id sub_10023FC3C()
{
  NSString v0;
  id v1;
  id v2;
  id v3;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v0);

  v2 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithWeight:", 3);
  v3 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemFillColor");
  if (qword_100498880 != -1)
    swift_once(&qword_100498880, sub_10023D424);
  static Artwork.Placeholder.person = (uint64_t)v3;
  unk_1004A3120 = qword_100499740;
  qword_1004A3128 = (uint64_t)v1;
  unk_1004A3130 = v2;
  xmmword_1004A3138 = xmmword_1003952F0;
  return (id)qword_100499740;
}

uint64_t *Artwork.Placeholder.person.unsafeMutableAddressor()
{
  if (qword_1004988B8 != -1)
    swift_once(&qword_1004988B8, sub_10023FC3C);
  return &static Artwork.Placeholder.person;
}

id static Artwork.Placeholder.person.getter@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10;

  if (qword_1004988B8 != -1)
    swift_once(&qword_1004988B8, sub_10023FC3C);
  v2 = (void *)static Artwork.Placeholder.person;
  v3 = (void *)unk_1004A3120;
  v5 = (void *)qword_1004A3128;
  v4 = unk_1004A3130;
  v10 = (id)unk_1004A3130;
  *(_QWORD *)a1 = static Artwork.Placeholder.person;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_1004A3138;
  v6 = v2;
  v7 = v3;
  v8 = v5;
  return v10;
}

double sub_10023FE0C()
{
  NSString v0;
  id v1;
  id v2;
  double result;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v0);

  v2 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithWeight:", 3);
  static Artwork.Placeholder.newPlaylist = (uint64_t)objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemFillColor");
  unk_1004A3150 = 0;
  qword_1004A3158 = (uint64_t)v1;
  unk_1004A3160 = v2;
  result = 0.5;
  xmmword_1004A3168 = xmmword_1003952F0;
  return result;
}

uint64_t *Artwork.Placeholder.newPlaylist.unsafeMutableAddressor()
{
  if (qword_1004988C0 != -1)
    swift_once(&qword_1004988C0, sub_10023FE0C);
  return &static Artwork.Placeholder.newPlaylist;
}

id static Artwork.Placeholder.newPlaylist.getter@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10;

  if (qword_1004988C0 != -1)
    swift_once(&qword_1004988C0, sub_10023FE0C);
  v2 = (void *)static Artwork.Placeholder.newPlaylist;
  v3 = (void *)unk_1004A3150;
  v5 = (void *)qword_1004A3158;
  v4 = unk_1004A3160;
  v10 = (id)unk_1004A3160;
  *(_QWORD *)a1 = static Artwork.Placeholder.newPlaylist;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_1004A3168;
  v6 = v2;
  v7 = v3;
  v8 = v5;
  return v10;
}

double static Artwork.Placeholder.playlist(ofType:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  double v10;
  __int128 v11;
  double result;
  _OWORD v13[2];
  __int128 v14;

  sub_100005574(&qword_100499778);
  __chkstk_darwin();
  v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Playlist.Variant(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MPModelPlaylistType.variant.getter(a1, (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for Playlist.Variant.regular(_:), v6);
    sub_100241644((uint64_t)v5);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
  }
  v10 = sub_100241684((uint64_t)v9, (uint64_t)v13);
  (*(void (**)(char *, uint64_t, double))(v7 + 8))(v9, v6, v10);
  v11 = v13[1];
  *a2 = v13[0];
  a2[1] = v11;
  result = *(double *)&v14;
  a2[2] = v14;
  return result;
}

double static Artwork.Placeholder.playlist(withVariant:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3;
  double result;
  _OWORD v5[2];
  __int128 v6;

  sub_100241684(a1, (uint64_t)v5);
  v3 = v5[1];
  *a2 = v5[0];
  a2[1] = v3;
  result = *(double *)&v6;
  a2[2] = v6;
  return result;
}

__n128 Artwork.Placeholder.withSolidBackgroundColor()@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 *v2;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  char v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  char v20;
  __n128 result;
  void *v22;

  v2 = v1;
  v4 = (void *)v1[1].n128_u64[0];
  v5 = (void *)v1[1].n128_u64[1];
  v6 = (id)v1->n128_u64[0];
  v7 = (void *)v1->n128_u64[1];
  if (v1->n128_u64[0])
  {
    v8 = (void *)objc_opt_self(UIColor);
    v22 = v4;
    v9 = v4;
    v10 = v5;
    v11 = v6;
    v12 = v7;
    v13 = objc_msgSend(v8, "secondarySystemFillColor");
    sub_1000087DC(0, (unint64_t *)&qword_1004A1510, UIColor_ptr);
    v14 = static NSObject.== infix(_:_:)(v13, v11);

    if ((v14 & 1) != 0)
    {
      if (qword_1004988C8 != -1)
        swift_once(&qword_1004988C8, sub_1002403BC);
      v6 = (id)qword_100499748;

      v4 = v22;
    }
    else
    {
      v18 = v11;
      v19 = objc_msgSend(v8, "tertiarySystemFillColor");
      v20 = static NSObject.== infix(_:_:)(v19, v18);

      v4 = v22;
      if ((v20 & 1) != 0)
      {
        if (qword_1004988D0 != -1)
          swift_once(&qword_1004988D0, sub_1002403EC);
        v6 = (id)qword_100499750;

      }
    }
  }
  else
  {
    v15 = v4;
    v16 = v5;
    v17 = v7;
  }
  a1->n128_u64[0] = (unint64_t)v6;
  a1->n128_u64[1] = (unint64_t)v7;
  a1[1].n128_u64[0] = (unint64_t)v4;
  a1[1].n128_u64[1] = (unint64_t)v5;
  result = v2[2];
  a1[2] = result;
  return result;
}

id Artwork.Placeholder.withBackground(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v9;

  v3 = *(void **)(v2 + 8);
  v4 = *(void **)(v2 + 16);
  v9 = *(id *)(v2 + 24);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v9;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v2 + 32);
  v5 = a1;
  v6 = v3;
  v7 = v4;
  return v9;
}

id Artwork.Placeholder.withScaleFactor(_:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v11;

  v3 = *(void **)v2;
  v4 = *(void **)(v2 + 8);
  v5 = *(void **)(v2 + 16);
  v11 = *(id *)(v2 + 24);
  v6 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)a1 = *(_QWORD *)v2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v11;
  *(double *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = v6;
  v7 = v3;
  v8 = v4;
  v9 = v5;
  return v11;
}

id Artwork.Placeholder.withTint(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10;

  v4 = *(void **)v2;
  v5 = *(void **)(v2 + 16);
  v10 = *(id *)(v2 + 24);
  *(_QWORD *)a2 = *(_QWORD *)v2;
  *(_QWORD *)(a2 + 8) = a1;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v10;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v2 + 32);
  v6 = v4;
  v7 = a1;
  v8 = v5;
  return v10;
}

void sub_1002403BC(uint64_t a1)
{
  sub_100240408(a1, (uint64_t)sub_1002403D8, (uint64_t)&unk_10045B420, &qword_100499748);
}

id sub_1002403D8(void *a1)
{
  return sub_1002404C0(a1, 38, 41, 233, 234);
}

void sub_1002403EC(uint64_t a1)
{
  sub_100240408(a1, (uint64_t)sub_1002404AC, (uint64_t)&unk_10045B448, &qword_100499750);
}

void sub_100240408(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  id v7;
  void *v8;
  id v9;
  _QWORD v10[5];
  uint64_t v11;

  v7 = objc_allocWithZone((Class)UIColor);
  v10[4] = a2;
  v11 = 0;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_100234A18;
  v10[3] = a3;
  v8 = _Block_copy(v10);
  v9 = objc_msgSend(v7, "initWithDynamicProvider:", v8);
  _Block_release(v8);
  swift_release(v11);
  *a4 = v9;
}

id sub_1002404AC(void *a1)
{
  return sub_1002404C0(a1, 44, 46, 245, 245);
}

id sub_1002404C0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = objc_msgSend(a1, "userInterfaceStyle");
  sub_1000087DC(0, (unint64_t *)&qword_1004A1510, UIColor_ptr);
  if (v9 == (id)2)
  {
    v10 = a2;
    v11 = a2;
    v12 = a3;
  }
  else
  {
    v10 = a4;
    v11 = a4;
    v12 = a5;
  }
  return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v10, v11, v12, 1.0);
}

double sub_100240678()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Class isa;
  void *v5;
  id v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  Class v10;
  id v11;
  unsigned int v12;
  id v13;
  void *v14;
  double v15;
  char v16;

  v1 = sub_100005574(&qword_100499F90);
  v2 = swift_allocObject(v1, 48, 7);
  *(_OWORD *)(v2 + 16) = xmmword_100384A80;
  *(_QWORD *)(v2 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertySongHasVideo);
  *(_QWORD *)(v2 + 40) = v3;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = (void *)objc_opt_self(MPPropertySet);
  v6 = objc_msgSend(v5, "propertySetWithProperties:", isa);

  LODWORD(isa) = objc_msgSend(v0, "hasLoadedValuesForPropertySet:", v6);
  v7 = 1.0;
  if ((_DWORD)isa && objc_msgSend(v0, "hasVideo"))
  {
    if (qword_1004988D8 != -1)
      swift_once(&qword_1004988D8, sub_1002409E0);
    v7 = *(double *)&static Artwork.Size.musicVideoAspectRatio;
    v8 = swift_allocObject(v1, 48, 7);
    *(_OWORD *)(v8 + 16) = xmmword_100384A80;
    *(_QWORD *)(v8 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertySongArtwork);
    *(_QWORD *)(v8 + 40) = v9;
    v10 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v11 = objc_msgSend(v5, "propertySetWithProperties:", v10);

    v12 = objc_msgSend(v0, "hasLoadedValuesForPropertySet:", v11);
    if (v12)
    {
      v13 = objc_msgSend(v0, "artworkCatalog");
      if (v13)
      {
        v14 = v13;
        v15 = COERCE_DOUBLE(MPArtworkCatalog.expectedRatio.getter());
        if ((v16 & 1) == 0 && v15 < 1.0)
        {
          if (qword_1004988E0 != -1)
            swift_once(&qword_1004988E0, sub_100240A18);
          v7 = *(double *)&static Artwork.Size.verticalMusicVideoAspectRatio;
        }

      }
    }
  }
  return v7;
}

uint64_t *Artwork.Size.musicVideoAspectRatio.unsafeMutableAddressor()
{
  if (qword_1004988D8 != -1)
    swift_once(&qword_1004988D8, sub_1002409E0);
  return &static Artwork.Size.musicVideoAspectRatio;
}

uint64_t *Artwork.Size.verticalMusicVideoAspectRatio.unsafeMutableAddressor()
{
  if (qword_1004988E0 != -1)
    swift_once(&qword_1004988E0, sub_100240A18);
  return &static Artwork.Size.verticalMusicVideoAspectRatio;
}

id static MPModelPlaylist.artworkPlaceholderImage(for:)()
{
  return sub_100241944();
}

id MPModelPlaylist.artworkPlaceholderImage.getter()
{
  void *v0;
  NSString v2;
  id v3;

  if (objc_msgSend(v0, "hasLoadedValueForKey:", MPModelPropertyPlaylistType))
  {
    objc_msgSend(v0, "type");
    return sub_100241944();
  }
  else
  {
    v2 = String._bridgeToObjectiveC()();
    v3 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v2);

    return v3;
  }
}

void sub_1002409E0()
{
  static Artwork.Size.musicVideoAspectRatio = 0x3FFC71C71C71C71CLL;
}

double static Artwork.Size.musicVideoAspectRatio.getter()
{
  return sub_100240A44(&qword_1004988D8, (uint64_t)&static Artwork.Size.musicVideoAspectRatio);
}

void sub_100240A18()
{
  static Artwork.Size.verticalMusicVideoAspectRatio = 0x3FE2000000000000;
}

double static Artwork.Size.verticalMusicVideoAspectRatio.getter()
{
  return sub_100240A44(&qword_1004988E0, (uint64_t)&static Artwork.Size.verticalMusicVideoAspectRatio);
}

double sub_100240A44(_QWORD *a1, uint64_t a2)
{
  if (*a1 != -1)
    swift_once();
  return *(double *)a2;
}

double sub_100240A7C(uint64_t a1)
{
  return sub_100240B20(a1, &qword_1004988D8, (double *)&static Artwork.Size.musicVideoAspectRatio, &static Artwork.Size.videoAspectRatio, (uint64_t)sub_1002409E0);
}

_QWORD *Artwork.Size.videoAspectRatio.unsafeMutableAddressor()
{
  if (qword_1004988E8 != -1)
    swift_once(&qword_1004988E8, sub_100240A7C);
  return &static Artwork.Size.videoAspectRatio;
}

double static Artwork.Size.videoAspectRatio.getter()
{
  return sub_100240A44(&qword_1004988E8, (uint64_t)&static Artwork.Size.videoAspectRatio);
}

double sub_100240AFC(uint64_t a1)
{
  return sub_100240B20(a1, &qword_1004988E0, (double *)&static Artwork.Size.verticalMusicVideoAspectRatio, &static Artwork.Size.verticalVideoAspectRatio, (uint64_t)sub_100240A18);
}

double sub_100240B20(uint64_t a1, _QWORD *a2, double *a3, _QWORD *a4, uint64_t a5)
{
  double result;

  if (*a2 != -1)
    swift_once(a2, a5);
  result = *a3;
  *a4 = *(_QWORD *)a3;
  return result;
}

_QWORD *Artwork.Size.verticalVideoAspectRatio.unsafeMutableAddressor()
{
  if (qword_1004988F0 != -1)
    swift_once(&qword_1004988F0, sub_100240AFC);
  return &static Artwork.Size.verticalVideoAspectRatio;
}

double static Artwork.Size.verticalVideoAspectRatio.getter()
{
  return sub_100240A44(&qword_1004988F0, (uint64_t)&static Artwork.Size.verticalVideoAspectRatio);
}

void MPModelObject.artworkPlaceholder.getter(_QWORD *a1@<X8>)
{
  void *v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  double v32;
  _QWORD v33[6];

  sub_100005574(&qword_100499778);
  __chkstk_darwin();
  v4 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Playlist.Variant(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_opt_self(MPModelGenericObject);
  v9 = swift_dynamicCastObjCClass(v1);
  if (v9)
  {
    v10 = (void *)v9;
    v11 = v1;
    v12 = objc_msgSend(v10, "anyObject");
    if (v12)
    {
      v13 = v12;
      MPModelObject.artworkPlaceholder.getter(v33);

LABEL_20:
      v21 = v33[4];
      v22 = v33[5];
      v20 = (void *)v33[2];
      v24 = (id)v33[3];
      v17 = (void *)v33[0];
      v18 = (void *)v33[1];
      goto LABEL_21;
    }
LABEL_8:
    if (qword_100498898 != -1)
      swift_once(&qword_100498898, sub_10023F51C);
    v17 = (void *)static Artwork.Placeholder.music;
    v18 = (void *)unk_1004A3060;
    v20 = (void *)qword_1004A3068;
    v19 = (void *)unk_1004A3070;
    v22 = *((_QWORD *)&xmmword_1004A3078 + 1);
    v21 = xmmword_1004A3078;
    v23 = (id)qword_1004A3068;
    v24 = v19;
    v25 = v17;
    v26 = v18;

    goto LABEL_21;
  }
  objc_opt_self(MPModelPlaylist);
  v14 = swift_dynamicCastObjCClass(v1);
  if (v14)
  {
    v15 = (void *)v14;
    v16 = MPModelPropertyPlaylistType;
    v11 = v1;
    if (objc_msgSend(v15, "hasLoadedValueForKey:", v16))
    {
      MPModelPlaylistType.variant.getter((uint64_t)objc_msgSend(v15, "type"), (uint64_t)v4);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
      {
        (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for Playlist.Variant.regular(_:), v5);
        sub_100241644((uint64_t)v4);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
      }
      v32 = sub_100241684((uint64_t)v8, (uint64_t)v33);
      (*(void (**)(char *, uint64_t, double))(v6 + 8))(v8, v5, v32);

      goto LABEL_20;
    }
    goto LABEL_8;
  }
  objc_opt_self(MPModelRecordLabel);
  if (swift_dynamicCastObjCClass(v1)
    || (objc_opt_self(MPModelArtist), swift_dynamicCastObjCClass(v1))
    || (objc_opt_self(MPModelCurator), swift_dynamicCastObjCClass(v1)))
  {
    if (qword_1004988B0 != -1)
      swift_once(&qword_1004988B0, sub_10023FA70);
    v27 = &static Artwork.Placeholder.microphone;
  }
  else
  {
    objc_opt_self(MPModelPerson);
    if (swift_dynamicCastObjCClass(v1))
    {
      if (qword_1004988B8 != -1)
        swift_once(&qword_1004988B8, sub_10023FC3C);
      v27 = &static Artwork.Placeholder.person;
    }
    else
    {
      objc_opt_self(MPModelMovie);
      if (swift_dynamicCastObjCClass(v1)
        || (objc_opt_self(MPModelTVShow), swift_dynamicCastObjCClass(v1))
        || (objc_opt_self(MPModelTVEpisode), swift_dynamicCastObjCClass(v1))
        || (objc_opt_self(MPModelTVSeason), swift_dynamicCastObjCClass(v1)))
      {
        if (qword_1004988A8 != -1)
          swift_once(&qword_1004988A8, sub_10023F8B4);
        v27 = &static Artwork.Placeholder.tv;
      }
      else
      {
        if (qword_100498898 != -1)
          swift_once(&qword_100498898, sub_10023F51C);
        v27 = &static Artwork.Placeholder.music;
      }
    }
  }
  v17 = (void *)*v27;
  v18 = (void *)v27[1];
  v20 = (void *)v27[2];
  v28 = (void *)v27[3];
  v21 = v27[4];
  v22 = v27[5];
  v29 = v20;
  v24 = v28;
  v30 = v17;
  v31 = v18;
LABEL_21:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v20;
  a1[3] = v24;
  a1[4] = v21;
  a1[5] = v22;
}

id GenericMusicItem.artworkPlaceholder.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t *v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id result;
  __int128 v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t (*v32)(char *, uint64_t);
  id v33;
  id v34;
  id v35;
  void *v36;
  uint64_t (*v37)(char *, uint64_t);
  id v38;
  id v39;
  id v40;
  double v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  _QWORD v45[4];
  __int128 v46;

  v2 = v1;
  sub_100005574(&qword_100499778);
  __chkstk_darwin();
  v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Playlist.Variant(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for Playlist(0);
  v10 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin();
  v42 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for GenericMusicItem(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin();
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v2, v12);
  v16 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v15, v12);
  if (v16 == enum case for GenericMusicItem.artist(_:))
    goto LABEL_2;
  if (v16 == enum case for GenericMusicItem.composer(_:) || v16 == enum case for GenericMusicItem.curator(_:))
    goto LABEL_10;
  if (v16 == enum case for GenericMusicItem.musicMovie(_:))
  {
LABEL_14:
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    if (qword_1004988A8 != -1)
      swift_once(&qword_1004988A8, sub_10023F8B4);
    v17 = &static Artwork.Placeholder.tv;
    goto LABEL_17;
  }
  if (v16 != enum case for GenericMusicItem.playlist(_:))
  {
    if (v16 == enum case for GenericMusicItem.recordLabel(_:))
    {
LABEL_2:
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      if (qword_1004988B0 != -1)
        swift_once(&qword_1004988B0, sub_10023FA70);
      v17 = &static Artwork.Placeholder.microphone;
LABEL_17:
      v19 = (void *)*v17;
      v20 = (void *)v17[1];
      v22 = (void *)v17[2];
      v21 = (void *)v17[3];
      v44 = *((_OWORD *)v17 + 2);
      v23 = v22;
      v24 = v21;
      v25 = v19;
      result = v20;
      goto LABEL_18;
    }
    if (v16 != enum case for GenericMusicItem.socialProfile(_:))
    {
      if (v16 != enum case for GenericMusicItem.tvEpisode(_:)
        && v16 != enum case for GenericMusicItem.tvSeason(_:)
        && v16 != enum case for GenericMusicItem.tvShow(_:))
      {
        if (qword_100498898 != -1)
          swift_once(&qword_100498898, sub_10023F51C);
        v19 = (void *)static Artwork.Placeholder.music;
        v20 = (void *)unk_1004A3060;
        v22 = (void *)qword_1004A3068;
        v36 = (void *)unk_1004A3070;
        v44 = xmmword_1004A3078;
        v37 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
        v38 = (id)static Artwork.Placeholder.music;
        v39 = v20;
        v40 = v22;
        v24 = v36;
        result = (id)v37(v15, v12);
        goto LABEL_18;
      }
      goto LABEL_14;
    }
LABEL_10:
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    if (qword_1004988B8 != -1)
      swift_once(&qword_1004988B8, sub_10023FC3C);
    v17 = &static Artwork.Placeholder.person;
    goto LABEL_17;
  }
  (*(void (**)(char *, uint64_t))(v13 + 96))(v15, v12);
  v28 = v43;
  v29 = v42;
  v30 = (*(uint64_t (**)(void))(v10 + 32))();
  Playlist.variant.getter(v30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
    v41 = sub_100241684((uint64_t)v9, (uint64_t)v45);
    (*(void (**)(char *, uint64_t, double))(v7 + 8))(v9, v6, v41);
    result = (id)(*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v29, v28);
    v27 = v46;
    v22 = (void *)v45[2];
    v24 = (id)v45[3];
    v19 = (void *)v45[0];
    v20 = (void *)v45[1];
    goto LABEL_19;
  }
  sub_100241644((uint64_t)v5);
  if (qword_100498898 != -1)
    swift_once(&qword_100498898, sub_10023F51C);
  v19 = (void *)static Artwork.Placeholder.music;
  v20 = (void *)unk_1004A3060;
  v22 = (void *)qword_1004A3068;
  v31 = (void *)unk_1004A3070;
  v44 = xmmword_1004A3078;
  v32 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
  v33 = (id)static Artwork.Placeholder.music;
  v34 = v20;
  v35 = v22;
  v24 = v31;
  result = (id)v32(v29, v28);
LABEL_18:
  v27 = v44;
LABEL_19:
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = v20;
  *(_QWORD *)(a1 + 16) = v22;
  *(_QWORD *)(a1 + 24) = v24;
  *(_OWORD *)(a1 + 32) = v27;
  return result;
}

BOOL _s11MusicCoreUI7ArtworkV11PlaceholderV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  id v7;
  char v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  char v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  char v18;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  if (*(_QWORD *)a1)
  {
    if (!v5)
      return 0;
    sub_1000087DC(0, (unint64_t *)&qword_1004A1510, UIColor_ptr);
    v6 = v5;
    v7 = v4;
    v8 = static NSObject.== infix(_:_:)(v7, v6);

    if ((v8 & 1) == 0)
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v9 = *(void **)(a1 + 8);
  v10 = *(void **)(a2 + 8);
  if (v9)
  {
    if (!v10)
      return 0;
    sub_1000087DC(0, (unint64_t *)&qword_1004A1510, UIColor_ptr);
    v11 = v10;
    v12 = v9;
    v13 = static NSObject.== infix(_:_:)(v12, v11);

    if ((v13 & 1) == 0)
      return 0;
  }
  else if (v10)
  {
    return 0;
  }
  v14 = *(void **)(a1 + 16);
  v15 = *(void **)(a2 + 16);
  if (v14)
  {
    if (!v15)
      return 0;
    sub_1000087DC(0, &qword_10049FE40, UIImage_ptr);
    v16 = v15;
    v17 = v14;
    v18 = static NSObject.== infix(_:_:)(v17, v16);

    if ((v18 & 1) == 0)
      return 0;
  }
  else if (v15)
  {
    return 0;
  }
  sub_1000087DC(0, (unint64_t *)&qword_10049A0D0, NSObject_ptr);
  if ((static NSObject.== infix(_:_:)(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24)) & 1) != 0
    && *(double *)(a1 + 32) == *(double *)(a2 + 32))
  {
    return *(double *)(a1 + 40) == *(double *)(a2 + 40);
  }
  return 0;
}

uint64_t sub_100241644(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005574(&qword_100499778);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double sub_100241684@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  id v16;
  int v17;
  NSString v18;
  id v19;
  id v20;
  double result;
  uint64_t v22;
  uint64_t v23;

  v4 = type metadata accessor for Playlist.Variant(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v9 = (char *)&v22 - v8;
  v10 = enum case for Playlist.Variant.folder(_:);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))((char *)&v22 - v8, enum case for Playlist.Variant.folder(_:), v4);
  v11 = sub_100241D38(&qword_100499828, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist.Variant, (uint64_t)&protocol conformance descriptor for Playlist.Variant);
  dispatch thunk of RawRepresentable.rawValue.getter(&v23, v4, v11);
  dispatch thunk of RawRepresentable.rawValue.getter(&v22, v4, v11);
  v13 = v22;
  v12 = v23;
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v9, v4);
  v15 = 0;
  if (v12 != v13)
  {
    if (qword_100498880 != -1)
      swift_once(&qword_100498880, sub_10023D424);
    v15 = qword_100499740;
    v16 = (id)qword_100499740;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v17 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v17 != enum case for Playlist.Variant.smart(_:) && v17 != enum case for Playlist.Variant.genius(_:) && v17 != v10)
    v14(v7, v4);
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v19 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v18);

  v20 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithWeight:", 3);
  *(_QWORD *)a2 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemFillColor");
  *(_QWORD *)(a2 + 8) = v15;
  *(_QWORD *)(a2 + 16) = v19;
  *(_QWORD *)(a2 + 24) = v20;
  result = 0.4;
  *(_OWORD *)(a2 + 32) = xmmword_100395310;
  return result;
}

id sub_100241944()
{
  NSString v0;
  id v1;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v0);

  return v1;
}

unint64_t sub_100241A18()
{
  unint64_t result;

  result = qword_100499780;
  if (!qword_100499780)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Artwork.Placeholder, &type metadata for Artwork.Placeholder);
    atomic_store(result, (unint64_t *)&qword_100499780);
  }
  return result;
}

uint64_t sub_100241A5C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100241D38(&qword_100499728, a2, (uint64_t (*)(uint64_t))type metadata accessor for Artwork.Placeholder.View, (uint64_t)&protocol conformance descriptor for Artwork.Placeholder.View);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for Artwork.Placeholder.View()
{
  return objc_opt_self(_TtCVV11MusicCoreUI7Artwork11Placeholder4View);
}

uint64_t sub_100241AB8(uint64_t a1, uint64_t a2)
{
  return sub_100241D38(&qword_1004997C8, a2, (uint64_t (*)(uint64_t))type metadata accessor for Artwork.Placeholder.View, (uint64_t)&protocol conformance descriptor for Artwork.Placeholder.View);
}

unint64_t sub_100241AE4(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100241B10();
  result = sub_10023B468();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100241B10()
{
  unint64_t result;

  result = qword_1004997F8;
  if (!qword_1004997F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Artwork.Placeholder, &type metadata for Artwork.Placeholder);
    atomic_store(result, (unint64_t *)&qword_1004997F8);
  }
  return result;
}

uint64_t _s11PlaceholderVwcp(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(void **)(a2 + 16);
  v6 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v7 = v3;
  v8 = v4;
  v9 = v5;
  v10 = v6;
  return a1;
}

uint64_t _s11PlaceholderVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v9 = v8;

  v10 = *(void **)(a1 + 16);
  v11 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  v12 = v11;

  v13 = *(void **)(a2 + 24);
  v14 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v13;
  v15 = v13;

  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t _s11PlaceholderVwta(uint64_t a1, _OWORD *a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];

  *(_OWORD *)(a1 + 32) = a2[2];
  return a1;
}

uint64_t _s11PlaceholderVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s11PlaceholderVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Artwork.Placeholder()
{
  return &type metadata for Artwork.Placeholder;
}

uint64_t sub_100241D30()
{
  return sub_10019A37C(64);
}

uint64_t sub_100241D38(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

__n128 CAPackageDefinition.transform.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(v1 + 40);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(v1 + 56);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

__n128 CAPackageDefinition.transform.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 24) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 40) = v2;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v1 + 56) = result;
  return result;
}

__n128 CAPackageDefinition.init(name:bundle:transform:states:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int128 v6;
  __n128 result;

  v6 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a6 + 24) = *(_OWORD *)a4;
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = a3;
  *(_OWORD *)(a6 + 40) = v6;
  result = *(__n128 *)(a4 + 32);
  *(__n128 *)(a6 + 56) = result;
  *(_QWORD *)(a6 + 72) = a5;
  return result;
}

__n128 CAPackageDefinition.scaled(byX:y:)@<Q0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>)
{
  uint64_t v3;
  CGFloat v5;
  CGFloat v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  CGFloat tx;
  CGFloat ty;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  CGAffineTransform v20;
  CGAffineTransform t2;
  CGAffineTransform t1;

  v15 = *(_OWORD *)(v3 + 40);
  v17 = *(_OWORD *)(v3 + 24);
  v5 = *(double *)(v3 + 56);
  v6 = *(double *)(v3 + 64);
  v7 = *(_QWORD *)v3;
  v8 = *(_QWORD *)(v3 + 72);
  v19 = *(_OWORD *)(v3 + 8);
  CGAffineTransformMakeScale(&t1, a2, a3);
  v9 = *(_OWORD *)&t1.a;
  v10 = *(_OWORD *)&t1.c;
  v11 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v17;
  *(_OWORD *)&t1.c = v15;
  t1.tx = v5;
  t1.ty = v6;
  *(_OWORD *)&t2.a = v9;
  *(_OWORD *)&t2.c = v10;
  *(_OWORD *)&t2.tx = v11;
  CGAffineTransformConcat(&v20, &t1, &t2);
  v16 = *(__n128 *)&v20.c;
  v18 = *(_OWORD *)&v20.a;
  tx = v20.tx;
  ty = v20.ty;
  sub_100241EA4(v3);
  *(_QWORD *)a1 = v7;
  *(_OWORD *)(a1 + 8) = v19;
  *(_OWORD *)(a1 + 24) = v18;
  result = v16;
  *(__n128 *)(a1 + 40) = v16;
  *(CGFloat *)(a1 + 56) = tx;
  *(CGFloat *)(a1 + 64) = ty;
  *(_QWORD *)(a1 + 72) = v8;
  return result;
}

uint64_t sub_100241EA4(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 16);
  swift_bridgeObjectRetain();
  v3 = v2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100241EEC(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  _OWORD v9[5];

  v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  v3 = a1[4];
  v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return _s11MusicCoreUI19CAPackageDefinitionV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t *)v8, (uint64_t)v9) & 1;
}

void *sub_100241F44()
{
  uint64_t v0;
  void *result;

  v0 = _s16PackageDataCacheCMa();
  swift_allocObject(v0, 32, 7);
  result = (void *)sub_10024235C();
  off_100499838 = result;
  return result;
}

double sub_100241F80(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  id v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD aBlock[5];
  _QWORD *v29;

  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v24 = *(_QWORD *)(v12 - 8);
  v25 = v12;
  __chkstk_darwin();
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(void **)(v4 + 24);
  v16 = (_QWORD *)swift_allocObject(&unk_10045B5E8, 56, 7);
  v16[2] = v4;
  v16[3] = a3;
  v16[4] = a4;
  v16[5] = a1;
  v16[6] = a2;
  aBlock[4] = sub_100243128;
  v29 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000BED80;
  aBlock[3] = &unk_10045B600;
  v17 = _Block_copy(aBlock);
  v18 = v15;
  swift_retain(v4);
  swift_bridgeObjectRetain();
  sub_1000516F8(a1, a2);
  static DispatchQoS.unspecified.getter(v19);
  v27 = _swiftEmptyArrayStorage;
  v20 = sub_100006924((unint64_t *)&unk_10049B100, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_100005574(&qword_100499718);
  v22 = sub_1000C27F8((unint64_t *)&qword_10049B110, &qword_100499718);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v21, v22, v9, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v25);
  *(_QWORD *)&result = swift_release(v29).n128_u64[0];
  return result;
}

uint64_t sub_1002421A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  _BYTE v13[24];

  swift_beginAccess(a1 + 16, v13, 33, 0);
  swift_bridgeObjectRetain();
  sub_1000516F8(a4, a5);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a1 + 16));
  v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0x8000000000000000;
  sub_100268B60(a4, a5, a2, a3, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(a1 + 16) = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess(v13);
}

uint64_t sub_100242264(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE v17[24];

  swift_beginAccess(a2 + 16, v17, 0, 0);
  v8 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(v8 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = sub_10009ABAC(a3, a4);
    if ((v10 & 1) != 0)
    {
      v11 = (uint64_t *)(*(_QWORD *)(v8 + 56) + 16 * v9);
      v12 = *v11;
      v13 = v11[1];
      sub_1000516F8(*v11, v13);
    }
    else
    {
      v12 = 0;
      v13 = 0xF000000000000000;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = 0;
    v13 = 0xF000000000000000;
  }
  v14 = *a1;
  v15 = a1[1];
  *a1 = v12;
  a1[1] = v13;
  return sub_1000067D4(v14, v15);
}

uint64_t sub_100242330()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_10024235C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;

  v1 = v0;
  v15 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v2 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin();
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin();
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DispatchQoS(0);
  __chkstk_darwin();
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = sub_100233550((uint64_t)_swiftEmptyArrayStorage);
  sub_1000087DC(0, (unint64_t *)&qword_100499FB0, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v10);
  v16 = _swiftEmptyArrayStorage;
  v11 = sub_100006924((unint64_t *)&unk_100498E10, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v12 = sub_100005574((uint64_t *)&unk_100499FC0);
  v13 = sub_1000C27F8((unint64_t *)&qword_100498E20, (uint64_t *)&unk_100499FC0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v5, v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v15);
  *(_QWORD *)(v1 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001ELL, 0x80000001003B7D90, v9, v7, v4, 0);
  return v1;
}

char *CAPackage.init(definition:)(uint64_t *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  __n128 v16;
  __int128 v17;
  uint64_t *v18;
  id v19;
  NSString v20;
  NSString v21;
  id v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  Class v31;
  uint64_t *v32;
  id v33;
  id v34;
  char *v35;
  id v36;
  NSString v37;
  __n128 v38;
  __n128 v39;
  uint64_t v41;
  unint64_t v42;
  void *ObjCClassFromMetadata;
  unint64_t v44;
  Class isa;
  id v46;
  id v47;
  __n128 v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  id aBlock[5];
  uint64_t v57;
  __int128 v58;

  sub_100005574(&qword_1004991A0);
  __chkstk_darwin();
  v3 = (char *)&v49 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for URL(0);
  v54 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin();
  v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v50 = (char *)&v49 - v6;
  if (qword_1004988F8 != -1)
    swift_once(&qword_1004988F8, sub_100241F44);
  v7 = off_100499838;
  v8 = *a1;
  v9 = a1[1];
  v55 = a1;
  v58 = xmmword_100395320;
  v10 = (void *)*((_QWORD *)off_100499838 + 3);
  v11 = (_QWORD *)swift_allocObject((char *)&_sMp.AssociatedTypeNames + 3, 48, 7);
  v11[2] = &v58;
  v11[3] = v7;
  v53 = v8;
  v11[4] = v8;
  v11[5] = v9;
  v12 = swift_allocObject(&unk_10045B510, 32, 7);
  *(_QWORD *)(v12 + 16) = sub_100242E88;
  *(_QWORD *)(v12 + 24) = v11;
  aBlock[4] = sub_100009BB0;
  v57 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100009BD0;
  aBlock[3] = &unk_10045B528;
  v13 = _Block_copy(aBlock);
  v14 = v57;
  v15 = v10;
  swift_retain(v7);
  swift_bridgeObjectRetain();
  swift_retain(v12);
  swift_release(v14);
  dispatch_sync(v15, v13);

  _Block_release(v13);
  LOBYTE(v13) = swift_isEscapingClosureAtFileLocation(v12, "", 129, 53, 35, 1, v16);
  swift_release(v12);
  if ((v13 & 1) != 0)
    __break(1u);
  v17 = v58;
  swift_release(v11);
  if (*((_QWORD *)&v17 + 1) >> 60 == 15)
  {
    v18 = v55;
    v19 = (id)v55[2];
    v20 = String._bridgeToObjectiveC()();
    v21 = String._bridgeToObjectiveC()();
    v22 = objc_msgSend(v19, "URLForResource:withExtension:", v20, v21);

    if (v22)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v22);

      v23 = v54;
      v24 = *(void (**)(char *, char *, uint64_t))(v54 + 32);
      v25 = v52;
      v24(v3, v5, v52);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v3, 0, 1, v25);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v3, 1, v25) != 1)
      {
        v26 = v50;
        v24(v50, v3, v25);
        v27 = v51;
        v28 = Data.init(contentsOf:options:)(v26, 0);
        if (v27)
        {

          sub_100242EBC(v18);
          (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v25);
        }
        else
        {
          v41 = v28;
          v42 = v29;
          sub_100241F80(v28, v29, v53, v9);
          ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
          v44 = v42;
          isa = Data._bridgeToObjectiveC()().super.isa;
          aBlock[0] = 0;
          v3 = (char *)objc_msgSend(ObjCClassFromMetadata, "packageWithData:type:options:error:", isa, kCAPackageTypeArchive, 0, aBlock);

          v46 = aBlock[0];
          if (v3)
          {
            v47 = aBlock[0];
          }
          else
          {
            v3 = (char *)aBlock[0];
            _convertNSErrorToError(_:)(v46);

            swift_willThrow(v48);
          }

          sub_1000067E8(v41, v44);
          sub_100242EBC(v18);
          (*(void (**)(char *, uint64_t))(v54 + 8))(v50, v25);
        }
        return v3;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56))(v3, 1, 1, v52);
    }
    sub_100236720((uint64_t)v3);
    static String._unconditionallyBridgeFromObjectiveC(_:)(NSURLErrorDomain);
    v3 = v35;
    v36 = objc_allocWithZone((Class)NSError);
    v37 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    objc_msgSend(v36, "initWithDomain:code:userInfo:", v37, -1002, 0);

    swift_willThrow(v38);
    sub_100242EBC(v18);

    return v3;
  }
  v30 = (void *)swift_getObjCClassFromMetadata();
  v31 = Data._bridgeToObjectiveC()().super.isa;
  aBlock[0] = 0;
  v3 = (char *)objc_msgSend(v30, "packageWithData:type:options:error:", v31, kCAPackageTypeArchive, 0, aBlock);

  v32 = v55;
  v33 = aBlock[0];
  if (v3)
  {
    v34 = aBlock[0];
  }
  else
  {
    v3 = (char *)aBlock[0];
    _convertNSErrorToError(_:)(v33);

    swift_willThrow(v39);
  }
  sub_100242EBC(v32);
  sub_1000067D4(v17, *((unint64_t *)&v17 + 1));
  return v3;
}

id static CAPackageDefinition.play.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_100242D0C(0x7375615079616C50, 0xED0000706F745365, (uint64_t)&off_100459A30, a1);
}

id static CAPackageDefinition.pause.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_100242D0C(0x7375615079616C50, 0xED0000706F745365, (uint64_t)&off_100459A60, a1);
}

id static CAPackageDefinition.stop.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_100242D0C(0x7375615079616C50, 0xED0000706F745365, (uint64_t)&off_100459A90, a1);
}

id static CAPackageDefinition.skipForward.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_100242D0C(0x4264726177726F46, 0xEF647261776B6361, (uint64_t)&off_100459AC0, a1);
}

id static CAPackageDefinition.skipBackward.getter@<X0>(uint64_t a1@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  id v6;
  CGAffineTransform v7;

  if (qword_100498860 != -1)
    swift_once(&qword_100498860, sub_100232E30);
  v6 = (id)qword_1004A2F90;
  CGAffineTransformMakeScale(&v7, -1.0, 1.0);
  v2 = *(_OWORD *)&v7.a;
  v3 = *(_OWORD *)&v7.c;
  v4 = *(_OWORD *)&v7.tx;
  *(_QWORD *)a1 = 0x4264726177726F46;
  *(_QWORD *)(a1 + 8) = 0xEF647261776B6361;
  *(_QWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = v2;
  *(_OWORD *)(a1 + 40) = v3;
  *(_OWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 72) = &off_100459B20;
  return v6;
}

id static CAPackageDefinition.favorite.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_100242D0C(0x657469726F766146, 0xE800000000000000, (uint64_t)_swiftEmptyArrayStorage, a1);
}

id static CAPackageDefinition.favoriteDark.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_100242D0C(0x657469726F766146, 0xEC0000006B726144, (uint64_t)_swiftEmptyArrayStorage, a1);
}

id static CAPackageDefinition.favoriteHighContrastDark.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_100242D0C(0xD000000000000018, 0x80000001003B7CE0, (uint64_t)_swiftEmptyArrayStorage, a1);
}

id static CAPackageDefinition.favoriteHighContrastLight.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_100242D0C(0xD000000000000019, 0x80000001003B7D00, (uint64_t)_swiftEmptyArrayStorage, a1);
}

id sub_100242D0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  void *v8;

  if (qword_100498860 != -1)
    swift_once(&qword_100498860, sub_100232E30);
  v8 = (void *)qword_1004A2F90;
  *a4 = a1;
  a4[1] = a2;
  a4[2] = v8;
  a4[3] = 0x3FF0000000000000;
  a4[4] = 0;
  a4[5] = 0;
  a4[6] = 0x3FF0000000000000;
  a4[7] = 0;
  a4[8] = 0;
  a4[9] = a3;
  return v8;
}

uint64_t _s11MusicCoreUI19CAPackageDefinitionV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[3];
  _OWORD v12[3];

  v4 = *a1;
  v5 = a1[1];
  v6 = *(_QWORD *)(a2 + 8);
  v7 = v4 == *(_QWORD *)a2 && v5 == v6;
  if (!v7 && (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v6, 0) & 1) == 0)
    return 0;
  sub_1000087DC(0, (unint64_t *)&qword_10049A0D0, NSObject_ptr);
  if ((static NSObject.== infix(_:_:)(a1[2], *(_QWORD *)(a2 + 16)) & 1) == 0)
    return 0;
  v8 = *(_OWORD *)(a1 + 5);
  v12[0] = *(_OWORD *)(a1 + 3);
  v12[1] = v8;
  v12[2] = *(_OWORD *)(a1 + 7);
  v9 = *(_OWORD *)(a2 + 40);
  v11[0] = *(_OWORD *)(a2 + 24);
  v11[1] = v9;
  v11[2] = *(_OWORD *)(a2 + 56);
  if ((static CGAffineTransform.== infix(_:_:)(v12, v11) & 1) != 0)
    return sub_100252A34((_QWORD *)a1[9], *(_QWORD **)(a2 + 72));
  else
    return 0;
}

uint64_t sub_100242E5C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100242E88()
{
  uint64_t v0;

  return sub_100242264(*(uint64_t **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_100242E94()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100242EA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100242EB4(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

_QWORD *sub_100242EBC(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  v2 = a1[1];
  v3 = (void *)a1[2];
  swift_bridgeObjectRelease(a1[9]);

  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t destroy for CAPackageDefinition(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
}

uint64_t initializeWithCopy for CAPackageDefinition(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  v5 = v4;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CAPackageDefinition(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  v5 = (void *)a2[2];
  v6 = (void *)a1[2];
  a1[2] = v5;
  v7 = v5;

  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  v8 = a2[9];
  v9 = a1[9];
  a1[9] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for CAPackageDefinition(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for CAPackageDefinition(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease(v5);
  return a1;
}

ValueMetadata *type metadata accessor for CAPackageDefinition()
{
  return &type metadata for CAPackageDefinition;
}

uint64_t _s16PackageDataCacheCMa()
{
  return objc_opt_self(_TtCE11MusicCoreUICSo9CAPackageP33_5B7A704C3FBBA94F30354653B0D2FAF216PackageDataCache);
}

uint64_t sub_1002430F4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease();
  sub_1000067E8(v0[5], v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100243128()
{
  uint64_t v0;

  return sub_1002421A0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

id CoreAnimationPackageView.__allocating_init(definition:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return CoreAnimationPackageView.init(definition:)(a1);
}

id CoreAnimationPackageView.init(definition:)(uint64_t a1)
{
  char *v1;
  char *v3;
  char *v4;
  __int128 v5;
  __int128 v6;
  id v7;
  id v8;
  uint64_t v9;
  objc_super v11;

  swift_getObjectType();
  v3 = &v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateAnimationTimer] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_currentStates] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_package] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateController] = 0;
  v4 = &v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition];
  v5 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v4 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v4 + 3) = v5;
  *((_OWORD *)v4 + 4) = *(_OWORD *)(a1 + 64);
  v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a1;
  *((_OWORD *)v4 + 1) = v6;
  sub_100241EA4(a1);
  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for CoreAnimationPackageView();
  v7 = objc_msgSendSuper2(&v11, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  sub_1002438D4();
  CoreAnimationPackageView.reset()();
  sub_1000087DC(0, &qword_100499968, UITraitCollection_ptr);
  v8 = v7;
  static UITraitCollection.systemTraitsAffectingColorAppearance.getter();
  v9 = UIView.registerForTraitChanges<A>(_:handler:)();
  sub_100242EBC((_QWORD *)a1);
  swift_unknownObjectRelease(v9);
  swift_bridgeObjectRelease();

  return v8;
}

uint64_t type metadata accessor for CoreAnimationPackageView()
{
  return objc_opt_self(_TtC11MusicCoreUI24CoreAnimationPackageView);
}

void sub_100243328(uint64_t *a1)
{
  char *v1;
  char *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  id v11;
  __int128 v12;
  char v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22[24];
  _OWORD v23[3];
  _OWORD v24[3];
  _OWORD v25[3];
  _OWORD v26[4];

  v3 = &v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition];
  swift_beginAccess(&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition], v22, 0, 0);
  v4 = *((_QWORD *)v3 + 1);
  v5 = (void *)*((_QWORD *)v3 + 2);
  v20 = *(_OWORD *)(v3 + 40);
  v21 = *(_OWORD *)(v3 + 24);
  v19 = *(_OWORD *)(v3 + 56);
  v6 = (_QWORD *)*((_QWORD *)v3 + 9);
  v7 = *a1;
  v8 = a1[1];
  v9 = *(_QWORD *)v3 == *a1 && v4 == v8;
  if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v3, v4, *a1, a1[1], 0) & 1) != 0)
  {
    sub_1000087DC(0, (unint64_t *)&qword_10049A0D0, NSObject_ptr);
    v10 = a1[2];
    swift_bridgeObjectRetain();
    v11 = v5;
    swift_bridgeObjectRetain();
    if ((static NSObject.== infix(_:_:)(v11, v10) & 1) != 0
      && (v26[0] = v21,
          v26[1] = v20,
          v26[2] = v19,
          v12 = *(_OWORD *)(a1 + 5),
          v24[0] = *(_OWORD *)(a1 + 3),
          v24[1] = v12,
          v24[2] = *(_OWORD *)(a1 + 7),
          (static CGAffineTransform.== infix(_:_:)(v26, v24) & 1) != 0))
    {
      v13 = sub_100252A34(v6, (_QWORD *)a1[9]);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      if ((v13 & 1) != 0)
        return;
    }
    else
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
    }
  }
  v14 = *((_QWORD *)v3 + 1);
  v15 = *(_QWORD *)v3 == v7 && v14 == v8;
  if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v3, v14, v7, v8, 0) & 1) == 0)
    sub_1002438D4();
  v16 = *(_OWORD *)(v3 + 40);
  v25[0] = *(_OWORD *)(v3 + 24);
  v17 = *(_OWORD *)(v3 + 56);
  v25[1] = v16;
  v25[2] = v17;
  v18 = *(_OWORD *)(a1 + 5);
  v23[0] = *(_OWORD *)(a1 + 3);
  v23[1] = v18;
  v23[2] = *(_OWORD *)(a1 + 7);
  if ((static CGAffineTransform.== infix(_:_:)(v25, v23) & 1) == 0)
    objc_msgSend(v1, "setNeedsLayout");
  CoreAnimationPackageView.reset()();
}

uint64_t CoreAnimationPackageView.definition.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  _BYTE v9[24];

  v3 = v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition;
  swift_beginAccess(v3, v9, 0, 0);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(void **)(v3 + 16);
  v6 = *(_QWORD *)(v3 + 72);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v3 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v3 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v3 + 56);
  *(_QWORD *)(a1 + 72) = v6;
  swift_bridgeObjectRetain();
  v7 = v5;
  return swift_bridgeObjectRetain();
}

_QWORD *CoreAnimationPackageView.definition.setter(uint64_t a1)
{
  uint64_t v1;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  _BYTE v10[24];
  _OWORD v11[5];

  v3 = (_OWORD *)(v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition);
  swift_beginAccess(v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition, v10, 1, 0);
  v4 = v3[1];
  v5 = v3[3];
  v11[2] = v3[2];
  v11[3] = v5;
  v11[4] = v3[4];
  v11[0] = *v3;
  v11[1] = v4;
  v6 = (void *)*((_QWORD *)v3 + 2);
  v7 = *(_OWORD *)(a1 + 16);
  *v3 = *(_OWORD *)a1;
  v3[1] = v7;
  v8 = *(_OWORD *)(a1 + 64);
  v3[3] = *(_OWORD *)(a1 + 48);
  v3[4] = v8;
  v3[2] = *(_OWORD *)(a1 + 32);
  sub_100241EA4((uint64_t)v11);
  sub_100241EA4(a1);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_100243328((uint64_t *)v11);
  sub_100242EBC((_QWORD *)a1);
  return sub_100242EBC(v11);
}

void (*CoreAnimationPackageView.definition.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;

  v3 = (char *)malloc(0x118uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition;
  *((_QWORD *)v3 + 33) = v1;
  *((_QWORD *)v3 + 34) = v4;
  v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3 + 240, 1, 0);
  v6 = *(_QWORD *)(v5 + 8);
  v7 = *(void **)(v5 + 16);
  *((_QWORD *)v3 + 20) = *(_QWORD *)v5;
  *((_QWORD *)v3 + 21) = v6;
  v3 += 160;
  v8 = *(_QWORD *)(v5 + 72);
  *((_QWORD *)v3 + 2) = v7;
  *(_OWORD *)(v3 + 24) = *(_OWORD *)(v5 + 24);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(v5 + 40);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(v5 + 56);
  *((_QWORD *)v3 + 9) = v8;
  swift_bridgeObjectRetain();
  v9 = v7;
  swift_bridgeObjectRetain();
  return sub_10024371C;
}

void sub_10024371C(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  void *v24;
  id v25;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 160);
  v4 = *(_QWORD *)(*a1 + 168);
  v5 = *(void **)(*a1 + 176);
  v7 = *(_QWORD *)(*a1 + 184);
  v6 = *(_QWORD *)(*a1 + 192);
  v9 = *(_QWORD *)(*a1 + 200);
  v8 = *(_QWORD *)(*a1 + 208);
  v11 = *(_QWORD *)(*a1 + 216);
  v10 = *(_QWORD *)(*a1 + 224);
  v12 = *(_QWORD *)(*a1 + 232);
  v13 = *(_QWORD *)(*a1 + 264) + *(_QWORD *)(*a1 + 272);
  if ((a2 & 1) != 0)
  {
    *(_OWORD *)v2 = *(_OWORD *)v13;
    v14 = *(_OWORD *)(v13 + 16);
    v15 = *(_OWORD *)(v13 + 32);
    v16 = *(_OWORD *)(v13 + 64);
    *(_OWORD *)(v2 + 48) = *(_OWORD *)(v13 + 48);
    *(_OWORD *)(v2 + 64) = v16;
    *(_OWORD *)(v2 + 16) = v14;
    *(_OWORD *)(v2 + 32) = v15;
    v17 = *(void **)(v13 + 16);
    *(_QWORD *)v13 = v3;
    *(_QWORD *)(v13 + 8) = v4;
    *(_QWORD *)(v13 + 16) = v5;
    *(_QWORD *)(v13 + 24) = v7;
    *(_QWORD *)(v13 + 32) = v6;
    *(_QWORD *)(v13 + 40) = v9;
    *(_QWORD *)(v13 + 48) = v8;
    *(_QWORD *)(v13 + 56) = v11;
    *(_QWORD *)(v13 + 64) = v10;
    *(_QWORD *)(v13 + 72) = v12;
    swift_bridgeObjectRetain_n(v4, 2);
    v18 = v5;
    swift_bridgeObjectRetain_n(v12, 2);
    v19 = v18;
    sub_100241EA4(v2);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    sub_100243328((uint64_t *)v2);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    sub_100242EBC((_QWORD *)v2);
    v20 = *(void **)(v2 + 176);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  else
  {
    *(_OWORD *)(v2 + 80) = *(_OWORD *)v13;
    v21 = *(_OWORD *)(v13 + 16);
    v22 = *(_OWORD *)(v13 + 32);
    v23 = *(_OWORD *)(v13 + 64);
    *(_OWORD *)(v2 + 128) = *(_OWORD *)(v13 + 48);
    *(_OWORD *)(v2 + 144) = v23;
    *(_OWORD *)(v2 + 96) = v21;
    *(_OWORD *)(v2 + 112) = v22;
    v24 = *(void **)(v13 + 16);
    *(_QWORD *)v13 = v3;
    *(_QWORD *)(v13 + 8) = v4;
    *(_QWORD *)(v13 + 16) = v5;
    *(_QWORD *)(v13 + 24) = v7;
    *(_QWORD *)(v13 + 32) = v6;
    *(_QWORD *)(v13 + 40) = v9;
    *(_QWORD *)(v13 + 48) = v8;
    *(_QWORD *)(v13 + 56) = v11;
    *(_QWORD *)(v13 + 64) = v10;
    *(_QWORD *)(v13 + 72) = v12;
    sub_100241EA4(v2 + 80);
    swift_bridgeObjectRetain();
    v25 = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    sub_100243328((uint64_t *)(v2 + 80));
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    sub_100242EBC((_QWORD *)(v2 + 80));
  }
  free((void *)v2);
}

void sub_1002438D4()
{
  char *v0;
  char *v1;
  char *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  __int128 v19;
  id v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void *v26;
  char *v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  unint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  _QWORD v47[3];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52[2];
  char v53[24];
  _OWORD v54[5];

  v1 = v0;
  sub_1000087DC(0, &qword_1004999C0, CAPackage_ptr);
  v2 = &v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition];
  swift_beginAccess(&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition], v53, 0, 0);
  v3 = *((_OWORD *)v2 + 2);
  v4 = *((_OWORD *)v2 + 3);
  v5 = *(_OWORD *)v2;
  v54[1] = *((_OWORD *)v2 + 1);
  v54[2] = v3;
  v6 = *((_OWORD *)v2 + 4);
  v54[3] = v4;
  v54[4] = v6;
  v54[0] = v5;
  sub_100241EA4((uint64_t)v54);
  v7 = CAPackage.init(definition:)((uint64_t *)v54);
  v26 = *(void **)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_package];
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_package] = v7;
  v27 = v7;

  v28 = objc_msgSend(v27, "rootLayer");
  if (v28)
  {
    v29 = *(void **)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer];
    *(_QWORD *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer] = v28;
    v30 = v28;
    objc_msgSend(v29, "removeFromSuperlayer");

    v31 = objc_msgSend(objc_allocWithZone((Class)CAStateController), "initWithLayer:", v30);
    v32 = *(void **)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateController];
    *(_QWORD *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateController] = v31;

    objc_msgSend(v30, "removeFromSuperlayer");
    objc_msgSend(v30, "setGeometryFlipped:", objc_msgSend(v27, "isGeometryFlipped"));
    v33 = objc_msgSend(v1, "layer");
    objc_msgSend(v33, "addSublayer:", v30);

    v34 = objc_msgSend(v1, "layer");
    objc_msgSend(v34, "bounds");
    v36 = v35;
    v38 = v37;
    v40 = v39;
    v42 = v41;

    objc_msgSend(v30, "setPosition:", CGRect.center.getter(v36, v38, v40, v42));
    sub_100244BA4();

  }
  else
  {
    v43 = sub_100245BE4();
    v44 = swift_allocError(&type metadata for CoreAnimationPackageView.Error, v43, 0, 0);
    swift_willThrow(v45);

    if (qword_100498908 != -1)
      swift_once(&qword_100498908, sub_100246198);
    v8 = type metadata accessor for Logger(0, v46);
    sub_1000086B4(v8, (uint64_t)qword_1004A31A0);
    v9 = v1;
    swift_errorRetain(v44);
    v10 = v9;
    v11 = swift_errorRetain(v44);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc(22, -1);
      v15 = swift_slowAlloc(64, -1);
      v52[0] = v15;
      *(_DWORD *)v14 = 136446466;
      v16 = *((_QWORD *)v2 + 1);
      v17 = (void *)*((_QWORD *)v2 + 2);
      v18 = *((_QWORD *)v2 + 9);
      v47[0] = *(_QWORD *)v2;
      v47[1] = v16;
      v47[2] = v17;
      v19 = *(_OWORD *)(v2 + 40);
      v48 = *(_OWORD *)(v2 + 24);
      v49 = v19;
      v50 = *(_OWORD *)(v2 + 56);
      v51 = v18;
      swift_bridgeObjectRetain();
      v20 = v17;
      swift_bridgeObjectRetain();
      v21 = (char *)String.init<A>(describing:)(v47, &type metadata for CAPackageDefinition);
      *(_QWORD *)(v14 + 4) = sub_100249A1C(v21, v22, v52);

      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2082;
      v47[0] = v44;
      swift_errorRetain(v44);
      v23 = sub_100005574(&qword_100499F80);
      v24 = (char *)String.init<A>(describing:)(v47, v23);
      *(_QWORD *)(v14 + 14) = sub_100249A1C(v24, v25, v52);
      swift_bridgeObjectRelease();
      swift_errorRelease(v44);
      swift_errorRelease(v44);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Failed to load CAPackage with definition=%{public}s. Error=%{public}s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

      swift_errorRelease(v44);
    }
    else
    {
      swift_errorRelease(v44);

      swift_errorRelease(v44);
      swift_errorRelease(v44);

    }
  }
}

void sub_100243D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  void **v9;
  void *v10;
  id v11;
  NSString v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  unsigned int v21;
  double v22;
  _BYTE v23[24];

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName);
  swift_beginAccess(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName, v23, 0, 0);
  v6 = v5[1];
  if (v6)
  {
    v7 = *v5;
    if (a2)
    {
      v8 = v7 == a1 && v6 == a2;
      if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v6, a1, a2, 0) & 1) != 0)
        return;
    }
    v9 = (void **)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer);
    v10 = *(void **)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer);
    if (!v10)
      return;
    v11 = v10;
    swift_bridgeObjectRetain();
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    if (!a2)
      return;
    v9 = (void **)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer);
    v13 = *(void **)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer);
    if (!v13)
      return;
    v11 = v13;
    v12 = 0;
  }
  v14 = objc_msgSend(v11, "stateWithName:", v12);

  if (v14)
  {
    v15 = *(void **)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateController);
    if (v15)
    {
      v16 = *v9;
      v17 = (void *)objc_opt_self(UIView);
      v18 = v16;
      v19 = v15;
      v20 = v14;
      v21 = objc_msgSend(v17, "areAnimationsEnabled");
      LODWORD(v22) = 0;
      if (v21)
        *(float *)&v22 = 1.0;
      objc_msgSend(v19, "setState:ofLayer:transitionSpeed:", v20, v18, v22);

    }
  }
}

uint64_t CoreAnimationPackageView.stateName.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName);
  swift_beginAccess(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName, v4, 0, 0);
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t CoreAnimationPackageView.stateName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName);
  swift_beginAccess(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName, v9, 1, 0);
  v6 = *v5;
  v7 = v5[1];
  *v5 = a1;
  v5[1] = a2;
  sub_100243D3C(v6, v7);
  return swift_bridgeObjectRelease();
}

void (*CoreAnimationPackageView.stateName.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName;
  v3[5] = v1;
  v3[6] = v4;
  v5 = (_QWORD *)(v1 + v4);
  swift_beginAccess(v1 + v4, v3, 1, 0);
  v6 = v5[1];
  v3[3] = *v5;
  v3[4] = v6;
  swift_bridgeObjectRetain();
  return sub_10024401C;
}

void sub_10024401C(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v7 = (uint64_t *)(v5 + v4);
  v9 = *v7;
  v8 = v7[1];
  *v7 = v3;
  v7[1] = v6;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    sub_100243D3C(v9, v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_100243D3C(v9, v8);
  }
  swift_bridgeObjectRelease();
  free(v2);
}

void *CoreAnimationPackageView.foregroundColor.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;
  _BYTE v5[24];

  v1 = (void **)(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor);
  swift_beginAccess(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor, v5, 0, 0);
  v2 = *v1;
  v3 = v2;
  return v2;
}

void CoreAnimationPackageView.foregroundColor.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  Class v5;
  void *v6;
  id v7;
  Class isa;
  _BYTE v9[24];

  v3 = (void **)(v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor);
  swift_beginAccess(v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor, v9, 1, 0);
  v4 = *v3;
  *v3 = a1;
  v5 = a1;

  if (*v3)
  {
    sub_100244BA4();
  }
  else
  {
    v6 = *(void **)(v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer);
    if (v6)
    {
      v7 = v6;
      isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v7, "setFilters:", isa);

      v5 = isa;
    }
  }

}

void (*CoreAnimationPackageView.foregroundColor.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  return sub_100244208;
}

void sub_100244208(_QWORD *a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  id v6;
  Class isa;

  v3 = (_QWORD *)*a1;
  swift_endAccess(*a1);
  if ((a2 & 1) == 0)
  {
    v4 = v3[3];
    if (*(_QWORD *)(v4 + v3[4]))
    {
      sub_100244BA4();
    }
    else
    {
      v5 = *(void **)(v4 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer);
      if (v5)
      {
        v6 = v5;
        isa = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v6, "setFilters:", isa);

      }
    }
  }
  free(v3);
}

Swift::Void __swiftcall CoreAnimationPackageView.reset()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _BYTE v19[24];

  v1 = v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition;
  swift_beginAccess(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition, v19, 0, 0);
  v2 = *(_QWORD **)(v1 + 72);
  if (v2[2])
  {
    v4 = v2[4];
    v3 = v2[5];
    swift_bridgeObjectRetain();
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = (uint64_t *)(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName);
  swift_beginAccess(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName, &v18, 1, 0);
  v6 = *v5;
  v7 = v5[1];
  *v5 = v4;
  v5[1] = v3;
  sub_100243D3C(v6, v7);
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(v1 + 72);
  v9 = *(_QWORD *)(v8 + 16);
  v10 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v11 = swift_bridgeObjectRetain();
  v13 = swift_unknownObjectRetain_n(v11, 2, v12);
  v14 = (_QWORD *)swift_dynamicCastClass(v13, v10);
  if (!v14)
  {
    swift_bridgeObjectRelease();
    v14 = _swiftEmptyArrayStorage;
  }
  v15 = v14[2];
  swift_release(v14);
  if (v15 == v9 - (v9 != 0))
  {
    v16 = (_QWORD *)swift_dynamicCastClass(v8, v10);
    if (!v16)
    {
      swift_bridgeObjectRelease();
      v16 = _swiftEmptyArrayStorage;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_100244FB8(v8, v8 + 32, v9 != 0, (2 * v9) | 1);
    v16 = v17;
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_currentStates) = v16;
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall CoreAnimationPackageView.set(stateName:forSublayer:)(Swift::String stateName, Swift::String forSublayer)
{
  uint64_t v2;
  void *v3;
  void *object;
  uint64_t countAndFlagsBits;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  NSString v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  unsigned int v16;
  double v17;
  id v18;

  v3 = *(void **)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer);
  if (v3)
  {
    object = forSublayer._object;
    countAndFlagsBits = forSublayer._countAndFlagsBits;
    v6 = objc_msgSend(v3, "sublayers");
    if (v6)
    {
      v7 = v6;
      v8 = sub_1000087DC(0, &qword_100499970, CALayer_ptr);
      v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

      swift_bridgeObjectRetain();
      v18 = sub_100245354(v9, countAndFlagsBits, (uint64_t)object);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v18)
      {
        v10 = String._bridgeToObjectiveC()();
        v11 = objc_msgSend(v18, "stateWithName:", v10);

        if (v11)
        {
          v12 = *(void **)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateController);
          if (v12)
          {
            v13 = (void *)objc_opt_self(UIView);
            v14 = v12;
            v15 = v11;
            v11 = v18;
            v16 = objc_msgSend(v13, "areAnimationsEnabled");
            LODWORD(v17) = 0;
            if (v16)
              *(float *)&v17 = 1.0;
            objc_msgSend(v14, "setState:ofLayer:transitionSpeed:", v15, v11, v17, v18);

          }
        }

      }
    }
  }
}

Swift::Void __swiftcall CoreAnimationPackageView.advanceState()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  v1 = v0;
  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_currentStates);
  v3 = *v2;
  if (*(_QWORD *)(*v2 + 16)
    || (v4 = v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition,
        swift_beginAccess(v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition, &v10, 0, 0),
        *v2 = *(_QWORD *)(v4 + 72),
        swift_bridgeObjectRetain(),
        swift_bridgeObjectRelease(),
        v3 = *v2,
        *(_QWORD *)(*v2 + 16)))
  {
    v6 = *(_QWORD *)(v3 + 32);
    v5 = *(_QWORD *)(v3 + 40);
    swift_bridgeObjectRetain();
    sub_1002454E4(0, 1);
    v7 = (uint64_t *)(v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName);
    swift_beginAccess(v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName, v11, 1, 0);
    v8 = *v7;
    v9 = v7[1];
    *v7 = v6;
    v7[1] = v5;
    sub_100243D3C(v8, v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall CoreAnimationPackageView.startCyclingThroughStates(with:)(Swift::Double with)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  double v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  _QWORD v12[5];
  uint64_t v13;

  v3 = OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateAnimationTimer;
  v4 = *(void **)(v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateAnimationTimer);
  if (!v4 || (objc_msgSend(v4, "timeInterval"), v5 != with))
  {
    v6 = (void *)objc_opt_self(NSTimer);
    v7 = swift_allocObject(&unk_10045B648, 24, 7);
    swift_unknownObjectWeakInit(v7 + 16);
    v12[4] = sub_10024561C;
    v13 = v7;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    v12[2] = sub_100093320;
    v12[3] = &unk_10045B660;
    v8 = _Block_copy(v12);
    swift_release(v13);
    v9 = objc_msgSend(v6, "scheduledTimerWithTimeInterval:repeats:block:", 1, v8, with);
    _Block_release(v8);
    v10 = *(void **)(v1 + v3);
    *(_QWORD *)(v1 + v3) = v9;
    v11 = v9;
    objc_msgSend(v10, "invalidate");

  }
}

void sub_1002447F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = (void *)Strong;
    CoreAnimationPackageView.advanceState()();

  }
}

Swift::Void __swiftcall CoreAnimationPackageView.stopCyclingThroughStates()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;

  v1 = OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateAnimationTimer;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateAnimationTimer))
  {
    CoreAnimationPackageView.reset()();
    v2 = *(void **)(v0 + v1);
    v3 = v2;
    *(_QWORD *)(v0 + v1) = 0;
    objc_msgSend(v2, "invalidate");

  }
}

Swift::Void __swiftcall CoreAnimationPackageView.layoutSubviews()()
{
  char *v0;
  void *v1;
  id v2;
  id v3;
  double v4;
  CGFloat v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double Width;
  double v20;
  double v21;
  double Height;
  double v23;
  CGFloat m21;
  CGFloat m22;
  char *v26;
  __int128 v27;
  id v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  CGFloat v37;
  CGFloat rect;
  __int128 v39;
  __int128 v40;
  CATransform3D t1;
  CGAffineTransform v42;
  CGAffineTransform t2;
  char v44[24];
  objc_super v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;

  v45.receiver = v0;
  v45.super_class = (Class)type metadata accessor for CoreAnimationPackageView();
  objc_msgSendSuper2(&v45, "layoutSubviews");
  v1 = *(void **)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer];
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v0, "layer");
    objc_msgSend(v3, "bounds");
    v5 = v4;
    v7 = v6;
    v9 = v8;
    v11 = v10;

    objc_msgSend(v2, "bounds");
    v37 = v12;
    v14 = v13;
    v16 = v15;
    v18 = v17;
    v46.origin.x = v5;
    v46.origin.y = v7;
    v46.size.width = v9;
    v46.size.height = v11;
    Width = CGRectGetWidth(v46);
    v47.origin.x = v5;
    v47.origin.y = v7;
    v47.size.width = v9;
    rect = v11;
    v47.size.height = v11;
    v20 = Width / CGRectGetHeight(v47);
    v48.origin.x = v37;
    v48.origin.y = v14;
    v48.size.width = v16;
    v48.size.height = v18;
    v21 = CGRectGetWidth(v48);
    v49.origin.x = v37;
    v49.origin.y = v14;
    v49.size.width = v16;
    v49.size.height = v18;
    if (v20 >= v21 / CGRectGetHeight(v49))
    {
      v52.origin.x = v5;
      v52.origin.y = v7;
      v52.size.width = v9;
      v52.size.height = rect;
      Height = CGRectGetHeight(v52);
      v53.origin.x = v37;
      v53.origin.y = v14;
      v53.size.width = v16;
      v53.size.height = v18;
      v23 = CGRectGetHeight(v53);
    }
    else
    {
      v50.origin.x = v5;
      v50.origin.y = v7;
      v50.size.width = v9;
      v50.size.height = rect;
      Height = CGRectGetWidth(v50);
      v51.origin.x = v37;
      v51.origin.y = v14;
      v51.size.width = v16;
      v51.size.height = v18;
      v23 = CGRectGetWidth(v51);
    }
    CGAffineTransformMakeScale((CGAffineTransform *)&t1, Height / v23, Height / v23);
    v39 = *(_OWORD *)&t1.m13;
    v40 = *(_OWORD *)&t1.m11;
    m21 = t1.m21;
    m22 = t1.m22;
    v26 = &v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition];
    swift_beginAccess(&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition], v44, 0, 0);
    *(_OWORD *)&t1.m11 = v40;
    *(_OWORD *)&t1.m13 = v39;
    t1.m21 = m21;
    t1.m22 = m22;
    v27 = *(_OWORD *)(v26 + 40);
    *(_OWORD *)&t2.a = *(_OWORD *)(v26 + 24);
    *(_OWORD *)&t2.c = v27;
    *(_OWORD *)&t2.tx = *(_OWORD *)(v26 + 56);
    CGAffineTransformConcat(&v42, (CGAffineTransform *)&t1, &t2);
    t2 = v42;
    CATransform3DMakeAffineTransform(&t1, &t2);
    objc_msgSend(v2, "setTransform:", &t1);
    v28 = objc_msgSend(v0, "layer");
    objc_msgSend(v28, "bounds");
    v30 = v29;
    v32 = v31;
    v34 = v33;
    v36 = v35;

    objc_msgSend(v2, "setPosition:", CGRect.center.getter(v30, v32, v34, v36));
  }
}

id sub_100244BA4()
{
  char *v0;
  void *v1;
  void **v2;
  double v3;
  void *v4;
  id v5;
  Class v6;
  NSString v7;
  id v8;
  Class isa;
  Class v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  Class v19;
  void *v20;
  _BYTE v22[24];

  v1 = (void *)objc_opt_self(CATransaction);
  objc_msgSend(v1, "begin");
  objc_msgSend(v1, "setDisableActions:", 1);
  v2 = (void **)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor];
  *(_QWORD *)&v3 = swift_beginAccess(&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor], v22, 0, 0).n128_u64[0];
  v4 = *v2;
  if (*v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(kCAFilterColorMonochrome);
    v5 = objc_allocWithZone((Class)CAFilter);
    v6 = v4;
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v8 = objc_msgSend(v5, "initWithType:", v7);

    isa = Int._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v8, "setValue:forKey:", isa, kCAFilterInputBias);

    v10 = Int._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v8, "setValue:forKey:", v10, kCAFilterInputAmount);

    v11 = objc_msgSend(v0, "traitCollection");
    v12 = -[objc_class resolvedColorWithTraitCollection:](v6, "resolvedColorWithTraitCollection:", v11);

    v13 = objc_msgSend(v12, "CGColor");
    objc_msgSend(v8, "setValue:forKey:", v13, kCAFilterInputColor);

    v14 = *(void **)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer];
    if (v14)
    {
      v15 = sub_100005574(&qword_1004999B0);
      v16 = swift_allocObject(v15, 64, 7);
      *(_OWORD *)(v16 + 16) = xmmword_100384A80;
      *(_QWORD *)(v16 + 56) = sub_1000087DC(0, (unint64_t *)&qword_1004999B8, CAFilter_ptr);
      *(_QWORD *)(v16 + 32) = v8;
      v17 = v14;
      v18 = v8;
      v19 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v17, "setFilters:", v19);

    }
    goto LABEL_6;
  }
  v20 = *(void **)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer];
  if (v20)
  {
    v8 = v20;
    v6 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v8, "setFilters:", v6);
LABEL_6:

  }
  return objc_msgSend(v1, "commit", v3);
}

void CoreAnimationPackageView.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer("MusicCoreUI.CoreAnimationPackageView", 36, "init(frame:)", 12, 0);
  __break(1u);
}

id CoreAnimationPackageView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CoreAnimationPackageView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_100244FB8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_11:
    __break(1u);
    return;
  }
  if (v5)
  {
    if (v5 <= 0)
    {
      v9 = _swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_7:
        swift_arrayInitWithCopy(v9 + 4, a2 + 16 * a3, v5, &type metadata for String);
        return;
      }
    }
    else
    {
      v8 = sub_100005574(&qword_100499F90);
      v9 = (_QWORD *)swift_allocObject(v8, 16 * v5 + 32, 7);
      v10 = j__malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 17;
      v9[2] = v5;
      v9[3] = 2 * (v11 >> 4);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
    goto LABEL_11;
  }
}

void sub_100245084(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_14;
  if (v5)
  {
    if (v5 <= 0)
    {
      v13 = _swiftEmptyArrayStorage;
      if (v4 != a3)
        goto LABEL_10;
    }
    else
    {
      v8 = sub_100005574(&qword_1004999A8);
      v9 = *(_QWORD *)(type metadata accessor for PlaylistCurators.Curator(0) - 8);
      v10 = *(_QWORD *)(v9 + 72);
      v11 = *(unsigned __int8 *)(v9 + 80);
      v12 = (v11 + 32) & ~v11;
      v13 = (_QWORD *)swift_allocObject(v8, v12 + v10 * v5, v11 | 7);
      v14 = j__malloc_size(v13);
      if (!v10)
      {
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
        return;
      }
      if (v14 - v12 == 0x8000000000000000 && v10 == -1)
        goto LABEL_16;
      v13[2] = v5;
      v13[3] = 2 * ((uint64_t)(v14 - v12) / v10);
      if (v4 != a3)
      {
LABEL_10:
        v16 = type metadata accessor for PlaylistCurators.Curator(0);
        swift_arrayInitWithCopy((char *)v13+ ((*(unsigned __int8 *)(*(_QWORD *)(v16 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v16 - 8) + 80)), a2 + *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * a3, v5, v16);
        return;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
}

_QWORD *sub_1002451A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100005574(&qword_1004999A0);
  v4 = swift_allocObject(v3, v1 + 32, 7);
  v5 = j__malloc_size((const void *)v4);
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = 2 * v5 - 64;
  v6 = sub_1002236E8(&v9, (_BYTE *)(v4 + 32), v1, a1);
  v7 = v9;
  swift_bridgeObjectRetain();
  sub_1000F38AC(v7);
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return (_QWORD *)v4;
}

id sub_100245278()
{
  return sub_100244BA4();
}

void sub_100245298()
{
  char *v0;
  char *v1;

  v1 = &v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateAnimationTimer] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_currentStates] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_package] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateController] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001003B2590, "MusicCoreUI/CoreAnimationPackageView.swift", 42, 2, 30, 0);
  __break(1u);
}

void *sub_100245354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((unint64_t)a1 >> 62)
    goto LABEL_20;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v5)
  {
    do
    {
      v6 = 4;
      while (1)
      {
        v7 = (a1 & 0xC000000000000001) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, a1)
           : *(id *)(a1 + 8 * v6);
        v8 = v7;
        v9 = v6 - 3;
        if (__OFADD__(v6 - 4, 1))
          break;
        v10 = objc_msgSend(v7, "name");
        if (v10)
        {
          v11 = v10;
          v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
          v14 = v13;

          if (v12 == a2 && v14 == a3)
          {
            swift_bridgeObjectRelease(a1);
            v17 = a3;
            goto LABEL_18;
          }
          v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, a2, a3, 0);
          swift_bridgeObjectRelease(v14);
          if ((v16 & 1) != 0)
          {
            v17 = a1;
LABEL_18:
            swift_bridgeObjectRelease(v17);
            return v8;
          }
        }

        ++v6;
        if (v9 == v5)
          goto LABEL_24;
      }
      __break(1u);
LABEL_20:
      v18 = a3;
      if (a1 < 0)
        v19 = a1;
      else
        v19 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v20 = _CocoaArrayWrapper.endIndex.getter(v19);
      a3 = v18;
      v5 = v20;
    }
    while (v20);
  }
LABEL_24:
  swift_bridgeObjectRelease(a1);
  return 0;
}

uint64_t sub_1002454E4(uint64_t result, int64_t a2)
{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  int64_t v9;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *((_QWORD *)v4 + 3) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_100258074(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = swift_arrayDestroy(&v4[16 * v6 + 32], v7, &type metadata for String);
  if (!v7)
    goto LABEL_19;
  v12 = *((_QWORD *)v4 + 2);
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_25;
  v15 = &v4[16 * a2 + 32];
  if (v6 != a2 || &v4[16 * v6 + 32] >= &v15[16 * v14])
    result = (uint64_t)memmove(&v4[16 * v6 + 32], v15, 16 * v14);
  v16 = *((_QWORD *)v4 + 2);
  v13 = __OFADD__(v16, v8);
  v17 = v16 - v7;
  if (!v13)
  {
    *((_QWORD *)v4 + 2) = v17;
LABEL_19:
    *v2 = v4;
    return result;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1002455F8()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10024561C(uint64_t a1)
{
  uint64_t v1;

  sub_1002447F0(a1, v1);
}

uint64_t sub_100245624(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100245634(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_10024563C(uint64_t a1, uint64_t a2)
{
  return sub_100245908(a1, a2, (unint64_t *)&qword_10049B080, (unint64_t *)UIViewPropertyAnimator_ptr);
}

uint64_t sub_100245650(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v7 >= a2)
        goto LABEL_4;
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
  if (v5 < 0)
    v23 = v5;
  else
    v23 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter(v23);
  swift_bridgeObjectRelease();
  if (v7 < v2)
    goto LABEL_33;
LABEL_4:
  v5 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v6 = v4 - v2;
  if (__OFSUB__(0, v5))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v7 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = v8 - v5;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_41:
    __break(1u);
LABEL_42:
    if (v7 < 0)
      v25 = v7;
    else
      v25 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter(v25);
    swift_bridgeObjectRelease();
    v7 = *v3;
    goto LABEL_15;
  }
LABEL_36:
  if (v7 < 0)
    v24 = v7;
  else
    v24 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v8 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease();
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
    goto LABEL_41;
LABEL_8:
  v7 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *v3 = v7;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v11 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v8 = 1;
  }
  if ((unint64_t)v7 >> 62)
    goto LABEL_42;
  v12 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain();
  *v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1, v7);
  swift_bridgeObjectRelease();
  v11 = *v3 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v13 = v11 + 32;
  v14 = (char *)(v11 + 32 + 8 * v4);
  v15 = type metadata accessor for SyncedLyricsLineView();
  result = swift_arrayDestroy(v14, v5, v15);
  if (!v6)
    return specialized Array._endMutation()(result);
  v17 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    v19 = v18 - v2;
    if (!__OFSUB__(v18, v2))
      goto LABEL_21;
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (v17 < 0)
    v26 = *v3;
  else
    v26 = v17 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v27 = _CocoaArrayWrapper.endIndex.getter(v26);
  result = swift_bridgeObjectRelease();
  v19 = v27 - v2;
  if (__OFSUB__(v27, v2))
    goto LABEL_51;
LABEL_21:
  v20 = (char *)(v13 + 8 * v2);
  if (v4 != v2 || v14 >= &v20[8 * v19])
    result = (uint64_t)memmove(v14, v20, 8 * v19);
  v2 = *v3;
  if ((unint64_t)*v3 >> 62)
  {
LABEL_52:
    if (v2 < 0)
      v28 = v2;
    else
      v28 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v29 = _CocoaArrayWrapper.endIndex.getter(v28);
    result = swift_bridgeObjectRelease();
    v22 = v29 + v6;
    if (!__OFADD__(v29, v6))
      goto LABEL_26;
    goto LABEL_57;
  }
  v21 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  v22 = v21 + v6;
  if (!__OFADD__(v21, v6))
  {
LABEL_26:
    *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10) = v22;
    return specialized Array._endMutation()(result);
  }
LABEL_57:
  __break(1u);
  return result;
}

uint64_t sub_1002458F4(uint64_t a1, uint64_t a2)
{
  return sub_100245908(a1, a2, (unint64_t *)&qword_10049D970, (unint64_t *)UIView_ptr);
}

uint64_t sub_100245908(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v9 = a4;
    v7 = a3;
    v4 = a2;
    v6 = a1;
    v8 = *v5;
    if (!((unint64_t)*v5 >> 62))
    {
      v11 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v11 >= a2)
        goto LABEL_4;
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
  if (v8 < 0)
    v27 = v8;
  else
    v27 = v8 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v11 = _CocoaArrayWrapper.endIndex.getter(v27);
  swift_bridgeObjectRelease();
  if (v11 < v4)
    goto LABEL_33;
LABEL_4:
  v8 = v4 - v6;
  if (__OFSUB__(v4, v6))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v10 = (unint64_t *)(v6 - v4);
  if (__OFSUB__(0, v8))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v11 = *v5;
  if (!((unint64_t)*v5 >> 62))
  {
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    v13 = v12 - v8;
    if (!__OFADD__(v12, v10))
      goto LABEL_8;
LABEL_41:
    __break(1u);
LABEL_42:
    if (v11 < 0)
      v29 = v11;
    else
      v29 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter(v29);
    swift_bridgeObjectRelease();
    v11 = *v5;
    goto LABEL_15;
  }
LABEL_36:
  if (v11 < 0)
    v28 = v11;
  else
    v28 = v11 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v12 = _CocoaArrayWrapper.endIndex.getter(v28);
  swift_bridgeObjectRelease();
  v13 = (uint64_t)v10 + v12;
  if (__OFADD__(v12, v10))
    goto LABEL_41;
LABEL_8:
  v11 = *v5;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v5);
  *v5 = v11;
  v12 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v11 & 0x8000000000000000) == 0
    && (v11 & 0x4000000000000000) == 0)
  {
    v15 = v11 & 0xFFFFFFFFFFFFFF8;
    if (v13 <= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v12 = 1;
  }
  v34 = v8;
  v8 = (uint64_t)v10;
  v10 = v7;
  v7 = v9;
  if ((unint64_t)v11 >> 62)
    goto LABEL_42;
  v16 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v16 <= v13)
    v16 = v13;
  swift_bridgeObjectRetain();
  *v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v12, v16, 1, v11);
  swift_bridgeObjectRelease();
  v15 = *v5 & 0xFFFFFFFFFFFFFF8;
  v9 = v7;
  v7 = v10;
  v10 = (unint64_t *)v8;
  v8 = v34;
LABEL_18:
  v17 = v15 + 32;
  v18 = (char *)(v15 + 32 + 8 * v6);
  v19 = sub_1000087DC(0, v7, v9);
  result = swift_arrayDestroy(v18, v8, v19);
  if (!v10)
    return specialized Array._endMutation()(result);
  v21 = *v5;
  if (!((unint64_t)*v5 >> 62))
  {
    v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    v23 = v22 - v4;
    if (!__OFSUB__(v22, v4))
      goto LABEL_21;
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (v21 < 0)
    v30 = *v5;
  else
    v30 = v21 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v31 = _CocoaArrayWrapper.endIndex.getter(v30);
  result = swift_bridgeObjectRelease();
  v23 = v31 - v4;
  if (__OFSUB__(v31, v4))
    goto LABEL_51;
LABEL_21:
  v24 = (char *)(v17 + 8 * v4);
  if (v6 != v4 || v18 >= &v24[8 * v23])
    result = (uint64_t)memmove(v18, v24, 8 * v23);
  v4 = *v5;
  if ((unint64_t)*v5 >> 62)
  {
LABEL_52:
    if (v4 < 0)
      v32 = v4;
    else
      v32 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v33 = _CocoaArrayWrapper.endIndex.getter(v32);
    result = swift_bridgeObjectRelease();
    v26 = (char *)v10 + v33;
    if (!__OFADD__(v33, v10))
      goto LABEL_26;
    goto LABEL_57;
  }
  v25 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v26 = (char *)v10 + v25;
  if (!__OFADD__(v25, v10))
  {
LABEL_26:
    *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFF8) + 0x10) = v26;
    return specialized Array._endMutation()(result);
  }
LABEL_57:
  __break(1u);
  return result;
}

unint64_t sub_100245BE4()
{
  unint64_t result;

  result = qword_1004999C8;
  if (!qword_1004999C8)
  {
    result = swift_getWitnessTable(&unk_1003971A8, &type metadata for CoreAnimationPackageView.Error);
    atomic_store(result, (unint64_t *)&qword_1004999C8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CoreAnimationPackageView.Error(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100245C6C + 4 * asc_100397100[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100245C8C + 4 * byte_100397105[v4]))();
}

_BYTE *sub_100245C6C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100245C8C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100245C94(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100245C9C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100245CA4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100245CAC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CoreAnimationPackageView.Error()
{
  return &type metadata for CoreAnimationPackageView.Error;
}

unint64_t sub_100245CCC()
{
  unint64_t result;

  result = qword_1004999D0;
  if (!qword_1004999D0)
  {
    result = swift_getWitnessTable(&unk_100397180, &type metadata for CoreAnimationPackageView.Error);
    atomic_store(result, (unint64_t *)&qword_1004999D0);
  }
  return result;
}

id sub_100245D10()
{
  if (qword_100498860 != -1)
    swift_once(&qword_100498860, sub_100232E30);
  static NSBundle.musicCoreUIBundle = qword_1004A2F90;
  return (id)qword_1004A2F90;
}

uint64_t *NSBundle.musicCoreUIBundle.unsafeMutableAddressor()
{
  if (qword_100498900 != -1)
    swift_once(&qword_100498900, sub_100245D10);
  return &static NSBundle.musicCoreUIBundle;
}

id static NSBundle.musicCoreUIBundle.getter()
{
  if (qword_100498900 != -1)
    swift_once(&qword_100498900, sub_100245D10);
  return (id)static NSBundle.musicCoreUIBundle;
}

void MusicLibrary.ActionableState.updateSymbolConfiguration(from:traitCollection:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  uint64_t v7;
  char *v8;
  unsigned int v9;
  __int128 v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  double v20;
  __int128 v21;
  id v22;
  NSString *v23;
  CGFloat bottom;
  CGFloat right;
  __int128 v26;

  sub_100005574(&qword_1004A1050);
  __chkstk_darwin();
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100498D18 != -1)
    swift_once(&qword_100498D18, sub_10035C908);
  v9 = a4;
  v10 = static SymbolButton.Configuration.platterMinimumSize;
  v11 = (int *)type metadata accessor for SymbolButton.Configuration(0);
  *(_OWORD *)(a1 + v11[13]) = v10;
  static UIView.Corner.rounded.getter(v11);
  v12 = type metadata accessor for UIView.Corner(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v8, 0, 1, v12);
  sub_1002460F4((uint64_t)v8, a1 + v11[9]);
  v13 = a1 + v11[10];
  if (*(_QWORD *)v13)
  {
    v14 = *(_OWORD *)&UIEdgeInsetsZero.bottom;
    *(_OWORD *)(v13 + 8) = *(_OWORD *)&UIEdgeInsetsZero.top;
    *(_OWORD *)(v13 + 24) = v14;
  }

  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 56) = 2;
  objc_storeStrong((id *)(a1 + 24), UIFontTextStyleSubheadline);
  *(_QWORD *)(a1 + 48) = 6;
  switch(v9 >> 8)
  {
    case 2u:
      swift_bridgeObjectRelease();
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      goto LABEL_16;
    case 3u:
      swift_bridgeObjectRelease();
      *(_OWORD *)a1 = xmmword_100395350;
      *(_QWORD *)(a1 + 48) = 7;
      goto LABEL_16;
    case 4u:
      swift_bridgeObjectRelease();
      v21 = xmmword_100395340;
      goto LABEL_15;
    case 5u:
      swift_bridgeObjectRelease();
      v21 = xmmword_100395330;
      goto LABEL_15;
    default:
      if ((v9 & 0x100) != 0)
      {
        swift_bridgeObjectRelease();
        v21 = xmmword_100395360;
LABEL_15:
        *(_OWORD *)a1 = v21;
LABEL_16:
        sub_10024613C(*(void **)v13, *(_QWORD *)(v13 + 8), *(_QWORD *)(v13 + 16), *(_QWORD *)(v13 + 24), *(_QWORD *)(v13 + 32), *(_QWORD *)(v13 + 40), *(void **)(v13 + 48));
        *(_QWORD *)(v13 + 48) = 0;
        *(_OWORD *)(v13 + 16) = 0u;
        *(_OWORD *)(v13 + 32) = 0u;
        *(_OWORD *)v13 = 0u;
      }
      else
      {
        v15 = *(void **)v13;
        if (*(_QWORD *)v13
          && (v16 = type metadata accessor for CircularProgressView(), (v17 = swift_dynamicCastClass(v15, v16)) != 0))
        {
          v18 = (char *)v17;
          v19 = v15;
        }
        else
        {
          v22 = objc_allocWithZone((Class)type metadata accessor for CircularProgressView());
          v18 = CircularProgressView.init(size:)(0.0, 0.0);
        }
        CircularProgressView.setState(_:animated:)(a3, v9 & 1, 1, v20);
        sub_100246168(*(_QWORD *)(a1 + 192), *(void **)(a1 + 200), *(_QWORD *)(a1 + 208), *(_QWORD *)(a1 + 216));
        *(_OWORD *)(a1 + 192) = xmmword_100384A50;
        *(_QWORD *)(a1 + 208) = 0;
        *(_QWORD *)(a1 + 216) = 0;
        swift_bridgeObjectRelease();
        *(_OWORD *)a1 = xmmword_100395370;
        *(_QWORD *)(a1 + 56) = 1;
        v23 = UIFontTextStyleFootnote;

        *(_QWORD *)(a1 + 24) = v23;
        v26 = *(_OWORD *)&UIEdgeInsetsZero.top;
        bottom = UIEdgeInsetsZero.bottom;
        right = UIEdgeInsetsZero.right;
        sub_10024613C(*(void **)v13, *(_QWORD *)(v13 + 8), *(_QWORD *)(v13 + 16), *(_QWORD *)(v13 + 24), *(_QWORD *)(v13 + 32), *(_QWORD *)(v13 + 40), *(void **)(v13 + 48));
        *(_QWORD *)v13 = v18;
        *(_OWORD *)(v13 + 8) = v26;
        *(CGFloat *)(v13 + 24) = bottom;
        *(CGFloat *)(v13 + 32) = right;
        *(_OWORD *)(v13 + 40) = xmmword_1003952A0;
      }
      return;
  }
}

uint64_t sub_1002460F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005574(&qword_1004A1050);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_10024613C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  if (a1)
  {

  }
}

uint64_t sub_100246168(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2 != (void *)1)
  {

    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t sub_100246198(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for Logger(0, a2);
  sub_1000086DC(v2, qword_1004A31A0);
  sub_1000086B4(v2, (uint64_t)qword_1004A31A0);
  sub_100246210();
  v3 = OS_os_log.init(musicCategory:)(0x726F43636973754DLL, 0xEB00000000495565);
  return Logger.init(_:)(v3);
}

unint64_t sub_100246210()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1004999D8;
  if (!qword_1004999D8)
  {
    v1 = objc_opt_self(OS_os_log);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1004999D8);
  }
  return result;
}

uint64_t ArtworkImageViewModelAttributeProviding.cropStyle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  static Artwork.CropStyle.boundedBox.getter();
  v2 = type metadata accessor for Artwork.CropStyle(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 0, 1, v2);
}

uint64_t sub_10024628C@<X0>(void (*a1)(uint64_t)@<X0>, void (*a2)(uint64_t)@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_100005574(&qword_1004999E0);
  __chkstk_darwin();
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005574((uint64_t *)&unk_10049F430);
  __chkstk_darwin();
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Artwork(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin();
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin();
  v16 = (char *)&v23 - v15;
  a1(v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_100008758((uint64_t)v9, (uint64_t *)&unk_10049F430);
    v17 = type metadata accessor for ArtworkImage.ViewModel(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a3, 1, 1, v17);
  }
  else
  {
    v19 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v19(v16, v9, v10);
    v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 16))(v13, v16, v10);
    a2(v20);
    v21 = type metadata accessor for Artwork.CropStyle(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v7, 0, 1, v21);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    v19(a3, v13, v10);
    v22 = type metadata accessor for ArtworkImage.ViewModel(0);
    sub_100246948((uint64_t)v7, (uint64_t)&a3[*(int *)(v22 + 20)]);
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a3, 0, 1, v22);
  }
}

uint64_t sub_10024649C@<X0>(char *a1@<X8>)
{
  return sub_10024628C((void (*)(uint64_t))&UploadedVideo.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_1002464B0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  void (*v17)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[16];

  sub_100005574(&qword_1004999E0);
  __chkstk_darwin();
  v3 = &v21[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100005574((uint64_t *)&unk_10049F430);
  __chkstk_darwin();
  v5 = &v21[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for Artwork(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  v11 = &v21[-v10];
  v12 = sub_100005574(&qword_100499A18);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v13 = MusicAttributeProperty.init(_:)(0x6B726F77747261, 0xE700000000000000);
  Artist.subscript.getter();
  v14 = swift_release(v13);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t, __n128))(v7 + 48))(v5, 1, v6, v14) == 1)
  {
    sub_100008758((uint64_t)v5, (uint64_t *)&unk_10049F430);
    v15 = type metadata accessor for ArtworkImage.ViewModel(0);
    return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a1, 1, 1, v15);
  }
  else
  {
    v17 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32);
    v17(v11, v5, v6);
    v18 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v9, v11, v6);
    static Artwork.CropStyle.boundedBox.getter(v18);
    v19 = type metadata accessor for Artwork.CropStyle(0);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v3, 0, 1, v19);
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v11, v6);
    v17(a1, v9, v6);
    v20 = type metadata accessor for ArtworkImage.ViewModel(0);
    sub_100246948((uint64_t)v3, (uint64_t)&a1[*(int *)(v20 + 20)]);
    return (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
  }
}

uint64_t ArtworkImageViewModelAttributeProviding.artworkViewModel.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  sub_100005574(&qword_1004999E0);
  __chkstk_darwin();
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005574((uint64_t *)&unk_10049F430);
  __chkstk_darwin();
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Artwork(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin();
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v15 = (char *)&v21 - v14;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_100008758((uint64_t)v9, (uint64_t *)&unk_10049F430);
    v16 = type metadata accessor for ArtworkImage.ViewModel(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a3, 1, 1, v16);
  }
  else
  {
    v22 = a1;
    v18 = a3;
    v19 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v19(v15, v9, v10);
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v15, v10);
    (*(void (**)(uint64_t, uint64_t))(a2 + 24))(v22, a2);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
    v19(v18, v13, v10);
    v20 = type metadata accessor for ArtworkImage.ViewModel(0);
    sub_100246948((uint64_t)v7, (uint64_t)&v18[*(int *)(v20 + 20)]);
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v18, 0, 1, v20);
  }
}

uint64_t sub_100246948(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005574(&qword_1004999E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100246994@<X0>(uint64_t a1@<X8>)
{
  return sub_100247E58((void (*)(void))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_1002469A0@<X0>(char *a1@<X8>)
{
  return sub_10024628C((void (*)(uint64_t))&Album.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

double sub_1002469C4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = sub_100005574(&qword_100499A18);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v1 = MusicAttributeProperty.init(_:)(0x6B726F77747261, 0xE700000000000000);
  Artist.subscript.getter();
  *(_QWORD *)&result = swift_release(v1).n128_u64[0];
  return result;
}

uint64_t sub_100246A90@<X0>(char *a1@<X8>)
{
  return sub_10024628C((void (*)(uint64_t))&Curator.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_100246AB8@<X0>(char *a1@<X8>)
{
  return sub_10024628C((void (*)(uint64_t))&EditorialItem.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_100246AE0@<X0>(char *a1@<X8>)
{
  return sub_10024628C((void (*)(uint64_t))&Genre.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_100246B08@<X0>(char *a1@<X8>)
{
  return sub_10024628C((void (*)(uint64_t))&MusicVideo.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_100246B2C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = type metadata accessor for Artwork(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005574((uint64_t *)&unk_10049F430);
  __chkstk_darwin();
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin();
  v10 = (char *)&v16 - v9;
  Playlist.artwork.getter(v8);
  sub_100014A7C((uint64_t)v10, (uint64_t)v7, (uint64_t *)&unk_10049F430);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v7, 1, v2) == 1)
  {
    v11 = type metadata accessor for ArtworkImage.ViewModel(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a1, 1, 1, v11);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v7, v2);
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(a1, v5, v2);
    v12 = type metadata accessor for ArtworkImage.ViewModel(0);
    v13 = a1 + *(int *)(v12 + 20);
    static Artwork.CropStyle.squareCenterCrop.getter(v12);
    v14 = type metadata accessor for Artwork.CropStyle(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 0, 1, v14);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a1, 0, 1, v12);
  }
  return sub_100008758((uint64_t)v10, (uint64_t *)&unk_10049F430);
}

uint64_t Playlist.artworkViewModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v75 = a1;
  sub_100005574(&qword_1004999E0);
  __chkstk_darwin();
  v66 = (char *)&v64 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Artwork(0);
  v71 = *(_QWORD *)(v3 - 8);
  v72 = v3;
  __chkstk_darwin();
  v65 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v70 = (char *)&v64 - v5;
  sub_100005574((uint64_t *)&unk_10049F430);
  __chkstk_darwin();
  v7 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v69 = (char *)&v64 - v8;
  __chkstk_darwin();
  v10 = (char *)&v64 - v9;
  __chkstk_darwin();
  v12 = (char *)&v64 - v11;
  v13 = type metadata accessor for Playlist(0);
  v73 = *(_QWORD *)(v13 - 8);
  v74 = v13;
  __chkstk_darwin();
  v68 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v16 = (char *)&v64 - v15;
  sub_100005574((uint64_t *)&unk_10049F7D0);
  __chkstk_darwin();
  v67 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v19 = (char *)&v64 - v18;
  sub_100005574(&qword_100499778);
  __chkstk_darwin();
  v21 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin();
  v24 = (char *)&v64 - v23;
  Playlist.variant.getter(v22);
  v25 = type metadata accessor for Playlist.Variant(0);
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25) == 1)
    goto LABEL_2;
  sub_100014A7C((uint64_t)v24, (uint64_t)v21, &qword_100499778);
  v28 = (*(uint64_t (**)(char *, uint64_t))(v26 + 88))(v21, v25);
  if (v28 != enum case for Playlist.Variant.regular(_:) && v28 != enum case for Playlist.Variant.smart(_:))
  {
    if (v28 == enum case for Playlist.Variant.genius(_:))
      goto LABEL_2;
    if (v28 == enum case for Playlist.Variant.favoriteSongs(_:))
      goto LABEL_7;
    if (v28 == enum case for Playlist.Variant.folder(_:))
      goto LABEL_14;
    if (v28 != enum case for Playlist.Variant.subscribed(_:))
    {
      if (v28 != enum case for Playlist.Variant.admin(_:))
      {
        if (v28 == enum case for Playlist.Variant.personalMix(_:))
        {
          v48 = (uint64_t)v69;
          Playlist.editorialArtwork.getter();
          sub_100014A7C(v48, (uint64_t)v7, (uint64_t *)&unk_10049F430);
          v50 = v71;
          v49 = v72;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v7, 1, v72) == 1)
          {
            v51 = type metadata accessor for ArtworkImage.ViewModel(0);
            v52 = (uint64_t)v67;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v67, 1, 1, v51);
          }
          else
          {
            v53 = *(void (**)(char *, char *, uint64_t))(v50 + 32);
            v54 = v70;
            v53(v70, v7, v49);
            v55 = v65;
            v56 = (*(uint64_t (**)(char *, char *, uint64_t))(v50 + 16))(v65, v54, v49);
            v57 = (uint64_t)v66;
            static Artwork.CropStyle.featuredContentCrop170T100B.getter(v56);
            v58 = type metadata accessor for Artwork.CropStyle(0);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v57, 0, 1, v58);
            v52 = (uint64_t)v67;
            v53(v67, v55, v49);
            v51 = type metadata accessor for ArtworkImage.ViewModel(0);
            sub_100246948(v57, v52 + *(int *)(v51 + 20));
            (*(void (**)(char *, uint64_t))(v50 + 8))(v54, v49);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v52, 0, 1, v51);
          }
          v60 = v74;
          v59 = v75;
          v61 = v73;
          v62 = v68;
          sub_100008758(v48, (uint64_t *)&unk_10049F430);
          (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v62, v1, v60);
          type metadata accessor for ArtworkImage.ViewModel(0);
          v63 = *(_QWORD *)(v51 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v52, 1, v51) == 1)
          {
            sub_100246B2C(v59);
            (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v60);
            sub_100008758(v52, (uint64_t *)&unk_10049F7D0);
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v60);
            sub_100247440(v52, v59);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v63 + 56))(v59, 0, 1, v51);
          }
          goto LABEL_15;
        }
        (*(void (**)(char *, uint64_t))(v26 + 8))(v21, v25);
LABEL_14:
        v47 = type metadata accessor for ArtworkImage.ViewModel(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v75, 1, 1, v47);
LABEL_15:
        v44 = &qword_100499778;
        v45 = (uint64_t)v24;
        return sub_100008758(v45, v44);
      }
LABEL_2:
      sub_100008758((uint64_t)v24, &qword_100499778);
      return sub_100246B2C(v75);
    }
  }
LABEL_7:
  sub_100008758((uint64_t)v24, &qword_100499778);
  sub_100246B2C((uint64_t)v19);
  v29 = v73;
  v30 = v1;
  v31 = v74;
  (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v16, v30, v74);
  v32 = type metadata accessor for ArtworkImage.ViewModel(0);
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v19, 1, v32) == 1)
  {
    Playlist.tracksTiledArtwork.getter();
    sub_100014A7C((uint64_t)v12, (uint64_t)v10, (uint64_t *)&unk_10049F430);
    v35 = v71;
    v34 = v72;
    v36 = 1;
    v37 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v10, 1, v72) == 1;
    v38 = v75;
    if (!v37)
    {
      v39 = v70;
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v70, v10, v34);
      v40 = v39;
      v41 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v35 + 16))(v75, v39, v34);
      v42 = v75 + *(int *)(v32 + 20);
      static Artwork.CropStyle.boundedBox.getter(v41);
      v43 = type metadata accessor for Artwork.CropStyle(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v42, 0, 1, v43);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v40, v34);
      v38 = v75;
      v36 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 56))(v38, v36, 1, v32);
    sub_100008758((uint64_t)v12, (uint64_t *)&unk_10049F430);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v74);
    v44 = (uint64_t *)&unk_10049F7D0;
    v45 = (uint64_t)v19;
    return sub_100008758(v45, v44);
  }
  (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v31);
  v46 = v75;
  sub_100247440((uint64_t)v19, v75);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v33 + 56))(v46, 0, 1, v32);
}

uint64_t sub_100247440(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ArtworkImage.ViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100247490@<X0>(char *a1@<X8>)
{
  return sub_10024628C((void (*)(uint64_t))&Song.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_1002474B8@<X0>(char *a1@<X8>)
{
  return sub_10024628C((void (*)(uint64_t))&Playlist.Entry.InternalItem.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_1002474E0@<X0>(char *a1@<X8>)
{
  return sub_10024628C((void (*)(uint64_t))&RadioShow.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t RecentlyAddedMusicItem.artworkViewModel.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;

  v49 = a1;
  v1 = type metadata accessor for UploadedVideo(0);
  v38 = *(_QWORD *)(v1 - 8);
  v39 = v1;
  __chkstk_darwin();
  v37 = (char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for MusicVideo(0);
  v46 = *(_QWORD *)(v3 - 8);
  v47 = v3;
  __chkstk_darwin();
  v45 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TVSeason(0);
  v41 = *(_QWORD *)(v5 - 8);
  v42 = v5;
  __chkstk_darwin();
  v40 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Playlist(0);
  v43 = *(_QWORD *)(v7 - 8);
  v44 = v7;
  __chkstk_darwin();
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MusicMovie(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin();
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Album(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin();
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for RecentlyAddedMusicItem(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin();
  v21 = (char *)&v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v48, v18);
  v22 = (*(uint64_t (**)(char *, uint64_t))(v19 + 88))(v21, v18);
  if (v22 == enum case for RecentlyAddedMusicItem.album(_:))
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v21, v18);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v21, v14);
    sub_10024628C((void (*)(uint64_t))&Album.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, v49);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  v24 = v49;
  if (v22 == enum case for RecentlyAddedMusicItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v21, v18);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v21, v10);
    sub_10024628C((void (*)(uint64_t))&MusicMovie.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, v24);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  if (v22 == enum case for RecentlyAddedMusicItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v21, v18);
    v26 = v45;
    v25 = v46;
    v27 = v47;
    (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v45, v21, v47);
    sub_10024628C((void (*)(uint64_t))&MusicVideo.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, v24);
    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v26, v27);
  }
  v28 = v49;
  if (v22 == enum case for RecentlyAddedMusicItem.playlist(_:))
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v21, v18);
    v30 = v43;
    v29 = v44;
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v9, v21, v44);
    Playlist.artworkViewModel.getter((uint64_t)v24);
    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v9, v29);
  }
  if (v22 == enum case for RecentlyAddedMusicItem.tvSeason(_:))
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v21, v18);
    v31 = v40;
    v32 = v41;
    v33 = v42;
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v40, v21, v42);
    v34 = (void (*)(uint64_t))&TVSeason.artwork.getter;
LABEL_13:
    sub_10024628C(v34, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, v28);
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v31, v33);
  }
  if (v22 == enum case for RecentlyAddedMusicItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v21, v18);
    v31 = v37;
    v32 = v38;
    v33 = v39;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v37, v21, v39);
    v34 = (void (*)(uint64_t))&UploadedVideo.artwork.getter;
    goto LABEL_13;
  }
  v35 = type metadata accessor for ArtworkImage.ViewModel(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v24, 1, 1, v35);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v18);
}

uint64_t sub_10024797C@<X0>(char *a1@<X8>)
{
  return sub_10024628C((void (*)(uint64_t))&RecordLabel.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_1002479A4@<X0>(char *a1@<X8>)
{
  return sub_10024628C((void (*)(uint64_t))&MusicMovie.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_1002479D0@<X0>(uint64_t a1@<X8>)
{
  return sub_100247E58((void (*)(void))&static Artwork.CropStyle.specificRectangle.getter, a1);
}

uint64_t sub_1002479DC@<X0>(char *a1@<X8>)
{
  return sub_10024628C((void (*)(uint64_t))&SocialProfile.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.specificRectangle.getter, a1);
}

uint64_t sub_100247A04@<X0>(char *a1@<X8>)
{
  return sub_10024628C((void (*)(uint64_t))&Station.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.specificRectangle.getter, a1);
}

uint64_t TVEpisode.artworkViewModel.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  int v18;
  char *v19;
  uint64_t v20;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t (*v27)(char *, _QWORD, uint64_t, uint64_t);
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;

  v33 = a1;
  sub_100005574(&qword_1004999E0);
  __chkstk_darwin();
  v2 = (char *)&v32 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005574((uint64_t *)&unk_10049F430);
  __chkstk_darwin();
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v6 = (char *)&v32 - v5;
  v7 = type metadata accessor for Artwork(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v12 = (char *)&v32 - v11;
  v13 = __chkstk_darwin();
  v15 = (char *)&v32 - v14;
  TVEpisode.previewArtwork.getter(v13);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (v16(v6, 1, v7) == 1)
  {
    v17 = sub_100008758((uint64_t)v6, (uint64_t *)&unk_10049F430);
    TVEpisode.artwork.getter(v17);
    v18 = v16(v4, 1, v7);
    v19 = v33;
    if (v18 == 1)
    {
      sub_100008758((uint64_t)v4, (uint64_t *)&unk_10049F430);
      v20 = type metadata accessor for ArtworkImage.ViewModel(0);
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
    }
    v29 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v29(v10, v4, v7);
    v30 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 16))(v12, v10, v7);
    static Artwork.CropStyle.boundedBox.getter(v30);
    v31 = type metadata accessor for Artwork.CropStyle(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v2, 0, 1, v31);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v29(v19, v12, v7);
    v26 = type metadata accessor for ArtworkImage.ViewModel(0);
    sub_100246948((uint64_t)v2, (uint64_t)&v19[*(int *)(v26 + 20)]);
    v27 = *(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
    v28 = v19;
  }
  else
  {
    v22 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v22(v15, v6, v7);
    v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 16))(v12, v15, v7);
    static Artwork.CropStyle.boundedBox.getter(v23);
    v24 = type metadata accessor for Artwork.CropStyle(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v2, 0, 1, v24);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v15, v7);
    v25 = v33;
    v22(v33, v12, v7);
    v26 = type metadata accessor for ArtworkImage.ViewModel(0);
    sub_100246948((uint64_t)v2, (uint64_t)&v25[*(int *)(v26 + 20)]);
    v27 = *(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
    v28 = v25;
  }
  return v27(v28, 0, 1, v26);
}

uint64_t sub_100247D50@<X0>(char *a1@<X8>)
{
  return sub_10024628C((void (*)(uint64_t))&TVShow.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_100247D78@<X0>(char *a1@<X8>)
{
  return sub_10024628C((void (*)(uint64_t))&TVSeason.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_100247DA0@<X0>(char *a1@<X8>)
{
  return sub_10024628C((void (*)(uint64_t))&UploadedVideo.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_100247DC8@<X0>(char *a1@<X8>)
{
  return sub_10024628C((void (*)(uint64_t))&UploadedAudio.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t _s8MusicKit7StationV0A6CoreUIE9cropStyleAA7ArtworkV0aB8InternalE04CropG0VSgvg_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  static Artwork.CropStyle.specificRectangle.getter();
  v2 = type metadata accessor for Artwork.CropStyle(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 0, 1, v2);
}

uint64_t sub_100247E30@<X0>(char *a1@<X8>)
{
  return sub_10024628C((void (*)(uint64_t))&UserProfile.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.specificRectangle.getter, a1);
}

uint64_t sub_100247E58@<X0>(void (*a1)(void)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3;

  a1();
  v3 = type metadata accessor for Artwork.CropStyle(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 0, 1, v3);
}

uint64_t sub_100247E98@<X0>(char *a1@<X8>)
{
  return sub_10024628C((void (*)(uint64_t))&CreditArtist.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t Track.artworkViewModel.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;

  v2 = v1;
  v20 = a1;
  v3 = type metadata accessor for MusicVideo(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Song(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Track(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin();
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v2, v11);
  v15 = (*(uint64_t (**)(char *, uint64_t))(v12 + 88))(v14, v11);
  if (v15 == enum case for Track.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v12 + 96))(v14, v11);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v14, v7);
    sub_10024628C((void (*)(uint64_t))&Song.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, v20);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  else
  {
    v17 = v20;
    if (v15 == enum case for Track.musicVideo(_:))
    {
      (*(void (**)(char *, uint64_t))(v12 + 96))(v14, v11);
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v14, v3);
      sub_10024628C((void (*)(uint64_t))&MusicVideo.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, v17);
      return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }
    else
    {
      v18 = type metadata accessor for ArtworkImage.ViewModel(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    }
  }
}

uint64_t GenericMusicItem.artworkViewModel.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int v38;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t);
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t (*v49)(char *, uint64_t);
  char *v50;
  void (*v51)(uint64_t);
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  void (*v56)(uint64_t);
  char *v57;
  char *v58;
  void (*v59)(uint64_t);
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  void (*v75)(char *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t, uint64_t);
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;

  v130 = a1;
  v1 = type metadata accessor for CreditArtist(0);
  v128 = *(_QWORD *)(v1 - 8);
  v129 = v1;
  __chkstk_darwin();
  v127 = (char *)&v78 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = type metadata accessor for SocialProfile(0);
  v102 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin();
  v101 = (char *)&v78 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for UploadedVideo(0);
  v81 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin();
  v80 = (char *)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for UploadedAudio(0);
  v84 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin();
  v83 = (char *)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for TVShow(0);
  v87 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin();
  v86 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for TVSeason(0);
  v90 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin();
  v89 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for TVEpisode(0);
  v93 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin();
  v92 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = type metadata accessor for RecordLabel(0);
  v105 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin();
  v104 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = type metadata accessor for RadioShow(0);
  v108 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin();
  v107 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = type metadata accessor for Station(0);
  v96 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin();
  v95 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for Song(0);
  v99 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin();
  v98 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = type metadata accessor for Playlist(0);
  v111 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin();
  v110 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for MusicVideo(0);
  v114 = *(_QWORD *)(v14 - 8);
  v115 = v14;
  __chkstk_darwin();
  v113 = (char *)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for MusicMovie(0);
  v117 = *(_QWORD *)(v16 - 8);
  v118 = v16;
  __chkstk_darwin();
  v116 = (char *)&v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Genre(0);
  v120 = *(_QWORD *)(v18 - 8);
  v121 = v18;
  __chkstk_darwin();
  v119 = (char *)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for EditorialItem(0);
  v123 = *(_QWORD *)(v20 - 8);
  v124 = v20;
  __chkstk_darwin();
  v122 = (char *)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Curator(0);
  v125 = *(_QWORD *)(v22 - 8);
  v126 = v22;
  __chkstk_darwin();
  v24 = (char *)&v78 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for Artist(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin();
  v28 = (char *)&v78 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for Album(0);
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin();
  v32 = (char *)&v78 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for GenericMusicItem(0);
  v34 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin();
  v79 = (char *)&v78 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v37 = (char *)&v78 - v36;
  v78 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 16);
  v78((char *)&v78 - v36, v131, v33);
  v38 = (*(uint64_t (**)(char *, uint64_t))(v34 + 88))(v37, v33);
  if (v38 == enum case for GenericMusicItem.album(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v32, v37, v29);
    sub_10024628C((void (*)(uint64_t))&Album.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, v130);
    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v32, v29);
  }
  v40 = v130;
  if (v38 == enum case for GenericMusicItem.artist(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v28, v37, v25);
    sub_1002464B0(v40);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v28, v25);
  }
  if (v38 == enum case for GenericMusicItem.composer(_:))
  {
    v41 = type metadata accessor for ArtworkImage.ViewModel(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v40, 1, 1, v41);
    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v37, v33);
  }
  if (v38 == enum case for GenericMusicItem.creditArtist(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    v42 = v127;
    v43 = v128;
    v44 = v129;
    (*(void (**)(char *, char *, uint64_t))(v128 + 32))(v127, v37, v129);
    v45 = (void (*)(uint64_t))&CreditArtist.artwork.getter;
LABEL_13:
    v51 = (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter;
LABEL_14:
    sub_10024628C(v45, v51, v40);
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v42, v44);
  }
  if (v38 == enum case for GenericMusicItem.curator(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    v46 = v125;
    v47 = v37;
    v48 = v126;
    (*(void (**)(char *, char *, uint64_t))(v125 + 32))(v24, v47, v126);
    sub_10024628C((void (*)(uint64_t))&Curator.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, v40);
    v49 = *(uint64_t (**)(char *, uint64_t))(v46 + 8);
    v50 = v24;
    return v49(v50, v48);
  }
  if (v38 == enum case for GenericMusicItem.editorialItem(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    v42 = v122;
    v43 = v123;
    v44 = v124;
    (*(void (**)(char *, char *, uint64_t))(v123 + 32))(v122, v37, v124);
    v45 = (void (*)(uint64_t))&EditorialItem.artwork.getter;
    goto LABEL_13;
  }
  v52 = v33;
  if (v38 == enum case for GenericMusicItem.genre(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    v54 = v119;
    v53 = v120;
    v55 = v37;
    v48 = v121;
    (*(void (**)(char *, char *, uint64_t))(v120 + 32))(v119, v55, v121);
    v56 = (void (*)(uint64_t))&Genre.artwork.getter;
LABEL_22:
    v59 = (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter;
LABEL_23:
    sub_10024628C(v56, v59, v40);
LABEL_24:
    v49 = *(uint64_t (**)(char *, uint64_t))(v53 + 8);
    v50 = v54;
    return v49(v50, v48);
  }
  if (v38 == enum case for GenericMusicItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    v54 = v116;
    v53 = v117;
    v57 = v37;
    v48 = v118;
    (*(void (**)(char *, char *, uint64_t))(v117 + 32))(v116, v57, v118);
    v56 = (void (*)(uint64_t))&MusicMovie.artwork.getter;
    goto LABEL_22;
  }
  if (v38 == enum case for GenericMusicItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    v54 = v113;
    v53 = v114;
    v58 = v37;
    v48 = v115;
    (*(void (**)(char *, char *, uint64_t))(v114 + 32))(v113, v58, v115);
    v56 = (void (*)(uint64_t))&MusicVideo.artwork.getter;
    goto LABEL_22;
  }
  if (v38 == enum case for GenericMusicItem.playlist(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    v53 = v111;
    v54 = v110;
    v60 = v37;
    v48 = v112;
    (*(void (**)(char *, char *, uint64_t))(v111 + 32))(v110, v60, v112);
    Playlist.artworkViewModel.getter((uint64_t)v40);
    goto LABEL_24;
  }
  if (v38 == enum case for GenericMusicItem.radioShow(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    v53 = v108;
    v54 = v107;
    v61 = v37;
    v48 = v109;
    (*(void (**)(char *, char *, uint64_t))(v108 + 32))(v107, v61, v109);
    v56 = (void (*)(uint64_t))&RadioShow.artwork.getter;
    goto LABEL_22;
  }
  if (v38 == enum case for GenericMusicItem.recordLabel(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    v53 = v105;
    v54 = v104;
    v62 = v37;
    v48 = v106;
    (*(void (**)(char *, char *, uint64_t))(v105 + 32))(v104, v62, v106);
    v56 = (void (*)(uint64_t))&RecordLabel.artwork.getter;
    goto LABEL_22;
  }
  if (v38 == enum case for GenericMusicItem.socialProfile(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    v53 = v102;
    v54 = v101;
    v63 = v37;
    v48 = v103;
    (*(void (**)(char *, char *, uint64_t))(v102 + 32))(v101, v63, v103);
    v56 = (void (*)(uint64_t))&SocialProfile.artwork.getter;
    v59 = (void (*)(uint64_t))&static Artwork.CropStyle.specificRectangle.getter;
    goto LABEL_23;
  }
  if (v38 == enum case for GenericMusicItem.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    v53 = v99;
    v54 = v98;
    v64 = v37;
    v48 = v100;
    (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v98, v64, v100);
    v56 = (void (*)(uint64_t))&Song.artwork.getter;
    goto LABEL_22;
  }
  if (v38 == enum case for GenericMusicItem.station(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    v43 = v96;
    v42 = v95;
    v44 = v97;
    (*(void (**)(char *, char *, uint64_t))(v96 + 32))(v95, v37, v97);
    v45 = (void (*)(uint64_t))&Station.artwork.getter;
    v51 = (void (*)(uint64_t))&static Artwork.CropStyle.specificRectangle.getter;
    goto LABEL_14;
  }
  if (v38 == enum case for GenericMusicItem.tvEpisode(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    v43 = v93;
    v42 = v92;
    v44 = v94;
    (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v92, v37, v94);
    TVEpisode.artworkViewModel.getter(v40);
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v42, v44);
  }
  if (v38 == enum case for GenericMusicItem.tvSeason(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    v43 = v90;
    v42 = v89;
    v44 = v91;
    (*(void (**)(char *, char *, uint64_t))(v90 + 32))(v89, v37, v91);
    v45 = (void (*)(uint64_t))&TVSeason.artwork.getter;
    goto LABEL_13;
  }
  if (v38 == enum case for GenericMusicItem.tvShow(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    v43 = v87;
    v42 = v86;
    v44 = v88;
    (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v86, v37, v88);
    v45 = (void (*)(uint64_t))&TVShow.artwork.getter;
    goto LABEL_13;
  }
  if (v38 == enum case for GenericMusicItem.uploadedAudio(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    v43 = v84;
    v42 = v83;
    v44 = v85;
    (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v83, v37, v85);
    v45 = (void (*)(uint64_t))&UploadedAudio.artwork.getter;
    goto LABEL_13;
  }
  if (v38 == enum case for GenericMusicItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    v43 = v81;
    v42 = v80;
    v44 = v82;
    (*(void (**)(char *, char *, uint64_t))(v81 + 32))(v80, v37, v82);
    v45 = (void (*)(uint64_t))&UploadedVideo.artwork.getter;
    goto LABEL_13;
  }
  if (v38 == enum case for GenericMusicItem.other(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    swift_bridgeObjectRelease();
    v65 = type metadata accessor for ArtworkImage.ViewModel(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v40, 1, 1, v65);
  }
  else
  {
    if (qword_100498B20 != -1)
      swift_once(&qword_100498B20, sub_1002C6668);
    v66 = type metadata accessor for Logger(0, v52);
    sub_1000086B4(v66, (uint64_t)static Logger.artwork);
    v67 = ((uint64_t (*)(char *, uint64_t, uint64_t))v78)(v79, v131, v33);
    v68 = Logger.logObject.getter(v67);
    v69 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v68, v69))
    {
      v70 = swift_slowAlloc(22, -1);
      v131 = swift_slowAlloc(64, -1);
      v132 = v131;
      *(_DWORD *)v70 = 136315394;
      *(_QWORD *)(v70 + 4) = sub_100249A1C((char *)0xD000000000000010, (char *)0x80000001003B7EE0, &v132);
      *(_WORD *)(v70 + 12) = 2080;
      v71 = sub_100249E20();
      v72 = v79;
      v73 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v33, v71);
      *(_QWORD *)(v70 + 14) = sub_100249A1C(v73, v74, &v132);
      swift_bridgeObjectRelease();
      v75 = *(void (**)(char *, uint64_t))(v34 + 8);
      v75(v72, v33);
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "Unhandled case for %s: %s", (uint8_t *)v70, 0x16u);
      v76 = v131;
      swift_arrayDestroy(v131, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v76, -1, -1);
      swift_slowDealloc(v70, -1, -1);
    }
    else
    {
      v75 = *(void (**)(char *, uint64_t))(v34 + 8);
      v75(v79, v33);
    }

    v77 = type metadata accessor for ArtworkImage.ViewModel(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(v40, 1, 1, v77);
    return ((uint64_t (*)(char *, uint64_t))v75)(v37, v33);
  }
}

uint64_t ArtworkImage.ViewModel.image(for:)(double a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v3 + 32) = v2;
  *(double *)(v3 + 16) = a1;
  *(double *)(v3 + 24) = a2;
  v4 = sub_100005574(&qword_1004999E0);
  *(_QWORD *)(v3 + 40) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Artwork.CropStyle(0);
  *(_QWORD *)(v3 + 48) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 56) = v6;
  *(_QWORD *)(v3 + 64) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Artwork(0);
  *(_QWORD *)(v3 + 72) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 80) = v8;
  *(_QWORD *)(v3 + 88) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100249098, 0, 0);
}

uint64_t sub_100249098()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 80) + 16))(*(_QWORD *)(v0 + 88), v4, *(_QWORD *)(v0 + 72));
  v5 = type metadata accessor for ArtworkImage.ViewModel(0);
  sub_100014A7C(v4 + *(int *)(v5 + 20), v3, &qword_1004999E0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    if (qword_100498B10 != -1)
      swift_once(&qword_100498B10, sub_1002C6498);
    v7 = *(_QWORD *)(v0 + 56);
    v6 = *(_QWORD *)(v0 + 64);
    v9 = *(_QWORD *)(v0 + 40);
    v8 = *(_QWORD *)(v0 + 48);
    v10 = sub_1000086B4(v8, (uint64_t)static Artwork.CropStyle.fallback);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v10, v8);
    sub_100008758(v9, &qword_1004999E0);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 32))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  }
  if (qword_100498B18 != -1)
    swift_once(&qword_100498B18, sub_1002C6504);
  v11 = type metadata accessor for Artwork.ImageFormat(0);
  v12 = sub_1000086B4(v11, (uint64_t)static Artwork.ImageFormat.fallback);
  v13 = (_QWORD *)swift_task_alloc(dword_1004999FC);
  *(_QWORD *)(v0 + 96) = v13;
  *v13 = v0;
  v13[1] = sub_100249208;
  return Artwork.image(for:cropStyle:format:)(*(_QWORD *)(v0 + 64), v12, *(double *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t sub_100249208(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = *(_QWORD *)(*v2 + 96);
  v5 = *v2;
  *(_QWORD *)(v5 + 104) = v1;
  swift_task_dealloc(v4);
  v7 = *(_QWORD *)(v5 + 80);
  v6 = *(_QWORD *)(v5 + 88);
  v9 = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(v5 + 72);
  v10 = *(_QWORD *)(v5 + 48);
  v11 = *(_QWORD *)(v5 + 56);
  if (v1)
  {
    (*(void (**)(_QWORD, uint64_t))(v11 + 8))(*(_QWORD *)(v5 + 64), v10);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    return swift_task_switch(sub_100249304, 0, 0);
  }
  else
  {
    v13 = *(_QWORD *)(v5 + 40);
    (*(void (**)(_QWORD, uint64_t))(v11 + 8))(*(_QWORD *)(v5 + 64), v10);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    swift_task_dealloc(v6);
    swift_task_dealloc(v9);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
  }
}

uint64_t sub_100249304()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Artwork.image(for:cropStyle:format:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v5 + 40) = a2;
  *(_QWORD *)(v5 + 48) = v4;
  *(_QWORD *)(v5 + 32) = a1;
  *(double *)(v5 + 16) = a3;
  *(double *)(v5 + 24) = a4;
  v6 = sub_100005574(&qword_100499A00);
  *(_QWORD *)(v5 + 56) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005574(&qword_1004999E0);
  *(_QWORD *)(v5 + 64) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1002493D8, 0, 0);
}

uint64_t sub_1002493D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v5 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  objc_msgSend(v5, "displayScale");
  v7 = v6;

  v8 = type metadata accessor for Artwork.CropStyle(0);
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v2, v4, v8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v2, 0, 1, v8);
  v10 = type metadata accessor for Artwork.ImageFormat(0);
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v1, v3, v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v1, 0, 1, v10);
  v12 = (_QWORD *)swift_task_alloc(async function pointer to Artwork.image(width:height:pixelLength:cropStyle:format:cacheOwner:)[1]);
  *(_QWORD *)(v0 + 72) = v12;
  *v12 = v0;
  v12[1] = sub_100249514;
  return Artwork.image(width:height:pixelLength:cropStyle:format:cacheOwner:)(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 56), 0, 0, *(double *)(v0 + 16), *(double *)(v0 + 24), 1.0 / v7);
}

uint64_t sub_100249514(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(*v2 + 72);
  v5 = *v2;
  *(_QWORD *)(v5 + 80) = v1;
  swift_task_dealloc(v4);
  v6 = *(_QWORD *)(v5 + 56);
  v7 = *(_QWORD *)(v5 + 64);
  sub_100008758(v6, &qword_100499A00);
  sub_100008758(v7, &qword_1004999E0);
  if (v1)
    return swift_task_switch(sub_1002495C8, 0, 0);
  swift_task_dealloc(v7);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

uint64_t sub_1002495C8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100249604(double a1, double a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1004999F4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1001D3750;
  return ArtworkImage.ViewModel.image(for:)(a1, a2);
}

uint64_t ArtworkImageFetching<>.image(for:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v5 + 40) = a2;
  *(_QWORD *)(v5 + 48) = v4;
  *(_QWORD *)(v5 + 32) = a1;
  *(double *)(v5 + 16) = a3;
  *(double *)(v5 + 24) = a4;
  v6 = sub_100005574(&qword_1004999E0);
  *(_QWORD *)(v5 + 56) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Artwork.CropStyle(0);
  *(_QWORD *)(v5 + 64) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 72) = v8;
  *(_QWORD *)(v5 + 80) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Artwork(0);
  *(_QWORD *)(v5 + 88) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v5 + 96) = v10;
  *(_QWORD *)(v5 + 104) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100249714, 0, 0);
}

uint64_t sub_100249714()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v4);
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v5, v4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    if (qword_100498B10 != -1)
      swift_once(&qword_100498B10, sub_1002C6498);
    v7 = *(_QWORD *)(v0 + 72);
    v6 = *(_QWORD *)(v0 + 80);
    v9 = *(_QWORD *)(v0 + 56);
    v8 = *(_QWORD *)(v0 + 64);
    v10 = sub_1000086B4(v8, (uint64_t)static Artwork.CropStyle.fallback);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v10, v8);
    sub_100008758(v9, &qword_1004999E0);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 32))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  }
  if (qword_100498B18 != -1)
    swift_once(&qword_100498B18, sub_1002C6504);
  v11 = type metadata accessor for Artwork.ImageFormat(0);
  v12 = sub_1000086B4(v11, (uint64_t)static Artwork.ImageFormat.fallback);
  v13 = (_QWORD *)swift_task_alloc(dword_1004999FC);
  *(_QWORD *)(v0 + 112) = v13;
  *v13 = v0;
  v13[1] = sub_100249884;
  return Artwork.image(for:cropStyle:format:)(*(_QWORD *)(v0 + 80), v12, *(double *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t sub_100249884(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = *(_QWORD *)(*v2 + 112);
  v5 = *v2;
  *(_QWORD *)(v5 + 120) = v1;
  swift_task_dealloc(v4);
  v7 = *(_QWORD *)(v5 + 96);
  v6 = *(_QWORD *)(v5 + 104);
  v9 = *(_QWORD *)(v5 + 80);
  v8 = *(_QWORD *)(v5 + 88);
  v10 = *(_QWORD *)(v5 + 64);
  v11 = *(_QWORD *)(v5 + 72);
  if (v1)
  {
    (*(void (**)(_QWORD, uint64_t))(v11 + 8))(*(_QWORD *)(v5 + 80), v10);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    return swift_task_switch(sub_100249980, 0, 0);
  }
  else
  {
    v13 = *(_QWORD *)(v5 + 56);
    (*(void (**)(_QWORD, uint64_t))(v11 + 8))(*(_QWORD *)(v5 + 80), v10);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    swift_task_dealloc(v6);
    swift_task_dealloc(v9);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
  }
}

uint64_t sub_100249980()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002499CC(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  char *v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  uint64_t result;

  v6 = (char *)a4();
  v8 = sub_100249A1C(v6, v7, a3);
  v9 = (_QWORD *)*a1;
  *(_QWORD *)*a1 = v8;
  result = swift_bridgeObjectRelease();
  *a1 = v9 + 1;
  return result;
}

char *sub_100249A1C(char *a1, char *a2, uint64_t *a3)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v12[3];
  void *ObjectType;

  v6 = sub_100249AEC(v12, 0, 0, 1, (uint64_t)a1, (unint64_t)a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_10000684C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_10000684C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_10000682C(v12);
  return v7;
}

char *sub_100249AEC(char **a1, void *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  char *result;
  uint64_t v10;
  char *v11;
  _QWORD v12[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v10 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v10)
        {
          v12[0] = a5;
          v12[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          memcpy(__dst, v12, HIBYTE(a6) & 0xF);
          result = 0;
          *((_BYTE *)__dst + v10) = 0;
          *a1 = (char *)__dst;
          return result;
        }
      }
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = sub_100249BE8(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    result = (char *)((a6 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    result = (char *)_StringObject.sharedUTF8.getter(a5, a6);
    if (!result)
    {
      __break(1u);
      return result;
    }
  }
  *a1 = result;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return (char *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

char *sub_100249BE8(uint64_t a1, unint64_t a2)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (char *)sub_100249C7C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_100249D14(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v4 = *((_QWORD *)v2 + 2);
  v3 = *((_QWORD *)v2 + 3);
  if (v4 >= v3 >> 1)
    v2 = sub_100249D14((char *)(v3 > 1), v4 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v4 + 1;
  v2[v4 + 32] = 0;
  return v2;
}

_QWORD *sub_100249C7C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  char v7;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_9;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_100268980(v4, 0);
      result = (_QWORD *)_StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v7 & 1) != 0)
        break;
      if (result == (_QWORD *)v4)
        return v5;
      __break(1u);
LABEL_9:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

char *sub_100249D14(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_100499A20);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v8);
  }
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_100249DFC(uint64_t (*a1)(void))
{
  uint64_t v1;

  v1 = a1();
  return _typeName(_:qualified:)(v1, 0);
}

unint64_t sub_100249E20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1004999E8;
  if (!qword_1004999E8)
  {
    v1 = type metadata accessor for GenericMusicItem(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for GenericMusicItem, v1);
    atomic_store(result, (unint64_t *)&qword_1004999E8);
  }
  return result;
}

Swift::Bool __swiftcall Text.StringOption.evaluate(_:)(Swift::String a1)
{
  uint64_t v1;

  v1 = HIBYTE(a1._object) & 0xF;
  if (((uint64_t)a1._object & 0x2000000000000000) == 0)
    v1 = a1._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  return v1 != 0;
}

uint64_t Text.init(optional:options:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  char v6;
  unint64_t v8;
  _QWORD v9[3];

  if (a2
    && (swift_bridgeObjectRetain(),
        v6 = sub_10024AE80(a3, a1, a2),
        swift_bridgeObjectRelease(),
        swift_bridgeObjectRelease(),
        (v6 & 1) != 0))
  {
    v9[0] = a1;
    v9[1] = a2;
    v8 = sub_10024AF7C();
    return Text.init<A>(_:)(v9, &type metadata for String, v8);
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t static Edge.Set.on(_:)(unsigned int a1)
{
  uint64_t v2;
  unsigned __int8 v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned __int8 v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;

  v2 = Edge.Set.init(rawValue:)(0);
  v3 = static Axis.Set.horizontal.getter();
  v4 = ((uint64_t (*)(void))Axis.Set.init(rawValue:))();
  if (Axis.Set.init(rawValue:)(v4 & a1) == v3)
  {
    v5 = static Edge.Set.leading.getter();
    v6 = static Edge.Set.trailing.getter();
    v7 = Edge.Set.init(rawValue:)(0);
    v8 = Edge.Set.init(rawValue:)(v7);
    if (Edge.Set.init(rawValue:)(v8 & v5) != v5)
      v7 = Edge.Set.init(rawValue:)(v7 | v5);
    v9 = Edge.Set.init(rawValue:)(v7);
    if (Edge.Set.init(rawValue:)(v9 & v6) != v6)
      LODWORD(v7) = Edge.Set.init(rawValue:)(v7 | v6);
    v10 = Edge.Set.init(rawValue:)(v2);
    if (Edge.Set.init(rawValue:)(v10 & v7) != v7)
      v2 = Edge.Set.init(rawValue:)(v7 | v2);
  }
  v11 = static Axis.Set.vertical.getter();
  v12 = v11;
  v13 = Axis.Set.init(rawValue:)(v11);
  if (Axis.Set.init(rawValue:)(v13 & a1) != v12)
    return v2;
  v14 = static Edge.Set.top.getter();
  v15 = static Edge.Set.bottom.getter();
  v16 = Edge.Set.init(rawValue:)(0);
  v17 = Edge.Set.init(rawValue:)(v16);
  if (Edge.Set.init(rawValue:)(v17 & v14) != v14)
    v16 = Edge.Set.init(rawValue:)(v16 | v14);
  v18 = Edge.Set.init(rawValue:)(v16);
  if (Edge.Set.init(rawValue:)(v18 & v15) != v15)
    LODWORD(v16) = Edge.Set.init(rawValue:)(v16 | v15);
  v19 = Edge.Set.init(rawValue:)(v2);
  if (Edge.Set.init(rawValue:)(v19 & v16) != v16)
    return Edge.Set.init(rawValue:)(v16 | v2);
  else
    return v2;
}

double EdgeInsets.init(_:length:)(uint64_t a1, double a2)
{
  unsigned int v3;
  unsigned int v4;

  if ((a1 & 1) != 0)
    v3 = static Axis.Set.vertical.getter(a1);
  else
    v3 = static Axis.Set.horizontal.getter();
  v4 = static Edge.Set.on(_:)(v3);
  return _s7SwiftUI10EdgeInsetsV09MusicCoreB0E_6lengthAcA0C0O3SetV_0F8Graphics7CGFloatVtcfC_0(v4, a2);
}

double EdgeInsets.init(_:length:)(unsigned int a1, double a2)
{
  unsigned int v3;

  v3 = static Edge.Set.on(_:)(a1);
  return _s7SwiftUI10EdgeInsetsV09MusicCoreB0E_6lengthAcA0C0O3SetV_0F8Graphics7CGFloatVtcfC_0(v3, a2);
}

double EdgeInsets.init(horizontal:vertical:)(double a1, double a2)
{
  return a2;
}

void EdgeInsets.affecting(_:)(uint64_t a1)
{
  unsigned int v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;

  v2 = static Edge.Set.all.getter();
  _s7SwiftUI10EdgeInsetsV09MusicCoreB0E_6lengthAcA0C0O3SetV_0F8Graphics7CGFloatVtcfC_0(v2, 0.0);
  v3 = 0;
  v4 = a1 + 56;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    while (v7)
      v7 &= v7 - 1;
    v9 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v9 >= v8)
      return;
    v10 = *(_QWORD *)(v4 + 8 * v9);
    ++v3;
    if (!v10)
    {
      v3 = v9 + 1;
      if (v9 + 1 >= v8)
        return;
      v10 = *(_QWORD *)(v4 + 8 * v3);
      if (!v10)
      {
        v3 = v9 + 2;
        if (v9 + 2 >= v8)
          return;
        v10 = *(_QWORD *)(v4 + 8 * v3);
        if (!v10)
        {
          v3 = v9 + 3;
          if (v9 + 3 >= v8)
            return;
          v10 = *(_QWORD *)(v4 + 8 * v3);
          if (!v10)
          {
            v3 = v9 + 4;
            if (v9 + 4 >= v8)
              return;
            v10 = *(_QWORD *)(v4 + 8 * v3);
            if (!v10)
              break;
          }
        }
      }
    }
LABEL_23:
    v7 = (v10 - 1) & v10;
  }
  v11 = v9 + 5;
  if (v11 >= v8)
    return;
  v10 = *(_QWORD *)(v4 + 8 * v11);
  if (v10)
  {
    v3 = v11;
    goto LABEL_23;
  }
  while (1)
  {
    v3 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v3 >= v8)
      return;
    v10 = *(_QWORD *)(v4 + 8 * v3);
    ++v11;
    if (v10)
      goto LABEL_23;
  }
LABEL_26:
  __break(1u);
}

double EdgeInsets.affecting(_:)(char a1)
{
  char v1;
  uint64_t v2;
  uint64_t inited;
  Swift::Int v4;
  double v5;
  double v6;
  _BYTE v8[40];

  v1 = a1 & 1;
  v2 = sub_100005574(&qword_100499A28);
  inited = swift_initStackObject(v2, v8);
  *(_OWORD *)(inited + 16) = xmmword_100384A80;
  *(_BYTE *)(inited + 32) = v1;
  v4 = sub_10024B088(inited);
  swift_setDeallocating(inited);
  EdgeInsets.affecting(_:)(v4);
  v6 = v5;
  swift_bridgeObjectRelease();
  return v6;
}

double EdgeInsets.value(for:)(char a1, double a2, double a3, double a4, double a5)
{
  double result;
  double v6;

  result = a2 + a4;
  v6 = a3 + a5;
  if ((a1 & 1) == 0)
    return v6;
  return result;
}

double EdgeInsets.horizontal.getter(double a1, double a2, double a3, double a4)
{
  return a2 + a4;
}

double EdgeInsets.vertical.getter(double a1, double a2, double a3)
{
  return a1 + a3;
}

double sub_10024A3A4()
{
  double result;

  result = 0.0;
  static EdgeInsets.zero = 0u;
  *(_OWORD *)&qword_1004A31C8 = 0u;
  return result;
}

__int128 *EdgeInsets.zero.unsafeMutableAddressor()
{
  if (qword_100498910 != -1)
    swift_once(&qword_100498910, sub_10024A3A4);
  return &static EdgeInsets.zero;
}

double static EdgeInsets.zero.getter()
{
  if (qword_100498910 != -1)
    swift_once(&qword_100498910, sub_10024A3A4);
  return *(double *)&static EdgeInsets.zero;
}

double CGSize.length(for:)(char a1, double a2, double a3)
{
  double result;

  if ((a1 & 1) != 0)
    return a3;
  return result;
}

BOOL CGSize.fitsWithin(_:)(double a1, double a2, double a3, double a4)
{
  return a4 <= a2 && a3 <= a1;
}

BOOL Axis.orthogonal.getter(char a1)
{
  return (a1 & 1) == 0;
}

uint64_t Axis.isOrthogonal(to:)(char a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    if ((a1 & 1) == 0)
      return 1;
  }
  else if ((a1 & 1) != 0)
  {
    return 1;
  }
  return 0;
}

uint64_t Optional<A>.isOrthogonal(to:)(char a1, char a2)
{
  if (a2 == 2)
    return 1;
  if ((a2 & 1) != 0)
  {
    if ((a1 & 1) == 0)
      return 1;
  }
  else if ((a1 & 1) != 0)
  {
    return 1;
  }
  return 0;
}

uint64_t Axis.Set.init(_:)(char a1)
{
  if ((a1 & 1) != 0)
    return static Axis.Set.vertical.getter();
  else
    return static Axis.Set.horizontal.getter();
}

uint64_t View.always(perform:)@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;

  a1();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
}

double DynamicTypeSize.scaledValue(_:relativeTo:)(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  double v12;
  double v13;
  uint64_t v15;

  sub_100005574(&qword_100499A30);
  __chkstk_darwin();
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", a1);
  v8 = type metadata accessor for DynamicTypeSize(0);
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v6, v2, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  v10 = (void *)UIContentSizeCategory.init(_:)(v6);
  v11 = objc_msgSend((id)objc_opt_self(UITraitCollection), "traitCollectionWithPreferredContentSizeCategory:", v10);
  objc_msgSend(v7, "scaledValueForValue:compatibleWithTraitCollection:", v11, a2);
  v13 = v12;

  return v13;
}

uint64_t static Color.random(opacity:)(double a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  double v7;
  unint64_t v8;
  double v9;
  unint64_t v10;
  double v11;
  uint64_t v13;

  v2 = type metadata accessor for Color.RGBColorSpace(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000A60A0(0x20000000000001uLL);
  if (v6 == 0x20000000000000)
    v7 = 1.0;
  else
    v7 = (double)v6 * 1.11022302e-16 * 0.5 + 0.5;
  v8 = sub_1000A60A0(0x20000000000001uLL);
  if (v8 == 0x20000000000000)
    v9 = 1.0;
  else
    v9 = (double)v8 * 1.11022302e-16 * 0.5 + 0.5;
  v10 = sub_1000A60A0(0x20000000000001uLL);
  if (v10 == 0x20000000000000)
    v11 = 1.0;
  else
    v11 = (double)v10 * 1.11022302e-16 * 0.5 + 0.5;
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Color.RGBColorSpace.sRGB(_:), v2);
  return Color.init(_:red:green:blue:opacity:)(v5, v7, v9, v11, a1);
}

uint64_t RoundedRectangle.outset(horizontal:vertical:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  int *v18;
  void (*v19)(char *, uint64_t);
  uint64_t result;
  uint64_t v21;

  v4 = v3;
  v8 = type metadata accessor for LayoutDirection(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v13 = (char *)&v21 - v12;
  type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin();
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100082248(v4, (uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v16 = enum case for LayoutDirection.leftToRight(_:);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 104);
  v17(v13, enum case for LayoutDirection.leftToRight(_:), v8);
  sub_100082248((uint64_t)v15, a1, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v18 = (int *)_s21OmnidirectionalOutsetVMa(0);
  *(double *)(a1 + v18[5]) = a3;
  *(double *)(a1 + v18[6]) = a2;
  *(double *)(a1 + v18[7]) = a3;
  *(double *)(a1 + v18[8]) = a2;
  v17(v11, v16, v8);
  LOBYTE(v16) = static LayoutDirection.== infix(_:_:)(v13, v11);
  v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v13, v8);
  sub_10024B230((uint64_t)v15);
  result = ((uint64_t (*)(char *, uint64_t))v19)(v11, v8);
  *(_QWORD *)(a1 + v18[9]) = (v16 & 1) == 0;
  return result;
}

uint64_t RoundedRectangle.outset(top:leading:bottom:trailing:layoutDirection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int *v22;
  void (*v23)(char *, uint64_t);
  uint64_t result;
  uint64_t v25;

  v7 = v6;
  v14 = type metadata accessor for LayoutDirection(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin();
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v19 = (char *)&v25 - v18;
  type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin();
  v21 = (char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100082248(v7, (uint64_t)v21, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v19, a1, v14);
  sub_100082248((uint64_t)v21, a2, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v22 = (int *)_s21OmnidirectionalOutsetVMa(0);
  *(double *)(a2 + v22[5]) = a3;
  *(double *)(a2 + v22[6]) = a4;
  *(double *)(a2 + v22[7]) = a5;
  *(double *)(a2 + v22[8]) = a6;
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for LayoutDirection.leftToRight(_:), v14);
  LOBYTE(a1) = static LayoutDirection.== infix(_:_:)(v19, v17);
  v23 = *(void (**)(char *, uint64_t))(v15 + 8);
  v23(v19, v14);
  sub_10024B230((uint64_t)v21);
  result = ((uint64_t (*)(char *, uint64_t))v23)(v17, v14);
  *(_QWORD *)(a2 + v22[9]) = (a1 & 1) == 0;
  return result;
}

double sub_10024AAD4@<D0>(int *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  double result;

  v5 = v3;
  sub_100082248(v5, a2, _s21OmnidirectionalOutsetVMa);
  v8 = a1[6];
  *(double *)(a2 + a1[5]) = *(double *)(a2 + a1[5]) - a3;
  *(double *)(a2 + v8) = *(double *)(a2 + v8) - a3;
  v9 = a1[8];
  *(double *)(a2 + a1[7]) = *(double *)(a2 + a1[7]) - a3;
  result = *(double *)(a2 + v9) - a3;
  *(double *)(a2 + v9) = result;
  return result;
}

double sub_10024AB4C@<D0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  double *v2;
  double *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double result;
  __int128 v24;
  uint64_t v25;
  _OWORD v26[2];
  char v27;

  v4 = v2;
  v6 = type metadata accessor for RoundedCornerStyle(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin();
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGRect.outset(by:for:)(*(double *)((char *)v4 + a1[5]), *(double *)((char *)v4 + a1[6]), *(double *)((char *)v4 + a1[7]), *(double *)((char *)v4 + a1[8]));
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v21 = *v4;
  v22 = v4[1];
  sub_100082248((uint64_t)v4, (uint64_t)v12, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, &v12[*(int *)(v10 + 20)], v6);
  Path.init(roundedRect:cornerSize:style:)(v26, v9, v14, v16, v18, v20, v21, v22);
  result = *(double *)v26;
  v24 = v26[1];
  *(_OWORD *)a2 = v26[0];
  *(_OWORD *)(a2 + 16) = v24;
  *(_BYTE *)(a2 + 32) = v27;
  return result;
}

uint64_t sub_10024ACE8()
{
  return Shape.sizeThatFits(_:)();
}

void (*sub_10024AD00(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return sub_1000F3374;
}

uint64_t sub_10024AD60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100006924(&qword_100499B10, _s21OmnidirectionalOutsetVMa, (uint64_t)&unk_1003976A8);
  return static Shape._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10024ADC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100006924(&qword_100499B10, _s21OmnidirectionalOutsetVMa, (uint64_t)&unk_1003976A8);
  return static Shape._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10024AE30(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006924(&qword_100499B10, _s21OmnidirectionalOutsetVMa, (uint64_t)&unk_1003976A8);
  return Shape.body.getter(a1, v2);
}

uint64_t sub_10024AE80(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;

  v3 = 0;
  v6 = *(_QWORD *)(a1 + 56);
  result = a1 + 56;
  v5 = v6;
  v7 = 1 << *(_BYTE *)(result - 24);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v5;
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v11 = a2 & 0xFFFFFFFFFFFFLL;
  while (1)
  {
    if (!v9)
    {
      v12 = v3 + 1;
      if (__OFADD__(v3, 1))
      {
        __break(1u);
        goto LABEL_27;
      }
      if (v12 >= v10)
        return 1;
      v9 = *(_QWORD *)(result + 8 * v12);
      ++v3;
      if (!v9)
      {
        v3 = v12 + 1;
        if (v12 + 1 >= v10)
          return 1;
        v9 = *(_QWORD *)(result + 8 * v3);
        if (!v9)
        {
          v3 = v12 + 2;
          if (v12 + 2 >= v10)
            return 1;
          v9 = *(_QWORD *)(result + 8 * v3);
          if (!v9)
          {
            v3 = v12 + 3;
            if (v12 + 3 >= v10)
              return 1;
            v9 = *(_QWORD *)(result + 8 * v3);
            if (!v9)
              break;
          }
        }
      }
    }
LABEL_7:
    v9 &= v9 - 1;
    if (!v11)
      return 0;
  }
  v13 = v12 + 4;
  if (v13 >= v10)
    return 1;
  v9 = *(_QWORD *)(result + 8 * v13);
  if (v9)
  {
    v3 = v13;
    goto LABEL_7;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v10)
      return 1;
    v9 = *(_QWORD *)(result + 8 * v3);
    ++v13;
    if (v9)
      goto LABEL_7;
  }
LABEL_27:
  __break(1u);
  return result;
}

unint64_t sub_10024AF7C()
{
  unint64_t result;

  result = qword_10049E4A0;
  if (!qword_10049E4A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10049E4A0);
  }
  return result;
}

double _s7SwiftUI10EdgeInsetsV09MusicCoreB0E_6lengthAcA0C0O3SetV_0F8Graphics7CGFloatVtcfC_0(unsigned int a1, double a2)
{
  uint64_t v4;
  unsigned __int8 v5;
  int v6;
  double v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;

  v4 = static Edge.Set.top.getter();
  v5 = v4;
  v6 = Edge.Set.init(rawValue:)(v4);
  if (Edge.Set.init(rawValue:)(v6 & a1) == v5)
    v7 = a2;
  else
    v7 = 0.0;
  v8 = static Edge.Set.leading.getter();
  v9 = Edge.Set.init(rawValue:)(v8);
  Edge.Set.init(rawValue:)(v9 & a1);
  v10 = static Edge.Set.bottom.getter();
  v11 = Edge.Set.init(rawValue:)(v10);
  Edge.Set.init(rawValue:)(v11 & a1);
  v12 = static Edge.Set.trailing.getter();
  v13 = Edge.Set.init(rawValue:)(v12);
  Edge.Set.init(rawValue:)(v13 & a1);
  return v7;
}

Swift::Int sub_10024B088(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt8 v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD v21[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100005574(&qword_100499B50);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = *(unsigned __int8 *)(v6 + v4);
      Hasher.init(_seed:)(v21);
      v8 = Axis.rawValue.getter(v7);
      Hasher._combine(_:)(v8);
      result = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = Axis.rawValue.getter(*(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v11));
        result = Axis.rawValue.getter(v7);
        if (v15 == result)
          goto LABEL_3;
        v16 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v16;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v17 = Axis.rawValue.getter(*(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v11));
          result = Axis.rawValue.getter(v7);
          if (v17 == result)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      *(_BYTE *)(*(_QWORD *)(v3 + 48) + v11) = v7;
      v18 = *(_QWORD *)(v3 + 16);
      v19 = __OFADD__(v18, 1);
      v20 = v18 + 1;
      if (v19)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v20;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t _s21OmnidirectionalOutsetVMa(uint64_t a1)
{
  uint64_t result;

  result = qword_100499AA0;
  if (!qword_100499AA0)
    return swift_getSingletonMetadata(a1, &_s21OmnidirectionalOutsetVMn);
  return result;
}

uint64_t sub_10024B230(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10024B270()
{
  unint64_t result;

  result = qword_100499A38;
  if (!qword_100499A38)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Text.StringOption, &type metadata for Text.StringOption);
    atomic_store(result, (unint64_t *)&qword_100499A38);
  }
  return result;
}

uint64_t _s12StringOptionOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10024B2F4 + 4 * byte_100397550[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10024B314 + 4 * byte_100397555[v4]))();
}

_BYTE *sub_10024B2F4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10024B314(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10024B31C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10024B324(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10024B32C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10024B334(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Text.StringOption()
{
  return &type metadata for Text.StringOption;
}

uint64_t sub_10024B350()
{
  return sub_100006924(&qword_100499A40, _s21OmnidirectionalOutsetVMa, (uint64_t)&unk_1003976F8);
}

uint64_t *sub_10024B37C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = *(int *)(type metadata accessor for RoundedRectangle(0) + 20);
    v8 = (char *)v4 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for RoundedCornerStyle(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[6];
    *(uint64_t *)((char *)v4 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)v4 + v11) = *(uint64_t *)((char *)a2 + v11);
    v12 = a3[8];
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)v4 + v12) = *(uint64_t *)((char *)a2 + v12);
    *(uint64_t *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  }
  return v4;
}

uint64_t sub_10024B450(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + *(int *)(type metadata accessor for RoundedRectangle(0) + 20);
  v2 = type metadata accessor for RoundedCornerStyle(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

_OWORD *sub_10024B494(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for RoundedRectangle(0) + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[6];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  v11 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v11) = *(_QWORD *)((char *)a2 + v11);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  return a1;
}

_QWORD *sub_10024B53C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = *(int *)(type metadata accessor for RoundedRectangle(0) + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  return a1;
}

_OWORD *sub_10024B5F4(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for RoundedRectangle(0) + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  v11 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v11) = *(_QWORD *)((char *)a2 + v11);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  return a1;
}

_OWORD *sub_10024B69C(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for RoundedRectangle(0) + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  v11 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v11) = *(_QWORD *)((char *)a2 + v11);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  return a1;
}

uint64_t sub_10024B744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10024B750);
}

uint64_t sub_10024B750(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RoundedRectangle(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10024B78C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10024B798);
}

uint64_t sub_10024B798(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RoundedRectangle(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_10024B7D8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for RoundedRectangle(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_10024B858()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100499AE8;
  if (!qword_100499AE8)
  {
    v1 = sub_100005600(&qword_100499AF0);
    result = swift_getWitnessTable(&protocol conformance descriptor for _ShapeView<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100499AE8);
  }
  return result;
}

unint64_t sub_10024B8A8()
{
  unint64_t result;

  result = qword_100499AF8;
  if (!qword_100499AF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EmptyAnimatableData, &type metadata for EmptyAnimatableData);
    atomic_store(result, (unint64_t *)&qword_100499AF8);
  }
  return result;
}

uint64_t sub_10024B8EC()
{
  return sub_100006924(&qword_100499B00, _s21OmnidirectionalOutsetVMa, (uint64_t)&unk_100397658);
}

uint64_t sub_10024B918()
{
  return sub_100006924(&qword_100499B08, _s21OmnidirectionalOutsetVMa, (uint64_t)&unk_100397608);
}

uint64_t sub_10024B944()
{
  return sub_100006924(&qword_100499B10, _s21OmnidirectionalOutsetVMa, (uint64_t)&unk_1003976A8);
}

uint64_t sub_10024B970()
{
  return sub_100006924(&qword_100499A40, _s21OmnidirectionalOutsetVMa, (uint64_t)&unk_1003976F8);
}

Swift::Int sub_10024B99C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  Swift::UInt64 v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD v20[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100005574(&qword_100499B40);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = *(double *)(v6 + 8 * v4);
      Hasher.init(_seed:)(v20);
      Hasher._combine(_:)(0);
      if ((*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v8 = *(_QWORD *)&v7;
      else
        v8 = 0;
      Hasher._combine(_:)(v8);
      result = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      v15 = *(_QWORD *)(v3 + 48);
      if (((1 << v11) & v13) != 0)
      {
        if (*(double *)(v15 + 8 * v11) == v7)
          goto LABEL_3;
        v16 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v16;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          if (*(double *)(v15 + 8 * v11) == v7)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      *(double *)(v15 + 8 * v11) = v7;
      v17 = *(_QWORD *)(v3 + 16);
      v18 = __OFADD__(v17, 1);
      v19 = v17 + 1;
      if (v18)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v19;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

void sub_10024BAF0(uint64_t a1)
{
  sub_10024BB24(a1, (uint64_t *)&unk_10049EDA0, (void (*)(_QWORD))sub_10024C238);
}

Swift::Int sub_10024BB04(uint64_t a1)
{
  return sub_10024C0FC(a1, &qword_100499B18);
}

void sub_10024BB10(uint64_t a1)
{
  sub_10024BB24(a1, &qword_10049E6C0, (void (*)(_QWORD))type metadata accessor for SyncedLyricsLineView);
}

void sub_10024BB24(uint64_t a1, uint64_t *a2, void (*a3)(_QWORD))
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  id v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  id v31;
  Swift::Int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  char v39;
  uint64_t v40;
  id v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;

  v4 = a1;
  v5 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v9 = a1;
    else
      v9 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      sub_100005574(a2);
      v7 = (_QWORD *)static _SetStorage.allocate(capacity:)(v6);
      if (!v5)
        goto LABEL_4;
LABEL_11:
      if (v4 < 0)
        v10 = v4;
      else
        v10 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v8 = _CocoaArrayWrapper.endIndex.getter(v10);
      swift_bridgeObjectRelease();
      if (!v8)
        return;
      goto LABEL_15;
    }
  }
  else
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v6)
      goto LABEL_3;
  }
  v7 = &_swiftEmptySetSingleton;
  if (v5)
    goto LABEL_11;
LABEL_4:
  v8 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v8)
    return;
LABEL_15:
  v11 = (char *)(v7 + 7);
  v48 = v8;
  if ((v4 & 0xC000000000000001) != 0)
  {
    v12 = 0;
    v45 = v4;
    while (1)
    {
      v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v4);
      v14 = __OFADD__(v12++, 1);
      if (v14)
      {
        __break(1u);
        goto LABEL_43;
      }
      v15 = v13;
      v16 = NSObject._rawHashValue(seed:)(v7[5]);
      v17 = -1 << *((_BYTE *)v7 + 32);
      v18 = v16 & ~v17;
      v19 = v18 >> 6;
      v20 = *(_QWORD *)&v11[8 * (v18 >> 6)];
      v21 = 1 << v18;
      if (((1 << v18) & v20) != 0)
      {
        a3(0);
        v22 = *(id *)(v7[6] + 8 * v18);
        v23 = static NSObject.== infix(_:_:)(v22, v15);

        if ((v23 & 1) != 0)
        {
LABEL_17:
          swift_unknownObjectRelease(v15);
          v4 = v45;
          goto LABEL_18;
        }
        v24 = ~v17;
        while (1)
        {
          v18 = (v18 + 1) & v24;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)&v11[8 * (v18 >> 6)];
          v21 = 1 << v18;
          if ((v20 & (1 << v18)) == 0)
            break;
          v25 = *(id *)(v7[6] + 8 * v18);
          v26 = static NSObject.== infix(_:_:)(v25, v15);

          if ((v26 & 1) != 0)
            goto LABEL_17;
        }
        v4 = v45;
      }
      *(_QWORD *)&v11[8 * v19] = v21 | v20;
      *(_QWORD *)(v7[6] + 8 * v18) = v15;
      v27 = v7[2];
      v14 = __OFADD__(v27, 1);
      v28 = v27 + 1;
      if (v14)
        goto LABEL_44;
      v7[2] = v28;
LABEL_18:
      if (v12 == v48)
        return;
    }
  }
  v29 = 0;
  v46 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v29 != v46)
  {
    v30 = v7[5];
    v31 = *(id *)(v4 + 32 + 8 * v29);
    v32 = NSObject._rawHashValue(seed:)(v30);
    v33 = -1 << *((_BYTE *)v7 + 32);
    v34 = v32 & ~v33;
    v35 = v34 >> 6;
    v36 = *(_QWORD *)&v11[8 * (v34 >> 6)];
    v37 = 1 << v34;
    if (((1 << v34) & v36) != 0)
    {
      a3(0);
      v38 = *(id *)(v7[6] + 8 * v34);
      v39 = static NSObject.== infix(_:_:)(v38, v31);

      if ((v39 & 1) != 0)
        goto LABEL_30;
      v40 = ~v33;
      v34 = (v34 + 1) & v40;
      v35 = v34 >> 6;
      v36 = *(_QWORD *)&v11[8 * (v34 >> 6)];
      v37 = 1 << v34;
      if ((v36 & (1 << v34)) != 0)
      {
        while (1)
        {
          v41 = *(id *)(v7[6] + 8 * v34);
          v42 = static NSObject.== infix(_:_:)(v41, v31);

          if ((v42 & 1) != 0)
            break;
          v34 = (v34 + 1) & v40;
          v35 = v34 >> 6;
          v36 = *(_QWORD *)&v11[8 * (v34 >> 6)];
          v37 = 1 << v34;
          if ((v36 & (1 << v34)) == 0)
            goto LABEL_38;
        }
LABEL_30:

        v8 = v48;
        goto LABEL_31;
      }
LABEL_38:
      v8 = v48;
    }
    *(_QWORD *)&v11[8 * v35] = v37 | v36;
    *(_QWORD *)(v7[6] + 8 * v34) = v31;
    v43 = v7[2];
    v14 = __OFADD__(v43, 1);
    v44 = v43 + 1;
    if (v14)
      goto LABEL_45;
    v7[2] = v44;
LABEL_31:
    if (++v29 == v8)
      return;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
}

void *sub_10024BE88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  void *result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;

  v2 = type metadata accessor for Calendar.Component(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v7 = (char *)&v29 - v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    sub_100005574(&qword_100499B20);
    v9 = static _SetStorage.allocate(capacity:)(v8);
    v10 = 0;
    v11 = *(unsigned __int8 *)(v3 + 80);
    v30 = v8;
    v31 = a1 + ((v11 + 32) & ~v11);
    v12 = *(_QWORD *)(v3 + 72);
    v33 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v34 = v9 + 56;
    while (1)
    {
      v32 = v10;
      v33(v7, v31 + v12 * v10, v2);
      v13 = *(_QWORD *)(v9 + 40);
      v14 = sub_100006924(&qword_100499B28, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t)&protocol conformance descriptor for Calendar.Component);
      v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v2, v14);
      v16 = ~(-1 << *(_BYTE *)(v9 + 32));
      v17 = v15 & v16;
      v18 = (v15 & (unint64_t)v16) >> 6;
      v19 = *(_QWORD *)(v34 + 8 * v18);
      v20 = 1 << (v15 & v16);
      if ((v20 & v19) != 0)
      {
        do
        {
          v33(v5, *(_QWORD *)(v9 + 48) + v17 * v12, v2);
          v21 = sub_100006924(&qword_100499B30, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t)&protocol conformance descriptor for Calendar.Component);
          v22 = dispatch thunk of static Equatable.== infix(_:_:)(v5, v7, v2, v21);
          v23 = v3;
          v24 = *(void (**)(char *, uint64_t))(v3 + 8);
          v24(v5, v2);
          if ((v22 & 1) != 0)
          {
            v24(v7, v2);
            v3 = v23;
            v8 = v30;
            goto LABEL_4;
          }
          v17 = (v17 + 1) & v16;
          v18 = v17 >> 6;
          v19 = *(_QWORD *)(v34 + 8 * (v17 >> 6));
          v20 = 1 << v17;
          v3 = v23;
        }
        while ((v19 & (1 << v17)) != 0);
        v8 = v30;
      }
      *(_QWORD *)(v34 + 8 * v18) = v20 | v19;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v9 + 48) + v17 * v12, v7, v2);
      v26 = *(_QWORD *)(v9 + 16);
      v27 = __OFADD__(v26, 1);
      v28 = v26 + 1;
      if (v27)
        break;
      *(_QWORD *)(v9 + 16) = v28;
LABEL_4:
      v10 = v32 + 1;
      if (v32 + 1 == v8)
        return (void *)v9;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

Swift::Int sub_10024C0F0(uint64_t a1)
{
  return sub_10024C0FC(a1, &qword_100499B38);
}

Swift::Int sub_10024C0FC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD v20[9];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100005574(a2);
    v4 = static _SetStorage.allocate(capacity:)(v2);
    v5 = 0;
    v6 = v4 + 56;
    v7 = a1 + 32;
    while (1)
    {
      v8 = *(unsigned __int8 *)(v7 + v5);
      Hasher.init(_seed:)(v20);
      Hasher._combine(_:)(v8);
      result = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v4 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v6 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      v15 = *(_QWORD *)(v4 + 48);
      if (((1 << v11) & v13) != 0)
      {
        if (*(unsigned __int8 *)(v15 + v11) == (_DWORD)v8)
          goto LABEL_3;
        v16 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v16;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v6 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          if (*(unsigned __int8 *)(v15 + v11) == (_DWORD)v8)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v6 + 8 * v12) = v14 | v13;
      *(_BYTE *)(v15 + v11) = v8;
      v17 = *(_QWORD *)(v4 + 16);
      v18 = __OFADD__(v17, 1);
      v19 = v17 + 1;
      if (v18)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v4 + 16) = v19;
LABEL_3:
      if (++v5 == v2)
        return v4;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

unint64_t sub_10024C238()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100499B48;
  if (!qword_100499B48)
  {
    v1 = objc_opt_self(MSVLyricsAgent);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100499B48);
  }
  return result;
}

uint64_t sub_10024C274(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for Logger(0, a2);
  sub_1000086DC(v2, qword_1004A31D8);
  sub_1000086B4(v2, (uint64_t)qword_1004A31D8);
  return static Logger.music(_:)(0x75426C6F626D7953, 0xEC0000006E6F7474);
}

unint64_t SymbolButton.Configuration.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  double v12;
  double v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  int v21;
  Swift::String v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  id v29;
  Swift::String v30;
  Swift::String v31;
  void *v32;
  void *v33;
  void *v34;
  double v35;
  char v36;
  uint64_t v37;
  void *v38;
  double v39;
  uint64_t v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  id v44;
  uint64_t v45;
  void *v46;
  void *v47;
  Swift::String v48;
  Swift::String v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String v55;
  Swift::String v56;
  uint64_t v57;
  Swift::String v58;
  Swift::String v59;
  uint64_t v60;
  Swift::String v61;
  Swift::String v62;
  char v63;
  uint64_t v64;
  Swift::String v65;
  Swift::String v66;
  Swift::String v67;
  Swift::String v68;
  id v69;
  Swift::String v70;
  Swift::String v71;
  Swift::String v72;
  Swift::String v73;
  Swift::String v74;
  Swift::String v75;
  void *v76;
  void *v77;
  void *v78;
  double v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  Swift::String v83;
  Swift::String v84;
  Swift::String v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  Swift::String v89;
  Swift::String v90;
  uint64_t v91;
  Swift::String v92;
  Swift::String v93;
  Swift::String v94;
  Swift::String v95;
  id v96;
  Swift::String v97;
  Swift::String v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  Swift::String v102;
  Swift::String v103;
  Swift::String v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  Swift::String v108;
  void *v109;
  uint64_t v110;
  double v111;
  id v112;
  Swift::String v113;
  Swift::String v114;
  Swift::String v115;
  id v116;
  Swift::String v117;
  Swift::String v118;
  Swift::String v119;
  Swift::String v120;
  Swift::String v121;
  void *v122;
  int v123;
  uint64_t v124;
  id v125;
  id v126;
  Swift::String v127;
  Swift::String v128;
  Swift::String v129;
  int *v130;
  uint64_t v131;
  id v132;
  void (**v133)(char *, uint64_t, id);
  Swift::String v134;
  char *v135;
  char *v136;
  Swift::String v137;
  Swift::String v138;
  void *v139;
  Swift::String v140;
  void *v141;
  void *v142;
  void *v143;
  uint64_t v144;
  id v145;
  Swift::String v146;
  id v147;
  id v148;
  id v149;
  uint64_t v150;
  void *v151;
  void *v152;
  Swift::String v153;
  Swift::String v154;
  id v155;
  id v156;
  id v157;
  uint64_t v158;
  void *v159;
  void *v160;
  Swift::String v161;
  Swift::String v162;
  void (**v163)(char *, uint64_t, id);
  void (**v164)(char *, uint64_t, id);
  id v165;
  uint64_t v166;
  void *v167;
  void *v168;
  Swift::String v169;
  Swift::String v170;
  Swift::String v171;
  Swift::String v172;
  Swift::String v173;
  Swift::String v174;
  Swift::String v175;
  uint64_t v176;
  void *v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  id v184;
  id v185;
  Swift::String v186;
  Swift::String v187;
  uint64_t v188;
  Swift::String v189;
  uint64_t *v190;
  void *v191;
  Swift::String v192;
  uint64_t v193;
  uint64_t v194;
  double v195;
  id v196;
  Swift::String v197;
  Swift::String v198;
  Swift::String v199;
  Swift::String v200;
  Swift::String v201;
  id v202;
  Swift::String v203;
  Swift::String v204;
  Swift::String v205;
  unsigned __int8 *v206;
  int v207;
  void *v208;
  void *v209;
  int v210;
  Swift::String v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  Swift::String v215;
  id v216;
  uint64_t v217;
  uint64_t v218;
  id v219;
  Swift::String v220;
  Swift::String v221;
  id v222;
  uint64_t v223;
  uint64_t v224;
  id v225;
  Swift::String v226;
  Swift::String v227;
  Swift::String v228;
  Swift::String v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  Swift::String v233;
  Swift::String v234;
  Swift::String v235;
  uint64_t v237;
  void *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  id v243;
  char *v244;
  char *v245;
  uint64_t v246;
  void (**v247)(char *, uint64_t, id);
  id v248;
  uint64_t v249;
  int *v250;
  Swift::String v251;
  __int128 v252;
  uint64_t v253;
  uint64_t v254;
  void *v255;
  Swift::String v256;
  unint64_t v257;
  unint64_t v258;

  v1 = v0;
  sub_100005574(&qword_1004A1050);
  __chkstk_darwin();
  v246 = (uint64_t)&v237 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = (_QWORD *)type metadata accessor for UIView.Corner(0);
  v247 = (void (**)(char *, uint64_t, id))*(v3 - 1);
  v248 = v3;
  __chkstk_darwin();
  v244 = (char *)&v237 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v245 = (char *)&v237 - v5;
  v257 = 0xD00000000000001CLL;
  v258 = 0x80000001003B7F00;
  v251._countAndFlagsBits = 0;
  v251._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  v251._countAndFlagsBits = 0xD000000000000017;
  v251._object = (void *)0x80000001003B7F20;
  v6 = (int *)type metadata accessor for SymbolButton.Configuration(0);
  v7._countAndFlagsBits = Double.description.getter(*(double *)(v0 + v6[12]));
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 10;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  String.append(_:)(v251);
  swift_bridgeObjectRelease();
  v251._countAndFlagsBits = 0;
  v251._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v251._countAndFlagsBits = 0x6D756D696E696D20;
  v251._object = (void *)0xEF203A20657A6953;
  v9._countAndFlagsBits = CGSize.description.getter(*(double *)(v1 + v6[13]), *(double *)(v1 + v6[13] + 8));
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 10;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  String.append(_:)(v251);
  swift_bridgeObjectRelease();
  v11 = v0 + v6[14];
  if ((*(_BYTE *)(v11 + 16) & 1) == 0)
  {
    v13 = *(double *)v11;
    v12 = *(double *)(v11 + 8);
    v251._countAndFlagsBits = 0;
    v251._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    v251._countAndFlagsBits = 0xD000000000000014;
    v251._object = (void *)0x80000001003B82E0;
    v14._countAndFlagsBits = CGSize.description.getter(v13, v12);
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 10;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
  }
  v251._countAndFlagsBits = 0;
  v251._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  v256._countAndFlagsBits = 0xD000000000000011;
  v256._object = (void *)0x80000001003B7F40;
  v16 = v0 + v6[15];
  v17 = *(_OWORD *)(v16 + 16);
  v251 = *(Swift::String *)v16;
  v252 = v17;
  _s3__C23NSDirectionalEdgeInsetsVMa_0(0);
  v19._countAndFlagsBits = String.init<A>(describing:)(&v251, v18);
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 10;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  String.append(_:)(v256);
  swift_bridgeObjectRelease();
  v21 = *(unsigned __int8 *)(v0 + v6[19]);
  if (v21 == 2)
  {
    v22._countAndFlagsBits = 0xD00000000000001ALL;
    v22._object = (void *)0x80000001003B7F60;
    String.append(_:)(v22);
  }
  else
  {
    v251._countAndFlagsBits = 0;
    v251._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease();
    v251._countAndFlagsBits = 0xD000000000000010;
    v251._object = (void *)0x80000001003B82C0;
    if ((v21 & 1) != 0)
      v23 = 1702195828;
    else
      v23 = 0x65736C6166;
    if ((v21 & 1) != 0)
      v24 = 0xE400000000000000;
    else
      v24 = 0xE500000000000000;
    v25 = v24;
    String.append(_:)(*(Swift::String *)&v23);
    swift_bridgeObjectRelease();
    v26._countAndFlagsBits = 10;
    v26._object = (void *)0xE100000000000000;
    String.append(_:)(v26);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
  }
  v251._countAndFlagsBits = 0x3A206168706C6120;
  v251._object = (void *)0xE900000000000020;
  v27._countAndFlagsBits = Double.description.getter(*(double *)(v0 + v6[17]));
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = 10;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  String.append(_:)(v251);
  swift_bridgeObjectRelease();
  v251._countAndFlagsBits = 0x203A20746E697420;
  v251._object = (void *)0xE800000000000000;
  v250 = v6;
  v256._countAndFlagsBits = *(_QWORD *)(v0 + v6[18]);
  v29 = (id)v256._countAndFlagsBits;
  v249 = sub_100005574(&qword_100499758);
  v30._countAndFlagsBits = String.init<A>(describing:)(&v256, v249);
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._countAndFlagsBits = 10;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  String.append(_:)(v251);
  swift_bridgeObjectRelease();
  v32 = *(void **)(v0 + 8);
  if (v32)
  {
    v33 = *(void **)(v0 + 16);
    v34 = *(void **)(v0 + 24);
    v35 = *(double *)(v0 + 32);
    v36 = *(_BYTE *)(v0 + 40);
    v37 = *(_QWORD *)(v0 + 48);
    v241 = *(_QWORD *)(v0 + 56);
    v239 = *(_QWORD *)(v0 + 64);
    v238 = *(void **)(v0 + 72);
    LODWORD(v242) = *(unsigned __int8 *)(v0 + 80);
    v38 = *(void **)(v0 + 96);
    v240 = *(_QWORD *)(v0 + 88);
    v39 = *(double *)(v0 + 104);
    v243 = *(id *)(v0 + 112);
    v40 = *(_QWORD *)v0;
    swift_bridgeObjectRetain();
    v41._countAndFlagsBits = 0x6D7953209480E220;
    v41._object = (void *)0xAE000A7B206C6F62;
    String.append(_:)(v41);
    v251._countAndFlagsBits = 0x656D616E20202020;
    v251._object = (void *)0xEB00000000203A20;
    v42._countAndFlagsBits = v40;
    v42._object = v32;
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    v43._countAndFlagsBits = 10;
    v43._object = (void *)0xE100000000000000;
    String.append(_:)(v43);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    if (v33)
    {
      v44 = objc_msgSend(v33, "bundlePath");
      v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
      v47 = v46;

      v251._countAndFlagsBits = 0;
      v251._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      strcpy((char *)&v251, "    bundle : ");
      HIWORD(v251._object) = -4864;
      v48._countAndFlagsBits = v45;
      v48._object = v47;
      String.append(_:)(v48);
      swift_bridgeObjectRelease();
      v49._countAndFlagsBits = 10;
      v49._object = (void *)0xE100000000000000;
      String.append(_:)(v49);
      String.append(_:)(v251);
      swift_bridgeObjectRelease();
    }
    strcpy((char *)&v251, "    style : ");
    BYTE5(v251._object) = 0;
    HIWORD(v251._object) = -5120;
    v256._countAndFlagsBits = (uint64_t)v34;
    type metadata accessor for TextStyle(0);
    v51 = v50;
    v52 = v34;
    v53._countAndFlagsBits = String.init<A>(describing:)(&v256, v51);
    String.append(_:)(v53);
    swift_bridgeObjectRelease();
    v54._countAndFlagsBits = 10;
    v54._object = (void *)0xE100000000000000;
    String.append(_:)(v54);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    if ((v36 & 1) == 0)
    {
      v251._countAndFlagsBits = 0;
      v251._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease();
      v251._countAndFlagsBits = 0xD000000000000014;
      v251._object = (void *)0x80000001003B82A0;
      v55._countAndFlagsBits = Double.description.getter(v35);
      String.append(_:)(v55);
      swift_bridgeObjectRelease();
      v56._countAndFlagsBits = 10;
      v56._object = (void *)0xE100000000000000;
      String.append(_:)(v56);
      String.append(_:)(v251);
      swift_bridgeObjectRelease();
    }
    v251._countAndFlagsBits = 0;
    v251._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    strcpy((char *)&v251, "    weight : ");
    HIWORD(v251._object) = -4864;
    v256._countAndFlagsBits = v37;
    type metadata accessor for SymbolWeight(0);
    v58._countAndFlagsBits = String.init<A>(describing:)(&v256, v57);
    String.append(_:)(v58);
    swift_bridgeObjectRelease();
    v59._countAndFlagsBits = 10;
    v59._object = (void *)0xE100000000000000;
    String.append(_:)(v59);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    strcpy((char *)&v251, "    scale : ");
    BYTE5(v251._object) = 0;
    HIWORD(v251._object) = -5120;
    v256._countAndFlagsBits = v241;
    type metadata accessor for SymbolScale(0);
    v61._countAndFlagsBits = String.init<A>(describing:)(&v256, v60);
    String.append(_:)(v61);
    swift_bridgeObjectRelease();
    v62._countAndFlagsBits = 10;
    v62._object = (void *)0xE100000000000000;
    String.append(_:)(v62);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    v63 = v242;
    if ((_DWORD)v242 != 255)
    {
      v251._countAndFlagsBits = 0;
      v251._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      strcpy((char *)&v256, "    offset : ");
      HIWORD(v256._object) = -4864;
      v251._countAndFlagsBits = v239;
      v251._object = v238;
      LOBYTE(v252) = v63 & 1;
      v64 = sub_100005574(&qword_1004A1570);
      v65._countAndFlagsBits = String.init<A>(describing:)(&v251, v64);
      String.append(_:)(v65);
      swift_bridgeObjectRelease();
      v66._countAndFlagsBits = 10;
      v66._object = (void *)0xE100000000000000;
      String.append(_:)(v66);
      String.append(_:)(v256);
      swift_bridgeObjectRelease();
    }
    strcpy((char *)&v251, "    alpha : ");
    BYTE5(v251._object) = 0;
    HIWORD(v251._object) = -5120;
    v67._countAndFlagsBits = Double.description.getter(v39);
    String.append(_:)(v67);
    swift_bridgeObjectRelease();
    v68._countAndFlagsBits = 10;
    v68._object = (void *)0xE100000000000000;
    String.append(_:)(v68);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    v251._countAndFlagsBits = 0x746E697420202020;
    v251._object = (void *)0xEB00000000203A20;
    v256._countAndFlagsBits = (uint64_t)v243;
    v69 = v243;
    v70._countAndFlagsBits = String.init<A>(describing:)(&v256, v249);
    String.append(_:)(v70);
    swift_bridgeObjectRelease();
    v71._countAndFlagsBits = 10;
    v71._object = (void *)0xE100000000000000;
    String.append(_:)(v71);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    if (v38)
    {
      v251._countAndFlagsBits = 0;
      v251._object = (void *)0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      v251._countAndFlagsBits = 0xD000000000000018;
      v251._object = (void *)0x80000001003B8280;
      v72._countAndFlagsBits = v240;
      v72._object = v38;
      String.append(_:)(v72);
      swift_bridgeObjectRelease();
      v73._countAndFlagsBits = 10;
      v73._object = (void *)0xE100000000000000;
      String.append(_:)(v73);
      String.append(_:)(v251);
      swift_bridgeObjectRelease();
    }
    v74._countAndFlagsBits = 687392;
    v74._object = (void *)0xE300000000000000;
    String.append(_:)(v74);
  }
  else
  {
    v75._object = (void *)0x80000001003B7F80;
    v75._countAndFlagsBits = 0x1000000000000012;
    String.append(_:)(v75);
  }
  v76 = *(void **)(v1 + 128);
  if (v76)
  {
    v77 = *(void **)(v1 + 160);
    v242 = *(_QWORD *)(v1 + 152);
    LODWORD(v243) = *(unsigned __int8 *)(v1 + 184);
    v78 = *(void **)(v1 + 176);
    v79 = *(double *)(v1 + 168);
    v80 = *(_QWORD *)(v1 + 144);
    v81 = *(void **)(v1 + 136);
    v82 = *(_QWORD *)(v1 + 120);
    swift_bridgeObjectRetain();
    v83._object = (void *)0xAD00000A7B20656CLL;
    v83._countAndFlagsBits = 0x746954209480E220;
    String.append(_:)(v83);
    v251._countAndFlagsBits = 0x7478657420202020;
    v251._object = (void *)0xEB00000000203A20;
    v84._countAndFlagsBits = v82;
    v84._object = v76;
    String.append(_:)(v84);
    swift_bridgeObjectRelease();
    v85._countAndFlagsBits = 10;
    v85._object = (void *)0xE100000000000000;
    String.append(_:)(v85);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    strcpy((char *)&v251, "    style : ");
    BYTE5(v251._object) = 0;
    HIWORD(v251._object) = -5120;
    v256._countAndFlagsBits = (uint64_t)v81;
    type metadata accessor for TextStyle(0);
    v87 = v86;
    v88 = v81;
    v89._countAndFlagsBits = String.init<A>(describing:)(&v256, v87);
    String.append(_:)(v89);
    swift_bridgeObjectRelease();
    v90._countAndFlagsBits = 10;
    v90._object = (void *)0xE100000000000000;
    String.append(_:)(v90);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    v251._countAndFlagsBits = 0;
    v251._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    strcpy((char *)&v251, "    weight : ");
    HIWORD(v251._object) = -4864;
    v256._countAndFlagsBits = v80;
    type metadata accessor for Weight(0);
    v92._countAndFlagsBits = String.init<A>(describing:)(&v256, v91);
    String.append(_:)(v92);
    swift_bridgeObjectRelease();
    v93._countAndFlagsBits = 10;
    v93._object = (void *)0xE100000000000000;
    String.append(_:)(v93);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    strcpy((char *)&v251, "    alpha : ");
    BYTE5(v251._object) = 0;
    HIWORD(v251._object) = -5120;
    v94._countAndFlagsBits = Double.description.getter(v79);
    String.append(_:)(v94);
    swift_bridgeObjectRelease();
    v95._countAndFlagsBits = 10;
    v95._object = (void *)0xE100000000000000;
    String.append(_:)(v95);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    v251._countAndFlagsBits = 0x746E697420202020;
    v251._object = (void *)0xEB00000000203A20;
    v256._countAndFlagsBits = (uint64_t)v78;
    v96 = v78;
    v97._countAndFlagsBits = String.init<A>(describing:)(&v256, v249);
    String.append(_:)(v97);
    swift_bridgeObjectRelease();
    v98._countAndFlagsBits = 10;
    v98._object = (void *)0xE100000000000000;
    String.append(_:)(v98);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    v251._countAndFlagsBits = 0;
    v251._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    strcpy((char *)&v251, "    hidden : ");
    HIWORD(v251._object) = -4864;
    if ((_DWORD)v243)
      v99 = 1702195828;
    else
      v99 = 0x65736C6166;
    if ((_DWORD)v243)
      v100 = 0xE400000000000000;
    else
      v100 = 0xE500000000000000;
    v101 = v100;
    String.append(_:)(*(Swift::String *)&v99);
    swift_bridgeObjectRelease();
    v102._countAndFlagsBits = 10;
    v102._object = (void *)0xE100000000000000;
    String.append(_:)(v102);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    if (v77)
    {
      v251._countAndFlagsBits = 0;
      v251._object = (void *)0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      v251._countAndFlagsBits = 0xD000000000000018;
      v251._object = (void *)0x80000001003B8280;
      v103._countAndFlagsBits = v242;
      v103._object = v77;
      String.append(_:)(v103);
      swift_bridgeObjectRelease();
      v104._countAndFlagsBits = 10;
      v104._object = (void *)0xE100000000000000;
      String.append(_:)(v104);
      String.append(_:)(v251);
      swift_bridgeObjectRelease();
    }
    v105 = 687392;
    v106 = 0xE300000000000000;
  }
  else
  {
    v105 = 0x1000000000000011;
    v106 = 0x80000001003B7FA0;
  }
  String.append(_:)(*(Swift::String *)&v105);
  v107 = *(void **)(v1 + 200);
  if (v107 == (void *)1)
  {
    v108._countAndFlagsBits = 0x1000000000000016;
    v108._object = (void *)0x80000001003B7FC0;
    String.append(_:)(v108);
  }
  else
  {
    v110 = *(_QWORD *)(v1 + 208);
    v109 = *(void **)(v1 + 216);
    v111 = *(double *)(v1 + 192);
    swift_bridgeObjectRetain();
    v112 = v107;
    v113._object = (void *)0x80000001003B8260;
    v113._countAndFlagsBits = 0x1000000000000012;
    String.append(_:)(v113);
    strcpy((char *)&v251, "    alpha : ");
    BYTE5(v251._object) = 0;
    HIWORD(v251._object) = -5120;
    v114._countAndFlagsBits = Double.description.getter(v111);
    String.append(_:)(v114);
    swift_bridgeObjectRelease();
    v115._countAndFlagsBits = 10;
    v115._object = (void *)0xE100000000000000;
    String.append(_:)(v115);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    v251._countAndFlagsBits = 0x746E697420202020;
    v251._object = (void *)0xEB00000000203A20;
    v256._countAndFlagsBits = (uint64_t)v107;
    v116 = v112;
    v117._countAndFlagsBits = String.init<A>(describing:)(&v256, v249);
    String.append(_:)(v117);
    swift_bridgeObjectRelease();
    v118._countAndFlagsBits = 10;
    v118._object = (void *)0xE100000000000000;
    String.append(_:)(v118);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    if (v109)
    {
      v251._countAndFlagsBits = 0;
      v251._object = (void *)0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      v251._countAndFlagsBits = 0xD000000000000018;
      v251._object = (void *)0x80000001003B8280;
      v119._countAndFlagsBits = v110;
      v119._object = v109;
      String.append(_:)(v119);
      swift_bridgeObjectRelease();
      v120._countAndFlagsBits = 10;
      v120._object = (void *)0xE100000000000000;
      String.append(_:)(v120);
      String.append(_:)(v251);
      swift_bridgeObjectRelease();
    }
    v121._countAndFlagsBits = 687392;
    v121._object = (void *)0xE300000000000000;
    String.append(_:)(v121);
    swift_bridgeObjectRelease();

  }
  v122 = *(void **)(v1 + 288);
  if (v122)
  {
    v123 = *(_DWORD *)(v1 + 280);
    v124 = *(_QWORD *)(v1 + 272);
    v251._countAndFlagsBits = 0;
    v251._object = (void *)0xE000000000000000;
    v125 = v122;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    v256._countAndFlagsBits = 0x726F42209480E220;
    v256._object = (void *)0xAE00203A20726564;
    v251._countAndFlagsBits = v124;
    LOBYTE(v251._object) = v123 & 1;
    *(_QWORD *)&v252 = v125;
    v126 = v125;
    v127._countAndFlagsBits = String.init<A>(describing:)(&v251, &type metadata for UIView.Border);
    String.append(_:)(v127);
    swift_bridgeObjectRelease();
    v128._countAndFlagsBits = 10;
    v128._object = (void *)0xE100000000000000;
    String.append(_:)(v128);
    String.append(_:)(v256);

    swift_bridgeObjectRelease();
  }
  else
  {
    v129._object = (void *)0x80000001003B7FE0;
    v129._countAndFlagsBits = 0x1000000000000012;
    String.append(_:)(v129);
  }
  v130 = v250;
  v131 = v246;
  sub_10024DE28(v1 + v250[9], v246);
  v133 = v247;
  v132 = v248;
  if (((unsigned int (*)(uint64_t, uint64_t, id))v247[6])(v131, 1, v248) == 1)
  {
    sub_10024DE70(v131);
    v134._object = (void *)0x80000001003B8000;
    v134._countAndFlagsBits = 0x1000000000000012;
    String.append(_:)(v134);
  }
  else
  {
    v135 = v245;
    v133[4](v245, v131, v132);
    v251._countAndFlagsBits = 0;
    v251._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    v251._countAndFlagsBits = 0x726F43209480E220;
    v251._object = (void *)0xAE00203A2072656ELL;
    v136 = v244;
    v133[2](v244, (uint64_t)v135, v132);
    v137._countAndFlagsBits = String.init<A>(describing:)(v136, v132);
    String.append(_:)(v137);
    swift_bridgeObjectRelease();
    v138._countAndFlagsBits = 10;
    v138._object = (void *)0xE100000000000000;
    String.append(_:)(v138);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    ((void (*)(char *, id))v133[1])(v135, v132);
  }
  v139 = *(void **)(v1 + 224);
  if (v139 == (void *)1)
  {
    v140._countAndFlagsBits = 0x1000000000000014;
    v140._object = (void *)0x80000001003B8020;
    String.append(_:)(v140);
  }
  else
  {
    v142 = *(void **)(v1 + 232);
    v141 = *(void **)(v1 + 240);
    v143 = *(void **)(v1 + 264);
    v246 = *(_QWORD *)(v1 + 256);
    v144 = *(unsigned __int8 *)(v1 + 248);
    swift_bridgeObjectRetain();
    v145 = v139;
    v248 = v142;
    v247 = v141;
    v146._countAndFlagsBits = 0x1000000000000010;
    v146._object = (void *)0x80000001003B81E0;
    String.append(_:)(v146);
    if (v139)
    {
      v251._countAndFlagsBits = 0;
      v251._object = (void *)0xE000000000000000;
      v147 = v145;
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      v251._countAndFlagsBits = 0xD000000000000017;
      v251._object = (void *)0x80000001003B8240;
      v148 = v147;
      v149 = objc_msgSend(v148, "description");
      v150 = static String._unconditionallyBridgeFromObjectiveC(_:)(v149);
      v152 = v151;

      v153._countAndFlagsBits = v150;
      v153._object = v152;
      String.append(_:)(v153);
      swift_bridgeObjectRelease();
      v154._countAndFlagsBits = 10;
      v154._object = (void *)0xE100000000000000;
      String.append(_:)(v154);
      String.append(_:)(v251);

      swift_bridgeObjectRelease();
    }
    if (v142)
    {
      v251._countAndFlagsBits = 0;
      v251._object = (void *)0xE000000000000000;
      v155 = v248;
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      v251._countAndFlagsBits = 0xD000000000000017;
      v251._object = (void *)0x80000001003B8220;
      v156 = v155;
      v157 = objc_msgSend(v156, "description");
      v158 = static String._unconditionallyBridgeFromObjectiveC(_:)(v157);
      v160 = v159;

      v161._countAndFlagsBits = v158;
      v161._object = v160;
      String.append(_:)(v161);
      swift_bridgeObjectRelease();
      v162._countAndFlagsBits = 10;
      v162._object = (void *)0xE100000000000000;
      String.append(_:)(v162);
      String.append(_:)(v251);

      swift_bridgeObjectRelease();
    }
    if (v141)
    {
      v251._countAndFlagsBits = 0;
      v251._object = (void *)0xE000000000000000;
      v163 = v247;
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease();
      v251._countAndFlagsBits = 0xD000000000000014;
      v251._object = (void *)0x80000001003B8200;
      v164 = v163;
      v165 = objc_msgSend(v164, "description");
      v166 = static String._unconditionallyBridgeFromObjectiveC(_:)(v165);
      v168 = v167;

      v169._countAndFlagsBits = v166;
      v169._object = v168;
      String.append(_:)(v169);
      swift_bridgeObjectRelease();
      v170._countAndFlagsBits = 10;
      v170._object = (void *)0xE100000000000000;
      String.append(_:)(v170);
      String.append(_:)(v251);

      swift_bridgeObjectRelease();
    }
    v130 = v250;
    if (v144 != 2)
    {
      strcpy((char *)&v251, "    color : ");
      BYTE5(v251._object) = 0;
      HIWORD(v251._object) = -5120;
      LOBYTE(v256._countAndFlagsBits) = v144 & 1;
      v171._countAndFlagsBits = String.init<A>(describing:)(&v256, &type metadata for SymbolButton.Material.Color);
      String.append(_:)(v171);
      swift_bridgeObjectRelease();
      v172._countAndFlagsBits = 10;
      v172._object = (void *)0xE100000000000000;
      String.append(_:)(v172);
      String.append(_:)(v251);
      swift_bridgeObjectRelease();
    }
    if (v143)
    {
      strcpy((char *)&v251, "    group : ");
      BYTE5(v251._object) = 0;
      HIWORD(v251._object) = -5120;
      swift_bridgeObjectRetain();
      v173._countAndFlagsBits = v246;
      v173._object = v143;
      String.append(_:)(v173);
      swift_bridgeObjectRelease();
      v174._countAndFlagsBits = 10;
      v174._object = (void *)0xE100000000000000;
      String.append(_:)(v174);
      String.append(_:)(v251);
      swift_bridgeObjectRelease();
    }
    v175._countAndFlagsBits = 687392;
    v175._object = (void *)0xE300000000000000;
    String.append(_:)(v175);
    swift_bridgeObjectRelease();

  }
  v176 = v1 + v130[10];
  v177 = *(void **)v176;
  if (*(_QWORD *)v176)
  {
    v179 = *(_QWORD *)(v176 + 40);
    v178 = *(void **)(v176 + 48);
    v181 = *(_QWORD *)(v176 + 24);
    v180 = *(_QWORD *)(v176 + 32);
    v182 = *(void **)(v176 + 8);
    v183 = *(_QWORD *)(v176 + 16);
    v251._countAndFlagsBits = 0;
    v251._object = (void *)0xE000000000000000;
    sub_10024DEC0(v177, (uint64_t)v182, v183, v181, v180, v179, v178);
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    v256._countAndFlagsBits = 0x1000000000000013;
    v256._object = (void *)0x80000001003B81C0;
    v251._countAndFlagsBits = (uint64_t)v177;
    v251._object = v182;
    *(_QWORD *)&v252 = v183;
    *((_QWORD *)&v252 + 1) = v181;
    v253 = v180;
    v254 = v179;
    v255 = v178;
    v184 = v178;
    v185 = v177;
    v186._countAndFlagsBits = String.init<A>(describing:)(&v251, &type metadata for SymbolButton.CustomView);
    String.append(_:)(v186);
    swift_bridgeObjectRelease();
    v187._countAndFlagsBits = 10;
    v187._object = (void *)0xE100000000000000;
    String.append(_:)(v187);
    String.append(_:)(v256);
    swift_bridgeObjectRelease();
    v188 = v179;
    v130 = v250;
    sub_10024613C(v177, (uint64_t)v182, v183, v181, v180, v188, v178);
  }
  else
  {
    v189._countAndFlagsBits = 0x1000000000000017;
    v189._object = (void *)0x80000001003B8040;
    String.append(_:)(v189);
  }
  v190 = (uint64_t *)(v1 + v130[11]);
  v191 = (void *)v190[2];
  if (v191 == (void *)1)
  {
    v192._countAndFlagsBits = 0x1000000000000011;
    v192._object = (void *)0x80000001003B8060;
    String.append(_:)(v192);
  }
  else
  {
    v194 = *v190;
    v193 = v190[1];
    v195 = *(double *)v190;
    v196 = v191;
    v197._countAndFlagsBits = 0x646142209480E220;
    v197._object = (void *)0xAD00000A7B206567;
    String.append(_:)(v197);
    v251._countAndFlagsBits = 0;
    v251._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    v251._countAndFlagsBits = 0xD000000000000014;
    v251._object = (void *)0x80000001003B81A0;
    v198._countAndFlagsBits = Double.description.getter(v195);
    String.append(_:)(v198);
    swift_bridgeObjectRelease();
    v199._countAndFlagsBits = 10;
    v199._object = (void *)0xE100000000000000;
    String.append(_:)(v199);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    strcpy((char *)&v251, "    alpha : ");
    BYTE5(v251._object) = 0;
    HIWORD(v251._object) = -5120;
    v200._countAndFlagsBits = Double.description.getter(*(double *)&v193);
    String.append(_:)(v200);
    swift_bridgeObjectRelease();
    v201._countAndFlagsBits = 10;
    v201._object = (void *)0xE100000000000000;
    String.append(_:)(v201);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    v251._countAndFlagsBits = 0x746E697420202020;
    v251._object = (void *)0xEB00000000203A20;
    v256._countAndFlagsBits = (uint64_t)v191;
    v202 = v196;
    v203._countAndFlagsBits = String.init<A>(describing:)(&v256, v249);
    String.append(_:)(v203);
    swift_bridgeObjectRelease();
    v204._countAndFlagsBits = 10;
    v204._object = (void *)0xE100000000000000;
    String.append(_:)(v204);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    v205._countAndFlagsBits = 687392;
    v205._object = (void *)0xE300000000000000;
    String.append(_:)(v205);
    sub_10024DEB0(v194, v193, v191);
  }
  v206 = (unsigned __int8 *)(v1 + v250[16]);
  v207 = *v206;
  v208 = (void *)*((_QWORD *)v206 + 1);
  v209 = (void *)*((_QWORD *)v206 + 2);
  v210 = v206[24];
  v211._countAndFlagsBits = 0x1000000000000015;
  v211._object = (void *)0x80000001003B8080;
  String.append(_:)(v211);
  v251._countAndFlagsBits = 0;
  v251._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  v251._countAndFlagsBits = 0xD00000000000001BLL;
  v251._object = (void *)0x80000001003B80A0;
  if (v207)
    v212 = 1702195828;
  else
    v212 = 0x65736C6166;
  if (v207)
    v213 = 0xE400000000000000;
  else
    v213 = 0xE500000000000000;
  v214 = v213;
  String.append(_:)(*(Swift::String *)&v212);
  swift_bridgeObjectRelease();
  v215._countAndFlagsBits = 10;
  v215._object = (void *)0xE100000000000000;
  String.append(_:)(v215);
  String.append(_:)(v251);
  swift_bridgeObjectRelease();
  if (v208)
  {
    v251._countAndFlagsBits = 0;
    v251._object = (void *)0xE000000000000000;
    v216 = v208;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    v251._countAndFlagsBits = 0xD000000000000021;
    v251._object = (void *)0x80000001003B8170;
    v256._countAndFlagsBits = (uint64_t)v216;
    type metadata accessor for UIContentSizeCategory(0);
    v218 = v217;
    v219 = v216;
    v220._countAndFlagsBits = String.init<A>(describing:)(&v256, v218);
    String.append(_:)(v220);
    swift_bridgeObjectRelease();
    v221._countAndFlagsBits = 10;
    v221._object = (void *)0xE100000000000000;
    String.append(_:)(v221);
    String.append(_:)(v251);

    swift_bridgeObjectRelease();
    if (v209)
    {
LABEL_72:
      v251._countAndFlagsBits = 0;
      v251._object = (void *)0xE000000000000000;
      v222 = v209;
      _StringGuts.grow(_:)(36);
      swift_bridgeObjectRelease();
      v251._countAndFlagsBits = 0xD000000000000021;
      v251._object = (void *)0x80000001003B8140;
      v256._countAndFlagsBits = (uint64_t)v222;
      type metadata accessor for UIContentSizeCategory(0);
      v224 = v223;
      v225 = v222;
      v226._countAndFlagsBits = String.init<A>(describing:)(&v256, v224);
      String.append(_:)(v226);
      swift_bridgeObjectRelease();
      v227._countAndFlagsBits = 10;
      v227._object = (void *)0xE100000000000000;
      String.append(_:)(v227);
      String.append(_:)(v251);

      swift_bridgeObjectRelease();
      goto LABEL_75;
    }
  }
  else
  {
    v228._countAndFlagsBits = 0xD00000000000002DLL;
    v228._object = (void *)0x80000001003B80C0;
    String.append(_:)(v228);
    if (v209)
      goto LABEL_72;
  }
  v229._countAndFlagsBits = 0xD00000000000002DLL;
  v229._object = (void *)0x80000001003B80F0;
  String.append(_:)(v229);
LABEL_75:
  v251._countAndFlagsBits = 0;
  v251._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v251._countAndFlagsBits = 0xD00000000000001ELL;
  v251._object = (void *)0x80000001003B8120;
  if (v210)
    v230 = 1702195828;
  else
    v230 = 0x65736C6166;
  if (v210)
    v231 = 0xE400000000000000;
  else
    v231 = 0xE500000000000000;
  v232 = v231;
  String.append(_:)(*(Swift::String *)&v230);
  swift_bridgeObjectRelease();
  v233._countAndFlagsBits = 10;
  v233._object = (void *)0xE100000000000000;
  String.append(_:)(v233);
  String.append(_:)(v251);
  swift_bridgeObjectRelease();
  v234._countAndFlagsBits = 687392;
  v234._object = (void *)0xE300000000000000;
  String.append(_:)(v234);
  v235._countAndFlagsBits = 41;
  v235._object = (void *)0xE100000000000000;
  String.append(_:)(v235);
  return v257;
}

uint64_t sub_10024DE28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005574(&qword_1004A1050);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10024DE70(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005574(&qword_1004A1050);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10024DEB0(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3 != (void *)1)

}

id sub_10024DEC0(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v7;
  id v8;

  if (result)
  {
    v8 = result;
    v7 = a7;
    return v8;
  }
  return result;
}

void sub_10024DEF0(uint64_t a1)
{
  sub_100240408(a1, (uint64_t)sub_10024DF0C, (uint64_t)&unk_10045BE28, &static UIColor.MusicTint.normal);
}

id sub_10024DF0C(void *a1)
{
  id v2;
  id v3;
  id v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id result;

  v2 = objc_msgSend(a1, "userInterfaceStyle");
  v3 = objc_msgSend(a1, "accessibilityContrast");
  v4 = v3;
  if (!v2)
    goto LABEL_6;
  if (v2 == (id)2)
  {
    sub_10024EA50();
    v5 = 1.0;
    v6 = 250;
    if (v4 == (id)1)
    {
      v7 = 88;
      v8 = 106;
    }
    else
    {
      v7 = 45;
      v8 = 72;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  if (v2 == (id)1)
  {
LABEL_6:
    if (v3 == (id)1)
    {
      sub_10024EA50();
      v5 = 1.0;
      v6 = 204;
      v7 = 0;
      v8 = 20;
    }
    else
    {
      sub_10024EA50();
      v5 = 1.0;
      v6 = 250;
      v7 = 35;
      v8 = 59;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  result = (id)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000062, 0x80000001003B8320, "MusicCoreUI/TintColor.swift", 27, 2, 23, 0);
  __break(1u);
  return result;
}

uint64_t *UIColor.MusicTint.normal.unsafeMutableAddressor()
{
  if (qword_100498920 != -1)
    swift_once(&qword_100498920, sub_10024DEF0);
  return &static UIColor.MusicTint.normal;
}

id static UIColor.MusicTint.normal.getter()
{
  return sub_1000B8EAC(&qword_100498920, (id *)&static UIColor.MusicTint.normal);
}

void sub_10024E08C(uint64_t a1)
{
  sub_100240408(a1, (uint64_t)sub_10024E0A8, (uint64_t)&unk_10045BE00, &static UIColor.MusicTint.rollover);
}

id sub_10024E0A8(void *a1)
{
  id v2;
  id v3;
  id v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id result;

  v2 = objc_msgSend(a1, "userInterfaceStyle");
  v3 = objc_msgSend(a1, "accessibilityContrast");
  v4 = v3;
  if (!v2)
    goto LABEL_6;
  if (v2 == (id)2)
  {
    sub_10024EA50();
    v5 = 1.0;
    v6 = 255;
    if (v4 == (id)1)
    {
      v7 = 138;
      v8 = 156;
    }
    else
    {
      v7 = 95;
      v8 = 122;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  if (v2 == (id)1)
  {
LABEL_6:
    if (v3 == (id)1)
    {
      sub_10024EA50();
      v5 = 1.0;
      v6 = 162;
      v7 = 0;
      v8 = 0;
    }
    else
    {
      sub_10024EA50();
      v5 = 1.0;
      v6 = 198;
      v7 = 0;
      v8 = 7;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  result = (id)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000062, 0x80000001003B8320, "MusicCoreUI/TintColor.swift", 27, 2, 32, 0);
  __break(1u);
  return result;
}

_QWORD *UIColor.MusicTint.rollover.unsafeMutableAddressor()
{
  if (qword_100498928 != -1)
    swift_once(&qword_100498928, sub_10024E08C);
  return &static UIColor.MusicTint.rollover;
}

id static UIColor.MusicTint.rollover.getter()
{
  return sub_1000B8EAC(&qword_100498928, (id *)&static UIColor.MusicTint.rollover);
}

void sub_10024E228(uint64_t a1)
{
  sub_100240408(a1, (uint64_t)sub_10024E244, (uint64_t)&unk_10045BDD8, &static UIColor.MusicTint.pressed);
}

id sub_10024E244(void *a1)
{
  id v2;
  id v3;
  id v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id result;

  v2 = objc_msgSend(a1, "userInterfaceStyle");
  v3 = objc_msgSend(a1, "accessibilityContrast");
  v4 = v3;
  if (!v2)
    goto LABEL_6;
  if (v2 == (id)2)
  {
    sub_10024EA50();
    v5 = 1.0;
    v6 = 255;
    if (v4 == (id)1)
    {
      v7 = 113;
      v8 = 131;
    }
    else
    {
      v7 = 70;
      v8 = 97;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  if (v2 == (id)1)
  {
LABEL_6:
    if (v3 == (id)1)
    {
      sub_10024EA50();
      v5 = 1.0;
      v6 = 187;
      v7 = 0;
      v8 = 0;
    }
    else
    {
      sub_10024EA50();
      v5 = 1.0;
      v6 = 224;
      v7 = 9;
      v8 = 33;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  result = (id)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000062, 0x80000001003B8320, "MusicCoreUI/TintColor.swift", 27, 2, 41, 0);
  __break(1u);
  return result;
}

uint64_t *UIColor.MusicTint.pressed.unsafeMutableAddressor()
{
  if (qword_100498930 != -1)
    swift_once(&qword_100498930, sub_10024E228);
  return &static UIColor.MusicTint.pressed;
}

id static UIColor.MusicTint.pressed.getter()
{
  return sub_1000B8EAC(&qword_100498930, (id *)&static UIColor.MusicTint.pressed);
}

void sub_10024E3C4(uint64_t a1)
{
  sub_100240408(a1, (uint64_t)sub_10024E3E0, (uint64_t)&unk_10045BDB0, &static UIColor.MusicTint.deepPressed);
}

id sub_10024E3E0(void *a1)
{
  id v2;
  id v3;
  id v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id result;

  v2 = objc_msgSend(a1, "userInterfaceStyle");
  v3 = objc_msgSend(a1, "accessibilityContrast");
  v4 = v3;
  if (!v2)
    goto LABEL_6;
  if (v2 == (id)2)
  {
    sub_10024EA50();
    v5 = 1.0;
    v6 = 255;
    if (v4 == (id)1)
    {
      v7 = 138;
      v8 = 156;
    }
    else
    {
      v7 = 95;
      v8 = 122;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  if (v2 == (id)1)
  {
LABEL_6:
    if (v3 == (id)1)
    {
      sub_10024EA50();
      v5 = 1.0;
      v6 = 162;
      v7 = 0;
      v8 = 0;
    }
    else
    {
      sub_10024EA50();
      v5 = 1.0;
      v6 = 198;
      v7 = 0;
      v8 = 7;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  result = (id)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000062, 0x80000001003B8320, "MusicCoreUI/TintColor.swift", 27, 2, 50, 0);
  __break(1u);
  return result;
}

_QWORD *UIColor.MusicTint.deepPressed.unsafeMutableAddressor()
{
  if (qword_100498938 != -1)
    swift_once(&qword_100498938, sub_10024E3C4);
  return &static UIColor.MusicTint.deepPressed;
}

id static UIColor.MusicTint.deepPressed.getter()
{
  return sub_1000B8EAC(&qword_100498938, (id *)&static UIColor.MusicTint.deepPressed);
}

void sub_10024E560(uint64_t a1)
{
  sub_100240408(a1, (uint64_t)sub_10024E57C, (uint64_t)&unk_10045BD88, &static UIColor.MusicTint.disabled);
}

id sub_10024E57C(void *a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id result;

  v2 = objc_msgSend(a1, "userInterfaceStyle");
  v3 = objc_msgSend(a1, "accessibilityContrast");
  v4 = v3;
  if (!v2)
    goto LABEL_6;
  if (v2 == (id)2)
  {
    sub_10024EA50();
    v5 = 250;
    if (v4 == (id)1)
    {
      v6 = 88;
      v7 = 106;
    }
    else
    {
      v6 = 45;
      v7 = 72;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v5, v6, v7, 0.35);
  }
  if (v2 == (id)1)
  {
LABEL_6:
    if (v3 == (id)1)
    {
      sub_10024EA50();
      v5 = 214;
      v6 = 0;
      v7 = 23;
    }
    else
    {
      sub_10024EA50();
      v5 = 250;
      v6 = 35;
      v7 = 59;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v5, v6, v7, 0.35);
  }
  result = (id)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000062, 0x80000001003B8320, "MusicCoreUI/TintColor.swift", 27, 2, 59, 0);
  __break(1u);
  return result;
}

_QWORD *UIColor.MusicTint.disabled.unsafeMutableAddressor()
{
  if (qword_100498940 != -1)
    swift_once(&qword_100498940, sub_10024E560);
  return &static UIColor.MusicTint.disabled;
}

id static UIColor.MusicTint.disabled.getter()
{
  return sub_1000B8EAC(&qword_100498940, (id *)&static UIColor.MusicTint.disabled);
}

uint64_t sub_10024E714(uint64_t a1)
{
  return sub_10024E970(a1, &qword_100498920, (id *)&static UIColor.MusicTint.normal, &static Color.MusicTint.normal, (uint64_t)sub_10024DEF0);
}

uint64_t *Color.MusicTint.normal.unsafeMutableAddressor()
{
  if (qword_100498948 != -1)
    swift_once(&qword_100498948, sub_10024E714);
  return &static Color.MusicTint.normal;
}

uint64_t static Color.MusicTint.normal.getter()
{
  return sub_10024E814(&qword_100498948, &static Color.MusicTint.normal, (uint64_t)sub_10024E714);
}

uint64_t sub_10024E794(uint64_t a1)
{
  return sub_10024E970(a1, &qword_100498928, (id *)&static UIColor.MusicTint.rollover, &static Color.MusicTint.rollover, (uint64_t)sub_10024E08C);
}

uint64_t *Color.MusicTint.rollover.unsafeMutableAddressor()
{
  if (qword_100498950 != -1)
    swift_once(&qword_100498950, sub_10024E794);
  return &static Color.MusicTint.rollover;
}

uint64_t static Color.MusicTint.rollover.getter()
{
  return sub_10024E814(&qword_100498950, &static Color.MusicTint.rollover, (uint64_t)sub_10024E794);
}

uint64_t sub_10024E814(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  if (*a1 != -1)
    swift_once(a1, a3);
  return swift_retain(*a2);
}

uint64_t sub_10024E84C(uint64_t a1)
{
  return sub_10024E970(a1, &qword_100498930, (id *)&static UIColor.MusicTint.pressed, &static Color.MusicTint.pressed, (uint64_t)sub_10024E228);
}

uint64_t *Color.MusicTint.pressed.unsafeMutableAddressor()
{
  if (qword_100498958 != -1)
    swift_once(&qword_100498958, sub_10024E84C);
  return &static Color.MusicTint.pressed;
}

uint64_t static Color.MusicTint.pressed.getter()
{
  return sub_10024E814(&qword_100498958, &static Color.MusicTint.pressed, (uint64_t)sub_10024E84C);
}

uint64_t sub_10024E8CC(uint64_t a1)
{
  return sub_10024E970(a1, &qword_100498938, (id *)&static UIColor.MusicTint.deepPressed, &static Color.MusicTint.deepPressed, (uint64_t)sub_10024E3C4);
}

uint64_t *Color.MusicTint.deepPressed.unsafeMutableAddressor()
{
  if (qword_100498960 != -1)
    swift_once(&qword_100498960, sub_10024E8CC);
  return &static Color.MusicTint.deepPressed;
}

uint64_t static Color.MusicTint.deepPressed.getter()
{
  return sub_10024E814(&qword_100498960, &static Color.MusicTint.deepPressed, (uint64_t)sub_10024E8CC);
}

uint64_t sub_10024E94C(uint64_t a1)
{
  return sub_10024E970(a1, &qword_100498940, (id *)&static UIColor.MusicTint.disabled, &static Color.MusicTint.disabled, (uint64_t)sub_10024E560);
}

uint64_t sub_10024E970(uint64_t a1, _QWORD *a2, id *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t result;

  if (*a2 != -1)
    swift_once(a2, a5);
  result = Color.init(_:)(*a3);
  *a4 = result;
  return result;
}

uint64_t *Color.MusicTint.disabled.unsafeMutableAddressor()
{
  if (qword_100498968 != -1)
    swift_once(&qword_100498968, sub_10024E94C);
  return &static Color.MusicTint.disabled;
}

uint64_t static Color.MusicTint.disabled.getter()
{
  return sub_10024E814(&qword_100498968, &static Color.MusicTint.disabled, (uint64_t)sub_10024E94C);
}

ValueMetadata *type metadata accessor for UIColor.MusicTint()
{
  return &type metadata for UIColor.MusicTint;
}

ValueMetadata *type metadata accessor for Color.MusicTint()
{
  return &type metadata for Color.MusicTint;
}

uint64_t sub_10024EA38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_10024EA48(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

unint64_t sub_10024EA50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1004A1510;
  if (!qword_1004A1510)
  {
    v1 = objc_opt_self(UIColor);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1004A1510);
  }
  return result;
}

UITraitCollection __swiftcall UITraitCollection.init(mediaLibrary:)(MPMediaLibrary_optional mediaLibrary)
{
  Class isa;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  objc_class *v5;
  NSString v6;
  id v7;
  UITraitCollection result;
  void *ObjCClassFromMetadata;
  Class v10;
  id v11;

  isa = mediaLibrary.value.super.isa;
  v2 = sub_100005574(&qword_100499F50);
  v3 = swift_allocObject(v2, 40, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100384730;
  v4 = (void *)objc_opt_self(UITraitCollection);
  v5 = isa;
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v4, "_traitCollectionWithValue:forTraitNamed:", v5, v6);

  if (v7)
  {
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    *(_QWORD *)(v3 + 32) = v7;
    specialized Array._endMutation()(ObjCClassFromMetadata);
    sub_1000087DC(0, &qword_100499968, UITraitCollection_ptr);
    v10 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v11 = objc_msgSend(ObjCClassFromMetadata, "traitCollectionWithTraitsFromCollections:", v10);

    return (UITraitCollection)v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id UITraitCollection.mediaLibrary.getter()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;
  id result;
  uint64_t v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "_valueForTraitNamed:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_10024ED08((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    v3 = sub_1000087DC(0, &qword_10049A140, MPMediaLibrary_ptr);
    if (swift_dynamicCast(&v5, v7, (char *)&type metadata for Any + 8, v3, 6))
      return (id)v5;
  }
  else
  {
    sub_10024ED50((uint64_t)v7);
  }
  result = objc_msgSend((id)objc_opt_self(MPMediaLibrary), "deviceMediaLibrary");
  if (!result)
    __break(1u);
  return result;
}

uint64_t sub_10024ED08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005574(&qword_10049B130);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10024ED50(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005574(&qword_10049B130);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

UITraitCollection __swiftcall UITraitCollection.init(legacyLibraryFilter:)(__C::MPMediaLibraryFilteringOptions legacyLibraryFilter)
{
  UITraitCollection result;

  sub_10024F108(legacyLibraryFilter.rawValue);
  return result;
}

__C::MPMediaLibraryFilteringOptions UITraitCollection.legacyLibraryFilter.getter()
{
  return sub_10024F274();
}

BOOL UITraitCollection.isMediaPicker.getter()
{
  void *v0;
  void *v1;

  v0 = (void *)UITraitCollection.mediaPickerConfiguration.getter();
  v1 = v0;
  if (v0)

  return v1 != 0;
}

uint64_t UITraitCollection.mediaPickerConfiguration.getter()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "_valueForTraitNamed:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_10024ED08((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    v3 = sub_1000087DC(0, &qword_100499B60, MPMediaPickerConfiguration_ptr);
    if (swift_dynamicCast(&v5, v7, (char *)&type metadata for Any + 8, v3, 6))
      return v5;
    else
      return 0;
  }
  else
  {
    sub_10024ED50((uint64_t)v7);
    return 0;
  }
}

uint64_t UITraitCollection.init(mediaPickerConfiguration:)(void *a1)
{
  void *v2;
  id v3;
  NSString v4;
  id v5;
  __C::MPMediaLibraryFilteringOptions v6;
  Class isa;
  void *ObjCClassFromMetadata;
  uint64_t v9;
  uint64_t v10;
  id v11;
  objc_class *v12;
  Class v13;
  id v14;
  uint64_t result;

  v2 = (void *)objc_opt_self(UITraitCollection);
  v3 = a1;
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v2, "_traitCollectionWithValue:forTraitNamed:", v3, v4);

  if (v5)
  {
    v6.rawValue = *(_QWORD *)MPMediaLibraryFilteringOptions.none.unsafeMutableAddressor();
    if (!objc_msgSend(v3, "showsItemsWithProtectedAssets"))
      v6.rawValue |= 0x20;
    if (!objc_msgSend(v3, "showsCloudItems"))
      v6.rawValue |= 2;
    sub_1000087DC(0, &qword_100499968, UITraitCollection_ptr);
    isa = UITraitCollection.init(mediaPickerLibraryFilter:)(v6).super.isa;
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    v9 = sub_100005574(&qword_100499F50);
    v10 = swift_allocObject(v9, 48, 7);
    *(_OWORD *)(v10 + 16) = xmmword_100384B70;
    *(_QWORD *)(v10 + 32) = v5;
    *(_QWORD *)(v10 + 40) = isa;
    specialized Array._endMutation()(v10);
    v11 = v5;
    v12 = isa;
    v13 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v14 = objc_msgSend(ObjCClassFromMetadata, "traitCollectionWithTraitsFromCollections:", v13);

    return (uint64_t)v14;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000003CLL, 0x80000001003B8420, "MusicCoreUI/UIKit+MediaPlayer.swift", 35, 2, 51, 0);
    __break(1u);
  }
  return result;
}

UITraitCollection __swiftcall UITraitCollection.init(mediaPickerLibraryFilter:)(__C::MPMediaLibraryFilteringOptions mediaPickerLibraryFilter)
{
  UITraitCollection result;

  sub_10024F108(mediaPickerLibraryFilter.rawValue);
  return result;
}

void sub_10024F108(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  NSString v6;
  id v7;
  void *ObjCClassFromMetadata;
  Class isa;

  v2 = sub_100005574(&qword_100499F50);
  v3 = swift_allocObject(v2, 40, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100384730;
  v4 = (void *)objc_opt_self(UITraitCollection);
  v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedInteger:", a1);
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v4, "_traitCollectionWithValue:forTraitNamed:", v5, v6);

  if (v7)
  {
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    *(_QWORD *)(v3 + 32) = v7;
    specialized Array._endMutation()(ObjCClassFromMetadata);
    sub_1000087DC(0, &qword_100499968, UITraitCollection_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(ObjCClassFromMetadata, "traitCollectionWithTraitsFromCollections:", isa);

  }
  else
  {
    __break(1u);
  }
}

__C::MPMediaLibraryFilteringOptions UITraitCollection.mediaPickerLibraryFilter.getter()
{
  return sub_10024F274();
}

__C::MPMediaLibraryFilteringOptions sub_10024F274()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;
  NSNumber_optional v4;
  objc_class *v6;
  _OWORD v7[2];
  _BYTE v8[24];
  uint64_t v9;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "_valueForTraitNamed:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  sub_10024ED08((uint64_t)v7, (uint64_t)v8);
  if (v9)
  {
    v3 = sub_1000087DC(0, &qword_100499B58, NSNumber_ptr);
    if (swift_dynamicCast(&v6, v8, (char *)&type metadata for Any + 8, v3, 6))
      v4.value.super.super.isa = v6;
    else
      v4.value.super.super.isa = 0;
  }
  else
  {
    sub_10024ED50((uint64_t)v8);
    v4.value.super.super.isa = 0;
  }
  return MPMediaLibraryFilteringOptions.init(_:)(v4);
}

__C::MPMediaLibraryFilteringOptions UITraitCollection.combinedLibraryRequestFilter.getter()
{
  Swift::UInt rawValue;

  rawValue = UITraitCollection.legacyLibraryFilter.getter().rawValue;
  return (__C::MPMediaLibraryFilteringOptions)(UITraitCollection.mediaPickerLibraryFilter.getter().rawValue | rawValue);
}

uint64_t UITraitCollection.configure<A, B>(libraryRequest:)(void *a1)
{
  id v2;
  id v3;
  void *v4;
  id v5;
  char v6;
  uint64_t v7;
  id v8;
  unint64_t v9;
  Swift::UInt rawValue;
  Swift::UInt v11;

  v2 = objc_msgSend(a1, "mediaLibrary");
  v3 = UITraitCollection.mediaLibrary.getter();
  v4 = v3;
  if (v2)
  {
    sub_1000087DC(0, &qword_10049A140, MPMediaLibrary_ptr);
    v5 = v2;
    v6 = static NSObject.== infix(_:_:)(v5, v4);

    if ((v6 & 1) != 0)
    {
      v7 = 0;
      goto LABEL_6;
    }
  }
  else
  {

  }
  v8 = UITraitCollection.mediaLibrary.getter();
  objc_msgSend(a1, "setMediaLibrary:", v8);

  v7 = 1;
LABEL_6:
  v9 = (unint64_t)objc_msgSend(a1, "filteringOptions");
  rawValue = UITraitCollection.legacyLibraryFilter.getter().rawValue;
  if (((UITraitCollection.mediaPickerLibraryFilter.getter().rawValue | rawValue) & ~v9) != 0)
  {
    v11 = UITraitCollection.legacyLibraryFilter.getter().rawValue;
    objc_msgSend(a1, "setFilteringOptions:", UITraitCollection.mediaPickerLibraryFilter.getter().rawValue | v11 | (unint64_t)objc_msgSend(a1, "filteringOptions"));
    return 1;
  }
  return v7;
}

void static UIButton.Configuration.barButtonConfiguration(imageName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  NSString v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;

  v3 = type metadata accessor for UIButton.Configuration.Size(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UIButton.Configuration.CornerStyle(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UIButton.Configuration.gray()(v9);
  v12 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:weight:scale:", 6, 2, 15.0);
  swift_bridgeObjectRetain();
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v14 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v13);

  if (v14)
  {
    v15 = objc_msgSend(v14, "imageWithConfiguration:", v12);

  }
  else
  {
    v15 = 0;
  }
  UIButton.Configuration.image.setter(v15);
  v16 = objc_msgSend((id)objc_opt_self(UIColor), "tertiarySystemFillColor");
  UIButton.Configuration.baseBackgroundColor.setter(v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for UIButton.Configuration.CornerStyle.capsule(_:), v7);
  UIButton.Configuration.cornerStyle.setter(v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for UIButton.Configuration.Size.small(_:), v3);
  UIButton.Configuration.buttonSize.setter(v6);

}

void static UIButton.Configuration.selectedBarButtonConfiguration(imageName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  NSString v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;

  v3 = type metadata accessor for UIButton.Configuration.Size(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UIButton.Configuration.CornerStyle(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UIButton.Configuration.gray()(v9);
  v12 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:weight:scale:", 6, 2, 15.0);
  swift_bridgeObjectRetain();
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v14 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v13);

  if (v14)
  {
    v15 = objc_msgSend(v14, "imageWithConfiguration:", v12);

  }
  else
  {
    v15 = 0;
  }
  UIButton.Configuration.image.setter(v15);
  v16 = (void *)objc_opt_self(UIColor);
  UIButton.Configuration.baseBackgroundColor.setter(objc_msgSend(v16, "tintColor"));
  UIButton.Configuration.baseForegroundColor.setter(objc_msgSend(v16, "systemBackgroundColor"));
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for UIButton.Configuration.CornerStyle.capsule(_:), v7);
  UIButton.Configuration.cornerStyle.setter(v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for UIButton.Configuration.Size.small(_:), v3);
  UIButton.Configuration.buttonSize.setter(v6);

}

id static UIButton.contextBarButton()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  NSString v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  char *v28;
  id v29;
  NSString v30;
  id v31;
  NSString v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;

  type metadata accessor for Locale(0);
  __chkstk_darwin();
  v41 = (char *)&v34 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for String.LocalizationValue(0);
  v40 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin();
  v39 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v3 = (char *)&v34 - v2;
  v4 = type metadata accessor for UIButton.Configuration.Size(0);
  v37 = *(_QWORD *)(v4 - 8);
  v38 = v4;
  __chkstk_darwin();
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UIButton.Configuration.CornerStyle(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UIButton.Configuration(0);
  v35 = *(_QWORD *)(v11 - 8);
  v36 = v11;
  __chkstk_darwin();
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin();
  v16 = (char *)&v34 - v15;
  static UIButton.Configuration.gray()(v14);
  v17 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:weight:scale:", 6, 2, 15.0);
  v18 = String._bridgeToObjectiveC()();
  v19 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v18);

  if (v19)
  {
    v20 = objc_msgSend(v19, "imageWithConfiguration:", v17);

  }
  else
  {
    v20 = 0;
  }
  sub_10024FCDC();
  UIButton.Configuration.image.setter(v20);
  v21 = objc_msgSend((id)objc_opt_self(UIColor), "tertiarySystemFillColor");
  UIButton.Configuration.baseBackgroundColor.setter(v21);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for UIButton.Configuration.CornerStyle.capsule(_:), v7);
  UIButton.Configuration.cornerStyle.setter(v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v6, enum case for UIButton.Configuration.Size.small(_:), v38);
  UIButton.Configuration.buttonSize.setter(v6);

  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v16, v13, v36);
  v22 = (void *)UIButton.init(configuration:primaryAction:)(v16, 0);
  objc_msgSend(v22, "setShowsMenuAsPrimaryAction:", 1);
  String.LocalizationValue.init(stringLiteral:)(1701998413, 0xE400000000000000);
  v24 = v39;
  v23 = v40;
  v25 = v42;
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v39, v3, v42);
  if (qword_100498860 != -1)
    swift_once(&qword_100498860, sub_100232E30);
  v26 = qword_1004A2F90;
  v27 = (id)qword_1004A2F90;
  v28 = v41;
  static Locale.current.getter(v27);
  String.init(localized:table:bundle:locale:comment:)(v24, 0, 0, v26, v28, 0, 0, 256);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v3, v25);
  v29 = v22;
  v30 = String._bridgeToObjectiveC()();
  objc_msgSend(v29, "setAccessibilityLabel:", v30);

  v31 = v29;
  v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v31, "setLargeContentTitle:", v32);

  objc_msgSend(v31, "setShowsLargeContentViewer:", 1);
  return v31;
}

unint64_t sub_10024FCDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100499B68;
  if (!qword_100499B68)
  {
    v1 = objc_opt_self(UIButton);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100499B68);
  }
  return result;
}

uint64_t UITraitCollection.isAccessibilitySizeCategory.getter()
{
  void *v0;
  id v1;
  char v2;

  v1 = objc_msgSend(v0, "preferredContentSizeCategory");
  v2 = UIContentSizeCategory.isAccessibilityCategory.getter();

  return v2 & 1;
}

Swift::Bool __swiftcall UIViewController.scrollToTopIfPossible()()
{
  void *v0;
  id v1;
  void *v2;
  unsigned __int8 v3;

  v1 = objc_msgSend(v0, "contentScrollView");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = objc_msgSend(v1, "_scrollToTopIfPossible:", 1);

  return v3;
}

Swift::Bool __swiftcall UIViewController.focusOnSearchBarIfPossible()()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  unsigned int v4;
  id v5;
  unsigned __int8 v6;

  v1 = objc_msgSend(v0, "navigationItem");
  v2 = objc_msgSend(v1, "searchController");

  if (!v2)
    return 0;
  v3 = objc_msgSend(v2, "searchBar");
  v4 = objc_msgSend(v3, "canBecomeFirstResponder");

  if (v4)
  {
    v5 = objc_msgSend(v2, "searchBar");
    v6 = objc_msgSend(v5, "becomeFirstResponder");

    v2 = v5;
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

uint64_t *UIView.Border.artwork.unsafeMutableAddressor()
{
  if (qword_100498970 != -1)
    swift_once(&qword_100498970, sub_10024FF08);
  return &static UIView.Border.artwork;
}

uint64_t UIView.Corner.medium.unsafeMutableAddressor()
{
  return sub_100250480(&qword_100498990, (uint64_t)static UIView.Corner.medium, (uint64_t)sub_100250260);
}

uint64_t UIView.Corner.small.unsafeMutableAddressor()
{
  return sub_100250480(&qword_100498988, (uint64_t)static UIView.Corner.small, (uint64_t)sub_1002501B4);
}

void sub_10024FF08()
{
  id v0;
  void *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  _QWORD v5[5];
  uint64_t v6;

  v0 = objc_allocWithZone((Class)UIColor);
  v5[4] = sub_10024FFCC;
  v6 = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_100234A18;
  v5[3] = &unk_10045BE50;
  v1 = _Block_copy(v5);
  objc_msgSend(v0, "initWithDynamicProvider:", v1);
  _Block_release(v1);
  swift_release(v6);
  UIView.Border.init(thickness:color:)();
  static UIView.Border.artwork = v2;
  byte_1004A3248 = v3 & 1;
  qword_1004A3250 = v4;
}

id sub_10024FFCC(void *a1)
{
  id v1;
  id v2;
  double v3;

  v1 = objc_msgSend(a1, "userInterfaceStyle");
  v2 = objc_allocWithZone((Class)UIColor);
  v3 = 0.0;
  if (v1 == (id)2)
    v3 = 1.0;
  return objc_msgSend(v2, "initWithWhite:alpha:", v3, 0.1);
}

uint64_t static UIView.Border.artwork.getter()
{
  uint64_t v0;
  id v1;

  if (qword_100498970 != -1)
    swift_once(&qword_100498970, sub_10024FF08);
  v0 = static UIView.Border.artwork;
  v1 = (id)qword_1004A3250;
  return v0;
}

void sub_10025008C()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v1 = objc_msgSend(v0, "userInterfaceIdiom");

  byte_100499B70 = v1 == (id)6;
}

uint64_t sub_1002500EC()
{
  uint64_t v0;
  double v1;

  v0 = type metadata accessor for UIView.Corner(0);
  sub_1000086DC(v0, static UIView.Corner.extraSmall);
  sub_1000086B4(v0, (uint64_t)static UIView.Corner.extraSmall);
  if (qword_100498978 != -1)
    swift_once(&qword_100498978, sub_10025008C);
  v1 = 3.0;
  if (byte_100499B70)
    v1 = 6.0;
  return static UIView.Corner.value(_:continuous:)(1, v1);
}

uint64_t UIView.Corner.extraSmall.unsafeMutableAddressor()
{
  return sub_100250480(&qword_100498980, (uint64_t)static UIView.Corner.extraSmall, (uint64_t)sub_1002500EC);
}

uint64_t static UIView.Corner.extraSmall.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1002504DC(&qword_100498980, (uint64_t)static UIView.Corner.extraSmall, (uint64_t)sub_1002500EC, a1);
}

uint64_t sub_1002501B4()
{
  uint64_t v0;
  double v1;

  v0 = type metadata accessor for UIView.Corner(0);
  sub_1000086DC(v0, static UIView.Corner.small);
  sub_1000086B4(v0, (uint64_t)static UIView.Corner.small);
  if (qword_100498978 != -1)
    swift_once(&qword_100498978, sub_10025008C);
  v1 = 5.0;
  if (byte_100499B70)
    v1 = 8.0;
  return static UIView.Corner.value(_:continuous:)(1, v1);
}

uint64_t static UIView.Corner.small.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1002504DC(&qword_100498988, (uint64_t)static UIView.Corner.small, (uint64_t)sub_1002501B4, a1);
}

uint64_t sub_100250260()
{
  uint64_t v0;
  double v1;

  v0 = type metadata accessor for UIView.Corner(0);
  sub_1000086DC(v0, static UIView.Corner.medium);
  sub_1000086B4(v0, (uint64_t)static UIView.Corner.medium);
  if (qword_100498978 != -1)
    swift_once(&qword_100498978, sub_10025008C);
  v1 = 8.0;
  if (byte_100499B70)
    v1 = 10.0;
  return static UIView.Corner.value(_:continuous:)(1, v1);
}

uint64_t static UIView.Corner.medium.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1002504DC(&qword_100498990, (uint64_t)static UIView.Corner.medium, (uint64_t)sub_100250260, a1);
}

uint64_t sub_10025030C()
{
  uint64_t v0;
  double v1;

  v0 = type metadata accessor for UIView.Corner(0);
  sub_1000086DC(v0, static UIView.Corner.large);
  sub_1000086B4(v0, (uint64_t)static UIView.Corner.large);
  if (qword_100498978 != -1)
    swift_once(&qword_100498978, sub_10025008C);
  v1 = 10.0;
  if (byte_100499B70)
    v1 = 16.0;
  return static UIView.Corner.value(_:continuous:)(1, v1);
}

uint64_t UIView.Corner.large.unsafeMutableAddressor()
{
  return sub_100250480(&qword_100498998, (uint64_t)static UIView.Corner.large, (uint64_t)sub_10025030C);
}

uint64_t static UIView.Corner.large.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1002504DC(&qword_100498998, (uint64_t)static UIView.Corner.large, (uint64_t)sub_10025030C, a1);
}

uint64_t sub_1002503D4()
{
  uint64_t v0;
  double v1;

  v0 = type metadata accessor for UIView.Corner(0);
  sub_1000086DC(v0, static UIView.Corner.extraLarge);
  sub_1000086B4(v0, (uint64_t)static UIView.Corner.extraLarge);
  if (qword_100498978 != -1)
    swift_once(&qword_100498978, sub_10025008C);
  v1 = 14.0;
  if (byte_100499B70)
    v1 = 24.0;
  return static UIView.Corner.value(_:continuous:)(1, v1);
}

uint64_t UIView.Corner.extraLarge.unsafeMutableAddressor()
{
  return sub_100250480(&qword_1004989A0, (uint64_t)static UIView.Corner.extraLarge, (uint64_t)sub_1002503D4);
}

uint64_t sub_100250480(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (*a1 != -1)
    swift_once(a1, a3);
  v4 = type metadata accessor for UIView.Corner(0);
  return sub_1000086B4(v4, a2);
}

uint64_t static UIView.Corner.extraLarge.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1002504DC(&qword_1004989A0, (uint64_t)static UIView.Corner.extraLarge, (uint64_t)sub_1002503D4, a1);
}

uint64_t sub_1002504DC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  if (*a1 != -1)
    swift_once(a1, a3);
  v6 = type metadata accessor for UIView.Corner(0);
  v7 = sub_1000086B4(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a4, v7, v6);
}

uint64_t sub_100250544(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100250554(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

void sub_10025055C(uint64_t a1)
{
  sub_100240408(a1, (uint64_t)sub_100250578, (uint64_t)&unk_10045BEC0, &static HI.Color.prominentTextColor);
}

id sub_100250578(void *a1)
{
  return sub_100250610(a1, 224, 9, 33);
}

_QWORD *HI.Color.prominentTextColor.unsafeMutableAddressor()
{
  if (qword_1004989A8 != -1)
    swift_once(&qword_1004989A8, sub_10025055C);
  return &static HI.Color.prominentTextColor;
}

id static HI.Color.prominentTextColor.getter()
{
  return sub_1000B8EAC(&qword_1004989A8, (id *)&static HI.Color.prominentTextColor);
}

void sub_1002505E4(uint64_t a1)
{
  sub_100240408(a1, (uint64_t)sub_100250600, (uint64_t)&unk_10045BE98, &static HI.Color.prominentBackgroundColor);
}

id sub_100250600(void *a1)
{
  return sub_100250610(a1, 250, 35, 59);
}

id sub_100250610(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = objc_msgSend(a1, "userInterfaceStyle");
  sub_10024EA50();
  if (v7 == (id)2)
  {
    v8 = 250;
    v9 = 45;
    v10 = 72;
  }
  else
  {
    v8 = a2;
    v9 = a3;
    v10 = a4;
  }
  return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v8, v9, v10, 1.0);
}

_QWORD *HI.Color.prominentBackgroundColor.unsafeMutableAddressor()
{
  if (qword_1004989B0 != -1)
    swift_once(&qword_1004989B0, sub_1002505E4);
  return &static HI.Color.prominentBackgroundColor;
}

id static HI.Color.prominentBackgroundColor.getter()
{
  return sub_1000B8EAC(&qword_1004989B0, (id *)&static HI.Color.prominentBackgroundColor);
}

ValueMetadata *type metadata accessor for HI.Color()
{
  return &type metadata for HI.Color;
}

uint64_t sub_1002506F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100250704(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

double HI.SizeClass.rawValue.getter(char a1)
{
  return dbl_100397BA0[a1];
}

double HI.SizeClass.gutter.getter(char a1)
{
  return dbl_100397A80[a1];
}

double HI.SizeClass.margin.getter(char a1)
{
  return dbl_100397AC0[a1];
}

double HI.SizeClass.peek.getter()
{
  return 36.0;
}

_UNKNOWN **static HI.SizeClass.allCases.getter()
{
  return &off_100459B80;
}

BOOL sub_100250774(char *a1, char *a2)
{
  return sub_100252594(*a1, *a2);
}

uint64_t sub_100250780@<X0>(double *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s11MusicCoreUI2HIO9SizeClassO8rawValueAESg0B8Graphics7CGFloatV_tcfC_0(*a1);
  *a2 = result;
  return result;
}

double sub_1002507A8@<D0>(double *a1@<X8>)
{
  char *v1;
  double result;

  result = dbl_100397BA0[*v1];
  *a1 = result;
  return result;
}

void sub_1002507C0(_QWORD *a1@<X8>)
{
  *a1 = &off_100459B80;
}

BOOL sub_1002507D0(char *a1, char *a2)
{
  return _s11MusicCoreUI2HIO9SizeClassO1loiySbAE_AEtFZ_0(*a1, *a2);
}

BOOL sub_1002507DC(char *a1, char *a2)
{
  return sub_1002507E8(*a1, *a2);
}

BOOL sub_1002507E8(char a1, char a2)
{
  return dbl_100397BA0[a2] >= dbl_100397BA0[a1];
}

BOOL sub_10025080C(char *a1, char *a2)
{
  return sub_100250818(*a1, *a2);
}

BOOL sub_100250818(char a1, char a2)
{
  return dbl_100397BA0[a1] >= dbl_100397BA0[a2];
}

BOOL sub_10025083C(char *a1, char *a2)
{
  return sub_100250848(*a1, *a2);
}

BOOL sub_100250848(char a1, char a2)
{
  return dbl_100397BA0[a2] < dbl_100397BA0[a1];
}

Swift::Int sub_10025086C()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  sub_1002508B8((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_1002508B0(uint64_t a1)
{
  char *v1;

  sub_1002508B8(a1, *v1);
}

void sub_1002508B8(uint64_t a1, char a2)
{
  Hasher._combine(_:)(qword_100397B60[a2]);
}

uint64_t sub_1002508E8(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = 0xD000000000000015;
  if (a2)
  {
    if (a2 == 1)
    {
      v3 = 0xD000000000000014;
      v4 = 0x80000001003B78B0;
    }
    else
    {
      v4 = 0x80000001003B78D0;
    }
  }
  else
  {
    v4 = 0x80000001003B7890;
  }
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_100250964()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  sub_1002508B8((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t sub_1002509A4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return ((uint64_t (*)(void))((char *)sub_1002509C0 + 4 * byte_100397790[a3]))();
}

double sub_1002509C0(char a1)
{
  return dbl_100397B00[a1];
}

uint64_t sub_100250A50(unsigned __int8 a1)
{
  return ((uint64_t (*)(double))((char *)&locret_100250A4C + 4 * byte_1003977A0[a1]))(3.0);
}

double sub_100250A70()
{
  return 6.0;
}

uint64_t sub_100250A78(unsigned __int8 a1)
{
  return ((uint64_t (*)(double))((char *)&locret_100250A4C + 4 * byte_10039779C[a1]))(7.0);
}

double sub_100250A98(uint64_t a1, char a2)
{
  double result;

  result = 4.0;
  if ((a2 & 1) != 0)
    return 7.0;
  return result;
}

uint64_t sub_100250AAC(unsigned __int8 a1)
{
  return ((uint64_t (*)(double))((char *)&locret_100250A4C + 4 * byte_100397798[a1]))(5.0);
}

double sub_100250ACC()
{
  return 10.0;
}

double sub_100250AD4()
{
  return 2.0;
}

double sub_100250ADC(uint64_t a1, char a2)
{
  double result;

  if ((a2 & 1) != 0)
    return 4.0;
  return result;
}

double sub_100250AEC()
{
  return 4.0;
}

double sub_100250AF4()
{
  return 7.0;
}

double sub_100250AFC(uint64_t a1, char a2)
{
  double result;

  result = 5.0;
  if ((a2 & 1) != 0)
    return 9.0;
  return result;
}

double sub_100250B10()
{
  return 8.0;
}

double sub_100250B18(uint64_t a1, char a2)
{
  double result;

  result = 6.0;
  if ((a2 & 1) != 0)
    return 28.0;
  return result;
}

double sub_100250B2C()
{
  return 12.0;
}

double sub_100250B34(uint64_t a1, char a2)
{
  double result;

  result = 7.0;
  if ((a2 & 1) != 0)
    return 15.0;
  return result;
}

double sub_100250B48(char a1, char a2, char a3)
{
  double result;

  switch(a3)
  {
    case 1:
      if (a1 != 3)
        return 1.0;
      result = 3.0;
      if ((a2 & 1) == 0)
        return 1.0;
      return result;
    case 2:
      if (!a1)
        goto LABEL_11;
      return 1.0;
    case 5:
    case 7:
      if (a1 != 3)
        return 1.0;
      goto LABEL_11;
    case 6:
      if (a1 != 3)
      {
        if (!a1)
        {
LABEL_11:
          result = 2.0;
          if ((a2 & 1) != 0)
            return result;
        }
        return 1.0;
      }
      result = 5.0;
      if ((a2 & 1) == 0)
        return 1.0;
      return result;
    default:
      return 1.0;
  }
}

_UNKNOWN **static HI.Grid.Variant.allCases.getter()
{
  return &off_100459BA8;
}

void sub_100250BDC(_QWORD *a1@<X8>)
{
  *a1 = &off_100459BD0;
}

uint64_t Lyrics.TextLine.agentAlignment.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t Lyrics.TextLine.direction.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t Lyrics.TextLine.lyricsDirection.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 26);
}

double Lyrics.TextLine.primaryVocalsStartTime.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

double Lyrics.TextLine.primaryVocalsEndTime.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

void HI.Grid.Metrics.init(width:variant:swiping:isAccessibilitySize:)(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  double v10;
  double v11;
  char v12;
  unsigned __int8 v13;
  double v14;
  id v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  char v21;
  double v22;
  double v23;
  double v24;
  double v25;
  BOOL v26;
  double v27;
  double v28;
  BOOL v29;

  if (a5 <= 374.0)
  {
    v13 = 0;
    v10 = 10.0;
    v11 = 16.0;
    goto LABEL_19;
  }
  v10 = 12.0;
  v11 = 20.0;
  if (a5 <= 500.0)
  {
    v13 = 1;
    goto LABEL_19;
  }
  if (a5 <= 726.0)
  {
    v13 = 2;
    goto LABEL_19;
  }
  v10 = 20.0;
  if (a5 <= 981.0)
  {
    v13 = 3;
LABEL_18:
    v11 = 34.0;
    goto LABEL_19;
  }
  if (a5 <= 1194.0)
  {
    v13 = 4;
    goto LABEL_18;
  }
  if (a5 <= 2500.0)
    v12 = 6;
  else
    v12 = 7;
  if (a5 > 1500.0)
    v13 = v12;
  else
    v13 = 5;
  v11 = 34.0;
LABEL_19:
  v14 = a5 - (v11 + v11);
  if ((a3 & 1) != 0)
  {
    v15 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleBody);
    objc_msgSend(v15, "scaledValueForValue:", 1.0);
    v17 = v16;

    sub_1002509A4(a1, a2 & 1, v13);
    v19 = round(v18 * (1.0 / (v17 * 0.7)));
  }
  else
  {
    sub_1002509A4(a1, a2 & 1, v13);
    v19 = v20;
  }
  v21 = a2 & 1;
  v22 = sub_100250B48(a1, v21, v13);
  v23 = v22 * ((v14 - v10 * (v19 + -1.0)) / v19);
  v24 = v22 + -1.0;
  v25 = v10 * v24;
  v26 = v24 <= 0.0;
  v27 = -0.0;
  if (!v26)
    v27 = v25;
  v28 = v27 + v23;
  *(double *)a4 = a5;
  *(double *)(a4 + 8) = v10;
  *(double *)(a4 + 16) = v11;
  *(_BYTE *)(a4 + 24) = v13;
  v29 = v19 == 1.0 || v28 > 300.0;
  *(_BYTE *)(a4 + 25) = a1;
  *(_BYTE *)(a4 + 26) = v21;
  *(double *)(a4 + 32) = v14;
  *(double *)(a4 + 40) = v19;
  if ((a3 & 1) == 0)
    v29 = 0;
  *(double *)(a4 + 48) = v28;
  *(_BYTE *)(a4 + 56) = v29;
}

void HI.Grid.Metrics.hash(into:)()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;

  if ((*(_QWORD *)v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *(_QWORD *)v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
  if ((*(_QWORD *)(v0 + 8) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *(_QWORD *)(v0 + 8);
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  if ((*(_QWORD *)(v0 + 16) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = *(_QWORD *)(v0 + 16);
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(qword_100397B60[*(char *)(v0 + 24)]);
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 25));
  Hasher._combine(_:)(*(_BYTE *)(v0 + 26) & 1);
  if ((*(_QWORD *)(v0 + 32) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *(_QWORD *)(v0 + 32);
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  if ((*(_QWORD *)(v0 + 40) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = *(_QWORD *)(v0 + 40);
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  if ((*(_QWORD *)(v0 + 48) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v6 = *(_QWORD *)(v0 + 48);
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(*(_BYTE *)(v0 + 56) & 1);
}

Swift::Int HI.Grid.Metrics.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  HI.Grid.Metrics.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int sub_100250F90()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  HI.Grid.Metrics.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_100250FC8(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  _OWORD v6[2];
  _OWORD v7[2];
  _OWORD v8[2];

  v2 = a1[1];
  v5[0] = *a1;
  v5[1] = v2;
  v6[0] = a1[2];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)a1 + 41);
  v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v8[0] = a2[2];
  *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)((char *)a2 + 41);
  return _s11MusicCoreUI2HIO4GridO7MetricsV23__derived_struct_equalsySbAG_AGtFZ_0((uint64_t)v5, (uint64_t)v7) & 1;
}

void *HI.IndexBar.NumberOfItemsRequirement.artists.unsafeMutableAddressor()
{
  return &static HI.IndexBar.NumberOfItemsRequirement.artists;
}

uint64_t static HI.IndexBar.NumberOfItemsRequirement.artists.getter()
{
  return 50;
}

void *HI.IndexBar.NumberOfItemsRequirement.default.unsafeMutableAddressor()
{
  return &static HI.IndexBar.NumberOfItemsRequirement.default;
}

uint64_t static HI.IndexBar.NumberOfItemsRequirement.default.getter()
{
  return 100;
}

double sub_100251048()
{
  double result;

  result = 12.0;
  static Corner.search = xmmword_100395380;
  byte_1004A32F0 = 0;
  return result;
}

__int128 *Corner.search.unsafeMutableAddressor()
{
  if (qword_1004989B8 != -1)
    swift_once(&qword_1004989B8, sub_100251048);
  return &static Corner.search;
}

uint64_t static Corner.search.getter()
{
  if (qword_1004989B8 != -1)
    swift_once(&qword_1004989B8, sub_100251048);
  return static Corner.search;
}

double sub_1002510EC()
{
  double result;

  result = 16.0;
  static Corner.featured = xmmword_100395390;
  byte_1004A3310 = 0;
  return result;
}

__int128 *Corner.featured.unsafeMutableAddressor()
{
  if (qword_1004989C0 != -1)
    swift_once(&qword_1004989C0, sub_1002510EC);
  return &static Corner.featured;
}

uint64_t static Corner.featured.getter()
{
  if (qword_1004989C0 != -1)
    swift_once(&qword_1004989C0, sub_1002510EC);
  return static Corner.featured;
}

void sub_100251190()
{
  static HI.HoverOutset.list = 0x4024000000000000;
}

uint64_t *HI.HoverOutset.list.unsafeMutableAddressor()
{
  if (qword_1004989C8 != -1)
    swift_once(&qword_1004989C8, sub_100251190);
  return &static HI.HoverOutset.list;
}

double static HI.HoverOutset.list.getter()
{
  return sub_100240A44(&qword_1004989C8, (uint64_t)&static HI.HoverOutset.list);
}

void sub_1002511FC()
{
  static HI.HoverOutset.grid = 0x4028000000000000;
}

uint64_t *HI.HoverOutset.grid.unsafeMutableAddressor()
{
  if (qword_1004989D0 != -1)
    swift_once(&qword_1004989D0, sub_1002511FC);
  return &static HI.HoverOutset.grid;
}

double static HI.HoverOutset.grid.getter()
{
  return sub_100240A44(&qword_1004989D0, (uint64_t)&static HI.HoverOutset.grid);
}

void sub_100251268()
{
  static HI.HoverOutset.text = 0x4010000000000000;
}

uint64_t *HI.HoverOutset.text.unsafeMutableAddressor()
{
  if (qword_1004989D8 != -1)
    swift_once(&qword_1004989D8, sub_100251268);
  return &static HI.HoverOutset.text;
}

double static HI.HoverOutset.text.getter()
{
  return sub_100240A44(&qword_1004989D8, (uint64_t)&static HI.HoverOutset.text);
}

void sub_1002512D4()
{
  static HI.BottomPlayer.Ornament.overlappingHeight = Int.seconds.getter(20);
}

uint64_t *HI.BottomPlayer.Ornament.overlappingHeight.unsafeMutableAddressor()
{
  if (qword_1004989E0 != -1)
    swift_once(&qword_1004989E0, sub_1002512D4);
  return &static HI.BottomPlayer.Ornament.overlappingHeight;
}

double static HI.BottomPlayer.Ornament.overlappingHeight.getter()
{
  return sub_100240A44(&qword_1004989E0, (uint64_t)&static HI.BottomPlayer.Ornament.overlappingHeight);
}

double sub_100251350()
{
  double result;

  if (qword_1004989E0 != -1)
    swift_once(&qword_1004989E0, sub_1002512D4);
  result = -*(double *)&static HI.BottomPlayer.Ornament.overlappingHeight;
  static HI.BottomPlayer.Ornament.offset = 0;
  *(double *)&qword_1004A3340 = -*(double *)&static HI.BottomPlayer.Ornament.overlappingHeight;
  return result;
}

uint64_t *HI.BottomPlayer.Ornament.offset.unsafeMutableAddressor()
{
  if (qword_1004989E8 != -1)
    swift_once(&qword_1004989E8, sub_100251350);
  return &static HI.BottomPlayer.Ornament.offset;
}

double static HI.BottomPlayer.Ornament.offset.getter()
{
  if (qword_1004989E8 != -1)
    swift_once(&qword_1004989E8, sub_100251350);
  return *(double *)&static HI.BottomPlayer.Ornament.offset;
}

double static HI.BottomPlayer.size(dynamicTypeSize:)(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char v11;
  void (*v12)(char *, uint64_t);
  uint64_t v15;

  sub_100005574(&qword_100499A30);
  __chkstk_darwin();
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DynamicTypeSize(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v9 = (char *)&v15 - v8;
  sub_100251920(a1, (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_100251968((uint64_t)v3);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v9, v3, v4);
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DynamicTypeSize.accessibility1(_:), v4);
    v10 = sub_1002519A8();
    v11 = dispatch thunk of static Comparable.< infix(_:_:)(v9, v7, v4, v10);
    v12 = *(void (**)(char *, uint64_t))(v5 + 8);
    v12(v7, v4);
    v12(v9, v4);
    if ((v11 & 1) == 0)
      return 924.0;
  }
  return 784.0;
}

void sub_1002515A4()
{
  static HI.BottomPlayer.buttonSpacing = Int.seconds.getter(16);
}

uint64_t *HI.BottomPlayer.buttonSpacing.unsafeMutableAddressor()
{
  if (qword_1004989F0 != -1)
    swift_once(&qword_1004989F0, sub_1002515A4);
  return &static HI.BottomPlayer.buttonSpacing;
}

double static HI.BottomPlayer.buttonSpacing.getter()
{
  return sub_100240A44(&qword_1004989F0, (uint64_t)&static HI.BottomPlayer.buttonSpacing);
}

void sub_100251620()
{
  static HI.BottomPlayer.contentHorizontalPadding = Int.seconds.getter(16);
}

uint64_t *HI.BottomPlayer.contentHorizontalPadding.unsafeMutableAddressor()
{
  if (qword_1004989F8 != -1)
    swift_once(&qword_1004989F8, sub_100251620);
  return &static HI.BottomPlayer.contentHorizontalPadding;
}

double static HI.BottomPlayer.contentHorizontalPadding.getter()
{
  return sub_100240A44(&qword_1004989F8, (uint64_t)&static HI.BottomPlayer.contentHorizontalPadding);
}

uint64_t _s11MusicCoreUI2HIO4GridO7MetricsV23__derived_struct_equalsySbAG_AGtFZ_0(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2
    && *(double *)(a1 + 8) == *(double *)(a2 + 8)
    && *(double *)(a1 + 16) == *(double *)(a2 + 16)
    && dbl_100397BA0[*(char *)(a1 + 24)] == dbl_100397BA0[*(char *)(a2 + 24)]
    && *(unsigned __int8 *)(a1 + 25) == *(unsigned __int8 *)(a2 + 25)
    && ((*(unsigned __int8 *)(a1 + 26) ^ *(unsigned __int8 *)(a2 + 26)) & 1) == 0
    && *(double *)(a1 + 32) == *(double *)(a2 + 32)
    && *(double *)(a1 + 40) == *(double *)(a2 + 40)
    && *(double *)(a1 + 48) == *(double *)(a2 + 48))
  {
    return (((*(_BYTE *)(a1 + 56) & 1) == 0) ^ *(unsigned __int8 *)(a2 + 56)) & 1;
  }
  else
  {
    return 0;
  }
}

BOOL _s11MusicCoreUI2HIO9SizeClassO1loiySbAE_AEtFZ_0(char a1, char a2)
{
  return dbl_100397BA0[a1] < dbl_100397BA0[a2];
}

uint64_t _s11MusicCoreUI2HIO9SizeClassOyAE0B8Graphics7CGFloatVcfC_0(double a1)
{
  int v1;
  unsigned int v2;

  if (a1 <= 374.0)
    return 0;
  if (a1 <= 500.0)
    return 1;
  if (a1 <= 726.0)
    return 2;
  if (a1 <= 981.0)
    return 3;
  if (a1 > 2500.0)
    v1 = 7;
  else
    v1 = 6;
  if (a1 > 1500.0)
    v2 = v1;
  else
    v2 = 5;
  if (a1 > 1194.0)
    return v2;
  else
    return 4;
}

uint64_t _s11MusicCoreUI2HIO9SizeClassO8rawValueAESg0B8Graphics7CGFloatV_tcfC_0(double a1)
{
  int v2;
  unsigned int v3;

  if (a1 == 374.0)
    return 0;
  if (a1 == 500.0)
    return 1;
  if (a1 == 726.0)
    return 2;
  if (a1 == 981.0)
    return 3;
  if (a1 == 1194.0)
    return 4;
  if (a1 == 2501.0)
    v2 = 7;
  else
    v2 = 8;
  if (a1 == 2500.0)
    v3 = 6;
  else
    v3 = v2;
  if (a1 == 1500.0)
    return 5;
  else
    return v3;
}

uint64_t sub_100251920(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005574(&qword_100499A30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100251968(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005574(&qword_100499A30);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1002519A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10049E500;
  if (!qword_10049E500)
  {
    v1 = type metadata accessor for DynamicTypeSize(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DynamicTypeSize, v1);
    atomic_store(result, (unint64_t *)&qword_10049E500);
  }
  return result;
}

uint64_t sub_1002519F0()
{
  return sub_100188A50(&qword_100499B78, &qword_100499B80);
}

unint64_t sub_100251A18()
{
  unint64_t result;

  result = qword_100499B88;
  if (!qword_100499B88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HI.SizeClass, &type metadata for HI.SizeClass);
    atomic_store(result, (unint64_t *)&qword_100499B88);
  }
  return result;
}

uint64_t sub_100251A5C()
{
  return sub_100188A50(&qword_100499B90, &qword_100499B98);
}

unint64_t sub_100251A84()
{
  unint64_t result;

  result = qword_100499BA0;
  if (!qword_100499BA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HI.Grid.Variant, &type metadata for HI.Grid.Variant);
    atomic_store(result, (unint64_t *)&qword_100499BA0);
  }
  return result;
}

unint64_t sub_100251ACC()
{
  unint64_t result;

  result = qword_100499BA8;
  if (!qword_100499BA8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HI.Grid.Metrics, &type metadata for HI.Grid.Metrics);
    atomic_store(result, (unint64_t *)&qword_100499BA8);
  }
  return result;
}

ValueMetadata *type metadata accessor for HI()
{
  return &type metadata for HI;
}

_BYTE *initializeBufferWithCopyOfBuffer for HI.SizeClass(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t storeEnumTagSinglePayload for HI.SizeClass(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_100251B78 + 4 * byte_1003977B8[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100251BAC + 4 * byte_1003977B3[v4]))();
}

uint64_t sub_100251BAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100251BB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100251BBCLL);
  return result;
}

uint64_t sub_100251BC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100251BD0);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_100251BD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100251BDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HI.SizeClass()
{
  return &type metadata for HI.SizeClass;
}

ValueMetadata *type metadata accessor for HI.Grid()
{
  return &type metadata for HI.Grid;
}

uint64_t storeEnumTagSinglePayload for HI.Grid.Variant(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100251C54 + 4 * byte_1003977C2[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100251C88 + 4 * byte_1003977BD[v4]))();
}

uint64_t sub_100251C88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100251C90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100251C98);
  return result;
}

uint64_t sub_100251CA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100251CACLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100251CB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100251CB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HI.Grid.Variant()
{
  return &type metadata for HI.Grid.Variant;
}

__n128 initializeWithCopy for HI.Grid.Metrics(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for HI.Grid.Metrics(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 26);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for HI.Grid.Metrics(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_BYTE *)(result + 26) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for HI.Grid.Metrics()
{
  return &type metadata for HI.Grid.Metrics;
}

ValueMetadata *type metadata accessor for HI.IndexBar()
{
  return &type metadata for HI.IndexBar;
}

ValueMetadata *type metadata accessor for HI.IndexBar.NumberOfItemsRequirement()
{
  return &type metadata for HI.IndexBar.NumberOfItemsRequirement;
}

ValueMetadata *type metadata accessor for HI.HoverOutset()
{
  return &type metadata for HI.HoverOutset;
}

ValueMetadata *type metadata accessor for HI.BottomPlayer()
{
  return &type metadata for HI.BottomPlayer;
}

ValueMetadata *type metadata accessor for HI.BottomPlayer.Ornament()
{
  return &type metadata for HI.BottomPlayer.Ornament;
}

void sub_100251DF8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  id v5;

  v5 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  objc_msgSend(v5, "userInterfaceIdiom");

  __asm { BR              X10 }
}

double static HI.Modal.modalSize(modalType:sceneSize:navigationBarHeight:)(char a1, uint64_t a2, uint64_t a3, char a4)
{
  double result;

  sub_100251DF8(a2, a3, a4 & 1, a1);
  return result;
}

unint64_t sub_100251FB0()
{
  unint64_t result;

  result = qword_100499BB0;
  if (!qword_100499BB0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HI.Modal.ModalType, &type metadata for HI.Modal.ModalType);
    atomic_store(result, (unint64_t *)&qword_100499BB0);
  }
  return result;
}

ValueMetadata *type metadata accessor for HI.Modal()
{
  return &type metadata for HI.Modal;
}

uint64_t _s5ModalO9ModalTypeOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100252050 + 4 * byte_100397BE5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100252084 + 4 * byte_100397BE0[v4]))();
}

uint64_t sub_100252084(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10025208C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100252094);
  return result;
}

uint64_t sub_1002520A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002520A8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1002520AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002520B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HI.Modal.ModalType()
{
  return &type metadata for HI.Modal.ModalType;
}

_QWORD *sub_1002520D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100005574(&qword_1004991A0);
  v6 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin();
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    v19 = _swiftEmptyArrayStorage;
    sub_100259250(0, v9, 0);
    v11 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v17 = *(_QWORD *)(v3 + 72);
    v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v12(v5, v11, v2);
      swift_dynamicCast(v8, v5, v2, v18, 7);
      v10 = v19;
      if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
      {
        sub_100259250(0, v10[2] + 1, 1);
        v10 = v19;
      }
      v14 = v10[2];
      v13 = v10[3];
      if (v14 >= v13 >> 1)
      {
        sub_100259250(v13 > 1, v14 + 1, 1);
        v10 = v19;
      }
      v10[2] = v14 + 1;
      sub_1000149A8((uint64_t)v8, (uint64_t)v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v14, &qword_1004991A0);
      v11 += v17;
      --v9;
    }
    while (v9);
  }
  return v10;
}

_QWORD *sub_100252294(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  Class isa;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    v4 = a1 + 32;
    do
    {
      v4 += 8;
      isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v6 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
      v7 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, isa);
      specialized ContiguousArray._endMutation()(v7);
      --v2;
    }
    while (v2);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_100252338(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  ValueMetadata *v23;
  _UNKNOWN **v24;
  _QWORD *v25;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v25 = _swiftEmptyArrayStorage;
    sub_1002592C0(0, v1, 0);
    v2 = _swiftEmptyArrayStorage;
    v4 = (_QWORD *)(a1 + 128);
    do
    {
      v5 = *(v4 - 12);
      v6 = *(v4 - 11);
      v19 = *(v4 - 10);
      v7 = *((_BYTE *)v4 - 72);
      v8 = *((_BYTE *)v4 - 71);
      v18 = *((_BYTE *)v4 - 70);
      v9 = *(v4 - 8);
      v10 = *(v4 - 7);
      v11 = *(v4 - 6);
      v17 = *(v4 - 5);
      v20 = *((_OWORD *)v4 - 1);
      v21 = *((_OWORD *)v4 - 2);
      v12 = *v4;
      v13 = v2[2];
      v14 = v2[3];
      v25 = v2;
      swift_bridgeObjectRetain();
      swift_retain(v21);
      swift_retain(v20);
      swift_retain(v12);
      if (v13 >= v14 >> 1)
      {
        sub_1002592C0((_QWORD *)(v14 > 1), v13 + 1, 1);
        v2 = v25;
      }
      v23 = &type metadata for Lyrics.TextLine;
      v24 = &protocol witness table for Lyrics.TextLine;
      v15 = swift_allocObject(&unk_10045C3D8, 120, 7);
      *(_QWORD *)&v22 = v15;
      *(_QWORD *)(v15 + 16) = v5;
      *(_QWORD *)(v15 + 24) = v6;
      *(_QWORD *)(v15 + 32) = v19;
      *(_BYTE *)(v15 + 40) = v7;
      *(_BYTE *)(v15 + 41) = v8;
      *(_BYTE *)(v15 + 42) = v18;
      *(_QWORD *)(v15 + 48) = v9;
      *(_QWORD *)(v15 + 56) = v10;
      *(_QWORD *)(v15 + 64) = v11;
      *(_QWORD *)(v15 + 72) = v17;
      *(_OWORD *)(v15 + 80) = v21;
      *(_OWORD *)(v15 + 96) = v20;
      *(_QWORD *)(v15 + 112) = v12;
      v2[2] = v13 + 1;
      sub_1000137C8(&v22, (uint64_t)&v2[5 * v13 + 4]);
      v4 += 13;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1002524E8(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7365756E6576;
  else
    v3 = 0x652D6D617A616873;
  if (v2)
    v4 = 0xED000073746E6576;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x7365756E6576;
  else
    v5 = 0x652D6D617A616873;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xED000073746E6576;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

BOOL sub_100252594(char a1, char a2)
{
  return dbl_100398458[a1] == dbl_100398458[a2];
}

uint64_t sub_1002525B8(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xD000000000000015;
  v3 = 0x80000001003B7890;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0xD000000000000014;
    else
      v5 = 0xD000000000000015;
    if (v4 == 1)
      v6 = 0x80000001003B78B0;
    else
      v6 = 0x80000001003B78D0;
    v7 = a2;
    if (!a2)
      goto LABEL_12;
  }
  else
  {
    v5 = 0xD000000000000015;
    v6 = 0x80000001003B7890;
    v7 = a2;
    if (!a2)
      goto LABEL_12;
  }
  if (v7 == 1)
  {
    v2 = 0xD000000000000014;
    v3 = 0x80000001003B78B0;
  }
  else
  {
    v3 = 0x80000001003B78D0;
  }
LABEL_12:
  if (v5 == v2 && v6 == v3)
  {
    v8 = 1;
    v3 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v2, v3, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v3);
  return v8 & 1;
}

uint64_t sub_1002526AC(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 1701667182;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x73736572646461;
    else
      v4 = 7300455;
    if (v3 == 1)
      v5 = 0xE700000000000000;
    else
      v5 = 0xE300000000000000;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x73736572646461;
      else
        v2 = 7300455;
      if (v6 == 1)
        v7 = 0xE700000000000000;
      else
        v7 = 0xE300000000000000;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE400000000000000;
    v4 = 1701667182;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE400000000000000;
  if (v4 != 1701667182)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_1002527A4(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7365756E6576;
  else
    v3 = 0x73747369747261;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x7365756E6576;
  else
    v5 = 0x73747369747261;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_100252844(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 1701669236;
  else
    v2 = 1701667182;
  if ((a2 & 1) != 0)
    v3 = 1701669236;
  else
    v3 = 1701667182;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE400000000000000, v3, 0xE400000000000000, 0);
  swift_bridgeObjectRelease_n(0xE400000000000000, 2);
  return v4 & 1;
}

uint64_t sub_1002528AC(uint64_t a1, uint64_t a2)
{
  return sub_1000B304C(a1, a2, (uint64_t)&qword_1004A1510, UIColor_ptr);
}

BOOL sub_1002528C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  uint64_t v5;
  _BOOL8 result;
  double v7;
  double v8;
  double v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32))
    return 0;
  v3 = (double *)(a1 + 40);
  v4 = (double *)(a2 + 40);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v7 = *v3++;
    v8 = v7;
    v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

uint64_t sub_10025292C(uint64_t a1, uint64_t a2)
{
  return sub_1000B304C(a1, a2, (uint64_t)&qword_100499E50, CAMediaTimingFunction_ptr);
}

uint64_t sub_100252940(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float64x2_t *v3;
  float64x2_t *i;
  int32x2_t v5;
  float64_t v6;
  float64_t v7;
  float64_t v8;
  float64_t v9;
  float64_t v10;
  float64_t v11;
  float64_t v12;
  float64_t v13;
  float64_t v14;
  float64_t v15;
  uint64_t result;
  char v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    v3 = (float64x2_t *)(a2 + 80);
    for (i = (float64x2_t *)(a1 + 80); ; i = (float64x2_t *)((char *)i + 56))
    {
      v5 = vmovn_s64(vceqq_f64(i[-3], v3[-3]));
      if ((v5.i32[0] & v5.i32[1] & 1) == 0)
        break;
      v6 = i[-2].f64[0];
      v7 = i[-2].f64[1];
      v9 = i[-1].f64[0];
      v8 = i[-1].f64[1];
      v10 = i->f64[0];
      v11 = v3[-2].f64[0];
      v12 = v3[-2].f64[1];
      v14 = v3[-1].f64[0];
      v13 = v3[-1].f64[1];
      v15 = v3->f64[0];
      if (*(_QWORD *)&v6 == *(_QWORD *)&v11 && *(_QWORD *)&v7 == *(_QWORD *)&v12)
      {
        result = 0;
      }
      else
      {
        v17 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)&v6, *(_QWORD *)&v7, *(_QWORD *)&v11, *(_QWORD *)&v12, 0);
        result = 0;
        if ((v17 & 1) == 0)
          return result;
      }
      if (*(_QWORD *)&v9 != *(_QWORD *)&v14 || *(_QWORD *)&v8 != *(_QWORD *)&v13 || *(_QWORD *)&v10 != *(_QWORD *)&v15)
        return result;
      v3 = (float64x2_t *)((char *)v3 + 56);
      if (!--v2)
        return 1;
    }
  }
  return 0;
}

uint64_t sub_100252A34(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4];
  v6 = a1[5];
  v7 = a2[4];
  v8 = a2[5];
  v9 = v5 == v7 && v6 == v8;
  if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0), result = 0, (v10 & 1) != 0))
  {
    v12 = v2 - 1;
    if (!v12)
      return 1;
    v13 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      v15 = *(i - 1);
      v16 = *i;
      v17 = *(v13 - 1);
      v18 = *v13;
      v19 = v15 == v17 && v16 == v18;
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0) & 1) == 0)
        break;
      v13 += 2;
      if (!--v12)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t _s11MusicCoreUI16PlaylistCuratorsO4ViewV13ConfigurationV23__derived_struct_equalsySbAG_AGtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = type metadata accessor for Artwork(0);
  v43 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005574((uint64_t *)&unk_10049F430);
  __chkstk_darwin();
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005574(&qword_100499E58);
  __chkstk_darwin();
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PlaylistCurators.Curator(0);
  __chkstk_darwin();
  v13 = (uint64_t *)((char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = __chkstk_darwin();
  v17 = (uint64_t *)((char *)&v36 - v16);
  v18 = *(_QWORD *)(a1 + 16);
  if (v18 == *(_QWORD *)(a2 + 16))
  {
    v42 = v9;
    if (!v18 || a1 == a2)
      return 1;
    v40 = a1;
    v41 = v14;
    v19 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    v20 = *(_QWORD *)(v15 + 72);
    v37 = v6;
    v38 = v20;
    v39 = a2;
    while (1)
    {
      sub_100261490(a1 + v19, (uint64_t)v17);
      sub_100261490(a2 + v19, (uint64_t)v13);
      v21 = v17[1];
      v22 = v13[1];
      v23 = *v17 == *v13 && v21 == v22;
      if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v21, *v13, v22, 0) & 1) == 0)
        break;
      v24 = *(int *)(v41 + 20);
      v25 = (uint64_t)v13 + v24;
      v26 = (uint64_t)&v11[*(int *)(v42 + 48)];
      sub_100014A7C((uint64_t)v17 + v24, (uint64_t)v11, (uint64_t *)&unk_10049F430);
      sub_100014A7C(v25, v26, (uint64_t *)&unk_10049F430);
      v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
      if (v27((uint64_t)v11, 1, v4) == 1)
      {
        if (v27(v26, 1, v4) != 1)
          goto LABEL_19;
        sub_100008758((uint64_t)v11, (uint64_t *)&unk_10049F430);
      }
      else
      {
        sub_100014A7C((uint64_t)v11, (uint64_t)v8, (uint64_t *)&unk_10049F430);
        if (v27(v26, 1, v4) == 1)
        {
          (*(void (**)(char *, uint64_t))(v43 + 8))(v8, v4);
LABEL_19:
          sub_100008758((uint64_t)v11, &qword_100499E58);
          break;
        }
        v28 = v43;
        v29 = v8;
        v30 = v37;
        (*(void (**)(char *, uint64_t, uint64_t))(v43 + 32))(v37, v26, v4);
        v31 = sub_100006924(&qword_10049E860, (uint64_t (*)(uint64_t))&type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
        v32 = dispatch thunk of static Equatable.== infix(_:_:)(v29, v30, v4, v31);
        v33 = *(void (**)(char *, uint64_t))(v28 + 8);
        v34 = v30;
        v8 = v29;
        v33(v34, v4);
        v33(v29, v4);
        sub_100008758((uint64_t)v11, (uint64_t *)&unk_10049F430);
        if ((v32 & 1) == 0)
          break;
      }
      sub_1002614D4((uint64_t)v13);
      sub_1002614D4((uint64_t)v17);
      a2 = v39;
      v19 += v38;
      --v18;
      a1 = v40;
      if (!v18)
        return 1;
    }
    sub_1002614D4((uint64_t)v13);
    sub_1002614D4((uint64_t)v17);
  }
  return 0;
}

Swift::Int sub_100252E58(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v3 = 0xD000000000000015;
  Hasher.init(_seed:)(v6);
  if (a2)
  {
    if (a2 == 1)
    {
      v3 = 0xD000000000000014;
      v4 = 0x80000001003B78B0;
    }
    else
    {
      v4 = 0x80000001003B78D0;
    }
  }
  else
  {
    v4 = 0x80000001003B7890;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

double TimedElement.duration.getter(uint64_t a1, uint64_t a2)
{
  double v4;

  v4 = (*(double (**)(void))(a2 + 16))();
  return v4 - (*(double (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
}

void TimedElement.timeRange.getter(uint64_t a1, uint64_t a2)
{
  double v4;

  v4 = (*(double (**)(void))(a2 + 8))();
  if (v4 > (*(double (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2))
    __break(1u);
}

double Lyrics.Word.startTime.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v1 + 16))
    return *(double *)(v1 + 32);
  else
    return 0.0;
}

double Lyrics.Word.endTime.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
    return *(double *)(v1 + 56 * v2 - 16);
  else
    return 0.0;
}

uint64_t Lyrics.Word.range.getter()
{
  uint64_t v0;

  return sub_10025C954(*(_QWORD *)(v0 + 16));
}

uint64_t Lyrics.Word.emphasis.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

double Lyrics.Word.Emphasis.factor.getter(uint64_t a1, char a2)
{
  double result;

  result = *(double *)&a1;
  if ((a2 & 1) != 0)
    return 0.0;
  return result;
}

void Lyrics.Word.Emphasis.hash(into:)(uint64_t a1, Swift::UInt64 a2, char a3)
{
  Swift::UInt64 v4;

  if ((a3 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    if ((a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v4 = a2;
    else
      v4 = 0;
    Hasher._combine(_:)(v4);
  }
}

uint64_t static Lyrics.Word.Emphasis.__derived_enum_equals(_:_:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, unsigned __int8 a4)
{
  char v4;

  if (((a2 | a4) & 1) != 0)
    v4 = a2 & a4;
  else
    v4 = *(double *)&a1 == *(double *)&a3;
  return v4 & 1;
}

Swift::Int Lyrics.Word.Emphasis.hashValue.getter(Swift::UInt64 a1, char a2)
{
  Swift::UInt64 v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  if ((a2 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    if ((a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v4 = a1;
    else
      v4 = 0;
    Hasher._combine(_:)(v4);
  }
  return Hasher._finalize()();
}

Swift::Int sub_1002530EC()
{
  uint64_t v0;

  return Lyrics.Word.Emphasis.hashValue.getter(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

void sub_1002530F8()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v1 = *(_QWORD *)v0;
    Hasher._combine(_:)(1uLL);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v2 = v1;
    else
      v2 = 0;
    Hasher._combine(_:)(v2);
  }
}

Swift::Int sub_100253144()
{
  uint64_t v0;
  Swift::UInt64 v1;
  char v2;
  Swift::UInt64 v3;
  _QWORD v5[9];

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)(v5);
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v3 = v1;
    else
      v3 = 0;
    Hasher._combine(_:)(v3);
  }
  return Hasher._finalize()();
}

uint64_t sub_1002531AC(uint64_t a1, uint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;

  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a2 + 8);
  result = v3 & v4;
  if ((v3 & 1) == 0 && (v4 & 1) == 0)
    return *(double *)a1 == *(double *)a2;
  return result;
}

void Lyrics.Word.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  uint64_t v8[2];
  Swift::UInt64 v9;
  char v10;

  v3 = *v1;
  v4 = v1[1];
  swift_bridgeObjectRetain();
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease();
  v5 = v1[2];
  swift_bridgeObjectRetain();
  sub_10025C710(a1, v5);
  swift_bridgeObjectRelease();
  sub_10013D710(v1 + 3, (uint64_t)v8);
  sub_10013D710(v8, (uint64_t)&v9);
  if (v10 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v6 = v9;
    Hasher._combine(_:)(1uLL);
    if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v7 = v6;
    else
      v7 = 0;
    Hasher._combine(_:)(v7);
  }
}

uint64_t static Lyrics.Word.__derived_struct_equals(_:_:)(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  uint64_t result;
  double v10;
  uint64_t v11[2];
  uint64_t v12[2];
  double v13;
  char v14;
  double v15;
  char v16;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  v7 = v4 == *a2 && v5 == v6;
  if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0), result = 0, (v8 & 1) != 0))
  {
    if ((sub_100252940(a1[2], a2[2]) & 1) != 0)
    {
      sub_10013D710(a1 + 3, (uint64_t)v12);
      sub_10013D710(a2 + 3, (uint64_t)v11);
      sub_10013D710(v12, (uint64_t)&v13);
      if (v14 == 1)
      {
        sub_10013D710(v11, (uint64_t)&v15);
        if ((v16 & 1) != 0)
          return 1;
      }
      else
      {
        v10 = v13;
        sub_10013D710(v11, (uint64_t)&v15);
        if ((v16 & 1) == 0 && v10 == v15)
          return 1;
      }
    }
    return 0;
  }
  return result;
}

Swift::Int Lyrics.Word.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Lyrics.Word.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1002533BC()
{
  __int128 *v0;
  __int128 v1;
  _QWORD v3[9];
  __int128 v4;
  __int128 v5;
  char v6;

  v1 = v0[1];
  v4 = *v0;
  v5 = v1;
  v6 = *((_BYTE *)v0 + 32);
  Hasher.init(_seed:)(v3);
  Lyrics.Word.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

void sub_10025340C(uint64_t a1)
{
  Lyrics.Word.hash(into:)(a1);
}

Swift::Int sub_100253444()
{
  __int128 *v0;
  __int128 v1;
  _QWORD v3[9];
  __int128 v4;
  __int128 v5;
  char v6;

  v1 = v0[1];
  v4 = *v0;
  v5 = v1;
  v6 = *((_BYTE *)v0 + 32);
  Hasher.init(_seed:)(v3);
  Lyrics.Word.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

uint64_t sub_100253490(double *a1, uint64_t a2)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  int v12;
  BOOL v13;
  char v14;
  uint64_t result;
  int v16;
  int v17;

  v4 = *a1;
  v5 = *((_QWORD *)a1 + 1);
  v6 = *((_QWORD *)a1 + 2);
  v7 = a1[3];
  v8 = *((unsigned __int8 *)a1 + 32);
  v9 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(double *)(a2 + 24);
  v12 = *(unsigned __int8 *)(a2 + 32);
  v13 = *(_QWORD *)&v4 == *(_QWORD *)a2 && v5 == v9;
  if (v13
    || (v14 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)&v4, v5, *(_QWORD *)a2, v9, 0),
        result = 0,
        (v14 & 1) != 0))
  {
    v16 = sub_100252940(v6, v10);
    v17 = v16 ^ 1 | v8;
    if (((v17 | v12) & 1) != 0)
      return v16 & v12 & v17;
    else
      return v7 == v11;
  }
  return result;
}

uint64_t Lyrics.TextLine.BackgroundVocals.range.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t Lyrics.Syllable.wordLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

void Lyrics.Syllable.hash(into:)(uint64_t a1)
{
  Swift::UInt64 *v1;
  Swift::UInt64 *v2;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  Swift::UInt v8;

  v2 = v1;
  if ((*v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *v2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  if ((v2[1] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = v2[1];
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  v6 = v2[2];
  v7 = v2[3];
  sub_10025C994((uint64_t)v2);
  String.hash(into:)(a1, v6, v7);
  sub_100098A50((uint64_t)v2);
  v8 = v2[5];
  Hasher._combine(_:)(v2[4]);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v2[6]);
}

Swift::Int Lyrics.Syllable.hashValue.getter()
{
  Swift::UInt64 *v0;
  Swift::UInt64 *v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt v6;
  _QWORD v8[9];

  v1 = v0;
  Hasher.init(_seed:)(v8);
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *v0;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  if ((v0[1] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v0[1];
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  v4 = v0[2];
  v5 = v1[3];
  sub_10025C994((uint64_t)v1);
  String.hash(into:)(v8, v4, v5);
  sub_100098A50((uint64_t)v1);
  v6 = v1[5];
  Hasher._combine(_:)(v1[4]);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v1[6]);
  return Hasher._finalize()();
}

Swift::Int sub_100253684()
{
  return Lyrics.Syllable.hashValue.getter();
}

void sub_1002536C4(uint64_t a1)
{
  Lyrics.Syllable.hash(into:)(a1);
}

Swift::Int sub_100253704()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt v5;
  Swift::UInt v6;
  Swift::UInt v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  _QWORD v11[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  v6 = v0[5];
  v7 = v0[6];
  Hasher.init(_seed:)(v11);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v8 = v1;
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v9 = v2;
  else
    v9 = 0;
  Hasher._combine(_:)(v9);
  swift_bridgeObjectRetain();
  String.hash(into:)(v11, v3, v4);
  swift_bridgeObjectRelease(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

BOOL sub_1002537C0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[3];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  return _s11MusicCoreUI6LyricsC8SyllableV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)v5, (uint64_t)v7);
}

uint64_t Lyrics.TextLine.words.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 72))();
}

uint64_t Lyrics.TextLine.text.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 56))();
}

uint64_t Lyrics.TextLine.backgroundVocals.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD v4[8];

  (*(void (**)(_QWORD *__return_ptr))(v1 + 88))(v4);
  return sub_1000149A8((uint64_t)v4, a1, &qword_100499BB8);
}

uint64_t Lyrics.TextLine.backgroundText.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3[8];
  _BYTE v4[16];
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(uint64_t *__return_ptr))(v0 + 88))(v3);
  sub_1000149A8((uint64_t)v3, (uint64_t)v4, &qword_100499BB8);
  if (!v6)
    return 0;
  v1 = v5;
  swift_bridgeObjectRetain();
  sub_10025C9BC(v3);
  return v1;
}

uint64_t Lyrics.TextLine.debugDescription.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  void *object;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  void *v8;
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(54);
  v1._object = (void *)0x80000001003B8480;
  v1._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 0x6954747261747320;
  v4._object = (void *)0xEB000000003D656DLL;
  String.append(_:)(v4);
  Double.write<A>(to:)(v10, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)v0);
  v5._countAndFlagsBits = 0x656D6954646E6520;
  v5._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v5);
  Double.write<A>(to:)(v10, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 8));
  v6._countAndFlagsBits = 0x3D7478657420;
  v6._object = (void *)0xE600000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = (*(uint64_t (**)(void))(v0 + 56))();
  v8 = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v8);
  return v10[0];
}

uint64_t Lyrics.TextLine.textAlignment.getter()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 26) & 1) != 0)
  {
    if ((*(_BYTE *)(v0 + 24) & 1) == 0)
      return 2;
  }
  else if ((*(_BYTE *)(v0 + 24) & 1) != 0)
  {
    return 2;
  }
  return 0;
}

_UNKNOWN **static Lyrics.Capability.allCases.getter()
{
  return &off_100459BF8;
}

uint64_t Lyrics.TextLine.init(lineIndex:startTime:endTime:primaryVocalsStartTime:primaryVocalsEndTime:agentAlignment:direction:lyricsDirection:capabilities:localizedTextProvider:localizedWordsProvider:localizedBackgroundVocalsProvider:)@<X0>(uint64_t result@<X0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, __int128 a14, uint64_t a15)
{
  *(double *)a9 = a10;
  *(double *)(a9 + 8) = a11;
  *(_QWORD *)(a9 + 16) = result;
  *(_BYTE *)(a9 + 24) = a2 & 1;
  *(_BYTE *)(a9 + 25) = a3 & 1;
  *(_BYTE *)(a9 + 26) = a4 & 1;
  *(_QWORD *)(a9 + 32) = a5;
  *(double *)(a9 + 40) = a12;
  *(double *)(a9 + 48) = a13;
  *(_QWORD *)(a9 + 56) = a6;
  *(_QWORD *)(a9 + 64) = a7;
  *(_QWORD *)(a9 + 72) = a8;
  *(_OWORD *)(a9 + 80) = a14;
  *(_QWORD *)(a9 + 96) = a15;
  return result;
}

uint64_t Lyrics.TextLine.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  Hasher._combine(_:)(*(_QWORD *)(v1 + 16));
  if ((*(_QWORD *)v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = *(_QWORD *)v1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  if ((*(_QWORD *)(v1 + 8) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *(_QWORD *)(v1 + 8);
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  v5 = (*(uint64_t (**)(void))(v1 + 56))();
  v7 = v6;
  String.hash(into:)(a1, v5, v6);
  return swift_bridgeObjectRelease(v7);
}

uint64_t Lyrics.TextLine.BackgroundVocals.direction.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t Lyrics.TextLine.BackgroundVocals.words.getter()
{
  return swift_bridgeObjectRetain();
}

Swift::Int Lyrics.TextLine.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Lyrics.TextLine.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_100253B94()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 26) & 1) != 0)
  {
    if (*(_BYTE *)(v0 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(v0 + 24) & 1) == 0)
  {
    return 0;
  }
  return 2;
}

Swift::Int sub_100253BBC()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Lyrics.TextLine.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_100253BF8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[6];
  uint64_t v12;
  _OWORD v13[6];
  uint64_t v14;

  v2 = *(_OWORD *)(a1 + 80);
  v11[4] = *(_OWORD *)(a1 + 64);
  v11[5] = v2;
  v12 = *(_QWORD *)(a1 + 96);
  v3 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v3;
  v4 = *(_OWORD *)(a1 + 48);
  v11[2] = *(_OWORD *)(a1 + 32);
  v11[3] = v4;
  v5 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v5;
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 64);
  v9 = *(_OWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 96);
  v13[4] = v8;
  v13[5] = v9;
  v13[2] = v6;
  v13[3] = v7;
  return _s11MusicCoreUI6LyricsC8TextLineV2eeoiySbAE_AEtFZ_0((uint64_t)v11, (uint64_t)v13) & 1;
}

double Lyrics.InstrumentalLine.endTime.getter(double a1, double a2)
{
  return a2;
}

uint64_t Lyrics.InstrumentalLine.lyricsDirection.getter(uint64_t a1, char a2)
{
  return a2 & 1;
}

uint64_t Lyrics.InstrumentalLine.textAlignment.getter(uint64_t a1, char a2)
{
  return 2 * (a2 & 1u);
}

uint64_t Lyrics.InstrumentalLine.debugDescription.getter(double a1, double a2)
{
  Swift::String v4;
  Swift::String v5;
  void *object;
  Swift::String v7;
  Swift::String v8;
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(54);
  v4._object = (void *)0x80000001003B84A0;
  v4._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v4);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7._countAndFlagsBits = 0x6954747261747320;
  v7._object = (void *)0xEB000000003D656DLL;
  String.append(_:)(v7);
  Double.write<A>(to:)(v10, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, a1);
  v8._countAndFlagsBits = 0x656D6954646E6520;
  v8._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v8);
  Double.write<A>(to:)(v10, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, a2);
  return v10[0];
}

uint64_t Lyrics.SongwritersLine.textAlignment.getter()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 24))
    return 2;
  else
    return 0;
}

uint64_t sub_100253DB4()
{
  uint64_t v0;

  return Lyrics.InstrumentalLine.debugDescription.getter(*(double *)(v0 + 8), *(double *)(v0 + 16));
}

uint64_t Lyrics.SongwritersLine.debugDescription.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  Swift::String v7;
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(68);
  v1._object = (void *)0x80000001003B84C0;
  v1._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x6954747261747320;
  v3._object = (void *)0xEB000000003D656DLL;
  String.append(_:)(v3);
  Double.write<A>(to:)(v9, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 8));
  v4._countAndFlagsBits = 0x656D6954646E6520;
  v4._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v4);
  Double.write<A>(to:)(v9, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 16));
  v5._countAndFlagsBits = 0x697277676E6F7320;
  v5._object = (void *)0xED00003D73726574;
  String.append(_:)(v5);
  v6 = swift_bridgeObjectRetain();
  v7._countAndFlagsBits = Array.description.getter(v6, &type metadata for String);
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  sub_10025CA24(v0);
  return v9[0];
}

uint64_t sub_100253F34()
{
  return Lyrics.SongwritersLine.debugDescription.getter();
}

uint64_t Lyrics.originalLines.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Lyrics.availableLanguages.getter()
{
  return swift_bridgeObjectRetain();
}

double Lyrics.leadingSilence.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 88);
}

uint64_t Lyrics.vocalistsType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 96);
}

uint64_t Lyrics.songwriters.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Lyrics.currentLanguage.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 112, v3, 0, 0);
  v1 = *(_QWORD *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Lyrics.currentLanguage.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE v7[24];

  swift_beginAccess(v2 + 112, v7, 1, 0);
  v5 = *(_QWORD *)(v2 + 120);
  *(_QWORD *)(v2 + 112) = a1;
  *(_QWORD *)(v2 + 120) = a2;
  return swift_bridgeObjectRelease(v5);
}

uint64_t (*Lyrics.currentLanguage.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 112, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t Lyrics.staticText.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 144))
  {
    v1 = *(_QWORD *)(v0 + 136);
  }
  else
  {
    v1 = sub_1002540D4(v0);
    *(_QWORD *)(v0 + 136) = v1;
    *(_QWORD *)(v0 + 144) = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1002540D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  void (*v18)(uint64_t *__return_ptr);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t countAndFlagsBits;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35[8];
  _BYTE v36[16];
  uint64_t v37;
  uint64_t v38;

  v1 = *(_QWORD *)(a1 + 32);
  v33 = 0;
  v34 = 0xE000000000000000;
  v30 = *(_QWORD *)(v1 + 16);
  if (v30)
  {
    v28 = v1;
    v29 = v1 + 32;
    swift_bridgeObjectRetain_n(v1, 2);
    v2 = 0;
    do
    {
      v6 = *(_QWORD *)(v29 + 8 * v2);
      v3 = v33;
      v4 = v34;
      v7 = *(_QWORD *)(v6 + 16);
      if (v7)
      {
        v31 = v2;
        swift_bridgeObjectRetain_n(v6, 2);
        swift_bridgeObjectRetain();
        v8 = (uint64_t *)(v6 + 128);
        do
        {
          v16 = (uint64_t (*)(uint64_t))*(v8 - 5);
          v17 = *(v8 - 4);
          v19 = *(v8 - 2);
          v18 = (void (*)(uint64_t *__return_ptr))*(v8 - 1);
          v20 = *v8;
          swift_bridgeObjectRetain();
          swift_retain(v17);
          swift_retain(v19);
          v21 = swift_retain(v20);
          if ((v34 & 0xF00000000000000) != 0)
          {
            v22._countAndFlagsBits = 10;
            v22._object = (void *)0xE100000000000000;
            String.append(_:)(v22);
          }
          v23 = v16(v21);
          v25 = v24;
          v18(v35);
          sub_1000149A8((uint64_t)v35, (uint64_t)v36, &qword_100499BB8);
          v12 = v38;
          v32 = v19;
          if (v38)
          {
            v9 = v37;
            swift_bridgeObjectRetain();
            sub_10025C9BC(v35);
            v10._countAndFlagsBits = v9;
            v10._object = (void *)v12;
            String.append(_:)(v10);
            v11._countAndFlagsBits = 41;
            v11._object = (void *)0xE100000000000000;
            String.append(_:)(v11);
            swift_bridgeObjectRelease();
            v12 = 40;
            v13 = (void *)0xE100000000000000;
          }
          else
          {
            v13 = (void *)0xE000000000000000;
          }
          swift_bridgeObjectRetain();
          v14._countAndFlagsBits = v12;
          v14._object = v13;
          String.append(_:)(v14);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v15._countAndFlagsBits = v23;
          v15._object = v25;
          String.append(_:)(v15);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release(v17);
          swift_release(v32);
          swift_release(v20);
          v8 += 13;
          --v7;
        }
        while (v7);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v3 = v33;
        v4 = v34;
        v2 = v31;
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      ++v2;
      v33 = v3;
      v34 = v4;
      v5._countAndFlagsBits = 10;
      v5._object = (void *)0xE100000000000000;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
    }
    while (v2 != v30);
    swift_bridgeObjectRelease_n(v28, 2);
  }
  countAndFlagsBits = String.trim()()._countAndFlagsBits;
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t Lyrics.staticText.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 144);
  *(_QWORD *)(v2 + 136) = a1;
  *(_QWORD *)(v2 + 144) = a2;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*Lyrics.staticText.modify(uint64_t *a1))(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  *a1 = Lyrics.staticText.getter();
  a1[1] = v3;
  return sub_1002543B0;
}

uint64_t sub_1002543B0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v1 = a1[2];
  v3 = *a1;
  v4 = *(_QWORD *)(v1 + 144);
  *(_QWORD *)(v1 + 136) = v3;
  *(_QWORD *)(v1 + 144) = v2;
  return swift_bridgeObjectRelease(v4);
}

uint64_t Lyrics.alignment(for:default:)(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)(v3 + 96))
  {
    v4 = a1[3];
    v5 = a1[4];
    sub_10000ABC8(a1, v4);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(v4, v5);
  }
  else
  {
    sub_1000244B0((uint64_t)a1, (uint64_t)v11);
    if ((a3 & 1) != 0)
    {
      v9 = v12;
      v10 = v13;
      sub_10000ABC8(v11, v12);
      a2 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 24))(v9, v10);
    }
    sub_10000682C(v11);
    return a2;
  }
}

double *Lyrics.originalLine(for:)@<X0>(double *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  double *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t (*v11)(_QWORD);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD);
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t (*v39)(_QWORD);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  v5 = 0uLL;
  if (!v4)
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0uLL;
    v28 = 0uLL;
    v29 = 0uLL;
    goto LABEL_21;
  }
  v6 = result;
  v33 = a2;
  v7 = *result;
  swift_bridgeObjectRetain_n(v3, 2);
  v8 = 0;
  while (1)
  {
    v9 = v3 + v8;
    v10 = *(_OWORD *)(v3 + v8 + 32);
    if (*(double *)&v10 != v7 || *((double *)&v10 + 1) != v6[1])
      goto LABEL_3;
    v40 = *(_QWORD *)(v9 + 48);
    v36 = *(unsigned __int8 *)(v9 + 56);
    v34 = *(unsigned __int8 *)(v9 + 57);
    v35 = *(unsigned __int8 *)(v9 + 58);
    v37 = *(_OWORD *)(v3 + v8 + 32);
    v38 = *(_OWORD *)(v9 + 72);
    v11 = *(uint64_t (**)(_QWORD))(v9 + 88);
    v43 = *(_OWORD *)(v9 + 112);
    v44 = *(_OWORD *)(v9 + 96);
    v12 = *(_QWORD *)(v9 + 128);
    v42 = *(_QWORD *)(v9 + 64);
    swift_bridgeObjectRetain();
    swift_retain(v44);
    swift_retain(v43);
    v41 = v12;
    v13 = swift_retain(v12);
    v39 = v11;
    v14 = v11(v13);
    v16 = v15;
    v17 = (*((uint64_t (**)(void))v6 + 7))();
    if (v14 == v17 && v16 == v18)
    {
      swift_bridgeObjectRelease_n(v3, 2);
      goto LABEL_16;
    }
    v20 = v18;
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v17, v18, 0);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v20);
    if ((v21 & 1) != 0)
      break;
    swift_release(v41);
    swift_release(v43);
    swift_release(v44);
    swift_bridgeObjectRelease(v42);
LABEL_3:
    v8 += 104;
    if (!--v4)
    {
      result = (double *)swift_bridgeObjectRelease_n(v3, 2);
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 0uLL;
      v28 = 0uLL;
      v29 = 0uLL;
      a2 = v33;
      v5 = 0uLL;
      goto LABEL_21;
    }
  }
  v16 = v3;
LABEL_16:
  result = (double *)swift_bridgeObjectRelease_n(v16, 2);
  v30 = 256;
  if (!v34)
    v30 = 0;
  v31 = v30 | v36;
  v32 = 0x10000;
  if (!v35)
    v32 = 0;
  v23 = v31 | v32;
  v5 = v37;
  v27 = v38;
  a2 = v33;
  v25 = v39;
  v22 = v40;
  v26 = v41;
  v24 = v42;
  v29 = v43;
  v28 = v44;
LABEL_21:
  *(_OWORD *)a2 = v5;
  *(_QWORD *)(a2 + 16) = v22;
  *(_QWORD *)(a2 + 24) = v23;
  *(_QWORD *)(a2 + 32) = v24;
  *(_OWORD *)(a2 + 40) = v27;
  *(_QWORD *)(a2 + 56) = v25;
  *(_OWORD *)(a2 + 64) = v28;
  *(_OWORD *)(a2 + 80) = v29;
  *(_QWORD *)(a2 + 96) = v26;
  return result;
}

void sub_1002546D4(_QWORD *a1@<X8>)
{
  *a1 = &off_100459C20;
}

NLLanguage sub_1002546E4()
{
  uint64_t v0;
  uint64_t v1;
  NSString *v2;

  v0 = sub_100005574(&qword_100499F18);
  v1 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100384A60;
  *(_QWORD *)(v1 + 32) = NLLanguageArabic;
  *(_QWORD *)(v1 + 40) = NLLanguageHebrew;
  qword_1004A3358 = v1;
  v2 = NLLanguageArabic;
  return NLLanguageHebrew;
}

NLLanguage sub_100254750()
{
  uint64_t v0;
  uint64_t v1;
  NSString *v2;
  NSString *v3;

  v0 = sub_100005574(&qword_100499F18);
  v1 = swift_allocObject(v0, 56, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100384A40;
  *(_QWORD *)(v1 + 32) = NLLanguageJapanese;
  *(_QWORD *)(v1 + 40) = NLLanguageSimplifiedChinese;
  *(_QWORD *)(v1 + 48) = NLLanguageTraditionalChinese;
  qword_1004A3360 = v1;
  v2 = NLLanguageJapanese;
  v3 = NLLanguageSimplifiedChinese;
  return NLLanguageTraditionalChinese;
}

uint64_t Lyrics.audioAttributes.getter()
{
  return swift_bridgeObjectRetain();
}

void Lyrics.AudioAttribute.hash(into:)(double a1)
{
  Swift::UInt64 v2;

  Hasher._combine(_:)(0);
  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *(_QWORD *)&a1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
}

BOOL static Lyrics.AudioAttribute.__derived_enum_equals(_:_:)(double a1, double a2)
{
  return a1 == a2;
}

Swift::Int Lyrics.AudioAttribute.hashValue.getter(double a1)
{
  Swift::UInt64 v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(0);
  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *(_QWORD *)&a1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int sub_10025488C()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_1002548E0()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *v0;
  Hasher._combine(_:)(0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
}

Swift::Int sub_100254920()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void Lyrics.spatialOffset.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_BYTE *)(v1 + 32);
  v3 = -1;
  if (1 << v2 < 64)
    v3 = ~(-1 << (1 << v2));
  if ((v3 & *(_QWORD *)(v1 + 56)) == 0)
  {
    v4 = v2 & 0x3F;
    if (v4 > 6
      && !*(_QWORD *)(v1 + 64)
      && v4 >= 8
      && !*(_QWORD *)(v1 + 72)
      && !*(_QWORD *)(v1 + 80)
      && v4 >= 9
      && !*(_QWORD *)(v1 + 88))
    {
      v5 = (unint64_t)((1 << v2) + 63) >> 6;
      if (v5 <= 5)
        v5 = 5;
      v6 = v5 - 5;
      v7 = (uint64_t *)(v1 + 96);
      v8 = 256;
      do
      {
        if (!v6)
          break;
        v9 = *v7++;
        --v6;
        v8 += 64;
      }
      while (!v9);
    }
  }
}

uint64_t Lyrics.__allocating_init(identifier:songInfo:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = swift_allocObject(v3, 160, 7);
  Lyrics.init(identifier:songInfo:)(a1, a2, a3);
  return v7;
}

uint64_t Lyrics.init(identifier:songInfo:)(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD *v3;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  id v41;
  double v42;
  void *v43;
  char **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t inited;
  void *v49;
  _QWORD *v50;
  void *v51;
  id v52;
  char v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  id v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  BOOL v77;
  int64_t v78;
  unint64_t v79;
  int64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  char v90;
  unint64_t v91;
  uint64_t v92;
  _BOOL8 v93;
  uint64_t v94;
  char v95;
  unint64_t v96;
  char v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  id v111;
  void *v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int64_t v119;
  int64_t v120;
  char *isUniquelyReferenced_nonNull_native;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int64_t v126;
  unint64_t v127;
  unint64_t v128;
  _QWORD *v129;
  void *v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __n128 v141;
  char v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  int64_t v146;
  char *v147;
  _UNKNOWN **v148;
  double v149;
  double v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  double v154;
  double v155;
  int v156;
  int v157;
  int v158;
  char **v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  __int128 v176;
  double v177;
  id v178;
  uint64_t v179;
  id v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  id v186;
  void *v187;
  id v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  char v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t result;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  BOOL *v209;
  uint64_t v210;
  char *v211;
  _BOOL4 v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  int v217;
  int v218;
  __int128 v219;
  _UNKNOWN **v220;
  char *v221;
  int64_t v222;
  void *v223;
  __int128 v224;
  __int128 v225;
  char v226[40];
  __int128 v227;
  ValueMetadata *v228;
  _UNKNOWN **v229;
  _QWORD *v230;
  char v231[12];
  char v232[8];

  *(_QWORD *)&v224 = type metadata accessor for Locale.Language(0);
  v222 = *(_QWORD *)(v224 - 8);
  __chkstk_darwin();
  v221 = (char *)&v204 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[14] = 0;
  v8 = v3 + 14;
  v3[15] = 0;
  v9 = sub_100233674((uint64_t)_swiftEmptyArrayStorage);
  v206 = v3;
  v3[16] = v9;
  v10 = v3 + 16;
  v3[17] = 0;
  v3[18] = 0;
  v3[2] = a1;
  v3[3] = a2;
  v223 = a3;
  v11 = objc_msgSend(a3, "language");
  if (v11)
  {
    v12 = v11;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v15 = v14;

  }
  else
  {
    v13 = 0;
    v15 = 0;
  }
  v16 = v206;
  v206[8] = v13;
  v16[9] = v15;
  v17 = v223;
  v18 = objc_msgSend(v223, "availableTranslations");
  v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, &type metadata for String);

  v16[10] = v19;
  v21 = v16[8];
  v20 = v16[9];
  swift_beginAccess(v8, v232, 1, 0);
  v16[14] = v21;
  v16[15] = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = sub_100233674((uint64_t)_swiftEmptyArrayStorage);
  swift_beginAccess(v10, v231, 1, 0);
  v16[16] = v22;
  swift_bridgeObjectRelease();
  objc_msgSend(v17, "leadingSilence");
  v16[11] = v23;
  v24 = objc_msgSend(v17, "songwriters");
  v205 = sub_1000087DC(0, &qword_100499BC0, MSVLyricsSongWriter_ptr);
  v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v24, v205);

  if ((unint64_t)v25 >> 62)
  {
    if (v25 < 0)
      v40 = v25;
    else
      v40 = v25 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v26 = _CocoaArrayWrapper.endIndex.getter(v40);
    swift_bridgeObjectRelease();
    if (v26)
      goto LABEL_6;
LABEL_19:
    swift_bridgeObjectRelease();
    v28 = _swiftEmptyArrayStorage;
    goto LABEL_20;
  }
  v26 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v26)
    goto LABEL_19;
LABEL_6:
  *(_QWORD *)&v227 = _swiftEmptyArrayStorage;
  sub_100259288(0, v26 & ~(v26 >> 63), 0);
  if (v26 < 0)
  {
    __break(1u);
LABEL_113:
    if (v25 < 0)
      v139 = v25;
    else
      v139 = v25 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v108 = _CocoaArrayWrapper.endIndex.getter(v139);
    swift_bridgeObjectRelease();
    if (!v108)
      goto LABEL_117;
LABEL_73:
    if (v108 < 1)
    {
      __break(1u);
LABEL_178:
      __break(1u);
LABEL_179:
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      return result;
    }
    *(_QWORD *)&v225 = v16;
    v109 = 0;
    v110 = (char *)_swiftEmptyArrayStorage;
    v213 = _swiftEmptyArrayStorage;
    while (1)
    {
      if ((v25 & 0xC000000000000001) != 0)
        v111 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v109, v25);
      else
        v111 = *(id *)(v25 + 8 * v109 + 32);
      v112 = v111;
      v113 = objc_msgSend(v111, "lines");
      v114 = sub_1000087DC(0, &qword_100499BD8, MSVLyricsLine_ptr);
      v115 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v113, v114);

      sub_10025EEAC(v115, v207, v208, v209, v223, v212, (uint64_t)v220, v210);
      v117 = v116;
      swift_bridgeObjectRelease();
      v118 = *(_QWORD *)(v117 + 16);
      v119 = *((_QWORD *)v110 + 2);
      v120 = v119 + v118;
      if (__OFADD__(v119, v118))
        goto LABEL_101;
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(v110);
      v122 = v110;
      if ((_DWORD)isUniquelyReferenced_nonNull_native && v120 <= *((_QWORD *)v110 + 3) >> 1)
      {
        if (!*(_QWORD *)(v117 + 16))
          goto LABEL_90;
      }
      else
      {
        if (v119 <= v120)
          v126 = v119 + v118;
        else
          v126 = v119;
        v122 = sub_1002584EC(isUniquelyReferenced_nonNull_native, v126, 1, v110);
        if (!*(_QWORD *)(v117 + 16))
        {
LABEL_90:
          v110 = v122;
          if (v118)
            goto LABEL_102;
          goto LABEL_91;
        }
      }
      v123 = *((_QWORD *)v122 + 2);
      if ((*((_QWORD *)v122 + 3) >> 1) - v123 < v118)
        goto LABEL_103;
      v110 = v122;
      swift_arrayInitWithCopy(&v122[104 * v123 + 32], v117 + 32, v118, &type metadata for Lyrics.TextLine);
      if (v118)
      {
        v124 = *((_QWORD *)v110 + 2);
        v77 = __OFADD__(v124, v118);
        v125 = v124 + v118;
        if (v77)
          goto LABEL_105;
        *((_QWORD *)v110 + 2) = v125;
      }
LABEL_91:
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native(v213) & 1) == 0)
        v213 = sub_100258984(0, v213[2] + 1, 1, v213, &qword_100499BE0, &qword_100499EA8);
      v128 = v213[2];
      v127 = v213[3];
      if (v128 >= v127 >> 1)
        v213 = sub_100258984((_QWORD *)(v127 > 1), v128 + 1, 1, v213, &qword_100499BE0, &qword_100499EA8);
      ++v109;
      v129 = v213;
      v213[2] = v128 + 1;
      v129[v128 + 4] = v117;

      if (v108 == v109)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v16 = (_QWORD *)v225;
        goto LABEL_118;
      }
    }
  }
  v220 = (_UNKNOWN **)v10;
  v27 = 0;
  v28 = (_QWORD *)v227;
  *(_QWORD *)&v225 = v25 & 0xC000000000000001;
  v29 = v25;
  v30 = v26;
  do
  {
    if ((_QWORD)v225)
      v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v27, v25);
    else
      v31 = *(id *)(v25 + 8 * v27 + 32);
    v32 = v31;
    v33 = objc_msgSend(v31, "name");
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    v36 = v35;

    *(_QWORD *)&v227 = v28;
    v38 = v28[2];
    v37 = v28[3];
    if (v38 >= v37 >> 1)
    {
      sub_100259288((char *)(v37 > 1), v38 + 1, 1);
      v28 = (_QWORD *)v227;
    }
    ++v27;
    v28[2] = v38 + 1;
    v39 = &v28[2 * v38];
    v39[4] = v34;
    v39[5] = v36;
    v25 = v29;
  }
  while (v30 != v27);
  swift_bridgeObjectRelease();
  v10 = v220;
LABEL_20:
  v206[13] = v28;
  v41 = objc_msgSend(v223, "audioAttributes");
  if (v41)
  {
    v43 = v41;
    v44 = &selRef_borderWidth;
    if ((objc_msgSend(v41, "isSpatialRole") & 1) != 0)
    {
      objc_msgSend(v43, "lyricsOffset");
      v46 = v45;

      v47 = sub_100005574(&qword_100499BE8);
      inited = swift_initStackObject(v47, v226);
      *(_OWORD *)(inited + 16) = xmmword_100384A80;
      *(_QWORD *)(inited + 32) = v46;
      v49 = (void *)sub_10024B99C(inited);
      *(_QWORD *)&v42 = swift_setDeallocating(inited).n128_u64[0];
    }
    else
    {

      v49 = &_swiftEmptySetSingleton;
    }
  }
  else
  {
    v49 = &_swiftEmptySetSingleton;
    v44 = &selRef_borderWidth;
  }
  v50 = v206;
  v206[19] = v49;
  v51 = v223;
  v52 = objc_msgSend(v223, "type", v42);
  v53 = v52 == (id)1;
  if (v52 == (id)2)
    v53 = 2;
  *((_BYTE *)v50 + 56) = v53;
  v210 = swift_allocObject(&unk_10045C338, 24, 7);
  v204 = v210 + 16;
  swift_weakInit(v210 + 16, 0);
  v209 = (BOOL *)swift_allocObject(&unk_10045C360, 17, 7);
  v209[16] = 0;
  v208 = swift_allocObject(&unk_10045C388, 24, 7);
  *(_QWORD *)(v208 + 16) = 0;
  v54 = objc_msgSend(v51, v44[349]);
  if (v54)
  {
    v55 = v54;
    v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
    v58 = v57;

    swift_bridgeObjectRetain();
    v59 = v221;
    v60 = Locale.Language.init(identifier:)(v56, v58);
    v212 = Locale.Language.characterDirection.getter(v60) == 2;
    (*(void (**)(char *, _QWORD))(v222 + 8))(v59, v224);
    swift_bridgeObjectRelease();
  }
  else
  {
    v212 = 0;
  }
  v61 = objc_msgSend(v223, v44[349]);
  if (v61)
  {
    v62 = v61;
    v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    v65 = v64;

  }
  else
  {
    v63 = 0;
    v65 = 0;
  }
  v220 = sub_10025CAA4(v63, v65);
  swift_bridgeObjectRelease();
  v66 = objc_msgSend(v223, "translationsMap");
  v67 = sub_100005574(&qword_100499BC8);
  v68 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v66, &type metadata for String, v67, &protocol witness table for String);

  v69 = 0;
  v70 = *(_QWORD *)(v68 + 64);
  v221 = (char *)(v68 + 64);
  *(_QWORD *)&v224 = v68;
  v71 = 1 << *(_BYTE *)(v68 + 32);
  v72 = -1;
  if (v71 < 64)
    v72 = ~(-1 << v71);
  v73 = v72 & v70;
  v222 = (unint64_t)(v71 + 63) >> 6;
  while (1)
  {
    if (v73)
    {
      v75 = __clz(__rbit64(v73));
      v73 &= v73 - 1;
      *(_QWORD *)&v225 = v69;
      v76 = v75 | (v69 << 6);
      goto LABEL_51;
    }
    v77 = __OFADD__(v69, 1);
    v78 = v69 + 1;
    if (v77)
      goto LABEL_100;
    if (v78 >= v222)
      break;
    v79 = *(_QWORD *)&v221[8 * v78];
    if (!v79)
    {
      v80 = v78 + 1;
      if (v78 + 1 >= v222)
        break;
      v79 = *(_QWORD *)&v221[8 * v80];
      if (!v79)
      {
        v80 = v78 + 2;
        if (v78 + 2 >= v222)
          break;
        v79 = *(_QWORD *)&v221[8 * v80];
        if (!v79)
        {
          v80 = v78 + 3;
          if (v78 + 3 >= v222)
            break;
          v79 = *(_QWORD *)&v221[8 * v80];
          if (!v79)
          {
            while (1)
            {
              v78 = v80 + 1;
              if (__OFADD__(v80, 1))
                goto LABEL_104;
              if (v78 >= v222)
                goto LABEL_66;
              v79 = *(_QWORD *)&v221[8 * v78];
              ++v80;
              if (v79)
                goto LABEL_50;
            }
          }
        }
      }
      v78 = v80;
    }
LABEL_50:
    v73 = (v79 - 1) & v79;
    *(_QWORD *)&v225 = v78;
    v76 = __clz(__rbit64(v79)) + (v78 << 6);
LABEL_51:
    v81 = (uint64_t *)(*(_QWORD *)(v224 + 48) + 16 * v76);
    v82 = *v81;
    v83 = v81[1];
    swift_bridgeObjectRetain_n(v83, 2);
    v84 = v223;
    v85 = swift_bridgeObjectRetain();
    v86 = sub_10025EB34(v85, v84, v82, v83);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_beginAccess(v10, &v227, 33, 0);
    v87 = swift_isUniquelyReferenced_nonNull_native(*v10);
    v230 = (_QWORD *)*v10;
    v88 = v230;
    v89 = v10;
    *v10 = 0x8000000000000000;
    v91 = sub_10009ABAC(v82, v83);
    v92 = v88[2];
    v93 = (v90 & 1) == 0;
    v94 = v92 + v93;
    if (__OFADD__(v92, v93))
    {
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
      goto LABEL_106;
    }
    v95 = v90;
    if (v88[3] >= v94)
    {
      if ((v87 & 1) != 0)
      {
        if ((v90 & 1) != 0)
          goto LABEL_36;
      }
      else
      {
        sub_10025B8E4();
        v88 = v230;
        if ((v95 & 1) != 0)
          goto LABEL_36;
      }
    }
    else
    {
      sub_10025A94C(v94, v87);
      v88 = v230;
      v96 = sub_10009ABAC(v82, v83);
      if ((v95 & 1) != (v97 & 1))
        goto LABEL_179;
      v91 = v96;
      if ((v95 & 1) != 0)
      {
LABEL_36:
        v74 = v88[7];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v74 + 8 * v91) = v86;
        goto LABEL_37;
      }
    }
    v88[(v91 >> 6) + 8] |= 1 << v91;
    v98 = (uint64_t *)(v88[6] + 16 * v91);
    *v98 = v82;
    v98[1] = v83;
    *(_QWORD *)(v88[7] + 8 * v91) = v86;
    v99 = v88[2];
    v77 = __OFADD__(v99, 1);
    v100 = v99 + 1;
    if (v77)
      goto LABEL_99;
    v88[2] = v100;
    swift_bridgeObjectRetain();
LABEL_37:
    v10 = v89;
    *v89 = v88;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess(&v227);
    v69 = v225;
  }
LABEL_66:
  swift_release(v224);
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
  {
LABEL_67:
    v101 = &_swiftEmptySetSingleton;
    goto LABEL_68;
  }
LABEL_106:
  if (!_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
    goto LABEL_67;
  sub_10024BAF0((uint64_t)_swiftEmptyArrayStorage);
  v101 = v137;
LABEL_68:
  v102 = swift_allocObject(&unk_10045C3B0, 24, 7);
  v207 = v102;
  *(_QWORD *)(v102 + 16) = v101;
  v16 = (_QWORD *)(v102 + 16);
  v103 = objc_msgSend(v223, "lyricsSections");
  v104 = sub_1000087DC(0, &qword_100499BD0, MSVLyricsSection_ptr);
  v105 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v103, v104);

  if ((unint64_t)v105 >> 62)
  {
    if (v105 < 0)
      v138 = v105;
    else
      v138 = v105 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v106 = _CocoaArrayWrapper.endIndex.getter(v138);
    swift_bridgeObjectRelease();
  }
  else
  {
    v106 = *(_QWORD *)((v105 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v106 <= 0)
  {
    v130 = v223;
    v131 = objc_msgSend(v223, "lyricsLines");
    v132 = sub_1000087DC(0, &qword_100499BD8, MSVLyricsLine_ptr);
    v133 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v131, v132);

    sub_10025EEAC(v133, v207, v208, v209, v130, v212, (uint64_t)v220, v210);
    v110 = v134;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v135 = sub_100005574(&qword_100499BE0);
    v136 = swift_allocObject(v135, 40, 7);
    *(_OWORD *)(v136 + 16) = xmmword_100384A80;
    v213 = (_QWORD *)v136;
    *(_QWORD *)(v136 + 32) = v110;
    swift_bridgeObjectRetain();
    goto LABEL_118;
  }
  v107 = objc_msgSend(v223, "lyricsSections");
  v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v107, v104);

  if ((unint64_t)v25 >> 62)
    goto LABEL_113;
  v108 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v108)
    goto LABEL_73;
LABEL_117:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v110 = (char *)_swiftEmptyArrayStorage;
  v213 = _swiftEmptyArrayStorage;
LABEL_118:
  swift_beginAccess(v16, &v230, 0, 0);
  v140 = swift_bridgeObjectRetain();
  v142 = sub_10025FBBC(v140, v141);
  swift_bridgeObjectRelease();
  v143 = v206;
  *((_BYTE *)v206 + 96) = v142;
  v143[6] = v110;
  v144 = *((_QWORD *)v110 + 2);
  v211 = v110;
  if (v144)
  {
    v145 = *((_QWORD *)v110 + 16);
    v146 = *((_QWORD *)v110 + 14);
    v147 = (char *)*((_QWORD *)v110 + 12);
    v148 = (_UNKNOWN **)*((_QWORD *)v110 + 8);
    v149 = *((double *)v110 + 4);
    v150 = *((double *)v110 + 5);
    swift_bridgeObjectRetain_n(v110, 2);
    v220 = v148;
    swift_bridgeObjectRetain();
    v221 = v147;
    swift_retain(v147);
    v222 = v146;
    swift_retain(v146);
    swift_retain(v145);
    v151 = 0;
    v152 = 0;
    v153 = _swiftEmptyArrayStorage;
    while (1)
    {
      v155 = *(double *)&v211[v151 + 32];
      v154 = *(double *)&v211[v151 + 40];
      v156 = v211[v151 + 56];
      v157 = v211[v151 + 57];
      v158 = v211[v151 + 58];
      v159 = *(char ***)&v211[v151 + 64];
      v160 = *(_OWORD *)&v211[v151 + 72];
      v161 = *(_QWORD *)&v211[v151 + 88];
      v225 = *(_OWORD *)&v211[v151 + 96];
      v224 = *(_OWORD *)&v211[v151 + 112];
      v162 = *(_QWORD *)&v211[v151 + 128];
      v219 = v160;
      v218 = v156;
      v217 = v157;
      v216 = v158;
      v215 = v161;
      if (v152 || v149 <= 7.0)
      {
        if (v155 - v150 <= 7.0)
        {
          swift_bridgeObjectRetain();
          swift_retain(v225);
          swift_retain(v224);
          swift_retain(v162);
        }
        else
        {
          swift_bridgeObjectRetain();
          swift_retain(v225);
          swift_retain(v224);
          swift_retain(v162);
          if ((swift_isUniquelyReferenced_nonNull_native(v153) & 1) == 0)
            v153 = sub_100258608(0, v153[2] + 1, 1, v153);
          v167 = v153[2];
          v166 = v153[3];
          v168 = v167 + 1;
          if (v167 >= v166 >> 1)
            v153 = sub_100258608((_QWORD *)(v166 > 1), v167 + 1, 1, v153);
          v228 = &type metadata for Lyrics.InstrumentalLine;
          v229 = &protocol witness table for Lyrics.InstrumentalLine;
          v169 = swift_allocObject(&unk_10045C428, 48, 7);
          *(_QWORD *)&v227 = v169;
          *(_QWORD *)(v169 + 16) = v152;
          *(double *)(v169 + 24) = v150 + 0.1;
          *(double *)(v169 + 32) = v155;
          *(_BYTE *)(v169 + 40) = v212;
          v153[2] = v168;
          sub_1000137C8(&v227, (uint64_t)&v153[5 * v167 + 4]);
          v77 = __OFADD__(v152++, 1);
          if (v77)
            goto LABEL_168;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_retain(v225);
        swift_retain(v224);
        swift_retain(v162);
        if ((swift_isUniquelyReferenced_nonNull_native(v153) & 1) == 0)
          v153 = sub_100258608(0, v153[2] + 1, 1, v153);
        v164 = v153[2];
        v163 = v153[3];
        if (v164 >= v163 >> 1)
          v153 = sub_100258608((_QWORD *)(v163 > 1), v164 + 1, 1, v153);
        v228 = &type metadata for Lyrics.InstrumentalLine;
        v229 = &protocol witness table for Lyrics.InstrumentalLine;
        v165 = swift_allocObject(&unk_10045C428, 48, 7);
        *(_QWORD *)&v227 = v165;
        *(_QWORD *)(v165 + 16) = 0;
        *(_QWORD *)(v165 + 24) = 0;
        *(double *)(v165 + 32) = v149;
        *(_BYTE *)(v165 + 40) = v212;
        v153[2] = v164 + 1;
        sub_1000137C8(&v227, (uint64_t)&v153[5 * v164 + 4]);
        v152 = 1;
      }
      v214 = v144;
      swift_bridgeObjectRetain_n(v159, 2);
      v168 = v225;
      swift_retain_n(v225, 2);
      v170 = v224;
      swift_retain_n(v224, 2);
      swift_retain_n(v162, 2);
      v171 = v145;
      if ((swift_isUniquelyReferenced_nonNull_native(v153) & 1) == 0)
        v153 = sub_100258608(0, v153[2] + 1, 1, v153);
      v173 = v153[2];
      v172 = v153[3];
      v174 = v153;
      if (v173 >= v172 >> 1)
        v174 = sub_100258608((_QWORD *)(v172 > 1), v173 + 1, 1, v153);
      v228 = &type metadata for Lyrics.TextLine;
      v229 = &protocol witness table for Lyrics.TextLine;
      v175 = swift_allocObject(&unk_10045C3D8, 120, 7);
      *(_QWORD *)&v227 = v175;
      *(double *)(v175 + 16) = v155;
      *(double *)(v175 + 24) = v154;
      *(_QWORD *)(v175 + 32) = v152;
      *(_BYTE *)(v175 + 40) = v218;
      *(_BYTE *)(v175 + 41) = v217;
      *(_BYTE *)(v175 + 42) = v216;
      *(_QWORD *)(v175 + 48) = v159;
      *(_OWORD *)(v175 + 56) = v219;
      *(_QWORD *)(v175 + 72) = v215;
      v176 = v224;
      *(_OWORD *)(v175 + 80) = v225;
      *(_OWORD *)(v175 + 96) = v176;
      *(_QWORD *)(v175 + 112) = v162;
      v174[2] = v173 + 1;
      v153 = v174;
      sub_1000137C8(&v227, (uint64_t)&v174[5 * v173 + 4]);
      swift_bridgeObjectRelease();
      swift_release(v221);
      swift_release(v222);
      swift_release(v171);
      swift_bridgeObjectRelease();
      swift_release(v168);
      swift_release(v170);
      swift_release(v162);
      v77 = __OFADD__(v152++, 1);
      if (v77)
        break;
      v151 += 104;
      v149 = v155;
      v150 = v154;
      v220 = (_UNKNOWN **)v159;
      v221 = (char *)v168;
      v222 = v170;
      v145 = v162;
      v144 = v214 - 1;
      if (v214 == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release(v168);
        swift_release(v170);
        *(_QWORD *)&v177 = swift_release(v162).n128_u64[0];
        goto LABEL_144;
      }
    }
    __break(1u);
LABEL_168:
    __break(1u);
LABEL_169:
    if (v168 < 0)
      v202 = v168;
    else
      v202 = v168 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v179 = _CocoaArrayWrapper.endIndex.getter(v202);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    v152 = 0;
    v153 = _swiftEmptyArrayStorage;
    v154 = 0.0;
LABEL_144:
    v159 = &selRef_setProgress_;
    v178 = objc_msgSend(v223, "songwriters", v177);
    v168 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v178, v205);

    if ((unint64_t)v168 >> 62)
      goto LABEL_169;
    v179 = *(_QWORD *)((v168 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (!v179)
  {
    swift_bridgeObjectRelease();
    v195 = v204;
    goto LABEL_166;
  }
  v180 = objc_msgSend(v223, v159[50]);
  v181 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v180, v205);

  if ((unint64_t)v181 >> 62)
  {
    if (v181 < 0)
      v203 = v181;
    else
      v203 = v181 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v182 = _CocoaArrayWrapper.endIndex.getter(v203);
    swift_bridgeObjectRelease();
  }
  else
  {
    v182 = *(_QWORD *)((v181 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *(_QWORD *)&v224 = v153;
  if (!v182)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v184 = _swiftEmptyArrayStorage;
    goto LABEL_161;
  }
  *(_QWORD *)&v227 = _swiftEmptyArrayStorage;
  sub_100259288(0, v182 & ~(v182 >> 63), 0);
  if (v182 < 0)
    goto LABEL_178;
  v183 = 0;
  v184 = (_QWORD *)v227;
  *(_QWORD *)&v225 = v181 & 0xC000000000000001;
  v185 = v181;
  do
  {
    if ((_QWORD)v225)
      v186 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v183, v181);
    else
      v186 = *(id *)(v181 + 8 * v183 + 32);
    v187 = v186;
    v188 = objc_msgSend(v186, "name");
    v189 = static String._unconditionallyBridgeFromObjectiveC(_:)(v188);
    v191 = v190;

    *(_QWORD *)&v227 = v184;
    v193 = v184[2];
    v192 = v184[3];
    if (v193 >= v192 >> 1)
    {
      sub_100259288((char *)(v192 > 1), v193 + 1, 1);
      v184 = (_QWORD *)v227;
    }
    ++v183;
    v184[2] = v193 + 1;
    v194 = &v184[2 * v193];
    v194[4] = v189;
    v194[5] = v191;
    v181 = v185;
  }
  while (v182 != v183);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_161:
  v196 = swift_isUniquelyReferenced_nonNull_native(v224);
  v195 = v204;
  if ((v196 & 1) == 0)
    *(_QWORD *)&v224 = sub_100258608(0, *(_QWORD *)(v224 + 16) + 1, 1, (_QWORD *)v224);
  v198 = *(_QWORD *)(v224 + 16);
  v197 = *(_QWORD *)(v224 + 24);
  if (v198 >= v197 >> 1)
    *(_QWORD *)&v224 = sub_100258608((_QWORD *)(v197 > 1), v198 + 1, 1, (_QWORD *)v224);
  v228 = &type metadata for Lyrics.SongwritersLine;
  v229 = &protocol witness table for Lyrics.SongwritersLine;
  v199 = swift_allocObject(&unk_10045C400, 56, 7);
  *(_QWORD *)&v227 = v199;
  *(_QWORD *)(v199 + 16) = v152;
  *(double *)(v199 + 24) = v154;
  *(_QWORD *)(v199 + 32) = 0x7FF0000000000000;
  *(_BYTE *)(v199 + 40) = v212;
  *(_QWORD *)(v199 + 48) = v184;
  v153 = (_QWORD *)v224;
  *(_QWORD *)(v224 + 16) = v198 + 1;
  sub_1000137C8(&v227, (uint64_t)&v153[5 * v198 + 4]);
LABEL_166:

  v200 = v206;
  v206[4] = v213;
  v200[5] = v153;
  swift_beginAccess(v195, &v227, 1, 0);
  swift_weakAssign(v195, v200);
  swift_release(v207);
  swift_release(v208);
  swift_release(v209);
  swift_release(v210);
  return (uint64_t)v200;
}

_QWORD *sub_100256220(uint64_t a1)
{
  int64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100259288(0, v1, 0);
    v3 = (_QWORD *)(a1 + 32);
    do
    {
      v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
      v6 = v5;
      v8 = _swiftEmptyArrayStorage[2];
      v7 = _swiftEmptyArrayStorage[3];
      if (v8 >= v7 >> 1)
        sub_100259288((char *)(v7 > 1), v8 + 1, 1);
      _swiftEmptyArrayStorage[2] = v8 + 1;
      v9 = &_swiftEmptyArrayStorage[2 * v8];
      v9[4] = v4;
      v9[5] = v6;
      ++v3;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

BOOL sub_1002562F8(double *a1, double *a2)
{
  return *a1 < *a2;
}

uint64_t sub_10025630C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t Strong;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35[24];
  char v36[24];
  char v37[32];

  v7 = a1 + 16;
  swift_beginAccess(a1 + 16, v37, 0, 0);
  Strong = swift_weakLoadStrong(v7);
  if (!Strong)
    goto LABEL_19;
  v9 = (_QWORD *)Strong;
  swift_beginAccess(Strong + 112, v36, 0, 0);
  v10 = v9[15];
  if (!v10
    || ((v11 = v9[9]) != 0 ? (v12 = a3 == 0) : (v12 = 1),
        v12
     || ((v13 = v9[14], v14 = v9[8], v13 == v14) ? (v15 = v10 == v11) : (v15 = 0),
         v15
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v9[14], v9[15], v14, v11, 0) & 1) != 0
      || (swift_beginAccess(v9 + 16, v35, 0, 0), v16 = v9[16], !*(_QWORD *)(v16 + 16)))))
  {
    swift_release(v9);
LABEL_19:
    swift_bridgeObjectRetain();
    return a4;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = sub_10009ABAC(v13, v10);
  if ((v18 & 1) == 0)
  {
    swift_release(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v19 + 16) || (v20 = sub_10009ABAC(a2, a3), (v21 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_release(v9);
    goto LABEL_23;
  }
  v22 = (uint64_t *)(*(_QWORD *)(v19 + 56) + 88 * v20);
  v24 = v22[2];
  v23 = v22[3];
  v25 = v22[5];
  v33 = v22[1];
  v34 = v22[4];
  v27 = v22[6];
  v26 = v22[7];
  v31 = v22[8];
  v32 = v22[9];
  v29 = *v22;
  v30 = v22[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1002616EC(v23, v34, v25, v27);
  swift_bridgeObjectRelease();
  swift_release(v9);
  if (!v33)
  {
LABEL_23:
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  a4 = v29;
  sub_10026171C(v29, v33, v24, v23, v34, v25, v27, v26, v31, v32, v30);
  swift_bridgeObjectRelease();
  return a4;
}

uint64_t sub_10025657C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t Strong;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[24];
  _BYTE v33[24];
  _BYTE v34[24];
  _BYTE v35[24];

  v7 = a1 + 16;
  swift_beginAccess(a1 + 16, v35, 0, 0);
  Strong = swift_weakLoadStrong(v7);
  if (!Strong)
    goto LABEL_16;
  v9 = (_QWORD *)Strong;
  swift_beginAccess(Strong + 112, v33, 0, 0);
  v10 = v9[15];
  if (!v10)
    goto LABEL_15;
  v11 = v9[9];
  if (!v11)
    goto LABEL_15;
  if (!a3)
    goto LABEL_15;
  v12 = v9[14];
  v13 = v9[8];
  if (v12 == v13 && v10 == v11)
    goto LABEL_15;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v9[14], v9[15], v13, v11, 0) & 1) != 0)
    goto LABEL_15;
  swift_beginAccess(v9 + 16, v32, 0, 0);
  v14 = v9[16];
  if (!*(_QWORD *)(v14 + 16))
    goto LABEL_15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = sub_10009ABAC(v12, v10);
  if ((v16 & 1) == 0)
  {
    swift_release(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_16:
    v26 = (uint64_t *)(a4 + 16);
    swift_beginAccess(v26, v34, 0, 0);
    v21 = *v26;
    swift_bridgeObjectRetain();
    return v21;
  }
  v17 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v17 + 16) || (v18 = sub_10009ABAC(a2, a3), (v19 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_15:
    swift_release(v9);
    goto LABEL_16;
  }
  v20 = (_QWORD *)(*(_QWORD *)(v17 + 56) + 88 * v18);
  v21 = v20[2];
  v22 = v20[3];
  v23 = v20[4];
  v24 = v20[5];
  v25 = v20[6];
  v31 = v20[8];
  v29 = v20[9];
  v30 = v20[7];
  v28 = v20[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1002616EC(v22, v23, v24, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(v9);
  swift_bridgeObjectRelease();
  sub_10025C9F4(v22, v23, v24, v25, v30, v31, v29, v28);
  return v21;
}

uint64_t sub_1002567D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t Strong;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  _BYTE v32[24];
  _BYTE v33[24];
  _BYTE v34[24];
  _BYTE v35[24];

  v9 = a1 + 16;
  swift_beginAccess(a1 + 16, v35, 0, 0);
  Strong = swift_weakLoadStrong(v9);
  if (!Strong)
    goto LABEL_16;
  v11 = (_QWORD *)Strong;
  swift_beginAccess(Strong + 112, v33, 0, 0);
  v12 = v11[15];
  if (!v12)
    goto LABEL_15;
  v13 = v11[9];
  if (!v13)
    goto LABEL_15;
  if (!a3)
    goto LABEL_15;
  v14 = v11[14];
  v15 = v11[8];
  if (v14 == v15 && v12 == v13)
    goto LABEL_15;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v11[14], v11[15], v15, v13, 0) & 1) != 0)
    goto LABEL_15;
  swift_beginAccess(v11 + 16, v32, 0, 0);
  v16 = v11[16];
  if (!*(_QWORD *)(v16 + 16))
    goto LABEL_15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = sub_10009ABAC(v14, v12);
  if ((v18 & 1) == 0)
  {
    swift_release(v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_16:
    swift_beginAccess(a4 + 2, v34, 0, 0);
    v23 = a4[2];
    v24 = a4[3];
    v25 = a4[4];
    v26 = a4[5];
    v27 = a4[6];
    v28 = a4[7];
    v30 = a4[8];
    v29 = a4[9];
    result = sub_1002616EC(v23, v24, v25, v26);
    goto LABEL_17;
  }
  v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v19 + 16) || (v20 = sub_10009ABAC(a2, a3), (v21 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_15:
    swift_release(v11);
    goto LABEL_16;
  }
  v22 = (_QWORD *)(*(_QWORD *)(v19 + 56) + 88 * v20);
  v23 = v22[3];
  v24 = v22[4];
  v25 = v22[5];
  v26 = v22[6];
  v27 = v22[7];
  v28 = v22[8];
  v30 = v22[9];
  v29 = v22[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1002616EC(v23, v24, v25, v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(v11);
  sub_1002616EC(v23, v24, v25, v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = sub_10025C9F4(v23, v24, v25, v26, v27, v28, v30, v29);
LABEL_17:
  *a5 = v23;
  a5[1] = v24;
  a5[2] = v25;
  a5[3] = v26;
  a5[4] = v27;
  a5[5] = v28;
  a5[6] = v30;
  a5[7] = v29;
  return result;
}

void Lyrics.line(before:useOriginalLines:)(char a1@<W0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  if ((a1 & 1) != 0)
  {
    v6 = sub_100252338(*(_QWORD *)(v3 + 48));
    v7 = v6[2];
    if (!v7)
      goto LABEL_6;
  }
  else
  {
    v6 = *(_QWORD **)(v3 + 40);
    swift_bridgeObjectRetain();
    v7 = v6[2];
    if (!v7)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return;
    }
  }
  v8 = v6 + 4;
  sub_1000244B0((uint64_t)(v6 + 4), (uint64_t)&v29);
  v10 = *((_QWORD *)&v30 + 1);
  v9 = v31;
  sub_10000ABC8(&v29, *((uint64_t *)&v30 + 1));
  v11 = (*(double (**)(uint64_t))(*(_QWORD *)(v9 + 8) + 8))(v10);
  sub_10000682C(&v29);
  if (v11 > a3)
    goto LABEL_6;
  v12 = 0;
  v13 = v7 - 1;
  v31 = 0;
  v29 = 0u;
  v30 = 0u;
  v14 = v13;
  while (!__OFSUB__(v14, v12))
  {
    v15 = v12 + (v14 - v12) / 2;
    if (__OFADD__(v12, (v14 - v12) / 2))
      goto LABEL_25;
    if ((v15 & 0x8000000000000000) != 0)
      goto LABEL_26;
    if (v15 >= v6[2])
      goto LABEL_27;
    sub_1000244B0((uint64_t)&v8[5 * v15], (uint64_t)v26);
    v17 = v27;
    v16 = v28;
    sub_10000ABC8(v26, v27);
    v18 = (*(double (**)(uint64_t))(*(_QWORD *)(v16 + 8) + 8))(v17);
    v19 = v18;
    if ((uint64_t)v15 >= v13)
    {
      v22 = INFINITY;
      if (v18 > a3)
        goto LABEL_8;
    }
    else
    {
      if (v15 + 1 >= v6[2])
        goto LABEL_28;
      sub_1000244B0((uint64_t)&v8[5 * v15 + 5], (uint64_t)v23);
      v21 = v24;
      v20 = v25;
      sub_10000ABC8(v23, v24);
      v22 = (*(double (**)(uint64_t))(*(_QWORD *)(v20 + 8) + 8))(v21);
      sub_10000682C(v23);
      if (v19 > a3)
      {
LABEL_8:
        v14 = v15 - 1;
        goto LABEL_9;
      }
    }
    if (v22 >= a3)
    {
      sub_100008758((uint64_t)&v29, &qword_10049AF20);
      swift_bridgeObjectRelease();
      sub_1000244B0((uint64_t)v26, (uint64_t)&v29);
      sub_10000682C(v26);
      goto LABEL_23;
    }
    v12 = v15 + 1;
LABEL_9:
    sub_10000682C(v26);
    if (v14 < v12)
    {
      swift_bridgeObjectRelease();
LABEL_23:
      sub_1000149A8((uint64_t)&v29, a2, &qword_10049AF20);
      return;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
}

uint64_t Lyrics.line(after:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = a1[3];
  v5 = a1[4];
  sub_10000ABC8(a1, v4);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  v7 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
  }
  else
  {
    v8 = *(_QWORD *)(v2 + 40);
    if (v7 >= *(_QWORD *)(v8 + 16))
    {
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    }
    if ((v7 & 0x8000000000000000) == 0)
      return sub_1000244B0(v8 + 40 * v7 + 32, a2);
  }
  __break(1u);
  return result;
}

BOOL sub_100256D7C(id *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  __C::_NSRange v12;

  objc_msgSend(*a1, "characterRange");
  v9._countAndFlagsBits = a2;
  v9._object = a3;
  v10._countAndFlagsBits = a4;
  v10._object = a5;
  v12 = _NSRange.convert(from:to:preserveLength:)(v9, v10, 1);
  if (!v11)
    return _NSRange.contains(_:)(v12);
  swift_errorRelease(v11);
  return 0;
}

BOOL sub_100256E1C(id *a1, char *a2, void *a3, char *a4, void *a5)
{
  id v9;
  Swift::String v10;
  Swift::String v11;
  Swift::Int location;
  Swift::Int length;
  uint64_t v14;
  __C::_NSRange v15;
  uint64_t v16;
  id v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v9 = *a1;
  objc_msgSend(*a1, "characterRange");
  v10._countAndFlagsBits = (uint64_t)a2;
  v10._object = a3;
  v11._countAndFlagsBits = (uint64_t)a4;
  v11._object = a5;
  v15 = _NSRange.convert(from:to:preserveLength:)(v10, v11, 0);
  length = v15.length;
  location = v15.location;
  if (!v14)
    return _NSRange.intersects(_:)(*(__C::_NSRange *)&location);
  if (qword_100498A10 != -1)
    swift_once(&qword_100498A10, sub_100257E30);
  v16 = type metadata accessor for Logger(0, length);
  sub_1000086B4(v16, (uint64_t)static Logger.lyrics);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain(v14);
  v17 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain(v14);
  v18 = v17;
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.error.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(42, -1);
    v27 = (uint64_t *)swift_slowAlloc(8, -1);
    v28 = swift_slowAlloc(96, -1);
    v29 = v28;
    *(_DWORD *)v21 = 136446978;
    v22 = (char *)_NSRange.description.getter(objc_msgSend(v18, "characterRange"));
    *(_QWORD *)(v21 + 4) = sub_100249A1C(v22, v23, &v29);

    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 12) = 2082;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v21 + 14) = sub_100249A1C(a4, (char *)a5, &v29);
    swift_bridgeObjectRelease_n(a5, 3);
    *(_WORD *)(v21 + 22) = 2082;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v21 + 24) = sub_100249A1C(a2, (char *)a3, &v29);
    swift_bridgeObjectRelease_n(a3, 3);
    *(_WORD *)(v21 + 32) = 2114;
    swift_errorRetain(v14);
    v24 = _swift_stdlib_bridgeErrorToNSError(v14);
    *(_QWORD *)(v21 + 34) = v24;
    *v27 = v24;
    swift_errorRelease(v14);
    swift_errorRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "    Wasn't able to convert syllable range from primaryVocalText to lyricsText indicating a parsing issue.\n    MSVLyricsWord.characterRange=%{public}s\n    primaryVocalsText=%{public}s\n    lyricsText=%{public}s\n    thrownError=%{public}@", (uint8_t *)v21, 0x2Au);
    v25 = sub_100005574(&qword_100499720);
    swift_arrayDestroy(v27, 1, v25);
    swift_slowDealloc(v27, -1, -1);
    swift_arrayDestroy(v28, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v21, -1, -1);

    swift_errorRelease(v14);
  }
  else
  {
    swift_errorRelease(v14);
    swift_bridgeObjectRelease_n(a3, 2);
    swift_bridgeObjectRelease_n(a5, 2);

    swift_errorRelease(v14);
    swift_errorRelease(v14);

  }
  return 0;
}

uint64_t Logger.lyrics.unsafeMutableAddressor(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (qword_100498A10 != -1)
    swift_once(&qword_100498A10, sub_100257E30);
  v2 = type metadata accessor for Logger(0, a2);
  return sub_1000086B4(v2, (uint64_t)static Logger.lyrics);
}

void sub_1002571A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  double v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[5];
  void *v36;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_1000087DC(0, (unint64_t *)&qword_100499B48, MSVLyricsAgent_ptr);
    v5 = sub_100261510();
    v6 = Set.Iterator.init(_cocoa:)(v35, v3, v4, v5);
    v1 = v35[0];
    v33 = v35[1];
    v7 = v35[2];
    v8 = v35[3];
    v9 = v35[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v33 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    v6 = (_QWORD *)swift_bridgeObjectRetain();
    v8 = 0;
  }
  v31 = v7;
  v32 = (unint64_t)(v7 + 64) >> 6;
  while (1)
  {
    v14 = v8;
    if (v1 < 0)
    {
      v17 = __CocoaSet.Iterator.next()(v6);
      if (!v17)
        goto LABEL_40;
      v18 = v17;
      v34 = v17;
      v19 = sub_1000087DC(0, (unint64_t *)&qword_100499B48, MSVLyricsAgent_ptr);
      swift_unknownObjectRetain(v18);
      swift_dynamicCast(&v36, &v34, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
      v20 = v36;
      *(_QWORD *)&v21 = swift_unknownObjectRelease(v18).n128_u64[0];
      if (!v20)
        goto LABEL_40;
      goto LABEL_35;
    }
    if (!v9)
      break;
    v15 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v16 = v15 | (v8 << 6);
LABEL_34:
    v20 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v16);
    if (!v20)
      goto LABEL_40;
LABEL_35:
    v25 = objc_msgSend(v20, "type", v21, v31);
    if (v25)
    {
      v26 = v25;
      v27 = v1;
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v30 = v29;

      if (v28 == 0x70756F7267 && v30 == 0xE500000000000000)
      {

        swift_bridgeObjectRelease();
        v1 = v27;
LABEL_40:
        sub_1000F38AC(v1);
        return;
      }
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, 0x70756F7267, 0xE500000000000000, 0);

      v6 = (_QWORD *)swift_bridgeObjectRelease();
      v1 = v27;
      if ((v13 & 1) != 0)
        goto LABEL_40;
    }
    else
    {

    }
  }
  v22 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v22 >= v32)
      goto LABEL_40;
    v23 = *(_QWORD *)(v33 + 8 * v22);
    ++v8;
    if (!v23)
    {
      v8 = v14 + 2;
      if (v14 + 2 >= v32)
        goto LABEL_40;
      v23 = *(_QWORD *)(v33 + 8 * v8);
      if (!v23)
      {
        v8 = v14 + 3;
        if (v14 + 3 >= v32)
          goto LABEL_40;
        v23 = *(_QWORD *)(v33 + 8 * v8);
        if (!v23)
        {
          v8 = v14 + 4;
          if (v14 + 4 >= v32)
            goto LABEL_40;
          v23 = *(_QWORD *)(v33 + 8 * v8);
          if (!v23)
          {
            v8 = v14 + 5;
            if (v14 + 5 >= v32)
              goto LABEL_40;
            v23 = *(_QWORD *)(v33 + 8 * v8);
            if (!v23)
            {
              v24 = v14 + 6;
              while (v32 != v24)
              {
                v23 = *(_QWORD *)(v33 + 8 * v24++);
                if (v23)
                {
                  v8 = v24 - 1;
                  goto LABEL_33;
                }
              }
              goto LABEL_40;
            }
          }
        }
      }
    }
LABEL_33:
    v9 = (v23 - 1) & v23;
    v16 = __clz(__rbit64(v23)) + (v8 << 6);
    goto LABEL_34;
  }
  __break(1u);
}

void sub_100257528(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  double v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[5];
  void *v36;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_1000087DC(0, (unint64_t *)&qword_100499B48, MSVLyricsAgent_ptr);
    v5 = sub_100261510();
    v6 = Set.Iterator.init(_cocoa:)(v35, v3, v4, v5);
    v1 = v35[0];
    v33 = v35[1];
    v7 = v35[2];
    v8 = v35[3];
    v9 = v35[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v33 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    v6 = (_QWORD *)swift_bridgeObjectRetain();
    v8 = 0;
  }
  v31 = v7;
  v32 = (unint64_t)(v7 + 64) >> 6;
  while (1)
  {
    v14 = v8;
    if (v1 < 0)
    {
      v17 = __CocoaSet.Iterator.next()(v6);
      if (!v17)
        goto LABEL_40;
      v18 = v17;
      v34 = v17;
      v19 = sub_1000087DC(0, (unint64_t *)&qword_100499B48, MSVLyricsAgent_ptr);
      swift_unknownObjectRetain(v18);
      swift_dynamicCast(&v36, &v34, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
      v20 = v36;
      *(_QWORD *)&v21 = swift_unknownObjectRelease(v18).n128_u64[0];
      if (!v20)
        goto LABEL_40;
      goto LABEL_35;
    }
    if (!v9)
      break;
    v15 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v16 = v15 | (v8 << 6);
LABEL_34:
    v20 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v16);
    if (!v20)
      goto LABEL_40;
LABEL_35:
    v25 = objc_msgSend(v20, "type", v21, v31);
    if (v25)
    {
      v26 = v25;
      v27 = v1;
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v30 = v29;

      if (v28 == 0x726568746FLL && v30 == 0xE500000000000000)
      {

        swift_bridgeObjectRelease();
        v1 = v27;
LABEL_40:
        sub_1000F38AC(v1);
        return;
      }
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, 0x726568746FLL, 0xE500000000000000, 0);

      v6 = (_QWORD *)swift_bridgeObjectRelease();
      v1 = v27;
      if ((v13 & 1) != 0)
        goto LABEL_40;
    }
    else
    {

    }
  }
  v22 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v22 >= v32)
      goto LABEL_40;
    v23 = *(_QWORD *)(v33 + 8 * v22);
    ++v8;
    if (!v23)
    {
      v8 = v14 + 2;
      if (v14 + 2 >= v32)
        goto LABEL_40;
      v23 = *(_QWORD *)(v33 + 8 * v8);
      if (!v23)
      {
        v8 = v14 + 3;
        if (v14 + 3 >= v32)
          goto LABEL_40;
        v23 = *(_QWORD *)(v33 + 8 * v8);
        if (!v23)
        {
          v8 = v14 + 4;
          if (v14 + 4 >= v32)
            goto LABEL_40;
          v23 = *(_QWORD *)(v33 + 8 * v8);
          if (!v23)
          {
            v8 = v14 + 5;
            if (v14 + 5 >= v32)
              goto LABEL_40;
            v23 = *(_QWORD *)(v33 + 8 * v8);
            if (!v23)
            {
              v24 = v14 + 6;
              while (v32 != v24)
              {
                v23 = *(_QWORD *)(v33 + 8 * v24++);
                if (v23)
                {
                  v8 = v24 - 1;
                  goto LABEL_33;
                }
              }
              goto LABEL_40;
            }
          }
        }
      }
    }
LABEL_33:
    v9 = (v23 - 1) & v23;
    v16 = __clz(__rbit64(v23)) + (v8 << 6);
    goto LABEL_34;
  }
  __break(1u);
}

_QWORD *Lyrics.deinit()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[10]);
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[15]);
  swift_bridgeObjectRelease(v0[16]);
  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[19]);
  return v0;
}

uint64_t Lyrics.__deallocating_deinit()
{
  uint64_t v0;

  Lyrics.deinit();
  return swift_deallocClassInstance(v0, 160, 7);
}

id sub_100257934(id *a1)
{
  return objc_msgSend(*a1, "isBackgroundVocal");
}

id sub_100257964()
{
  id *v0;

  return objc_msgSend(*v0, "startTime");
}

id sub_100257974()
{
  id *v0;

  return objc_msgSend(*v0, "endTime");
}

uint64_t MSVLyricsAgent.isEqual(_:)(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  _BYTE v50[24];
  uint64_t v51;

  sub_100014A7C(a1, (uint64_t)v50, &qword_10049B130);
  if (!v51)
  {
    sub_100008758((uint64_t)v50, &qword_10049B130);
    goto LABEL_46;
  }
  v2 = sub_1000087DC(0, (unint64_t *)&qword_100499B48, MSVLyricsAgent_ptr);
  if ((swift_dynamicCast(&v49, v50, (char *)&type metadata for Any + 8, v2, 6) & 1) == 0)
  {
LABEL_46:
    v36 = 0;
    return v36 & 1;
  }
  v3 = v49;
  v4 = objc_msgSend(v1, "type");
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v8 = v7;

  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  v9 = objc_msgSend(v3, "type");
  if (v9)
  {
    v10 = v9;
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v13 = v12;

    if (v8)
    {
      if (!v13)
        goto LABEL_44;
      if (v6 == v11 && v8 == v13)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v11, v13, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v14 & 1) == 0)
          goto LABEL_51;
      }
    }
    else if (v13)
    {
      goto LABEL_44;
    }
  }
  else if (v8)
  {
    goto LABEL_44;
  }
  v15 = objc_msgSend(v1, "name");
  if (v15)
  {
    v16 = v15;
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v19 = v18;

  }
  else
  {
    v17 = 0;
    v19 = 0;
  }
  v20 = objc_msgSend(v3, "name");
  if (v20)
  {
    v21 = v20;
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v24 = v23;

    if (v19)
    {
      if (!v24)
        goto LABEL_44;
      if (v17 == v22 && v19 == v24)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, v22, v24, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v25 & 1) == 0)
          goto LABEL_51;
      }
    }
    else if (v24)
    {
      goto LABEL_44;
    }
  }
  else if (v19)
  {
    goto LABEL_44;
  }
  v26 = objc_msgSend(v1, "artistID");
  if (v26)
  {
    v27 = v26;
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v30 = v29;

  }
  else
  {
    v28 = 0;
    v30 = 0;
  }
  v31 = objc_msgSend(v3, "artistID");
  if (!v31)
  {
    if (v30)
      goto LABEL_44;
    goto LABEL_49;
  }
  v32 = v31;
  v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  v35 = v34;

  if (!v30)
  {
    if (v35)
      goto LABEL_44;
    goto LABEL_49;
  }
  if (!v35)
    goto LABEL_44;
  if (v28 == v33 && v30 == v35)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_49;
  }
  v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, v33, v35, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v38 & 1) == 0)
  {
LABEL_51:

    goto LABEL_46;
  }
LABEL_49:
  v39 = objc_msgSend(v1, "identifier");
  if (v39)
  {
    v40 = v39;
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
    v43 = v42;

  }
  else
  {
    v41 = 0;
    v43 = 0;
  }
  v44 = objc_msgSend(v3, "identifier");
  if (!v44)
  {
    if (!v43)
    {

      v36 = 1;
      return v36 & 1;
    }
    goto LABEL_44;
  }
  v45 = v44;
  v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
  v48 = v47;

  if (!v43)
  {

    if (!v48)
    {
      v36 = 1;
      return v36 & 1;
    }
    goto LABEL_45;
  }
  if (!v48)
  {
LABEL_44:

LABEL_45:
    swift_bridgeObjectRelease();
    goto LABEL_46;
  }
  if (v41 == v46 && v43 == v48)
    v36 = 1;
  else
    v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v43, v46, v48, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v36 & 1;
}

uint64_t sub_100257E30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for Logger(0, a2);
  sub_1000086DC(v2, static Logger.lyrics);
  sub_1000086B4(v2, (uint64_t)static Logger.lyrics);
  return static Logger.music(_:)(0x73636972794CLL, 0xE600000000000000);
}

uint64_t static Logger.lyrics.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  if (qword_100498A10 != -1)
    swift_once(&qword_100498A10, sub_100257E30);
  v3 = type metadata accessor for Logger(0, a1);
  v4 = sub_1000086B4(v3, (uint64_t)static Logger.lyrics);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a2, v4, v3);
}

size_t sub_100257EF8(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100005574(&qword_1004991A8);
  v11 = *(_QWORD *)(sub_100005574(&qword_1004991A0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_29;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  v17 = sub_100005574(&qword_1004991A0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v20 = (char *)v15 + v19;
  v21 = (char *)a4 + v19;
  if ((v5 & 1) != 0)
  {
    if (v15 < a4 || v20 >= &v21[*(_QWORD *)(v18 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v20, v21, v8, v17);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v20);
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v20, v21, v8, v17);
  }
  swift_bridgeObjectRelease();
  return (size_t)v15;
}

char *sub_100258074(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_100499F90);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for String);
  }
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_100258174(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  uint64_t v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_100499EF8);
    v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[5 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    v14 = sub_100005574(&qword_100499F00);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v14);
  }
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1002582A8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  uint64_t v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_100499F08);
    v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[5 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    v14 = sub_100005574(&qword_100499F10);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v14);
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1002583DC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_100499EF0);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v8])
      memmove(v13, v14, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v13, v14, v8, &type metadata for Lyrics.Word);
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1002584EC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_100499EB0);
    v11 = (char *)swift_allocObject(v10, 104 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 104);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[104 * v8])
      memmove(v13, v14, 104 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v13, v14, v8, &type metadata for Lyrics.TextLine);
  }
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_100258608(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  uint64_t v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_100499E98);
    v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[5 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    v14 = sub_100005574(&qword_100499EA0);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v14);
  }
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_10025873C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_100499DE8);
    v11 = (_QWORD *)swift_allocObject(v10, (v9 << 6) | 0x20, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 + 31;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 6);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[8 * v8 + 4])
      memmove(v11 + 4, a4 + 4, v8 << 6);
    a4[2] = 0;
  }
  else
  {
    v15 = sub_100005574(&qword_100499DF0);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v15);
  }
  swift_bridgeObjectRelease();
  return v11;
}

size_t sub_10025885C(size_t a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10003EDE4(a1, a2, a3, a4, &qword_100499E60, type metadata accessor for Razzmatazz);
}

char *sub_100258870(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_100499E90);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for Substring);
  }
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_100258970(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100258984(a1, a2, a3, a4, &qword_100499E78, &qword_100499E80);
}

_QWORD *sub_100258984(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v18;

  v8 = (char)result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_100005574(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 8 * v12 + 32, 7);
    v15 = j__malloc_size(v14);
    v16 = v15 - 32;
    if (v15 < 32)
      v16 = v15 - 25;
    v14[2] = v11;
    v14[3] = 2 * (v16 >> 3);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  if ((v8 & 1) != 0)
  {
    if (v14 != a4 || v14 + 4 >= &a4[v11 + 4])
      memmove(v14 + 4, a4 + 4, 8 * v11);
    a4[2] = 0;
  }
  else
  {
    v18 = sub_100005574(a6);
    swift_arrayInitWithCopy(v14 + 4, a4 + 4, v11, v18);
  }
  swift_bridgeObjectRelease();
  return v14;
}

_QWORD *sub_100258AA8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_100499E68);
    v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 3);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[v8 + 4])
      memmove(v11 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
  }
  else
  {
    v15 = sub_100005574(&qword_100499E70);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v15);
  }
  swift_bridgeObjectRelease();
  return v11;
}

size_t sub_100258BC8(size_t a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10003EDE4(a1, a2, a3, a4, &qword_100499DC8, (uint64_t (*)(_QWORD))&type metadata accessor for Playlist.Collaborator);
}

char *sub_100258BDC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_100499E40);
    v11 = (char *)swift_allocObject(v10, 120 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 120);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[120 * v8])
      memmove(v13, v14, 120 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v13, v14, v8, &type metadata for PlaylistCovers.CarouselItem);
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_100258CF4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_100499E30);
    v11 = (char *)swift_allocObject(v10, 88 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 88);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[88 * v8])
      memmove(v13, v14, 88 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v13, v14, v8, &type metadata for SymbolButton.Transition);
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_100258E0C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_100499E10);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for AnimationGroup.Animator);
  }
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_100258F0C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_100499E18);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[2 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    v15 = sub_100005574(&qword_100499E20);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v15);
  }
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_10025902C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_100499E00);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[2 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    v15 = sub_100005574(&qword_100499E08);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v15);
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_10025914C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_1004999B0);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, (char *)&type metadata for Any + 8);
  }
  swift_bridgeObjectRelease();
  return v11;
}

size_t sub_100259250(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_1002593DC(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

char *sub_10025926C(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_100259558(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_100259288(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_10025965C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1002592A4(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_10025975C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_1002592C0(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_10025986C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1002592DC(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1002599A0(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1002592F8(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_100259ABC(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_100259314(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_100259BB4(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_100259330(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_100259CD4(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_10025934C(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_100259DCC(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

size_t sub_100259368(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_100259EEC(a1, a2, a3, (_QWORD *)*v3, &qword_100499E60, type metadata accessor for Razzmatazz);
  *v3 = result;
  return result;
}

size_t sub_100259394(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_100259EEC(a1, a2, a3, (_QWORD *)*v3, &qword_100499E88, (uint64_t (*)(_QWORD))&type metadata accessor for Artist);
  *v3 = result;
  return result;
}

char *sub_1002593C0(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_10025A148(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

size_t sub_1002593DC(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100005574(&qword_1004991A8);
  v11 = *(_QWORD *)(sub_100005574(&qword_1004991A0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_29;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  v17 = sub_100005574(&qword_1004991A0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v20 = (char *)v15 + v19;
  v21 = (char *)a4 + v19;
  if ((v5 & 1) != 0)
  {
    if (v15 < a4 || v20 >= &v21[*(_QWORD *)(v18 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v20, v21, v8, v17);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v20);
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v20, v21, v8, v17);
  }
  swift_release(a4);
  return (size_t)v15;
}

char *sub_100259558(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_1004999B0);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, (char *)&type metadata for Any + 8);
  }
  swift_release(a4);
  return v11;
}

char *sub_10025965C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_100499F90);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for String);
  }
  swift_release(a4);
  return v11;
}

char *sub_10025975C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_100499EF0);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v8])
      memmove(v13, v14, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v13, v14, v8, &type metadata for Lyrics.Word);
  }
  swift_release(a4);
  return v11;
}

_QWORD *sub_10025986C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  uint64_t v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_100499E98);
    v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[5 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    v14 = sub_100005574(&qword_100499EA0);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v14);
  }
  swift_release(a4);
  return v11;
}

char *sub_1002599A0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_100499EE8);
    v11 = (char *)swift_allocObject(v10, 56 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 56);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[56 * v8])
      memmove(v13, v14, 56 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v13, v14, v8, &type metadata for Lyrics.Syllable);
  }
  swift_release(a4);
  return v11;
}

char *sub_100259ABC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_100499DF8);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 8 * v8);
  }
  swift_release(a4);
  return v11;
}

_QWORD *sub_100259BB4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_100499DE8);
    v11 = (_QWORD *)swift_allocObject(v10, (v9 << 6) | 0x20, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 + 31;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 6);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[8 * v8 + 4])
      memmove(v11 + 4, a4 + 4, v8 << 6);
    a4[2] = 0;
  }
  else
  {
    v15 = sub_100005574(&qword_100499DF0);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v15);
  }
  swift_release(a4);
  return v11;
}

char *sub_100259CD4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_100499DD0);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 32 * v8);
  }
  swift_release(a4);
  return v11;
}

_QWORD *sub_100259DCC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_100499DD8);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[2 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    v15 = sub_100005574(&qword_100499DE0);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v15);
  }
  swift_release(a4);
  return v11;
}

size_t sub_100259EEC(size_t result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;

  v8 = result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100005574(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  result = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_29;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(result - v17) / v15);
LABEL_19:
  v20 = a6(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v23 = (char *)v18 + v22;
  v24 = (char *)a4 + v22;
  if ((v8 & 1) != 0)
  {
    if (v18 < a4 || v23 >= &v24[*(_QWORD *)(v21 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v23, v24, v11, v20);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v23);
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v23, v24, v11, v20);
  }
  swift_release(a4);
  return (size_t)v18;
}

char *sub_10025A060(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_1004999A0);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v8);
  }
  swift_release(a4);
  return v11;
}

char *sub_10025A148(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_100499E28);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for Text);
  }
  swift_release(a4);
  return v11;
}

unint64_t sub_10025A248(unsigned __int8 *a1)
{
  Swift::Int v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  PlaylistCovers.Cover.Representation.hash(into:)((uint64_t)v4);
  v2 = Hasher._finalize()();
  return sub_10025A358(a1, v2);
}

unint64_t sub_10025A2A0(char a1)
{
  unint64_t v2;
  unint64_t v3;
  Swift::Int v4;
  _QWORD v6[9];

  v2 = 0xD000000000000015;
  Hasher.init(_seed:)(v6);
  if (a1)
  {
    if (a1 == 1)
    {
      v2 = 0xD000000000000014;
      v3 = 0x80000001003B78B0;
    }
    else
    {
      v3 = 0x80000001003B78D0;
    }
  }
  else
  {
    v3 = 0x80000001003B7890;
  }
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease();
  v4 = Hasher._finalize()();
  return sub_10025A4A0(a1, v4);
}

unint64_t sub_10025A358(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;
  _OWORD v19[3];
  uint64_t v20;
  _OWORD v21[3];
  uint64_t v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48) + 56 * i;
    v9 = *(_OWORD *)(v7 + 16);
    v8 = *(_OWORD *)(v7 + 32);
    v10 = *(_OWORD *)v7;
    v22 = *(_QWORD *)(v7 + 48);
    v21[1] = v9;
    v21[2] = v8;
    v21[0] = v10;
    sub_1001908EC((uint64_t)v21);
    v11 = static PlaylistCovers.Cover.Representation.== infix(_:_:)((unsigned __int8 *)v21, a1);
    sub_100190940((uint64_t)v21);
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      for (i = (i + 1) & v12; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v12)
      {
        v13 = *(_QWORD *)(v2 + 48) + 56 * i;
        v15 = *(_OWORD *)(v13 + 16);
        v14 = *(_OWORD *)(v13 + 32);
        v16 = *(_OWORD *)v13;
        v20 = *(_QWORD *)(v13 + 48);
        v19[1] = v15;
        v19[2] = v14;
        v19[0] = v16;
        sub_1001908EC((uint64_t)v19);
        v17 = static PlaylistCovers.Cover.Representation.== infix(_:_:)((unsigned __int8 *)v19, a1);
        sub_100190940((uint64_t)v19);
        if ((v17 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_10025A4A0(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v14 = ~v3;
    while (1)
    {
      v5 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v4);
      if (v5 == 1)
        v6 = 0xD000000000000014;
      else
        v6 = 0xD000000000000015;
      if (v5 == 1)
        v7 = 0x80000001003B78B0;
      else
        v7 = 0x80000001003B78D0;
      if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4))
        v8 = v6;
      else
        v8 = 0xD000000000000015;
      if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4))
        v9 = v7;
      else
        v9 = 0x80000001003B7890;
      if (a1)
      {
        if (a1 == 1)
          v10 = 0xD000000000000014;
        else
          v10 = 0xD000000000000015;
        if (a1 == 1)
          v11 = 0x80000001003B78B0;
        else
          v11 = 0x80000001003B78D0;
        if (v8 != v10)
          goto LABEL_26;
      }
      else
      {
        v11 = 0x80000001003B7890;
        v10 = 0xD000000000000015;
        if (v8 != 0xD000000000000015)
          goto LABEL_26;
      }
      if (v9 == v11)
      {
        swift_bridgeObjectRelease_n(v9, 2);
        return v4;
      }
LABEL_26:
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v10, v11, 0);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v11);
      if ((v12 & 1) == 0)
      {
        v4 = (v4 + 1) & v14;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
  }
  return v4;
}

void sub_10025A640(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  __int128 v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005574(&qword_1004991B0);
  v7 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v9 = v8;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = v3;
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v10 + 63) >> 6;
    v13 = v8 + 64;
    swift_retain(v5);
    v14 = 0;
    while (1)
    {
      if (v12)
      {
        v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v23 = v22 | (v14 << 6);
      }
      else
      {
        v24 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return;
        }
        if (v24 >= v37)
          goto LABEL_36;
        v25 = v38[v24];
        ++v14;
        if (!v25)
        {
          v14 = v24 + 1;
          if (v24 + 1 >= v37)
            goto LABEL_36;
          v25 = v38[v14];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v37)
            {
LABEL_36:
              swift_release(v5);
              v3 = v36;
              if ((v7 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v5 + 32);
                if (v35 >= 64)
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v35;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v25 = v38[v26];
            if (!v25)
            {
              while (1)
              {
                v14 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_43;
                if (v14 >= v37)
                  goto LABEL_36;
                v25 = v38[v14];
                ++v26;
                if (v25)
                  goto LABEL_33;
              }
            }
            v14 = v26;
          }
        }
LABEL_33:
        v12 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v14 << 6);
      }
      v31 = 16 * v23;
      v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
      v34 = *v32;
      v33 = v32[1];
      v39 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v31);
      if ((v7 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        sub_1000516F8(v39, *((unint64_t *)&v39 + 1));
      }
      Hasher.init(_seed:)(v40);
      String.hash(into:)(v40, v34, v33);
      v15 = Hasher._finalize()();
      v16 = -1 << *(_BYTE *)(v9 + 32);
      v17 = v15 & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v18 == v28;
          if (v18 == v28)
            v18 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 16 * v19;
      v21 = (_QWORD *)(*(_QWORD *)(v9 + 48) + v20);
      *v21 = v34;
      v21[1] = v33;
      *(_OWORD *)(*(_QWORD *)(v9 + 56) + v20) = v39;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  swift_release(v5);
  *v3 = v9;
}

void sub_10025A94C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005574(&qword_100499198);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)(v38);
    String.hash(into:)(v38, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_10025AC60(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005574(&qword_100499190);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_36;
      v24 = *(_QWORD *)(v38 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v37)
              goto LABEL_36;
            v24 = *(_QWORD *)(v38 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v34 = v33;
    }
    Hasher.init(_seed:)(v40);
    String.hash(into:)(v40, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_10025AF6C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  Swift::Int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[2];
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005574(&qword_100499E48);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v19 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_25;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return;
    }
    if (v21 >= v12)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v14;
    if (!v23)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v12)
        goto LABEL_37;
      v23 = *(_QWORD *)(v37 + 8 * v14);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v14 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_46;
            if (v14 >= v12)
              goto LABEL_37;
            v23 = *(_QWORD *)(v37 + 8 * v14);
            ++v24;
            if (v23)
              goto LABEL_24;
          }
        }
        v14 = v24;
      }
    }
LABEL_24:
    v11 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_25:
    v25 = *(_QWORD *)(v5 + 48) + 40 * v20;
    if ((a2 & 1) != 0)
    {
      v26 = *(_OWORD *)v25;
      v27 = *(_OWORD *)(v25 + 16);
      v41 = *(_QWORD *)(v25 + 32);
      v39 = v26;
      v40 = v27;
      sub_10009B168((_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v20), v38);
    }
    else
    {
      sub_10009B414(v25, (uint64_t)&v39);
      sub_10000684C(*(_QWORD *)(v5 + 56) + 32 * v20, (uint64_t)v38);
    }
    v28 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v29 = -1 << *(_BYTE *)(v8 + 32);
    v30 = v28 & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v13 + 8 * v31);
      }
      while (v35 == -1);
      v15 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v13 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v8 + 48) + 40 * v15;
    v17 = v39;
    v18 = v40;
    *(_QWORD *)(v16 + 32) = v41;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    sub_10009B168(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v22 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v22, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  swift_release(v5);
  *v3 = v8;
}

void sub_10025B280(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  int64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t *v50;
  int64_t v51;
  _QWORD *v52;
  uint64_t v53;
  char v54;
  int64_t v55;
  void *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  _QWORD v71[9];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  void *v75;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005574(&qword_100499E38);
  v54 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v52 = (_QWORD *)(v5 + 64);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v50 = v2;
  v51 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  v53 = v5;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v55 = v13;
      v23 = v22 | (v13 << 6);
      goto LABEL_34;
    }
    v24 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v24 >= v51)
      break;
    v25 = v52;
    v26 = v52[v24];
    v27 = v13 + 1;
    if (!v26)
    {
      v27 = v24 + 1;
      if (v24 + 1 >= v51)
        goto LABEL_36;
      v26 = v52[v27];
      if (!v26)
      {
        v28 = v24 + 2;
        if (v28 >= v51)
        {
LABEL_36:
          swift_release(v5);
          v3 = v50;
          if ((v54 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = v52[v28];
        if (!v26)
        {
          while (1)
          {
            v27 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_45;
            if (v27 >= v51)
              goto LABEL_36;
            v26 = v52[v27];
            ++v28;
            if (v26)
              goto LABEL_33;
          }
        }
        v27 = v28;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v55 = v27;
    v23 = __clz(__rbit64(v26)) + (v27 << 6);
LABEL_34:
    v33 = *(_QWORD *)(v5 + 56);
    v34 = *(_QWORD *)(v5 + 48) + 56 * v23;
    v35 = *(_BYTE *)v34;
    v37 = *(void **)(v34 + 8);
    v36 = *(void **)(v34 + 16);
    v39 = *(void **)(v34 + 24);
    v38 = *(void **)(v34 + 32);
    v41 = *(void **)(v34 + 40);
    v40 = *(void **)(v34 + 48);
    v42 = v33 + 120 * v23;
    v56 = *(void **)v42;
    v57 = *(_QWORD *)(v42 + 8);
    v58 = *(void **)(v42 + 16);
    v59 = *(void **)(v42 + 24);
    v69 = *(void **)(v42 + 48);
    v70 = *(void **)(v42 + 40);
    v67 = *(_QWORD *)(v42 + 64);
    v68 = *(void **)(v42 + 56);
    v65 = *(_QWORD *)(v42 + 80);
    v66 = *(_QWORD *)(v42 + 72);
    v63 = *(_QWORD *)(v42 + 96);
    v64 = *(_QWORD *)(v42 + 88);
    v62 = *(_QWORD *)(v42 + 104);
    v60 = *(void **)(v42 + 32);
    v61 = *(_QWORD *)(v42 + 112);
    if ((v54 & 1) == 0)
    {
      v43 = v37;
      v44 = v36;
      v45 = v39;
      v46 = v38;
      v47 = v41;
      v48 = v40;
      sub_1002613B8(v56, v57, v58, v59, v60, v70, v69, v68);
      sub_100261438(v65, v64, v63, v62, v61);
    }
    LOBYTE(v72) = v35;
    *((_QWORD *)&v72 + 1) = v37;
    *(_QWORD *)&v73 = v36;
    *((_QWORD *)&v73 + 1) = v39;
    *(_QWORD *)&v74 = v38;
    *((_QWORD *)&v74 + 1) = v41;
    v75 = v40;
    Hasher.init(_seed:)(v71);
    PlaylistCovers.Cover.Representation.hash(into:)((uint64_t)v71);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      v5 = v53;
      v13 = v55;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v15) >> 6;
      v5 = v53;
      v13 = v55;
      do
      {
        if (++v17 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v31 = v17 == v30;
        if (v17 == v30)
          v17 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v32 == -1);
      v18 = __clz(__rbit64(~v32)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = *(_QWORD *)(v8 + 48) + 56 * v18;
    v20 = v73;
    *(_OWORD *)v19 = v72;
    *(_OWORD *)(v19 + 16) = v20;
    *(_OWORD *)(v19 + 32) = v74;
    *(_QWORD *)(v19 + 48) = v75;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 120 * v18);
    *v21 = v56;
    v21[1] = v57;
    v21[2] = v58;
    v21[3] = v59;
    v21[4] = v60;
    v21[5] = v70;
    v21[6] = v69;
    v21[7] = v68;
    v21[8] = v67;
    v21[9] = v66;
    v21[10] = v65;
    v21[11] = v64;
    v21[12] = v63;
    v21[13] = v62;
    v21[14] = v61;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v50;
  v25 = v52;
  if ((v54 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v49 = 1 << *(_BYTE *)(v5 + 32);
  if (v49 >= 64)
    bzero(v25, ((unint64_t)(v49 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v49;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

unint64_t sub_10025B6D8(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

void sub_10025B720()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  __int128 v24;

  v1 = v0;
  sub_100005574(&qword_1004991B0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v24 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain();
    sub_1000516F8(v24, *((unint64_t *)&v24 + 1));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_10025B8E4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_100005574(&qword_100499198);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  v5 = *(_QWORD *)(v2 + 16);
  if (!v5)
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v6 = (void *)(v3 + 64);
  v7 = v2 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v6 >= v2 + 64 + 8 * v8)
  {
    memmove(v6, (const void *)(v2 + 64), 8 * v8);
    v5 = *(_QWORD *)(v2 + 16);
  }
  v10 = 0;
  *(_QWORD *)(v4 + 16) = v5;
  v11 = 1 << *(_BYTE *)(v2 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v2 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_10025BA98()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  id v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_100005574(&qword_100499190);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    v22 = v20;
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_10025BC48()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  v1 = v0;
  sub_100005574(&qword_100499E48);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    sub_10009B414(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    v17 = 32 * v15;
    sub_10000684C(*(_QWORD *)(v2 + 56) + v17, (uint64_t)v24);
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v19 = v25[0];
    v20 = v25[1];
    *(_QWORD *)(v18 + 32) = v26;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    sub_10009B168(v24, (_OWORD *)(*(_QWORD *)(v4 + 56) + v17));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_10025BE2C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  BOOL v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  _QWORD *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  void *__src;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;

  sub_100005574(&qword_100499E38);
  v41 = v0;
  v1 = *v0;
  v2 = static _DictionaryStorage.copy(original:)(*v0);
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_26:
    v39 = v1;
    v40 = v3;
    swift_release(v39);
    *v41 = v40;
    return;
  }
  v4 = (void *)(v2 + 64);
  v5 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  __src = (void *)(v1 + 64);
  v6 = v3 != v1 || (unint64_t)v4 >= v1 + 64 + 8 * v5;
  v45 = v3;
  if (v6)
  {
    memmove(v4, __src, 8 * v5);
    v3 = v45;
  }
  v7 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v8 = 1 << *(_BYTE *)(v1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v1 + 64);
  v43 = (unint64_t)(v8 + 63) >> 6;
  v44 = v1;
  while (1)
  {
    if (v10)
    {
      v46 = (v10 - 1) & v10;
      v47 = v7;
      v11 = __clz(__rbit64(v10)) | (v7 << 6);
      v1 = v44;
      v3 = v45;
      goto LABEL_12;
    }
    v35 = v7 + 1;
    v1 = v44;
    v3 = v45;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v35 >= v43)
      goto LABEL_26;
    v36 = *((_QWORD *)__src + v35);
    v37 = v7 + 1;
    if (!v36)
    {
      v37 = v7 + 2;
      if (v7 + 2 >= v43)
        goto LABEL_26;
      v36 = *((_QWORD *)__src + v37);
      if (!v36)
        break;
    }
LABEL_25:
    v46 = (v36 - 1) & v36;
    v47 = v37;
    v11 = __clz(__rbit64(v36)) + (v37 << 6);
LABEL_12:
    v12 = 56 * v11;
    v13 = *(_QWORD *)(v1 + 48) + 56 * v11;
    v14 = 120 * v11;
    v15 = *(_QWORD *)(v1 + 56) + v14;
    v17 = *(void **)v15;
    v16 = *(_QWORD *)(v15 + 8);
    v19 = *(void **)(v15 + 16);
    v18 = *(void **)(v15 + 24);
    v20 = *(void **)(v15 + 32);
    v21 = *(void **)(v15 + 40);
    v22 = *(void **)(v15 + 48);
    v23 = *(void **)(v15 + 56);
    v24 = *(_QWORD *)(v15 + 64);
    v25 = *(_QWORD *)(v15 + 72);
    v52 = *(_QWORD *)(v15 + 88);
    v53 = *(_QWORD *)(v15 + 80);
    v50 = *(_QWORD *)(v15 + 104);
    v51 = *(_QWORD *)(v15 + 96);
    v49 = *(_QWORD *)(v15 + 112);
    v26 = *(_QWORD *)(v3 + 48) + v12;
    v27 = *(_OWORD *)(v13 + 8);
    v54 = *(_OWORD *)(v13 + 24);
    v55 = *(_OWORD *)(v13 + 40);
    *(_BYTE *)v26 = *(_BYTE *)v13;
    *(_OWORD *)(v26 + 8) = v27;
    v48 = (void *)*((_QWORD *)&v27 + 1);
    *(_OWORD *)(v26 + 24) = v54;
    *(_OWORD *)(v26 + 40) = v55;
    v28 = (_QWORD *)(*(_QWORD *)(v3 + 56) + v14);
    *v28 = v17;
    v28[1] = v16;
    v28[2] = v19;
    v28[3] = v18;
    v28[4] = v20;
    v28[5] = v21;
    v28[6] = v22;
    v28[7] = v23;
    v28[8] = v24;
    v28[9] = v25;
    v28[10] = v53;
    v28[11] = v52;
    v28[12] = v51;
    v28[13] = v50;
    v28[14] = v49;
    v29 = (id)v27;
    v30 = v48;
    v31 = (id)v54;
    v32 = *((id *)&v54 + 1);
    v33 = (id)v55;
    v34 = *((id *)&v55 + 1);
    sub_1002613B8(v17, v16, v19, v18, v20, v21, v22, v23);
    sub_100261438(v53, v52, v51, v50, v49);
    v10 = v46;
    v7 = v47;
  }
  v38 = v7 + 3;
  if (v7 + 3 >= v43)
    goto LABEL_26;
  v36 = *((_QWORD *)__src + v38);
  if (v36)
  {
    v37 = v7 + 3;
    goto LABEL_25;
  }
  while (1)
  {
    v37 = v38 + 1;
    if (__OFADD__(v38, 1))
      break;
    if (v37 >= v43)
      goto LABEL_26;
    v36 = *((_QWORD *)__src + v37);
    ++v38;
    if (v36)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_10025C118(uint64_t a1)
{
  uint64_t v1;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;

  v3 = *(_BYTE *)(a1 + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD || (swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8) & 1) != 0)
  {
    __chkstk_darwin();
    bzero((char *)&v14 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    sub_10025C274((unint64_t *)((char *)&v14 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, a1);
    v9 = v8;
    v10 = swift_release(a1);
    if (v1)
      swift_willThrow(v10);
  }
  else
  {
    v11 = (void *)swift_slowAlloc(v7, -1);
    bzero(v11, v7);
    sub_10025C274((unint64_t *)v11, v6, a1);
    v9 = v12;
    swift_release(a1);
    swift_slowDealloc(v11, -1, -1);
  }
  return v9;
}

void sub_10025C274(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v23;
  uint64_t v25;
  int64_t v26;

  v23 = a2;
  v4 = 0;
  v5 = a3 + 56;
  v6 = 1 << *(_BYTE *)(a3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a3 + 56);
  v26 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    v9 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v10 = v9 | (v4 << 6);
LABEL_21:
    v14 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v10);
    v15 = objc_msgSend(v14, "type", v23);
    if (v15)
    {
      v16 = v15;
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v19 = v18;

      if (v17 == 0x6E6F73726570 && v19 == 0xE600000000000000)
      {

        swift_bridgeObjectRelease();
LABEL_29:
        *(unint64_t *)((char *)a1 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        if (__OFADD__(v25++, 1))
        {
          __break(1u);
LABEL_32:
          swift_retain(a3);
          sub_10025C4B4(a1, v23, v25, a3);
          return;
        }
      }
      else
      {
        v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, 0x6E6F73726570, 0xE600000000000000, 0);

        swift_bridgeObjectRelease();
        if ((v21 & 1) != 0)
          goto LABEL_29;
      }
    }
    else
    {

    }
  }
  v11 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v11 >= v26)
    goto LABEL_32;
  v12 = *(_QWORD *)(v5 + 8 * v11);
  ++v4;
  if (v12)
    goto LABEL_20;
  v4 = v11 + 1;
  if (v11 + 1 >= v26)
    goto LABEL_32;
  v12 = *(_QWORD *)(v5 + 8 * v4);
  if (v12)
    goto LABEL_20;
  v4 = v11 + 2;
  if (v11 + 2 >= v26)
    goto LABEL_32;
  v12 = *(_QWORD *)(v5 + 8 * v4);
  if (v12)
  {
LABEL_20:
    v8 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v4 << 6);
    goto LABEL_21;
  }
  v13 = v11 + 3;
  if (v13 >= v26)
    goto LABEL_32;
  v12 = *(_QWORD *)(v5 + 8 * v13);
  if (v12)
  {
    v4 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    v4 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v4 >= v26)
      goto LABEL_32;
    v12 = *(_QWORD *)(v5 + 8 * v4);
    ++v13;
    if (v12)
      goto LABEL_20;
  }
LABEL_34:
  __break(1u);
}

Swift::Int sub_10025C4B4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t *v29;

  v4 = a4;
  if (!a3)
  {
    v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_100005574((uint64_t *)&unk_10049EDA0);
  result = static _SetStorage.allocate(capacity:)(v5);
  v9 = (_QWORD *)result;
  v29 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= a2)
      goto LABEL_36;
    v16 = v29[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= a2)
        goto LABEL_36;
      v16 = v29[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= a2)
          goto LABEL_36;
        v16 = v29[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = v9[5];
    v19 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    result = NSObject._rawHashValue(seed:)(v18);
    v20 = -1 << *((_BYTE *)v9 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v12 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v12 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(_QWORD *)(v9[6] + 8 * v23) = v19;
    ++v9[2];
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v17 = v15 + 3;
  if (v17 >= a2)
    goto LABEL_36;
  v16 = v29[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= a2)
      goto LABEL_36;
    v16 = v29[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

void sub_10025C710(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4;
  Swift::UInt64 *v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  Swift::UInt v9;
  Swift::UInt v10;
  Swift::UInt v11;
  Swift::UInt64 v12;
  Swift::UInt64 v13;

  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v5 = (Swift::UInt64 *)(a2 + 40);
    do
    {
      v6 = *v5;
      v7 = v5[1];
      v8 = v5[2];
      v9 = v5[3];
      v10 = v5[4];
      v11 = v5[5];
      if ((*(v5 - 1) & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v12 = *(v5 - 1);
      else
        v12 = 0;
      Hasher._combine(_:)(v12);
      if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v13 = v6;
      else
        v13 = 0;
      Hasher._combine(_:)(v13);
      swift_bridgeObjectRetain();
      String.hash(into:)(a1, v7, v8);
      Hasher._combine(_:)(v9);
      Hasher._combine(_:)(v10);
      Hasher._combine(_:)(v11);
      swift_bridgeObjectRelease(v8);
      v5 += 7;
      --v4;
    }
    while (v4);
  }
}

BOOL _s11MusicCoreUI6LyricsC8SyllableV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  _BOOL8 result;

  if (*(double *)a1 != *(double *)a2 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
    return 0;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = v4 == v6 && v5 == v7;
  if (v8 || (v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0), result = 0, (v9 & 1) != 0))
  {
    if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32) && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40))
      return *(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 48);
    return 0;
  }
  return result;
}

uint64_t _s11MusicCoreUI6LyricsC8TextLineV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)
    && *(double *)a1 == *(double *)a2
    && *(double *)(a1 + 8) == *(double *)(a2 + 8)
    && *(double *)(a1 + 40) == *(double *)(a2 + 40)
    && *(double *)(a1 + 48) == *(double *)(a2 + 48))
  {
    v3 = (*(uint64_t (**)(void))(a1 + 56))();
    v5 = v4;
    v7 = (*(uint64_t (**)(void))(a2 + 56))();
    v8 = v6;
    if (v3 == v7 && v5 == v6)
    {
      v9 = 1;
      v8 = v5;
    }
    else
    {
      v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v7, v6, 0);
    }
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    v9 = 0;
  }
  return v9 & 1;
}

uint64_t sub_10025C954(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result + 56 * v1;
  v4 = *(_QWORD *)(v2 + 8);
  v3 = *(_QWORD *)(v2 + 16);
  v5 = __OFADD__(v4, v3);
  v6 = v4 + v3;
  if (v5)
    goto LABEL_7;
  result = *(_QWORD *)(result + 64);
  if (__OFSUB__(v6, result))
  {
    __break(1u);
LABEL_7:
    __break(1u);
  }
  return result;
}

uint64_t sub_10025C994(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_10025C9BC(uint64_t *a1)
{
  sub_10025C9F4(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
  return a1;
}

uint64_t sub_10025C9F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a8);
  }
  return result;
}

uint64_t sub_10025CA24(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  return a1;
}

uint64_t sub_10025CA4C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10025CA70()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025CA80()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

_UNKNOWN **sub_10025CAA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v19;
  char *v20;
  uint64_t v21;
  char v22;
  void (*v23)(char *, uint64_t);
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  char *v28;

  sub_100005574(&qword_100499F28);
  __chkstk_darwin();
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale.Language(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Locale.LanguageCode(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin();
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v28 = (char *)&v27 - v14;
  __chkstk_darwin();
  if (!a2)
    return &off_100459CC0;
  v16 = (char *)&v27 - v15;
  swift_bridgeObjectRetain();
  v17 = Locale.Language.init(identifier:)(a1, a2);
  Locale.Language.languageCode.getter(v17);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v5, 1, v10) == 1)
  {
    sub_100008758((uint64_t)v5, &qword_100499F28);
    return &off_100459CC0;
  }
  v19 = v16;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v5, v10);
  v20 = v28;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v28, v19, v10);
  Locale.LanguageCode.init(stringLiteral:)(29281, 0xE200000000000000);
  v21 = sub_100006924((unint64_t *)&unk_100499F30, (uint64_t (*)(uint64_t))&type metadata accessor for Locale.LanguageCode, (uint64_t)&protocol conformance descriptor for Locale.LanguageCode);
  v22 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v20, v10, v21);
  v23 = *(void (**)(char *, uint64_t))(v11 + 8);
  v23(v13, v10);
  if ((v22 & 1) != 0
    || (Locale.LanguageCode.init(stringLiteral:)(25960, 0xE200000000000000),
        v24 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v20, v10, v21),
        v23(v13, v10),
        (v24 & 1) != 0))
  {
    v23(v20, v10);
    v23(v19, v10);
    return &off_100459C48;
  }
  Locale.LanguageCode.init(stringLiteral:)(26746, 0xE200000000000000);
  v25 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v20, v10, v21);
  v23(v13, v10);
  if ((v25 & 1) != 0)
  {
    v23(v20, v10);
LABEL_11:
    v23(v19, v10);
    return &off_100459C70;
  }
  Locale.LanguageCode.init(stringLiteral:)(24938, 0xE200000000000000);
  v26 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v20, v10, v21);
  v23(v13, v10);
  v23(v20, v10);
  if ((v26 & 1) != 0)
    goto LABEL_11;
  v23(v19, v10);
  return &off_100459C98;
}

unint64_t sub_10025CDF4(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5, int a6, char a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  Swift::Int value;
  uint64_t v57;
  double v58;
  char *v59;
  void *v60;
  id v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  double v67;
  double v68;
  char *v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  char *v77;
  double v78;
  double v79;
  double v80;
  double v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  id v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char **v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  id v119;
  id v120;
  id v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  id v134;
  id v135;
  Swift::String v136;
  uint64_t v137;
  __C::_NSRange v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  id v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  int64_t v202;
  _QWORD *v203;
  uint64_t *v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  void *v213;
  double v214;
  double v215;
  uint64_t v216;
  double v217;
  double v218;
  uint64_t v219;
  int64_t v220;
  char *v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  id v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  char *v234;
  char v235;
  double v236;
  double v237;
  unint64_t v238;
  unint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  _BYTE v243[16];
  Swift::String v244;
  uint64_t v245;
  uint64_t v246;
  char **v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  int v251;
  id v252;
  uint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  id v256;
  uint64_t v257;
  Swift::String v258;
  id v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  void *v263;
  char *v264;
  uint64_t v265;
  char *v266;
  int64x2_t v267;
  __int128 v268;
  __int128 v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  _QWORD v273[3];
  char v274;
  char *v275;
  char *v276;
  uint64_t v277;
  Swift::Int_optional v278;
  Swift::Int_optional v279;

  v258._object = a5;
  v258._countAndFlagsBits = a4;
  v8 = a1;
  v277 = a1;
  if ((a8 & 1) == 0)
  {
    v262 = 0;
    v263 = (void *)a3;
    v261 = a2;
    if ((a7 & 1) != 0)
    {
      swift_bridgeObjectRetain();
      *(_QWORD *)&v269 = String._bridgeToObjectiveC()();
      result = String.count.getter(a2, a3);
      if ((result & 0x8000000000000000) != 0)
        goto LABEL_139;
      v40 = (char *)result;
      if (!result)
      {
        v12 = (char *)_swiftEmptyArrayStorage;
LABEL_123:
        swift_bridgeObjectRelease();

        return (unint64_t)v12;
      }
      v41 = 0;
      v42 = 0;
      v12 = (char *)_swiftEmptyArrayStorage;
      v268 = xmmword_100384A80;
      v267 = vdupq_n_s64(1uLL);
      v260 = (char *)result;
      while (1)
      {
        while (1)
        {
          if (__OFSUB__(++v42, v41))
            goto LABEL_128;
          v43 = v41;
          v275 = v41;
          v276 = (char *)(v42 - v41);
          __chkstk_darwin();
          v244 = v258;
          v245 = v261;
          v246 = (uint64_t)v263;
          v247 = &v275;
          v44 = sub_100005574(&qword_100499ED8);
          v8 = v262;
          Array.extractFirst(where:)((uint64_t)sub_1002616C8, (uint64_t)v243, v44, (uint64_t)v273);
          v262 = v8;
          v270 = (char *)v273[0];
          if (v273[0])
            break;
          v41 = v43;
          if (v42 == v40)
            goto LABEL_123;
        }
        if ((unint64_t)v277 >> 62)
        {
          if (v277 < 0)
            v48 = v277;
          else
            v48 = v277 & 0xFFFFFFFFFFFFFF8;
          v49 = v270;
          swift_bridgeObjectRetain();
          v8 = _CocoaArrayWrapper.endIndex.getter(v48);
          swift_bridgeObjectRelease();
          if (v8)
          {
LABEL_22:
            v46 = v275;
            v47 = v276;
            goto LABEL_29;
          }
        }
        else
        {
          v8 = *(_QWORD *)((v277 & 0xFFFFFFFFFFFFF8) + 0x10);
          v45 = v270;
          if (v8)
            goto LABEL_22;
        }
        v50 = (char *)objc_msgSend((id)v269, "length");
        v47 = (char *)(v50 - v43);
        if (__OFSUB__(v50, v43))
          goto LABEL_131;
        v46 = v43;
        v275 = v43;
        v276 = v47;
LABEL_29:
        v264 = v42;
        v266 = v46;
        v51 = (uint64_t)v47;
        _NSRange.makeIterator()();
        v273[0] = v52;
        v273[1] = v53;
        v273[2] = v54;
        v274 = v55 & 1;
        v278 = _NSRange.NSRangeIterator.next()();
        v265 = v51;
        if (!v278.is_nil)
        {
          value = v278.value;
          v57 = 0;
          v58 = (double)v51;
          while (1)
          {
            v59 = v12;
            if (__OFADD__(v57, 1))
              break;
            v60 = (void *)v269;
            v61 = objc_msgSend((id)v269, "substringWithRange:", value, 1);
            v62 = (_QWORD *)static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
            v271 = v63;
            v272 = (uint64_t)v62;

            v64 = sub_100005574(&qword_100499EE8);
            v65 = swift_allocObject(v64, 88, 7);
            *(_OWORD *)(v65 + 16) = v268;
            v66 = v270;
            objc_msgSend(v270, "startTime");
            v68 = v67;
            v69 = v66;
            objc_msgSend(v69, "endTime");
            v71 = v70;
            objc_msgSend(v69, "startTime");
            v73 = v72;

            v74 = v68 + (v71 - v73) / v58 * (double)v57;
            objc_msgSend(v69, "startTime");
            v76 = v75;
            v77 = v69;
            objc_msgSend(v77, "endTime");
            v79 = v78;
            objc_msgSend(v77, "startTime");
            v81 = v80;

            v82 = objc_msgSend(v60, "substringWithRange:", value, 1);
            v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
            v85 = v84;

            *(double *)(v65 + 32) = v74;
            *(double *)(v65 + 40) = v76 + (v79 - v81) / v58 * (double)(v57 + 1);
            *(_QWORD *)(v65 + 48) = v83;
            *(_QWORD *)(v65 + 56) = v85;
            *(_QWORD *)(v65 + 64) = value;
            *(int64x2_t *)(v65 + 72) = v267;
            v12 = v59;
            if ((swift_isUniquelyReferenced_nonNull_native(v59) & 1) == 0)
              v12 = sub_1002583DC(0, *((_QWORD *)v59 + 2) + 1, 1, v59);
            v8 = *((_QWORD *)v12 + 2);
            v86 = *((_QWORD *)v12 + 3);
            if (v8 >= v86 >> 1)
              v12 = sub_1002583DC((char *)(v86 > 1), v8 + 1, 1, v12);
            *((_QWORD *)v12 + 2) = v8 + 1;
            v87 = &v12[40 * v8];
            v88 = v271;
            *((_QWORD *)v87 + 4) = v272;
            *((_QWORD *)v87 + 5) = v88;
            *((_QWORD *)v87 + 6) = v65;
            *((_QWORD *)v87 + 7) = 0;
            v87[64] = 1;
            v279 = _NSRange.NSRangeIterator.next()();
            value = v279.value;
            ++v57;
            if (v279.is_nil)
              goto LABEL_37;
          }
          __break(1u);
          goto LABEL_125;
        }
LABEL_37:
        v89 = v270;

        v41 = &v266[v265];
        if (__OFADD__(v266, v265))
          goto LABEL_129;
        v40 = v260;
        v42 = v264;
        if (v264 == v260)
          goto LABEL_123;
      }
    }
    v90 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v90 = a2 & 0xFFFFFFFFFFFFLL;
    v91 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v91 = 11;
    if (!v90)
    {
      swift_bridgeObjectRetain();
      v12 = (char *)_swiftEmptyArrayStorage;
LABEL_121:
      swift_bridgeObjectRelease();
      return (unint64_t)v12;
    }
    v253 = 4 * v90;
    v92 = a6 ^ 1;
    v254 = v91 | (v90 << 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v93 = 0;
    v94 = 0;
    v95 = 0;
    v8 = 0;
    LOBYTE(v96) = 1;
    v97 = 15;
    v12 = (char *)_swiftEmptyArrayStorage;
    v255 = _swiftEmptyArrayStorage;
    v272 = (uint64_t)_swiftEmptyArrayStorage;
    LODWORD(v264) = v92;
    while (1)
    {
      v98 = (uint64_t)v263;
      swift_bridgeObjectRetain();
      v99 = v261;
      v257 = String.index(after:)(v97, v261, v98);
      swift_bridgeObjectRelease();
      v100 = (v96 & 1) == 0;
      if ((v96 & 1) != 0)
        v101 = v97;
      else
        v101 = v93;
      v102 = v97;
      if (v100)
        v97 = v94;
      v103 = v102;
      v104 = String.index(after:)(v102, v99, v98);
      if (v101 >> 14 > v104 >> 14)
      {
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
        goto LABEL_130;
      }
      v105 = v104;
      v267.i64[0] = v101 >> 14;
      swift_bridgeObjectRetain();
      v106 = _NSRange.init(range:in:)(v101, v105, v99, v98);
      if (v8 < v97 >> 14)
        goto LABEL_127;
      v108 = v107;
      v270 = (char *)v8;
      v271 = v101;
      v259 = v95;
      v109 = (char **)v106;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v269 = v97;
      v110 = v97;
      v111 = v103;
      *(_QWORD *)&v268 = _NSRange.init(range:in:)(v110, v103, v99, v98);
      v113 = v112;
      __chkstk_darwin();
      v244 = v258;
      v245 = v99;
      v246 = v98;
      v265 = (uint64_t)v109;
      v247 = v109;
      v248 = v108;
      v114 = sub_100005574(&qword_100499ED8);
      v115 = v262;
      Array.extractFirst(where:)((uint64_t)sub_1002616A4, (uint64_t)v243, v114, (uint64_t)v273);
      v262 = v115;
      v96 = v273[0];
      v116 = String.subscript.getter(v111, v99, v98);
      LOBYTE(v115) = Character.isWhitespace.getter(v116);
      swift_bridgeObjectRelease();
      if ((v115 & 1) == 0)
        break;
      v117 = v264;
      v118 = (id)v96;
      if (v96)
      {
        v119 = v259;
        if (v259)
          goto LABEL_59;
LABEL_66:
        v134 = v118;
        LODWORD(v96) = 0;
        v8 = v271;
        v93 = v271;
        goto LABEL_67;
      }
      if (v259)
      {
        v135 = v259;
        objc_msgSend(v135, "characterRange");
        v136._countAndFlagsBits = v261;
        v136._object = v263;
        v138 = _NSRange.convert(from:to:preserveLength:)(v258, v136, 0);
        if (v137)
        {
          swift_errorRelease(v137);

          LODWORD(v96) = 0;
          v262 = 0;
LABEL_83:
          v8 = v271;
          v93 = v271;
          v94 = v269;
          v95 = v259;
          goto LABEL_84;
        }
        v262 = 0;
        if (!_NSRange.contains(_:)(v138))
        {

          LODWORD(v96) = 0;
          goto LABEL_83;
        }
        v260 = (char *)v135;
        v139 = String.subscript.getter(v269, v111, v261, v263);
        v143 = static String._fromSubstring(_:)(v139, v140, v141, v142);
        v259 = v144;
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native(v272) & 1) == 0)
          v272 = (uint64_t)sub_1002582A8(0, *(_QWORD *)(v272 + 16) + 1, 1, (_QWORD *)v272);
        v146 = *(_QWORD *)(v272 + 16);
        v145 = *(_QWORD *)(v272 + 24);
        if (v146 >= v145 >> 1)
          v272 = (uint64_t)sub_1002582A8((_QWORD *)(v145 > 1), v146 + 1, 1, (_QWORD *)v272);
        v147 = v271;
        v148 = v272;
        *(_QWORD *)(v272 + 16) = v146 + 1;
        v149 = (_QWORD *)(v148 + 40 * v146);
        v149[4] = v260;
        v149[5] = v143;
        v150 = v268;
        v149[6] = v259;
        v149[7] = v150;
        v149[8] = v113;
        v151 = String.subscript.getter(v147, v105, v261, v263);
        v155 = static String._fromSubstring(_:)(v151, v152, v153, v154);
        v157 = v156;
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native(v255) & 1) == 0)
          v255 = sub_100258174(0, v255[2] + 1, 1, v255);
        v159 = v255[2];
        v158 = v255[3];
        if (v159 >= v158 >> 1)
          v255 = sub_100258174((_QWORD *)(v158 > 1), v159 + 1, 1, v255);
        v160 = v255;
        v255[2] = v159 + 1;
        v161 = &v160[5 * v159];
        v161[4] = v155;
        v161[5] = v157;
        v162 = v265;
        v161[6] = v272;
        v161[7] = v162;
        v161[8] = v108;
        v96 = (unint64_t)v260;

        v93 = 0;
        v94 = 0;
        v95 = 0;
        LODWORD(v96) = 1;
        v272 = (uint64_t)_swiftEmptyArrayStorage;
        v8 = v271;
      }
      else
      {
        LODWORD(v96) = 0;
        v95 = 0;
        v8 = v271;
        v93 = v271;
        v94 = v269;
      }
LABEL_84:
      v163 = String.index(before:)(v254, v261, v263);
      if (v270 == (char *)(v163 >> 14) && v95)
      {
        if ((unint64_t)v270 >= v267.i64[0])
        {
          v249 = v94;
          v250 = v93;
          v251 = v96;
          v256 = v118;
          v164 = (uint64_t)v263;
          swift_bridgeObjectRetain();
          v259 = v95;
          v165 = v95;
          v166 = v261;
          v270 = (char *)_NSRange.init(range:in:)(v8, v111, v261, v164);
          *(_QWORD *)&v268 = v167;
          swift_bridgeObjectRetain();
          v168 = v269;
          v267.i64[0] = _NSRange.init(range:in:)(v269, v111, v166, v164);
          v170 = v169;
          swift_bridgeObjectRetain();
          v252 = v165;
          v171 = String.index(after:)(v111, v166, v164);
          v172 = String.subscript.getter(v168, v171, v166, v164);
          v174 = v173;
          v176 = v175;
          v178 = v177;
          swift_bridgeObjectRelease();
          v179 = static String._fromSubstring(_:)(v172, v174, v176, v178);
          v181 = v180;
          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native(v272) & 1) == 0)
            v272 = (uint64_t)sub_1002582A8(0, *(_QWORD *)(v272 + 16) + 1, 1, (_QWORD *)v272);
          v182 = v271;
          v184 = *(_QWORD *)(v272 + 16);
          v183 = *(_QWORD *)(v272 + 24);
          if (v184 >= v183 >> 1)
            v272 = (uint64_t)sub_1002582A8((_QWORD *)(v183 > 1), v184 + 1, 1, (_QWORD *)v272);
          v185 = v272;
          *(_QWORD *)(v272 + 16) = v184 + 1;
          v186 = (_QWORD *)(v185 + 40 * v184);
          v186[4] = v252;
          v186[5] = v179;
          v187 = v267.i64[0];
          v186[6] = v181;
          v186[7] = v187;
          v186[8] = v170;
          v188 = v263;
          swift_bridgeObjectRetain();
          v189 = v261;
          v190 = String.index(after:)(v111, v261, v188);
          v191 = String.subscript.getter(v182, v190, v189, v188);
          v193 = v192;
          v195 = v194;
          v197 = v196;
          swift_bridgeObjectRelease();
          v198 = static String._fromSubstring(_:)(v191, v193, v195, v197);
          v200 = v199;
          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native(v255) & 1) == 0)
            v255 = sub_100258174(0, v255[2] + 1, 1, v255);
          v202 = v255[2];
          v201 = v255[3];
          if (v202 >= v201 >> 1)
            v255 = sub_100258174((_QWORD *)(v201 > 1), v202 + 1, 1, v255);
          v203 = v255;
          v255[2] = v202 + 1;
          v267.i64[0] = (uint64_t)(v203 + 4);
          v204 = &v203[5 * v202 + 4];
          *v204 = v198;
          v204[1] = v200;
          v205 = (uint64_t)v270;
          v204[2] = v272;
          v204[3] = v205;
          v204[4] = v268;
          v273[0] = _swiftEmptyArrayStorage;
          swift_bridgeObjectRetain();
          sub_1002592A4(0, v202 + 1, 0);
          v206 = 0;
          v207 = v273[0];
          v266 = v12;
          v260 = (char *)v202;
          while (1)
          {
            v208 = (uint64_t *)(v267.i64[0] + 40 * (_QWORD)v206);
            v209 = *v208;
            v210 = v208[1];
            v8 = v208[2];
            v211 = (_QWORD *)v208[4];
            v271 = v210;
            v272 = (uint64_t)v211;
            v212 = *(_QWORD *)(v8 + 16);
            v270 = v206;
            *(_QWORD *)&v269 = v209;
            if (v212)
            {
              *(_QWORD *)&v268 = v207;
              v213 = *(void **)(v8 + 40 * v212 - 8);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              objc_msgSend(v213, "endTime");
              if (!*(_QWORD *)(v8 + 16))
              {
LABEL_125:
                __break(1u);
                goto LABEL_126;
              }
              v215 = v214;
              v216 = v117;
              objc_msgSend(*(id *)(v8 + 32), "startTime");
              v218 = v215 - v217;
              v219 = v8;
              v220 = *(_QWORD *)(v8 + 16);
              if (v220)
              {
                v275 = (char *)_swiftEmptyArrayStorage;
                swift_bridgeObjectRetain();
                sub_1002592DC(0, v220, 0);
                v221 = v275;
                v265 = v219;
                v222 = (uint64_t *)(v219 + 64);
                do
                {
                  v223 = *(v222 - 3);
                  v224 = *(v222 - 2);
                  v225 = *(v222 - 1);
                  v226 = *v222;
                  v227 = (id)*(v222 - 4);
                  swift_bridgeObjectRetain();
                  objc_msgSend(v227, "startTime");
                  v229 = v228;
                  objc_msgSend(v227, "endTime");
                  v231 = v230;

                  v275 = v221;
                  v233 = *((_QWORD *)v221 + 2);
                  v232 = *((_QWORD *)v221 + 3);
                  if (v233 >= v232 >> 1)
                  {
                    sub_1002592DC((char *)(v232 > 1), v233 + 1, 1);
                    v221 = v275;
                  }
                  v222 += 5;
                  *((_QWORD *)v221 + 2) = v233 + 1;
                  v234 = &v221[56 * v233];
                  *((_QWORD *)v234 + 4) = v229;
                  *((_QWORD *)v234 + 5) = v231;
                  *((_QWORD *)v234 + 6) = v223;
                  *((_QWORD *)v234 + 7) = v224;
                  *((_QWORD *)v234 + 8) = v225;
                  *((_QWORD *)v234 + 9) = v226;
                  *((_QWORD *)v234 + 10) = v272;
                  --v220;
                }
                while (v220);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v117 = v264;
                v202 = (int64_t)v260;
                v207 = v268;
                goto LABEL_107;
              }
              v207 = v268;
              v117 = v216;
            }
            else
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v218 = 0.0;
            }
            swift_bridgeObjectRelease();
            v221 = (char *)_swiftEmptyArrayStorage;
LABEL_107:
            v235 = 1;
            v236 = 0.0;
            if (!(v117 & 1 | (v218 <= 1.0)) && v272 <= 7)
            {
              v237 = v218 + -1.0;
              if (v218 > 2.0)
                v237 = 1.0;
              if (v218 < 1.0)
                v237 = 0.0;
              if (v237 > 0.0)
              {
                v235 = 0;
                v236 = v237;
              }
            }
            v273[0] = v207;
            v239 = *(_QWORD *)(v207 + 16);
            v238 = *(_QWORD *)(v207 + 24);
            if (v239 >= v238 >> 1)
            {
              sub_1002592A4((char *)(v238 > 1), v239 + 1, 1);
              v207 = v273[0];
            }
            v240 = v270;
            *(_QWORD *)(v207 + 16) = v239 + 1;
            v241 = v207 + 40 * v239;
            *(_QWORD *)(v241 + 32) = v269;
            *(_QWORD *)(v241 + 40) = v271;
            *(_QWORD *)(v241 + 48) = v221;
            *(double *)(v241 + 56) = v236;
            *(_BYTE *)(v241 + 64) = v235;
            v206 = v240 + 1;
            if (v240 == (char *)v202)
            {

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              v12 = (char *)v207;
              v272 = (uint64_t)_swiftEmptyArrayStorage;
              v97 = v257;
              v95 = v259;
              LOBYTE(v96) = v251;
              v93 = v250;
              v94 = v249;
              goto LABEL_47;
            }
          }
        }
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        if (v8 < 0)
          v242 = v8;
        else
          v242 = v8 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain();
        v9 = _CocoaArrayWrapper.endIndex.getter(v242);
        if (v9)
          goto LABEL_4;
LABEL_136:
        swift_bridgeObjectRelease();
        return (unint64_t)_swiftEmptyArrayStorage;
      }

      v97 = v257;
LABEL_47:
      v8 = v97 >> 14;
      if (v97 >> 14 == v253)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_121;
      }
    }
    v117 = v264;
    v118 = (id)v96;
    if (!v96)
      goto LABEL_83;
    v119 = v259;
    if (!v259)
      goto LABEL_66;
LABEL_59:
    v120 = v119;
    v256 = v118;
    v121 = v118;
    v122 = v120;
    v123 = String.subscript.getter(v269, v111, v261, v263);
    v127 = static String._fromSubstring(_:)(v123, v124, v125, v126);
    v129 = v128;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native(v272) & 1) == 0)
      v272 = (uint64_t)sub_1002582A8(0, *(_QWORD *)(v272 + 16) + 1, 1, (_QWORD *)v272);
    v96 = *(_QWORD *)(v272 + 16);
    v130 = *(_QWORD *)(v272 + 24);
    if (v96 >= v130 >> 1)
      v272 = (uint64_t)sub_1002582A8((_QWORD *)(v130 > 1), v96 + 1, 1, (_QWORD *)v272);
    v131 = v272;
    *(_QWORD *)(v272 + 16) = v96 + 1;
    v132 = (_QWORD *)(v131 + 40 * v96);
    v132[4] = v122;
    v132[5] = v127;
    v133 = v268;
    v132[6] = v129;
    v132[7] = v133;
    v132[8] = v113;

    LODWORD(v96) = 0;
    v8 = v271;
    v93 = v271;
    v118 = v256;
LABEL_67:
    v94 = v111;
    v95 = v118;
    goto LABEL_84;
  }
  if (a1 >> 62)
    goto LABEL_132;
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v9)
    goto LABEL_136;
LABEL_4:
  v273[0] = _swiftEmptyArrayStorage;
  result = (unint64_t)sub_1002592A4(0, v9 & ~(v9 >> 63), 0);
  if ((v9 & 0x8000000000000000) == 0)
  {
    v11 = 0;
    v12 = (char *)v273[0];
    v270 = (char *)(v8 & 0xC000000000000001);
    v269 = xmmword_100384A80;
    v271 = v9;
    v272 = v8;
    do
    {
      v266 = v12;
      if (v270)
        v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v8);
      else
        v13 = *(id *)(v8 + 8 * v11 + 32);
      v14 = v13;
      v15 = objc_msgSend(v13, "lyricsText");
      v16 = objc_msgSend(v15, "string");

      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v19 = v18;

      v20 = sub_100005574(&qword_100499EE8);
      v21 = swift_allocObject(v20, 88, 7);
      *(_OWORD *)(v21 + 16) = v269;
      objc_msgSend(v14, "startTime");
      v23 = v22;
      objc_msgSend(v14, "endTime");
      v25 = v24;
      v26 = objc_msgSend(v14, "lyricsText");
      v27 = objc_msgSend(v26, "string");

      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v30 = v29;

      v31 = objc_msgSend(v14, "characterRange");
      v33 = v32;
      objc_msgSend(v14, "characterRange");
      *(_QWORD *)(v21 + 32) = v23;
      *(_QWORD *)(v21 + 40) = v25;
      *(_QWORD *)(v21 + 48) = v28;
      *(_QWORD *)(v21 + 56) = v30;
      *(_QWORD *)(v21 + 64) = v31;
      *(_QWORD *)(v21 + 72) = v33;
      *(_QWORD *)(v21 + 80) = v34;

      v12 = v266;
      v273[0] = v266;
      v36 = *((_QWORD *)v266 + 2);
      v35 = *((_QWORD *)v266 + 3);
      if (v36 >= v35 >> 1)
      {
        sub_1002592A4((char *)(v35 > 1), v36 + 1, 1);
        v12 = (char *)v273[0];
      }
      ++v11;
      *((_QWORD *)v12 + 2) = v36 + 1;
      v37 = &v12[40 * v36];
      *((_QWORD *)v37 + 4) = v17;
      *((_QWORD *)v37 + 5) = v19;
      *((_QWORD *)v37 + 6) = v21;
      *((_QWORD *)v37 + 7) = 0;
      v37[64] = 1;
      v8 = v272;
    }
    while (v271 != v11);
    goto LABEL_121;
  }
  __break(1u);
LABEL_139:
  __break(1u);
  return result;
}

unint64_t sub_10025E1C4(void *a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  _UNKNOWN **v18;
  id v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  unint64_t v30;

  v6 = objc_msgSend(a1, "words");
  if (v6)
  {
    v7 = v6;
    v8 = sub_1000087DC(0, &qword_100499ED0, MSVLyricsWord_ptr);
    static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

    v9 = sub_100005574(&qword_100499ED8);
    v10 = sub_10002FFB8(&qword_100499EE0, &qword_100499ED8, (uint64_t)&protocol conformance descriptor for [A]);
    v11 = (_QWORD *)Sequence.exclude(_:)((uint64_t)sub_100257934, 0, v9, v10);
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if (qword_100498A08 != -1)
    swift_once(&qword_100498A08, sub_100254750);
  v12 = swift_bridgeObjectRetain();
  v13 = sub_100256220(v12);
  swift_bridgeObjectRelease();
  if (a3)
    v14 = sub_1000AA2B8(a2, a3, v13);
  else
    v14 = 0;
  swift_bridgeObjectRelease();
  if (qword_100498A00 != -1)
    swift_once(&qword_100498A00, sub_1002546E4);
  v15 = swift_bridgeObjectRetain();
  v16 = sub_100256220(v15);
  swift_bridgeObjectRelease();
  if (a3)
    v17 = sub_1000AA2B8(a2, a3, v16);
  else
    v17 = 0;
  swift_bridgeObjectRelease();
  v18 = sub_10025CAA4(a2, a3);
  v19 = objc_msgSend(a1, "primaryVocalText");
  v20 = objc_msgSend(v19, "string");

  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  v24 = objc_msgSend(a1, "lyricsText");
  v25 = objc_msgSend(v24, "string");

  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v28 = v27;

  v29 = a1;
  objc_msgSend(v29, "endTime");
  objc_msgSend(v29, "startTime");

  LOBYTE(v29) = sub_1002836D4(2, (uint64_t)v18);
  swift_bridgeObjectRelease();
  v30 = sub_10025CDF4((unint64_t)v11, v21, v23, v26, v28, v29 & 1, v14 & 1, v17 & 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v30;
}

unint64_t sub_10025E4D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  NSString v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v0 = type metadata accessor for Locale.Language(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (void *)objc_opt_self(NLLanguageRecognizer);
  v5 = String._bridgeToObjectiveC()();
  v6 = (unint64_t)objc_msgSend(v4, "dominantLanguageForString:", v5);

  if (v6)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v9 = Locale.Language.init(identifier:)(v7, v8);
    v10 = Locale.Language.characterDirection.getter(v9);

    v6 = v10 == 2;
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  return v6;
}

unint64_t sub_10025E5BC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  id v38;
  id v39;
  char v40;
  id v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  id v50;
  id v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  _QWORD *v56;
  char v57;
  _QWORD *v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;

  v9 = objc_msgSend(a1, "subwords");
  if (!v9)
    goto LABEL_13;
  v10 = v9;
  v11 = sub_1000087DC(0, &qword_100499ED0, MSVLyricsWord_ptr);
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

  if ((unint64_t)v12 >> 62)
  {
    if (v12 < 0)
      v17 = v12;
    else
      v17 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter(v17);
    result = swift_bridgeObjectRelease();
    if (v18)
      goto LABEL_4;
    goto LABEL_12;
  }
  if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_12:
    swift_bridgeObjectRelease();
LABEL_13:
    objc_msgSend(a1, "startTime");
    v4 = v19;
    goto LABEL_14;
  }
LABEL_4:
  if ((v12 & 0xC000000000000001) != 0)
  {
    v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v12);
  }
  else
  {
    if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_45;
    }
    v14 = *(id *)(v12 + 32);
  }
  v15 = v14;
  swift_bridgeObjectRelease();
  objc_msgSend(v15, "startTime");
  v4 = v16;

LABEL_14:
  v20 = objc_msgSend(a1, "subwords");
  if (!v20)
  {
LABEL_28:
    objc_msgSend(a1, "endTime");
    v27 = v29;
    goto LABEL_29;
  }
  v21 = v20;
  v22 = sub_1000087DC(0, &qword_100499ED0, MSVLyricsWord_ptr);
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v22);

  if (!((unint64_t)v12 >> 62))
  {
    v23 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v23)
      goto LABEL_17;
    goto LABEL_27;
  }
  if (v12 < 0)
    v28 = v12;
  else
    v28 = v12 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v23 = _CocoaArrayWrapper.endIndex.getter(v28);
  swift_bridgeObjectRelease();
  if (!v23)
  {
LABEL_27:
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
LABEL_17:
  result = v23 - 1;
  if (__OFSUB__(v23, 1))
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if ((v12 & 0xC000000000000001) != 0)
  {
LABEL_46:
    v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(result, v12);
    goto LABEL_22;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_48;
  }
  if (result >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_48:
    __break(1u);
    return result;
  }
  v24 = *(id *)(v12 + 8 * result + 32);
LABEL_22:
  v25 = v24;
  swift_bridgeObjectRelease();
  objc_msgSend(v25, "endTime");
  v27 = v26;

LABEL_29:
  if (qword_100498A08 != -1)
    swift_once(&qword_100498A08, sub_100254750);
  v30 = swift_bridgeObjectRetain();
  v31 = sub_100256220(v30);
  swift_bridgeObjectRelease();
  if (a3)
    v60 = sub_1000AA2B8(a2, a3, v31);
  else
    v60 = 0;
  swift_bridgeObjectRelease();
  v32 = objc_msgSend(a1, "lyricsText");
  v33 = objc_msgSend(v32, "string");

  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v63 = v35;
  v64 = v34;

  v36 = objc_msgSend(a1, "characterRange");
  v61 = v37;
  v62 = v36;
  v38 = objc_msgSend(a1, "lyricsText");
  v39 = objc_msgSend(v38, "string");

  static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
  v40 = sub_10025E4D0();
  swift_bridgeObjectRelease();
  v41 = objc_msgSend(a1, "subwords");
  if (v41)
  {
    v42 = v41;
    v59 = a2;
    v43 = sub_1000087DC(0, &qword_100499ED0, MSVLyricsWord_ptr);
    v44 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v42, v43);

    swift_bridgeObjectRetain();
    v45 = objc_msgSend(a1, "lyricsText");
    v46 = objc_msgSend(v45, "string");

    v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
    v49 = v48;

    v50 = objc_msgSend(a1, "lyricsText");
    v51 = objc_msgSend(v50, "string");

    v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
    v54 = v53;

    if (qword_100498A00 != -1)
      swift_once(&qword_100498A00, sub_1002546E4);
    v55 = swift_bridgeObjectRetain();
    v56 = sub_100256220(v55);
    swift_bridgeObjectRelease();
    if (a3)
      v57 = sub_1000AA2B8(v59, a3, v56);
    else
      v57 = 0;
    swift_bridgeObjectRelease();
    v58 = (_QWORD *)sub_10025CDF4(v44, v47, v49, v52, v54, 0, v60 & 1, v57 & 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v44, 2);
    swift_bridgeObjectRelease();
  }
  else
  {
    v58 = _swiftEmptyArrayStorage;
  }
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v4;
  *(_QWORD *)(a4 + 8) = v27;
  *(_QWORD *)(a4 + 16) = v64;
  *(_QWORD *)(a4 + 24) = v63;
  *(_QWORD *)(a4 + 32) = v62;
  *(_QWORD *)(a4 + 40) = v61;
  *(_BYTE *)(a4 + 48) = v40 & 1;
  *(_QWORD *)(a4 + 56) = v58;
  return result;
}

_QWORD *sub_10025EB34(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t v65;

  sub_100005574(&qword_100499F20);
  result = (_QWORD *)static _DictionaryStorage.copy(original:)(a1);
  v8 = 0;
  v54 = a1;
  v11 = *(_QWORD *)(a1 + 64);
  v10 = a1 + 64;
  v9 = v11;
  v12 = 1 << *(_BYTE *)(v10 - 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v9;
  v47 = v10;
  v48 = (unint64_t)(v12 + 63) >> 6;
  v52 = result;
  v53 = result + 8;
  v50 = a3;
  v51 = a4;
  if (!v14)
    goto LABEL_5;
LABEL_4:
  v56 = (v14 - 1) & v14;
  for (i = __clz(__rbit64(v14)) | (v8 << 6); ; i = __clz(__rbit64(v17)) + (v8 << 6))
  {
    v19 = *(_QWORD *)(v54 + 56);
    v20 = (uint64_t *)(*(_QWORD *)(v54 + 48) + 16 * i);
    v21 = v20[1];
    v65 = *v20;
    v22 = *(void **)(v19 + 8 * i);
    v58 = v21;
    swift_bridgeObjectRetain();
    v23 = v22;
    v24 = objc_msgSend(a2, "type");
    v25 = objc_msgSend(v23, "lyricsText");
    v26 = objc_msgSend(v25, "string");

    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v29 = v28;

    v57 = v8;
    if (v24 == (id)2)
    {
      v49 = v27;
      v30 = (_QWORD *)sub_10025E1C4(v23, a3, a4);
      v31 = objc_msgSend(v23, "backgroundVocals");
      if (v31)
      {
        v32 = v31;
        swift_bridgeObjectRetain();
        sub_10025E5BC(v32, a3, a4, (uint64_t)&v59);
        v33 = v60;
        v34 = v61;
        v45 = v62;
        v46 = v59;
        v35 = v63;
        v36 = v64;

        v38 = v45;
        v37 = v46;
      }
      else
      {

        v33 = 0;
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v37 = 0uLL;
        v38 = 0uLL;
      }
      result = v52;
      v39 = v65;
      v27 = v49;
    }
    else
    {

      v33 = 0;
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v37 = 0uLL;
      v38 = 0uLL;
      v30 = _swiftEmptyArrayStorage;
      result = v52;
      v39 = v65;
    }
    *(_QWORD *)((char *)v53 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v40 = (_QWORD *)(result[6] + 16 * i);
    *v40 = v39;
    v40[1] = v58;
    v41 = result[7] + 88 * i;
    *(_QWORD *)v41 = v27;
    *(_QWORD *)(v41 + 8) = v29;
    *(_QWORD *)(v41 + 16) = v30;
    *(_OWORD *)(v41 + 24) = v37;
    *(_QWORD *)(v41 + 40) = v33;
    *(_QWORD *)(v41 + 48) = v34;
    *(_OWORD *)(v41 + 56) = v38;
    *(_QWORD *)(v41 + 72) = v35;
    *(_QWORD *)(v41 + 80) = v36;
    v42 = result[2];
    v43 = __OFADD__(v42, 1);
    v44 = v42 + 1;
    if (v43)
    {
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    result[2] = v44;
    a3 = v50;
    a4 = v51;
    v14 = v56;
    v8 = v57;
    if (v56)
      goto LABEL_4;
LABEL_5:
    v16 = v8 + 1;
    if (__OFADD__(v8, 1))
      goto LABEL_30;
    if (v16 >= v48)
      return result;
    v17 = *(_QWORD *)(v47 + 8 * v16);
    ++v8;
    if (!v17)
    {
      v8 = v16 + 1;
      if (v16 + 1 >= v48)
        return result;
      v17 = *(_QWORD *)(v47 + 8 * v8);
      if (!v17)
      {
        v8 = v16 + 2;
        if (v16 + 2 >= v48)
          return result;
        v17 = *(_QWORD *)(v47 + 8 * v8);
        if (!v17)
          break;
      }
    }
LABEL_18:
    v56 = (v17 - 1) & v17;
  }
  v18 = v16 + 3;
  if (v18 >= v48)
    return result;
  v17 = *(_QWORD *)(v47 + 8 * v18);
  if (v17)
  {
    v8 = v18;
    goto LABEL_18;
  }
  while (1)
  {
    v8 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v8 >= v48)
      return result;
    v17 = *(_QWORD *)(v47 + 8 * v8);
    ++v18;
    if (v17)
      goto LABEL_18;
  }
LABEL_31:
  __break(1u);
  return result;
}

void sub_10025EEAC(uint64_t a1, uint64_t a2, uint64_t a3, BOOL *a4, void *a5, char a6, uint64_t a7, uint64_t a8)
{
  id v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id *v21;
  BOOL *v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  id *v48;
  id v49;
  BOOL *v50;
  id v51;
  void *v52;
  uint64_t v53;
  id v54;
  char **v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSString v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  unint64_t v84;
  id v85;
  id v86;
  id v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  id v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  _QWORD *v129;
  id v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  id *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  BOOL *v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  id v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  id v154;
  int v155;
  id v156;
  uint64_t v157;
  uint64_t v158;
  _BOOL4 v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  void *v166;
  _QWORD v167[3];
  id v168[2];
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char v175[24];
  char v176[24];
  char v177[24];
  _QWORD v178[6];
  unsigned __int8 v179;
  uint64_t v180;

  v151 = a8;
  v163 = a7;
  LOBYTE(v8) = a6;
  v154 = a5;
  v13 = type metadata accessor for Locale.Language(0);
  v143 = *(_QWORD *)(v13 - 8);
  v144 = v13;
  __chkstk_darwin();
  v142 = (char *)&v138 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178[0] = a1;
  KeyPath = swift_getKeyPath(&unk_100398428);
  v16 = sub_100005574(&qword_100499EC0);
  v17 = sub_10002FFB8(&qword_100499EC8, &qword_100499EC0, (uint64_t)&protocol conformance descriptor for [A]);
  v18 = Sequence.sorted<A>(by:comparator:)(KeyPath, (uint64_t)sub_1002562F8, 0, v16, v17, (uint64_t)&protocol witness table for Double);
  swift_release(KeyPath);
  v152 = v18;
  if ((unint64_t)v18 >> 62)
    goto LABEL_100;
  v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  v20 = v154;
  if (v19)
  {
    if (v19 >= 1)
    {
      v147 = v8 & 1;
      v141 = a2 + 16;
      v21 = (id *)(a3 + 16);
      v22 = a4 + 16;
      v148 = v19;
      v150 = v18 & 0xC000000000000001;
      v149 = (id)objc_opt_self(NLLanguageRecognizer);
      swift_beginAccess(v21, v177, 0, 0);
      swift_beginAccess(v21, v176, 0, 0);
      swift_beginAccess(v22, v175, 1, 0);
      v139 = v21;
      swift_beginAccess(v21, &v174, 1, 0);
      swift_beginAccess(v22, &v173, 0, 0);
      swift_beginAccess(v22, &v172, 0, 0);
      v145 = v22;
      swift_beginAccess(v22, &v171, 0, 0);
      v23 = 0;
      v153 = 0;
      v165 = (char *)_swiftEmptyArrayStorage;
      while (1)
      {
        v162 = v23;
        if (v150)
          v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23, v18);
        else
          v24 = *(id *)(v18 + 8 * v23 + 32);
        v25 = v24;
        v26 = objc_msgSend(v24, "agent");
        v166 = v25;
        if (!v26)
          goto LABEL_19;
        v27 = v26;
        swift_beginAccess(v141, v167, 33, 0);
        v28 = v27;
        sub_1002FAD28((Swift::Int *)v168, v28);
        swift_endAccess(v167);

        v29 = objc_msgSend(v28, "type");
        if (!v29)
        {

          goto LABEL_19;
        }
        v30 = v29;
        v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
        v33 = v32;

        v34 = v31 == 0x6E6F73726570 && v33 == 0xE600000000000000;
        if (v34
          || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F73726570, 0xE600000000000000, v31, v33, 0) & 1) != 0)
        {
          v35 = objc_msgSend(v28, "identifier");
          if (v35)
          {
            v36 = v35;
            v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
            v39 = v38;

          }
          else
          {
            v37 = 0;
            v39 = 0;
          }
          if (*v139 && (v41 = objc_msgSend(*v139, "identifier")) != 0)
          {
            v42 = v41;
            v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
            v45 = v44;

            if (v39)
              goto LABEL_27;
          }
          else
          {
            v43 = 0;
            v45 = 0;
            if (v39)
            {
LABEL_27:
              if (!v45)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v20 = v154;
                goto LABEL_42;
              }
              if (v37 == v43 && v39 == v45)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v20 = v154;
              }
              else
              {
                v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v39, v43, v45, 0);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v20 = v154;
                if ((v46 & 1) == 0)
                  goto LABEL_41;
              }
              goto LABEL_33;
            }
          }
          v20 = v154;
          if (v45)
          {
            swift_bridgeObjectRelease();
LABEL_41:
            swift_bridgeObjectRelease();
LABEL_42:
            v48 = v139;
            v49 = *v139;
            v50 = v145;
            v25 = v166;
            if (*v139)
            {
              *v145 = !*v145;
              v49 = *v48;
            }
            *v48 = v27;

            v40 = *v50;
            goto LABEL_45;
          }
        }
LABEL_33:
        if (v31 == 0x70756F7267 && v33 == 0xE500000000000000)
        {

          swift_bridgeObjectRelease();
          v155 = 0;
          v25 = v166;
          goto LABEL_46;
        }
        v47 = _stringCompareWithSmolCheck(_:_:expecting:)(0x70756F7267, 0xE500000000000000, v31, v33, 0);
        v25 = v166;
        if ((v47 & 1) != 0)
        {

          swift_bridgeObjectRelease();
          v155 = 0;
          goto LABEL_46;
        }
        if (v31 == 0x726568746FLL && v33 == 0xE500000000000000)
        {

          swift_bridgeObjectRelease();
          v40 = 1;
          goto LABEL_45;
        }
        v119 = _stringCompareWithSmolCheck(_:_:expecting:)(0x726568746FLL, 0xE500000000000000, v31, v33, 0);

        swift_bridgeObjectRelease();
        if ((v119 & 1) != 0)
        {
          v40 = 1;
          goto LABEL_45;
        }
LABEL_19:
        v40 = *v145;
LABEL_45:
        v155 = v40;
LABEL_46:
        v51 = objc_msgSend(v25, "translationKey");
        if (v51)
        {
          v52 = v51;
          v160 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
          v161 = v53;

        }
        else
        {
          v160 = 0;
          v161 = 0;
        }
        v54 = objc_msgSend(v20, "type");
        v55 = &selRef_primaryVocalText;
        if (v54 != (id)2)
          v55 = &selRef_lyricsText;
        v56 = objc_msgSend(v25, *v55);
        v57 = objc_msgSend(v56, "string");

        v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
        v60 = v59;

        v157 = v58;
        v158 = v60;
        v61 = String._bridgeToObjectiveC()();
        a4 = (BOOL *)objc_msgSend(v149, "dominantLanguageForString:", v61);

        if (a4)
        {
          v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
          v63 = v142;
          v65 = Locale.Language.init(identifier:)(v62, v64);
          v66 = Locale.Language.characterDirection.getter(v65);

          v159 = v66 == 2;
          (*(void (**)(char *, uint64_t))(v143 + 8))(v63, v144);
        }
        else
        {
          v159 = 0;
        }
        v67 = objc_msgSend(v25, "words");
        if (v67)
        {
          v68 = v67;
          v69 = sub_1000087DC(0, &qword_100499ED0, MSVLyricsWord_ptr);
          v70 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v68, v69);

          v167[0] = v70;
          v71 = sub_100005574(&qword_100499ED8);
          v72 = sub_10002FFB8(&qword_100499EE0, &qword_100499ED8, (uint64_t)&protocol conformance descriptor for [A]);
          v73 = v71;
          a4 = (BOOL *)v153;
          a3 = Sequence.exclude(_:)((uint64_t)sub_100257934, 0, v73, v72);
          v153 = (char *)a4;
          swift_bridgeObjectRelease();
        }
        else
        {
          a3 = (uint64_t)_swiftEmptyArrayStorage;
        }
        v74 = swift_allocObject(&unk_10045CDC8, 24, 7);
        v164 = v74;
        *(_QWORD *)(v74 + 16) = _swiftEmptyArrayStorage;
        v75 = (unint64_t *)(v74 + 16);
        v76 = swift_allocObject(&unk_10045CDF0, 80, 7);
        *(_OWORD *)(v76 + 16) = 0u;
        v77 = v76 + 16;
        *(_OWORD *)(v76 + 32) = 0u;
        *(_OWORD *)(v76 + 48) = 0u;
        *(_OWORD *)(v76 + 64) = 0u;
        if (objc_msgSend(v20, "type") == (id)2)
        {
          v78 = objc_msgSend(v20, "language");
          if (v78)
          {
            v79 = v78;
            v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v78);
            v82 = v81;

          }
          else
          {
            v80 = 0;
            v82 = 0;
          }
          v83 = v166;
          v84 = sub_10025E1C4(v166, v80, v82);
          swift_bridgeObjectRelease();
          swift_beginAccess(v75, &v170, 1, 0);
          *v75 = v84;
          swift_bridgeObjectRelease();
          v85 = objc_msgSend(v83, "backgroundVocals");
          if (v85)
          {
            v140 = v76 + 16;
            v86 = v85;
            v87 = objc_msgSend(v154, "language");
            if (v87)
            {
              v88 = v87;
              v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
              v91 = v90;

            }
            else
            {

              v89 = 0;
              v91 = 0;
            }
            sub_10025E5BC(v86, v89, v91, (uint64_t)v178);
            v92 = v178[0];
            v93 = v178[1];
            v94 = v178[2];
            a4 = (BOOL *)v178[3];
            v95 = v178[4];
            v156 = (id)v178[5];
            v146 = v179;
            v96 = v180;

            v77 = v140;
          }
          else
          {
            v92 = 0;
            v93 = 0;
            v94 = 0;
            a4 = 0;
            v95 = 0;
            v156 = 0;
            v146 = 0;
            v96 = 0;
          }
          swift_beginAccess(v77, &v169, 1, 0);
          v97 = *(_QWORD *)(v76 + 16);
          v98 = *(_QWORD *)(v76 + 24);
          v99 = *(_QWORD *)(v76 + 32);
          v100 = *(_QWORD *)(v76 + 40);
          v101 = *(_QWORD *)(v76 + 48);
          v102 = *(_QWORD *)(v76 + 56);
          v103 = *(_QWORD *)(v76 + 64);
          v104 = *(_QWORD *)(v76 + 72);
          *(_QWORD *)(v76 + 16) = v92;
          *(_QWORD *)(v76 + 24) = v93;
          *(_QWORD *)(v76 + 32) = v94;
          *(_QWORD *)(v76 + 40) = a4;
          v105 = v156;
          *(_QWORD *)(v76 + 48) = v95;
          *(_QWORD *)(v76 + 56) = v105;
          *(_QWORD *)(v76 + 64) = v146;
          *(_QWORD *)(v76 + 72) = v96;
          sub_10025C9F4(v97, v98, v99, v100, v101, v102, v103, v104);
          v25 = v166;
        }
        v8 = objc_msgSend(v25, "lineIndex");
        objc_msgSend(v25, "startTime");
        v107 = v106;
        objc_msgSend(v25, "endTime");
        v109 = v108;
        if ((unint64_t)a3 >> 62)
        {
          if (a3 < 0)
            a4 = (BOOL *)a3;
          else
            a4 = (BOOL *)(a3 & 0xFFFFFFFFFFFFFF8);
          swift_bridgeObjectRetain();
          a2 = _CocoaArrayWrapper.endIndex.getter(a4);
          v156 = v8;
          if (!a2)
          {
LABEL_86:
            v116 = v163;
            swift_bridgeObjectRelease();
            objc_msgSend(v25, "startTime");
            v112 = v120;
            swift_bridgeObjectRelease();
            objc_msgSend(v25, "endTime");
            v118 = v121;
            goto LABEL_87;
          }
        }
        else
        {
          a2 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          v156 = v8;
          if (!a2)
            goto LABEL_86;
        }
        v18 = a3 & 0xC000000000000001;
        if ((a3 & 0xC000000000000001) != 0)
        {
          v110 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a3);
        }
        else
        {
          if (!*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_97:
            __break(1u);
LABEL_98:
            __break(1u);
LABEL_99:
            __break(1u);
LABEL_100:
            if (v18 < 0)
              v136 = v152;
            else
              v136 = v18 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain();
            v137 = v136;
            v18 = v152;
            v19 = _CocoaArrayWrapper.endIndex.getter(v137);
            swift_bridgeObjectRelease();
            goto LABEL_3;
          }
          v110 = (char *)*(id *)(a3 + 32);
        }
        a4 = (BOOL *)v110;
        swift_bridgeObjectRelease();
        objc_msgSend(a4, "startTime");
        v112 = v111;

        v113 = a2 - 1;
        if (__OFSUB__(a2, 1))
          goto LABEL_97;
        if (v18)
        {
          v114 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v113, a3);
        }
        else
        {
          if ((v113 & 0x8000000000000000) != 0)
            goto LABEL_98;
          if (v113 >= *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_99;
          v114 = *(id *)(a3 + 8 * v113 + 32);
        }
        v115 = v114;
        v116 = v163;
        swift_bridgeObjectRelease();
        objc_msgSend(v115, "endTime");
        v118 = v117;

LABEL_87:
        v122 = (_QWORD *)swift_allocObject(&unk_10045CE18, 56, 7);
        v123 = v151;
        v125 = v160;
        v124 = v161;
        v122[2] = v151;
        v122[3] = v125;
        v126 = v157;
        v122[4] = v124;
        v122[5] = v126;
        v122[6] = v158;
        v127 = (_QWORD *)swift_allocObject(&unk_10045CE40, 48, 7);
        v127[2] = v123;
        v127[3] = v125;
        v128 = v164;
        v127[4] = v124;
        v127[5] = v128;
        v129 = (_QWORD *)swift_allocObject(&unk_10045CE68, 48, 7);
        v129[2] = v123;
        v129[3] = v125;
        v129[4] = v124;
        v129[5] = v76;
        swift_bridgeObjectRetain_n(v124, 2);
        swift_retain_n(v123, 3);
        swift_bridgeObjectRetain_n(v116, 2);
        swift_retain(v128);
        swift_retain(v76);
        swift_retain(v122);
        swift_retain(v127);
        swift_retain(v129);
        if ((swift_isUniquelyReferenced_nonNull_native(v165) & 1) == 0)
          v165 = sub_1002584EC(0, *((_QWORD *)v165 + 2) + 1, 1, v165);
        v20 = v154;
        v130 = v156;
        v132 = *((_QWORD *)v165 + 2);
        v131 = *((_QWORD *)v165 + 3);
        if (v132 >= v131 >> 1)
          v165 = sub_1002584EC((char *)(v131 > 1), v132 + 1, 1, v165);
        v133 = v162 + 1;
        v134 = v165;
        *((_QWORD *)v165 + 2) = v132 + 1;
        v135 = &v134[104 * v132];
        *((_QWORD *)v135 + 4) = v107;
        *((_QWORD *)v135 + 5) = v109;
        *((_QWORD *)v135 + 6) = v130;
        v23 = v133;
        v135[56] = v155;
        v135[57] = v159;
        v135[58] = v147;
        *((_QWORD *)v135 + 8) = v163;
        *((_QWORD *)v135 + 9) = v112;
        *((_QWORD *)v135 + 10) = v118;
        *((_QWORD *)v135 + 11) = sub_100261640;
        *((_QWORD *)v135 + 12) = v122;
        *((_QWORD *)v135 + 13) = sub_100261654;
        *((_QWORD *)v135 + 14) = v127;
        *((_QWORD *)v135 + 15) = sub_100261698;
        *((_QWORD *)v135 + 16) = v129;

        swift_bridgeObjectRelease();
        swift_release(v122);
        swift_release(v127);
        swift_release(v129);
        swift_release(v76);
        swift_release(v164);
        v18 = v152;
        if (v148 == v23)
          goto LABEL_95;
      }
    }
    __break(1u);
  }
  else
  {
    v165 = (char *)_swiftEmptyArrayStorage;
LABEL_95:
    swift_bridgeObjectRelease();
  }
}

Swift::Int sub_10025FBBC(uint64_t a1, __n128 a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int result;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  id v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  unint64_t v31;
  char v32;
  char v33;
  char v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  id v40[2];
  _QWORD *v41;

  if ((a1 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a1 + 16) > 1uLL)
    {
      v29 = swift_bridgeObjectRetain();
      v4 = sub_10025C118(v29);
      if ((v4 & 0xC000000000000001) != 0)
        goto LABEL_37;
      goto LABEL_33;
    }
    return 0;
  }
  if (a1 < 0)
    v3 = a1;
  else
    v3 = a1 & 0xFFFFFFFFFFFFFF8;
  if (__CocoaSet.count.getter(v3, a2) <= 1)
    return 0;
  v4 = (uint64_t)&_swiftEmptySetSingleton;
  v41 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRetain();
  v5 = __CocoaSet.makeIterator()(v3);
  v6 = __CocoaSet.Iterator.next()(v5);
  if (!v6)
    goto LABEL_36;
  v7 = v6;
  v8 = sub_1000087DC(0, (unint64_t *)&qword_100499B48, MSVLyricsAgent_ptr);
  do
  {
    v39 = v7;
    swift_dynamicCast(v40, &v39, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
    v10 = objc_msgSend(v40[0], "type");
    if (!v10)
    {
LABEL_8:

      goto LABEL_9;
    }
    v11 = v10;
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v14 = v13;

    if (v12 == 0x6E6F73726570 && v14 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, 0x6E6F73726570, 0xE600000000000000, 0);
      swift_bridgeObjectRelease();
      if ((v16 & 1) == 0)
        goto LABEL_8;
    }
    v17 = v40[0];
    v18 = v41;
    v19 = v41[2];
    if (v41[3] <= v19)
    {
      sub_1002FB8AC(v19 + 1);
      v18 = v41;
    }
    result = NSObject._rawHashValue(seed:)(v18[5]);
    v20 = v18 + 7;
    v21 = -1 << *((_BYTE *)v18 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~v18[(v22 >> 6) + 7]) != 0)
    {
      v24 = __clz(__rbit64((-1 << v22) & ~v18[(v22 >> 6) + 7])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          return result;
        }
        v27 = v23 == v26;
        if (v23 == v26)
          v23 = 0;
        v25 |= v27;
        v28 = v20[v23];
      }
      while (v28 == -1);
      v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(_QWORD *)((char *)v20 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    *(_QWORD *)(v18[6] + 8 * v24) = v17;
    ++v18[2];
LABEL_9:
    v7 = __CocoaSet.Iterator.next()(result);
  }
  while (v7);
  v4 = (uint64_t)v41;
LABEL_36:
  v30 = swift_release(v5);
  if ((v4 & 0xC000000000000001) == 0)
  {
LABEL_33:
    v31 = *(_QWORD *)(v4 + 16);
    goto LABEL_38;
  }
LABEL_37:
  v31 = __CocoaSet.count.getter(v4, v30);
LABEL_38:
  swift_release(v4);
  sub_1002571A8(a1);
  v33 = v32;
  sub_100257528(a1);
  if (v31 == 2)
    v35 = 1;
  else
    v35 = 2;
  if (v31 == 1)
    v35 = 0;
  if (v31 >= 3)
    v36 = 2;
  else
    v36 = 0x10000u >> (8 * v31);
  if ((v33 & 1) != 0)
    v35 = v36;
  if (v31 == 2)
    v37 = 1;
  else
    v37 = 2;
  if (v31 >= 3)
    v38 = 2;
  else
    v38 = 0x10200u >> (8 * v31);
  if ((v33 & 1) == 0)
    v37 = v38;
  if ((v34 & 1) != 0)
    return v37;
  else
    return v35;
}

uint64_t sub_10025FF1C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[6]);
  swift_release(v0[10]);
  swift_release(v0[12]);
  swift_release(v0[14]);
  return swift_deallocObject(v0, 120, 7);
}

uint64_t sub_10025FF58()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10025FF7C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 48, 7);
}

unint64_t sub_10025FF90()
{
  unint64_t result;

  result = qword_100499BF0;
  if (!qword_100499BF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Lyrics.Word.Emphasis, &type metadata for Lyrics.Word.Emphasis);
    atomic_store(result, (unint64_t *)&qword_100499BF0);
  }
  return result;
}

unint64_t sub_10025FFD8()
{
  unint64_t result;

  result = qword_100499BF8;
  if (!qword_100499BF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Lyrics.Word, &type metadata for Lyrics.Word);
    atomic_store(result, (unint64_t *)&qword_100499BF8);
  }
  return result;
}

unint64_t sub_100260020()
{
  unint64_t result;

  result = qword_100499C00;
  if (!qword_100499C00)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Lyrics.Syllable, &type metadata for Lyrics.Syllable);
    atomic_store(result, (unint64_t *)&qword_100499C00);
  }
  return result;
}

unint64_t sub_100260068()
{
  unint64_t result;

  result = qword_100499C08;
  if (!qword_100499C08)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Lyrics.TextLine, &type metadata for Lyrics.TextLine);
    atomic_store(result, (unint64_t *)&qword_100499C08);
  }
  return result;
}

unint64_t sub_1002600B0()
{
  unint64_t result;

  result = qword_100499C10;
  if (!qword_100499C10)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Lyrics.LyricsType, &type metadata for Lyrics.LyricsType);
    atomic_store(result, (unint64_t *)&qword_100499C10);
  }
  return result;
}

unint64_t sub_1002600F8()
{
  unint64_t result;

  result = qword_100499C18;
  if (!qword_100499C18)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Lyrics.VocalistsType, &type metadata for Lyrics.VocalistsType);
    atomic_store(result, (unint64_t *)&qword_100499C18);
  }
  return result;
}

unint64_t sub_100260140()
{
  unint64_t result;

  result = qword_100499C20;
  if (!qword_100499C20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Lyrics.AgentAlignment, &type metadata for Lyrics.AgentAlignment);
    atomic_store(result, (unint64_t *)&qword_100499C20);
  }
  return result;
}

unint64_t sub_100260188()
{
  unint64_t result;

  result = qword_100499C28;
  if (!qword_100499C28)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Lyrics.Direction, &type metadata for Lyrics.Direction);
    atomic_store(result, (unint64_t *)&qword_100499C28);
  }
  return result;
}

unint64_t sub_1002601D0()
{
  unint64_t result;

  result = qword_100499C30;
  if (!qword_100499C30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Lyrics.Capability, &type metadata for Lyrics.Capability);
    atomic_store(result, (unint64_t *)&qword_100499C30);
  }
  return result;
}

uint64_t sub_100260214()
{
  return sub_10002FFB8(&qword_100499C38, &qword_100499C40, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_100260244()
{
  unint64_t result;

  result = qword_100499C48;
  if (!qword_100499C48)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Lyrics.AudioAttribute, &type metadata for Lyrics.AudioAttribute);
    atomic_store(result, (unint64_t *)&qword_100499C48);
  }
  return result;
}

uint64_t type metadata accessor for Lyrics()
{
  return objc_opt_self(_TtC11MusicCoreUI6Lyrics);
}

uint64_t destroy for Lyrics.Word(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

uint64_t initializeWithCopy for Lyrics.Word(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Lyrics.Word(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v6;
  return a1;
}

__n128 initializeWithTake for Lyrics.Word(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Lyrics.Word(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for Lyrics.Word(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Lyrics.Word(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.Word()
{
  return &type metadata for Lyrics.Word;
}

ValueMetadata *type metadata accessor for Lyrics.Word.Emphasis()
{
  return &type metadata for Lyrics.Word.Emphasis;
}

uint64_t initializeWithCopy for Lyrics.Syllable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Lyrics.Syllable(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  return a1;
}

__n128 initializeWithTake for Lyrics.Syllable(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for Lyrics.Syllable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for Lyrics.Syllable(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Lyrics.Syllable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.Syllable()
{
  return &type metadata for Lyrics.Syllable;
}

double destroy for Lyrics.TextLine(_QWORD *a1)
{
  double result;

  swift_bridgeObjectRelease(a1[4]);
  swift_release(a1[8]);
  swift_release(a1[10]);
  *(_QWORD *)&result = swift_release(a1[12]).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for Lyrics.TextLine(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v5;
  __int128 v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v3 = *(_QWORD *)(a2 + 96);
  v5 = *(_OWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 96) = v3;
  swift_bridgeObjectRetain();
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v3);
  return a1;
}

uint64_t assignWithCopy for Lyrics.TextLine(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 64);
  v6 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  swift_retain(v5);
  swift_release(v6);
  v7 = *(_QWORD *)(a2 + 80);
  v8 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  swift_retain(v7);
  swift_release(v8);
  v10 = *(_QWORD *)(a2 + 88);
  v9 = *(_QWORD *)(a2 + 96);
  v11 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = v10;
  *(_QWORD *)(a1 + 96) = v9;
  swift_retain(v9);
  swift_release(v11);
  return a1;
}

__n128 initializeWithTake for Lyrics.TextLine(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for Lyrics.TextLine(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v4);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release(v5);
  v6 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release(v6);
  v7 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for Lyrics.TextLine(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Lyrics.TextLine(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.TextLine()
{
  return &type metadata for Lyrics.TextLine;
}

uint64_t destroy for Lyrics.TextLine.BackgroundVocals(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
}

uint64_t initializeWithCopy for Lyrics.TextLine.BackgroundVocals(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Lyrics.TextLine.BackgroundVocals(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v6);
  return a1;
}

__n128 initializeWithTake for Lyrics.TextLine.BackgroundVocals(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Lyrics.TextLine.BackgroundVocals(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for Lyrics.TextLine.BackgroundVocals(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Lyrics.TextLine.BackgroundVocals(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.TextLine.BackgroundVocals()
{
  return &type metadata for Lyrics.TextLine.BackgroundVocals;
}

uint64_t getEnumTagSinglePayload for Lyrics.InstrumentalLine(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Lyrics.InstrumentalLine(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.InstrumentalLine()
{
  return &type metadata for Lyrics.InstrumentalLine;
}

uint64_t destroy for Lyrics.SongwritersLine(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for Lyrics.SongwritersLine(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Lyrics.SongwritersLine(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v3);
  return a1;
}

__n128 initializeWithTake for Lyrics.SongwritersLine(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Lyrics.SongwritersLine(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for Lyrics.SongwritersLine(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Lyrics.SongwritersLine(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.SongwritersLine()
{
  return &type metadata for Lyrics.SongwritersLine;
}

ValueMetadata *type metadata accessor for Lyrics.LyricsType()
{
  return &type metadata for Lyrics.LyricsType;
}

ValueMetadata *type metadata accessor for Lyrics.VocalistsType()
{
  return &type metadata for Lyrics.VocalistsType;
}

ValueMetadata *type metadata accessor for Lyrics.AgentAlignment()
{
  return &type metadata for Lyrics.AgentAlignment;
}

uint64_t _s11MusicCoreUI6LyricsC14AgentAlignmentOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100260E54 + 4 * byte_100397C75[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100260E88 + 4 * asc_100397C70[v4]))();
}

uint64_t sub_100260E88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100260E90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100260E98);
  return result;
}

uint64_t sub_100260EA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100260EACLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100260EB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100260EB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.Direction()
{
  return &type metadata for Lyrics.Direction;
}

uint64_t _s11MusicCoreUI6LyricsC10CapabilityOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100260F20 + 4 * byte_100397C7F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100260F54 + 4 * byte_100397C7A[v4]))();
}

uint64_t sub_100260F54(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100260F5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100260F64);
  return result;
}

uint64_t sub_100260F70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100260F78);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100260F7C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100260F84(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.Capability()
{
  return &type metadata for Lyrics.Capability;
}

_QWORD *initializeBufferWithCopyOfBuffer for Lyrics.AudioAttribute(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.AudioAttribute()
{
  return &type metadata for Lyrics.AudioAttribute;
}

uint64_t destroy for Lyrics.LineTranslationMetadata(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  result = a1[6];
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(a1[10]);
  }
  return result;
}

uint64_t initializeWithCopy for Lyrics.LineTranslationMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = v5;
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v6;
    v7 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v7;
  }
  return a1;
}

uint64_t assignWithCopy for Lyrics.LineTranslationMetadata(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 24);
  v5 = (__int128 *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48))
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_100261204(a1 + 24);
      v7 = *(_OWORD *)(a2 + 72);
      v9 = *v5;
      v8 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = v7;
      *v4 = v9;
      *(_OWORD *)(a1 + 40) = v8;
    }
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *v5;
    v11 = *(_OWORD *)(a2 + 40);
    v12 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v12;
    *v4 = v10;
    *(_OWORD *)(a1 + 40) = v11;
  }
  return a1;
}

uint64_t sub_100261204(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
  return a1;
}

__n128 initializeWithTake for Lyrics.LineTranslationMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for Lyrics.LineTranslationMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 48);
  if (!v5)
  {
    sub_100261204(a1 + 24);
LABEL_5:
    v6 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v6;
    v7 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v7;
    return a1;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Lyrics.LineTranslationMetadata(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Lyrics.LineTranslationMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.LineTranslationMetadata()
{
  return &type metadata for Lyrics.LineTranslationMetadata;
}

void *sub_1002613B8(void *result, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  id v15;

  if (result)
  {
    v15 = result;
    sub_100194154(a2, a3, a4, a5, a6, a7, a8);
    return (void *)swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100261438(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result)
  {
    swift_retain(result);
    swift_retain(a2);
    swift_retain(a3);
    swift_retain(a4);
    return swift_retain(a5);
  }
  return result;
}

uint64_t sub_100261490(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PlaylistCurators.Curator(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002614D4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PlaylistCurators.Curator(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100261510()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100499EB8;
  if (!qword_100499EB8)
  {
    v1 = sub_1000087DC(255, (unint64_t *)&qword_100499B48, MSVLyricsAgent_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100499EB8);
  }
  return result;
}

const char *sub_100261568()
{
  return "startTime";
}

id sub_100261574@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v4;

  result = objc_msgSend(*a1, "startTime");
  *a2 = v4;
  return result;
}

id sub_1002615A4(double *a1, id *a2)
{
  return objc_msgSend(*a2, "setStartTime:", *a1);
}

uint64_t sub_1002615B8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002615DC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  }
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10026160C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100261640()
{
  uint64_t *v0;

  return sub_10025630C(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_100261654()
{
  uint64_t *v0;

  return sub_10025657C(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_100261664()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100261698@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1002567D0(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD **)(v1 + 40), a1);
}

BOOL sub_1002616A4(id *a1)
{
  uint64_t v1;

  return sub_100256E1C(a1, *(char **)(v1 + 16), *(void **)(v1 + 24), *(char **)(v1 + 32), *(void **)(v1 + 40));
}

BOOL sub_1002616C8(id *a1)
{
  uint64_t v1;

  return sub_100256D7C(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_1002616EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10026171C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_10025C9F4(a4, a5, a6, a7, a8, a9, a10, a11);
  }
  return result;
}

uint64_t static LyricsLoader.supportsLyrics(for:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  BOOL v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  NSString v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(char *, uint64_t, uint64_t);
  char *v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  BOOL v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t (*v85)(char *, uint64_t, uint64_t);
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  char *v92;
  char *v93;
  const char *v94;
  NSObject *v95;
  os_log_type_t v96;
  uint8_t *v97;
  uint32_t v98;
  uint64_t v99;
  void (*v100)(char *, uint64_t, uint64_t);
  uint64_t v101;
  os_log_type_t v102;
  char *v103;
  int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t (*v114)(char *, uint64_t, uint64_t);
  char *v115;
  uint64_t v116;
  NSObject *v117;
  os_log_type_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  BOOL v122;
  uint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  uint64_t (*v138)(char *, uint64_t, uint64_t);
  uint64_t v139;
  uint64_t v140;
  _QWORD v141[15];
  uint64_t v142;
  char v143;
  uint64_t v144;

  v2 = type metadata accessor for Song(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v130 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v136 = (char *)&v130 - v6;
  __chkstk_darwin();
  v135 = (char *)&v130 - v7;
  __chkstk_darwin();
  v137 = (char *)&v130 - v8;
  __chkstk_darwin();
  v132 = (char *)&v130 - v9;
  __chkstk_darwin();
  v131 = (char *)&v130 - v10;
  __chkstk_darwin();
  v12 = (char *)&v130 - v11;
  __chkstk_darwin();
  v14 = (char *)&v130 - v13;
  __chkstk_darwin();
  v133 = (char *)&v130 - v15;
  __chkstk_darwin();
  v17 = (char *)&v130 - v16;
  __chkstk_darwin();
  v134 = (char *)&v130 - v18;
  __chkstk_darwin();
  v20 = (char *)&v130 - v19;
  v21 = __chkstk_darwin();
  v23 = (char *)&v130 - v22;
  v24 = Song.hasLyrics.getter(v21);
  v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v139 = a1;
  v138 = v25;
  v26 = v25(v23, a1, v2);
  if ((v24 & 1) != 0)
  {
    v27 = *(void (**)(char *, uint64_t))(v3 + 8);
    v27(v23, v2);
  }
  else
  {
    v28 = Song.hasCustomLyrics.getter(v26);
    v27 = *(void (**)(char *, uint64_t))(v3 + 8);
    v27(v23, v2);
    if ((v28 & 1) == 0)
    {
      v48 = v139;
      if (qword_100498A10 != -1)
        swift_once(&qword_100498A10, sub_100257E30);
      v49 = type metadata accessor for Logger(0, v29);
      sub_1000086B4(v49, (uint64_t)static Logger.lyrics);
      v50 = v138(v5, v48, v2);
      v51 = Logger.logObject.getter(v50);
      v52 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v51, v52))
      {
        v53 = swift_slowAlloc(12, -1);
        v54 = swift_slowAlloc(32, -1);
        v142 = v54;
        *(_DWORD *)v53 = 136446210;
        v55 = (char *)sub_100262574();
        *(_QWORD *)(v53 + 4) = sub_100249A1C(v55, v56, &v142);
        swift_bridgeObjectRelease();
        v27(v5, v2);
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "Loader supportsLyrics=false [hasLyrics and hasCustomLyrics were false] %{public}s", (uint8_t *)v53, 0xCu);
        swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v54, -1, -1);
        swift_slowDealloc(v53, -1, -1);
      }
      else
      {
        v27(v5, v2);
      }

      v112 = 0;
      return v112 & 1;
    }
  }
  v30 = v139;
  v31 = *BagProvider.shared.unsafeMutableAddressor();
  swift_retain(v31);
  v32 = (void *)BagProvider.bag.getter();
  swift_release(v31);
  if (!v32)
  {
    if (qword_100498A10 != -1)
      swift_once(&qword_100498A10, sub_100257E30);
    v35 = type metadata accessor for Logger(0, v33);
    sub_1000086B4(v35, (uint64_t)static Logger.lyrics);
    v36 = v138;
    v138(v14, v30, v2);
    v37 = v36(v12, v30, v2);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = swift_slowAlloc(22, -1);
      v41 = swift_slowAlloc(64, -1);
      v142 = v41;
      *(_DWORD *)v40 = 136446466;
      v42 = Song.hasCustomLyrics.getter(v41);
      v43 = (v42 & 1) == 0;
      if ((v42 & 1) != 0)
        v44 = 1702195828;
      else
        v44 = 0x65736C6166;
      if (v43)
        v45 = (char *)0xE500000000000000;
      else
        v45 = (char *)0xE400000000000000;
      *(_QWORD *)(v40 + 4) = sub_100249A1C((char *)v44, v45, &v142);
      swift_bridgeObjectRelease();
      v27(v14, v2);
      *(_WORD *)(v40 + 12) = 2082;
      v46 = (char *)sub_100262574();
      *(_QWORD *)(v40 + 14) = sub_100249A1C(v46, v47, &v142);
      swift_bridgeObjectRelease();
      v27(v12, v2);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Loader supportsLyrics=%{public}s [bag is nil] %{public}s", (uint8_t *)v40, 0x16u);
      swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);
    }
    else
    {
      v27(v14, v2);
      v27(v12, v2);
    }

LABEL_34:
    v75 = v136;
    v76 = v135;
    v77 = Song.hasLyrics.getter(v34);
    v79 = v137;
    if ((v77 & 1) != 0
      && (static ApplicationCapabilities.shared.getter((uint64_t)v141),
          v80 = v141[3],
          swift_bridgeObjectRetain(),
          sub_1000BC0D0(v141),
          v81 = sub_1002626A0(2u, v80),
          swift_bridgeObjectRelease(),
          (v81 & 1) != 0))
    {
      static ApplicationCapabilities.shared.getter((uint64_t)&v142);
      sub_1000BC0D0(&v142);
      if ((v143 & 1) != 0)
      {
        v112 = 1;
        return v112 & 1;
      }
      if (qword_100498A10 != -1)
        swift_once(&qword_100498A10, sub_100257E30);
      v83 = type metadata accessor for Logger(0, v82);
      sub_1000086B4(v83, (uint64_t)static Logger.lyrics);
      v84 = v131;
      v85 = v138;
      v138(v131, v30, v2);
      v75 = v132;
      v86 = v85(v132, v30, v2);
      v87 = Logger.logObject.getter(v86);
      v88 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v87, v88))
      {
        v89 = swift_slowAlloc(18, -1);
        v90 = swift_slowAlloc(32, -1);
        v140 = v90;
        *(_DWORD *)v89 = 67240450;
        v91 = Song.hasCustomLyrics.getter(v90) & 1;
        v27(v84, v2);
        *(_DWORD *)(v89 + 4) = v91;
        *(_WORD *)(v89 + 8) = 2082;
        v92 = (char *)sub_100262574();
        *(_QWORD *)(v89 + 10) = sub_100249A1C(v92, v93, &v140);
        swift_bridgeObjectRelease();
        v27(v75, v2);
        v94 = "Loader supportsLyrics=%{BOOL,public}d [not supported by subscription] subscriptionCapabilities.contains(.c"
              "atalogLyricsViewing)=false %{public}s";
        v95 = v87;
        v96 = v88;
        v97 = (uint8_t *)v89;
        v98 = 18;
LABEL_45:
        _os_log_impl((void *)&_mh_execute_header, v95, v96, v94, v97, v98);
        swift_arrayDestroy(v90, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v90, -1, -1);
        swift_slowDealloc(v89, -1, -1);
LABEL_48:

        v112 = Song.hasCustomLyrics.getter(v111);
        return v112 & 1;
      }
      v110 = v84;
    }
    else
    {
      if (qword_100498A10 != -1)
        swift_once(&qword_100498A10, sub_100257E30);
      v99 = type metadata accessor for Logger(0, v78);
      sub_1000086B4(v99, (uint64_t)static Logger.lyrics);
      v100 = (void (*)(char *, uint64_t, uint64_t))v138;
      v138(v79, v30, v2);
      v100(v76, v30, v2);
      v101 = ((uint64_t (*)(char *, uint64_t, uint64_t))v100)(v75, v30, v2);
      v87 = Logger.logObject.getter(v101);
      v102 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v87, v102))
      {
        v103 = v79;
        v89 = swift_slowAlloc(30, -1);
        v90 = swift_slowAlloc(32, -1);
        v140 = v90;
        *(_DWORD *)v89 = 67240962;
        v104 = Song.hasCustomLyrics.getter(v90) & 1;
        v105 = ((uint64_t (*)(char *, uint64_t))v27)(v103, v2);
        *(_DWORD *)(v89 + 4) = v104;
        *(_WORD *)(v89 + 8) = 1026;
        v106 = Song.hasLyrics.getter(v105) & 1;
        v27(v76, v2);
        *(_DWORD *)(v89 + 10) = v106;
        *(_WORD *)(v89 + 14) = 1026;
        static ApplicationCapabilities.shared.getter((uint64_t)&v142);
        v107 = v144;
        swift_bridgeObjectRetain();
        sub_1000BC0D0(&v142);
        LOBYTE(v103) = sub_1002626A0(2u, v107);
        swift_bridgeObjectRelease();
        *(_DWORD *)(v89 + 16) = v103 & 1;
        *(_WORD *)(v89 + 20) = 2082;
        v108 = (char *)sub_100262574();
        *(_QWORD *)(v89 + 22) = sub_100249A1C(v108, v109, &v140);
        swift_bridgeObjectRelease();
        v27(v75, v2);
        v94 = "Loader supportsLyrics=%{BOOL,public}d [can't support store lyrics] song.hasLyrics=%{BOOL,public}d allowsSu"
              "bscriptionContent=%{BOOL,public}d %{public}s";
        v95 = v87;
        v96 = v102;
        v97 = (uint8_t *)v89;
        v98 = 30;
        goto LABEL_45;
      }
      v27(v76, v2);
      v110 = v79;
    }
    v27(v110, v2);
    v27(v75, v2);
    goto LABEL_48;
  }
  if ((objc_msgSend((id)objc_opt_self(MPStoreLyricsRequest), "supportsLyricsForURLBag:", v32) & 1) != 0)
  {

    goto LABEL_34;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(ICURLBagKeyMusicSubscription);
  v57 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v58 = objc_msgSend(v32, "dictionaryForBagKey:", v57);

  if (v58)
  {

    if (qword_100498A10 != -1)
      swift_once(&qword_100498A10, sub_100257E30);
    v61 = type metadata accessor for Logger(0, v60);
    sub_1000086B4(v61, (uint64_t)static Logger.lyrics);
    v62 = v138;
    v138(v20, v30, v2);
    v63 = v134;
    v64 = v62(v134, v30, v2);
    v65 = Logger.logObject.getter(v64);
    v66 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v65, v66))
    {
      v67 = swift_slowAlloc(22, -1);
      v68 = swift_slowAlloc(64, -1);
      v142 = v68;
      *(_DWORD *)v67 = 136446466;
      v69 = Song.hasCustomLyrics.getter(v68);
      v70 = (v69 & 1) == 0;
      if ((v69 & 1) != 0)
        v71 = 1702195828;
      else
        v71 = 0x65736C6166;
      if (v70)
        v72 = (char *)0xE500000000000000;
      else
        v72 = (char *)0xE400000000000000;
      *(_QWORD *)(v67 + 4) = sub_100249A1C((char *)v71, v72, &v142);
      swift_bridgeObjectRelease();
      v27(v20, v2);
      *(_WORD *)(v67 + 12) = 2082;
      v73 = (char *)sub_100262574();
      *(_QWORD *)(v67 + 14) = sub_100249A1C(v73, v74, &v142);
      swift_bridgeObjectRelease();
      v27(v63, v2);
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Loader supportsLyrics=%{public}s [no lyrics keys in bag] %{public}s", (uint8_t *)v67, 0x16u);
      swift_arrayDestroy(v68, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v68, -1, -1);
      swift_slowDealloc(v67, -1, -1);
    }
    else
    {
      v27(v20, v2);
      v27(v63, v2);
    }

  }
  else
  {
    if (qword_100498A10 != -1)
      swift_once(&qword_100498A10, sub_100257E30);
    v113 = type metadata accessor for Logger(0, v59);
    sub_1000086B4(v113, (uint64_t)static Logger.lyrics);
    v114 = v138;
    v138(v17, v30, v2);
    v115 = v133;
    v116 = v114(v133, v30, v2);
    v117 = Logger.logObject.getter(v116);
    v118 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v117, v118))
    {
      v119 = swift_slowAlloc(22, -1);
      v120 = swift_slowAlloc(64, -1);
      v142 = v120;
      *(_DWORD *)v119 = 136446466;
      v121 = Song.hasCustomLyrics.getter(v120);
      v122 = (v121 & 1) == 0;
      if ((v121 & 1) != 0)
        v123 = 1702195828;
      else
        v123 = 0x65736C6166;
      if (v122)
        v124 = (char *)0xE500000000000000;
      else
        v124 = (char *)0xE400000000000000;
      *(_QWORD *)(v119 + 4) = sub_100249A1C((char *)v123, v124, &v142);
      swift_bridgeObjectRelease();
      v27(v17, v2);
      *(_WORD *)(v119 + 12) = 2082;
      v125 = v133;
      v126 = (char *)sub_100262574();
      *(_QWORD *)(v119 + 14) = sub_100249A1C(v126, v127, &v142);
      swift_bridgeObjectRelease();
      v27(v125, v2);
      _os_log_impl((void *)&_mh_execute_header, v117, v118, "Loader supportsLyrics=%{public}s [no musicSubscription key in bag] %{public}s", (uint8_t *)v119, 0x16u);
      swift_arrayDestroy(v120, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v120, -1, -1);
      swift_slowDealloc(v119, -1, -1);
    }
    else
    {
      v27(v17, v2);
      v27(v115, v2);
    }

  }
  v112 = Song.hasCustomLyrics.getter(v128);

  return v112 & 1;
}

uint64_t sub_100262574()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  _QWORD v12[2];
  uint64_t v13;
  unint64_t v14;

  _StringGuts.grow(_:)(42);
  v0 = swift_bridgeObjectRelease();
  v13 = 0x7469742E676E6F73;
  v14 = 0xEB000000003D656CLL;
  v1._countAndFlagsBits = Song.title.getter(v0);
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x64692E676E6F7320;
  v2._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v2);
  v3 = Song.id.getter();
  v5._countAndFlagsBits = MusicItemID.description.getter(v3, v4);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6._object = (void *)0x80000001003B8720;
  v6._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v6);
  v12[0] = Song.catalogID.getter(v7);
  v12[1] = v8;
  v9 = sub_100005574((uint64_t *)&unk_10049A220);
  v10._countAndFlagsBits = String.init<A>(describing:)(v12, v9);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_1002626A0(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  if (*(_QWORD *)(a2 + 16))
  {
    Hasher.init(_seed:)(v8);
    v4 = ApplicationCapabilities.Service.rawValue.getter(a1);
    String.hash(into:)(v8, v4, v5);
    swift_bridgeObjectRelease();
    v6 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(a2 + 32));
    if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
      __asm { BR              X9 }
  }
  return 0;
}

uint64_t sub_100262A6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for Playlist.Collaborator(0);
  v19 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (v7 = *(_QWORD *)(a2 + 40),
        v8 = sub_100006924((unint64_t *)&unk_10049E650, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist.Collaborator, (uint64_t)&protocol conformance descriptor for Playlist.Collaborator), v9 = dispatch thunk of Hashable._rawHashValue(seed:)(v7, v4, v8), v10 = -1 << *(_BYTE *)(a2 + 32), v11 = v9 & ~v10, ((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0))
  {
    v12 = ~v10;
    v13 = *(_QWORD *)(v19 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
    do
    {
      v14(v6, *(_QWORD *)(a2 + 48) + v13 * v11, v4);
      v15 = sub_100006924(&qword_10049A0C0, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist.Collaborator, (uint64_t)&protocol conformance descriptor for Playlist.Collaborator);
      v16 = dispatch thunk of static Equatable.== infix(_:_:)(v6, a1, v4, v15);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
      if ((v16 & 1) != 0)
        break;
      v11 = (v11 + 1) & v12;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t LyricsLoader.loadLyrics(for:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2[62] = a1;
  v2[63] = v1;
  v3 = type metadata accessor for String.Encoding(0);
  v2[64] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[65] = v4;
  v2[66] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Song(0);
  v2[67] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[68] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[69] = swift_task_alloc(v7);
  v2[70] = swift_task_alloc(v7);
  v2[71] = swift_task_alloc(v7);
  v2[72] = swift_task_alloc(v7);
  v2[73] = swift_task_alloc(v7);
  v2[74] = swift_task_alloc(v7);
  v2[75] = swift_task_alloc(v7);
  v2[76] = swift_task_alloc(v7);
  v2[77] = swift_task_alloc(v7);
  v2[78] = swift_task_alloc(v7);
  v2[79] = swift_task_alloc(v7);
  return swift_task_switch(sub_100262CF4, 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch(sub_100264C24, 0, 0);
}

uint64_t sub_100262CF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  unint64_t v39;
  _BYTE *v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53[2];

  v2 = *(_QWORD *)(v1 + 632);
  v3 = *(_QWORD *)(v1 + 544);
  v4 = *(_QWORD *)(v1 + 536);
  v5 = *(_QWORD *)(v1 + 496);
  v6 = Song.hasLyrics.getter(a1);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v1 + 640) = v7;
  v8 = v7(v2, v5, v4);
  v9 = *(_QWORD *)(v1 + 632);
  v10 = *(_QWORD *)(v1 + 544);
  v11 = *(_QWORD *)(v1 + 536);
  if ((v6 & 1) != 0)
  {
    v12 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v12(*(_QWORD *)(v1 + 632), *(_QWORD *)(v1 + 536));
LABEL_4:
    *(_QWORD *)(v1 + 648) = v12;
    v15 = sub_100005574(&qword_100499F50);
    v16 = swift_allocObject(v15, 40, 7);
    *(_OWORD *)(v16 + 16) = xmmword_100384730;
    sub_100005574(&qword_100499F58);
    v17 = static PartialMusicProperty<A>.customLyrics.getter();
    *(_QWORD *)(v16 + 32) = v17;
    v53[0] = v16;
    specialized Array._endMutation()(v17);
    v18 = v16;
    *(_QWORD *)(v1 + 656) = v16;
    v19 = (_QWORD *)swift_task_alloc(async function pointer to MusicItem<>.with(_:)[1]);
    *(_QWORD *)(v1 + 664) = v19;
    v20 = sub_100006924(&qword_100499F60, (uint64_t (*)(uint64_t))&type metadata accessor for Song, (uint64_t)&protocol conformance descriptor for Song);
    *v19 = v1;
    v19[1] = sub_1002630F4;
    return MusicItem<>.with(_:)(*(_QWORD *)(v1 + 624), v18, *(_QWORD *)(v1 + 536), &protocol witness table for Song, &protocol witness table for Song, v20);
  }
  v13 = Song.hasCustomLyrics.getter(v8);
  v12 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v12(v9, v11);
  if ((v13 & 1) != 0)
    goto LABEL_4;
  if (qword_100498A10 != -1)
    swift_once(&qword_100498A10, sub_100257E30);
  v22 = *(_QWORD *)(v1 + 576);
  v23 = *(_QWORD *)(v1 + 536);
  v24 = *(_QWORD *)(v1 + 496);
  v25 = *(void **)(v1 + 504);
  v26 = type metadata accessor for Logger(0, v14);
  sub_1000086B4(v26, (uint64_t)static Logger.lyrics);
  v7(v22, v24, v23);
  v27 = Logger.logObject.getter(v25);
  v28 = static os_log_type_t.default.getter();
  v29 = os_log_type_enabled(v27, v28);
  v30 = *(_QWORD *)(v1 + 576);
  v31 = *(_QWORD *)(v1 + 536);
  v32 = *(void **)(v1 + 504);
  if (v29)
  {
    v33 = swift_slowAlloc(22, -1);
    v34 = swift_slowAlloc(64, -1);
    v53[0] = v34;
    *(_DWORD *)v33 = 136446466;
    *(_QWORD *)(v1 + 472) = v32;
    v35 = (char *)String.init<A>(describing:)(v1 + 472, &type metadata for UnsafeMutableRawPointer);
    *(_QWORD *)(v33 + 4) = sub_100249A1C(v35, v36, v53);

    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 12) = 2082;
    v37 = (char *)sub_100262574();
    *(_QWORD *)(v33 + 14) = sub_100249A1C(v37, v38, v53);
    swift_bridgeObjectRelease();
    v12(v30, v31);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Loader<%{public}s> loadLyrics(for:completion:) returned without loading lyrics [hasLyrics and hasCustomLyrics were false] %{public}s", (uint8_t *)v33, 0x16u);
    swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v33, -1, -1);
  }
  else
  {

    v12(v30, v31);
  }

  v39 = sub_1002689E4();
  swift_allocError(&type metadata for LyricsLoader.LyricsError, v39, 0, 0);
  *v40 = 1;
  swift_willThrow(v41);
  v42 = *(_QWORD *)(v1 + 624);
  v43 = *(_QWORD *)(v1 + 616);
  v44 = *(_QWORD *)(v1 + 608);
  v45 = *(_QWORD *)(v1 + 600);
  v46 = *(_QWORD *)(v1 + 592);
  v47 = *(_QWORD *)(v1 + 584);
  v48 = *(_QWORD *)(v1 + 576);
  v49 = *(_QWORD *)(v1 + 568);
  v50 = *(_QWORD *)(v1 + 560);
  v51 = *(_QWORD *)(v1 + 552);
  v52 = *(_QWORD *)(v1 + 528);
  swift_task_dealloc(*(_QWORD *)(v1 + 632));
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1002630F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 664);
  *(_QWORD *)(*(_QWORD *)v1 + 672) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v3 = sub_10026409C;
  }
  else
  {
    swift_bridgeObjectRelease();
    v3 = sub_100263160;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100263160(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  id v7;
  NSString v8;
  unsigned int v9;
  Swift::String v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  char *v38;
  NSObject *v39;
  __n128 v40;
  void *v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  id v52;
  id v53;
  id v54;
  id v55;
  NSObject *v56;
  os_log_type_t v57;
  _BOOL4 v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  id v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  _BOOL4 v85;
  uint64_t (*v86)(uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char v96;
  BOOL v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  void (*v108)(uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  _BYTE *v112;
  __n128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _BYTE *v119;
  __n128 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(uint64_t, uint64_t, uint64_t);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  id v138;
  Class isa;
  id v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  os_log_type_t typea[8];
  os_log_type_t type;
  os_log_type_t typeb[8];
  uint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152[2];

  v2 = Song.customLyrics.getter(a1);
  if (!v3)
  {
LABEL_11:
    if ((Song.hasLyrics.getter(v2) & 1) != 0)
    {
      v29 = (char *)v1[63];
      v30 = Song.id.getter();
      v32 = v31;
      v1[56] = 0;
      v33 = *(void **)&v29[OBJC_IVAR___MusicLyricsLoader_accessQueue];
      v34 = (_QWORD *)swift_allocObject(&unk_10045CEF8, 48, 7);
      v34[2] = v1 + 56;
      v34[3] = v29;
      v34[4] = v30;
      v34[5] = v32;
      v35 = swift_allocObject(&unk_10045CF20, 32, 7);
      *(_QWORD *)(v35 + 16) = sub_100268A2C;
      *(_QWORD *)(v35 + 24) = v34;
      v1[44] = sub_1000B0290;
      v1[45] = v35;
      v1[40] = _NSConcreteStackBlock;
      v1[41] = 1107296256;
      v1[42] = sub_100009BD0;
      v1[43] = &unk_10045CF38;
      v36 = _Block_copy(v1 + 40);
      v37 = v1[45];
      v38 = v29;
      v39 = v33;
      swift_bridgeObjectRetain();
      swift_retain(v35);
      swift_release(v37);
      dispatch_sync(v39, v36);

      _Block_release(v36);
      LOBYTE(v36) = swift_isEscapingClosureAtFileLocation(v35, "", 122, 302, 31, 1, v40);
      swift_release(v35);
      if ((v36 & 1) == 0)
      {
        v41 = (void *)v1[56];
        swift_bridgeObjectRelease();
        swift_release(v34);

        if (!v41)
        {
          static ApplicationCapabilities.shared.getter((uint64_t)(v1 + 25));
          sub_1000BC0D0(v1 + 25);
          if ((*((_BYTE *)v1 + 210) & 1) != 0)
          {
            v130 = (void (*)(uint64_t, uint64_t, uint64_t))v1[80];
            v131 = v1[74];
            v132 = v1[67];
            v133 = v1[62];
            v134 = v1[63];
            sub_1000087DC(0, &qword_100499F78, MPStoreLyricsRequest_ptr);
            v130(v131, v133, v132);
            v135 = MPStoreLyricsRequest.init(song:)(v131);
            v1[89] = v135;
            v136 = (_QWORD *)swift_task_alloc(48);
            v1[90] = v136;
            v136[2] = v134;
            v136[3] = v135;
            v136[4] = v133;
            v137 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
            v1[91] = v137;
            *v137 = v1;
            v137[1] = sub_100263F18;
            return withCheckedThrowingContinuation<A>(isolation:function:_:)(v1 + 51, 0, 0, 0xD000000000000010, 0x80000001003B85E0, sub_100268A60, v136, &type metadata for LyricsLoader.Result);
          }
        }
        v42 = objc_msgSend((id)objc_opt_self(MPCloudServiceStatusController), "sharedController");
        v43 = objc_msgSend(v42, "musicSubscriptionStatus");

        static ApplicationCapabilities.shared.getter((uint64_t)(v1 + 10));
        sub_1000BC0D0(v1 + 10);
        v45 = v1[11];
        if (qword_100498A10 != -1)
          swift_once(&qword_100498A10, sub_100257E30);
        v46 = (void (*)(uint64_t, uint64_t, uint64_t))v1[80];
        v47 = v1[73];
        v48 = v1[67];
        v49 = v1[62];
        v50 = (void *)v1[63];
        v51 = type metadata accessor for Logger(0, v44);
        sub_1000086B4(v51, (uint64_t)static Logger.lyrics);
        v46(v47, v49, v48);
        v52 = v50;
        v53 = v43;
        v54 = v52;
        v55 = v53;
        v56 = Logger.logObject.getter(v55);
        v57 = static os_log_type_t.default.getter();
        v58 = os_log_type_enabled(v56, v57);
        v59 = (void (*)(uint64_t, uint64_t))v1[81];
        v60 = v1[73];
        v61 = v1[67];
        v62 = (void *)v1[63];
        if (v58)
        {
          v144 = v1[67];
          v150 = v55;
          v63 = swift_slowAlloc(38, -1);
          v142 = v45;
          v64 = swift_slowAlloc(96, -1);
          v152[0] = v64;
          *(_DWORD *)v63 = 136446978;
          v1[54] = v62;
          v65 = (char *)String.init<A>(describing:)(v1 + 54, &type metadata for UnsafeMutableRawPointer);
          *(_QWORD *)(v63 + 4) = sub_100249A1C(v65, v66, v152);

          swift_bridgeObjectRelease();
          *(_WORD *)(v63 + 12) = 2082;
          v1[55] = v43;
          v67 = v150;
          v68 = sub_100005574(&qword_100499F70);
          v69 = (char *)String.init<A>(describing:)(v1 + 55, v68);
          *(_QWORD *)(v63 + 14) = sub_100249A1C(v69, v70, v152);

          swift_bridgeObjectRelease();
          *(_WORD *)(v63 + 22) = 1026;
          *(_DWORD *)(v63 + 24) = HIWORD(v142) & 1;
          *(_WORD *)(v63 + 28) = 2082;
          v71 = (char *)sub_100262574();
          *(_QWORD *)(v63 + 30) = sub_100249A1C(v71, v72, v152);
          swift_bridgeObjectRelease();
          v59(v60, v144);
          _os_log_impl((void *)&_mh_execute_header, v56, v57, "Loader<%{public}s> loadLyrics(for:completion:) didn't load store lyrics [not supported by subscription] subscriptionStatus=%{public}s subscriptionStatus.capabilities.contains(.catalogLyricsViewing)=%{BOOL,public}d %{public}s", (uint8_t *)v63, 0x26u);
          swift_arrayDestroy(v64, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v64, -1, -1);
          v73 = v63;
          v55 = v150;
          swift_slowDealloc(v73, -1, -1);
        }
        else
        {

          v59(v60, v61);
        }

        v108 = (void (*)(uint64_t, uint64_t))v1[81];
        v116 = v1[78];
        v117 = v1[67];
        v118 = sub_1002689E4();
        swift_allocError(&type metadata for LyricsLoader.LyricsError, v118, 0, 0);
        *v119 = 2;
        swift_willThrow(v120);

        v114 = v116;
        v115 = v117;
LABEL_32:
        v108(v114, v115);
        v121 = v1[78];
        v122 = v1[77];
        v123 = v1[76];
        v124 = v1[75];
        v125 = v1[74];
        v126 = v1[73];
        v127 = v1[72];
        v128 = v1[71];
        v129 = v1[70];
        v145 = v1[69];
        *(_QWORD *)typeb = v1[66];
        swift_task_dealloc(v1[79]);
        swift_task_dealloc(v121);
        swift_task_dealloc(v122);
        swift_task_dealloc(v123);
        swift_task_dealloc(v124);
        swift_task_dealloc(v125);
        swift_task_dealloc(v126);
        swift_task_dealloc(v127);
        swift_task_dealloc(v128);
        swift_task_dealloc(v129);
        swift_task_dealloc(v145);
        swift_task_dealloc(*(_QWORD *)typeb);
        return ((uint64_t (*)(void))v1[1])();
      }
      __break(1u);
    }
    else if (qword_100498A10 == -1)
    {
LABEL_20:
      v74 = (void (*)(uint64_t, uint64_t, uint64_t))v1[80];
      v75 = v1[78];
      v76 = v1[77];
      v77 = v1[76];
      v78 = v1[75];
      v79 = v1[67];
      v80 = v1[62];
      v81 = (void *)v1[63];
      v82 = type metadata accessor for Logger(0, v28);
      sub_1000086B4(v82, (uint64_t)static Logger.lyrics);
      v74(v76, v80, v79);
      v74(v77, v75, v79);
      v74(v78, v80, v79);
      v83 = Logger.logObject.getter(v81);
      v84 = static os_log_type_t.default.getter();
      v85 = os_log_type_enabled(v83, v84);
      v86 = (uint64_t (*)(uint64_t, uint64_t))v1[81];
      v87 = v1[77];
      v88 = v1[76];
      v89 = v1[75];
      v90 = v1[67];
      v91 = (void *)v1[63];
      if (v85)
      {
        type = v84;
        v92 = swift_slowAlloc(42, -1);
        v151 = swift_slowAlloc(128, -1);
        v152[0] = v151;
        *(_DWORD *)v92 = 136446978;
        v1[58] = v91;
        v93 = (char *)String.init<A>(describing:)(v1 + 58, &type metadata for UnsafeMutableRawPointer);
        *(_QWORD *)(v92 + 4) = sub_100249A1C(v93, v94, v152);

        v95 = swift_bridgeObjectRelease();
        *(_WORD *)(v92 + 12) = 2082;
        v96 = Song.hasCustomLyrics.getter(v95);
        v97 = (v96 & 1) == 0;
        if ((v96 & 1) != 0)
          v98 = 1702195828;
        else
          v98 = 0x65736C6166;
        if (v97)
          v99 = (char *)0xE500000000000000;
        else
          v99 = (char *)0xE400000000000000;
        *(_QWORD *)(v92 + 14) = sub_100249A1C((char *)v98, v99, v152);
        swift_bridgeObjectRelease();
        v100 = v86(v87, v90);
        *(_WORD *)(v92 + 22) = 2082;
        v101 = Song.customLyrics.getter(v100);
        v103 = (char *)Optional<A>.description.getter(v101, v102);
        v105 = v104;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v92 + 24) = sub_100249A1C(v103, v105, v152);
        swift_bridgeObjectRelease();
        v86(v88, v90);
        *(_WORD *)(v92 + 32) = 2082;
        v106 = (char *)sub_100262574();
        *(_QWORD *)(v92 + 34) = sub_100249A1C(v106, v107, v152);
        swift_bridgeObjectRelease();
        v86(v89, v90);
        _os_log_impl((void *)&_mh_execute_header, v83, type, "Loader<%{public}s> loadLyrics(for:completion:) didn't load lyrics [no lyrics found] song.hasLyrics=false song.hasCustomLyrics=%{public}s song.customLyrics=%{public}s %{public}s", (uint8_t *)v92, 0x2Au);
        swift_arrayDestroy(v151, 4, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v151, -1, -1);
        swift_slowDealloc(v92, -1, -1);
      }
      else
      {

        v86(v87, v90);
        v86(v88, v90);
        v86(v89, v90);
      }

      v108 = (void (*)(uint64_t, uint64_t))v1[81];
      v109 = v1[78];
      v110 = v1[67];
      v111 = sub_1002689E4();
      swift_allocError(&type metadata for LyricsLoader.LyricsError, v111, 0, 0);
      *v112 = 1;
      swift_willThrow(v113);
      v114 = v109;
      v115 = v110;
      goto LABEL_32;
    }
    swift_once(&qword_100498A10, sub_100257E30);
    goto LABEL_20;
  }
  v4 = v2;
  v5 = v3;
  v6 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v6 = v2 & 0xFFFFFFFFFFFFLL;
  if (!v6)
  {
    v2 = swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  v7 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v7, "BOOLForKey:", v8);

  if (!v9)
    goto LABEL_9;
  if (*DeviceCapabilities.isInternalInstall.unsafeMutableAddressor() != 1)
    goto LABEL_9;
  v10 = String.trim()();
  v11 = sub_100264714(544502844, 0xE400000000000000, v10._countAndFlagsBits, (uint64_t)v10._object);
  v12 = swift_bridgeObjectRelease();
  if ((v11 & 1) == 0)
    goto LABEL_9;
  v13 = v1[66];
  v14 = v1[65];
  v15 = v1[64];
  static String.Encoding.utf8.getter(v12);
  v16 = String.data(using:allowLossyConversion:)(v13, 0, v4, v5);
  v18 = v17;
  v1[85] = v16;
  v1[86] = v17;
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  if (v18 >> 60 != 15)
  {
    swift_bridgeObjectRelease();
    v138 = objc_allocWithZone((Class)MSVLyricsTTMLParser);
    sub_1000516F8(v16, v18);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v140 = objc_msgSend(v138, "initWithTTMLData:", isa);
    v1[87] = v140;
    sub_1000067D4(v16, v18);

    v1[7] = v1 + 57;
    v1[2] = v1;
    v1[3] = sub_100263D68;
    v1[50] = swift_continuation_init(v1 + 2, 1);
    v1[46] = _NSConcreteStackBlock;
    v1[47] = 0x40000000;
    v1[48] = sub_100264878;
    v1[49] = &unk_10045CF60;
    objc_msgSend(v140, "parseWithCompletion:", v1 + 46);
    return swift_continuation_await(v1 + 2);
  }
  else
  {
LABEL_9:
    ((void (*)(_QWORD, _QWORD))v1[81])(v1[78], v1[67]);
    v19 = v1[78];
    v20 = v1[77];
    v21 = v1[76];
    v22 = v1[75];
    v149 = v4;
    v23 = v1[74];
    v24 = v1[73];
    v25 = v1[72];
    v26 = v1[71];
    v141 = v1[70];
    v143 = v1[69];
    *(_QWORD *)typea = v1[66];
    swift_task_dealloc(v1[79]);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v141);
    swift_task_dealloc(v143);
    swift_task_dealloc(*(_QWORD *)typea);
    return ((uint64_t (*)(uint64_t, unint64_t, _QWORD))v1[1])(v149, v5, 0);
  }
}

uint64_t sub_100263D68()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 704) = v1;
  if (v1)
    v2 = sub_100264188;
  else
    v2 = sub_100263DC8;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100263DC8()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(void **)(v0 + 696);
  v2 = *(_QWORD *)(v0 + 688);
  v3 = *(_QWORD *)(v0 + 680);
  v4 = *(void (**)(uint64_t, uint64_t))(v0 + 648);
  v5 = *(_QWORD *)(v0 + 624);
  v6 = *(_QWORD *)(v0 + 536);
  v7 = *(void **)(v0 + 456);
  v8 = type metadata accessor for Lyrics();
  swift_allocObject(v8, 160, 7);
  v21 = Lyrics.init(identifier:songInfo:)(0, 0, v7);

  sub_1000067D4(v3, v2);
  v4(v5, v6);
  v9 = *(_QWORD *)(v0 + 624);
  v10 = *(_QWORD *)(v0 + 616);
  v11 = *(_QWORD *)(v0 + 608);
  v12 = *(_QWORD *)(v0 + 600);
  v13 = *(_QWORD *)(v0 + 592);
  v14 = *(_QWORD *)(v0 + 584);
  v15 = *(_QWORD *)(v0 + 576);
  v16 = *(_QWORD *)(v0 + 568);
  v17 = *(_QWORD *)(v0 + 560);
  v19 = *(_QWORD *)(v0 + 552);
  v20 = *(_QWORD *)(v0 + 528);
  swift_task_dealloc(*(_QWORD *)(v0 + 632));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v0 + 8))(v21, 0, 1);
}

uint64_t sub_100263F18()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 728);
  *(_QWORD *)(*v1 + 736) = v0;
  swift_task_dealloc(v3);
  swift_task_dealloc(*(_QWORD *)(v2 + 720));
  if (v0)
    v4 = sub_100264610;
  else
    v4 = sub_100263F84;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100263F84()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 648);
  v2 = *(_QWORD *)(v0 + 624);
  v3 = *(_QWORD *)(v0 + 536);

  v1(v2, v3);
  v17 = *(_QWORD *)(v0 + 416);
  v18 = *(_QWORD *)(v0 + 408);
  v16 = *(unsigned __int8 *)(v0 + 424);
  v4 = *(_QWORD *)(v0 + 624);
  v5 = *(_QWORD *)(v0 + 616);
  v6 = *(_QWORD *)(v0 + 608);
  v7 = *(_QWORD *)(v0 + 600);
  v8 = *(_QWORD *)(v0 + 592);
  v9 = *(_QWORD *)(v0 + 584);
  v10 = *(_QWORD *)(v0 + 576);
  v11 = *(_QWORD *)(v0 + 568);
  v12 = *(_QWORD *)(v0 + 560);
  v14 = *(_QWORD *)(v0 + 552);
  v15 = *(_QWORD *)(v0 + 528);
  swift_task_dealloc(*(_QWORD *)(v0 + 632));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v0 + 8))(v18, v17, v16);
}

uint64_t sub_10026409C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 656));
  v1 = *(_QWORD *)(v0 + 624);
  v2 = *(_QWORD *)(v0 + 616);
  v3 = *(_QWORD *)(v0 + 608);
  v4 = *(_QWORD *)(v0 + 600);
  v5 = *(_QWORD *)(v0 + 592);
  v6 = *(_QWORD *)(v0 + 584);
  v7 = *(_QWORD *)(v0 + 576);
  v8 = *(_QWORD *)(v0 + 568);
  v9 = *(_QWORD *)(v0 + 560);
  v11 = *(_QWORD *)(v0 + 552);
  v12 = *(_QWORD *)(v0 + 528);
  swift_task_dealloc(*(_QWORD *)(v0 + 632));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100264188(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char v33;
  BOOL v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  void *v46;
  unint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _BYTE *v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *log;
  os_log_t loga;
  os_log_type_t type;
  uint64_t v71[2];

  swift_willThrow(a1);
  if (qword_100498A10 != -1)
    swift_once(&qword_100498A10, sub_100257E30);
  v3 = *(_QWORD *)(v1 + 704);
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 640);
  v5 = *(_QWORD *)(v1 + 624);
  v6 = *(_QWORD *)(v1 + 568);
  v7 = *(_QWORD *)(v1 + 560);
  v8 = *(_QWORD *)(v1 + 552);
  v9 = *(_QWORD *)(v1 + 536);
  v10 = *(_QWORD *)(v1 + 496);
  v11 = *(void **)(v1 + 504);
  v12 = type metadata accessor for Logger(0, v2);
  sub_1000086B4(v12, (uint64_t)static Logger.lyrics);
  v4(v6, v10, v9);
  v4(v7, v5, v9);
  v4(v8, v10, v9);
  v13 = v11;
  swift_errorRetain(v3);
  v14 = v13;
  v15 = swift_errorRetain(v3);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  v18 = os_log_type_enabled(v16, v17);
  v19 = *(_QWORD *)(v1 + 704);
  v20 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 648);
  v21 = *(_QWORD *)(v1 + 568);
  v22 = *(_QWORD *)(v1 + 560);
  v23 = *(_QWORD *)(v1 + 552);
  v24 = *(_QWORD *)(v1 + 536);
  v25 = *(void **)(v1 + 504);
  if (v18)
  {
    log = v16;
    type = v17;
    v65 = *(_QWORD *)(v1 + 552);
    v26 = swift_slowAlloc(52, -1);
    v66 = swift_slowAlloc(160, -1);
    v71[0] = v66;
    *(_DWORD *)v26 = 136447234;
    *(_QWORD *)(v1 + 480) = v25;
    v27 = (char *)String.init<A>(describing:)(v1 + 480, &type metadata for UnsafeMutableRawPointer);
    *(_QWORD *)(v26 + 4) = sub_100249A1C(v27, v28, v71);

    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2082;
    *(_QWORD *)(v1 + 488) = v19;
    swift_errorRetain(v19);
    v29 = sub_100005574(&qword_100499F80);
    v30 = (char *)String.init<A>(describing:)(v1 + 488, v29);
    *(_QWORD *)(v26 + 14) = sub_100249A1C(v30, v31, v71);
    swift_bridgeObjectRelease();
    swift_errorRelease(v19);
    v32 = swift_errorRelease(v19);
    *(_WORD *)(v26 + 22) = 2082;
    v33 = Song.hasCustomLyrics.getter(v32);
    v34 = (v33 & 1) == 0;
    if ((v33 & 1) != 0)
      v35 = 1702195828;
    else
      v35 = 0x65736C6166;
    if (v34)
      v36 = (char *)0xE500000000000000;
    else
      v36 = (char *)0xE400000000000000;
    *(_QWORD *)(v26 + 24) = sub_100249A1C((char *)v35, v36, v71);
    swift_bridgeObjectRelease();
    v37 = v20(v21, v24);
    *(_WORD *)(v26 + 32) = 2082;
    v38 = Song.customLyrics.getter(v37);
    v40 = (char *)Optional<A>.description.getter(v38, v39);
    v42 = v41;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v26 + 34) = sub_100249A1C(v40, v42, v71);
    swift_bridgeObjectRelease();
    v20(v22, v24);
    *(_WORD *)(v26 + 42) = 2082;
    v43 = (char *)sub_100262574();
    *(_QWORD *)(v26 + 44) = sub_100249A1C(v43, v44, v71);
    swift_bridgeObjectRelease();
    v20(v65, v24);
    _os_log_impl((void *)&_mh_execute_header, log, type, "Loader<%{public}s> loadLyrics(for:completion:) didn't parse TTML custom lyrics with error=%{public}s song.hasCustomLyrics=%{public}s song.customLyrics=%{public}s %{public}s", (uint8_t *)v26, 0x34u);
    swift_arrayDestroy(v66, 5, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v66, -1, -1);
    swift_slowDealloc(v26, -1, -1);

  }
  else
  {

    swift_errorRelease(v19);
    swift_errorRelease(v19);
    v20(v21, v24);
    v20(v22, v24);
    v20(v23, v24);

  }
  v45 = *(_QWORD *)(v1 + 704);
  v46 = *(void **)(v1 + 696);
  v47 = *(_QWORD *)(v1 + 688);
  v48 = *(_QWORD *)(v1 + 680);
  v49 = *(void (**)(uint64_t, uint64_t))(v1 + 648);
  v50 = *(_QWORD *)(v1 + 624);
  v51 = *(_QWORD *)(v1 + 536);
  v52 = sub_1002689E4();
  swift_allocError(&type metadata for LyricsLoader.LyricsError, v52, 0, 0);
  *v53 = 0;
  swift_willThrow(v54);

  swift_errorRelease(v45);
  sub_1000067D4(v48, v47);
  v49(v50, v51);
  v55 = *(_QWORD *)(v1 + 624);
  v56 = *(_QWORD *)(v1 + 616);
  v57 = *(_QWORD *)(v1 + 608);
  v58 = *(_QWORD *)(v1 + 600);
  v59 = *(_QWORD *)(v1 + 592);
  v60 = *(_QWORD *)(v1 + 584);
  v61 = *(_QWORD *)(v1 + 576);
  v62 = *(_QWORD *)(v1 + 568);
  v63 = *(_QWORD *)(v1 + 560);
  v67 = *(_QWORD *)(v1 + 552);
  loga = *(os_log_t *)(v1 + 528);
  swift_task_dealloc(*(_QWORD *)(v1 + 632));
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v67);
  swift_task_dealloc(loga);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100264610()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 648);
  v2 = *(_QWORD *)(v0 + 624);
  v3 = *(_QWORD *)(v0 + 536);

  v1(v2, v3);
  v4 = *(_QWORD *)(v0 + 624);
  v5 = *(_QWORD *)(v0 + 616);
  v6 = *(_QWORD *)(v0 + 608);
  v7 = *(_QWORD *)(v0 + 600);
  v8 = *(_QWORD *)(v0 + 592);
  v9 = *(_QWORD *)(v0 + 584);
  v10 = *(_QWORD *)(v0 + 576);
  v11 = *(_QWORD *)(v0 + 568);
  v12 = *(_QWORD *)(v0 + 560);
  v14 = *(_QWORD *)(v0 + 552);
  v15 = *(_QWORD *)(v0 + 528);
  swift_task_dealloc(*(_QWORD *)(v0 + 632));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100264714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::String_optional v4;
  uint64_t countAndFlagsBits;
  void *object;
  char v7;
  Swift::String_optional v8;
  Swift::String_optional v9;
  void *v10;
  _BOOL8 v11;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v4 = String.Iterator.next()();
  if (v4.value._object)
  {
    countAndFlagsBits = v4.value._countAndFlagsBits;
    object = v4.value._object;
    do
    {
      v9 = String.Iterator.next()();
      if (!v9.value._object)
      {
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(a4);
        swift_bridgeObjectRelease(a2);
        return 1;
      }
      if (countAndFlagsBits == v9.value._countAndFlagsBits && object == v9.value._object)
      {
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(v9.value._object);
      }
      else
      {
        v7 = _stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, v9.value._countAndFlagsBits, v9.value._object, 0);
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(v9.value._object);
        if ((v7 & 1) == 0)
        {
          swift_bridgeObjectRelease(a4);
          swift_bridgeObjectRelease(a2);
          return 0;
        }
      }
      v8 = String.Iterator.next()();
      countAndFlagsBits = v8.value._countAndFlagsBits;
      object = v8.value._object;
    }
    while (v8.value._object);
  }
  swift_bridgeObjectRelease(a4);
  v10 = String.Iterator.next()().value._object;
  swift_bridgeObjectRelease(a2);
  v11 = v10 == 0;
  swift_bridgeObjectRelease(v10);
  return v11;
}

void sub_100264878(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  id v9;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_100005574(&qword_100499F80);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    swift_continuation_throwingResumeWithError(v3, v6);
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    v9 = a2;
    swift_continuation_throwingResume(v3);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100264904(uint64_t a1, char *a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v19;
  char *v20;

  v20 = a2;
  v7 = sub_100005574(&qword_10049A218);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin();
  v10 = type metadata accessor for Song(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin();
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a4, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  v14 = *(unsigned __int8 *)(v8 + 80);
  v15 = (v14 + 16) & ~v14;
  v16 = swift_allocObject(&unk_10045D740, v15 + v9, v14 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v16 + v15, (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  sub_100269070(a3, (uint64_t)v13, (uint64_t)sub_10026C110, v16, v20);
  v17 = swift_release(v16);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v11 + 8))(v13, v10, v17);
}

void LyricsLoader.hasRequest(for:)()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  id v11;
  __n128 v12;
  _QWORD aBlock[5];
  uint64_t v14;
  char v15;

  v1 = v0;
  v2 = Song.id.getter();
  v4 = v3;
  v15 = 0;
  v5 = *(void **)&v0[OBJC_IVAR___MusicLyricsLoader_accessQueue];
  v6 = (_QWORD *)swift_allocObject(&unk_10045CF88, 48, 7);
  v6[2] = &v15;
  v6[3] = v1;
  v6[4] = v2;
  v6[5] = v4;
  v7 = swift_allocObject(&unk_10045CFB0, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_100268A70;
  *(_QWORD *)(v7 + 24) = v6;
  aBlock[4] = sub_1000B04E0;
  v14 = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100009BD0;
  aBlock[3] = &unk_10045CFC8;
  v8 = _Block_copy(aBlock);
  v9 = v14;
  v10 = v5;
  v11 = v1;
  swift_bridgeObjectRetain();
  swift_retain(v7);
  swift_release(v9);
  dispatch_sync(v10, v8);

  _Block_release(v8);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation(v7, "", 122, 294, 31, 1, v12);
  swift_release(v7);
  if ((v1 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    swift_release(v6);
    swift_bridgeObjectRelease();
  }
}

{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  id v11;
  __n128 v12;
  _QWORD aBlock[5];
  uint64_t v14;
  char v15;

  v1 = v0;
  v2 = sub_100266304();
  v4 = v3;
  v15 = 0;
  v5 = *(void **)&v0[OBJC_IVAR___MusicLyricsLoader_accessQueue];
  v6 = (_QWORD *)swift_allocObject(&unk_10045D0C8, 48, 7);
  v6[2] = &v15;
  v6[3] = v1;
  v6[4] = v2;
  v6[5] = v4;
  v7 = swift_allocObject(&unk_10045D0F0, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_10026C2B8;
  *(_QWORD *)(v7 + 24) = v6;
  aBlock[4] = sub_1000B04E0;
  v14 = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100009BD0;
  aBlock[3] = &unk_10045D108;
  v8 = _Block_copy(aBlock);
  v9 = v14;
  v10 = v5;
  v11 = v1;
  swift_bridgeObjectRetain();
  swift_retain(v7);
  swift_release(v9);
  dispatch_sync(v10, v8);

  _Block_release(v8);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation(v7, "", 122, 294, 31, 1, v12);
  swift_release(v7);
  if ((v1 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    swift_release(v6);
    swift_bridgeObjectRelease();
  }
}

uint64_t LyricsLoader.cancelRequest(for:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = Song.id.getter();
  sub_1002666F8(v0, v1);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100266304();
  sub_1002666F8(v0, v1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100264C24()
{
  uint64_t v0;
  int8x16_t *v1;
  _QWORD *v2;

  v1 = (int8x16_t *)swift_task_alloc(32);
  *(_QWORD *)(v0 + 56) = v1;
  v1[1] = vextq_s8(*(int8x16_t *)(v0 + 40), *(int8x16_t *)(v0 + 40), 8uLL);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 64) = v2;
  *v2 = v0;
  v2[1] = sub_100264CC8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD000000000000010, 0x80000001003B85E0, sub_100268A8C, v1, &type metadata for LyricsLoader.Result);
}

uint64_t sub_100264CC8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 64);
  *(_QWORD *)(*v1 + 72) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100264D48;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 56));
    v4 = sub_100264D34;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100264D34()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32));
}

uint64_t sub_100264D48()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_100264D7C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  uint64_t v12;

  v5 = sub_100005574(&qword_10049A218);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_10045D6A0, v9 + v7, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v10 + v9, (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  LyricsLoader.loadLyrics(for:completion:)(a3, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_10026C110, v10);
  *(_QWORD *)&result = swift_release(v10).n128_u64[0];
  return result;
}

uint64_t sub_100264E60(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD v10[2];
  char v11;

  if (a3 == 255)
  {
    if (a4)
    {
      v4 = a4;
    }
    else
    {
      v7 = sub_1002689E4();
      v4 = swift_allocError(&type metadata for LyricsLoader.LyricsError, v7, 0, 0);
      a4 = 0;
      *v8 = 3;
    }
    v10[0] = v4;
    swift_errorRetain(a4);
    v9 = sub_100005574(&qword_10049A218);
    return CheckedContinuation.resume(throwing:)(v10, v9);
  }
  else
  {
    v10[0] = a1;
    v10[1] = a2;
    v11 = a3 & 1;
    sub_10003B4C0(a1, a2, a3 & 1);
    v5 = sub_100005574(&qword_10049A218);
    return CheckedContinuation.resume(returning:)(v10, v5);
  }
}

id static LyricsLoader.requiredProperties()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Class isa;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Class v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Class v30;
  id v31;
  id v32;
  Class v33;
  Class v34;
  id v35;
  id v36;
  Class v37;
  Class v38;
  id v39;
  _BYTE v41[56];
  _BYTE v42[112];

  v0 = sub_100005574(&qword_100499F90);
  v1 = swift_allocObject(v0, 96, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100384BB0;
  *(_QWORD *)(v1 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertySongTitle);
  *(_QWORD *)(v1 + 40) = v2;
  *(_QWORD *)(v1 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertySongArtwork);
  *(_QWORD *)(v1 + 56) = v3;
  *(_QWORD *)(v1 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertySongHasVideo);
  *(_QWORD *)(v1 + 72) = v4;
  *(_QWORD *)(v1 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertySongArtistUploadedContent);
  *(_QWORD *)(v1 + 88) = v5;
  v6 = sub_100005574(&qword_100499F98);
  inited = swift_initStackObject(v6, v42);
  *(_OWORD *)(inited + 16) = xmmword_100384A40;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelRelationshipSongArtist);
  *(_QWORD *)(inited + 40) = v8;
  v9 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100384A80;
  v10 = MPModelPropertyArtistName;
  *(_QWORD *)(v9 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyArtistName);
  *(_QWORD *)(v9 + 40) = v11;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v13 = (void *)objc_opt_self(MPPropertySet);
  v14 = objc_msgSend(v13, "propertySetWithProperties:", isa);

  *(_QWORD *)(inited + 48) = v14;
  *(_QWORD *)(inited + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelRelationshipSongLyrics);
  *(_QWORD *)(inited + 64) = v15;
  v16 = swift_allocObject(v0, 96, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100384BB0;
  *(_QWORD *)(v16 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyLyricsText);
  *(_QWORD *)(v16 + 40) = v17;
  *(_QWORD *)(v16 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyLyricsHasLibraryLyrics);
  *(_QWORD *)(v16 + 56) = v18;
  *(_QWORD *)(v16 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyLyricsHasStoreLyrics);
  *(_QWORD *)(v16 + 72) = v19;
  *(_QWORD *)(v16 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyLyricsHasTimeSyncedLyrics);
  *(_QWORD *)(v16 + 88) = v20;
  v21 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v22 = objc_msgSend(v13, "propertySetWithProperties:", v21);

  *(_QWORD *)(inited + 72) = v22;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelRelationshipSongAlbum);
  *(_QWORD *)(inited + 88) = v23;
  v24 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v24 + 16) = xmmword_100384A80;
  *(_QWORD *)(v24 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyAlbumTitle);
  *(_QWORD *)(v24 + 40) = v25;
  v26 = swift_initStackObject(v6, v41);
  *(_OWORD *)(v26 + 16) = xmmword_100384A80;
  *(_QWORD *)(v26 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelRelationshipAlbumArtist);
  *(_QWORD *)(v26 + 40) = v27;
  v28 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v28 + 16) = xmmword_100384A80;
  *(_QWORD *)(v28 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  *(_QWORD *)(v28 + 40) = v29;
  v30 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v31 = objc_msgSend(v13, "propertySetWithProperties:", v30);

  *(_QWORD *)(v26 + 48) = v31;
  sub_100233798(v26);
  v32 = objc_allocWithZone((Class)MPPropertySet);
  v33 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_1000087DC(0, &qword_100499FA0, MPPropertySet_ptr);
  v34 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v35 = objc_msgSend(v32, "initWithProperties:relationships:", v33, v34);

  *(_QWORD *)(inited + 96) = v35;
  sub_100233798(inited);
  v36 = objc_allocWithZone((Class)MPPropertySet);
  v37 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v38 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v39 = objc_msgSend(v36, "initWithProperties:relationships:", v37, v38);

  return v39;
}

void LyricsLoader.loadLyrics(for:completion:)(void *a1, void (*a2)(uint64_t, unint64_t, uint64_t, uint64_t), uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  NSString v22;
  unsigned int v23;
  Swift::String v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  id v31;
  char *v32;
  id v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  void **v38;
  char *v39;
  char *v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char **v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  _QWORD *v52;
  uint64_t v53;
  void *v54;
  NSObject *v55;
  __n128 v56;
  char *v57;
  uint64_t v58;
  id v59;
  id v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  id v64;
  char *v65;
  id v66;
  id v67;
  char *v68;
  void **v69;
  NSObject *v70;
  int v71;
  uint64_t v72;
  char *v73;
  char *v74;
  void **v75;
  uint64_t v76;
  char *v77;
  char *v78;
  id v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  char *v91;
  id v92;
  char *v93;
  NSObject *v94;
  os_log_type_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  unsigned int v99;
  id v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  id v108;
  id v109;
  char *v110;
  char *v111;
  char *v112;
  unint64_t v113;
  uint64_t v114;
  _BYTE *v115;
  char *v116;
  char *v117;
  char *v118;
  id v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  id v127;
  id v128;
  char *v129;
  char *v130;
  char *v131;
  void **v132;
  unint64_t v133;
  uint64_t v134;
  _BYTE *v135;
  id v136;
  id v137;
  os_log_type_t v138;
  char *v139;
  char *v140;
  char *v141;
  id v142;
  id v143;
  char *v144;
  char *v145;
  char *v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  _BYTE *v150;
  id v151;
  Class isa;
  id v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  char **v157;
  uint64_t v158;
  uint64_t v159;
  void **v160;
  uint64_t v161;
  void (*v162)(uint64_t, unint64_t, uint64_t, uint64_t);
  char *v163;
  uint64_t v164;
  char *v165;
  char v166;
  void **v167;
  uint64_t v168;
  void *v169;
  void *v170;
  void *v171;
  char **v172;

  v4 = v3;
  v8 = type metadata accessor for String.Encoding(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v158 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(a1, "lyrics");
  if (v12)
  {
    v14 = v12;
    v162 = a2;
    v15 = objc_msgSend(v12, "text");
    v161 = a3;
    if (v15)
    {
      v16 = v15;
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v19 = v18;

      v20 = HIBYTE(v19) & 0xF;
      if ((v19 & 0x2000000000000000) == 0)
        v20 = v17 & 0xFFFFFFFFFFFFLL;
      if (v20)
      {
        v21 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
        v22 = String._bridgeToObjectiveC()();
        v23 = objc_msgSend(v21, "BOOLForKey:", v22);

        if (v23
          && *DeviceCapabilities.isInternalInstall.unsafeMutableAddressor() == 1
          && (v24 = String.trim()(),
              v25 = sub_100264714(544502844, 0xE400000000000000, v24._countAndFlagsBits, (uint64_t)v24._object),
              v26 = swift_bridgeObjectRelease(),
              (v25 & 1) != 0)
          && (static String.Encoding.utf8.getter(v26),
              v27 = String.data(using:allowLossyConversion:)(v11, 0, v17, v19),
              v29 = v28,
              (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8),
              v29 >> 60 != 15))
        {
          swift_bridgeObjectRelease();
          v151 = objc_allocWithZone((Class)MSVLyricsTTMLParser);
          sub_1000516F8(v27, v29);
          isa = Data._bridgeToObjectiveC()().super.isa;
          v153 = objc_msgSend(v151, "initWithTTMLData:", isa);
          sub_1000067D4(v27, v29);

          v154 = swift_allocObject(&unk_10045D078, 32, 7);
          v155 = v161;
          *(_QWORD *)(v154 + 16) = v162;
          *(_QWORD *)(v154 + 24) = v155;
          v171 = sub_10026B76C;
          v172 = (char **)v154;
          v167 = _NSConcreteStackBlock;
          v168 = 1107296256;
          v169 = sub_100266300;
          v170 = &unk_10045D090;
          v156 = _Block_copy(&v167);
          v157 = v172;
          swift_retain(v155);
          objc_msgSend(v153, "parseWithCompletion:", v156, swift_release(v157).n128_f64[0]);

          _Block_release(v156);
          sub_1000067D4(v27, v29);
        }
        else
        {
          v162(v17, v19, 0, 0);

          swift_bridgeObjectRelease();
        }
        return;
      }
      swift_bridgeObjectRelease();
    }
    v46 = &selRef_count;
    if ((objc_msgSend(v14, "hasStoreLyrics") & 1) != 0)
    {
      v48 = sub_100266304();
      v50 = v49;
      v165 = 0;
      v51 = *(void **)&v4[OBJC_IVAR___MusicLyricsLoader_accessQueue];
      v52 = (_QWORD *)swift_allocObject(&unk_10045D000, 48, 7);
      v52[2] = &v165;
      v52[3] = v4;
      v52[4] = v48;
      v52[5] = v50;
      v53 = swift_allocObject(&unk_10045D028, 32, 7);
      *(_QWORD *)(v53 + 16) = sub_10026C2B4;
      *(_QWORD *)(v53 + 24) = v52;
      v171 = sub_1000B04E0;
      v172 = (char **)v53;
      v167 = _NSConcreteStackBlock;
      v168 = 1107296256;
      v169 = sub_100009BD0;
      v170 = &unk_10045D040;
      v54 = _Block_copy(&v167);
      v46 = v172;
      v4 = v4;
      v55 = v51;
      swift_bridgeObjectRetain();
      swift_retain(v53);
      swift_release(v46);
      dispatch_sync(v55, v54);

      _Block_release(v54);
      LOBYTE(v54) = swift_isEscapingClosureAtFileLocation(v53, "", 122, 302, 31, 1, v56);
      swift_release(v53);
      if ((v54 & 1) == 0)
      {
        v57 = v165;
        swift_release(v52);
        swift_bridgeObjectRelease();

        v58 = (uint64_t)v162;
        if (!v57)
        {
          static ApplicationCapabilities.shared.getter((uint64_t)&v165);
          sub_1000BC0D0(&v165);
          if ((v166 & 1) != 0)
          {
            v136 = objc_msgSend(objc_allocWithZone((Class)MPStoreLyricsRequest), "init");
            objc_msgSend(v136, "setSong:", a1);
            v137 = a1;
            sub_100269310(v136, v137, v58, v161, v4);

            return;
          }
        }
        v59 = objc_msgSend((id)objc_opt_self(MPCloudServiceStatusController), "sharedController");
        v60 = objc_msgSend(v59, "musicSubscriptionStatus");

        static ApplicationCapabilities.shared.getter((uint64_t)&v167);
        sub_1000BC0D0(&v167);
        v62 = v168;
        if (qword_100498A10 != -1)
          swift_once(&qword_100498A10, sub_100257E30);
        v63 = type metadata accessor for Logger(0, v61);
        sub_1000086B4(v63, (uint64_t)static Logger.lyrics);
        v64 = a1;
        v65 = v4;
        v66 = v60;
        v67 = v64;
        v68 = v65;
        v69 = (void **)v66;
        v70 = Logger.logObject.getter(v69);
        v71 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v70, (os_log_type_t)v71))
        {
          HIDWORD(v158) = v71;
          v72 = swift_slowAlloc(48, -1);
          v159 = swift_slowAlloc(128, -1);
          v163 = v68;
          v164 = v159;
          *(_DWORD *)v72 = 136447234;
          v73 = (char *)String.init<A>(describing:)(&v163, &type metadata for UnsafeMutableRawPointer);
          *(_QWORD *)(v72 + 4) = sub_100249A1C(v73, v74, &v164);
          swift_bridgeObjectRelease();

          *(_WORD *)(v72 + 12) = 2082;
          v163 = (char *)v60;
          v160 = v69;
          v75 = v69;
          v76 = sub_100005574(&qword_100499F70);
          v77 = (char *)String.init<A>(describing:)(&v163, v76);
          *(_QWORD *)(v72 + 14) = sub_100249A1C(v77, v78, &v164);
          swift_bridgeObjectRelease();

          *(_WORD *)(v72 + 22) = 1026;
          *(_DWORD *)(v72 + 24) = HIWORD(v62) & 1;
          *(_WORD *)(v72 + 28) = 2082;
          v79 = objc_msgSend(v67, "title");
          if (v79)
          {
            v80 = v79;
            v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
            v83 = v82;

          }
          else
          {
            v81 = 0;
            v83 = 0;
          }
          v138 = BYTE4(v158);
          v139 = (char *)Optional<A>.description.getter(v81, v83);
          v141 = v140;
          swift_bridgeObjectRelease();
          *(_QWORD *)(v72 + 30) = sub_100249A1C(v139, v141, &v164);
          swift_bridgeObjectRelease();

          *(_WORD *)(v72 + 38) = 2082;
          v142 = objc_msgSend(v67, "identifiers");
          v143 = objc_msgSend(v142, "description");
          v144 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v143);
          v146 = v145;

          *(_QWORD *)(v72 + 40) = sub_100249A1C(v144, v146, &v164);
          swift_bridgeObjectRelease();

          _os_log_impl((void *)&_mh_execute_header, v70, v138, "Loader<%{public}s> loadLyrics(for:completion:) didn't load store lyrics [not supported by subscription] subscriptionStatus=%{public}s subscriptionStatus.capabilities.contains(.catalogLyricsViewing)=%{BOOL,public}d song.title=%{public}s song.identifiers=%{public}s", (uint8_t *)v72, 0x30u);
          v147 = v159;
          swift_arrayDestroy(v159, 4, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v147, -1, -1);
          swift_slowDealloc(v72, -1, -1);

          v69 = v160;
        }
        else
        {

        }
        v148 = sub_1002689E4();
        v149 = swift_allocError(&type metadata for LyricsLoader.LyricsError, v148, 0, 0);
        *v150 = 2;
        v162(0, 0, 255, v149);
        swift_errorRelease(v149);

        goto LABEL_46;
      }
      __break(1u);
    }
    else if (qword_100498A10 == -1)
    {
LABEL_28:
      v84 = type metadata accessor for Logger(0, v47);
      sub_1000086B4(v84, (uint64_t)static Logger.lyrics);
      v85 = v14;
      v86 = a1;
      v87 = v85;
      v88 = v86;
      v89 = v87;
      v90 = v88;
      v91 = v4;
      v14 = v89;
      v92 = v90;
      v93 = v91;
      v94 = Logger.logObject.getter(v93);
      v95 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v94, v95))
      {
        v96 = swift_slowAlloc(48, -1);
        v160 = (void **)swift_slowAlloc(128, -1);
        v167 = v160;
        *(_DWORD *)v96 = 136447234;
        v165 = v93;
        v97 = (char *)String.init<A>(describing:)(&v165, &type metadata for UnsafeMutableRawPointer);
        *(_QWORD *)(v96 + 4) = sub_100249A1C(v97, v98, (uint64_t *)&v167);
        swift_bridgeObjectRelease();

        *(_WORD *)(v96 + 12) = 1026;
        v99 = objc_msgSend(v14, v46[414]);

        *(_DWORD *)(v96 + 14) = v99;
        *(_WORD *)(v96 + 18) = 2082;
        v100 = objc_msgSend(v14, "text");
        if (v100)
        {
          v101 = v100;
          v102 = static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
          v104 = v103;

        }
        else
        {
          v102 = 0;
          v104 = 0;
        }
        v116 = (char *)Optional<A>.description.getter(v102, v104);
        v118 = v117;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v96 + 20) = sub_100249A1C(v116, v118, (uint64_t *)&v167);
        swift_bridgeObjectRelease();

        *(_WORD *)(v96 + 28) = 2082;
        v119 = objc_msgSend(v92, "title");
        if (v119)
        {
          v120 = v119;
          v121 = static String._unconditionallyBridgeFromObjectiveC(_:)(v119);
          v123 = v122;

        }
        else
        {
          v121 = 0;
          v123 = 0;
        }
        v124 = (char *)Optional<A>.description.getter(v121, v123);
        v126 = v125;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v96 + 30) = sub_100249A1C(v124, v126, (uint64_t *)&v167);
        swift_bridgeObjectRelease();

        *(_WORD *)(v96 + 38) = 2082;
        v127 = objc_msgSend(v92, "identifiers");
        v128 = objc_msgSend(v127, "description");
        v129 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v128);
        v131 = v130;

        *(_QWORD *)(v96 + 40) = sub_100249A1C(v129, v131, (uint64_t *)&v167);
        swift_bridgeObjectRelease();

        _os_log_impl((void *)&_mh_execute_header, v94, v95, "Loader<%{public}s> loadLyrics(for:completion:) didn't load lyrics [no lyrics found] lyrics.hasStoreLyrics=%{BOOL,public}d lyrics.text=%{public}s song.title=%{public}s song.identifiers=%{public}s", (uint8_t *)v96, 0x30u);
        v132 = v160;
        swift_arrayDestroy(v160, 4, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v132, -1, -1);
        swift_slowDealloc(v96, -1, -1);
      }
      else
      {

      }
      v133 = sub_1002689E4();
      v134 = swift_allocError(&type metadata for LyricsLoader.LyricsError, v133, 0, 0);
      *v135 = 1;
      v162(0, 0, 255, v134);
      swift_errorRelease(v134);
LABEL_46:

      return;
    }
    swift_once(&qword_100498A10, sub_100257E30);
    goto LABEL_28;
  }
  if (qword_100498A10 != -1)
    swift_once(&qword_100498A10, sub_100257E30);
  v30 = type metadata accessor for Logger(0, v13);
  sub_1000086B4(v30, (uint64_t)static Logger.lyrics);
  v31 = a1;
  v32 = v4;
  v33 = v31;
  v34 = v32;
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v161 = a3;
    v162 = a2;
    v37 = swift_slowAlloc(32, -1);
    v38 = (void **)swift_slowAlloc(96, -1);
    v167 = v38;
    *(_DWORD *)v37 = 136446722;
    v165 = v34;
    v39 = (char *)String.init<A>(describing:)(&v165, &type metadata for UnsafeMutableRawPointer);
    *(_QWORD *)(v37 + 4) = sub_100249A1C(v39, v40, (uint64_t *)&v167);
    swift_bridgeObjectRelease();

    *(_WORD *)(v37 + 12) = 2082;
    v41 = objc_msgSend(v33, "title");
    if (v41)
    {
      v42 = v41;
      v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
      v45 = v44;

    }
    else
    {
      v43 = 0;
      v45 = 0;
    }
    v105 = (char *)Optional<A>.description.getter(v43, v45);
    v107 = v106;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v37 + 14) = sub_100249A1C(v105, v107, (uint64_t *)&v167);
    swift_bridgeObjectRelease();

    *(_WORD *)(v37 + 22) = 2082;
    v108 = objc_msgSend(v33, "identifiers");
    v109 = objc_msgSend(v108, "description");
    v110 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
    v112 = v111;

    *(_QWORD *)(v37 + 24) = sub_100249A1C(v110, v112, (uint64_t *)&v167);
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Loader<%{public}s> loadLyrics(for:completion:) returned without loading lyrics [MPModelLyrics was nil] song.title=%{public}s song.identifiers=%{public}s", (uint8_t *)v37, 0x20u);
    swift_arrayDestroy(v38, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v37, -1, -1);

    a2 = v162;
  }
  else
  {

  }
  v113 = sub_1002689E4();
  v114 = swift_allocError(&type metadata for LyricsLoader.LyricsError, v113, 0, 0);
  *v115 = 1;
  a2(0, 0, 255, v114);
  swift_errorRelease(v114);
}

void sub_100266248(void *a1, uint64_t a2, void (*a3)(uint64_t, _QWORD, uint64_t, uint64_t))
{
  uint64_t v5;
  id v6;
  uint64_t v7;

  if (a1)
  {
    v5 = type metadata accessor for Lyrics();
    swift_allocObject(v5, 160, 7);
    v6 = a1;
    v7 = Lyrics.init(identifier:songInfo:)(0, 0, v6);
    a3(v7, 0, 1, 0);

    swift_release(v7);
  }
  else
  {
    a3(0, 0, 255, a2);
  }
}

uint64_t sub_100266304()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v1 = v0;
  v2 = objc_msgSend(v0, "identifiers");
  v3 = MPIdentifierSet.bestStoreIdentifier.getter();
  v5 = v4;

  if (!v5)
  {
    v6 = objc_msgSend(v1, "identifiers");
    v3 = MPIdentifierSet.bestLibraryIdentifier.getter();
    v8 = v7;

    if (!v8)
    {
      v9 = objc_msgSend(v1, "identifiers");
      NSObject.hashValue.getter();

      return dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    }
  }
  return v3;
}

void sub_10026659C(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  char v8;
  char v9;
  _BYTE v10[24];

  v7 = a2 + OBJC_IVAR___MusicLyricsLoader_lyricsOperations;
  swift_beginAccess(a2 + OBJC_IVAR___MusicLyricsLoader_lyricsOperations, v10, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)v7 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10009ABAC(a3, a4);
    v9 = v8;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = 0;
  }
  *a1 = v9 & 1;
}

void sub_100266640(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  void *v11;
  id v12;
  void *v13;
  _BYTE v14[24];

  v7 = (uint64_t *)(a2 + OBJC_IVAR___MusicLyricsLoader_lyricsOperations);
  swift_beginAccess(a2 + OBJC_IVAR___MusicLyricsLoader_lyricsOperations, v14, 0, 0);
  v8 = *v7;
  if (*(_QWORD *)(v8 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = sub_10009ABAC(a3, a4);
    if ((v10 & 1) != 0)
    {
      v11 = *(void **)(*(_QWORD *)(v8 + 56) + 8 * v9);
      v12 = v11;
    }
    else
    {
      v11 = 0;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = 0;
  }
  v13 = *a1;
  *a1 = v11;

}

void sub_1002666F8(uint64_t a1, uint64_t a2)
{
  char *v2;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  char *v11;
  __n128 v12;
  char isEscapingClosureAtFileLocation;
  double v14;
  id v15;
  _QWORD aBlock[5];
  uint64_t v17;
  id v18;

  v18 = 0;
  v5 = *(void **)&v2[OBJC_IVAR___MusicLyricsLoader_accessQueue];
  v6 = (_QWORD *)swift_allocObject(&unk_10045D6C8, 48, 7);
  v6[2] = &v18;
  v6[3] = v2;
  v6[4] = a1;
  v6[5] = a2;
  v7 = swift_allocObject(&unk_10045D6F0, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_10026C144;
  *(_QWORD *)(v7 + 24) = v6;
  aBlock[4] = sub_1000B04E0;
  v17 = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100009BD0;
  aBlock[3] = &unk_10045D708;
  v8 = _Block_copy(aBlock);
  v9 = v17;
  v10 = v5;
  v11 = v2;
  swift_bridgeObjectRetain();
  swift_retain(v7);
  swift_release(v9);
  dispatch_sync(v10, v8);

  _Block_release(v8);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v7, "", 122, 310, 31, 1, v12);
  *(_QWORD *)&v14 = swift_release(v7).n128_u64[0];
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    objc_msgSend(v18, "cancel", v14);
    v15 = v18;
    swift_release(v6);

  }
}

void sub_100266868(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  _BYTE v15[24];
  _BYTE v16[24];

  v7 = (uint64_t *)(a2 + OBJC_IVAR___MusicLyricsLoader_lyricsOperations);
  swift_beginAccess(a2 + OBJC_IVAR___MusicLyricsLoader_lyricsOperations, v16, 0, 0);
  v8 = *v7;
  if (*(_QWORD *)(*v7 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = sub_10009ABAC(a3, a4);
    if ((v10 & 1) != 0)
    {
      v11 = *(void **)(*(_QWORD *)(v8 + 56) + 8 * v9);
      v12 = v11;
    }
    else
    {
      v11 = 0;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = 0;
  }
  v13 = *a1;
  *a1 = v11;

  swift_beginAccess(v7, v15, 33, 0);
  swift_bridgeObjectRetain();
  v14 = (void *)sub_100268A94(a3, a4);
  swift_endAccess(v15);
  swift_bridgeObjectRelease();

}

void sub_10026696C(void *a1, uint64_t a2, uint64_t a3, _QWORD *a4, void (*a5)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t Strong;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t (**v27)(void *, void *);
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)();
  void *v38;
  _QWORD *v39;
  NSObject *v40;
  id v41;
  __n128 v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  id v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  id v65;
  Class isa;
  id v67;
  _QWORD *v68;
  void (*v69)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v70;
  char *v71;
  void *v72;
  _QWORD *v73;
  id v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(_QWORD, _QWORD, _QWORD, _QWORD);
  void *v83;
  char *v84;
  __int128 v85[2];
  uint64_t aBlock;
  unint64_t v87;
  void *v88;
  void *v89;
  uint64_t (**v90)(void *, void *);
  _QWORD *v91;
  char v92[24];
  char v93[32];

  v81 = a6;
  v82 = a5;
  v83 = a1;
  v80 = type metadata accessor for String.Encoding(0);
  v79 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin();
  v78 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a3 + 16;
  swift_beginAccess(v10, v93, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v10);
  if (Strong)
  {
    v13 = (void *)Strong;
    aBlock = 0x3C726564616F4CLL;
    v87 = 0xE700000000000000;
    *(_QWORD *)&v85[0] = Strong;
    v14._countAndFlagsBits = String.init<A>(describing:)(v85, &type metadata for UnsafeMutableRawPointer);
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 62;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);

    v16 = aBlock;
    v17 = (char *)v87;
  }
  else
  {
    v17 = (char *)0xEC0000003E303078;
    v16 = 0x303C726564616F4CLL;
  }
  v84 = (char *)v16;
  if (qword_100498A10 != -1)
    swift_once(&qword_100498A10, sub_100257E30);
  v18 = type metadata accessor for Logger(0, v12);
  sub_1000086B4(v18, (uint64_t)static Logger.lyrics);
  sub_1000244B0((uint64_t)a4, (uint64_t)&aBlock);
  v19 = swift_bridgeObjectRetain_n(v17, 2);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc(22, -1);
    v76 = a4;
    v23 = v22;
    v24 = swift_slowAlloc(64, -1);
    v77 = a2;
    v25 = v24;
    *(_QWORD *)&v85[0] = v24;
    *(_DWORD *)v23 = 136446466;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v23 + 4) = sub_100249A1C(v84, v17, (uint64_t *)v85);
    swift_bridgeObjectRelease_n(v17, 3);
    *(_WORD *)(v23 + 12) = 2082;
    v26 = v89;
    v27 = v90;
    sub_10000ABC8(&aBlock, (uint64_t)v89);
    v28 = (char *)v27[2](v26, v27);
    *(_QWORD *)(v23 + 14) = sub_100249A1C(v28, v29, (uint64_t *)v85);
    swift_bridgeObjectRelease();
    sub_10000682C(&aBlock);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "%{public}s loadLyrics(for:completion:) completed for %{public}s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
    a2 = v77;
    swift_slowDealloc(v25, -1, -1);
    v30 = v23;
    a4 = v76;
    swift_slowDealloc(v30, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v17, 2);
    sub_10000682C(&aBlock);
  }

  swift_beginAccess(v10, v92, 0, 0);
  v31 = swift_unknownObjectWeakLoadStrong(v10);
  if (!v31)
  {
    v37 = 0;
    v35 = 0;
    v43 = v83;
    if (a2)
      goto LABEL_19;
    goto LABEL_14;
  }
  v32 = (void *)v31;
  v33 = *(void **)(v31 + OBJC_IVAR___MusicLyricsLoader_accessQueue);
  v34 = a4;
  sub_1000244B0((uint64_t)a4, (uint64_t)v85);
  v35 = swift_allocObject(&unk_10045D628, 64, 7);
  *(_QWORD *)(v35 + 16) = v32;
  sub_1000137C8(v85, v35 + 24);
  v36 = swift_allocObject(&unk_10045D650, 32, 7);
  v37 = sub_10026C0F0;
  *(_QWORD *)(v36 + 16) = sub_10026C0F0;
  *(_QWORD *)(v36 + 24) = v35;
  v90 = (uint64_t (**)(void *, void *))sub_1000B04E0;
  v91 = (_QWORD *)v36;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v87 = 1107296256;
  v88 = sub_100009BD0;
  v89 = &unk_10045D668;
  v38 = _Block_copy(&aBlock);
  v39 = v91;
  v40 = v33;
  v41 = v32;
  swift_retain(v36);
  swift_release(v39);
  dispatch_sync(v40, v38);

  _Block_release(v38);
  LOBYTE(v41) = swift_isEscapingClosureAtFileLocation(v36, "", 122, 349, 39, 1, v42);
  swift_release(v36);
  if ((v41 & 1) == 0)
  {
    a4 = v34;
    v43 = v83;
    if (a2)
      goto LABEL_19;
LABEL_14:
    if (v43)
    {
      v44 = v43;
      v45 = objc_msgSend(v44, "lyrics");
      if (!v45)
        goto LABEL_18;
      v46 = v45;
      v47 = objc_msgSend(v45, "TTML");

      if (!v47)
        goto LABEL_18;
      v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
      v50 = v49;

      v51 = v78;
      static String.Encoding.utf8.getter(v52);
      v53 = String.data(using:allowLossyConversion:)(v51, 0, v48, v50);
      v55 = v54;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v79 + 8))(v51, v80);
      if (v55 >> 60 != 15)
      {
        v65 = objc_allocWithZone((Class)MSVLyricsTTMLParser);
        sub_1000516F8(v53, v55);
        isa = Data._bridgeToObjectiveC()().super.isa;
        v67 = objc_msgSend(v65, "initWithTTMLData:", isa);
        sub_1000067D4(v53, v55);

        v68 = (_QWORD *)swift_allocObject(&unk_10045D5D8, 56, 7);
        v70 = v81;
        v69 = v82;
        v68[2] = v44;
        v68[3] = v69;
        v71 = v84;
        v68[4] = v70;
        v68[5] = v71;
        v68[6] = v17;
        v90 = (uint64_t (**)(void *, void *))sub_10026C0B4;
        v91 = v68;
        aBlock = (uint64_t)_NSConcreteStackBlock;
        v87 = 1107296256;
        v88 = sub_100266300;
        v89 = &unk_10045D5F0;
        v72 = _Block_copy(&aBlock);
        v73 = v91;
        v74 = v44;
        swift_retain(v70);
        objc_msgSend(v67, "parseWithCompletion:", v72, swift_release(v73).n128_f64[0]);

        _Block_release(v72);
        sub_1000067D4(v53, v55);
      }
      else
      {
LABEL_18:
        v56 = sub_1002689E4();
        v57 = swift_allocError(&type metadata for LyricsLoader.LyricsError, v56, 0, 0);
        *v58 = 1;
        v59 = v44;
        sub_1002695A8(v57, v59, v84, v17);
        swift_errorRelease(v57);
        swift_bridgeObjectRelease();

        v60 = swift_allocError(&type metadata for LyricsLoader.LyricsError, v56, 0, 0);
        *v61 = 1;
        v82(0, 0, 255, v60);

        swift_errorRelease(v60);
      }
      goto LABEL_20;
    }
LABEL_19:
    v62 = a4[3];
    v63 = a4[4];
    v64 = sub_10000ABC8(a4, v62);
    sub_100269CB0(a2, (uint64_t)v64, v84, v17, v62, v63);
    swift_bridgeObjectRelease();
    v82(0, 0, 255, a2);
LABEL_20:
    sub_10003A5C8((uint64_t)v37, v35);
    return;
  }
  __break(1u);
}

void sub_100267088(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _BYTE v9[24];

  v3 = a2[3];
  v4 = a2[4];
  sub_10000ABC8(a2, v3);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  v7 = v6;
  swift_beginAccess(a1 + OBJC_IVAR___MusicLyricsLoader_lyricsOperations, v9, 33, 0);
  v8 = (void *)sub_100268A94(v5, v7);
  swift_endAccess(v9);
  swift_bridgeObjectRelease();

}

double sub_100267128(void *a1, uint64_t a2, void *a3, void (*a4)(uint64_t, _QWORD, uint64_t, uint64_t), uint64_t a5, char *a6, char *a7)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v19;
  double result;
  uint64_t v21;
  id v22;
  uint64_t v23;

  if (!a1)
  {
    v19 = a3;
    sub_1002695A8(a2, v19, a6, a7);

    a4(0, 0, 255, a2);
    return result;
  }
  v9 = a1;
  v10 = objc_msgSend(a3, "lyrics");
  v11 = v10;
  if (!v10)
    goto LABEL_7;
  v12 = objc_msgSend(v10, "identifiers");

  v13 = objc_msgSend(v12, "lyricsID");
  if (!v13)
  {
    v11 = 0;
LABEL_7:
    v15 = 0;
    goto LABEL_8;
  }
  v11 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v15 = v14;

LABEL_8:
  v21 = type metadata accessor for Lyrics();
  swift_allocObject(v21, 160, 7);
  v22 = v9;
  v23 = Lyrics.init(identifier:songInfo:)((uint64_t)v11, v15, v22);
  a4(v23, 0, 1, 0);

  *(_QWORD *)&result = swift_release(v23).n128_u64[0];
  return result;
}

uint64_t sub_1002672A4(uint64_t a1, _QWORD *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  _BYTE v15[24];

  v5 = a2[3];
  v6 = a2[4];
  sub_10000ABC8(a2, v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
  v9 = v8;
  v10 = (_QWORD *)(a1 + OBJC_IVAR___MusicLyricsLoader_lyricsOperations);
  swift_beginAccess(v10, v15, 33, 0);
  v11 = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v10);
  v14 = *v10;
  *v10 = 0x8000000000000000;
  sub_100268CA0((uint64_t)v11, v7, v9, isUniquelyReferenced_nonNull_native);
  *v10 = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess(v15);
}

id LyricsLoader.init()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  objc_class *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  objc_super v23;
  _QWORD *v24;

  v22 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin();
  v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin();
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DispatchQoS(0);
  __chkstk_darwin();
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = OBJC_IVAR___MusicLyricsLoader_lyricsOperations;
  v10 = v0;
  *(_QWORD *)&v0[v9] = sub_10023378C((uint64_t)_swiftEmptyArrayStorage);
  v21 = OBJC_IVAR___MusicLyricsLoader_accessQueue;
  sub_1000087DC(0, (unint64_t *)&qword_100499FB0, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v11);
  v24 = _swiftEmptyArrayStorage;
  v12 = sub_100006924((unint64_t *)&unk_100498E10, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v13 = sub_100005574((uint64_t *)&unk_100499FC0);
  v14 = sub_100233CE4();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v13, v14, v4, v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v22);
  v15 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001BLL, 0x80000001003B78F0, v8, v6, v3, 0);
  *(_QWORD *)&v10[v21] = v15;
  v16 = OBJC_IVAR___MusicLyricsLoader_operationQueue;
  v17 = objc_msgSend(objc_allocWithZone((Class)NSOperationQueue), "init");
  objc_msgSend(v17, "setMaxConcurrentOperationCount:", 1);
  *(_QWORD *)&v10[v16] = v17;

  v18 = (objc_class *)type metadata accessor for LyricsLoader();
  v23.receiver = v10;
  v23.super_class = v18;
  return objc_msgSendSuper2(&v23, "init");
}

id LyricsLoader.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LyricsLoader();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t LyricsLoader.Song.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for Song(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  v5 = type metadata accessor for LyricsLoader.Song(0);
  return swift_storeEnumTagMultiPayload(a2, v5, 0);
}

uint64_t LyricsLoader.Song.init(_:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;

  *a3 = a1;
  a3[1] = a2;
  v4 = type metadata accessor for LyricsLoader.Song(0);
  swift_storeEnumTagMultiPayload(a3, v4, 1);
  return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a3, 0, 1, v4);
}

void LyricsLoader.Song.modelObjectSong.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  __n128 v16;
  __n128 v17;
  _QWORD aBlock[5];
  uint64_t v19;

  v1 = v0;
  v2 = type metadata accessor for Song(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LyricsLoader.Song(0);
  __chkstk_darwin();
  v8 = (id *)((char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10026B7E4(v1, (uint64_t)v8);
  if (swift_getEnumCaseMultiPayload(v8, v6) == 1)
  {

  }
  else
  {
    (*(void (**)(char *, id *, uint64_t))(v3 + 32))(v5, v8, v2);
    sub_1000087DC(0, &qword_100499FD8, MPIdentifierSet_ptr);
    v9 = objc_msgSend((id)objc_opt_self(MPModelSong), "kindWithVariants:", 1);
    __chkstk_darwin();
    aBlock[-2] = v5;
    sub_1002683E0(0xD000000000000012, 0x80000001003B8630, v10, (uint64_t)sub_10026B828, (uint64_t)&aBlock[-4]);
    v12 = v11;
    __chkstk_darwin();
    aBlock[-2] = v5;
    v13 = objc_allocWithZone((Class)MPModelSong);
    v14 = swift_allocObject(&unk_10045D140, 32, 7);
    *(_QWORD *)(v14 + 16) = sub_10026B830;
    *(_QWORD *)(v14 + 24) = &aBlock[-4];
    aBlock[4] = sub_100009BB0;
    v19 = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000E776C;
    aBlock[3] = &unk_10045D158;
    v15 = _Block_copy(aBlock);
    swift_retain(v14);
    objc_msgSend(v13, "initWithIdentifiers:block:", v12, v15);

    _Block_release(v15);
    v16 = swift_release(v19);
    LOBYTE(v12) = swift_isEscapingClosureAtFileLocation(v14, "", 0, 0, 0, 1, v16);
    v17 = swift_release(v14);
    if ((v12 & 1) != 0)
      __break(1u);
    else
      (*(void (**)(char *, uint64_t, __n128))(v3 + 8))(v5, v2, v17);
  }
}

void sub_100267998(uint64_t isEscapingClosureAtFileLocation, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  __n128 v26;
  char v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  void *v32;
  uint64_t (*v33)();
  uint64_t v34;
  _QWORD aBlock[5];
  uint64_t v36;

  v4 = type metadata accessor for Song(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = __chkstk_darwin();
  v8 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = Song.catalogID.getter(v7);
  if (v10)
  {
    v11 = v9;
    v12 = v10;
    v13 = swift_allocObject(&unk_10045D470, 32, 7);
    *(_QWORD *)(v13 + 16) = v11;
    *(_QWORD *)(v13 + 24) = v12;
    v4 = swift_allocObject(&unk_10045D498, 32, 7);
    *(_QWORD *)(v4 + 16) = sub_10026C00C;
    *(_QWORD *)(v4 + 24) = v13;
    aBlock[4] = sub_10000AD24;
    v36 = v4;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1002680A4;
    aBlock[3] = &unk_10045D4B0;
    v8 = (char *)_Block_copy(aBlock);
    v6 = v36;
    swift_retain(v4);
    objc_msgSend((id)isEscapingClosureAtFileLocation, "setUniversalStoreIdentifiersWithBlock:", v8, swift_release(v6).n128_f64[0]);
    _Block_release(v8);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v4, "", 122, 401, 74, 1, v14);
    swift_release(v13);
    swift_release(v4);
    if ((isEscapingClosureAtFileLocation & 1) == 0)
      return;
    __break(1u);
  }
  static ApplicationCapabilities.shared.getter((uint64_t)aBlock);
  sub_1000BC0D0(aBlock);
  if ((aBlock[0] & 0x10000) != 0)
    goto LABEL_8;
  sub_1000087DC(0, &qword_10049A140, MPMediaLibrary_ptr);
  v15 = static MPMediaLibrary.device.getter();
  v16 = objc_msgSend(v15, "uniqueIdentifier");

  if (v16)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
    v17 = *(unsigned __int8 *)(v5 + 80);
    v18 = (v17 + 16) & ~v17;
    v6 = swift_allocObject(&unk_10045D380, v18 + v6, v17 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v6 + v18, v8, v4);
    v4 = swift_allocObject(&unk_10045D3A8, 32, 7);
    *(_QWORD *)(v4 + 16) = sub_10026BF00;
    *(_QWORD *)(v4 + 24) = v6;
    v33 = sub_10000AD24;
    v34 = v4;
    v29 = _NSConcreteStackBlock;
    v30 = 1107296256;
    v31 = sub_1002680A4;
    v32 = &unk_10045D3C0;
    v8 = (char *)_Block_copy(&v29);
    a2 = v34;
    swift_retain(v4);
    objc_msgSend((id)isEscapingClosureAtFileLocation, "setLibraryIdentifiersWithDatabaseID:block:", v16, v8, swift_release(a2).n128_f64[0]);

    _Block_release(v8);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v4, "", 122, 409, 87, 1, v19);
    swift_release(v6);
    swift_release(v4);
    if ((isEscapingClosureAtFileLocation & 1) != 0)
    {
      __break(1u);
LABEL_8:
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
      v20 = *(unsigned __int8 *)(v5 + 80);
      v21 = (v20 + 16) & ~v20;
      v22 = swift_allocObject(&unk_10045D3F8, v21 + v6, v20 | 7);
      (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v22 + v21, v8, v4);
      v23 = swift_allocObject(&unk_10045D420, 32, 7);
      *(_QWORD *)(v23 + 16) = sub_10026BF80;
      *(_QWORD *)(v23 + 24) = v22;
      v33 = sub_10000AD24;
      v34 = v23;
      v29 = _NSConcreteStackBlock;
      v30 = 1107296256;
      v31 = sub_1002680A4;
      v32 = &unk_10045D438;
      v24 = _Block_copy(&v29);
      v25 = v34;
      swift_retain(v23);
      objc_msgSend((id)isEscapingClosureAtFileLocation, "setUniversalStoreIdentifiersWithBlock:", v24, swift_release(v25).n128_f64[0]);
      _Block_release(v24);
      v27 = swift_isEscapingClosureAtFileLocation(v23, "", 122, 405, 74, 1, v26);
      swift_release(v22);
      swift_release(v23);
      if ((v27 & 1) != 0)
        __break(1u);
    }
  }
}

id sub_100267DC0(id result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  _QWORD v26[3];

  v3 = a2;
  v4 = result;
  v5 = HIBYTE(a3) & 0xF;
  v6 = a2 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0x2000000000000000) != 0)
    v7 = HIBYTE(a3) & 0xF;
  else
    v7 = v6;
  if (!v7)
  {
    v21 = 0;
    return objc_msgSend(v4, "setAdamID:", v21);
  }
  if ((a3 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    v10 = (uint64_t)sub_100268DCC(v3, a3, 10);
    LOBYTE(v3) = v25;
    swift_bridgeObjectRelease();
LABEL_44:
    if ((v3 & 1) != 0)
      v21 = 0;
    else
      v21 = v10;
    return objc_msgSend(v4, "setAdamID:", v21);
  }
  if ((a3 & 0x2000000000000000) == 0)
  {
    if ((v3 & 0x1000000000000000) != 0)
      v9 = (unsigned __int8 *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v3, a3);
    v10 = (uint64_t)sub_1001EAE98(v9, v6, 10);
    LOBYTE(v3) = v11 & 1;
    goto LABEL_44;
  }
  v26[0] = v3;
  v26[1] = a3 & 0xFFFFFFFFFFFFFFLL;
  if (v3 == 43)
  {
    if (!v5)
      goto LABEL_58;
    if (v5 == 1 || (BYTE1(v3) - 48) > 9u)
      goto LABEL_31;
    v10 = (BYTE1(v3) - 48);
    if (v5 != 2)
    {
      if ((BYTE2(v3) - 48) > 9u)
        goto LABEL_31;
      v10 = 10 * (BYTE1(v3) - 48) + (BYTE2(v3) - 48);
      v12 = v5 - 3;
      if (v12)
      {
        v13 = (unsigned __int8 *)v26 + 3;
        while (1)
        {
          v14 = *v13 - 48;
          if (v14 > 9)
            goto LABEL_31;
          v15 = 10 * v10;
          if ((unsigned __int128)(v10 * (__int128)10) >> 64 != (10 * v10) >> 63)
            goto LABEL_31;
          v10 = v15 + v14;
          if (__OFADD__(v15, v14))
            goto LABEL_31;
          LOBYTE(v3) = 0;
          ++v13;
          if (!--v12)
            goto LABEL_44;
        }
      }
    }
LABEL_43:
    LOBYTE(v3) = 0;
    goto LABEL_44;
  }
  if (v3 != 45)
  {
    if (!v5 || (v3 - 48) > 9u)
      goto LABEL_31;
    v10 = (v3 - 48);
    if (v5 != 1)
    {
      if ((BYTE1(v3) - 48) > 9u)
        goto LABEL_31;
      v10 = 10 * (v3 - 48) + (BYTE1(v3) - 48);
      v16 = v5 - 2;
      if (v16)
      {
        v17 = (unsigned __int8 *)v26 + 2;
        while (1)
        {
          v18 = *v17 - 48;
          if (v18 > 9)
            goto LABEL_31;
          v19 = 10 * v10;
          if ((unsigned __int128)(v10 * (__int128)10) >> 64 != (10 * v10) >> 63)
            goto LABEL_31;
          v10 = v19 + v18;
          if (__OFADD__(v19, v18))
            goto LABEL_31;
          LOBYTE(v3) = 0;
          ++v17;
          if (!--v16)
            goto LABEL_44;
        }
      }
    }
    goto LABEL_43;
  }
  if (v5)
  {
    if (v5 != 1 && (BYTE1(v3) - 48) <= 9u)
    {
      if (v5 == 2)
      {
        LOBYTE(v3) = 0;
        v10 = -(uint64_t)(BYTE1(v3) - 48);
        goto LABEL_44;
      }
      if ((BYTE2(v3) - 48) <= 9u)
      {
        v10 = -10 * (BYTE1(v3) - 48) - (BYTE2(v3) - 48);
        v20 = v5 - 3;
        if (!v20)
          goto LABEL_43;
        v22 = (unsigned __int8 *)v26 + 3;
        while (1)
        {
          v23 = *v22 - 48;
          if (v23 > 9)
            break;
          v24 = 10 * v10;
          if ((unsigned __int128)(v10 * (__int128)10) >> 64 != (10 * v10) >> 63)
            break;
          v10 = v24 - v23;
          if (__OFSUB__(v24, v23))
            break;
          LOBYTE(v3) = 0;
          ++v22;
          if (!--v20)
            goto LABEL_44;
        }
      }
    }
LABEL_31:
    v10 = 0;
    LOBYTE(v3) = 1;
    goto LABEL_44;
  }
  __break(1u);
LABEL_58:
  __break(1u);
  return result;
}

void sub_1002680A8(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;

  Song.id.getter();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  objc_msgSend(a1, "setUniversalCloudLibraryID:", v4);

}

uint64_t sub_100268100(void *a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  _QWORD v26[3];

  result = Song.id.getter();
  v4 = v3;
  v5 = HIBYTE(v3) & 0xF;
  v6 = result & 0xFFFFFFFFFFFFLL;
  if ((v4 & 0x2000000000000000) != 0)
    v7 = v5;
  else
    v7 = result & 0xFFFFFFFFFFFFLL;
  if (!v7)
  {
    swift_bridgeObjectRelease();
    v21 = 0;
    return (uint64_t)objc_msgSend(a1, "setPersistentID:", v21);
  }
  if ((v4 & 0x1000000000000000) != 0)
  {
    v9 = (uint64_t)sub_100268DCC(result, v4, 10);
    v11 = v25;
LABEL_44:
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0)
      v21 = 0;
    else
      v21 = v9;
    return (uint64_t)objc_msgSend(a1, "setPersistentID:", v21);
  }
  if ((v4 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
      v8 = (unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(result, v4);
    v9 = (uint64_t)sub_1001EAE98(v8, v6, 10);
    v11 = v10 & 1;
    goto LABEL_44;
  }
  v26[0] = result;
  v26[1] = v4 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (!v5)
      goto LABEL_58;
    if (v5 == 1 || (BYTE1(result) - 48) > 9u)
      goto LABEL_31;
    v9 = (BYTE1(result) - 48);
    if (v5 != 2)
    {
      if ((BYTE2(result) - 48) > 9u)
        goto LABEL_31;
      v9 = 10 * (BYTE1(result) - 48) + (BYTE2(result) - 48);
      v12 = v5 - 3;
      if (v12)
      {
        v13 = (unsigned __int8 *)v26 + 3;
        while (1)
        {
          v14 = *v13 - 48;
          if (v14 > 9)
            goto LABEL_31;
          v15 = 10 * v9;
          if ((unsigned __int128)(v9 * (__int128)10) >> 64 != (10 * v9) >> 63)
            goto LABEL_31;
          v9 = v15 + v14;
          if (__OFADD__(v15, v14))
            goto LABEL_31;
          v11 = 0;
          ++v13;
          if (!--v12)
            goto LABEL_44;
        }
      }
    }
LABEL_43:
    v11 = 0;
    goto LABEL_44;
  }
  if (result != 45)
  {
    if (!v5 || (result - 48) > 9u)
      goto LABEL_31;
    v9 = (result - 48);
    if (v5 != 1)
    {
      if ((BYTE1(result) - 48) > 9u)
        goto LABEL_31;
      v9 = 10 * (result - 48) + (BYTE1(result) - 48);
      v16 = v5 - 2;
      if (v16)
      {
        v17 = (unsigned __int8 *)v26 + 2;
        while (1)
        {
          v18 = *v17 - 48;
          if (v18 > 9)
            goto LABEL_31;
          v19 = 10 * v9;
          if ((unsigned __int128)(v9 * (__int128)10) >> 64 != (10 * v9) >> 63)
            goto LABEL_31;
          v9 = v19 + v18;
          if (__OFADD__(v19, v18))
            goto LABEL_31;
          v11 = 0;
          ++v17;
          if (!--v16)
            goto LABEL_44;
        }
      }
    }
    goto LABEL_43;
  }
  if (v5)
  {
    if (v5 != 1 && (BYTE1(result) - 48) <= 9u)
    {
      if (v5 == 2)
      {
        v11 = 0;
        v9 = -(uint64_t)(BYTE1(result) - 48);
        goto LABEL_44;
      }
      if ((BYTE2(result) - 48) <= 9u)
      {
        v9 = -10 * (BYTE1(result) - 48) - (BYTE2(result) - 48);
        v20 = v5 - 3;
        if (!v20)
          goto LABEL_43;
        v22 = (unsigned __int8 *)v26 + 3;
        while (1)
        {
          v23 = *v22 - 48;
          if (v23 > 9)
            break;
          v24 = 10 * v9;
          if ((unsigned __int128)(v9 * (__int128)10) >> 64 != (10 * v9) >> 63)
            break;
          v9 = v24 - v23;
          if (__OFSUB__(v24, v23))
            break;
          v11 = 0;
          ++v22;
          if (!--v20)
            goto LABEL_44;
        }
      }
    }
LABEL_31:
    v9 = 0;
    v11 = 1;
    goto LABEL_44;
  }
  __break(1u);
LABEL_58:
  __break(1u);
  return result;
}

void sub_1002683E0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9;
  NSString v10;
  uint64_t v11;
  void *v12;
  __n128 v13;
  _QWORD v14[5];
  uint64_t v15;

  v9 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v11 = swift_allocObject(&unk_10045D330, 32, 7);
  *(_QWORD *)(v11 + 16) = a4;
  *(_QWORD *)(v11 + 24) = a5;
  v14[4] = sub_10000AD24;
  v15 = v11;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_10026C348;
  v14[3] = &unk_10045D348;
  v12 = _Block_copy(v14);
  swift_retain(v11);
  objc_msgSend(v9, "initWithSource:modelKind:block:", v10, a3, v12);

  _Block_release(v12);
  v13 = swift_release(v15);
  LOBYTE(a3) = swift_isEscapingClosureAtFileLocation(v11, "", 0, 0, 0, 1, v13);
  swift_release(v11);
  if ((a3 & 1) != 0)
    __break(1u);
}

void sub_10026852C(void *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  id v6;
  NSString v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  __n128 v13;
  double v14;
  _QWORD v15[4];
  _QWORD aBlock[5];
  uint64_t v17;

  v4 = objc_opt_self(MPModelSong);
  v5 = (void *)swift_dynamicCastObjCClassUnconditional(a1, v4, 0, 0, 0);
  v6 = a1;
  Song.title.getter(v6);
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v5, "setTitle:", v7);

  objc_msgSend(v5, "setArtistUploadedContent:", 0);
  v8 = objc_msgSend((id)objc_opt_self(MPIdentifierSet), "emptyIdentifierSet");
  v15[2] = a2;
  v9 = objc_allocWithZone((Class)MPModelLyrics);
  v10 = swift_allocObject(&unk_10045D2E0, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_10026BED4;
  *(_QWORD *)(v10 + 24) = v15;
  aBlock[4] = sub_10000AD24;
  v17 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E776C;
  aBlock[3] = &unk_10045D2F8;
  v11 = _Block_copy(aBlock);
  swift_retain(v10);
  v12 = objc_msgSend(v9, "initWithIdentifiers:block:", v8, v11);

  _Block_release(v11);
  v13 = swift_release(v17);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation(v10, "", 0, 0, 0, 1, v13);
  *(_QWORD *)&v14 = swift_release(v10).n128_u64[0];
  if ((v8 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    objc_msgSend(v5, "setLyrics:", v12, v14);

    objc_msgSend(v5, "setHasVideo:", 0);
  }
}

void sub_100268718(void *a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  id v6;

  v2 = objc_opt_self(MPModelLyrics);
  v3 = (void *)swift_dynamicCastObjCClassUnconditional(a1, v2, 0, 0, 0);
  v6 = a1;
  v4 = objc_msgSend(v3, "setHasStoreLyrics:", Song.hasLyrics.getter() & 1);
  v5 = objc_msgSend(v3, "setHasLibraryLyrics:", Song.hasCustomLyrics.getter(v4) & 1);
  objc_msgSend(v3, "setHasTimeSyncedLyrics:", Song.hasTimeSyncedLyrics.getter(v5) & 1);
  objc_msgSend(v3, "setText:", 0);

}

uint64_t sub_1002687E4()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::String v17;

  v1 = v0;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease(0xE000000000000000);
  v2 = objc_msgSend(v0, "title");
  if (v2)
  {
    v3 = v2;
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v6 = v5;

  }
  else
  {
    v4 = 0;
    v6 = 0;
  }
  v7 = Optional<A>.description.getter(v4, v6);
  v9 = v8;
  swift_bridgeObjectRelease(v6);
  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v9);
  v11._object = (void *)0x80000001003B86A0;
  v11._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v11);
  v12 = objc_msgSend(v1, "identifiers");
  v13 = objc_msgSend(v12, "description");
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v16 = v15;

  v17._countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);

  swift_bridgeObjectRelease(v16);
  return 0x7469742E676E6F73;
}

uint64_t sub_100268940()
{
  return sub_100266304();
}

uint64_t sub_100268960()
{
  return sub_1002687E4();
}

_QWORD *sub_100268980(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_100005574(&qword_100499A20);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

unint64_t sub_1002689E4()
{
  unint64_t result;

  result = qword_100499F48;
  if (!qword_100499F48)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LyricsLoader.LyricsError, &type metadata for LyricsLoader.LyricsError);
    atomic_store(result, (unint64_t *)&qword_100499F48);
  }
  return result;
}

void sub_100268A2C()
{
  uint64_t v0;

  sub_100266640(*(void ***)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_100268A38()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100268A48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100268A58(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_100268A60(uint64_t a1)
{
  uint64_t v1;

  return sub_100264904(a1, *(char **)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

void sub_100268A70()
{
  uint64_t v0;

  sub_10026659C(*(_BYTE **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_100268A7C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

double sub_100268A8C(uint64_t a1)
{
  uint64_t v1;

  return sub_100264D7C(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_100268A94(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_10009ABAC(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v9 = *v3;
  v12 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10025BA98();
    v9 = v12;
  }
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v6);
  sub_1001814F4(v6, v9);
  *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100268B60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = sub_10009ABAC(a3, a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7] + 16 * v14;
        result = sub_1000067E8(*(_QWORD *)v21, *(_QWORD *)(v21 + 8));
        *(_QWORD *)v21 = a1;
        *(_QWORD *)(v21 + 8) = a2;
        return result;
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      sub_10025B720();
      goto LABEL_7;
    }
    sub_10025A640(v17, a5 & 1);
    v23 = sub_10009ABAC(a3, a4);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10009A910(v14, a3, a4, a1, a2, v20);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_100268CA0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_10009ABAC(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];

        *(_QWORD *)(v19 + 8 * v12) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10025BA98();
      goto LABEL_7;
    }
    sub_10025AC60(v15, a4 & 1);
    v20 = sub_10009ABAC(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10025B6D8(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain();
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

unsigned __int8 *sub_100268DCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  swift_bridgeObjectRetain();
  v4 = String.init<A>(_:)(&v14, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v6 = v4;
  v7 = v5;
  if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v7) & 0xF;
    v14 = v6;
    v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }
  v6 = sub_100268EB0(v4, v5);
  v11 = v10;
  swift_bridgeObjectRelease();
  v7 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 0x1000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }
LABEL_7:
  v12 = sub_1001EAE98(v8, v9, a3);
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_100268EB0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v8 = sub_100268F2C(v4, v5, v6, v7);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_100268F2C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_1001EB2D4(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_100268980(v12, 0);
      v5 = sub_1001EB3C0((unint64_t)v14, v8 + 32, v9, a1, a2, v5, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v13 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v13;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v14 + v8, v9 - v8);
  }
}

void sub_100269070(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  NSObject *v22;
  char *v23;
  id v24;
  __n128 v25;
  double v26;
  void **v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t (*v31)();
  _QWORD *v32;
  __int128 v33[2];
  _QWORD v34[5];

  v10 = type metadata accessor for Song(0);
  v34[3] = v10;
  v34[4] = &off_10045D180;
  v11 = sub_1000207D4(v34);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v11, a2, v10);
  v12 = swift_allocObject(&unk_10045D4E8, 24, 7);
  swift_unknownObjectWeakInit(v12 + 16);
  sub_1000244B0((uint64_t)v34, (uint64_t)v33);
  v13 = (_QWORD *)swift_allocObject(&unk_10045D768, 80, 7);
  v13[2] = v12;
  sub_1000137C8(v33, (uint64_t)(v13 + 3));
  v13[8] = a3;
  v13[9] = a4;
  v31 = sub_10026C34C;
  v32 = v13;
  v27 = _NSConcreteStackBlock;
  v28 = 1107296256;
  v29 = sub_100266300;
  v30 = &unk_10045D780;
  v14 = _Block_copy(&v27);
  v15 = v32;
  swift_retain(a4);
  v16 = objc_msgSend(a1, "newOperationWithResponseHandler:", v14, swift_release(v15).n128_f64[0]);
  _Block_release(v14);
  v17 = *(void **)&a5[OBJC_IVAR___MusicLyricsLoader_accessQueue];
  sub_1000244B0((uint64_t)v34, (uint64_t)v33);
  v18 = swift_allocObject(&unk_10045D7B8, 72, 7);
  *(_QWORD *)(v18 + 16) = a5;
  sub_1000137C8(v33, v18 + 24);
  *(_QWORD *)(v18 + 64) = v16;
  v19 = swift_allocObject(&unk_10045D7E0, 32, 7);
  *(_QWORD *)(v19 + 16) = sub_10026C2BC;
  *(_QWORD *)(v19 + 24) = v18;
  v31 = sub_1000B04E0;
  v32 = (_QWORD *)v19;
  v27 = _NSConcreteStackBlock;
  v28 = 1107296256;
  v29 = sub_100009BD0;
  v30 = &unk_10045D7F8;
  v20 = _Block_copy(&v27);
  v21 = v32;
  v22 = v17;
  v23 = a5;
  v24 = v16;
  swift_retain(v19);
  swift_release(v21);
  dispatch_sync(v22, v20);

  _Block_release(v20);
  LOBYTE(v16) = swift_isEscapingClosureAtFileLocation(v19, "", 122, 377, 31, 1, v25);
  *(_QWORD *)&v26 = swift_release(v19).n128_u64[0];
  if ((v16 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    objc_msgSend(*(id *)&v23[OBJC_IVAR___MusicLyricsLoader_operationQueue], "addOperation:", v24, v26);

    swift_release(v18);
    sub_10000682C(v34);
  }
}

void sub_100269310(void *a1, void *a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  NSObject *v21;
  char *v22;
  id v23;
  __n128 v24;
  double v25;
  void **v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  _QWORD *v31;
  __int128 v32[2];
  _QWORD v33[5];

  v33[3] = sub_1000087DC(0, &qword_10049A210, MPModelSong_ptr);
  v33[4] = &off_10045D198;
  v33[0] = a2;
  v10 = swift_allocObject(&unk_10045D4E8, 24, 7);
  swift_unknownObjectWeakInit(v10 + 16);
  sub_1000244B0((uint64_t)v33, (uint64_t)v32);
  v11 = (_QWORD *)swift_allocObject(&unk_10045D510, 80, 7);
  v11[2] = v10;
  sub_1000137C8(v32, (uint64_t)(v11 + 3));
  v11[8] = a3;
  v11[9] = a4;
  v30 = sub_10026C04C;
  v31 = v11;
  v26 = _NSConcreteStackBlock;
  v27 = 1107296256;
  v28 = sub_100266300;
  v29 = &unk_10045D528;
  v12 = _Block_copy(&v26);
  v13 = v31;
  v14 = a2;
  swift_retain(a4);
  v15 = objc_msgSend(a1, "newOperationWithResponseHandler:", v12, swift_release(v13).n128_f64[0]);
  _Block_release(v12);
  v16 = *(void **)&a5[OBJC_IVAR___MusicLyricsLoader_accessQueue];
  sub_1000244B0((uint64_t)v33, (uint64_t)v32);
  v17 = swift_allocObject(&unk_10045D560, 72, 7);
  *(_QWORD *)(v17 + 16) = a5;
  sub_1000137C8(v32, v17 + 24);
  *(_QWORD *)(v17 + 64) = v15;
  v18 = swift_allocObject(&unk_10045D588, 32, 7);
  *(_QWORD *)(v18 + 16) = sub_10026C060;
  *(_QWORD *)(v18 + 24) = v17;
  v30 = sub_1000B04E0;
  v31 = (_QWORD *)v18;
  v26 = _NSConcreteStackBlock;
  v27 = 1107296256;
  v28 = sub_100009BD0;
  v29 = &unk_10045D5A0;
  v19 = _Block_copy(&v26);
  v20 = v31;
  v21 = v16;
  v22 = a5;
  v23 = v15;
  swift_retain(v18);
  swift_release(v20);
  dispatch_sync(v21, v19);

  _Block_release(v19);
  LOBYTE(v15) = swift_isEscapingClosureAtFileLocation(v18, "", 122, 377, 31, 1, v24);
  *(_QWORD *)&v25 = swift_release(v18).n128_u64[0];
  if ((v15 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    objc_msgSend(*(id *)&v22[OBJC_IVAR___MusicLyricsLoader_operationQueue], "addOperation:", v23, v25);

    swift_release(v17);
    sub_10000682C(v33);
  }
}

uint64_t sub_1002695A8(uint64_t a1, void *a2, char *a3, char *a4)
{
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  id v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v59;
  _QWORD v60[3];
  uint64_t v61;
  _QWORD v62[5];

  v62[3] = sub_1000087DC(0, &qword_10049A210, MPModelSong_ptr);
  v62[4] = &off_10045D198;
  v62[0] = a2;
  if (!a1)
  {
    v33 = qword_100498A10;
    v34 = a2;
    if (v33 != -1)
      swift_once(&qword_100498A10, sub_100257E30);
    v36 = type metadata accessor for Logger(0, v35);
    sub_1000086B4(v36, (uint64_t)static Logger.lyrics);
    sub_1000244B0((uint64_t)v62, (uint64_t)v60);
    v37 = swift_bridgeObjectRetain_n(a4, 2);
    v22 = Logger.logObject.getter(v37);
    v38 = static os_log_type_t.error.getter(v22);
    if (os_log_type_enabled(v22, v38))
    {
      v39 = swift_slowAlloc(32, -1);
      v40 = swift_slowAlloc(96, -1);
      v59 = v40;
      *(_DWORD *)v39 = 136446722;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v39 + 4) = sub_100249A1C(a3, a4, &v59);
      swift_bridgeObjectRelease_n(a4, 3);
      *(_WORD *)(v39 + 12) = 2082;
      v41 = (char *)Optional<A>.description.getter(0, 0);
      *(_QWORD *)(v39 + 14) = sub_100249A1C(v41, v42, &v59);
      swift_bridgeObjectRelease();
      *(_WORD *)(v39 + 22) = 2082;
      sub_10000ABC8(v60, v61);
      v43 = (char *)sub_1002687E4();
      *(_QWORD *)(v39 + 24) = sub_100249A1C(v43, v44, &v59);
      swift_bridgeObjectRelease();
      sub_10000682C(v60);
      _os_log_impl((void *)&_mh_execute_header, v22, v38, "%{public}s loadLyrics(for:completion:) failed to handle error on store lyrics request [failed to convert Error? to NSError] error.localizedDescription=%{public}s %{public}s", (uint8_t *)v39, 0x20u);
      swift_arrayDestroy(v40, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);
      goto LABEL_26;
    }
    swift_bridgeObjectRelease_n(a4, 2);
LABEL_25:
    sub_10000682C(v60);
    goto LABEL_26;
  }
  v8 = a2;
  v9 = (void *)_convertErrorToNSError(_:)(a1);
  v10 = objc_msgSend(v9, "domain");
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;

  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(MPStoreLyricsRequestErrorDomain);
  if (v11 == v14 && v13 == v15)
  {
    swift_bridgeObjectRelease_n(v13, 2);
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v14, v15, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {
      if (qword_100498A10 != -1)
        swift_once(&qword_100498A10, sub_100257E30);
      v19 = type metadata accessor for Logger(0, v18);
      sub_1000086B4(v19, (uint64_t)static Logger.lyrics);
      sub_1000244B0((uint64_t)v62, (uint64_t)v60);
      v20 = v9;
      swift_bridgeObjectRetain_n(a4, 2);
      v21 = v20;
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.error.getter(v22);
      if (os_log_type_enabled(v22, v23))
      {
        v24 = swift_slowAlloc(42, -1);
        v25 = swift_slowAlloc(96, -1);
        v59 = v25;
        *(_DWORD *)v24 = 136446978;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v24 + 4) = sub_100249A1C(a3, a4, &v59);
        swift_bridgeObjectRelease_n(a4, 3);
        *(_WORD *)(v24 + 12) = 2050;
        v26 = objc_msgSend(v21, "code");

        *(_QWORD *)(v24 + 14) = v26;
        *(_WORD *)(v24 + 22) = 2082;
        v27 = objc_msgSend(v21, "domain");
        v28 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
        v30 = v29;

        *(_QWORD *)(v24 + 24) = sub_100249A1C(v28, v30, &v59);
        swift_bridgeObjectRelease();
        *(_WORD *)(v24 + 32) = 2082;
        sub_10000ABC8(v60, v61);
        v31 = (char *)sub_1002687E4();
        *(_QWORD *)(v24 + 34) = sub_100249A1C(v31, v32, &v59);
        swift_bridgeObjectRelease();
        sub_10000682C(v60);
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "%{public}s loadLyrics(for:completion:) failed to handle error on store lyrics request [unexpected error domain or code] standardError.code=%{public}ld standardError.domain=%{public}s %{public}s", (uint8_t *)v24, 0x2Au);
        swift_arrayDestroy(v25, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v25, -1, -1);
        swift_slowDealloc(v24, -1, -1);

LABEL_26:
        return sub_10000682C(v62);
      }
      swift_bridgeObjectRelease_n(a4, 2);

      goto LABEL_25;
    }
  }
  if (objc_msgSend(v9, "code") != (id)-3005)
  {
    if (qword_100498A10 != -1)
      swift_once(&qword_100498A10, sub_100257E30);
    v46 = type metadata accessor for Logger(0, v45);
    sub_1000086B4(v46, (uint64_t)static Logger.lyrics);
    sub_1000244B0((uint64_t)v62, (uint64_t)v60);
    swift_bridgeObjectRetain_n(a4, 2);
    v47 = v9;
    v22 = Logger.logObject.getter(v47);
    v48 = static os_log_type_t.error.getter(v22);
    if (os_log_type_enabled(v22, v48))
    {
      v49 = swift_slowAlloc(32, -1);
      v50 = swift_slowAlloc(96, -1);
      v59 = v50;
      *(_DWORD *)v49 = 136446722;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v49 + 4) = sub_100249A1C(a3, a4, &v59);
      swift_bridgeObjectRelease_n(a4, 3);
      *(_WORD *)(v49 + 12) = 2082;
      v51 = v47;
      v52 = objc_msgSend(v51, "description");
      v53 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
      v55 = v54;

      *(_QWORD *)(v49 + 14) = sub_100249A1C(v53, v55, &v59);
      swift_bridgeObjectRelease();
      *(_WORD *)(v49 + 22) = 2082;
      sub_10000ABC8(v60, v61);
      v56 = (char *)sub_1002687E4();
      *(_QWORD *)(v49 + 24) = sub_100249A1C(v56, v57, &v59);
      swift_bridgeObjectRelease();
      sub_10000682C(v60);
      _os_log_impl((void *)&_mh_execute_header, v22, v48, "%{public}s loadLyrics(for:completion:) unexpected error on store lyrics request [found error other than .explicitContentRestricted] error=%{public}s) %{public}s", (uint8_t *)v49, 0x20u);
      swift_arrayDestroy(v50, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v49, -1, -1);

      goto LABEL_26;
    }
    swift_bridgeObjectRelease_n(a4, 2);

    goto LABEL_25;
  }

  return sub_10000682C(v62);
}

uint64_t sub_100269CB0(uint64_t a1, uint64_t a2, char *a3, char *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  id v30;
  id v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[3];
  uint64_t v63;
  _QWORD v64[5];

  v64[3] = a5;
  v64[4] = a6;
  v12 = sub_1000207D4(v64);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(v12, a2, a5);
  if (!a1)
  {
    if (qword_100498A10 != -1)
      swift_once(&qword_100498A10, sub_100257E30);
    v37 = type metadata accessor for Logger(0, v13);
    sub_1000086B4(v37, (uint64_t)static Logger.lyrics);
    sub_1000244B0((uint64_t)v64, (uint64_t)v62);
    v38 = swift_bridgeObjectRetain_n(a4, 2);
    v27 = Logger.logObject.getter(v38);
    v39 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v39))
    {
      v40 = swift_slowAlloc(32, -1);
      v41 = swift_slowAlloc(96, -1);
      v61 = v41;
      *(_DWORD *)v40 = 136446722;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v40 + 4) = sub_100249A1C(a3, a4, &v61);
      swift_bridgeObjectRelease_n(a4, 3);
      *(_WORD *)(v40 + 12) = 2082;
      v42 = (char *)Optional<A>.description.getter(0, 0);
      *(_QWORD *)(v40 + 14) = sub_100249A1C(v42, v43, &v61);
      swift_bridgeObjectRelease();
      *(_WORD *)(v40 + 22) = 2082;
      sub_10000ABC8(v62, v63);
      v44 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a5, a6);
      *(_QWORD *)(v40 + 24) = sub_100249A1C(v44, v45, &v61);
      swift_bridgeObjectRelease();
      sub_10000682C(v62);
      _os_log_impl((void *)&_mh_execute_header, v27, v39, "%{public}s loadLyrics(for:completion:) failed to handle error on store lyrics request [failed to convert Error? to NSError] error.localizedDescription=%{public}s %{public}s", (uint8_t *)v40, 0x20u);
      swift_arrayDestroy(v41, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);
      goto LABEL_26;
    }
    swift_bridgeObjectRelease_n(a4, 2);
LABEL_25:
    sub_10000682C(v62);
    goto LABEL_26;
  }
  v14 = (void *)_convertErrorToNSError(_:)(a1);
  v15 = objc_msgSend(v14, "domain");
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(MPStoreLyricsRequestErrorDomain);
  if (v16 == v19 && v18 == v20)
  {
    swift_bridgeObjectRelease_n(v18, 2);
  }
  else
  {
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v19, v20, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {
      if (qword_100498A10 != -1)
        swift_once(&qword_100498A10, sub_100257E30);
      v24 = type metadata accessor for Logger(0, v23);
      sub_1000086B4(v24, (uint64_t)static Logger.lyrics);
      sub_1000244B0((uint64_t)v64, (uint64_t)v62);
      v25 = v14;
      swift_bridgeObjectRetain_n(a4, 2);
      v26 = v25;
      v27 = Logger.logObject.getter(v26);
      v28 = static os_log_type_t.error.getter(v27);
      if (os_log_type_enabled(v27, v28))
      {
        v29 = swift_slowAlloc(42, -1);
        v60 = swift_slowAlloc(96, -1);
        v61 = v60;
        *(_DWORD *)v29 = 136446978;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v29 + 4) = sub_100249A1C(a3, a4, &v61);
        swift_bridgeObjectRelease_n(a4, 3);
        *(_WORD *)(v29 + 12) = 2050;
        v30 = objc_msgSend(v26, "code");

        *(_QWORD *)(v29 + 14) = v30;
        *(_WORD *)(v29 + 22) = 2082;
        v31 = objc_msgSend(v26, "domain");
        v32 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
        v34 = v33;

        *(_QWORD *)(v29 + 24) = sub_100249A1C(v32, v34, &v61);
        swift_bridgeObjectRelease();
        *(_WORD *)(v29 + 32) = 2082;
        sub_10000ABC8(v62, v63);
        v35 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a5, a6);
        *(_QWORD *)(v29 + 34) = sub_100249A1C(v35, v36, &v61);
        swift_bridgeObjectRelease();
        sub_10000682C(v62);
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "%{public}s loadLyrics(for:completion:) failed to handle error on store lyrics request [unexpected error domain or code] standardError.code=%{public}ld standardError.domain=%{public}s %{public}s", (uint8_t *)v29, 0x2Au);
        swift_arrayDestroy(v60, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v60, -1, -1);
        swift_slowDealloc(v29, -1, -1);

LABEL_26:
        return sub_10000682C(v64);
      }
      swift_bridgeObjectRelease_n(a4, 2);

      goto LABEL_25;
    }
  }
  if (objc_msgSend(v14, "code") != (id)-3005)
  {
    if (qword_100498A10 != -1)
      swift_once(&qword_100498A10, sub_100257E30);
    v47 = type metadata accessor for Logger(0, v46);
    sub_1000086B4(v47, (uint64_t)static Logger.lyrics);
    sub_1000244B0((uint64_t)v64, (uint64_t)v62);
    swift_bridgeObjectRetain_n(a4, 2);
    v48 = v14;
    v27 = Logger.logObject.getter(v48);
    v49 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v49))
    {
      v50 = swift_slowAlloc(32, -1);
      v51 = swift_slowAlloc(96, -1);
      v61 = v51;
      *(_DWORD *)v50 = 136446722;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v50 + 4) = sub_100249A1C(a3, a4, &v61);
      swift_bridgeObjectRelease_n(a4, 3);
      *(_WORD *)(v50 + 12) = 2082;
      v52 = v48;
      v53 = objc_msgSend(v52, "description");
      v54 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
      v56 = v55;

      *(_QWORD *)(v50 + 14) = sub_100249A1C(v54, v56, &v61);
      swift_bridgeObjectRelease();
      *(_WORD *)(v50 + 22) = 2082;
      sub_10000ABC8(v62, v63);
      v57 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a5, a6);
      *(_QWORD *)(v50 + 24) = sub_100249A1C(v57, v58, &v61);
      swift_bridgeObjectRelease();
      sub_10000682C(v62);
      _os_log_impl((void *)&_mh_execute_header, v27, v49, "%{public}s loadLyrics(for:completion:) unexpected error on store lyrics request [found error other than .explicitContentRestricted] error=%{public}s) %{public}s", (uint8_t *)v50, 0x20u);
      swift_arrayDestroy(v51, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1, -1);
      swift_slowDealloc(v50, -1, -1);

      goto LABEL_26;
    }
    swift_bridgeObjectRelease_n(a4, 2);

    goto LABEL_25;
  }

  return sub_10000682C(v64);
}

uint64_t _s11MusicCoreUI12LyricsLoaderC4SongO21__derived_enum_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void **v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  char v21;
  id v22;
  id v23;
  char v24;
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v28;

  v4 = type metadata accessor for Song(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LyricsLoader.Song(0);
  __chkstk_darwin();
  v10 = (void **)((char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  v12 = (char *)&v28 - v11;
  sub_100005574(&qword_10049A0C8);
  v13 = __chkstk_darwin();
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (void **)&v15[*(int *)(v13 + 48)];
  sub_10026B7E4(a1, (uint64_t)v15);
  sub_10026B7E4(a2, (uint64_t)v16);
  if (swift_getEnumCaseMultiPayload(v15, v8) == 1)
  {
    sub_10026B7E4((uint64_t)v15, (uint64_t)v10);
    v17 = *v10;
    v18 = v10[1];
    if (swift_getEnumCaseMultiPayload(v16, v8) == 1)
    {
      v19 = *v16;
      v20 = v16[1];
      sub_1000087DC(0, (unint64_t *)&qword_10049A0D0, NSObject_ptr);
      v21 = static NSObject.== infix(_:_:)(v17, v19);

      if ((v21 & 1) != 0)
      {
        if (v18)
        {
          if (v20)
          {
            sub_1000087DC(0, &qword_10049A0D8, MPCPlayerResponseTracklist_ptr);
            v22 = v20;
            v23 = v18;
            v24 = static NSObject.== infix(_:_:)(v23, v22);

            if ((v24 & 1) != 0)
              goto LABEL_20;
            goto LABEL_15;
          }
        }
        else
        {
          if (!v20)
          {
LABEL_20:
            sub_10026BCCC((uint64_t)v15);
            v25 = 1;
            return v25 & 1;
          }
          v18 = v20;
        }
      }
      else
      {

      }
LABEL_15:
      sub_10026BCCC((uint64_t)v15);
      goto LABEL_16;
    }

LABEL_11:
    sub_10026BE94((uint64_t)v15);
LABEL_16:
    v25 = 0;
    return v25 & 1;
  }
  sub_10026B7E4((uint64_t)v15, (uint64_t)v12);
  if (swift_getEnumCaseMultiPayload(v16, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
    goto LABEL_11;
  }
  (*(void (**)(char *, void **, uint64_t))(v5 + 32))(v7, v16, v4);
  v25 = static Song.== infix(_:_:)(v12, v7);
  v26 = *(void (**)(char *, uint64_t))(v5 + 8);
  v26(v7, v4);
  v26(v12, v4);
  sub_10026BCCC((uint64_t)v15);
  return v25 & 1;
}

uint64_t _s11MusicCoreUI12LyricsLoaderC08supportsD03forSbSo11MPModelSongC_tFZ_0(void *a1)
{
  id v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  NSString v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  id v49;
  id v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  id v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  id v67;
  id v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  id v73;
  os_log_type_t v74;
  id v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  id v83;
  id v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  NSObject *v94;
  os_log_type_t v95;
  uint64_t v96;
  id v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  os_log_type_t v104;
  uint64_t v105;
  char v106;
  id v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  id v115;
  id v116;
  char *v117;
  char *v118;
  char *v119;
  os_log_type_t v120;
  const char *v121;
  NSObject *v122;
  uint8_t *v123;
  uint32_t v124;
  char *v125;
  char *v126;
  char *v127;
  id v128;
  id v129;
  char *v130;
  char *v131;
  char *v132;
  os_log_type_t v133;
  const char *v134;
  char *v135;
  char *v136;
  char *v137;
  id v138;
  id v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  id v146;
  id v147;
  char *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  os_log_type_t v153;
  os_log_type_t v154;
  os_log_type_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD v158[15];
  uint64_t v159;
  char v160;
  uint64_t v161;

  v2 = objc_msgSend(a1, "lyrics");
  if (v2)
  {
    v4 = v2;
    if ((objc_msgSend(a1, "hasVideo") & 1) != 0)
    {

      goto LABEL_4;
    }
    v16 = objc_msgSend(v4, "hasLibraryLyrics");
    if ((objc_msgSend(v4, "hasStoreLyrics") & 1) == 0 && !(_DWORD)v16)
    {
      if (qword_100498A10 != -1)
        swift_once(&qword_100498A10, sub_100257E30);
      v18 = type metadata accessor for Logger(0, v17);
      sub_1000086B4(v18, (uint64_t)static Logger.lyrics);
      v19 = a1;
      v7 = v4;
      v20 = Logger.logObject.getter(v7);
      v21 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = swift_slowAlloc(34, -1);
        v23 = swift_slowAlloc(64, -1);
        v159 = v23;
        *(_DWORD *)v22 = 67240962;
        *(_DWORD *)(v22 + 4) = -[NSObject hasLibraryLyrics](v7, "hasLibraryLyrics");
        *(_WORD *)(v22 + 8) = 1026;
        *(_DWORD *)(v22 + 10) = -[NSObject hasStoreLyrics](v7, "hasStoreLyrics");

        *(_WORD *)(v22 + 14) = 2082;
        v24 = objc_msgSend(v19, "title");
        if (v24)
        {
          v25 = v24;
          v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
          v28 = v27;

        }
        else
        {
          v26 = 0;
          v28 = 0;
        }
        v64 = (char *)Optional<A>.description.getter(v26, v28);
        v66 = v65;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v22 + 16) = sub_100249A1C(v64, v66, &v159);

        swift_bridgeObjectRelease();
        *(_WORD *)(v22 + 24) = 2082;
        v67 = objc_msgSend(v19, "identifiers");
        v68 = objc_msgSend(v67, "description");
        v69 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
        v71 = v70;

        *(_QWORD *)(v22 + 26) = sub_100249A1C(v69, v71, &v159);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Loader supportsLyrics=false [no lyrics found] lyrics.hasLibraryLyrics=%{BOOL,public}d lyrics.hasStoreLyrics=%{BOOL,public}d song.title=%{public}s song.identifiers=%{public}s", (uint8_t *)v22, 0x22u);
        swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v23, -1, -1);
        swift_slowDealloc(v22, -1, -1);

        return 0;
      }

      goto LABEL_27;
    }
    v29 = *BagProvider.shared.unsafeMutableAddressor();
    swift_retain(v29);
    v30 = (id)BagProvider.bag.getter();
    swift_release(v29);
    if (v30)
    {
      if ((objc_msgSend((id)objc_opt_self(MPStoreLyricsRequest), "supportsLyricsForURLBag:", v30) & 1) == 0)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(ICURLBagKeyMusicSubscription);
        v32 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        v33 = objc_msgSend(v30, "dictionaryForBagKey:", v32);

        if (v33)
        {

          if (qword_100498A10 != -1)
            swift_once(&qword_100498A10, sub_100257E30);
          v36 = type metadata accessor for Logger(0, v35);
          sub_1000086B4(v36, (uint64_t)static Logger.lyrics);
          v37 = a1;
          v38 = Logger.logObject.getter(v37);
          v39 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v38, v39))
          {

            return (uint64_t)v16;
          }
          v153 = v39;
          v40 = swift_slowAlloc(28, -1);
          v151 = swift_slowAlloc(64, -1);
          v159 = v151;
          *(_DWORD *)v40 = 67240706;
          *(_DWORD *)(v40 + 4) = (_DWORD)v16;
          *(_WORD *)(v40 + 8) = 2082;
          v41 = objc_msgSend(v37, "title");
          if (v41)
          {
            v42 = v41;
            v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
            v45 = v44;

          }
          else
          {
            v43 = 0;
            v45 = 0;
          }
          v125 = (char *)Optional<A>.description.getter(v43, v45);
          v127 = v126;
          swift_bridgeObjectRelease();
          *(_QWORD *)(v40 + 10) = sub_100249A1C(v125, v127, &v159);

          swift_bridgeObjectRelease();
          *(_WORD *)(v40 + 18) = 2082;
          v128 = objc_msgSend(v37, "identifiers");
          v129 = objc_msgSend(v128, "description");
          v130 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v129);
          v132 = v131;

          *(_QWORD *)(v40 + 20) = sub_100249A1C(v130, v132, &v159);
          swift_bridgeObjectRelease();
          v133 = v153;
          v134 = "Loader supportsLyrics=%{BOOL,public}d [no lyrics keys in bag] song.title=%{public}s song.identifiers=%{public}s";
        }
        else
        {
          if (qword_100498A10 != -1)
            swift_once(&qword_100498A10, sub_100257E30);
          v72 = type metadata accessor for Logger(0, v34);
          sub_1000086B4(v72, (uint64_t)static Logger.lyrics);
          v73 = a1;
          v38 = Logger.logObject.getter(v73);
          v74 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v38, v74))
          {

            return (uint64_t)v16;
          }
          v155 = v74;
          v40 = swift_slowAlloc(28, -1);
          v151 = swift_slowAlloc(64, -1);
          v159 = v151;
          *(_DWORD *)v40 = 67240706;
          *(_DWORD *)(v40 + 4) = (_DWORD)v16;
          *(_WORD *)(v40 + 8) = 2082;
          v75 = objc_msgSend(v73, "title");
          if (v75)
          {
            v76 = v75;
            v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
            v79 = v78;

          }
          else
          {
            v77 = 0;
            v79 = 0;
          }
          v135 = (char *)Optional<A>.description.getter(v77, v79);
          v137 = v136;
          swift_bridgeObjectRelease();
          *(_QWORD *)(v40 + 10) = sub_100249A1C(v135, v137, &v159);

          swift_bridgeObjectRelease();
          *(_WORD *)(v40 + 18) = 2082;
          v138 = objc_msgSend(v73, "identifiers");
          v139 = objc_msgSend(v138, "description");
          v140 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v139);
          v142 = v141;

          *(_QWORD *)(v40 + 20) = sub_100249A1C(v140, v142, &v159);
          swift_bridgeObjectRelease();
          v133 = v155;
          v134 = "Loader supportsLyrics=%{BOOL,public}d [no musicSubscription key in bag] song.title=%{public}s song.iden"
                 "tifiers=%{public}s";
        }
        _os_log_impl((void *)&_mh_execute_header, v38, v133, v134, (uint8_t *)v40, 0x1Cu);
        swift_arrayDestroy(v151, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v151, -1, -1);
        swift_slowDealloc(v40, -1, -1);

        return (uint64_t)v16;
      }
    }
    else
    {
      if (qword_100498A10 != -1)
        swift_once(&qword_100498A10, sub_100257E30);
      v55 = type metadata accessor for Logger(0, v31);
      sub_1000086B4(v55, (uint64_t)static Logger.lyrics);
      v30 = a1;
      v56 = Logger.logObject.getter(v30);
      v57 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v56, v57))
      {
        v154 = v57;
        v58 = swift_slowAlloc(28, -1);
        v152 = swift_slowAlloc(64, -1);
        v159 = v152;
        *(_DWORD *)v58 = 67240706;
        *(_DWORD *)(v58 + 4) = (_DWORD)v16;
        *(_WORD *)(v58 + 8) = 2082;
        v59 = objc_msgSend(v30, "title");
        if (v59)
        {
          v60 = v59;
          v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
          v63 = v62;

        }
        else
        {
          v61 = 0;
          v63 = 0;
        }
        v80 = (char *)Optional<A>.description.getter(v61, v63);
        v82 = v81;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v58 + 10) = sub_100249A1C(v80, v82, &v159);

        swift_bridgeObjectRelease();
        *(_WORD *)(v58 + 18) = 2082;
        v83 = objc_msgSend(v30, "identifiers");
        v84 = objc_msgSend(v83, "description");
        v85 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
        v87 = v86;

        *(_QWORD *)(v58 + 20) = sub_100249A1C(v85, v87, &v159);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v56, v154, "Loader supportsLyrics=%{BOOL,public}d [bag is nil] song.title=%{public}s song.identifiers=%{public}s", (uint8_t *)v58, 0x1Cu);
        swift_arrayDestroy(v152, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v152, -1, -1);
        swift_slowDealloc(v58, -1, -1);

LABEL_48:
        if (objc_msgSend(v4, "hasStoreLyrics")
          && (static ApplicationCapabilities.shared.getter((uint64_t)v158),
              v89 = v158[3],
              swift_bridgeObjectRetain(),
              sub_1000BC0D0(v158),
              v90 = sub_1002626A0(2u, v89),
              swift_bridgeObjectRelease(),
              (v90 & 1) != 0))
        {
          static ApplicationCapabilities.shared.getter((uint64_t)&v159);
          sub_1000BC0D0(&v159);
          if ((v160 & 1) != 0)
          {

            return 1;
          }
          if (qword_100498A10 != -1)
            swift_once(&qword_100498A10, sub_100257E30);
          v92 = type metadata accessor for Logger(0, v91);
          sub_1000086B4(v92, (uint64_t)static Logger.lyrics);
          v93 = a1;
          v94 = Logger.logObject.getter(v93);
          v95 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v94, v95))
          {

            return (uint64_t)v16;
          }
          v96 = swift_slowAlloc(28, -1);
          v156 = swift_slowAlloc(64, -1);
          v157 = v156;
          *(_DWORD *)v96 = 67240706;
          *(_DWORD *)(v96 + 4) = (_DWORD)v16;
          *(_WORD *)(v96 + 8) = 2082;
          v97 = objc_msgSend(v93, "title");
          if (v97)
          {
            v98 = v97;
            v99 = static String._unconditionallyBridgeFromObjectiveC(_:)(v97);
            v101 = v100;

          }
          else
          {
            v99 = 0;
            v101 = 0;
          }
          v143 = (char *)Optional<A>.description.getter(v99, v101);
          v145 = v144;
          swift_bridgeObjectRelease();
          *(_QWORD *)(v96 + 10) = sub_100249A1C(v143, v145, &v157);

          swift_bridgeObjectRelease();
          *(_WORD *)(v96 + 18) = 2082;
          v146 = objc_msgSend(v93, "identifiers");
          v147 = objc_msgSend(v146, "description");
          v148 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v147);
          v150 = v149;

          *(_QWORD *)(v96 + 20) = sub_100249A1C(v148, v150, &v157);
          swift_bridgeObjectRelease();
          v120 = v95;
          v121 = "Loader supportsLyrics=%{BOOL,public}d [not supported by subscription] subscriptionCapabilities.contains"
                 "(.catalogLyricsViewing)=false song.title=%{public}s song.identifiers=%{public}s";
          v122 = v94;
          v123 = (uint8_t *)v96;
          v124 = 28;
        }
        else
        {
          if (qword_100498A10 != -1)
            swift_once(&qword_100498A10, sub_100257E30);
          v102 = type metadata accessor for Logger(0, v88);
          sub_1000086B4(v102, (uint64_t)static Logger.lyrics);
          v103 = a1;
          v4 = v4;
          v94 = Logger.logObject.getter(v4);
          v104 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v94, v104))
          {

            return (uint64_t)v16;
          }
          v96 = swift_slowAlloc(40, -1);
          v156 = swift_slowAlloc(64, -1);
          v157 = v156;
          *(_DWORD *)v96 = 67241218;
          *(_DWORD *)(v96 + 4) = (_DWORD)v16;
          *(_WORD *)(v96 + 8) = 1026;
          *(_DWORD *)(v96 + 10) = objc_msgSend(v4, "hasStoreLyrics");

          *(_WORD *)(v96 + 14) = 1026;
          static ApplicationCapabilities.shared.getter((uint64_t)&v159);
          v105 = v161;
          swift_bridgeObjectRetain();
          sub_1000BC0D0(&v159);
          v106 = sub_1002626A0(2u, v105);
          swift_bridgeObjectRelease();
          *(_DWORD *)(v96 + 16) = v106 & 1;
          *(_WORD *)(v96 + 20) = 2082;
          v107 = objc_msgSend(v103, "title");
          if (v107)
          {
            v108 = v107;
            v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
            v111 = v110;

          }
          else
          {
            v109 = 0;
            v111 = 0;
          }
          v112 = (char *)Optional<A>.description.getter(v109, v111);
          v114 = v113;
          swift_bridgeObjectRelease();
          *(_QWORD *)(v96 + 22) = sub_100249A1C(v112, v114, &v157);

          swift_bridgeObjectRelease();
          *(_WORD *)(v96 + 30) = 2082;
          v115 = objc_msgSend(v103, "identifiers");
          v116 = objc_msgSend(v115, "description");
          v117 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v116);
          v119 = v118;

          *(_QWORD *)(v96 + 32) = sub_100249A1C(v117, v119, &v157);
          swift_bridgeObjectRelease();
          v120 = v104;
          v121 = "Loader supportsLyrics=%{BOOL,public}d [can't support store lyrics] lyrics.hasStoreLyrics=%{BOOL,public}"
                 "d allowsSubscriptionContent=%{BOOL,public}d song.title=%{public}s song.identifiers=%{public}s";
          v122 = v94;
          v123 = (uint8_t *)v96;
          v124 = 40;
        }
        _os_log_impl((void *)&_mh_execute_header, v122, v120, v121, v123, v124);
        swift_arrayDestroy(v156, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v156, -1, -1);
        swift_slowDealloc(v96, -1, -1);

        return (uint64_t)v16;
      }

    }
    goto LABEL_48;
  }
LABEL_4:
  if (qword_100498A10 != -1)
    swift_once(&qword_100498A10, sub_100257E30);
  v5 = type metadata accessor for Logger(0, v3);
  sub_1000086B4(v5, (uint64_t)static Logger.lyrics);
  v6 = a1;
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(64, -1);
    v159 = v10;
    *(_DWORD *)v9 = 136446466;
    v11 = objc_msgSend(v6, "title");
    if (v11)
    {
      v12 = v11;
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v15 = v14;

    }
    else
    {
      v13 = 0;
      v15 = 0;
    }
    v46 = (char *)Optional<A>.description.getter(v13, v15);
    v48 = v47;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v9 + 4) = sub_100249A1C(v46, v48, &v159);

    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2082;
    v49 = objc_msgSend(v6, "identifiers");
    v50 = objc_msgSend(v49, "description");
    v51 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
    v53 = v52;

    *(_QWORD *)(v9 + 14) = sub_100249A1C(v51, v53, &v159);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Loader supportsLyrics=false [MPModelLyrics was nil] song.title=%{public}s song.identifiers=%{public}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
LABEL_27:

    return 0;
  }

  return 0;
}

uint64_t sub_10026B738()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10026B748()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10026B76C(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_100266248(a1, a2, *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_10026B778()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t type metadata accessor for LyricsLoader()
{
  return objc_opt_self(MusicLyricsLoader);
}

uint64_t type metadata accessor for LyricsLoader.Song(uint64_t a1)
{
  uint64_t result;

  result = qword_10049A080;
  if (!qword_10049A080)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LyricsLoader.Song);
  return result;
}

uint64_t sub_10026B7E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LyricsLoader.Song(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10026B828(uint64_t a1)
{
  uint64_t v1;

  sub_100267998(a1, *(_QWORD *)(v1 + 16));
}

void sub_10026B830(void *a1)
{
  uint64_t v1;

  sub_10026852C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10026B838()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_10026B84C()
{
  unint64_t result;

  result = qword_100499FE0;
  if (!qword_100499FE0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LyricsLoader.LyricsError, &type metadata for LyricsLoader.LyricsError);
    atomic_store(result, (unint64_t *)&qword_100499FE0);
  }
  return result;
}

uint64_t destroy for LyricsLoader.Result(uint64_t a1)
{
  return sub_10003B4D0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s11MusicCoreUI12LyricsLoaderC6ResultOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_10003B4C0(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for LyricsLoader.Result(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_10003B4C0(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_10003B4D0(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for LyricsLoader.Result(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for LyricsLoader.Result(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_10003B4D0(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for LyricsLoader.Result()
{
  return &type metadata for LyricsLoader.Result;
}

uint64_t storeEnumTagSinglePayload for LyricsLoader.LyricsError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10026B9F4 + 4 * byte_1003984B3[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10026BA28 + 4 * byte_1003984AE[v4]))();
}

uint64_t sub_10026BA28(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10026BA30(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10026BA38);
  return result;
}

uint64_t sub_10026BA44(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10026BA4CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10026BA50(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10026BA58(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LyricsLoader.LyricsError()
{
  return &type metadata for LyricsLoader.LyricsError;
}

char *initializeBufferWithCopyOfBuffer for LyricsLoader.Song(char *a1, char **a2, uint64_t a3)
{
  int v5;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v14[(v5 + 16) & ~(unint64_t)v5];
    swift_retain(v14);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v7 = *a2;
      v8 = a2[1];
      *(_QWORD *)a1 = v7;
      *((_QWORD *)a1 + 1) = v8;
      v9 = v7;
      v10 = v8;
      v11 = a1;
      v12 = a3;
      v13 = 1;
    }
    else
    {
      v15 = type metadata accessor for Song(0);
      (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, a2, v15);
      v11 = a1;
      v12 = a3;
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v12, v13);
  }
  return a1;
}

void destroy for LyricsLoader.Song(id *a1, uint64_t a2)
{
  uint64_t v3;

  if (swift_getEnumCaseMultiPayload(a1, a2) == 1)
  {

  }
  else
  {
    v3 = type metadata accessor for Song(0);
    (*(void (**)(id *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
}

_QWORD *initializeWithCopy for LyricsLoader.Song(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = *(void **)a2;
    v7 = *(void **)(a2 + 8);
    *a1 = v6;
    a1[1] = v7;
    v8 = v6;
    v9 = v7;
    v10 = a1;
    v11 = a3;
    v12 = 1;
  }
  else
  {
    v13 = type metadata accessor for Song(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
    v10 = a1;
    v11 = a3;
    v12 = 0;
  }
  swift_storeEnumTagMultiPayload(v10, v11, v12);
  return a1;
}

void **assignWithCopy for LyricsLoader.Song(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  id v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 != a2)
  {
    sub_10026BCCC((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = *a2;
      *a1 = *a2;
      v7 = a2[1];
      a1[1] = v7;
      v8 = v6;
      v9 = v7;
      v10 = a1;
      v11 = a3;
      v12 = 1;
    }
    else
    {
      v13 = type metadata accessor for Song(0);
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
      v10 = a1;
      v11 = a3;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
  }
  return a1;
}

uint64_t sub_10026BCCC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LyricsLoader.Song(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *initializeWithTake for LyricsLoader.Song(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for Song(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

void *assignWithTake for LyricsLoader.Song(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_10026BCCC((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for Song(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_10026BE28(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Song(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1003985F0;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
    return 0;
  }
  return result;
}

uint64_t sub_10026BE94(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005574(&qword_10049A0C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10026BED4(void *a1)
{
  sub_100268718(a1);
}

uint64_t sub_10026BEDC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10026BEEC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10026BF00(uint64_t a1)
{
  return sub_10026BF8C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_100268100);
}

uint64_t sub_10026BF0C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10026BF20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Song(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10026BF80(uint64_t a1)
{
  return sub_10026BF8C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1002680A8);
}

uint64_t sub_10026BF8C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Song(0) - 8) + 80);
  return a2(a1, v2 + ((v4 + 16) & ~v4));
}

uint64_t sub_10026BFD8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10026BFE8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

id sub_10026C00C(void *a1)
{
  uint64_t v1;

  return sub_100267DC0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10026C014()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10026C024()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10026C04C(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_10026696C(a1, a2, *(_QWORD *)(v2 + 16), (_QWORD *)(v2 + 24), *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v2 + 64), *(_QWORD *)(v2 + 72));
}

uint64_t sub_10026C060()
{
  uint64_t v0;

  return sub_1002672A4(*(_QWORD *)(v0 + 16), (_QWORD *)(v0 + 24), *(void **)(v0 + 64));
}

uint64_t sub_10026C070()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10026C080()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

double sub_10026C0B4(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100267128(a1, a2, *(void **)(v2 + 16), *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v2 + 24), *(_QWORD *)(v2 + 32), *(char **)(v2 + 40), *(char **)(v2 + 48));
}

uint64_t sub_10026C0C4()
{
  uint64_t v0;

  sub_10000682C((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 64, 7);
}

void sub_10026C0F0()
{
  uint64_t v0;

  sub_100267088(*(_QWORD *)(v0 + 16), (_QWORD *)(v0 + 24));
}

uint64_t sub_10026C0FC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10026C118()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_10026C144()
{
  uint64_t v0;

  sub_100266868(*(void ***)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_10026C150()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10026C164()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100005574(&qword_10049A218);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10026C1C8(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  sub_100005574(&qword_10049A218);
  return sub_100264E60(a1, a2, a3, a4);
}

uint64_t sub_10026C238()
{
  _QWORD *v0;

  swift_release(v0[2]);
  sub_10000682C(v0 + 3);
  swift_release(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10026C270()
{
  uint64_t v0;

  sub_10000682C((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10026C2A4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_10026C350(uint64_t a1)
{
  char *v1;
  char *v2;
  double v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _BYTE v8[544];

  v2 = v1;
  memcpy(v8, &v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs], 0x219uLL);
  sub_10026EC3C((uint64_t)v8);
  LOBYTE(a1) = _s11MusicCoreUI26SyncedLyricsViewControllerC5SpecsV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)v8, a1);
  sub_10026ED0C((uint64_t)v8);
  if ((a1 & 1) == 0)
  {
    sub_10026E548(0);
    objc_msgSend(v2, "bounds");
    sub_10026DCB8(v4);
    if (v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_isSelected] == 1)
    {
      sub_10026E7EC();
      v5 = OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_basicView;
      objc_msgSend(*(id *)&v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_basicView], "removeFromSuperview");
      v6 = *(void **)&v2[v5];
      *(_QWORD *)&v2[v5] = 0;

    }
    else
    {
      sub_10026E5DC();
      v7 = *(_QWORD *)&v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation];
      if (v7)
      {
        swift_retain(*(_QWORD *)&v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation]);
        sub_10026FA64();
        swift_release(v7);
      }
    }
    sub_10026CF5C(0, *(double *)&v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_progress]);
  }
}

void sub_10026C460(char a1, char a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  double v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  NSString v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  NSString v40;
  void *v41;
  id v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t i;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t j;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  char *v64;
  uint64_t v65;
  id v66;
  void *v67;
  char v68;
  _BYTE __dst[560];

  v68 = a1 & 1;
  if (v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_isSelected] == (a1 & 1))
    return;
  v3 = v2;
  v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_isSelected] = v68;
  if ((a1 & 1) != 0)
  {
    sub_10026E7EC();
    v6 = OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_basicView;
    objc_msgSend(*(id *)&v3[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_basicView], "removeFromSuperview");
    v7 = *(void **)&v3[v6];
    *(_QWORD *)&v3[v6] = 0;

    if ((a2 & 1) == 0)
      return;
  }
  else
  {
    if ((a2 & 1) == 0)
    {
      sub_10026E5DC();
      v53 = *(_QWORD *)&v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation];
      if (v53)
      {
        swift_retain(*(_QWORD *)&v3[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation]);
        sub_10026FA64();
        swift_release(v53);
      }
      return;
    }
    v8 = sub_1000087DC(0, (unint64_t *)&qword_100499FB0, OS_dispatch_queue_ptr);
    v16 = (void *)static OS_dispatch_queue.main.getter(v8, v9, v10, v11, v12, v13, v14, v15);
    v17 = objc_msgSend(objc_allocWithZone((Class)UISpringTimingParameters), "initWithMass:stiffness:damping:initialVelocity:", 1.0, 100.0, 18.0, 0.0, 0.0);
    objc_msgSend(v17, "settlingDuration");
    v19 = v18;

    v20 = swift_allocObject(&unk_10045D9C0, 24, 7);
    *(_QWORD *)(v20 + 16) = v3;
    v21 = v3;
    OS_dispatch_queue.asyncAfter(_:block:)((uint64_t)sub_10026F83C, v20, v19);

    swift_release(v20);
  }
  v22 = *(_QWORD *)&v3[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation];
  if (!v22)
    return;
  v23 = 240;
  if (v3[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_kind])
    v23 = 264;
  v24 = objc_msgSend(*(id *)&v3[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs + v23], "CGColor", swift_retain(*(_QWORD *)&v3[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation]).n128_f64[0]);
  v64 = &v3[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs];
  v25 = objc_msgSend(*(id *)&v3[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs + 248], "CGColor");
  v26 = String._bridgeToObjectiveC()();
  v27 = objc_msgSend((id)objc_opt_self(CASpringAnimation), "animationWithKeyPath:", v26);

  CASpringAnimation.springParameters.setter(objc_msgSend(objc_allocWithZone((Class)UISpringTimingParameters), "initWithMass:stiffness:damping:initialVelocity:", 1.0, 100.0, 18.0, 0.0, 0.0));
  if ((a1 & 1) != 0)
    v28 = v25;
  else
    v28 = v24;
  if ((a1 & 1) != 0)
    v29 = v24;
  else
    v29 = v25;
  objc_msgSend(v27, "setFromValue:", v28, v25);
  v66 = v29;
  v67 = v27;
  objc_msgSend(v27, "setToValue:", v29);
  v30 = swift_bridgeObjectRetain();
  v31 = (uint64_t)sub_10026CBB0(v30);
  swift_bridgeObjectRelease();
  v65 = v22;
  v63 = v24;
  if ((unint64_t)v31 >> 62)
    goto LABEL_38;
  v32 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v32)
  {
    v33 = 4;
    while (1)
    {
      v34 = (v31 & 0xC000000000000001) != 0
          ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v33 - 4, v31)
          : (char *)*(id *)(v31 + 8 * v33);
      v35 = v34;
      v36 = v33 - 3;
      if (__OFADD__(v33 - 4, 1))
        break;
      v37 = OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_backgroundColorLayer;
      v38 = *(void **)&v34[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_backgroundColorLayer];
      if (!v38)
        goto LABEL_63;
      v39 = v38;
      v40 = String._bridgeToObjectiveC()();
      objc_msgSend(v39, "addAnimation:forKey:", v67, v40);

      v41 = *(void **)&v35[v37];
      if (!v41)
        goto LABEL_64;
      objc_msgSend(v41, "setBackgroundColor:", v66);
      sub_1000087DC(0, (unint64_t *)&qword_10049D970, UIView_ptr);
      v42 = objc_msgSend(objc_allocWithZone((Class)UISpringTimingParameters), "initWithMass:stiffness:damping:initialVelocity:", 1.0, 100.0, 18.0, 0.0, 0.0);
      v43 = swift_allocObject(&unk_10045D998, 25, 7);
      *(_QWORD *)(v43 + 16) = v35;
      *(_BYTE *)(v43 + 24) = v68;
      v44 = v35;
      static UIView.animate(withSpringTimingParameters:delay:options:animations:completion:)(v42, 0, sub_10026F7DC, v43, 0, 0, 0.0);

      swift_release(v43);
      ++v33;
      if (v36 == v32)
        goto LABEL_26;
    }
    __break(1u);
LABEL_38:
    if (v31 < 0)
      v54 = v31;
    else
      v54 = v31 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v32 = _CocoaArrayWrapper.endIndex.getter(v54);
    swift_bridgeObjectRelease();
  }
LABEL_26:
  swift_bridgeObjectRelease();
  v45 = swift_bridgeObjectRetain();
  v46 = sub_10026CE3C(v45);
  swift_bridgeObjectRelease();
  v47 = (uint64_t)sub_10026CD1C((uint64_t)v46);
  swift_bridgeObjectRelease();
  if ((unint64_t)v47 >> 62)
  {
    if (v47 < 0)
      v55 = v47;
    else
      v55 = v47 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v48 = _CocoaArrayWrapper.endIndex.getter(v55);
    swift_bridgeObjectRelease();
    v49 = v64;
    if (!v48)
      goto LABEL_47;
  }
  else
  {
    v48 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFF8) + 0x10);
    v49 = v64;
    if (!v48)
      goto LABEL_47;
  }
  v50 = v48 - 1;
  if (v48 >= 1)
  {
    v51 = 0;
    if ((v47 & 0xC000000000000001) == 0)
      goto LABEL_31;
LABEL_30:
    for (i = specialized _ArrayBuffer._getElementSlowPath(_:)(v51, v47); ; swift_retain(i))
    {
      memcpy(__dst, v49, 0x219uLL);
      sub_10026EC3C((uint64_t)__dst);
      sub_1002740E0();
      sub_10026ED0C((uint64_t)__dst);
      swift_release(i);
      if (v50 == v51)
        break;
      ++v51;
      if ((v47 & 0xC000000000000001) != 0)
        goto LABEL_30;
LABEL_31:
      i = *(_QWORD *)(v47 + 8 * v51 + 32);
    }
LABEL_47:
    swift_bridgeObjectRelease();
    v56 = swift_bridgeObjectRetain();
    v57 = (uint64_t)sub_10026CE3C(v56);
    swift_bridgeObjectRelease();
    if ((unint64_t)v57 >> 62)
    {
      if (v57 < 0)
        v61 = v57;
      else
        v61 = v57 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v58 = _CocoaArrayWrapper.endIndex.getter(v61);
      swift_bridgeObjectRelease();
      if (v58)
      {
LABEL_49:
        if (v58 >= 1)
        {
          for (j = 0; j != v58; ++j)
          {
            if ((v57 & 0xC000000000000001) != 0)
            {
              v60 = specialized _ArrayBuffer._getElementSlowPath(_:)(j, v57);
            }
            else
            {
              v60 = *(_QWORD *)(v57 + 8 * j + 32);
              swift_retain(v60);
            }
            sub_100274450();
            swift_release(v60);
          }
          goto LABEL_59;
        }
        goto LABEL_62;
      }
    }
    else
    {
      v58 = *(_QWORD *)((v57 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v58)
        goto LABEL_49;
    }
LABEL_59:

    swift_bridgeObjectRelease();
    swift_release(v65);

    return;
  }
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
}

double sub_10026CB20(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  double result;
  uint64_t v5;

  if (*(_BYTE *)(a1 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_isSelected) == 1)
  {
    sub_10026E7EC();
    v2 = OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_basicView;
    objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_basicView), "removeFromSuperview");
    v3 = *(void **)(a1 + v2);
    *(_QWORD *)(a1 + v2) = 0;

  }
  else
  {
    sub_10026E5DC();
    v5 = *(_QWORD *)(a1
                   + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation);
    if (v5)
    {
      swift_retain(v5);
      sub_10026FA64();
      *(_QWORD *)&result = swift_release(v5).n128_u64[0];
    }
  }
  return result;
}

_QWORD *sub_10026CBB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v2)
  {
    v3 = 4;
    while (1)
    {
      v5 = v3 - 4;
      if ((a1 & 0xC000000000000001) == 0)
        break;
      v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, a1);
      v7 = v3 - 3;
      if (__OFADD__(v5, 1))
        goto LABEL_15;
LABEL_11:
      v8 = *(void **)(v6 + 72);
      v9 = v8;
      swift_release(v6);
      if (v8)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v10);
        v12 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v11 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v12 >= v11 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        v4 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v9);
        specialized Array._endMutation()(v4);
      }
      ++v3;
      if (v7 == v2)
        goto LABEL_20;
    }
    v6 = *(_QWORD *)(a1 + 8 * v3);
    swift_retain(v6);
    v7 = v3 - 3;
    if (!__OFADD__(v5, 1))
      goto LABEL_11;
LABEL_15:
    __break(1u);
LABEL_16:
    if (a1 < 0)
      v13 = a1;
    else
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter(v13);
  }
LABEL_20:
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_10026CD1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((unint64_t)a1 >> 62)
    goto LABEL_12;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v2)
  {
    v3 = 4;
    while (1)
    {
      v4 = v3 - 4;
      if ((a1 & 0xC000000000000001) == 0)
        break;
      v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, a1);
      v6 = v3 - 3;
      if (__OFADD__(v4, 1))
        goto LABEL_11;
LABEL_9:
      v7 = *(_QWORD *)(v5 + 72);
      swift_bridgeObjectRetain();
      swift_release(v5);
      sub_1002E4118(v7);
      ++v3;
      if (v6 == v2)
        goto LABEL_16;
    }
    v5 = *(_QWORD *)(a1 + 8 * v3);
    swift_retain(v5);
    v6 = v3 - 3;
    if (!__OFADD__(v4, 1))
      goto LABEL_9;
LABEL_11:
    __break(1u);
LABEL_12:
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter(v8);
  }
LABEL_16:
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_10026CE3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((unint64_t)a1 >> 62)
    goto LABEL_12;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v2)
  {
    v3 = 4;
    while (1)
    {
      v4 = v3 - 4;
      if ((a1 & 0xC000000000000001) == 0)
        break;
      v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, a1);
      v6 = v3 - 3;
      if (__OFADD__(v4, 1))
        goto LABEL_11;
LABEL_9:
      v7 = *(_QWORD *)(v5 + 16);
      swift_bridgeObjectRetain();
      swift_release(v5);
      sub_1002E413C(v7);
      ++v3;
      if (v6 == v2)
        goto LABEL_16;
    }
    v5 = *(_QWORD *)(a1 + 8 * v3);
    swift_retain(v5);
    v6 = v3 - 3;
    if (!__OFADD__(v4, 1))
      goto LABEL_9;
LABEL_11:
    __break(1u);
LABEL_12:
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter(v8);
  }
LABEL_16:
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void sub_10026CF5C(char a1, double a2)
{
  char *v2;
  char *v3;
  double v4;
  double v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t i;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  char *v44;
  __n128 v45;
  char isEscapingClosureAtFileLocation;
  uint64_t v47;
  _OWORD v48[34];
  _QWORD __dst[68];

  v3 = &v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs];
  v4 = *(double *)&v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs + 336];
  v5 = v4 + a2;
  if (*(double *)&v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_progress] != v4 + a2)
  {
    *(double *)&v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_progress] = v5;
    if (v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_isSelected] == 1)
    {
      if ((a1 & 1) != 0)
      {
        v6 = *(_QWORD *)&v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation];
        if (!v6)
          return;
        v7 = v3[40];
        v8 = *((_QWORD *)v3 + 6);
        v9 = v3[56];
        v10 = *((_QWORD *)v3 + 8);
        v11 = v3[72];
        v12 = *((_QWORD *)v3 + 22);
        v13 = v3[184];
        v14 = *((_QWORD *)v3 + 26);
        v15 = *((_QWORD *)v3 + 33);
        v16 = *((_QWORD *)v3 + 34);
        v17 = *((_QWORD *)v3 + 35);
        v18 = *((_QWORD *)v3 + 40);
        v19 = *((_QWORD *)v3 + 41);
        v20 = *((_QWORD *)v3 + 43);
        v21 = *((_QWORD *)v3 + 46);
        v22 = *((_QWORD *)v3 + 47);
        v23 = *((_QWORD *)v3 + 48);
        v24 = *((_QWORD *)v3 + 49);
        v25 = *((_QWORD *)v3 + 56);
        v26 = *((_QWORD *)v3 + 57);
        v27 = *((_QWORD *)v3 + 60);
        v28 = *((_QWORD *)v3 + 61);
        v29 = *((_QWORD *)v3 + 66);
        v30 = v3[536];
        *(_QWORD *)&v48[0] = *(_QWORD *)v3;
        *(_OWORD *)((char *)v48 + 8) = *(_OWORD *)(v3 + 8);
        *(_OWORD *)((char *)&v48[1] + 8) = *(_OWORD *)(v3 + 24);
        BYTE8(v48[2]) = v7;
        *(_QWORD *)&v48[3] = v8;
        BYTE8(v48[3]) = v9;
        *(_QWORD *)&v48[4] = v10;
        BYTE8(v48[4]) = v11;
        v31 = *((_OWORD *)v3 + 6);
        v48[5] = *((_OWORD *)v3 + 5);
        v48[6] = v31;
        v32 = *((_OWORD *)v3 + 8);
        v48[7] = *((_OWORD *)v3 + 7);
        v48[8] = v32;
        v33 = *((_OWORD *)v3 + 10);
        v48[9] = *((_OWORD *)v3 + 9);
        v48[10] = v33;
        *(_QWORD *)&v48[11] = v12;
        BYTE8(v48[11]) = v13;
        v48[12] = *((_OWORD *)v3 + 12);
        *(_OWORD *)((char *)&v48[13] + 8) = *(_OWORD *)(v3 + 216);
        *(_OWORD *)((char *)&v48[14] + 8) = *(_OWORD *)(v3 + 232);
        *(_OWORD *)((char *)&v48[15] + 8) = *(_OWORD *)(v3 + 248);
        *(_QWORD *)&v48[13] = v14;
        *((_QWORD *)&v48[16] + 1) = v15;
        *(_QWORD *)&v48[17] = v16;
        *((_QWORD *)&v48[17] + 1) = v17;
        v34 = *((_OWORD *)v3 + 19);
        v48[18] = *((_OWORD *)v3 + 18);
        v48[19] = v34;
        *(_QWORD *)&v48[20] = v18;
        *((_QWORD *)&v48[20] + 1) = v19;
        *(double *)&v48[21] = v4;
        *((_QWORD *)&v48[21] + 1) = v20;
        v48[22] = *((_OWORD *)v3 + 22);
        *(_QWORD *)&v48[23] = v21;
        *((_QWORD *)&v48[23] + 1) = v22;
        *(_QWORD *)&v48[24] = v23;
        *((_QWORD *)&v48[24] + 1) = v24;
        v35 = *((_OWORD *)v3 + 26);
        v48[25] = *((_OWORD *)v3 + 25);
        v48[26] = v35;
        v48[27] = *((_OWORD *)v3 + 27);
        *(_QWORD *)&v48[28] = v25;
        *((_QWORD *)&v48[28] + 1) = v26;
        v48[29] = *((_OWORD *)v3 + 29);
        *(_QWORD *)&v48[30] = v27;
        *((_QWORD *)&v48[30] + 1) = v28;
        v36 = *((_OWORD *)v3 + 32);
        v48[31] = *((_OWORD *)v3 + 31);
        v48[32] = v36;
        *(_QWORD *)&v48[33] = v29;
        BYTE8(v48[33]) = v30;
        memcpy(__dst, v48, 0x219uLL);
        v37 = v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_direction];
        v38 = *(_QWORD *)(v6 + 24);
        if (!((unint64_t)v38 >> 62))
        {
          v39 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_retain(v6);
          sub_10026EC3C((uint64_t)v48);
          swift_bridgeObjectRetain();
          if (v39)
          {
LABEL_7:
            if (v39 < 1)
            {
              __break(1u);
              return;
            }
            for (i = 0; i != v39; ++i)
            {
              if ((v38 & 0xC000000000000001) != 0)
              {
                v41 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v38);
              }
              else
              {
                v41 = *(_QWORD *)(v38 + 8 * i + 32);
                swift_retain(v41);
              }
              sub_1002714A0((uint64_t)__dst, v37, v5);
              swift_release(v41);
            }
          }
LABEL_19:
          swift_bridgeObjectRelease();
          sub_10026ED0C((uint64_t)v48);
          swift_release(v6);
          return;
        }
      }
      else
      {
        v37 = objc_opt_self(UIView);
        v6 = swift_allocObject(&unk_10045D920, 32, 7);
        *(_QWORD *)(v6 + 16) = v2;
        *(double *)(v6 + 24) = v5;
        v38 = swift_allocObject(&unk_10045D948, 32, 7);
        *(_QWORD *)(v38 + 16) = sub_10026F784;
        *(_QWORD *)(v38 + 24) = v6;
        __dst[4] = sub_1000B0290;
        __dst[5] = v38;
        __dst[0] = _NSConcreteStackBlock;
        __dst[1] = 1107296256;
        __dst[2] = sub_100009BD0;
        __dst[3] = &unk_10045D960;
        v42 = _Block_copy(__dst);
        v43 = __dst[5];
        v44 = v2;
        swift_retain(v38);
        objc_msgSend((id)v37, "performWithoutAnimation:", v42, swift_release(v43).n128_f64[0]);
        _Block_release(v42);
        isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v38, "", 124, 84, 48, 1, v45);
        swift_release(v6);
        swift_release(v38);
        if ((isEscapingClosureAtFileLocation & 1) == 0)
          return;
        __break(1u);
      }
      if (v38 < 0)
        v47 = v38;
      else
        v47 = v38 & 0xFFFFFFFFFFFFFF8;
      swift_retain(v6);
      sub_10026EC3C((uint64_t)v48);
      swift_bridgeObjectRetain();
      v39 = _CocoaArrayWrapper.endIndex.getter(v47);
      if (v39)
        goto LABEL_7;
      goto LABEL_19;
    }
  }
}

void sub_10026D334(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[544];

  v2 = *(_QWORD *)(a1
                 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation);
  if (v2)
  {
    memcpy(v11, (const void *)(a1 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs), 0x219uLL);
    v5 = *(unsigned __int8 *)(a1
                            + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_direction);
    v6 = *(_QWORD *)(v2 + 24);
    if ((unint64_t)v6 >> 62)
    {
      if (v6 < 0)
        v10 = *(_QWORD *)(v2 + 24);
      else
        v10 = v6 & 0xFFFFFFFFFFFFFF8;
      swift_retain(v2);
      sub_10026EC3C((uint64_t)v11);
      swift_bridgeObjectRetain();
      v7 = _CocoaArrayWrapper.endIndex.getter(v10);
      if (v7)
        goto LABEL_4;
    }
    else
    {
      v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_retain(v2);
      sub_10026EC3C((uint64_t)v11);
      swift_bridgeObjectRetain();
      if (v7)
      {
LABEL_4:
        if (v7 < 1)
        {
          __break(1u);
          return;
        }
        for (i = 0; i != v7; ++i)
        {
          if ((v6 & 0xC000000000000001) != 0)
          {
            v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v6);
          }
          else
          {
            v9 = *(_QWORD *)(v6 + 8 * i + 32);
            swift_retain(v9);
          }
          sub_1002714A0((uint64_t)v11, v5, a2);
          swift_release(v9);
        }
      }
    }
    swift_bridgeObjectRelease();
    sub_10026ED0C((uint64_t)v11);
    swift_release(v2);
  }
}

id sub_10026D490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  _BYTE *v6;
  _BYTE *v7;
  _QWORD *v11;
  char v12;
  double v13;
  uint64_t v14;
  void *v15;
  double v16;
  uint64_t v17;

  v7 = v6;
  v11 = &v7[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_text];
  v12 = a5 & 1;
  *v11 = a1;
  v11[1] = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v7[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_words] = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v7[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_alignment] = a4;
  v7[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_direction] = v12;
  *(_QWORD *)&v7[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_capabilities] = a6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_10026E548(0);
  objc_msgSend(v7, "bounds");
  sub_10026DCB8(v13);
  if (v7[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_isSelected] == 1)
  {
    sub_10026E7EC();
    v14 = OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_basicView;
    objc_msgSend(*(id *)&v7[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_basicView], "removeFromSuperview");
    v15 = *(void **)&v7[v14];
    *(_QWORD *)&v7[v14] = 0;

  }
  else
  {
    sub_10026E5DC();
    v17 = *(_QWORD *)&v7[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation];
    if (v17)
    {
      swift_retain(*(_QWORD *)&v7[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation]);
      sub_10026FA64();
      *(_QWORD *)&v16 = swift_release(v17).n128_u64[0];
    }
  }
  objc_msgSend(v7, "setNeedsLayout", v16);
  return objc_msgSend(v7, "layoutIfNeeded");
}

id sub_10026D5F0(uint64_t a1, uint64_t a2, uint64_t a3, void *__src, char a5, uint64_t a6, char a7, uint64_t a8)
{
  _BYTE *v8;
  char v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  objc_super v19;

  v14 = a5 & 1;
  v8[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_isScrolling] = 1;
  v8[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_isSelected] = 0;
  v15 = OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_progress;
  *(_QWORD *)&v8[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_progress] = 0;
  *(_QWORD *)&v8[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_framesetter] = 0;
  v16 = a7 & 1;
  *(_QWORD *)&v8[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation] = 0;
  *(_QWORD *)&v8[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_basicView] = 0;
  memcpy(&v8[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs], __src, 0x219uLL);
  *(_QWORD *)&v8[v15] = 0;
  v17 = &v8[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_text];
  *v17 = a1;
  v17[1] = a2;
  *(_QWORD *)&v8[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_words] = a3;
  v8[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_kind] = v14;
  *(_QWORD *)&v8[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_alignment] = a6;
  v8[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_direction] = v16;
  *(_QWORD *)&v8[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_capabilities] = a8;
  v19.receiver = v8;
  v19.super_class = (Class)_s8TextViewCMa();
  return objc_msgSendSuper2(&v19, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
}

void sub_10026D7B4()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  void *v7;
  double v8;
  void *v9;
  uint64_t v10;
  objc_super v11;

  v1 = v0;
  v11.receiver = v0;
  v11.super_class = (Class)_s8TextViewCMa();
  objc_msgSendSuper2(&v11, "layoutSubviews");
  v2 = OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation;
  v3 = *(_QWORD *)&v0[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation];
  if (v3)
  {
    swift_retain(v3);
    sub_10026FA64();
    swift_release(v3);
    v4 = *(_QWORD *)&v1[v2];
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)&v1[v2] = 0;
  *(_QWORD *)&v5 = swift_release(v4).n128_u64[0];
  v6 = OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_basicView;
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_basicView], "removeFromSuperview", v5);
  v7 = *(void **)&v1[v6];
  *(_QWORD *)&v1[v6] = 0;

  objc_msgSend(v1, "bounds");
  sub_10026DCB8(v8);
  if (v1[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_isSelected] == 1)
  {
    sub_10026E7EC();
    objc_msgSend(*(id *)&v1[v6], "removeFromSuperview");
    v9 = *(void **)&v1[v6];
    *(_QWORD *)&v1[v6] = 0;

  }
  else
  {
    sub_10026E5DC();
    v10 = *(_QWORD *)&v1[v2];
    if (v10)
    {
      swift_retain(*(_QWORD *)&v1[v2]);
      sub_10026FA64();
      swift_release(v10);
    }
  }
  sub_10026CF5C(0, *(double *)&v1[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_progress]);
}

double sub_10026D918(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  CTParagraphStyleRef v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  NSString *v20;
  id v21;
  NSString *v22;
  id v23;
  NSString v24;
  Class isa;
  const __CFAttributedString *v26;
  uint64_t v27;
  void *v28;
  const __CTFramesetter *v29;
  CTFramesetterRef v30;
  void *v31;
  id v32;
  double v33;
  double v34;
  char v36;
  char v37;
  CTParagraphStyleSetting v38;
  int v39;
  uint64_t v40;
  char *v41;
  _BYTE v42[112];
  _QWORD v43[4];

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_text);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_text + 8);
  swift_bridgeObjectRetain();
  LOBYTE(v3) = String.containsExcessiveHeightCharacters.getter(v3, v4);
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    NSTextAlignment.ctTextAlignment.getter(*(_QWORD *)(v1
                                                     + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_alignment));
    v38.spec = kCTParagraphStyleSpecifierLineBoundsOptions;
    v38.valueSize = 8;
    v38.value = &v37;
    v39 = 0;
    v40 = 1;
    v41 = &v36;
    v5 = CTParagraphStyleCreate(&v38, 2uLL);
    type metadata accessor for CTParagraphStyle(0);
  }
  else
  {
    v5 = (CTParagraphStyleRef)objc_msgSend(objc_allocWithZone((Class)NSMutableParagraphStyle), "init");
    -[__CTParagraphStyle setAlignment:](v5, "setAlignment:", *(_QWORD *)(v1 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_alignment));
    v7 = v1 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs;
    if ((*(_BYTE *)(v1 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs + 184) & 1) == 0)
    {
      v8 = *(double *)(v7 + 176);
      v9 = OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_kind;
      if (*(_BYTE *)(v1 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_kind))
        v10 = 192;
      else
        v10 = 168;
      objc_msgSend(*(id *)(v7 + v10), "ascender");
      if (*(_BYTE *)(v1 + v9))
        v12 = 192;
      else
        v12 = 168;
      v13 = v8 - v11;
      objc_msgSend(*(id *)(v7 + v12), "descender");
      -[__CTParagraphStyle setLineSpacing:](v5, "setLineSpacing:", v13 + v14);
    }
    v6 = sub_1000087DC(0, &qword_10049A388, NSMutableParagraphStyle_ptr);
  }
  v43[3] = v6;
  v43[0] = v5;
  v15 = sub_100005574(&qword_10049A390);
  inited = swift_initStackObject(v15, v42);
  *(_OWORD *)(inited + 16) = xmmword_100384A60;
  *(_QWORD *)(inited + 32) = NSFontAttributeName;
  v17 = 168;
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_kind))
    v17 = 192;
  v18 = *(void **)(v1 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs + v17);
  v19 = sub_1000087DC(0, (unint64_t *)&qword_100498E28, UIFont_ptr);
  *(_QWORD *)(inited + 40) = v18;
  *(_QWORD *)(inited + 64) = v19;
  *(_QWORD *)(inited + 72) = NSParagraphStyleAttributeName;
  sub_10000684C((uint64_t)v43, inited + 80);
  swift_bridgeObjectRetain();
  v20 = NSFontAttributeName;
  v21 = v18;
  v22 = NSParagraphStyleAttributeName;
  sub_1002338B8(inited);
  v23 = objc_allocWithZone((Class)NSAttributedString);
  v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  _s3__C3KeyVMa_1(0);
  sub_10026F718();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v26 = (const __CFAttributedString *)objc_msgSend(v23, "initWithString:attributes:", v24, isa);

  v27 = OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_framesetter;
  v28 = *(void **)(v1 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_framesetter);
  if (v28)
  {
    v29 = *(const __CTFramesetter **)(v1
                                    + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_framesetter);
  }
  else
  {
    v30 = CTFramesetterCreateWithAttributedString(v26);
    v31 = *(void **)(v1 + v27);
    *(_QWORD *)(v1 + v27) = v30;
    v29 = v30;

    v28 = 0;
  }
  v32 = v28;
  v33 = CTFramesetterRef.suggestedFrameSize(constraints:)(a1, INFINITY);
  CTFramesetterRef.createFrame(_:)(0.0, 0.0, v33, v34);

  sub_10000682C(v43);
  return v33;
}

void sub_10026DCB8(double a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CGRect v16;

  v2 = v1;
  objc_msgSend(v1, "bounds");
  if (CGRectGetHeight(v16) != 0.0)
  {
    v4 = OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation;
    if (!*(_QWORD *)&v1[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation])
    {
      v5 = sub_10026D918(a1);
      v7 = v6;
      v8 = v5;
      v10 = v9;
      swift_bridgeObjectRetain();
      CTFrameRef.linesWithFrames(flippedCoordinates:useExtendedLineBounds:)(1, 0);
      v11 = __chkstk_darwin();
      v12 = sub_10026EDEC(v11, (uint64_t (*)(double, double, double, double))sub_10026EDDC);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v13 = _s5FrameCMa();
      v14 = swift_allocObject(v13, 88, 7);
      *(_QWORD *)(v14 + 64) = 0;
      *(_BYTE *)(v14 + 72) = 2;
      *(_QWORD *)(v14 + 80) = 0;
      *(_QWORD *)(v14 + 16) = v7;
      *(_QWORD *)(v14 + 24) = v12;
      *(_QWORD *)(v14 + 32) = 0;
      *(_QWORD *)(v14 + 40) = 0;
      *(double *)(v14 + 48) = v8;
      *(_QWORD *)(v14 + 56) = v10;
      v15 = *(_QWORD *)&v2[v4];
      *(_QWORD *)&v2[v4] = v14;
      swift_release(v15);
    }
  }
}

uint64_t sub_10026DE0C(void *a1, void *a2, double a3, double a4, double a5, double a6, uint64_t a7, uint64_t a8, char a9)
{
  void *v16;
  id v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;

  v16 = CTLineRef.glyphRuns.getter();
  v17 = a2;
  v18 = sub_10026F3D4((unint64_t)v16, (uint64_t)v17);
  swift_bridgeObjectRelease();

  v19 = sub_10026EEE4((uint64_t)v18, (uint64_t (*)(_QWORD *, id, uint64_t, uint64_t))sub_10026F708);
  swift_bridgeObjectRelease();
  v20 = _s4LineCMa();
  v21 = swift_allocObject(v20, 96, 7);
  *(_QWORD *)(v21 + 72) = 0;
  *(_BYTE *)(v21 + 80) = 0;
  *(_QWORD *)(v21 + 88) = 0;
  *(_QWORD *)(v21 + 16) = v19;
  *(_QWORD *)(v21 + 24) = a1;
  *(double *)(v21 + 40) = a3;
  *(double *)(v21 + 48) = a4;
  *(double *)(v21 + 56) = a5;
  *(double *)(v21 + 64) = a6;
  *(_BYTE *)(v21 + 32) = a9;
  v22 = a1;
  return v21;
}

Swift::Int sub_10026DF10(__int128 *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10)
{
  __C::_NSRange v20;
  Swift::Int location;
  __C::_NSRange_optional v22;
  Swift::Int length;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  Swift::Int v29;
  uint64_t v30;
  char v31;
  char v32;
  Swift::Int v33;
  char v34;
  char v35;
  Swift::Int v36;
  char v37;
  unint64_t v38;
  uint64_t v40;
  double v41;
  __C::_NSRange v42;
  double v43;
  CGFloat Height;
  id v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v54;
  Swift::Int v55;
  uint64_t v56;
  Swift::Int v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __C::_NSRange v61;
  CGRect v62;

  CTRunRef.cfStringRange.getter();
  v20.location = sub_10025C954(*((_QWORD *)a1 + 2));
  v22 = _NSRange.intersection(_:)(v20);
  location = v22.value.location;
  v22.value.location = 0;
  if (!v22.is_nil)
  {
    length = v22.value.length;
    if (v22.value.length >= 1)
    {
      v24 = Range<>.init(_:in:)(location, v22.value.length, a5, a6);
      if ((v26 & 1) == 0)
      {
        v27 = v24;
        v58 = v25;
        v28 = CTRunRef.status.getter();
        v22.value.location = location;
        if ((v28 & 1) != 0)
        {
          v29 = location + length;
          if (__OFADD__(location, length))
          {
LABEL_23:
            __break(1u);
            goto LABEL_24;
          }
          v22.value.location = v29 - 1;
          if (__OFSUB__(v29, 1))
          {
LABEL_24:
            __break(1u);
            goto LABEL_25;
          }
        }
        v56 = v27;
        v30 = sub_1002838A8(v22.value.location, a4);
        if ((v31 & 1) == 0)
          goto LABEL_16;
        v32 = CTRunRef.status.getter();
        v22.value.location = location;
        if ((v32 & 1) != 0)
        {
          v33 = location + length;
          if (__OFADD__(location, length))
          {
LABEL_25:
            __break(1u);
            goto LABEL_26;
          }
          v22.value.location = v33 - 2;
          if (__OFSUB__(v33, 2))
          {
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
        }
        v30 = sub_1002838A8(v22.value.location, a4);
        if ((v34 & 1) == 0)
          goto LABEL_16;
        v35 = CTRunRef.status.getter();
        v22.value.location = location;
        if ((v35 & 1) != 0)
        {
          v36 = location + length;
          if (__OFADD__(location, length))
          {
LABEL_27:
            __break(1u);
            goto LABEL_28;
          }
          v22.value.location = v36 - 3;
          if (__OFSUB__(v36, 3))
          {
LABEL_28:
            __break(1u);
            return v22.value.location;
          }
        }
        v30 = sub_1002838A8(v22.value.location, a4);
        if ((v37 & 1) == 0)
        {
LABEL_16:
          v38 = v30;
          v22.value.location = String.subscript.getter(v56, v58, a5, a6);
          if ((v38 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else
          {
            v54 = *(_QWORD *)&v22.is_nil;
            v55 = v22.value.length;
            v57 = v22.value.location;
            v59 = v40;
            if (v38 < *(_QWORD *)(a3 + 16))
            {
              v41 = *(double *)(a3 + 16 * v38 + 32);
              v42.location = location;
              v42.length = length;
              v61 = CTRunRef.convertToGlyphRange(textRange:)(v42);
              v43 = CTRunRef.typographicBounds(range:)((CFRange)v61);
              v62.origin.x = a7;
              v62.origin.y = a8;
              v62.size.width = a9;
              v62.size.height = a10;
              Height = CGRectGetHeight(v62);
              v45 = a2;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v46 = swift_bridgeObjectRetain();
              v47 = sub_10026F22C(v46, v45, a5, a6, a4, a3, v41, a7, a8, a9, a10);
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v60 = *a1;
              swift_bridgeObjectRetain();
              sub_1000595EC((uint64_t)&v60);
              v48 = static String._fromSubstring(_:)(v57, v55, v54, v59);
              v50 = v49;
              swift_bridgeObjectRelease();
              v51 = _s4WordCMa();
              v22.value.location = swift_allocObject(v51, 144, 7);
              *(_BYTE *)(v22.value.location + 88) = 2;
              *(_QWORD *)(v22.value.location + 128) = 0;
              *(_QWORD *)(v22.value.location + 136) = 0;
              v52 = a1[1];
              *(_OWORD *)(v22.value.location + 16) = *a1;
              *(_OWORD *)(v22.value.location + 32) = v52;
              *(_BYTE *)(v22.value.location + 48) = *((_BYTE *)a1 + 32);
              *(_QWORD *)(v22.value.location + 56) = v48;
              *(_QWORD *)(v22.value.location + 64) = v50;
              *(_QWORD *)(v22.value.location + 72) = v47;
              *(_QWORD *)(v22.value.location + 80) = 0;
              *(double *)(v22.value.location + 96) = v41;
              *(_QWORD *)(v22.value.location + 104) = 0;
              *(double *)(v22.value.location + 112) = v43;
              *(CGFloat *)(v22.value.location + 120) = Height;
              return v22.value.location;
            }
          }
          __break(1u);
          goto LABEL_23;
        }
      }
      v22.value.location = 0;
    }
  }
  return v22.value.location;
}

Swift::Int sub_10026E204@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, Swift::Int *a7@<X8>, double a8@<D0>, CGFloat a9@<D1>, CGFloat a10@<D2>, CGFloat a11@<D3>, CGFloat a12@<D4>)
{
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  Swift::Int v25;
  __C::_NSRange v26;
  Swift::Int location;
  __C::_NSRange_optional v28;
  Swift::Int length;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  Swift::Int v34;
  uint64_t v35;
  char v36;
  char v37;
  Swift::Int v38;
  char v39;
  char v40;
  Swift::Int v41;
  char v42;
  unint64_t v43;
  uint64_t v45;
  double v46;
  __C::_NSRange v47;
  CGFloat Height;
  __C::_NSRange v49;
  __C::_NSRange v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v59;
  double v60;
  uint64_t v61;
  Swift::Int v62;
  uint64_t v63;
  Swift::Int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  Swift::Int v68;
  uint64_t v69;
  uint64_t v70;
  __C::_NSRange v72;
  CGRect v73;

  v23 = *a1;
  v22 = a1[1];
  v24 = a1[4];
  v69 = a1[3];
  v70 = a1[2];
  v25 = a1[5];
  v67 = a1[6];
  CTRunRef.cfStringRange.getter();
  v68 = v24;
  v26.location = v24;
  v26.length = v25;
  v28 = _NSRange.intersection(_:)(v26);
  location = v28.value.location;
  v28.value.location = 0;
  if (v28.is_nil)
    goto LABEL_20;
  length = v28.value.length;
  if (v28.value.length < 1)
    goto LABEL_20;
  v30 = Range<>.init(_:in:)(location, v28.value.length, a3, a4);
  if ((v32 & 1) != 0)
  {
    v28.value.location = 0;
    goto LABEL_20;
  }
  v63 = v31;
  v65 = v30;
  v33 = CTRunRef.status.getter();
  v28.value.location = location;
  if ((v33 & 1) != 0)
  {
    v34 = location + length;
    if (__OFADD__(location, length))
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v28.value.location = v34 - 1;
    if (__OFSUB__(v34, 1))
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
  }
  v35 = sub_1002838A8(v28.value.location, a5);
  if ((v36 & 1) != 0)
  {
    v37 = CTRunRef.status.getter();
    v28.value.location = location;
    if ((v37 & 1) != 0)
    {
      v38 = location + length;
      if (__OFADD__(location, length))
      {
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      v28.value.location = v38 - 2;
      if (__OFSUB__(v38, 2))
      {
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
    }
    v35 = sub_1002838A8(v28.value.location, a5);
    if ((v39 & 1) != 0)
    {
      v40 = CTRunRef.status.getter();
      v28.value.location = location;
      if ((v40 & 1) != 0)
      {
        v41 = location + length;
        if (__OFADD__(location, length))
        {
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
        v28.value.location = v41 - 3;
        if (__OFSUB__(v41, 3))
        {
LABEL_29:
          __break(1u);
          return v28.value.location;
        }
      }
      v35 = sub_1002838A8(v28.value.location, a5);
      if ((v42 & 1) != 0)
      {
        v28.value.location = 0;
        goto LABEL_20;
      }
    }
  }
  v43 = v35;
  v28.value.location = String.subscript.getter(v65, v63, a3, a4);
  if ((v43 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v61 = *(_QWORD *)&v28.is_nil;
  v62 = v28.value.length;
  v64 = v28.value.location;
  v66 = v45;
  if (v43 >= *(_QWORD *)(a6 + 16))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v46 = *(double *)(a6 + 16 * v43 + 32);
  v47.location = location;
  v47.length = length;
  v72 = CTRunRef.convertToGlyphRange(textRange:)(v47);
  v60 = CTRunRef.typographicBounds(range:)((CFRange)v72);
  v59 = v46 - a8;
  v73.origin.x = a9;
  v73.origin.y = a10;
  v73.size.width = a11;
  v73.size.height = a12;
  Height = CGRectGetHeight(v73);
  v49.location = location;
  v49.length = length;
  v50 = CTRunRef.convertToGlyphRange(textRange:)(v49);
  swift_bridgeObjectRetain();
  v51 = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10026F044(a8, a9, a10, a11, a12, v50.location, v50.length, a6, (uint64_t)v51, a3, a4, a5);
  v53 = v52;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v54 = static String._fromSubstring(_:)(v64, v62, v61, v66);
  v56 = v55;
  swift_bridgeObjectRelease();
  v57 = _s8SyllableCMa();
  v28.value.location = swift_allocObject(v57, 152, 7);
  *(_QWORD *)(v28.value.location + 88) = v53;
  *(_QWORD *)(v28.value.location + 96) = 0;
  *(_BYTE *)(v28.value.location + 104) = 2;
  *(_QWORD *)(v28.value.location + 144) = 0;
  *(_QWORD *)(v28.value.location + 16) = v23;
  *(_QWORD *)(v28.value.location + 24) = v22;
  *(_QWORD *)(v28.value.location + 32) = v70;
  *(_QWORD *)(v28.value.location + 40) = v69;
  *(_QWORD *)(v28.value.location + 48) = v68;
  *(_QWORD *)(v28.value.location + 56) = v25;
  *(_QWORD *)(v28.value.location + 64) = v67;
  *(_QWORD *)(v28.value.location + 72) = v54;
  *(_QWORD *)(v28.value.location + 80) = v56;
  *(double *)(v28.value.location + 112) = v59;
  *(_QWORD *)(v28.value.location + 120) = 0;
  *(double *)(v28.value.location + 128) = v60;
  *(CGFloat *)(v28.value.location + 136) = Height;
LABEL_20:
  *a7 = v28.value.location;
  return v28.value.location;
}

void sub_10026E548(char a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  void *v9;

  v2 = v1;
  if ((a1 & 1) == 0)
  {
    v3 = *(void **)(v1 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_framesetter);
    *(_QWORD *)(v1 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_framesetter) = 0;

  }
  v4 = OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation;
  v5 = *(_QWORD *)(v1
                 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation);
  if (v5)
  {
    swift_retain(*(_QWORD *)(v2
                           + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation));
    sub_10026FA64();
    swift_release(v5);
    v6 = *(_QWORD *)(v2 + v4);
  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)(v2 + v4) = 0;
  *(_QWORD *)&v7 = swift_release(v6).n128_u64[0];
  v8 = OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_basicView;
  objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_basicView), "removeFromSuperview", v7);
  v9 = *(void **)(v2 + v8);
  *(_QWORD *)(v2 + v8) = 0;

}

void sub_10026E5DC()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  void *v4;
  double v5;
  double v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  double v12;
  double v13;
  double v14;
  id v15;
  double v16;
  id v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  id v24;
  id v25;

  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation];
  if (v1)
  {
    v2 = v0;
    v3 = OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_basicView;
    if (!*(_QWORD *)&v0[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_basicView])
    {
      v4 = *(void **)(v1 + 16);
      v5 = *(double *)(v1 + 48);
      v6 = *(double *)(v1 + 56);
      v7 = objc_allocWithZone((Class)type metadata accessor for CTLabel.Frame());
      v8 = v4;
      swift_retain(v1);
      v9 = CTLabel.Frame.init(ctFrame:suggestedSize:colorOverride:)(v8, 0, v5, v6);
      objc_msgSend(v9, "setOpaque:", 0);
      v10 = *(_QWORD *)&v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_alignment];
      if (v10 == 1)
      {
        v15 = v9;
        objc_msgSend(v2, "bounds");
        v13 = (v16 - v5) * 0.5;
        v14 = 0.0;
      }
      else if (v10 == 2)
      {
        v11 = v9;
        objc_msgSend(v2, "bounds");
        v13 = v12 - v5;
        v14 = 0.0;
      }
      else
      {
        v17 = v9;
        objc_msgSend(v2, "bounds");
        v5 = v18;
        v6 = v19;
      }
      objc_msgSend(v9, "setFrame:", v13, v14, v5, v6);

      objc_msgSend(v2, "bounds");
      v24 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", v20, v21, v22, v23);
      objc_msgSend(v24, "setBackgroundColor:", *(_QWORD *)&v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs + 248]);
      objc_msgSend(v24, "setMaskView:", v9);
      objc_msgSend(v2, "addSubview:", v24);
      v25 = *(id *)&v2[v3];
      *(_QWORD *)&v2[v3] = v24;
      swift_release(v1);

    }
  }
}

void sub_10026E7EC()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;
  char v3;
  void **v4;
  uint64_t v5;
  void *v6;
  void **v7;
  void **v8;
  void *v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v17;
  double v18;
  double v19;
  double v20;
  double v21;
  id v22;
  double v23;
  double v24;
  double v25;
  _BYTE v26[544];

  v1 = v0;
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation];
  if (v2 && !*(_QWORD *)(v2 + 80))
  {
    v3 = v1[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_kind];
    v4 = (void **)&v1[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs];
    v5 = 21;
    if (v3)
      v5 = 24;
    v6 = v4[v5];
    v7 = v4 + 33;
    if ((v1[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_kind] & 1) == 0)
      v7 = v4 + 30;
    if (v1[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_isSelected] == 1)
      v8 = v7;
    else
      v8 = v4 + 31;
    v9 = *v8;
    memcpy(v26, v4, 0x219uLL);
    v10 = *(_QWORD *)&v1[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_capabilities];
    v11 = !sub_1002836D4(1, v10) && !sub_1002836D4(2, v10);
    v12 = v1[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_direction];
    swift_retain(v2);
    v13 = v6;
    v14 = v9;
    sub_10026EC3C((uint64_t)v26);
    v15 = (void *)sub_10026FF0C(v13, v14, v3, v26, v11, v12);
    sub_10026ED0C((uint64_t)v26);
    swift_release(v2);

    v16 = *(_QWORD *)&v1[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_alignment];
    if (v16 == 1)
    {
      v22 = v15;
      objc_msgSend(v1, "bounds");
      v24 = v23;
      objc_msgSend(v22, "bounds");
      v21 = (v24 - v25) * 0.5;
    }
    else
    {
      if (v16 != 2)
      {
LABEL_18:
        objc_msgSend(v1, "addSubview:", v15);

        return;
      }
      v17 = v15;
      objc_msgSend(v1, "bounds");
      v19 = v18;
      objc_msgSend(v17, "bounds");
      v21 = v19 - v20;
    }
    objc_msgSend(v15, "frame");
    objc_msgSend(v15, "setFrame:", v21);

    goto LABEL_18;
  }
}

id sub_10026EA30()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)_s8TextViewCMa();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t _s8TextViewCMa()
{
  return objc_opt_self(_TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView);
}

uint64_t _s8TextViewC4KindOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10026EB74 + 4 * byte_100398635[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10026EBA8 + 4 * byte_100398630[v4]))();
}

uint64_t sub_10026EBA8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10026EBB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10026EBB8);
  return result;
}

uint64_t sub_10026EBC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10026EBCCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10026EBD0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10026EBD8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s8TextViewC4KindOMa()
{
  return &_s8TextViewC4KindON;
}

unint64_t sub_10026EBF8()
{
  unint64_t result;

  result = qword_10049A380;
  if (!qword_10049A380)
  {
    result = swift_getWitnessTable(&unk_100398648, &_s8TextViewC4KindON);
    atomic_store(result, (unint64_t *)&qword_10049A380);
  }
  return result;
}

uint64_t sub_10026EC3C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  v2 = *(void **)(a1 + 192);
  v3 = *(void **)(a1 + 200);
  v4 = *(void **)(a1 + 208);
  v5 = *(void **)(a1 + 232);
  v6 = *(void **)(a1 + 240);
  v8 = *(void **)(a1 + 248);
  v7 = *(void **)(a1 + 256);
  v9 = *(void **)(a1 + 264);
  v10 = *(void **)(a1 + 272);
  v27 = *(void **)(a1 + 328);
  v28 = *(void **)(a1 + 344);
  v29 = *(void **)(a1 + 376);
  v30 = *(void **)(a1 + 384);
  v31 = *(void **)(a1 + 456);
  v11 = *(id *)(a1 + 168);
  v12 = v2;
  v13 = v3;
  v14 = v4;
  v15 = v5;
  v16 = v6;
  v17 = v8;
  v18 = v7;
  v19 = v9;
  v20 = v10;
  v21 = v27;
  v22 = v28;
  v23 = v29;
  v24 = v30;
  v25 = v31;
  return a1;
}

uint64_t sub_10026ED0C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v15 = *(void **)(a1 + 192);
  v16 = *(void **)(a1 + 168);
  v13 = *(void **)(a1 + 208);
  v14 = *(void **)(a1 + 200);
  v2 = *(void **)(a1 + 240);
  v12 = *(void **)(a1 + 232);
  v3 = *(void **)(a1 + 248);
  v4 = *(void **)(a1 + 256);
  v6 = *(void **)(a1 + 264);
  v5 = *(void **)(a1 + 272);
  v7 = *(void **)(a1 + 328);
  v8 = *(void **)(a1 + 344);
  v9 = *(void **)(a1 + 376);
  v10 = *(void **)(a1 + 384);

  return a1;
}

uint64_t sub_10026EDDC(void *a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5;

  return sub_10026DE0C(a1, *(void **)(v5 + 16), a2, a3, a4, a5, *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), *(_BYTE *)(v5 + 40));
}

_QWORD *sub_10026EDEC(uint64_t a1, uint64_t (*a2)(double, double, double, double))
{
  uint64_t v3;
  _QWORD *result;
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v3);
    v6 = (double *)(a1 + 64);
    do
    {
      v7 = *(v6 - 3);
      v8 = *(v6 - 2);
      v9 = *(v6 - 1);
      v10 = *v6;
      v11 = *((id *)v6 - 4);
      v12 = a2(v7, v8, v9, v10);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v13 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
      v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v12);
      specialized ContiguousArray._endMutation()(v14);
      v6 += 5;
      --v3;
    }
    while (v3);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_10026EEE4(uint64_t a1, uint64_t (*a2)(_QWORD *, id, uint64_t, uint64_t))
{
  _QWORD *result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD v21[4];
  char v22;
  unint64_t v23;

  result = _swiftEmptyArrayStorage;
  v23 = (unint64_t)_swiftEmptyArrayStorage;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    v19 = a1;
    v5 = (uint64_t *)(a1 + 48);
    do
    {
      v7 = *(v5 - 1);
      v9 = *v5;
      v8 = v5[1];
      v10 = *((_BYTE *)v5 + 16);
      v11 = (void *)v5[3];
      v12 = v5[4];
      v13 = v5[5];
      v21[0] = *(v5 - 2);
      v21[1] = v7;
      v21[2] = v9;
      v21[3] = v8;
      v22 = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v14 = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v15 = a2(v21, v14, v12, v13);
      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease(v12);

      swift_bridgeObjectRelease(v9);
      v16 = swift_bridgeObjectRelease(v7);
      if (v15)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v16);
        v18 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v17 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v18 >= v17 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        v6 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v15);
        specialized Array._endMutation()(v6);
      }
      v5 += 8;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease(v19);
    return (_QWORD *)v23;
  }
  return result;
}

void sub_10026F044(double a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  CFRange v25;
  unint64_t location;
  double v27;
  double v28;
  double Height;
  double v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[5];
  char v42;
  _QWORD *v43;
  CGRect v44;

  v43 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(0);
  _NSRange.makeIterator()();
  v41[2] = v21;
  v41[3] = v22;
  v41[4] = v23;
  v42 = v24 & 1;
  *(Swift::Int_optional *)&v25.location = _NSRange.NSRangeIterator.next()();
  if ((v25.length & 1) == 0)
  {
    location = v25.location;
    while ((location & 0x8000000000000000) == 0)
    {
      if (location >= *(_QWORD *)(a8 + 16))
        goto LABEL_9;
      v27 = *(double *)(a8 + 32 + 16 * location);
      v25.location = location;
      v28 = CTRunRef.typographicBounds(forGlyphAtIndex:)(v25);
      v44.origin.x = a2;
      v44.origin.y = a3;
      v44.size.width = a4;
      v44.size.height = a5;
      Height = CGRectGetHeight(v44);
      if (location >= *(_QWORD *)(a12 + 16))
        goto LABEL_10;
      v30 = Height;
      v31 = *(_QWORD *)(a12 + 32 + 8 * location);
      v41[0] = a10;
      v41[1] = a11;
      v32 = sub_10024AF7C();
      swift_bridgeObjectRetain();
      v33 = String.Index.init<A>(utf16Offset:in:)(v31, v41, &type metadata for String, v32);
      v34 = String.subscript.getter(v33, a10, a11);
      v36 = v35;
      v37 = _s5GlyphCMa();
      v38 = swift_allocObject(v37, 72, 7);
      *(_QWORD *)(v38 + 64) = 0;
      *(_QWORD *)(v38 + 16) = v34;
      *(_QWORD *)(v38 + 24) = v36;
      *(double *)(v38 + 32) = v27 - a1;
      *(_QWORD *)(v38 + 40) = 0;
      *(double *)(v38 + 48) = v28;
      *(double *)(v38 + 56) = v30;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v38);
      v39 = v43[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v39);
      v40 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v39, v38);
      specialized ContiguousArray._endMutation()(v40);
      *(Swift::Int_optional *)&v25.location = _NSRange.NSRangeIterator.next()();
      location = v25.location;
      if ((v25.length & 1) != 0)
        return;
    }
    __break(1u);
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
  }
}

_QWORD *sub_10026F22C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v15;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  unint64_t v31;
  unint64_t v32;
  Swift::Int v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;

  v12 = v11;
  result = _swiftEmptyArrayStorage;
  v41 = (unint64_t)_swiftEmptyArrayStorage;
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    swift_bridgeObjectRetain();
    v24 = (uint64_t *)(a1 + 48);
    do
    {
      v26 = v24[4];
      v27 = *v24;
      v28 = v24[1];
      v36 = *((_OWORD *)v24 - 1);
      v37 = v27;
      v38 = v28;
      v39 = *((_OWORD *)v24 + 1);
      v40 = v26;
      swift_bridgeObjectRetain();
      sub_10026E204((uint64_t *)&v36, a2, a3, a4, a5, a6, &v35, a7, a8, a9, a10, a11);
      if (v12)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (_QWORD *)swift_bridgeObjectRelease();
      }
      v29 = swift_bridgeObjectRelease();
      v30 = v35;
      if (v35)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v29);
        v32 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v31 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v32 >= v31 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
        v25 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v30);
        specialized Array._endMutation()(v25);
      }
      v24 += 7;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
    return (_QWORD *)v41;
  }
  return result;
}

_QWORD *sub_10026F3D4(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  BOOL v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  CFIndex v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t isUniquelyReferenced_nonNull_native;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v39;
  uint64_t v40;
  id v41;
  CFIndex v42;
  char v43;
  uint64_t v44;
  uint64_t v45;

  v2 = a1;
  if (a1 >> 62)
    goto LABEL_39;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_3:
  if (v3)
  {
    v4 = 0;
    v36 = OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_words;
    v37 = v2 & 0xC000000000000001;
    v33 = v2 + 32;
    v34 = v3;
    v5 = _swiftEmptyArrayStorage;
    v35 = v2;
    while (1)
    {
      if (v37)
      {
        v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v2);
        v7 = __OFADD__(v4++, 1);
        if (v7)
          goto LABEL_35;
      }
      else
      {
        v6 = *(id *)(v33 + 8 * v4);
        v7 = __OFADD__(v4++, 1);
        if (v7)
          goto LABEL_35;
      }
      v8 = *(_QWORD *)(a2 + v36);
      v9 = *(_QWORD *)(v8 + 16);
      if (v9)
      {
        v39 = v5;
        v40 = v4;
        v41 = v6;
        swift_bridgeObjectRetain();
        sub_100259314(0, v9, 0);
        v10 = _swiftEmptyArrayStorage;
        v11 = (_BYTE *)(v8 + 64);
        do
        {
          v12 = *((_QWORD *)v11 - 3);
          v13 = *((_QWORD *)v11 - 2);
          v44 = *((_QWORD *)v11 - 1);
          v45 = *((_QWORD *)v11 - 4);
          v43 = *v11;
          swift_bridgeObjectRetain_n(v12, 2);
          swift_bridgeObjectRetain_n(v13, 2);
          v14 = v41;
          v42 = CTRunRef.positions.getter();
          v15 = CTRunRef.stringIndices.getter();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v17 = v10[2];
          v16 = v10[3];
          v18 = v10;
          if (v17 >= v16 >> 1)
          {
            sub_100259314((_QWORD *)(v16 > 1), v17 + 1, 1);
            v18 = v10;
          }
          v18[2] = v17 + 1;
          v19 = &v18[8 * v17];
          v19[4] = v45;
          v19[5] = v12;
          v19[6] = v13;
          v19[7] = v44;
          *((_BYTE *)v19 + 64) = v43;
          v19[9] = v14;
          v19[10] = v42;
          v11 += 40;
          v19[11] = v15;
          --v9;
          v10 = v18;
        }
        while (v9);
        swift_bridgeObjectRelease();

        v3 = v34;
        v2 = v35;
        v5 = v39;
        v4 = v40;
      }
      else
      {

        v10 = _swiftEmptyArrayStorage;
      }
      v20 = v10;
      v21 = v10[2];
      v22 = v5[2];
      v23 = v22 + v21;
      if (__OFADD__(v22, v21))
        goto LABEL_36;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
      if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v23 <= v5[3] >> 1)
      {
        if (v20[2])
          goto LABEL_28;
      }
      else
      {
        if (v22 <= v23)
          v25 = v22 + v21;
        else
          v25 = v22;
        v5 = sub_10025873C((_QWORD *)isUniquelyReferenced_nonNull_native, v25, 1, v5);
        if (v20[2])
        {
LABEL_28:
          v26 = v5[2];
          if ((v5[3] >> 1) - v26 < v21)
            goto LABEL_37;
          v27 = (uint64_t)&v5[8 * v26 + 4];
          v28 = sub_100005574(&qword_100499DF0);
          swift_arrayInitWithCopy(v27, v20 + 4, v21, v28);
          if (v21)
          {
            v29 = v5[2];
            v7 = __OFADD__(v29, v21);
            v30 = v29 + v21;
            if (v7)
              goto LABEL_38;
            v5[2] = v30;
          }
          goto LABEL_6;
        }
      }
      if (v21)
      {
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        if (v2 < 0)
          v32 = v2;
        else
          v32 = v2 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain();
        v3 = _CocoaArrayWrapper.endIndex.getter(v32);
        goto LABEL_3;
      }
LABEL_6:
      swift_bridgeObjectRelease();
      if (v4 == v3)
        goto LABEL_33;
    }
  }
  v5 = _swiftEmptyArrayStorage;
LABEL_33:
  swift_bridgeObjectRelease();
  return v5;
}

Swift::Int sub_10026F708(__int128 *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_10026DF10(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(CGFloat *)(v4 + 32), *(CGFloat *)(v4 + 40), *(CGFloat *)(v4 + 48), *(CGFloat *)(v4 + 56));
}

unint64_t sub_10026F718()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100499258;
  if (!qword_100499258)
  {
    _s3__C3KeyVMa_1(255);
    result = swift_getWitnessTable(&unk_100396C90, v1);
    atomic_store(result, (unint64_t *)&qword_100499258);
  }
  return result;
}

uint64_t sub_10026F760()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_10026F784()
{
  uint64_t v0;

  sub_10026D334(*(_QWORD *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t sub_10026F790()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10026F7A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_10026F7B0(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_10026F7B8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 25, 7);
}

id sub_10026F7DC()
{
  uint64_t v0;
  id result;
  double v2;

  result = *(id *)(*(_QWORD *)(v0 + 16)
                 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_gradientView);
  if (result)
  {
    v2 = 0.0;
    if (*(_BYTE *)(v0 + 24))
      v2 = 1.0;
    return objc_msgSend(result, "setAlpha:", v2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10026F818()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

double sub_10026F83C()
{
  uint64_t v0;

  return sub_10026CB20(*(_QWORD *)(v0 + 16));
}

void sub_10026F844()
{
  _BYTE *v0;

  v0[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_isScrolling] = 1;
  v0[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_isSelected] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_progress] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_framesetter] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_basicView] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001003B2590, "MusicCoreUI/LyricsTextView.swift", 32, 2, 138, 0);
  __break(1u);
}

uint64_t initializeBufferWithCopyOfBuffer for AnimationStatus(uint64_t a1, uint64_t a2)
{
  id v3;
  unsigned __int8 v4;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_10026F930(*(id *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

id sub_10026F930(id result, unsigned __int8 a2)
{
  if (a2 <= 1u)
    return result;
  return result;
}

void destroy for AnimationStatus(uint64_t a1)
{
  sub_10026F954(*(id *)a1, *(_BYTE *)(a1 + 8));
}

void sub_10026F954(id a1, unsigned __int8 a2)
{
  if (a2 <= 1u)

}

uint64_t assignWithCopy for AnimationStatus(uint64_t a1, uint64_t a2)
{
  id v3;
  unsigned __int8 v4;
  void *v5;
  unsigned __int8 v6;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_10026F930(*(id *)a2, v4);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_10026F954(v5, v6);
  return a1;
}

uint64_t assignWithTake for AnimationStatus(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  unsigned __int8 v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_10026F954(v4, v5);
  return a1;
}

ValueMetadata *type metadata accessor for AnimationStatus()
{
  return &type metadata for AnimationStatus;
}

uint64_t sub_10026FA04(uint64_t a1, uint64_t *a2)
{
  int v2;
  uint64_t v4;

  v2 = *((unsigned __int8 *)a2 + 8);
  if (*(_BYTE *)(a1 + 8))
  {
    if (*(_BYTE *)(a1 + 8) == 1)
    {
      if (v2 == 1)
        return 1;
    }
    else
    {
      v4 = *a2;
      if (*(_QWORD *)a1)
      {
        if (v2 == 2 && v4 == 1)
          return 1;
      }
      else if (v2 == 2 && v4 == 0)
      {
        return 1;
      }
    }
  }
  else if (!*((_BYTE *)a2 + 8))
  {
    return 1;
  }
  return 0;
}

void sub_10026FA64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  unsigned __int8 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  unsigned __int8 v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v1 = *(_QWORD *)(v0 + 24);
  v45 = v1;
  if ((unint64_t)v1 >> 62)
    goto LABEL_75;
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v44 = v2;
  if (v2)
  {
LABEL_3:
    v3 = 0;
    do
    {
      if ((v45 & 0xC000000000000001) != 0)
      {
        v1 = specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v45);
        v4 = __OFADD__(v3, 1);
        v5 = v3 + 1;
        if (v4)
          goto LABEL_74;
      }
      else
      {
        if (v3 >= *(_QWORD *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        swift_retain(*(_QWORD *)(v45 + 32 + 8 * v3));
        v4 = __OFADD__(v3, 1);
        v5 = v3 + 1;
        if (v4)
          goto LABEL_74;
      }
      v46 = v5;
      v47 = v1;
      v6 = *(_QWORD *)(v1 + 16);
      if (!((unint64_t)v6 >> 62))
      {
        v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
        v1 = swift_bridgeObjectRetain();
        if (v7)
          goto LABEL_12;
        goto LABEL_61;
      }
      if (v6 < 0)
        v34 = *(_QWORD *)(v1 + 16);
      else
        v34 = v6 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v1 = _CocoaArrayWrapper.endIndex.getter(v34);
      v7 = v1;
      if (v1)
      {
LABEL_12:
        v8 = 0;
        v51 = v6;
        v52 = v6 & 0xC000000000000001;
        v48 = v6 + 32;
        v49 = v6 & 0xFFFFFFFFFFFFFF8;
        v50 = v7;
        while (1)
        {
          if (v52)
          {
            v1 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v6);
            v4 = __OFADD__(v8, 1);
            v11 = v8 + 1;
            if (v4)
              goto LABEL_72;
          }
          else
          {
            if (v8 >= *(_QWORD *)(v49 + 16))
              goto LABEL_73;
            swift_retain(*(_QWORD *)(v48 + 8 * v8));
            v4 = __OFADD__(v8, 1);
            v11 = v8 + 1;
            if (v4)
              goto LABEL_72;
          }
          v53 = v11;
          v54 = v1;
          v12 = *(_QWORD *)(v1 + 72);
          v55 = v12;
          if (!((unint64_t)v12 >> 62))
          {
            v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
            v1 = swift_bridgeObjectRetain();
            if (v13)
              break;
            goto LABEL_52;
          }
          v27 = v12 < 0 ? v12 : v12 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain();
          v1 = _CocoaArrayWrapper.endIndex.getter(v27);
          v13 = v1;
          if (v1)
            break;
LABEL_52:
          swift_bridgeObjectRelease();
          v28 = v54;
          v29 = *(void **)(v54 + 128);
          if (v29)
          {
            objc_msgSend(v29, "removeFromSuperview");
            v28 = v54;
            v30 = *(void **)(v54 + 128);
          }
          else
          {
            v30 = 0;
          }
          v6 = v51;
          v8 = v53;
          *(_QWORD *)(v28 + 128) = 0;

          v31 = v54;
          if (!*(_QWORD *)(v54 + 128))
          {
            v32 = *(void **)(v54 + 80);
            *(_QWORD *)(v54 + 80) = 0;
            v33 = *(_BYTE *)(v54 + 88);
            *(_BYTE *)(v54 + 88) = 2;
            sub_10026F954(v32, v33);
            v31 = v54;
          }
          v9 = *(void **)(v31 + 80);
          *(_QWORD *)(v31 + 80) = 0;
          v10 = *(_BYTE *)(v31 + 88);
          *(_BYTE *)(v31 + 88) = 2;
          sub_10026F954(v9, v10);
          swift_release(v31);
          if (v53 == v50)
            goto LABEL_61;
        }
        v14 = 0;
        while (2)
        {
          if ((v55 & 0xC000000000000001) != 0)
          {
            v18 = specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v55);
            v4 = __OFADD__(v14++, 1);
            if (v4)
              goto LABEL_67;
LABEL_31:
            v19 = *(_QWORD *)(v18 + 88);
            if (!((unint64_t)v19 >> 62))
            {
              v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain();
              if (v20)
                goto LABEL_33;
LABEL_46:
              swift_bridgeObjectRelease();
              v26 = *(void **)(v18 + 144);
              if (v26)
              {
                objc_msgSend(v26, "removeFromSuperview");
                v15 = *(void **)(v18 + 144);
              }
              else
              {
                v15 = 0;
              }
              *(_QWORD *)(v18 + 144) = 0;

              v16 = *(void **)(v18 + 96);
              *(_QWORD *)(v18 + 96) = 0;
              v17 = *(_BYTE *)(v18 + 104);
              *(_BYTE *)(v18 + 104) = 2;
              sub_10026F954(v16, v17);
              swift_release(v18);
              if (v14 == v13)
                goto LABEL_52;
              continue;
            }
            if (v19 < 0)
              v25 = *(_QWORD *)(v18 + 88);
            else
              v25 = v19 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain();
            v20 = _CocoaArrayWrapper.endIndex.getter(v25);
            if (!v20)
              goto LABEL_46;
LABEL_33:
            if (v20 >= 1)
            {
              v21 = 0;
              while (1)
              {
                if ((v19 & 0xC000000000000001) != 0)
                {
                  v23 = specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v19);
                  v24 = *(void **)(v23 + 64);
                  if (!v24)
                    goto LABEL_41;
                }
                else
                {
                  v23 = *(_QWORD *)(v19 + 8 * v21 + 32);
                  swift_retain(v23);
                  v24 = *(void **)(v23 + 64);
                  if (!v24)
                  {
LABEL_41:
                    v22 = 0;
                    goto LABEL_36;
                  }
                }
                objc_msgSend(v24, "removeFromSuperview");
                v22 = *(void **)(v23 + 64);
LABEL_36:
                ++v21;
                *(_QWORD *)(v23 + 64) = 0;
                swift_release(v23);

                if (v20 == v21)
                  goto LABEL_46;
              }
            }
            goto LABEL_68;
          }
          break;
        }
        if (v14 < *(_QWORD *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          v18 = *(_QWORD *)(v55 + 32 + 8 * v14);
          swift_retain(v18);
          v4 = __OFADD__(v14++, 1);
          if (!v4)
            goto LABEL_31;
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
          goto LABEL_69;
        }
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        if (v1 < 0)
          v42 = v1;
        else
          v42 = v1 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain();
        v44 = _CocoaArrayWrapper.endIndex.getter(v42);
        if (!v44)
          break;
        goto LABEL_3;
      }
LABEL_61:
      swift_bridgeObjectRelease();
      v35 = v47;
      v36 = *(void **)(v47 + 72);
      if (v36)
      {
        objc_msgSend(v36, "removeFromSuperview");
        v35 = v47;
        v37 = *(void **)(v47 + 72);
      }
      else
      {
        v37 = 0;
      }
      *(_QWORD *)(v35 + 72) = 0;
      swift_release(v35);

      v3 = v46;
    }
    while (v46 != v44);
  }
  swift_bridgeObjectRelease();
  v14 = v43;
  v38 = *(void **)(v43 + 80);
  if (v38)
  {
    objc_msgSend(v38, "removeFromSuperview");
    v39 = *(void **)(v43 + 80);
  }
  else
  {
LABEL_69:
    v39 = 0;
  }
  *(_QWORD *)(v14 + 80) = 0;

  v40 = *(void **)(v14 + 64);
  *(_QWORD *)(v14 + 64) = 0;
  v41 = *(_BYTE *)(v14 + 72);
  *(_BYTE *)(v14 + 72) = 2;
  sub_10026F954(v40, v41);
}

uint64_t sub_10026FF0C(void *a1, void *a2, char a3, const void *a4, char a5, char a6)
{
  uint64_t v6;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;

  v10 = objc_msgSend(objc_allocWithZone((Class)_s5FrameC9FrameViewCMa()), "initWithFrame:", *(double *)(v6 + 32), *(double *)(v6 + 40), *(double *)(v6 + 48), *(double *)(v6 + 56));
  v11 = *(void **)(v6 + 80);
  *(_QWORD *)(v6 + 80) = v10;
  v12 = v10;

  v13 = *(_QWORD *)(v6 + 24);
  if (!((unint64_t)v13 >> 62))
  {
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v14)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease();
    return (uint64_t)v12;
  }
  if (v13 < 0)
    v22 = *(_QWORD *)(v6 + 24);
  else
    v22 = v13 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter(v22);
  v14 = result;
  if (!result)
    goto LABEL_13;
LABEL_3:
  if (v14 >= 1)
  {
    v16 = 0;
    v17 = a3 & 1;
    v18 = a6 & 1;
    v19 = a5 & 1;
    do
    {
      if ((v13 & 0xC000000000000001) != 0)
      {
        v20 = specialized _ArrayBuffer._getElementSlowPath(_:)(v16, v13);
      }
      else
      {
        v20 = *(_QWORD *)(v13 + 8 * v16 + 32);
        swift_retain(v20);
      }
      ++v16;
      v21 = (void *)sub_100272024(a1, a2, v17, a4, v19, v18);
      objc_msgSend(v12, "addSubview:", v21);
      swift_release(v20);

    }
    while (v14 != v16);
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_100270144()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_10026F954(*(id *)(v0 + 64), *(_BYTE *)(v0 + 72));

  return swift_deallocClassInstance(v0, 88, 7);
}

uint64_t _s5FrameCMa()
{
  return objc_opt_self(_TtCC11MusicCoreUI20SyncedLyricsLineView5Frame);
}

uint64_t _s5FrameC9FrameViewCMa()
{
  return objc_opt_self(_TtCCC11MusicCoreUI20SyncedLyricsLineView5Frame9FrameView);
}

_UNKNOWN **sub_1002701C4()
{
  return &off_10049A700;
}

void (*sub_1002701D0(uint64_t **a1, unint64_t a2, uint64_t a3))(_QWORD *)
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_100270224(v6, a2, a3);
  return sub_1000F32C8;
}

uint64_t *sub_100270224(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain(*(_QWORD *)(a3 + 8 * a2 + 32));
LABEL_5:
    *v3 = v4;
    return (uint64_t *)destroy for Border;
  }
  __break(1u);
  return result;
}

void sub_100270310()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  int isUniquelyReferenced_nonNull_bridgeObject;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView5Glyph9GlyphView_currentAnimators);
  swift_beginAccess(v1, v39, 33, 0);
  v2 = *v1;
  if ((unint64_t)*v1 >> 62)
    goto LABEL_19;
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    v9 = *v1;
    if ((unint64_t)*v1 >> 62)
      goto LABEL_29;
    v4 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
LABEL_15:
      v9 = *v1;
      if ((unint64_t)*v1 >> 62)
      {
        if (v9 < 0)
          v13 = *v1;
        else
          v13 = v9 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain();
        v11 = _CocoaArrayWrapper.endIndex.getter(v13);
        swift_bridgeObjectRelease();
        if (v11 >= v4)
        {
LABEL_17:
          sub_10024563C(v4, v11);
          swift_endAccess(v39);
          return;
        }
      }
      else
      {
        v11 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v11 >= v4)
          goto LABEL_17;
      }
      __break(1u);
LABEL_29:
      if (v9 < 0)
        v14 = v9;
      else
        v14 = v9 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v4 = _CocoaArrayWrapper.endIndex.getter(v14);
      swift_bridgeObjectRelease();
    }
  }
LABEL_3:
  v4 = 0;
  while (1)
  {
    v5 = (v2 & 0xC000000000000001) != 0
       ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v2)
       : *(id *)(v2 + 8 * v4 + 32);
    v6 = v5;
    v7 = (unint64_t)objc_msgSend(v5, "state");

    if ((v7 | 2) == 2)
      break;
    v8 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_19:
      if (v2 < 0)
        v12 = v2;
      else
        v12 = v2 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v3 = _CocoaArrayWrapper.endIndex.getter(v12);
      if (!v3)
        goto LABEL_10;
      goto LABEL_3;
    }
    ++v4;
    if (v8 == v3)
      goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  v10 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
LABEL_34:
    if (v2 < 0)
      v15 = v2;
    else
      v15 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter(v15);
    swift_bridgeObjectRelease();
    if (v10 == v16)
      goto LABEL_15;
    goto LABEL_38;
  }
  v2 = *v1;
  if ((unint64_t)*v1 >> 62)
    goto LABEL_34;
  if (v10 == *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_15;
LABEL_38:
  v17 = v4 + 5;
  while (1)
  {
    v18 = v17 - 4;
    v19 = *v1;
    if ((*v1 & 0xC000000000000001) != 0)
    {
      v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17 - 4, v19);
      goto LABEL_43;
    }
    if ((v18 & 0x8000000000000000) != 0)
      break;
    if (v18 >= *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_77;
    v20 = *(id *)(v19 + 8 * v17);
LABEL_43:
    v21 = v20;
    v22 = (unint64_t)objc_msgSend(v20, "state");

    if ((v22 | 2) == 2)
      goto LABEL_64;
    if (v18 != v4)
    {
      v23 = *v1;
      if ((*v1 & 0xC000000000000001) != 0)
      {
        v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, *v1);
        v23 = *v1;
        if ((*v1 & 0xC000000000000001) == 0)
          goto LABEL_49;
      }
      else
      {
        if (v4 < 0)
          goto LABEL_80;
        if ((unint64_t)v4 >= *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_81;
        v24 = *(id *)(v23 + 8 * v4 + 32);
        if ((v23 & 0xC000000000000001) == 0)
        {
LABEL_49:
          if ((v18 & 0x8000000000000000) != 0)
            goto LABEL_82;
          if (v18 >= *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_83;
          v25 = *(id *)(v23 + 8 * v17);
          goto LABEL_52;
        }
      }
      v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17 - 4, v23);
      v23 = *v1;
LABEL_52:
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v23);
      *v1 = v23;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v23 < 0 || (v23 & 0x4000000000000000) != 0)
      {
        v23 = sub_10037834C(v23);
        *v1 = v23;
      }
      v27 = *(void **)((v23 & 0xFFFFFFFFFFFFFF8) + 8 * v4 + 0x20);
      *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFF8) + 8 * v4 + 0x20) = v25;

      specialized Array._endMutation()(v28);
      v29 = *v1;
      v30 = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
      *v1 = v29;
      if (!v30 || v29 < 0 || (v29 & 0x4000000000000000) != 0)
      {
        v29 = sub_10037834C(v29);
        *v1 = v29;
      }
      if ((v18 & 0x8000000000000000) != 0)
        goto LABEL_84;
      v31 = v29 & 0xFFFFFFFFFFFFFF8;
      if (v18 >= *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_85;
      v32 = *(void **)(v31 + 8 * v17);
      *(_QWORD *)(v31 + 8 * v17) = v24;

      specialized Array._endMutation()(v33);
    }
    if (__OFADD__(v4++, 1))
      goto LABEL_79;
LABEL_64:
    v35 = v17 - 3;
    if (__OFADD__(v18, 1))
      goto LABEL_78;
    v36 = *v1;
    if ((unint64_t)*v1 >> 62)
    {
      if (v36 < 0)
        v38 = *v1;
      else
        v38 = v36 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v37 = _CocoaArrayWrapper.endIndex.getter(v38);
      swift_bridgeObjectRelease();
    }
    else
    {
      v37 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    ++v17;
    if (v35 == v37)
      goto LABEL_15;
  }
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
}

id sub_100270730(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  _QWORD v10[6];

  v10[0] = 0x3FF0000000000000;
  v10[1] = 0;
  v10[2] = 0;
  v10[3] = 0x3FF0000000000000;
  v10[4] = 0;
  v10[5] = 0;
  objc_msgSend(a1, "setTransform:", v10);
  return UIView.untransformedFrame.setter(a2, a3, a4, a5);
}

void sub_1002707A8(void *a1, double a2, double a3, double a4, double a5)
{
  void *v5;
  Class isa;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  objc_class *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void **v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;

  sub_10027103C();
  isa = UIViewPropertyAnimator.init(springTimingParameters:)((UISpringTimingParameters)a1).super.isa;
  v12 = swift_allocObject(&unk_10045DBF8, 48, 7);
  *(_QWORD *)(v12 + 16) = v5;
  *(double *)(v12 + 24) = a2;
  *(double *)(v12 + 32) = a3;
  *(double *)(v12 + 40) = a4;
  v27 = sub_100271150;
  v28 = v12;
  v23 = _NSConcreteStackBlock;
  v24 = 1107296256;
  v25 = sub_1000BED80;
  v26 = &unk_10045DC10;
  v13 = _Block_copy(&v23);
  v14 = v28;
  v15 = v5;
  -[objc_class addAnimations:](isa, "addAnimations:", v13, swift_release(v14).n128_f64[0]);
  _Block_release(v13);
  v16 = swift_allocObject(&unk_10045DB30, 24, 7);
  swift_unknownObjectWeakInit(v16 + 16);
  v27 = sub_1002710E4;
  v28 = v16;
  v23 = _NSConcreteStackBlock;
  v24 = 1107296256;
  v25 = sub_100204BB4;
  v26 = &unk_10045DC38;
  v17 = _Block_copy(&v23);
  -[objc_class addCompletion:](isa, "addCompletion:", v17, swift_release(v28).n128_f64[0]);
  _Block_release(v17);
  -[objc_class startAnimationAfterDelay:](isa, "startAnimationAfterDelay:", a5);
  v18 = &v15[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView5Glyph9GlyphView_currentAnimators];
  swift_beginAccess(v18, &v23, 33, 0);
  v19 = isa;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v19);
  v21 = *(_QWORD *)((*(_QWORD *)v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v20 = *(_QWORD *)((*(_QWORD *)v18 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v21 >= v20 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
  v22 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v19);
  specialized Array._endMutation()(v22);
  swift_endAccess(&v23);

}

void sub_1002709B0(void *a1, double a2, double a3, CGFloat a4)
{
  uint64_t v8;
  uint64_t v9;
  CGFloat v10;
  void *v11;
  CGFloat ty;
  id v13;
  __n128 v14;
  double v15;
  CGAffineTransform v16;

  v8 = objc_opt_self(UIView);
  v9 = swift_allocObject(&unk_10045DC70, 24, 7);
  *(_QWORD *)(v9 + 16) = a1;
  v10 = COERCE_DOUBLE(swift_allocObject(&unk_10045DC98, 32, 7));
  *(_QWORD *)(*(_QWORD *)&v10 + 16) = sub_100271184;
  *(_QWORD *)(*(_QWORD *)&v10 + 24) = v9;
  *(_QWORD *)&v16.tx = sub_1000B04E0;
  v16.ty = v10;
  *(_QWORD *)&v16.a = _NSConcreteStackBlock;
  *(_QWORD *)&v16.b = 1107296256;
  *(_QWORD *)&v16.c = sub_100009BD0;
  *(_QWORD *)&v16.d = &unk_10045DCB0;
  v11 = _Block_copy(&v16);
  ty = v16.ty;
  v13 = a1;
  swift_retain(*(_QWORD *)&v10);
  objc_msgSend((id)v8, "performWithoutAnimation:", v11, swift_release(*(_QWORD *)&ty).n128_f64[0]);
  _Block_release(v11);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation(*(_QWORD *)&v10, "", 130, 92, 52, 1, v14);
  *(_QWORD *)&v15 = swift_release(*(_QWORD *)&v10).n128_u64[0];
  if ((v8 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    objc_msgSend(v13, "frame", v15);
    objc_msgSend(v13, "setFrame:", a2, a3);
    CGAffineTransformMakeScale(&v16, a4, a4);
    objc_msgSend(v13, "setTransform:", &v16);
    swift_release(v9);
  }
}

void sub_100270B64(void *a1, double a2, double a3, double a4)
{
  void *v4;
  Class isa;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  objc_class *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;

  sub_10027103C();
  isa = UIViewPropertyAnimator.init(springTimingParameters:)((UISpringTimingParameters)a1).super.isa;
  v10 = swift_allocObject(&unk_10045DAE0, 40, 7);
  *(_QWORD *)(v10 + 16) = v4;
  *(double *)(v10 + 24) = a2;
  *(double *)(v10 + 32) = a3;
  v25 = sub_10027109C;
  v26 = v10;
  v21 = _NSConcreteStackBlock;
  v22 = 1107296256;
  v23 = sub_1000BED80;
  v24 = &unk_10045DAF8;
  v11 = _Block_copy(&v21);
  v12 = v26;
  v13 = v4;
  -[objc_class addAnimations:](isa, "addAnimations:", v11, swift_release(v12).n128_f64[0]);
  _Block_release(v11);
  v14 = swift_allocObject(&unk_10045DB30, 24, 7);
  swift_unknownObjectWeakInit(v14 + 16);
  v25 = sub_1002710E4;
  v26 = v14;
  v21 = _NSConcreteStackBlock;
  v22 = 1107296256;
  v23 = sub_100204BB4;
  v24 = &unk_10045DB48;
  v15 = _Block_copy(&v21);
  -[objc_class addCompletion:](isa, "addCompletion:", v15, swift_release(v26).n128_f64[0]);
  _Block_release(v15);
  -[objc_class startAnimationAfterDelay:](isa, "startAnimationAfterDelay:", a4);
  v16 = &v13[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView5Glyph9GlyphView_currentAnimators];
  swift_beginAccess(v16, &v21, 33, 0);
  v17 = isa;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v17);
  v19 = *(_QWORD *)((*(_QWORD *)v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v18 = *(_QWORD *)((*(_QWORD *)v16 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v19 >= v18 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
  v20 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v17);
  specialized Array._endMutation()(v20);
  swift_endAccess(&v21);

}

void sub_100270D64(void *a1, double a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  __n128 v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t (*v18)();
  uint64_t v19;

  v6 = objc_opt_self(UIView);
  v7 = swift_allocObject(&unk_10045DB80, 24, 7);
  *(_QWORD *)(v7 + 16) = a1;
  v8 = swift_allocObject(&unk_10045DBA8, 32, 7);
  *(_QWORD *)(v8 + 16) = sub_1002710FC;
  *(_QWORD *)(v8 + 24) = v7;
  v18 = sub_1000B0290;
  v19 = v8;
  v14 = (uint64_t)_NSConcreteStackBlock;
  v15 = 1107296256;
  v16 = sub_100009BD0;
  v17 = (uint64_t)&unk_10045DBC0;
  v9 = _Block_copy(&v14);
  v10 = v19;
  v11 = a1;
  swift_retain(v8);
  objc_msgSend((id)v6, "performWithoutAnimation:", v9, swift_release(v10).n128_f64[0]);
  _Block_release(v9);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation(v8, "", 130, 108, 52, 1, v12);
  *(_QWORD *)&v13 = swift_release(v8).n128_u64[0];
  if ((v6 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v14 = 0x3FF0000000000000;
    v15 = 0;
    v16 = 0;
    v17 = 0x3FF0000000000000;
    v18 = 0;
    v19 = 0;
    objc_msgSend(v11, "setTransform:", &v14, v13);
    objc_msgSend(v11, "frame");
    objc_msgSend(v11, "setFrame:", a2, a3);
    swift_release(v7);
  }
}

id sub_100270EFC(uint64_t a1, uint64_t (*a2)(void))
{
  double *v2;
  _BYTE v4[24];

  v2 = (double *)a2();
  swift_beginAccess(v2, v4, 0, 0);
  return UIView.setAnchorPoint(_:preserveFrame:)(1, *v2, v2[1]);
}

void sub_100270F44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = (void *)Strong;
    sub_100270310();

  }
}

uint64_t sub_100270FD0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t _s5GlyphCMa()
{
  return objc_opt_self(_TtCC11MusicCoreUI20SyncedLyricsLineView5Glyph);
}

uint64_t _s5GlyphC9GlyphViewCMa()
{
  return objc_opt_self(_TtCCC11MusicCoreUI20SyncedLyricsLineView5Glyph9GlyphView);
}

unint64_t sub_10027103C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10049B080;
  if (!qword_10049B080)
  {
    v1 = objc_opt_self(UIViewPropertyAnimator);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10049B080);
  }
  return result;
}

uint64_t sub_100271078()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

void sub_10027109C()
{
  uint64_t v0;

  sub_100270D64(*(void **)(v0 + 16), *(double *)(v0 + 24), *(double *)(v0 + 32));
}

uint64_t sub_1002710A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_1002710B8(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_1002710C0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1002710E4(uint64_t a1)
{
  uint64_t v1;

  sub_100270F44(a1, v1);
}

id sub_1002710FC()
{
  uint64_t v0;

  return sub_100270EFC(*(_QWORD *)(v0 + 16), (uint64_t (*)(void))CGPoint.center.unsafeMutableAddressor);
}

uint64_t sub_10027111C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10027112C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 48, 7);
}

void sub_100271150()
{
  uint64_t v0;

  sub_1002709B0(*(void **)(v0 + 16), *(double *)(v0 + 24), *(double *)(v0 + 32), *(CGFloat *)(v0 + 40));
}

uint64_t sub_100271160()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_100271184()
{
  uint64_t v0;

  return sub_100270EFC(*(_QWORD *)(v0 + 16), (uint64_t (*)(void))CGPoint.bottomCenter.unsafeMutableAddressor);
}

uint64_t sub_1002711A4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

char *sub_1002711E0(uint64_t a1)
{
  uint64_t v2;
  char *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if ((unint64_t)a1 >> 62)
    goto LABEL_18;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v2)
      return (char *)_swiftEmptyArrayStorage;
    result = sub_1002592F8(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
      else
        v5 = swift_retain(*(_QWORD *)(a1 + 8 * v4 + 32));
      v6 = *(_QWORD *)(v5 + 32);
      v7 = *(_QWORD *)(v6 + 16);
      if (v7)
        v8 = *(_QWORD *)(v6 + 56 * v7 - 16);
      else
        v8 = 0;
      swift_release(v5);
      v10 = _swiftEmptyArrayStorage[2];
      v9 = _swiftEmptyArrayStorage[3];
      if (v10 >= v9 >> 1)
        sub_1002592F8((char *)(v9 > 1), v10 + 1, 1);
      ++v4;
      _swiftEmptyArrayStorage[2] = v10 + 1;
      _swiftEmptyArrayStorage[v10 + 4] = v8;
      if (v2 == v4)
        return (char *)_swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_18:
    if (a1 < 0)
      v11 = a1;
    else
      v11 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter(v11);
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

char *sub_10027134C(uint64_t a1)
{
  uint64_t v2;
  char *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if ((unint64_t)a1 >> 62)
    goto LABEL_18;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v2)
      return (char *)_swiftEmptyArrayStorage;
    result = sub_1002592F8(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
      else
        v5 = swift_retain(*(_QWORD *)(a1 + 8 * v4 + 32));
      v6 = *(_QWORD *)(v5 + 32);
      if (*(_QWORD *)(v6 + 16))
        v7 = *(_QWORD *)(v6 + 32);
      else
        v7 = 0;
      swift_release(v5);
      v9 = _swiftEmptyArrayStorage[2];
      v8 = _swiftEmptyArrayStorage[3];
      if (v9 >= v8 >> 1)
        sub_1002592F8((char *)(v8 > 1), v9 + 1, 1);
      ++v4;
      _swiftEmptyArrayStorage[2] = v9 + 1;
      _swiftEmptyArrayStorage[v9 + 4] = v7;
      if (v2 == v4)
        return (char *)_swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_18:
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void sub_1002714A0(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  unint64_t v4;
  double v5;
  double v6;
  double v7;
  CGFloat v8;
  CGFloat v9;
  double v10;
  uint64_t v11;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  double *v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  id v37;
  double *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t i;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  char v79;
  double v80;
  double v81;
  uint64_t v82;
  double v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  double v89;
  void *v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD aBlock[5];
  uint64_t v105;
  CGRect v106;
  CGRect v107;
  CGRect v108;
  CGRect v109;
  CGRect v110;

  v11 = v3;
  v15 = *(_QWORD *)(v3 + 16);
  v16 = (unint64_t)v15 >> 62;
  if ((unint64_t)v15 >> 62)
  {
    if (v15 < 0)
      v21 = *(_QWORD *)(v3 + 16);
    else
      v21 = v15 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter(v21);
    v17 = v18;
    if (!v18)
      goto LABEL_13;
  }
  else
  {
    v17 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    v18 = swift_bridgeObjectRetain();
    if (!v17)
      goto LABEL_13;
  }
  if (v17 < 1)
  {
    __break(1u);
    goto LABEL_40;
  }
  v19 = 0;
  v4 = v15 & 0xC000000000000001;
  do
  {
    if (v4)
    {
      v20 = specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v15);
    }
    else
    {
      v20 = *(_QWORD *)(v15 + 8 * v19 + 32);
      swift_retain(v20);
    }
    ++v19;
    sub_100274834(a1, a3);
    swift_release(v20);
  }
  while (v17 != v19);
LABEL_13:
  swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v11 + 80) & 1) != 0)
    return;
  v22 = *(_QWORD *)(v11 + 72);
  if (!v22)
    return;
  v23 = *(void **)(v22 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_gradientView);
  if (!v23)
    return;
  v24 = *(void **)(a1 + 168);
  v17 = v23;
  objc_msgSend(v24, "lineHeight");
  v26 = v25 * *(double *)(a1 + 224) + *(double *)(a1 + 352) + *(double *)(a1 + 352);
  v9 = *(double *)(v11 + 40);
  v8 = *(double *)(v11 + 48);
  v7 = *(double *)(v11 + 56);
  v6 = *(double *)(v11 + 64);
  v106.origin.x = v9;
  v106.origin.y = v8;
  v106.size.width = v7;
  v106.size.height = v6;
  v5 = (v26 - CGRectGetHeight(v106)) * 0.5;
  v10 = *(double *)(a1 + 392);
  if (sub_100272308() <= a3)
  {
    if (v16)
    {
      if (v15 < 0)
        v29 = v15;
      else
        v29 = v15 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v27 = _CocoaArrayWrapper.endIndex.getter(v29);
      v28 = v15;
      if (!v27)
        goto LABEL_49;
    }
    else
    {
      v27 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      v28 = v15;
      if (!v27)
        goto LABEL_49;
    }
    v18 = v27 - 1;
    if (!__OFSUB__(v27, 1))
    {
      if ((v15 & 0xC000000000000001) == 0)
      {
        if ((v18 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v18 < *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v27 = *(_QWORD *)(v15 + 8 * v18 + 32);
          swift_retain(v27);
          goto LABEL_29;
        }
        __break(1u);
        goto LABEL_44;
      }
LABEL_41:
      v27 = specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v15);
LABEL_29:
      swift_bridgeObjectRelease();
      v28 = *(_QWORD *)(v27 + 72);
      if (!((unint64_t)v28 >> 62))
      {
        v30 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v30)
          goto LABEL_31;
        goto LABEL_48;
      }
LABEL_44:
      if (v28 < 0)
        v39 = v28;
      else
        v39 = v28 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v30 = _CocoaArrayWrapper.endIndex.getter(v39);
      if (v30)
      {
LABEL_31:
        v31 = v30 - 1;
        if (__OFSUB__(v30, 1))
        {
          __break(1u);
        }
        else if ((v28 & 0xC000000000000001) == 0)
        {
          if ((v31 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (v31 < *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            v32 = *(double **)(v28 + 8 * v31 + 32);
            swift_retain(v32);
LABEL_36:
            swift_bridgeObjectRelease();
            if ((a2 & 1) == 0)
            {
              v33 = v32[14];
              v34 = v32[15];
              v35 = v32[16];
              v36 = v32[17];
              v37 = (id)v17;
              v107.origin.x = v33;
              v107.origin.y = v34;
              v107.size.width = v35;
              v107.size.height = v36;
              CGRectGetWidth(v107);
              objc_msgSend(v37, "frame");
              objc_msgSend(v37, "setFrame:");

            }
            swift_release(v27);
            v38 = v32;
            goto LABEL_156;
          }
          __break(1u);
          goto LABEL_104;
        }
        v32 = (double *)specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v28);
        goto LABEL_36;
      }
LABEL_48:
      swift_release(v27);
LABEL_49:
      swift_bridgeObjectRelease();
      goto LABEL_50;
    }
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
LABEL_50:
  if (sub_100272268() > a3)
  {
    v40 = *(_QWORD *)(v11 + 88);
    *(_QWORD *)(v11 + 88) = 0;
    swift_release(v40);
    v41 = (id)v17;
    v42 = v41;
    if ((a2 & 1) != 0)
    {
      v108.origin.x = v9;
      v108.origin.y = v8;
      v108.size.width = v7;
      v108.size.height = v6;
      v47 = v5 * 0.5 + CGRectGetWidth(v108);
      objc_msgSend(v42, "frame");
      objc_msgSend(v42, "setFrame:", v47);

      v42 = v42;
      objc_msgSend(v42, "frame");
    }
    else
    {
      objc_msgSend(v41, "frame");
    }
    objc_msgSend(v42, "setFrame:");

    goto LABEL_157;
  }
  v4 = sub_100272888(a3);
  v28 = v43;
  v44 = sub_100272A30(a3);
  v30 = v44;
  v27 = v45;
  if (!v4)
  {
LABEL_62:
    swift_release(v44);
    swift_release(v28);
    v38 = (double *)v27;
    goto LABEL_156;
  }
  if (!v44)
  {
    v44 = v4;
    goto LABEL_62;
  }
  v46 = *(_QWORD *)(v11 + 88);
  if (v46 && v44 == v46)
  {

    swift_release(v4);
    swift_release(v30);
    swift_release(v27);
    swift_release(v28);
    return;
  }
  if ((a2 & 1) == 0)
  {
    if (v16)
    {
      if (v15 < 0)
        v52 = v15;
      else
        v52 = v15 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      swift_retain(v4);
      swift_retain(v30);
      v49 = _CocoaArrayWrapper.endIndex.getter(v52);
    }
    else
    {
      v49 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      swift_retain(v4);
      swift_retain(v30);
    }
    if (!v49)
      goto LABEL_120;
    v31 = v49 - 1;
    if (!__OFSUB__(v49, 1))
    {
      if ((v15 & 0xC000000000000001) == 0)
      {
        if ((v31 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v31 < *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v53 = *(_QWORD *)(v15 + 8 * v31 + 32);
          swift_retain(v53);
          swift_bridgeObjectRelease();
          v15 = *(_QWORD *)(v53 + 72);
          swift_bridgeObjectRetain();
          swift_release(v53);
          if ((v15 & 0x8000000000000000) == 0 && (v15 & 0x4000000000000000) == 0)
            goto LABEL_79;
          goto LABEL_107;
        }
        __break(1u);
        goto LABEL_114;
      }
LABEL_105:
      v59 = specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v15);
      swift_bridgeObjectRelease();
      v15 = *(_QWORD *)(v59 + 72);
      swift_bridgeObjectRetain();
      swift_unknownObjectRelease(v59);
      if ((v15 & 0x8000000000000000) == 0 && (v15 & 0x4000000000000000) == 0)
      {
LABEL_79:
        v54 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v54)
          goto LABEL_80;
        goto LABEL_120;
      }
LABEL_107:
      if (v15 < 0)
        v60 = v15;
      else
        v60 = v15 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v54 = _CocoaArrayWrapper.endIndex.getter(v60);
      swift_bridgeObjectRelease();
      if (v54)
      {
LABEL_80:
        v55 = v54 - 1;
        if (__OFSUB__(v54, 1))
          goto LABEL_165;
        if ((v15 & 0xC000000000000001) != 0)
          goto LABEL_168;
        if ((v55 & 0x8000000000000000) != 0)
          goto LABEL_166;
        if (v55 < *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          i = *(_QWORD *)(v15 + 8 * v55 + 32);
          goto LABEL_98;
        }
        goto LABEL_170;
      }
LABEL_120:
      swift_bridgeObjectRelease();
      goto LABEL_121;
    }
LABEL_104:
    __break(1u);
    goto LABEL_105;
  }
  if (v16)
  {
    if (v15 < 0)
      v57 = v15;
    else
      v57 = v15 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    swift_retain(v4);
    swift_retain(v30);
    v51 = _CocoaArrayWrapper.endIndex.getter(v57);
    v50 = v51;
  }
  else
  {
    v50 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_retain(v4);
    v51 = swift_retain(v30);
  }
  if (!v50)
    goto LABEL_120;
  if ((v15 & 0xC000000000000001) == 0)
  {
    if (!*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      v95 = specialized _ArrayBuffer._getElementSlowPath(_:)(v51, v15);
      swift_bridgeObjectRelease();
      v96 = *(double *)(v95 + 16);
      v71 = *(double *)(v95 + 24);
      v74 = *(_QWORD *)(v95 + 32);
      v73 = *(_QWORD *)(v95 + 40);
      v99 = *(_QWORD *)(v95 + 56);
      v100 = *(_QWORD *)(v95 + 48);
      v97 = *(_QWORD *)(v95 + 64);
      swift_bridgeObjectRetain();
      swift_unknownObjectRelease(v95);
      if (v7 == v96)
        goto LABEL_134;
LABEL_150:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_151:
      v80 = a3;
      v110 = *(CGRect *)(v30 + 112);
      v83 = *(double *)(v4 + 96) + v110.origin.x;
      v81 = v83 + CGRectGetWidth(v110);
      goto LABEL_152;
    }
    v58 = *(_QWORD *)(v15 + 32);
    swift_retain(v58);
    swift_bridgeObjectRelease();
    v15 = *(_QWORD *)(v58 + 72);
    swift_bridgeObjectRetain();
    swift_release(v58);
    if (v15 < 0 || (v15 & 0x4000000000000000) != 0)
      goto LABEL_116;
LABEL_94:
    if (!*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_120;
    goto LABEL_95;
  }
LABEL_114:
  v61 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v15);
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(v61 + 72);
  swift_bridgeObjectRetain();
  swift_unknownObjectRelease(v61);
  if ((v15 & 0x8000000000000000) == 0 && (v15 & 0x4000000000000000) == 0)
    goto LABEL_94;
LABEL_116:
  if (v15 < 0)
    v62 = v15;
  else
    v62 = v15 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v63 = _CocoaArrayWrapper.endIndex.getter(v62);
  swift_bridgeObjectRelease();
  if (!v63)
    goto LABEL_120;
LABEL_95:
  if ((v15 & 0xC000000000000001) != 0)
    goto LABEL_167;
  if (!*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_170:
    __break(1u);
    return;
  }
  for (i = *(_QWORD *)(v15 + 32); ; swift_unknownObjectRelease(i))
  {
LABEL_98:
    swift_bridgeObjectRelease();
    if (i == v30)
    {
      a3 = 1.0;
    }
    else
    {
LABEL_121:
      v64 = *(_QWORD *)(v30 + 64);
      if (!v64 || (a3 = 0.5, v64 >= 3))
      {
        if (!v27
          || (v65 = *(_QWORD *)(v30 + 32),
              v66 = *(_QWORD *)(v30 + 40),
              swift_bridgeObjectRetain(),
              v67 = String.count.getter(v65, v66),
              swift_bridgeObjectRelease(),
              a3 = 0.25,
              v67 >= 3))
        {
          a3 = 0.12;
        }
      }
    }
    if ((a2 & 1) != 0)
    {
      v75 = *(double *)(v4 + 96) + *(double *)(v30 + 112) - v10 * a3 - v5;
      objc_msgSend((id)v17, "frame");
      v77 = v76;
      v109.origin.x = v9;
      v109.origin.y = v8;
      v109.size.width = v7;
      v109.size.height = v6;
      v78 = CGRectGetWidth(v109) - v75;
      goto LABEL_153;
    }
    v7 = *(double *)(v30 + 16);
    v6 = *(double *)(v30 + 24);
    a2 = *(_QWORD *)(v30 + 40);
    v102 = *(_QWORD *)(v30 + 48);
    v103 = *(_QWORD *)(v30 + 32);
    v68 = *(_QWORD *)(v30 + 64);
    v101 = *(_QWORD *)(v30 + 56);
    v15 = *(_QWORD *)(v4 + 72);
    if ((unint64_t)v15 >> 62)
    {
      if (v15 < 0)
        v82 = *(_QWORD *)(v4 + 72);
      else
        v82 = v15 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v69 = _CocoaArrayWrapper.endIndex.getter(v82);
      if (!v69)
      {
LABEL_149:
        swift_bridgeObjectRelease();
        goto LABEL_150;
      }
    }
    else
    {
      v69 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v69)
        goto LABEL_149;
    }
    v51 = v69 - 1;
    if (__OFSUB__(v69, 1))
      goto LABEL_160;
    v98 = v68;
    if ((v15 & 0xC000000000000001) != 0)
      goto LABEL_161;
    if ((v51 & 0x8000000000000000) != 0)
    {
      __break(1u);
      goto LABEL_164;
    }
    if (v51 < *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
      break;
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
LABEL_167:
    v55 = 0;
LABEL_168:
    i = specialized _ArrayBuffer._getElementSlowPath(_:)(v55, v15);
  }
  v70 = *(_QWORD *)(v15 + 8 * v51 + 32);
  swift_retain(v70);
  swift_bridgeObjectRelease();
  v72 = *(double *)(v70 + 16);
  v71 = *(double *)(v70 + 24);
  v74 = *(_QWORD *)(v70 + 32);
  v73 = *(_QWORD *)(v70 + 40);
  v99 = *(_QWORD *)(v70 + 56);
  v100 = *(_QWORD *)(v70 + 48);
  v97 = *(_QWORD *)(v70 + 64);
  swift_bridgeObjectRetain();
  swift_release(v70);
  if (v7 != v72)
    goto LABEL_150;
LABEL_134:
  if (v6 != v71)
    goto LABEL_150;
  if (v103 != v74 || a2 != v73)
  {
    v79 = _stringCompareWithSmolCheck(_:_:expecting:)(v103, a2, v74, v73, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v79 & 1) != 0)
      goto LABEL_140;
    goto LABEL_151;
  }
  swift_bridgeObjectRelease_n(a2, 2);
LABEL_140:
  if (v102 != v100 || v101 != v99 || v98 != v97 || !v28)
    goto LABEL_151;
  v80 = a3;
  v81 = *(double *)(v28 + 96);
LABEL_152:
  objc_msgSend((id)v17, "frame", v97);
  v75 = v84;
  v77 = v85;
  v78 = v5 + v10 * v80 + v81;
LABEL_153:
  objc_msgSend((id)v17, "frame");
  v87 = *(void **)(v11 + 72);
  if (v87)
  {
    v88 = v86;
    v89 = *(double *)(v30 + 24) - *(double *)(v30 + 16);
    v90 = (void *)objc_opt_self(UIView);
    v91 = swift_allocObject(&unk_10045DCF8, 56, 7);
    *(_QWORD *)(v91 + 16) = v87;
    *(double *)(v91 + 24) = v75;
    *(_QWORD *)(v91 + 32) = v77;
    *(double *)(v91 + 40) = v78;
    *(_QWORD *)(v91 + 48) = v88;
    aBlock[4] = sub_100273D7C;
    v105 = v91;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000BED80;
    aBlock[3] = &unk_10045DD10;
    v92 = _Block_copy(aBlock);
    v93 = v105;
    v94 = v87;
    swift_release(v93);
    objc_msgSend(v90, "animateWithDuration:delay:options:animations:completion:", 196609, v92, 0, v89, 0.0);
    _Block_release(v92);

  }
  swift_release(v30);
  swift_release_n(v4, 2);
  swift_release(v28);
  swift_release(v27);
  v38 = *(double **)(v11 + 88);
  *(_QWORD *)(v11 + 88) = v30;
LABEL_156:
  *(_QWORD *)&v48 = swift_release(v38).n128_u64[0];
LABEL_157:
  objc_msgSend((id)v17, "setNeedsDisplay", v48);

}

uint64_t sub_100272024(void *a1, void *a2, char a3, const void *a4, char a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  char v12;
  double v13;
  double v14;
  double v15;
  double v16;
  char v17;
  id v18;
  id v19;
  char *v20;
  void *v21;
  char *v22;
  id v23;
  void *v24;
  char v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  char *v34;

  v7 = v6;
  v12 = a3 & 1;
  v13 = *(double *)(v7 + 40);
  v14 = *(double *)(v7 + 48);
  v15 = *(double *)(v7 + 56);
  v16 = *(double *)(v7 + 64);
  v17 = a6 & 1;
  v18 = objc_allocWithZone((Class)_s4LineC8LineViewCMa());
  v19 = a2;
  sub_10026EC3C((uint64_t)a4);
  v20 = sub_100272BB4(v19, v12, a4, v17, v13, v14, v15, v16);
  v21 = *(void **)(v7 + 72);
  *(_QWORD *)(v7 + 72) = v20;
  v22 = v20;

  v23 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, v15, v16);
  if ((a5 & 1) != 0)
  {
    v24 = *(void **)(v7 + 24);
    v25 = *(_BYTE *)(v7 + 32);
    objc_allocWithZone((Class)type metadata accessor for CTLabel.Line());
    v26 = CTLabel.Line.init(ctLine:size:useExtendedLineBounds:)(v24, v25, v15, v16);
    objc_msgSend(v23, "addSubview:", v26);

LABEL_17:
    objc_msgSend(v22, "setMaskView:", v23);

    return (uint64_t)v22;
  }
  v27 = *(_QWORD *)(v7 + 16);
  if (!((unint64_t)v27 >> 62))
  {
    v28 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v28)
      goto LABEL_5;
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (v27 < 0)
    v33 = v27;
  else
    v33 = v27 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter(v33);
  v28 = result;
  if (!result)
    goto LABEL_16;
LABEL_5:
  if (v28 >= 1)
  {
    v34 = v22;
    v30 = 0;
    do
    {
      if ((v27 & 0xC000000000000001) != 0)
      {
        v31 = specialized _ArrayBuffer._getElementSlowPath(_:)(v30, v27);
      }
      else
      {
        v31 = *(_QWORD *)(v27 + 8 * v30 + 32);
        swift_retain(v31);
      }
      ++v30;
      v32 = (void *)sub_1002753C4(a1, (uint64_t)a4);
      objc_msgSend(v23, "addSubview:", v32);
      swift_release(v31);

    }
    while (v28 != v30);
    swift_bridgeObjectRelease();
    v22 = v34;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

double sub_100272268()
{
  uint64_t v0;
  char *v1;
  double v2;
  double *v4;

  v0 = swift_bridgeObjectRetain();
  v1 = sub_10027134C(v0);
  swift_bridgeObjectRelease();
  v4 = (double *)v1;
  swift_bridgeObjectRetain();
  sub_100273398((char **)&v4);
  swift_bridgeObjectRelease();
  if (*((_QWORD *)v4 + 2))
    v2 = v4[4];
  else
    v2 = 0.0;
  swift_release(v4);
  return v2;
}

double sub_100272308()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  double v3;
  char *v5;

  v0 = swift_bridgeObjectRetain();
  v1 = sub_1002711E0(v0);
  swift_bridgeObjectRelease();
  v5 = v1;
  swift_bridgeObjectRetain();
  sub_100273398(&v5);
  swift_bridgeObjectRelease();
  v2 = *((_QWORD *)v5 + 2);
  if (v2)
    v3 = *(double *)&v5[8 * v2 + 24];
  else
    v3 = 0.0;
  swift_release(v5);
  return v3;
}

void sub_1002723B0(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v9;
  uint64_t v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  double v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  _QWORD v39[5];
  uint64_t v40;

  v4 = v2;
  v5 = *(_QWORD *)(v2 + 72);
  if (v5)
  {
    v6 = *(void **)(v5 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_gradientView);
    if (v6)
    {
      v9 = *(_QWORD *)(v4 + 16);
      if ((unint64_t)v9 >> 62)
      {
        if (v9 < 0)
          v36 = *(_QWORD *)(v4 + 16);
        else
          v36 = v9 & 0xFFFFFFFFFFFFFF8;
        v37 = v6;
        swift_bridgeObjectRetain();
        v10 = _CocoaArrayWrapper.endIndex.getter(v36);
        if (v10)
        {
LABEL_5:
          v12 = v10 - 1;
          if (__OFSUB__(v10, 1))
          {
            __break(1u);
          }
          else if ((v9 & 0xC000000000000001) == 0)
          {
            if ((v12 & 0x8000000000000000) != 0)
            {
              __break(1u);
            }
            else if (v12 < *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              v10 = *(_QWORD *)(v9 + 8 * v12 + 32);
              swift_retain(v10);
              goto LABEL_10;
            }
            __break(1u);
            goto LABEL_30;
          }
          v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v9);
LABEL_10:
          swift_bridgeObjectRelease();
          v3 = *(_QWORD *)(v10 + 72);
          if (!((unint64_t)v3 >> 62))
          {
            v13 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            if (v13)
              goto LABEL_12;
LABEL_34:

            swift_release(v10);
            goto LABEL_35;
          }
LABEL_30:
          if (v3 < 0)
            v38 = v3;
          else
            v38 = v3 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain();
          v13 = _CocoaArrayWrapper.endIndex.getter(v38);
          if (v13)
          {
LABEL_12:
            v14 = v13 - 1;
            if (__OFSUB__(v13, 1))
            {
              __break(1u);
            }
            else if ((v3 & 0xC000000000000001) == 0)
            {
              if ((v14 & 0x8000000000000000) != 0)
              {
                __break(1u);
              }
              else if (v14 < *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
              {
                v15 = *(_QWORD *)(v3 + 8 * v14 + 32);
                swift_retain(v15);
                goto LABEL_17;
              }
              __break(1u);
              return;
            }
            v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v3);
LABEL_17:
            swift_bridgeObjectRelease();
            if ((*(_BYTE *)(v4 + 80) & 1) != 0)
            {

              swift_release(v10);
              swift_release(v15);
            }
            else
            {
              v16 = a2 & 1;
              objc_msgSend(*(id *)(a1 + 168), "lineHeight");
              v18 = v17 * *(double *)(a1 + 224) + *(double *)(a1 + 352) + *(double *)(a1 + 352);
              v19 = (v18 - CGRectGetHeight(*(CGRect *)(v4 + 40))) * 0.5;
              *(_BYTE *)(v4 + 80) = 1;
              v20 = (void *)objc_opt_self(UIView);
              v21 = *(double *)(a1 + 528);
              v22 = swift_allocObject(&unk_10045DD48, 593, 7);
              *(_BYTE *)(v22 + 16) = v16;
              *(_QWORD *)(v22 + 24) = v6;
              *(double *)(v22 + 32) = v19;
              *(_QWORD *)(v22 + 40) = v10;
              *(_QWORD *)(v22 + 48) = v15;
              memcpy((void *)(v22 + 56), (const void *)a1, 0x219uLL);
              v39[4] = sub_100273E94;
              v40 = v22;
              v39[0] = _NSConcreteStackBlock;
              v39[1] = 1107296256;
              v39[2] = sub_1000BED80;
              v39[3] = &unk_10045DD60;
              v23 = _Block_copy(v39);
              v24 = v40;
              v25 = v6;
              swift_retain(v10);
              swift_retain(v15);
              sub_10026EC3C(a1);
              swift_release(v24);
              objc_msgSend(v20, "animateWithDuration:delay:options:animations:completion:", 196609, v23, 0, v21, 0.0);
              _Block_release(v23);
              v26 = sub_1000087DC(0, (unint64_t *)&qword_100499FB0, OS_dispatch_queue_ptr);
              v34 = (void *)static OS_dispatch_queue.main.getter(v26, v27, v28, v29, v30, v31, v32, v33);
              v35 = swift_allocObject(&unk_10045DD98, 24, 7);
              swift_weakInit(v35 + 16, v4);
              swift_retain(v35);
              OS_dispatch_queue.asyncAfter(_:block:)((uint64_t)sub_100273ED0, v35, v21);

              swift_release(v10);
              swift_release(v15);

              swift_release_n(v35, 2);
            }
            return;
          }
          goto LABEL_34;
        }
      }
      else
      {
        v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
        v11 = v6;
        swift_bridgeObjectRetain();
        if (v10)
          goto LABEL_5;
      }

LABEL_35:
      swift_bridgeObjectRelease();
    }
  }
}

id sub_100272794(char a1, id a2, double a3, uint64_t a4, uint64_t a5)
{
  if ((a1 & 1) != 0)
  {
    objc_msgSend(a2, "frame");
    objc_msgSend(a2, "setFrame:", -a3);
  }
  CGRectGetMaxX(*(CGRect *)(a5 + 112));
  objc_msgSend(a2, "frame");
  return objc_msgSend(a2, "setFrame:");
}

double sub_10027283C(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  double result;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    *(_BYTE *)(Strong + 80) = 0;
    *(_QWORD *)&result = swift_release(Strong).n128_u64[0];
  }
  return result;
}

uint64_t sub_100272888(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  unint64_t v13;
  uint64_t result;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_QWORD *)(v1 + 16);
  if ((unint64_t)v3 >> 62)
    goto LABEL_28;
  v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v4)
  {
    v5 = 0;
    v6 = v3 & 0xC000000000000001;
    while (1)
    {
      v7 = v6 ? specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3) : swift_retain(*(_QWORD *)(v3 + 8 * v5 + 32));
      v8 = *(_QWORD *)(v7 + 32);
      v9 = *(_QWORD *)(v8 + 16);
      if (v9)
      {
        v10 = *(double *)(v8 + 32);
        v11 = *(double *)(v8 + 32 + 56 * v9 - 48);
        swift_release(v7);
        if (v10 > v11)
          goto LABEL_26;
      }
      else
      {
        swift_release(v7);
        v10 = 0.0;
        v11 = 0.0;
      }
      if (v10 <= a1 && v11 > a1)
        break;
      v13 = v5 + 1;
      if (__OFADD__(v5, 1))
        goto LABEL_27;
      ++v5;
      if (v13 == v4)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    result = swift_bridgeObjectRelease();
    if (v6)
    {
      v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
      v15 = __OFADD__(v5, 1);
      v16 = v5 + 1;
      if (!v15)
        goto LABEL_21;
    }
    else
    {
      if (v5 >= *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return result;
      }
      v4 = *(_QWORD *)(v3 + 8 * v5 + 32);
      swift_retain(v4);
      v15 = __OFADD__(v5, 1);
      v16 = v5 + 1;
      if (!v15)
      {
LABEL_21:
        v17 = _s4WordCMa();
        Array.subscript.getter(v16, v3, v17, (uint64_t)&v19);
        return v4;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    if (v3 < 0)
      v18 = v3;
    else
      v18 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter(v18);
  }
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_100272A30(double a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v2 = swift_bridgeObjectRetain();
  v3 = (uint64_t)sub_10026CD1C(v2);
  swift_bridgeObjectRelease();
  if ((unint64_t)v3 >> 62)
    goto LABEL_24;
  v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v4)
  {
    v5 = v3 & 0xC000000000000001;
    for (i = 4; ; ++i)
    {
      v7 = i - 4;
      if (v5)
        v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v3);
      else
        v8 = swift_retain(*(_QWORD *)(v3 + 8 * i));
      v9 = *(double *)(v8 + 16);
      v10 = *(double *)(v8 + 24);
      swift_release(v8);
      if (v9 > v10)
        goto LABEL_22;
      if (v9 <= a1 && v10 > a1)
        break;
      v12 = i - 3;
      if (__OFADD__(v7, 1))
        goto LABEL_23;
      if (v12 == v4)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    if (v5)
    {
      v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v3);
      v13 = __OFADD__(v7, 1);
      v14 = i - 3;
      if (!v13)
        goto LABEL_18;
    }
    else
    {
      v4 = *(_QWORD *)(v3 + 8 * i);
      swift_retain(v4);
      v13 = __OFADD__(v7, 1);
      v14 = i - 3;
      if (!v13)
      {
LABEL_18:
        v15 = _s8SyllableCMa();
        Array.subscript.getter(v14, v3, v15, (uint64_t)&v18);
        swift_bridgeObjectRelease();
        return v4;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    if (v3 < 0)
      v16 = v3;
    else
      v16 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return v4;
}

char *sub_100272BB4(void *a1, char a2, const void *a3, char a4, double a5, double a6, double a7, double a8)
{
  _BYTE *v8;
  objc_class *ObjectType;
  char *v18;
  id v19;
  id v20;
  void *v21;
  char *v22;
  void *v23;
  objc_super v25;

  ObjectType = (objc_class *)swift_getObjectType();
  a2 &= 1u;
  *(_QWORD *)&v8[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_backgroundColorLayer] = 0;
  *(_QWORD *)&v8[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_gradientView] = 0;
  v8[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_kind] = a2;
  memcpy(&v8[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_specs], a3, 0x219uLL);
  sub_10026EC3C((uint64_t)a3);
  v25.receiver = v8;
  v25.super_class = ObjectType;
  v18 = (char *)objc_msgSendSuper2(&v25, "initWithFrame:", a5, a6, a7, a8);
  v19 = objc_msgSend(a1, "CGColor");
  v20 = sub_100272D1C((uint64_t)v19, (uint64_t)a3);

  v21 = *(void **)&v18[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_backgroundColorLayer];
  *(_QWORD *)&v18[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_backgroundColorLayer] = v20;

  v22 = sub_100272E44(a2, (uint64_t)a3, a4 & 1);
  sub_10026ED0C((uint64_t)a3);

  v23 = *(void **)&v18[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_gradientView];
  *(_QWORD *)&v18[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_gradientView] = v22;

  return v18;
}

id sub_100272D1C(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  CGFloat v11;
  id v12;
  CGRect v14;
  CGRect v15;
  CGRect v16;

  v5 = objc_msgSend(objc_allocWithZone((Class)CALayer), "init");
  objc_msgSend(v5, "setBackgroundColor:", a1);
  objc_msgSend(*(id *)(a2 + 168), "lineHeight");
  v7 = v6 * *(double *)(a2 + 224) + *(double *)(a2 + 352) + *(double *)(a2 + 352);
  objc_msgSend(v2, "frame");
  v8 = (v7 - CGRectGetHeight(v14)) * 0.5;
  v9 = -v8;
  objc_msgSend(v2, "frame");
  v10 = v8 + v8;
  v11 = CGRectGetWidth(v15) + v8 + v8;
  objc_msgSend(v2, "frame");
  objc_msgSend(v5, "setFrame:", v9, v9, v11, v10 + CGRectGetHeight(v16));
  v12 = objc_msgSend(v2, "layer");
  objc_msgSend(v12, "addSublayer:", v5);

  return v5;
}

char *sub_100272E44(char a1, uint64_t a2, char a3)
{
  void *v3;
  void *v4;
  double v8;
  double v9;
  double v10;
  double v11;
  double Height;
  uint64_t v13;
  double v14;
  double v15;
  id v16;
  double v17;
  id v18;
  char *v19;
  CGRect v21;
  CGRect v22;

  v4 = v3;
  objc_msgSend(*(id *)(a2 + 168), "lineHeight");
  v9 = v8;
  v10 = *(double *)(a2 + 224);
  v11 = *(double *)(a2 + 352);
  objc_msgSend(v4, "frame");
  Height = CGRectGetHeight(v21);
  v13 = 384;
  if ((a1 & 1) == 0)
    v13 = 376;
  v14 = (v9 * v10 + v11 + v11 - Height) * 0.5;
  v15 = *(double *)(a2 + 392);
  v16 = *(id *)(a2 + v13);
  objc_msgSend(v4, "frame");
  v17 = v14 + v14 + CGRectGetHeight(v22);
  v18 = objc_allocWithZone((Class)type metadata accessor for LineProgressGradientView());
  v19 = LineProgressGradientView.init(color:featherWidth:direction:frame:)(v16, a3 & 1, v15, -v14, -v14, v14, v17);
  objc_msgSend(v4, "addSubview:", v19);
  return v19;
}

void sub_100272FE4()
{
  char *v0;
  char *v1;
  void **v2;
  void *v3;
  void *v4;
  id v5;
  char *v6;
  id v7;
  objc_super v8;

  v8.receiver = v0;
  v8.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v8, "tintColorDidChange");
  v1 = *(char **)&v0[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_gradientView];
  if (v1)
  {
    if (v0[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_kind])
      v2 = (void **)&v0[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_specs + 384];
    else
      v2 = (void **)&v0[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_specs + 376];
    v3 = *v2;
    v4 = *(void **)&v1[OBJC_IVAR____TtC11MusicCoreUI24LineProgressGradientView_color];
    *(_QWORD *)&v1[OBJC_IVAR____TtC11MusicCoreUI24LineProgressGradientView_color] = v3;
    v5 = v3;
    v6 = v1;
    sub_1000087DC(0, (unint64_t *)&qword_1004A1510, UIColor_ptr);
    v7 = v5;
    LOBYTE(v5) = static NSObject.== infix(_:_:)(v7, v4);

    if ((v5 & 1) == 0)
      sub_100294780();

  }
  else
  {
    __break(1u);
  }
}

void sub_10027311C(uint64_t a1)
{
  char *v1;
  char *v3;
  void **v4;
  void *v5;
  void *v6;
  id v7;
  char *v8;
  id v9;
  objc_super v10;

  v10.receiver = v1;
  v10.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v10, "traitCollectionDidChange:", a1);
  v3 = *(char **)&v1[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_gradientView];
  if (v3)
  {
    if (v1[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_kind])
      v4 = (void **)&v1[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_specs + 384];
    else
      v4 = (void **)&v1[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_specs + 376];
    v5 = *v4;
    v6 = *(void **)&v3[OBJC_IVAR____TtC11MusicCoreUI24LineProgressGradientView_color];
    *(_QWORD *)&v3[OBJC_IVAR____TtC11MusicCoreUI24LineProgressGradientView_color] = v5;
    v7 = v5;
    v8 = v3;
    sub_1000087DC(0, (unint64_t *)&qword_1004A1510, UIColor_ptr);
    v9 = v7;
    LOBYTE(v7) = static NSObject.== infix(_:_:)(v9, v6);

    if ((v7 & 1) == 0)
      sub_100294780();

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100273310()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 88));
  return swift_deallocClassInstance(v0, 96, 7);
}

uint64_t _s4LineCMa()
{
  return objc_opt_self(_TtCC11MusicCoreUI20SyncedLyricsLineView4Line);
}

uint64_t _s4LineC8LineViewCMa()
{
  return objc_opt_self(_TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView);
}

_UNKNOWN **sub_10027338C()
{
  return &off_10049A9A0;
}

uint64_t sub_100273398(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_100273DC0((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_100273400(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_100273400(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  Swift::Int v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  Swift::Int v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t *v17;
  Swift::Int v18;
  Swift::Int v19;
  uint64_t *v20;
  uint64_t v21;
  Swift::Int v22;
  double *v23;
  double v24;
  Swift::Int v25;
  double *v26;
  double v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  char v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t i;
  double v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  Swift::Int v96;
  uint64_t v97;
  double *v98;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v78 = 0;
      v79 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v81 = *(double *)(v79 + 8 * i);
        v82 = v78;
        do
        {
          v83 = v79 + 8 * v82;
          if (v81 >= *(double *)v83)
            break;
          if (!v79)
            goto LABEL_141;
          *(_QWORD *)(v83 + 8) = *(_QWORD *)v83;
          *(double *)(v79 + 8 * v82--) = v81;
        }
        while (v82 != -1);
        ++v78;
      }
    }
  }
  else
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 < -1)
      goto LABEL_136;
    v95 = result;
    v96 = v3;
    if (v3 > 1)
    {
      v6 = v5 >> 1;
      result = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for Double);
      *(_QWORD *)(result + 16) = v6;
      v3 = v96;
      v94 = (_QWORD *)result;
      v98 = (double *)(result + 32);
LABEL_13:
      v8 = 0;
      v9 = *v2;
      v92 = v2;
      v93 = *v2 - 8;
      v10 = (char *)_swiftEmptyArrayStorage;
      v97 = *v2;
      while (1)
      {
        v12 = v8++;
        if (v8 < v3)
        {
          v13 = *(double *)(v9 + 8 * v8);
          v14 = *(double *)(v9 + 8 * v12);
          v8 = v12 + 2;
          if (v12 + 2 < v3)
          {
            v15 = v13;
            while (1)
            {
              v16 = v15;
              v15 = *(double *)(v9 + 8 * v8);
              if (v13 < v14 == v15 >= v16)
                break;
              if (v3 == ++v8)
              {
                v8 = v3;
                break;
              }
            }
          }
          if (v13 < v14)
          {
            if (v8 < v12)
              goto LABEL_138;
            if (v12 < v8)
            {
              v17 = (uint64_t *)(v93 + 8 * v8);
              v18 = v8;
              v19 = v12;
              v20 = (uint64_t *)(v9 + 8 * v12);
              do
              {
                if (v19 != --v18)
                {
                  if (!v9)
                    goto LABEL_144;
                  v21 = *v20;
                  *v20 = *v17;
                  *v17 = v21;
                }
                ++v19;
                --v17;
                ++v20;
              }
              while (v19 < v18);
            }
          }
        }
        if (v8 < v3)
        {
          if (__OFSUB__(v8, v12))
            goto LABEL_135;
          if (v8 - v12 < v95)
          {
            v22 = v12 + v95;
            if (__OFADD__(v12, v95))
              goto LABEL_139;
            if (v22 >= v3)
              v22 = v3;
            if (v22 < v12)
            {
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
              return result;
            }
            if (v8 != v22)
            {
              v23 = (double *)(v93 + 8 * v8);
              do
              {
                v24 = *(double *)(v9 + 8 * v8);
                v25 = v12;
                v26 = v23;
                do
                {
                  v27 = *v26;
                  if (v24 >= *v26)
                    break;
                  if (!v9)
                    goto LABEL_142;
                  *v26 = v24;
                  v26[1] = v27;
                  --v26;
                  ++v25;
                }
                while (v8 != v25);
                ++v8;
                ++v23;
              }
              while (v8 != v22);
              v8 = v22;
            }
          }
        }
        if (v8 < v12)
          goto LABEL_130;
        result = swift_isUniquelyReferenced_nonNull_native(v10);
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_100273C4C(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
          v10 = (char *)result;
        }
        v29 = *((_QWORD *)v10 + 2);
        v28 = *((_QWORD *)v10 + 3);
        v11 = v29 + 1;
        v9 = v97;
        if (v29 >= v28 >> 1)
        {
          result = (uint64_t)sub_100273C4C((char *)(v28 > 1), v29 + 1, 1, v10);
          v9 = v97;
          v10 = (char *)result;
        }
        *((_QWORD *)v10 + 2) = v11;
        v30 = v10 + 32;
        v31 = &v10[16 * v29 + 32];
        *(_QWORD *)v31 = v12;
        *((_QWORD *)v31 + 1) = v8;
        if (v29)
        {
          while (1)
          {
            v32 = v11 - 1;
            if (v11 >= 4)
            {
              v37 = &v30[2 * v11];
              v38 = *(v37 - 8);
              v39 = *(v37 - 7);
              v43 = __OFSUB__(v39, v38);
              v40 = v39 - v38;
              if (v43)
                goto LABEL_119;
              v42 = *(v37 - 6);
              v41 = *(v37 - 5);
              v43 = __OFSUB__(v41, v42);
              v35 = v41 - v42;
              v36 = v43;
              if (v43)
                goto LABEL_120;
              v44 = v11 - 2;
              v45 = &v30[2 * v11 - 4];
              v47 = *v45;
              v46 = v45[1];
              v43 = __OFSUB__(v46, v47);
              v48 = v46 - v47;
              if (v43)
                goto LABEL_121;
              v43 = __OFADD__(v35, v48);
              v49 = v35 + v48;
              if (v43)
                goto LABEL_123;
              if (v49 >= v40)
              {
                v67 = &v30[2 * v32];
                v69 = *v67;
                v68 = v67[1];
                v43 = __OFSUB__(v68, v69);
                v70 = v68 - v69;
                if (v43)
                  goto LABEL_129;
                v60 = v35 < v70;
                goto LABEL_83;
              }
            }
            else
            {
              if (v11 != 3)
              {
                v61 = *((_QWORD *)v10 + 4);
                v62 = *((_QWORD *)v10 + 5);
                v43 = __OFSUB__(v62, v61);
                v54 = v62 - v61;
                v55 = v43;
                goto LABEL_77;
              }
              v34 = *((_QWORD *)v10 + 4);
              v33 = *((_QWORD *)v10 + 5);
              v43 = __OFSUB__(v33, v34);
              v35 = v33 - v34;
              v36 = v43;
            }
            if ((v36 & 1) != 0)
              goto LABEL_122;
            v44 = v11 - 2;
            v50 = &v30[2 * v11 - 4];
            v52 = *v50;
            v51 = v50[1];
            v53 = __OFSUB__(v51, v52);
            v54 = v51 - v52;
            v55 = v53;
            if (v53)
              goto LABEL_124;
            v56 = &v30[2 * v32];
            v58 = *v56;
            v57 = v56[1];
            v43 = __OFSUB__(v57, v58);
            v59 = v57 - v58;
            if (v43)
              goto LABEL_126;
            if (__OFADD__(v54, v59))
              goto LABEL_128;
            if (v54 + v59 >= v35)
            {
              v60 = v35 < v59;
LABEL_83:
              if (v60)
                v32 = v44;
              goto LABEL_85;
            }
LABEL_77:
            if ((v55 & 1) != 0)
              goto LABEL_125;
            v63 = &v30[2 * v32];
            v65 = *v63;
            v64 = v63[1];
            v43 = __OFSUB__(v64, v65);
            v66 = v64 - v65;
            if (v43)
              goto LABEL_127;
            if (v66 < v54)
              goto LABEL_15;
LABEL_85:
            v71 = v32 - 1;
            if (v32 - 1 >= v11)
            {
              __break(1u);
LABEL_116:
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
              goto LABEL_140;
            }
            if (!v9)
              goto LABEL_143;
            v72 = &v30[2 * v71];
            v73 = *v72;
            v74 = v30;
            v75 = &v30[2 * v32];
            v76 = v75[1];
            result = sub_100273A4C((double *)(v9 + 8 * *v72), (double *)(v9 + 8 * *v75), v9 + 8 * v76, v98);
            if (v1)
              goto LABEL_113;
            if (v76 < v73)
              goto LABEL_116;
            if (v32 > *((_QWORD *)v10 + 2))
              goto LABEL_117;
            *v72 = v73;
            v74[2 * v71 + 1] = v76;
            v77 = *((_QWORD *)v10 + 2);
            if (v32 >= v77)
              goto LABEL_118;
            v11 = v77 - 1;
            result = (uint64_t)memmove(v75, v75 + 2, 16 * (v77 - 1 - v32));
            v30 = v74;
            *((_QWORD *)v10 + 2) = v77 - 1;
            v9 = v97;
            if (v77 <= 2)
              goto LABEL_15;
          }
        }
        v11 = 1;
LABEL_15:
        v3 = v96;
        if (v8 >= v96)
        {
          v7 = v94;
          v2 = v92;
          goto LABEL_102;
        }
      }
    }
    v7 = _swiftEmptyArrayStorage;
    v98 = (double *)&_swiftEmptyArrayStorage[4];
    if (v3 == 1)
    {
      v94 = _swiftEmptyArrayStorage;
      goto LABEL_13;
    }
    v11 = _swiftEmptyArrayStorage[2];
    v10 = (char *)_swiftEmptyArrayStorage;
LABEL_102:
    v94 = v7;
    if (v11 >= 2)
    {
      v84 = *v2;
      do
      {
        v85 = v11 - 2;
        if (v11 < 2)
          goto LABEL_131;
        if (!v84)
          goto LABEL_145;
        v86 = (uint64_t)v10;
        v87 = v10 + 32;
        v88 = *(_QWORD *)&v10[16 * v85 + 32];
        v89 = *(_QWORD *)&v10[16 * v11 + 24];
        result = sub_100273A4C((double *)(v84 + 8 * v88), (double *)(v84 + 8 * v87[2 * v11 - 2]), v84 + 8 * v89, v98);
        if (v1)
          break;
        if (v89 < v88)
          goto LABEL_132;
        result = swift_isUniquelyReferenced_nonNull_native(v86);
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_100273D44(v86);
          v86 = result;
        }
        if (v85 >= *(_QWORD *)(v86 + 16))
          goto LABEL_133;
        v90 = (_QWORD *)(v86 + 32 + 16 * v85);
        *v90 = v88;
        v90[1] = v89;
        v91 = *(_QWORD *)(v86 + 16);
        if (v11 > v91)
          goto LABEL_134;
        result = (uint64_t)memmove((void *)(v86 + 32 + 16 * (v11 - 1)), (const void *)(v86 + 32 + 16 * v11), 16 * (v91 - v11));
        v10 = (char *)v86;
        *(_QWORD *)(v86 + 16) = v91 - 1;
        v11 = v91 - 1;
      }
      while (v91 > 2);
    }
LABEL_113:
    swift_bridgeObjectRelease();
    v94[2] = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100273A4C(double *__dst, double *__src, unint64_t a3, double *a4)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double v15;
  BOOL v16;
  double *v17;
  double *v18;
  double *v19;
  double v20;
  double v21;
  int64_t v23;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = (char *)__src - (char *)__dst;
  v9 = (char *)__src - (char *)__dst + 7;
  if ((char *)__src - (char *)__dst >= 0)
    v9 = (char *)__src - (char *)__dst;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)__src;
  v12 = a3 - (_QWORD)__src + 7;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v12 = a3 - (_QWORD)__src;
  v13 = v12 >> 3;
  if (v10 >= v12 >> 3)
  {
    if (a4 != __src || &__src[v13] <= a4)
      memmove(a4, __src, 8 * v13);
    v14 = &v4[v13];
    if (v7 >= v6 || v11 < 8)
      goto LABEL_39;
    v17 = (double *)(a3 - 8);
    v18 = v6;
    while (1)
    {
      v19 = v17 + 1;
      v20 = *--v18;
      v21 = v20;
      if (*(v14 - 1) < v20)
        break;
      v21 = *(v14 - 1);
      v18 = v6;
      if (v19 != v14)
      {
        --v14;
LABEL_35:
        *v17 = v21;
        goto LABEL_36;
      }
      if (v17 >= v14--)
        goto LABEL_35;
LABEL_36:
      if (v18 > v7)
      {
        --v17;
        v6 = v18;
        if (v14 > v4)
          continue;
      }
      v6 = v18;
      goto LABEL_39;
    }
    if (v19 == v6 && v17 < v6)
      goto LABEL_36;
    goto LABEL_35;
  }
  if (a4 != __dst || &__dst[v10] <= a4)
    memmove(a4, __dst, 8 * v10);
  v14 = &v4[v10];
  if ((unint64_t)v6 < a3 && v8 >= 8)
  {
    while (1)
    {
      v15 = *v6;
      if (*v6 >= *v4)
        break;
      v16 = v7 == v6++;
      if (!v16)
        goto LABEL_16;
LABEL_17:
      ++v7;
      if (v4 >= v14 || (unint64_t)v6 >= a3)
        goto LABEL_19;
    }
    v15 = *v4;
    v16 = v7 == v4++;
    if (v16)
      goto LABEL_17;
LABEL_16:
    *v7 = v15;
    goto LABEL_17;
  }
LABEL_19:
  v6 = v7;
LABEL_39:
  v23 = (char *)v14 - (char *)v4 + ((char *)v14 - (char *)v4 < 0 ? 7uLL : 0);
  if (v6 != v4 || v6 >= (double *)((char *)v4 + (v23 & 0xFFFFFFFFFFFFFFF8)))
    memmove(v6, v4, 8 * (v23 >> 3));
  return 1;
}

char *sub_100273C4C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005574(&qword_10049A758);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_100273D44(uint64_t a1)
{
  return sub_100273C4C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100273D58()
{
  uint64_t v0;

  return swift_deallocObject(v0, 56, 7);
}

id sub_100273D7C()
{
  uint64_t v0;
  id result;

  result = *(id *)(*(_QWORD *)(v0 + 16)
                 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_gradientView);
  if (result)
    return objc_msgSend(result, "setFrame:", *(double *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48));
  __break(1u);
  return result;
}

uint64_t sub_100273DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100273DB8(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

char *sub_100273DC0(uint64_t a1)
{
  return sub_100259ABC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_100273DD4(uint64_t a1)
{
  return sub_10025A060(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100273DE8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));

  return swift_deallocObject(v0, 593, 7);
}

id sub_100273E94()
{
  uint64_t v0;

  return sub_100272794(*(_BYTE *)(v0 + 16), *(id *)(v0 + 24), *(double *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_100273EAC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_100273ED0()
{
  uint64_t v0;

  return sub_10027283C(v0);
}

_QWORD *sub_100273EF0(_QWORD *result, char a2, uint64_t a3)
{
  void *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  CGAffineTransform v7;

  v3 = (void *)result[18];
  if (v3)
  {
    if ((a2 & 1) != 0)
    {
      v4 = xmmword_100384BD0;
      v5 = xmmword_1003952A0;
      v6 = 0uLL;
    }
    else
    {
      CGAffineTransformMakeTranslation(&v7, 0.0, -*(double *)(a3 + 504));
      v5 = *(_OWORD *)&v7.a;
      v4 = *(_OWORD *)&v7.c;
      v6 = *(_OWORD *)&v7.tx;
    }
    *(_OWORD *)&v7.a = v5;
    *(_OWORD *)&v7.c = v4;
    *(_OWORD *)&v7.tx = v6;
    return objc_msgSend(v3, "setTransform:", &v7);
  }
  return result;
}

void sub_100273F6C(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  unsigned __int8 v4;

  if (!a1)
  {
    v3 = *(void **)(a2 + 96);
    *(_QWORD *)(a2 + 96) = (a3 & 1) == 0;
    v4 = *(_BYTE *)(a2 + 104);
    *(_BYTE *)(a2 + 104) = 2;
    sub_10026F954(v3, v4);
  }
}

id sub_10027401C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)_s8SyllableC12SyllableViewCMa();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10027404C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10026F954(*(id *)(v0 + 96), *(_BYTE *)(v0 + 104));

  return swift_deallocClassInstance(v0, 152, 7);
}

uint64_t _s8SyllableCMa()
{
  return objc_opt_self(_TtCC11MusicCoreUI20SyncedLyricsLineView8Syllable);
}

uint64_t _s8SyllableC12SyllableViewCMa()
{
  return objc_opt_self(_TtCCC11MusicCoreUI20SyncedLyricsLineView8Syllable12SyllableView);
}

_UNKNOWN **sub_1002740D4()
{
  return &off_10049A5B8;
}

void sub_1002740E0()
{
  uint64_t v0;
  uint64_t v1;
  Class isa;
  int v3;
  BOOL v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  objc_class *v10;
  void **v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;

  v1 = v0;
  isa = *(Class *)(v0 + 96);
  v3 = *(unsigned __int8 *)(v1 + 104);
  if (v3 == 1)
  {
    if (isa)
    {
LABEL_9:
      sub_10026F930(isa, v3);
      -[objc_class stopAnimation:](isa, "stopAnimation:", 1);
      goto LABEL_10;
    }
  }
  else
  {
    if (*(_BYTE *)(v1 + 104))
      v4 = 1;
    else
      v4 = isa == 0;
    if (!v4)
      goto LABEL_9;
  }
  sub_10027103C();
  isa = UIViewPropertyAnimator.init(springTimingParameters:)((UISpringTimingParameters)objc_msgSend(objc_allocWithZone((Class)UISpringTimingParameters), "initWithMass:stiffness:damping:initialVelocity:", 1.0, 14.0, 7.0, 0.0, 0.0)).super.isa;
LABEL_10:
  v15 = sub_1002742B0;
  v16 = v1;
  v11 = _NSConcreteStackBlock;
  v12 = 1107296256;
  v13 = sub_1000BED80;
  v14 = &unk_10045DDC8;
  v5 = _Block_copy(&v11);
  v6 = v16;
  swift_retain(v1);
  -[objc_class addAnimations:](isa, "addAnimations:", v5, swift_release(v6).n128_f64[0]);
  _Block_release(v5);
  v15 = sub_100274308;
  v16 = v1;
  v11 = _NSConcreteStackBlock;
  v12 = 1107296256;
  v13 = sub_100204BB4;
  v14 = &unk_10045DDF0;
  v7 = _Block_copy(&v11);
  v8 = v16;
  swift_retain(v1);
  -[objc_class addCompletion:](isa, "addCompletion:", v7, swift_release(v8).n128_f64[0]);
  _Block_release(v7);
  v9 = *(void **)(v1 + 96);
  *(_QWORD *)(v1 + 96) = isa;
  LOBYTE(v8) = *(_BYTE *)(v1 + 104);
  *(_BYTE *)(v1 + 104) = 1;
  v10 = isa;
  sub_10026F954(v9, v8);
  -[objc_class startAnimation](v10, "startAnimation");

}

id sub_1002742B0()
{
  uint64_t v0;
  id result;
  _QWORD v2[6];

  result = *(id *)(v0 + 144);
  if (result)
  {
    v2[0] = 0x3FF0000000000000;
    v2[1] = 0;
    v2[2] = 0;
    v2[3] = 0x3FF0000000000000;
    v2[4] = 0;
    v2[5] = 0;
    return objc_msgSend(result, "setTransform:", v2);
  }
  return result;
}

uint64_t sub_1002742F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100274300(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

void sub_100274308(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  unsigned __int8 v3;

  if (!a1)
  {
    v2 = *(void **)(v1 + 96);
    *(_QWORD *)(v1 + 96) = 0;
    v3 = *(_BYTE *)(v1 + 104);
    *(_BYTE *)(v1 + 104) = 2;
    sub_10026F954(v2, v3);
  }
}

_QWORD *sub_100274330(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((unint64_t)a1 >> 62)
    goto LABEL_12;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v2)
  {
    v3 = 4;
    while (1)
    {
      v4 = v3 - 4;
      if ((a1 & 0xC000000000000001) == 0)
        break;
      v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, a1);
      v6 = v3 - 3;
      if (__OFADD__(v4, 1))
        goto LABEL_11;
LABEL_9:
      v7 = *(_QWORD *)(v5 + 88);
      swift_bridgeObjectRetain();
      swift_release(v5);
      sub_1002E40F4(v7);
      ++v3;
      if (v6 == v2)
        goto LABEL_16;
    }
    v5 = *(_QWORD *)(a1 + 8 * v3);
    swift_retain(v5);
    v6 = v3 - 3;
    if (!__OFADD__(v4, 1))
      goto LABEL_9;
LABEL_11:
    __break(1u);
LABEL_12:
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter(v8);
  }
LABEL_16:
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void sub_100274450()
{
  unint64_t v0;
  unint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double *v12;
  id v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  BOOL v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void *v33;
  unsigned __int8 v34;
  unint64_t v35;
  uint64_t v36;
  char v37[24];
  char v38[32];

  v1 = v0;
  v2 = *(void **)(v0 + 128);
  if (v2)
  {
    v3 = objc_msgSend(v2, "layer");
    objc_msgSend(v3, "removeAllAnimations");

  }
  v4 = *(_QWORD *)(v1 + 136);
  if (v4)
  {
    swift_retain(*(_QWORD *)(v1 + 136));
    Task.cancel()();
    swift_release(v4);
    v5 = *(_QWORD *)(v1 + 136);
  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)(v1 + 136) = 0;
  swift_release(v5);
  v6 = *(void **)(v1 + 128);
  if (v6)
  {
    v7 = v6;
    sub_1002758E0();

  }
  v8 = swift_bridgeObjectRetain();
  v9 = (uint64_t)sub_100274330(v8);
  swift_bridgeObjectRelease();
  if ((unint64_t)v9 >> 62)
    goto LABEL_38;
  v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v10)
  {
    v11 = 0;
    v36 = v10;
    v35 = v1;
    while (1)
    {
      if ((v9 & 0xC000000000000001) != 0)
      {
        v16 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v9);
        v17 = __OFADD__(v11++, 1);
        if (v17)
          break;
        goto LABEL_18;
      }
      if (v11 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_37;
      v16 = *(_QWORD **)(v9 + 32 + 8 * v11);
      swift_retain(v16);
      v17 = __OFADD__(v11++, 1);
      if (v17)
        break;
LABEL_18:
      v18 = (char *)v16[8];
      if (v18)
      {
        v19 = v16[4];
        v20 = v16[5];
        v21 = v16[6];
        v22 = v16[7];
        v23 = (uint64_t *)&v18[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView5Glyph9GlyphView_currentAnimators];
        swift_beginAccess(&v18[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView5Glyph9GlyphView_currentAnimators], v38, 0, 0);
        v24 = *v23;
        if ((unint64_t)v24 >> 62)
        {
          if (v24 < 0)
            v30 = v24;
          else
            v30 = v24 & 0xFFFFFFFFFFFFFF8;
          v31 = v18;
          swift_bridgeObjectRetain();
          v25 = _CocoaArrayWrapper.endIndex.getter(v30);
          if (!v25)
            goto LABEL_11;
        }
        else
        {
          v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
          v26 = v18;
          swift_bridgeObjectRetain();
          if (!v25)
            goto LABEL_11;
        }
        if (v25 < 1)
          goto LABEL_36;
        v27 = 0;
        v1 = v24 & 0xC000000000000001;
        do
        {
          if (v1)
            v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v27, v24);
          else
            v28 = *(id *)(v24 + 8 * v27 + 32);
          v29 = v28;
          ++v27;
          objc_msgSend(v28, "stopAnimation:", 0, v35);

        }
        while (v25 != v27);
LABEL_11:
        swift_bridgeObjectRelease();
        sub_100270310();
        v12 = (double *)CGPoint.center.unsafeMutableAddressor();
        swift_beginAccess(v12, v37, 0, 0);
        UIView.setAnchorPoint(_:preserveFrame:)(1, *v12, v12[1]);
        sub_1000087DC(0, (unint64_t *)&qword_10049D970, UIView_ptr);
        sub_1000087DC(0, &qword_10049ADC0, UISpringTimingParameters_ptr);
        v13 = UISpringTimingParameters.init(dampingRatio:response:)(1.0, 1.5);
        v14 = (_QWORD *)swift_allocObject(&unk_10045DF58, 56, 7);
        v14[2] = v18;
        v14[3] = v19;
        v14[4] = v20;
        v14[5] = v21;
        v14[6] = v22;
        v15 = v18;
        static UIView.animate(withSpringTimingParameters:delay:options:animations:completion:)(v13, 0, sub_1002762D0, (uint64_t)v14, 0, 0, 0.0);

        objc_msgSend(v15, "sizeToFit", swift_release(v14).n128_f64[0]);
        swift_release(v16);

        v10 = v36;
        if (v11 == v36)
          goto LABEL_34;
      }
      else
      {
        swift_release(v16);
        if (v11 == v10)
        {
LABEL_34:
          swift_bridgeObjectRelease();
          v1 = v35;
          goto LABEL_43;
        }
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    if (v9 < 0)
      v32 = v9;
    else
      v32 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter(v32);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
LABEL_43:
  v33 = *(void **)(v1 + 80);
  *(_QWORD *)(v1 + 80) = 0;
  v34 = *(_BYTE *)(v1 + 88);
  *(_BYTE *)(v1 + 88) = 2;
  sub_10026F954(v33, v34);
}

void sub_100274834(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  _BOOL4 v15;
  Class isa;
  int v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  objc_class *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  double *v38;
  id v39;
  _QWORD *v40;
  char *v41;
  _QWORD *v42;
  BOOL v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t j;
  id v55;
  void *v56;
  char *v57;
  uint64_t v58;
  void *v59;
  unsigned __int8 v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  unsigned __int8 v69;
  void *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  double v79;
  double v80;
  double v81;
  id v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  double v92;
  double v93;
  double v94;
  uint64_t v95;
  void *v96;
  double v97;
  double v98;
  double v99;
  double v100;
  id v101;
  void *v102;
  double v103;
  id v104;
  uint64_t v105;
  _QWORD v106[2];
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t i;
  double v113;
  double v114;
  double v115;
  char v116[32];
  void **aBlock;
  uint64_t v118;
  void *v119;
  void *v120;
  void *v121;
  uint64_t v122;

  v4 = v2;
  v114 = *(double *)&a1;
  sub_100005574(&qword_10049AEC0);
  __chkstk_darwin();
  v108 = (char *)v106 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = *(double *)(v2 + 72);
  if (*(_QWORD *)&v115 >> 62)
  {
    if (v115 < 0.0)
      v26 = *(_QWORD *)&v115;
    else
      v26 = *(_QWORD *)&v115 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter(v26);
    if (v7)
      goto LABEL_3;
  }
  else
  {
    v7 = *(_QWORD *)((*(_QWORD *)&v115 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
    {
LABEL_3:
      v8 = v7 - 1;
      if (v7 < 1)
        goto LABEL_76;
      v109 = v4;
      v9 = 0;
      v11 = v114;
      v10 = v115;
      v12 = *(_QWORD *)&v115 & 0xC000000000000001;
      while (1)
      {
        if (v12)
        {
          v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, *(_QWORD *)&v10);
        }
        else
        {
          v13 = *(_QWORD *)(*(_QWORD *)&v10 + 8 * v9 + 32);
          swift_retain(v13);
        }
        v14 = *(double *)(v13 + 16);
        v15 = v14 <= a2;
        if (*(unsigned __int8 *)(v13 + 104) >= 2u)
        {
          if (*(_QWORD *)(v13 + 96))
          {
            if (v14 <= a2)
              goto LABEL_5;
            v15 = 0;
          }
          else if (v14 > a2)
          {
LABEL_5:
            swift_release(v13);
            if (v8 == v9)
              goto LABEL_25;
            goto LABEL_6;
          }
        }
        sub_10026F954((id)v15, 2u);
        isa = *(Class *)(v13 + 96);
        v17 = *(unsigned __int8 *)(v13 + 104);
        if (v17 == 1)
        {
          if (isa && v14 <= a2)
          {
LABEL_22:
            sub_10026F930(*(id *)(v13 + 96), v17);
            -[objc_class stopAnimation:](isa, "stopAnimation:", 1);
            goto LABEL_24;
          }
        }
        else if (!*(_BYTE *)(v13 + 104) && isa && v14 > a2)
        {
          goto LABEL_22;
        }
        sub_1000087DC(0, (unint64_t *)&qword_10049B080, UIViewPropertyAnimator_ptr);
        isa = UIViewPropertyAnimator.init(springTimingParameters:)((UISpringTimingParameters)objc_msgSend(objc_allocWithZone((Class)UISpringTimingParameters), "initWithMass:stiffness:damping:initialVelocity:", 1.0, 14.0, 7.0, 0.0, 0.0)).super.isa;
LABEL_24:
        v18 = swift_allocObject(&unk_10045DE40, 569, 7);
        *(_QWORD *)(v18 + 16) = v13;
        *(_BYTE *)(v18 + 24) = v14 > a2;
        memcpy((void *)(v18 + 32), *(const void **)&v11, 0x219uLL);
        v121 = sub_100276194;
        v122 = v18;
        aBlock = _NSConcreteStackBlock;
        v118 = 1107296256;
        v119 = sub_1000BED80;
        v120 = &unk_10045DE58;
        v19 = _Block_copy(&aBlock);
        v20 = v122;
        swift_retain(v13);
        sub_10026EC3C(*(uint64_t *)&v11);
        -[objc_class addAnimations:](isa, "addAnimations:", v19, swift_release(v20).n128_f64[0]);
        _Block_release(v19);
        v21 = swift_allocObject(&unk_10045DE90, 25, 7);
        *(_QWORD *)(v21 + 16) = v13;
        *(_BYTE *)(v21 + 24) = v14 > a2;
        v121 = sub_1002761E0;
        v122 = v21;
        aBlock = _NSConcreteStackBlock;
        v118 = 1107296256;
        v119 = sub_100204BB4;
        v120 = &unk_10045DEA8;
        v22 = _Block_copy(&aBlock);
        v23 = v122;
        swift_retain(v13);
        -[objc_class addCompletion:](isa, "addCompletion:", v22, swift_release(v23).n128_f64[0]);
        _Block_release(v22);
        v24 = *(void **)(v13 + 96);
        *(_QWORD *)(v13 + 96) = isa;
        LOBYTE(v23) = *(_BYTE *)(v13 + 104);
        *(_BYTE *)(v13 + 104) = v14 > a2;
        v25 = isa;
        sub_10026F954(v24, v23);
        -[objc_class startAnimation](v25, "startAnimation");
        swift_release(v13);

        v10 = v115;
        if (v8 == v9)
        {
LABEL_25:
          swift_bridgeObjectRelease();
          v4 = v109;
          goto LABEL_31;
        }
LABEL_6:
        ++v9;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_31:
  v27 = *(_QWORD *)(v4 + 32);
  v28 = *(_QWORD *)(v27 + 16);
  if (v28)
  {
    if (*(double *)(v27 + 32) <= a2)
    {
LABEL_82:
      if (*(double *)(v27 + 32) > a2)
        return;
      goto LABEL_85;
    }
  }
  else if (a2 >= 0.0)
  {
    goto LABEL_84;
  }
  if (*(_BYTE *)(v4 + 88) == 2 && !*(_QWORD *)(v4 + 80))
  {
    if (v28)
      goto LABEL_82;
    goto LABEL_84;
  }
  v29 = *(void **)(v4 + 128);
  if (v29)
  {
    v30 = objc_msgSend(v29, "layer");
    objc_msgSend(v30, "removeAllAnimations");

  }
  v31 = *(_QWORD *)(v4 + 136);
  if (v31)
  {
    swift_retain(*(_QWORD *)(v4 + 136));
    Task.cancel()();
    swift_release(v31);
    v32 = *(_QWORD *)(v4 + 136);
  }
  else
  {
    v32 = 0;
  }
  *(_QWORD *)(v4 + 136) = 0;
  swift_release(v32);
  v33 = *(void **)(v4 + 128);
  if (v33)
  {
    v34 = v33;
    sub_1002758E0();

  }
  v107 = v27;
  v35 = swift_bridgeObjectRetain();
  v3 = (uint64_t)sub_100274330(v35);
  swift_bridgeObjectRelease();
  v109 = v4;
  v106[1] = 0;
  if ((unint64_t)v3 >> 62)
    goto LABEL_77;
  v36 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v36)
  {
LABEL_49:
    v37 = 0;
    *(_QWORD *)&v113 = v3 & 0xC000000000000001;
    v111 = v3 & 0xFFFFFFFFFFFFFF8;
    v110 = v3 + 32;
    for (i = v36; i != v37; v36 = i)
    {
      while (1)
      {
        if (v113 == 0.0)
        {
          if (v37 >= *(_QWORD *)(v111 + 16))
            goto LABEL_75;
          v42 = *(_QWORD **)(v110 + 8 * v37);
          swift_retain(v42);
          v43 = __OFADD__(v37++, 1);
          if (v43)
          {
LABEL_73:
            __break(1u);
LABEL_74:
            __break(1u);
LABEL_75:
            __break(1u);
LABEL_76:
            __break(1u);
LABEL_77:
            if (v3 < 0)
              v58 = v3;
            else
              v58 = v3 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain();
            v36 = _CocoaArrayWrapper.endIndex.getter(v58);
            swift_bridgeObjectRelease();
            if (!v36)
              goto LABEL_81;
            goto LABEL_49;
          }
        }
        else
        {
          v42 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v37, v3);
          v43 = __OFADD__(v37++, 1);
          if (v43)
            goto LABEL_73;
        }
        v44 = (char *)v42[8];
        if (v44)
          break;
        swift_release(v42);
        if (v37 == v36)
          goto LABEL_81;
      }
      v45 = v3;
      v46 = v42[4];
      v47 = v42[5];
      v48 = v42[6];
      v49 = v42[7];
      v50 = (uint64_t *)&v44[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView5Glyph9GlyphView_currentAnimators];
      swift_beginAccess(&v44[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView5Glyph9GlyphView_currentAnimators], &aBlock, 0, 0);
      v51 = *v50;
      if ((unint64_t)v51 >> 62)
      {
        if (v51 < 0)
          v3 = v51;
        else
          v3 = v51 & 0xFFFFFFFFFFFFFF8;
        v57 = v44;
        swift_bridgeObjectRetain();
        v52 = _CocoaArrayWrapper.endIndex.getter(v3);
        if (!v52)
          goto LABEL_50;
      }
      else
      {
        v52 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
        v53 = v44;
        swift_bridgeObjectRetain();
        if (!v52)
          goto LABEL_50;
      }
      if (v52 < 1)
        goto LABEL_74;
      for (j = 0; j != v52; ++j)
      {
        if ((v51 & 0xC000000000000001) != 0)
          v55 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v51);
        else
          v55 = *(id *)(v51 + 8 * j + 32);
        v56 = v55;
        objc_msgSend(v55, "stopAnimation:", 0);

      }
LABEL_50:
      swift_bridgeObjectRelease();
      sub_100270310();
      v38 = (double *)CGPoint.center.unsafeMutableAddressor();
      swift_beginAccess(v38, v116, 0, 0);
      UIView.setAnchorPoint(_:preserveFrame:)(1, *v38, v38[1]);
      sub_1000087DC(0, (unint64_t *)&qword_10049D970, UIView_ptr);
      sub_1000087DC(0, &qword_10049ADC0, UISpringTimingParameters_ptr);
      v39 = UISpringTimingParameters.init(dampingRatio:response:)(1.0, 1.5);
      v40 = (_QWORD *)swift_allocObject(&unk_10045DF30, 56, 7);
      v40[2] = v44;
      v40[3] = v46;
      v40[4] = v47;
      v40[5] = v48;
      v40[6] = v49;
      v41 = v44;
      static UIView.animate(withSpringTimingParameters:delay:options:animations:completion:)(v39, 0, sub_1002762D0, (uint64_t)v40, 0, 0, 0.0);

      objc_msgSend(v41, "sizeToFit", swift_release(v40).n128_f64[0]);
      swift_release(v42);

      v3 = v45;
    }
  }
LABEL_81:
  swift_bridgeObjectRelease();
  v4 = v109;
  v59 = *(void **)(v109 + 80);
  *(_QWORD *)(v109 + 80) = 0;
  v60 = *(_BYTE *)(v4 + 88);
  *(_BYTE *)(v4 + 88) = 2;
  sub_10026F954(v59, v60);
  v27 = v107;
  if (*(_QWORD *)(v107 + 16))
    goto LABEL_82;
LABEL_84:
  if (a2 < 0.0)
    return;
LABEL_85:
  if (*(_BYTE *)(v4 + 88) == 2 && !*(_QWORD *)(v4 + 80) && (*(_BYTE *)(v4 + 48) & 1) == 0)
  {
    v61 = *(double *)(v4 + 40);
    v62 = swift_bridgeObjectRetain();
    v63 = (uint64_t)sub_100274330(v62);
    swift_bridgeObjectRelease();
    v64 = *(_QWORD *)(v27 + 16);
    if (v64)
      v65 = *(double *)(v27 + 32 + 56 * v64 - 48) - *(double *)(v27 + 32);
    else
      v65 = 0.0;
    v66 = *(_QWORD *)&v114;
    if ((unint64_t)v63 >> 62)
    {
      if (v63 < 0)
        v105 = v63;
      else
        v105 = v63 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v67 = _CocoaArrayWrapper.endIndex.getter(v105);
      swift_bridgeObjectRelease();
      if (v67 < 1)
        goto LABEL_118;
    }
    else
    {
      v67 = *(_QWORD *)((v63 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v67 < 1)
        goto LABEL_118;
    }
    if (v65 > 0.0)
    {
      v68 = *(void **)(v4 + 80);
      *(_QWORD *)(v4 + 80) = 0;
      v69 = *(_BYTE *)(v4 + 88);
      *(_BYTE *)(v4 + 88) = 0;
      sub_10026F954(v68, v69);
      v70 = *(void **)(v4 + 128);
      if (v70)
      {
        v71 = v70;
        sub_100275AF0(v66, v61, v65);

      }
      v72 = type metadata accessor for TaskPriority(0);
      v73 = (uint64_t)v108;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(v108, 1, 1, v72);
      v74 = swift_allocObject(&unk_10045DEE0, 24, 7);
      swift_weakInit(v74 + 16, v4);
      v75 = swift_allocObject(&unk_10045DF08, 48, 7);
      *(_QWORD *)(v75 + 16) = 0;
      *(_QWORD *)(v75 + 24) = 0;
      *(_QWORD *)(v75 + 32) = v74;
      *(double *)(v75 + 40) = v65;
      v76 = sub_100283A94(v73, (uint64_t)&unk_10049AA00, v75);
      v77 = *(_QWORD *)(v4 + 136);
      *(_QWORD *)(v4 + 136) = v76;
      swift_release(v77);
      v78 = (double)v67;
      v79 = v65 / (double)v67 * 0.4;
      if (v79 > 0.4)
        v79 = 0.4;
      v115 = v79;
      v80 = *(double *)(v66 + 216) + v61 * (*(double *)(v66 + 224) - *(double *)(v66 + 216));
      if (v65 <= 3.0)
        v81 = v65;
      else
        v81 = 3.0;
      sub_1000087DC(0, &qword_10049ADC0, UISpringTimingParameters_ptr);
      v82 = UISpringTimingParameters.init(dampingRatio:response:)(1.0, v81);
      v84 = *(double *)(v4 + 112);
      v83 = *(double *)(v4 + 120);
      v85 = CGSize.scaled(_:)(v80, v84, v83);
      v87 = v86;
      if ((unint64_t)v63 >> 62)
      {
        if (v63 < 0)
          v89 = v63;
        else
          v89 = v63 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain();
        v88 = _CocoaArrayWrapper.endIndex.getter(v89);
        swift_bridgeObjectRelease();
        if (!v88)
          goto LABEL_117;
      }
      else
      {
        v88 = *(_QWORD *)((v63 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (!v88)
        {
LABEL_117:

          goto LABEL_118;
        }
      }
      if (v88 < 1)
      {
        __break(1u);
        return;
      }
      v90 = 0;
      v91 = v78 * 0.5;
      v92 = (v84 - v85) * 0.5;
      v93 = v83 - v87;
      v94 = *(double *)(*(_QWORD *)&v114 + 504);
      v113 = v92;
      v114 = v65 / v91;
      do
      {
        while (1)
        {
          if ((v63 & 0xC000000000000001) != 0)
          {
            v95 = specialized _ArrayBuffer._getElementSlowPath(_:)(v90, v63);
          }
          else
          {
            v95 = *(_QWORD *)(v63 + 8 * v90 + 32);
            swift_retain(v95);
          }
          ++v90;
          v96 = *(void **)(v95 + 64);
          if (v96)
          {
            v97 = *(double *)(v95 + 32);
            v98 = *(double *)(v95 + 40);
            v99 = (v97 + v113 + v80 * v97) * 0.5;
            v100 = v115 * (double)v90;
            v101 = v96;
            sub_1002707A8(v82, v99, (v98 + v93 + v80 * v98) * 0.25 - v94, v80, v100);

            v102 = *(void **)(v95 + 64);
            if (v102)
              break;
          }
          swift_release(v95);
          if (v88 == v90)
            goto LABEL_117;
        }
        v103 = v114 + v100;
        v104 = v102;
        sub_100270B64(v82, v97, v98 - v94, v103);
        swift_release(v95);

      }
      while (v88 != v90);
      goto LABEL_117;
    }
LABEL_118:
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1002753C4(void *a1, uint64_t a2)
{
  double *v2;
  double *v3;
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  double v10;
  double v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  objc_class *v27;
  id v28;
  id v29;
  NSString v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double *v37;
  double v38;
  double v39;
  double v40;
  double v41;
  objc_class *v42;
  char *v43;
  id v44;
  id v45;
  NSString v46;
  id v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  objc_super v53;
  objc_super v54;
  id v55[5];

  v3 = v2;
  v5 = objc_msgSend(objc_allocWithZone((Class)_s4WordC8WordViewCMa()), "initWithFrame:", v2[12], v2[13], v2[14], v2[15]);
  v6 = *(void **)(a2 + 344);
  UIView.Shadow.init(color:opacity:radius:offset:)((uint64_t)v6, (uint64_t)v55, 0.0, *(double *)(a2 + 352), 0.0, 0.0);
  v7 = v6;
  v8 = objc_msgSend(v5, "layer");
  v9 = objc_msgSend(v5, "traitCollection");
  objc_msgSend(v9, "displayScale");
  v11 = v10;

  objc_msgSend(v8, "setRasterizationScale:", v11);
  v12 = objc_msgSend(v5, "layer");
  objc_msgSend(v12, "setShouldRasterize:", 1);

  v13 = v5;
  sub_1000BC564(v55);
  UIView.shadow.setter((uint64_t)v55);

  v14 = (void *)*((_QWORD *)v3 + 16);
  *((_QWORD *)v3 + 16) = v13;
  v15 = v13;

  if (!*((_QWORD *)v3 + 16))
  {
    v16 = (void *)*((_QWORD *)v3 + 10);
    v3[10] = 0.0;
    v17 = *((_BYTE *)v3 + 88);
    *((_BYTE *)v3 + 88) = 2;
    sub_10026F954(v16, v17);
  }

  v18 = *((_QWORD *)v3 + 9);
  if (((_BYTE)v3[6] & 1) == 0)
  {
    v33 = swift_bridgeObjectRetain();
    v34 = (uint64_t)sub_100274330(v33);
    result = swift_bridgeObjectRelease();
    if ((unint64_t)v34 >> 62)
    {
      if (v34 < 0)
        v51 = v34;
      else
        v51 = v34 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v35 = _CocoaArrayWrapper.endIndex.getter(v51);
      result = swift_bridgeObjectRelease();
      if (!v35)
        goto LABEL_24;
    }
    else
    {
      v35 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v35)
        goto LABEL_24;
    }
    if (v35 >= 1)
    {
      v36 = 0;
      do
      {
        if ((v34 & 0xC000000000000001) != 0)
        {
          v37 = (double *)specialized _ArrayBuffer._getElementSlowPath(_:)(v36, v34);
        }
        else
        {
          v37 = *(double **)(v34 + 8 * v36 + 32);
          swift_retain(v37);
        }
        ++v36;
        v38 = v37[4];
        v39 = v37[5];
        v40 = v37[6];
        v41 = v37[7];
        v42 = (objc_class *)_s5GlyphC9GlyphViewCMa();
        v43 = (char *)objc_allocWithZone(v42);
        *(_QWORD *)&v43[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView5Glyph9GlyphView_currentAnimators] = _swiftEmptyArrayStorage;
        v54.receiver = v43;
        v54.super_class = v42;
        v44 = a1;
        swift_bridgeObjectRetain();
        v45 = objc_msgSendSuper2(&v54, "initWithFrame:", v38, v39, v40, v41);
        v46 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        objc_msgSend(v45, "setText:", v46);

        objc_msgSend(v45, "setFont:", v44);
        objc_msgSend(v45, "setTextAlignment:", 0);
        v47 = v45;
        objc_msgSend(v47, "sizeToFit");

        v48 = (void *)*((_QWORD *)v37 + 8);
        *((_QWORD *)v37 + 8) = v47;
        v49 = v47;

        objc_msgSend(v15, "addSubview:", v49);
        swift_release(v37);

      }
      while (v35 != v36);
      goto LABEL_24;
    }
    goto LABEL_31;
  }
  if ((unint64_t)v18 >> 62)
  {
    if (v18 < 0)
      v50 = *((_QWORD *)v3 + 9);
    else
      v50 = v18 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter(v50);
    v19 = result;
    if (result)
      goto LABEL_6;
LABEL_24:
    swift_bridgeObjectRelease();
    sub_100222190(v55);
    return (uint64_t)v15;
  }
  v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v19)
    goto LABEL_24;
LABEL_6:
  if (v19 >= 1)
  {
    v21 = 0;
    do
    {
      if ((v18 & 0xC000000000000001) != 0)
      {
        v22 = specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v18);
      }
      else
      {
        v22 = *(_QWORD *)(v18 + 8 * v21 + 32);
        swift_retain(v22);
      }
      ++v21;
      v23 = *(double *)(v22 + 112);
      v24 = *(double *)(v22 + 120);
      v25 = *(double *)(v22 + 136);
      v26 = *(double *)(v22 + 128) + 50.0;
      v27 = (objc_class *)_s8SyllableC12SyllableViewCMa();
      v53.receiver = objc_allocWithZone(v27);
      v53.super_class = v27;
      swift_bridgeObjectRetain();
      v28 = a1;
      v29 = objc_msgSendSuper2(&v53, "initWithFrame:", v23, v24, v26, v25);
      v30 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      objc_msgSend(v29, "setText:", v30);

      objc_msgSend(v29, "setFont:", v28);
      objc_msgSend(v29, "setTextAlignment:", 0);

      v31 = *(void **)(v22 + 144);
      *(_QWORD *)(v22 + 144) = v29;
      v32 = v29;

      objc_msgSend(v15, "addSubview:", v32);
      swift_release(v22);

    }
    while (v19 != v21);
    goto LABEL_24;
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

void sub_1002758E0()
{
  void *v0;
  void *v1;
  id v2;
  NSString v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  Class isa;
  id v10;
  Class v11;
  id v12;
  id v13;
  double v14;
  id v15;

  v1 = v0;
  sub_1000087DC(0, &qword_10049ADC0, UISpringTimingParameters_ptr);
  v2 = UISpringTimingParameters.init(dampingRatio:response:)(1.0, 1.5);
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend((id)objc_opt_self(CASpringAnimation), "animationWithKeyPath:", v3);

  v5 = v4;
  objc_msgSend(v2, "settlingDuration");
  objc_msgSend(v5, "setDuration:");

  v6 = v2;
  CASpringAnimation.springParameters.setter(v6);
  v7 = v5;
  v8 = objc_msgSend(v1, "layer");
  objc_msgSend(v8, "shadowOpacity");

  isa = Float._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v7, "setFromValue:", isa);

  v10 = v7;
  v11 = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v10, "setToValue:", v11);

  v12 = objc_msgSend(v1, "layer");
  v13 = objc_msgSend(v10, "keyPath");
  objc_msgSend(v12, "addAnimation:forKey:", v10, v13);

  v15 = objc_msgSend(v1, "layer");
  LODWORD(v14) = 0;
  objc_msgSend(v15, "setShadowOpacity:", v14);

}

void sub_100275AF0(uint64_t a1, double a2, double a3)
{
  void *v3;
  void *v4;
  float v5;
  double v6;
  id v7;
  NSString v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  Class isa;
  Class v15;
  id v16;
  id v17;
  double v18;
  id v19;

  v4 = v3;
  v5 = *(double *)(a1 + 360) + (*(double *)(a1 + 368) - *(double *)(a1 + 360)) * a2;
  if (a3 <= 3.0)
    v6 = a3;
  else
    v6 = 3.0;
  sub_1000087DC(0, &qword_10049ADC0, UISpringTimingParameters_ptr);
  v7 = UISpringTimingParameters.init(dampingRatio:response:)(1.0, v6);
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend((id)objc_opt_self(CASpringAnimation), "animationWithKeyPath:", v8);

  v10 = v9;
  objc_msgSend(v7, "settlingDuration");
  objc_msgSend(v10, "setDuration:");

  v11 = v7;
  CASpringAnimation.springParameters.setter(v11);
  v12 = v10;
  v13 = objc_msgSend(v4, "layer");
  objc_msgSend(v13, "shadowOpacity");

  isa = Float._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v12, "setFromValue:", isa);

  v15 = Float._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v12, "setToValue:", v15);

  v16 = objc_msgSend(v4, "layer");
  v17 = objc_msgSend(v12, "keyPath");
  objc_msgSend(v16, "addAnimation:forKey:", v12, v17);

  v19 = objc_msgSend(v4, "layer");
  *(float *)&v18 = v5;
  objc_msgSend(v19, "setShadowOpacity:", v18);

}

uint64_t sub_100275D14(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(double *)(v5 + 96) = a1;
  *(_QWORD *)(v5 + 88) = a5;
  return swift_task_switch(sub_100275D30, 0, 0);
}

uint64_t sub_100275D30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __n128 v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unsigned __int8 v17;
  uint64_t (*v18)(double);

  v1 = *(_QWORD *)(v0 + 88) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    v4 = *(void **)(Strong + 128);
    *(_QWORD *)(v0 + 104) = v4;
    if (v4)
    {
      v4;
      swift_release(v3);
      v18 = (uint64_t (*)(double))((char *)&dword_10049AA08 + dword_10049AA08);
      v5 = (_QWORD *)swift_task_alloc(unk_10049AA0C);
      *(_QWORD *)(v0 + 112) = v5;
      *v5 = v0;
      v5[1] = sub_100275E8C;
      return v18(*(double *)(v0 + 96));
    }
    swift_release(Strong);
  }
  v7 = *(_QWORD *)(v0 + 88) + 16;
  swift_beginAccess(v7, v0 + 40, 0, 0);
  v8 = swift_weakLoadStrong(v7);
  if (!v8
    || ((v9 = *(_QWORD *)(v8 + 80), v10 = *(unsigned __int8 *)(v8 + 88), v11 = swift_release(v8), v10 == 2)
      ? (v12 = v9 == 0)
      : (v12 = 0),
        !v12))
  {
    v13 = *(_QWORD *)(v0 + 88) + 16;
    swift_beginAccess(v13, v0 + 64, 0, 0);
    v14 = swift_weakLoadStrong(v13);
    if (v14)
    {
      v15 = v14;
      v16 = *(void **)(v14 + 80);
      *(_QWORD *)(v15 + 80) = 1;
      v17 = *(_BYTE *)(v15 + 88);
      *(_BYTE *)(v15 + 88) = 2;
      sub_10026F954(v16, v17);
      v11 = swift_release(v15);
    }
  }
  return (*(uint64_t (**)(__n128))(v0 + 8))(v11);
}

uint64_t sub_100275E8C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 104);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 112));

  return swift_task_switch(sub_100275EE4, 0, 0);
}

uint64_t sub_100275EE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  int v4;
  __n128 v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unsigned __int8 v11;

  v1 = *(_QWORD *)(v0 + 88) + 16;
  swift_beginAccess(v1, v0 + 40, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (!Strong
    || ((v3 = *(_QWORD *)(Strong + 80), v4 = *(unsigned __int8 *)(Strong + 88), v5 = swift_release(Strong), v4 == 2)
      ? (v6 = v3 == 0)
      : (v6 = 0),
        !v6))
  {
    v7 = *(_QWORD *)(v0 + 88) + 16;
    swift_beginAccess(v7, v0 + 64, 0, 0);
    v8 = swift_weakLoadStrong(v7);
    if (v8)
    {
      v9 = v8;
      v10 = *(void **)(v8 + 80);
      *(_QWORD *)(v9 + 80) = 1;
      v11 = *(_BYTE *)(v9 + 88);
      *(_BYTE *)(v9 + 88) = 2;
      sub_10026F954(v10, v11);
      v5 = swift_release(v9);
    }
  }
  return (*(uint64_t (**)(__n128))(v0 + 8))(v5);
}

uint64_t sub_10027604C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10026F954(*(id *)(v0 + 80), *(_BYTE *)(v0 + 88));

  swift_release(*(_QWORD *)(v0 + 136));
  return swift_deallocClassInstance(v0, 144, 7);
}

uint64_t _s4WordCMa()
{
  return objc_opt_self(_TtCC11MusicCoreUI20SyncedLyricsLineView4Word);
}

uint64_t _s4WordC8WordViewCMa()
{
  return objc_opt_self(_TtCCC11MusicCoreUI20SyncedLyricsLineView4Word8WordView);
}

_UNKNOWN **sub_1002760EC()
{
  return &off_10049A850;
}

uint64_t sub_1002760F8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 569, 7);
}

_QWORD *sub_100276194()
{
  uint64_t v0;

  return sub_100273EF0(*(_QWORD **)(v0 + 16), *(_BYTE *)(v0 + 24), v0 + 32);
}

uint64_t sub_1002761A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_1002761B4(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_1002761BC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

void sub_1002761E0(uint64_t a1)
{
  uint64_t v1;

  sub_100273F6C(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

uint64_t sub_1002761EC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100276210()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10027623C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = (_QWORD *)swift_task_alloc(dword_10049A9FC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10000EA88;
  v4[12] = v3;
  v4[11] = v2;
  return swift_task_switch(sub_100275D30, 0, 0);
}

uint64_t sub_1002762AC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1002762D4(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v2 + 24) = v1;
  *(double *)(v2 + 16) = a1;
  v3 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v2 + 32) = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  *(_QWORD *)(v2 + 40) = v4;
  *(_QWORD *)(v2 + 48) = v5;
  return swift_task_switch(sub_100276344, v4, v5);
}

uint64_t sub_100276344()
{
  uint64_t v0;
  _QWORD *v1;
  void *v3;
  id v4;
  NSString v5;
  id v6;
  id v7;
  id v8;
  id v9;
  Class isa;
  id v11;
  Class v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  if (*(double *)(v0 + 16) <= 0.0)
  {
    v3 = *(void **)(v0 + 24);
    v4 = objc_msgSend(objc_allocWithZone((Class)UISpringTimingParameters), "initWithMass:stiffness:damping:initialVelocity:", 1.0, 14.0, 7.0, 0.0, 0.0);
    *(_QWORD *)(v0 + 72) = v4;
    v5 = String._bridgeToObjectiveC()();
    v6 = objc_msgSend((id)objc_opt_self(CASpringAnimation), "animationWithKeyPath:", v5);
    *(_QWORD *)(v0 + 80) = v6;

    v7 = v6;
    objc_msgSend(v4, "settlingDuration");
    objc_msgSend(v7, "setDuration:");

    CASpringAnimation.springParameters.setter(v4);
    v8 = v7;
    v9 = objc_msgSend(v3, "layer");
    objc_msgSend(v9, "shadowOpacity");

    isa = Float._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v8, "setFromValue:", isa);

    v11 = v8;
    v12 = Int._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v11, "setToValue:", v12);

    *(_QWORD *)(v0 + 88) = objc_msgSend(v3, "layer");
    v13 = objc_msgSend(v11, "keyPath");
    if (v13)
    {
      v14 = v13;
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v17 = v16;

    }
    else
    {
      v15 = 0;
      v17 = 0;
    }
    *(_QWORD *)(v0 + 96) = v17;
    v18 = (_QWORD *)swift_task_alloc(dword_1004976EC);
    *(_QWORD *)(v0 + 104) = v18;
    *v18 = v0;
    v18[1] = sub_100276828;
    return CALayer.addAsyncAnimation(_:forKey:)((uint64_t)v11, v15, v17);
  }
  else
  {
    v1 = (_QWORD *)swift_task_alloc(dword_10049769C);
    *(_QWORD *)(v0 + 56) = v1;
    *v1 = v0;
    v1[1] = sub_1002765AC;
    return static Task<>.sleep(for:)(*(double *)(v0 + 16));
  }
}

uint64_t sub_1002765AC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 56);
  *(_QWORD *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1002768C8;
  else
    v4 = sub_10027660C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t sub_10027660C()
{
  _QWORD *v0;
  void *v1;
  id v2;
  NSString v3;
  id v4;
  id v5;
  id v6;
  id v7;
  Class isa;
  id v9;
  Class v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v1 = (void *)v0[3];
  v2 = objc_msgSend(objc_allocWithZone((Class)UISpringTimingParameters), "initWithMass:stiffness:damping:initialVelocity:", 1.0, 14.0, 7.0, 0.0, 0.0);
  v0[9] = v2;
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend((id)objc_opt_self(CASpringAnimation), "animationWithKeyPath:", v3);
  v0[10] = v4;

  v5 = v4;
  objc_msgSend(v2, "settlingDuration");
  objc_msgSend(v5, "setDuration:");

  CASpringAnimation.springParameters.setter(v2);
  v6 = v5;
  v7 = objc_msgSend(v1, "layer");
  objc_msgSend(v7, "shadowOpacity");

  isa = Float._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v6, "setFromValue:", isa);

  v9 = v6;
  v10 = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v9, "setToValue:", v10);

  v0[11] = objc_msgSend(v1, "layer");
  v11 = objc_msgSend(v9, "keyPath");
  if (v11)
  {
    v12 = v11;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v15 = v14;

  }
  else
  {
    v13 = 0;
    v15 = 0;
  }
  v0[12] = v15;
  v16 = (_QWORD *)swift_task_alloc(dword_1004976EC);
  v0[13] = v16;
  *v16 = v0;
  v16[1] = sub_100276828;
  return CALayer.addAsyncAnimation(_:forKey:)((uint64_t)v9, v13, v15);
}

uint64_t sub_100276828()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;

  v1 = *v0;
  v2 = *(void **)(*v0 + 88);
  swift_task_dealloc(*(_QWORD *)(*v0 + 104));

  swift_bridgeObjectRelease();
  return swift_task_switch(sub_10027688C, *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_10027688C()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 72);
  v2 = *(void **)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 32));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002768C8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 32));
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_100276904()
{
  uint64_t v0;

  return sub_100270730(*(void **)(v0 + 16), *(CGFloat *)(v0 + 24), *(CGFloat *)(v0 + 32), *(CGFloat *)(v0 + 40), *(CGFloat *)(v0 + 48));
}

void sub_100276920()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  const void *v3;
  char *v4;
  char *v5;
  char *v6;
  _BYTE v7[544];
  _BYTE v8[544];
  _BYTE __dst[544];
  _BYTE v10[544];
  _BYTE v11[544];
  _BYTE v12[544];

  v1 = *(char **)(v0 + OBJC_IVAR___MusicSBS_TextContentView_textView);
  if (v1)
  {
    v2 = v0;
    v3 = (const void *)(v0 + OBJC_IVAR___MusicSBS_TextContentView_specs);
    memcpy(__dst, (const void *)(v0 + OBJC_IVAR___MusicSBS_TextContentView_specs), 0x219uLL);
    memcpy(v12, &v1[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs], 0x219uLL);
    memcpy(v10, &v1[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs], 0x219uLL);
    memmove(&v1[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs], (const void *)(v0 + OBJC_IVAR___MusicSBS_TextContentView_specs), 0x219uLL);
    sub_10026EC3C((uint64_t)__dst);
    sub_10026EC3C((uint64_t)__dst);
    v4 = v1;
    sub_10026EC3C((uint64_t)v12);
    sub_10026ED0C((uint64_t)v10);
    sub_10026C350((uint64_t)v12);
    sub_10026ED0C((uint64_t)__dst);
    sub_10026ED0C((uint64_t)v12);

    v5 = *(char **)(v2 + OBJC_IVAR___MusicSBS_TextContentView_backgroundTextView);
    if (v5)
    {
      memcpy(v7, v3, 0x219uLL);
      memcpy(v11, &v5[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs], 0x219uLL);
      memcpy(v8, &v5[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs], 0x219uLL);
      memmove(&v5[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs], v3, 0x219uLL);
      sub_10026EC3C((uint64_t)v7);
      sub_10026EC3C((uint64_t)v7);
      v6 = v5;
      sub_10026EC3C((uint64_t)v11);
      sub_10026ED0C((uint64_t)v8);
      sub_10026C350((uint64_t)v11);
      sub_10026ED0C((uint64_t)v7);
      sub_10026ED0C((uint64_t)v11);

    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100276AA4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = OBJC_IVAR___MusicSBS_TextContentView_isScrolling;
  v3 = *(unsigned __int8 *)(v1 + OBJC_IVAR___MusicSBS_TextContentView_isScrolling);
  *(_BYTE *)(v1 + OBJC_IVAR___MusicSBS_TextContentView_isScrolling) = result;
  if (v3 != (result & 1))
  {
    v4 = *(_QWORD *)(v1 + OBJC_IVAR___MusicSBS_TextContentView_textView);
    if (v4)
    {
      *(_BYTE *)(v4 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_isScrolling) = result & 1;
      v5 = *(_QWORD *)(v1 + OBJC_IVAR___MusicSBS_TextContentView_backgroundTextView);
      if (v5)
        *(_BYTE *)(v5 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_isScrolling) = *(_BYTE *)(v1 + v2);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

void sub_100276B04(char a1, char a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  void *v5;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  uint64_t v14;
  UISpringTimingParameters v15;
  Class isa;
  void *v17;
  uint64_t v18;
  _QWORD v19[5];
  uint64_t v20;

  v3 = a1 & 1;
  if (*(_BYTE *)(v2 + OBJC_IVAR___MusicSBS_TextContentView_isSelected) != (a1 & 1))
  {
    v4 = v2;
    *(_BYTE *)(v2 + OBJC_IVAR___MusicSBS_TextContentView_isSelected) = v3;
    v5 = *(void **)(v2 + OBJC_IVAR___MusicSBS_TextContentView_textView);
    if (v5)
    {
      v8 = v5;
      sub_10026C460(a1 & 1, a2 & 1);

      v9 = *(void **)(v4 + OBJC_IVAR___MusicSBS_TextContentView_backgroundTextView);
      if (v9)
      {
        v10 = v9;
        sub_10026C460(a1 & 1, a2 & 1);

      }
      v11 = swift_allocObject(&unk_10045E000, 24, 7);
      swift_unknownObjectWeakInit(v11 + 16);
      v12 = swift_allocObject(&unk_10045E028, 25, 7);
      *(_QWORD *)(v12 + 16) = v11;
      *(_BYTE *)(v12 + 24) = v3;
      if ((a2 & 1) != 0)
      {
        if ((a1 & 1) != 0)
        {
          v13 = (objc_class *)objc_msgSend(objc_allocWithZone((Class)UISpringTimingParameters), "initWithMass:stiffness:damping:initialVelocity:", 1.0, 30.0, 9.0, 0.0, 0.0);
        }
        else
        {
          sub_1000087DC(0, &qword_10049ADC0, UISpringTimingParameters_ptr);
          v13 = (objc_class *)UISpringTimingParameters.init(dampingRatio:response:)(1.0, 0.2);
        }
        v15.super.isa = v13;
        sub_1000087DC(0, (unint64_t *)&qword_10049B080, UIViewPropertyAnimator_ptr);
        isa = UIViewPropertyAnimator.init(springTimingParameters:)(v15).super.isa;
        v19[4] = sub_100278098;
        v20 = v12;
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 1107296256;
        v19[2] = sub_1000BED80;
        v19[3] = &unk_10045E040;
        v17 = _Block_copy(v19);
        v18 = v20;
        swift_retain(v12);
        -[objc_class addAnimations:](isa, "addAnimations:", v17, swift_release(v18).n128_f64[0]);
        _Block_release(v17);
        -[objc_class startAnimation](isa, "startAnimation");

        swift_release(v12);
      }
      else
      {
        swift_retain(v11);
        sub_100276D60(v14, a1 & 1);
        swift_release(v12);
        swift_release(v11);
      }
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_100276D60(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t Strong;
  char *v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  double v12;
  id v13;
  _OWORD v14[3];
  _BYTE v15[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v15, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (char *)Strong;
    v6 = OBJC_IVAR___MusicSBS_TextContentView_backgroundTextView;
    v7 = *(void **)(Strong + OBJC_IVAR___MusicSBS_TextContentView_backgroundTextView);
    if (v7)
    {
      if ((a2 & 1) != 0)
      {
        v8 = xmmword_100384BD0;
        v9 = xmmword_1003952A0;
        v10 = 0uLL;
      }
      else
      {
        v9 = *(_OWORD *)&v5[OBJC_IVAR___MusicSBS_TextContentView_specs + 96];
        v8 = *(_OWORD *)&v5[OBJC_IVAR___MusicSBS_TextContentView_specs + 112];
        v10 = *(_OWORD *)&v5[OBJC_IVAR___MusicSBS_TextContentView_specs + 128];
      }
      v14[0] = v9;
      v14[1] = v8;
      v14[2] = v10;
      objc_msgSend(v7, "setTransform:", v14);
      v11 = *(void **)&v5[v6];
      if (v11)
      {
        if ((a2 & 1) != 0)
          v12 = 1.0;
        else
          v12 = 0.0;
        v13 = v11;
        objc_msgSend(v13, "setAlpha:", v12);

      }
    }

  }
}

id sub_100276E4C(id result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  _BYTE *v10;
  void *v11;
  _BYTE *v12;
  uint64_t v18;
  char v19;
  char v20;
  id v21;
  uint64_t v22;
  void *v23;
  id v24;
  _OWORD *v25;
  id v26;
  id v27;
  double v28;
  double v29;
  __int128 v30;
  void *v31;
  _OWORD v33[3];
  _BYTE __dst[552];

  v11 = *(void **)&v10[OBJC_IVAR___MusicSBS_TextContentView_textView];
  if (v11)
  {
    v12 = v10;
    v18 = (uint64_t)result;
    v19 = a10 & 1;
    v20 = a5 & 1;
    v21 = v11;
    sub_10026D490(v18, a2, a3, a4, v20, a6);

    *(_QWORD *)&v12[OBJC_IVAR___MusicSBS_TextContentView_alignment] = a4;
    v12[OBJC_IVAR___MusicSBS_TextContentView_direction] = v20;
    *(_QWORD *)&v12[OBJC_IVAR___MusicSBS_TextContentView_capabilities] = a6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v12[OBJC_IVAR___MusicSBS_TextContentView_backgroundDirection] = a10 & 1;
    v22 = OBJC_IVAR___MusicSBS_TextContentView_backgroundTextView;
    v23 = *(void **)&v12[OBJC_IVAR___MusicSBS_TextContentView_backgroundTextView];
    if (v23)
    {
      if (a8)
      {
        v24 = v23;
        sub_10026D490(a7, a8, a9, a4, v19, a6);

LABEL_11:
        objc_msgSend(v12, "setNeedsLayout", a9);
        return objc_msgSend(v12, "layoutIfNeeded");
      }
      objc_msgSend(v23, "removeFromSuperview");
      v31 = *(void **)&v12[v22];
    }
    else
    {
      if (a8)
      {
        v25 = &v12[OBJC_IVAR___MusicSBS_TextContentView_specs];
        memcpy(__dst, &v12[OBJC_IVAR___MusicSBS_TextContentView_specs], 0x219uLL);
        v26 = objc_allocWithZone((Class)_s8TextViewCMa());
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_10026EC3C((uint64_t)__dst);
        v27 = sub_10026D5F0(a7, a8, a9, __dst, 1, a4, v19, a6);
        v28 = sub_100277FE4(a4);
        UIView.setAnchorPoint(_:preserveFrame:)(1, v28, v29);
        objc_msgSend(v27, "setAlpha:", 0.0);
        v30 = v25[7];
        v33[0] = v25[6];
        v33[1] = v30;
        v33[2] = v25[8];
        objc_msgSend(v27, "setTransform:", v33);
        objc_msgSend(v12, "addSubview:", v27);
        v31 = *(void **)&v12[v22];
        *(_QWORD *)&v12[v22] = v27;
LABEL_10:

        goto LABEL_11;
      }
      v31 = 0;
    }
    *(_QWORD *)&v12[v22] = 0;
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

char *sub_1002770A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _OWORD *a11)
{
  _BYTE *v11;
  _BYTE *v12;
  uint64_t *v16;
  char v17;
  uint64_t v18;
  _BYTE *v19;
  objc_class *v20;
  id v21;
  id v22;
  void *v23;
  char v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  double v29;
  double v30;
  void *v31;
  void *v32;
  __int128 v33;
  objc_class *v34;
  char *result;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  void *v40;
  void *v41;
  id v42;
  char *v43;
  uint64_t v44;
  uint64_t v49;
  _OWORD v50[3];
  objc_super v51;

  v12 = v11;
  v11[OBJC_IVAR___MusicSBS_TextContentView_isScrolling] = 1;
  v16 = (uint64_t *)&v11[OBJC_IVAR___MusicSBS_TextContentView_text];
  *v16 = 0;
  v16[1] = 0;
  *(_QWORD *)&v11[OBJC_IVAR___MusicSBS_TextContentView_attributedText] = 0;
  v11[OBJC_IVAR___MusicSBS_TextContentView_isSelected] = 0;
  *(_QWORD *)&v11[OBJC_IVAR___MusicSBS_TextContentView_progress] = 0;
  v49 = OBJC_IVAR___MusicSBS_TextContentView_backgroundDirection;
  v11[OBJC_IVAR___MusicSBS_TextContentView_backgroundDirection] = 2;
  v17 = a5 & 1;
  v18 = OBJC_IVAR___MusicSBS_TextContentView_textView;
  *(_QWORD *)&v11[OBJC_IVAR___MusicSBS_TextContentView_textView] = 0;
  v44 = OBJC_IVAR___MusicSBS_TextContentView_backgroundTextView;
  *(_QWORD *)&v11[OBJC_IVAR___MusicSBS_TextContentView_backgroundTextView] = 0;
  *v16 = a1;
  v16[1] = a2;
  v19 = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  memcpy(&v19[OBJC_IVAR___MusicSBS_TextContentView_specs], a11, 0x219uLL);
  *(_QWORD *)&v19[OBJC_IVAR___MusicSBS_TextContentView_alignment] = a4;
  v19[OBJC_IVAR___MusicSBS_TextContentView_direction] = v17;
  *(_QWORD *)&v19[OBJC_IVAR___MusicSBS_TextContentView_capabilities] = a6;
  v20 = (objc_class *)_s8TextViewCMa();
  v21 = objc_allocWithZone(v20);
  swift_bridgeObjectRetain();
  sub_10026EC3C((uint64_t)a11);
  swift_bridgeObjectRetain();
  sub_10026EC3C((uint64_t)a11);
  v22 = sub_10026D5F0(a1, a2, a3, a11, 0, a4, v17, a6);
  v23 = *(void **)&v11[v18];
  *(_QWORD *)&v11[v18] = v22;

  if (a8)
  {
    v24 = a10;
    objc_allocWithZone(v20);
    sub_10026EC3C((uint64_t)a11);
    v25 = sub_10026D5F0(a7, a8, a9, a11, 1, a4, a10 & 1, a6);
    v26 = *(void **)&v11[v44];
    *(_QWORD *)&v11[v44] = v25;

    v27 = *(void **)&v11[v44];
    if (v27)
    {
      v28 = v27;
      v29 = sub_100277FE4(a4);
      UIView.setAnchorPoint(_:preserveFrame:)(1, v29, v30);

      v31 = *(void **)&v12[v44];
      if (v31)
      {
        objc_msgSend(v31, "setAlpha:", 0.0);
        v32 = *(void **)&v12[v44];
        if (v32)
        {
          v33 = a11[7];
          v50[0] = a11[6];
          v50[1] = v33;
          v50[2] = a11[8];
          objc_msgSend(v32, "setTransform:", v50);
        }
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v24 = a10;
  }
  v12[v49] = v24;

  v34 = (objc_class *)_s19SBS_TextContentViewCMa();
  v51.receiver = v19;
  v51.super_class = v34;
  result = (char *)objc_msgSendSuper2(&v51, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v36 = OBJC_IVAR___MusicSBS_TextContentView_textView;
  v37 = *(_QWORD *)&result[OBJC_IVAR___MusicSBS_TextContentView_textView];
  if (!v37)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v38 = result;
  v39 = result;
  result = (char *)objc_msgSend(v39, "addSubview:", v37);
  v40 = *(void **)&v39[OBJC_IVAR___MusicSBS_TextContentView_backgroundTextView];
  if (!v40)
  {
    sub_10026ED0C((uint64_t)a11);
    goto LABEL_13;
  }
  v41 = *(void **)&v38[v36];
  if (!v41)
    goto LABEL_15;
  v42 = v40;
  objc_msgSend(v41, "frame");
  result = *(char **)&v38[v36];
  if (result)
  {
    objc_msgSend(result, "frame");
    objc_msgSend(v42, "frame");
    objc_msgSend(v42, "setFrame:");
    v43 = v39;
    objc_msgSend(v43, "addSubview:", v42);
    sub_10026ED0C((uint64_t)a11);

LABEL_13:
    return v39;
  }
LABEL_16:
  __break(1u);
  return result;
}

void sub_100277460(char **a1@<X8>)
{
  char *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  id v13;
  char *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  char *v20;
  id v21;
  __n128 v22;
  char isEscapingClosureAtFileLocation;
  objc_class *v24;
  char v26;
  uint64_t v27;
  _QWORD aBlock[5];
  uint64_t v29;
  _OWORD __dst[34];

  v2 = *(_QWORD *)&v1[OBJC_IVAR___MusicSBS_TextContentView_textView];
  if (v2)
  {
    v3 = v1;
    v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_text);
    v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_text + 8);
    v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_words);
    v7 = *(_QWORD *)&v1[OBJC_IVAR___MusicSBS_TextContentView_capabilities];
    v8 = *(_QWORD *)&v1[OBJC_IVAR___MusicSBS_TextContentView_backgroundTextView];
    v27 = *(_QWORD *)&v1[OBJC_IVAR___MusicSBS_TextContentView_alignment];
    v26 = v1[OBJC_IVAR___MusicSBS_TextContentView_direction];
    if (v8)
    {
      v10 = *(_QWORD *)(v8 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_text);
      v9 = *(_QWORD *)(v8 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_text + 8);
      v11 = *(_QWORD **)(v8 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_words);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v10 = 0;
      v9 = 0;
      v11 = _swiftEmptyArrayStorage;
    }
    v12 = v1[OBJC_IVAR___MusicSBS_TextContentView_backgroundDirection];
    memcpy(__dst, &v1[OBJC_IVAR___MusicSBS_TextContentView_specs], 0x219uLL);
    v24 = (objc_class *)_s19SBS_TextContentViewCMa();
    v13 = objc_allocWithZone(v24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10026EC3C((uint64_t)__dst);
    v14 = sub_1002770A0(v4, v5, v6, v27, v26, v7, v10, v9, (uint64_t)v11, v12, __dst);
    v15 = (void *)objc_opt_self(UIView);
    v16 = swift_allocObject(&unk_10045E078, 32, 7);
    *(_QWORD *)(v16 + 16) = v14;
    *(_QWORD *)(v16 + 24) = v3;
    v17 = swift_allocObject(&unk_10045E0A0, 32, 7);
    *(_QWORD *)(v17 + 16) = sub_1002780E8;
    *(_QWORD *)(v17 + 24) = v16;
    aBlock[4] = sub_1000B0290;
    v29 = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100009BD0;
    aBlock[3] = &unk_10045E0B8;
    v18 = _Block_copy(aBlock);
    v19 = v29;
    v20 = v14;
    v21 = v3;
    swift_retain(v17);
    objc_msgSend(v15, "performWithoutAnimation:", v18, swift_release(v19).n128_f64[0]);
    _Block_release(v18);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v17, "", 139, 222, 44, 1, v22);
    swift_release(v17);
    if ((isEscapingClosureAtFileLocation & 1) == 0)
    {
      a1[3] = (char *)v24;
      swift_release(v16);
      *a1 = v20;
      return;
    }
    __break(1u);
  }
  __break(1u);
}

void sub_1002776F0(char *a1, char *a2)
{
  double v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  objc_msgSend(a2, "bounds");
  objc_msgSend(a1, "setFrame:");
  objc_msgSend(a1, "layoutIfNeeded");
  sub_100276B04(a2[OBJC_IVAR___MusicSBS_TextContentView_isSelected], 0);
  v4 = *(double *)&a2[OBJC_IVAR___MusicSBS_TextContentView_progress];
  if (v4 != *(double *)&a1[OBJC_IVAR___MusicSBS_TextContentView_progress])
  {
    *(double *)&a1[OBJC_IVAR___MusicSBS_TextContentView_progress] = v4;
    v5 = *(void **)&a1[OBJC_IVAR___MusicSBS_TextContentView_textView];
    if (v5)
    {
      v6 = v5;
      sub_10026CF5C(0, v4);

      v7 = *(void **)&a1[OBJC_IVAR___MusicSBS_TextContentView_backgroundTextView];
      if (v7)
      {
        v8 = v7;
        sub_10026CF5C(0, v4);

      }
    }
    else
    {
      __break(1u);
    }
  }
}

id sub_10027785C(char a1, double a2, double a3)
{
  uint64_t v3;
  id result;

  result = *(id *)(v3 + OBJC_IVAR___MusicSBS_TextContentView_textView);
  if (result)
  {
    result = objc_msgSend(result, "sizeThatFits:");
    if ((a1 & 1) != 0)
    {
      result = *(id *)(v3 + OBJC_IVAR___MusicSBS_TextContentView_backgroundTextView);
      if (result)
        return objc_msgSend(result, "sizeThatFits:", a2, a3);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100277900(double a1, double a2)
{
  uint64_t v2;
  id result;
  int v6;

  result = *(id *)(v2 + OBJC_IVAR___MusicSBS_TextContentView_textView);
  if (result)
  {
    v6 = *(unsigned __int8 *)(v2 + OBJC_IVAR___MusicSBS_TextContentView_isSelected);
    result = objc_msgSend(result, "sizeThatFits:");
    if (v6 == 1)
    {
      result = *(id *)(v2 + OBJC_IVAR___MusicSBS_TextContentView_backgroundTextView);
      if (result)
        return objc_msgSend(result, "sizeThatFits:", a1, a2);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100277A00()
{
  char *v0;
  char *v1;
  uint64_t v2;
  void *v3;
  id v4;
  double v5;
  double v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  double v11;
  double v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  void *v19;
  id v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  double v28;
  double v29;
  void *v30;
  id v31;
  double v32;
  double v33;
  CGFloat v34;
  double v35;
  CGFloat v36;
  CGFloat v37;
  void *v38;
  uint64_t v39;
  void *v40;
  id v41;
  double v42;
  void *v43;
  double v44;
  double v45;
  double v46;
  void *v47;
  id v48;
  double v49;
  void *v50;
  double v51;
  void *v52;
  id v53;
  void *v54;
  CGFloat v55;
  CGFloat v56;
  CGFloat v57;
  CGFloat v58;
  void *v59;
  id v60;
  double Width;
  void *v62;
  double v63;
  double v64;
  double v65;
  void *v66;
  double v67;
  void *v68;
  double v69;
  double v70;
  objc_super v71;
  CGRect v72;
  CGRect v73;
  CGRect v74;
  CGRect v75;

  v1 = v0;
  v71.receiver = v0;
  v71.super_class = (Class)_s19SBS_TextContentViewCMa();
  objc_msgSendSuper2(&v71, "layoutSubviews");
  v2 = OBJC_IVAR___MusicSBS_TextContentView_textView;
  v3 = *(void **)&v0[OBJC_IVAR___MusicSBS_TextContentView_textView];
  if (!v3)
  {
    __break(1u);
    goto LABEL_34;
  }
  v4 = v3;
  objc_msgSend(v1, "bounds");
  objc_msgSend(v4, "sizeThatFits:", v5, v6);
  objc_msgSend(v4, "frame");
  objc_msgSend(v4, "setFrame:");

  v7 = *(void **)&v1[v2];
  if (!v7)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  objc_msgSend(v7, "layoutSubviews");
  v8 = OBJC_IVAR___MusicSBS_TextContentView_backgroundTextView;
  v9 = *(void **)&v1[OBJC_IVAR___MusicSBS_TextContentView_backgroundTextView];
  if (v9)
  {
    v10 = v9;
    objc_msgSend(v1, "bounds");
    objc_msgSend(v10, "sizeThatFits:", v11, v12);
    v14 = v13;
    v16 = v15;
    v17 = UIView.untransformedFrame.getter();
    UIView.untransformedFrame.setter(v17, v18, v14, v16);

    v19 = *(void **)&v1[v8];
    if (v19)
    {
      v20 = v19;
      UIView.untransformedFrame.getter();
      UIView.untransformedFrame.setter(0.0, v21, v22, v23);

      v24 = *(void **)&v1[v8];
      if (v24)
      {
        v25 = *(void **)&v1[v2];
        if (v25)
        {
          v26 = v24;
          v27 = v25;
          UIView.untransformedFrame.getter();
          v29 = v28;

          v30 = *(void **)&v1[v2];
          if (v30)
          {
            v31 = v30;
            UIView.untransformedFrame.getter();
            v33 = v32;

            v34 = v29 + v33 + *(double *)&v1[OBJC_IVAR___MusicSBS_TextContentView_specs + 88];
            v35 = UIView.untransformedFrame.getter();
            UIView.untransformedFrame.setter(v35, v34, v36, v37);

            v38 = *(void **)&v1[v8];
            goto LABEL_10;
          }
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
          goto LABEL_38;
        }
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
    }
  }
  v38 = 0;
LABEL_10:
  objc_msgSend(v38, "layoutSubviews");
  v39 = *(_QWORD *)&v1[OBJC_IVAR___MusicSBS_TextContentView_alignment];
  if (!v39)
  {
    v52 = *(void **)&v1[v2];
    if (v52)
    {
      v53 = v52;
      objc_msgSend(v53, "frame");
      objc_msgSend(v53, "setFrame:", 0.0);

      v54 = *(void **)&v1[v8];
      if (!v54)
        return;
      v48 = v54;
      UIView.untransformedFrame.getter();
      v58 = 0.0;
      goto LABEL_31;
    }
    goto LABEL_39;
  }
  if (v39 == 1)
  {
    v59 = *(void **)&v1[v2];
    if (v59)
    {
      v60 = v59;
      objc_msgSend(v1, "bounds");
      Width = CGRectGetWidth(v74);
      v62 = *(void **)&v1[v2];
      if (v62)
      {
        v63 = Width;
        objc_msgSend(v62, "bounds");
        v65 = (v63 - v64) * 0.5;
        objc_msgSend(v60, "frame");
        objc_msgSend(v60, "setFrame:", v65);

        v66 = *(void **)&v1[v8];
        if (!v66)
          return;
        v48 = v66;
        objc_msgSend(v1, "bounds");
        v67 = CGRectGetWidth(v75);
        v68 = *(void **)&v1[v8];
        if (v68)
          objc_msgSend(v68, "bounds");
        else
          v69 = 0.0;
        v70 = (v67 - v69) * 0.5;
        goto LABEL_30;
      }
LABEL_41:
      __break(1u);
      return;
    }
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v39 != 2)
    return;
  v40 = *(void **)&v1[v2];
  if (!v40)
    goto LABEL_37;
  v41 = v40;
  objc_msgSend(v1, "bounds");
  v42 = CGRectGetWidth(v72);
  v43 = *(void **)&v1[v2];
  if (!v43)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v44 = v42;
  objc_msgSend(v43, "bounds");
  v46 = v44 - v45;
  objc_msgSend(v41, "frame");
  objc_msgSend(v41, "setFrame:", v46);

  v47 = *(void **)&v1[v8];
  if (!v47)
    return;
  v48 = v47;
  objc_msgSend(v1, "bounds");
  v49 = CGRectGetWidth(v73);
  v50 = *(void **)&v1[v8];
  if (v50)
    objc_msgSend(v50, "bounds");
  else
    v51 = 0.0;
  v70 = v49 - v51;
LABEL_30:
  UIView.untransformedFrame.getter();
  v58 = v70;
LABEL_31:
  UIView.untransformedFrame.setter(v58, v55, v56, v57);

}

id sub_100277E24()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)_s19SBS_TextContentViewCMa();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t _s19SBS_TextContentViewCMa()
{
  return objc_opt_self(MusicSBS_TextContentView);
}

uint64_t sub_100277F0C(const void *a1)
{
  _QWORD *v1;
  void *v3;
  _BYTE v5[544];

  v3 = (void *)(*v1 + OBJC_IVAR___MusicSBS_TextContentView_specs);
  memcpy(v5, v3, 0x219uLL);
  memcpy(v3, a1, 0x219uLL);
  sub_10026EC3C((uint64_t)a1);
  sub_10026ED0C((uint64_t)v5);
  sub_100276920();
  return sub_10026ED0C((uint64_t)a1);
}

uint64_t sub_100277F84(uint64_t a1)
{
  return sub_100276AA4(a1);
}

void sub_100277FA4(char a1, char a2)
{
  sub_100276B04(a1, a2);
}

id sub_100277FC4(char a1, double a2, double a3)
{
  return sub_10027785C(a1, a2, a3);
}

double sub_100277FE4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  _BYTE v4[24];

  switch(a1)
  {
    case 1:
    case 3:
      v1 = CGPoint.center.unsafeMutableAddressor();
      break;
    case 2:
      v1 = CGPoint.centerRight.unsafeMutableAddressor();
      break;
    default:
      v1 = CGPoint.centerLeft.unsafeMutableAddressor();
      break;
  }
  v2 = v1;
  swift_beginAccess(v1, v4, 0, 0);
  return *(double *)v2;
}

uint64_t sub_100278050()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100278074()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

void sub_100278098()
{
  uint64_t v0;

  sub_100276D60(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_1002780A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_1002780B4(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_1002780BC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1002780E8()
{
  uint64_t v0;

  sub_1002776F0(*(char **)(v0 + 16), *(char **)(v0 + 24));
}

uint64_t sub_1002780F0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100278100()
{
  _BYTE *v0;
  _QWORD *v1;

  v0[OBJC_IVAR___MusicSBS_TextContentView_isScrolling] = 1;
  v1 = &v0[OBJC_IVAR___MusicSBS_TextContentView_text];
  *v1 = 0;
  v1[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___MusicSBS_TextContentView_attributedText] = 0;
  v0[OBJC_IVAR___MusicSBS_TextContentView_isSelected] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___MusicSBS_TextContentView_progress] = 0;
  v0[OBJC_IVAR___MusicSBS_TextContentView_backgroundDirection] = 2;
  *(_QWORD *)&v0[OBJC_IVAR___MusicSBS_TextContentView_textView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___MusicSBS_TextContentView_backgroundTextView] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001003B2590, "MusicCoreUI/SBS_SyncedLyricsLineView+Text.swift", 47, 2, 208, 0);
  __break(1u);
}

void sub_1002781D0()
{
  qword_1004A3380 = Int.seconds.getter(6);
}

void sub_1002781F0()
{
  qword_1004A3388 = Int.seconds.getter(8);
}

CFIndex sub_100278210(uint64_t a1, uint64_t a2)
{
  CFIndex result;
  uint64_t v3;

  result = CFRange.init(_:)(*(__C::_NSRange *)&a1).location;
  qword_1004A3390 = v3;
  return result;
}

CGFloat sub_100278234(uint64_t a1)
{
  return sub_1002782AC(0.9, a1, &xmmword_1004A33A0, algn_1004A33B0, &xmmword_1004A33C0);
}

CGFloat sub_100278250(uint64_t a1)
{
  return sub_1002782AC(1.2, a1, &xmmword_1004A33D0, &xmmword_1004A33E0, &xmmword_1004A33F0);
}

CGFloat sub_100278270(uint64_t a1)
{
  return sub_1002782AC(1.2, a1, &xmmword_1004A3400, algn_1004A3410, &xmmword_1004A3420);
}

CGFloat sub_100278290(uint64_t a1)
{
  return sub_1002782AC(0.2, a1, &xmmword_1004A3430, &xmmword_1004A3440, &xmmword_1004A3450);
}

CGFloat sub_1002782AC(CGFloat a1, uint64_t a2, _OWORD *a3, _OWORD *a4, _OWORD *a5)
{
  CGFloat result;
  __int128 v9;
  __int128 v10;
  CGAffineTransform v11;

  CGAffineTransformMakeScale(&v11, a1, a1);
  result = v11.a;
  v9 = *(_OWORD *)&v11.c;
  v10 = *(_OWORD *)&v11.tx;
  *a3 = *(_OWORD *)&v11.a;
  *a4 = v9;
  *a5 = v10;
  return result;
}

id sub_100278300(uint64_t a1, char a2, void *__src, double a4, double a5)
{
  _BYTE *v5;
  _OWORD *v6;
  char *v7;
  double *v8;
  objc_super v10;

  v5[OBJC_IVAR___MusicInstrumentalContentView_isScrolling] = 0;
  *(_QWORD *)&v5[OBJC_IVAR___MusicInstrumentalContentView_alignment] = 0;
  v6 = &v5[OBJC_IVAR___MusicInstrumentalContentView_lastSeenBounds];
  *v6 = 0u;
  v6[1] = 0u;
  v5[OBJC_IVAR___MusicInstrumentalContentView_isSelected] = 0;
  *(_QWORD *)&v5[OBJC_IVAR___MusicInstrumentalContentView_dots] = _swiftEmptyArrayStorage;
  v5[OBJC_IVAR___MusicInstrumentalContentView_fadeOutCued] = 0;
  *(_QWORD *)&v5[OBJC_IVAR___MusicInstrumentalContentView_dotFadeInDuration] = 0;
  v7 = &v5[OBJC_IVAR___MusicInstrumentalContentView_totalDotsFadedIn];
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  *(_QWORD *)&v5[OBJC_IVAR___MusicInstrumentalContentView_totalDotsCompleted] = 0;
  *(_QWORD *)&v5[OBJC_IVAR___MusicInstrumentalContentView_breathDuration] = 0;
  *(_QWORD *)&v5[OBJC_IVAR___MusicInstrumentalContentView_totalBreathsCompleted] = 0;
  v8 = (double *)&v5[OBJC_IVAR___MusicInstrumentalContentView_line];
  *(_QWORD *)v8 = a1;
  v8[1] = a4;
  v8[2] = a5;
  *((_BYTE *)v8 + 24) = a2 & 1;
  memcpy(&v5[OBJC_IVAR___MusicInstrumentalContentView_specs], __src, 0x219uLL);
  v10.receiver = v5;
  v10.super_class = (Class)_s23InstrumentalContentViewCMa();
  return objc_msgSendSuper2(&v10, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
}

uint64_t sub_100278500()
{
  uint64_t v0;
  double v1;
  double v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  _QWORD v13[6];
  _BYTE v14[24];

  v1 = *(double *)(v0 + OBJC_IVAR___MusicInstrumentalContentView_line + 8);
  v2 = *(double *)(v0 + OBJC_IVAR___MusicInstrumentalContentView_line + 16) + -1.8;
  *(double *)(v0 + OBJC_IVAR___MusicInstrumentalContentView_breathDuration) = (v2 - v1) / floor((v2 - v1) * 0.25) * 0.5;
  *(double *)(v0 + OBJC_IVAR___MusicInstrumentalContentView_dotFadeInDuration) = (v2 - (v1 + 1.0))
                                                                               / (double)*(uint64_t *)(v0 + OBJC_IVAR___MusicInstrumentalContentView_specs + 488);
  *(_QWORD *)(v0 + OBJC_IVAR___MusicInstrumentalContentView_totalDotsCompleted) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR___MusicInstrumentalContentView_totalBreathsCompleted) = 0;
  v3 = v0 + OBJC_IVAR___MusicInstrumentalContentView_totalDotsFadedIn;
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  *(_BYTE *)(v0 + OBJC_IVAR___MusicInstrumentalContentView_fadeOutCued) = 0;
  v4 = (uint64_t *)(v0 + OBJC_IVAR___MusicInstrumentalContentView_dots);
  swift_beginAccess(v0 + OBJC_IVAR___MusicInstrumentalContentView_dots, v14, 0, 0);
  v5 = *v4;
  if (!((unint64_t)v5 >> 62))
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v6)
      goto LABEL_3;
    return swift_bridgeObjectRelease(v5);
  }
  if (v5 < 0)
    v12 = v5;
  else
    v12 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter(v12);
  v6 = result;
  if (!result)
    return swift_bridgeObjectRelease(v5);
LABEL_3:
  if (v6 >= 1)
  {
    v8 = 0;
    do
    {
      if ((v5 & 0xC000000000000001) != 0)
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v5);
      else
        v9 = *(id *)(v5 + 8 * v8 + 32);
      v10 = v9;
      ++v8;
      v11 = objc_msgSend(v9, "layer");
      objc_msgSend(v11, "removeAllAnimations");

      objc_msgSend(v10, "setAlpha:", 0.0);
      v13[1] = 0;
      v13[2] = 0;
      v13[0] = 0x3FF0000000000000;
      v13[3] = 0x3FF0000000000000;
      v13[4] = 0;
      v13[5] = 0;
      objc_msgSend(v10, "setTransform:", v13);

    }
    while (v6 != v8);
    return swift_bridgeObjectRelease(v5);
  }
  __break(1u);
  return result;
}

void sub_100278718(char a1, char a2)
{
  _BYTE *v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _BYTE *v7;
  _QWORD v8[5];
  uint64_t v9;

  v2[OBJC_IVAR___MusicInstrumentalContentView_isSelected] = a1;
  if ((a1 & 1) == 0)
  {
    if ((a2 & 1) != 0)
    {
      v3 = objc_msgSend(objc_allocWithZone((Class)UIViewPropertyAnimator), "initWithDuration:controlPoint1:controlPoint2:animations:", 0, 0.12, 0.33, 0.0, 0.2, 0.1);
      v4 = swift_allocObject(&unk_10045E3E8, 24, 7);
      *(_QWORD *)(v4 + 16) = v2;
      v8[4] = sub_10027A498;
      v9 = v4;
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 1107296256;
      v8[2] = sub_1000BED80;
      v8[3] = &unk_10045E400;
      v5 = _Block_copy(v8);
      v6 = v9;
      v7 = v2;
      objc_msgSend(v3, "addAnimations:", v5, swift_release(v6).n128_f64[0]);
      _Block_release(v5);
      objc_msgSend(v3, "startAnimation");

    }
    else
    {
      sub_100278500();
    }
  }
}

void sub_100278848(double a1)
{
  char *v1;
  char *v2;
  char *v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t i;
  id v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  char *v23;
  void *v24;
  double v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void **aBlock;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  _QWORD *v40;
  char v41[24];

  v2 = &v1[OBJC_IVAR___MusicInstrumentalContentView_totalDotsFadedIn];
  if (v1[OBJC_IVAR___MusicInstrumentalContentView_totalDotsFadedIn + 8] == 1)
  {
    v3 = v1;
    v5 = (uint64_t *)&v1[OBJC_IVAR___MusicInstrumentalContentView_dots];
    swift_beginAccess(&v1[OBJC_IVAR___MusicInstrumentalContentView_dots], v41, 0, 0);
    v6 = *v5;
    if ((unint64_t)v6 >> 62)
    {
      if (v6 < 0)
        v33 = v6;
      else
        v33 = v6 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v34 = _CocoaArrayWrapper.endIndex.getter(v33);
      swift_bridgeObjectRelease();
      if (v34)
      {
LABEL_5:
        v7 = 0;
        *(_QWORD *)v2 = 0;
        v2[8] = 0;
        v8 = *(double *)&v1[OBJC_IVAR___MusicInstrumentalContentView_line + 8] + 1.0;
        if (v8 <= a1)
        {
          v9 = (a1 - v8) / *(double *)&v1[OBJC_IVAR___MusicInstrumentalContentView_dotFadeInDuration];
          if ((~*(_QWORD *)&v9 & 0x7FF0000000000000) == 0)
          {
LABEL_27:
            __break(1u);
            goto LABEL_28;
          }
          if (v9 <= -9.22337204e18)
          {
LABEL_28:
            __break(1u);
            goto LABEL_29;
          }
          if (v9 >= 9.22337204e18)
          {
LABEL_29:
            __break(1u);
            goto LABEL_30;
          }
          if (__OFADD__((uint64_t)v9, 1))
          {
LABEL_30:
            __break(1u);
            return;
          }
          if ((uint64_t)v9 + 1 >= 3)
            v7 = 3;
          else
            v7 = (uint64_t)v9 + 1;
        }
        v10 = *(_QWORD *)&v1[OBJC_IVAR___MusicInstrumentalContentView_specs + 488];
        if (v10 < 0)
        {
          __break(1u);
        }
        else
        {
          if (v10)
          {
            for (i = 0; i != v10; ++i)
            {
              v12 = objc_msgSend(objc_allocWithZone((Class)UIViewPropertyAnimator), "initWithDuration:curve:animations:", 3, 0, 0.8);
              v13 = (_QWORD *)swift_allocObject(&unk_10045E2F8, 40, 7);
              v13[2] = v7;
              v13[3] = i;
              v13[4] = v3;
              v39 = sub_10027A444;
              v40 = v13;
              aBlock = _NSConcreteStackBlock;
              v36 = 1107296256;
              v37 = sub_1000BED80;
              v38 = &unk_10045E310;
              v14 = _Block_copy(&aBlock);
              v15 = v40;
              v16 = v3;
              v17 = v3;
              v18 = v7;
              v19 = v16;
              objc_msgSend(v12, "addAnimations:", v14, swift_release(v15).n128_f64[0]);
              _Block_release(v14);
              v20 = swift_allocObject(&unk_10045E348, 32, 7);
              *(_QWORD *)(v20 + 16) = v19;
              *(_QWORD *)(v20 + 24) = i;
              v39 = sub_10027A450;
              v40 = (_QWORD *)v20;
              aBlock = _NSConcreteStackBlock;
              v36 = 1107296256;
              v37 = sub_100204BB4;
              v38 = &unk_10045E360;
              v21 = _Block_copy(&aBlock);
              v22 = v40;
              v23 = v19;
              v7 = v18;
              v3 = v17;
              objc_msgSend(v12, "addCompletion:", v21, swift_release(v22).n128_f64[0]);
              _Block_release(v21);
              objc_msgSend(v12, "startAnimationAfterDelay:", (double)i * 0.06);

            }
          }
          v24 = (void *)objc_opt_self(UIView);
          v25 = *(double *)&v3[OBJC_IVAR___MusicInstrumentalContentView_breathDuration] + -0.4;
          v26 = swift_allocObject(&unk_10045E398, 24, 7);
          *(_QWORD *)(v26 + 16) = v3;
          v39 = sub_10027A490;
          v40 = (_QWORD *)v26;
          aBlock = _NSConcreteStackBlock;
          v36 = 1107296256;
          v37 = sub_1000BED80;
          v38 = &unk_10045E3B0;
          v27 = _Block_copy(&aBlock);
          v28 = v40;
          v29 = v3;
          swift_release(v28);
          objc_msgSend(v24, "animateWithDuration:delay:options:animations:completion:", 0x20000, v27, 0, v25, 0.2);
          _Block_release(v27);
          v30 = *(_QWORD *)&v29[OBJC_IVAR___MusicInstrumentalContentView_totalBreathsCompleted];
          v31 = __OFADD__(v30, 1);
          v32 = v30 + 1;
          if (!v31)
          {
            *(_QWORD *)&v29[OBJC_IVAR___MusicInstrumentalContentView_totalBreathsCompleted] = v32;
            return;
          }
        }
        __break(1u);
        goto LABEL_27;
      }
    }
    else if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_5;
    }
    sub_100279F6C();
    goto LABEL_5;
  }
}

void sub_100278C40(int64_t a1, int64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _BYTE v6[24];

  v3 = a2;
  v4 = (uint64_t *)(a3 + OBJC_IVAR___MusicInstrumentalContentView_dots);
  if (a2 >= a1)
  {
    swift_beginAccess(a3 + OBJC_IVAR___MusicInstrumentalContentView_dots, v6, 0, 0);
    v5 = *v4;
    if ((v5 & 0xC000000000000001) == 0)
    {
      if ((v3 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10) > v3)
      {
        v3 = (unint64_t)*(id *)(v5 + 8 * v3 + 32);
        goto LABEL_11;
      }
      __break(1u);
      goto LABEL_20;
    }
LABEL_17:
    swift_bridgeObjectRetain();
    v3 = specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v5);
    swift_bridgeObjectRelease();
LABEL_11:
    if (qword_100498A28 == -1)
    {
LABEL_12:
      objc_msgSend((id)v3, "setAlpha:", *(double *)&qword_1004A3390);
      goto LABEL_13;
    }
LABEL_20:
    swift_once(&qword_100498A28, sub_100278210);
    goto LABEL_12;
  }
  swift_beginAccess(a3 + OBJC_IVAR___MusicInstrumentalContentView_dots, v6, 0, 0);
  v5 = *v4;
  if ((v5 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    v3 = specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v5);
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  if ((v3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10) <= v3)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v3 = (unint64_t)*(id *)(v5 + 8 * v3 + 32);
LABEL_6:
  objc_msgSend((id)v3, "setAlpha:", 1.0);
LABEL_13:

}

uint64_t sub_100278DAC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  _OWORD v9[3];
  _BYTE v10[24];

  v1 = (uint64_t *)(a1 + OBJC_IVAR___MusicInstrumentalContentView_dots);
  swift_beginAccess(a1 + OBJC_IVAR___MusicInstrumentalContentView_dots, v10, 0, 0);
  v2 = *v1;
  if (!((unint64_t)v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v3)
      goto LABEL_3;
    return swift_bridgeObjectRelease();
  }
  if (v2 < 0)
    v8 = v2;
  else
    v8 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter(v8);
  v3 = result;
  if (!result)
    return swift_bridgeObjectRelease();
LABEL_3:
  if (v3 >= 1)
  {
    v5 = 0;
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
        v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v2);
      else
        v6 = *(id *)(v2 + 8 * v5 + 32);
      v7 = v6;
      if (qword_100498A38 != -1)
        swift_once(&qword_100498A38, sub_100278250);
      ++v5;
      v9[0] = xmmword_1004A33D0;
      v9[1] = xmmword_1004A33E0;
      v9[2] = xmmword_1004A33F0;
      objc_msgSend(v7, "setTransform:", v9);

    }
    while (v3 != v5);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void sub_100278F00(double a1)
{
  uint64_t v1;
  char **v2;
  uint64_t v3;
  unint64_t v4;
  double *v6;
  double v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  BOOL v19;
  unint64_t *v20;
  id v21;
  double v22;
  uint64_t v23;
  id v24;
  _QWORD *v25;
  id v26;
  double v27;
  double v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  char **v32;
  uint64_t v33;
  BOOL v34;
  char *v35;
  double v36;
  BOOL v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  char **v41;
  char v42[24];
  _BYTE v43[24];
  uint64_t aBlock;
  uint64_t v45;
  uint64_t (*v46)(uint64_t);
  uint64_t v47;
  void *v48;
  _QWORD *v49;

  v6 = (double *)((char *)v2 + OBJC_IVAR___MusicInstrumentalContentView_line);
  v7 = *(double *)((char *)v2 + OBJC_IVAR___MusicInstrumentalContentView_line + 8);
  v8 = OBJC_IVAR___MusicInstrumentalContentView_dotFadeInDuration;
  v9 = (a1 - (v7 + 1.0)) / *(double *)((char *)v2 + OBJC_IVAR___MusicInstrumentalContentView_dotFadeInDuration);
  if ((~*(_QWORD *)&v9 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_61;
  }
  if (v9 <= -9.22337204e18)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  if (v9 >= 9.22337204e18)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (__OFADD__((uint64_t)v9, 1))
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  v10 = *(uint64_t *)((char *)v2 + OBJC_IVAR___MusicInstrumentalContentView_specs + 488);
  if ((uint64_t)v9 + 1 >= v10)
    v11 = *(uint64_t *)((char *)v2 + OBJC_IVAR___MusicInstrumentalContentView_specs + 488);
  else
    v11 = (uint64_t)v9 + 1;
  v12 = OBJC_IVAR___MusicInstrumentalContentView_totalDotsCompleted;
  v13 = *(uint64_t *)((char *)v2 + OBJC_IVAR___MusicInstrumentalContentView_totalDotsCompleted);
  if (v11 < v13)
  {
    sub_100278500();
    v14 = (uint64_t *)((char *)v2 + OBJC_IVAR___MusicInstrumentalContentView_dots);
    swift_beginAccess((char *)v2 + OBJC_IVAR___MusicInstrumentalContentView_dots, v43, 0, 0);
    v1 = *v14;
    v41 = v2;
    if (!((unint64_t)v1 >> 62))
    {
      v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v3)
      {
LABEL_11:
        if (v3 >= 1)
        {
          v15 = 0;
          do
          {
            if ((v1 & 0xC000000000000001) != 0)
              v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v1);
            else
              v16 = *(id *)(v1 + 8 * v15 + 32);
            v17 = v16;
            v18 = objc_msgSend(v16, "layer");
            objc_msgSend(v18, "removeAllAnimations");

            if (qword_100498A28 != -1)
              swift_once(&qword_100498A28, sub_100278210);
            ++v15;
            objc_msgSend(v17, "setAlpha:", *(double *)&qword_1004A3390);
            v45 = 0;
            v46 = 0;
            aBlock = 0x3FF0000000000000;
            v47 = 0x3FF0000000000000;
            v48 = 0;
            v49 = 0;
            objc_msgSend(v17, "setTransform:", &aBlock);

          }
          while (v3 != v15);
          goto LABEL_68;
        }
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
        do
        {
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          swift_bridgeObjectRetain();
          v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v4);
          swift_bridgeObjectRelease();
LABEL_36:
          v22 = *(double *)((char *)v2 + v8) + -0.1;
          v23 = swift_allocObject(&unk_10045E2A8, 24, 7);
          *(_QWORD *)(v23 + 16) = v21;
          v24 = objc_allocWithZone((Class)UIViewPropertyAnimator);
          v48 = sub_10027A40C;
          v49 = (_QWORD *)v23;
          aBlock = (uint64_t)_NSConcreteStackBlock;
          v45 = 1107296256;
          v46 = sub_1000BED80;
          v47 = (uint64_t)&unk_10045E2C0;
          v3 = (uint64_t)_Block_copy(&aBlock);
          v25 = v49;
          v26 = v21;
          v2 = v41;
          swift_release(v25);
          v4 = (unint64_t)objc_msgSend(v24, "initWithDuration:curve:animations:", 3, v3, v22);
          _Block_release((const void *)v3);
          objc_msgSend((id)v4, "startAnimation");

          v7 = v6[1];
LABEL_37:
          v27 = *(double *)((char *)v2 + OBJC_IVAR___MusicInstrumentalContentView_breathDuration);
          v28 = (a1 - v7) / v27;
          if ((~*(_QWORD *)&v28 & 0x7FF0000000000000) == 0)
            goto LABEL_73;
          if (v28 <= -9.22337204e18)
            goto LABEL_74;
          if (v28 >= 9.22337204e18)
            goto LABEL_75;
          v3 = (uint64_t)v28 + 1;
          if (__OFADD__((uint64_t)v28, 1))
            goto LABEL_76;
          v29 = OBJC_IVAR___MusicInstrumentalContentView_totalBreathsCompleted;
          if (*(uint64_t *)((char *)v2 + OBJC_IVAR___MusicInstrumentalContentView_totalBreathsCompleted) >= v3)
            goto LABEL_44;
          v30 = (void *)objc_opt_self(UIView);
          v31 = swift_allocObject(&unk_10045E258, 32, 7);
          *(_QWORD *)(v31 + 16) = v2;
          *(_QWORD *)(v31 + 24) = v3;
          v48 = sub_10027A404;
          v49 = (_QWORD *)v31;
          aBlock = (uint64_t)_NSConcreteStackBlock;
          v45 = 1107296256;
          v46 = sub_1000BED80;
          v47 = (uint64_t)&unk_10045E270;
          v3 = (uint64_t)_Block_copy(&aBlock);
          v4 = (unint64_t)v49;
          v32 = v2;
          swift_release(v4);
          objc_msgSend(v30, "animateWithDuration:delay:options:animations:completion:", 0x20000, v3, 0, v27 + -0.4, 0.2);
          _Block_release((const void *)v3);
          v33 = *(uint64_t *)((char *)v2 + v29);
          v34 = __OFADD__(v33, 1);
          v35 = (char *)(v33 + 1);
        }
        while (v34);
        *(char **)((char *)v2 + v29) = v35;
        goto LABEL_44;
      }
LABEL_68:
      swift_bridgeObjectRelease();
      sub_100278848(a1);
      return;
    }
LABEL_64:
    if (v1 < 0)
      v40 = v1;
    else
      v40 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter(v40);
    if (v3)
      goto LABEL_11;
    goto LABEL_68;
  }
  if ((*((_BYTE *)v2 + OBJC_IVAR___MusicInstrumentalContentView_totalDotsFadedIn + 8) & 1) != 0
    || (v7 + 1.0 < a1
      ? (v19 = *(char **)((char *)v2 + OBJC_IVAR___MusicInstrumentalContentView_totalDotsFadedIn) == (char *)v10)
      : (v19 = 0),
        !v19 || v6[2] + -1.8 <= a1))
  {
LABEL_44:
    v36 = v6[2];
    v37 = v36 > a1 && v36 + -1.8 < a1;
    if (v37 && (*((_BYTE *)v2 + OBJC_IVAR___MusicInstrumentalContentView_fadeOutCued) & 1) == 0)
      sub_100279704();
    return;
  }
  if (v11 == v13 || *((_BYTE *)v2 + OBJC_IVAR___MusicInstrumentalContentView_isSelected) != 1)
    goto LABEL_37;
  v3 = v11 - 1;
  if (__OFSUB__(v11, 1))
    goto LABEL_78;
  v41 = v2;
  if (v3 < v13)
    goto LABEL_79;
  if (v13 == v3)
  {
LABEL_32:
    v2 = v41;
    *(char **)((char *)v41 + v12) = (char *)v11;
    v20 = (unint64_t *)((char *)v41 + OBJC_IVAR___MusicInstrumentalContentView_dots);
    swift_beginAccess((char *)v41 + OBJC_IVAR___MusicInstrumentalContentView_dots, v42, 0, 0);
    v4 = *v20;
    if ((*v20 & 0xC000000000000001) != 0)
      goto LABEL_80;
    if (v3 < 0)
    {
      __break(1u);
    }
    else if ((unint64_t)v3 < *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v21 = *(id *)(v4 + 8 * v3 + 32);
      goto LABEL_36;
    }
    __break(1u);
  }
  else if (v13 < v3)
  {
    v4 = (unint64_t)v2 + OBJC_IVAR___MusicInstrumentalContentView_dots;
    swift_beginAccess((char *)v2 + OBJC_IVAR___MusicInstrumentalContentView_dots, v43, 0, 0);
    v2 = &selRef_borderWidth;
    while (1)
    {
      v38 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v38);
        swift_bridgeObjectRelease();
      }
      else
      {
        if (v13 < 0)
          goto LABEL_71;
        if ((unint64_t)v13 >= *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_72;
        v39 = *(id *)(v38 + 8 * v13 + 32);
      }
      ++v13;
      objc_msgSend(v39, "setAlpha:", 1.0);

      if (v3 == v13)
        goto LABEL_32;
    }
  }
  __break(1u);
}

uint64_t sub_100279564(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t i;
  __int128 v8;
  id v9;
  void *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[24];

  v3 = (uint64_t *)(a1 + OBJC_IVAR___MusicInstrumentalContentView_dots);
  swift_beginAccess(a1 + OBJC_IVAR___MusicInstrumentalContentView_dots, v15, 0, 0);
  v4 = *v3;
  if (!((unint64_t)v4 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v5)
      goto LABEL_3;
    return swift_bridgeObjectRelease();
  }
  if (v4 < 0)
    v11 = v4;
  else
    v11 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter(v11);
  v5 = result;
  if (!result)
    return swift_bridgeObjectRelease();
LABEL_3:
  if (v5 >= 1)
  {
    for (i = 0; i != v5; ++i)
    {
      if ((v4 & 0xC000000000000001) != 0)
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v4);
      else
        v9 = *(id *)(v4 + 8 * i + 32);
      v10 = v9;
      if ((a2 & 0x8000000000000001) == 1)
      {
        if (qword_100498A38 != -1)
          swift_once(&qword_100498A38, sub_100278250);
        v12 = xmmword_1004A33D0;
        v13 = xmmword_1004A33E0;
        v8 = xmmword_1004A33F0;
      }
      else
      {
        if (qword_100498A30 != -1)
          swift_once(&qword_100498A30, sub_100278234);
        v12 = xmmword_1004A33A0;
        v13 = *(_OWORD *)algn_1004A33B0;
        v8 = xmmword_1004A33C0;
      }
      v14 = v8;
      objc_msgSend(v10, "setTransform:", &v12);

    }
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void sub_100279704()
{
  _BYTE *v0;
  id v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _BYTE *v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _BYTE *v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _BYTE *v15;
  void **v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  void *v19;
  uint64_t (*v20)();
  uint64_t v21;

  if ((v0[OBJC_IVAR___MusicInstrumentalContentView_fadeOutCued] & 1) == 0)
  {
    v0[OBJC_IVAR___MusicInstrumentalContentView_fadeOutCued] = 1;
    v1 = objc_msgSend(objc_allocWithZone((Class)UIViewPropertyAnimator), "initWithDuration:controlPoint1:controlPoint2:animations:", 0, 1.0, 0.25, 0.1, 0.25, 1.0);
    v2 = swift_allocObject(&unk_10045E168, 24, 7);
    *(_QWORD *)(v2 + 16) = v0;
    v20 = sub_10027A3B0;
    v21 = v2;
    v16 = _NSConcreteStackBlock;
    v17 = 1107296256;
    v18 = sub_1000BED80;
    v19 = &unk_10045E180;
    v3 = _Block_copy(&v16);
    v4 = v21;
    v5 = v0;
    objc_msgSend(v1, "addAnimations:", v3, swift_release(v4).n128_f64[0]);
    _Block_release(v3);
    objc_msgSend(v1, "startAnimation");
    v6 = objc_msgSend(objc_allocWithZone((Class)UIViewPropertyAnimator), "initWithDuration:curve:animations:", 1, 0, 0.3);
    v7 = swift_allocObject(&unk_10045E1B8, 24, 7);
    *(_QWORD *)(v7 + 16) = v5;
    v20 = sub_10027A3D0;
    v21 = v7;
    v16 = _NSConcreteStackBlock;
    v17 = 1107296256;
    v18 = sub_1000BED80;
    v19 = &unk_10045E1D0;
    v8 = _Block_copy(&v16);
    v9 = v21;
    v10 = v5;
    objc_msgSend(v6, "addAnimations:", v8, swift_release(v9).n128_f64[0]);
    _Block_release(v8);
    objc_msgSend(v6, "startAnimationAfterDelay:", 1.0);
    v11 = objc_msgSend(objc_allocWithZone((Class)UIViewPropertyAnimator), "initWithDuration:curve:animations:", 1, 0, 0.5);
    v12 = swift_allocObject(&unk_10045E208, 24, 7);
    *(_QWORD *)(v12 + 16) = v10;
    v20 = sub_10027A3D8;
    v21 = v12;
    v16 = _NSConcreteStackBlock;
    v17 = 1107296256;
    v18 = sub_1000BED80;
    v19 = &unk_10045E220;
    v13 = _Block_copy(&v16);
    v14 = v21;
    v15 = v10;
    objc_msgSend(v11, "addAnimations:", v13, swift_release(v14).n128_f64[0]);
    _Block_release(v13);
    objc_msgSend(v11, "startAnimationAfterDelay:", 1.0);

  }
}

uint64_t sub_100279998(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  _OWORD v9[3];
  _BYTE v10[24];

  v1 = (uint64_t *)(a1 + OBJC_IVAR___MusicInstrumentalContentView_dots);
  swift_beginAccess(a1 + OBJC_IVAR___MusicInstrumentalContentView_dots, v10, 0, 0);
  v2 = *v1;
  if (!((unint64_t)v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v3)
      goto LABEL_3;
    return swift_bridgeObjectRelease();
  }
  if (v2 < 0)
    v8 = v2;
  else
    v8 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter(v8);
  v3 = result;
  if (!result)
    return swift_bridgeObjectRelease();
LABEL_3:
  if (v3 >= 1)
  {
    v5 = 0;
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
        v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v2);
      else
        v6 = *(id *)(v2 + 8 * v5 + 32);
      v7 = v6;
      if (qword_100498A40 != -1)
        swift_once(&qword_100498A40, sub_100278270);
      ++v5;
      v9[0] = xmmword_1004A3400;
      v9[1] = *(_OWORD *)algn_1004A3410;
      v9[2] = xmmword_1004A3420;
      objc_msgSend(v7, "setTransform:", v9);

    }
    while (v3 != v5);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_100279AEC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t i;
  id v6;
  void *v7;
  uint64_t v8;
  _BYTE v9[24];

  v1 = (uint64_t *)(a1 + OBJC_IVAR___MusicInstrumentalContentView_dots);
  swift_beginAccess(a1 + OBJC_IVAR___MusicInstrumentalContentView_dots, v9, 0, 0);
  v2 = *v1;
  if (!((unint64_t)v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v3)
      goto LABEL_3;
    return swift_bridgeObjectRelease(v2);
  }
  if (v2 < 0)
    v8 = v2;
  else
    v8 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter(v8);
  v3 = result;
  if (!result)
    return swift_bridgeObjectRelease(v2);
LABEL_3:
  if (v3 >= 1)
  {
    for (i = 0; i != v3; ++i)
    {
      if ((v2 & 0xC000000000000001) != 0)
        v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v2);
      else
        v6 = *(id *)(v2 + 8 * i + 32);
      v7 = v6;
      objc_msgSend(v6, "setAlpha:", 0.0);

    }
    return swift_bridgeObjectRelease(v2);
  }
  __break(1u);
  return result;
}

uint64_t sub_100279BE4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  _OWORD v9[3];
  _BYTE v10[24];

  v1 = (uint64_t *)(a1 + OBJC_IVAR___MusicInstrumentalContentView_dots);
  swift_beginAccess(a1 + OBJC_IVAR___MusicInstrumentalContentView_dots, v10, 0, 0);
  v2 = *v1;
  if (!((unint64_t)v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v3)
      goto LABEL_3;
    return swift_bridgeObjectRelease();
  }
  if (v2 < 0)
    v8 = v2;
  else
    v8 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter(v8);
  v3 = result;
  if (!result)
    return swift_bridgeObjectRelease();
LABEL_3:
  if (v3 >= 1)
  {
    v5 = 0;
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
        v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v2);
      else
        v6 = *(id *)(v2 + 8 * v5 + 32);
      v7 = v6;
      if (qword_100498A48 != -1)
        swift_once(&qword_100498A48, sub_100278290);
      ++v5;
      v9[0] = xmmword_1004A3430;
      v9[1] = xmmword_1004A3440;
      v9[2] = xmmword_1004A3450;
      objc_msgSend(v7, "setTransform:", v9);

    }
    while (v3 != v5);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void sub_100279D38()
{
  char *v0;
  char *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  char *v5;
  id v6;
  void *v7;
  double v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  id v12;
  double v13;
  id v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE v19[24];

  v1 = &v0[OBJC_IVAR___MusicInstrumentalContentView_specs];
  v2 = *(_QWORD *)&v0[OBJC_IVAR___MusicInstrumentalContentView_specs + 488];
  if (v2 < 0)
  {
LABEL_16:
    __break(1u);
  }
  else if (v2)
  {
    v3 = v0;
    v4 = 0;
    v5 = &v0[OBJC_IVAR___MusicInstrumentalContentView_dots];
    do
    {
      v6 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
      v7 = v6;
      v8 = 1.3;
      if (!v4)
        goto LABEL_7;
      v9 = *((_QWORD *)v1 + 61);
      v10 = __OFSUB__(v9, 1);
      v11 = v9 - 1;
      if (v10)
      {
        __break(1u);
        goto LABEL_16;
      }
      v8 = -1.3;
      if (v4 == v11)
      {
LABEL_7:
        v12 = objc_msgSend(v6, "layer");
        objc_msgSend(v12, "anchorPoint");
        objc_msgSend(v12, "setAnchorPoint:", v13 + v8);

      }
      objc_msgSend(v7, "setBackgroundColor:", *((_QWORD *)v1 + 29));
      objc_msgSend(v7, "setAlpha:", 0.0);
      objc_msgSend(v7, "setAutoresizingMask:", 40);
      v14 = objc_msgSend(v7, "layer");
      if (qword_100498A18 != -1)
        swift_once(&qword_100498A18, sub_1002781D0);
      objc_msgSend(v14, "setCornerRadius:", *(double *)&qword_1004A3380);

      swift_beginAccess(v5, v19, 33, 0);
      v15 = v7;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v15);
      v17 = *(_QWORD *)((*(_QWORD *)v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v16 = *(_QWORD *)((*(_QWORD *)v5 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v17 >= v16 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
      ++v4;
      v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v15);
      specialized Array._endMutation()(v18);
      swift_endAccess(v19);
      objc_msgSend(v3, "addSubview:", v15);

    }
    while (v2 != v4);
  }
}

uint64_t sub_100279F6C()
{
  char *v0;
  char *v1;
  uint64_t *v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  id v16;
  void *v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23[24];
  CGRect v24;
  CGRect v25;

  v1 = v0;
  v2 = (uint64_t *)&v0[OBJC_IVAR___MusicInstrumentalContentView_dots];
  swift_beginAccess(&v0[OBJC_IVAR___MusicInstrumentalContentView_dots], v23, 0, 0);
  v3 = *v2;
  if (!((unint64_t)*v2 >> 62))
  {
    if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v3 < 0)
    v20 = *v2;
  else
    v20 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v21 = _CocoaArrayWrapper.endIndex.getter(v20);
  swift_bridgeObjectRelease();
  if (!v21)
LABEL_3:
    sub_100279D38();
LABEL_4:
  v4 = (double)*(uint64_t *)&v1[OBJC_IVAR___MusicInstrumentalContentView_specs + 488];
  if (qword_100498A18 != -1)
    swift_once(&qword_100498A18, sub_1002781D0);
  v5 = *(double *)&qword_1004A3380 + *(double *)&qword_1004A3380;
  v6 = (*(double *)&qword_1004A3380 + *(double *)&qword_1004A3380) * v4;
  v7 = v4 + -1.0;
  if (qword_100498A20 != -1)
    swift_once(&qword_100498A20, sub_1002781F0);
  v8 = v6 + v7 * *(double *)&qword_1004A3388;
  v9 = Int.seconds.getter(0);
  v10 = *(_QWORD *)&v1[OBJC_IVAR___MusicInstrumentalContentView_alignment];
  if (v10 == 1)
  {
    objc_msgSend(v1, "bounds", v9);
    v11 = (CGRectGetWidth(v25) - v8) * 0.5;
  }
  else
  {
    v11 = v9;
    if (v10 == 2)
    {
      objc_msgSend(v1, "bounds");
      v11 = CGRectGetWidth(v24) - v8;
    }
  }
  v12 = *v2;
  if (!((unint64_t)v12 >> 62))
  {
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v13)
      goto LABEL_14;
    return swift_bridgeObjectRelease();
  }
  if (v12 < 0)
    v22 = v12;
  else
    v22 = v12 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter(v22);
  v13 = result;
  if (!result)
    return swift_bridgeObjectRelease();
LABEL_14:
  if (v13 >= 1)
  {
    v15 = 0;
    do
    {
      if ((v12 & 0xC000000000000001) != 0)
        v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v12);
      else
        v16 = *(id *)(v12 + 8 * v15 + 32);
      v17 = v16;
      ++v15;
      objc_msgSend(v1, "bounds");
      UIView.untransformedFrame.setter(v11, v18 * 0.5 - v5 * 0.5, v5, v5);
      v19 = *(double *)&qword_1004A3388;

      v11 = v11 + v5 + v19;
    }
    while (v13 != v15);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

id sub_10027A220()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)_s23InstrumentalContentViewCMa();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t _s23InstrumentalContentViewCMa()
{
  return objc_opt_self(MusicInstrumentalContentView);
}

uint64_t sub_10027A2C4(const void *a1)
{
  _QWORD *v1;
  void *v3;
  _BYTE v5[544];

  v3 = (void *)(*v1 + OBJC_IVAR___MusicInstrumentalContentView_specs);
  memcpy(v5, v3, 0x219uLL);
  memcpy(v3, a1, 0x219uLL);
  return sub_10026ED0C((uint64_t)v5);
}

uint64_t sub_10027A328(uint64_t result)
{
  _QWORD *v1;

  *(_BYTE *)(*v1 + OBJC_IVAR___MusicInstrumentalContentView_isScrolling) = result;
  return result;
}

uint64_t sub_10027A33C()
{
  return sub_100278500();
}

void sub_10027A35C(char a1, char a2)
{
  sub_100278718(a1, a2);
}

id sub_10027A37C()
{
  id *v0;

  return objc_msgSend(*v0, "sizeThatFits:");
}

uint64_t sub_10027A38C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10027A3B0()
{
  uint64_t v0;

  return sub_100279998(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10027A3B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_10027A3C8(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_10027A3D0()
{
  uint64_t v0;

  return sub_100279AEC(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10027A3D8()
{
  uint64_t v0;

  return sub_100279BE4(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10027A3E0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10027A404()
{
  uint64_t v0;

  return sub_100279564(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

id sub_10027A40C()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "setAlpha:", 1.0);
}

uint64_t sub_10027A420()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

void sub_10027A444()
{
  int64_t *v0;

  sub_100278C40(v0[2], v0[3], v0[4]);
}

void sub_10027A450()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 16) + OBJC_IVAR___MusicInstrumentalContentView_totalDotsFadedIn;
  if ((*(_BYTE *)(v1 + 8) & 1) == 0)
  {
    v2 = *(_QWORD *)(v0 + 24);
    if (*(_QWORD *)v1 <= v2)
    {
      v3 = __OFADD__(v2, 1);
      v4 = v2 + 1;
      if (v3)
      {
        __break(1u);
      }
      else
      {
        *(_QWORD *)v1 = v4;
        *(_BYTE *)(v1 + 8) = 0;
      }
    }
  }
}

uint64_t sub_10027A490()
{
  uint64_t v0;

  return sub_100278DAC(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10027A498()
{
  return sub_100278500();
}

void sub_10027A4B8()
{
  _BYTE *v0;
  _OWORD *v1;
  char *v2;

  v0[OBJC_IVAR___MusicInstrumentalContentView_isScrolling] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___MusicInstrumentalContentView_alignment] = 0;
  v1 = &v0[OBJC_IVAR___MusicInstrumentalContentView_lastSeenBounds];
  *v1 = 0u;
  v1[1] = 0u;
  v0[OBJC_IVAR___MusicInstrumentalContentView_isSelected] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___MusicInstrumentalContentView_dots] = _swiftEmptyArrayStorage;
  v0[OBJC_IVAR___MusicInstrumentalContentView_fadeOutCued] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___MusicInstrumentalContentView_dotFadeInDuration] = 0;
  v2 = &v0[OBJC_IVAR___MusicInstrumentalContentView_totalDotsFadedIn];
  *(_QWORD *)v2 = 0;
  v2[8] = 1;
  *(_QWORD *)&v0[OBJC_IVAR___MusicInstrumentalContentView_totalDotsCompleted] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___MusicInstrumentalContentView_breathDuration] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___MusicInstrumentalContentView_totalBreathsCompleted] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001003B2590, "MusicCoreUI/SyncedLyricsLineView+Instrumental.swift", 51, 2, 75, 0);
  __break(1u);
}

void sub_10027A60C(char a1, char a2)
{
  _BYTE *v2;
  double v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  char **v10;
  uint64_t v11;
  NSString v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void **v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;

  v2[OBJC_IVAR___MusicTextContentView_isSelected] = a1;
  if ((a1 & 1) != 0)
  {
    v5 = Int.seconds.getter(1);
    v6 = OBJC_IVAR___MusicTextContentView_selectedLabel;
    v7 = *(void **)&v2[OBJC_IVAR___MusicTextContentView_selectedLabel];
    if (v7)
      goto LABEL_20;
    v8 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
    objc_msgSend(v8, "setLineBreakStrategy:", 3);
    objc_msgSend(v8, "setNumberOfLines:", 0);
    objc_msgSend(v8, "setTextAlignment:", 4);
    objc_msgSend(v8, "setAutoresizingMask:", 18);
    objc_msgSend(v8, "setTextAlignment:", *(_QWORD *)&v2[OBJC_IVAR___MusicTextContentView_alignment]);
    v9 = *(void **)&v2[OBJC_IVAR___MusicTextContentView_content];
    if ((v2[OBJC_IVAR___MusicTextContentView_content + 16] & 1) != 0)
    {
      v10 = &selRef_setAttributedText_;
    }
    else
    {
      v11 = *(_QWORD *)&v2[OBJC_IVAR___MusicTextContentView_content + 8];
      swift_bridgeObjectRetain();
      v12 = String._bridgeToObjectiveC()();
      sub_10027B384(v9, v11, 0);
      objc_msgSend(v8, "setText:", v12);

      v9 = *(void **)&v2[OBJC_IVAR___MusicTextContentView_specs + 168];
      v10 = &selRef_setFont_;
    }
    objc_msgSend(v8, *v10, v9);
    objc_msgSend(v8, "setTextColor:", *(_QWORD *)&v2[OBJC_IVAR___MusicTextContentView_specs + 232]);
    objc_msgSend(v2, "addSubview:", v8);
    v13 = *(void **)&v2[v6];
    *(_QWORD *)&v2[v6] = v8;

    v7 = *(void **)&v2[v6];
    if (v7)
    {
LABEL_20:
      v14 = *(void **)&v2[OBJC_IVAR___MusicTextContentView_label];
      v15 = v7;
      objc_msgSend(v14, "frame");
      objc_msgSend(v15, "setFrame:");

      v16 = *(void **)&v2[v6];
      if (v16)
        objc_msgSend(v16, "setAlpha:", 0.0);
    }
  }
  else
  {
    v5 = Int.seconds.getter(0);
  }
  if ((a2 & 1) != 0)
  {
    v17 = objc_msgSend(objc_allocWithZone((Class)UIViewPropertyAnimator), "initWithDuration:controlPoint1:controlPoint2:animations:", 0, 0.12, 0.33, 0.0, 0.2, 0.1);
    v18 = swift_allocObject(&unk_10045E540, 32, 7);
    *(_QWORD *)(v18 + 16) = v2;
    *(double *)(v18 + 24) = v5;
    v33 = sub_10027B5C0;
    v34 = v18;
    v29 = _NSConcreteStackBlock;
    v30 = 1107296256;
    v31 = sub_1000BED80;
    v32 = &unk_10045E558;
    v19 = _Block_copy(&v29);
    v20 = v34;
    v21 = v2;
    objc_msgSend(v17, "addAnimations:", v19, swift_release(v20).n128_f64[0]);
    _Block_release(v19);
    v22 = swift_allocObject(&unk_10045E590, 24, 7);
    *(_QWORD *)(v22 + 16) = v21;
    v33 = sub_10027B678;
    v34 = v22;
    v29 = _NSConcreteStackBlock;
    v30 = 1107296256;
    v31 = sub_100204BB4;
    v32 = &unk_10045E5A8;
    v23 = _Block_copy(&v29);
    v24 = v34;
    v25 = v21;
    objc_msgSend(v17, "addCompletion:", v23, swift_release(v24).n128_f64[0]);
    _Block_release(v23);
    objc_msgSend(v17, "startAnimation");

  }
  else
  {
    objc_msgSend(*(id *)&v2[OBJC_IVAR___MusicTextContentView_label], "setAlpha:", 1.0 - v5);
    v26 = OBJC_IVAR___MusicTextContentView_selectedLabel;
    v27 = *(void **)&v2[OBJC_IVAR___MusicTextContentView_selectedLabel];
    if (v27)
      objc_msgSend(v27, "setAlpha:", v5);
    if ((a1 & 1) == 0)
    {
      v28 = *(void **)&v2[v26];
      if (v28)
      {
        objc_msgSend(v28, "removeFromSuperview");
        v28 = *(void **)&v2[v26];
      }
      *(_QWORD *)&v2[v26] = 0;

    }
  }
}

void sub_10027AA24(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  if ((*(_BYTE *)(a2 + OBJC_IVAR___MusicTextContentView_isSelected) & 1) == 0)
  {
    v3 = OBJC_IVAR___MusicTextContentView_selectedLabel;
    v4 = *(void **)(a2 + OBJC_IVAR___MusicTextContentView_selectedLabel);
    if (v4)
    {
      objc_msgSend(v4, "removeFromSuperview");
      v4 = *(void **)(a2 + v3);
    }
    *(_QWORD *)(a2 + v3) = 0;

  }
}

char *sub_10027AA80(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  _BYTE *v4;
  uint64_t v9;
  id v10;
  char *v11;
  id v12;
  char *v13;
  char v14;
  id v15;
  Swift::Int v16;
  char *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  id v21;
  objc_super v23;

  v4[OBJC_IVAR___MusicTextContentView_isSelected] = 0;
  *(_QWORD *)&v4[OBJC_IVAR___MusicTextContentView_alignment] = 0;
  v4[OBJC_IVAR___MusicTextContentView_isScrolling] = 1;
  v9 = OBJC_IVAR___MusicTextContentView_label;
  v10 = objc_allocWithZone((Class)UILabel);
  v11 = v4;
  v12 = objc_msgSend(v10, "init");
  objc_msgSend(v12, "setLineBreakStrategy:", 3);
  objc_msgSend(v12, "setNumberOfLines:", 0);
  objc_msgSend(v12, "setTextAlignment:", 4);
  objc_msgSend(v12, "setAutoresizingMask:", 18);
  *(_QWORD *)&v4[v9] = v12;
  *(_QWORD *)&v11[OBJC_IVAR___MusicTextContentView_selectedLabel] = 0;
  v13 = &v11[OBJC_IVAR___MusicTextContentView_content];
  *(_QWORD *)v13 = a1;
  *((_QWORD *)v13 + 1) = a2;
  v14 = a3 & 1;
  v13[16] = a3 & 1;
  memcpy(&v11[OBJC_IVAR___MusicTextContentView_specs], (const void *)a4, 0x219uLL);
  sub_10026EC3C(a4);
  sub_10027B364(a1, a2, a3 & 1);

  v23.receiver = v11;
  v23.super_class = (Class)_s15TextContentViewCMa();
  v15 = objc_msgSendSuper2(&v23, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v16 = sub_10024BB04((uint64_t)&off_100459D10);
  v17 = (char *)v15;
  sub_10027AEB0(v16);
  swift_bridgeObjectRelease();
  if ((a3 & 1) == 0)
  {
    if (*(_BYTE *)(a4 + 56))
      v18 = 4;
    else
      v18 = *(_QWORD *)(a4 + 48);
    objc_msgSend(*(id *)&v17[OBJC_IVAR___MusicTextContentView_label], "setTextAlignment:", v18);
  }
  v19 = *(void **)&v17[OBJC_IVAR___MusicTextContentView_label];
  v20 = v17;
  v21 = v19;
  objc_msgSend(v20, "addSubview:", v21);
  sub_10026ED0C(a4);
  sub_10027B384(a1, a2, v14);

  return v20;
}

uint64_t sub_10027ACE4@<X0>(char **a1@<X8>)
{
  _BYTE *v1;
  _BYTE *v2;
  char *v4;
  void *v5;
  uint64_t v6;
  char *v7;
  objc_class *v8;
  void *v9;
  uint64_t v10;
  char v11;
  char *v12;
  Swift::Int v13;
  char *v14;
  uint64_t result;
  _BYTE v16[544];

  v2 = v1;
  v4 = &v1[OBJC_IVAR___MusicTextContentView_content];
  v5 = *(void **)&v1[OBJC_IVAR___MusicTextContentView_content];
  v6 = *((_QWORD *)v4 + 1);
  v7 = &v2[OBJC_IVAR___MusicTextContentView_specs];
  if ((v4[16] & 1) != 0)
  {
    memcpy(v16, v7, 0x219uLL);
    v8 = (objc_class *)_s15TextContentViewCMa();
    objc_allocWithZone(v8);
    sub_10027B364(v5, v6, 1);
    sub_10026EC3C((uint64_t)v16);
    v9 = v5;
    v10 = v6;
    v11 = 1;
  }
  else
  {
    memcpy(v16, v7, 0x219uLL);
    v8 = (objc_class *)_s15TextContentViewCMa();
    objc_allocWithZone(v8);
    sub_10027B364(v5, v6, 0);
    sub_10026EC3C((uint64_t)v16);
    v9 = v5;
    v10 = v6;
    v11 = 0;
  }
  v12 = sub_10027AA80(v9, v10, v11, (uint64_t)v16);
  sub_10027A60C(v2[OBJC_IVAR___MusicTextContentView_isSelected], 0);
  *(_QWORD *)&v12[OBJC_IVAR___MusicTextContentView_alignment] = *(_QWORD *)&v2[OBJC_IVAR___MusicTextContentView_alignment];
  v13 = sub_10024BB04((uint64_t)&off_100459D38);
  sub_10027AEB0(v13);
  swift_bridgeObjectRelease();
  v14 = v12;
  objc_msgSend(v2, "bounds");
  objc_msgSend(v14, "setFrame:");

  result = _s15TextContentViewCMa();
  a1[3] = (char *)v8;
  *a1 = v14;
  return result;
}

double sub_10027AEB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  _QWORD *v10;
  int64_t v11;

  v10 = (_QWORD *)(a1 + 56);
  v1 = 1 << *(_BYTE *)(a1 + 32);
  v2 = -1;
  if (v1 < 64)
    v2 = ~(-1 << v1);
  v3 = v2 & *(_QWORD *)(a1 + 56);
  v11 = (unint64_t)(v1 + 63) >> 6;
  swift_bridgeObjectRetain();
  if (v3)
  {
    v5 = __clz(__rbit64(v3));
    goto LABEL_18;
  }
  if (v11 > 1)
  {
    v6 = v10[1];
    v7 = 1;
    if (v6)
      goto LABEL_17;
    v7 = 2;
    if (v11 <= 2)
      goto LABEL_19;
    v6 = v10[2];
    if (v6)
      goto LABEL_17;
    v7 = 3;
    if (v11 <= 3)
      goto LABEL_19;
    v6 = v10[3];
    if (v6)
    {
LABEL_17:
      v5 = __clz(__rbit64(v6)) + (v7 << 6);
LABEL_18:
      __asm { BR              X9 }
    }
    v8 = 4;
    if (v11 > 4)
    {
      v6 = v10[4];
      if (v6)
      {
        v7 = 4;
        goto LABEL_17;
      }
      while (1)
      {
        v7 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
          __break(1u);
          JUMPOUT(0x10027B258);
        }
        if (v7 >= v11)
          break;
        v6 = v10[v7];
        ++v8;
        if (v6)
          goto LABEL_17;
      }
    }
  }
LABEL_19:
  *(_QWORD *)&result = swift_release(a1).n128_u64[0];
  return result;
}

id sub_10027B294()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)_s15TextContentViewCMa();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t _s15TextContentViewCMa()
{
  return objc_opt_self(MusicTextContentView);
}

id sub_10027B364(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return a1;
  else
    return (id)swift_bridgeObjectRetain();
}

void _s15TextContentViewC7ContentOwxx(uint64_t a1)
{
  sub_10027B384(*(void **)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

void sub_10027B384(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)

  else
    swift_bridgeObjectRelease(a2);
}

uint64_t _s15TextContentViewC7ContentOwCP_0(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  char v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_10027B364(*(void **)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s15TextContentViewC7ContentOwca(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  char v5;
  void *v6;
  uint64_t v7;
  char v8;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_10027B364(*(void **)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_10027B384(v6, v7, v8);
  return a1;
}

uint64_t _s15TextContentViewC7ContentOwta(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_10027B384(v4, v5, v6);
  return a1;
}

ValueMetadata *_s15TextContentViewC7ContentOMa()
{
  return &_s15TextContentViewC7ContentON;
}

uint64_t sub_10027B484(const void *a1)
{
  _QWORD *v1;
  void *v3;
  Swift::Int v4;
  _BYTE v6[544];

  v3 = (void *)(*v1 + OBJC_IVAR___MusicTextContentView_specs);
  memcpy(v6, v3, 0x219uLL);
  memcpy(v3, a1, 0x219uLL);
  sub_10026EC3C((uint64_t)a1);
  sub_10026ED0C((uint64_t)v6);
  v4 = sub_10024BB04((uint64_t)&off_100459CE8);
  sub_10027AEB0(v4);
  swift_bridgeObjectRelease();
  return sub_10026ED0C((uint64_t)a1);
}

uint64_t sub_10027B518(char a1)
{
  _QWORD *v1;
  Swift::Int v2;

  *(_BYTE *)(*v1 + OBJC_IVAR___MusicTextContentView_isScrolling) = a1;
  v2 = sub_10024BB04((uint64_t)&off_100459D60);
  sub_10027AEB0(v2);
  return swift_bridgeObjectRelease();
}

id sub_10027B55C()
{
  _QWORD *v0;

  return objc_msgSend(*(id *)(*v0 + OBJC_IVAR___MusicTextContentView_label), "setAlpha:", 1.0);
}

void sub_10027B57C(char a1, char a2)
{
  sub_10027A60C(a1, a2);
}

uint64_t sub_10027B59C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_10027B5C0()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  id result;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(double *)(v0 + 24);
  objc_msgSend(*(id *)(v1 + OBJC_IVAR___MusicTextContentView_label), "setAlpha:", 1.0 - v2);
  result = *(id *)(v1 + OBJC_IVAR___MusicTextContentView_selectedLabel);
  if (result)
    return objc_msgSend(result, "setAlpha:", v2);
  return result;
}

uint64_t sub_10027B63C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_10027B64C(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_10027B654()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10027B678(uint64_t a1)
{
  uint64_t v1;

  sub_10027AA24(a1, *(_QWORD *)(v1 + 16));
}

void sub_10027B680()
{
  _BYTE *v0;
  uint64_t v1;
  id v2;

  v0[OBJC_IVAR___MusicTextContentView_isSelected] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___MusicTextContentView_alignment] = 0;
  v0[OBJC_IVAR___MusicTextContentView_isScrolling] = 1;
  v1 = OBJC_IVAR___MusicTextContentView_label;
  v2 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  objc_msgSend(v2, "setLineBreakStrategy:", 3);
  objc_msgSend(v2, "setNumberOfLines:", 0);
  objc_msgSend(v2, "setTextAlignment:", 4);
  objc_msgSend(v2, "setAutoresizingMask:", 18);
  *(_QWORD *)&v0[v1] = v2;
  *(_QWORD *)&v0[OBJC_IVAR___MusicTextContentView_selectedLabel] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001003B2590, "MusicCoreUI/SyncedLyricsLineView+Text.swift", 43, 2, 121, 0);
  __break(1u);
}

uint64_t _s15TextContentViewC6ChangeOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10027B7D8 + 4 * byte_10039899D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10027B80C + 4 * byte_100398998[v4]))();
}

uint64_t sub_10027B80C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10027B814(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10027B81CLL);
  return result;
}

uint64_t sub_10027B828(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10027B830);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10027B834(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10027B83C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s15TextContentViewC6ChangeOMa()
{
  return &_s15TextContentViewC6ChangeON;
}

unint64_t sub_10027B85C()
{
  unint64_t result;

  result = qword_10049AB88;
  if (!qword_10049AB88)
  {
    result = swift_getWitnessTable(&unk_100398A14, &_s15TextContentViewC6ChangeON);
    atomic_store(result, (unint64_t *)&qword_10049AB88);
  }
  return result;
}

uint64_t sub_10027B8A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_line;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_1000244B0(v3, a1);
}

id sub_10027B8F8()
{
  char *v0;
  double v1;
  double v2;
  CGFloat v3;
  double v4;
  CGFloat v5;
  double v6;
  CGFloat v7;
  uint64_t v8;
  uint64_t *v9;
  double *v10;
  _BYTE v12[24];

  v1 = UIView.untransformedFrame.getter();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v8 = *(_QWORD *)&v0[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_alignment];
  if (v8 == 2)
  {
    v9 = CGPoint.centerRight.unsafeMutableAddressor();
  }
  else if (v8)
  {
    v9 = CGPoint.center.unsafeMutableAddressor();
  }
  else
  {
    v9 = CGPoint.centerLeft.unsafeMutableAddressor();
  }
  v10 = (double *)v9;
  swift_beginAccess(v9, v12, 0, 0);
  objc_msgSend(v0, "setAnchorPoint:", *v10, v10[1]);
  return UIView.untransformedFrame.setter(v1, v3, v5, v7);
}

void sub_10027B9A4(void *a1)
{
  char *v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  Class isa;

  if (a1)
    objc_msgSend(a1, "removeFromSuperview");
  v2 = *(void **)&v1[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_contentView];
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_containerView], "addSubview:", v3);
    v4 = (void *)objc_opt_self(NSLayoutConstraint);
    v5 = sub_100005574(&qword_100499F50);
    v6 = swift_allocObject(v5, 64, 7);
    *(_OWORD *)(v6 + 16) = xmmword_100384C00;
    v7 = objc_msgSend(v3, "leadingAnchor");
    v8 = objc_msgSend(v1, "leadingAnchor");
    v9 = objc_msgSend(v7, "constraintEqualToAnchor:", v8);

    *(_QWORD *)(v6 + 32) = v9;
    v10 = objc_msgSend(v3, "trailingAnchor");
    v11 = objc_msgSend(v1, "trailingAnchor");
    v12 = objc_msgSend(v10, "constraintEqualToAnchor:", v11);

    *(_QWORD *)(v6 + 40) = v12;
    v13 = objc_msgSend(v3, "topAnchor");
    v14 = objc_msgSend(v1, "topAnchor");
    v15 = objc_msgSend(v13, "constraintEqualToAnchor:", v14);

    *(_QWORD *)(v6 + 48) = v15;
    v16 = objc_msgSend(v3, "bottomAnchor");
    v17 = objc_msgSend(v1, "bottomAnchor");
    v18 = objc_msgSend(v16, "constraintEqualToAnchor:", v17);

    *(_QWORD *)(v6 + 56) = v18;
    specialized Array._endMutation()(v19);
    sub_1000087DC(0, &qword_10049AC18, NSLayoutConstraint_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v4, "activateConstraints:", isa);

  }
}

void (*sub_10027BC60(uint64_t a1))(__int128 *a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  id v4;

  v2 = OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_contentView;
  *(_QWORD *)(a1 + 16) = v1;
  *(_QWORD *)(a1 + 24) = v2;
  v3 = *(_OWORD *)(v1 + v2);
  *(_OWORD *)a1 = v3;
  v4 = (id)v3;
  return sub_10027BCA8;
}

void sub_10027BCA8(__int128 *a1, char a2)
{
  id *v3;
  __int128 v4;
  id v5;
  void *v6;
  id v7;
  id v8;

  v3 = (id *)(*((_QWORD *)a1 + 2) + *((_QWORD *)a1 + 3));
  v8 = *v3;
  v4 = *a1;
  *(_OWORD *)v3 = *a1;
  v5 = (id)v4;
  v6 = v5;
  if ((a2 & 1) != 0)
  {
    v7 = v5;
    sub_10027B9A4(v8);

  }
  else
  {
    sub_10027B9A4(v8);
  }

}

id sub_10027BD2C()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView____lazy_storage___backgroundView;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView____lazy_storage___backgroundView];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView____lazy_storage___backgroundView];
  }
  else
  {
    v4 = sub_10027BD8C(v0);
    v5 = *(void **)&v0[v1];
    *(_QWORD *)&v0[v1] = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_10027BD8C(char *a1)
{
  id v2;
  double *v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  Class isa;

  v2 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v3 = (double *)&a1[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_specs];
  objc_msgSend(v2, "setBackgroundColor:", *(_QWORD *)&a1[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_specs + 456]);
  objc_msgSend(v2, "setAlpha:", 0.0);
  v4 = objc_msgSend(v2, "layer");
  objc_msgSend(v4, "setCornerCurve:", kCACornerCurveContinuous);

  v5 = objc_msgSend(v2, "layer");
  objc_msgSend(v5, "setCornerRadius:", v3[58]);

  objc_msgSend(a1, "insertSubview:atIndex:", v2, 0);
  v6 = (void *)objc_opt_self(NSLayoutConstraint);
  v7 = sub_100005574(&qword_100499F50);
  v8 = swift_allocObject(v7, 64, 7);
  *(_OWORD *)(v8 + 16) = xmmword_100384C00;
  v9 = objc_msgSend(v2, "leadingAnchor");
  v10 = objc_msgSend(a1, "leadingAnchor");
  v11 = objc_msgSend(v9, "constraintEqualToAnchor:constant:", v10, -v3[59]);

  *(_QWORD *)(v8 + 32) = v11;
  v12 = objc_msgSend(v2, "trailingAnchor");
  v13 = objc_msgSend(a1, "trailingAnchor");
  v14 = objc_msgSend(v12, "constraintEqualToAnchor:constant:", v13, v3[59]);

  *(_QWORD *)(v8 + 40) = v14;
  v15 = objc_msgSend(v2, "topAnchor");
  v16 = objc_msgSend(a1, "topAnchor");
  v17 = objc_msgSend(v15, "constraintEqualToAnchor:constant:", v16, -v3[59]);

  *(_QWORD *)(v8 + 48) = v17;
  v18 = objc_msgSend(v2, "bottomAnchor");
  v19 = objc_msgSend(a1, "bottomAnchor");
  v20 = objc_msgSend(v18, "constraintEqualToAnchor:constant:", v19, v3[59]);

  *(_QWORD *)(v8 + 56) = v20;
  specialized Array._endMutation()(v21);
  sub_1000087DC(0, &qword_10049AC18, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v6, "activateConstraints:", isa);

  return v2;
}

double sub_10027C188(char a1)
{
  char *v1;
  double result;
  id v3;
  char *v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  char *v9;
  id v10;

  if (objc_msgSend(v1, "isHighlighted") != (a1 & 1))
  {
    v3 = sub_10027BD2C();
    if (objc_msgSend(v1, "isHighlighted"))
    {
      v4 = &v1[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_previousBlurRadius];
      *(_QWORD *)v4 = *(_QWORD *)&v1[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_blurRadius];
      v4[8] = 0;
      v5 = 0.0;
    }
    else
    {
      if ((v1[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_previousBlurRadius + 8] & 1) != 0)
      {
LABEL_8:
        v6 = swift_allocObject(&unk_10045E7A8, 32, 7);
        *(_QWORD *)(v6 + 16) = v3;
        *(_QWORD *)(v6 + 24) = v1;
        v7 = swift_allocObject(&unk_10045E7D0, 32, 7);
        *(_QWORD *)(v7 + 16) = v1;
        *(_QWORD *)(v7 + 24) = v3;
        v8 = v3;
        v9 = v1;
        v10 = v8;
        _s11MusicCoreUI26SyncedLyricsViewControllerC5SpecsV35animateWithHighlightAnimationCurves11highlighted14fadeAnimations09transformP0ySb_yycyyctFZ_0((char)objc_msgSend(v9, "isHighlighted"), (uint64_t)sub_10027E53C, v6, (uint64_t)sub_10027E544, v7);

        swift_release(v6);
        *(_QWORD *)&result = swift_release(v7).n128_u64[0];
        return result;
      }
      v5 = *(double *)&v1[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_previousBlurRadius];
    }
    sub_10027CAA0(1, v5);
    goto LABEL_8;
  }
  return result;
}

void sub_10027C2CC(void *a1, char *a2)
{
  unsigned int v4;
  double v5;
  double v6;
  id v7;

  v4 = objc_msgSend(a2, "isHighlighted");
  v5 = 0.0;
  v6 = 1.0;
  if (v4)
    v5 = 1.0;
  objc_msgSend(a1, "setAlpha:", v5);
  v7 = *(id *)&a2[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_containerView];
  if (objc_msgSend(a2, "isHighlighted"))
    v6 = *(double *)&a2[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_specs + 448];
  objc_msgSend(v7, "setAlpha:", v6);

}

id sub_10027C37C(char *a1, void *a2)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;

  if (objc_msgSend(a1, "isHighlighted"))
  {
    v5 = *(double *)&a1[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_specs + 400];
    v4 = *(_QWORD *)&a1[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_specs + 408];
    v6 = *(_QWORD *)&a1[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_specs + 416];
    v7 = *(double *)&a1[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_specs + 424];
    v8 = *(_QWORD *)&a1[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_specs + 432];
    v9 = *(_QWORD *)&a1[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_specs + 440];
  }
  else
  {
    v4 = 0;
    v5 = 1.0;
    v6 = 0;
    v7 = 1.0;
    v8 = 0;
    v9 = 0;
  }
  v10 = *(void **)&a1[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_containerView];
  v12 = v5;
  v13 = v4;
  v14 = v6;
  v15 = v7;
  v16 = v8;
  v17 = v9;
  objc_msgSend(v10, "setTransform:", &v12);
  v12 = v5;
  v13 = v4;
  v14 = v6;
  v15 = v7;
  v16 = v8;
  v17 = v9;
  return objc_msgSend(a2, "setTransform:", &v12);
}

double sub_10027C468(double a1, double a2)
{
  char *v2;
  void *v3;
  uint64_t v6;
  uint64_t ObjectType;
  id v8;
  double v9;

  v3 = *(void **)&v2[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_contentView];
  if (!v3)
    return 0.0;
  v6 = *(_QWORD *)&v2[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_contentView + 8];
  ObjectType = swift_getObjectType();
  v8 = v3;
  v9 = (*(double (**)(id, uint64_t, uint64_t, double, double))(v6 + 96))(objc_msgSend(v2, "isSelected"), ObjectType, v6, a1, a2);

  return v9;
}

void sub_10027C56C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(__int128 *, char);
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  id v15;
  void *v16;
  _QWORD v17[4];

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_contentView;
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_contentView);
  if (v3)
  {
    v4 = *(_QWORD *)(v2 + 8);
    ObjectType = swift_getObjectType();
    v17[0] = v3;
    (*(void (**)(uint64_t, uint64_t))(v4 + 80))(ObjectType, v4);
  }
  v6 = OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_isScrolling;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_isScrolling) = 1;
  v8 = sub_10027BC60((uint64_t)v17);
  v9 = *(void **)v7;
  if (*(_QWORD *)v7)
  {
    v10 = v7;
    v11 = *(unsigned __int8 *)(v1 + v6);
    v12 = *(_QWORD *)(v7 + 8);
    v13 = swift_getObjectType();
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 40);
    v15 = v9;
    v14(v11, v13, v12);
    v16 = *(void **)v10;
    *(_QWORD *)v10 = v9;
    *(_QWORD *)(v10 + 8) = v12;

  }
  v8((__int128 *)v17, 0);
  sub_10027C668(0, 0);
}

void sub_10027C668(char a1, void *a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)();
  void *v9;
  uint64_t v10;
  id v11;
  char *v12;
  void **v13;
  uint64_t v14;
  uint64_t ObjectType;
  void (*v16)(_QWORD, uint64_t, uint64_t, uint64_t);
  void **v17;
  char *Strong;
  void *v19;
  uint64_t v20;
  double v21;
  uint64_t (*v22)(uint64_t);
  double v23;
  void (*v24)();
  uint64_t v25;
  char *v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_QWORD, _QWORD, uint64_t, uint64_t);
  void **v31;
  void **aBlock;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  double v35;
  void (*v36)();
  uint64_t v37;
  char v38[24];

  v5 = a1 & 1;
  if (objc_msgSend(v2, "isSelected") != (_DWORD)v5)
  {
    objc_msgSend(v2, "setSelected:", v5);
    if (objc_msgSend(v2, "isHighlighted"))
    {
      objc_msgSend(v2, "setHighlighted:", 0);
      objc_msgSend(v2, "cancelTrackingWithEvent:", 0);
      v6 = swift_allocObject(&unk_10045E708, 24, 7);
      swift_unknownObjectWeakInit(v6 + 16);
      v7 = swift_allocObject(&unk_10045E780, 25, 7);
      *(_QWORD *)(v7 + 16) = v6;
      *(_BYTE *)(v7 + 24) = a1 & 1;
      if (a2)
      {
        v8 = sub_10027E54C;
LABEL_7:
        v36 = v8;
        v37 = v7;
        aBlock = _NSConcreteStackBlock;
        v33 = 1107296256;
        v34 = sub_1000BED80;
        v35 = COERCE_DOUBLE(&unk_10045E748);
        v9 = _Block_copy(&aBlock);
        v10 = v37;
        swift_retain(v7);
        v11 = a2;
        objc_msgSend(v11, "addAnimations:", v9, swift_release(v10).n128_f64[0]);
        _Block_release(v9);
        v12 = &v2[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_contentView];
        v13 = *(void ***)&v2[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_contentView];
        if (v13)
        {
          v14 = *((_QWORD *)v12 + 1);
          ObjectType = swift_getObjectType();
          aBlock = v13;
          v16 = *(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v14 + 88);
          v17 = v13;
          v16(a1 & 1, 1, ObjectType, v14);

          swift_release(v7);
          return;
        }

        goto LABEL_17;
      }
    }
    else
    {
      v6 = swift_allocObject(&unk_10045E708, 24, 7);
      swift_unknownObjectWeakInit(v6 + 16);
      v7 = swift_allocObject(&unk_10045E730, 25, 7);
      *(_QWORD *)(v7 + 16) = v6;
      *(_BYTE *)(v7 + 24) = a1 & 1;
      if (a2)
      {
        v8 = sub_10027E400;
        goto LABEL_7;
      }
    }
    swift_beginAccess(v6 + 16, v38, 0, 0);
    Strong = (char *)swift_unknownObjectWeakLoadStrong(v6 + 16);
    if (Strong)
    {
      v19 = Strong;
      if ((a1 & 1) != 0)
      {
        v20 = 0;
        v21 = 1.0;
        v22 = 0;
        v23 = 1.0;
        v24 = 0;
        v25 = 0;
      }
      else
      {
        v21 = *(double *)&Strong[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_specs + 280];
        v20 = *(_QWORD *)&Strong[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_specs + 288];
        v22 = *(uint64_t (**)(uint64_t))&Strong[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_specs + 296];
        v23 = *(double *)&Strong[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_specs + 304];
        v24 = *(void (**)())&Strong[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_specs + 312];
        v25 = *(_QWORD *)&Strong[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_specs + 320];
      }
      aBlock = *(void ***)&v21;
      v33 = v20;
      v34 = v22;
      v35 = v23;
      v36 = v24;
      v37 = v25;
      objc_msgSend(Strong, "setTransform:", &aBlock, swift_retain(v6).n128_f64[0]);
      swift_release(v6);

    }
    v26 = &v2[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_contentView];
    v27 = *(void ***)&v2[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_contentView];
    if (v27)
    {
      v28 = *((_QWORD *)v26 + 1);
      v29 = swift_getObjectType();
      aBlock = v27;
      v30 = *(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(v28 + 88);
      v31 = v27;
      v30(a1 & 1, 0, v29, v28);

    }
LABEL_17:
    swift_release(v7);
  }
}

void sub_10027C9A0(uint64_t a1, char a2)
{
  uint64_t v3;
  char *Strong;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[3];
  _BYTE v10[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0, 0);
  Strong = (char *)swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    if ((a2 & 1) != 0)
    {
      v6 = xmmword_100384BD0;
      v7 = xmmword_1003952A0;
      v8 = 0uLL;
    }
    else
    {
      v7 = *(_OWORD *)&Strong[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_specs + 280];
      v6 = *(_OWORD *)&Strong[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_specs + 296];
      v8 = *(_OWORD *)&Strong[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_specs + 312];
    }
    v9[0] = v7;
    v9[1] = v6;
    v9[2] = v8;
    objc_msgSend(Strong, "setTransform:", v9);

  }
}

void sub_10027CAA0(char a1, double a2)
{
  char *v2;
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  NSString v10;
  id v11;
  id v12;
  double v13;
  Class isa;
  Class v15;
  id v16;
  double v17;
  float v18;
  double v19;
  float v20;
  double v21;
  float v22;
  double v23;
  float v24;
  id v25;
  double v26;
  double v27;
  double v28;
  double v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  char *v36;
  id v37;
  NSString v38;
  id v39;
  _QWORD aBlock[5];
  uint64_t v41;

  v5 = objc_msgSend(objc_allocWithZone((Class)UIViewPropertyAnimator), "initWithDuration:controlPoint1:controlPoint2:animations:", 0, 0.12, 0.33, 0.0, 0.2, 0.1);
  v6 = OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_blurRadius;
  if (*(double *)&v2[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_blurRadius] == a2)
    goto LABEL_8;
  v39 = v5;
  v7 = objc_msgSend(v5, "timingParameters");
  if (!v7
    || (v8 = v7,
        v9 = objc_msgSend(v7, "cubicTimingParameters"),
        swift_unknownObjectRelease(v8),
        !v9))
  {
    v5 = v39;
LABEL_8:

    return;
  }
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend((id)objc_opt_self(CABasicAnimation), "animationWithKeyPath:", v10);

  v12 = v11;
  v13 = 0.0;
  if ((a1 & 1) != 0)
    objc_msgSend(v39, "duration", 0.0);
  objc_msgSend(v12, "setDuration:", v13);

  objc_msgSend(v12, "setFillMode:", kCAFillModeBoth);
  isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v12, "setFromValue:", isa);

  v15 = CGFloat._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v12, "setToValue:", v15);

  objc_msgSend(v12, "setRemovedOnCompletion:", 0);
  v16 = v12;
  objc_msgSend(v9, "controlPoint1");
  v18 = v17;
  objc_msgSend(v9, "controlPoint1");
  v20 = v19;
  objc_msgSend(v9, "controlPoint2");
  v22 = v21;
  objc_msgSend(v9, "controlPoint2");
  v24 = v23;
  v25 = objc_allocWithZone((Class)CAMediaTimingFunction);
  *(float *)&v26 = v18;
  *(float *)&v27 = v20;
  *(float *)&v28 = v22;
  *(float *)&v29 = v24;
  v30 = objc_msgSend(v25, "initWithControlPoints::::", v26, v27, v28, v29);
  objc_msgSend(v16, "setTimingFunction:", v30);

  v31 = objc_msgSend(v2, "layer");
  objc_msgSend(v31, "setShouldRasterize:", 0);

  v32 = (void *)objc_opt_self(CATransaction);
  objc_msgSend(v32, "begin");
  v33 = swift_allocObject(&unk_10045E6B8, 24, 7);
  *(_QWORD *)(v33 + 16) = v2;
  aBlock[4] = sub_10027E3BC;
  v41 = v33;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000BED80;
  aBlock[3] = &unk_10045E6D0;
  v34 = _Block_copy(aBlock);
  v35 = v41;
  v36 = v2;
  objc_msgSend(v32, "setCompletionBlock:", v34, swift_release(v35).n128_f64[0]);
  _Block_release(v34);
  v37 = objc_msgSend(v36, "layer");
  v38 = String._bridgeToObjectiveC()();
  objc_msgSend(v37, "addAnimation:forKey:", v16, v38);

  objc_msgSend(v32, "commit");
  *(double *)&v2[v6] = a2;
}

void sub_10027CEA0(void *a1)
{
  id v1;

  v1 = objc_msgSend(a1, "layer");
  objc_msgSend(v1, "setShouldRasterize:", 1);

}

uint64_t sub_10027CEE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t (*v14)(void);
  void (*v15)(uint64_t *__return_ptr);
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  id v35;
  NSString v36;
  uint64_t v37;
  Class isa;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  NSString *v47;
  NSString *v48;
  id v49;
  id v50;
  id v51;
  id v52;
  NSString v53;
  Class v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  char v66;
  id v67;
  id v68;
  Swift::Int v69;
  uint64_t v70;
  Swift::Int v71;
  uint64_t v72;
  double v73;
  double v74;
  char v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  char v96;
  uint64_t v97;
  Swift::Int v98;
  Swift::Int v99;
  uint64_t v100;
  id v101;
  void *v102;
  id v103;
  char *v104;
  char *v105;
  uint64_t v106;
  Swift::Int v107;
  void *v108;
  char *v109;
  id v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  Swift::Int v115;
  void *v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  _QWORD *v123;
  char v124;
  char v125;
  id v126;
  char *v127;
  void *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  char v133;
  char v134;
  id v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  id v140;
  void (*v141)(char *, uint64_t);
  NSString *v142;
  id v143;
  __int128 v144;
  id v145;
  id v146;
  uint64_t v147;
  uint64_t v148;
  id v149;
  _QWORD v150[3];
  char v151;
  unsigned __int8 v152;
  uint64_t v153;
  uint64_t (*v154)(void);
  void *v155;
  uint64_t (*v156)(void);
  uint64_t v157;
  void (*v158)(uint64_t *__return_ptr);
  void *v159;
  uint64_t v160;
  _QWORD v161[5];
  uint64_t v162[8];
  uint64_t v163[8];
  uint64_t v164[8];
  uint64_t v165[6];
  char v166;
  _BYTE v167[24];
  uint64_t v168;
  char v169;
  _QWORD *v170;
  _QWORD v171[3];
  uint64_t v172;
  _QWORD *v173;
  _OWORD v174[34];

  v1 = v0;
  type metadata accessor for Locale(0);
  __chkstk_darwin();
  v3 = (char *)&v136 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for String.LocalizationValue(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v136 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v9 = (char *)&v136 - v8;
  sub_10027B8F8();
  v10 = v0 + OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_line;
  swift_beginAccess(v10, &v160, 0, 0);
  sub_1000244B0(v10, (uint64_t)v161);
  v11 = sub_100005574(&qword_100499EA0);
  if (swift_dynamicCast(v150, v161, v11, &type metadata for Lyrics.TextLine, 0))
  {
    LODWORD(v146) = v152;
    v12 = v153;
    v13 = v154;
    v14 = v156;
    v15 = v158;
    v16 = v159;
    v148 = v157;
    v149 = v155;
    v17 = *(_QWORD *)(v156() + 16);
    v18 = swift_bridgeObjectRelease();
    v19 = v1 + OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_contentView;
    v20 = *(void **)(v1 + OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_contentView);
    if (v17)
    {
      v147 = v12;
      v21 = v1;
      if (v20)
      {
        v22 = _s19SBS_TextContentViewCMa();
        v18 = swift_dynamicCastClass(v20, v22);
        if (v18)
        {
          v145 = v20;
          v143 = (id)v13();
          *(_QWORD *)&v144 = v23;
          v24 = v14();
          v142 = *(NSString **)(v1 + OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_alignment);
          v15(v163);
          v25 = sub_10027E350((uint64_t)v163, (uint64_t)v174);
          v26 = *((_QWORD *)&v174[1] + 1);
          if (*((_QWORD *)&v174[1] + 1))
          {
            v141 = *(void (**)(char *, uint64_t))&v174[1];
            swift_bridgeObjectRetain();
            v25 = (uint64_t)sub_10025C9BC(v163);
          }
          else
          {
            v141 = 0;
          }
          v130 = v147;
          ((void (*)(uint64_t *__return_ptr, uint64_t))v15)(v164, v25);
          v131 = sub_10027E350((uint64_t)v164, (uint64_t)v171);
          if (v172)
          {
            v132 = v173;
            swift_bridgeObjectRetain();
            v131 = (uint64_t)sub_10025C9BC(v164);
          }
          else
          {
            v132 = _swiftEmptyArrayStorage;
          }
          ((void (*)(uint64_t *__return_ptr, uint64_t))v15)(v165, v131);
          sub_10027E350((uint64_t)v165, (uint64_t)v167);
          v133 = v168;
          if (v168)
          {
            v134 = v169;
            sub_10025C9BC(v165);
            v133 = v134 & 1;
          }
          sub_100276E4C(v143, v144, v24, (uint64_t)v142, (char)v146, v130, (uint64_t)v141, v26, (uint64_t)v132, v133);
          swift_release(v16);
          swift_release(v148);
          swift_release(v149);
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_48;
        }
      }
      v145 = (id)((uint64_t (*)(uint64_t))v13)(v18);
      *(_QWORD *)&v144 = v85;
      v86 = v14();
      v142 = *(NSString **)(v1 + OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_alignment);
      v87 = swift_bridgeObjectRetain();
      ((void (*)(uint64_t *__return_ptr, uint64_t))v15)(v162, v87);
      v88 = sub_10027E350((uint64_t)v162, (uint64_t)v171);
      v89 = v172;
      if (v172)
      {
        v141 = (void (*)(char *, uint64_t))v171[2];
        swift_bridgeObjectRetain();
        v88 = (uint64_t)sub_10025C9BC(v162);
      }
      else
      {
        v141 = 0;
      }
      ((void (*)(uint64_t *__return_ptr, uint64_t))v15)(v163, v88);
      v122 = sub_10027E350((uint64_t)v163, (uint64_t)v167);
      if (v168)
      {
        v123 = v170;
        swift_bridgeObjectRetain();
        v122 = (uint64_t)sub_10025C9BC(v163);
      }
      else
      {
        v123 = _swiftEmptyArrayStorage;
      }
      v143 = v16;
      ((void (*)(uint64_t *__return_ptr, uint64_t))v15)(v164, v122);
      sub_10027E350((uint64_t)v164, (uint64_t)v165);
      if (v165[3])
      {
        v124 = v166;
        sub_10025C9BC(v164);
        v125 = v124 & 1;
      }
      else
      {
        v125 = 0;
      }
      memcpy(v174, (const void *)(v21 + OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_specs), 0x219uLL);
      v126 = objc_allocWithZone((Class)_s19SBS_TextContentViewCMa());
      sub_10026EC3C((uint64_t)v174);
      v127 = sub_1002770A0((uint64_t)v145, v144, v86, (uint64_t)v142, (char)v146, v147, (uint64_t)v141, v89, (uint64_t)v123, v125, v174);
      v128 = *(void **)v19;
      *(_QWORD *)v19 = v127;
      *(_QWORD *)(v19 + 8) = &off_10045DF88;
      v129 = v127;
      sub_10027B9A4(v128);
      swift_release(v143);
      swift_release(v148);
      swift_release(v149);
      swift_bridgeObjectRelease();

    }
    else
    {
      if (v20)
      {
        v90 = _s15TextContentViewCMa();
        v18 = swift_dynamicCastClass(v20, v90);
        if (v18)
        {
          v91 = v18;
          v146 = v20;
          v92 = v13();
          v93 = v91 + OBJC_IVAR___MusicTextContentView_content;
          v147 = v12;
          v95 = *(void **)(v91 + OBJC_IVAR___MusicTextContentView_content);
          v94 = *(_QWORD *)(v91 + OBJC_IVAR___MusicTextContentView_content + 8);
          v96 = *(_BYTE *)(v91 + OBJC_IVAR___MusicTextContentView_content + 16);
          *(_QWORD *)v93 = v92;
          *(_QWORD *)(v93 + 8) = v97;
          *(_BYTE *)(v93 + 16) = 0;
          swift_bridgeObjectRetain_n(v97, 2);
          sub_10027B364(v95, v94, v96);
          sub_10027B384(v95, v94, v96);
          v98 = sub_10024BB04((uint64_t)&off_100459D88);
          sub_10027AEB0(v98);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_10027B384(v95, v94, v96);
          swift_bridgeObjectRelease();
          *(_QWORD *)(v91 + OBJC_IVAR___MusicTextContentView_alignment) = *(_QWORD *)(v1
                                                                                    + OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_alignment);
          v99 = sub_10024BB04((uint64_t)&off_100459DB0);
          sub_10027AEB0(v99);

          swift_release(v16);
          swift_release(v148);
          swift_release(v149);
LABEL_48:
          swift_bridgeObjectRelease();
LABEL_49:
          swift_bridgeObjectRelease();
          return sub_10000682C(v161);
        }
      }
      v110 = v149;
      v111 = (void *)((uint64_t (*)(uint64_t))v13)(v18);
      v113 = v112;
      memcpy(v174, (const void *)(v1 + OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_specs), 0x219uLL);
      objc_allocWithZone((Class)_s15TextContentViewCMa());
      sub_10026EC3C((uint64_t)v174);
      v114 = sub_10027AA80(v111, v113, 0, (uint64_t)v174);
      *(_QWORD *)&v114[OBJC_IVAR___MusicTextContentView_alignment] = *(_QWORD *)(v1
                                                                               + OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_alignment);
      v115 = sub_10024BB04((uint64_t)&off_100459DD8);
      sub_10027AEB0(v115);
      swift_bridgeObjectRelease();
      v116 = *(void **)v19;
      *(_QWORD *)v19 = v114;
      *(_QWORD *)(v19 + 8) = &off_10045E4C8;
      v117 = v114;
      sub_10027B9A4(v116);
      swift_release(v16);
      swift_release(v148);
      swift_release(v110);
      swift_bridgeObjectRelease();

    }
  }
  else if (swift_dynamicCast(v150, v161, v11, &type metadata for Lyrics.SongwritersLine, 0))
  {
    v147 = v153;
    v148 = v1;
    v149 = objc_msgSend(objc_allocWithZone((Class)NSMutableAttributedString), "init");
    String.LocalizationValue.init(stringLiteral:)(0x206E657474697257, 0xEC000000203A7942);
    v146 = *(id *)(v5 + 16);
    ((void (*)(char *, char *, uint64_t))v146)(v7, v9, v4);
    if (qword_100498860 != -1)
      swift_once(&qword_100498860, sub_100232E30);
    v27 = qword_1004A2F90;
    static Locale.current.getter((id)qword_1004A2F90);
    v28 = String.init(localized:table:bundle:locale:comment:)(v7, 0, 0, v27, v3, 0, 0, 256);
    v137 = v29;
    v138 = v28;
    v141 = *(void (**)(char *, uint64_t))(v5 + 8);
    v141(v9, v4);
    v145 = (id)sub_100005574(&qword_10049A390);
    v30 = swift_allocObject(v145, 72, 7);
    v144 = xmmword_100384A80;
    *(_OWORD *)(v30 + 16) = xmmword_100384A80;
    *(_QWORD *)(v30 + 32) = NSFontAttributeName;
    v31 = (void *)objc_opt_self(UIFontMetrics);
    v143 = v31;
    v142 = NSFontAttributeName;
    v32 = objc_msgSend(v31, "defaultMetrics");
    v140 = (id)objc_opt_self(UIFont);
    v33 = objc_msgSend(v140, "systemFontOfSize:weight:", 22.0, UIFontWeightBold);
    v34 = objc_msgSend(v32, "scaledFontForFont:", v33);

    v139 = sub_1000087DC(0, (unint64_t *)&qword_100498E28, UIFont_ptr);
    *(_QWORD *)(v30 + 64) = v139;
    *(_QWORD *)(v30 + 40) = v34;
    sub_1002338B8(v30);
    v35 = objc_allocWithZone((Class)NSAttributedString);
    v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    _s3__C3KeyVMa_1(0);
    v138 = v37;
    v137 = sub_10026F718();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v39 = objc_msgSend(v35, "initWithString:attributes:", v36, isa);

    v136 = v39;
    objc_msgSend(v149, "appendAttributedString:", v39);
    *(_QWORD *)&v174[0] = v147;
    String.LocalizationValue.init(stringLiteral:)(8236, 0xE200000000000000);
    ((void (*)(char *, char *, uint64_t))v146)(v7, v9, v4);
    v40 = qword_1004A2F90;
    static Locale.current.getter((id)qword_1004A2F90);
    v41 = String.init(localized:table:bundle:locale:comment:)(v7, 0, 0, v40, v3, 0, 0, 256);
    v43 = v42;
    v141(v9, v4);
    v44 = sub_100005574(&qword_10049AC08);
    v45 = sub_10027E304();
    BidirectionalCollection<>.joined(separator:)(v41, v43, v44, v45);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v46 = swift_allocObject(v145, 72, 7);
    *(_OWORD *)(v46 + 16) = v144;
    v47 = v142;
    *(_QWORD *)(v46 + 32) = v142;
    v48 = v47;
    v49 = objc_msgSend(v143, "defaultMetrics");
    v50 = objc_msgSend(v140, "systemFontOfSize:weight:", 22.0, UIFontWeightMedium);
    v51 = objc_msgSend(v49, "scaledFontForFont:", v50);

    *(_QWORD *)(v46 + 64) = v139;
    *(_QWORD *)(v46 + 40) = v51;
    sub_1002338B8(v46);
    v52 = objc_allocWithZone((Class)NSAttributedString);
    v53 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v54 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v55 = objc_msgSend(v52, "initWithString:attributes:", v53, v54);

    v56 = v149;
    objc_msgSend(v149, "appendAttributedString:", v55);
    v57 = v148;
    v58 = v148 + OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_contentView;
    v59 = *(void **)(v148 + OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_contentView);
    if (v59)
    {
      v60 = _s15TextContentViewCMa();
      v61 = swift_dynamicCastClass(v59, v60);
      if (v61)
      {
        v62 = v61;
        v63 = v61 + OBJC_IVAR___MusicTextContentView_content;
        v64 = *(void **)(v61 + OBJC_IVAR___MusicTextContentView_content);
        v65 = *(_QWORD *)(v61 + OBJC_IVAR___MusicTextContentView_content + 8);
        v66 = *(_BYTE *)(v61 + OBJC_IVAR___MusicTextContentView_content + 16);
        *(_QWORD *)v63 = v56;
        *(_QWORD *)(v63 + 8) = 0;
        *(_BYTE *)(v63 + 16) = 1;
        v67 = v56;
        v68 = v59;
        sub_10027B364(v64, v65, v66);
        sub_10027B384(v64, v65, v66);
        v69 = sub_10024BB04((uint64_t)&off_100459E00);
        sub_10027AEB0(v69);

        swift_bridgeObjectRelease();
        sub_10027B384(v64, v65, v66);
        v70 = 4;
        if (!*(_BYTE *)(v57 + OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_specs + 72))
          v70 = *(_QWORD *)(v57 + OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_specs + 64);
        *(_QWORD *)(v62 + OBJC_IVAR___MusicTextContentView_alignment) = v70;
        v71 = sub_10024BB04((uint64_t)&off_100459E28);
        sub_10027AEB0(v71);

        goto LABEL_49;
      }
    }
    v100 = v57 + OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_specs;
    memcpy(v174, (const void *)(v57 + OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_specs), 0x219uLL);
    v101 = objc_allocWithZone((Class)_s15TextContentViewCMa());
    v102 = v56;
    v103 = v56;
    sub_10026EC3C((uint64_t)v174);
    v104 = sub_10027AA80(v102, 0, 1, (uint64_t)v174);
    v105 = v104;
    v106 = *(_QWORD *)(v100 + 64);
    if (*(_BYTE *)(v100 + 72))
      v106 = 4;
    *(_QWORD *)&v104[OBJC_IVAR___MusicTextContentView_alignment] = v106;
    v107 = sub_10024BB04((uint64_t)&off_100459E50);
    sub_10027AEB0(v107);
    swift_bridgeObjectRelease();
    v108 = *(void **)v58;
    *(_QWORD *)v58 = v105;
    *(_QWORD *)(v58 + 8) = &off_10045E4C8;
    v109 = v105;
    sub_10027B9A4(v108);

  }
  else if (swift_dynamicCast(v150, v161, v11, &type metadata for Lyrics.InstrumentalLine, 0))
  {
    v72 = v150[0];
    v74 = *(double *)&v150[1];
    v73 = *(double *)&v150[2];
    v75 = v151;
    v76 = v1 + OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_contentView;
    v77 = *(void **)(v1 + OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_contentView);
    if (v77 && (v78 = _s23InstrumentalContentViewCMa(), (v79 = swift_dynamicCastClass(v77, v78)) != 0))
    {
      v80 = v79;
      v81 = v79 + OBJC_IVAR___MusicInstrumentalContentView_line;
      *(_QWORD *)v81 = v72;
      *(double *)(v81 + 8) = v74;
      *(double *)(v81 + 16) = v73;
      *(_BYTE *)(v81 + 24) = v75;
      *(_BYTE *)(v79 + OBJC_IVAR___MusicInstrumentalContentView_isSelected) = 0;
      v82 = v77;
      sub_100278500();
      v83 = *(_QWORD *)(v1 + OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_alignment);
      v84 = *(_QWORD *)(v80 + OBJC_IVAR___MusicInstrumentalContentView_alignment);
      *(_QWORD *)(v80 + OBJC_IVAR___MusicInstrumentalContentView_alignment) = v83;
      if (v83 != v84)
        sub_100279F6C();
    }
    else
    {
      memcpy(v174, (const void *)(v1 + OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_specs), 0x219uLL);
      objc_allocWithZone((Class)_s23InstrumentalContentViewCMa());
      sub_10026EC3C((uint64_t)v174);
      v118 = (char *)sub_100278300(v72, v75, v174, v74, v73);
      v119 = *(_QWORD *)(v1 + OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_alignment);
      v120 = *(_QWORD *)&v118[OBJC_IVAR___MusicInstrumentalContentView_alignment];
      *(_QWORD *)&v118[OBJC_IVAR___MusicInstrumentalContentView_alignment] = v119;
      if (v119 != v120)
        sub_100279F6C();
      v121 = *(void **)v76;
      *(_QWORD *)v76 = v118;
      *(_QWORD *)(v76 + 8) = &off_10045E0F0;
      v82 = v118;
      sub_10027B9A4(v121);

    }
  }
  return sub_10000682C(v161);
}

id sub_10027DE44()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SyncedLyricsLineView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SyncedLyricsLineView()
{
  return objc_opt_self(_TtC11MusicCoreUI20SyncedLyricsLineView);
}

char *sub_10027DF28(_QWORD *a1, uint64_t a2, const void *a3)
{
  _BYTE *v3;
  uint64_t v7;
  uint64_t v8;
  id v9;
  char *v10;
  char *v11;
  char *v12;
  id v13;
  NSString v14;
  id v15;
  char *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  id v22;
  id v23;
  id v24;
  double v25;
  double v26;
  uint64_t v27;
  id v28;
  Class isa;
  id v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  Class v35;
  _OWORD v37[3];
  objc_super v38;

  v3[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_isScrolling] = 1;
  v7 = OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_alignment;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_alignment] = 0;
  v8 = OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_containerView;
  v9 = objc_allocWithZone((Class)UIView);
  v10 = v3;
  *(_QWORD *)&v3[v8] = objc_msgSend(v9, "init");
  v11 = &v10[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_contentView];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView____lazy_storage___backgroundView] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_blurRadius] = 0;
  v12 = &v10[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_previousBlurRadius];
  *(_QWORD *)v12 = 0;
  v12[8] = 1;
  sub_1000244B0((uint64_t)a1, (uint64_t)&v10[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_line]);
  *(_QWORD *)&v3[v7] = a2;
  memcpy(&v10[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_specs], a3, 0x219uLL);
  static String._unconditionallyBridgeFromObjectiveC(_:)(kCAFilterGaussianBlur);
  v13 = objc_allocWithZone((Class)CAFilter);
  sub_10026EC3C((uint64_t)a3);
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v15 = objc_msgSend(v13, "initWithType:", v14);

  *(_QWORD *)&v10[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_blurFilter] = v15;
  v38.receiver = v10;
  v38.super_class = (Class)type metadata accessor for SyncedLyricsLineView();
  v16 = (char *)objc_msgSendSuper2(&v38, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v17 = OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_containerView;
  v18 = *(void **)&v16[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_containerView];
  v19 = v16;
  objc_msgSend(v18, "setUserInteractionEnabled:", 0);
  objc_msgSend(*(id *)&v16[v17], "setAutoresizingMask:", 18);
  objc_msgSend(v19, "addSubview:", *(_QWORD *)&v16[v17]);
  objc_msgSend(v19, "setExclusiveTouch:", 1);
  v20 = *(_OWORD *)&v19[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_specs + 296];
  v21 = *(_OWORD *)&v19[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_specs + 312];
  v37[0] = *(_OWORD *)&v19[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_specs + 280];
  v37[1] = v20;
  v37[2] = v21;
  objc_msgSend(v19, "setTransform:", v37);
  v22 = objc_msgSend(v19, "layer");
  objc_msgSend(v22, "setShouldRasterize:", 1);

  v23 = objc_msgSend(v19, "layer");
  v24 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v24, "scale");
  v26 = v25;

  objc_msgSend(v23, "setRasterizationScale:", v26);
  v27 = OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_blurFilter;
  v28 = *(id *)&v19[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_blurFilter];
  isa = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v28, "setValue:forKey:", isa, kCAFilterInputRadius);

  v30 = objc_msgSend(v19, "layer");
  v31 = sub_100005574(&qword_1004999B0);
  v32 = swift_allocObject(v31, 64, 7);
  *(_OWORD *)(v32 + 16) = xmmword_100384A80;
  v33 = *(void **)&v19[v27];
  *(_QWORD *)(v32 + 56) = sub_1000087DC(0, (unint64_t *)&qword_1004999B8, CAFilter_ptr);
  *(_QWORD *)(v32 + 32) = v33;
  v34 = v33;
  v35 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v30, "setFilters:", v35);

  sub_10027CEE4();
  sub_10027C56C();

  sub_10000682C(a1);
  return v19;
}

unint64_t sub_10027E304()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10049AC10;
  if (!qword_10049AC10)
  {
    v1 = sub_100005600(&qword_10049AC08);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10049AC10);
  }
  return result;
}

uint64_t sub_10027E350(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005574(&qword_100499BB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10027E398()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10027E3BC()
{
  uint64_t v0;

  sub_10027CEA0(*(void **)(v0 + 16));
}

uint64_t sub_10027E3C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_10027E3D4(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_10027E3DC()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10027E400()
{
  uint64_t v0;

  sub_10027C9A0(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_10027E40C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

void sub_10027E430()
{
  _BYTE *v0;
  uint64_t v1;
  _QWORD *v2;
  char *v3;

  v0[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_isScrolling] = 1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_alignment] = 0;
  v1 = OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_containerView;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  v2 = &v0[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_contentView];
  *v2 = 0;
  v2[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView____lazy_storage___backgroundView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_blurRadius] = 0;
  v3 = &v0[OBJC_IVAR____TtC11MusicCoreUI20SyncedLyricsLineView_previousBlurRadius];
  *(_QWORD *)v3 = 0;
  v3[8] = 1;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001003B2590, "MusicCoreUI/SyncedLyricsLineView.swift", 38, 2, 165, 0);
  __break(1u);
}

uint64_t sub_10027E510()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_10027E53C()
{
  uint64_t v0;

  sub_10027C2CC(*(void **)(v0 + 16), *(char **)(v0 + 24));
}

id sub_10027E544()
{
  uint64_t v0;

  return sub_10027C37C(*(char **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t Radiosity.Specs.Radiosity.opacity.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_retain(v0[1]);
  return v1;
}

double SyncedLyricsManager.Configuration.maxEndTimeOffset.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

uint64_t SyncedLyricsManager.Configuration.init(animationDuration:finishLineAnimationDuration:maxEndTimeOffset:maxSelectedLines:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = a2;
  *(double *)(a4 + 16) = a5;
  *(double *)(a4 + 24) = a6;
  *(_QWORD *)(a4 + 32) = a3;
  return result;
}

uint64_t SyncedLyricsManager.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  swift_beginAccess(v1 + 24, v6, 0, 0);
  v3 = *(_QWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  return swift_retain(v3);
}

double SyncedLyricsManager.configuration.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v4;
  double result;
  _BYTE v6[24];

  swift_beginAccess(v1 + 24, v6, 1, 0);
  v3 = *(_QWORD *)(v1 + 32);
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 24) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 40) = v4;
  *(_QWORD *)(v1 + 56) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)&result = swift_release(v3).n128_u64[0];
  return result;
}

uint64_t SyncedLyricsManager.delegate.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 64, v2, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v0 + 64);
}

uint64_t SyncedLyricsManager.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v6[24];

  swift_beginAccess(v2 + 64, v6, 1, 0);
  *(_QWORD *)(v2 + 72) = a2;
  swift_unknownObjectWeakAssign(v2 + 64, a1);
  return swift_unknownObjectRelease(a1);
}

void (*SyncedLyricsManager.delegate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t Strong;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess(v1 + 64, v3, 33, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 64);
  v5 = *(_QWORD *)(v1 + 72);
  v3[3] = Strong;
  v3[4] = v5;
  return sub_10027E75C;
}

void sub_10027E75C(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  *(_QWORD *)(v5 + 72) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign(v5 + 64, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }
  free(v3);
}

uint64_t sub_10027E7CC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess(*a2 + 80, v6, 1, 0);
  v4 = *(_QWORD *)(v3 + 80);
  *(_QWORD *)(v3 + 80) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease(v4);
}

uint64_t SyncedLyricsManager.selectedLines.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 80, v2, 0, 0);
  return swift_bridgeObjectRetain();
}

uint64_t SyncedLyricsManager.isPlayingSpatial.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 88, v2, 0, 0);
  return *(unsigned __int8 *)(v0 + 88);
}

void SyncedLyricsManager.isPlayingSpatial.setter(char a1)
{
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v1 + 88, v3, 1, 0);
  *(_BYTE *)(v1 + 88) = a1;
}

uint64_t (*SyncedLyricsManager.isPlayingSpatial.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 88, a1, 33, 0);
  return j_j__swift_endAccess;
}

void SyncedLyricsManager.spatialOffset.getter()
{
  uint64_t v0;
  _BYTE v1[24];

  swift_beginAccess(v0 + 88, v1, 0, 0);
  if (*(_BYTE *)(v0 + 88) == 1)
    Lyrics.spatialOffset.getter();
}

uint64_t SyncedLyricsManager.adjustedElapsedTime.getter()
{
  uint64_t v0;
  double (*v1)(__n128);
  uint64_t v2;
  __n128 v3;
  double v4;
  double v5;
  double v6;
  uint64_t result;
  uint64_t v8;
  _BYTE v9[24];

  swift_beginAccess(v0 + 96, v9, 0, 0);
  v1 = *(double (**)(__n128))(v0 + 96);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 104);
    v3 = swift_retain(v2);
    v4 = v1(v3);
    swift_beginAccess(v0 + 88, &v8, 0, 0);
    v5 = 0.0;
    if (*(_BYTE *)(v0 + 88) == 1)
    {
      Lyrics.spatialOffset.getter();
      v5 = v6;
    }
    sub_10003A5C8((uint64_t)v1, v2);
    *(double *)&result = v4 - v5;
  }
  else
  {
    *(double *)&result = 0.0;
  }
  return result;
}

void sub_10027EA0C()
{
  uint64_t v0;
  uint64_t v1;
  double (*v2)(__n128);
  uint64_t v3;
  __n128 v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t Strong;
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[24];
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _QWORD v42[3];
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[24];
  _BYTE v46[24];

  v1 = v0;
  swift_beginAccess(v0 + 96, v46, 0, 0);
  v2 = *(double (**)(__n128))(v0 + 96);
  if (!v2)
    goto LABEL_27;
  v3 = *(_QWORD *)(v0 + 104);
  v4 = swift_retain(v3);
  v5 = v2(v4);
  swift_beginAccess(v0 + 88, v45, 0, 0);
  v6 = 0.0;
  if (*(_BYTE *)(v0 + 88) == 1)
  {
    Lyrics.spatialOffset.getter();
    v6 = v7;
  }
  sub_10003A5C8((uint64_t)v2, v3);
  v8 = v5 - v6;
  v9 = *(_QWORD *)(v0 + 16);
  Lyrics.line(before:useOriginalLines:)(0, (uint64_t)&v36, v8 + 0.1);
  if (!*((_QWORD *)&v37 + 1))
  {
    v13 = *(_QWORD *)(v9 + 40);
    if (*(_QWORD *)(v13 + 16))
    {
      sub_1000244B0(v13 + 32, (uint64_t)&v39);
    }
    else
    {
      v41 = 0;
      v39 = 0u;
      v40 = 0u;
    }
    sub_1002801C8((uint64_t)&v36);
    if (*((_QWORD *)&v40 + 1))
      goto LABEL_6;
    goto LABEL_26;
  }
  sub_1000137C8(&v36, (uint64_t)&v39);
  if (!*((_QWORD *)&v40 + 1))
  {
LABEL_26:
    sub_1002801C8((uint64_t)&v39);
LABEL_27:
    SyncedLyricsManager.update()();
    return;
  }
LABEL_6:
  sub_1000137C8(&v39, (uint64_t)v42);
  v11 = v43;
  v10 = v44;
  sub_10000ABC8(v42, v43);
  v12 = (*(double (**)(uint64_t))(*(_QWORD *)(v10 + 8) + 8))(v11);
  sub_1000244B0((uint64_t)v42, (uint64_t)&v39);
  if (v12 >= v8)
  {
    v15 = *((_QWORD *)&v40 + 1);
    v14 = v41;
    sub_10000ABC8(&v39, *((uint64_t *)&v40 + 1));
    v16 = vabdd_f64(v8, (*(double (**)(uint64_t))(*(_QWORD *)(v14 + 8) + 8))(v15));
    sub_10000682C(&v39);
    if (v16 > 0.1)
    {
      sub_1000244B0((uint64_t)v42, (uint64_t)&v36);
      swift_beginAccess(v1 + 112, v35, 33, 0);
      sub_100280370((uint64_t)&v36, v1 + 112);
      swift_endAccess(v35);
      sub_1002801C8((uint64_t)&v36);
      swift_beginAccess(v1 + 80, &v36, 1, 0);
      *(_QWORD *)(v1 + 80) = _swiftEmptyArrayStorage;
      swift_bridgeObjectRelease();
      swift_beginAccess(v1 + 64, v35, 0, 0);
      Strong = swift_unknownObjectWeakLoadStrong(v1 + 64);
      if (Strong)
      {
        v18 = Strong;
        v19 = *(_QWORD *)(v1 + 72);
        ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v1, ObjectType, v19);
        swift_unknownObjectRelease(v18);
      }
      v21 = swift_unknownObjectWeakLoadStrong(v1 + 64);
      if (!v21)
        goto LABEL_23;
      v22 = v21;
      v23 = *(_QWORD *)(v1 + 72);
      v24 = swift_getObjectType();
      (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t, uint64_t, double))(v23 + 16))(v1, v42, 0, v24, v23, v8);
      goto LABEL_22;
    }
  }
  else
  {
    sub_10000682C(&v39);
  }
  v25 = v43;
  v26 = v44;
  sub_10000ABC8(v42, v43);
  v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 16))(v25, v26);
  v28 = v27 + 1;
  if (__OFADD__(v27, 1))
  {
    __break(1u);
  }
  else
  {
    v29 = *(_QWORD *)(v9 + 40);
    if (v28 >= *(_QWORD *)(v29 + 16))
    {
      v38 = 0;
      v36 = 0u;
      v37 = 0u;
      goto LABEL_20;
    }
    if ((v28 & 0x8000000000000000) == 0)
    {
      sub_1000244B0(v29 + 40 * v28 + 32, (uint64_t)&v36);
LABEL_20:
      swift_beginAccess(v1 + 112, v35, 33, 0);
      sub_100280370((uint64_t)&v36, v1 + 112);
      swift_endAccess(v35);
      sub_1002801C8((uint64_t)&v36);
      v30 = sub_100005574(&qword_100499E98);
      v31 = swift_allocObject(v30, 72, 7);
      *(_OWORD *)(v31 + 16) = xmmword_100384A80;
      sub_1000244B0((uint64_t)v42, v31 + 32);
      swift_beginAccess(v1 + 80, &v36, 1, 0);
      *(_QWORD *)(v1 + 80) = v31;
      swift_bridgeObjectRelease();
      swift_beginAccess(v1 + 64, v35, 0, 0);
      v32 = swift_unknownObjectWeakLoadStrong(v1 + 64);
      if (!v32)
      {
LABEL_23:
        sub_10000682C(v42);
        return;
      }
      v22 = v32;
      v33 = *(_QWORD *)(v1 + 72);
      v34 = swift_getObjectType();
      (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, double))(v33 + 16))(v1, v42, 1, v34, v33, v8);
LABEL_22:
      swift_unknownObjectRelease(v22);
      goto LABEL_23;
    }
  }
  __break(1u);
}

uint64_t SyncedLyricsManager.elapsedTimeProvider.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 96, v3, 0, 0);
  v1 = *(_QWORD *)(v0 + 96);
  sub_10003A434(v1, *(_QWORD *)(v0 + 104));
  return v1;
}

uint64_t SyncedLyricsManager.elapsedTimeProvider.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  swift_beginAccess(v2 + 96, v8, 1, 0);
  v5 = *(_QWORD *)(v2 + 96);
  v6 = *(_QWORD *)(v2 + 104);
  *(_QWORD *)(v2 + 96) = a1;
  *(_QWORD *)(v2 + 104) = a2;
  sub_10003A434(a1, a2);
  sub_10003A5C8(v5, v6);
  sub_10027EA0C();
  return sub_10003A5C8(a1, a2);
}

void (*SyncedLyricsManager.elapsedTimeProvider.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess(v1 + 96, a1, 33, 0);
  return sub_10027EF18;
}

void sub_10027EF18(uint64_t a1, char a2)
{
  swift_endAccess(a1);
  if ((a2 & 1) == 0)
    sub_10027EA0C();
}

uint64_t SyncedLyricsManager.__allocating_init(lyrics:configuration:delegate:isPlayingSpatial:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;

  v11 = swift_allocObject(v5, 152, 7);
  ObjectType = swift_getObjectType();
  v13 = sub_1002800C0(a1, a2, a3, a5, v11, ObjectType, a4);
  swift_unknownObjectRelease(a3);
  return v13;
}

uint64_t SyncedLyricsManager.init(lyrics:configuration:delegate:isPlayingSpatial:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v12;

  ObjectType = swift_getObjectType();
  v12 = sub_1002800C0(a1, a2, a3, a5, v5, ObjectType, a4);
  swift_unknownObjectRelease(a3);
  return v12;
}

Swift::Void __swiftcall SyncedLyricsManager.update()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double (*v3)(__n128);
  uint64_t v4;
  __n128 v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  _UNKNOWN **v15;
  ValueMetadata *v16;
  double v17;
  uint64_t v18;
  double (*v19)(double);
  double v20;
  uint64_t v21;
  double (*v22)(double);
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t Strong;
  uint64_t v31;
  uint64_t v32;
  uint64_t ObjectType;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE v65[24];
  __int128 v66;
  ValueMetadata *v67;
  _UNKNOWN **v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE v73[40];
  _QWORD v74[3];
  uint64_t v75;
  uint64_t v76;
  _BYTE v77[24];
  _BYTE v78[24];
  _BYTE v79[24];
  _BYTE v80[24];
  _BYTE v81[24];
  _BYTE v82[24];
  _QWORD v83[3];
  uint64_t v84;
  uint64_t v85;

  v1 = v0;
  sub_10027FD0C();
  v2 = v0 + 112;
  swift_beginAccess(v2, v82, 0, 0);
  sub_100280180(v2, (uint64_t)&v66);
  if (v67)
  {
    sub_1000137C8(&v66, (uint64_t)v83);
    swift_beginAccess(v1 + 96, v81, 0, 0);
    v3 = *(double (**)(__n128))(v1 + 96);
    if (v3)
    {
      v4 = *(_QWORD *)(v1 + 104);
      v5 = swift_retain(v4);
      v6 = v3(v5);
      swift_beginAccess(v1 + 88, v80, 0, 0);
      v7 = 0.0;
      if (*(_BYTE *)(v1 + 88) == 1)
      {
        Lyrics.spatialOffset.getter();
        v7 = v8;
      }
      sub_10003A5C8((uint64_t)v3, v4);
      v9 = v1 + 80;
      swift_beginAccess(v1 + 80, v79, 0, 0);
      v10 = *(_QWORD *)(v1 + 80);
      v11 = *(_QWORD *)(v10 + 16);
      if (v11)
      {
        sub_1000244B0(v10 + 40 * v11 - 8, (uint64_t)&v66);
        v13 = v84;
        v12 = v85;
        sub_10000ABC8(v83, v84);
        v14 = (*(double (**)(uint64_t))(*(_QWORD *)(v12 + 8) + 8))(v13);
        v16 = v67;
        v15 = v68;
        sub_10000ABC8(&v66, (uint64_t)v67);
        v17 = v14 - (*((double (**)(ValueMetadata *))v15[1] + 2))(v16);
        swift_beginAccess(v1 + 24, v78, 0, 0);
        v19 = *(double (**)(double))(v1 + 24);
        v18 = *(_QWORD *)(v1 + 32);
        swift_retain(v18);
        v20 = v19(v17);
        swift_release(v18);
        sub_10000682C(&v66);
      }
      else
      {
        swift_beginAccess(v1 + 24, v78, 0, 0);
        v22 = *(double (**)(double))(v1 + 24);
        v21 = *(_QWORD *)(v1 + 32);
        swift_retain(v21);
        v20 = v22(0.0);
        swift_release(v21);
      }
      v23 = v6 - v7;
      v24 = *(_QWORD *)(*(_QWORD *)v9 + 16);
      if (v24)
      {
        sub_1000244B0(*(_QWORD *)v9 + 40 * v24 - 8, (uint64_t)&v66);
        v25 = sub_100005574(&qword_100499EA0);
        if ((swift_dynamicCast(v74, &v66, v25, &type metadata for Lyrics.InstrumentalLine, 6) & 1) != 0)
        {
          v26 = v74[0];
          v27 = v74[1];
          v28 = v74[2];
          v29 = v75;
          swift_beginAccess(v1 + 64, &v64, 0, 0);
          Strong = swift_unknownObjectWeakLoadStrong(v1 + 64);
          if (Strong)
          {
            v31 = Strong;
            v32 = *(_QWORD *)(v1 + 72);
            ObjectType = swift_getObjectType();
            v67 = &type metadata for Lyrics.InstrumentalLine;
            v68 = &protocol witness table for Lyrics.InstrumentalLine;
            v34 = swift_allocObject(&unk_10045E7F8, 48, 7);
            *(_QWORD *)&v66 = v34;
            *(_QWORD *)(v34 + 16) = v26;
            *(_QWORD *)(v34 + 24) = v27;
            *(_QWORD *)(v34 + 32) = v28;
            *(_BYTE *)(v34 + 40) = v29;
            (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t, double))(v32 + 24))(v1, &v66, ObjectType, v32, v23);
            swift_unknownObjectRelease(v31);
            sub_10000682C(&v66);
          }
        }
      }
      swift_beginAccess(v1 + 24, v77, 0, 0);
      if (sub_10027F6A4(v83, v1, v23 + *(double *)(v1 + 40), v20) == 1)
      {
        v35 = *(_QWORD *)(*(_QWORD *)v9 + 16);
        if (v35)
        {
          v36 = *(_QWORD *)v9 + 32;
          swift_bridgeObjectRetain();
          swift_beginAccess(v1 + 64, v65, 0, 0);
          do
          {
            sub_1000244B0(v36, (uint64_t)&v66);
            v37 = swift_unknownObjectWeakLoadStrong(v1 + 64);
            if (v37)
            {
              v38 = v37;
              v39 = *(_QWORD *)(v1 + 72);
              v40 = swift_getObjectType();
              (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(v39 + 40))(v1, &v66, v40, v39);
              swift_unknownObjectRelease(v38);
            }
            sub_10000682C(&v66);
            v36 += 40;
            --v35;
          }
          while (v35);
          swift_bridgeObjectRelease();
        }
      }
      v42 = v84;
      v41 = v85;
      sub_10000ABC8(v83, v84);
      if ((*(double (**)(uint64_t))(*(_QWORD *)(v41 + 8) + 8))(v42) <= v23 + v20)
      {
        v43 = *(_QWORD *)(*(_QWORD *)v9 + 16);
        if (v43)
        {
          sub_1000244B0(*(_QWORD *)v9 + 40 * v43 - 8, (uint64_t)v74);
          v45 = v84;
          v44 = v85;
          sub_10000ABC8(v83, v84);
          v46 = (*(double (**)(uint64_t))(*(_QWORD *)(v44 + 8) + 8))(v45);
          v48 = v75;
          v47 = v76;
          sub_10000ABC8(v74, v75);
          v49 = (*(double (**)(uint64_t))(*(_QWORD *)(v47 + 8) + 16))(v48);
          v51 = v75;
          v50 = v76;
          sub_10000ABC8(v74, v75);
          v52 = (*(double (**)(uint64_t))(*(_QWORD *)(v50 + 8) + 16))(v51) - *(double *)(v1 + 48);
          sub_1000244B0((uint64_t)v83, (uint64_t)&v66);
          v53 = sub_100005574(&qword_100499EA0);
          if (swift_dynamicCast(v73, &v66, v53, &type metadata for Lyrics.InstrumentalLine, 6))
            goto LABEL_37;
          sub_1000244B0((uint64_t)v74, (uint64_t)&v66);
          if (swift_dynamicCast(v73, &v66, v53, &type metadata for Lyrics.InstrumentalLine, 6))
            goto LABEL_37;
          if (*(_QWORD *)(*(_QWORD *)(v1 + 80) + 16) >= *(_QWORD *)(v1 + 56))
            goto LABEL_37;
          v54 = v84;
          v55 = v85;
          sub_10000ABC8(v83, v84);
          v56 = (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 16))(v54, v55);
          v57 = v75;
          v58 = v76;
          sub_10000ABC8(v74, v75);
          if ((*(uint64_t (**)(uint64_t, uint64_t))(v58 + 16))(v57, v58) >= v56
            || (v60 = v84,
                v59 = v85,
                sub_10000ABC8(v83, v84),
                (*(double (**)(uint64_t))(*(_QWORD *)(v59 + 8) + 8))(v60) >= v23))
          {
LABEL_37:
            if (v52 < v23)
              goto LABEL_31;
            sub_1000244B0((uint64_t)v74, (uint64_t)v73);
            if ((swift_dynamicCast(&v66, v73, v53, &type metadata for Lyrics.TextLine, 6) & 1) != 0)
            {
              v61 = v69;
              v62 = v70;
              v63 = v71;
              swift_release(v72);
              swift_release(v63);
              swift_release(v62);
              swift_bridgeObjectRelease();
              if (v61 - *(double *)(v1 + 48) < v23)
LABEL_31:
                sub_10027F930(v83, COERCE__INT64(v46 - v49), 0, v23);
            }
          }
          else
          {
            sub_10027FADC(v83);
          }
          sub_10000682C(v74);
        }
        else
        {
          sub_10027F930(v83, 0, 1, v23);
        }
      }
    }
    sub_10000682C(v83);
  }
  else
  {
    sub_1002801C8((uint64_t)&v66);
  }
}

