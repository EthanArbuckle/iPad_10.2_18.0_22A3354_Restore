uint64_t sub_100084660()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t KeyPath;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_BYTE *)(v0 + 113);
  v21 = *(_QWORD *)(v0 + 88);
  v22 = *(_QWORD *)(v0 + 96);
  v18 = *(_OWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 48);
  v17 = *(_QWORD *)(v0 + 56);
  v19 = *(_QWORD *)(v0 + 80);
  v20 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 104));
  v16 = v1 & 1;
  v3 = (uint64_t *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 96));
  swift_beginAccess(v3, v0 + 16, 1, 0);
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  v8 = v3[4];
  v9 = v3[5];
  v10 = (void *)v3[6];
  *v3 = v17;
  *(_OWORD *)(v3 + 1) = v18;
  v3[3] = v19;
  v3[4] = v16;
  v3[5] = v21;
  v3[6] = v22;
  sub_1000847E8(v20);
  sub_100084838(v4, v5, v6, v7, v8, v9, v10);
  v11 = (_QWORD *)swift_task_alloc(16);
  *v11 = &type metadata for Alert;
  KeyPath = swift_getKeyPath(&unk_100389150);
  swift_task_dealloc(v11);
  v13 = (_QWORD *)swift_task_alloc(16);
  *v13 = &type metadata for Alert;
  v14 = swift_getKeyPath(&unk_100389188);
  swift_task_dealloc(v13);
  *(_BYTE *)(v0 + 112) = 1;
  swift_retain(v2);
  static Published.subscript.setter(v0 + 112, v2, KeyPath, v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000847E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(id *)(a1 + 48);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void sub_100084838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  if (a6)
  {
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);

  }
}

uint64_t sub_100084888(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_10048FA74);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10000EA88;
  return PresentedViewState<A>.present(_:)(a1);
}

uint64_t sub_1000848D8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = PresentedViewState.isPresented.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100084904@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = PresentedViewState.isPresented.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100084930(char *a1)
{
  return PresentedViewState.isPresented.setter(*a1);
}

uint64_t sub_100084954(char *a1)
{
  return PresentedViewState.isPresented.setter(*a1);
}

uint64_t sub_100084978()
{
  return 8;
}

_QWORD *sub_100084984(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100084990(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Notice(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Logger.actions.unsafeMutableAddressor(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (qword_10048C590 != -1)
    swift_once(&qword_10048C590, sub_100086650);
  v2 = type metadata accessor for Logger(0, a2);
  return sub_1000086B4(v2, (uint64_t)static Logger.actions);
}

uint64_t ActionDeclaring.init(context:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _BYTE v29[32];

  v28 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3);
  v8 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v26 - v11;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = __chkstk_darwin(v10);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v26 - v17;
  v27 = a1;
  sub_10000684C((uint64_t)a1, (uint64_t)v29);
  v19 = sub_100005574(&qword_10048FA80);
  v20 = swift_dynamicCast(v12, v29, v19, AssociatedTypeWitness, 6);
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  if ((v20 & 1) != 0)
  {
    v21(v12, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v12, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, AssociatedTypeWitness);
    v22 = v28;
    (*(void (**)(char *, uint64_t, uint64_t))(a3 + 24))(v16, a2, a3);
    sub_10000682C(v27);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, AssociatedTypeWitness);
    v23 = 0;
    v24 = v22;
  }
  else
  {
    v23 = 1;
    v21(v12, 1, 1, AssociatedTypeWitness);
    sub_10000682C(v27);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    v24 = v28;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(v24, v23, 1, a2);
}

uint64_t AnyAction.init(identifier:contexts:resolver:logs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  void (*v54)(_BYTE *, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  Swift::String v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  Swift::String v73;
  uint64_t v74;
  uint64_t result;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (**v81)(uint64_t);
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  Swift::String v89;
  uint64_t *v90;
  uint64_t v91;
  void *v92;
  Swift::String v93;
  Swift::String v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  Swift::String v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  void *v105;
  Swift::String v106;
  Swift::String v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  _QWORD *v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  int *v132;
  _BYTE v133[32];
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;

  v124 = a4;
  v131 = *(_QWORD *)(a5 - 8);
  __chkstk_darwin(a1);
  v120 = (char *)&v113 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for AnyAction(0, v15, v16, v14);
  v130 = *(_QWORD *)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v122 = (uint64_t)&v113 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (int *)__chkstk_darwin(v18);
  v22 = (char *)&v113 - v21;
  v23 = (char *)&v113 + v20[10] - v21;
  *(_OWORD *)v23 = xmmword_100384A50;
  *((_OWORD *)v23 + 1) = 0u;
  *((_OWORD *)v23 + 2) = 0u;
  v125 = v20[11];
  *(uint64_t *)((char *)&v113 + v125 - v21) = 0;
  v24 = (uint64_t *)((char *)&v113 + v20[12] - v21);
  *v24 = 0;
  v24[1] = 0;
  v126 = v24;
  v25 = (uint64_t *)((char *)&v113 + v20[13] - v21);
  *v25 = 0;
  v25[1] = 0;
  v26 = (uint64_t *)((char *)&v113 + v20[14] - v21);
  *v26 = 0;
  v26[1] = 0;
  v129 = v26;
  v132 = v20;
  v27 = (uint64_t *)((char *)&v113 + v20[15] - v21);
  *v27 = 0;
  v27[1] = 0;
  v128 = v27;
  v28 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 24))(a5, a6);
  v127 = a3;
  if ((v28 & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    if (qword_10048CF08 != -1)
      swift_once(&qword_10048CF08, sub_1001EE2A4);
    v29 = v128;
    v30 = a7;
    if (static DeviceCapabilities.isInternalInstall == 1)
    {
      v137 = 0;
      v138 = 0xE000000000000000;
      _StringGuts.grow(_:)(32);
      v118 = v23;
      v31 = v25;
      v32 = v138;
      v33 = sub_100030D00(a1, a5, *(_QWORD *)(a6 + 8));
      v123 = a7;
      v34 = a5;
      v36 = v35;
      swift_bridgeObjectRelease(v32);
      v137 = v33;
      v138 = v36;
      v37._countAndFlagsBits = 0xD00000000000001ELL;
      v37._object = (void *)0x80000001003AE540;
      String.append(_:)(v37);
      v38 = v138;
      Array<A>.appendStringComponents(_:lineLength:bullet:)(v137, v138, 80, 120, 0xE100000000000000);
      v39 = v38;
      v25 = v31;
      v40 = v126;
      v41 = v125;
      v23 = v118;
      swift_bridgeObjectRelease(v39);
      v42 = v34;
      v30 = v123;
      (*(void (**)(uint64_t, uint64_t))(v131 + 8))(a1, v42);
      v44 = v129;
      v43 = v130;
LABEL_15:
      v52 = v132;
LABEL_18:
      sub_10000682C(v127);
      sub_100086740(*(_QWORD *)v23, *((_QWORD *)v23 + 1), *((_QWORD *)v23 + 2), *((_QWORD *)v23 + 3), *((void **)v23 + 4));

      sub_10003A5C8(*v40, v40[1]);
      sub_10003A5C8(*v25, v25[1]);
      sub_10003A5C8(*v44, v44[1]);
      sub_10003A5C8(*v29, v29[1]);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v43 + 56))(v30, 1, 1, v52);
    }
    (*(void (**)(uint64_t, uint64_t))(v131 + 8))(a1, a5);
    v43 = v130;
LABEL_14:
    v41 = v125;
    v44 = v129;
    v40 = v126;
    goto LABEL_15;
  }
  v121 = a2;
  v123 = a7;
  v119 = v25;
  v45 = a5;
  v46 = a3[3];
  v47 = a3[4];
  sub_10000ABC8(a3, v46);
  v48 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v47 + 8))(a1, v45, *(_QWORD *)(a6 + 16), v46, v47);
  if (!v48)
  {
    swift_bridgeObjectRelease(v121);
    v137 = 0;
    v138 = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    v61 = v138;
    v62 = sub_100030D00(a1, v45, *(_QWORD *)(a6 + 8));
    v64 = v63;
    swift_bridgeObjectRelease(v61);
    v137 = v62;
    v138 = v64;
    v65._countAndFlagsBits = 0xD000000000000014;
    v65._object = (void *)0x80000001003AE4E0;
    String.append(_:)(v65);
    v66 = v138;
    Array<A>.appendStringComponents(_:lineLength:bullet:)(v137, v138, 80, 120, 0xE100000000000000);
    swift_bridgeObjectRelease(v66);
    (*(void (**)(uint64_t, uint64_t))(v131 + 8))(a1, v45);
    v25 = v119;
    v30 = v123;
    v43 = v130;
    v29 = v128;
    goto LABEL_14;
  }
  v50 = v48;
  v115 = a6;
  v116 = a1;
  v117 = v45;
  v51 = *(_QWORD *)(v121 + 16);
  v52 = v132;
  if (!v51)
  {
    swift_bridgeObjectRelease(v121);
    v30 = v123;
    v40 = v126;
LABEL_17:
    v137 = 0;
    v138 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    v67 = v138;
    v68 = v116;
    v69 = v117;
    v70 = sub_100030D00(v116, v117, *(_QWORD *)(v115 + 8));
    v72 = v71;
    swift_bridgeObjectRelease(v67);
    v137 = v70;
    v138 = v72;
    v73._countAndFlagsBits = 0xD000000000000016;
    v73._object = (void *)0x80000001003AE500;
    String.append(_:)(v73);
    v74 = v138;
    Array<A>.appendStringComponents(_:lineLength:bullet:)(v137, v138, 80, 120, 0xE100000000000000);
    swift_bridgeObjectRelease(v74);
    (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v68, v69);
    v44 = v129;
    v43 = v130;
    v25 = v119;
    v29 = v128;
    v41 = v125;
    goto LABEL_18;
  }
  v53 = v49;
  v118 = v23;
  v114 = v22;
  v54 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v49 + 8);
  v55 = v121 + 32;
  while (1)
  {
    sub_10000684C(v55, (uint64_t)v133);
    v56 = type metadata accessor for Optional(0, v50);
    v57 = *(_QWORD *)(v56 - 8);
    __chkstk_darwin(v56);
    v59 = (char *)&v113 - v58;
    v54(v133, v50, v53);
    v60 = *(_QWORD *)(v50 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v59, 1, v50) != 1)
      break;
    (*(void (**)(char *, uint64_t))(v57 + 8))(v59, v56);
    v134 = 0u;
    v135 = 0u;
    v136 = 0;
    sub_100008758((uint64_t)&v134, &qword_10048FA88);
    v55 += 32;
    if (!--v51)
    {
      swift_bridgeObjectRelease(v121);
      v30 = v123;
      v52 = v132;
      v22 = v114;
      v40 = v126;
      v23 = v118;
      goto LABEL_17;
    }
  }
  *((_QWORD *)&v135 + 1) = v50;
  v136 = v53;
  v76 = sub_1000207D4(&v134);
  (*(void (**)(_QWORD *, char *, uint64_t))(v60 + 32))(v76, v59, v50);
  swift_bridgeObjectRelease(v121);
  sub_1000137C8(&v134, (uint64_t)&v137);
  sub_1000244B0((uint64_t)&v137, (uint64_t)&v134);
  v77 = (uint64_t)v120;
  v78 = v116;
  v79 = v117;
  (*(void (**)(char *, uint64_t, uint64_t))(v131 + 16))(v120, v116, v117);
  v80 = v122;
  result = sub_10008562C(&v134, v77, v79, v115, v122);
  v52 = v132;
  v81 = (uint64_t (**)(uint64_t))(v80 + v132[12]);
  if (*v81)
  {
    v82 = (*v81)(result);
    v85 = v129;
    v43 = v130;
    v22 = v114;
    v29 = v128;
    v40 = v126;
    v23 = v118;
    if (v83 != 1)
    {
      v98 = v82;
      v99 = v83;
      if ((v84 & 1) != 0)
      {
        sub_10001406C(v82, v83);
        v111 = v78;
        v112 = v117;
        v102 = v122;
      }
      else
      {
        *(_QWORD *)&v134 = sub_100030D00(v78, v117, *(_QWORD *)(v115 + 8));
        *((_QWORD *)&v134 + 1) = v100;
        v101._countAndFlagsBits = 10272;
        v101._object = (void *)0xE200000000000000;
        String.append(_:)(v101);
        v102 = v122;
        v103 = (uint64_t *)(v122 + v52[9]);
        v104 = *v103;
        v105 = (void *)v103[1];
        swift_bridgeObjectRetain();
        v106._countAndFlagsBits = v104;
        v22 = v114;
        v106._object = v105;
        String.append(_:)(v106);
        v29 = v128;
        swift_bridgeObjectRelease(v105);
        v107._countAndFlagsBits = 539828265;
        v107._object = (void *)0xE400000000000000;
        String.append(_:)(v107);
        if (v99)
          v108 = v98;
        else
          v108 = 0xD000000000000013;
        if (!v99)
          v99 = 0x80000001003AE520;
        v109 = v99;
        String.append(_:)(*(Swift::String *)&v108);
        swift_bridgeObjectRelease(v99);
        v110 = *((_QWORD *)&v134 + 1);
        Array<A>.appendStringComponents(_:lineLength:bullet:)(v134, *((uint64_t *)&v134 + 1), 80, 120, 0xE100000000000000);
        v43 = v130;
        swift_bridgeObjectRelease(v110);
        v111 = v116;
        v112 = v117;
      }
      (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v111, v112);
      (*(void (**)(uint64_t, int *))(v43 + 8))(v102, v52);
      sub_10000682C(&v137);
      v25 = v119;
      v30 = v123;
      v41 = v125;
      v44 = v129;
      goto LABEL_18;
    }
    v86 = v78;
    v87 = v117;
    *(_QWORD *)&v134 = sub_100030D00(v86, v117, *(_QWORD *)(v115 + 8));
    *((_QWORD *)&v134 + 1) = v88;
    v89._countAndFlagsBits = 10272;
    v89._object = (void *)0xE200000000000000;
    String.append(_:)(v89);
    v90 = (uint64_t *)(v122 + v52[9]);
    v91 = *v90;
    v92 = (void *)v90[1];
    swift_bridgeObjectRetain();
    v93._countAndFlagsBits = v91;
    v93._object = v92;
    String.append(_:)(v93);
    swift_bridgeObjectRelease(v92);
    v94._countAndFlagsBits = 41;
    v94._object = (void *)0xE100000000000000;
    String.append(_:)(v94);
    v95 = *((_QWORD *)&v134 + 1);
    Array<A>.appendStringComponents(_:lineLength:bullet:)(v134, *((uint64_t *)&v134 + 1), 80, 9673954, 0xA300000000000000);
    swift_bridgeObjectRelease(v95);
    (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v116, v87);
    sub_10000682C(&v137);
    sub_100086740(*(_QWORD *)v23, *((_QWORD *)v23 + 1), *((_QWORD *)v23 + 2), *((_QWORD *)v23 + 3), *((void **)v23 + 4));

    sub_10003A5C8(*v40, v40[1]);
    sub_10003A5C8(*v119, v119[1]);
    sub_10003A5C8(*v85, v85[1]);
    sub_10003A5C8(*v29, v29[1]);
    v96 = v130;
    (*(void (**)(char *, uint64_t, int *))(v130 + 32))(v22, v122, v52);
    v97 = v123;
    (*(void (**)(uint64_t, char *, int *))(v96 + 16))(v123, v22, v52);
    (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v96 + 56))(v97, 0, 1, v52);
    sub_10000682C(v127);
    return (*(uint64_t (**)(char *, int *))(v96 + 8))(v22, v52);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10008562C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  uint64_t DynamicType;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[40];
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v58 = a5;
  v8 = type metadata accessor for AnyAction(0, a3, a4, a4);
  v57 = *(_QWORD *)(v8 - 8);
  v9 = (int *)__chkstk_darwin(v8);
  v11 = (char *)&v48 - v10;
  v12 = (char *)&v48 + v9[10] - v10;
  *(_OWORD *)v12 = xmmword_100384A50;
  *((_OWORD *)v12 + 1) = 0u;
  *((_OWORD *)v12 + 2) = 0u;
  v51 = v9[11];
  *(_QWORD *)&v11[v51] = 0;
  v13 = (uint64_t *)((char *)&v48 + v9[12] - v10);
  *v13 = 0;
  v13[1] = 0;
  v14 = (uint64_t *)((char *)&v48 + v9[13] - v10);
  *v14 = 0;
  v14[1] = 0;
  v54 = v14;
  v15 = (uint64_t *)&v11[v9[14]];
  *v15 = 0;
  v15[1] = 0;
  v55 = v15;
  v16 = (uint64_t *)&v11[v9[15]];
  *v16 = 0;
  v16[1] = 0;
  v56 = v16;
  v50 = *(_QWORD *)(a3 - 8);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
  v52 = a2;
  v53 = a3;
  v17(v11, a2, a3);
  v18 = a1[3];
  v19 = sub_10000ABC8(a1, v18);
  DynamicType = swift_getDynamicType(v19, v18, 1);
  v21 = a1[4];
  v63 = DynamicType;
  v64 = v21;
  v22 = sub_100005574(&qword_10048FBB0);
  v23 = String.init<A>(describing:)(&v63, v22);
  v24 = (uint64_t *)&v11[*(int *)(v8 + 36)];
  *v24 = v23;
  v24[1] = v25;
  sub_1000244B0((uint64_t)a1, (uint64_t)v59);
  v26 = sub_100005574(&qword_10048FBB8);
  v27 = sub_100005574(&qword_10048FBC0);
  if ((swift_dynamicCast(&v60, v59, v26, v27, 6) & 1) != 0)
  {
    v28 = *((_QWORD *)&v61 + 1);
    v29 = v62;
    sub_10000ABC8(&v60, *((uint64_t *)&v61 + 1));
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v29 + 8))(&v63, v28, v29);
    v30 = v64;
    v49 = v63;
    v31 = v65;
    v32 = v66;
    v34 = v67;
    v33 = v68;
    sub_10000682C(&v60);
  }
  else
  {
    v62 = 0;
    v60 = 0u;
    v61 = 0u;
    sub_100008758((uint64_t)&v60, &qword_10048FBC8);
    v49 = 0;
    v31 = 0;
    v32 = 0;
    v34 = 0;
    v33 = 0;
    v30 = 1;
  }
  sub_100086740(*(_QWORD *)v12, *((_QWORD *)v12 + 1), *((_QWORD *)v12 + 2), *((_QWORD *)v12 + 3), *((void **)v12 + 4));
  *(_QWORD *)v12 = v49;
  *((_QWORD *)v12 + 1) = v30;
  *((_QWORD *)v12 + 2) = v31;
  *((_QWORD *)v12 + 3) = v32;
  *((_QWORD *)v12 + 4) = v34;
  *((_QWORD *)v12 + 5) = v33;
  v35 = a1[3];
  v36 = a1[4];
  sub_10000ABC8(a1, v35);
  v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 24))(v35, v36);
  (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v52, v53);
  v38 = v51;

  *(_QWORD *)&v11[v38] = v37;
  sub_1000244B0((uint64_t)a1, (uint64_t)&v60);
  v39 = swift_allocObject(&unk_100445F48, 56, 7);
  sub_1000137C8(&v60, v39 + 16);
  sub_10003A5C8(*v13, v13[1]);
  *v13 = (uint64_t)sub_100087884;
  v13[1] = v39;
  sub_1000244B0((uint64_t)a1, (uint64_t)&v60);
  v40 = swift_allocObject(&unk_100445F70, 56, 7);
  sub_1000137C8(&v60, v40 + 16);
  v41 = v54;
  sub_10003A5C8(*v54, v54[1]);
  *v41 = (uint64_t)&unk_10048FBD0;
  v41[1] = v40;
  sub_1000244B0((uint64_t)a1, (uint64_t)&v60);
  v42 = swift_allocObject(&unk_100445F98, 56, 7);
  sub_1000137C8(&v60, v42 + 16);
  v43 = v55;
  sub_10003A5C8(*v55, v55[1]);
  *v43 = (uint64_t)&unk_10048FBD8;
  v43[1] = v42;
  sub_1000244B0((uint64_t)a1, (uint64_t)&v60);
  v44 = swift_allocObject(&unk_100445FC0, 56, 7);
  sub_1000137C8(&v60, v44 + 16);
  v45 = v56;
  sub_10003A5C8(*v56, v56[1]);
  *v45 = (uint64_t)sub_100087988;
  v45[1] = v44;
  v46 = v57;
  (*(void (**)(uint64_t, char *, uint64_t))(v57 + 16))(v58, v11, v8);
  sub_10000682C(a1);
  return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v11, v8);
}

uint64_t AnyAction.canPerform.getter(uint64_t result)
{
  uint64_t v1;
  uint64_t (**v2)(void);

  v2 = (uint64_t (**)(void))(v1 + *(int *)(result + 48));
  if (*v2)
    return (*v2)();
  __break(1u);
  return result;
}

uint64_t sub_100085A5C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[3];
  v2 = a1[4];
  sub_10000ABC8(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

uint64_t sub_100085A9C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100085AB4, 0, 0);
}

uint64_t sub_100085AB4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 16);
  v2 = v1[3];
  v3 = v1[4];
  sub_10000ABC8(v1, v2);
  v4 = *(int **)(v3 + 32);
  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v0 + 24) = v5;
  *v5 = v0;
  v5[1] = sub_10001B490;
  return v7(v2, v3);
}

uint64_t sub_100085B2C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100085B44, 0, 0);
}

uint64_t sub_100085B44()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 16);
  v2 = v1[3];
  v3 = v1[4];
  sub_10000ABC8(v1, v2);
  v4 = *(int **)(v3 + 40);
  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v0 + 24) = v5;
  *v5 = v0;
  v5[1] = sub_10001ACC0;
  return v7(v2, v3);
}

uint64_t sub_100085BBC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[3];
  v2 = a1[4];
  sub_10000ABC8(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 48))(v1, v2);
}

uint64_t AnyAction.displayConfiguration.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100086788(v2 + *(int *)(a1 + 40), a2);
}

void *AnyAction.submenu.getter(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v2 = *(void **)(v1 + *(int *)(a1 + 44));
  v3 = v2;
  return v2;
}

uint64_t AnyAction.execute()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[3] = a1;
  v2[4] = v1;
  v3 = *(_QWORD *)(a1 - 8);
  v2[5] = v3;
  v2[6] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for MainActor(0);
  v2[7] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v2[8] = v5;
  v2[9] = v6;
  return swift_task_switch(sub_100085CBC, v5, v6);
}

void sub_100085CBC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t (**v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;
  void (*v8)(void);
  uint64_t v9;
  __n128 v10;
  uint64_t (**v11)(__n128);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t WitnessTable;
  uint64_t v18;
  __n128 v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  __n128 v48;
  void (*v49)(void);
  uint64_t v50;
  uint64_t v51[2];

  v1 = v0[3];
  v2 = (uint64_t (**)(void))(v0[4] + *(int *)(v1 + 48));
  if (!*v2)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v3 = (*v2)();
  v5 = v4;
  sub_10001406C(v3, v4);
  if (v5 == 1)
  {
    v6 = *(int **)(v0[4] + *(int *)(v0[3] + 52));
    if (v6)
    {
      v49 = (void (*)(void))((char *)v6 + *v6);
      v7 = (_QWORD *)swift_task_alloc(v6[1]);
      v0[10] = v7;
      *v7 = v0;
      v7[1] = sub_100086034;
      v8 = v49;
LABEL_15:
      v8();
      return;
    }
    goto LABEL_17;
  }
  v9 = v0[4];
  v10 = swift_release(v0[7]);
  v11 = (uint64_t (**)(__n128))(v9 + *(int *)(v1 + 48));
  if (*v11)
  {
    v12 = (*v11)(v10);
    v15 = v0[3];
    if (v13 == 1)
    {
      v16 = type metadata accessor for AnyAction.Error(0, *(_QWORD *)(v15 + 16), *(_QWORD *)(v15 + 24), v14);
      WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for AnyAction<A>.Error, v16);
      v18 = swift_allocError(v16, WitnessTable, 0, 0);
      *v20 = 0;
      v20[1] = 0;
    }
    else
    {
      v21 = v12;
      v22 = v13;
      v23 = type metadata accessor for AnyAction.Error(0, *(_QWORD *)(v15 + 16), *(_QWORD *)(v15 + 24), v14);
      v24 = swift_getWitnessTable(&protocol conformance descriptor for AnyAction<A>.Error, v23);
      v18 = swift_allocError(v23, v24, 0, 0);
      *v25 = v21;
      v25[1] = v22;
    }
    swift_willThrow(v19);
    if (qword_10048C590 != -1)
      swift_once(&qword_10048C590, sub_100086650);
    v28 = v0[5];
    v27 = v0[6];
    v30 = v0[3];
    v29 = v0[4];
    v31 = type metadata accessor for Logger(0, v26);
    sub_1000086B4(v31, (uint64_t)static Logger.actions);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v27, v29, v30);
    swift_errorRetain(v18);
    v32 = swift_errorRetain(v18);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter();
    v35 = os_log_type_enabled(v33, v34);
    v36 = v0[5];
    v37 = v0[6];
    v38 = v0[3];
    if (v35)
    {
      v39 = swift_slowAlloc(22, -1);
      v50 = swift_slowAlloc(64, -1);
      v51[0] = v50;
      *(_DWORD *)v39 = 136446466;
      v40 = (char *)sub_100030D00(v37, *(_QWORD *)(v38 + 16), *(_QWORD *)(*(_QWORD *)(v38 + 24) + 8));
      v42 = v41;
      *(_QWORD *)(v39 + 4) = sub_100019400(v40, v41, v51);
      swift_bridgeObjectRelease(v42);
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v38);
      *(_WORD *)(v39 + 12) = 2082;
      v0[2] = v18;
      swift_errorRetain(v18);
      v43 = sub_100005574((uint64_t *)&unk_1004911F0);
      v44 = (char *)String.init<A>(describing:)(v0 + 2, v43);
      v46 = v45;
      *(_QWORD *)(v39 + 14) = sub_100019400(v44, v45, v51);
      swift_bridgeObjectRelease(v46);
      swift_errorRelease(v18);
      swift_errorRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Failed to perform action %{public}s with error %{public}s", (uint8_t *)v39, 0x16u);
      swift_arrayDestroy(v50, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v39, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v36 + 8))(v0[6], v0[3]);
      swift_errorRelease(v18);
      swift_errorRelease(v18);
    }

    v47 = v0[6];
    swift_willThrow(v48);
    swift_task_dealloc(v47);
    v8 = (void (*)(void))v0[1];
    goto LABEL_15;
  }
LABEL_18:
  __break(1u);
}

uint64_t sub_100086034()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  *(_QWORD *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000861C0;
  else
    v4 = sub_100086094;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72));
}

void sub_100086094()
{
  _QWORD *v0;
  int *v1;
  _QWORD *v2;
  void (*v3)(void);

  v1 = *(int **)(v0[4] + *(int *)(v0[3] + 56));
  if (v1)
  {
    v3 = (void (*)(void))((char *)v1 + *v1);
    v2 = (_QWORD *)swift_task_alloc(v1[1]);
    v0[12] = v2;
    *v2 = v0;
    v2[1] = sub_100086100;
    v3();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100086100()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 96);
  *(_QWORD *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100086408;
  else
    v4 = sub_100086160;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72));
}

uint64_t sub_100086160()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  void (**v4)(uint64_t);
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  result = swift_release(*(_QWORD *)(v0 + 56));
  v4 = (void (**)(uint64_t))(v2 + *(int *)(v1 + 60));
  if (*v4)
  {
    v5 = *(_QWORD *)(v0 + 48);
    (*v4)(result);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000861C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v26;
  uint64_t v27[2];

  swift_release(*(_QWORD *)(v0 + 56));
  v2 = *(_QWORD *)(v0 + 88);
  if (qword_10048C590 != -1)
    swift_once(&qword_10048C590, sub_100086650);
  v4 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v7 = type metadata accessor for Logger(0, v1);
  sub_1000086B4(v7, (uint64_t)static Logger.actions);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v5, v6);
  swift_errorRetain(v2);
  v8 = swift_errorRetain(v2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter();
  v11 = os_log_type_enabled(v9, v10);
  v12 = *(_QWORD *)(v0 + 40);
  v13 = *(_QWORD *)(v0 + 48);
  v14 = *(_QWORD *)(v0 + 24);
  if (v11)
  {
    v15 = swift_slowAlloc(22, -1);
    v26 = swift_slowAlloc(64, -1);
    v27[0] = v26;
    *(_DWORD *)v15 = 136446466;
    v16 = (char *)sub_100030D00(v13, *(_QWORD *)(v14 + 16), *(_QWORD *)(*(_QWORD *)(v14 + 24) + 8));
    v18 = v17;
    *(_QWORD *)(v15 + 4) = sub_100019400(v16, v17, v27);
    swift_bridgeObjectRelease(v18);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
    *(_WORD *)(v15 + 12) = 2082;
    *(_QWORD *)(v0 + 16) = v2;
    swift_errorRetain(v2);
    v19 = sub_100005574((uint64_t *)&unk_1004911F0);
    v20 = (char *)String.init<A>(describing:)(v0 + 16, v19);
    v22 = v21;
    *(_QWORD *)(v15 + 14) = sub_100019400(v20, v21, v27);
    swift_bridgeObjectRelease(v22);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to perform action %{public}s with error %{public}s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 24));
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }

  v23 = *(_QWORD *)(v0 + 48);
  swift_willThrow(v24);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100086408()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v26;
  uint64_t v27[2];

  swift_release(*(_QWORD *)(v0 + 56));
  v2 = *(_QWORD *)(v0 + 104);
  if (qword_10048C590 != -1)
    swift_once(&qword_10048C590, sub_100086650);
  v4 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v7 = type metadata accessor for Logger(0, v1);
  sub_1000086B4(v7, (uint64_t)static Logger.actions);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v5, v6);
  swift_errorRetain(v2);
  v8 = swift_errorRetain(v2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter();
  v11 = os_log_type_enabled(v9, v10);
  v12 = *(_QWORD *)(v0 + 40);
  v13 = *(_QWORD *)(v0 + 48);
  v14 = *(_QWORD *)(v0 + 24);
  if (v11)
  {
    v15 = swift_slowAlloc(22, -1);
    v26 = swift_slowAlloc(64, -1);
    v27[0] = v26;
    *(_DWORD *)v15 = 136446466;
    v16 = (char *)sub_100030D00(v13, *(_QWORD *)(v14 + 16), *(_QWORD *)(*(_QWORD *)(v14 + 24) + 8));
    v18 = v17;
    *(_QWORD *)(v15 + 4) = sub_100019400(v16, v17, v27);
    swift_bridgeObjectRelease(v18);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
    *(_WORD *)(v15 + 12) = 2082;
    *(_QWORD *)(v0 + 16) = v2;
    swift_errorRetain(v2);
    v19 = sub_100005574((uint64_t *)&unk_1004911F0);
    v20 = (char *)String.init<A>(describing:)(v0 + 16, v19);
    v22 = v21;
    *(_QWORD *)(v15 + 14) = sub_100019400(v20, v21, v27);
    swift_bridgeObjectRelease(v22);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to perform action %{public}s with error %{public}s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 24));
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }

  v23 = *(_QWORD *)(v0 + 48);
  swift_willThrow(v24);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100086650(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for Logger(0, a2);
  sub_1000086DC(v2, static Logger.actions);
  sub_1000086B4(v2, (uint64_t)static Logger.actions);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001003ACFD0, 0x736E6F69746341, 0xE700000000000000);
}

uint64_t type metadata accessor for AnyAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100031DCC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyAction);
}

uint64_t static Logger.actions.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  if (qword_10048C590 != -1)
    swift_once(&qword_10048C590, sub_100086650);
  v3 = type metadata accessor for Logger(0, a1);
  v4 = sub_1000086B4(v3, (uint64_t)static Logger.actions);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a2, v4, v3);
}

void sub_100086740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);

  }
}

uint64_t sub_100086788(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005574(&qword_10048FA90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for AnyAction.Error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100031DCC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyAction.Error);
}

uint64_t sub_1000867DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 48);
}

uint64_t sub_1000867E4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100389310;
    v4[2] = &unk_100389328;
    v4[3] = &unk_100389340;
    v4[4] = &unk_100389358;
    v4[5] = &unk_100389358;
    v4[6] = &unk_100389358;
    v4[7] = &unk_100389358;
    swift_initStructMetadata(a1, 0, 8, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_10008687C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  void **v22;
  void *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  id v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x1000F8) != 0
    || (v7 = *(_QWORD *)(v5 + 64),
        ((((((((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 23) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 16 > 0x18))
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v17 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v8 = (_QWORD *)(((unint64_t)v4 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    v9 = (_QWORD *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v8 = *v9;
    v10 = v9[1];
    v8[1] = v10;
    v11 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
    v12 = (_QWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8);
    v13 = v12[1];
    if (v13 >= 0xFFFFFFFF)
      LODWORD(v13) = -1;
    v14 = v13 - 1;
    swift_bridgeObjectRetain(v10);
    if (v14 < 0)
    {
      *v11 = *v12;
      v18 = v12[1];
      v11[1] = v18;
      v11[2] = v12[2];
      v19 = v12[3];
      v11[3] = v19;
      v20 = (void *)v12[4];
      v11[4] = v20;
      v11[5] = v12[5];
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      v21 = v20;
    }
    else
    {
      v15 = *(_OWORD *)v12;
      v16 = *((_OWORD *)v12 + 2);
      *((_OWORD *)v11 + 1) = *((_OWORD *)v12 + 1);
      *((_OWORD *)v11 + 2) = v16;
      *(_OWORD *)v11 = v15;
    }
    v22 = (void **)(((unint64_t)v12 + 55) & 0xFFFFFFFFFFFFFFF8);
    v23 = *v22;
    v24 = (_QWORD *)(((unint64_t)v11 + 55) & 0xFFFFFFFFFFFFF8);
    *v24 = *v22;
    v25 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
    v26 = (unint64_t *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
    v27 = *v26;
    v28 = v23;
    if (v27 < 0xFFFFFFFF)
    {
      *(_OWORD *)v25 = *(_OWORD *)v26;
    }
    else
    {
      v29 = v26[1];
      *(_QWORD *)v25 = v27;
      *(_QWORD *)(v25 + 8) = v29;
      swift_retain(v29);
    }
    v30 = (v25 + 23) & 0xFFFFFFFFFFFFFFF8;
    v31 = ((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v31 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v30 = *(_OWORD *)v31;
    }
    else
    {
      v32 = *(_QWORD *)(v31 + 8);
      *(_QWORD *)v30 = *(_QWORD *)v31;
      *(_QWORD *)(v30 + 8) = v32;
      swift_retain(v32);
    }
    v33 = (v30 + 23) & 0xFFFFFFFFFFFFFFF8;
    v34 = (v31 + 23) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v34 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v33 = *(_OWORD *)v34;
    }
    else
    {
      v35 = *(_QWORD *)(v34 + 8);
      *(_QWORD *)v33 = *(_QWORD *)v34;
      *(_QWORD *)(v33 + 8) = v35;
      swift_retain(v35);
    }
    v36 = (v33 + 23) & 0xFFFFFFFFFFFFFFF8;
    v37 = (v34 + 23) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v37 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v36 = *(_OWORD *)v37;
      return v4;
    }
    v17 = *(_QWORD *)(v37 + 8);
    *(_QWORD *)v36 = *(_QWORD *)v37;
    *(_QWORD *)(v36 + 8) = v17;
  }
  swift_retain(v17);
  return v4;
}

void sub_100086AE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = (a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + 8));
  v5 = (v4 + 23) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(v5 + 8);
  LODWORD(v7) = -1;
  if (v6 < 0xFFFFFFFF)
    v7 = *(_QWORD *)(v5 + 8);
  if ((int)v7 - 1 < 0)
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(*(_QWORD *)(v5 + 24));

  }
  v8 = (id *)((v5 + 55) & 0xFFFFFFFFFFFFFFF8);

  v9 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  if (*v9 >= 0xFFFFFFFFuLL)
    swift_release(v9[1]);
  v10 = (_QWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8);
  if (*v10 >= 0xFFFFFFFFuLL)
    swift_release(v10[1]);
  v11 = (_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  if (*v11 >= 0xFFFFFFFFuLL)
    swift_release(v11[1]);
  v12 = (_QWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  if (*v12 >= 0xFFFFFFFFuLL)
    swift_release(v12[1]);
}

uint64_t sub_100086BEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  int v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  void **v20;
  void *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  id v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = v8[1];
  v7[1] = v9;
  v10 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  v12 = v11[1];
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  v13 = v12 - 1;
  swift_bridgeObjectRetain(v9);
  if (v13 < 0)
  {
    *v10 = *v11;
    v16 = v11[1];
    v10[1] = v16;
    v10[2] = v11[2];
    v17 = v11[3];
    v10[3] = v17;
    v18 = (void *)v11[4];
    v10[4] = v18;
    v10[5] = v11[5];
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v17);
    v19 = v18;
  }
  else
  {
    v14 = *(_OWORD *)v11;
    v15 = *((_OWORD *)v11 + 2);
    *((_OWORD *)v10 + 1) = *((_OWORD *)v11 + 1);
    *((_OWORD *)v10 + 2) = v15;
    *(_OWORD *)v10 = v14;
  }
  v20 = (void **)(((unint64_t)v11 + 55) & 0xFFFFFFFFFFFFFFF8);
  v21 = *v20;
  v22 = (_QWORD *)(((unint64_t)v10 + 55) & 0xFFFFFFFFFFFFF8);
  *v22 = *v20;
  v23 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = (unint64_t *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  v25 = *v24;
  v26 = v21;
  if (v25 < 0xFFFFFFFF)
  {
    *(_OWORD *)v23 = *(_OWORD *)v24;
  }
  else
  {
    v27 = v24[1];
    *(_QWORD *)v23 = v25;
    *(_QWORD *)(v23 + 8) = v27;
    swift_retain(v27);
  }
  v28 = (v23 + 23) & 0xFFFFFFFFFFFFFFF8;
  v29 = ((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v29 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v28 = *(_OWORD *)v29;
  }
  else
  {
    v30 = *(_QWORD *)(v29 + 8);
    *(_QWORD *)v28 = *(_QWORD *)v29;
    *(_QWORD *)(v28 + 8) = v30;
    swift_retain(v30);
  }
  v31 = (v28 + 23) & 0xFFFFFFFFFFFFFFF8;
  v32 = (v29 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v32 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v31 = *(_OWORD *)v32;
  }
  else
  {
    v33 = *(_QWORD *)(v32 + 8);
    *(_QWORD *)v31 = *(_QWORD *)v32;
    *(_QWORD *)(v31 + 8) = v33;
    swift_retain(v33);
  }
  v34 = (v31 + 23) & 0xFFFFFFFFFFFFFFF8;
  v35 = (v32 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v35 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v34 = *(_OWORD *)v35;
  }
  else
  {
    v36 = *(_QWORD *)(v35 + 8);
    *(_QWORD *)v34 = *(_QWORD *)v35;
    *(_QWORD *)(v34 + 8) = v36;
    swift_retain(v36);
  }
  return a1;
}

uint64_t sub_100086DCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  __int128 v22;
  __int128 v23;
  void **v24;
  void **v25;
  void *v26;
  void *v27;
  id v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  id v59;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = v8[1];
  v10 = v7[1];
  v7[1] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  v11 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v12 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  v13 = *(_QWORD *)(v11 + 8);
  LODWORD(v14) = -1;
  if (v13 >= 0xFFFFFFFF)
    LODWORD(v15) = -1;
  else
    v15 = *(_QWORD *)(v11 + 8);
  v16 = v15 - 1;
  if (v12[1] < 0xFFFFFFFFuLL)
    v14 = v12[1];
  v17 = v14 - 1;
  if ((v16 & 0x80000000) == 0)
  {
    if (v17 < 0)
    {
      *(_QWORD *)v11 = *v12;
      v18 = v12[1];
      *(_QWORD *)(v11 + 8) = v18;
      *(_QWORD *)(v11 + 16) = v12[2];
      v19 = v12[3];
      *(_QWORD *)(v11 + 24) = v19;
      v20 = (void *)v12[4];
      *(_QWORD *)(v11 + 32) = v20;
      *(_QWORD *)(v11 + 40) = v12[5];
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      v21 = v20;
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if ((v17 & 0x80000000) == 0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));

LABEL_11:
    v22 = *(_OWORD *)v12;
    v23 = *((_OWORD *)v12 + 2);
    *(_OWORD *)(v11 + 16) = *((_OWORD *)v12 + 1);
    *(_OWORD *)(v11 + 32) = v23;
    *(_OWORD *)v11 = v22;
    goto LABEL_12;
  }
  *(_QWORD *)v11 = *v12;
  v54 = v12[1];
  *(_QWORD *)(v11 + 8) = v54;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(v11 + 16) = v12[2];
  v55 = v12[3];
  v56 = *(_QWORD *)(v11 + 24);
  *(_QWORD *)(v11 + 24) = v55;
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRelease(v56);
  v57 = *(void **)(v11 + 32);
  v58 = (void *)v12[4];
  *(_QWORD *)(v11 + 32) = v58;
  v59 = v58;

  *(_QWORD *)(v11 + 40) = v12[5];
LABEL_12:
  v24 = (void **)((v11 + 55) & 0xFFFFFFFFFFFFFFF8);
  v25 = (void **)(((unint64_t)v12 + 55) & 0xFFFFFFFFFFFFFFF8);
  v26 = *v25;
  v27 = *v24;
  *v24 = *v25;
  v28 = v26;

  v29 = (_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  v30 = (unint64_t *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
  v31 = *v30;
  if (*v29 < 0xFFFFFFFFuLL)
  {
    if (v31 >= 0xFFFFFFFF)
    {
      v34 = v30[1];
      *v29 = v31;
      v29[1] = v34;
      swift_retain(v34);
      goto LABEL_19;
    }
  }
  else
  {
    if (v31 >= 0xFFFFFFFF)
    {
      v32 = v30[1];
      v33 = v29[1];
      *v29 = v31;
      v29[1] = v32;
      swift_retain(v32);
      swift_release(v33);
      goto LABEL_19;
    }
    swift_release(v29[1]);
  }
  *(_OWORD *)v29 = *(_OWORD *)v30;
LABEL_19:
  v35 = (_QWORD *)(((unint64_t)v29 + 23) & 0xFFFFFFFFFFFFFFF8);
  v36 = (unint64_t *)(((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFFFF8);
  v37 = *v36;
  if (*v35 < 0xFFFFFFFFuLL)
  {
    if (v37 >= 0xFFFFFFFF)
    {
      v40 = v36[1];
      *v35 = v37;
      v35[1] = v40;
      swift_retain(v40);
      goto LABEL_26;
    }
  }
  else
  {
    if (v37 >= 0xFFFFFFFF)
    {
      v38 = v36[1];
      v39 = v35[1];
      *v35 = v37;
      v35[1] = v38;
      swift_retain(v38);
      swift_release(v39);
      goto LABEL_26;
    }
    swift_release(v35[1]);
  }
  *(_OWORD *)v35 = *(_OWORD *)v36;
LABEL_26:
  v41 = (_QWORD *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF8);
  v42 = (unint64_t *)(((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF8);
  v43 = *v42;
  if (*v41 < 0xFFFFFFFFuLL)
  {
    if (v43 >= 0xFFFFFFFF)
    {
      v46 = v42[1];
      *v41 = v43;
      v41[1] = v46;
      swift_retain(v46);
      goto LABEL_33;
    }
  }
  else
  {
    if (v43 >= 0xFFFFFFFF)
    {
      v44 = v42[1];
      v45 = v41[1];
      *v41 = v43;
      v41[1] = v44;
      swift_retain(v44);
      swift_release(v45);
      goto LABEL_33;
    }
    swift_release(v41[1]);
  }
  *(_OWORD *)v41 = *(_OWORD *)v42;
LABEL_33:
  v47 = (_QWORD *)(((unint64_t)v41 + 23) & 0xFFFFFFFFFFFFFFF8);
  v48 = (unint64_t *)(((unint64_t)v42 + 23) & 0xFFFFFFFFFFFFFFF8);
  v49 = *v48;
  if (*v47 < 0xFFFFFFFFuLL)
  {
    if (v49 >= 0xFFFFFFFF)
    {
      v52 = v48[1];
      *v47 = v49;
      v47[1] = v52;
      swift_retain(v52);
      return a1;
    }
LABEL_39:
    *(_OWORD *)v47 = *(_OWORD *)v48;
    return a1;
  }
  if (v49 < 0xFFFFFFFF)
  {
    swift_release(v47[1]);
    goto LABEL_39;
  }
  v50 = v48[1];
  v51 = v47[1];
  *v47 = v49;
  v47[1] = v50;
  swift_retain(v50);
  swift_release(v51);
  return a1;
}

uint64_t sub_10008714C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_OWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = (__int128 *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  v11 = *v10;
  v12 = v10[2];
  v9[1] = v10[1];
  v9[2] = v12;
  *v9 = v11;
  v13 = (_QWORD *)(((unint64_t)v9 + 55) & 0xFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)v10 + 55) & 0xFFFFFFFFFFFFF8);
  *v13 = *v14;
  v15 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  v16 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v16 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v15 = *(_OWORD *)v16;
  }
  else
  {
    v17 = *(_QWORD *)(v16 + 8);
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *(_QWORD *)(v15 + 8) = v17;
  }
  v18 = (v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v19 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v18 = *(_OWORD *)v19;
  }
  else
  {
    v20 = *(_QWORD *)(v19 + 8);
    *(_QWORD *)v18 = *(_QWORD *)v19;
    *(_QWORD *)(v18 + 8) = v20;
  }
  v21 = (v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v22 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v21 = *(_OWORD *)v22;
  }
  else
  {
    v23 = *(_QWORD *)(v22 + 8);
    *(_QWORD *)v21 = *(_QWORD *)v22;
    *(_QWORD *)(v21 + 8) = v23;
  }
  v24 = (v21 + 23) & 0xFFFFFFFFFFFFFFF8;
  v25 = (uint64_t *)((v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  v26 = *v25;
  if ((unint64_t)*v25 < 0xFFFFFFFF)
  {
    *(_OWORD *)v24 = *(_OWORD *)v25;
  }
  else
  {
    v27 = v25[1];
    *(_QWORD *)v24 = v26;
    *(_QWORD *)(v24 + 8) = v27;
  }
  return a1;
}

uint64_t sub_10008729C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  void **v17;
  void **v18;
  void *v19;
  _QWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v45;
  void *v46;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = v7[1];
  v7[1] = v8[1];
  swift_bridgeObjectRelease(v9);
  v10 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_QWORD *)(v10 + 8);
  LODWORD(v13) = -1;
  if (v12 < 0xFFFFFFFF)
    v13 = *(_QWORD *)(v10 + 8);
  if ((int)v13 - 1 >= 0)
    goto LABEL_8;
  v14 = *(_QWORD *)(v11 + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  if ((int)v14 - 1 >= 0)
  {
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(*(_QWORD *)(v10 + 24));

LABEL_8:
    v15 = *(_OWORD *)v11;
    v16 = *(_OWORD *)(v11 + 32);
    *(_OWORD *)(v10 + 16) = *(_OWORD *)(v11 + 16);
    *(_OWORD *)(v10 + 32) = v16;
    *(_OWORD *)v10 = v15;
    goto LABEL_9;
  }
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
  swift_bridgeObjectRelease(v12);
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v11 + 16);
  v45 = *(_QWORD *)(v10 + 24);
  *(_QWORD *)(v10 + 24) = *(_QWORD *)(v11 + 24);
  swift_bridgeObjectRelease(v45);
  v46 = *(void **)(v10 + 32);
  *(_QWORD *)(v10 + 32) = *(_QWORD *)(v11 + 32);

  *(_QWORD *)(v10 + 40) = *(_QWORD *)(v11 + 40);
LABEL_9:
  v17 = (void **)((v10 + 55) & 0xFFFFFFFFFFFFFFF8);
  v18 = (void **)((v11 + 55) & 0xFFFFFFFFFFFFFFF8);
  v19 = *v17;
  *v17 = *v18;

  v20 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  v21 = (unint64_t *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  v22 = *v21;
  if (*v20 < 0xFFFFFFFFuLL)
  {
    if (v22 >= 0xFFFFFFFF)
    {
      v25 = v21[1];
      *v20 = v22;
      v20[1] = v25;
      goto LABEL_16;
    }
  }
  else
  {
    if (v22 >= 0xFFFFFFFF)
    {
      v23 = v21[1];
      v24 = v20[1];
      *v20 = v22;
      v20[1] = v23;
      swift_release(v24);
      goto LABEL_16;
    }
    swift_release(v20[1]);
  }
  *(_OWORD *)v20 = *(_OWORD *)v21;
LABEL_16:
  v26 = (_QWORD *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
  v27 = (unint64_t *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  v28 = *v27;
  if (*v26 < 0xFFFFFFFFuLL)
  {
    if (v28 >= 0xFFFFFFFF)
    {
      v31 = v27[1];
      *v26 = v28;
      v26[1] = v31;
      goto LABEL_23;
    }
  }
  else
  {
    if (v28 >= 0xFFFFFFFF)
    {
      v29 = v27[1];
      v30 = v26[1];
      *v26 = v28;
      v26[1] = v29;
      swift_release(v30);
      goto LABEL_23;
    }
    swift_release(v26[1]);
  }
  *(_OWORD *)v26 = *(_OWORD *)v27;
LABEL_23:
  v32 = (_QWORD *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8);
  v33 = (unint64_t *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF8);
  v34 = *v33;
  if (*v32 < 0xFFFFFFFFuLL)
  {
    if (v34 >= 0xFFFFFFFF)
    {
      v37 = v33[1];
      *v32 = v34;
      v32[1] = v37;
      goto LABEL_30;
    }
  }
  else
  {
    if (v34 >= 0xFFFFFFFF)
    {
      v35 = v33[1];
      v36 = v32[1];
      *v32 = v34;
      v32[1] = v35;
      swift_release(v36);
      goto LABEL_30;
    }
    swift_release(v32[1]);
  }
  *(_OWORD *)v32 = *(_OWORD *)v33;
LABEL_30:
  v38 = (_QWORD *)(((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF8);
  v39 = (unint64_t *)(((unint64_t)v33 + 23) & 0xFFFFFFFFFFFFFFF8);
  v40 = *v39;
  if (*v38 < 0xFFFFFFFFuLL)
  {
    if (v40 >= 0xFFFFFFFF)
    {
      v43 = v39[1];
      *v38 = v40;
      v38[1] = v43;
      return a1;
    }
LABEL_36:
    *(_OWORD *)v38 = *(_OWORD *)v39;
    return a1;
  }
  if (v40 < 0xFFFFFFFF)
  {
    swift_release(v38[1]);
    goto LABEL_36;
  }
  v41 = v39[1];
  v42 = v38[1];
  *v38 = v40;
  v38[1] = v41;
  swift_release(v42);
  return a1;
}

uint64_t sub_10008757C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((((((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
               + 23) & 0xFFFFFFFFFFFFFFF8)
             + 23) & 0xFFFFFFFFFFFFFFF8)
           + 23) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_100087628 + 4 * byte_100389260[v10]))();
  }
}

void sub_1000876AC(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((((((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 55) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)
             + 23) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((((((((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 55) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8)
       + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((((((((((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1000877D0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x100087848);
}

void sub_1000877D8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1000877E0);
  JUMPOUT(0x100087848);
}

void sub_100087824()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x100087848);
}

void sub_10008782C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x100087848);
}

uint64_t sub_100087834(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFF)
  {
    if (a2 < 0)
      JUMPOUT(0x100087840);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = (a2 - 1);
LABEL_6:
    JUMPOUT(0x100087848);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t sub_100087860()
{
  uint64_t v0;

  sub_10000682C((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100087884()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[5];
  v2 = v0[6];
  sub_10000ABC8(v0 + 2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

uint64_t sub_1000878C8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10048FBAC);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10000F894;
  v2[2] = v0 + 16;
  return swift_task_switch(sub_100085AB4, 0, 0);
}

uint64_t sub_100087928()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10048FBA4);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10000EA88;
  v2[2] = v0 + 16;
  return swift_task_switch(sub_100085B44, 0, 0);
}

uint64_t sub_100087988()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[5];
  v2 = v0[6];
  sub_10000ABC8(v0 + 2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 48))(v1, v2);
}

uint64_t ActionCondition.Result.failure.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a2 == 1)
    v2 = 0;
  else
    v2 = a1;
  sub_10002ECD0(a1, a2);
  return v2;
}

BOOL ActionCondition.Result.isTrue.getter(uint64_t a1, uint64_t a2)
{
  return a2 == 1;
}

uint64_t static ActionCondition.Result.failure(_:redactLog:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain(a2);
  return a1;
}

BOOL sub_100087A58(uint64_t a1, uint64_t a2)
{
  return _s9MusicCore15ActionConditionV6ResultO21__derived_enum_equalsySbAE_AEtFZ_0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
}

uint64_t ActionCondition.init(_:file:line:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  *a6 = result;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
  return result;
}

uint64_t ActionCondition.init(_:_:redactLog:file:line:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t (*a6)()@<X5>, uint64_t (*a7)()@<X6>, uint64_t (*a8)()@<X7>, uint64_t (**a9)()@<X8>)
{
  uint64_t result;

  result = swift_allocObject(&unk_100446018, 49, 7);
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 40) = a4;
  *(_BYTE *)(result + 48) = a5;
  *a9 = sub_100087DB0;
  a9[1] = (uint64_t (*)())result;
  a9[2] = a6;
  a9[3] = a7;
  a9[4] = a8;
  return result;
}

BOOL ActionCondition.isTrue.getter()
{
  uint64_t (**v0)(void);
  uint64_t v1;
  uint64_t v2;
  _BOOL8 v3;

  v1 = (*v0)();
  v3 = v2 == 1;
  sub_10001406C(v1, v2);
  return v3;
}

uint64_t static ActionConditionEvaluator.buildBlock(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v3 = a1 + 32;
    swift_bridgeObjectRetain(a1);
    v4 = 0;
    v15 = v3;
    v16 = v1;
    while (1)
    {
      v5 = *(_QWORD *)(v3 + 8 * v4);
      v6 = *(_QWORD *)(v5 + 16);
      if (v6)
        break;
LABEL_3:
      if (++v4 == v1)
      {
        swift_bridgeObjectRelease(a1);
        return 0;
      }
    }
    swift_bridgeObjectRetain_n(*(_QWORD *)(v3 + 8 * v4), 2);
    v7 = (uint64_t *)(v5 + 56);
    while (1)
    {
      v8 = *v7;
      v9 = (uint64_t (*)(uint64_t))*(v7 - 3);
      v10 = *(v7 - 2);
      swift_retain(v10);
      v11 = swift_bridgeObjectRetain(v8);
      v1 = v9(v11);
      v13 = v12;
      swift_bridgeObjectRelease(v8);
      swift_release(v10);
      if (v13 != 1)
        break;
      v7 += 5;
      if (!--v6)
      {
        swift_bridgeObjectRelease_n(v5, 2);
        v3 = v15;
        v1 = v16;
        goto LABEL_3;
      }
    }
    swift_bridgeObjectRelease(a1);
    swift_bridgeObjectRelease_n(v5, 2);
  }
  return v1;
}

uint64_t static ActionConditionEvaluator.buildExpression(_:)(__int128 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v8;

  v2 = sub_100005574(&qword_10048FBE0);
  v3 = swift_allocObject(v2, 72, 7);
  v4 = *((_QWORD *)a1 + 1);
  v6 = *a1;
  v8 = a1[1];
  v5 = v8;
  *(_OWORD *)(v3 + 16) = xmmword_100384A80;
  *(_OWORD *)(v3 + 32) = v6;
  *(_OWORD *)(v3 + 48) = v5;
  *(_QWORD *)(v3 + 64) = *((_QWORD *)a1 + 4);
  swift_retain(v4);
  sub_1000595EC((uint64_t)&v8);
  return v3;
}

BOOL _s9MusicCore15ActionConditionV6ResultO21__derived_enum_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  char v9;
  char v10;

  if (a2 == 1)
    return a5 == 1;
  if (a5 == 1)
    return 0;
  if (a2)
  {
    if (a5)
    {
      if (a1 != a4 || a2 != a5)
      {
        v9 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 0);
        v10 = 0;
        if ((v9 & 1) == 0)
          return v10 & 1;
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (!a5)
    {
LABEL_14:
      v10 = ((a3 & 1) == 0) ^ a6;
      return v10 & 1;
    }
    sub_10001406C(a1, 0);
  }
  v10 = 0;
  return v10 & 1;
}

uint64_t sub_100087D84()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 49, 7);
}

uint64_t sub_100087DB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  if (((*(uint64_t (**)(void))(v0 + 16))() & 1) != 0)
    return 0;
  swift_bridgeObjectRetain(v2);
  return v1;
}

uint64_t destroy for ActionCondition(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

_QWORD *initializeWithCopy for ActionCondition(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_retain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for ActionCondition(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v4);
  swift_release(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  return a1;
}

__n128 initializeWithTake for ActionCondition(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ActionCondition(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionCondition(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ActionCondition(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ActionCondition()
{
  return &type metadata for ActionCondition;
}

unint64_t destroy for ActionCondition.Result(uint64_t a1)
{
  unint64_t result;
  int v2;

  result = *(_QWORD *)(a1 + 8);
  v2 = -1;
  if (result < 0xFFFFFFFF)
    v2 = result;
  if (v2 - 1 < 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t _s9MusicCore15ActionConditionV6ResultOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF)
    v4 = *(_QWORD *)(a2 + 8);
  if ((int)v4 - 1 < 0)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    swift_bridgeObjectRetain(v3);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  }
  return a1;
}

uint64_t assignWithCopy for ActionCondition.Result(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v12;

  v4 = *(_QWORD *)(a1 + 8);
  LODWORD(v5) = -1;
  if (v4 >= 0xFFFFFFFF)
    LODWORD(v6) = -1;
  else
    v6 = *(_QWORD *)(a1 + 8);
  v7 = v6 - 1;
  if (*((_QWORD *)a2 + 1) < 0xFFFFFFFFuLL)
    v5 = *((_QWORD *)a2 + 1);
  v8 = v5 - 1;
  if (v7 < 0)
  {
    if (v8 < 0)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v12 = *((_QWORD *)a2 + 1);
      *(_QWORD *)(a1 + 8) = v12;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRelease(v4);
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
      return a1;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if ((v8 & 0x80000000) == 0)
  {
LABEL_11:
    v10 = *a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_OWORD *)a1 = v10;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v9 = *((_QWORD *)a2 + 1);
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t assignWithTake for ActionCondition.Result(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = -1;
  if (v4 < 0xFFFFFFFF)
    v5 = v4;
  if (v5 - 1 < 0)
  {
    v6 = *(_QWORD *)(a2 + 8);
    LODWORD(v7) = -1;
    if (v6 < 0xFFFFFFFF)
      v7 = *(_QWORD *)(a2 + 8);
    if ((int)v7 - 1 < 0)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v6;
      swift_bridgeObjectRelease(v4);
      goto LABEL_9;
    }
    swift_bridgeObjectRelease(v4);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_9:
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionCondition.Result(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  if ((v4 + 1) >= 2)
    return v4;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ActionCondition.Result(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

uint64_t sub_100088258(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

uint64_t sub_10008827C(uint64_t result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
  }
  else if (a2)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ActionCondition.Result()
{
  return &type metadata for ActionCondition.Result;
}

ValueMetadata *type metadata accessor for ActionConditionEvaluator()
{
  return &type metadata for ActionConditionEvaluator;
}

void *ActionDisplayConfiguration.image.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 32);
  v2 = v1;
  return v1;
}

uint64_t ActionDisplayConfiguration.attributes.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t ActionDisplayConfiguration.init(title:subtitle:image:attributes:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
  return result;
}

void *ActionDisplayConfiguration.Attributes.disabled.unsafeMutableAddressor()
{
  return &static ActionDisplayConfiguration.Attributes.disabled;
}

void *ActionDisplayConfiguration.Attributes.destructive.unsafeMutableAddressor()
{
  return &static ActionDisplayConfiguration.Attributes.destructive;
}

void *ActionDisplayConfiguration.Attributes.hidden.unsafeMutableAddressor()
{
  return &static ActionDisplayConfiguration.Attributes.hidden;
}

unint64_t sub_100088330()
{
  unint64_t result;

  result = qword_10048FBE8;
  if (!qword_10048FBE8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActionDisplayConfiguration.Attributes, &type metadata for ActionDisplayConfiguration.Attributes);
    atomic_store(result, (unint64_t *)&qword_10048FBE8);
  }
  return result;
}

unint64_t sub_100088378()
{
  unint64_t result;

  result = qword_10048FBF0;
  if (!qword_10048FBF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActionDisplayConfiguration.Attributes, &type metadata for ActionDisplayConfiguration.Attributes);
    atomic_store(result, (unint64_t *)&qword_10048FBF0);
  }
  return result;
}

unint64_t sub_1000883C0()
{
  unint64_t result;

  result = qword_10048FBF8;
  if (!qword_10048FBF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActionDisplayConfiguration.Attributes, &type metadata for ActionDisplayConfiguration.Attributes);
    atomic_store(result, (unint64_t *)&qword_10048FBF8);
  }
  return result;
}

unint64_t sub_100088408()
{
  unint64_t result;

  result = qword_10048FC00[0];
  if (!qword_10048FC00[0])
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActionDisplayConfiguration.Attributes, &type metadata for ActionDisplayConfiguration.Attributes);
    atomic_store(result, qword_10048FC00);
  }
  return result;
}

uint64_t sub_10008844C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_10000D4BC();
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

void destroy for ActionDisplayConfiguration(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

}

_QWORD *initializeWithCopy for ActionDisplayConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v6 = (void *)a2[4];
  v5 = a2[5];
  a1[4] = v6;
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  v7 = v6;
  return a1;
}

_QWORD *assignWithCopy for ActionDisplayConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = (void *)a1[4];
  v9 = (void *)a2[4];
  a1[4] = v9;
  v10 = v9;

  a1[5] = a2[5];
  return a1;
}

_QWORD *assignWithTake for ActionDisplayConfiguration(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(a1[3]);
  v6 = (void *)a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);

  a1[5] = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionDisplayConfiguration(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ActionDisplayConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ActionDisplayConfiguration()
{
  return &type metadata for ActionDisplayConfiguration;
}

ValueMetadata *type metadata accessor for ActionDisplayConfiguration.Attributes()
{
  return &type metadata for ActionDisplayConfiguration.Attributes;
}

uint64_t ActionList.init(_:lookup:resolver:excluding:)(uint64_t isUniquelyReferenced_nonNull_native, char *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t WitnessTable;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char **v35;
  __int128 v36;
  char *v37;
  char *v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD v45[8];
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  __int128 v50;
  _QWORD v51[4];
  _QWORD v52[4];
  _QWORD *v53;

  v8 = a4;
  v9 = isUniquelyReferenced_nonNull_native;
  v10 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16);
  v11 = _swiftEmptyArrayStorage;
  v48 = a3;
  if (v10)
  {
    v49 = a2;
    *(_QWORD *)&v50 = a4;
    v53 = _swiftEmptyArrayStorage;
    sub_100077388(0, v10, 0);
    v12 = v9 + 32;
    do
    {
      sub_10000684C(v12, (uint64_t)v52);
      sub_10000684C((uint64_t)v52, (uint64_t)v51);
      v13 = sub_100005574(&qword_10048FA80);
      v14 = String.init<A>(describing:)(v51, v13);
      v16 = v15;
      v17 = String.components(wrappedToLineLength:bullet:)(80, 62, 0xE100000000000000, v14, v15);
      swift_bridgeObjectRelease(v16);
      sub_10000682C(v52);
      v11 = v53;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v53);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)sub_100077388(0, v11[2] + 1, 1);
        v11 = v53;
      }
      v19 = v11[2];
      v18 = v11[3];
      if (v19 >= v18 >> 1)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)sub_100077388((_QWORD *)(v18 > 1), v19 + 1, 1);
        v11 = v53;
      }
      v11[2] = v19 + 1;
      v11[v19 + 4] = v17;
      v12 += 32;
      --v10;
    }
    while (v10);
    v20 = v48;
    a2 = v49;
    v8 = v50;
  }
  else
  {
    v20 = a3;
  }
  v52[0] = v11;
  v51[0] = a2;
  __chkstk_darwin(isUniquelyReferenced_nonNull_native);
  v45[2] = a5;
  v45[3] = a6;
  v45[4] = v9;
  v45[5] = v20;
  v45[6] = v8;
  v45[7] = v52;
  type metadata accessor for ActionLookup.Group(255, a5, a6, v21);
  v22 = type metadata accessor for Array(0);
  v24 = type metadata accessor for ActionGroup(0, a5, a6, v23);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v22);
  v26 = Sequence.compactMap<A>(_:)(sub_100088FC8, v45, v22, v24, WitnessTable);
  v27 = v51[0];
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v27);
  v28 = v52[0];
  v29 = swift_bridgeObjectRetain();
  v30 = Array<A>.asciiBoxed()(v29);
  swift_bridgeObjectRelease(v28);
  v31 = *((_QWORD *)v30 + 2);
  if (v31)
  {
    v47 = v26;
    v32 = qword_10048C590;
    swift_bridgeObjectRetain();
    if (v32 != -1)
      swift_once(&qword_10048C590, sub_100086650);
    v34 = type metadata accessor for Logger(0, v33);
    v46 = v30;
    v35 = (char **)(v30 + 40);
    *(_QWORD *)&v36 = 136446210;
    v50 = v36;
    v49 = (char *)&type metadata for Any + 8;
    do
    {
      v37 = *(v35 - 1);
      v38 = *v35;
      sub_1000086B4(v34, (uint64_t)static Logger.actions);
      v39 = swift_bridgeObjectRetain_n(v38, 2);
      v40 = Logger.logObject.getter(v39);
      v41 = static os_log_type_t.default.getter(v40);
      if (os_log_type_enabled(v40, v41))
      {
        v42 = swift_slowAlloc(12, -1);
        v43 = (_QWORD *)swift_slowAlloc(32, -1);
        v53 = v43;
        *(_DWORD *)v42 = v50;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v42 + 4) = sub_100019400(v37, v38, (uint64_t *)&v53);
        swift_bridgeObjectRelease_n(v38, 3);
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "%{public}s", (uint8_t *)v42, 0xCu);
        swift_arrayDestroy(v43, 1, v49);
        swift_slowDealloc(v43, -1, -1);
        swift_slowDealloc(v42, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v38, 2);
      }
      v35 += 2;
      --v31;
    }
    while (v31);
    v30 = v46;
    swift_bridgeObjectRelease(v46);
    v26 = v47;
    v20 = v48;
  }
  swift_bridgeObjectRelease(v30);
  sub_10000682C(v20);
  swift_bridgeObjectRelease(v52[0]);
  return v26;
}

uint64_t sub_100088AC8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v14 = *a1;
  v22 = _swiftEmptyArrayStorage;
  sub_1000244B0(a3, (uint64_t)v21);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = sub_100088BF8(v14, a2, v21, a4, (uint64_t)&v22, a6, a7);
  v16 = v22;
  v17 = (_QWORD *)*a5;
  result = swift_isUniquelyReferenced_nonNull_native(*a5);
  *a5 = (uint64_t)v17;
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_10003E2E8(0, v17[2] + 1, 1, v17);
    v17 = (_QWORD *)result;
    *a5 = result;
  }
  v20 = v17[2];
  v19 = v17[3];
  if (v20 >= v19 >> 1)
  {
    result = (uint64_t)sub_10003E2E8((_QWORD *)(v19 > 1), v20 + 1, 1, v17);
    v17 = (_QWORD *)result;
    *a5 = result;
  }
  v17[2] = v20 + 1;
  v17[v20 + 4] = v16;
  *a8 = v15;
  return result;
}

uint64_t sub_100088BF8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t WitnessTable;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[10];

  v20[9] = a1;
  v20[2] = a6;
  v20[3] = a7;
  v20[4] = a5;
  v20[5] = a4;
  v20[6] = a2;
  v20[7] = a3;
  v13 = type metadata accessor for Array(0);
  v15 = type metadata accessor for AnyAction(0, a6, a7, v14);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v13);
  v17 = Sequence.compactMap<A>(_:)(sub_10008915C, v20, v13, v15, WitnessTable);
  swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(a4);
  v18 = Array.count.getter(v17, v15);
  sub_10000682C(a3);
  if (v18 < 1)
  {
    swift_bridgeObjectRelease(v17);
    return 0;
  }
  return v17;
}

uint64_t sub_100088CFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t WitnessTable;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v36 = a2;
  v37 = a8;
  v14 = *(_QWORD *)(a6 - 8);
  __chkstk_darwin(a1);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v17 + 24))(v18, v17) & 1) != 0)
  {
    if (qword_10048CF08 != -1)
      swift_once(&qword_10048CF08, sub_1001EE2A4);
    if (static DeviceCapabilities.isInternalInstall != 1)
      goto LABEL_9;
    v38 = 0;
    v39 = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    v20 = v39;
    v21 = sub_100030D00(a1, a6, *(_QWORD *)(a7 + 8));
    v23 = v22;
    swift_bridgeObjectRelease(v20);
    v38 = v21;
    v39 = v23;
    v24 = 0xD00000000000001ELL;
    v25 = 0x80000001003AE540;
LABEL_8:
    String.append(_:)(*(Swift::String *)&v24);
    v32 = v39;
    Array<A>.appendStringComponents(_:lineLength:bullet:)(v38, v39, 80, 120, 0xE100000000000000);
    swift_bridgeObjectRelease(v32);
LABEL_9:
    v33 = type metadata accessor for AnyAction(0, a6, a7, v19);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v37, 1, 1, v33);
  }
  v38 = a3;
  v26 = type metadata accessor for Array(0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v26);
  if ((Sequence<>.contains(_:)(a1, v26, WitnessTable, *(_QWORD *)(*(_QWORD *)(a7 + 16) + 8)) & 1) != 0)
  {
    v38 = 0;
    v39 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    v28 = v39;
    v29 = sub_100030D00(a1, a6, *(_QWORD *)(a7 + 8));
    v31 = v30;
    swift_bridgeObjectRelease(v28);
    v38 = v29;
    v39 = v31;
    v25 = 0x80000001003AE560;
    v24 = 0xD000000000000016;
    goto LABEL_8;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, a6);
  sub_1000244B0(a5, (uint64_t)&v38);
  swift_bridgeObjectRetain();
  return AnyAction.init(identifier:contexts:resolver:logs:)((uint64_t)v16, a4, &v38, v36, a6, a7, v37);
}

uint64_t (*sub_100088F74(uint64_t (*result)(uint64_t a1), unint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;

  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a3 + 16) > a2)
  {
    v3 = result;
    v4 = a3 + 16 * a2;
    v5 = *(_QWORD *)(v4 + 40);
    *(_QWORD *)v3 = *(_QWORD *)(v4 + 32);
    *((_QWORD *)v3 + 1) = v5;
    swift_bridgeObjectRetain();
    return destroy for ActionError;
  }
  __break(1u);
  return result;
}

uint64_t sub_100088FC8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_100088AC8(a1, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(uint64_t **)(v2 + 56), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t type metadata accessor for ActionGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100031DCC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ActionGroup);
}

uint64_t type metadata accessor for ActionList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100031DCC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ActionList);
}

uint64_t *sub_100089000(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain(*(_QWORD *)(a3 + 8 * a2 + 32));
LABEL_5:
    *v3 = v4;
    return (uint64_t *)destroy for PresentationKind.NowPlayingDestination;
  }
  __break(1u);
  return result;
}

uint64_t destroy for PresentationKind.NowPlayingDestination(_QWORD *a1)
{
  return swift_release(*a1);
}

void (*sub_100089074(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return destroy for BagProvider.Result;
  }
  __break(1u);
  return result;
}

void destroy for BagProvider.Result(id *a1)
{

}

uint64_t *sub_1000890E8(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_unknownObjectRetain(*(_QWORD *)(a3 + 8 * a2 + 32));
LABEL_5:
    *v3 = v4;
    return (uint64_t *)sub_100089154;
  }
  __break(1u);
  return result;
}

uint64_t sub_100089154(_QWORD *a1)
{
  return swift_unknownObjectRelease(*a1);
}

uint64_t sub_10008915C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_100088CFC(a1, v2[4], v2[5], v2[6], v2[7], v2[2], v2[3], a2);
}

void ActionType.isHidden.getter(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1000891AC@<X0>(char a1@<W8>)
{
  return a1 & 1;
}

uint64_t sub_1000891C0()
{
  unint64_t v0;
  char v1;

  v0 = sub_10008928C();
  v1 = FeatureFlagsKey.isEnabled.getter((uint64_t)&type metadata for Feature.Music, v0);
  return sub_1000891AC(v1 ^ 1u);
}

unint64_t sub_100089248()
{
  unint64_t result;

  result = qword_10048FD08;
  if (!qword_10048FD08)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Feature.MediaPlayer, &type metadata for Feature.MediaPlayer);
    atomic_store(result, (unint64_t *)&qword_10048FD08);
  }
  return result;
}

unint64_t sub_10008928C()
{
  unint64_t result;

  result = qword_10048FD10;
  if (!qword_10048FD10)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Feature.Music, &type metadata for Feature.Music);
    atomic_store(result, (unint64_t *)&qword_10048FD10);
  }
  return result;
}

_QWORD *static ActionType.modelActionLookup.getter()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t inited;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  _BYTE v24[40];
  _BYTE v25[32];
  _QWORD v26[12];

  v0 = (_BYTE *)sub_100005574(&qword_10048E848);
  v1 = swift_allocObject(v0, 40, 7);
  v23 = xmmword_100384A80;
  *(_OWORD *)(v1 + 16) = xmmword_100384A80;
  v22 = v1;
  *(_QWORD *)(v1 + 32) = &off_10043CD90;
  v2 = swift_allocObject(v0, 40, 7);
  *(_OWORD *)(v2 + 16) = xmmword_100384A80;
  v21 = v2;
  *(_QWORD *)(v2 + 32) = &off_10043CDB8;
  v3 = swift_allocObject(v0, 40, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100384A80;
  *(_QWORD *)(v3 + 32) = &off_10043CDE0;
  v4 = swift_allocObject(v0, 40, 7);
  *(_OWORD *)(v4 + 16) = xmmword_100384A80;
  *(_QWORD *)(v4 + 32) = &off_10043CE08;
  v5 = swift_allocObject(v0, 40, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100384A80;
  *(_QWORD *)(v5 + 32) = &off_10043CE38;
  v6 = swift_allocObject(v0, 40, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100384A80;
  *(_QWORD *)(v6 + 32) = &off_10043CE60;
  v7 = swift_allocObject(v0, 40, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100384A80;
  *(_QWORD *)(v7 + 32) = &off_10043CE88;
  v8 = swift_allocObject(v0, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_100384A80;
  *(_QWORD *)(v8 + 32) = &off_10043CEB0;
  v9 = swift_allocObject(v0, 40, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100384A80;
  *(_QWORD *)(v9 + 32) = &off_10043CED8;
  v10 = (_QWORD *)swift_allocObject(v0, 40, 7);
  *((_OWORD *)v10 + 1) = xmmword_100384A80;
  v10[4] = &off_10043CF00;
  if (qword_10048CF08 != -1)
LABEL_25:
    swift_once(&qword_10048CF08, sub_1001EE2A4);
  if (static DeviceCapabilities.isInternalInstall == 1)
  {
    inited = swift_initStackObject(v0, v24);
    *(_OWORD *)(inited + 16) = v23;
    *(_QWORD *)(inited + 32) = &off_10043CF28;
    sub_10008A738((_QWORD *)inited);
  }
  v0 = v25;
  *(_QWORD *)&v23 = v26;
  v26[0] = v22;
  v26[1] = v21;
  v26[2] = v3;
  v26[3] = v4;
  v26[4] = v5;
  v26[5] = v6;
  v26[6] = v7;
  v26[7] = v8;
  v26[8] = v9;
  v26[9] = v10;
  v7 = 32;
  v26[10] = _swiftEmptyArrayStorage;
  v10 = _swiftEmptyArrayStorage;
  do
  {
    v3 = *(_QWORD *)&v25[v7];
    v4 = *(_QWORD *)(v3 + 16);
    v5 = v10[2];
    v6 = v5 + v4;
    if (__OFADD__(v5, v4))
    {
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(v10);
    if ((_DWORD)isUniquelyReferenced_nonNull_native && v6 <= v10[3] >> 1)
    {
      if (!*(_QWORD *)(v3 + 16))
        goto LABEL_5;
    }
    else
    {
      if (v5 <= v6)
        v13 = v5 + v4;
      else
        v13 = v5;
      v10 = sub_10003E408(isUniquelyReferenced_nonNull_native, v13, 1, v10);
      if (!*(_QWORD *)(v3 + 16))
      {
LABEL_5:
        if (v4)
          goto LABEL_22;
        goto LABEL_6;
      }
    }
    v14 = v10[2];
    if ((v10[3] >> 1) - v14 < v4)
      goto LABEL_23;
    v5 = (uint64_t)&v10[v14 + 4];
    v6 = v3 + 32;
    v15 = sub_100005574(&qword_10048E850);
    swift_arrayInitWithCopy(v5, v3 + 32, v4, v15);
    if (v4)
    {
      v16 = v10[2];
      v17 = __OFADD__(v16, v4);
      v18 = v16 + v4;
      if (v17)
        goto LABEL_24;
      v10[2] = v18;
    }
LABEL_6:
    swift_bridgeObjectRelease(v3);
    v7 += 8;
  }
  while (v7 != 120);
  v19 = sub_100005574(&qword_10048FD18);
  swift_arrayDestroy(v26, 11, v19);
  return v10;
}

uint64_t static ActionLookupBuilder.buildExpression(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v5 = type metadata accessor for ActionLookup.Group(255, a2, a3, a4);
  v6 = type metadata accessor for _ContiguousArrayStorage(0, v5);
  v7 = swift_allocObject(v6, 40, 7);
  v8 = static Array._adoptStorage(_:count:)(v7, 1);
  *v9 = a1;
  v10 = sub_10003001C(v8);
  swift_bridgeObjectRetain();
  return v10;
}

uint64_t static ActionLookupBuilder.buildBlock<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100089734(a1, a2, a3, a4, a5, (uint64_t)sub_100031DFC);
}

{
  return sub_100089734(a1, a2, a3, a4, a5, (uint64_t)sub_100030D94);
}

uint64_t static ActionLookupBuilder.buildOptional<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  if (a1)
  {
    v5 = a1;
  }
  else
  {
    v6 = type metadata accessor for ActionLookup.Group(0, a3, a5, a4);
    v5 = static Array._allocateUninitialized(_:)(0, v6);
  }
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t sub_100089734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;
  _QWORD v12[8];

  v12[7] = a1;
  v12[2] = a2;
  v12[3] = a3;
  v12[4] = a4;
  v12[5] = a5;
  type metadata accessor for ActionLookup.Group(255, a3, a5, a4);
  v7 = type metadata accessor for Array(255);
  v8 = type metadata accessor for Array(0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v8);
  v10 = swift_getWitnessTable(&protocol conformance descriptor for [A], v7);
  return Sequence.flatMap<A>(_:)(a6, v12, v8, v7, WitnessTable, v10);
}

uint64_t static ActionType.socialActionLookup.getter()
{
  int64_t v0;
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  int64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  _QWORD v26[3];

  v1 = sub_100005574(&qword_10048E848);
  v2 = swift_allocObject(v1, 40, 7);
  *(_OWORD *)(v2 + 16) = xmmword_100384A80;
  *(_QWORD *)(v2 + 32) = &off_10043CF50;
  v3 = v2 + 32;
  v4 = swift_allocObject(v1, 40, 7);
  *(_OWORD *)(v4 + 16) = xmmword_100384A80;
  *(_QWORD *)(v4 + 32) = &off_10043CF78;
  v5 = swift_allocObject(v1, 40, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100384A80;
  *(_QWORD *)(v5 + 32) = &off_10043CFA0;
  v26[0] = v2;
  v26[1] = v4;
  v26[2] = v5;
  swift_bridgeObjectRetain();
  result = (uint64_t)sub_10003E408(0, 1, 1, _swiftEmptyArrayStorage);
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_37;
  v7 = (_QWORD *)result;
  v8 = *(_QWORD *)(result + 16);
  if (v8 >= *(_QWORD *)(result + 24) >> 1)
  {
    __break(1u);
    goto LABEL_11;
  }
  v9 = result + 8 * v8 + 32;
  v10 = sub_100005574(&qword_10048E850);
  swift_arrayInitWithCopy(v9, v3, 1, v10);
  ++v7[2];
  swift_bridgeObjectRelease(v2);
  v2 = *(_QWORD *)(v4 + 16);
  v3 = v7[2];
  v0 = v3 + v2;
  if (__OFADD__(v3, v2))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v11 = v7[3];
  result = swift_bridgeObjectRetain();
  if (v0 <= (uint64_t)(v11 >> 1))
  {
    if (v2)
      goto LABEL_6;
LABEL_16:
    if (v2)
    {
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
LABEL_17:
    swift_bridgeObjectRelease(v4);
    v17 = *(_QWORD *)(v5 + 16);
    v18 = v7[2];
    v19 = v18 + v17;
    if (__OFADD__(v18, v17))
    {
      __break(1u);
    }
    else
    {
      v20 = v7[3];
      result = swift_bridgeObjectRetain();
      if (v19 <= (uint64_t)(v20 >> 1))
      {
        if (v17)
          goto LABEL_20;
LABEL_29:
        if (!v17)
          goto LABEL_30;
        goto LABEL_32;
      }
    }
    if (v18 <= v19)
      v24 = v18 + v17;
    else
      v24 = v18;
    result = (uint64_t)sub_10003E408((_QWORD *)1, v24, 1, v7);
    v7 = (_QWORD *)result;
    v18 = *(_QWORD *)(result + 16);
    if (*(_QWORD *)(v5 + 16))
    {
LABEL_20:
      if ((v7[3] >> 1) - v18 >= v17)
      {
        v21 = sub_100005574(&qword_10048E850);
        result = swift_arrayInitWithCopy(&v7[v18 + 4], v5 + 32, v17, v21);
        if (!v17)
        {
LABEL_30:
          swift_bridgeObjectRelease(v5);
          v25 = sub_100005574(&qword_10048FD18);
          swift_arrayDestroy(v26, 3, v25);
          return (uint64_t)v7;
        }
        v22 = v7[2];
        v14 = __OFADD__(v22, v17);
        v23 = v22 + v17;
        if (!v14)
        {
          v7[2] = v23;
          goto LABEL_30;
        }
        goto LABEL_36;
      }
      goto LABEL_34;
    }
    goto LABEL_29;
  }
LABEL_12:
  if (v3 <= v0)
    v16 = v0;
  else
    v16 = v3;
  result = (uint64_t)sub_10003E408((_QWORD *)1, v16, 1, v7);
  v7 = (_QWORD *)result;
  v3 = *(_QWORD *)(result + 16);
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_16;
LABEL_6:
  if ((v7[3] >> 1) - v3 < v2)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v12 = sub_100005574(&qword_10048E850);
  result = swift_arrayInitWithCopy(&v7[v3 + 4], v4 + 32, v2, v12);
  if (!v2)
    goto LABEL_17;
  v13 = v7[2];
  v14 = __OFADD__(v13, v2);
  v15 = v13 + v2;
  if (!v14)
  {
    v7[2] = v15;
    goto LABEL_17;
  }
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t ActionType.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100089B38 + 4 * word_1003896BA[a1]))(0x62694C6F54646461, 0xEC00000079726172);
}

unint64_t sub_100089B38()
{
  return 0xD000000000000012;
}

uint64_t sub_10008A078()
{
  return 0x6E556C6169636F73;
}

uint64_t sub_10008A0B0()
{
  return 1953656691;
}

uint64_t sub_10008A0C0()
{
  return 0x4C74736567677573;
}

uint64_t sub_10008A0E4()
{
  return 0x6F7661466F646E75;
}

uint64_t sub_10008A104()
{
  return 0x676775536F646E75;
}

uint64_t sub_10008A128()
{
  return 0x6C6C754677656976;
}

_UNKNOWN **static ActionType.allCases.getter()
{
  return &off_10043D558;
}

uint64_t sub_10008A15C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = ActionType.rawValue.getter(*a1);
  v5 = v4;
  v6 = ActionType.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_10008A1E4()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6);
  v2 = ActionType.rawValue.getter(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10008A244(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = ActionType.rawValue.getter(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10008A284()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6);
  v2 = ActionType.rawValue.getter(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10008A2E0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s9MusicCore10ActionTypeO8rawValueACSgSS_tcfC_0(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_10008A30C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = ActionType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_10008A334()
{
  char *v0;

  ActionType.isHidden.getter(*v0);
}

void sub_10008A33C(_QWORD *a1@<X8>)
{
  *a1 = &off_10043D558;
}

uint64_t sub_10008A34C()
{
  unsigned __int8 *v0;

  return ActionType.rawValue.getter(*v0);
}

uint64_t sub_10008A354(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;

  v2 = *(_QWORD *)(result + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  result = sub_10003DA68(result, v14, 1, v3);
  v3 = (_QWORD *)result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = v3[2];
  if ((v3[3] >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v8 = sub_100005574(&qword_10048D510);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  result = swift_arrayInitWithCopy((char *)v3 + v10 + *(_QWORD *)(v9 + 72) * v7, v6 + v10, v2, v8);
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease(v6);
    *v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

_QWORD *sub_10008A458(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  int64_t v13;

  v2 = result[2];
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= v3[3] >> 1)
  {
    if (v6[2])
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v13 = v4 + v2;
  else
    v13 = v4;
  result = sub_10003E074(result, v13, 1, v3);
  v3 = result;
  if (!v6[2])
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = v3[2];
  if ((v3[3] >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v8 = (uint64_t)&v3[11 * v7 + 4];
  v9 = sub_100005574(&qword_10048E860);
  result = (_QWORD *)swift_arrayInitWithCopy(v8, v6 + 4, v2, v9);
  if (!v2)
  {
LABEL_14:
    result = (_QWORD *)swift_bridgeObjectRelease(v6);
    *v1 = v3;
    return result;
  }
  v10 = v3[2];
  v11 = __OFADD__(v10, v2);
  v12 = v10 + v2;
  if (!v11)
  {
    v3[2] = v12;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

_QWORD *sub_10008A554(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  int64_t v13;

  v2 = result[2];
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= v3[3] >> 1)
  {
    if (v6[2])
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v13 = v4 + v2;
  else
    v13 = v4;
  result = sub_10003E2D4(result, v13, 1, v3);
  v3 = result;
  if (!v6[2])
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = v3[2];
  if ((v3[3] >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v8 = (uint64_t)&v3[5 * v7 + 4];
  v9 = sub_100005574(&qword_100493120);
  result = (_QWORD *)swift_arrayInitWithCopy(v8, v6 + 4, v2, v9);
  if (!v2)
  {
LABEL_14:
    result = (_QWORD *)swift_bridgeObjectRelease(v6);
    *v1 = v3;
    return result;
  }
  v10 = v3[2];
  v11 = __OFADD__(v10, v2);
  v12 = v10 + v2;
  if (!v11)
  {
    v3[2] = v12;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

char *sub_10008A650(char *result)
{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  v2 = *((_QWORD *)result + 2);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= *((_QWORD *)v3 + 3) >> 1)
  {
    if (*((_QWORD *)v6 + 2))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v11 = v4 + v2;
  else
    v11 = v4;
  result = sub_10003DE28(result, v11, 1, v3);
  v3 = result;
  if (!*((_QWORD *)v6 + 2))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = *((_QWORD *)v3 + 2);
  if ((*((_QWORD *)v3 + 3) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = (char *)swift_arrayInitWithCopy(&v3[16 * v7 + 32], v6 + 32, v2, &type metadata for String);
  if (!v2)
  {
LABEL_14:
    result = (char *)swift_bridgeObjectRelease(v6);
    *v1 = v3;
    return result;
  }
  v8 = *((_QWORD *)v3 + 2);
  v9 = __OFADD__(v8, v2);
  v10 = v8 + v2;
  if (!v9)
  {
    *((_QWORD *)v3 + 2) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

_QWORD *sub_10008A738(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  int64_t v13;

  v2 = result[2];
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= v3[3] >> 1)
  {
    if (v6[2])
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v13 = v4 + v2;
  else
    v13 = v4;
  result = sub_10003E408(result, v13, 1, v3);
  v3 = result;
  if (!v6[2])
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = v3[2];
  if ((v3[3] >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v8 = (uint64_t)&v3[v7 + 4];
  v9 = sub_100005574(&qword_10048E850);
  result = (_QWORD *)swift_arrayInitWithCopy(v8, v6 + 4, v2, v9);
  if (!v2)
  {
LABEL_14:
    result = (_QWORD *)swift_bridgeObjectRelease(v6);
    *v1 = v3;
    return result;
  }
  v10 = v3[2];
  v11 = __OFADD__(v10, v2);
  v12 = v10 + v2;
  if (!v11)
  {
    v3[2] = v12;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_10008A830(uint64_t a1)
{
  return sub_10008AB54(a1, sub_1000F33A0);
}

uint64_t sub_10008A83C(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;

  v2 = *(_QWORD *)(result + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  result = sub_10003DE00(result, v14, 1, v3);
  v3 = (_QWORD *)result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = v3[2];
  v8 = (v3[3] >> 1) - v7;
  result = type metadata accessor for URLQueryItem(0);
  if (v8 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v9 = *(_QWORD *)(result - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  result = swift_arrayInitWithCopy((char *)v3 + v10 + *(_QWORD *)(v9 + 72) * v7, v6 + v10, v2, result);
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_10008A93C(uint64_t result)
{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  char *v24;
  _QWORD *v25;
  uint64_t (*v26)(uint64_t);
  uint64_t *v27;
  _BYTE v28[32];
  uint64_t v29;
  uint64_t v30;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v6 = result;
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v8 = *((_QWORD *)v3 + 3) >> 1, v8 < v5))
  {
    if (v4 <= v5)
      v9 = v4 + v2;
    else
      v9 = v4;
    v3 = sub_10003DE28(isUniquelyReferenced_nonNull_native, v9, 1, v3);
    v8 = *((_QWORD *)v3 + 3) >> 1;
  }
  v10 = *((_QWORD *)v3 + 2);
  v11 = v8 - v10;
  result = sub_1000F2D4C(&v29, &v3[16 * v10 + 32], v8 - v10, v6);
  if (result < v2)
    goto LABEL_15;
  if (result)
  {
    v12 = *((_QWORD *)v3 + 2);
    v13 = __OFADD__(v12, result);
    v14 = v12 + result;
    if (v13)
    {
      __break(1u);
      goto LABEL_32;
    }
    *((_QWORD *)v3 + 2) = v14;
  }
  if (result != v11)
  {
LABEL_13:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
LABEL_16:
  if (!v30)
    goto LABEL_13;
  v15 = v30 - 1;
  if (__OFSUB__(v30, 1))
    goto LABEL_34;
  v16 = *((_QWORD *)v3 + 2);
  v17 = v29;
  v18 = sub_100088F74((uint64_t (*)(uint64_t))v28, v30 - 1, v29);
  v21 = *v19;
  v20 = v19[1];
  swift_bridgeObjectRetain();
  result = ((uint64_t (*)(_BYTE *, _QWORD))v18)(v28, 0);
LABEL_20:
  while (1)
  {
    v22 = *((_QWORD *)v3 + 3);
    v23 = v22 >> 1;
    v5 = v16 + 1;
    if ((uint64_t)(v22 >> 1) < v16 + 1)
      break;
    if (v16 < v23)
      goto LABEL_22;
LABEL_19:
    *((_QWORD *)v3 + 2) = v16;
  }
  result = (uint64_t)sub_10003DE28((char *)(v22 > 1), v16 + 1, 1, v3);
  v3 = (char *)result;
  v23 = *(_QWORD *)(result + 24) >> 1;
  if (v16 >= v23)
    goto LABEL_19;
LABEL_22:
  v24 = &v3[16 * v16];
  *((_QWORD *)v24 + 4) = v21;
  *((_QWORD *)v24 + 5) = v20;
  if (!v15)
  {
LABEL_32:
    *((_QWORD *)v3 + 2) = v5;
    goto LABEL_13;
  }
  v25 = v24 + 56;
  while (1)
  {
    v13 = __OFSUB__(v15--, 1);
    if (v13)
      break;
    v26 = sub_100088F74((uint64_t (*)(uint64_t))v28, v15, v17);
    v21 = *v27;
    v20 = v27[1];
    swift_bridgeObjectRetain();
    result = ((uint64_t (*)(_BYTE *, _QWORD))v26)(v28, 0);
    if (v23 == v5)
    {
      v16 = v23;
      *((_QWORD *)v3 + 2) = v23;
      goto LABEL_20;
    }
    *(v25 - 1) = v21;
    *v25 = v20;
    ++v5;
    v25 += 2;
    if (!v15)
      goto LABEL_32;
  }
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_10008AB48(uint64_t a1)
{
  return sub_10008AB54(a1, sub_1000F3548);
}

uint64_t sub_10008AB54(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, uint64_t))
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = *v2;
  if (!((unint64_t)*v2 >> 62))
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    v8 = v7 + v5;
    if (!__OFADD__(v7, v5))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v6 < 0)
    v19 = *v2;
  else
    v19 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v2);
  v7 = _CocoaArrayWrapper.endIndex.getter(v19);
  swift_bridgeObjectRelease(v6);
  v8 = v7 + v5;
  if (__OFADD__(v7, v5))
    goto LABEL_29;
LABEL_5:
  v6 = *v2;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *v2 = v6;
  v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v7 = 1;
  }
  if ((unint64_t)v6 >> 62)
    goto LABEL_31;
  v11 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v11 <= v8)
      v11 = v8;
    swift_bridgeObjectRetain(v6);
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v11, 1, v6);
    swift_bridgeObjectRelease(*v2);
    *v2 = v6;
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = a2(v10 + 8 * *(_QWORD *)(v10 + 16) + 32, (*(_QWORD *)(v10 + 24) >> 1) - *(_QWORD *)(v10 + 16), a1);
    if (v13 >= v5)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v6 < 0)
      v20 = v6;
    else
      v20 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v11 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(v6);
  }
  if (v13 < 1)
    goto LABEL_19;
  v14 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v15 = __OFADD__(v14, v13);
  v16 = v14 + v13;
  if (!v15)
  {
    *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
LABEL_19:
    v17 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v17);
  }
  __break(1u);
  return result;
}

uint64_t sub_10008AD10(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v11 = v4 + v2;
  else
    v11 = v4;
  result = (uint64_t)sub_10003EBB8((char *)result, v11, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = *(_QWORD *)(v3 + 16);
  if ((*(_QWORD *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = (uint64_t)memcpy((void *)(v3 + 32 * v7 + 32), (const void *)(v6 + 32), 32 * v2);
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v8 = *(_QWORD *)(v3 + 16);
  v9 = __OFADD__(v8, v2);
  v10 = v8 + v2;
  if (!v9)
  {
    *(_QWORD *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_10008ADF0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v4 < 0)
    v17 = *v1;
  else
    v17 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease();
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_29;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_31;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_1000F3700(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0)
      v18 = v4;
    else
      v18 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    v15 = swift_bridgeObjectRelease();
    return specialized Array._endMutation()(v15);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ActionLookup.Group(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100031DCC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ActionLookup.Group);
}

uint64_t _s9MusicCore10ActionTypeO8rawValueACSgSS_tcfC_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_10043CFC8, a1, a2, &unk_10048CF80);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x3A)
    return 58;
  else
    return v3;
}

unint64_t sub_10008B008()
{
  unint64_t result;

  result = qword_10048FD20;
  if (!qword_10048FD20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActionType, &type metadata for ActionType);
    atomic_store(result, (unint64_t *)&qword_10048FD20);
  }
  return result;
}

unint64_t sub_10008B04C(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_10008B078();
  result = sub_10008B0BC();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10008B078()
{
  unint64_t result;

  result = qword_10048FD28;
  if (!qword_10048FD28)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActionType, &type metadata for ActionType);
    atomic_store(result, (unint64_t *)&qword_10048FD28);
  }
  return result;
}

unint64_t sub_10008B0BC()
{
  unint64_t result;

  result = qword_10048FD30;
  if (!qword_10048FD30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActionType, &type metadata for ActionType);
    atomic_store(result, (unint64_t *)&qword_10048FD30);
  }
  return result;
}

unint64_t sub_10008B104()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10048FD38;
  if (!qword_10048FD38)
  {
    v1 = sub_100005600(qword_10048FD40);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10048FD38);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ActionType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xC7)
    goto LABEL_17;
  if (a2 + 57 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 57) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 57;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 57;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 57;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x3A;
  v8 = v6 - 58;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ActionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 57 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 57) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xC7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xC6)
    return ((uint64_t (*)(void))((char *)&loc_10008B22C + 4 * byte_100389733[v4]))();
  *a1 = a2 + 57;
  return ((uint64_t (*)(void))((char *)sub_10008B260 + 4 * byte_10038972E[v4]))();
}

uint64_t sub_10008B260(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008B268(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10008B270);
  return result;
}

uint64_t sub_10008B27C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10008B284);
  *(_BYTE *)result = a2 + 57;
  return result;
}

uint64_t sub_10008B288(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008B290(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ActionType()
{
  return &type metadata for ActionType;
}

uint64_t type metadata accessor for ActionLookup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100031DCC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ActionLookup);
}

uint64_t type metadata accessor for ActionLookupBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100031DCC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ActionLookupBuilder);
}

_QWORD *sub_10008B2C4@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(unsigned __int8 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  _QWORD *result;
  _QWORD *v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  Swift::String v52;
  uint64_t v53;
  void *v54;
  Swift::String v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  __C::_NSRange v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  Swift::String v63;
  uint64_t v64;
  void *v65;
  Swift::String v66;
  Swift::String v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _QWORD *v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _OWORD v82[8];
  _OWORD v83[9];
  __int128 v84;
  void *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _OWORD v90[4];
  _QWORD v91[5];
  _BYTE v92[80];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  unsigned __int8 v97[17];

  v97[0] = a1;
  ActionType.isHidden.getter(a1);
  if ((v10 & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    if (qword_10048CF08 != -1)
      swift_once(&qword_10048CF08, sub_1001EE2A4);
    if ((static DeviceCapabilities.isInternalInstall & 1) == 0)
      goto LABEL_17;
    _StringGuts.grow(_:)(32);
    v11 = ActionType.rawValue.getter(a1);
    v13 = v12;
    swift_bridgeObjectRelease(0xE000000000000000);
    *(_QWORD *)v92 = v11;
    *(_QWORD *)&v92[8] = v13;
    v14 = 0xD00000000000001ELL;
    v15 = " - Action identifier is hidden";
    goto LABEL_13;
  }
  v16 = a3[3];
  v17 = a3[4];
  sub_10000ABC8(a3, v16);
  v18 = *(uint64_t (**)(unsigned __int8 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v17 + 8);
  v19 = sub_10008B0BC();
  v20 = v18(v97, &type metadata for ActionType, v19, v16, v17);
  if (!v20)
  {
    swift_bridgeObjectRelease(a2);
    _StringGuts.grow(_:)(22);
    v31 = ActionType.rawValue.getter(a1);
    v33 = v32;
    swift_bridgeObjectRelease(0xE000000000000000);
    *(_QWORD *)v92 = v31;
    *(_QWORD *)&v92[8] = v33;
    v14 = 0xD000000000000014;
    v15 = " - No implementation";
LABEL_13:
    v34 = (unint64_t)(v15 - 32) | 0x8000000000000000;
    String.append(_:)(*(Swift::String *)&v14);
    v35 = *(_QWORD *)&v92[8];
    v37 = *(_QWORD *)&v92[8];
    v36 = *(_QWORD *)v92;
LABEL_16:
    Array<A>.appendStringComponents(_:lineLength:bullet:)(v36, v37, 80, 120, 0xE100000000000000);
    swift_bridgeObjectRelease(v35);
LABEL_17:
    sub_10000682C(a3);
    sub_100086740(0, 1, 0, 0, 0);
    sub_10003A5C8(0, 0);
    sub_10003A5C8(0, 0);
    sub_10003A5C8(0, 0);
    sub_10003A5C8(0, 0);
    sub_1000907C0(v92);
    return (_QWORD *)sub_1000149A8((uint64_t)v92, a5, &qword_100490020);
  }
  *(_QWORD *)&v79 = a4;
  v22 = *(_QWORD *)(a2 + 16);
  if (!v22)
  {
    swift_bridgeObjectRelease(a2);
LABEL_15:
    *(_QWORD *)v92 = 0;
    *(_QWORD *)&v92[8] = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    v38 = *(_QWORD *)&v92[8];
    v39 = ActionType.rawValue.getter(v97[0]);
    v41 = v40;
    swift_bridgeObjectRelease(v38);
    *(_QWORD *)v92 = v39;
    *(_QWORD *)&v92[8] = v41;
    v42._countAndFlagsBits = 0xD000000000000016;
    v42._object = (void *)0x80000001003AE500;
    String.append(_:)(v42);
    v35 = *(_QWORD *)&v92[8];
    v37 = *(_QWORD *)&v92[8];
    v36 = *(_QWORD *)v92;
    goto LABEL_16;
  }
  v23 = v20;
  v24 = v21;
  v76 = a3;
  v77 = a5;
  *(_QWORD *)&v80 = *(_QWORD *)(v21 + 8);
  *(_QWORD *)&v78 = a2;
  v25 = a2 + 32;
  while (1)
  {
    sub_10000684C(v25, (uint64_t)&v84);
    v26 = type metadata accessor for Optional(0, v23);
    v27 = *(_QWORD *)(v26 - 8);
    __chkstk_darwin(v26);
    v29 = (char *)&v72 - v28;
    ((void (*)(__int128 *, uint64_t, uint64_t))v80)(&v84, v23, v24);
    v30 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v29, 1, v23) != 1)
      break;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
    memset(v92, 0, 40);
    sub_100008758((uint64_t)v92, &qword_10048FA88);
    v25 += 32;
    if (!--v22)
    {
      swift_bridgeObjectRelease(v78);
      a3 = v76;
      a5 = v77;
      goto LABEL_15;
    }
  }
  *(_QWORD *)&v92[24] = v23;
  *(_QWORD *)&v92[32] = v24;
  v44 = sub_1000207D4(v92);
  (*(void (**)(_QWORD *, char *, uint64_t))(v30 + 32))(v44, v29, v23);
  swift_bridgeObjectRelease(v78);
  sub_1000137C8((__int128 *)v92, (uint64_t)v91);
  sub_1000244B0((uint64_t)v91, (uint64_t)&v84);
  v45 = v97[0];
  result = sub_10008B9D4(&v84, v97[0], v92);
  v46 = v93;
  if ((_QWORD)v93)
  {
    v47 = *((_QWORD *)&v93 + 1);
    v48 = ((uint64_t (*)(_QWORD *))v93)(result);
    if (v49 != 1)
    {
      v60 = v48;
      v61 = v49;
      if ((v50 & 1) != 0)
      {
        sub_10001406C(v48, v49);
        v64 = *(_QWORD *)&v92[8];
        v65 = *(void **)&v92[16];
      }
      else
      {
        *(_QWORD *)&v84 = ActionType.rawValue.getter(v45);
        *((_QWORD *)&v84 + 1) = v62;
        v63._countAndFlagsBits = 10272;
        v63._object = (void *)0xE200000000000000;
        String.append(_:)(v63);
        v64 = *(_QWORD *)&v92[8];
        v65 = *(void **)&v92[16];
        swift_bridgeObjectRetain();
        v66._countAndFlagsBits = v64;
        v66._object = v65;
        String.append(_:)(v66);
        swift_bridgeObjectRelease(v65);
        v67._countAndFlagsBits = 539828265;
        v67._object = (void *)0xE400000000000000;
        String.append(_:)(v67);
        if (v61)
          v68 = v60;
        else
          v68 = 0xD000000000000013;
        if (v61)
          v69 = v61;
        else
          v69 = 0x80000001003AE520;
        v70 = v69;
        String.append(_:)(*(Swift::String *)&v68);
        swift_bridgeObjectRelease(v69);
        v71 = *((_QWORD *)&v84 + 1);
        Array<A>.appendStringComponents(_:lineLength:bullet:)(v84, *((uint64_t *)&v84 + 1), 80, 120, 0xE100000000000000);
        swift_bridgeObjectRelease(v71);
      }
      LOBYTE(v84) = v92[0];
      *((_QWORD *)&v84 + 1) = v64;
      v85 = v65;
      v86 = *(_OWORD *)&v92[24];
      v87 = *(_OWORD *)&v92[40];
      v88 = *(_OWORD *)&v92[56];
      *(_QWORD *)&v89 = *(_QWORD *)&v92[72];
      *((_QWORD *)&v89 + 1) = v46;
      *(_QWORD *)&v90[0] = v47;
      *(_OWORD *)((char *)v90 + 8) = v94;
      *(_OWORD *)((char *)&v90[1] + 8) = v95;
      *(_OWORD *)((char *)&v90[2] + 8) = v96;
      sub_1000906F8(&v84);
      sub_10000682C(v91);
      a3 = v76;
      a5 = v77;
      goto LABEL_17;
    }
    *(_QWORD *)&v84 = ActionType.rawValue.getter(v45);
    *((_QWORD *)&v84 + 1) = v51;
    v52._countAndFlagsBits = 10272;
    v52._object = (void *)0xE200000000000000;
    String.append(_:)(v52);
    v53 = *(_QWORD *)&v92[8];
    v54 = *(void **)&v92[16];
    swift_bridgeObjectRetain();
    v55._countAndFlagsBits = v53;
    v55._object = v54;
    String.append(_:)(v55);
    swift_bridgeObjectRelease(v54);
    v56._countAndFlagsBits = 41;
    v56._object = (void *)0xE100000000000000;
    String.append(_:)(v56);
    v57 = *((_QWORD *)&v84 + 1);
    Array<A>.appendStringComponents(_:lineLength:bullet:)(v84, *((uint64_t *)&v84 + 1), 80, 9673954, 0xA300000000000000);
    swift_bridgeObjectRelease(v57);
    sub_10000682C(v91);
    sub_100086740(0, 1, 0, 0, 0);
    sub_10003A5C8(0, 0);
    sub_10003A5C8(0, 0);
    sub_10003A5C8(0, 0);
    sub_10003A5C8(0, 0);
    v82[1] = *(_OWORD *)&v92[32];
    v82[2] = *(_OWORD *)&v92[48];
    v82[3] = *(_OWORD *)&v92[64];
    v82[4] = v93;
    v82[5] = v94;
    v82[6] = v95;
    v82[7] = v96;
    v81 = *(_OWORD *)v92;
    v82[0] = *(_OWORD *)&v92[16];
    v80 = *(_OWORD *)((char *)v82 + 8);
    v79 = *(_OWORD *)((char *)&v82[1] + 8);
    v78 = *(_OWORD *)((char *)&v82[2] + 8);
    v83[6] = v94;
    v83[7] = v95;
    v75 = *(_OWORD *)((char *)&v82[3] + 8);
    v83[8] = v96;
    v83[2] = *(_OWORD *)&v92[32];
    v83[3] = *(_OWORD *)&v92[48];
    v73 = *(_OWORD *)((char *)&v82[5] + 8);
    v74 = *(_OWORD *)((char *)&v82[4] + 8);
    v83[4] = *(_OWORD *)&v92[64];
    v83[5] = v93;
    v72 = *(_OWORD *)((char *)&v82[6] + 8);
    v58 = *((_QWORD *)&v96 + 1);
    v83[0] = *(_OWORD *)v92;
    v83[1] = *(_OWORD *)&v92[16];
    v59.location = (Swift::Int)v83;
    CFRange.init(_:)(v59);
    sub_1000149A8((uint64_t)v83, v77, &qword_100490020);
    sub_100090014(&v81);
    sub_10000682C(v76);
    v84 = *(_OWORD *)v92;
    v86 = v80;
    v87 = v79;
    v88 = v78;
    v89 = v75;
    v90[0] = v74;
    v90[1] = v73;
    v90[2] = v72;
    v85 = *(void **)&v92[16];
    *(_QWORD *)&v90[3] = v58;
    return sub_1000906F8(&v84);
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_10008B9D4@<X0>(_QWORD *a1@<X0>, char a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t DynamicType;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  __int128 v34;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)();
  uint64_t v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t (*v59)();
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v4 = a1[3];
  v5 = sub_10000ABC8(a1, v4);
  DynamicType = swift_getDynamicType(v5, v4, 1);
  v7 = a1[4];
  *(_QWORD *)&v45 = DynamicType;
  *((_QWORD *)&v45 + 1) = v7;
  v8 = sub_100005574(&qword_10048FBB0);
  v9 = String.init<A>(describing:)(&v45, v8);
  v11 = v10;
  sub_1000244B0((uint64_t)a1, (uint64_t)&v45);
  v12 = sub_100005574(&qword_10048FBB8);
  v13 = sub_100005574(&qword_10048FBC0);
  if (swift_dynamicCast(&v61, &v45, v12, v13, 6))
  {
    v14 = *((_QWORD *)&v62 + 1);
    v15 = v63;
    sub_10000ABC8(&v61, *((uint64_t *)&v62 + 1));
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v15 + 8))(&v64, v14, v15);
    v16 = v64;
    v34 = v65;
    v33 = v66;
    v30 = v68;
    v31 = v67;
    sub_10000682C(&v61);
  }
  else
  {
    v63 = 0;
    v61 = 0u;
    v62 = 0u;
    sub_100008758((uint64_t)&v61, &qword_10048FBC8);
    v16 = 0;
    v33 = 0;
    v30 = 0;
    v31 = 0;
    v34 = 1uLL;
  }
  sub_100086740(0, 1, 0, 0, 0);
  v17 = a1[3];
  v18 = a1[4];
  sub_10000ABC8(a1, v17);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 24))(v17, v18);
  sub_1000244B0((uint64_t)a1, (uint64_t)&v45);
  v27 = swift_allocObject(&unk_1004465F8, 56, 7);
  sub_1000137C8(&v45, v27 + 16);
  sub_10003A5C8(0, 0);
  sub_1000244B0((uint64_t)a1, (uint64_t)&v45);
  v29 = swift_allocObject(&unk_100446620, 56, 7);
  sub_1000137C8(&v45, v29 + 16);
  sub_10003A5C8(0, 0);
  sub_1000244B0((uint64_t)a1, (uint64_t)&v45);
  v28 = swift_allocObject(&unk_100446648, 56, 7);
  sub_1000137C8(&v45, v28 + 16);
  sub_10003A5C8(0, 0);
  sub_1000244B0((uint64_t)a1, (uint64_t)&v45);
  v20 = swift_allocObject(&unk_100446670, 56, 7);
  sub_1000137C8(&v45, v20 + 16);
  sub_10003A5C8(0, 0);
  LOBYTE(v36) = a2;
  *((_QWORD *)&v36 + 1) = v9;
  *(_QWORD *)&v37 = v11;
  *((_QWORD *)&v37 + 1) = v16;
  v38 = v34;
  *(_QWORD *)&v39 = v33;
  *((_QWORD *)&v39 + 1) = v31;
  *(_QWORD *)&v40 = v30;
  *((_QWORD *)&v40 + 1) = v19;
  *(_QWORD *)&v41 = sub_100090800;
  *((_QWORD *)&v41 + 1) = v27;
  *(_QWORD *)&v42 = &unk_10048FBD0;
  *((_QWORD *)&v42 + 1) = v29;
  *(_QWORD *)&v43 = &unk_10048FBD8;
  *((_QWORD *)&v43 + 1) = v28;
  *(_QWORD *)&v44 = sub_1000908A0;
  *((_QWORD *)&v44 + 1) = v20;
  v21 = v37;
  *a3 = v36;
  a3[1] = v21;
  v22 = v44;
  v23 = v42;
  a3[7] = v43;
  a3[8] = v22;
  v24 = v40;
  a3[5] = v41;
  a3[6] = v23;
  v25 = v38;
  a3[3] = v39;
  a3[4] = v24;
  a3[2] = v25;
  sub_100090014(&v36);
  sub_10000682C(a1);
  LOBYTE(v45) = a2;
  *((_QWORD *)&v45 + 1) = v9;
  v46 = v11;
  v47 = v16;
  v48 = v34;
  v49 = v33;
  v50 = v31;
  v51 = v30;
  v52 = v19;
  v53 = sub_100090800;
  v54 = v27;
  v55 = &unk_10048FBD0;
  v56 = v29;
  v57 = &unk_10048FBD8;
  v58 = v28;
  v59 = sub_1000908A0;
  v60 = v20;
  return sub_1000906F8(&v45);
}

uint64_t sub_10008BD64()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[3] = v0;
  v2 = type metadata accessor for MainActor(0);
  v1[4] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[5] = v3;
  v1[6] = v4;
  return swift_task_switch(sub_10008BDD0, v3, v4);
}

void sub_10008BDD0()
{
  _QWORD *v0;
  uint64_t (*v1)(void);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  void (*v7)(void);
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  BOOL v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  __n128 v38;
  void (*v39)(void);
  uint64_t v40[2];

  v1 = *(uint64_t (**)(void))(v0[3] + 80);
  if (v1)
  {
    v2 = v1();
    v4 = v3;
    sub_10001406C(v2, v3);
    if (v4 != 1)
    {
      v8 = swift_release(v0[4]);
      v9 = ((uint64_t (*)(__n128))v1)(v8);
      if (v10 == 1)
      {
        v11 = sub_100005574(&qword_100490048);
        v12 = sub_10002FFB8(&qword_100490050, &qword_100490048, (uint64_t)&protocol conformance descriptor for AnyAction<A>.Error);
        v13 = swift_allocError(v11, v12, 0, 0);
        *v15 = 0;
        v15[1] = 0;
      }
      else
      {
        v16 = v9;
        v17 = v10;
        v18 = sub_100005574(&qword_100490048);
        v19 = sub_10002FFB8(&qword_100490050, &qword_100490048, (uint64_t)&protocol conformance descriptor for AnyAction<A>.Error);
        v13 = swift_allocError(v18, v19, 0, 0);
        *v20 = v16;
        v20[1] = v17;
      }
      swift_willThrow(v14);
      if (qword_10048C590 != -1)
        swift_once(&qword_10048C590, sub_100086650);
      v22 = (_QWORD *)v0[3];
      v23 = type metadata accessor for Logger(0, v21);
      sub_1000086B4(v23, (uint64_t)static Logger.actions);
      sub_100090014(v22);
      swift_errorRetain(v13);
      sub_100090014(v22);
      v24 = swift_errorRetain(v13);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.error.getter();
      v27 = os_log_type_enabled(v25, v26);
      v28 = (unsigned __int8 *)v0[3];
      if (v27)
      {
        v29 = swift_slowAlloc(22, -1);
        v30 = swift_slowAlloc(64, -1);
        v40[0] = v30;
        *(_DWORD *)v29 = 136446466;
        v31 = (char *)ActionType.rawValue.getter(*v28);
        v33 = v32;
        *(_QWORD *)(v29 + 4) = sub_100019400(v31, v32, v40);
        swift_bridgeObjectRelease(v33);
        sub_1000906F8(v28);
        sub_1000906F8(v28);
        *(_WORD *)(v29 + 12) = 2082;
        v0[2] = v13;
        swift_errorRetain(v13);
        v34 = sub_100005574((uint64_t *)&unk_1004911F0);
        v35 = (char *)String.init<A>(describing:)(v0 + 2, v34);
        v37 = v36;
        *(_QWORD *)(v29 + 14) = sub_100019400(v35, v36, v40);
        swift_bridgeObjectRelease(v37);
        swift_errorRelease(v13);
        swift_errorRelease(v13);
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed to perform action %{public}s with error %{public}s", (uint8_t *)v29, 0x16u);
        swift_arrayDestroy(v30, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v30, -1, -1);
        swift_slowDealloc(v29, -1, -1);
      }
      else
      {
        sub_1000906F8((_QWORD *)v0[3]);
        sub_1000906F8(v28);
        swift_errorRelease(v13);
        swift_errorRelease(v13);
      }

      swift_willThrow(v38);
      v7 = (void (*)(void))v0[1];
      goto LABEL_14;
    }
    v5 = *(int **)(v0[3] + 96);
    if (v5)
    {
      v39 = (void (*)(void))((char *)v5 + *v5);
      v6 = (_QWORD *)swift_task_alloc(v5[1]);
      v0[7] = v6;
      *v6 = v0;
      v6[1] = sub_10008C110;
      v7 = v39;
LABEL_14:
      v7();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_10008C110()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 56);
  *(_QWORD *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10008C234;
  else
    v4 = sub_10008C170;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

void sub_10008C170()
{
  uint64_t v0;
  int *v1;
  _QWORD *v2;
  void (*v3)(void);

  v1 = *(int **)(*(_QWORD *)(v0 + 24) + 112);
  if (v1)
  {
    v3 = (void (*)(void))((char *)v1 + *v1);
    v2 = (_QWORD *)swift_task_alloc(v1[1]);
    *(_QWORD *)(v0 + 72) = v2;
    *v2 = v0;
    v2[1] = sub_10008C1D4;
    v3();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10008C1D4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10008C4A8;
  else
    v4 = sub_10008C45C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t sub_10008C234()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __n128 v19;
  uint64_t v21[2];

  swift_release(*(_QWORD *)(v0 + 32));
  v2 = *(_QWORD *)(v0 + 64);
  if (qword_10048C590 != -1)
    swift_once(&qword_10048C590, sub_100086650);
  v3 = *(_QWORD **)(v0 + 24);
  v4 = type metadata accessor for Logger(0, v1);
  sub_1000086B4(v4, (uint64_t)static Logger.actions);
  sub_100090014(v3);
  swift_errorRetain(v2);
  sub_100090014(v3);
  v5 = swift_errorRetain(v2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(unsigned __int8 **)(v0 + 24);
  if (v8)
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(64, -1);
    v21[0] = v11;
    *(_DWORD *)v10 = 136446466;
    v12 = (char *)ActionType.rawValue.getter(*v9);
    v14 = v13;
    *(_QWORD *)(v10 + 4) = sub_100019400(v12, v13, v21);
    swift_bridgeObjectRelease(v14);
    sub_1000906F8(v9);
    sub_1000906F8(v9);
    *(_WORD *)(v10 + 12) = 2082;
    *(_QWORD *)(v0 + 16) = v2;
    swift_errorRetain(v2);
    v15 = sub_100005574((uint64_t *)&unk_1004911F0);
    v16 = (char *)String.init<A>(describing:)(v0 + 16, v15);
    v18 = v17;
    *(_QWORD *)(v10 + 14) = sub_100019400(v16, v17, v21);
    swift_bridgeObjectRelease(v18);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to perform action %{public}s with error %{public}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    sub_1000906F8(*(_QWORD **)(v0 + 24));
    sub_1000906F8(v9);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }

  swift_willThrow(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008C45C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  void (*v3)(uint64_t);

  v1 = *(_QWORD *)(v0 + 24);
  result = swift_release(*(_QWORD *)(v0 + 32));
  v3 = *(void (**)(uint64_t))(v1 + 128);
  if (v3)
  {
    v3(result);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10008C4A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __n128 v19;
  uint64_t v21[2];

  swift_release(*(_QWORD *)(v0 + 32));
  v2 = *(_QWORD *)(v0 + 80);
  if (qword_10048C590 != -1)
    swift_once(&qword_10048C590, sub_100086650);
  v3 = *(_QWORD **)(v0 + 24);
  v4 = type metadata accessor for Logger(0, v1);
  sub_1000086B4(v4, (uint64_t)static Logger.actions);
  sub_100090014(v3);
  swift_errorRetain(v2);
  sub_100090014(v3);
  v5 = swift_errorRetain(v2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(unsigned __int8 **)(v0 + 24);
  if (v8)
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(64, -1);
    v21[0] = v11;
    *(_DWORD *)v10 = 136446466;
    v12 = (char *)ActionType.rawValue.getter(*v9);
    v14 = v13;
    *(_QWORD *)(v10 + 4) = sub_100019400(v12, v13, v21);
    swift_bridgeObjectRelease(v14);
    sub_1000906F8(v9);
    sub_1000906F8(v9);
    *(_WORD *)(v10 + 12) = 2082;
    *(_QWORD *)(v0 + 16) = v2;
    swift_errorRetain(v2);
    v15 = sub_100005574((uint64_t *)&unk_1004911F0);
    v16 = (char *)String.init<A>(describing:)(v0 + 16, v15);
    v18 = v17;
    *(_QWORD *)(v10 + 14) = sub_100019400(v16, v17, v21);
    swift_bridgeObjectRelease(v18);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to perform action %{public}s with error %{public}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    sub_1000906F8(*(_QWORD **)(v0 + 24));
    sub_1000906F8(v9);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }

  swift_willThrow(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t property wrapper backing initializer of Actionable.contexts(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = a1;
  v1 = sub_100005574(&qword_10048FEC8);
  State.init(wrappedValue:)(&v4, &v3, v1);
  return v4;
}

uint64_t sub_10008C70C()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_100005574(&qword_100490080);
  State.wrappedValue.getter(&v2, v0);
  return v2;
}

uint64_t sub_10008C750(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];

  v2 = v1[1];
  v5[1] = *v1;
  v5[2] = v2;
  v5[0] = a1;
  v3 = sub_100005574(&qword_100490080);
  return State.wrappedValue.setter(v5, v3);
}

uint64_t sub_10008C798()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_100005574(&qword_100490088);
  Binding.wrappedValue.getter(&v2, v0);
  return v2;
}

uint64_t Actionable.init(lookup:excluding:resolver:preview:propertyLoader:hasLoadedModelProperties:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, char *a8@<X8>, uint64_t a9, unsigned __int8 a10, uint64_t a11, uint64_t a12)
{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t result;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD v36[2];

  v33 = a6;
  v34 = a7;
  v32 = a5;
  v31 = a10;
  v30 = a9;
  v17 = *(_QWORD *)(a11 - 8);
  __chkstk_darwin(a1);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = _swiftEmptyArrayStorage;
  v20 = sub_100005574(&qword_10048FEC8);
  State.init(wrappedValue:)(v36, &v35, v20);
  v21 = v36[1];
  *(_QWORD *)a8 = v36[0];
  *((_QWORD *)a8 + 1) = v21;
  *((_QWORD *)a8 + 2) = a1;
  *((_QWORD *)a8 + 3) = a2;
  v22 = sub_1000244B0((uint64_t)a3, (uint64_t)(a8 + 32));
  a4(v22);
  sub_10000682C(a3);
  v24 = (int *)type metadata accessor for Actionable(0, a11, a12, v23);
  result = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 32))(&a8[v24[12]], v19, a11);
  v26 = &a8[v24[13]];
  v27 = v33;
  *(_QWORD *)v26 = v32;
  *((_QWORD *)v26 + 1) = v27;
  v28 = &a8[v24[14]];
  v29 = v30;
  *(_QWORD *)v28 = v34;
  *((_QWORD *)v28 + 1) = v29;
  v28[16] = v31;
  return result;
}

uint64_t type metadata accessor for Actionable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100031DCC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Actionable);
}

uint64_t Actionable.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t WitnessTable;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t OpaqueTypeConformance2;
  uint64_t v11;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25[16];
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29[16];
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;

  v23 = a1;
  v24 = a3;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Actionable<A>, a2);
  v6 = type metadata accessor for _ViewModifier_Content(255, a2, WitnessTable);
  v7 = sub_100005600(&qword_10048FED0);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v6);
  v33 = sub_100005600(&qword_10048FED8);
  v34 = &type metadata for Bool;
  v35 = sub_10008CB58();
  v36 = &protocol witness table for Bool;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v33, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v11 = *(_QWORD *)(a2 + 24);
  v33 = v6;
  v34 = (void *)v7;
  v35 = v8;
  v36 = (void *)v9;
  v37 = OpaqueTypeConformance2;
  v38 = v11;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v33, &opaque type descriptor for <<opaque return type of View.contextMenu<A, B>(menuItems:preview:)>>, 0);
  v22 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v13 = __chkstk_darwin(OpaqueTypeMetadata2);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v21 - v16;
  v30 = v8;
  v31 = v11;
  v32 = v3;
  v26 = v8;
  v27 = v11;
  v28 = v3;
  v18 = swift_checkMetadataState(0, v6);
  View.contextMenu<A, B>(menuItems:preview:)(sub_10008CC58, v29, sub_10008D150, v25, v18, v7, v8, v9, OpaqueTypeConformance2, v11);
  v33 = v18;
  v34 = (void *)v7;
  v35 = v8;
  v36 = (void *)v9;
  v37 = OpaqueTypeConformance2;
  v38 = v11;
  swift_getOpaqueTypeConformance2(&v33, &opaque type descriptor for <<opaque return type of View.contextMenu<A, B>(menuItems:preview:)>>, 1);
  sub_10003B690((uint64_t)v15, OpaqueTypeMetadata2, (uint64_t)v17);
  v19 = *(void (**)(char *, uint64_t))(v22 + 8);
  v19(v15, OpaqueTypeMetadata2);
  sub_100035E98((uint64_t)v17, OpaqueTypeMetadata2, v24);
  return ((uint64_t (*)(char *, uint64_t))v19)(v17, OpaqueTypeMetadata2);
}

unint64_t sub_10008CB58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10048FEE0;
  if (!qword_10048FEE0)
  {
    v1 = sub_100005600(&qword_10048FED8);
    sub_10008CBDC();
    sub_100006924(&qword_10048FF08, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10048FEE0);
  }
  return result;
}

unint64_t sub_10008CBDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10048FEE8;
  if (!qword_10048FEE8)
  {
    v1 = sub_100005600(&qword_10048FEF0);
    sub_10002FFB8(&qword_10048FEF8, &qword_10048FF00, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_10048FEE8);
  }
  return result;
}

uint64_t sub_10008CC58@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = type metadata accessor for Actionable(0, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1);
  return sub_10008CC8C(v4, a2);
}

uint64_t sub_10008CC8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t KeyPath;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t);
  char *v55;
  uint64_t v56;
  char v57;
  uint64_t v58;

  v49 = a2;
  v48 = type metadata accessor for TaskPriority(0);
  v45 = *(_QWORD *)(v48 - 8);
  v4 = __chkstk_darwin(v48);
  v46 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v4);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_100005574(&qword_10048FEF0);
  v44 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v55 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_100005574(&qword_10048FED8);
  __chkstk_darwin(v56);
  v42 = v2;
  v43 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = *(_QWORD *)(v2 + 16);
  KeyPath = swift_getKeyPath(&unk_100389908);
  v54 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v54(v8, v2, a1);
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = (v11 + 32) & ~v11;
  v51 = v12 + v7;
  v13 = v11 | 7;
  v40 = v11 | 7;
  v14 = swift_allocObject(&unk_1004466C0, v12 + v7, v11 | 7);
  v15 = *(_QWORD *)(a1 + 24);
  v52 = *(_QWORD *)(a1 + 16);
  v53 = v15;
  *(_QWORD *)(v14 + 16) = v52;
  *(_QWORD *)(v14 + 24) = v15;
  v39 = v12;
  v50 = *(void (**)(uint64_t, char *, uint64_t))(v6 + 32);
  v50(v14 + v12, v8, a1);
  swift_bridgeObjectRetain();
  v16 = sub_100005574(&qword_10048FD18);
  v17 = sub_100005574(&qword_10048FF00);
  v18 = sub_10002FFB8(&qword_10048FF20, &qword_10048FD18, (uint64_t)&protocol conformance descriptor for [A]);
  v19 = sub_10008FE98(&qword_10048FF28, qword_10048FD40, (void (*)(void))sub_10008B0BC, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v20 = sub_10002FFB8(&qword_10048FEF8, &qword_10048FF00, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  ForEach<>.init(_:id:content:)(&v58, KeyPath, sub_100090A7C, v14, v16, v17, v18, v19, v20);
  v21 = v42;
  v54(v8, v42, a1);
  v22 = swift_allocObject(&unk_1004466E8, v51, v13);
  v23 = v53;
  *(_QWORD *)(v22 + 16) = v52;
  *(_QWORD *)(v22 + 24) = v23;
  v24 = ((uint64_t (*)(uint64_t, char *, uint64_t))v50)(v22 + v12, v8, a1);
  v25 = v46;
  static TaskPriority.userInitiated.getter(v24);
  v26 = (uint64_t)v43;
  v27 = &v43[*(int *)(v56 + 36)];
  v28 = type metadata accessor for _TaskModifier(0);
  v29 = v45;
  v30 = v48;
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(&v27[*(int *)(v28 + 20)], v25, v48);
  *(_QWORD *)v27 = &unk_100490070;
  *((_QWORD *)v27 + 1) = v22;
  v31 = v44;
  v32 = v55;
  v33 = v47;
  (*(void (**)(uint64_t, char *, uint64_t))(v44 + 16))(v26, v55, v47);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v25, v30);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v33);
  v57 = sub_10008C798() & 1;
  v54(v8, v21, a1);
  v34 = swift_allocObject(&unk_100446710, v51, v40);
  v35 = v53;
  *(_QWORD *)(v34 + 16) = v52;
  *(_QWORD *)(v34 + 24) = v35;
  v50(v34 + v39, v8, a1);
  v36 = sub_10008CB58();
  View.onChange<A>(of:initial:_:)(&v57, 0, sub_100090B6C, v34, v56, &type metadata for Bool, v36, &protocol witness table for Bool);
  swift_release(v34);
  return sub_100008758(v26, &qword_10048FED8);
}

uint64_t sub_10008D0A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v6 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Actionable(0, v9, v10, v11);
  sub_10003B690(a1 + *(int *)(v12 + 48), a2, (uint64_t)v8);
  sub_100035E98((uint64_t)v8, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a2);
}

uint64_t sub_10008D150@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10008D0A4(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16), a1);
}

double sub_10008D15C@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  void (*v49)(char *, uint64_t);
  double result;
  uint64_t KeyPath;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;

  v60 = a5;
  v9 = type metadata accessor for Divider(0);
  v58 = *(_QWORD *)(v9 - 8);
  v59 = v9;
  v10 = __chkstk_darwin(v9);
  v57 = (char *)&KeyPath - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v53 = (char *)&KeyPath - v12;
  v14 = type metadata accessor for Actionable(0, a3, a4, v13);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v14);
  v18 = (char *)&KeyPath - v17;
  v19 = sub_100005574(&qword_100490090);
  v55 = *(_QWORD *)(v19 - 8);
  v56 = v19;
  v20 = __chkstk_darwin(v19);
  v54 = (char *)&KeyPath - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v61 = (char *)&KeyPath - v22;
  v23 = *a1;
  v24 = swift_allocObject(&unk_100446558, 24, 7);
  *(_QWORD *)(v24 + 16) = _swiftEmptyArrayStorage;
  v62 = v23;
  KeyPath = swift_getKeyPath(&unk_1003899F0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a2, v14);
  v25 = *(unsigned __int8 *)(v15 + 80);
  v26 = (v25 + 32) & ~v25;
  v27 = (v16 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = swift_allocObject(&unk_100446788, v27 + 8, v25 | 7);
  *(_QWORD *)(v28 + 16) = a3;
  *(_QWORD *)(v28 + 24) = a4;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v28 + v26, v18, v14);
  v52 = v24;
  *(_QWORD *)(v28 + v27) = v24;
  swift_bridgeObjectRetain();
  swift_retain(v24);
  v29 = sub_100005574(qword_10048FD40);
  v30 = sub_100005574(&qword_100490098);
  v31 = sub_10002FFB8(&qword_10048FFD8, qword_10048FD40, (uint64_t)&protocol conformance descriptor for [A]);
  v32 = sub_10008B0BC();
  v33 = sub_10008FE98(&qword_1004900A0, &qword_100490098, (void (*)(void))sub_10008FF80, (uint64_t)&protocol conformance descriptor for <A> A?);
  v34 = v61;
  v35 = ForEach<>.init(_:id:content:)(&v62, KeyPath, sub_100090DF8, v28, v29, v30, v31, v32, v33);
  v36 = v53;
  Divider.init()(v35);
  v37 = v54;
  v38 = v55;
  v39 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
  v40 = v34;
  v41 = v56;
  v39(v54, v40, v56);
  v42 = v57;
  v43 = v58;
  v44 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
  v45 = v59;
  v44(v57, v36, v59);
  v46 = v60;
  v39(v60, v37, v41);
  v47 = sub_100005574(&qword_1004900A8);
  v44(&v46[*(int *)(v47 + 48)], v42, v45);
  v48 = *(void (**)(char *, uint64_t))(v43 + 8);
  v48(v36, v45);
  v49 = *(void (**)(char *, uint64_t))(v38 + 8);
  v49(v61, v41);
  v48(v42, v45);
  v49(v37, v41);
  *(_QWORD *)&result = swift_release(v52).n128_u64[0];
  return result;
}

uint64_t sub_10008D4B8@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  unsigned __int8 v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD v15[18];
  _BYTE v16[144];
  _BYTE v17[144];
  _OWORD v18[9];
  _OWORD v19[9];

  v7 = *a1;
  v8 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  v9 = sub_1000AA164(v7, v8);
  swift_bridgeObjectRelease(v8);
  if ((v9 & 1) != 0)
    goto LABEL_3;
  v10 = a3 + 16;
  v11 = sub_10008C70C();
  sub_1000244B0(a2 + 32, (uint64_t)v19);
  swift_beginAccess(v10, v15, 33, 0);
  sub_10008B2C4(v7, v11, v19, v10, (uint64_t)v16);
  swift_endAccess(v15);
  sub_1000149A8((uint64_t)v16, (uint64_t)v17, &qword_100490020);
  sub_1000149A8((uint64_t)v17, (uint64_t)v18, &qword_100490020);
  if (sub_10008FFFC((uint64_t)v18) == 1)
  {
LABEL_3:
    v12 = sub_100005574(&qword_100490000);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a4, 1, 1, v12);
  }
  else
  {
    v19[6] = v18[6];
    v19[7] = v18[7];
    v19[8] = v18[8];
    v19[2] = v18[2];
    v19[3] = v18[3];
    v19[4] = v18[4];
    v19[5] = v18[5];
    v19[0] = v18[0];
    v19[1] = v18[1];
    sub_1000149A8((uint64_t)v17, (uint64_t)v15, &qword_100490020);
    sub_100090014(v15);
    sub_10008D658(a4);
    sub_100090180((uint64_t)v17);
    sub_100090180((uint64_t)v17);
    v14 = sub_100005574(&qword_100490000);
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a4, 0, 1, v14);
  }
}

uint64_t sub_10008D658@<X0>(char *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  void *v16;
  uint64_t (*v17)(uint64_t);
  _QWORD *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  _QWORD v37[2];
  _QWORD *v38;
  char *v39;

  v2 = v1;
  v4 = sub_100005574(&qword_10048E560);
  __chkstk_darwin(v4);
  v6 = (_QWORD *)((char *)v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100005574(&qword_10048FF10);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v9);
  v14 = (char *)v37 - v13;
  v15 = v1[4];
  if (v15 < 2)
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(a1, 1, 1, v7);
  v16 = (void *)v1[7];
  if (!v16)
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(a1, 1, 1, v7);
  v39 = a1;
  v17 = (uint64_t (*)(uint64_t))v1[10];
  if (!v17)
  {
    __break(1u);
    return result;
  }
  v18 = (_QWORD *)v1[8];
  v37[1] = v1[3];
  v38 = v18;
  v19 = v16;
  v20 = swift_bridgeObjectRetain();
  v21 = v17(v20);
  v23 = v22;
  sub_10001406C(v21, v22);
  if (v23 != 1)
  {
    swift_bridgeObjectRelease(v15);

    a1 = v39;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(a1, 1, 1, v7);
  }
  v24 = (_OWORD *)swift_allocObject(&unk_1004465A8, 160, 7);
  v25 = *((_OWORD *)v2 + 7);
  v24[7] = *((_OWORD *)v2 + 6);
  v24[8] = v25;
  v24[9] = *((_OWORD *)v2 + 8);
  v26 = *((_OWORD *)v2 + 3);
  v24[3] = *((_OWORD *)v2 + 2);
  v24[4] = v26;
  v27 = *((_OWORD *)v2 + 5);
  v24[5] = *((_OWORD *)v2 + 4);
  v24[6] = v27;
  v28 = *((_OWORD *)v2 + 1);
  v24[1] = *(_OWORD *)v2;
  v24[2] = v28;
  if ((v38 & 2) != 0)
  {
    sub_100090014(v2);
    static ButtonRole.destructive.getter(v6);
    v31 = type metadata accessor for ButtonRole(0);
    v30 = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v6, 0, 1, v31);
  }
  else
  {
    v29 = type metadata accessor for ButtonRole(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v6, 1, 1, v29);
    v30 = sub_100090014(v2);
  }
  v38 = v37;
  __chkstk_darwin(v30);
  v37[-4] = v32;
  v37[-3] = v15;
  v37[-2] = v19;
  v33 = sub_100005574(&qword_10048E4B8);
  v34 = sub_10002FFB8(&qword_10048E4B0, &qword_10048E4B8, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  Button.init(role:action:label:)(v6, sub_100090498, v24, sub_10008F134, &v37[-6], v33, v34);

  swift_bridgeObjectRelease(v15);
  v35 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v35(v14, v11, v7);
  v36 = v39;
  v35(v39, v14, v7);
  return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v36, 0, 1, v7);
}

uint64_t AnyAction.button.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  void *v18;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;

  v5 = sub_100005574(&qword_10048E560);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_100005574(&qword_10048FF10);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v11 = __chkstk_darwin(v10);
  v12 = *(_QWORD *)(a1 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v16 = (uint64_t *)(v2 + *(int *)(a1 + 40));
  v17 = v16[1];
  v18 = (void *)v16[4];
  if (v17 < 2 || v18 == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, 1, 1, v8);
  v41 = v14;
  v42 = v15;
  v44 = a2;
  v21 = *v16;
  v39 = v16[5];
  v40 = v21;
  v43 = v18;
  swift_bridgeObjectRetain();
  v22 = AnyAction.canPerform.getter(a1);
  v24 = v23;
  sub_10001406C(v22, v23);
  if (v24 != 1)
  {
    swift_bridgeObjectRelease(v17);

    a2 = v44;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, 1, 1, v8);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a1);
  v25 = *(unsigned __int8 *)(v12 + 80);
  v26 = (v25 + 32) & ~v25;
  v27 = swift_allocObject(&unk_1004464B0, v26 + v13, v25 | 7);
  *(_OWORD *)(v27 + 16) = *(_OWORD *)(a1 + 16);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v27 + v26, (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  v28 = v43;
  v29 = v40;
  if ((v39 & 2) != 0)
  {
    static ButtonRole.destructive.getter(v7);
    v32 = type metadata accessor for ButtonRole(0);
    v31 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v7, 0, 1, v32);
  }
  else
  {
    v30 = type metadata accessor for ButtonRole(0);
    v31 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v7, 1, 1, v30);
  }
  __chkstk_darwin(v31);
  *(&v39 - 4) = v29;
  *(&v39 - 3) = v17;
  *(&v39 - 2) = (uint64_t)v28;
  v33 = sub_100005574(&qword_10048E4B8);
  v34 = sub_10002FFB8(&qword_10048E4B0, &qword_10048E4B8, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  v35 = v42;
  Button.init(role:action:label:)(v7, sub_10008E9AC, v27, sub_10008F134, &v39 - 6, v33, v34);

  swift_bridgeObjectRelease(v17);
  v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
  v37 = v41;
  v36(v41, v35, v8);
  v38 = v44;
  v36(v44, v37, v8);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v38, 0, 1, v8);
}

uint64_t sub_10008DC80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4[3] = a2;
  v4[4] = a3;
  v4[2] = a1;
  v5 = type metadata accessor for Actionable(0, a2, a3, a4);
  v4[5] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[6] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v4[7] = v7;
  v4[8] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MainActor(0);
  v4[9] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  return swift_task_switch(sub_10008DD1C, v9, v10);
}

uint64_t sub_10008DD1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t (*)(), uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;

  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 16);
  v11 = *(_OWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 72));
  v6 = *(void (**)(uint64_t (*)(), uint64_t))(v5 + *(int *)(v4 + 52));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v5, v4);
  v7 = *(unsigned __int8 *)(v3 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = swift_allocObject(&unk_100446760, v8 + v2, v7 | 7);
  *(_OWORD *)(v9 + 16) = v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v9 + v8, v1, v4);
  v6(sub_100090BD8, v9);
  swift_release(v9);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_10008DE00(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;
  char *v14;
  void (*v15)(uint64_t (*)(), uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v9 = type metadata accessor for Actionable(0, a4, a5, a4);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v14 = (char *)&v19 - v13;
  if ((*a2 & 1) == 0)
  {
    v15 = *(void (**)(uint64_t (*)(), uint64_t))(a3 + *(int *)(v9 + 52));
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v14, a3, v9);
    v16 = *(unsigned __int8 *)(v10 + 80);
    v17 = (v16 + 32) & ~v16;
    v18 = swift_allocObject(&unk_100446738, v17 + v11, v16 | 7);
    *(_QWORD *)(v18 + 16) = a4;
    *(_QWORD *)(v18 + 24) = a5;
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v18 + v17, v14, v9);
    v15(sub_100090BD8, v18);
    *(_QWORD *)&result = swift_release(v18).n128_u64[0];
  }
  return result;
}

uint64_t sub_10008DF08(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];

  v4 = sub_100005574(&qword_100490078);
  v5 = swift_allocObject(v4, 64, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100384A80;
  sub_10000684C(a1, v5 + 32);
  v6 = a2[1];
  v9[1] = *a2;
  v9[2] = v6;
  v9[0] = v5;
  v7 = sub_100005574(&qword_100490080);
  return State.wrappedValue.setter(v9, v7);
}

uint64_t static Actionable.menuBuilder(lookup:excluding:contexts:resolver:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15[2];
  uint64_t v16;

  v16 = a1;
  KeyPath = swift_getKeyPath(&unk_100389908);
  sub_1000244B0(a4, (uint64_t)v15);
  v8 = swift_allocObject(&unk_1004464D8, 72, 7);
  *(_QWORD *)(v8 + 16) = a3;
  sub_1000137C8(v15, v8 + 24);
  *(_QWORD *)(v8 + 64) = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = sub_100005574(&qword_10048FD18);
  v10 = sub_100005574(&qword_10048FF18);
  v11 = sub_10002FFB8(&qword_10048FF20, &qword_10048FD18, (uint64_t)&protocol conformance descriptor for [A]);
  v12 = sub_10008FE98(&qword_10048FF28, qword_10048FD40, (void (*)(void))sub_10008B0BC, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v13 = sub_10002FFB8(qword_10048FF30, &qword_10048FF18, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  return ForEach<>.init(_:id:content:)(&v16, KeyPath, sub_10008F16C, v8, v9, v10, v11, v12, v13);
}

double sub_10008E0F8@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  void (*v42)(char *, uint64_t);
  double result;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  __int128 v52[2];
  uint64_t v53;

  v51 = a5;
  v9 = type metadata accessor for Divider(0);
  v10 = *(_QWORD *)(v9 - 8);
  v49 = v9;
  v50 = v10;
  v11 = __chkstk_darwin(v9);
  v48 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v44 - v13;
  v47 = sub_100005574(&qword_10048FFC8);
  v15 = *(_QWORD *)(v47 - 8);
  v16 = __chkstk_darwin(v47);
  v46 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v19 = (char *)&v44 - v18;
  v20 = *a1;
  v21 = swift_allocObject(&unk_100446558, 24, 7);
  *(_QWORD *)(v21 + 16) = _swiftEmptyArrayStorage;
  v45 = v21;
  v53 = v20;
  KeyPath = swift_getKeyPath(&unk_1003899F0);
  sub_1000244B0(a3, (uint64_t)v52);
  v23 = (_QWORD *)swift_allocObject(&unk_100446580, 80, 7);
  v23[2] = a2;
  sub_1000137C8(v52, (uint64_t)(v23 + 3));
  v23[8] = v21;
  v23[9] = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain(v21);
  swift_bridgeObjectRetain();
  v24 = sub_100005574(qword_10048FD40);
  v25 = sub_100005574(&qword_10048FFD0);
  v26 = sub_10002FFB8(&qword_10048FFD8, qword_10048FD40, (uint64_t)&protocol conformance descriptor for [A]);
  v27 = sub_10008B0BC();
  v28 = sub_10008FE98(&qword_10048FFE0, &qword_10048FFD0, (void (*)(void))sub_10008FEFC, (uint64_t)&protocol conformance descriptor for <A> A?);
  v44 = v19;
  v29 = ForEach<>.init(_:id:content:)(&v53, KeyPath, sub_10008FE88, v23, v24, v25, v26, v27, v28);
  v30 = v14;
  Divider.init()(v29);
  v31 = v15;
  v32 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v33 = v46;
  v34 = v47;
  v32(v46, v19, v47);
  v35 = v49;
  v36 = v50;
  v37 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
  v38 = v48;
  v37(v48, v30, v49);
  v39 = v51;
  v32(v51, v33, v34);
  v40 = sub_100005574(&qword_100490018);
  v37(&v39[*(int *)(v40 + 48)], v38, v35);
  v41 = *(void (**)(char *, uint64_t))(v36 + 8);
  v41(v30, v35);
  v42 = *(void (**)(char *, uint64_t))(v31 + 8);
  v42(v44, v34);
  v41(v38, v35);
  v42(v33, v34);
  *(_QWORD *)&result = swift_release(v45).n128_u64[0];
  return result;
}

uint64_t sub_10008E3FC@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  Swift::String v18;
  void *object;
  void *v20;
  uint64_t v21;
  Swift::String v22;
  unint64_t v23;
  Swift::String v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD v31[18];
  _OWORD v32[9];
  _OWORD v33[9];
  _QWORD v34[19];

  v28 = a6;
  v27 = sub_100005574(&qword_100490000);
  __chkstk_darwin(v27);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005574(&qword_10048FFF0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  a4 += 16;
  LOBYTE(a1) = *a1;
  sub_1000244B0(a3, (uint64_t)v34);
  swift_beginAccess(a4, v32, 33, 0);
  swift_bridgeObjectRetain();
  sub_10008B2C4(a1, a2, v34, a4, (uint64_t)v33);
  swift_endAccess(v32);
  sub_1000149A8((uint64_t)v33, (uint64_t)v34, &qword_100490020);
  if ((sub_1000AA164(a1, a5) & 1) != 0)
  {
    sub_100090180((uint64_t)v34);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v28, 1, 1, v13);
  }
  sub_1000149A8((uint64_t)v34, (uint64_t)v32, &qword_100490020);
  if (sub_10008FFFC((uint64_t)v32) == 1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v28, 1, 1, v13);
  v33[6] = v32[6];
  v33[7] = v32[7];
  v33[8] = v32[8];
  v33[2] = v32[2];
  v33[3] = v32[3];
  v33[4] = v32[4];
  v33[5] = v32[5];
  v33[0] = v32[0];
  v33[1] = v32[1];
  sub_1000149A8((uint64_t)v34, (uint64_t)v31, &qword_100490020);
  sub_100090014(v31);
  sub_10008D658(v12);
  v29 = 0x2E736E6F69746341;
  v30 = 0xE800000000000000;
  v18._countAndFlagsBits = ActionType.rawValue.getter(v32[0]);
  object = v18._object;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(object);
  v21 = v29;
  v20 = (void *)v30;
  if (qword_10048C980 != -1)
    swift_once(&qword_10048C980, sub_1001DBC90);
  v29 = qword_1004965F8;
  v30 = unk_100496600;
  swift_bridgeObjectRetain();
  v22._countAndFlagsBits = 46;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  v23 = v30;
  swift_bridgeObjectRetain();
  v24._countAndFlagsBits = v21;
  v24._object = v20;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v20);
  v25 = v30;
  sub_10008FF80();
  _s7SwiftUI4ViewP9MusicCoreE23accessibilityIdentifieryQrAD013AccessibilityG0VF_0();
  swift_bridgeObjectRelease(v25);
  sub_100090180((uint64_t)v34);
  sub_100090180((uint64_t)v34);
  sub_100008758((uint64_t)v12, &qword_100490000);
  v26 = v28;
  sub_1000149A8((uint64_t)v16, v28, &qword_10048FFF0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v26, 0, 1, v13);
}

uint64_t sub_10008E70C()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

double sub_10008E728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  double result;
  uint64_t v23;

  v7 = type metadata accessor for AnyAction(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v11 = (char *)&v23 - v10;
  v12 = sub_100005574((uint64_t *)&unk_100493720);
  __chkstk_darwin(v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  v16 = type metadata accessor for MainActor(0);
  v17 = static MainActor.shared.getter(v16);
  v18 = *(unsigned __int8 *)(v8 + 80);
  v19 = (v18 + 48) & ~v18;
  v20 = (char *)swift_allocObject(&unk_100446698, v19 + v9, v18 | 7);
  *((_QWORD *)v20 + 2) = v17;
  *((_QWORD *)v20 + 3) = &protocol witness table for MainActor;
  *((_QWORD *)v20 + 4) = a2;
  *((_QWORD *)v20 + 5) = a3;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v20[v19], v11, v7);
  v21 = sub_1000C66A8((uint64_t)v14, (uint64_t)&unk_100490060, (uint64_t)v20);
  *(_QWORD *)&result = swift_release(v21).n128_u64[0];
  return result;
}

uint64_t sub_10008E88C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for AnyAction(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = v4 + v9;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + v9, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v9 + v6[9] + 8));
  v12 = v4 + v9 + v6[10];
  v13 = *(_QWORD *)(v12 + 8);
  if (v13 != 1)
  {
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(*(_QWORD *)(v12 + 24));

  }
  v14 = (_QWORD *)(v11 + v6[12]);
  if (*v14)
    swift_release(v14[1]);
  v15 = (_QWORD *)(v11 + v6[13]);
  if (*v15)
    swift_release(v15[1]);
  v16 = (_QWORD *)(v11 + v6[14]);
  if (*v16)
    swift_release(v16[1]);
  v17 = (_QWORD *)(v11 + v6[15]);
  if (*v17)
    swift_release(v17[1]);
  return swift_deallocObject(v4, v9 + v10, v8 | 7);
}

double sub_10008E9AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AnyAction(0, v5, v6, a4) - 8) + 80);
  return sub_10008E728(v4 + ((v7 + 32) & ~v7), v5, v6, v8);
}

uint64_t sub_10008E9FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(void);

  v4[3] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[4] = v5;
  v4[5] = static MainActor.shared.getter(v5);
  v8 = (uint64_t (*)(void))((char *)&dword_100490040 + dword_100490040);
  v6 = (_QWORD *)swift_task_alloc(unk_100490044);
  v4[6] = v6;
  *v6 = v4;
  v6[1] = sub_10008EA7C;
  return v8();
}

uint64_t sub_10008EA7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc(v2);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  if (v0)
    v6 = sub_10008EB34;
  else
    v6 = sub_10008EB04;
  return swift_task_switch(v6, v5, v4);
}

uint64_t sub_10008EB04()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008EB34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v21;

  swift_release(*(_QWORD *)(v0 + 40));
  if (qword_10048C590 != -1)
    swift_once(&qword_10048C590, sub_100086650);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD **)(v0 + 24);
  v4 = type metadata accessor for Logger(0, v1);
  sub_1000086B4(v4, (uint64_t)static Logger.actions);
  sub_100090014(v3);
  swift_errorRetain(v2);
  sub_100090014(v3);
  v5 = swift_errorRetain(v2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 56);
  v10 = *(unsigned __int8 **)(v0 + 24);
  if (v8)
  {
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    v21 = v12;
    *(_DWORD *)v11 = 136446466;
    v13 = (char *)ActionType.rawValue.getter(*v10);
    v15 = v14;
    *(_QWORD *)(v11 + 4) = sub_100019400(v13, v14, &v21);
    swift_bridgeObjectRelease(v15);
    sub_1000906F8(v10);
    sub_1000906F8(v10);
    *(_WORD *)(v11 + 12) = 2082;
    *(_QWORD *)(v0 + 16) = v9;
    swift_errorRetain(v9);
    v16 = sub_100005574((uint64_t *)&unk_1004911F0);
    v17 = (char *)String.init<A>(describing:)(v0 + 16, v16);
    v19 = v18;
    *(_QWORD *)(v11 + 14) = sub_100019400(v17, v18, &v21);
    swift_bridgeObjectRelease(v19);
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Action %{public}s failed: %{public}s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    swift_errorRelease(v9);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 56));
    sub_1000906F8(v10);
    sub_1000906F8(v10);
    swift_errorRelease(v9);
    swift_errorRelease(v9);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008ED68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6[4] = a5;
  v6[5] = a6;
  v6[3] = a4;
  v7 = type metadata accessor for AnyAction(0, a5, a6, a4);
  v6[6] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[7] = v8;
  v6[8] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MainActor(0);
  v6[9] = v9;
  v6[10] = static MainActor.shared.getter(v9);
  v10 = (_QWORD *)swift_task_alloc(dword_10048FA9C);
  v6[11] = v10;
  *v10 = v6;
  v10[1] = sub_10008EE18;
  return AnyAction.execute()(v7);
}

uint64_t sub_10008EE18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc(v2);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  if (v0)
    v6 = sub_10008EED8;
  else
    v6 = sub_10008EEA0;
  return swift_task_switch(v6, v5, v4);
}

uint64_t sub_10008EEA0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008EED8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v27;
  uint64_t v28;

  swift_release(*(_QWORD *)(v0 + 80));
  if (qword_10048C590 != -1)
    swift_once(&qword_10048C590, sub_100086650);
  v2 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 24);
  v7 = type metadata accessor for Logger(0, v1);
  sub_1000086B4(v7, (uint64_t)static Logger.actions);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
  swift_errorRetain(v2);
  v8 = swift_errorRetain(v2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter();
  v11 = os_log_type_enabled(v9, v10);
  v12 = *(_QWORD *)(v0 + 96);
  v13 = *(_QWORD *)(v0 + 56);
  v14 = *(_QWORD *)(v0 + 64);
  v15 = *(_QWORD *)(v0 + 48);
  if (v11)
  {
    v17 = *(_QWORD *)(v0 + 32);
    v16 = *(_QWORD *)(v0 + 40);
    v18 = swift_slowAlloc(22, -1);
    v27 = swift_slowAlloc(64, -1);
    v28 = v27;
    *(_DWORD *)v18 = 136446466;
    v19 = (char *)sub_100030D00(v14, v17, *(_QWORD *)(v16 + 8));
    v21 = v20;
    *(_QWORD *)(v18 + 4) = sub_100019400(v19, v20, &v28);
    swift_bridgeObjectRelease(v21);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
    *(_WORD *)(v18 + 12) = 2082;
    *(_QWORD *)(v0 + 16) = v12;
    swift_errorRetain(v12);
    v22 = sub_100005574((uint64_t *)&unk_1004911F0);
    v23 = (char *)String.init<A>(describing:)(v0 + 16, v22);
    v25 = v24;
    *(_QWORD *)(v18 + 14) = sub_100019400(v23, v24, &v28);
    swift_bridgeObjectRelease(v25);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Action %{public}s failed: %{public}s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v27, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    swift_errorRelease(v12);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 96));
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
    swift_errorRelease(v12);
    swift_errorRelease(v12);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008F138()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  sub_10000682C(v0 + 3);
  swift_bridgeObjectRelease(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

double sub_10008F16C@<D0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;

  return sub_10008E0F8(a1, *(_QWORD *)(v2 + 16), v2 + 24, *(_QWORD *)(v2 + 64), a2);
}

uint64_t sub_10008F17C(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of Actionable.body(content:)>>, 1);
}

uint64_t sub_10008F1B0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_100389990;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = &unk_1003899A8;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    v4[5] = (char *)&value witness table for () + 64;
    v4[6] = &unk_1003899C0;
    swift_initStructMetadata(a1, 0, 7, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_10008F258(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void (*v30)(unint64_t, unint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64) + 7;
  v7 = *(_DWORD *)(v4 + 80) & 0x100000;
  v8 = *a2;
  *a1 = *a2;
  if (v5 > 7
    || v7 != 0
    || ((((v6 + ((v5 + 72) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    v11 = (uint64_t *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
  }
  else
  {
    v11 = a1;
    v31 = a2[1];
    a1[1] = v31;
    v12 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFF8);
    v13 = (uint64_t *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
    v14 = *v13;
    *v12 = *v13;
    v15 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
    v16 = (uint64_t *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
    v17 = *v16;
    *v15 = *v16;
    v18 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
    v19 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    v20 = *(_QWORD *)(v19 + 24);
    *(_QWORD *)(v18 + 24) = v20;
    *(_QWORD *)(v18 + 32) = *(_QWORD *)(v19 + 32);
    v30 = **(void (***)(unint64_t, unint64_t, uint64_t))(v20 - 8);
    v32 = v3;
    swift_bridgeObjectRetain(v8);
    swift_retain(v31);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v17);
    v30(v18, v19, v20);
    v21 = (v18 + v5 + 40) & ~v5;
    v22 = (v19 + v5 + 40) & ~v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v21, v22, v32);
    v23 = (_QWORD *)((v6 + v21) & 0xFFFFFFFFFFFFFFF8);
    v24 = (_QWORD *)((v6 + v22) & 0xFFFFFFFFFFFFFFF8);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    v26 = ((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8;
    v27 = ((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8;
    v28 = *(_QWORD *)v27;
    *(_QWORD *)v26 = *(_QWORD *)v27;
    v8 = *(_QWORD *)(v27 + 8);
    *(_QWORD *)(v26 + 8) = v8;
    *(_BYTE *)(v26 + 16) = *(_BYTE *)(v27 + 16);
    swift_retain(v25);
    swift_retain(v28);
  }
  swift_retain(v8);
  return v11;
}

double sub_10008F420(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  double result;

  swift_bridgeObjectRelease(*a1);
  swift_release(a1[1]);
  v4 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease(*v4);
  v5 = (_QWORD *)(((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease(*v5);
  v6 = (_QWORD *)(((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  sub_10000682C(v6);
  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v8 = ((unint64_t)v6 + *(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t))(v7 + 8))(v8);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v9 + 8));
  v10 = (_QWORD *)((v9 + 23) & 0xFFFFFFFFFFFFFFF8);
  swift_release(*v10);
  *(_QWORD *)&result = swift_release(v10[1]).n128_u64[0];
  return result;
}

uint64_t *sub_10008F4D0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void (*v16)(unint64_t, unint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *a2;
  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFF8);
  v8 = (uint64_t *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  *v7 = *v8;
  v10 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8);
  v11 = (uint64_t *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  v12 = *v11;
  *v10 = *v11;
  v13 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_QWORD *)(v14 + 24);
  *(_QWORD *)(v13 + 24) = v15;
  *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
  v16 = **(void (***)(unint64_t, unint64_t, uint64_t))(v15 - 8);
  swift_bridgeObjectRetain(v5);
  swift_retain(v6);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v12);
  v16(v13, v14, v15);
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = (v18 + 40 + v13) & ~v18;
  v20 = (v18 + 40 + v14) & ~v18;
  (*(void (**)(uint64_t, uint64_t))(v17 + 16))(v19, v20);
  v21 = *(_QWORD *)(v17 + 64) + 7;
  v22 = (_QWORD *)((v21 + v19) & 0xFFFFFFFFFFFFFFF8);
  v23 = (_QWORD *)((v21 + v20) & 0xFFFFFFFFFFFFFFF8);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = ((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8;
  v26 = ((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8;
  v27 = *(_QWORD *)v26;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v28 = *(_QWORD *)(v26 + 8);
  *(_QWORD *)(v25 + 8) = v28;
  *(_BYTE *)(v25 + 16) = *(_BYTE *)(v26 + 16);
  swift_retain(v24);
  swift_retain(v27);
  swift_retain(v28);
  return a1;
}

uint64_t *sub_10008F61C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v6);
  v7 = a1[1];
  v8 = a2[1];
  a1[1] = v8;
  swift_retain(v8);
  swift_release(v7);
  v9 = (uint64_t *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = (uint64_t *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFF8);
  v11 = *v9;
  *v9 = *v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v11);
  v12 = (uint64_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  v13 = (uint64_t *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8);
  v14 = *v12;
  *v12 = *v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v14);
  v15 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  sub_100020AF8(v15, v16);
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = ((unint64_t)v15 + v18 + 40) & ~v18;
  v20 = ((unint64_t)v16 + v18 + 40) & ~v18;
  (*(void (**)(uint64_t, uint64_t))(v17 + 24))(v19, v20);
  v21 = *(_QWORD *)(v17 + 64) + 7;
  v22 = (_QWORD *)((v21 + v19) & 0xFFFFFFFFFFFFFFF8);
  v23 = (_QWORD *)((v21 + v20) & 0xFFFFFFFFFFFFFFF8);
  v24 = v23[1];
  v25 = v22[1];
  *v22 = *v23;
  v22[1] = v24;
  swift_retain(v24);
  swift_release(v25);
  v26 = ((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8;
  v27 = ((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8;
  v28 = *(_QWORD *)v26;
  v29 = *(_QWORD *)v27;
  *(_QWORD *)v26 = *(_QWORD *)v27;
  swift_retain(v29);
  swift_release(v28);
  v30 = *(_QWORD *)(v27 + 8);
  v31 = *(_QWORD *)(v26 + 8);
  *(_QWORD *)(v26 + 8) = v30;
  swift_retain(v30);
  swift_release(v31);
  *(_BYTE *)(v26 + 16) = *(_BYTE *)(v27 + 16);
  return a1;
}

_OWORD *sub_10008F788(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  unint64_t v19;
  unint64_t v20;
  char v21;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = (_QWORD *)(((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFF8);
  *v6 = *v7;
  v8 = ((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_OWORD *)v9;
  v11 = *(_OWORD *)(v9 + 16);
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
  *(_OWORD *)v8 = v10;
  *(_OWORD *)(v8 + 16) = v11;
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v13 + 40 + v8) & ~v13;
  v15 = (v13 + 40 + v9) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v14, v15);
  v16 = *(_QWORD *)(v12 + 64) + 7;
  v17 = (_OWORD *)((v16 + v14) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_OWORD *)((v16 + v15) & 0xFFFFFFFFFFFFFFF8);
  *v17 = *v18;
  v19 = ((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8;
  v20 = ((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(_BYTE *)(v20 + 16);
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *(_BYTE *)(v19 + 16) = v21;
  return a1;
}

uint64_t *sub_10008F860(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  v8 = (uint64_t *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v9 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)v9;
  v9 += 15;
  v11 = *v8;
  *v8 = v10;
  swift_bridgeObjectRelease(v11);
  v12 = (uint64_t *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v13 = (v9 & 0xFFFFFFFFFFFFF8) + 15;
  v14 = *v12;
  *v12 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease(v14);
  v15 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  v16 = v13 & 0xFFFFFFFFFFFFFFF8;
  sub_10000682C((_QWORD *)v15);
  v17 = *(_OWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
  v18 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(_QWORD *)(v15 + 32) = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 32);
  *(_OWORD *)v15 = v17;
  *(_OWORD *)(v15 + 16) = v18;
  v19 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = (v20 + 40 + v15) & ~v20;
  v22 = (v20 + 40 + v16) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 40))(v21, v22);
  v23 = *(_QWORD *)(v19 + 64) + 7;
  v24 = (v23 + v21) & 0xFFFFFFFFFFFFFFF8;
  v25 = v23 + v22;
  v26 = *(_QWORD *)(v24 + 8);
  v27 = (v25 & 0xFFFFFFFFFFFFFFF8) + 23;
  *(_OWORD *)v24 = *(_OWORD *)(v25 & 0xFFFFFFFFFFFFFFF8);
  swift_release(v26);
  v28 = (v24 + 23) & 0xFFFFFFFFFFFFFFF8;
  v27 &= 0xFFFFFFFFFFFFFFF8;
  v29 = *(_QWORD *)v28;
  *(_QWORD *)v28 = *(_QWORD *)v27;
  swift_release(v29);
  v30 = *(_QWORD *)(v28 + 8);
  *(_QWORD *)(v28 + 8) = *(_QWORD *)(v27 + 8);
  swift_release(v30);
  *(_BYTE *)(v28 + 16) = *(_BYTE *)(v27 + 16);
  return a1;
}

uint64_t sub_10008F99C(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((((((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8)
                                                                        + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                      + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                    + v7
                                                                    + 40) & ~v7);
    }
    else
    {
      v14 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      return (v14 + 1);
    }
  }
  else
  {
    v8 = ((((*(_QWORD *)(v4 + 64) + ((v7 + 72) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 17;
    v9 = (a2 - v6 + 255) >> (8 * v8);
    if (v8 < 4)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_10008FA3C + 4 * byte_1003898F8[v12]))();
  }
}

void sub_10008FAE4(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((((*(_QWORD *)(v5 + 64)
         + ((*(unsigned __int8 *)(v5 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
         + 7) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8)
     + 17;
  if (v6 >= a3)
  {
    v10 = 0;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X13 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_10008FC1C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x10008FCA0);
}

void sub_10008FC24(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x10008FC2CLL);
  JUMPOUT(0x10008FCA0);
}

void sub_10008FC3C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x10008FCA0);
}

void sub_10008FC44()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x10008FCA0);
}

void sub_10008FC4C(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if ((a3 & 0x80000000) == 0)
    {
      if ((a2 & 0x80000000) == 0)
        JUMPOUT(0x10008FC9CLL);
      JUMPOUT(0x10008FC94);
    }
    JUMPOUT(0x10008FC58);
  }
  JUMPOUT(0x10008FCA0);
}

uint64_t sub_10008FCB8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t OpaqueTypeConformance2;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *a1;
  v4 = a1[1];
  v6 = type metadata accessor for Actionable(255, *a1, v4, a4);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Actionable<A>, v6);
  v8 = type metadata accessor for _ViewModifier_Content(255, v6, WitnessTable);
  v9 = sub_100005600(&qword_10048FED0);
  v10 = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v8);
  v13 = sub_100005600(&qword_10048FED8);
  v14 = &type metadata for Bool;
  v15 = sub_10008CB58();
  v16 = &protocol witness table for Bool;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v13, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v13 = v8;
  v14 = (void *)v9;
  v15 = v5;
  v16 = (void *)v10;
  v17 = OpaqueTypeConformance2;
  v18 = v4;
  return swift_getOpaqueTypeConformance2(&v13, &opaque type descriptor for <<opaque return type of View.contextMenu<A, B>(menuItems:preview:)>>, 1);
}

unint64_t sub_10008FDAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10048FFB8;
  if (!qword_10048FFB8)
  {
    v1 = sub_100005600(&qword_10048FFC0);
    sub_10002FFB8(qword_10048FF30, &qword_10048FF18, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_10048FFB8);
  }
  return result;
}

uint64_t sub_10008FE28()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10008FE4C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  sub_10000682C(v0 + 3);
  swift_release(v0[8]);
  swift_bridgeObjectRelease(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10008FE88@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_10008E3FC(a1, v2[2], (uint64_t)(v2 + 3), v2[8], v2[9], a2);
}

uint64_t sub_10008FE98(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100005600(a2);
    a3();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10008FEFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10048FFE8;
  if (!qword_10048FFE8)
  {
    v1 = sub_100005600(&qword_10048FFF0);
    sub_10008FF80();
    sub_100006924((unint64_t *)&qword_100490010, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10048FFE8);
  }
  return result;
}

unint64_t sub_10008FF80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10048FFF8;
  if (!qword_10048FFF8)
  {
    v1 = sub_100005600(&qword_100490000);
    sub_10002FFB8(&qword_100490008, &qword_10048FF10, (uint64_t)&protocol conformance descriptor for Button<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10048FFF8);
  }
  return result;
}

uint64_t sub_10008FFFC(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_100090014(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = (void *)a1[7];
  v8 = (void *)a1[9];
  v7 = a1[10];
  v9 = a1[11];
  v12 = a1[13];
  v13 = a1[12];
  v14 = a1[15];
  v15 = a1[14];
  v16 = a1[17];
  v17 = a1[16];
  swift_bridgeObjectRetain();
  sub_1000900DC(v2, v3, v4, v5, v6);
  v10 = v8;
  sub_10003A434(v7, v9);
  sub_10003A434(v13, v12);
  sub_10003A434(v15, v14);
  sub_10003A434(v17, v16);
  return a1;
}

uint64_t sub_1000900DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7;
  uint64_t result;

  if (a2 != 1)
  {
    v7 = a5;
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t sub_100090118@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = a1;
  v9[1] = a2;
  v4 = sub_10000D478();
  swift_bridgeObjectRetain();
  result = Text.init<A>(_:)(v9, &type metadata for String, v4);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = v7 & 1;
  *(_QWORD *)(a3 + 24) = v8;
  return result;
}

uint64_t sub_100090180(uint64_t a1)
{
  sub_1000901D8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(void **)(a1 + 56), *(_QWORD *)(a1 + 64), *(void **)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136));
  return a1;
}

uint64_t sub_1000901D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRelease(a3);
    sub_100086740(a4, a5, a6, a7, a8);

    sub_10003A5C8(a11, a12);
    sub_10003A5C8(a13, a14);
    sub_10003A5C8(a15, a16);
    return sub_10003A5C8(a17, a18);
  }
  return result;
}

double sub_1000902B4(__int128 *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  double result;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v2 = sub_100005574((uint64_t *)&unk_100493720);
  __chkstk_darwin(v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = a1[7];
  v34 = a1[6];
  v35 = v5;
  v36 = a1[8];
  v6 = a1[3];
  v30 = a1[2];
  v31 = v6;
  v7 = a1[5];
  v32 = a1[4];
  v33 = v7;
  v8 = a1[1];
  v28 = *a1;
  v29 = v8;
  v9 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v25 = v34;
  v26 = v35;
  v27 = v36;
  v21 = v30;
  v22 = v31;
  v23 = v32;
  v24 = v33;
  v19 = v28;
  v20 = v29;
  type metadata accessor for MainActor(0);
  v10 = sub_100090014(&v28);
  v11 = static MainActor.shared.getter(v10);
  v12 = swift_allocObject(&unk_1004465D0, 176, 7);
  *(_QWORD *)(v12 + 16) = v11;
  *(_QWORD *)(v12 + 24) = &protocol witness table for MainActor;
  v13 = v26;
  *(_OWORD *)(v12 + 128) = v25;
  *(_OWORD *)(v12 + 144) = v13;
  *(_OWORD *)(v12 + 160) = v27;
  v14 = v22;
  *(_OWORD *)(v12 + 64) = v21;
  *(_OWORD *)(v12 + 80) = v14;
  v15 = v24;
  *(_OWORD *)(v12 + 96) = v23;
  *(_OWORD *)(v12 + 112) = v15;
  v16 = v20;
  *(_OWORD *)(v12 + 32) = v19;
  *(_OWORD *)(v12 + 48) = v16;
  v17 = sub_1000C66A8((uint64_t)v4, (uint64_t)&unk_100490030, v12);
  *(_QWORD *)&result = swift_release(v17).n128_u64[0];
  return result;
}

uint64_t sub_10009040C()
{
  uint64_t v0;
  uint64_t v1;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  v1 = *(_QWORD *)(v0 + 48);
  if (v1 != 1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));

  }
  if (*(_QWORD *)(v0 + 96))
    swift_release(*(_QWORD *)(v0 + 104));
  if (*(_QWORD *)(v0 + 112))
    swift_release(*(_QWORD *)(v0 + 120));
  if (*(_QWORD *)(v0 + 128))
    swift_release(*(_QWORD *)(v0 + 136));
  if (*(_QWORD *)(v0 + 144))
    swift_release(*(_QWORD *)(v0 + 152));
  return swift_deallocObject(v0, 160, 7);
}

double sub_100090498()
{
  uint64_t v0;

  return sub_1000902B4((__int128 *)(v0 + 16));
}

uint64_t sub_1000904A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[4];
  _BYTE v5[16];
  uint64_t v6;
  uint64_t v7;

  v1 = v0[3];
  v2 = v0[4];
  v6 = v0[2];
  v7 = v1;
  v4[2] = v2;
  return Label.init(title:icon:)(sub_1000908A8, v5, sub_10003A59C, v4, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
}

uint64_t sub_100090504(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _QWORD *v12;

  v8 = a4[7];
  *(_OWORD *)(v4 + 112) = a4[6];
  *(_OWORD *)(v4 + 128) = v8;
  *(_OWORD *)(v4 + 144) = a4[8];
  v9 = a4[3];
  *(_OWORD *)(v4 + 48) = a4[2];
  *(_OWORD *)(v4 + 64) = v9;
  v10 = a4[5];
  *(_OWORD *)(v4 + 80) = a4[4];
  *(_OWORD *)(v4 + 96) = v10;
  v11 = a4[1];
  *(_OWORD *)(v4 + 16) = *a4;
  *(_OWORD *)(v4 + 32) = v11;
  v12 = (_QWORD *)swift_task_alloc(dword_10049003C);
  *(_QWORD *)(v4 + 160) = v12;
  *v12 = v4;
  v12[1] = sub_10009059C;
  return sub_10008E9FC(a1, a2, a3, v4 + 16);
}

uint64_t sub_10009059C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 160));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000905E4()
{
  uint64_t v0;
  uint64_t v1;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  v1 = *(_QWORD *)(v0 + 64);
  if (v1 != 1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));

  }
  if (*(_QWORD *)(v0 + 112))
    swift_release(*(_QWORD *)(v0 + 120));
  if (*(_QWORD *)(v0 + 128))
    swift_release(*(_QWORD *)(v0 + 136));
  if (*(_QWORD *)(v0 + 144))
    swift_release(*(_QWORD *)(v0 + 152));
  if (*(_QWORD *)(v0 + 160))
    swift_release(*(_QWORD *)(v0 + 168));
  return swift_deallocObject(v0, 176, 7);
}

uint64_t sub_100090678(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_10049002C);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_10000F894;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _OWORD *))((char *)&dword_100490028 + dword_100490028))(a1, v4, v5, (_OWORD *)(v1 + 32));
}

_QWORD *sub_1000906F8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = (void *)a1[7];
  v8 = (void *)a1[9];
  v7 = a1[10];
  v9 = a1[11];
  v11 = a1[13];
  v12 = a1[12];
  v13 = a1[15];
  v14 = a1[14];
  v15 = a1[17];
  v16 = a1[16];
  swift_bridgeObjectRelease(a1[2]);
  sub_100086740(v2, v3, v4, v5, v6);

  sub_10003A5C8(v7, v9);
  sub_10003A5C8(v12, v11);
  sub_10003A5C8(v14, v13);
  sub_10003A5C8(v16, v15);
  return a1;
}

double sub_1000907C0(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_1000907DC()
{
  uint64_t v0;

  sub_10000682C((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100090800()
{
  uint64_t v0;

  return sub_100085A5C((_QWORD *)(v0 + 16));
}

uint64_t sub_100090808()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10048FBAC);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10000F894;
  return sub_100085A9C(v0 + 16);
}

uint64_t sub_100090854()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10048FBA4);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10000EA88;
  return sub_100085B2C(v0 + 16);
}

uint64_t sub_1000908A0()
{
  uint64_t v0;

  return sub_100085BBC((_QWORD *)(v0 + 16));
}

uint64_t sub_1000908A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100090118(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1000908B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v5 = *((_QWORD *)v4 + 4);
  v6 = (int *)type metadata accessor for AnyAction(0, v5, *((_QWORD *)v4 + 5), a4);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 48) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  swift_unknownObjectRelease(*((_QWORD *)v4 + 2));
  v11 = &v4[v9];
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(&v4[v9], v5);
  swift_bridgeObjectRelease(*(_QWORD *)&v4[v9 + 8 + v6[9]]);
  v12 = &v4[v9 + v6[10]];
  v13 = *((_QWORD *)v12 + 1);
  if (v13 != 1)
  {
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(*((_QWORD *)v12 + 3));

  }
  v14 = &v11[v6[12]];
  if (*(_QWORD *)v14)
    swift_release(*((_QWORD *)v14 + 1));
  v15 = &v11[v6[13]];
  if (*(_QWORD *)v15)
    swift_release(*((_QWORD *)v15 + 1));
  v16 = &v11[v6[14]];
  if (*(_QWORD *)v16)
    swift_release(*((_QWORD *)v16 + 1));
  v17 = &v11[v6[15]];
  if (*(_QWORD *)v17)
    swift_release(*((_QWORD *)v17 + 1));
  return swift_deallocObject(v4, v9 + v10, v8 | 7);
}

uint64_t sub_1000909D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v7 = v4[4];
  v8 = v4[5];
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AnyAction(0, v7, v8, a4) - 8) + 80);
  v10 = v4[2];
  v11 = v4[3];
  v12 = (uint64_t)v4 + ((v9 + 48) & ~v9);
  v13 = (_QWORD *)swift_task_alloc(dword_10049005C);
  *(_QWORD *)(v5 + 16) = v13;
  *v13 = v5;
  v13[1] = sub_10000F894;
  return sub_10008ED68(a1, v10, v11, v12, v7, v8);
}

double sub_100090A7C@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Actionable(0, v6, v7, a2) - 8) + 80);
  return sub_10008D15C(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

uint64_t sub_100090AE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Actionable(0, v6, v7, a4) - 8) + 80);
  v9 = v4 + ((v8 + 32) & ~v8);
  v10 = (_QWORD *)swift_task_alloc(dword_10049006C);
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = sub_10000EA88;
  return sub_10008DC80(v9, v6, v7, v11);
}

double sub_100090B6C(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(_QWORD *)(v4 + 16);
  v8 = *(_QWORD *)(v4 + 24);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Actionable(0, v7, v8, a4) - 8) + 80);
  return sub_10008DE00(a1, a2, v4 + ((v9 + 32) & ~v9), v7, v8);
}

uint64_t sub_100090BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for Actionable(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v8 | 7;
  v12 = (char *)(v4 + v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v9));
  swift_release(*((_QWORD *)v12 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)v12 + 2));
  swift_bridgeObjectRelease(*((_QWORD *)v12 + 3));
  sub_10000682C((_QWORD *)v12 + 4);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(&v12[v6[12]], v5);
  swift_release(*(_QWORD *)&v12[v6[13] + 8]);
  v13 = &v12[v6[14]];
  swift_release(*(_QWORD *)v13);
  swift_release(*((_QWORD *)v13 + 1));
  return swift_deallocObject(v4, v10, v11);
}

uint64_t sub_100090CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Actionable(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4)- 8)+ 80);
  return sub_10008DF08(a1, (_QWORD *)(v4 + ((v6 + 32) & ~v6)));
}

uint64_t sub_100090D0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for Actionable(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = v8 | 7;
  v11 = (*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (char *)(v4 + v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v9));
  swift_release(*((_QWORD *)v12 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)v12 + 2));
  swift_bridgeObjectRelease(*((_QWORD *)v12 + 3));
  sub_10000682C((_QWORD *)v12 + 4);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(&v12[v6[12]], v5);
  swift_release(*(_QWORD *)&v12[v6[13] + 8]);
  v13 = &v12[v6[14]];
  swift_release(*(_QWORD *)v13);
  swift_release(*((_QWORD *)v13 + 1));
  swift_release(*(_QWORD *)(v4 + v11));
  return swift_deallocObject(v4, v11 + 8, v10);
}

uint64_t sub_100090DF8@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X3>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;

  v6 = *(_QWORD *)(type metadata accessor for Actionable(0, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a2) - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  return sub_10008D4B8(a1, v3 + v7, *(_QWORD *)(v3 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFF8)), a3);
}

UIMenu ActionList.menu.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t v7;
  uint64_t v8;
  UIMenuElementSize preferredElementSize;
  Swift::String v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::OpaquePointer v15;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  UIImage_optional v20;

  v19 = a1;
  v17 = a2;
  v18 = a3;
  type metadata accessor for ActionGroup(255, a2, a3, a4);
  v4 = type metadata accessor for Array(0);
  v5 = sub_1000087DC(0, &qword_10048E5D0, UIMenu_ptr);
  swift_bridgeObjectRetain();
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
  v7 = Sequence.compactMap<A>(_:)(sub_100091020, v16, v4, v5, WitnessTable);
  swift_bridgeObjectRelease(v19);
  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0)
      v12 = v7;
    else
      v12 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease(v7);
    if (v13 >= 1)
    {
      v14 = sub_1000087DC(0, &qword_1004900B0, UIMenuElement_ptr);
      swift_bridgeObjectRetain();
      preferredElementSize = _bridgeCocoaArray<A>(_:)(v12, v14);
      swift_bridgeObjectRelease(v7);
      goto LABEL_4;
    }
  }
  else if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v8 = swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v8);
    sub_1000087DC(0, &qword_1004900B0, UIMenuElement_ptr);
    preferredElementSize = v7;
LABEL_4:
    swift_bridgeObjectRelease(v7);
    v10._countAndFlagsBits = 0;
    v10._object = (void *)0xE000000000000000;
    v20.value.super.isa = 0;
    v20.is_nil = 0;
    return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v10, (Swift::String_optional)0, v20, 0, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, v15);
  }
  swift_bridgeObjectRelease(v7);
  return 0;
}

UIMenu sub_100091020@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, UIMenu *a3@<X8>)
{
  uint64_t v3;
  UIMenu result;

  result.super.super.isa = ActionGroup.menu.getter(*a1, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a2).super.super.isa;
  a3->super.super.isa = result.super.super.isa;
  return result;
}

UIMenu ActionGroup.menu.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  UIMenuElementSize preferredElementSize;
  Swift::String v8;
  uint64_t v10;
  uint64_t v11;
  Swift::OpaquePointer v12;
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  UIImage_optional v17;

  v16 = a1;
  v14 = a2;
  v15 = a3;
  type metadata accessor for AnyAction(255, a2, a3, a4);
  v4 = type metadata accessor for Array(0);
  v5 = sub_1000087DC(0, &qword_1004900B0, UIMenuElement_ptr);
  swift_bridgeObjectRetain();
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
  preferredElementSize = Sequence.compactMap<A>(_:)(sub_1000917F8, v13, v4, v5, WitnessTable);
  swift_bridgeObjectRelease(v16);
  if ((unint64_t)preferredElementSize >> 62)
  {
    if (preferredElementSize < UIMenuElementSizeSmall)
      v10 = preferredElementSize;
    else
      v10 = preferredElementSize & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(preferredElementSize);
    if (v11 >= 1)
      goto LABEL_3;
  }
  else if (*(uint64_t *)((preferredElementSize & 0xFFFFFFFFFFFFF8) + 0x10) >= 1)
  {
LABEL_3:
    sub_1000087DC(0, &qword_10048E5D0, UIMenu_ptr);
    v8._countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    v17.value.super.isa = 0;
    v17.is_nil = 0;
    return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v8, (Swift::String_optional)0, v17, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, v12);
  }
  swift_bridgeObjectRelease(preferredElementSize);
  return 0;
}

id ActionList.contextMenuConfiguration(identifier:previewProvider:)(uint64_t a1, void *(*a2)(), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  UIMenu v9;
  Class isa;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  objc_class *v15;
  void *v16;
  uint64_t v17;
  id v18;
  void **v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *(*v24)();
  uint64_t v25;

  v9.super.super.isa = ActionList.menu.getter(a4, a5, a6, a4).super.super.isa;
  if (v9.super.super.isa)
  {
    isa = v9.super.super.isa;
    v11 = swift_allocObject(&unk_1004467F0, 24, 7);
    *(_QWORD *)(v11 + 16) = isa;
    v12 = (void *)objc_opt_self(UIContextMenuConfiguration);
    v24 = a2;
    v25 = a3;
    v20 = _NSConcreteStackBlock;
    v21 = 1107296256;
    v22 = sub_100091864;
    v23 = &unk_100446808;
    v13 = _Block_copy(&v20);
    v14 = v25;
    swift_unknownObjectRetain(a1);
    v15 = isa;
    swift_retain_n(a3, 2);
    swift_release(v14);
    v24 = Artwork.Placeholder.image.getter;
    v25 = v11;
    v20 = _NSConcreteStackBlock;
    v21 = 1107296256;
    v22 = sub_1000918B4;
    v23 = &unk_100446830;
    v16 = _Block_copy(&v20);
    v17 = v25;
    swift_retain(v11);
    v18 = objc_msgSend(v12, "configurationWithIdentifier:previewProvider:actionProvider:", a1, v13, v16, swift_release(v17).n128_f64[0]);
    swift_unknownObjectRelease(a1);
    swift_release(a3);
    swift_release(v11);
    _Block_release(v16);
    _Block_release(v13);

  }
  else
  {
    return 0;
  }
  return v18;
}

id AnyAction.menuElement.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  id v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  Swift::String v34;
  void *v35;
  uint64_t v36;
  Swift::String v37;
  unint64_t v38;
  Swift::String v39;
  unint64_t v40;
  NSString v41;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;

  v2 = v1;
  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = __chkstk_darwin(a1);
  v7 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v43 - v9;
  v11 = (uint64_t *)(v1 + *(int *)(v8 + 40));
  v12 = v11[1];
  if (v12 == 1)
    return 0;
  v13 = *v11;
  v14 = v11[2];
  v15 = v11[3];
  v17 = (void *)v11[4];
  v16 = v11[5];
  v44 = v13;
  v45 = v16;
  v46 = v17;
  v47 = v14;
  v18 = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19 = AnyAction.canPerform.getter(a1);
  v21 = v20;
  sub_10001406C(v19, v20);
  if (v21 != 1)
  {

    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v12);
    return 0;
  }
  v48 = v15;
  v22 = *(void **)(v2 + *(int *)(a1 + 44));
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v23(v10, v2, a1);
  if (!v22)
  {
    if (v12)
      v26 = v44;
    else
      v26 = 0;
    v27 = 0xE000000000000000;
    if (v12)
      v27 = v12;
    v43 = v27;
    v44 = v26;
    if ((v45 & 1) != 0)
    {
      if ((v45 & 2) != 0)
        v28 = 3;
      else
        v28 = 1;
    }
    else
    {
      if ((v45 & 2) == 0)
      {
        v28 = 0;
        if ((v45 & 4) == 0)
          goto LABEL_22;
        goto LABEL_21;
      }
      v28 = 2;
    }
    if ((v45 & 4) == 0)
    {
LABEL_22:
      v45 = sub_1000087DC(0, &qword_100492190, UIAction_ptr);
      v23(v7, (uint64_t)v10, a1);
      v29 = *(unsigned __int8 *)(v4 + 80);
      v30 = (v29 + 32) & ~v29;
      v31 = swift_allocObject(&unk_100446868, v30 + v5, v29 | 7);
      *(_OWORD *)(v31 + 16) = *(_OWORD *)(a1 + 16);
      (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v31 + v30, v7, a1);
      swift_bridgeObjectRetain();
      v32 = v48;
      swift_bridgeObjectRetain();
      v33 = v18;
      v25 = (id)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v44, v43, v47, v32, v46, 0, 0, 0, 0, v28, 0, sub_100091A4C, v31);
      v24 = *(void (**)(char *, uint64_t))(v4 + 8);
      goto LABEL_23;
    }
LABEL_21:
    v28 |= 4uLL;
    goto LABEL_22;
  }
  v24 = *(void (**)(char *, uint64_t))(v4 + 8);
  v25 = v22;
LABEL_23:
  v24(v10, a1);
  v49 = 0;
  v50 = 0xE000000000000000;
  v34._countAndFlagsBits = 0x2E736E6F69746341;
  v34._object = (void *)0xE800000000000000;
  String.append(_:)(v34);
  DefaultStringInterpolation.appendInterpolation<A>(_:)(v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8));
  v36 = v49;
  v35 = (void *)v50;
  if (qword_10048C980 != -1)
    swift_once(&qword_10048C980, sub_1001DBC90);
  v49 = qword_1004965F8;
  v50 = unk_100496600;
  swift_bridgeObjectRetain();
  v37._countAndFlagsBits = 46;
  v37._object = (void *)0xE100000000000000;
  String.append(_:)(v37);
  v38 = v50;
  swift_bridgeObjectRetain();
  v39._countAndFlagsBits = v36;
  v39._object = v35;
  String.append(_:)(v39);
  swift_bridgeObjectRelease(v38);
  swift_bridgeObjectRelease(v35);
  v40 = v50;
  v41 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v40);
  objc_msgSend(v25, "setAccessibilityIdentifier:", v41);

  swift_bridgeObjectRelease(v48);
  swift_bridgeObjectRelease(v12);

  return v25;
}

double sub_10009168C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  double result;
  uint64_t v23;

  v7 = type metadata accessor for AnyAction(0, a3, a4, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v11 = (char *)&v23 - v10;
  v12 = sub_100005574((uint64_t *)&unk_100493720);
  __chkstk_darwin(v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a2, v7);
  v16 = type metadata accessor for MainActor(0);
  v17 = static MainActor.shared.getter(v16);
  v18 = *(unsigned __int8 *)(v8 + 80);
  v19 = (v18 + 48) & ~v18;
  v20 = (char *)swift_allocObject(&unk_100446890, v19 + v9, v18 | 7);
  *((_QWORD *)v20 + 2) = v17;
  *((_QWORD *)v20 + 3) = &protocol witness table for MainActor;
  *((_QWORD *)v20 + 4) = a3;
  *((_QWORD *)v20 + 5) = a4;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v20[v19], v11, v7);
  v21 = sub_1000C66A8((uint64_t)v14, (uint64_t)&unk_1004900C0, (uint64_t)v20);
  *(_QWORD *)&result = swift_release(v21).n128_u64[0];
  return result;
}

id sub_1000917F8@<X0>(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  id result;

  v4 = type metadata accessor for AnyAction(0, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1);
  result = AnyAction.menuElement.getter(v4);
  *a2 = result;
  return result;
}

uint64_t sub_100091840()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_100091864(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v4 = (void *)v1(v3);
  swift_release(v2);
  return v4;
}

uint64_t sub_10009189C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000918AC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id sub_1000918B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v4 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = sub_1000087DC(0, &qword_1004900B0, UIMenuElement_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v5);
  swift_retain(v3);
  v7 = (void *)v4(v6);
  swift_release(v3);
  swift_bridgeObjectRelease(v6);
  return v7;
}

uint64_t sub_10009192C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for AnyAction(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = v4 + v9;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + v9, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v9 + v6[9] + 8));
  v12 = v4 + v9 + v6[10];
  v13 = *(_QWORD *)(v12 + 8);
  if (v13 != 1)
  {
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(*(_QWORD *)(v12 + 24));

  }
  v14 = (_QWORD *)(v11 + v6[12]);
  if (*v14)
    swift_release(v14[1]);
  v15 = (_QWORD *)(v11 + v6[13]);
  if (*v15)
    swift_release(v15[1]);
  v16 = (_QWORD *)(v11 + v6[14]);
  if (*v16)
    swift_release(v16[1]);
  v17 = (_QWORD *)(v11 + v6[15]);
  if (*v17)
    swift_release(v17[1]);
  return swift_deallocObject(v4, v9 + v10, v8 | 7);
}

double sub_100091A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AnyAction(0, v6, v7, a4) - 8) + 80);
  return sub_10009168C(a1, v4 + ((v8 + 32) & ~v8), v6, v7);
}

uint64_t sub_100091AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v5 = *((_QWORD *)v4 + 4);
  v6 = (int *)type metadata accessor for AnyAction(0, v5, *((_QWORD *)v4 + 5), a4);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 48) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  swift_unknownObjectRelease(*((_QWORD *)v4 + 2));
  v11 = &v4[v9];
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(&v4[v9], v5);
  swift_bridgeObjectRelease(*(_QWORD *)&v4[v9 + 8 + v6[9]]);
  v12 = &v4[v9 + v6[10]];
  v13 = *((_QWORD *)v12 + 1);
  if (v13 != 1)
  {
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(*((_QWORD *)v12 + 3));

  }
  v14 = &v11[v6[12]];
  if (*(_QWORD *)v14)
    swift_release(*((_QWORD *)v14 + 1));
  v15 = &v11[v6[13]];
  if (*(_QWORD *)v15)
    swift_release(*((_QWORD *)v15 + 1));
  v16 = &v11[v6[14]];
  if (*(_QWORD *)v16)
    swift_release(*((_QWORD *)v16 + 1));
  v17 = &v11[v6[15]];
  if (*(_QWORD *)v17)
    swift_release(*((_QWORD *)v17 + 1));
  return swift_deallocObject(v4, v9 + v10, v8 | 7);
}

uint64_t sub_100091BCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v7 = v4[4];
  v8 = v4[5];
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AnyAction(0, v7, v8, a4) - 8) + 80);
  v10 = v4[2];
  v11 = v4[3];
  v12 = (uint64_t)v4 + ((v9 + 48) & ~v9);
  v13 = (_QWORD *)swift_task_alloc(dword_1004900BC);
  *(_QWORD *)(v5 + 16) = v13;
  *v13 = v5;
  v13[1] = sub_10000EA88;
  return sub_10008ED68(a1, v10, v11, v12, v7, v8);
}

double View.alertPresenting(_:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  double result;
  _QWORD v15[2];

  swift_retain(a1);
  v8 = sub_100005574(&qword_1004900C8);
  v9 = sub_10002FFB8(&qword_1004900D0, &qword_1004900C8, (uint64_t)&protocol conformance descriptor for PresentedViewState<A>);
  v10 = ObservedObject.init(wrappedValue:)(a1, v8, v9);
  v12 = v11;
  v15[0] = v10;
  v15[1] = v11;
  v13 = sub_100091D34();
  View.viewPresenting<A, B>(_:modifier:)(a1, (uint64_t)v15, a2, (uint64_t)&type metadata for Modifier, a3, v13, a4);
  *(_QWORD *)&result = swift_release(v12).n128_u64[0];
  return result;
}

unint64_t sub_100091D34()
{
  unint64_t result;

  result = qword_1004900D8;
  if (!qword_1004900D8)
  {
    result = swift_getWitnessTable(&unk_100389A24, &type metadata for Modifier);
    atomic_store(result, (unint64_t *)&qword_1004900D8);
  }
  return result;
}

uint64_t sub_100091D78(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for ModifiedContent(255, *a1, &type metadata for Modifier);
  v2 = sub_100005600(&qword_1004900E0);
  v3 = type metadata accessor for ModifiedContent(255, v1, v2);
  sub_100091D34();
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
  sub_10002FFB8(&qword_1004900E8, &qword_1004900E0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
}

_QWORD *initializeBufferWithCopyOfBuffer for Modifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for Modifier(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for Modifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

_QWORD *assignWithTake for Modifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for Modifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Modifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Modifier()
{
  return &type metadata for Modifier;
}

uint64_t sub_100091F64(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1003DA4EC, 1);
}

uint64_t sub_100091F74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t KeyPath;
  _QWORD *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t OpaqueTypeConformance2;
  uint64_t v83;
  void *v85;
  unint64_t v86;
  char *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  void *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  char v124[8];
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  void *v131;

  v6 = sub_100005574(&qword_100490108);
  v106 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v109 = (char *)&v89 - v10;
  v110 = sub_100005574(&qword_100490110);
  __chkstk_darwin(v110);
  v111 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005574(&qword_100490118);
  v108 = *(uint64_t **)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v107 = (char *)&v89 - v16;
  v17 = sub_100005574(&qword_100490120);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v112 = (char *)&v89 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (uint64_t *)(a2 + *(_QWORD *)(*(_QWORD *)a2 + 96));
  v21 = swift_beginAccess(v20, v124, 0, 0);
  v22 = v20[5];
  if (v22)
  {
    v101 = v12;
    v102 = v18;
    v103 = v17;
    v104 = v6;
    v105 = a3;
    v24 = v20[1];
    v25 = v20[2];
    v26 = v20[3];
    v27 = v20[4];
    v28 = (void *)v20[6];
    v125 = *v20;
    v23 = v125;
    v126 = v24;
    v95 = v25;
    v127 = v25;
    v128 = v26;
    v129 = v27 & 1;
    v130 = v22;
    v131 = v28;
    v29 = v22;
    v99 = v28;
    v30 = v28;
    swift_bridgeObjectRetain();
    v97 = v26;
    swift_bridgeObjectRetain();
    v100 = v29;
    v31 = swift_bridgeObjectRetain();
    v32 = static Color.clear.getter(v31);
    v96 = v23;
    if (v24)
      v33 = v23;
    else
      v33 = 0;
    v34 = 0xE000000000000000;
    if (v24)
      v34 = v24;
    v98 = v27;
    v94 = v32;
    v93 = v24;
    v122 = v34;
    v123 = v32;
    v121 = v33;
    swift_bridgeObjectRetain();
    if ((v27 & 1) != 0)
    {
      v61 = sub_100005574(&qword_1004900C8);
      v62 = sub_10002FFB8(&qword_1004900D0, &qword_1004900C8, (uint64_t)&protocol conformance descriptor for PresentedViewState<A>);
      v63 = ObservedObject.projectedValue.getter(a1, a2, v61, v62);
      KeyPath = swift_getKeyPath(&unk_100389A78);
      ObservedObject.Wrapper.subscript.getter(&v113, KeyPath, v63, v62);
      swift_release(KeyPath);
      swift_release(v63);
      v108 = &v89;
      v66 = v113;
      v65 = v114;
      v67 = v115;
      v69 = __chkstk_darwin(v68);
      __chkstk_darwin(v69);
      v70 = sub_100005574(&qword_100490128);
      v90 = v70;
      v71 = sub_100005574(&qword_100490130);
      v72 = sub_10000D478();
      v91 = v72;
      v73 = sub_100093038();
      v92 = v73;
      v107 = (char *)sub_1000930B4();
      v86 = v73;
      v87 = v107;
      v85 = (void *)v72;
      ((void (*)(uint64_t *, void *, _QWORD *, uint64_t, _QWORD, uint64_t (*)(), void **, uint64_t (*)@<X0>(uint64_t *@<X8>), void **, void *, _QWORD *, uint64_t, uint64_t, void *))View.confirmationDialog<A, B, C>(_:isPresented:titleVisibility:actions:message:))(&v121, v66, v65, v67, 0, sub_100093020, &v85, sub_100093318, &v85, &type metadata for Color, &type metadata for String, v70, v71, &protocol witness table for Color);
      swift_release(v65);
      swift_release(v66);
      swift_bridgeObjectRelease(v122);
      v74 = v106;
      v75 = v109;
      v76 = v104;
      (*(void (**)(char *, char *, uint64_t))(v106 + 32))(v109, v9, v104);
      v77 = v111;
      (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v111, v75, v76);
      swift_storeEnumTagMultiPayload(v77, v110, 1);
      v113 = &type metadata for Color;
      v114 = &type metadata for String;
      v78 = v90;
      v115 = v90;
      v116 = v71;
      v79 = v91;
      v117 = &protocol witness table for Color;
      v118 = v91;
      v80 = v92;
      v81 = v107;
      v119 = v92;
      v120 = v107;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v113, &opaque type descriptor for <<opaque return type of View.alert<A, B, C>(_:isPresented:actions:message:)>>, 1);
      v113 = &type metadata for Color;
      v114 = &type metadata for String;
      v115 = v78;
      v116 = v71;
      v117 = &protocol witness table for Color;
      v118 = v79;
      v119 = v80;
      v120 = v81;
      v83 = swift_getOpaqueTypeConformance2(&v113, &opaque type descriptor for <<opaque return type of View.confirmationDialog<A, B, C>(_:isPresented:titleVisibility:actions:message:)>>, 1);
      v59 = (uint64_t)v112;
      _ConditionalContent<>.init(storage:)(v77, v101, v76, OpaqueTypeConformance2, v83);
      swift_release(v94);
      sub_100084838(v96, v93, v95, v97, v98, v100, v99);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v75, v76);
    }
    else
    {
      v35 = sub_100005574(&qword_1004900C8);
      v36 = sub_10002FFB8(&qword_1004900D0, &qword_1004900C8, (uint64_t)&protocol conformance descriptor for PresentedViewState<A>);
      v37 = ObservedObject.projectedValue.getter(a1, a2, v35, v36);
      v38 = swift_getKeyPath(&unk_100389A78);
      ObservedObject.Wrapper.subscript.getter(&v113, v38, v37, v36);
      swift_release(v38);
      swift_release(v37);
      v109 = (char *)&v89;
      v40 = v113;
      v39 = v114;
      LODWORD(v106) = v115;
      v42 = __chkstk_darwin(v41);
      __chkstk_darwin(v42);
      v43 = sub_100005574(&qword_100490128);
      v89 = v43;
      v44 = sub_100005574(&qword_100490130);
      v90 = v44;
      v45 = sub_10000D478();
      v91 = v45;
      v46 = sub_100093038();
      v92 = v46;
      v47 = sub_1000930B4();
      v87 = (char *)v46;
      v88 = v47;
      v85 = &protocol witness table for Color;
      v86 = v45;
      ((void (*)(uint64_t *, void *, _QWORD *, _QWORD, uint64_t (*)(), void **, uint64_t (*)@<X0>(uint64_t *@<X8>), void **, void *, _QWORD *, uint64_t, uint64_t))View.alert<A, B, C>(_:isPresented:actions:message:))(&v121, v40, v39, v106, sub_100093314, &v85, sub_100093110, &v85, &type metadata for Color, &type metadata for String, v43, v44);
      swift_release(v39);
      swift_release(v40);
      swift_bridgeObjectRelease(v122);
      v48 = v108;
      v49 = v107;
      v50 = v15;
      v51 = v101;
      ((void (*)(char *, char *, uint64_t))v108[4])(v107, v50, v101);
      v52 = v111;
      ((void (*)(char *, char *, uint64_t))v48[2])(v111, v49, v51);
      swift_storeEnumTagMultiPayload(v52, v110, 0);
      v113 = &type metadata for Color;
      v114 = &type metadata for String;
      v53 = v89;
      v54 = v90;
      v115 = v89;
      v116 = v90;
      v55 = v91;
      v117 = &protocol witness table for Color;
      v118 = v91;
      v56 = v92;
      v119 = v92;
      v120 = (char *)v47;
      v57 = swift_getOpaqueTypeConformance2(&v113, &opaque type descriptor for <<opaque return type of View.alert<A, B, C>(_:isPresented:actions:message:)>>, 1);
      v113 = &type metadata for Color;
      v114 = &type metadata for String;
      v115 = v53;
      v116 = v54;
      v117 = &protocol witness table for Color;
      v118 = v55;
      v119 = v56;
      v120 = (char *)v47;
      v58 = swift_getOpaqueTypeConformance2(&v113, &opaque type descriptor for <<opaque return type of View.confirmationDialog<A, B, C>(_:isPresented:titleVisibility:actions:message:)>>, 1);
      v59 = (uint64_t)v112;
      _ConditionalContent<>.init(storage:)(v52, v51, v104, v57, v58);
      swift_release(v94);
      sub_100084838(v96, v93, v95, v97, v98, v100, v99);
      ((void (*)(char *, uint64_t))v48[1])(v49, v51);
    }
    a3 = v105;
    sub_1000149A8(v59, v105, &qword_100490120);
    v60 = 0;
    v17 = v103;
    v18 = v102;
  }
  else
  {
    v60 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v18 + 56))(a3, v60, 1, v17, v21);
}

uint64_t sub_1000928D0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100389AA0);
  v5 = swift_getKeyPath(&unk_100389AD8);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_100092964(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100389AA0);
  v5 = swift_getKeyPath(&unk_100389AD8);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_1000929EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;

  v7 = *(_QWORD *)(a1 + 40);
  swift_bridgeObjectRetain();
  v1 = sub_100005574(&qword_100490158);
  v2 = sub_100005574(&qword_100490148);
  v3 = sub_10002FFB8(&qword_100490160, &qword_100490158, (uint64_t)&protocol conformance descriptor for [A]);
  v4 = sub_10002FFB8(&qword_100490140, &qword_100490148, (uint64_t)&protocol conformance descriptor for Button<A>);
  v5 = sub_100093128();
  return ((uint64_t (*)(uint64_t *, uint64_t (*)@<X0>(__int128 *@<X0>, uint64_t@<X8>), _QWORD, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, unint64_t))ForEach<>.init(_:content:))(&v7, sub_100092B44, 0, v1, &type metadata for String, v2, v3, v4, v5);
}

uint64_t sub_100092AC4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD v10[2];

  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v10[0] = *(_QWORD *)(a1 + 16);
    v10[1] = v3;
    v4 = sub_10000D478();
    swift_bridgeObjectRetain();
    result = Text.init<A>(_:)(v10, &type metadata for String, v4);
    v9 = v8 & 1;
  }
  else
  {
    result = 0;
    v6 = 0;
    v9 = 0;
    v7 = 0;
  }
  *a2 = result;
  a2[1] = v6;
  a2[2] = v9;
  a2[3] = v7;
  return result;
}

uint64_t sub_100092B44@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  __int128 v29;
  char v30;

  v4 = sub_100005574(&qword_10048E560);
  __chkstk_darwin(v4);
  v6 = (_QWORD *)((char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100005574(&qword_100490148);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[1];
  v23 = *a1;
  v24 = v11;
  v25 = a1[2];
  v26 = *((_QWORD *)a1 + 6);
  v28 = v11;
  v22 = v11;
  sub_1000149A8((uint64_t)&v25, (uint64_t)&v27, &qword_100490170);
  sub_1000149A8((uint64_t)&v27, (uint64_t)&v30, &qword_100490170);
  v12 = v30;
  if (v30 == 2)
  {
    v13 = type metadata accessor for ButtonRole(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v6, 1, 1, v13);
    swift_bridgeObjectRetain();
  }
  else
  {
    v14 = swift_bridgeObjectRetain();
    if ((v12 & 1) != 0)
      static ButtonRole.destructive.getter(v6);
    else
      static ButtonRole.cancel.getter(v14);
    v15 = type metadata accessor for ButtonRole(0);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v6, 0, 1, v15);
  }
  v29 = v23;
  v16 = *((_QWORD *)&v25 + 1);
  v17 = v26;
  v18 = swift_allocObject(&unk_100446938, 72, 7);
  v19 = v24;
  *(_OWORD *)(v18 + 16) = v23;
  *(_OWORD *)(v18 + 32) = v19;
  *(_OWORD *)(v18 + 48) = v25;
  *(_QWORD *)(v18 + 64) = v26;
  sub_1000595EC((uint64_t)&v28);
  sub_1000595EC((uint64_t)&v29);
  sub_10003A434(v16, v17);
  v20 = sub_10000D478();
  Button<>.init<A>(_:role:action:)(&v22, v6, sub_1000931A8, v18, &type metadata for String, v20);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v10, v7);
}

double sub_100092D58(uint64_t a1)
{
  uint64_t v2;
  double result;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = sub_100005574((uint64_t *)&unk_100493720);
  __chkstk_darwin(v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 48);
    v8 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v5, 1, 1, v8);
    type metadata accessor for MainActor(0);
    v9 = swift_retain_n(v7, 2);
    v10 = static MainActor.shared.getter(v9);
    v11 = (_QWORD *)swift_allocObject(&unk_100446960, 48, 7);
    v11[2] = v10;
    v11[3] = &protocol witness table for MainActor;
    v11[4] = v6;
    v11[5] = v7;
    v12 = sub_1000C66A8((uint64_t)v5, (uint64_t)&unk_100490180, (uint64_t)v11);
    sub_10003A5C8(v6, v7);
    *(_QWORD *)&result = swift_release(v12).n128_u64[0];
  }
  return result;
}

uint64_t sub_100092E58(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(void);

  v6 = type metadata accessor for MainActor(0);
  v4[2] = v6;
  v4[3] = static MainActor.shared.getter(v6);
  v9 = (uint64_t (*)(void))((char *)a4 + *a4);
  v7 = (_QWORD *)swift_task_alloc(a4[1]);
  v4[4] = v7;
  *v7 = v4;
  v7[1] = sub_100092ED4;
  return v9();
}

uint64_t sub_100092ED4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 32));
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_100092F44, v2, v3);
}

uint64_t sub_100092F44()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100092F74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v6 = *v2;
  v5 = v2[1];
  v7 = static Alignment.center.getter();
  v9 = v8;
  v10 = a2 + *(int *)(sub_100005574(&qword_1004900F0) + 36);
  sub_100091F74(v6, v5, v10);
  v11 = (uint64_t *)(v10 + *(int *)(sub_100005574(&qword_1004900F8) + 36));
  *v11 = v7;
  v11[1] = v9;
  v12 = sub_100005574(&qword_100490100);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a2, a1, v12);
}

uint64_t sub_100093020()
{
  uint64_t v0;

  return sub_1000929EC(*(_QWORD *)(v0 + 16));
}

unint64_t sub_100093038()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100490138;
  if (!qword_100490138)
  {
    v1 = sub_100005600(&qword_100490128);
    sub_10002FFB8(&qword_100490140, &qword_100490148, (uint64_t)&protocol conformance descriptor for Button<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100490138);
  }
  return result;
}

unint64_t sub_1000930B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100490150;
  if (!qword_100490150)
  {
    v1 = sub_100005600(&qword_100490130);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100490150);
  }
  return result;
}

uint64_t sub_100093110@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100092AC4(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_100093128()
{
  unint64_t result;

  result = qword_100490168;
  if (!qword_100490168)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Alert.Action, &type metadata for Alert.Action);
    atomic_store(result, (unint64_t *)&qword_100490168);
  }
  return result;
}

uint64_t sub_10009316C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  if (v0[7])
    swift_release(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

double sub_1000931A8()
{
  uint64_t v0;

  return sub_100092D58(v0 + 16);
}

uint64_t sub_1000931B0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000931DC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10049017C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000EA88;
  return sub_100092E58(a1, v4, v5, v6);
}

uint64_t sub_10009325C()
{
  return 8;
}

_QWORD *sub_100093268(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

unint64_t sub_100093278()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100490188;
  if (!qword_100490188)
  {
    v1 = sub_100005600(&qword_1004900F0);
    sub_10002FFB8(&qword_100490190, &qword_100490100, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_10002FFB8(&qword_100490198, &qword_1004900F8, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100490188);
  }
  return result;
}

void sub_100093320(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

id static UIAlertController.alertController(with:overrideStyle:)(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10009389C(a1, a2, a3 & 1);
}

double sub_100093378(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = sub_100005574((uint64_t *)&unk_100493720);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a2 + 40);
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 48);
    v9 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v6, 1, 1, v9);
    type metadata accessor for MainActor(0);
    v10 = swift_retain_n(v8, 2);
    v11 = static MainActor.shared.getter(v10);
    v12 = (_QWORD *)swift_allocObject(&unk_100446A70, 48, 7);
    v12[2] = v11;
    v12[3] = &protocol witness table for MainActor;
    v12[4] = v7;
    v12[5] = v8;
    v13 = sub_1000C66A8((uint64_t)v6, (uint64_t)&unk_1004901A8, (uint64_t)v12);
    sub_10003A5C8(v7, v8);
    *(_QWORD *)&result = swift_release(v13).n128_u64[0];
  }
  return result;
}

id static UIAlertAction.tapToRadar(title:description:screenshots:attachments:keywords:withDevicePrefix:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  id v28;
  NSURL *v29;
  void *v30;
  void *v31;
  unsigned int v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSString v37;
  void *v38;
  id v39;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD aBlock[5];
  uint64_t v47;

  v43 = a6;
  v44 = a7;
  v45 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v45 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = __chkstk_darwin(v45);
  v41 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v42 = (char *)&v41 - v17;
  v18 = sub_100005574(&qword_10048D510);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v41 - v22;
  if (qword_10048CF08 != -1)
    swift_once(&qword_10048CF08, sub_1001EE2A4);
  if (static DeviceCapabilities.isInternalInstall != 1)
    return 0;
  sub_1000F71A4(a1, a2, a3, a4, a5, v43, v44, a8 & 1, (uint64_t)v23);
  sub_10000DCF8((uint64_t)v23, (uint64_t)v21);
  v24 = v45;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v21, 1, v45) == 1)
  {
    sub_10000DD40((uint64_t)v23);
    v25 = (uint64_t)v21;
LABEL_9:
    sub_10000DD40(v25);
    return 0;
  }
  v26 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v27 = v42;
  v26(v42, v21, v24);
  v28 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  URL._bridgeToObjectiveC()(v29);
  v31 = v30;
  v32 = objc_msgSend(v28, "canOpenURL:", v30);

  if (!v32)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v27, v24);
    v25 = (uint64_t)v23;
    goto LABEL_9;
  }
  v33 = v41;
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v41, v27, v24);
  v34 = *(unsigned __int8 *)(v14 + 80);
  v35 = (v34 + 16) & ~v34;
  v36 = swift_allocObject(&unk_1004469D0, v35 + v15, v34 | 7);
  v26((char *)(v36 + v35), v33, v24);
  v37 = String._bridgeToObjectiveC()();
  aBlock[4] = sub_100093BDC;
  v47 = v36;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100093320;
  aBlock[3] = &unk_1004469E8;
  v38 = _Block_copy(aBlock);
  swift_release(v47);
  v39 = objc_msgSend((id)swift_getObjCClassFromMetadata(), "actionWithTitle:style:handler:", v37, 0, v38);
  _Block_release(v38);

  (*(void (**)(char *, uint64_t))(v14 + 8))(v27, v24);
  sub_10000DD40((uint64_t)v23);
  return v39;
}

void sub_1000937C4()
{
  id v0;
  NSURL *v1;
  void *v2;
  void *v3;
  unint64_t v4;
  Class isa;

  v0 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  URL._bridgeToObjectiveC()(v1);
  v3 = v2;
  v4 = sub_100098E90((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for OpenExternalURLOptionsKey(0);
  sub_1000844E4();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v4);
  objc_msgSend(v0, "openURL:options:completionHandler:", v3, isa, 0);

}

id Alert.uiAlertController.getter()
{
  uint64_t v0;

  return sub_10009389C(v0, 0, 1);
}

id sub_10009389C(uint64_t a1, uint64_t a2, char a3)
{
  NSString v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSString v20;
  void *v21;
  id v22;
  id v24;
  id v25;
  uint64_t v26;
  _QWORD aBlock[5];
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[16];
  _BYTE v31[16];
  _QWORD v32[2];
  _QWORD v33[3];

  if ((a3 & 1) != 0)
    a2 = ~*(unsigned __int8 *)(a1 + 32) & 1;
  sub_100093C30(a1, (uint64_t)v31);
  sub_100093C30(a1 + 16, (uint64_t)v30);
  sub_100093C30((uint64_t)v31, (uint64_t)v32);
  if (v32[1])
  {
    sub_1000595EC((uint64_t)v30);
    sub_1000595EC((uint64_t)v31);
    v5 = String._bridgeToObjectiveC()();
    sub_100052668((uint64_t)v31);
  }
  else
  {
    sub_1000595EC((uint64_t)v30);
    v5 = 0;
  }
  sub_100093C30((uint64_t)v30, (uint64_t)v33);
  if (v33[1])
  {
    v6 = String._bridgeToObjectiveC()();
    sub_100052668((uint64_t)v30);
  }
  else
  {
    v6 = 0;
  }
  v7 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", v5, v6, a2);

  if (!a2)
    objc_msgSend(v7, "setModalPresentationStyle:", 7);
  v8 = *(_QWORD *)(a1 + 40);
  v29 = v8;
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v24 = (id)objc_opt_self(UIAlertAction);
    swift_bridgeObjectRetain();
    v10 = (uint64_t *)(v8 + 40);
    v25 = v7;
    do
    {
      v11 = *(v10 - 1);
      v12 = *v10;
      v14 = v10[1];
      v13 = v10[2];
      v15 = *((unsigned __int8 *)v10 + 24);
      v16 = v10[4];
      v17 = v10[5];
      v18 = 1;
      if ((v15 & 1) != 0)
        v18 = 2;
      if (v15 == 2)
        v18 = 0;
      v26 = v18;
      v19 = swift_allocObject(&unk_100446A20, 72, 7);
      *(_QWORD *)(v19 + 16) = v11;
      *(_QWORD *)(v19 + 24) = v12;
      *(_QWORD *)(v19 + 32) = v14;
      *(_QWORD *)(v19 + 40) = v13;
      *(_BYTE *)(v19 + 48) = v15;
      *(_QWORD *)(v19 + 56) = v16;
      *(_QWORD *)(v19 + 64) = v17;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10003A434(v16, v17);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10003A434(v16, v17);
      v20 = String._bridgeToObjectiveC()();
      aBlock[4] = sub_100093CB4;
      v28 = v19;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100093320;
      aBlock[3] = &unk_100446A38;
      v21 = _Block_copy(aBlock);
      v22 = objc_msgSend(v24, "actionWithTitle:style:handler:", v20, v26, v21, swift_release(v28).n128_f64[0]);
      _Block_release(v21);

      v7 = v25;
      objc_msgSend(v25, "addAction:", v22);
      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease(v12);

      sub_10003A5C8(v16, v17);
      v10 += 7;
      --v9;
    }
    while (v9);
    sub_100093CBC(&v29);
  }
  return v7;
}

uint64_t sub_100093B7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_100093BDC()
{
  type metadata accessor for URL(0);
  sub_1000937C4();
}

uint64_t sub_100093C18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100093C28(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100093C30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005574(&qword_10048E9F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100093C78()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  if (v0[7])
    swift_release(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

double sub_100093CB4(uint64_t a1)
{
  uint64_t v1;

  return sub_100093378(a1, v1 + 16);
}

_QWORD *sub_100093CBC(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

uint64_t sub_100093CE4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100093D10(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1004901A4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000EA88;
  return sub_100092E58(a1, v4, v5, v6);
}

uint64_t Alert.Action.init(id:title:role:perform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = a7;
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  result = __chkstk_darwin(v15);
  v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
  {
    v20 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
    a1 = UUID.uuidString.getter(v20);
    a2 = v21;
    result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  }
  *(_QWORD *)a8 = a1;
  *(_QWORD *)(a8 + 8) = a2;
  *(_QWORD *)(a8 + 16) = a3;
  *(_QWORD *)(a8 + 24) = a4;
  *(_BYTE *)(a8 + 32) = a5;
  v22 = v24;
  *(_QWORD *)(a8 + 40) = a6;
  *(_QWORD *)(a8 + 48) = v22;
  return result;
}

uint64_t Alert.init(title:message:image:style:actions:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(_QWORD *)a8 = result;
  *(_QWORD *)(a8 + 8) = a2;
  *(_QWORD *)(a8 + 16) = a3;
  *(_QWORD *)(a8 + 24) = a4;
  *(_BYTE *)(a8 + 32) = a6 & 1;
  *(_QWORD *)(a8 + 40) = a7;
  *(_QWORD *)(a8 + 48) = a5;
  return result;
}

uint64_t Alert.Action.role.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t Library.Menu.userSelectedIdentifiers.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
}

void *Alert.image.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 48);
  v2 = v1;
  return v1;
}

uint64_t Alert.Action.perform.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  sub_10003A434(v1, *(_QWORD *)(v0 + 48));
  return v1;
}

unint64_t sub_100093EEC()
{
  unint64_t result;

  result = qword_1004901B0;
  if (!qword_1004901B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Alert.Style, &type metadata for Alert.Style);
    atomic_store(result, (unint64_t *)&qword_1004901B0);
  }
  return result;
}

unint64_t sub_100093F34()
{
  unint64_t result;

  result = qword_1004901B8[0];
  if (!qword_1004901B8[0])
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Alert.Action.Role, &type metadata for Alert.Action.Role);
    atomic_store(result, qword_1004901B8);
  }
  return result;
}

void destroy for Alert(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));

}

uint64_t initializeWithCopy for Alert(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v7 = v6;
  return a1;
}

uint64_t assignWithCopy for Alert(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(void **)(a1 + 48);
  v11 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v11;
  v12 = v11;

  return a1;
}

uint64_t assignWithTake for Alert(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  v8 = *(void **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);

  return a1;
}

uint64_t getEnumTagSinglePayload for Alert(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Alert(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Alert()
{
  return &type metadata for Alert;
}

ValueMetadata *type metadata accessor for Alert.Style()
{
  return &type metadata for Alert.Style;
}

uint64_t destroy for Alert.Action(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  result = swift_bridgeObjectRelease(a1[3]);
  if (a1[5])
    return swift_release(a1[6]);
  return result;
}

uint64_t initializeWithCopy for Alert.Action(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = (_OWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  if (v6)
  {
    v8 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = v6;
    *(_QWORD *)(a1 + 48) = v8;
    swift_retain(v8);
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *v7;
  }
  return a1;
}

uint64_t assignWithCopy for Alert.Action(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  if (!v8)
  {
    if (v9)
    {
      v12 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = v9;
      *(_QWORD *)(a1 + 48) = v12;
      swift_retain(v12);
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    return a1;
  }
  if (!v9)
  {
    swift_release(*(_QWORD *)(a1 + 48));
    goto LABEL_7;
  }
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  swift_retain(v10);
  swift_release(v11);
  return a1;
}

uint64_t assignWithTake for Alert.Action(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  if (!v9)
  {
    if (v8)
    {
      v12 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = v8;
      *(_QWORD *)(a1 + 48) = v12;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    return a1;
  }
  if (!v8)
  {
    swift_release(*(_QWORD *)(a1 + 48));
    goto LABEL_7;
  }
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v10;
  swift_release(v11);
  return a1;
}

ValueMetadata *type metadata accessor for Alert.Action()
{
  return &type metadata for Alert.Action;
}

uint64_t _s9MusicCore5AlertV5StyleOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100094458 + 4 * byte_100389B01[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10009448C + 4 * byte_100389AFC[v4]))();
}

uint64_t sub_10009448C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100094494(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10009449CLL);
  return result;
}

uint64_t sub_1000944A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000944B0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000944B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000944BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Alert.Action.Role()
{
  return &type metadata for Alert.Action.Role;
}

uint64_t ArtworkVideoReportingController.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, 48, 7);
  ArtworkVideoReportingController.init()();
  return v1;
}

uint64_t *ArtworkVideoReportingController.init()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t TupleTypeMetadata2;
  uint64_t v4;

  v1 = *v0;
  *((_BYTE *)v0 + 16) = 0;
  v0[3] = 0;
  v0[4] = 0;
  v2 = *(_QWORD *)(v1 + 80);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v2, &type metadata for ComponentRenderEventSignposts, 0, 0);
  v4 = static Array._allocateUninitialized(_:)(0, TupleTypeMetadata2);
  v0[5] = Dictionary.init(dictionaryLiteral:)(v4, v2, &type metadata for ComponentRenderEventSignposts, *(_QWORD *)(v1 + 88));
  return v0;
}

uint64_t ArtworkVideoReportingController.isEnabled.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t ArtworkVideoReportingController.isEnabled.setter(char a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 16, v4, 1, 0);
  *(_BYTE *)(v1 + 16) = a1;
  return result;
}

void *CompoundRequestResponseInvalidation.onInvalidation.modify(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 16, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t BindingRequestResponseInvalidation.onInvalidation.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 24, v3, 0, 0);
  v1 = *(_QWORD *)(v0 + 24);
  sub_10003A434(v1, *(_QWORD *)(v0 + 32));
  return v1;
}

uint64_t BindingRequestResponseInvalidation.onInvalidation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  swift_beginAccess(v2 + 24, v8, 1, 0);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return sub_10003A5C8(v5, v6);
}

void *BindingRequestResponseInvalidation.onInvalidation.modify(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 24, a1, 33, 0);
  return &j__swift_endAccess;
}

void ArtworkVideoReportingController.componentWillAppear(at:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  Class isa;
  id v22;
  void (*v23)(char *, uint64_t, uint64_t);
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  char *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  int v41;
  uint64_t v42;
  _QWORD *v43;
  _BYTE v44[24];
  id v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  unsigned __int8 v51;
  _BYTE v52[32];

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(a1);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = v1 + 5;
  swift_beginAccess(v1 + 5, v52, 0, 0);
  v12 = v1[5];
  v13 = *(_QWORD *)(v3 + 88);
  swift_bridgeObjectRetain(v12);
  v42 = v13;
  Dictionary.subscript.getter(&v45, a1, v12, v4, &type metadata for ComponentRenderEventSignposts, v13);
  swift_bridgeObjectRelease(v12);
  v14 = v45;
  if (v45 == (id)1)
  {
    v38 = 0;
    v39 = 0;
    v36 = 0;
    v37 = 0;
    v40 = 0;
    v41 = 4;
LABEL_6:
    v20 = (void *)objc_opt_self(AMSMetrics);
    Date.init()();
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v22 = objc_msgSend(v20, "serverTimeFromDate:", isa);

    v23 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v14 = v22;
    v32 = v7;
    v23(v7, a1, v4);
    v24 = v40;
    v35 = v40;
    v25 = v39;
    v26 = v39;
    v27 = v36;
    v34 = v36;
    v28 = v4;
    v29 = v37;
    v33 = v37;
    v30 = v38;
    v16 = v38;
    v45 = v22;
    v46 = v25;
    v47 = v27;
    v48 = v29;
    v19 = v26;
    v49 = v30;
    v50 = v24;
    v51 = v41;
    swift_beginAccess(v43, v44, 33, 0);
    v31 = type metadata accessor for Dictionary(0, v28, &type metadata for ComponentRenderEventSignposts, v42);
    v17 = v33;
    Dictionary.subscript.setter(&v45, v32, v31);
    v18 = v34;
    swift_endAccess(v44);
    v15 = v35;
    goto LABEL_7;
  }
  v15 = v50;
  if (!v45)
  {
    v39 = v46;
    v40 = v50;
    v41 = v51;
    v37 = v48;
    v38 = v49;
    v36 = v47;
    goto LABEL_6;
  }
  v16 = v49;
  v17 = v48;
  v18 = v47;
  v19 = v46;
LABEL_7:

}

void ArtworkVideoReportingController.placeholderDidAppear(at:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Class isa;
  id v18;
  void (*v19)(char *, uint64_t, uint64_t);
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  int v34;
  id v35;
  uint64_t *v36;
  uint64_t v37;
  _BYTE v38[24];
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  unsigned __int8 v45;
  _BYTE v46[24];
  _BYTE v47[32];

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(a1);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(v1 + 2, v47, 0, 0);
  if (*((_BYTE *)v1 + 16) == 1)
  {
    v12 = v1 + 5;
    swift_beginAccess(v1 + 5, v46, 0, 0);
    v13 = v1[5];
    v14 = *(_QWORD *)(v3 + 88);
    swift_bridgeObjectRetain();
    v37 = v14;
    Dictionary.subscript.getter(&v39, a1, v13, v4, &type metadata for ComponentRenderEventSignposts, v14);
    swift_bridgeObjectRelease(v13);
    v15 = v39;
    if (v39 == (void *)1)
    {
      v36 = v12;
      v15 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v35 = 0;
      v34 = 4;
    }
    else
    {
      if (v40)
      {
        sub_10009623C(v39, v40, v41, v42, v43, v44);
        return;
      }
      v36 = v12;
      v31 = v41;
      v32 = v42;
      v33 = v43;
      v35 = v44;
      v34 = v45;
    }
    v16 = (void *)objc_opt_self(AMSMetrics);
    Date.init()(v16);
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v18 = objc_msgSend(v16, "serverTimeFromDate:", isa);

    v19 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v30 = v18;
    v19(v7, a1, v4);
    v20 = v35;
    v27 = v35;
    v29 = v15;
    v21 = v31;
    v28 = v31;
    v22 = v32;
    v23 = v32;
    v24 = v33;
    v25 = v33;
    v39 = v15;
    v40 = v18;
    v41 = v21;
    v42 = v22;
    v43 = v24;
    v44 = v20;
    v45 = v34;
    swift_beginAccess(v36, v38, 33, 0);
    v26 = type metadata accessor for Dictionary(0, v4, &type metadata for ComponentRenderEventSignposts, v37);
    Dictionary.subscript.setter(&v39, v7, v26);
    swift_endAccess(v38);

  }
}

void ArtworkVideoReportingController.videoArtworkWasSelectedForPlayback(at:isReadyForDisplay:)(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  __int128 v19;
  char v20;
  __int128 v21;
  void *v22;
  Class isa;
  id v24;
  void *v25;
  __int128 v26;
  void *v27;
  __int128 v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  int v37;
  _BYTE v38[24];
  void *v39;
  __int128 v40;
  __int128 v41;
  void *v42;
  char v43;
  char v44[24];
  void *v45;
  __int128 v46;
  __int128 v47;
  void *v48;
  char v49;
  char v50[32];

  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 80);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(a1);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(v2 + 2, v50, 0, 0);
  if (*((_BYTE *)v2 + 16) == 1)
  {
    v37 = a2;
    v14 = v2 + 5;
    swift_beginAccess(v2 + 5, v44, 0, 0);
    v15 = v2[5];
    v16 = *(_QWORD *)(v5 + 88);
    swift_bridgeObjectRetain();
    v36 = v16;
    Dictionary.subscript.getter(&v39, a1, v15, v6, &type metadata for ComponentRenderEventSignposts, v16);
    swift_bridgeObjectRelease(v15);
    v17 = v39;
    if (v39 == (void *)1)
    {
      v17 = 0;
      v18 = 0;
      v19 = 0uLL;
      v20 = 4;
      v21 = 0uLL;
    }
    else
    {
      v20 = v43;
      v18 = v42;
      v19 = v40;
      v21 = v41;
    }
    v45 = v17;
    v46 = v19;
    v47 = v21;
    v48 = v18;
    v49 = v20;
    v22 = (void *)objc_opt_self(AMSMetrics);
    Date.init()(v22);
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v24 = objc_msgSend(v22, "serverTimeFromDate:", isa);

    *((_QWORD *)&v46 + 1) = v24;
    sub_100094F80();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
    v25 = v45;
    v26 = v46;
    v28 = v47;
    v27 = v48;
    v39 = v45;
    v40 = v46;
    v41 = v47;
    v42 = v48;
    v43 = v49;
    swift_beginAccess(v14, v38, 33, 0);
    v29 = type metadata accessor for Dictionary(0, v6, &type metadata for ComponentRenderEventSignposts, v36);
    v30 = v25;
    v31 = (id)v26;
    v32 = *((id *)&v26 + 1);
    v33 = (id)v28;
    v34 = *((id *)&v28 + 1);
    v35 = v27;
    Dictionary.subscript.setter(&v39, v9, v29);
    swift_endAccess(v38);

  }
}

void sub_100094F80()
{
  __asm { BR              X10 }
}

uint64_t sub_100094FBC()
{
  char v0;
  uint64_t v1;
  char v2;
  uint64_t result;
  char v4;

  v2 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C616974726170, 0xE700000000000000, 0x73756F6976657270, 0xEF6E776F6853796CLL, 0);
  result = swift_bridgeObjectRelease(0xE700000000000000);
  if ((v2 & 1) == 0)
  {
    if ((v0 & 1) != 0)
    {
      *(_BYTE *)(v1 + 48) = 0;
      return result;
    }
    if (*(_QWORD *)(v1 + 24))
    {
      v4 = 1;
    }
    else
    {
      if (!*(_QWORD *)(v1 + 8))
        return result;
      v4 = 2;
    }
    *(_BYTE *)(v1 + 48) = v4;
  }
  return result;
}

void ArtworkVideoReportingController.videoArtworkWillBeginLoading(at:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  Class isa;
  id v18;
  char *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t *v38;
  char *v39;
  _BYTE v40[24];
  void *v41;
  void *v42;
  void *v43;
  id v44;
  void *v45;
  void *v46;
  char v47;
  char v48[24];
  char v49[32];

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(a1);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(v1 + 2, v49, 0, 0);
  if (*((_BYTE *)v1 + 16) == 1)
  {
    v38 = v1 + 5;
    v39 = v7;
    swift_beginAccess(v1 + 5, v48, 0, 0);
    v12 = v1[5];
    v13 = *(_QWORD *)(v3 + 88);
    swift_bridgeObjectRetain(v12);
    v35 = v13;
    Dictionary.subscript.getter(&v41, a1, v12, v4, &type metadata for ComponentRenderEventSignposts, v13);
    swift_bridgeObjectRelease(v12);
    v14 = v41;
    v37 = a1;
    if (v41 == (void *)1)
    {
      v36 = 0;
      v34 = 0;
      v15 = 0;
      v33 = 0;
      v32 = 0;
      v14 = 0;
    }
    else
    {
      v36 = v46;
      v15 = v44;
      v34 = v45;
      v33 = v43;
      v32 = v42;
    }
    v16 = (void *)objc_opt_self(AMSMetrics);
    Date.init()();
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v18 = objc_msgSend(v16, "serverTimeFromDate:", isa);

    v19 = v39;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v39, v37, v4);
    v20 = v32;
    v41 = v14;
    v42 = v32;
    v21 = v33;
    v43 = v33;
    v44 = v18;
    v22 = v34;
    v23 = v36;
    v45 = v34;
    v46 = v36;
    v47 = 4;
    swift_beginAccess(v38, v40, 33, 0);
    v24 = type metadata accessor for Dictionary(0, v4, &type metadata for ComponentRenderEventSignposts, v35);
    v25 = v14;
    v26 = v20;
    v27 = v21;
    v28 = v18;
    v29 = v22;
    v30 = v23;
    Dictionary.subscript.setter(&v41, v19, v24);
    swift_endAccess(v40);

  }
}

void ArtworkVideoReportingController.videoArtworkDidCancelLoading(at:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  Class isa;
  id v21;
  id v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  id v32;
  char *v33;
  uint64_t v34;
  int v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t *v42;
  _BYTE v43[24];
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  unsigned __int8 v50;
  char v51[24];
  char v52[24];

  v2 = v1;
  v4 = *v1;
  v5 = *(_QWORD *)(*v1 + 80);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(v2 + 2, v52, 0, 0);
  if (*((_BYTE *)v2 + 16) == 1)
  {
    v42 = v2 + 5;
    swift_beginAccess(v2 + 5, v51, 0, 0);
    v13 = v2[5];
    v14 = *(_QWORD *)(v4 + 88);
    swift_bridgeObjectRetain();
    v41 = v14;
    Dictionary.subscript.getter(&v44, a1, v13, v5, &type metadata for ComponentRenderEventSignposts, v14);
    swift_bridgeObjectRelease(v13);
    v15 = v44;
    if (v44 != (void *)1)
    {
      v29 = v44;
      v35 = v50;
      v32 = v49;
      v34 = a1;
      v16 = v48;
      v30 = v48;
      v33 = v8;
      v17 = v47;
      v28 = v47;
      v31 = v6;
      v19 = v45;
      v18 = v46;
      v27 = (id)objc_opt_self(AMSMetrics);
      v38 = v16;
      v40 = v15;
      v39 = v19;
      v37 = v18;
      v36 = v17;
      Date.init()(v36);
      isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      v21 = objc_msgSend(v27, "serverTimeFromDate:", isa);

      v22 = v21;
      v23 = v33;
      v24 = v34;
      (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v33, v34, v5);
      v44 = v29;
      v45 = v19;
      v46 = v18;
      v47 = v28;
      v48 = v30;
      v49 = v21;
      v50 = v35;
      swift_beginAccess(v42, v43, 33, 0);
      v25 = type metadata accessor for Dictionary(0, v5, &type metadata for ComponentRenderEventSignposts, v41);
      Dictionary.subscript.setter(&v44, v23, v25);
      swift_endAccess(v43);
      sub_100095970(v24);
      _s9MusicCore31ArtworkVideoReportingControllerC05videoC15DidStopPlayback2atyx_tF_0(v24);

    }
  }
}

void ArtworkVideoReportingController.videoArtworkDidStartPlayback(at:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  Class isa;
  id v21;
  id v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  void *v29;
  uint64_t v30;
  id v31;
  void *v32;
  char *v33;
  uint64_t v34;
  int v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t *v42;
  _BYTE v43[24];
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  unsigned __int8 v50;
  char v51[24];
  char v52[24];

  v2 = v1;
  v4 = *v1;
  v5 = *(_QWORD *)(*v1 + 80);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(v2 + 2, v52, 0, 0);
  if (*((_BYTE *)v2 + 16) == 1)
  {
    v42 = v2 + 5;
    swift_beginAccess(v2 + 5, v51, 0, 0);
    v13 = v2[5];
    v14 = *(_QWORD *)(v4 + 88);
    swift_bridgeObjectRetain();
    v41 = v14;
    Dictionary.subscript.getter(&v44, a1, v13, v5, &type metadata for ComponentRenderEventSignposts, v14);
    swift_bridgeObjectRelease(v13);
    v15 = v44;
    if (v44 != (void *)1)
    {
      v35 = v50;
      v16 = v49;
      v32 = v49;
      v31 = v48;
      v34 = a1;
      v17 = v47;
      v28 = v47;
      v33 = v8;
      v18 = v46;
      v29 = v46;
      v30 = v6;
      v19 = v45;
      v27 = (id)objc_opt_self(AMSMetrics);
      v38 = v16;
      v40 = v15;
      v39 = v19;
      v37 = v18;
      v36 = v17;
      Date.init()(v36);
      isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      v21 = objc_msgSend(v27, "serverTimeFromDate:", isa);

      v22 = v21;
      v23 = v33;
      v24 = v34;
      (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v33, v34, v5);
      v44 = v15;
      v45 = v19;
      v46 = v29;
      v47 = v28;
      v48 = v21;
      v49 = v32;
      v50 = v35;
      swift_beginAccess(v42, v43, 33, 0);
      v25 = type metadata accessor for Dictionary(0, v5, &type metadata for ComponentRenderEventSignposts, v41);
      Dictionary.subscript.setter(&v44, v23, v25);
      swift_endAccess(v43);
      sub_100095970(v24);

    }
  }
}

void sub_100095970(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  NSObject *v19;
  void *v20;
  void *v21;
  char v22;
  char v23;
  NSObject *v24;
  void *v25;
  void *v26;
  id v27;
  NSObject *v28;
  NSObject *v29;
  id v30;
  id v31;
  double v32;
  double v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t v37;
  NSObject *v38;
  id v39;
  id v40;
  NSObject *v41;
  id v42;
  NSObject *v43;
  id v44;
  id v45;
  NSObject *v46;
  id v47;
  NSObject *v48;
  NSObject *v49;
  os_log_type_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  char *v56;
  char *v57;
  char *v58;
  NSObject *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  os_log_t v65;
  uint64_t v66;
  id v67;
  NSObject *v68;
  NSObject *v69;
  id v70;
  NSObject *v71;
  NSObject *v72;
  id v73;
  id v74;
  NSObject *v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t, uint64_t);
  os_log_t v79;
  uint64_t v80;
  NSObject *v81;
  NSObject *v82;
  NSObject *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  void *v89;
  void *v90;
  id v91;
  int v92;
  uint64_t v93;
  char v94[24];
  char v95[24];
  char v96[24];
  NSObject *v97;
  void *v98;
  void *v99;
  NSObject *v100;
  void *v101;
  void *v102;
  NSObject *v103;
  void *v104;
  id v105;
  char v106;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(a1);
  v8 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v76 - v9;
  swift_beginAccess(v1 + 2, v96, 0, 0);
  if (*((_BYTE *)v1 + 16) == 1)
  {
    swift_beginAccess(v1 + 5, v95, 0, 0);
    v11 = v1[5];
    v12 = *(_QWORD *)(v3 + 88);
    swift_bridgeObjectRetain();
    Dictionary.subscript.getter(&v97, a1, v11, v4, &type metadata for ComponentRenderEventSignposts, v12);
    swift_bridgeObjectRelease(v11);
    v13 = v97;
    if (v97 != 1)
    {
      v87 = v8;
      v88 = v10;
      v15 = v98;
      v14 = v99;
      v16 = v100;
      v90 = v101;
      v91 = v102;
      v92 = v103;
      swift_beginAccess(v1 + 3, v94, 0, 0);
      v17 = (uint64_t (*)(_QWORD))v1[3];
      if (v17)
      {
        v86 = v5;
        v89 = v14;
        v18 = v1[4];
        swift_retain(v18);
        v19 = v17(a1);
        v21 = v20;
        v23 = v22;
        sub_10003A5C8((uint64_t)v17, v18);
        if (v16)
        {
          v97 = v19;
          v98 = v21;
          v85 = (uint64_t)v21;
          LOBYTE(v99) = v23;
          v24 = v13;
          v100 = v13;
          v101 = v15;
          v14 = v89;
          v102 = v89;
          v103 = v16;
          v25 = v90;
          v104 = v90;
          v105 = v91;
          v106 = v92;
          if (v90)
          {
            v79 = v19;
            v81 = v91;
            v26 = v15;
            v27 = v25;
            v83 = v16;
            v28 = v16;
            v29 = v13;
            v84 = v26;
            v30 = v26;
            v31 = v14;
            objc_msgSend(v27, "doubleValue");
            v33 = v32;
            -[NSObject doubleValue](v28, "doubleValue");
            v36 = v35;
            v82 = v24;
            if (qword_10048C788 != -1)
              swift_once(&qword_10048C788, sub_1000F0540);
            v37 = type metadata accessor for Logger(0, v34);
            v80 = sub_1000086B4(v37, (uint64_t)static Logger.motion);
            v78 = *(void (**)(_QWORD, _QWORD, _QWORD))(v86 + 16);
            v78(v88, a1, v4);
            swift_bridgeObjectRetain_n(v85, 2);
            v38 = v29;
            v39 = v30;
            v40 = v31;
            v41 = v28;
            v42 = v27;
            v43 = v81;
            v81 = v38;
            v44 = v39;
            v45 = v40;
            v46 = v41;
            v47 = v42;
            v48 = v43;
            v49 = Logger.logObject.getter(v48);
            v50 = static os_log_type_t.debug.getter();
            v51 = v50;
            if (os_log_type_enabled(v49, v50))
            {
              v52 = swift_slowAlloc(32, -1);
              LODWORD(v80) = v51;
              v53 = v52;
              v77 = swift_slowAlloc(64, -1);
              v93 = v77;
              *(_DWORD *)v53 = 136315650;
              v54 = v85;
              swift_bridgeObjectRetain();
              v55 = v45;
              v56 = (char *)Optional<A>.description.getter(v79, v54);
              v79 = v49;
              v58 = v57;
              swift_bridgeObjectRelease(v54);
              *(_QWORD *)(v53 + 4) = sub_100019400(v56, v58, &v93);

              v59 = v81;
              swift_bridgeObjectRelease_n(v54, 2);
              swift_bridgeObjectRelease(v58);
              *(_WORD *)(v53 + 12) = 2080;
              v60 = v87;
              v61 = v88;
              v78(v87, v88, v4);
              v62 = (char *)String.init<A>(describing:)(v60, v4);
              v64 = v63;
              *(_QWORD *)(v53 + 14) = sub_100019400(v62, v63, &v93);
              swift_bridgeObjectRelease(v64);
              (*(void (**)(char *, uint64_t))(v86 + 8))(v61, v4);
              *(_WORD *)(v53 + 22) = 2048;
              *(double *)(v53 + 24) = v33 - v36;
              v65 = v79;
              _os_log_impl((void *)&_mh_execute_header, v79, (os_log_type_t)v80, "Item with id: %s at index: %s loaded enough data to start playback in %f ms.", (uint8_t *)v53, 0x20u);
              v66 = v77;
              swift_arrayDestroy(v77, 2, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v66, -1, -1);
              swift_slowDealloc(v53, -1, -1);

            }
            else
            {

              v75 = v81;
              v54 = v85;
              swift_bridgeObjectRelease_n(v85, 2);
              (*(void (**)(char *, uint64_t))(v86 + 8))(v88, v4);

            }
            v15 = v84;
            v14 = v89;
            v25 = v90;
            v68 = v83;
            v69 = v82;
          }
          else
          {
            v70 = v91;
            v71 = v16;
            v72 = v13;
            v73 = v15;
            v74 = v14;
            v68 = v16;
            v69 = v13;
            v54 = v85;
          }
          if (qword_10048C648 != -1)
            swift_once(&qword_10048C648, sub_10009F8B8);
          MetricsReportingController.recordComponentRenderEvent(_:)((uint64_t)&v97);

          swift_bridgeObjectRelease(v54);
          v67 = v91;

        }
        else
        {
          swift_bridgeObjectRelease(v21);
          v68 = 0;
          v14 = v89;
          v25 = v90;
          v67 = v91;
          v69 = v13;
        }
      }
      else
      {
        v25 = v90;
        v67 = v91;
        v68 = v16;
        v69 = v13;
      }
      sub_10009623C(v69, v15, v14, v68, v25, v67);
    }
  }
}

void _s9MusicCore31ArtworkVideoReportingControllerC05videoC15DidStopPlayback2atyx_tF_0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  char v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  _BYTE v24[24];
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  char v31;
  char v32[24];

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(a1);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v1 + 5;
  swift_beginAccess(v1 + 5, v32, 0, 0);
  v9 = v1[5];
  v10 = *(_QWORD *)(v3 + 88);
  swift_bridgeObjectRetain(v9);
  Dictionary.subscript.getter(&v25, a1, v9, v4, &type metadata for ComponentRenderEventSignposts, v10);
  swift_bridgeObjectRelease(v9);
  v11 = v25;
  if (v25 != (void *)1)
  {
    v22 = v26;
    v23 = v28;
    v13 = v29;
    v12 = v30;
    v14 = v31;

    if (v13)
    {

      v14 = 3;
    }

    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
    v16 = v22;
    v15 = v23;
    v25 = v11;
    v26 = v22;
    v27 = 0;
    v28 = v23;
    v29 = 0;
    v30 = 0;
    v31 = v14;
    swift_beginAccess(v8, v24, 33, 0);
    v17 = type metadata accessor for Dictionary(0, v4, &type metadata for ComponentRenderEventSignposts, v10);
    v18 = v11;
    v19 = v16;
    v20 = v15;
    Dictionary.subscript.setter(&v25, v7, v17);
    swift_endAccess(v24);

  }
}

uint64_t *ArtworkVideoReportingController.deinit()
{
  uint64_t *v0;

  sub_10003A5C8(v0[3], v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  return v0;
}

uint64_t ArtworkVideoReportingController.__deallocating_deinit()
{
  uint64_t *v0;

  sub_10003A5C8(v0[3], v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocClassInstance(v0, 48, 7);
}

void sub_10009623C(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  if (a1 != (void *)1)
  {

  }
}

uint64_t sub_10009629C(uint64_t a1)
{
  _QWORD v2[3];

  v2[0] = &unk_100389CA0;
  v2[1] = &unk_100389CB8;
  v2[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_initClassMetadata2(a1, 0, 3, v2, a1 + 96);
}

uint64_t type metadata accessor for ArtworkVideoReportingController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100031DCC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ArtworkVideoReportingController);
}

void destroy for ComponentRenderEventSignposts(id *a1)
{

}

uint64_t initializeWithCopy for ComponentRenderEventSignposts(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(void **)(a2 + 16);
  v6 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(void **)(a2 + 32);
  v8 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v9 = v3;
  v10 = v4;
  v11 = v5;
  v12 = v6;
  v13 = v7;
  v14 = v8;
  return a1;
}

uint64_t assignWithCopy for ComponentRenderEventSignposts(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v9 = v8;

  v10 = *(void **)(a1 + 16);
  v11 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  v12 = v11;

  v13 = *(void **)(a1 + 24);
  v14 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v14;
  v15 = v14;

  v16 = *(void **)(a1 + 32);
  v17 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v17;
  v18 = v17;

  v19 = *(void **)(a1 + 40);
  v20 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v20;
  v21 = v20;

  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

__n128 initializeWithTake for ComponentRenderEventSignposts(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ComponentRenderEventSignposts(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  v6 = *(void **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);

  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for ComponentRenderEventSignposts(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 49))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ComponentRenderEventSignposts(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ComponentRenderEventSignposts()
{
  return &type metadata for ComponentRenderEventSignposts;
}

double CarNowPlayingMetrics.Data.timePlayed.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void CarNowPlayingMetrics.Data.timePlayed.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t ApplicationCapabilities.subscriptionCapabilities.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t CarNowPlayingMetrics.Data.tracksPlayed.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

CFRange (__swiftcall *UIView.Shadow.opacity.modify())(__C::_NSRange)
{
  return CFRange.init(_:);
}

double UIView.Shadow.radius.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void UIView.Shadow.radius.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t ApplicationCapabilities.allowedServices.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
}

uint64_t Library.Menu.Revision.selected.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 24));
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

CFRange (__swiftcall *UIView.Shadow.offset.modify())(__C::_NSRange)
{
  return CFRange.init(_:);
}

uint64_t QRCode.errorCorrectionLevel.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t CarNowPlayingMetrics.Data.sharedSessionMaxParticipants.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

CFRange (__swiftcall *Library.Menu.Request.excludedIdentifiers.modify())(__C::_NSRange)
{
  return CFRange.init(_:);
}

uint64_t CarNowPlayingMetrics.Data.init(timePlayed:tracksPlayed:rangeStartTime:sharedSessionIds:sharedSessionMaxParticipants:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  *(double *)a4 = a5;
  *(_QWORD *)(a4 + 8) = result;
  *(double *)(a4 + 16) = a6;
  *(_QWORD *)(a4 + 24) = a2;
  *(_QWORD *)(a4 + 32) = a3;
  return result;
}

uint64_t sub_100096674(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000966AC + 4 * byte_100389CF0[a1]))(0x79616C50656D6974, 0xEA00000000006465);
}

uint64_t sub_1000966AC()
{
  return 0x6C50736B63617274;
}

uint64_t sub_1000966CC()
{
  return 0x61745365676E6172;
}

unint64_t sub_1000966F0()
{
  return 0xD000000000000010;
}

unint64_t sub_10009670C()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_10009672C()
{
  unsigned __int8 *v0;

  return sub_100096674(*v0);
}

uint64_t sub_100096734@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100097D44(a1, a2);
  *a3 = result;
  return result;
}

void sub_100096758(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_100096764(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10009697C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10009678C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10009697C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CarNowPlayingMetrics.Data.encode(to:)(_QWORD *a1)
{
  double *v1;
  uint64_t v2;
  double *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;

  v3 = v1;
  v5 = sub_100005574(&qword_100490248);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000ABC8(a1, v9);
  v11 = sub_10009697C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CarNowPlayingMetrics.Data.CodingKeys, &type metadata for CarNowPlayingMetrics.Data.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v25 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v25, v5, v12);
  if (!v2)
  {
    v13 = *((_QWORD *)v3 + 1);
    v24 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, &v24, v5);
    v14 = v3[2];
    v23 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(&v23, v5, v14);
    v22 = *((_QWORD *)v3 + 3);
    v21 = 3;
    v15 = sub_100005574(&qword_100490258);
    v16 = sub_100098BDC(&qword_100490260, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> Set<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v5, v15, v16);
    v17 = *((_QWORD *)v3 + 4);
    v20 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v17, &v20, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10009697C()
{
  unint64_t result;

  result = qword_100490250;
  if (!qword_100490250)
  {
    result = swift_getWitnessTable(&unk_100389ED0, &type metadata for CarNowPlayingMetrics.Data.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100490250);
  }
  return result;
}

double CarNowPlayingMetrics.Data.init(from:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_100097F9C(a1, v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_100096A04(_QWORD *a1)
{
  return CarNowPlayingMetrics.Data.encode(to:)(a1);
}

uint64_t static CarNowPlayingMetrics.persistedMetricsData(for:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  _BYTE v4[40];

  sub_1000981E4(a1 & 1, (uint64_t)v4);
  return sub_1000149A8((uint64_t)v4, a2, &qword_100490268);
}

uint64_t Logger.carMetrics.unsafeMutableAddressor(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (qword_10048C5A0 != -1)
    swift_once(&qword_10048C5A0, sub_100097C2C);
  v2 = type metadata accessor for Logger(0, a2);
  return sub_1000086B4(v2, (uint64_t)static Logger.carMetrics);
}

void static CarNowPlayingMetrics.storeMetricsData(_:for:)(uint64_t a1, char a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  unint64_t v7;
  NSString v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  NSData v13;
  unint64_t v14;
  NSString v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v2 = a2 & 1;
  sub_1000149A8(a1, (uint64_t)&v18, &qword_100490268);
  if (*((_QWORD *)&v19 + 1))
  {
    v21 = v18;
    v22 = v19;
    v23 = v20;
    v3 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
    v4 = JSONEncoder.init()();
    v16[0] = v21;
    v16[1] = v22;
    v17 = v23;
    v5 = sub_100098588();
    v9 = dispatch thunk of JSONEncoder.encode<A>(_:)(v16, &type metadata for CarNowPlayingMetrics.Data, v5);
    v11 = v10;
    swift_release(v4);
    v12 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v13.super.isa = Data._bridgeToObjectiveC()().super.isa;
    if (v2)
      v14 = 0x80000001003AE610;
    else
      v14 = 0x80000001003AE630;
    v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v14);
    objc_msgSend(v12, "setValue:forKey:", v13.super.isa, v15);

    sub_1000067E8(v9, v11);
  }
  else
  {
    v6 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    if (v2)
      v7 = 0x80000001003AE610;
    else
      v7 = 0x80000001003AE630;
    v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
    objc_msgSend(v6, "setValue:forKey:", 0, v8);

  }
}

void sub_100096E60(char a1)
{
  uint64_t *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  double v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  double v40;
  uint64_t (*v41)(char *, uint64_t);
  uint64_t v42;
  double v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  os_log_type_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  _BYTE v81[40];
  __int128 v82;
  double v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;

  v77 = *v1;
  v2 = a1 & 1;
  v3 = sub_100005574((uint64_t *)&unk_100493720);
  __chkstk_darwin(v3);
  v5 = (char *)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Calendar(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v76 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v73 - v15;
  if (qword_10048C5A0 != -1)
    swift_once(&qword_10048C5A0, sub_100097C2C);
  v17 = type metadata accessor for Logger(0, v14);
  v78 = sub_1000086B4(v17, (uint64_t)static Logger.carMetrics);
  v18 = Logger.logObject.getter(v78);
  v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc(12, -1);
    v73 = v9;
    v21 = v20;
    v22 = swift_slowAlloc(32, -1);
    v75 = v6;
    v74 = v5;
    v23 = v11;
    v24 = v22;
    *(_QWORD *)&v82 = v22;
    *(_DWORD *)v21 = 136446210;
    v81[0] = v2;
    v25 = (char *)String.init<A>(describing:)(v81, &type metadata for CarNowPlayingMetrics.EventType);
    v26 = v10;
    v27 = v7;
    v28 = v2;
    v30 = v29;
    *(_QWORD *)(v21 + 4) = sub_100019400(v25, v29, (uint64_t *)&v82);
    v31 = v30;
    v2 = v28;
    v7 = v27;
    v10 = v26;
    swift_bridgeObjectRelease(v31);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Reporting %{public}s playsSummary event if needed", (uint8_t *)v21, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    v32 = v24;
    v11 = v23;
    v5 = v74;
    v6 = v75;
    swift_slowDealloc(v32, -1, -1);
    v33 = v21;
    v9 = v73;
    swift_slowDealloc(v33, -1, -1);
  }

  if (qword_10048C648 != -1)
    swift_once(&qword_10048C648, sub_10009F8B8);
  *(double *)&v34 = COERCE_DOUBLE(sub_1000A4134());
  if ((v35 & 1) != 0)
  {
    if (qword_10048C598 != -1)
      swift_once(&qword_10048C598, sub_100097C18);
    v36 = *(double *)&qword_100490240;
  }
  else
  {
    v36 = *(double *)&v34;
  }
  sub_1000981E4(v2, (uint64_t)v81);
  v37 = sub_1000149A8((uint64_t)v81, (uint64_t)&v82, &qword_100490268);
  if ((_QWORD)v84)
  {
    v38 = v83;
    v85 = v84;
    v86 = v82;
    v39 = static Date.now.getter(v37);
    v40 = Date.timeIntervalSince1970.getter(v39);
    v41 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
    v42 = v41(v16, v10);
    v43 = (v40 - v38) * 1000.0;
    if (v36 < v43)
    {
      v44 = static Date.now.getter(v42);
      v45 = Date.timeIntervalSince1970.getter(v44);
      v46 = v41(v16, v10);
      v47 = static Calendar.current.getter(v46);
      v48 = v76;
      static Date.now.getter(v47);
      Calendar.startOfDay(for:)(v48);
      v41(v48, v10);
      v49 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      v50 = Date.timeIntervalSince1970.getter(v49);
      v41(v16, v10);
      v51 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v5, 1, 1, v51);
      v52 = type metadata accessor for MainActor(0);
      v53 = static MainActor.shared.getter(v52);
      v54 = swift_allocObject(&unk_100447078, 104, 7);
      *(_QWORD *)(v54 + 16) = v53;
      *(_QWORD *)(v54 + 24) = &protocol witness table for MainActor;
      *(_OWORD *)(v54 + 32) = v86;
      *(double *)(v54 + 48) = v38;
      *(_OWORD *)(v54 + 56) = v85;
      *(double *)(v54 + 72) = v50;
      *(_BYTE *)(v54 + 80) = v2;
      *(double *)(v54 + 88) = v45;
      *(_QWORD *)(v54 + 96) = v77;
      v55 = sub_1000C66A8((uint64_t)v5, (uint64_t)&unk_100490340, v54);
      swift_release(v55);
      return;
    }
    v66 = v2;
    v67 = sub_100098A50((uint64_t)v81);
    v56 = Logger.logObject.getter(v67);
    v68 = static os_log_type_t.default.getter(v56);
    if (os_log_type_enabled(v56, v68))
    {
      v58 = swift_slowAlloc(32, -1);
      v69 = swift_slowAlloc(32, -1);
      v80 = v69;
      *(_DWORD *)v58 = 136446722;
      v79 = v66;
      v70 = (char *)String.init<A>(describing:)(&v79, &type metadata for CarNowPlayingMetrics.EventType);
      v72 = v71;
      *(_QWORD *)(v58 + 4) = sub_100019400(v70, v71, &v80);
      swift_bridgeObjectRelease(v72);
      *(_WORD *)(v58 + 12) = 2050;
      *(double *)(v58 + 14) = v43;
      *(_WORD *)(v58 + 22) = 2050;
      *(double *)(v58 + 24) = v36;
      _os_log_impl((void *)&_mh_execute_header, v56, v68, "❌ Failed to configure %{public}s playsSummary event: range=%{public}f ms isn't greater than post frequency=%{public}f ms", (uint8_t *)v58, 0x20u);
      swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
      v65 = v69;
      goto LABEL_19;
    }
  }
  else
  {
    v56 = Logger.logObject.getter(v37);
    v57 = static os_log_type_t.default.getter(v56);
    if (os_log_type_enabled(v56, v57))
    {
      v58 = swift_slowAlloc(12, -1);
      v59 = swift_slowAlloc(32, -1);
      v60 = v2;
      v61 = v59;
      *(_QWORD *)&v86 = v59;
      *(_DWORD *)v58 = 136446210;
      LOBYTE(v85) = v60;
      v62 = (char *)String.init<A>(describing:)(&v85, &type metadata for CarNowPlayingMetrics.EventType);
      v64 = v63;
      *(_QWORD *)(v58 + 4) = sub_100019400(v62, v63, (uint64_t *)&v86);
      swift_bridgeObjectRelease(v64);
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "❌ Failed to configure %{public}s playsSummary event: no persisted metrics data", (uint8_t *)v58, 0xCu);
      swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
      v65 = v61;
LABEL_19:
      swift_slowDealloc(v65, -1, -1);
      swift_slowDealloc(v58, -1, -1);
    }
  }

}

uint64_t sub_1000974E0(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)(v7 + 512) = a7;
  *(double *)(v7 + 488) = a1;
  *(double *)(v7 + 496) = a2;
  *(_QWORD *)(v7 + 480) = a6;
  v8 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v7 + 504) = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  return swift_task_switch(sub_100097554, v9, v10);
}

uint64_t sub_100097554()
{
  uint64_t v0;
  char v1;
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  swift_release(*(_QWORD *)(v0 + 504));
  if (qword_10048C648 != -1)
    swift_once(&qword_10048C648, sub_10009F8B8);
  v1 = *(_BYTE *)(v0 + 512);
  v3 = *(double *)(v0 + 488);
  v2 = *(double *)(v0 + 496);
  v4 = *(_QWORD *)(v0 + 480);
  v5 = sub_100005574(&qword_1004967B0);
  inited = swift_initStackObject(v5, v0 + 16);
  v7 = (_QWORD *)inited;
  *(_OWORD *)(inited + 16) = xmmword_100384AB0;
  strcpy((char *)(inited + 32), "totalDuration");
  *(_WORD *)(inited + 46) = -4864;
  *(double *)(inited + 48) = round(*(double *)v4 * 1000.0);
  *(_QWORD *)(inited + 72) = &type metadata for Double;
  *(_QWORD *)(inited + 80) = 0x6E756F4379616C70;
  *(_QWORD *)(inited + 88) = 0xE900000000000074;
  *(_QWORD *)(inited + 96) = *(_QWORD *)(v4 + 8);
  *(_QWORD *)(inited + 120) = &type metadata for Int;
  *(_QWORD *)(inited + 128) = 0x6D6954746E657665;
  *(_QWORD *)(inited + 136) = 0xE900000000000065;
  *(double *)(inited + 144) = round(v3 * 1000.0);
  *(_QWORD *)(inited + 168) = &type metadata for Double;
  *(_QWORD *)(inited + 176) = 0x707954746E657665;
  *(_QWORD *)(inited + 184) = 0xE900000000000065;
  strcpy((char *)(inited + 192), "playsSummary");
  *(_BYTE *)(inited + 205) = 0;
  *(_WORD *)(inited + 206) = -5120;
  *(_QWORD *)(inited + 216) = &type metadata for String;
  *(_QWORD *)(inited + 224) = 0x6F436E6F69746361;
  v8 = v1 & 1;
  v9 = 0x746F6F7465756C62;
  if (!v8)
    v9 = 0x79616C50726143;
  v10 = 0xE900000000000068;
  if (!v8)
    v10 = 0xE700000000000000;
  *(_QWORD *)(inited + 232) = 0xED0000747865746ELL;
  *(_QWORD *)(inited + 240) = v9;
  *(_QWORD *)(inited + 248) = v10;
  *(_QWORD *)(inited + 264) = &type metadata for String;
  strcpy((char *)(inited + 272), "rangeStartTime");
  *(_BYTE *)(inited + 287) = -18;
  *(double *)(inited + 288) = round(*(double *)(v4 + 16) * 1000.0);
  *(_QWORD *)(inited + 312) = &type metadata for Double;
  strcpy((char *)(inited + 320), "rangeEndTime");
  *(_BYTE *)(inited + 333) = 0;
  *(_WORD *)(inited + 334) = -5120;
  *(double *)(inited + 336) = round(v2 * 1000.0);
  *(_QWORD *)(inited + 360) = &type metadata for Double;
  *(_QWORD *)(inited + 368) = 0xD000000000000013;
  *(_QWORD *)(inited + 376) = 0x80000001003AE6E0;
  *(_QWORD *)(inited + 384) = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 16);
  *(_QWORD *)(inited + 408) = &type metadata for Int;
  *(_QWORD *)(inited + 416) = 0xD000000000000018;
  *(_QWORD *)(inited + 424) = 0x80000001003AE700;
  v11 = sub_1000A6204(*(_QWORD *)(v4 + 32));
  v7[57] = &type metadata for String;
  v7[54] = v11;
  v7[55] = v12;
  v13 = sub_100098D5C((uint64_t)v7);
  v14 = swift_allocObject(&unk_1004470A0, 17, 7);
  *(_BYTE *)(v14 + 16) = v8;
  MetricsReportingController.recordCarPlayCustomEvent(with:properties:shouldSuppressUserInfo:completionHandler:)(0xD000000000000014, 0x80000001003AE6C0, v13, 0, (uint64_t)sub_100098B50, v14);
  swift_release(v14);
  swift_bridgeObjectRelease(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100097868(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  id v26;
  unint64_t v27;
  NSString v28;
  NSObject *oslog;
  uint64_t v30;
  uint64_t v31;

  v2 = a2 & 1;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10048C5A0 != -1)
      swift_once(&qword_10048C5A0, sub_100097C2C);
    v5 = type metadata accessor for Logger(0, v4);
    sub_1000086B4(v5, (uint64_t)static Logger.carMetrics);
    swift_errorRetain(a1);
    v6 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v6);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      v8 = swift_slowAlloc(22, -1);
      v9 = swift_slowAlloc(64, -1);
      v31 = v9;
      *(_DWORD *)v8 = 136446466;
      LOBYTE(v30) = v2;
      v10 = (char *)String.init<A>(describing:)(&v30, &type metadata for CarNowPlayingMetrics.EventType);
      v12 = v11;
      *(_QWORD *)(v8 + 4) = sub_100019400(v10, v11, &v31);
      swift_bridgeObjectRelease(v12);
      *(_WORD *)(v8 + 12) = 2082;
      v30 = a1;
      swift_errorRetain(a1);
      v13 = sub_100005574((uint64_t *)&unk_1004911F0);
      v14 = (char *)String.init<A>(describing:)(&v30, v13);
      v16 = v15;
      *(_QWORD *)(v8 + 14) = sub_100019400(v14, v15, &v31);
      swift_bridgeObjectRelease(v16);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "❌ Failed to report %{public}s playsSummary event with error=%{public}s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  else
  {
    if (qword_10048C5A0 != -1)
      swift_once(&qword_10048C5A0, sub_100097C2C);
    v17 = type metadata accessor for Logger(0, a2);
    v18 = sub_1000086B4(v17, (uint64_t)static Logger.carMetrics);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.default.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v31 = v22;
      *(_DWORD *)v21 = 136446210;
      LOBYTE(v30) = v2;
      v23 = (char *)String.init<A>(describing:)(&v30, &type metadata for CarNowPlayingMetrics.EventType);
      v25 = v24;
      *(_QWORD *)(v21 + 4) = sub_100019400(v23, v24, &v31);
      swift_bridgeObjectRelease(v25);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "✅ Reported %{public}s playsSummary event", (uint8_t *)v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);
    }

    v26 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    if (v2)
      v27 = 0x80000001003AE610;
    else
      v27 = 0x80000001003AE630;
    v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v27);
    objc_msgSend(v26, "setValue:forKey:", 0, v28);

  }
}

void sub_100097C18()
{
  qword_100490240 = 0x4194997000000000;
}

uint64_t sub_100097C2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for Logger(0, a2);
  sub_1000086DC(v2, static Logger.carMetrics);
  sub_1000086B4(v2, (uint64_t)static Logger.carMetrics);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001003ACFD0, 0x697274654D726143, 0xEA00000000007363);
}

uint64_t static Logger.carMetrics.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  if (qword_10048C5A0 != -1)
    swift_once(&qword_10048C5A0, sub_100097C2C);
  v3 = type metadata accessor for Logger(0, a1);
  v4 = sub_1000086B4(v3, (uint64_t)static Logger.carMetrics);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a2, v4, v3);
}

void sub_100097D14(double **a1, uint64_t a2, uint64_t a3, double (*a4)(void))
{
  double v5;
  double *v6;

  v5 = a4();
  v6 = *a1;
  *v6 = v5;
  *a1 = v6 + 1;
}

uint64_t sub_100097D44(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x79616C50656D6974 && a2 == 0xEA00000000006465)
  {
    v5 = 0xEA00000000006465;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79616C50656D6974, 0xEA00000000006465, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6C50736B63617274 && a2 == 0xEC00000064657961)
  {
    v7 = 0xEC00000064657961;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C50736B63617274, 0xEC00000064657961, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x61745365676E6172 && a2 == 0xEE00656D69547472)
  {
    v8 = 0xEE00656D69547472;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61745365676E6172, 0xEE00656D69547472, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000010)
  {
    v9 = 0x80000001003AE680;
    if (a2 == 0x80000001003AE680)
      goto LABEL_25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001003AE680, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0xD00000000000001CLL && a2 == 0x80000001003AE6A0)
  {
    swift_bridgeObjectRelease(0x80000001003AE6A0);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x80000001003AE6A0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_100097F9C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;

  v5 = sub_100005574(&qword_100490350);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000ABC8(a1, v9);
  v11 = sub_10009697C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CarNowPlayingMetrics.Data.CodingKeys, &type metadata for CarNowPlayingMetrics.Data.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_10000682C(a1);
  v28 = 0;
  KeyedDecodingContainer.decode(_:forKey:)(&v28, v5);
  v13 = v12;
  v27 = 1;
  v14 = KeyedDecodingContainer.decode(_:forKey:)(&v27, v5);
  v26 = 2;
  KeyedDecodingContainer.decode(_:forKey:)(&v26, v5);
  v16 = v15;
  v17 = sub_100005574(&qword_100490258);
  v25 = 3;
  v18 = sub_100098BDC(&qword_100490358, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> Set<A>);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v23, v17, &v25, v5, v17, v18);
  v19 = v23;
  v24 = 4;
  swift_bridgeObjectRetain();
  v20 = KeyedDecodingContainer.decode(_:forKey:)(&v24, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_10000682C(a1);
  result = swift_bridgeObjectRelease(v19);
  *a2 = v13;
  a2[1] = v14;
  a2[2] = v16;
  a2[3] = v19;
  a2[4] = v20;
  return result;
}

void sub_1000981E4(char a1@<W0>, uint64_t a2@<X8>)
{
  id v4;
  unint64_t v5;
  NSString v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  _OWORD v22[2];

  v4 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  if ((a1 & 1) != 0)
    v5 = 0x80000001003AE610;
  else
    v5 = 0x80000001003AE630;
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  v7 = objc_msgSend(v4, "valueForKey:", v6);

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)(v7);
    swift_unknownObjectRelease(v7);
  }
  else
  {
    memset(v22, 0, sizeof(v22));
  }
  sub_1000149A8((uint64_t)v22, (uint64_t)&v17, &qword_100491B90);
  if (!v19)
  {
    sub_100098B58((uint64_t)&v17);
    goto LABEL_11;
  }
  if ((swift_dynamicCast(v21, &v17, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) == 0)
  {
LABEL_11:
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v13 = 0uLL;
    goto LABEL_12;
  }
  v9 = v21[0];
  v8 = v21[1];
  v10 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v11 = JSONDecoder.init()();
  v12 = sub_100098B98();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for CarNowPlayingMetrics.Data, v9, v8, &type metadata for CarNowPlayingMetrics.Data, v12);
  sub_1000067E8(v9, v8);
  swift_release(v11);
  v13 = v17;
  v14 = v18;
  v15 = v19;
  v16 = v20;
LABEL_12:
  *(_OWORD *)a2 = v13;
  *(_QWORD *)(a2 + 16) = v14;
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)(a2 + 32) = v16;
}

unint64_t sub_100098588()
{
  unint64_t result;

  result = qword_100490270;
  if (!qword_100490270)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CarNowPlayingMetrics.Data, &type metadata for CarNowPlayingMetrics.Data);
    atomic_store(result, (unint64_t *)&qword_100490270);
  }
  return result;
}

unint64_t sub_1000985D0()
{
  unint64_t result;

  result = qword_100490278;
  if (!qword_100490278)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CarNowPlayingMetrics.EventType, &type metadata for CarNowPlayingMetrics.EventType);
    atomic_store(result, (unint64_t *)&qword_100490278);
  }
  return result;
}

ValueMetadata *type metadata accessor for CarNowPlayingMetrics()
{
  return &type metadata for CarNowPlayingMetrics;
}

uint64_t storeEnumTagSinglePayload for CarNowPlayingMetrics.EventType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100098670 + 4 * byte_100389CFA[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000986A4 + 4 * byte_100389CF5[v4]))();
}

uint64_t sub_1000986A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000986AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000986B4);
  return result;
}

uint64_t sub_1000986C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000986C8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000986CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000986D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CarNowPlayingMetrics.EventType()
{
  return &type metadata for CarNowPlayingMetrics.EventType;
}

uint64_t destroy for CarNowPlayingMetrics.Data(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for CarNowPlayingMetrics.Data(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *assignWithCopy for CarNowPlayingMetrics.Data(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = a2[3];
  v5 = a1[3];
  a1[3] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[4] = a2[4];
  return a1;
}

_QWORD *assignWithTake for CarNowPlayingMetrics.Data(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRelease(v4);
  a1[4] = a2[4];
  return a1;
}

uint64_t getEnumTagSinglePayload for CarNowPlayingMetrics.Data(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CarNowPlayingMetrics.Data(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CarNowPlayingMetrics.Data()
{
  return &type metadata for CarNowPlayingMetrics.Data;
}

uint64_t type metadata accessor for CarNowPlayingMetrics.Reporter()
{
  return objc_opt_self(_TtCO9MusicCore20CarNowPlayingMetrics8Reporter);
}

uint64_t storeEnumTagSinglePayload for CarNowPlayingMetrics.Data.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1000988F8 + 4 * byte_100389D04[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10009892C + 4 * byte_100389CFF[v4]))();
}

uint64_t sub_10009892C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100098934(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10009893CLL);
  return result;
}

uint64_t sub_100098948(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100098950);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100098954(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009895C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CarNowPlayingMetrics.Data.CodingKeys()
{
  return &type metadata for CarNowPlayingMetrics.Data.CodingKeys;
}

unint64_t sub_10009897C()
{
  unint64_t result;

  result = qword_100490320;
  if (!qword_100490320)
  {
    result = swift_getWitnessTable(&unk_100389EA8, &type metadata for CarNowPlayingMetrics.Data.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100490320);
  }
  return result;
}

unint64_t sub_1000989C4()
{
  unint64_t result;

  result = qword_100490328;
  if (!qword_100490328)
  {
    result = swift_getWitnessTable(&unk_100389E18, &type metadata for CarNowPlayingMetrics.Data.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100490328);
  }
  return result;
}

unint64_t sub_100098A0C()
{
  unint64_t result;

  result = qword_100490330;
  if (!qword_100490330)
  {
    result = swift_getWitnessTable(&unk_100389E40, &type metadata for CarNowPlayingMetrics.Data.CodingKeys);
    atomic_store(result, &qword_100490330);
  }
  return result;
}

uint64_t sub_100098A50(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  return a1;
}

uint64_t sub_100098A78()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_100098AA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  char v7;
  double v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(double *)(v1 + 72);
  v7 = *(_BYTE *)(v1 + 80);
  v8 = *(double *)(v1 + 88);
  v9 = (_QWORD *)swift_task_alloc(dword_10049033C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10000EA88;
  return sub_1000974E0(v6, v8, a1, v4, v5, v1 + 32, v7);
}

uint64_t sub_100098B40()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

void sub_100098B50(uint64_t a1)
{
  uint64_t v1;

  sub_100097868(a1, *(unsigned __int8 *)(v1 + 16));
}

uint64_t sub_100098B58(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005574(&qword_100491B90);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100098B98()
{
  unint64_t result;

  result = qword_100490348;
  if (!qword_100490348)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CarNowPlayingMetrics.Data, &type metadata for CarNowPlayingMetrics.Data);
    atomic_store(result, (unint64_t *)&qword_100490348);
  }
  return result;
}

uint64_t sub_100098BDC(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100005600(&qword_100490258);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100098C3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005574((uint64_t *)&unk_100490410);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v10 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_10009ABAC(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (_QWORD *)(v4[7] + 16 * result);
    *v14 = v10;
    v14[1] = v9;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100098D5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005574(&qword_100490400);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100014A7C(v7, (uint64_t)&v16, &qword_100490408);
    v8 = v16;
    v9 = v17;
    result = sub_10009ABAC(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_10009B168(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100098E90(uint64_t a1)
{
  return sub_1000998E4(a1, &qword_1004903B8, &qword_1004903C0, (uint64_t (*)(uint64_t))sub_1000A5808);
}

unint64_t sub_100098EAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005574(&qword_1004903E0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (void **)(a1 + 48);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 2);
    v8 = (uint64_t)*(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain();
    v10 = v9;
    result = sub_10009ABAC(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v10;
    v14 = v4[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v4[2] = v16;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100098FC4(uint64_t a1)
{
  return sub_100098FD0(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10009ABAC);
}

unint64_t sub_100098FD0(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t result;
  char v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v6 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005574(&qword_1004903E8);
  v5 = static _DictionaryStorage.allocate(capacity:)(v3);
  v6 = (_QWORD *)v5;
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v6;
  }
  swift_retain(v5);
  v8 = (unint64_t *)(a1 + 56);
  while (1)
  {
    v9 = *(v8 - 3);
    v10 = *(v8 - 2);
    v11 = *(v8 - 1);
    v12 = *v8;
    swift_bridgeObjectRetain();
    sub_1000516F8(v11, v12);
    result = a2(v9, v10);
    if ((v14 & 1) != 0)
      break;
    *(_QWORD *)((char *)v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v15 = (_QWORD *)(v6[6] + 16 * result);
    *v15 = v9;
    v15[1] = v10;
    v16 = (uint64_t *)(v6[7] + 16 * result);
    *v16 = v11;
    v16[1] = v12;
    v17 = v6[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
      goto LABEL_11;
    v8 += 4;
    v6[2] = v19;
    if (!--v7)
    {
      swift_release(v6);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100099108(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005574((uint64_t *)&unk_1004921F0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100014A7C(v7, (uint64_t)v16, &qword_100490420);
    result = sub_1000A580C((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v4[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_10009B168(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 72;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100099248(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005574((uint64_t *)&unk_1004903F0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_10009ABAC(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100099360(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005574(&qword_1004903D8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 2);
    v8 = *((_QWORD *)v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain();
    result = sub_10009ABAC(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_BYTE *)(v4[7] + result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 24;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100099470(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = sub_100005574(&qword_1004903C8);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v25 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v25);
    return (unint64_t)v8;
  }
  sub_100005574(&qword_1004903D0);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = (uint64_t)&v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v27 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100014A7C(v13, (uint64_t)v5, &qword_1004903C8);
    result = sub_1000A5894((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for UUID(0);
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    v20 = v8[7];
    v21 = type metadata accessor for PushNotificationObserver.RegisteredHandler(0);
    result = sub_10009B38C(v10, v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v17);
    v22 = v8[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_12;
    v8[2] = v24;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v25 = v27;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100099620(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005574(&qword_1004903B0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v7 = *v6;
    v8 = (id)*(v6 - 1);
    swift_unknownObjectRetain(v7);
    result = sub_1000A58F8((uint64_t)v8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = 8 * result;
    *(_QWORD *)(v4[6] + v11) = v8;
    *(_QWORD *)(v4[7] + v11) = v7;
    v12 = v4[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4[2] = v14;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100099728(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = sub_100005574(&qword_100490378);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v26 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v26);
    return (unint64_t)v8;
  }
  sub_100005574(&qword_100490380);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = (char *)v5 + *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v28 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100014A7C(v13, (uint64_t)v5, &qword_100490378);
    v15 = *v5;
    v16 = v5[1];
    result = sub_10009ABAC(*v5, v16);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v20 = (uint64_t *)(v8[6] + 16 * result);
    *v20 = v15;
    v20[1] = v16;
    v21 = v8[7];
    v22 = type metadata accessor for SocialProfile(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v19, v10, v22);
    v23 = v8[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_12;
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v26 = v28;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1000998C8(uint64_t a1)
{
  return sub_1000998E4(a1, &qword_100490398, (uint64_t *)&unk_1004903A0, (uint64_t (*)(uint64_t))sub_1000A5808);
}

unint64_t sub_1000998E4(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    v9 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005574(a2);
  v8 = static _DictionaryStorage.allocate(capacity:)(v5);
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v9;
  }
  v11 = v8 + 64;
  v12 = a1 + 32;
  swift_retain(v8);
  while (1)
  {
    sub_100014A7C(v12, (uint64_t)&v19, a3);
    v13 = v19;
    result = a4(v19);
    if ((v15 & 1) != 0)
      break;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v9[6] + 8 * result) = v13;
    result = (unint64_t)sub_10009B168(&v20, (_OWORD *)(v9[7] + 32 * result));
    v16 = v9[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      goto LABEL_11;
    v9[2] = v18;
    v12 += 40;
    if (!--v10)
    {
      swift_release(v9);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100099A0C(uint64_t a1)
{
  return sub_1000998E4(a1, &qword_100490388, &qword_100490390, (uint64_t (*)(uint64_t))sub_1000A5994);
}

void *MPModelObject.metricsDictionary.getter()
{
  void *v0;
  id v1;
  char *v2;
  char *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t ObjectType;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD v31[2];
  __int128 v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[104];
  _BYTE v37[176];

  objc_allocWithZone((Class)type metadata accessor for ModelObjectBackedStoreItemMetadata());
  v1 = v0;
  v2 = ModelObjectBackedStoreItemMetadata.init(modelObject:)(v1);
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, "effectiveStorePlatformDictionary");

    if (v4)
    {
      v5 = (void *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v4, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
      swift_bridgeObjectRelease(0);

      return v5;
    }
  }
  objc_opt_self(MPModelGenericObject);
  v6 = (void *)swift_dynamicCastObjCClass(v1);
  if (v6)
  {
    v7 = objc_msgSend(v6, "anyObject");
    goto LABEL_8;
  }
  objc_opt_self(MPModelStoreBrowseContentItem);
  v8 = (void *)swift_dynamicCastObjCClass(v1);
  if (v8)
  {
    v7 = objc_msgSend(v8, "innerObject");
LABEL_8:
    v9 = v7;
    if (v9)
      goto LABEL_10;
  }
  v9 = v1;
LABEL_10:
  ObjectType = swift_getObjectType();
  v11 = objc_msgSend(v9, "identifiers");
  v12 = sub_10009ACF0(ObjectType, 2, 0, v11);
  v14 = v13;

  if (v14)
  {
    v15 = sub_100005574(&qword_100490360);
    inited = swift_initStackObject(v15, v36);
    *(_OWORD *)(inited + 16) = xmmword_100384A80;
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(MPStoreItemMetadataStorePlatformDictionaryKeyStoreID);
    v35 = v17;
    AnyHashable.init<A>(_:)((_QWORD *)(inited + 32), &v34, &type metadata for String, &protocol witness table for String);
    *(_QWORD *)(inited + 96) = &type metadata for String;
    *(_QWORD *)(inited + 72) = v12;
    *(_QWORD *)(inited + 80) = v14;
    v5 = (void *)sub_100099108(inited);
    swift_bridgeObjectRelease(0);
    objc_opt_self(MPModelRadioStation);
    if (swift_dynamicCastObjCClass(v1) && v5)
    {
      *(_QWORD *)&v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(MPStoreItemMetadataStorePlatformDictionaryKeyKind);
      *((_QWORD *)&v32 + 1) = v18;
      AnyHashable.init<A>(_:)(&v34, &v32, &type metadata for String, &protocol witness table for String);
      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(MPStoreItemMetadataItemKindRadioStation);
      v33 = &type metadata for String;
      *(_QWORD *)&v32 = v19;
      *((_QWORD *)&v32 + 1) = v20;
      sub_10009B168(&v32, v31);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
      sub_100099FA8(v31, (uint64_t)&v34, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease(0x8000000000000000);
      sub_10009B178((uint64_t)&v34);
    }
  }
  else
  {
    objc_opt_self(MPModelPlaylist);
    v5 = (void *)swift_dynamicCastObjCClass(v1);
    if (v5)
    {
      v22 = MPModelPropertyPlaylistType;
      v23 = v1;
      if (objc_msgSend(v5, "hasLoadedValueForKey:", v22) && objc_msgSend(v5, "type") == (id)9)
      {
        v24 = sub_100005574(&qword_100490360);
        v25 = swift_initStackObject(v24, v37);
        *(_OWORD *)(v25 + 16) = xmmword_100384A60;
        v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(MPStoreItemMetadataStorePlatformDictionaryKeyStoreID);
        v35 = v26;
        AnyHashable.init<A>(_:)((_QWORD *)(v25 + 32), &v34, &type metadata for String, &protocol witness table for String);
        *(_QWORD *)(v25 + 96) = &type metadata for String;
        strcpy((char *)(v25 + 72), "FavoriteSongs");
        *(_WORD *)(v25 + 86) = -4864;
        v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(MPStoreItemMetadataStorePlatformDictionaryKeyKind);
        v35 = v27;
        AnyHashable.init<A>(_:)((_QWORD *)(v25 + 104), &v34, &type metadata for String, &protocol witness table for String);
        v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(MPStoreItemMetadataItemKindPlaylist);
        *(_QWORD *)(v25 + 168) = &type metadata for String;
        *(_QWORD *)(v25 + 144) = v28;
        *(_QWORD *)(v25 + 152) = v29;
        v5 = (void *)sub_100099108(v25);
        swift_bridgeObjectRelease(0);

      }
      else
      {

        return 0;
      }
    }
  }
  return v5;
}

void *sub_100099E18()
{
  return MPModelObject.metricsDictionary.getter();
}

uint64_t sub_100099E38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;

  v6 = v5;
  v12 = *v5;
  v14 = sub_10009ABAC(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1001B5A64();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (_QWORD *)(v20[7] + 16 * v14);
      v22 = v21[1];
      *v21 = a1;
      v21[1] = a2;
      return swift_bridgeObjectRelease(v22);
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v26 = (uint64_t *)(v20[6] + 16 * v14);
    *v26 = a3;
    v26[1] = a4;
    v27 = (_QWORD *)(v20[7] + 16 * v14);
    *v27 = a1;
    v27[1] = a2;
    v28 = v20[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (!v29)
    {
      v20[2] = v30;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_1001B36F0(v17, a5 & 1);
  v24 = sub_10009ABAC(a3, a4);
  if ((v18 & 1) == (v25 & 1))
  {
    v14 = v24;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

_OWORD *sub_100099FA8(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_1000A580C(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_QWORD *)(v16[7] + 32 * v10);
        sub_10000682C(v17);
        return sub_10009B168(a1, v17);
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1001B5C04();
      goto LABEL_7;
    }
    sub_1001B39FC(v13, a3 & 1);
    v19 = sub_1000A580C(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10009B414(a2, (uint64_t)v21);
      return sub_10009A960(v10, (uint64_t)v21, a1, v16);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

uint64_t sub_10009A0E0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_10009ABAC(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1001B5F74();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_bridgeObjectRelease(*(_QWORD *)(v19 + 8 * v12));
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_1001B3FD4(v15, a4 & 1);
  v21 = sub_10009ABAC(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10009A23C(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_1000A5894(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7];
        v22 = type metadata accessor for PushNotificationObserver.RegisteredHandler(0);
        return sub_10009B3D0(a1, v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v14);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_1001B6128();
      goto LABEL_7;
    }
    sub_1001B42E8(v17, a3 & 1);
    v24 = sub_1000A5894(a2);
    if ((v18 & 1) == (v25 & 1))
    {
      v14 = v24;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_10009A9D8(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

_OWORD *sub_10009A3BC(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_10009ABAC(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(v18[7] + 32 * v12);
        sub_10000682C(v19);
        return sub_10009B168(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1001B63F0();
      goto LABEL_7;
    }
    sub_1001B4704(v15, a4 & 1);
    v21 = sub_10009ABAC(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10009AA88(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_10009A4EC(uint64_t a1, Swift::UInt a2, Swift::UInt a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  char v20;
  Swift::UInt *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1000A5928(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1001B65D4();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v18[7] + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v21 = (Swift::UInt *)(v18[6] + 16 * v12);
    *v21 = a2;
    v21[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v22 = v18[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      return;
    }
    goto LABEL_14;
  }
  sub_1001B4A00(v15, a4 & 1);
  v19 = sub_1000A5928(a2, a3);
  if ((v16 & 1) == (v20 & 1))
  {
    v12 = v19;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  type metadata accessor for MPCPlayerRequestTracklistRange(0);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v25);
  __break(1u);
}

id sub_10009A624(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id result;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;

  v4 = v3;
  v7 = *v3;
  v9 = sub_1000A58F8((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_1001B6764();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];
      result = (id)swift_unknownObjectRelease(*(_QWORD *)(v16 + 8 * v9));
      *(_QWORD *)(v16 + 8 * v9) = a1;
      return result;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v20 = 8 * v9;
    *(_QWORD *)(v15[6] + v20) = a2;
    *(_QWORD *)(v15[7] + v20) = a1;
    v21 = v15[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v15[2] = v23;
      return a2;
    }
    goto LABEL_14;
  }
  sub_1001B4CDC(v12, a3 & 1);
  v18 = sub_1000A58F8((uint64_t)a2);
  if ((v13 & 1) == (v19 & 1))
  {
    v9 = v18;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v24 = sub_1000087DC(0, &qword_100490368, MPCPlayerPath_ptr);
  result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
  return result;
}

uint64_t sub_10009A784(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_1000A5894(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7];
        v22 = sub_100005574(&qword_100492D40);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v14, a1, v22);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_1001B690C();
      goto LABEL_7;
    }
    sub_1001B4FB0(v17, a3 & 1);
    v24 = sub_1000A5894(a2);
    if ((v18 & 1) == (v25 & 1))
    {
      v14 = v24;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_10009AAF0(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

unint64_t sub_10009A910(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = (_QWORD *)(a6[7] + 16 * result);
  *v7 = a4;
  v7[1] = a5;
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

_OWORD *sub_10009A960(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = sub_10009B168(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

uint64_t sub_10009A9D8(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v10 = a4[7];
  v11 = type metadata accessor for PushNotificationObserver.RegisteredHandler(0);
  result = sub_10009B38C(a3, v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

_OWORD *sub_10009AA88(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_10009B168(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t sub_10009AAF0(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v10 = a4[7];
  v11 = sub_100005574(&qword_100492D40);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a3, v11);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

unint64_t sub_10009ABAC(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  String.hash(into:)(v6, a1, a2);
  v4 = Hasher._finalize()();
  return sub_10009AC10(a1, a2, v4);
}

unint64_t sub_10009AC10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_10009ACF0(uint64_t a1, uint64_t a2, unsigned __int8 a3, void *a4)
{
  char v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  Class isa;
  id v31;

  v5 = a2;
  if (a3 > 1u)
    __asm { BR              X9 }
  v7 = sub_1000087DC(0, &qword_100490428, MPModelPlaylist_ptr);
  if (!swift_dynamicCastMetatype(a1, v7))
  {
    v10 = sub_1000087DC(0, &qword_100490430, MPModelSocialPerson_ptr);
    if (swift_dynamicCastMetatype(a1, v10))
    {
      if ((v5 & 1) != 0)
      {
        v8 = MPIdentifierSet.bestLibraryIdentifier.getter();
        if (v11)
          return v8;
      }
      if ((v5 & 2) == 0)
        return 0;
      v17 = objc_msgSend(a4, "universalStore");
      if (!v17)
        return MPIdentifierSet.bestStoreIdentifier.getter();
      v14 = v17;
      v15 = objc_msgSend(v17, "socialProfileID");
      goto LABEL_24;
    }
    v12 = sub_1000087DC(0, qword_100490438, MPModelRadioStation_ptr);
    if (!swift_dynamicCastMetatype(a1, v12))
    {
      if ((v5 & 1) != 0)
      {
        v8 = MPIdentifierSet.bestLibraryIdentifier.getter();
        if (v16)
          return v8;
      }
      if ((v5 & 2) == 0)
        return 0;
      return MPIdentifierSet.bestStoreIdentifier.getter();
    }
    if ((v5 & 2) == 0)
      return 0;
    v23 = objc_msgSend(a4, "radio");
    if (!v23)
      return 0;
    v24 = v23;
    v25 = objc_msgSend(v23, "stationStringID");
    if (v25)
    {
      v26 = v25;
      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v28 = v27;

      v29 = HIBYTE(v28) & 0xF;
      if ((v28 & 0x2000000000000000) == 0)
        v29 = v19 & 0xFFFFFFFFFFFFLL;
      if (v29)
      {
LABEL_40:
        swift_unknownObjectRelease(v24);
        return v19;
      }
      swift_bridgeObjectRelease(v28);
    }
    if (!objc_msgSend(v24, "stationID")
      || (objc_msgSend(v24, "stationID"),
          isa = Int64._bridgeToObjectiveC()().super.super.isa,
          v31 = (id)MPStoreItemMetadataStringNormalizeStoreIDValue(),
          isa,
          !v31))
    {
      swift_unknownObjectRelease(v24);
      return 0;
    }
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);

    goto LABEL_40;
  }
  if ((v5 & 1) != 0)
  {
    v8 = MPIdentifierSet.bestLibraryIdentifier.getter();
    if (v9)
      return v8;
  }
  if ((v5 & 2) == 0)
    return 0;
  v13 = objc_msgSend(a4, "universalStore");
  if (!v13)
    return MPIdentifierSet.bestStoreIdentifier.getter();
  v14 = v13;
  v15 = objc_msgSend(v13, "globalPlaylistID");
LABEL_24:
  v18 = v15;
  swift_unknownObjectRelease(v14);
  if (!v18)
    return MPIdentifierSet.bestStoreIdentifier.getter();
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  v22 = HIBYTE(v21) & 0xF;
  if ((v21 & 0x2000000000000000) == 0)
    v22 = v19 & 0xFFFFFFFFFFFFLL;
  if (!v22)
  {
    swift_bridgeObjectRelease(v21);
    return MPIdentifierSet.bestStoreIdentifier.getter();
  }
  return v19;
}

_OWORD *sub_10009B168(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10009B178(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

unint64_t sub_10009B1AC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *i;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100005574((uint64_t *)&unk_100495A20);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (i = (_QWORD *)(a1 + 40); ; i += 2)
    {
      v5 = *((_BYTE *)i - 8);
      v6 = *i;
      result = sub_1000A583C(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_BYTE *)(v3[6] + result) = v5;
      *(_QWORD *)(v3[7] + 8 * result) = v6;
      v9 = v3[2];
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (v10)
        goto LABEL_10;
      v3[2] = v11;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_10009B280(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  sub_100005574(&qword_100490370);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  v4 = *(_BYTE *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  result = sub_1000A583C(v4);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v9 = (_QWORD *)(a1 + 72);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v4;
    v10 = (_QWORD *)(v3[7] + 16 * result);
    *v10 = v6;
    v10[1] = v5;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    if (!--v1)
      goto LABEL_8;
    v14 = v9 + 3;
    v4 = *((_BYTE *)v9 - 16);
    v6 = *(v9 - 1);
    v15 = *v9;
    swift_bridgeObjectRetain();
    result = sub_1000A583C(v4);
    v9 = v14;
    v5 = v15;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_10009B38C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PushNotificationObserver.RegisteredHandler(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009B3D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PushNotificationObserver.RegisteredHandler(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009B414(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_10009B450(uint64_t a1)
{
  char *v2;

  v2 = (char *)&value witness table for Builtin.UnknownObject + 64;
  return swift_initClassMetadata2(a1, 0, 1, &v2, a1 + 96);
}

uint64_t sub_10009B494()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10009B4B0()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for MetricsEventSampler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100031DCC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MetricsEventSampler);
}

uint64_t MetricsEvent.Click.init(targetIdentifier:targetType:actionType:actionURL:locations:actionContext:actionDetails:page:snapshotImpressions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, uint64_t a11, unsigned __int16 a12, uint64_t a13, uint64_t a14)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t *v35;
  int *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  unsigned int (*v42)(uint64_t *, uint64_t, int *);
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t *v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  uint64_t result;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  _QWORD *v61;
  _BYTE v62[4];
  int v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t *v71;
  _BYTE *v72;
  uint64_t v73;

  v73 = a8;
  v68 = a6;
  v69 = a7;
  v64 = a5;
  v63 = a4;
  v67 = a12;
  v66 = a11;
  v65 = a10;
  v18 = sub_100005574(&qword_10048D510);
  __chkstk_darwin(v18);
  v70 = &v62[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = sub_100005574(&qword_10048E290);
  v21 = __chkstk_darwin(v20);
  v72 = &v62[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = __chkstk_darwin(v21);
  v71 = (uint64_t *)&v62[-v24];
  v25 = __chkstk_darwin(v23);
  v27 = (uint64_t *)&v62[-v26];
  v28 = __chkstk_darwin(v25);
  v30 = (uint64_t *)&v62[-v29];
  v31 = __chkstk_darwin(v28);
  v33 = &v62[-v32];
  __chkstk_darwin(v31);
  v35 = (uint64_t *)&v62[-v34];
  v36 = (int *)type metadata accessor for MetricsEvent.Click(0);
  *(_BYTE *)(a9 + v36[18]) = 0;
  v37 = (_QWORD *)(a9 + v36[19]);
  *v37 = 0;
  v37[1] = 0;
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 16) = a3;
  *(_BYTE *)(a9 + 17) = v63;
  sub_1000149A8(v64, a9 + v36[7], &qword_10048D510);
  *(_QWORD *)(a9 + v36[8]) = v68;
  v38 = (_QWORD *)(a9 + v36[9]);
  v39 = v73;
  *v38 = v69;
  v38[1] = v39;
  v40 = a9 + v36[10];
  *(_OWORD *)v40 = v65;
  *(_QWORD *)(v40 + 16) = v66;
  *(_WORD *)(v40 + 24) = v67;
  v73 = a13;
  sub_100014A7C(a13, (uint64_t)v35, &qword_10048E290);
  v41 = (int *)type metadata accessor for MetricsEvent.Page(0);
  v42 = *(unsigned int (**)(uint64_t *, uint64_t, int *))(*((_QWORD *)v41 - 1) + 48);
  if (v42(v35, 1, v41) == 1)
  {
    sub_100008758((uint64_t)v35, &qword_10048E290);
    v43 = 0;
    v44 = 0;
  }
  else
  {
    v43 = *v35;
    v44 = v35[1];
    swift_bridgeObjectRetain();
    sub_100006798((uint64_t)v35, type metadata accessor for MetricsEvent.Page);
  }
  v45 = (_QWORD *)(a9 + v36[12]);
  *v45 = v43;
  v45[1] = v44;
  v46 = v73;
  sub_100014A7C(v73, (uint64_t)v33, &qword_10048E290);
  if (v42((uint64_t *)v33, 1, v41) == 1)
  {
    sub_100008758((uint64_t)v33, &qword_10048E290);
    v47 = 0;
    v48 = 0;
  }
  else
  {
    v47 = *((_QWORD *)v33 + 2);
    v48 = *((_QWORD *)v33 + 3);
    swift_bridgeObjectRetain();
    sub_100006798((uint64_t)v33, type metadata accessor for MetricsEvent.Page);
  }
  v49 = (_QWORD *)(a9 + v36[13]);
  *v49 = v47;
  v49[1] = v48;
  sub_100014A7C(v46, (uint64_t)v30, &qword_10048E290);
  if (v42(v30, 1, v41) == 1)
  {
    sub_100008758((uint64_t)v30, &qword_10048E290);
    v50 = type metadata accessor for URL(0);
    v51 = v70;
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v70, 1, 1, v50);
  }
  else
  {
    v51 = v70;
    sub_100014A7C((uint64_t)v30 + v41[6], (uint64_t)v70, &qword_10048D510);
    sub_100006798((uint64_t)v30, type metadata accessor for MetricsEvent.Page);
  }
  sub_1000149A8((uint64_t)v51, a9 + v36[14], &qword_10048D510);
  sub_100014A7C(v46, (uint64_t)v27, &qword_10048E290);
  if (v42(v27, 1, v41) == 1)
  {
    sub_100008758((uint64_t)v27, &qword_10048E290);
    v52 = 0;
  }
  else
  {
    v52 = *(uint64_t *)((char *)v27 + v41[7]);
    swift_bridgeObjectRetain();
    sub_100006798((uint64_t)v27, type metadata accessor for MetricsEvent.Page);
  }
  *(_QWORD *)(a9 + v36[15]) = v52;
  v53 = v71;
  sub_100014A7C(v46, (uint64_t)v71, &qword_10048E290);
  v54 = v42(v53, 1, v41);
  v55 = (uint64_t)v72;
  if (v54 == 1)
  {
    sub_100008758((uint64_t)v53, &qword_10048E290);
    v56 = 1;
  }
  else
  {
    v56 = *((_BYTE *)v53 + v41[9]);
    sub_100006798((uint64_t)v53, type metadata accessor for MetricsEvent.Page);
  }
  *(_BYTE *)(a9 + v36[16]) = v56;
  sub_1000149A8(v73, v55, &qword_10048E290);
  if (v42((uint64_t *)v55, 1, v41) == 1)
  {
    result = sub_100008758(v55, &qword_10048E290);
    v58 = 0;
    v59 = 0;
  }
  else
  {
    v60 = (uint64_t *)(v55 + v41[8]);
    v58 = *v60;
    v59 = v60[1];
    swift_bridgeObjectRetain();
    result = sub_100006798(v55, type metadata accessor for MetricsEvent.Page);
  }
  v61 = (_QWORD *)(a9 + v36[17]);
  *v61 = v58;
  v61[1] = v59;
  *(_QWORD *)(a9 + v36[11]) = a14;
  return result;
}

uint64_t type metadata accessor for MetricsEvent.Click(uint64_t a1)
{
  return sub_1000091AC(a1, qword_100490648, (uint64_t)&nominal type descriptor for MetricsEvent.Click);
}

uint64_t type metadata accessor for MetricsEvent.Page(uint64_t a1)
{
  return sub_1000091AC(a1, qword_1004905A0, (uint64_t)&nominal type descriptor for MetricsEvent.Page);
}

uint64_t *MetricsReportingController.shared.unsafeMutableAddressor()
{
  if (qword_10048C648 != -1)
    swift_once(&qword_10048C648, sub_10009F8B8);
  return &static MetricsReportingController.shared;
}

uint64_t MetricsEvent.ComponentRender.init(componentIdentifier:componentType:componentAppearTime:componentPlaceholderAppearTime:componentMotionActivationTime:componentRequestTime:componentEndTime:componentInterruptTime:preloadStatus:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, char a11)
{
  *(_QWORD *)a9 = result;
  *(_QWORD *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  *(_QWORD *)(a9 + 64) = a10;
  *(_BYTE *)(a9 + 72) = a11;
  return result;
}

uint64_t sub_10009BA7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  id *v22;
  id v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  double v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  double v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  double v47;
  char *v50;
  char v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  double v62;
  char v63;
  char v64[24];

  v61 = a1;
  v2 = sub_100005574(&qword_100490730);
  v3 = __chkstk_darwin(v2);
  v59 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v60 = (char *)&v52 - v6;
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v52 - v8;
  __chkstk_darwin(v7);
  v11 = (char *)&v52 - v10;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v52 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v52 - v20;
  v22 = (id *)(v1 + 16);
  swift_beginAccess(v1 + 16, v64, 0, 0);
  v23 = *(id *)(v1 + 16);
  v24 = sub_1000ACB00();

  if ((v24 & 1) != 0)
    return 1;
  v53 = v19;
  v54 = v16;
  v55 = v11;
  v56 = v9;
  v57 = v13;
  v58 = v21;
  v26 = sub_1000ACBD8();
  v25 = 1;
  if (v26)
  {
    v27 = (void *)v26;
    v62 = 0.0;
    v63 = 1;
    static Double._conditionallyBridgeFromObjectiveC(_:result:)(v26, &v62);

    if ((v63 & 1) == 0)
    {
      v28 = v62;
      v29 = sub_1000ACA3C();
      if (v29)
      {
        v30 = (void *)v29;
        v62 = 0.0;
        v63 = 1;
        static Double._conditionallyBridgeFromObjectiveC(_:result:)(v29, &v62);

        if ((v63 & 1) == 0)
        {
          v32 = v62;
          Date.init()(v31);
          v33 = *v22;
          v34 = (uint64_t)v56;
          sub_1000ACBA0((uint64_t)v56);

          v35 = v57;
          v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48);
          v37 = v12;
          if (v36(v34, 1, v12))
          {
            sub_100008758(v34, &qword_100490730);
            v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56);
            v39 = (uint64_t)v55;
            v38(v55, 1, 1, v37);
          }
          else
          {
            v40 = v54;
            (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v54, v34, v12);
            v41 = sub_100008758(v34, &qword_100490730);
            v39 = (uint64_t)v55;
            Date.addingTimeInterval(_:)(v41, v32 / 1000.0);
            v42 = *(void (**)(char *, uint64_t))(v35 + 8);
            v42(v40, v12);
            v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56);
            v38((char *)v39, 0, 1, v37);
            if (v36(v39, 1, v37) != 1)
            {
              v50 = v53;
              (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v53, v39, v37);
              v45 = v58;
              v51 = static Date.< infix(_:_:)(v58, v50);
              v42(v50, v37);
              v43 = (uint64_t)v59;
              v44 = (uint64_t)v60;
              if ((v51 & 1) != 0)
              {
                v25 = 1;
                goto LABEL_20;
              }
LABEL_11:
              v46 = sub_1000A60A0(0x20000000000001uLL);
              if (v46 == 0x20000000000000)
              {
                if (v28 < 1.0)
                {
LABEL_13:
                  v25 = 0;
LABEL_19:
                  v42 = *(void (**)(char *, uint64_t))(v35 + 8);
LABEL_20:
                  v42(v45, v37);
                  return v25;
                }
              }
              else
              {
                v47 = (double)v46 * 1.11022302e-16 + 0.0;
                if (v47 <= 0.0 || v47 > v28)
                  goto LABEL_13;
              }
              (*(void (**)(uint64_t, char *, uint64_t))(v35 + 16))(v44, v45, v37);
              v25 = 1;
              v38((char *)v44, 0, 1, v37);
              swift_beginAccess(v22, &v62, 33, 0);
              sub_100014A7C(v44, v43, &qword_100490730);
              sub_1000ACBBC(v43);
              swift_endAccess(&v62);
              sub_100008758(v44, &qword_100490730);
              goto LABEL_19;
            }
          }
          v43 = (uint64_t)v59;
          v44 = (uint64_t)v60;
          sub_100008758(v39, &qword_100490730);
          v45 = v58;
          goto LABEL_11;
        }
      }
    }
  }
  return v25;
}

uint64_t sub_10009BEB0(void (*a1)(char *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  id *v22;
  id v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  double v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  double v32;
  char *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  int v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  void (*v45)(char *, uint64_t, uint64_t, uint64_t);
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  double v50;
  char *v52;
  char v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  void (*v63)(char *, uint64_t, uint64_t, uint64_t);
  double v64;
  char v65;
  char v66[24];

  v63 = a1;
  v2 = sub_100005574(&qword_100490730);
  v3 = __chkstk_darwin(v2);
  v61 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v62 = (char *)&v54 - v6;
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v54 - v8;
  __chkstk_darwin(v7);
  v11 = (char *)&v54 - v10;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v54 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v54 - v20;
  v22 = (id *)(v1 + 16);
  swift_beginAccess(v1 + 16, v66, 0, 0);
  v23 = *(id *)(v1 + 16);
  v24 = sub_1000ACFA8();

  if ((v24 & 1) != 0)
    return 1;
  v55 = v19;
  v56 = v16;
  v57 = v11;
  v58 = v9;
  v59 = v21;
  v60 = v13;
  v26 = sub_1000A5738();
  v25 = 1;
  if (v26)
  {
    v27 = (void *)v26;
    v64 = 0.0;
    v65 = 1;
    static Double._conditionallyBridgeFromObjectiveC(_:result:)(v26, &v64);

    if ((v65 & 1) == 0)
    {
      v28 = v64;
      v29 = sub_1000A5738();
      if (v29)
      {
        v30 = (void *)v29;
        v64 = 0.0;
        v65 = 1;
        static Double._conditionallyBridgeFromObjectiveC(_:result:)(v29, &v64);

        if ((v65 & 1) == 0)
        {
          v32 = v64;
          v33 = v59;
          Date.init()(v31);
          v34 = *v22;
          v35 = (uint64_t)v58;
          sub_1000ACFC4((uint64_t)v58);

          v36 = v60;
          v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 48);
          v38 = v12;
          v39 = v37(v35, 1, v12);
          v40 = v33;
          if (v39)
          {
            sub_100008758(v35, &qword_100490730);
            v41 = (uint64_t)v57;
            v63 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56);
            v63(v57, 1, 1, v38);
          }
          else
          {
            v42 = v56;
            (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v56, v35, v38);
            v43 = sub_100008758(v35, &qword_100490730);
            v41 = (uint64_t)v57;
            Date.addingTimeInterval(_:)(v43, v32 / 1000.0);
            v44 = *(void (**)(char *, uint64_t))(v36 + 8);
            v44(v42, v38);
            v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56);
            v45((char *)v41, 0, 1, v38);
            v46 = v37(v41, 1, v38);
            v63 = v45;
            if (v46 != 1)
            {
              v52 = v55;
              (*(void (**)(char *, uint64_t, uint64_t))(v36 + 32))(v55, v41, v38);
              v53 = static Date.< infix(_:_:)(v40, v52);
              v44(v52, v38);
              v47 = (uint64_t)v61;
              v48 = (uint64_t)v62;
              if ((v53 & 1) != 0)
              {
                v25 = 1;
                goto LABEL_18;
              }
LABEL_11:
              v49 = sub_1000A60A0(0x20000000000001uLL);
              if (v49 == 0x20000000000000)
              {
                if (v28 < 1.0)
                {
                  v25 = 0;
LABEL_17:
                  v44 = *(void (**)(char *, uint64_t))(v36 + 8);
LABEL_18:
                  v44(v40, v38);
                  return v25;
                }
              }
              else
              {
                v25 = 0;
                v50 = (double)v49 * 1.11022302e-16 + 0.0;
                if (v50 <= 0.0 || v50 > v28)
                  goto LABEL_17;
              }
              (*(void (**)(uint64_t, char *, uint64_t))(v36 + 16))(v48, v40, v38);
              v25 = 1;
              v63((char *)v48, 0, 1, v38);
              swift_beginAccess(v22, &v64, 33, 0);
              sub_100014A7C(v48, v47, &qword_100490730);
              sub_1000AD0A8(v47);
              swift_endAccess(&v64);
              sub_100008758(v48, &qword_100490730);
              goto LABEL_17;
            }
          }
          v47 = (uint64_t)v61;
          v48 = (uint64_t)v62;
          sub_100008758(v41, &qword_100490730);
          goto LABEL_11;
        }
      }
    }
  }
  return v25;
}

uint64_t MetricsEvent.TargetType.init(contentItem:)(void *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  switch((unint64_t)objc_msgSend(a1, "itemType"))
  {
    case 1uLL:

      result = 0;
      break;
    case 2uLL:

      result = 3;
      break;
    case 4uLL:

      result = 16;
      break;
    case 7uLL:

      result = 20;
      break;
    default:
      v3 = static os_log_type_t.error.getter();
      v4 = sub_100005574(&qword_10048F840);
      v5 = swift_allocObject(v4, 72, 7);
      *(_OWORD *)(v5 + 16) = xmmword_100384A80;
      v11 = objc_msgSend(a1, "itemType");
      type metadata accessor for MPModelStoreBrowseContentItemType(0);
      v7 = String.init<A>(describing:)(&v11, v6);
      v9 = v8;
      *(_QWORD *)(v5 + 56) = &type metadata for String;
      *(_QWORD *)(v5 + 64) = sub_100081EF4();
      *(_QWORD *)(v5 + 32) = v7;
      *(_QWORD *)(v5 + 40) = v9;
      sub_1000087DC(0, (unint64_t *)&qword_1004904C0, OS_os_log_ptr);
      v10 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v10, "MPModelStoreBrowseContentItem.Kind.targetType: Returning nil for [targetType for this kind not yet implemented] self=%@", 119, 2, v5);

      swift_bridgeObjectRelease(v5);
      result = 24;
      break;
  }
  return result;
}

uint64_t MetricsEvent.TargetType.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10009C4C8 + 4 * byte_100389FF7[a1]))(0x6D75626C41, 0xE500000000000000);
}

uint64_t sub_10009C4C8()
{
  return 0x7465446D75626C41;
}

uint64_t sub_10009C4E8()
{
  return 7368801;
}

uint64_t sub_10009C4F8()
{
  return 0x747369747241;
}

uint64_t sub_10009C50C()
{
  return 0x72656E6E6162;
}

uint64_t sub_10009C520()
{
  return 0x6E6F74747562;
}

uint64_t sub_10009C534()
{
  return 0x6954656C62627562;
}

uint64_t sub_10009C554()
{
  return 1685217603;
}

unint64_t sub_10009C564()
{
  return 0xD000000000000011;
}

uint64_t sub_10009C580()
{
  return 0x7265746C6966;
}

uint64_t sub_10009C594()
{
  return 0x7449726564616548;
}

uint64_t sub_10009C5B0()
{
  return 0x7473694C746E6948;
}

uint64_t sub_10009C5D0()
{
  return 7955819;
}

uint64_t sub_10009C5E0()
{
  return 1802398060;
}

uint64_t sub_10009C5F0()
{
  return 0x6E694C636972796CLL;
}

uint64_t sub_10009C60C()
{
  return 0x6D6574497473694CLL;
}

uint64_t sub_10009C624()
{
  return 0x7473696C79616C50;
}

uint64_t sub_10009C650()
{
  return 0x4C746E65746E6F43;
}

uint64_t sub_10009C674()
{
  return 0x726564696C73;
}

uint64_t sub_10009C688()
{
  return 1735290707;
}

uint64_t sub_10009C698()
{
  return 0x6C6C65737055;
}

uint64_t sub_10009C6AC()
{
  return 0x657449666C656853;
}

uint64_t sub_10009C6CC()
{
  return 0x6D65744964697247;
}

uint64_t sub_10009C6E4(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_10009EADC(a1, a2, a3, a4, (uint64_t (*)(uint64_t))MetricsEvent.TargetType.rawValue.getter);
}

Swift::Int sub_10009C6F0(uint64_t a1, uint64_t a2)
{
  return sub_10009EB74(a1, a2, (uint64_t (*)(uint64_t))MetricsEvent.TargetType.rawValue.getter);
}

uint64_t sub_10009C6FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10009EBE4(a1, a2, a3, (uint64_t (*)(_QWORD))MetricsEvent.TargetType.rawValue.getter);
}

Swift::Int sub_10009C708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10009EC30(a1, a2, a3, (uint64_t (*)(uint64_t))MetricsEvent.TargetType.rawValue.getter);
}

uint64_t sub_10009C714@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s9MusicCore12MetricsEventV10TargetTypeO8rawValueAESgSS_tcfC_0(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_10009C740@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = MetricsEvent.TargetType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t MetricsEvent.Page.init(pageIdentifier:pageType:pageURL:pageDetails:searchTerm:pageDisplayType:extRefUrl:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, char a10, uint64_t a11, uint64_t a12)
{
  int *v17;
  uint64_t result;
  _QWORD *v19;
  _QWORD *v20;

  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  v17 = (int *)type metadata accessor for MetricsEvent.Page(0);
  result = sub_1000149A8(a5, (uint64_t)a9 + v17[6], &qword_10048D510);
  *(_QWORD *)((char *)a9 + v17[7]) = a6;
  v19 = (_QWORD *)((char *)a9 + v17[8]);
  *v19 = a7;
  v19[1] = a8;
  *((_BYTE *)a9 + v17[9]) = a10 & 1;
  v20 = (_QWORD *)((char *)a9 + v17[10]);
  *v20 = a11;
  v20[1] = a12;
  return result;
}

uint64_t static MetricsEvent.Page.contextualActionMenu(storeID:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  int *v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  if (a2)
    v4 = a1;
  else
    v4 = 0xD000000000000014;
  if (a2)
    v5 = a2;
  else
    v5 = 0x80000001003AE7B0;
  v6 = (int *)type metadata accessor for MetricsEvent.Page(0);
  v7 = (char *)a3 + v6[6];
  v8 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *a3 = v4;
  a3[1] = v5;
  a3[2] = 0xD000000000000014;
  a3[3] = 0x80000001003AE7B0;
  *(unint64_t *)((char *)a3 + v6[7]) = 0;
  v9 = (unint64_t *)((char *)a3 + v6[8]);
  *v9 = 0;
  v9[1] = 0;
  *((_BYTE *)a3 + v6[9]) = 1;
  v10 = (unint64_t *)((char *)a3 + v6[10]);
  *v10 = 0;
  v10[1] = 0;
  return swift_bridgeObjectRetain();
}

uint64_t sub_10009C8E8()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_1000086DC((uint64_t)v0, static MetricsEvent.Page.libraryMenuSelection);
  v1 = (_QWORD *)sub_1000086B4((uint64_t)v0, (uint64_t)static MetricsEvent.Page.libraryMenuSelection);
  v2 = (char *)v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *v1 = 0xD000000000000014;
  v1[1] = 0x80000001003AED70;
  v1[2] = 0x7972617262694CLL;
  v1[3] = 0xE700000000000000;
  *(_QWORD *)((char *)v1 + v0[7]) = 0;
  v5 = (_QWORD *)((char *)v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.libraryMenuSelection.unsafeMutableAddressor()
{
  return sub_10009CAF0(&qword_10048C5A8, (uint64_t)static MetricsEvent.Page.libraryMenuSelection, (uint64_t)sub_10009C8E8);
}

uint64_t static MetricsEvent.Page.libraryMenuSelection.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009CB4C(&qword_10048C5A8, (uint64_t)static MetricsEvent.Page.libraryMenuSelection, (uint64_t)sub_10009C8E8, a1);
}

uint64_t sub_10009C9F8()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_1000086DC((uint64_t)v0, static MetricsEvent.Page.libraryMenuEdit);
  v1 = (_QWORD *)sub_1000086B4((uint64_t)v0, (uint64_t)static MetricsEvent.Page.libraryMenuEdit);
  v2 = (char *)v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *v1 = 0x4D7972617262694CLL;
  v1[1] = 0xEF74696445756E65;
  v1[2] = 0x72656B636950;
  v1[3] = 0xE600000000000000;
  *(_QWORD *)((char *)v1 + v0[7]) = 0;
  v5 = (_QWORD *)((char *)v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.libraryMenuEdit.unsafeMutableAddressor()
{
  return sub_10009CAF0(&qword_10048C5B0, (uint64_t)static MetricsEvent.Page.libraryMenuEdit, (uint64_t)sub_10009C9F8);
}

uint64_t sub_10009CAF0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (*a1 != -1)
    swift_once(a1, a3);
  v4 = type metadata accessor for MetricsEvent.Page(0);
  return sub_1000086B4(v4, a2);
}

uint64_t static MetricsEvent.Page.libraryMenuEdit.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009CB4C(&qword_10048C5B0, (uint64_t)static MetricsEvent.Page.libraryMenuEdit, (uint64_t)sub_10009C9F8, a1);
}

uint64_t sub_10009CB4C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  if (*a1 != -1)
    swift_once(a1, a3);
  v6 = type metadata accessor for MetricsEvent.Page(0);
  v7 = sub_1000086B4(v6, a2);
  return sub_1000A6488(v7, a4);
}

uint64_t sub_10009CB98()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_1000086DC((uint64_t)v0, static MetricsEvent.Page.libraryMadeForYou);
  v1 = (_QWORD *)sub_1000086B4((uint64_t)v0, (uint64_t)static MetricsEvent.Page.libraryMadeForYou);
  v2 = (char *)v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *v1 = 0x59726F466564614DLL;
  v1[1] = 0xEA0000000000756FLL;
  v1[2] = 0x7972617262694CLL;
  v1[3] = 0xE700000000000000;
  *(_QWORD *)((char *)v1 + v0[7]) = 0;
  v5 = (_QWORD *)((char *)v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.libraryMadeForYou.unsafeMutableAddressor()
{
  return sub_10009CAF0(&qword_10048C5B8, (uint64_t)static MetricsEvent.Page.libraryMadeForYou, (uint64_t)sub_10009CB98);
}

uint64_t static MetricsEvent.Page.libraryMadeForYou.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009CB4C(&qword_10048C5B8, (uint64_t)static MetricsEvent.Page.libraryMadeForYou, (uint64_t)sub_10009CB98, a1);
}

uint64_t sub_10009CCA8()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_1000086DC((uint64_t)v0, static MetricsEvent.Page.libraryAlbumsList);
  v1 = (_QWORD *)sub_1000086B4((uint64_t)v0, (uint64_t)static MetricsEvent.Page.libraryAlbumsList);
  v2 = (char *)v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *v1 = 0xD000000000000011;
  v1[1] = 0x80000001003AED50;
  v1[2] = 1836019538;
  v1[3] = 0xE400000000000000;
  *(_QWORD *)((char *)v1 + v0[7]) = 0;
  v5 = (_QWORD *)((char *)v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.libraryAlbumsList.unsafeMutableAddressor()
{
  return sub_10009CAF0(&qword_10048C5C0, (uint64_t)static MetricsEvent.Page.libraryAlbumsList, (uint64_t)sub_10009CCA8);
}

uint64_t static MetricsEvent.Page.libraryAlbumsList.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009CB4C(&qword_10048C5C0, (uint64_t)static MetricsEvent.Page.libraryAlbumsList, (uint64_t)sub_10009CCA8, a1);
}

uint64_t sub_10009CDB0()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_1000086DC((uint64_t)v0, static MetricsEvent.Page.libraryArtistsList);
  v1 = (_QWORD *)sub_1000086B4((uint64_t)v0, (uint64_t)static MetricsEvent.Page.libraryArtistsList);
  v2 = (char *)v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *v1 = 0xD000000000000012;
  v1[1] = 0x80000001003AED30;
  v1[2] = 1836019538;
  v1[3] = 0xE400000000000000;
  *(_QWORD *)((char *)v1 + v0[7]) = 0;
  v5 = (_QWORD *)((char *)v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.libraryArtistsList.unsafeMutableAddressor()
{
  return sub_10009CAF0(&qword_10048C5C8, (uint64_t)static MetricsEvent.Page.libraryArtistsList, (uint64_t)sub_10009CDB0);
}

uint64_t static MetricsEvent.Page.libraryArtistsList.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009CB4C(&qword_10048C5C8, (uint64_t)static MetricsEvent.Page.libraryArtistsList, (uint64_t)sub_10009CDB0, a1);
}

uint64_t sub_10009CEB8()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_1000086DC((uint64_t)v0, static MetricsEvent.Page.libraryCompilationsList);
  v1 = (_QWORD *)sub_1000086B4((uint64_t)v0, (uint64_t)static MetricsEvent.Page.libraryCompilationsList);
  v2 = (char *)v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *v1 = 0xD000000000000017;
  v1[1] = 0x80000001003AED10;
  v1[2] = 1836019538;
  v1[3] = 0xE400000000000000;
  *(_QWORD *)((char *)v1 + v0[7]) = 0;
  v5 = (_QWORD *)((char *)v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.libraryCompilationsList.unsafeMutableAddressor()
{
  return sub_10009CAF0(&qword_10048C5D0, (uint64_t)static MetricsEvent.Page.libraryCompilationsList, (uint64_t)sub_10009CEB8);
}

uint64_t static MetricsEvent.Page.libraryCompilationsList.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009CB4C(&qword_10048C5D0, (uint64_t)static MetricsEvent.Page.libraryCompilationsList, (uint64_t)sub_10009CEB8, a1);
}

uint64_t sub_10009CFC0()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_1000086DC((uint64_t)v0, static MetricsEvent.Page.libraryComposersList);
  v1 = (_QWORD *)sub_1000086B4((uint64_t)v0, (uint64_t)static MetricsEvent.Page.libraryComposersList);
  v2 = (char *)v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *v1 = 0xD000000000000014;
  v1[1] = 0x80000001003AECF0;
  v1[2] = 1836019538;
  v1[3] = 0xE400000000000000;
  *(_QWORD *)((char *)v1 + v0[7]) = 0;
  v5 = (_QWORD *)((char *)v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.libraryComposersList.unsafeMutableAddressor()
{
  return sub_10009CAF0(&qword_10048C5D8, (uint64_t)static MetricsEvent.Page.libraryComposersList, (uint64_t)sub_10009CFC0);
}

uint64_t static MetricsEvent.Page.libraryComposersList.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009CB4C(&qword_10048C5D8, (uint64_t)static MetricsEvent.Page.libraryComposersList, (uint64_t)sub_10009CFC0, a1);
}

uint64_t sub_10009D0C8()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_1000086DC((uint64_t)v0, static MetricsEvent.Page.libraryGenresList);
  v1 = (_QWORD *)sub_1000086B4((uint64_t)v0, (uint64_t)static MetricsEvent.Page.libraryGenresList);
  v2 = (char *)v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *v1 = 0xD000000000000011;
  v1[1] = 0x80000001003AECD0;
  v1[2] = 1836019538;
  v1[3] = 0xE400000000000000;
  *(_QWORD *)((char *)v1 + v0[7]) = 0;
  v5 = (_QWORD *)((char *)v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.libraryGenresList.unsafeMutableAddressor()
{
  return sub_10009CAF0(&qword_10048C5E0, (uint64_t)static MetricsEvent.Page.libraryGenresList, (uint64_t)sub_10009D0C8);
}

uint64_t static MetricsEvent.Page.libraryGenresList.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009CB4C(&qword_10048C5E0, (uint64_t)static MetricsEvent.Page.libraryGenresList, (uint64_t)sub_10009D0C8, a1);
}

uint64_t sub_10009D1D0()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_1000086DC((uint64_t)v0, static MetricsEvent.Page.libraryMusicVideosList);
  v1 = (_QWORD *)sub_1000086B4((uint64_t)v0, (uint64_t)static MetricsEvent.Page.libraryMusicVideosList);
  v2 = (char *)v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *v1 = 0xD000000000000016;
  v1[1] = 0x80000001003AECB0;
  v1[2] = 1836019538;
  v1[3] = 0xE400000000000000;
  *(_QWORD *)((char *)v1 + v0[7]) = 0;
  v5 = (_QWORD *)((char *)v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.libraryMusicVideosList.unsafeMutableAddressor()
{
  return sub_10009CAF0(&qword_10048C5E8, (uint64_t)static MetricsEvent.Page.libraryMusicVideosList, (uint64_t)sub_10009D1D0);
}

uint64_t static MetricsEvent.Page.libraryMusicVideosList.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009CB4C(&qword_10048C5E8, (uint64_t)static MetricsEvent.Page.libraryMusicVideosList, (uint64_t)sub_10009D1D0, a1);
}

uint64_t sub_10009D2D8()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_1000086DC((uint64_t)v0, static MetricsEvent.Page.libraryPlaylistsList);
  v1 = (_QWORD *)sub_1000086B4((uint64_t)v0, (uint64_t)static MetricsEvent.Page.libraryPlaylistsList);
  v2 = (char *)v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *v1 = 0xD000000000000014;
  v1[1] = 0x80000001003AEC90;
  v1[2] = 1836019538;
  v1[3] = 0xE400000000000000;
  *(_QWORD *)((char *)v1 + v0[7]) = 0;
  v5 = (_QWORD *)((char *)v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.libraryPlaylistsList.unsafeMutableAddressor()
{
  return sub_10009CAF0(&qword_10048C5F0, (uint64_t)static MetricsEvent.Page.libraryPlaylistsList, (uint64_t)sub_10009D2D8);
}

uint64_t static MetricsEvent.Page.libraryPlaylistsList.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009CB4C(&qword_10048C5F0, (uint64_t)static MetricsEvent.Page.libraryPlaylistsList, (uint64_t)sub_10009D2D8, a1);
}

uint64_t sub_10009D3E0()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_1000086DC((uint64_t)v0, static MetricsEvent.Page.librarySongsList);
  v1 = (_QWORD *)sub_1000086B4((uint64_t)v0, (uint64_t)static MetricsEvent.Page.librarySongsList);
  v2 = (char *)v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *v1 = 0xD000000000000010;
  v1[1] = 0x80000001003AEC70;
  v1[2] = 1836019538;
  v1[3] = 0xE400000000000000;
  *(_QWORD *)((char *)v1 + v0[7]) = 0;
  v5 = (_QWORD *)((char *)v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.librarySongsList.unsafeMutableAddressor()
{
  return sub_10009CAF0(&qword_10048C5F8, (uint64_t)static MetricsEvent.Page.librarySongsList, (uint64_t)sub_10009D3E0);
}

uint64_t static MetricsEvent.Page.librarySongsList.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009CB4C(&qword_10048C5F8, (uint64_t)static MetricsEvent.Page.librarySongsList, (uint64_t)sub_10009D3E0, a1);
}

uint64_t sub_10009D4E8()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_1000086DC((uint64_t)v0, static MetricsEvent.Page.libraryRecentlyAdded);
  v1 = (_QWORD *)sub_1000086B4((uint64_t)v0, (uint64_t)static MetricsEvent.Page.libraryRecentlyAdded);
  v2 = (char *)v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *v1 = 0xD000000000000018;
  v1[1] = 0x80000001003AEC50;
  v1[2] = 1836019538;
  v1[3] = 0xE400000000000000;
  *(_QWORD *)((char *)v1 + v0[7]) = 0;
  v5 = (_QWORD *)((char *)v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.libraryRecentlyAdded.unsafeMutableAddressor()
{
  return sub_10009CAF0(&qword_10048C600, (uint64_t)static MetricsEvent.Page.libraryRecentlyAdded, (uint64_t)sub_10009D4E8);
}

uint64_t static MetricsEvent.Page.libraryRecentlyAdded.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009CB4C(&qword_10048C600, (uint64_t)static MetricsEvent.Page.libraryRecentlyAdded, (uint64_t)sub_10009D4E8, a1);
}

uint64_t sub_10009D5F0()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_1000086DC((uint64_t)v0, static MetricsEvent.Page.libraryRecentlyDownloaded);
  v1 = (_QWORD *)sub_1000086B4((uint64_t)v0, (uint64_t)static MetricsEvent.Page.libraryRecentlyDownloaded);
  v2 = (char *)v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *v1 = 0xD00000000000001DLL;
  v1[1] = 0x80000001003AEC30;
  v1[2] = 1836019538;
  v1[3] = 0xE400000000000000;
  *(_QWORD *)((char *)v1 + v0[7]) = 0;
  v5 = (_QWORD *)((char *)v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.libraryRecentlyDownloaded.unsafeMutableAddressor()
{
  return sub_10009CAF0(&qword_10048C608, (uint64_t)static MetricsEvent.Page.libraryRecentlyDownloaded, (uint64_t)sub_10009D5F0);
}

uint64_t static MetricsEvent.Page.libraryRecentlyDownloaded.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009CB4C(&qword_10048C608, (uint64_t)static MetricsEvent.Page.libraryRecentlyDownloaded, (uint64_t)sub_10009D5F0, a1);
}

uint64_t sub_10009D6F8()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_1000086DC((uint64_t)v0, static MetricsEvent.Page.libraryAlbumDetail);
  v1 = sub_1000086B4((uint64_t)v0, (uint64_t)static MetricsEvent.Page.libraryAlbumDetail);
  v2 = v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  strcpy((char *)v1, "LibraryAlbum");
  *(_BYTE *)(v1 + 13) = 0;
  *(_WORD *)(v1 + 14) = -5120;
  *(_QWORD *)(v1 + 16) = 0x6D75626C41;
  *(_QWORD *)(v1 + 24) = 0xE500000000000000;
  *(_QWORD *)(v1 + v0[7]) = 0;
  v5 = (_QWORD *)(v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *(_BYTE *)(v1 + v0[9]) = 1;
  v6 = (_QWORD *)(v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.libraryAlbumDetail.unsafeMutableAddressor()
{
  return sub_10009CAF0(&qword_10048C610, (uint64_t)static MetricsEvent.Page.libraryAlbumDetail, (uint64_t)sub_10009D6F8);
}

uint64_t static MetricsEvent.Page.libraryAlbumDetail.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009CB4C(&qword_10048C610, (uint64_t)static MetricsEvent.Page.libraryAlbumDetail, (uint64_t)sub_10009D6F8, a1);
}

uint64_t sub_10009D808()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_1000086DC((uint64_t)v0, static MetricsEvent.Page.libraryArtistDetail);
  v1 = sub_1000086B4((uint64_t)v0, (uint64_t)static MetricsEvent.Page.libraryArtistDetail);
  v2 = v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  strcpy((char *)v1, "LibraryArtist");
  *(_WORD *)(v1 + 14) = -4864;
  *(_QWORD *)(v1 + 16) = 0x747369747241;
  *(_QWORD *)(v1 + 24) = 0xE600000000000000;
  *(_QWORD *)(v1 + v0[7]) = 0;
  v5 = (_QWORD *)(v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *(_BYTE *)(v1 + v0[9]) = 1;
  v6 = (_QWORD *)(v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.libraryArtistDetail.unsafeMutableAddressor()
{
  return sub_10009CAF0(&qword_10048C618, (uint64_t)static MetricsEvent.Page.libraryArtistDetail, (uint64_t)sub_10009D808);
}

uint64_t static MetricsEvent.Page.libraryArtistDetail.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009CB4C(&qword_10048C618, (uint64_t)static MetricsEvent.Page.libraryArtistDetail, (uint64_t)sub_10009D808, a1);
}

uint64_t sub_10009D91C()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_1000086DC((uint64_t)v0, static MetricsEvent.Page.libraryPlaylistDetail);
  v1 = (_QWORD *)sub_1000086B4((uint64_t)v0, (uint64_t)static MetricsEvent.Page.libraryPlaylistDetail);
  v2 = (char *)v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *v1 = 0x507972617262694CLL;
  v1[1] = 0xEF7473696C79616CLL;
  v1[2] = 0x7473696C79616C50;
  v1[3] = 0xE800000000000000;
  *(_QWORD *)((char *)v1 + v0[7]) = 0;
  v5 = (_QWORD *)((char *)v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.libraryPlaylistDetail.unsafeMutableAddressor()
{
  return sub_10009CAF0(&qword_10048C620, (uint64_t)static MetricsEvent.Page.libraryPlaylistDetail, (uint64_t)sub_10009D91C);
}

uint64_t static MetricsEvent.Page.libraryPlaylistDetail.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009CB4C(&qword_10048C620, (uint64_t)static MetricsEvent.Page.libraryPlaylistDetail, (uint64_t)sub_10009D91C, a1);
}

uint64_t sub_10009DA34()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_1000086DC((uint64_t)v0, static MetricsEvent.Page.libraryComposerDetail);
  v1 = (_QWORD *)sub_1000086B4((uint64_t)v0, (uint64_t)static MetricsEvent.Page.libraryComposerDetail);
  v2 = (char *)v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *v1 = 0x437972617262694CLL;
  v1[1] = 0xEF7265736F706D6FLL;
  v1[2] = 0x747369747241;
  v1[3] = 0xE600000000000000;
  *(_QWORD *)((char *)v1 + v0[7]) = 0;
  v5 = (_QWORD *)((char *)v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.libraryComposerDetail.unsafeMutableAddressor()
{
  return sub_10009CAF0(&qword_10048C628, (uint64_t)static MetricsEvent.Page.libraryComposerDetail, (uint64_t)sub_10009DA34);
}

uint64_t static MetricsEvent.Page.libraryComposerDetail.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009CB4C(&qword_10048C628, (uint64_t)static MetricsEvent.Page.libraryComposerDetail, (uint64_t)sub_10009DA34, a1);
}

uint64_t sub_10009DB48()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_1000086DC((uint64_t)v0, static MetricsEvent.Page.libraryGenreDetail);
  v1 = (_QWORD *)sub_1000086B4((uint64_t)v0, (uint64_t)static MetricsEvent.Page.libraryGenreDetail);
  v2 = (char *)v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *v1 = 0xD000000000000012;
  v1[1] = 0x80000001003AEC10;
  v1[2] = 0x65726E6547;
  v1[3] = 0xE500000000000000;
  *(_QWORD *)((char *)v1 + v0[7]) = 0;
  v5 = (_QWORD *)((char *)v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.libraryGenreDetail.unsafeMutableAddressor()
{
  return sub_10009CAF0(&qword_10048C630, (uint64_t)static MetricsEvent.Page.libraryGenreDetail, (uint64_t)sub_10009DB48);
}

uint64_t static MetricsEvent.Page.libraryGenreDetail.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009CB4C(&qword_10048C630, (uint64_t)static MetricsEvent.Page.libraryGenreDetail, (uint64_t)sub_10009DB48, a1);
}

uint64_t sub_10009DC54()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_1000086DC((uint64_t)v0, static MetricsEvent.Page.playlistCreation);
  v1 = (_QWORD *)sub_1000086B4((uint64_t)v0, (uint64_t)static MetricsEvent.Page.playlistCreation);
  v2 = (char *)v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *v1 = 0x6C79616C5077654ELL;
  v1[1] = 0xEB00000000747369;
  v1[2] = 0x7473696C79616C50;
  v1[3] = 0xE800000000000000;
  *(_QWORD *)((char *)v1 + v0[7]) = 0;
  v5 = (_QWORD *)((char *)v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v1 + v0[9]) = 0;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.playlistCreation.unsafeMutableAddressor()
{
  return sub_10009CAF0(&qword_10048C638, (uint64_t)static MetricsEvent.Page.playlistCreation, (uint64_t)sub_10009DC54);
}

uint64_t static MetricsEvent.Page.playlistCreation.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009CB4C(&qword_10048C638, (uint64_t)static MetricsEvent.Page.playlistCreation, (uint64_t)sub_10009DC54, a1);
}

uint64_t sub_10009DD64()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_1000086DC((uint64_t)v0, static MetricsEvent.Page.playlistPicker);
  v1 = sub_1000086B4((uint64_t)v0, (uint64_t)static MetricsEvent.Page.playlistPicker);
  v2 = v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  strcpy((char *)v1, "PlaylistPicker");
  *(_BYTE *)(v1 + 15) = -18;
  *(_QWORD *)(v1 + 16) = 0x72656B636950;
  *(_QWORD *)(v1 + 24) = 0xE600000000000000;
  *(_QWORD *)(v1 + v0[7]) = 0;
  v5 = (_QWORD *)(v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *(_BYTE *)(v1 + v0[9]) = 0;
  v6 = (_QWORD *)(v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.playlistPicker.unsafeMutableAddressor()
{
  return sub_10009CAF0(&qword_10048C640, (uint64_t)static MetricsEvent.Page.playlistPicker, (uint64_t)sub_10009DD64);
}

uint64_t static MetricsEvent.Page.playlistPicker.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009CB4C(&qword_10048C640, (uint64_t)static MetricsEvent.Page.playlistPicker, (uint64_t)sub_10009DD64, a1);
}

uint64_t MetricsEvent.Page.metricsPageProperties.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;

  v3 = sub_100005574(&qword_10048D510);
  __chkstk_darwin(v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v6 = v1[1];
  v8 = v1[3];
  v19 = v1[2];
  v9 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_100014A7C((uint64_t)v1 + v9[6], (uint64_t)v5, &qword_10048D510);
  v10 = *(uint64_t *)((char *)v1 + v9[7]);
  v11 = (uint64_t *)((char *)v1 + v9[10]);
  v12 = v11[1];
  v20 = *v11;
  v13 = (int *)type metadata accessor for MetricsPageProperties(0);
  v14 = (uint64_t)a1 + v13[6];
  v15 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v16 = v13[7];
  *(_QWORD *)((char *)a1 + v16) = 0;
  v17 = (_QWORD *)((char *)a1 + v13[8]);
  *v17 = 0;
  v17[1] = 0;
  *a1 = v7;
  a1[1] = v6;
  a1[2] = v19;
  a1[3] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000A64CC((uint64_t)v5, v14);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + v16));
  *(_QWORD *)((char *)a1 + v16) = v10;
  result = swift_bridgeObjectRelease(v17[1]);
  *v17 = v20;
  v17[1] = v12;
  return result;
}

BOOL MetricsEvent.Page.DisplayType.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10043D818, v2);
  swift_bridgeObjectRelease(object);
  return v3 != 0;
}

uint64_t MetricsEvent.Page.DisplayType.rawValue.getter()
{
  return 0x7765695664726163;
}

Swift::Int sub_10009E034()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0x7765695664726163, 0xE800000000000000);
  return Hasher._finalize()();
}

uint64_t sub_10009E084(uint64_t a1)
{
  return String.hash(into:)(a1, 0x7765695664726163, 0xE800000000000000);
}

Swift::Int sub_10009E09C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0x7765695664726163, 0xE800000000000000);
  return Hasher._finalize()();
}

uint64_t sub_10009E0E8@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10043D850, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_10009E138(_QWORD *a1@<X8>)
{
  *a1 = 0x7765695664726163;
  a1[1] = 0xE800000000000000;
}

uint64_t MetricsEvent.Click.init(targetIdentifier:targetType:actionType:actionURL:locations:actionContext:actionDetails:pageIdentifier:pageType:pageURL:pageDetails:pageDisplayType:snapshotImpressions:searchTerm:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, uint64_t a11, __int16 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  int *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t result;
  _QWORD *v35;

  v28 = (int *)type metadata accessor for MetricsEvent.Click(0);
  *(_BYTE *)(a9 + v28[18]) = 0;
  v29 = (_QWORD *)(a9 + v28[19]);
  *v29 = 0;
  v29[1] = 0;
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 16) = a3;
  *(_BYTE *)(a9 + 17) = a4;
  sub_1000149A8(a5, a9 + v28[7], &qword_10048D510);
  *(_QWORD *)(a9 + v28[8]) = a6;
  v30 = (_QWORD *)(a9 + v28[9]);
  *v30 = a7;
  v30[1] = a8;
  v31 = a9 + v28[10];
  *(_OWORD *)v31 = a10;
  *(_QWORD *)(v31 + 16) = a11;
  *(_WORD *)(v31 + 24) = a12;
  v32 = (_QWORD *)(a9 + v28[12]);
  *v32 = a13;
  v32[1] = a14;
  v33 = (_QWORD *)(a9 + v28[13]);
  *v33 = a15;
  v33[1] = a16;
  result = sub_1000149A8(a17, a9 + v28[14], &qword_10048D510);
  *(_QWORD *)(a9 + v28[15]) = a18;
  *(_BYTE *)(a9 + v28[16]) = a19 & 1;
  *(_QWORD *)(a9 + v28[11]) = a20;
  v35 = (_QWORD *)(a9 + v28[17]);
  *v35 = a21;
  v35[1] = a22;
  return result;
}

uint64_t MetricsEvent.Click.init(targetIdentifier:targetType:actionType:actionURL:locations:actionContext:actionDetails:metricsPageProperties:snapshotImpressions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, uint64_t a11, unsigned __int16 a12, uint64_t *a13, uint64_t a14)
{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t result;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v43 = a7;
  v44 = a8;
  v38 = a5;
  v36 = a3;
  v37 = a4;
  v42 = a12;
  v40 = a11;
  v41 = a6;
  v39 = a10;
  v45 = a14;
  v17 = sub_100005574(&qword_10048D510);
  __chkstk_darwin(v17);
  v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a13[1];
  v21 = a13[2];
  v22 = a13[3];
  v34 = *a13;
  v35 = v21;
  v23 = type metadata accessor for MetricsPageProperties(0);
  sub_100014A7C((uint64_t)a13 + *(int *)(v23 + 24), (uint64_t)v19, &qword_10048D510);
  v24 = *(uint64_t *)((char *)a13 + *(int *)(v23 + 28));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100006798((uint64_t)a13, type metadata accessor for MetricsPageProperties);
  v25 = (int *)type metadata accessor for MetricsEvent.Click(0);
  *(_BYTE *)(a9 + v25[18]) = 0;
  v26 = (_QWORD *)(a9 + v25[19]);
  *v26 = 0;
  v26[1] = 0;
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 16) = v36;
  *(_BYTE *)(a9 + 17) = v37;
  sub_1000149A8(v38, a9 + v25[7], &qword_10048D510);
  *(_QWORD *)(a9 + v25[8]) = v41;
  v27 = (_QWORD *)(a9 + v25[9]);
  v28 = v44;
  *v27 = v43;
  v27[1] = v28;
  v29 = a9 + v25[10];
  *(_OWORD *)v29 = v39;
  *(_QWORD *)(v29 + 16) = v40;
  *(_WORD *)(v29 + 24) = v42;
  v30 = (_QWORD *)(a9 + v25[12]);
  *v30 = v34;
  v30[1] = v20;
  v31 = (_QWORD *)(a9 + v25[13]);
  *v31 = v35;
  v31[1] = v22;
  result = sub_1000149A8((uint64_t)v19, a9 + v25[14], &qword_10048D510);
  *(_QWORD *)(a9 + v25[15]) = v24;
  *(_BYTE *)(a9 + v25[16]) = 1;
  *(_QWORD *)(a9 + v25[11]) = v45;
  v33 = (_QWORD *)(a9 + v25[17]);
  *v33 = 0;
  v33[1] = 0;
  return result;
}

uint64_t MetricsEvent.Click.isSharedContent.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MetricsEvent.Click(0) + 72));
}

uint64_t MetricsEvent.Click.isSharedContent.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for MetricsEvent.Click(0);
  *(_BYTE *)(v1 + *(int *)(result + 72)) = a1;
  return result;
}

CFRange (__swiftcall *MetricsEvent.Click.isSharedContent.modify())(__C::_NSRange)
{
  type metadata accessor for MetricsEvent.Click(0);
  return CFRange.init(_:);
}

uint64_t MetricsEvent.Click.dataRecoDataSetId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for MetricsEvent.Click(0) + 76));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricsEvent.Click.dataRecoDataSetId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for MetricsEvent.Click(0) + 76));
  result = swift_bridgeObjectRelease(v5[1]);
  *v5 = a1;
  v5[1] = a2;
  return result;
}

CFRange (__swiftcall *MetricsEvent.Click.dataRecoDataSetId.modify())(__C::_NSRange)
{
  type metadata accessor for MetricsEvent.Click(0);
  return CFRange.init(_:);
}

uint64_t MetricsEvent.Click.ActionType.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10009E650 + 4 * word_10038A010[a1]))(0x6E6F69746361, 0xE600000000000000);
}

uint64_t sub_10009E650()
{
  return 0x6574617669746361;
}

uint64_t sub_10009E668()
{
  return 6579297;
}

uint64_t sub_10009E678()
{
  return 0x62694C6F54646461;
}

uint64_t sub_10009E698()
{
  return 0x6575516F54646461;
}

uint64_t sub_10009E6B8()
{
  return 0x7473756A6461;
}

uint64_t sub_10009E6C8()
{
  return 0x616C506E69676562;
}

uint64_t sub_10009E6EC()
{
  return 0x6C65636E6163;
}

uint64_t sub_10009E6FC()
{
  return 0x726F62616C6C6F63;
}

uint64_t sub_10009E71C()
{
  return 0x657461657263;
}

uint64_t sub_10009E72C()
{
  return 0x7453657461657263;
}

unint64_t sub_10009E750()
{
  return 0xD000000000000015;
}

unint64_t sub_10009E914()
{
  return 0xD000000000000012;
}

uint64_t sub_10009E930()
{
  return 0x6F4374726F706572;
}

uint64_t sub_10009E954()
{
  return 0x686372616573;
}

uint64_t sub_10009E964()
{
  return 0x7463656C6573;
}

uint64_t sub_10009E974()
{
  return 0x6572616873;
}

uint64_t sub_10009E988()
{
  return 0x694C646572616873;
}

uint64_t sub_10009E9AC()
{
  return 0x72794C6572616873;
}

uint64_t sub_10009E9CC()
{
  return 0x6972794C776F6873;
}

uint64_t sub_10009E9EC()
{
  return 0x74696D627573;
}

uint64_t sub_10009E9FC()
{
  return 0x656C67676F74;
}

uint64_t sub_10009EA0C()
{
  return 0x75626C4177656976;
}

uint64_t sub_10009EA2C()
{
  return 0x6974724177656976;
}

uint64_t sub_10009EA4C()
{
  return 0x6465724377656976;
}

uint64_t sub_10009EA6C()
{
  return 0x79616C5077656976;
}

uint64_t sub_10009EA8C()
{
  return 0x77656976657270;
}

uint64_t sub_10009EAA4()
{
  return 0x6573756170;
}

uint64_t sub_10009EAB8()
{
  return 0x68736572666572;
}

uint64_t sub_10009EAD0(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_10009EADC(a1, a2, a3, a4, (uint64_t (*)(uint64_t))MetricsEvent.Click.ActionType.rawValue.getter);
}

uint64_t sub_10009EADC(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;

  v6 = *a2;
  v7 = a5(*a1);
  v9 = v8;
  v10 = a5(v6);
  if (v7 == v10 && v9 == v11)
  {
    v14 = 1;
    v13 = v9;
  }
  else
  {
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
  }
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v13);
  return v14 & 1;
}

Swift::Int sub_10009EB68(uint64_t a1, uint64_t a2)
{
  return sub_10009EB74(a1, a2, (uint64_t (*)(uint64_t))MetricsEvent.Click.ActionType.rawValue.getter);
}

Swift::Int sub_10009EB74(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[9];

  v5 = *v3;
  Hasher.init(_seed:)(v10);
  v6 = a3(v5);
  v8 = v7;
  String.hash(into:)(v10, v6, v7);
  swift_bridgeObjectRelease(v8);
  return Hasher._finalize()();
}

uint64_t sub_10009EBD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10009EBE4(a1, a2, a3, (uint64_t (*)(_QWORD))MetricsEvent.Click.ActionType.rawValue.getter);
}

uint64_t sub_10009EBE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = a4(*v4);
  v8 = v7;
  String.hash(into:)(a1, v6, v7);
  return swift_bridgeObjectRelease(v8);
}

Swift::Int sub_10009EC24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10009EC30(a1, a2, a3, (uint64_t (*)(uint64_t))MetricsEvent.Click.ActionType.rawValue.getter);
}

Swift::Int sub_10009EC30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[9];

  v6 = *v4;
  Hasher.init(_seed:)(v11);
  v7 = a4(v6);
  v9 = v8;
  String.hash(into:)(v11, v7, v8);
  swift_bridgeObjectRelease(v9);
  return Hasher._finalize()();
}

uint64_t sub_10009EC90@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s9MusicCore12MetricsEventV5ClickV10ActionTypeO8rawValueAGSgSS_tcfC_0(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_10009ECBC@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = MetricsEvent.Click.ActionType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t MetricsEvent.Click.ActionContext.rawValue.getter(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = 0x6472616F6279656BLL;
  switch(a2)
  {
    case 0uLL:
      break;
    case 1uLL:
      v2 = 0x79726F7473;
      break;
    case 2uLL:
      v2 = 1701998445;
      break;
    case 3uLL:
      v2 = 0x636972796CLL;
      break;
    case 4uLL:
      v2 = 0x6B63617274;
      break;
    case 5uLL:
    case 8uLL:
      v2 = 0xD000000000000010;
      break;
    case 6uLL:
      v2 = 0xD000000000000015;
      break;
    case 7uLL:
      v2 = 0x6E654D6570697773;
      break;
    default:
      v2 = a1;
      break;
  }
  sub_100033BF0(a1, a2);
  return v2;
}

uint64_t sub_10009EDFC(uint64_t *a1, uint64_t a2)
{
  return _s9MusicCore12MetricsEventV5ClickV13ActionContextO21__derived_enum_equalsySbAG_AGtFZ_0(*a1, a1[1], *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

void MetricsEvent.Click.ActionDetails.dictionary.getter(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  __asm { BR              X10 }
}

unint64_t sub_10009EE54()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v5;

  v1 = sub_100005574(&qword_1004904C8);
  inited = swift_initStackObject(v1, &v5);
  *(_OWORD *)(inited + 16) = xmmword_100384A80;
  strcpy((char *)(inited + 32), "actionSubType");
  *(_WORD *)(inited + 46) = -4864;
  *(_QWORD *)(inited + 48) = MetricsEvent.Click.ActionType.rawValue.getter(v0);
  *(_QWORD *)(inited + 56) = v3;
  return sub_100098C3C(inited);
}

uint64_t MetricsEvent.ComponentRender.PreloadStatus.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10009F348 + 4 * byte_10038A079[a1]))(1819047270, 0xE400000000000000);
}

uint64_t sub_10009F348()
{
  return 0x6C616974726170;
}

uint64_t sub_10009F360()
{
  return 0x6C6F686563616C70;
}

uint64_t sub_10009F380()
{
  return 0x73756F6976657270;
}

void sub_10009F3A4(char *a1)
{
  sub_100028A60(*a1);
}

void sub_10009F3B0()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_10009F3F4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6C616974726170, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

void sub_10009F478()
{
  __asm { BR              X10 }
}

uint64_t sub_10009F4AC(uint64_t a1)
{
  String.hash(into:)(a1, 0x6C616974726170, 0xE700000000000000);
  return swift_bridgeObjectRelease(0xE700000000000000);
}

void sub_10009F51C()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_10009F55C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6C616974726170, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

unint64_t sub_10009F5E0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s9MusicCore12MetricsEventV15ComponentRenderV13PreloadStatusO8rawValueAGSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009F60C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_10009F634 + 4 * byte_10038A089[*v0]))();
}

void sub_10009F634(_QWORD *a1@<X8>)
{
  *a1 = 0x6C616974726170;
  a1[1] = 0xE700000000000000;
}

void sub_10009F650(_QWORD *a1@<X8>)
{
  *a1 = 0x6C6F686563616C70;
  a1[1] = 0xEB00000000726564;
}

void sub_10009F674(_QWORD *a1@<X8>)
{
  *a1 = 0x73756F6976657270;
  a1[1] = 0xEF6E776F6853796CLL;
}

uint64_t SharePlayTogetherSession.Participant.id.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(v2[1]);
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t MetricsEvent.ComponentRender.componentType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t MetricsEvent.ComponentRender.componentType.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

void *Library.Menu.Request.mediaPickerConfiguration.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 24);
  v2 = v1;
  return v1;
}

void MPCPlaybackEngine.Configuration.fallbackPlaybackIntent.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
}

void GroupActivitiesManager.Activity.Metadata.previewImage.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
}

void *MetricsEvent.ComponentRender.componentMotionActivationTime.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 40);
  v2 = v1;
  return v1;
}

void MetricsEvent.ComponentRender.componentMotionActivationTime.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = a1;
}

CFRange (__swiftcall *Library.Menu.Request.filtersToAvailableContentGroups.modify())(__C::_NSRange)
{
  return CFRange.init(_:);
}

id PlaylistCovers.Cover.Representation.textColor.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 48);
}

void MetricsEvent.ComponentRender.componentRequestTime.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = a1;
}

void *MetricsEvent.ComponentRender.componentEndTime.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 56);
  v2 = v1;
  return v1;
}

void MetricsEvent.ComponentRender.componentEndTime.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = a1;
}

CFRange (__swiftcall *PresentationSource.configurationHandler.modify())(__C::_NSRange)
{
  return CFRange.init(_:);
}

void *MetricsEvent.ComponentRender.componentInterruptTime.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 64);
  v2 = v1;
  return v1;
}

void MetricsEvent.ComponentRender.componentInterruptTime.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = a1;
}

CFRange (__swiftcall *MetricsEvent.ComponentRender.componentInterruptTime.modify())(__C::_NSRange)
{
  return CFRange.init(_:);
}

uint64_t MetricsEvent.ComponentRender.preloadStatus.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t MetricsEvent.ComponentRender.preloadStatus.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 72) = result;
  return result;
}

CFRange (__swiftcall *LibraryModelRequest.scopedContainers.modify())(__C::_NSRange)
{
  return CFRange.init(_:);
}

id sub_10009F8B8()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MetricsReportingController()), "init");
  static MetricsReportingController.shared = (uint64_t)result;
  return result;
}

id static MetricsReportingController.shared.getter()
{
  if (qword_10048C648 != -1)
    swift_once(&qword_10048C648, sub_10009F8B8);
  return (id)static MetricsReportingController.shared;
}

void MetricsReportingController.recordPerformanceMetrics(for:)(void *a1)
{
  id v1;
  id v2;
  MusicCore::MetricsEvent::LoadUrl v3;

  if (a1)
  {
    v1 = objc_msgSend(a1, "performanceMetrics");
    if (v1)
    {
      v2 = v1;
      sub_1000A6564(v2, (uint64_t)&v3);
      MetricsReportingController.recordLoadUrlEvent(_:)(&v3);
      sub_1000A69B0(&v3);

    }
  }
}

void MetricsReportingController.recordPageEvent(_:pageContext:sharedListeningContext:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  id v25;
  id v26;
  NSString v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  NSString v31;
  NSString v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  NSString v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  Class isa;
  NSString v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  _QWORD *v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  id v53;
  NSString v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  NSDictionary v59;
  NSString v60;
  uint64_t *v61;
  uint64_t v62;
  char **v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t inited;
  unint64_t v67;
  Class v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  Class v72;
  unint64_t v73;
  char v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  Class v81;
  unint64_t v82;
  unint64_t v83;
  Class v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  Class v91;
  void *v92;
  void *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  id v97;
  id v98;
  id v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110[80];
  _QWORD aBlock[5];
  uint64_t v112;

  v101 = a5;
  v104 = a4;
  v9 = sub_100005574(&qword_10048D510);
  __chkstk_darwin(v9);
  v11 = (char *)&v100 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (unint64_t *)((char *)&v100 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = sub_1000087DC(0, (unint64_t *)&qword_100490BC0, OS_dispatch_queue_ptr);
  *v15 = static OS_dispatch_queue.main.getter(v16, v17, v18, v19, v20, v21, v22, v23, v100, v101, v102, v103, v104, v105, v106);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  v24 = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
  if ((v24 & 1) != 0)
  {
    v25 = objc_msgSend(objc_allocWithZone((Class)SSMetricsPageEvent), "init");
    v100 = a6;
    v102 = v11;
    v26 = v25;
    if (a3)
      v27 = String._bridgeToObjectiveC()();
    else
      v27 = 0;
    objc_msgSend(v25, "setPageContext:", v27, v100);

    v29 = *a1;
    v28 = a1[1];
    v30 = v25;
    swift_bridgeObjectRetain();
    v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v28);
    v32 = String._bridgeToObjectiveC()();
    objc_msgSend(v30, "setProperty:forBodyKey:", v31, v32);

    v34 = a1[2];
    v33 = a1[3];
    v105 = a1;
    v35 = v30;
    v36 = String._bridgeToObjectiveC()();
    objc_msgSend(v35, "setPageType:", v36);

    v103 = OBJC_IVAR____TtC9MusicCore26MetricsReportingController_metricsConfiguration;
    v37 = *(void **)&v106[OBJC_IVAR____TtC9MusicCore26MetricsReportingController_metricsConfiguration];
    if (v37)
    {
      v38 = sub_100005574(&qword_1004904D8);
      v39 = swift_allocObject(v38, 96, 7);
      *(_OWORD *)(v39 + 16) = xmmword_100384A60;
      *(_QWORD *)(v39 + 32) = v34;
      *(_QWORD *)(v39 + 40) = v33;
      *(_QWORD *)(v39 + 88) = &type metadata for String;
      *(_QWORD *)(v39 + 56) = &type metadata for String;
      *(_QWORD *)(v39 + 64) = v29;
      *(_QWORD *)(v39 + 72) = v28;
      v40 = v35;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v41 = v37;
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v39);
      v43 = objc_msgSend(v41, "compoundStringWithElements:", isa);

      if (v43)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
        v45 = v44;

        v43 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v45);
      }
    }
    else
    {
      v46 = v35;
      v43 = 0;
    }
    v47 = v105;
    v48 = (uint64_t)v102;
    objc_msgSend(v35, "setPageDescription:", v43);

    v49 = (int *)type metadata accessor for MetricsEvent.Page(0);
    sub_100014A7C((uint64_t)v47 + v49[6], v48, &qword_10048D510);
    v50 = type metadata accessor for URL(0);
    v51 = *(_QWORD *)(v50 - 8);
    v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v48, 1, v50);
    v53 = v35;
    if (v52 == 1)
    {
      sub_100008758(v48, &qword_10048D510);
      v54 = 0;
    }
    else
    {
      URL.absoluteString.getter();
      v56 = v55;
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v48, v50);
      v54 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v56);
    }
    objc_msgSend(v53, "setPageURL:", v54);

    v57 = *(_QWORD *)((char *)v47 + v49[7]);
    v58 = v53;
    if (v57)
    {
      swift_bridgeObjectRetain();
      v59.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v57);
    }
    else
    {
      v59.super.isa = 0;
    }
    v60 = String._bridgeToObjectiveC()();
    objc_msgSend(v53, "setProperty:forBodyKey:", v59.super.isa, v60);

    swift_unknownObjectRelease(v59.super.isa);
    v61 = (_QWORD *)((char *)v47 + v49[8]);
    v62 = v61[1];
    v63 = &selRef_count;
    if (v62)
    {
      v64 = *v61;
      v65 = sub_100005574(&qword_1004967B0);
      inited = swift_initStackObject(v65, &v107);
      *(_OWORD *)(inited + 16) = xmmword_100384A80;
      *(_QWORD *)(inited + 32) = 0x6554686372616573;
      *(_QWORD *)(inited + 40) = 0xEA00000000006D72;
      *(_QWORD *)(inited + 72) = &type metadata for String;
      *(_QWORD *)(inited + 48) = v64;
      *(_QWORD *)(inited + 56) = v62;
      v63 = &selRef_count;
      swift_bridgeObjectRetain();
      v67 = sub_100098D5C(inited);
      v68 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v67);
      objc_msgSend(v53, "addPropertiesWithDictionary:", v68);

    }
    if ((*((_BYTE *)v47 + v49[9]) & 1) == 0)
    {
      v69 = sub_100005574(&qword_1004967B0);
      v70 = swift_initStackObject(v69, &v108);
      *(_OWORD *)(v70 + 16) = xmmword_100384A80;
      *(_QWORD *)(v70 + 32) = 0x7073694465676170;
      *(_QWORD *)(v70 + 40) = 0xEF6570795479616CLL;
      *(_QWORD *)(v70 + 72) = &type metadata for String;
      *(_QWORD *)(v70 + 48) = 0x7765695664726163;
      *(_QWORD *)(v70 + 56) = 0xE800000000000000;
      v71 = sub_100098D5C(v70);
      v72 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v71);
      objc_msgSend(v53, v63[228], v72);

    }
    if (v57)
    {
      if (*(_QWORD *)(v57 + 16))
      {
        v73 = sub_10009ABAC(0x4974655361746164, 0xE900000000000064);
        if ((v74 & 1) != 0)
        {
          v75 = (uint64_t *)(*(_QWORD *)(v57 + 56) + 16 * v73);
          v77 = *v75;
          v76 = v75[1];
          v78 = sub_100005574(&qword_1004967B0);
          v79 = swift_initStackObject(v78, &v109);
          *(_OWORD *)(v79 + 16) = xmmword_100384A80;
          *(_QWORD *)(v79 + 32) = 0x4974655361746164;
          *(_QWORD *)(v79 + 40) = 0xE900000000000064;
          *(_QWORD *)(v79 + 72) = &type metadata for String;
          *(_QWORD *)(v79 + 48) = v77;
          *(_QWORD *)(v79 + 56) = v76;
          v47 = v105;
          swift_bridgeObjectRetain();
          v80 = sub_100098D5C(v79);
          v81 = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v80);
          objc_msgSend(v53, "addPropertiesWithDictionary:", v81);

        }
      }
    }
    if (v104 != 2)
    {
      v82 = sub_1000A6308(v104 & 1, v101, v100);
      if (v82)
      {
        v83 = v82;
        v84 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v83);
        objc_msgSend(v53, "addPropertiesWithDictionary:", v84);

      }
    }
    v85 = (_QWORD *)((char *)v47 + v49[10]);
    v86 = v85[1];
    if (v86)
    {
      v87 = *v85;
      v88 = sub_100005574(&qword_1004967B0);
      v89 = swift_initStackObject(v88, v110);
      *(_OWORD *)(v89 + 16) = xmmword_100384A80;
      *(_QWORD *)(v89 + 32) = 0x7255666552747865;
      *(_QWORD *)(v89 + 40) = 0xE90000000000006CLL;
      *(_QWORD *)(v89 + 72) = &type metadata for String;
      *(_QWORD *)(v89 + 48) = v87;
      *(_QWORD *)(v89 + 56) = v86;
      swift_bridgeObjectRetain();
      v90 = sub_100098D5C(v89);
      v91 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v90);
      objc_msgSend(v53, "addPropertiesWithDictionary:", v91);

    }
    v92 = v106;
    v93 = *(void **)&v106[v103];
    v94 = swift_allocObject(&unk_100447240, 32, 7);
    *(_QWORD *)(v94 + 16) = v92;
    *(_QWORD *)(v94 + 24) = v53;
    aBlock[4] = sub_1000A6A64;
    v112 = v94;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000BED80;
    aBlock[3] = &unk_100447258;
    v95 = _Block_copy(aBlock);
    v96 = v112;
    v97 = v93;
    v98 = v92;
    v99 = v53;
    objc_msgSend(v99, "setStandardPropertiesWith:completionHandler:", v97, v95, swift_release(v96).n128_f64[0]);
    _Block_release(v95);

  }
  else
  {
    __break(1u);
  }
}

void MetricsReportingController.recordImpressionsEvent(_:with:pageContext:sharedListeningContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  id v29;
  NSString v30;
  uint64_t v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  NSString v33;
  uint64_t v34;
  NSString v35;
  NSString v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t inited;
  unint64_t v40;
  Class isa;
  unint64_t v42;
  unint64_t v43;
  Class v44;
  void *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  void **aBlock;
  uint64_t v59;
  uint64_t (*v60)(uint64_t);
  void *v61;
  double (*v62)();
  uint64_t v63;
  char v64[88];

  v56 = a5;
  v54 = a6;
  v55 = a7;
  v10 = sub_100005574(&qword_1004904E0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v53 - v14;
  v16 = type metadata accessor for DispatchPredicate(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (uint64_t *)((char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = sub_1000087DC(0, (unint64_t *)&qword_100490BC0, OS_dispatch_queue_ptr);
  *v19 = static OS_dispatch_queue.main.getter(v20, v21, v22, v23, v24, v25, v26, v27, v53, v54, v55, v56, v57, aBlock, v59);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v17 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v16);
  v28 = _dispatchPreconditionTest(_:)(v19);
  (*(void (**)(_QWORD *, uint64_t))(v17 + 8))(v19, v16);
  if ((v28 & 1) != 0)
  {
    v29 = objc_msgSend(objc_allocWithZone((Class)SSMetricsBaseEvent), "init");
    if (a4)
      v30 = String._bridgeToObjectiveC()();
    else
      v30 = 0;
    objc_msgSend(v29, "setPageContext:", v30);

    sub_100014A7C(a2, (uint64_t)v15, &qword_1004904E0);
    v31 = type metadata accessor for MetricsPageProperties(0);
    v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48);
    if (v32(v15, 1, v31) == 1)
    {
      sub_100008758((uint64_t)v15, &qword_1004904E0);
      v33 = 0;
    }
    else
    {
      v34 = *((_QWORD *)v15 + 1);
      swift_bridgeObjectRetain();
      sub_100006798((uint64_t)v15, type metadata accessor for MetricsPageProperties);
      v33 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v34);
    }
    v35 = String._bridgeToObjectiveC()();
    objc_msgSend(v29, "setProperty:forBodyKey:", v33, v35);
    swift_unknownObjectRelease(v33);

    sub_100014A7C(a2, (uint64_t)v13, &qword_1004904E0);
    if (v32(v13, 1, v31) == 1)
    {
      sub_100008758((uint64_t)v13, &qword_1004904E0);
      v36 = 0;
    }
    else
    {
      v37 = *((_QWORD *)v13 + 3);
      swift_bridgeObjectRetain();
      sub_100006798((uint64_t)v13, type metadata accessor for MetricsPageProperties);
      v36 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v37);
    }
    objc_msgSend(v29, "setPageType:", v36);

    objc_msgSend(v29, "setEventType:", SSMetricsEventTypeImpressions);
    v38 = sub_100005574(&qword_1004967B0);
    inited = swift_initStackObject(v38, v64);
    *(_OWORD *)(inited + 16) = xmmword_100384A80;
    *(_QWORD *)(inited + 32) = 0x6973736572706D69;
    *(_QWORD *)(inited + 40) = 0xEB00000000736E6FLL;
    *(_QWORD *)(inited + 72) = sub_100005574(&qword_1004904E8);
    *(_QWORD *)(inited + 48) = a1;
    swift_bridgeObjectRetain();
    v40 = sub_100098D5C(inited);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v40);
    objc_msgSend(v29, "addPropertiesWithDictionary:", isa);

    if (v56 != 2)
    {
      v42 = sub_1000A6308(v56 & 1, v54, v55);
      if (v42)
      {
        v43 = v42;
        v44 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v43);
        objc_msgSend(v29, "addPropertiesWithDictionary:", v44);

      }
    }
    v45 = v57;
    v46 = *(void **)&v57[OBJC_IVAR____TtC9MusicCore26MetricsReportingController_metricsConfiguration];
    v47 = swift_allocObject(&unk_100447290, 32, 7);
    *(_QWORD *)(v47 + 16) = v45;
    *(_QWORD *)(v47 + 24) = v29;
    v62 = sub_1000A6AA4;
    v63 = v47;
    aBlock = _NSConcreteStackBlock;
    v59 = 1107296256;
    v60 = sub_1000BED80;
    v61 = &unk_1004472A8;
    v48 = _Block_copy(&aBlock);
    v49 = v63;
    v50 = v46;
    v51 = v45;
    v52 = v29;
    objc_msgSend(v52, "setStandardPropertiesWith:completionHandler:", v50, v48, swift_release(v49).n128_f64[0]);
    _Block_release(v48);

  }
  else
  {
    __break(1u);
  }
}

double sub_1000A070C(void *a1, void *a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v8;
  id v9;
  id v10;
  double result;

  sub_1000087DC(0, (unint64_t *)&qword_100490BC0, OS_dispatch_queue_ptr);
  v8 = swift_allocObject(a3, 32, 7);
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  v9 = a1;
  v10 = a2;
  static OS_dispatch_queue.asyncOnMainIfNeeded(_:)(a4, v8);
  *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  return result;
}

void MetricsReportingController.recordSearchEvent(_:pageContext:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  id v23;
  id v24;
  NSString v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSString v34;
  NSString v35;
  uint64_t v36;
  uint64_t v37;
  NSString v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSString v43;
  NSString v44;
  id v45;
  uint64_t *v46;
  unint64_t v47;
  id v48;
  NSString v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  NSString v53;
  uint64_t v54;
  id v55;
  NSDictionary v56;
  NSString v57;
  uint64_t v58;
  id v59;
  NSString v60;
  NSString v61;
  uint64_t v62;
  id v63;
  NSArray v64;
  NSString v65;
  NSString v66;
  void *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  id v71;
  char *v72;
  id v73;
  void **aBlock;
  uint64_t v75;
  uint64_t (*v76)(uint64_t);
  void *v77;
  double (*v78)();
  uint64_t v79;
  uint64_t v80;

  v4 = v3;
  v7 = sub_100005574(&qword_10048D510);
  __chkstk_darwin(v7);
  v9 = (char *)&aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (void ***)((char *)&aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = sub_1000087DC(0, (unint64_t *)&qword_100490BC0, OS_dispatch_queue_ptr);
  *v13 = static OS_dispatch_queue.main.getter(v14, v15, v16, v17, v18, v19, v20, v21, aBlock, v75, v76, v77, v78, v79, v80);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  v22 = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v22 & 1) != 0)
  {
    v23 = objc_msgSend(objc_allocWithZone((Class)SSMetricsSearchEvent), "init");
    v24 = v23;
    if (a3)
      v25 = String._bridgeToObjectiveC()();
    else
      v25 = 0;
    objc_msgSend(v23, "setPageContext:", v25);

    v26 = (int *)type metadata accessor for MetricsEvent.Click(0);
    v27 = 0;
    v28 = a1 + v26[10];
    v29 = *(unsigned __int16 *)(v28 + 24);
    if (v29 >> 8 <= 0xFE)
    {
      MetricsEvent.Click.ActionDetails.dictionary.getter(*(_QWORD *)v28, *(_QWORD *)(v28 + 8), *(_QWORD *)(v28 + 16), v29);
      if (v30)
      {
        aBlock = v30;
        v31 = sub_100005574(&qword_1004904F0);
        v27 = _bridgeAnythingToObjectiveC<A>(_:)(&aBlock, v31);
        sub_100008758((uint64_t)&aBlock, &qword_1004904F0);
      }
      else
      {
        v27 = 0;
      }
    }
    objc_msgSend(v23, "setActionDetails:", v27);
    swift_unknownObjectRelease(v27);
    MetricsEvent.Click.ActionType.rawValue.getter(*(_BYTE *)(a1 + 17));
    v33 = v32;
    v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v33);
    objc_msgSend(v23, "setActionType:", v34);

    v35 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setTargetIdentifier:", v35);

    sub_100014A7C(a1 + v26[7], (uint64_t)v9, &qword_10048D510);
    v36 = type metadata accessor for URL(0);
    v37 = *(_QWORD *)(v36 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v9, 1, v36) == 1)
    {
      sub_100008758((uint64_t)v9, &qword_10048D510);
      v38 = 0;
    }
    else
    {
      URL.absoluteString.getter();
      v40 = v39;
      (*(void (**)(char *, uint64_t))(v37 + 8))(v9, v36);
      v38 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v40);
    }
    objc_msgSend(v23, "setTargetURL:", v38);

    MetricsEvent.TargetType.rawValue.getter(*(_BYTE *)(a1 + 16));
    v42 = v41;
    v43 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v42);
    objc_msgSend(v23, "setTargetType:", v43);

    v44 = *(NSString *)(a1 + v26[13] + 8);
    v45 = v23;
    if (v44)
      v44 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setPageType:", v44);

    v46 = (uint64_t *)(a1 + v26[9]);
    v47 = v46[1];
    if (v47 == 9)
    {
      v48 = v23;
      v49 = 0;
    }
    else
    {
      MetricsEvent.Click.ActionContext.rawValue.getter(*v46, v47);
      v51 = v50;
      v52 = v23;
      v49 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v51);
    }
    v53 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v49, v53);

    swift_unknownObjectRelease(v49);
    v54 = *(_QWORD *)(a1 + v26[15]);
    v55 = v23;
    if (v54)
    {
      swift_bridgeObjectRetain();
      v56.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v54);
    }
    else
    {
      v56.super.isa = 0;
    }
    v57 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v56.super.isa, v57);

    swift_unknownObjectRelease(v56.super.isa);
    v58 = *(_QWORD *)(a1 + v26[12] + 8);
    v59 = v23;
    if (v58)
    {
      swift_bridgeObjectRetain();
      v60 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v58);
    }
    else
    {
      v60 = 0;
    }
    v61 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v60, v61);

    swift_unknownObjectRelease(v60);
    v62 = *(_QWORD *)(a1 + v26[8]);
    v63 = v23;
    if (v62)
    {
      swift_bridgeObjectRetain();
      sub_100005574((uint64_t *)&unk_100493380);
      v64.super.isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v62);
    }
    else
    {
      v64.super.isa = 0;
    }
    v65 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v64.super.isa, v65);

    swift_unknownObjectRelease(v64.super.isa);
    if (*(_QWORD *)(a1 + v26[17] + 8))
      v66 = String._bridgeToObjectiveC()();
    else
      v66 = 0;
    objc_msgSend(v23, "setSearchTerm:", v66);

    v67 = *(void **)&v4[OBJC_IVAR____TtC9MusicCore26MetricsReportingController_metricsConfiguration];
    v68 = swift_allocObject(&unk_1004472E0, 32, 7);
    *(_QWORD *)(v68 + 16) = v4;
    *(_QWORD *)(v68 + 24) = v23;
    v78 = sub_1000A6ACC;
    v79 = v68;
    aBlock = _NSConcreteStackBlock;
    v75 = 1107296256;
    v76 = sub_1000BED80;
    v77 = &unk_1004472F8;
    v69 = _Block_copy(&aBlock);
    v70 = v79;
    v71 = v67;
    v72 = v4;
    v73 = v23;
    objc_msgSend(v73, "setStandardPropertiesWith:completionHandler:", v71, v69, swift_release(v70).n128_f64[0]);
    _Block_release(v69);

  }
  else
  {
    __break(1u);
  }
}

void MetricsReportingController.recordClickEvent(_:pageContext:sharedListeningContext:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, unint64_t a5, unint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  id v28;
  NSString v29;
  uint64_t v30;
  uint64_t v31;
  NSString v32;
  uint64_t v33;
  uint64_t v34;
  NSString v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  NSString v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  NSArray v46;
  NSString v47;
  uint64_t *v48;
  unint64_t v49;
  id v50;
  NSString v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  NSString v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Class isa;
  uint64_t v62;
  uint64_t inited;
  unint64_t v64;
  Class v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  Class v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  Class v79;
  unint64_t v80;
  unint64_t v81;
  Class v82;
  NSString v83;
  id v84;
  id v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  NSString v90;
  NSString v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  NSString v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  id v102;
  Class v103;
  NSString v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  id v111;
  NSString v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  NSDictionary v117;
  NSString v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  Class v122;
  void *v123;
  void *v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  id v128;
  id v129;
  id v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t (*v135)(char *, uint64_t, uint64_t);
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143[80];
  _QWORD aBlock[5];
  uint64_t v145;

  v138 = a3;
  v132 = a5;
  v133 = a6;
  v9 = sub_100005574(&qword_10048D510);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v131 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v131 - v13;
  v15 = type metadata accessor for DispatchPredicate(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (uint64_t *)((char *)&v131 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = sub_1000087DC(0, (unint64_t *)&qword_100490BC0, OS_dispatch_queue_ptr);
  *v18 = static OS_dispatch_queue.main.getter(v19, v20, v21, v22, v23, v24, v25, v26, v131, v132, v133, v134, v135, v136, v137);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  v27 = _dispatchPreconditionTest(_:)(v18);
  (*(void (**)(_QWORD *, uint64_t))(v16 + 8))(v18, v15);
  if ((v27 & 1) != 0)
  {
    v134 = a2;
    v28 = objc_msgSend(objc_allocWithZone((Class)SSMetricsClickEvent), "init");
    v29 = String._bridgeToObjectiveC()();
    objc_msgSend(v28, "setTargetIdentifier:", v29);

    MetricsEvent.TargetType.rawValue.getter(*(_BYTE *)(a1 + 16));
    v31 = v30;
    v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v31);
    objc_msgSend(v28, "setTargetType:", v32);

    MetricsEvent.Click.ActionType.rawValue.getter(*(_BYTE *)(a1 + 17));
    v34 = v33;
    v35 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v34);
    objc_msgSend(v28, "setActionType:", v35);

    v36 = (int *)type metadata accessor for MetricsEvent.Click(0);
    sub_100014A7C(a1 + v36[7], (uint64_t)v14, &qword_10048D510);
    v37 = type metadata accessor for URL(0);
    v38 = *(_QWORD *)(v37 - 8);
    v135 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
    v39 = v135(v14, 1, v37);
    v136 = v37;
    v131 = v38;
    if (v39 == 1)
    {
      sub_100008758((uint64_t)v14, &qword_10048D510);
      v40 = 0;
    }
    else
    {
      URL.absoluteString.getter();
      v41 = v38;
      v43 = v42;
      (*(void (**)(char *, uint64_t))(v41 + 8))(v14, v37);
      v40 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v43);
    }
    objc_msgSend(v28, "setTargetURL:", v40, v131);

    v44 = *(_QWORD *)(a1 + v36[8]);
    v45 = v28;
    if (v44)
    {
      swift_bridgeObjectRetain();
      sub_100005574((uint64_t *)&unk_100493380);
      v46.super.isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v44);
    }
    else
    {
      v46.super.isa = 0;
    }
    v47 = String._bridgeToObjectiveC()();
    objc_msgSend(v28, "setProperty:forBodyKey:", v46.super.isa, v47);

    swift_unknownObjectRelease(v46.super.isa);
    v48 = (uint64_t *)(a1 + v36[9]);
    v49 = v48[1];
    if (v49 == 9)
    {
      v50 = v28;
      v51 = 0;
    }
    else
    {
      MetricsEvent.Click.ActionContext.rawValue.getter(*v48, v49);
      v53 = v52;
      v54 = v28;
      v51 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v53);
    }
    v55 = String._bridgeToObjectiveC()();
    objc_msgSend(v28, "setProperty:forBodyKey:", v51, v55);

    swift_unknownObjectRelease(v51);
    v56 = a1 + v36[10];
    v57 = *(unsigned __int16 *)(v56 + 24);
    if (v57 >> 8 <= 0xFE
      && (MetricsEvent.Click.ActionDetails.dictionary.getter(*(_QWORD *)v56, *(_QWORD *)(v56 + 8), *(_QWORD *)(v56 + 16), v57), v58))
    {
      aBlock[0] = v58;
      v59 = sub_100005574(&qword_1004904F0);
      v60 = _bridgeAnythingToObjectiveC<A>(_:)(aBlock, v59);
      sub_100008758((uint64_t)aBlock, &qword_1004904F0);
    }
    else
    {
      v60 = 0;
    }
    objc_msgSend(v28, "setActionDetails:", v60);
    swift_unknownObjectRelease(v60);
    isa = *(Class *)(a1 + v36[11]);
    v137 = v12;
    if (isa)
    {
      sub_100005574((uint64_t *)&unk_100490B50);
      isa = Array._bridgeToObjectiveC()().super.isa;
    }
    objc_msgSend(v28, "setImpressions:", isa);
    swift_unknownObjectRelease(isa);
    if (*(_BYTE *)(a1 + v36[18]) == 1)
    {
      v62 = sub_100005574(&qword_1004967B0);
      inited = swift_initStackObject(v62, &v140);
      *(_OWORD *)(inited + 16) = xmmword_100384A80;
      strcpy((char *)(inited + 32), "sharedContent");
      *(_WORD *)(inited + 46) = -4864;
      *(_QWORD *)(inited + 72) = &type metadata for Bool;
      *(_BYTE *)(inited + 48) = 1;
      v64 = sub_100098D5C(inited);
      v65 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v64);
      objc_msgSend(v28, "addPropertiesWithDictionary:", v65);

    }
    v66 = (uint64_t *)(a1 + v36[19]);
    v67 = v66[1];
    if (v67)
    {
      v68 = *v66;
      v69 = sub_100005574(&qword_1004967B0);
      v70 = swift_initStackObject(v69, &v141);
      *(_OWORD *)(v70 + 16) = xmmword_100384A80;
      *(_QWORD *)(v70 + 32) = 0xD000000000000013;
      *(_QWORD *)(v70 + 40) = 0x80000001003AE830;
      *(_QWORD *)(v70 + 72) = &type metadata for String;
      *(_QWORD *)(v70 + 48) = v68;
      *(_QWORD *)(v70 + 56) = v67;
      swift_bridgeObjectRetain();
      v71 = sub_100098D5C(v70);
      v72 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v71);
      objc_msgSend(v28, "addPropertiesWithDictionary:", v72);

    }
    v73 = (uint64_t *)(a1 + v36[17]);
    v74 = v73[1];
    if (v74)
    {
      v75 = *v73;
      v76 = sub_100005574(&qword_1004967B0);
      v77 = swift_initStackObject(v76, &v142);
      *(_OWORD *)(v77 + 16) = xmmword_100384A80;
      *(_QWORD *)(v77 + 32) = 0x6554686372616573;
      *(_QWORD *)(v77 + 40) = 0xEA00000000006D72;
      *(_QWORD *)(v77 + 72) = &type metadata for String;
      *(_QWORD *)(v77 + 48) = v75;
      *(_QWORD *)(v77 + 56) = v74;
      swift_bridgeObjectRetain();
      v78 = sub_100098D5C(v77);
      v79 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v78);
      objc_msgSend(v28, "addPropertiesWithDictionary:", v79);

    }
    if (a4 != 2)
    {
      v80 = sub_1000A6308(a4 & 1, v132, v133);
      if (v80)
      {
        v81 = v80;
        v82 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v81);
        objc_msgSend(v28, "addPropertiesWithDictionary:", v82);

      }
    }
    v83 = (NSString)v138;
    if (v138)
    {
      v84 = v28;
      v83 = String._bridgeToObjectiveC()();
    }
    else
    {
      v85 = v28;
    }
    objc_msgSend(v28, "setPageContext:", v83);

    v86 = (uint64_t *)(a1 + v36[12]);
    v88 = *v86;
    v87 = v86[1];
    if (v87)
    {
      v89 = v28;
      swift_bridgeObjectRetain();
      v90 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v87);
      v91 = String._bridgeToObjectiveC()();
      objc_msgSend(v89, "setProperty:forBodyKey:", v90, v91);

    }
    v92 = (uint64_t *)(a1 + v36[13]);
    v93 = *v92;
    v94 = v92[1];
    if (v94)
    {
      v95 = v28;
      v96 = String._bridgeToObjectiveC()();
      objc_msgSend(v95, "setPageType:", v96);

    }
    v138 = OBJC_IVAR____TtC9MusicCore26MetricsReportingController_metricsConfiguration;
    v97 = *(void **)&v139[OBJC_IVAR____TtC9MusicCore26MetricsReportingController_metricsConfiguration];
    if (v97)
    {
      v98 = sub_100005574(&qword_1004904D8);
      v99 = swift_allocObject(v98, 96, 7);
      *(_OWORD *)(v99 + 16) = xmmword_100384A60;
      v100 = sub_100005574(&qword_10048E9F8);
      *(_QWORD *)(v99 + 32) = v93;
      *(_QWORD *)(v99 + 40) = v94;
      *(_QWORD *)(v99 + 88) = v100;
      *(_QWORD *)(v99 + 56) = v100;
      *(_QWORD *)(v99 + 64) = v88;
      *(_QWORD *)(v99 + 72) = v87;
      swift_bridgeObjectRetain();
      v101 = v28;
      swift_bridgeObjectRetain();
      v102 = v97;
      v103 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v99);
      v104 = objc_msgSend(v102, "compoundStringWithElements:", v103);

      if (v104)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
        v106 = v105;

        v104 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v106);
      }
    }
    else
    {
      v107 = v28;
      v104 = 0;
    }
    v109 = v136;
    v108 = (uint64_t)v137;
    objc_msgSend(v28, "setPageDescription:", v104);

    sub_100014A7C(a1 + v36[14], v108, &qword_10048D510);
    v110 = v135((char *)v108, 1, v109);
    v111 = v28;
    if (v110 == 1)
    {
      sub_100008758(v108, &qword_10048D510);
      v112 = 0;
    }
    else
    {
      URL.absoluteString.getter();
      v114 = v113;
      (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v108, v109);
      v112 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v114);
    }
    objc_msgSend(v111, "setPageURL:", v112);

    v115 = *(_QWORD *)(a1 + v36[15]);
    v116 = v111;
    if (v115)
    {
      swift_bridgeObjectRetain();
      v117.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v115);
    }
    else
    {
      v117.super.isa = 0;
    }
    v118 = String._bridgeToObjectiveC()();
    objc_msgSend(v111, "setProperty:forBodyKey:", v117.super.isa, v118);

    swift_unknownObjectRelease(v117.super.isa);
    if ((*(_BYTE *)(a1 + v36[16]) & 1) == 0)
    {
      v119 = sub_100005574(&qword_1004967B0);
      v120 = swift_initStackObject(v119, v143);
      *(_OWORD *)(v120 + 16) = xmmword_100384A80;
      *(_QWORD *)(v120 + 32) = 0x7073694465676170;
      *(_QWORD *)(v120 + 40) = 0xEF6570795479616CLL;
      *(_QWORD *)(v120 + 72) = &type metadata for String;
      *(_QWORD *)(v120 + 48) = 0x7765695664726163;
      *(_QWORD *)(v120 + 56) = 0xE800000000000000;
      v121 = sub_100098D5C(v120);
      v122 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v121);
      objc_msgSend(v111, "addPropertiesWithDictionary:", v122);

    }
    v123 = v139;
    v124 = *(void **)&v139[v138];
    v125 = swift_allocObject(&unk_100447330, 32, 7);
    *(_QWORD *)(v125 + 16) = v123;
    *(_QWORD *)(v125 + 24) = v111;
    aBlock[4] = sub_1000A6AF4;
    v145 = v125;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000BED80;
    aBlock[3] = &unk_100447348;
    v126 = _Block_copy(aBlock);
    v127 = v145;
    v128 = v124;
    v129 = v123;
    v130 = v111;
    objc_msgSend(v130, "setStandardPropertiesWith:completionHandler:", v128, v126, swift_release(v127).n128_f64[0]);
    _Block_release(v126);

  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall MetricsReportingController.recordLoadUrlEvent(_:)(MusicCore::MetricsEvent::LoadUrl *a1)
{
  char *v1;
  id v3;
  _BOOL8 cachedResponse;
  id v5;
  id v6;
  NSString v7;
  NSString v8;
  NSString v9;
  NSString v10;
  NSString v11;
  NSString v12;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v15;
  uint64_t inited;
  unint64_t v17;
  Class isa;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  char *v25;
  uint64_t v26;
  _QWORD aBlock[5];
  uint64_t v28;
  _BYTE v29[16];
  _BYTE v30[16];
  _BYTE v31[16];
  _BYTE v32[16];
  _BYTE v33[16];
  _BYTE v34[16];
  _BYTE v35[16];
  _BYTE v36[16];
  _BYTE v37[16];
  _BYTE v38[16];
  _BYTE v39[16];
  _BYTE v40[16];
  _BYTE v41[16];
  _BYTE v42[16];
  _BYTE v43[16];
  _BYTE v44[16];
  double v45;
  char v46;
  double v47;
  char v48;
  double v49;
  char v50;
  double v51;
  char v52;
  double v53;
  char v54;
  double v55;
  char v56;
  double v57;
  char v58;
  double v59;
  char v60;
  double v61;
  char v62;
  _QWORD v63[2];
  uint64_t v64;
  char v65;
  _QWORD v66[2];
  _QWORD v67[2];
  _QWORD v68[2];
  _QWORD v69[2];
  _QWORD v70[2];

  v3 = objc_msgSend(objc_allocWithZone((Class)SSMetricsLoadURLEvent), "init");
  cachedResponse = a1->cachedResponse;
  objc_msgSend(v3, "setCachedResponse:", cachedResponse);
  v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v6 = objc_msgSend(v5, "bundleIdentifier");

  objc_msgSend(v3, "setOriginalApp:", v6);
  sub_1000149A8((uint64_t)a1, (uint64_t)v44, &qword_1004904F8);
  sub_1000149A8((uint64_t)v44, (uint64_t)&v45, &qword_1004904F8);
  if ((v46 & 1) == 0)
    objc_msgSend(v3, "setDomainLookupStartTime:", v45);
  sub_1000149A8((uint64_t)&a1->domainLookupEndTime, (uint64_t)v43, &qword_1004904F8);
  sub_1000149A8((uint64_t)v43, (uint64_t)&v47, &qword_1004904F8);
  if ((v48 & 1) == 0)
    objc_msgSend(v3, "setDomainLookupEndTime:", v47);
  sub_1000149A8((uint64_t)&a1->connectionStartTime, (uint64_t)v42, &qword_1004904F8);
  sub_1000149A8((uint64_t)v42, (uint64_t)&v49, &qword_1004904F8);
  if ((v50 & 1) == 0)
    objc_msgSend(v3, "setConnectionStartTime:", v49);
  sub_1000149A8((uint64_t)&a1->secureConnectionStartTime, (uint64_t)v41, &qword_1004904F8);
  sub_1000149A8((uint64_t)v41, (uint64_t)&v51, &qword_1004904F8);
  if ((v52 & 1) == 0)
    objc_msgSend(v3, "setSecureConnectionStartTime:", v51);
  sub_1000149A8((uint64_t)&a1->connectionEndTime, (uint64_t)v40, &qword_1004904F8);
  sub_1000149A8((uint64_t)v40, (uint64_t)&v53, &qword_1004904F8);
  if ((v54 & 1) == 0)
    objc_msgSend(v3, "setConnectionEndTime:", v53);
  sub_1000149A8((uint64_t)&a1->requestStartTime, (uint64_t)v39, &qword_1004904F8);
  sub_1000149A8((uint64_t)v39, (uint64_t)&v55, &qword_1004904F8);
  if ((v56 & 1) == 0)
    objc_msgSend(v3, "setRequestStartTime:", v55);
  sub_1000149A8((uint64_t)&a1->responseStartTime, (uint64_t)v38, &qword_1004904F8);
  sub_1000149A8((uint64_t)v38, (uint64_t)&v57, &qword_1004904F8);
  if ((v58 & 1) == 0)
    objc_msgSend(v3, "setResponseStartTime:", v57);
  sub_1000149A8((uint64_t)&a1->responseEndTime, (uint64_t)v37, &qword_1004904F8);
  sub_1000149A8((uint64_t)v37, (uint64_t)&v59, &qword_1004904F8);
  if ((v60 & 1) == 0)
    objc_msgSend(v3, "setResponseEndTime:", v59);
  sub_1000149A8((uint64_t)&a1->fetchStartTime, (uint64_t)v36, &qword_1004904F8);
  sub_1000149A8((uint64_t)v36, (uint64_t)&v61, &qword_1004904F8);
  if ((v62 & 1) == 0)
    objc_msgSend(v3, "setFetchStartTime:", v61);
  sub_1000149A8((uint64_t)&a1->requestUrl, (uint64_t)v35, &qword_10048E9F8);
  sub_1000149A8((uint64_t)v35, (uint64_t)v63, &qword_10048E9F8);
  if (v63[1])
  {
    v7 = String._bridgeToObjectiveC()();
    objc_msgSend(v3, "setRequestURL:", v7);

  }
  sub_1000149A8((uint64_t)&a1->redirectCount, (uint64_t)v34, &qword_100490500);
  sub_1000149A8((uint64_t)v34, (uint64_t)&v64, &qword_100490500);
  if ((v65 & 1) == 0)
  {
    if (v64 < 0)
      goto LABEL_41;
    objc_msgSend(v3, "setRedirectCount:");
  }
  sub_1000149A8((uint64_t)&a1->appleTimingApp, (uint64_t)v33, &qword_10048E9F8);
  sub_1000149A8((uint64_t)v33, (uint64_t)v66, &qword_10048E9F8);
  if (v66[1])
  {
    v8 = String._bridgeToObjectiveC()();
    objc_msgSend(v3, "setAppleTimingApp:", v8);

  }
  sub_1000149A8((uint64_t)&a1->connectionType, (uint64_t)v32, &qword_10048E9F8);
  sub_1000149A8((uint64_t)v32, (uint64_t)v67, &qword_10048E9F8);
  if (v67[1])
  {
    v9 = String._bridgeToObjectiveC()();
    objc_msgSend(v3, "setConnectionType:", v9);

  }
  sub_1000149A8((uint64_t)&a1->edgeNodeCacheStatus, (uint64_t)v31, &qword_10048E9F8);
  sub_1000149A8((uint64_t)v31, (uint64_t)v68, &qword_10048E9F8);
  if (v68[1])
  {
    v10 = String._bridgeToObjectiveC()();
    objc_msgSend(v3, "setEdgeNodeCacheStatus:", v10);

  }
  sub_1000149A8((uint64_t)&a1->responseDate, (uint64_t)v30, &qword_10048E9F8);
  sub_1000149A8((uint64_t)v30, (uint64_t)v69, &qword_10048E9F8);
  if (v69[1])
  {
    v11 = String._bridgeToObjectiveC()();
    objc_msgSend(v3, "setResponseDate:", v11);

  }
  sub_1000149A8((uint64_t)&a1->resolvedIPAddress, (uint64_t)v29, &qword_10048E9F8);
  sub_1000149A8((uint64_t)v29, (uint64_t)v70, &qword_10048E9F8);
  if (v70[1])
  {
    v12 = String._bridgeToObjectiveC()();
    objc_msgSend(v3, "setResolvedIPAddress:", v12);

  }
  object = a1->environmentDataCenter.value._object;
  if (object)
  {
    countAndFlagsBits = a1->environmentDataCenter.value._countAndFlagsBits;
    v15 = sub_100005574(&qword_1004967B0);
    inited = swift_initStackObject(v15, &v26);
    *(_OWORD *)(inited + 16) = xmmword_100384A80;
    *(_QWORD *)(inited + 32) = 0xD000000000000015;
    *(_QWORD *)(inited + 40) = 0x80000001003AE850;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = countAndFlagsBits;
    *(_QWORD *)(inited + 56) = object;
    swift_bridgeObjectRetain();
    v17 = sub_100098D5C(inited);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v17);
    objc_msgSend(v3, "addPropertiesWithDictionary:", isa);

  }
  objc_msgSend(v3, "setCachedResponse:", cachedResponse);
  objc_msgSend(v3, "setConnectionReused:", a1->connectionReused);
  objc_msgSend(v3, "setStatusCode:", a1->statusCode);
  if (a1->requestMessageSize < 0)
  {
    __break(1u);
  }
  else
  {
    objc_msgSend(v3, "setRequestMessageSize:");
    if ((a1->responseMessageSize & 0x8000000000000000) == 0)
    {
      objc_msgSend(v3, "setResponseMessageSize:");
      v19 = *(void **)&v1[OBJC_IVAR____TtC9MusicCore26MetricsReportingController_metricsConfiguration];
      v20 = swift_allocObject(&unk_100447380, 32, 7);
      *(_QWORD *)(v20 + 16) = v3;
      *(_QWORD *)(v20 + 24) = v1;
      aBlock[4] = sub_1000A6B1C;
      v28 = v20;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000BED80;
      aBlock[3] = &unk_100447398;
      v21 = _Block_copy(aBlock);
      v22 = v28;
      v23 = v19;
      v24 = v3;
      v25 = v1;
      objc_msgSend(v24, "setStandardPropertiesWith:completionHandler:", v23, v21, swift_release(v22).n128_f64[0]);
      _Block_release(v21);

      return;
    }
  }
  __break(1u);
LABEL_41:
  __break(1u);
}

void sub_1000A2124(void *a1)
{
  if (sub_1000AAF7C())
    sub_1000A4EA8(a1, (uint64_t)CFRange.init(_:), 0);
}

void MetricsReportingController.recordComponentRenderEvent(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  id v15;
  uint64_t v16;
  NSString v17;
  NSString v18;
  NSString v19;
  uint64_t v20;
  uint64_t v21;
  NSString v22;
  id v23;
  NSString v24;
  id v25;
  NSString v26;
  id v27;
  NSString v28;
  id v29;
  NSString v30;
  id v31;
  NSString v32;
  id v33;
  NSString v34;
  _QWORD v35[7];
  char v36;
  char v37;
  unsigned __int8 v38;
  char v39;

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (_QWORD *)((char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_1000087DC(0, (unint64_t *)&qword_100490BC0, OS_dispatch_queue_ptr);
  *v5 = static OS_dispatch_queue.main.getter(v6, v7, v8, v9, v10, v11, v12, v13, v35[0], v35[1], v35[2], v35[3], v35[4], v35[5], v35[6]);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v14 = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v14 & 1) != 0)
  {
    v15 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for Music_SSMetricsComponentRenderEvent()), "init");
    v16 = *(_QWORD *)(a1 + 8);
    if (v16)
    {
      swift_bridgeObjectRetain();
      v17 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v16);
    }
    else
    {
      v17 = 0;
    }
    v18 = String._bridgeToObjectiveC()();
    objc_msgSend(v15, "setProperty:forBodyKey:", v17, v18);
    swift_unknownObjectRelease(v17);

    sub_1000149A8(a1 + 16, (uint64_t)&v37, &qword_100490508);
    sub_1000149A8((uint64_t)&v37, (uint64_t)&v38, &qword_100490508);
    if (v38 == 24)
    {
      v19 = 0;
    }
    else
    {
      MetricsEvent.TargetType.rawValue.getter(v38);
      v21 = v20;
      v19 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v21);
    }
    v22 = String._bridgeToObjectiveC()();
    objc_msgSend(v15, "setProperty:forBodyKey:", v19, v22);
    swift_unknownObjectRelease(v19);

    v23 = *(id *)(a1 + 24);
    v24 = String._bridgeToObjectiveC()();
    objc_msgSend(v15, "setProperty:forBodyKey:", v23, v24);

    v25 = *(id *)(a1 + 32);
    v26 = String._bridgeToObjectiveC()();
    objc_msgSend(v15, "setProperty:forBodyKey:", v25, v26);

    v27 = *(id *)(a1 + 40);
    v28 = String._bridgeToObjectiveC()();
    objc_msgSend(v15, "setProperty:forBodyKey:", v27, v28);

    v29 = *(id *)(a1 + 48);
    v30 = String._bridgeToObjectiveC()();
    objc_msgSend(v15, "setProperty:forBodyKey:", v29, v30);

    v31 = *(id *)(a1 + 56);
    v32 = String._bridgeToObjectiveC()();
    objc_msgSend(v15, "setProperty:forBodyKey:", v31, v32);

    v33 = *(id *)(a1 + 64);
    v34 = String._bridgeToObjectiveC()();
    objc_msgSend(v15, "setProperty:forBodyKey:", v33, v34);

    sub_1000149A8(a1 + 72, (uint64_t)&v36, &qword_100490510);
    sub_1000149A8((uint64_t)&v36, (uint64_t)&v39, &qword_100490510);
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x1000A26D4);
}

void MetricsReportingController.recordPageRenderEvent<A>(_:pageContext:)(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  char *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  id v23;
  void *v24;
  char v25;
  id v26;
  uint64_t v27;
  double v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  NSString v33;
  uint64_t v34;
  id v35;
  id v36;
  NSString v37;
  uint64_t v38;
  id v39;
  id v40;
  NSString v41;
  uint64_t v42;
  id v43;
  id v44;
  NSString v45;
  uint64_t v46;
  id v47;
  id v48;
  NSString v49;
  uint64_t v50;
  id v51;
  id v52;
  NSString v53;
  uint64_t v54;
  id v55;
  id v56;
  NSString v57;
  double v58;
  id v59;
  id v60;
  uint64_t v61;
  NSString v62;
  double v63;
  id v64;
  id v65;
  uint64_t v66;
  NSString v67;
  NSString v68;
  double v69;
  id v70;
  id v71;
  uint64_t v72;
  NSString v73;
  unsigned __int8 v74;
  NSString v75;
  uint64_t v76;
  NSString v77;
  id *v78;
  id v79;
  uint64_t v80;
  NSString v81;
  id v82;
  uint64_t v83;
  NSString v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  id v92;
  NSString v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  NSString v98;
  uint64_t v99;
  NSString v100;
  void *v101;
  void *v102;
  uint64_t v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  void *v113;
  char *v114;
  uint64_t v115;
  id v116;
  _QWORD v117[3];
  _QWORD v118[3];
  _QWORD v119[3];
  _QWORD v120[3];
  _QWORD v121[3];
  _QWORD v122[3];
  char v123[24];
  char v124[32];

  v4 = v3;
  v111 = a2;
  v7 = sub_100005574(&qword_10048D510);
  __chkstk_darwin(v7);
  v9 = (char *)&v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v110 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = sub_1000087DC(0, (unint64_t *)&qword_100490BC0, OS_dispatch_queue_ptr);
  *v13 = static OS_dispatch_queue.main.getter(v14, v15, v16, v17, v18, v19, v20, v21, v110, v111, v112, v113, v114, v115, v116);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  v22 = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v22 & 1) != 0)
  {
    v112 = v9;
    v114 = v4;
    v23 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for Music_SSMetricsPageRenderEvent()), "init");
    swift_beginAccess(a1 + 16, v124, 0, 0);
    v24 = *(void **)(a1 + 16);
    swift_beginAccess(a1 + 24, v123, 0, 0);
    v25 = *(_BYTE *)(a1 + 32);
    v113 = a3;
    if ((v25 & 1) != 0)
    {
      v26 = v24;
      v27 = 0;
    }
    else
    {
      v28 = *(double *)(a1 + 24);
      v29 = (void *)objc_opt_self(AMSMetrics);
      v30 = v24;
      v31 = objc_msgSend(v29, "serverTimeFromTimeInterval:", v28);
      v32 = objc_msgSend(v31, "unsignedLongLongValue");

      v122[0] = v32;
      v27 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v122, &type metadata for UInt64);
    }
    v33 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v27, v33);
    swift_unknownObjectRelease(v27);

    swift_beginAccess(a1 + 40, v122, 0, 0);
    v34 = 0;
    if ((*(_BYTE *)(a1 + 48) & 1) == 0)
    {
      v35 = objc_msgSend((id)objc_opt_self(AMSMetrics), "serverTimeFromTimeInterval:", *(double *)(a1 + 40));
      v36 = objc_msgSend(v35, "unsignedLongLongValue");

      v121[0] = v36;
      v34 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v121, &type metadata for UInt64);
    }
    v37 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v34, v37);
    swift_unknownObjectRelease(v34);

    swift_beginAccess(a1 + 56, v121, 0, 0);
    v38 = 0;
    if ((*(_BYTE *)(a1 + 64) & 1) == 0)
    {
      v39 = objc_msgSend((id)objc_opt_self(AMSMetrics), "serverTimeFromTimeInterval:", *(double *)(a1 + 56));
      v40 = objc_msgSend(v39, "unsignedLongLongValue");

      v120[0] = v40;
      v38 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v120, &type metadata for UInt64);
    }
    v41 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v38, v41);
    swift_unknownObjectRelease(v38);

    swift_beginAccess(a1 + 72, v120, 0, 0);
    v42 = 0;
    if ((*(_BYTE *)(a1 + 80) & 1) == 0)
    {
      v43 = objc_msgSend((id)objc_opt_self(AMSMetrics), "serverTimeFromTimeInterval:", *(double *)(a1 + 72));
      v44 = objc_msgSend(v43, "unsignedLongLongValue");

      v119[0] = v44;
      v42 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v119, &type metadata for UInt64);
    }
    v45 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v42, v45);
    swift_unknownObjectRelease(v42);

    swift_beginAccess(a1 + 88, v119, 0, 0);
    v46 = 0;
    if ((*(_BYTE *)(a1 + 96) & 1) == 0)
    {
      v47 = objc_msgSend((id)objc_opt_self(AMSMetrics), "serverTimeFromTimeInterval:", *(double *)(a1 + 88));
      v48 = objc_msgSend(v47, "unsignedLongLongValue");

      v118[0] = v48;
      v46 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v118, &type metadata for UInt64);
    }
    v49 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v46, v49);
    swift_unknownObjectRelease(v46);

    swift_beginAccess(a1 + 104, v118, 0, 0);
    v50 = 0;
    if ((*(_BYTE *)(a1 + 112) & 1) == 0)
    {
      v51 = objc_msgSend((id)objc_opt_self(AMSMetrics), "serverTimeFromTimeInterval:", *(double *)(a1 + 104));
      v52 = objc_msgSend(v51, "unsignedLongLongValue");

      v117[0] = v52;
      v50 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v117, &type metadata for UInt64);
    }
    v53 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v50, v53);
    swift_unknownObjectRelease(v50);

    swift_beginAccess(a1 + 120, v117, 0, 0);
    v54 = 0;
    if ((*(_BYTE *)(a1 + 128) & 1) == 0)
    {
      v55 = objc_msgSend((id)objc_opt_self(AMSMetrics), "serverTimeFromTimeInterval:", *(double *)(a1 + 120));
      v56 = objc_msgSend(v55, "unsignedLongLongValue");

      v115 = (uint64_t)v56;
      v54 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v115, &type metadata for UInt64);
    }
    v57 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v54, v57);
    swift_unknownObjectRelease(v54);

    if (v24)
    {
      objc_msgSend(v24, "requestStartTime");
      v59 = objc_msgSend((id)objc_opt_self(AMSMetrics), "serverTimeFromTimeInterval:", v58);
      v60 = objc_msgSend(v59, "unsignedLongLongValue");

      v115 = (uint64_t)v60;
      v61 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v115, &type metadata for UInt64);
      v62 = String._bridgeToObjectiveC()();
      objc_msgSend(v23, "setProperty:forBodyKey:", v61, v62);
      swift_unknownObjectRelease(v61);

      objc_msgSend(v24, "responseStartTime");
      v64 = objc_msgSend((id)objc_opt_self(AMSMetrics), "serverTimeFromTimeInterval:", v63);
      v65 = objc_msgSend(v64, "unsignedLongLongValue");

      v115 = (uint64_t)v65;
      v66 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v115, &type metadata for UInt64);
    }
    else
    {
      v67 = String._bridgeToObjectiveC()();
      objc_msgSend(v23, "setProperty:forBodyKey:", 0, v67);

      v66 = 0;
    }
    v68 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v66, v68);
    swift_unknownObjectRelease(v66);

    if (v24)
    {
      objc_msgSend(v24, "responseEndTime");
      v70 = objc_msgSend((id)objc_opt_self(AMSMetrics), "serverTimeFromTimeInterval:", v69);
      v71 = objc_msgSend(v70, "unsignedLongLongValue");

      v115 = (uint64_t)v71;
      v72 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v115, &type metadata for UInt64);
      v73 = String._bridgeToObjectiveC()();
      objc_msgSend(v23, "setProperty:forBodyKey:", v72, v73);
      swift_unknownObjectRelease(v72);

      v74 = objc_msgSend(v24, "cachedResponse");
    }
    else
    {
      v75 = String._bridgeToObjectiveC()();
      objc_msgSend(v23, "setProperty:forBodyKey:", 0, v75);

      v74 = 0;
    }
    LOBYTE(v115) = v74;
    v76 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v115, &type metadata for Bool);
    v77 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v76, v77);
    swift_unknownObjectRelease(v76);

    v78 = (id *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 160));
    v79 = v78[1];
    v115 = (uint64_t)*v78;
    v116 = v79;
    swift_bridgeObjectRetain_n(v79, 2);
    v80 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v115, &type metadata for String);
    v81 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v80, v81);
    swift_bridgeObjectRelease(v79);
    swift_unknownObjectRelease(v80);

    v82 = v78[3];
    v115 = (uint64_t)v78[2];
    v116 = v82;
    swift_bridgeObjectRetain_n(v82, 2);
    v83 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v115, &type metadata for String);
    v84 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v83, v84);
    swift_bridgeObjectRelease(v82);
    swift_unknownObjectRelease(v83);

    v85 = type metadata accessor for MetricsPageProperties(0);
    v86 = (uint64_t)v112;
    sub_100014A7C((uint64_t)v78 + *(int *)(v85 + 24), (uint64_t)v112, &qword_10048D510);
    v87 = type metadata accessor for URL(0);
    v88 = *(_QWORD *)(v87 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(v86, 1, v87) == 1)
    {
      sub_100008758(v86, &qword_10048D510);
      v89 = 0;
      v90 = 0;
    }
    else
    {
      v91 = URL.absoluteString.getter();
      v90 = v92;
      (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v86, v87);
      v115 = v91;
      v116 = v90;
      swift_bridgeObjectRetain();
      v89 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v115, &type metadata for String);
    }
    v93 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v89, v93);
    swift_bridgeObjectRelease(v90);
    swift_unknownObjectRelease(v89);

    v94 = *(uint64_t *)((char *)v78 + *(int *)(v85 + 28));
    if (v94)
    {
      v115 = *(uint64_t *)((char *)v78 + *(int *)(v85 + 28));
      swift_bridgeObjectRetain_n(v94, 2);
      v95 = sub_100005574(&qword_1004904F0);
      v96 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v115, v95);
    }
    else
    {
      v96 = 0;
    }
    v97 = v113;
    v98 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v96, v98);
    swift_bridgeObjectRelease(v94);
    swift_unknownObjectRelease(v96);

    if (v97)
    {
      v115 = v111;
      v116 = v97;
      swift_bridgeObjectRetain_n(v97, 2);
      v99 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v115, &type metadata for String);
    }
    else
    {
      v99 = 0;
    }
    v100 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v99, v100);
    swift_bridgeObjectRelease(v97);
    swift_unknownObjectRelease(v99);

    v101 = v114;
    v102 = *(void **)&v114[OBJC_IVAR____TtC9MusicCore26MetricsReportingController_metricsConfiguration];
    v103 = swift_allocObject(&unk_100447420, 32, 7);
    *(_QWORD *)(v103 + 16) = v101;
    *(_QWORD *)(v103 + 24) = v23;
    v104 = v102;
    v105 = v23;
    v106 = v104;
    v107 = v105;
    swift_retain(v103);
    v108 = v101;
    v109 = v107;
    sub_1000ADB00(v102, v109, v109, (uint64_t)v102, (uint64_t)sub_1000A6B6C, v103);

    swift_release_n(v103, 2);
  }
  else
  {
    __break(1u);
  }
}

void sub_1000A343C(uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(void *))
{
  if ((a4(a2) & 1) != 0)
    sub_1000A4EA8(a2, (uint64_t)CFRange.init(_:), 0);
}

void MetricsReportingController.recordCustomEvent(with:properties:sharedListeningContext:shouldSuppressUserInfo:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, unint64_t a5, unint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  id v25;
  NSString v26;
  Class isa;
  unint64_t v28;
  unint64_t v29;
  Class v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v33 = a6;
  v32 = a5;
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (uint64_t *)((char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = sub_1000087DC(0, (unint64_t *)&qword_100490BC0, OS_dispatch_queue_ptr);
  *v15 = static OS_dispatch_queue.main.getter(v16, v17, v18, v19, v20, v21, v22, v23, v31, v32, v33, v34, v35, v36, v37);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  v24 = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
  if ((v24 & 1) != 0)
  {
    v25 = objc_msgSend(objc_allocWithZone((Class)SSMetricsCustomEvent), "init");
    v26 = String._bridgeToObjectiveC()();
    objc_msgSend(v25, "setTopic:", v26);

    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v25, "addPropertiesWithDictionary:", isa);

    objc_msgSend(v25, "setShouldSuppressUserInfo:", a7 & 1);
    objc_msgSend(v25, "setShouldSuppressDSIDHeader:", a7 & 1);
    if (a4 != 2)
    {
      v28 = sub_1000A6308(a4 & 1, v32, v33);
      if (v28)
      {
        v29 = v28;
        v30 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v29);
        objc_msgSend(v25, "addPropertiesWithDictionary:", v30);

      }
    }
    sub_1000A4EA8(v25, a8, a9);

  }
  else
  {
    __break(1u);
  }
}

void MetricsReportingController.recordCarPlayCustomEvent(with:properties:shouldSuppressUserInfo:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  id v25;
  void *v26;
  Class isa;
  uint64_t v28;
  uint64_t inited;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  Class v35;
  void *v36;
  void *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  _QWORD *v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  void **aBlock;
  uint64_t v53;
  uint64_t (*v54)(uint64_t);
  void *v55;
  void (*v56)();
  _QWORD *v57;
  char v58[88];

  v50 = a2;
  v48 = a1;
  v49 = a5;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (uint64_t *)((char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = sub_1000087DC(0, (unint64_t *)&qword_100490BC0, OS_dispatch_queue_ptr);
  *v15 = static OS_dispatch_queue.main.getter(v16, v17, v18, v19, v20, v21, v22, v23, v47, v48, v49, v50, v51, aBlock, v53);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  v24 = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
  if ((v24 & 1) != 0)
  {
    v25 = objc_msgSend(objc_allocWithZone((Class)SSMetricsCustomEvent), "init");
    v47 = a6;
    v26 = v25;
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v26, "addPropertiesWithDictionary:", isa);

    objc_msgSend(v26, "setShouldSuppressUserInfo:", a4 & 1);
    objc_msgSend(v26, "setShouldSuppressDSIDHeader:", a4 & 1);
    v28 = sub_100005574(&qword_1004967B0);
    inited = swift_initStackObject(v28, v58);
    *(_OWORD *)(inited + 16) = xmmword_100384A80;
    strcpy((char *)(inited + 32), "clientEventId");
    *(_WORD *)(inited + 46) = -4864;
    v30 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
    v31 = UUID.uuidString.getter(v30);
    v33 = v32;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = v31;
    *(_QWORD *)(inited + 56) = v33;
    v34 = sub_100098D5C(inited);
    v35 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v34);
    objc_msgSend(v26, "addPropertiesWithDictionary:", v35);

    v36 = v51;
    v37 = *(void **)&v51[OBJC_IVAR____TtC9MusicCore26MetricsReportingController_metricsConfiguration];
    v38 = (_QWORD *)swift_allocObject(&unk_100447448, 64, 7);
    v40 = v47;
    v39 = v48;
    v38[2] = v26;
    v38[3] = v39;
    v41 = v49;
    v38[4] = v50;
    v38[5] = v36;
    v38[6] = v41;
    v38[7] = v40;
    v56 = sub_1000A6CCC;
    v57 = v38;
    aBlock = _NSConcreteStackBlock;
    v53 = 1107296256;
    v54 = sub_1000BED80;
    v55 = &unk_100447460;
    v42 = _Block_copy(&aBlock);
    v43 = v57;
    v44 = v37;
    v45 = v26;
    swift_bridgeObjectRetain();
    v46 = v36;
    swift_retain(v40);
    objc_msgSend(v45, "setStandardPropertiesWith:completionHandler:", v44, v42, swift_release(v43).n128_f64[0]);
    _Block_release(v42);

  }
  else
  {
    __break(1u);
  }
}

void sub_1000A3A04(void *a1, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSString v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23[5];
  uint64_t v24;

  v12 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setTopic:", v12);

  if (qword_10048C5A0 != -1)
    swift_once(&qword_10048C5A0, sub_100097C2C);
  v14 = type metadata accessor for Logger(0, v13);
  sub_1000086B4(v14, (uint64_t)static Logger.carMetrics);
  v15 = swift_bridgeObjectRetain_n(a3, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    v23[0] = v19;
    *(_DWORD *)v18 = 136446210;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v18 + 4) = sub_100019400(a2, a3, v23);
    swift_bridgeObjectRelease_n(a3, 3);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Inserting carPlay custom event with topic=%{public}s in metrics controller", (uint8_t *)v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
  }
  v20 = *(void **)(a4 + OBJC_IVAR____TtC9MusicCore26MetricsReportingController_carFocusedMetricsController);
  v23[4] = a5;
  v24 = a6;
  v23[0] = (uint64_t)_NSConcreteStackBlock;
  v23[1] = 1107296256;
  v23[2] = (uint64_t)sub_1000F7EF4;
  v23[3] = (uint64_t)&unk_100447AC0;
  v21 = _Block_copy(v23);
  v22 = v24;
  swift_retain(a6);
  objc_msgSend(v20, "insertEvent:withCompletionHandler:", a1, v21, swift_release(v22).n128_f64[0]);
  _Block_release(v21);
}

Swift::Void __swiftcall MetricsReportingController.reportEventForLocalEvaluation(with:)(Swift::OpaquePointer with)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  id v14;
  Class isa;
  _QWORD var30[7];

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (_QWORD *)((char *)var30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_1000087DC(0, (unint64_t *)&qword_100490BC0, OS_dispatch_queue_ptr);
  *v4 = static OS_dispatch_queue.main.getter(v5, v6, v7, v8, v9, v10, v11, v12, var30[0], var30[1], var30[2], var30[3], var30[4], var30[5], var30[6]);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v13 = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v13 & 1) != 0)
  {
    v14 = objc_msgSend(objc_allocWithZone((Class)SSMetricsCustomEvent), "init");
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v14, "addPropertiesWithDictionary:", isa);

  }
  else
  {
    __break(1u);
  }
}

uint64_t MetricsReportingController.flushUnreportedEvents()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 120) = v0;
  return swift_task_switch(sub_1000A3D7C, 0, 0);
}

uint64_t sub_1000A3D7C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;

  if (qword_10048C650 != -1)
    swift_once(&qword_10048C650, sub_1000B09C4);
  v3 = type metadata accessor for Logger(0, a2);
  v4 = sub_1000086B4(v3, (uint64_t)qword_1004A1FC0);
  v2[16] = v4;
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[MetricsReportingController] Attempting to flush unreported events", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  v8 = v2 + 2;
  v9 = v2[15];

  v10 = *(void **)(v9 + OBJC_IVAR____TtC9MusicCore26MetricsReportingController_metricsController);
  v2[2] = v2;
  v2[3] = sub_1000A3ECC;
  v11 = swift_continuation_init(v2 + 2, 1);
  v2[10] = _NSConcreteStackBlock;
  v12 = v2 + 10;
  v12[1] = 0x40000000;
  v12[2] = sub_1000A40C0;
  v12[3] = &unk_100447488;
  v12[4] = v11;
  objc_msgSend(v10, "flushUnreportedEventsWithCompletionHandler:", v12);
  return swift_continuation_await(v8);
}

uint64_t sub_1000A3ECC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 136) = v1;
  if (v1)
    v2 = sub_1000A3F34;
  else
    v2 = sub_1000A3F2C;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000A3F2C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A3F34(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v2 = *(_QWORD *)(v1 + 136);
  swift_willThrow(a1);
  swift_errorRetain(v2);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v1 + 136);
    v7 = swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v15 = v8;
    *(_DWORD *)v7 = 136446210;
    *(_QWORD *)(v1 + 80) = v6;
    swift_errorRetain(v6);
    v9 = sub_100005574((uint64_t *)&unk_1004911F0);
    v10 = (char *)String.init<A>(describing:)(v1 + 80, v9);
    v12 = v11;
    *(_QWORD *)(v7 + 4) = sub_100019400(v10, v11, &v15);
    swift_bridgeObjectRelease(v12);
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[MetricsReportingController] Failed to flush unreported events with error=%{public}s", (uint8_t *)v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v6);
  }
  else
  {
    v13 = *(_QWORD *)(v1 + 136);
    swift_errorRelease(v13);
    swift_errorRelease(v13);
    swift_errorRelease(v13);

  }
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_1000A40C0(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (a2)
  {
    v4 = sub_100005574((uint64_t *)&unk_1004911F0);
    v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0, 0);
    *v6 = a2;
    v7 = a2;
    swift_continuation_throwingResumeWithError(v2, v5);
  }
  else
  {
    swift_continuation_throwingResume(*(_QWORD *)(a1 + 32));
  }
}

uint64_t sub_1000A4134()
{
  uint64_t v0;
  void *v1;
  id v2;
  NSString v3;
  id v4;
  _OWORD v6[2];
  __int128 v7;
  __int128 v8;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC9MusicCore26MetricsReportingController_metricsConfiguration);
  if (!v1)
  {
    v7 = 0u;
    v8 = 0u;
LABEL_11:
    sub_100008758((uint64_t)&v7, &qword_100491B90);
    return 0;
  }
  v2 = v1;
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "valueForConfigurationKey:", v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v4);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_1000149A8((uint64_t)v6, (uint64_t)&v7, &qword_100491B90);
  if (!*((_QWORD *)&v8 + 1))
    goto LABEL_11;
  if (swift_dynamicCast(v6, &v7, (char *)&type metadata for Any + 8, &type metadata for Double, 6))
    return *(_QWORD *)&v6[0];
  else
    return 0;
}

char *sub_1000A4264()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSString *v27;
  uint64_t v28;
  uint64_t v29;
  objc_super v31;

  v1 = OBJC_IVAR____TtC9MusicCore26MetricsReportingController_componentRenderEventSampler;
  v2 = sub_100005574(&qword_10048CFE8);
  v3 = swift_allocObject(v2, 24, 7);
  v4 = (void *)objc_opt_self(NSUserDefaults);
  v5 = v0;
  *(_QWORD *)(v3 + 16) = objc_msgSend(v4, "standardUserDefaults");
  *(_QWORD *)&v0[v1] = v3;
  v6 = OBJC_IVAR____TtC9MusicCore26MetricsReportingController_pageRenderEventSampler;
  v7 = sub_100005574((uint64_t *)&unk_10048CFF0);
  v8 = swift_allocObject(v7, 24, 7);
  *(_QWORD *)(v8 + 16) = objc_msgSend(v4, "standardUserDefaults");
  *(_QWORD *)&v5[v6] = v8;
  *(_QWORD *)&v5[OBJC_IVAR____TtC9MusicCore26MetricsReportingController_metricsConfiguration] = 0;
  v9 = OBJC_IVAR____TtC9MusicCore26MetricsReportingController_metricsController;
  *(_QWORD *)&v5[v9] = objc_msgSend(objc_allocWithZone((Class)SSMetricsController), "init");
  v10 = OBJC_IVAR____TtC9MusicCore26MetricsReportingController_carFocusedMetricsController;
  *(_QWORD *)&v5[v10] = objc_msgSend(objc_allocWithZone((Class)SSMetricsController), "init");
  v11 = OBJC_IVAR____TtC9MusicCore26MetricsReportingController_carMetricsReporter;
  v12 = type metadata accessor for CarNowPlayingMetrics.Reporter();
  *(_QWORD *)&v5[v11] = swift_allocObject(v12, 16, 7);
  *(_QWORD *)&v5[OBJC_IVAR____TtC9MusicCore26MetricsReportingController_backgroundObserver] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC9MusicCore26MetricsReportingController_urlBagObserver] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC9MusicCore26MetricsReportingController_pageHistory] = _swiftEmptyArrayStorage;

  v31.receiver = v5;
  v31.super_class = (Class)type metadata accessor for MetricsReportingController();
  v13 = objc_msgSendSuper2(&v31, "init");
  v14 = qword_10048C720;
  v15 = (char *)v13;
  if (v14 != -1)
    swift_once(&qword_10048C720, sub_1000C378C);
  v16 = static BagProvider.shared;
  v17 = swift_allocObject(&unk_100447A30, 24, 7);
  swift_unknownObjectWeakInit(v17 + 16, v15);
  v18 = type metadata accessor for BagProvider.Observer();
  v19 = swift_allocObject(v18, 40, 7);
  v20 = swift_weakInit(v19 + 16, 0);
  *(_QWORD *)(v19 + 24) = 0;
  *(_QWORD *)(v19 + 32) = 0;
  swift_weakAssign(v20, v16);
  v21 = *(_QWORD *)(v19 + 24);
  v22 = *(_QWORD *)(v19 + 32);
  *(_QWORD *)(v19 + 24) = sub_1000A9F08;
  *(_QWORD *)(v19 + 32) = v17;
  swift_retain_n(v17, 3);
  v23 = sub_10003A5C8(v21, v22);
  __chkstk_darwin(v23);
  UnfairLock.locked<A>(_:)(sub_1000A9F10);
  sub_1000C3B6C(0);
  swift_release(v17);
  swift_release_n(v17, 2);
  v24 = *(_QWORD *)&v15[OBJC_IVAR____TtC9MusicCore26MetricsReportingController_urlBagObserver];
  *(_QWORD *)&v15[OBJC_IVAR____TtC9MusicCore26MetricsReportingController_urlBagObserver] = v19;
  swift_release(v24);
  v25 = swift_allocObject(&unk_100447A30, 24, 7);
  swift_unknownObjectWeakInit(v25 + 16, v15);
  v26 = type metadata accessor for NotificationObserver();
  swift_allocObject(v26, 64, 7);
  v27 = UISceneDidEnterBackgroundNotification;
  swift_retain(v25);
  v28 = NotificationObserver.init(name:object:dispatchOnMainThread:usesLocalNotificationCenter:handler:)(v27, 0, 1, 1, (uint64_t)sub_1000A9F2C, v25);
  swift_release(v25);

  v29 = *(_QWORD *)&v15[OBJC_IVAR____TtC9MusicCore26MetricsReportingController_backgroundObserver];
  *(_QWORD *)&v15[OBJC_IVAR____TtC9MusicCore26MetricsReportingController_backgroundObserver] = v28;
  swift_release(v29);
  return v15;
}

double sub_1000A4650(void *a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  double result;

  sub_1000087DC(0, (unint64_t *)&qword_100490BC0, OS_dispatch_queue_ptr);
  v4 = swift_allocObject(&unk_100447AA8, 32, 7);
  *(_QWORD *)(v4 + 16) = a2;
  *(_QWORD *)(v4 + 24) = a1;
  swift_retain(a2);
  v5 = a1;
  static OS_dispatch_queue.asyncOnMainIfNeeded(_:)(sub_1000AA0E8, v4);
  *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  return result;
}

void sub_1000A46D4(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  _BYTE v6[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    sub_1000A4AF4(a2);

  }
}

uint64_t sub_1000A472C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *Strong;
  _QWORD *v16;
  uint64_t v17;
  _BYTE v20[24];

  v3 = sub_100005574((uint64_t *)&unk_100493720);
  __chkstk_darwin(v3);
  v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_10048C650 != -1)
    swift_once(&qword_10048C650, sub_1000B09C4);
  v7 = type metadata accessor for Logger(0, v4);
  v8 = sub_1000086B4(v7, (uint64_t)qword_1004A1FC0);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    swift_slowDealloc(v11, -1, -1);
  }

  v12 = a2 + 16;
  static TaskPriority.low.getter();
  v13 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v6, 0, 1, v13);
  v14 = swift_allocObject(&unk_100447A30, 24, 7);
  swift_beginAccess(v12, v20, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v12);
  swift_unknownObjectWeakInit(v14 + 16, Strong);

  v16 = (_QWORD *)swift_allocObject(&unk_100447A80, 40, 7);
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = v14;
  v17 = sub_10002DE80((uint64_t)v6, (uint64_t)&unk_100490720, (uint64_t)v16);
  swift_release(v17);
  return sub_100008758((uint64_t)v6, (uint64_t *)&unk_100493720);
}

uint64_t sub_1000A4904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 88) = a4;
  return swift_task_switch(sub_1000A491C, 0, 0);
}

uint64_t sub_1000A491C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = *(_QWORD *)(v0 + 88) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    v4 = *(_QWORD *)(Strong + OBJC_IVAR____TtC9MusicCore26MetricsReportingController_carMetricsReporter);
    swift_retain(v4);

    sub_100096E60(0);
    swift_release(v4);
  }
  v5 = *(_QWORD *)(v0 + 88) + 16;
  swift_beginAccess(v5, v0 + 40, 0, 0);
  v6 = swift_unknownObjectWeakLoadStrong(v5);
  if (v6)
  {
    v7 = (void *)v6;
    v8 = *(_QWORD *)(v6 + OBJC_IVAR____TtC9MusicCore26MetricsReportingController_carMetricsReporter);
    swift_retain(v8);

    sub_100096E60(1);
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v0 + 88) + 16;
  swift_beginAccess(v9, v0 + 64, 0, 0);
  v10 = swift_unknownObjectWeakLoadStrong(v9);
  *(_QWORD *)(v0 + 96) = v10;
  if (!v10)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v11 = v10;
  v12 = (_QWORD *)swift_task_alloc(dword_10049051C);
  *(_QWORD *)(v0 + 104) = v12;
  *v12 = v0;
  v12[1] = sub_1000A4A88;
  v12[15] = v11;
  return swift_task_switch(sub_1000A3D7C, 0, 0);
}

uint64_t sub_1000A4A88()
{
  uint64_t *v0;
  void *v1;
  uint64_t v3;

  v1 = *(void **)(*v0 + 96);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 104));

  return (*(uint64_t (**)(void))(v3 + 8))();
}

void sub_1000A4AF4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  id v17;
  void *v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char isUniquelyReferenced_nonNull_native;
  int v26;
  id v27;
  Class isa;
  id v29;
  void *v30;
  id v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _QWORD v39[5];
  _OWORD v40[2];

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_1000087DC(0, (unint64_t *)&qword_100490BC0, OS_dispatch_queue_ptr);
  *v7 = static OS_dispatch_queue.main.getter(v8, v9, v10, v11, v12, v13, v14, v15, v34, v35, v36, *((_QWORD *)&v36 + 1), v37, *((_QWORD *)&v37 + 1), v38);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v16 = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    return;
  }
  v17 = objc_msgSend(a1, "dictionaryForBagKey:", SSMetricsURLBagKey);
  if (v17)
  {
    v18 = v17;
    v19 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v17, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

    if (!*(_QWORD *)(v19 + 16))
    {
      swift_bridgeObjectRelease(v19);
      return;
    }
    v20 = objc_msgSend(a1, "dictionaryForBagKey:", SSVURLBagKeyMusicCommon);
    if (v20)
    {
      v21 = v20;
      v22 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v20, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

      *(_QWORD *)&v36 = 0xD000000000000023;
      *((_QWORD *)&v36 + 1) = 0x80000001003AEB70;
      AnyHashable.init<A>(_:)(v39, &v36, &type metadata for String, &protocol witness table for String);
      if (*(_QWORD *)(v22 + 16) && (v23 = sub_1000A580C((uint64_t)v39), (v24 & 1) != 0))
      {
        sub_10000684C(*(_QWORD *)(v22 + 56) + 32 * v23, (uint64_t)&v36);
      }
      else
      {
        v36 = 0u;
        v37 = 0u;
      }
      swift_bridgeObjectRelease(v22);
      sub_10009B178((uint64_t)v39);
      if (*((_QWORD *)&v37 + 1))
      {
        sub_10009B168(&v36, v40);
        strcpy((char *)&v36, "postFrequency");
        HIWORD(v36) = -4864;
        AnyHashable.init<A>(_:)(v39, &v36, &type metadata for String, &protocol witness table for String);
        sub_10000684C((uint64_t)v40, (uint64_t)&v36);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
        v35 = v19;
        sub_100099FA8(&v36, (uint64_t)v39, isUniquelyReferenced_nonNull_native);
        v19 = v35;
        swift_bridgeObjectRelease(0x8000000000000000);
        sub_10009B178((uint64_t)v39);
        sub_10000682C(v40);
        v26 = 1;
        goto LABEL_14;
      }
      sub_100008758((uint64_t)&v36, &qword_100491B90);
    }
    v26 = 0;
LABEL_14:
    v27 = objc_allocWithZone((Class)SSMetricsConfiguration);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v19);
    v29 = objc_msgSend(v27, "initWithGlobalConfiguration:", isa);

    if (v29)
    {
      v30 = *(void **)(v2 + OBJC_IVAR____TtC9MusicCore26MetricsReportingController_metricsConfiguration);
      *(_QWORD *)(v2 + OBJC_IVAR____TtC9MusicCore26MetricsReportingController_metricsConfiguration) = v29;
      v31 = v29;

      objc_msgSend(v31, "setDisableEventDecoration:", objc_msgSend(v31, "_decorateITMLEvents") ^ 1);
      v32 = *(void **)(v2 + OBJC_IVAR____TtC9MusicCore26MetricsReportingController_metricsController);
      objc_msgSend(v32, "setGlobalConfiguration:", v31);
      objc_msgSend(v32, "setFlushTimerEnabled:", 1);
      if (v26)
      {
        v33 = *(void **)(v2 + OBJC_IVAR____TtC9MusicCore26MetricsReportingController_carFocusedMetricsController);
        objc_msgSend(v33, "setGlobalConfiguration:", v31);
        objc_msgSend(v33, "setFlushTimerEnabled:", 1);
      }

    }
  }
}

void sub_1000A4EA8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  Class isa;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void **aBlock;
  uint64_t v39;
  void (*v40)(uint64_t, void *);
  void *v41;
  uint64_t (*v42)();
  uint64_t v43;
  char v44[80];

  v4 = v3;
  v37 = a2;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (uint64_t *)((char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_1000087DC(0, (unint64_t *)&qword_100490BC0, OS_dispatch_queue_ptr);
  *v14 = static OS_dispatch_queue.main.getter(v15, v16, v17, v18, v19, v20, v21, v22, v36, v37, aBlock, v39, v40, v41, v42);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  v23 = _dispatchPreconditionTest(_:)(v14);
  (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v14, v11);
  if ((v23 & 1) != 0)
  {
    sub_1000A5144(a1);
    v24 = sub_100005574(&qword_1004967B0);
    inited = swift_initStackObject(v24, v44);
    *(_OWORD *)(inited + 16) = xmmword_100384A80;
    strcpy((char *)(inited + 32), "clientEventId");
    *(_WORD *)(inited + 46) = -4864;
    v26 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
    v27 = UUID.uuidString.getter(v26);
    v29 = v28;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = v27;
    *(_QWORD *)(inited + 56) = v29;
    v30 = sub_100098D5C(inited);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v30);
    objc_msgSend(a1, "addPropertiesWithDictionary:", isa);

    v32 = *(void **)(v4 + OBJC_IVAR____TtC9MusicCore26MetricsReportingController_metricsController);
    v33 = swift_allocObject(&unk_100447AF8, 32, 7);
    *(_QWORD *)(v33 + 16) = v37;
    *(_QWORD *)(v33 + 24) = a3;
    v42 = sub_100009BB0;
    v43 = v33;
    aBlock = _NSConcreteStackBlock;
    v39 = 1107296256;
    v40 = sub_1000F7EF4;
    v41 = &unk_100447B10;
    v34 = _Block_copy(&aBlock);
    v35 = v43;
    swift_retain(a3);
    objc_msgSend(v32, "insertEvent:withCompletionHandler:", a1, v34, swift_release(v35).n128_f64[0]);
    _Block_release(v34);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000A5144(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Class isa;
  NSString v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;

  v2 = v1;
  v4 = objc_msgSend(a1, "eventType");
  if (!v4)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(SSMetricsEventTypePage);
    v11 = v15;
    return swift_bridgeObjectRelease(v11);
  }
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v8 = v7;

  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(SSMetricsEventTypePage);
  v11 = v10;
  if (!v8)
    return swift_bridgeObjectRelease(v11);
  if (v6 == v9 && v8 == v10)
  {
    swift_bridgeObjectRelease_n(v8, 2);
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v9, v10, 0);
    swift_bridgeObjectRelease(v8);
    result = swift_bridgeObjectRelease(v11);
    if ((v13 & 1) == 0)
      return result;
  }
  v16 = OBJC_IVAR____TtC9MusicCore26MetricsReportingController_pageHistory;
  v17 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9MusicCore26MetricsReportingController_pageHistory);
  swift_bridgeObjectRetain();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v17);
  v19 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setProperty:forBodyKey:", isa, v19);

  result = sub_1000AB0E0();
  if (v20)
  {
    v21 = result;
    v22 = v20;
    v23 = *(_QWORD *)(v2 + v16);
    if (*(_QWORD *)(v23 + 16) >= 5uLL)
    {
      swift_bridgeObjectRetain();
      v24 = sub_1000A5364(4, v23);
      v25 = *(_QWORD *)(v2 + v16);
      *(_QWORD *)(v2 + v16) = v24;
      swift_bridgeObjectRelease(v25);
      v23 = *(_QWORD *)(v2 + v16);
    }
    result = swift_isUniquelyReferenced_nonNull_native(v23);
    *(_QWORD *)(v2 + v16) = v23;
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_10003DE28(0, *(_QWORD *)(v23 + 16) + 1, 1, (char *)v23);
      v23 = result;
      *(_QWORD *)(v2 + v16) = result;
    }
    v26 = *(_QWORD *)(v23 + 16);
    v27 = *(_QWORD *)(v23 + 24);
    v28 = v26 + 1;
    if (v26 >= v27 >> 1)
    {
      v30 = (char *)v23;
      v31 = *(_QWORD *)(v23 + 16);
      result = (uint64_t)sub_10003DE28((char *)(v27 > 1), v26 + 1, 1, v30);
      v26 = v31;
      v23 = result;
      *(_QWORD *)(v2 + v16) = result;
    }
    *(_QWORD *)(v23 + 16) = v28;
    v29 = v23 + 16 * v26;
    *(_QWORD *)(v29 + 32) = v21;
    *(_QWORD *)(v29 + 40) = v22;
  }
  return result;
}

uint64_t sub_1000A5364(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;

  if (result < 0)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v3 = result;
  if (!result)
  {
    swift_bridgeObjectRelease(a2);
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  if (*(_QWORD *)(a2 + 16) >= result)
    v4 = result;
  else
    v4 = *(_QWORD *)(a2 + 16);
  sub_10007736C(0, v4, 0);
  v5 = *(_QWORD *)(a2 + 16);
  if (!v5)
    goto LABEL_31;
  result = swift_bridgeObjectRetain();
  v6 = 0;
  v7 = 0;
  v8 = -v5;
  v20 = v5;
  do
  {
LABEL_8:
    if (v7 >= *(_QWORD *)(a2 + 16))
      goto LABEL_39;
    v9 = (uint64_t *)(a2 + 32 + 16 * v7);
    v11 = *v9;
    v10 = v9[1];
    v12 = _swiftEmptyArrayStorage[2];
    if ((uint64_t)v12 < v3)
    {
      ++v7;
LABEL_22:
      v15 = _swiftEmptyArrayStorage[3];
      v21 = v12 + 1;
      result = swift_bridgeObjectRetain();
      if (v12 >= v15 >> 1)
        result = (uint64_t)sub_10007736C((char *)(v15 > 1), v21, 1);
      _swiftEmptyArrayStorage[2] = v21;
      v16 = &_swiftEmptyArrayStorage[2 * v12];
      v16[4] = v11;
      v16[5] = v10;
    }
    else
    {
      result = swift_bridgeObjectRetain();
      if (v6 >= v12)
        goto LABEL_40;
      v13 = &_swiftEmptyArrayStorage[2 * v6 + 4];
      result = swift_bridgeObjectRelease(v13[1]);
      *v13 = v11;
      v13[1] = v10;
      if ((uint64_t)++v6 >= v3)
      {
        if (v7 + 1 == v20)
        {
LABEL_30:
          swift_bridgeObjectRelease(a2);
          goto LABEL_31;
        }
        v14 = (uint64_t *)(a2 + 56 + 16 * v7);
        v7 += 2;
        while (v7 - 1 < *(_QWORD *)(a2 + 16))
        {
          v11 = *(v14 - 1);
          v10 = *v14;
          v12 = _swiftEmptyArrayStorage[2];
          if ((uint64_t)v12 < v3)
          {
            v6 = 0;
            goto LABEL_22;
          }
          swift_bridgeObjectRetain();
          result = swift_bridgeObjectRelease(_swiftEmptyArrayStorage[5]);
          _swiftEmptyArrayStorage[4] = v11;
          _swiftEmptyArrayStorage[5] = v10;
          if (v3 > 1)
          {
            v6 = 1;
            if (v8 + v7)
              goto LABEL_8;
            swift_bridgeObjectRelease(a2);
            v6 = 1;
            goto LABEL_34;
          }
          ++v7;
          v14 += 2;
          if (v8 + v7 == 1)
            goto LABEL_30;
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      ++v7;
    }
  }
  while (v7 != v20);
  swift_bridgeObjectRelease(a2);
  if (!v6)
  {
LABEL_31:
    swift_bridgeObjectRelease(a2);
    return (uint64_t)_swiftEmptyArrayStorage;
  }
LABEL_34:
  v17 = _swiftEmptyArrayStorage[2];
  result = (uint64_t)sub_10007736C(0, v17, 0);
  if (v17 < (uint64_t)v6)
    goto LABEL_42;
  if ((v6 & 0x8000000000000000) == 0)
  {
    v18 = _swiftEmptyArrayStorage[2];
    if (v18 >= v6 && v18 >= v17)
    {
      v19 = swift_retain(_swiftEmptyArrayStorage);
      sub_1000A6B94(v19, (uint64_t)&_swiftEmptyArrayStorage[4], v6, (2 * v17) | 1);
      swift_bridgeObjectRelease(a2);
      swift_release(_swiftEmptyArrayStorage);
      sub_1000A6B94((uint64_t)_swiftEmptyArrayStorage, (uint64_t)&_swiftEmptyArrayStorage[4], 0, (2 * v6) | 1);
      swift_release(_swiftEmptyArrayStorage);
      return (uint64_t)_swiftEmptyArrayStorage;
    }
    goto LABEL_44;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

id MetricsReportingController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MetricsReportingController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000A5738()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD v6[2];
  _OWORD v7[2];

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "propertyForBodyKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v2);
    swift_unknownObjectRelease(v2);
    sub_10009B168(v6, v7);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  v3 = sub_100005574(&qword_100491B90);
  v4 = sub_1000087DC(0, &qword_100490738, NSNumber_ptr);
  if (swift_dynamicCast(v6, v7, v3, v4, 6))
    return *(_QWORD *)&v6[0];
  else
    return 0;
}

unint64_t sub_1000A580C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1000A5AFC(a1, v4);
}

unint64_t sub_1000A583C(unsigned __int8 a1)
{
  Swift::Int v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return sub_1000A5BC0(a1, v2);
}

unint64_t sub_1000A5894(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_1000A9FFC(&qword_100494120, (uint64_t)&protocol conformance descriptor for UUID);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_1000A5C60(a1, v7);
}

unint64_t sub_1000A58F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1000A5D98(a1, v4);
}

unint64_t sub_1000A5928(Swift::UInt a1, Swift::UInt a2)
{
  Swift::Int v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  v4 = Hasher._finalize()();
  return sub_1000A5EB0(a1, a2, v4);
}

unint64_t sub_1000A5994(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  Hasher.init(_seed:)(v7);
  String.hash(into:)(v7, v2, v4);
  v5 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return sub_1000A5F2C(a1, v5);
}

unint64_t sub_1000A5A14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  Hasher.init(_seed:)(v7);
  String.hash(into:)(v7, v2, v4);
  v5 = Hasher._finalize()();
  swift_bridgeObjectRelease(v4);
  return sub_1000A5F2C(a1, v5);
}

unint64_t sub_1000A5AA0(unsigned __int8 a1)
{
  Swift::Int v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(a1 + 1);
  v2 = Hasher._finalize()();
  return sub_1000A5BC0(a1, v2);
}

unint64_t sub_1000A5AFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_10009B414(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_10009B178((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_1000A5BC0(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_1000A5C60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v18 = a1;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_1000A9FFC(&qword_100490728, (uint64_t)&protocol conformance descriptor for UUID);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_1000A5D98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_1000087DC(0, &qword_100490368, MPCPlayerPath_ptr);
    v6 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      v8 = ~v4;
      for (i = (i + 1) & v8; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        v9 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v10 = static NSObject.== infix(_:_:)();

        if ((v10 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_1000A5EB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v5 = -1 << *(_BYTE *)(v3 + 32);
  result = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = ~v5;
    do
    {
      v8 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * result);
      v10 = *v8;
      v9 = v8[1];
      if (v10 == a1 && v9 == a2)
        break;
      result = (result + 1) & v7;
    }
    while (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t sub_1000A5F2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_1000A60A0(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if (result)
  {
    v1 = result;
    v3 = 0;
    swift_stdlib_random(&v3, 8);
    result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          v3 = 0;
          swift_stdlib_random(&v3, 8);
        }
        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _s9MusicCore12MetricsEventV5ClickV13ActionContextO21__derived_enum_equalsySbAG_AGtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;

  switch(a2)
  {
    case 0:
      if (a4)
        goto LABEL_24;
      result = 1;
      break;
    case 1:
      if (a4 != 1)
        goto LABEL_24;
      result = 1;
      break;
    case 2:
      if (a4 != 2)
        goto LABEL_24;
      result = 1;
      break;
    case 3:
      if (a4 != 3)
        goto LABEL_24;
      result = 1;
      break;
    case 4:
      if (a4 != 4)
        goto LABEL_24;
      result = 1;
      break;
    case 5:
      if (a4 != 5)
        goto LABEL_24;
      result = 1;
      break;
    case 6:
      if (a4 != 6)
        goto LABEL_24;
      result = 1;
      break;
    case 7:
      if (a4 != 7)
        goto LABEL_24;
      result = 1;
      break;
    case 8:
      if (a4 != 8)
        goto LABEL_24;
      result = 1;
      break;
    default:
      if (a4 < 9)
      {
LABEL_24:
        result = 0;
      }
      else if (a1 == a3 && a2 == a4)
      {
        result = 1;
      }
      else
      {
        result = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0);
      }
      break;
  }
  return result;
}

uint64_t sub_1000A6204(unint64_t a1)
{
  if (a1 <= 1)
    return dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  if (a1 - 5 > 0xFFFFFFFFFFFFFFFCLL)
    return 3419442;
  if (a1 - 8 > 0xFFFFFFFFFFFFFFFCLL)
    return 3616053;
  if (a1 - 11 > 0xFFFFFFFFFFFFFFFCLL)
    return 808529208;
  if (a1 - 16 > 0xFFFFFFFFFFFFFFFALL)
    return 0x35312D3131;
  if (a1 - 21 > 0xFFFFFFFFFFFFFFFALL)
    return 0x30322D3631;
  if (a1 - 26 >= 0xFFFFFFFFFFFFFFFBLL)
    return 0x35322D3132;
  return 2831922;
}

unint64_t sub_1000A6308(char a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE v13[80];

  v6 = sub_100005574(&qword_1004967B0);
  if ((a1 & 1) != 0)
  {
    inited = swift_initStackObject(v6, &v12);
    *(_OWORD *)(inited + 16) = xmmword_100384A40;
    strcpy((char *)(inited + 32), "sharedActivity");
    *(_BYTE *)(inited + 47) = -18;
    *(_BYTE *)(inited + 48) = 1;
    *(_QWORD *)(inited + 72) = &type metadata for Bool;
    *(_QWORD *)(inited + 80) = 0xD00000000000001CLL;
    *(_QWORD *)(inited + 88) = 0x80000001003AEBF0;
    *(_QWORD *)(inited + 96) = sub_1000A6204(a2);
    *(_QWORD *)(inited + 104) = v8;
    *(_QWORD *)(inited + 120) = &type metadata for String;
    *(_QWORD *)(inited + 128) = 0xD000000000000018;
    *(_QWORD *)(inited + 136) = 0x80000001003AE700;
    v9 = sub_1000A6204(a3);
    *(_QWORD *)(inited + 168) = &type metadata for String;
    *(_QWORD *)(inited + 144) = v9;
    *(_QWORD *)(inited + 152) = v10;
  }
  else
  {
    inited = swift_initStackObject(v6, v13);
    *(_OWORD *)(inited + 16) = xmmword_100384A80;
    strcpy((char *)(inited + 32), "sharedActivity");
    *(_BYTE *)(inited + 47) = -18;
    *(_QWORD *)(inited + 72) = &type metadata for Bool;
    *(_BYTE *)(inited + 48) = 0;
  }
  return sub_100098D5C(inited);
}

uint64_t _s9MusicCore12MetricsEventV10TargetTypeO8rawValueAESgSS_tcfC_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_10043D5B8, a1, a2, &unk_10048CF90);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x18)
    return 24;
  else
    return v3;
}

uint64_t sub_1000A6488(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MetricsEvent.Page(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A64CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005574(&qword_10048D510);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t _s9MusicCore12MetricsEventV5ClickV10ActionTypeO8rawValueAGSgSS_tcfC_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_10043D888, a1, a2, &unk_10048CFA0);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x30)
    return 48;
  else
    return v3;
}

double sub_1000A6564@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  id v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double result;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 v65;
  unsigned __int8 v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  double v70;

  objc_msgSend(a1, "domainLookupStartTime");
  v70 = v4;
  objc_msgSend(a1, "domainLookupEndTime");
  v6 = v5;
  objc_msgSend(a1, "connectionStartTime");
  v8 = v7;
  objc_msgSend(a1, "secureConnectionStartTime");
  v10 = v9;
  objc_msgSend(a1, "connectionEndTime");
  v12 = v11;
  objc_msgSend(a1, "requestStartTime");
  v14 = v13;
  objc_msgSend(a1, "responseStartTime");
  v16 = v15;
  objc_msgSend(a1, "responseEndTime");
  v18 = v17;
  objc_msgSend(a1, "fetchStartTime");
  v20 = v19;
  v69 = objc_msgSend(a1, "redirectCount");
  v21 = objc_msgSend(a1, "requestUrl");
  if (v21)
  {
    v22 = v21;
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v67 = v24;
    v68 = v23;

  }
  else
  {
    v67 = 0;
    v68 = 0;
  }
  v66 = objc_msgSend(a1, "cachedResponse");
  v65 = objc_msgSend(a1, "connectionReused");
  v25 = objc_msgSend(a1, "appleTimingApp");
  if (v25)
  {
    v26 = v25;
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v63 = v28;
    v64 = v27;

  }
  else
  {
    v63 = 0;
    v64 = 0;
  }
  v29 = objc_msgSend(a1, "connectionType");
  if (v29)
  {
    v30 = v29;
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v61 = v32;
    v62 = v31;

  }
  else
  {
    v61 = 0;
    v62 = 0;
  }
  v33 = objc_msgSend(a1, "edgeNodeCacheStatus");
  if (v33)
  {
    v34 = v33;
    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    v59 = v36;
    v60 = v35;

  }
  else
  {
    v59 = 0;
    v60 = 0;
  }
  v37 = objc_msgSend(a1, "environmentDataCenter");
  if (v37)
  {
    v38 = v37;
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    v55 = v40;
    v57 = v39;

  }
  else
  {
    v55 = 0;
    v57 = 0;
  }
  v41 = objc_msgSend(a1, "responseDate", v55, v57);
  if (v41)
  {
    v42 = v41;
    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
    v45 = v44;

  }
  else
  {
    v43 = 0;
    v45 = 0;
  }
  v46 = objc_msgSend(a1, "statusCode");
  v47 = objc_msgSend(a1, "requestMessageSize");
  v48 = objc_msgSend(a1, "responseMessageSize");
  v49 = objc_msgSend(a1, "resolvedIPAddress");
  if (v49)
  {
    v50 = v49;
    v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
    v53 = v52;

  }
  else
  {

    v51 = 0;
    v53 = 0;
  }
  result = v70;
  *(double *)a2 = v70;
  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = v6;
  *(_BYTE *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = v8;
  *(_BYTE *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = v10;
  *(_BYTE *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = v12;
  *(_BYTE *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = v14;
  *(_BYTE *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = v16;
  *(_BYTE *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = v18;
  *(_BYTE *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = v20;
  *(_BYTE *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = v69;
  *(_BYTE *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = v68;
  *(_QWORD *)(a2 + 168) = v67;
  *(_BYTE *)(a2 + 176) = v66;
  *(_BYTE *)(a2 + 177) = v65;
  *(_QWORD *)(a2 + 184) = v64;
  *(_QWORD *)(a2 + 192) = v63;
  *(_QWORD *)(a2 + 200) = v62;
  *(_QWORD *)(a2 + 208) = v61;
  *(_QWORD *)(a2 + 216) = v60;
  *(_QWORD *)(a2 + 224) = v59;
  *(_QWORD *)(a2 + 232) = v58;
  *(_QWORD *)(a2 + 240) = v56;
  *(_QWORD *)(a2 + 248) = v43;
  *(_QWORD *)(a2 + 256) = v45;
  *(_QWORD *)(a2 + 264) = v46;
  *(_QWORD *)(a2 + 272) = v47;
  *(_QWORD *)(a2 + 280) = v48;
  *(_QWORD *)(a2 + 288) = v51;
  *(_QWORD *)(a2 + 296) = v53;
  return result;
}

unint64_t _s9MusicCore12MetricsEventV15ComponentRenderV13PreloadStatusO8rawValueAGSgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10043DD28, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

_QWORD *sub_1000A69B0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[24];
  v3 = a1[26];
  v4 = a1[28];
  v5 = a1[30];
  v6 = a1[32];
  v7 = a1[37];
  swift_bridgeObjectRelease(a1[21]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t sub_1000A6A38()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

double sub_1000A6A64()
{
  uint64_t v0;

  return sub_1000A070C(*(void **)(v0 + 16), *(void **)(v0 + 24), (uint64_t)&unk_100447C38, (uint64_t (*)(void))sub_1000AA0B8);
}

uint64_t sub_1000A6A8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000A6A9C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

double sub_1000A6AA4()
{
  uint64_t v0;

  return sub_1000A070C(*(void **)(v0 + 16), *(void **)(v0 + 24), (uint64_t)&unk_100447C10, sub_1000AA160);
}

double sub_1000A6ACC()
{
  uint64_t v0;

  return sub_1000A070C(*(void **)(v0 + 16), *(void **)(v0 + 24), (uint64_t)&unk_100447BE8, sub_1000AA160);
}

double sub_1000A6AF4()
{
  uint64_t v0;

  return sub_1000A070C(*(void **)(v0 + 16), *(void **)(v0 + 24), (uint64_t)&unk_100447BC0, sub_1000AA160);
}

double sub_1000A6B1C()
{
  uint64_t v0;

  return sub_1000A070C(*(void **)(v0 + 16), *(void **)(v0 + 24), (uint64_t)&unk_100447B98, (uint64_t (*)(void))sub_1000AA0B0);
}

double sub_1000A6B44()
{
  uint64_t v0;

  return sub_1000A070C(*(void **)(v0 + 16), *(void **)(v0 + 24), (uint64_t)&unk_100447B70, (uint64_t (*)(void))sub_1000AA088);
}

double sub_1000A6B6C()
{
  uint64_t v0;

  return sub_1000A070C(*(void **)(v0 + 16), *(void **)(v0 + 24), (uint64_t)&unk_100447B48, (uint64_t (*)(void))sub_1000AA060);
}

void sub_1000A6B94(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_18;
  }
  v7 = *v4;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v4);
  *v4 = v7;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *(_QWORD *)(v7 + 24) >> 1)
    goto LABEL_8;
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9)
        v13 = v8 + v6;
      else
        v13 = v8;
      isUniquelyReferenced_nonNull_native = sub_10007736C(isUniquelyReferenced_nonNull_native, v13, 1);
      v7 = *v4;
      if (v5 != a3)
        goto LABEL_12;
    }
    goto LABEL_16;
  }
LABEL_12:
  v14 = *(_QWORD *)(v7 + 16);
  if ((*(_QWORD *)(v7 + 24) >> 1) - v14 < v6)
    goto LABEL_19;
  swift_arrayInitWithCopy(v7 + 16 * v14 + 32, a2 + 16 * a3, v6, &type metadata for String);
  if (v6 <= 0)
  {
LABEL_16:
    *v4 = v7;
    return;
  }
  v15 = *(_QWORD *)(v7 + 16);
  v16 = __OFADD__(v15, v6);
  v17 = v15 + v6;
  if (!v16)
  {
    *(_QWORD *)(v7 + 16) = v17;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
}

uint64_t sub_1000A6C90()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

void sub_1000A6CCC()
{
  uint64_t v0;

  sub_1000A3A04(*(void **)(v0 + 16), *(char **)(v0 + 24), *(char **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t type metadata accessor for MetricsReportingController()
{
  return objc_opt_self(_TtC9MusicCore26MetricsReportingController);
}

unint64_t sub_1000A6D00()
{
  unint64_t result;

  result = qword_100490528;
  if (!qword_100490528)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MetricsEvent.TargetType, &type metadata for MetricsEvent.TargetType);
    atomic_store(result, (unint64_t *)&qword_100490528);
  }
  return result;
}

unint64_t sub_1000A6D48()
{
  unint64_t result;

  result = qword_100490530;
  if (!qword_100490530)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MetricsEvent.Page.DisplayType, &type metadata for MetricsEvent.Page.DisplayType);
    atomic_store(result, (unint64_t *)&qword_100490530);
  }
  return result;
}

unint64_t sub_1000A6D90()
{
  unint64_t result;

  result = qword_100490538;
  if (!qword_100490538)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MetricsEvent.Click.ActionType, &type metadata for MetricsEvent.Click.ActionType);
    atomic_store(result, (unint64_t *)&qword_100490538);
  }
  return result;
}

unint64_t sub_1000A6DD8()
{
  unint64_t result;

  result = qword_100490540;
  if (!qword_100490540)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MetricsEvent.ComponentRender.PreloadStatus, &type metadata for MetricsEvent.ComponentRender.PreloadStatus);
    atomic_store(result, (unint64_t *)&qword_100490540);
  }
  return result;
}

ValueMetadata *type metadata accessor for MetricsEvent()
{
  return &type metadata for MetricsEvent;
}

uint64_t getEnumTagSinglePayload for MetricsEvent.TargetType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE9)
    goto LABEL_17;
  if (a2 + 23 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 23) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 23;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 23;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 23;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x18;
  v8 = v6 - 24;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MetricsEvent.TargetType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 23 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 23) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE8)
    return ((uint64_t (*)(void))((char *)&loc_1000A6F08 + 4 * byte_10038A09B[v4]))();
  *a1 = a2 + 23;
  return ((uint64_t (*)(void))((char *)sub_1000A6F3C + 4 * byte_10038A096[v4]))();
}

uint64_t sub_1000A6F3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A6F44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A6F4CLL);
  return result;
}

uint64_t sub_1000A6F58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A6F60);
  *(_BYTE *)result = a2 + 23;
  return result;
}

uint64_t sub_1000A6F64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A6F6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MetricsEvent.TargetType()
{
  return &type metadata for MetricsEvent.TargetType;
}

_QWORD *initializeBufferWithCopyOfBuffer for MetricsEvent.Page(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for URL(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      v15 = sub_100005574(&qword_10048D510);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v17 = a3[8];
    *(_QWORD *)((char *)v4 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
    v18 = (_QWORD *)((char *)v4 + v17);
    v19 = (_QWORD *)((char *)a2 + v17);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = a3[10];
    *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    v22 = (_QWORD *)((char *)v4 + v21);
    v23 = (_QWORD *)((char *)a2 + v21);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for MetricsEvent.Page(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = a1 + a2[6];
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[10] + 8));
}

_QWORD *initializeWithCopy for MetricsEvent.Page(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    v14 = sub_100005574(&qword_10048D510);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  v19 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MetricsEvent.Page(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  *a1 = *a2;
  v6 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v6);
  a1[2] = a2[2];
  v7 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v7);
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = sub_100005574(&qword_10048D510);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  v17 = a3[7];
  v18 = *(_QWORD *)((char *)a1 + v17);
  *(_QWORD *)((char *)a1 + v17) = *(_QWORD *)((char *)a2 + v17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v18);
  v19 = a3[8];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  *v20 = *v21;
  v22 = v20[1];
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v22);
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v23 = a3[10];
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = (_QWORD *)((char *)a2 + v23);
  *v24 = *v25;
  v26 = v24[1];
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v26);
  return a1;
}

_OWORD *initializeWithTake for MetricsEvent.Page(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_100005574(&qword_10048D510);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  v14 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  *(_OWORD *)((char *)a1 + v14) = *(_OWORD *)((char *)a2 + v14);
  return a1;
}

_QWORD *assignWithTake for MetricsEvent.Page(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = sub_100005574(&qword_10048D510);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  v19 = a3[7];
  v20 = *(_QWORD *)((char *)a1 + v19);
  *(_QWORD *)((char *)a1 + v19) = *(_QWORD *)((char *)a2 + v19);
  swift_bridgeObjectRelease(v20);
  v21 = a3[8];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  v25 = *v23;
  v24 = v23[1];
  v26 = v22[1];
  *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease(v26);
  v27 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  v31 = *v29;
  v30 = v29[1];
  v32 = v28[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease(v32);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricsEvent.Page(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A7720);
}

uint64_t sub_1000A7720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100005574(&qword_10048D510);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for MetricsEvent.Page(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A77AC);
}

uint64_t sub_1000A77AC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100005574(&qword_10048D510);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

void sub_1000A7824(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_10038A398;
  v4[1] = &unk_10038A398;
  sub_1000A78BC(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_10038A3B0;
    v4[4] = &unk_10038A3C8;
    v4[5] = (char *)&value witness table for Builtin.Int8 + 64;
    v4[6] = &unk_10038A3C8;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
  }
}

void sub_1000A78BC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100495ED0)
  {
    v2 = type metadata accessor for URL(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100495ED0);
  }
}

uint64_t storeEnumTagSinglePayload for MetricsEvent.Page.DisplayType(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000A7950 + 4 * byte_10038A0A0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000A7970 + 4 * byte_10038A0A5[v4]))();
}

_BYTE *sub_1000A7950(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000A7970(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000A7978(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000A7980(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000A7988(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000A7990(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MetricsEvent.Page.DisplayType()
{
  return &type metadata for MetricsEvent.Page.DisplayType;
}

_QWORD *initializeBufferWithCopyOfBuffer for MetricsEvent.Click(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v51;
  unsigned int (*v52)(char *, uint64_t, uint64_t);

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
    v8 = a3[7];
    v9 = (void *)(a1 + v8);
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for URL(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      v14 = sub_100005574(&qword_10048D510);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v16 = a3[9];
    *(_QWORD *)((char *)v4 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    v17 = (_QWORD *)((char *)v4 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = *(uint64_t *)((char *)a2 + v16 + 8);
    swift_bridgeObjectRetain();
    if (v19 > 9)
    {
      *v17 = *v18;
      v17[1] = v19;
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)v17 = *(_OWORD *)v18;
    }
    v20 = a3[10];
    v21 = (char *)v4 + v20;
    v22 = (uint64_t)a2 + v20;
    v23 = *(unsigned __int16 *)(v22 + 24);
    v52 = v13;
    if (v23 >> 8 <= 0xFE)
    {
      v24 = *(id *)v22;
      v25 = *(_QWORD *)(v22 + 8);
      v51 = v11;
      v26 = v12;
      v27 = *(_QWORD *)(v22 + 16);
      sub_1000355D8(*(id *)v22, v25, v27, v23, SBYTE1(v23));
      *(_QWORD *)v21 = v24;
      *((_QWORD *)v21 + 1) = v25;
      *((_QWORD *)v21 + 2) = v27;
      v12 = v26;
      v11 = v51;
      *((_WORD *)v21 + 12) = v23;
    }
    else
    {
      *(_OWORD *)v21 = *(_OWORD *)v22;
      *(_OWORD *)(v21 + 10) = *(_OWORD *)(v22 + 10);
    }
    v28 = a3[12];
    *(_QWORD *)((char *)v4 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    v29 = (_QWORD *)((char *)v4 + v28);
    v30 = (uint64_t *)((char *)a2 + v28);
    v31 = v30[1];
    *v29 = *v30;
    v29[1] = v31;
    v32 = a3[13];
    v33 = a3[14];
    v34 = (_QWORD *)((char *)v4 + v32);
    v35 = (uint64_t *)((char *)a2 + v32);
    v36 = v35[1];
    *v34 = *v35;
    v34[1] = v36;
    v37 = (char *)v4 + v33;
    v38 = (char *)a2 + v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v52(v38, 1, v11))
    {
      v39 = sub_100005574(&qword_10048D510);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v37, v38, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v37, 0, 1, v11);
    }
    v40 = a3[16];
    *(_QWORD *)((char *)v4 + a3[15]) = *(uint64_t *)((char *)a2 + a3[15]);
    *((_BYTE *)v4 + v40) = *((_BYTE *)a2 + v40);
    v41 = a3[17];
    v42 = a3[18];
    v43 = (_QWORD *)((char *)v4 + v41);
    v44 = (uint64_t *)((char *)a2 + v41);
    v45 = v44[1];
    *v43 = *v44;
    v43[1] = v45;
    *((_BYTE *)v4 + v42) = *((_BYTE *)a2 + v42);
    v46 = a3[19];
    v47 = (_QWORD *)((char *)v4 + v46);
    v48 = (uint64_t *)((char *)a2 + v46);
    v49 = v48[1];
    *v47 = *v48;
    v47[1] = v49;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for MetricsEvent.Click(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[7];
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8]));
  v8 = *(_QWORD *)(a1 + a2[9] + 8);
  if (v8 >= 0xA)
    swift_bridgeObjectRelease(v8);
  v9 = a1 + a2[10];
  v10 = *(unsigned __int16 *)(v9 + 24);
  if (v10 >> 8 <= 0xFE)
    sub_10000F7F8(*(void **)v9, *(_QWORD *)(v9 + 8), *(_QWORD *)(v9 + 16), v10, SBYTE1(v10));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[13] + 8));
  v11 = a1 + a2[14];
  if (!v7(v11, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v11, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[15]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[17] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[19] + 8));
}

uint64_t initializeWithCopy for MetricsEvent.Click(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v49;
  unsigned int (*v50)(const void *, uint64_t, uint64_t);

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v7 = a3[7];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    v13 = sub_100005574(&qword_10048D510);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  v17 = *(_QWORD *)(a2 + v14 + 8);
  swift_bridgeObjectRetain();
  if (v17 > 9)
  {
    *v15 = *v16;
    v15[1] = v17;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)v15 = *(_OWORD *)v16;
  }
  v18 = a3[10];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = *(unsigned __int16 *)(v20 + 24);
  v50 = v12;
  if (v21 >> 8 <= 0xFE)
  {
    v22 = *(id *)v20;
    v23 = *(_QWORD *)(v20 + 8);
    v49 = v10;
    v24 = v11;
    v25 = *(_QWORD *)(v20 + 16);
    sub_1000355D8(*(id *)v20, v23, v25, v21, SBYTE1(v21));
    *(_QWORD *)v19 = v22;
    *(_QWORD *)(v19 + 8) = v23;
    *(_QWORD *)(v19 + 16) = v25;
    v11 = v24;
    v10 = v49;
    *(_WORD *)(v19 + 24) = v21;
  }
  else
  {
    *(_OWORD *)v19 = *(_OWORD *)v20;
    *(_OWORD *)(v19 + 10) = *(_OWORD *)(v20 + 10);
  }
  v26 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  v27 = (_QWORD *)(a1 + v26);
  v28 = (_QWORD *)(a2 + v26);
  v29 = v28[1];
  *v27 = *v28;
  v27[1] = v29;
  v30 = a3[13];
  v31 = a3[14];
  v32 = (_QWORD *)(a1 + v30);
  v33 = (_QWORD *)(a2 + v30);
  v34 = v33[1];
  *v32 = *v33;
  v32[1] = v34;
  v35 = (void *)(a1 + v31);
  v36 = (const void *)(a2 + v31);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v50(v36, 1, v10))
  {
    v37 = sub_100005574(&qword_10048D510);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v35, v36, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v35, 0, 1, v10);
  }
  v38 = a3[16];
  *(_QWORD *)(a1 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  *(_BYTE *)(a1 + v38) = *(_BYTE *)(a2 + v38);
  v39 = a3[17];
  v40 = a3[18];
  v41 = (_QWORD *)(a1 + v39);
  v42 = (_QWORD *)(a2 + v39);
  v43 = v42[1];
  *v41 = *v42;
  v41[1] = v43;
  *(_BYTE *)(a1 + v40) = *(_BYTE *)(a2 + v40);
  v44 = a3[19];
  v45 = (_QWORD *)(a1 + v44);
  v46 = (_QWORD *)(a2 + v44);
  v47 = v46[1];
  *v45 = *v46;
  v45[1] = v47;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MetricsEvent.Click(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  uint64_t v26;
  unsigned int v27;
  __int128 v28;
  __int128 v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t (*v68)(void *, uint64_t, uint64_t);
  uint64_t (*v69)(void *, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v7 = a3[7];
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = sub_100005574(&qword_10048D510);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  v16 = a3[8];
  v17 = *(_QWORD *)(a1 + v16);
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v17);
  v18 = a3[9];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = *(_QWORD *)(a1 + v18 + 8);
  v22 = *(_QWORD *)(a2 + v18 + 8);
  if (v21 == 9)
  {
    if (v22 >= 0xA)
      goto LABEL_14;
    goto LABEL_18;
  }
  if (v22 == 9)
  {
    sub_1000348BC(v19);
LABEL_18:
    *(_OWORD *)v19 = *(_OWORD *)v20;
    goto LABEL_19;
  }
  if (v21 < 9)
  {
    if (v22 >= 9)
    {
LABEL_14:
      *(_QWORD *)v19 = *(_QWORD *)v20;
      *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
      swift_bridgeObjectRetain();
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v22 < 9)
  {
    sub_100008758(v19, &qword_10048E2B0);
    goto LABEL_18;
  }
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v21);
LABEL_19:
  v23 = a3[10];
  v24 = a1 + v23;
  v25 = (__int128 *)(a2 + v23);
  v26 = *(unsigned __int16 *)(a2 + v23 + 24);
  v27 = v26 >> 8;
  if (*(unsigned __int8 *)(a1 + v23 + 25) == 255)
  {
    if (v27 <= 0xFE)
    {
      v68 = v12;
      v70 = v11;
      v30 = *(void **)v25;
      v31 = *((_QWORD *)v25 + 1);
      v32 = *((_QWORD *)v25 + 2);
      sub_1000355D8(v30, v31, v32, v26, SBYTE1(v26));
      *(_QWORD *)v24 = v30;
      *(_QWORD *)(v24 + 8) = v31;
      v12 = v68;
      v11 = v70;
      *(_QWORD *)(v24 + 16) = v32;
      *(_WORD *)(v24 + 24) = v26;
    }
    else
    {
      v28 = *v25;
      *(_OWORD *)(v24 + 10) = *(__int128 *)((char *)v25 + 10);
      *(_OWORD *)v24 = v28;
    }
  }
  else if (v27 <= 0xFE)
  {
    v69 = v12;
    v71 = v11;
    v33 = *(void **)v25;
    v34 = *((_QWORD *)v25 + 1);
    v35 = *((_QWORD *)v25 + 2);
    sub_1000355D8(v33, v34, v35, v26, SBYTE1(v26));
    v36 = *(void **)v24;
    v37 = *(_QWORD *)(v24 + 8);
    v38 = *(_QWORD *)(v24 + 16);
    *(_QWORD *)v24 = v33;
    *(_QWORD *)(v24 + 8) = v34;
    v12 = v69;
    v11 = v71;
    *(_QWORD *)(v24 + 16) = v35;
    v39 = *(unsigned __int8 *)(v24 + 24);
    *(_BYTE *)(v24 + 24) = v26;
    v40 = *(_BYTE *)(v24 + 25);
    *(_BYTE *)(v24 + 25) = BYTE1(v26);
    sub_10000F7F8(v36, v37, v38, v39, v40);
  }
  else
  {
    sub_1000A8520(v24);
    v29 = *(__int128 *)((char *)v25 + 10);
    *(_OWORD *)v24 = *v25;
    *(_OWORD *)(v24 + 10) = v29;
  }
  v41 = a3[11];
  v42 = *(_QWORD *)(a1 + v41);
  *(_QWORD *)(a1 + v41) = *(_QWORD *)(a2 + v41);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v42);
  v43 = a3[12];
  v44 = (_QWORD *)(a1 + v43);
  v45 = (_QWORD *)(a2 + v43);
  *v44 = *v45;
  v46 = v44[1];
  v44[1] = v45[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v46);
  v47 = a3[13];
  v48 = (_QWORD *)(a1 + v47);
  v49 = (_QWORD *)(a2 + v47);
  *v48 = *v49;
  v50 = v48[1];
  v48[1] = v49[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v50);
  v51 = a3[14];
  v52 = (void *)(a1 + v51);
  v53 = (void *)(a2 + v51);
  v54 = v12((void *)(a1 + v51), 1, v10);
  v55 = v12(v53, 1, v10);
  if (!v54)
  {
    if (!v55)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v52, v53, v10);
      goto LABEL_32;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v52, v10);
    goto LABEL_31;
  }
  if (v55)
  {
LABEL_31:
    v56 = sub_100005574(&qword_10048D510);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v52, v53, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v52, 0, 1, v10);
LABEL_32:
  v57 = a3[15];
  v58 = *(_QWORD *)(a1 + v57);
  *(_QWORD *)(a1 + v57) = *(_QWORD *)(a2 + v57);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v58);
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  v59 = a3[17];
  v60 = (_QWORD *)(a1 + v59);
  v61 = (_QWORD *)(a2 + v59);
  *v60 = *v61;
  v62 = v60[1];
  v60[1] = v61[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v62);
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  v63 = a3[19];
  v64 = (_QWORD *)(a1 + v63);
  v65 = (_QWORD *)(a2 + v63);
  *v64 = *v65;
  v66 = v64[1];
  v64[1] = v65[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v66);
  return a1;
}

uint64_t sub_1000A8520(uint64_t a1)
{
  sub_10000F7F8(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(_BYTE *)(a1 + 25));
  return a1;
}

uint64_t initializeWithTake for MetricsEvent.Click(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v6 = a3[7];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    v12 = sub_100005574(&qword_10048D510);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  v14 = a3[10];
  v15 = a3[11];
  v16 = (_OWORD *)(a1 + v14);
  v17 = (_OWORD *)(a2 + v14);
  *v16 = *v17;
  *(_OWORD *)((char *)v16 + 10) = *(_OWORD *)((char *)v17 + 10);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  v18 = a3[13];
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  v19 = a3[14];
  v20 = (void *)(a1 + v19);
  v21 = (const void *)(a2 + v19);
  if (v11((const void *)(a2 + v19), 1, v9))
  {
    v22 = sub_100005574(&qword_10048D510);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v20, v21, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v20, 0, 1, v9);
  }
  v23 = a3[16];
  *(_QWORD *)(a1 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  *(_BYTE *)(a1 + v23) = *(_BYTE *)(a2 + v23);
  v24 = a3[18];
  *(_OWORD *)(a1 + a3[17]) = *(_OWORD *)(a2 + a3[17]);
  *(_BYTE *)(a1 + v24) = *(_BYTE *)(a2 + v24);
  *(_OWORD *)(a1 + a3[19]) = *(_OWORD *)(a2 + a3[19]);
  return a1;
}

uint64_t assignWithTake for MetricsEvent.Click(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v8 = a3[7];
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v16 = sub_100005574(&qword_10048D510);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  v17 = a3[8];
  v18 = *(_QWORD *)(a1 + v17);
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);
  swift_bridgeObjectRelease(v18);
  v19 = a3[9];
  v20 = a1 + v19;
  v21 = (_OWORD *)(a2 + v19);
  v22 = *(_QWORD *)(a1 + v19 + 8);
  v23 = *(_QWORD *)(a2 + v19 + 8);
  if (v22 == 9)
  {
LABEL_13:
    *(_OWORD *)v20 = *v21;
    goto LABEL_14;
  }
  if (v23 == 9)
  {
    sub_1000348BC(v20);
    goto LABEL_13;
  }
  if (v22 < 9)
    goto LABEL_13;
  if (v23 < 9)
  {
    sub_100008758(v20, &qword_10048E2B0);
    goto LABEL_13;
  }
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_QWORD *)(v20 + 8) = v23;
  swift_bridgeObjectRelease(v22);
LABEL_14:
  v24 = a3[10];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = *(unsigned __int16 *)(a1 + v24 + 24);
  if (v27 >> 8 > 0xFE)
  {
LABEL_17:
    *(_OWORD *)v25 = *(_OWORD *)v26;
    *(_OWORD *)(v25 + 10) = *(_OWORD *)(v26 + 10);
    goto LABEL_19;
  }
  v28 = *(unsigned __int16 *)(v26 + 24);
  if (v28 >> 8 > 0xFE)
  {
    sub_1000A8520(v25);
    goto LABEL_17;
  }
  v29 = *(_QWORD *)(v26 + 16);
  v30 = *(void **)v25;
  v31 = *(_QWORD *)(v25 + 8);
  v32 = *(_QWORD *)(v25 + 16);
  *(_OWORD *)v25 = *(_OWORD *)v26;
  *(_QWORD *)(v25 + 16) = v29;
  *(_WORD *)(v25 + 24) = v28;
  sub_10000F7F8(v30, v31, v32, v27, SBYTE1(v27));
LABEL_19:
  v33 = a3[11];
  v34 = *(_QWORD *)(a1 + v33);
  *(_QWORD *)(a1 + v33) = *(_QWORD *)(a2 + v33);
  swift_bridgeObjectRelease(v34);
  v35 = a3[12];
  v36 = (_QWORD *)(a1 + v35);
  v37 = (uint64_t *)(a2 + v35);
  v39 = *v37;
  v38 = v37[1];
  v40 = v36[1];
  *v36 = v39;
  v36[1] = v38;
  swift_bridgeObjectRelease(v40);
  v41 = a3[13];
  v42 = (_QWORD *)(a1 + v41);
  v43 = (uint64_t *)(a2 + v41);
  v45 = *v43;
  v44 = v43[1];
  v46 = v42[1];
  *v42 = v45;
  v42[1] = v44;
  swift_bridgeObjectRelease(v46);
  v47 = a3[14];
  v48 = (void *)(a1 + v47);
  v49 = (void *)(a2 + v47);
  v50 = v13((void *)(a1 + v47), 1, v11);
  v51 = v13(v49, 1, v11);
  if (!v50)
  {
    if (!v51)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v48, v49, v11);
      goto LABEL_25;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v48, v11);
    goto LABEL_24;
  }
  if (v51)
  {
LABEL_24:
    v52 = sub_100005574(&qword_10048D510);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v48, v49, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v48, 0, 1, v11);
LABEL_25:
  v53 = a3[15];
  v54 = *(_QWORD *)(a1 + v53);
  *(_QWORD *)(a1 + v53) = *(_QWORD *)(a2 + v53);
  swift_bridgeObjectRelease(v54);
  v55 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  v56 = (_QWORD *)(a1 + v55);
  v57 = (uint64_t *)(a2 + v55);
  v59 = *v57;
  v58 = v57[1];
  v60 = v56[1];
  *v56 = v59;
  v56[1] = v58;
  swift_bridgeObjectRelease(v60);
  v61 = a3[19];
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  v62 = (_QWORD *)(a1 + v61);
  v63 = (uint64_t *)(a2 + v61);
  v65 = *v63;
  v64 = v63[1];
  v66 = v62[1];
  *v62 = v65;
  v62[1] = v64;
  swift_bridgeObjectRelease(v66);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricsEvent.Click(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A8A98);
}

uint64_t sub_1000A8A98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100005574(&qword_10048D510);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for MetricsEvent.Click(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A8B24);
}

uint64_t sub_1000A8B24(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100005574(&qword_10048D510);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

void sub_1000A8B9C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  char *v14;
  void *v15;
  void *v16;
  void *v17;

  v4[0] = &unk_10038A398;
  v4[1] = &unk_10038A3F8;
  v4[2] = &unk_10038A410;
  sub_1000A78BC(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v6 = &unk_10038A3B0;
    v7 = &unk_10038A428;
    v8 = &unk_10038A440;
    v9 = &unk_10038A3B0;
    v10 = &unk_10038A3C8;
    v11 = &unk_10038A3C8;
    v12 = v5;
    v13 = &unk_10038A3B0;
    v14 = (char *)&value witness table for Builtin.Int8 + 64;
    v15 = &unk_10038A3C8;
    v16 = &unk_10038A458;
    v17 = &unk_10038A3C8;
    swift_initStructMetadata(a1, 256, 16, v4, a1 + 16);
  }
}

uint64_t getEnumTagSinglePayload for MetricsEvent.Click.ActionType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xD1)
    goto LABEL_17;
  if (a2 + 47 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 47) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 47;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 47;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 47;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x30;
  v8 = v6 - 48;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MetricsEvent.Click.ActionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 47 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 47) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xD1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xD0)
    return ((uint64_t (*)(void))((char *)&loc_1000A8D4C + 4 * byte_10038A0AF[v4]))();
  *a1 = a2 + 47;
  return ((uint64_t (*)(void))((char *)sub_1000A8D80 + 4 * byte_10038A0AA[v4]))();
}

uint64_t sub_1000A8D80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A8D88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A8D90);
  return result;
}

uint64_t sub_1000A8D9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A8DA4);
  *(_BYTE *)result = a2 + 47;
  return result;
}

uint64_t sub_1000A8DA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A8DB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MetricsEvent.Click.ActionType()
{
  return &type metadata for MetricsEvent.Click.ActionType;
}

unint64_t destroy for MetricsEvent.Click.ActionContext(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t _s9MusicCore12MetricsEventV5ClickV13ActionContextOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain(v3);
  }
  return a1;
}

_QWORD *assignWithCopy for MetricsEvent.Click.ActionContext(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[1];
  v5 = a2[1];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_7;
  }
  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for MetricsEvent.Click.ActionContext(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 < 0xFFFFFFFF)
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricsEvent.Click.ActionContext(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFF6 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483639);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 8;
  if (v4 >= 0xA)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MetricsEvent.Click.ActionContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFF7)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483639;
    if (a3 >= 0x7FFFFFF7)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFF7)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 8;
  }
  return result;
}

uint64_t sub_1000A8FD8(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_1000A8FF0(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for MetricsEvent.Click.ActionContext()
{
  return &type metadata for MetricsEvent.Click.ActionContext;
}

void *destroy for MetricsEvent.Click.ActionDetails(uint64_t a1)
{
  return sub_10000F7F8(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(_BYTE *)(a1 + 25));
}

uint64_t initializeWithCopy for MetricsEvent.Click.ActionDetails(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 25);
  v7 = *(unsigned __int8 *)(a2 + 24);
  sub_1000355D8(*(id *)a2, v4, v5, v7, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 25) = v6;
  return a1;
}

uint64_t assignWithCopy for MetricsEvent.Click.ActionDetails(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 25);
  v7 = *(unsigned __int8 *)(a2 + 24);
  sub_1000355D8(*(id *)a2, v4, v5, v7, v6);
  v8 = *(void **)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v11 = *(unsigned __int8 *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v7;
  v12 = *(_BYTE *)(a1 + 25);
  *(_BYTE *)(a1 + 25) = v6;
  sub_10000F7F8(v8, v9, v10, v11, v12);
  return a1;
}

__n128 initializeWithTake for MetricsEvent.Click.ActionDetails(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for MetricsEvent.Click.ActionDetails(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int16 v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_WORD *)(a2 + 24);
  v5 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 25);
  v9 = *(unsigned __int8 *)(a1 + 24);
  *(_WORD *)(a1 + 24) = v4;
  sub_10000F7F8(v5, v7, v6, v9, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricsEvent.Click.ActionDetails(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 26))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 25);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MetricsEvent.Click.ActionDetails(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 26) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 26) = 0;
    if (a2)
      *(_BYTE *)(result + 25) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000A9210(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 25) <= 3u)
    return *(unsigned __int8 *)(a1 + 25);
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t sub_1000A9228(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 4;
    LOBYTE(a2) = 4;
    *(_BYTE *)(result + 24) = 0;
  }
  *(_BYTE *)(result + 25) = a2;
  return result;
}

ValueMetadata *type metadata accessor for MetricsEvent.Click.ActionDetails()
{
  return &type metadata for MetricsEvent.Click.ActionDetails;
}

id *destroy for MetricsEvent.Click.ActionDetails.SearchSource(id *result)
{
  id *v1;

  if ((unint64_t)*result >= 0xFFFFFFFF)
  {
    v1 = result;

    return (id *)swift_bridgeObjectRelease(v1[2]);
  }
  return result;
}

uint64_t _s9MusicCore12MetricsEventV5ClickV13ActionDetailsO12SearchSourceOwCP_0(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v3 = *(void **)a2;
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    v6 = v3;
    swift_bridgeObjectRetain(v5);
  }
  return a1;
}

uint64_t assignWithCopy for MetricsEvent.Click.ActionDetails.SearchSource(uint64_t a1, __int128 *a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  __int128 v11;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  if (*(_QWORD *)a1 < 0xFFFFFFFFuLL)
  {
    if ((unint64_t)v5 >= 0xFFFFFFFF)
    {
      *(_QWORD *)a1 = v5;
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      v9 = *((_QWORD *)a2 + 2);
      *(_QWORD *)(a1 + 16) = v9;
      v10 = v5;
      swift_bridgeObjectRetain(v9);
      return a1;
    }
LABEL_7:
    v11 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v11;
    return a1;
  }
  if ((unint64_t)v5 < 0xFFFFFFFF)
  {

    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
    goto LABEL_7;
  }
  *(_QWORD *)a1 = v5;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
  v7 = *((_QWORD *)a2 + 2);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

__n128 initializeWithTake for MetricsEvent.Click.ActionDetails.SearchSource(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for MetricsEvent.Click.ActionDetails.SearchSource(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(void **)a1;
  if (*(_QWORD *)a1 < 0xFFFFFFFFuLL)
    goto LABEL_5;
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {

    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricsEvent.Click.ActionDetails.SearchSource(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MetricsEvent.Click.ActionDetails.SearchSource(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

_QWORD *sub_1000A94F8(_QWORD *result, int a2)
{
  uint64_t v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
    result[1] = 0;
    result[2] = 0;
  }
  else
  {
    if (!a2)
      return result;
    v2 = (a2 - 1);
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for MetricsEvent.Click.ActionDetails.SearchSource()
{
  return &type metadata for MetricsEvent.Click.ActionDetails.SearchSource;
}

uint64_t destroy for MetricsEvent.LoadUrl(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[21]);
  swift_bridgeObjectRelease(a1[24]);
  swift_bridgeObjectRelease(a1[26]);
  swift_bridgeObjectRelease(a1[28]);
  swift_bridgeObjectRelease(a1[30]);
  swift_bridgeObjectRelease(a1[32]);
  return swift_bridgeObjectRelease(a1[37]);
}

uint64_t initializeWithCopy for MetricsEvent.LoadUrl(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v3 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v3;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v4 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v4;
  *(_WORD *)(a1 + 176) = *(_WORD *)(a2 + 176);
  v5 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v5;
  v6 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v6;
  v7 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v7;
  v8 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v8;
  v9 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v9;
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  v10 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v10;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t assignWithCopy for MetricsEvent.LoadUrl(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = a2[6];
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  v8 = a2[8];
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_QWORD *)(a1 + 64) = v8;
  v9 = a2[10];
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  *(_QWORD *)(a1 + 80) = v9;
  v10 = a2[12];
  *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
  *(_QWORD *)(a1 + 96) = v10;
  v11 = a2[14];
  *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
  *(_QWORD *)(a1 + 112) = v11;
  v12 = a2[16];
  *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
  *(_QWORD *)(a1 + 128) = v12;
  v13 = a2[18];
  *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
  *(_QWORD *)(a1 + 144) = v13;
  *(_QWORD *)(a1 + 160) = a2[20];
  v14 = a2[21];
  v15 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 176) = *((_BYTE *)a2 + 176);
  *(_BYTE *)(a1 + 177) = *((_BYTE *)a2 + 177);
  *(_QWORD *)(a1 + 184) = a2[23];
  v16 = a2[24];
  v17 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_QWORD *)(a1 + 200) = a2[25];
  v18 = a2[26];
  v19 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(_QWORD *)(a1 + 216) = a2[27];
  v20 = a2[28];
  v21 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(_QWORD *)(a1 + 232) = a2[29];
  v22 = a2[30];
  v23 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  *(_QWORD *)(a1 + 248) = a2[31];
  v24 = a2[32];
  v25 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  *(_QWORD *)(a1 + 264) = a2[33];
  *(_QWORD *)(a1 + 272) = a2[34];
  *(_QWORD *)(a1 + 280) = a2[35];
  *(_QWORD *)(a1 + 288) = a2[36];
  v26 = a2[37];
  v27 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  return a1;
}

void *initializeWithTake for MetricsEvent.LoadUrl(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x130uLL);
}

uint64_t assignWithTake for MetricsEvent.LoadUrl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v5 = *(_QWORD *)(a2 + 168);
  v6 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v5;
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_BYTE *)(a1 + 177) = *(_BYTE *)(a2 + 177);
  v7 = *(_QWORD *)(a2 + 192);
  v8 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v7;
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 208);
  v10 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v9;
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a2 + 224);
  v12 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v11;
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a2 + 240);
  v14 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v13;
  swift_bridgeObjectRelease(v14);
  v15 = *(_QWORD *)(a2 + 256);
  v16 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v15;
  swift_bridgeObjectRelease(v16);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  v17 = *(_QWORD *)(a2 + 296);
  v18 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v17;
  swift_bridgeObjectRelease(v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricsEvent.LoadUrl(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 304))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 168);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MetricsEvent.LoadUrl(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 296) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 304) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 304) = 0;
    if (a2)
      *(_QWORD *)(result + 168) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MetricsEvent.LoadUrl()
{
  return &type metadata for MetricsEvent.LoadUrl;
}

void destroy for MetricsEvent.ComponentRender(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));

}

uint64_t initializeWithCopy for MetricsEvent.ComponentRender(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(void **)(a2 + 24);
  v5 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(void **)(a2 + 40);
  v7 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  v8 = *(void **)(a2 + 56);
  v9 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v9;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  swift_bridgeObjectRetain(v3);
  v10 = v4;
  v11 = v5;
  v12 = v6;
  v13 = v7;
  v14 = v8;
  v15 = v9;
  return a1;
}

uint64_t assignWithCopy for MetricsEvent.ComponentRender(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  id v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(void **)(a1 + 24);
  v7 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = v7;

  v9 = *(void **)(a1 + 32);
  v10 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v10;
  v11 = v10;

  v12 = *(void **)(a1 + 40);
  v13 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v13;
  v14 = v13;

  v15 = *(void **)(a2 + 48);
  v16 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v15;
  v17 = v15;

  v18 = *(void **)(a1 + 56);
  v19 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v19;
  v20 = v19;

  v21 = *(void **)(a1 + 64);
  v22 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v22;
  v23 = v22;

  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

__n128 initializeWithTake for MetricsEvent.ComponentRender(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for MetricsEvent.ComponentRender(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);

  v6 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  v7 = *(void **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);

  v8 = *(void **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);

  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricsEvent.ComponentRender(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 73))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MetricsEvent.ComponentRender(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 73) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MetricsEvent.ComponentRender()
{
  return &type metadata for MetricsEvent.ComponentRender;
}

uint64_t storeEnumTagSinglePayload for MetricsEvent.ComponentRender.PreloadStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000A9E64 + 4 * byte_10038A0B9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000A9E98 + 4 * byte_10038A0B4[v4]))();
}

uint64_t sub_1000A9E98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A9EA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A9EA8);
  return result;
}

uint64_t sub_1000A9EB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A9EBCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000A9EC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A9EC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MetricsEvent.ComponentRender.PreloadStatus()
{
  return &type metadata for MetricsEvent.ComponentRender.PreloadStatus;
}

uint64_t sub_1000A9EE4()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_1000A9F08(void *a1)
{
  uint64_t v1;

  return sub_1000A4650(a1, v1);
}

void sub_1000A9F10()
{
  uint64_t v0;

  sub_1000C3CF0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void ***)(v0 + 32));
}

uint64_t sub_1000A9F2C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000A472C(a1, v1);
}

void sub_1000A9F38()
{
  uint64_t v0;

  sub_1000A46D4(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000A9F40()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000A9F6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_10049071C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10000EA88;
  v3[11] = v2;
  return swift_task_switch(sub_1000A491C, 0, 0);
}

uint64_t sub_1000A9FD0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A9FFC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000AA03C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000AA060()
{
  uint64_t v0;

  sub_1000A343C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), (uint64_t)&OBJC_IVAR____TtC9MusicCore26MetricsReportingController_pageRenderEventSampler, (uint64_t (*)(void *))sub_10009BEB0);
}

void sub_1000AA088()
{
  uint64_t v0;

  sub_1000A343C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), (uint64_t)&OBJC_IVAR____TtC9MusicCore26MetricsReportingController_componentRenderEventSampler, (uint64_t (*)(void *))sub_10009BA7C);
}

void sub_1000AA0B0()
{
  uint64_t v0;

  sub_1000A2124(*(void **)(v0 + 16));
}

void sub_1000AA0B8()
{
  uint64_t v0;

  sub_1000A4EA8(*(void **)(v0 + 24), (uint64_t)CFRange.init(_:), 0);
}

uint64_t sub_1000AA164(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v5 = ActionType.rawValue.getter(*(_BYTE *)(a2 + 32));
  v7 = v6;
  v8 = ActionType.rawValue.getter(a1);
  if (v5 == v8 && v7 == v9)
  {
LABEL_20:
    swift_bridgeObjectRelease_n(v7, 2);
    return 1;
  }
  v11 = v9;
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v7);
  result = swift_bridgeObjectRelease(v11);
  if ((v12 & 1) != 0)
  {
LABEL_7:
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  if (v2 == 1)
  {
LABEL_17:
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  v14 = 33;
  while (1)
  {
    v15 = v14 - 31;
    if (__OFADD__(v14 - 32, 1))
      break;
    v16 = ActionType.rawValue.getter(*(_BYTE *)(a2 + v14));
    v7 = v17;
    v18 = ActionType.rawValue.getter(a1);
    if (v16 == v18 && v7 == v19)
    {
      swift_bridgeObjectRelease(a2);
      goto LABEL_20;
    }
    v21 = v19;
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v7, v18, v19, 0);
    swift_bridgeObjectRelease(v7);
    result = swift_bridgeObjectRelease(v21);
    if ((v22 & 1) != 0)
      goto LABEL_7;
    ++v14;
    if (v15 == v2)
      goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000AA2B8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  if (v7 == a1 && v8 == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0);
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v11 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v13 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v14 = *(v11 - 1);
    v15 = *v11;
    v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0) & 1) != 0)
      return 1;
    result = 0;
    v11 += 2;
    if (v13 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000AA37C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  _BOOL8 v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 5; ; ++i)
  {
    v4 = i - 3;
    if (__OFADD__(i - 4, 1))
      break;
    v6 = *(_QWORD *)(a2 + 8 * i) == result;
    v5 = v6;
    v6 = v6 || v4 == v2;
    if (v6)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000AA3E0(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
  {
    swift_bridgeObjectRetain(a2);
    __asm { BR              X9 }
  }
  return 0;
}

double Double.toMilliseconds.getter(double a1)
{
  return a1 * 1000.0;
}

uint64_t MetricsPageProperties.init(pageIdentifier:pageType:pageURL:pageDetails:extRefUrl:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t result;

  v16 = (int *)type metadata accessor for MetricsPageProperties(0);
  v17 = (uint64_t)a9 + v16[6];
  v18 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v19 = v16[7];
  *(_QWORD *)((char *)a9 + v19) = 0;
  v20 = (_QWORD *)((char *)a9 + v16[8]);
  *v20 = 0;
  v20[1] = 0;
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  sub_1000A64CC(a5, v17);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a9 + v19));
  *(_QWORD *)((char *)a9 + v19) = a6;
  result = swift_bridgeObjectRelease(v20[1]);
  *v20 = a7;
  v20[1] = a8;
  return result;
}

uint64_t type metadata accessor for MetricsPageProperties(uint64_t a1)
{
  uint64_t result;

  result = qword_1004907A0;
  if (!qword_1004907A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MetricsPageProperties);
  return result;
}

uint64_t sub_1000AA81C(void *a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  __n128 v16;
  void *v17;
  id v18;
  Swift::Int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  uint64_t v25;
  void **aBlock;
  unint64_t v27;
  uint64_t (*v28)(uint64_t);
  void *v29;
  uint64_t (*v30)();
  uint64_t v31;
  unsigned __int8 v32;

  objc_opt_self(MPModelGenericObject);
  v2 = (void *)swift_dynamicCastObjCClass(a1);
  if (v2)
  {
    v3 = objc_msgSend(v2, "innermostModelObject");
LABEL_3:
    v4 = sub_1000AA81C(v3);

    v5 = 0;
    v6 = 0;
LABEL_8:
    v32 = v4;
LABEL_9:
    sub_10003A5C8((uint64_t)v5, v6);
    return v4;
  }
  objc_opt_self(MPModelArtist);
  if (swift_dynamicCastObjCClass(a1))
  {

    v5 = 0;
    v6 = 0;
    v4 = 3;
    goto LABEL_8;
  }
  objc_opt_self(MPModelSocialPerson);
  if (swift_dynamicCastObjCClass(a1))
  {

    v5 = 0;
    v6 = 0;
    v4 = 4;
    goto LABEL_8;
  }
  objc_opt_self(MPModelAlbum);
  if (swift_dynamicCastObjCClass(a1))
  {

    v4 = 0;
    v5 = 0;
    v6 = 0;
    v32 = 0;
    goto LABEL_9;
  }
  objc_opt_self(MPModelComposer);
  if (swift_dynamicCastObjCClass(a1))
  {

    v5 = 0;
    v6 = 0;
    v4 = 8;
    goto LABEL_8;
  }
  objc_opt_self(MPModelCurator);
  if (swift_dynamicCastObjCClass(a1))
  {

    v5 = 0;
    v6 = 0;
    v4 = 10;
    goto LABEL_8;
  }
  objc_opt_self(MPModelGenre);
  if (swift_dynamicCastObjCClass(a1))
  {

    v5 = 0;
    v6 = 0;
    v4 = 11;
    goto LABEL_8;
  }
  objc_opt_self(MPModelPlaylist);
  if (swift_dynamicCastObjCClass(a1))
  {

    v5 = 0;
    v6 = 0;
    v4 = 1;
    goto LABEL_8;
  }
  objc_opt_self(MPModelRadioStation);
  if (swift_dynamicCastObjCClass(a1))
  {

    v5 = 0;
    v6 = 0;
    v4 = 12;
    goto LABEL_8;
  }
  objc_opt_self(MPModelSong);
  v8 = swift_dynamicCastObjCClass(a1);
  if (v8)
  {
    v9 = v8;
    v32 = 2;
    v10 = (void *)objc_opt_self(MPModelObject);
    v11 = swift_allocObject(&unk_100448388, 32, 7);
    *(_QWORD *)(v11 + 16) = v9;
    *(_QWORD *)(v11 + 24) = &v32;
    v12 = swift_allocObject(&unk_1004483B0, 32, 7);
    *(_QWORD *)(v12 + 16) = sub_1000B03E4;
    *(_QWORD *)(v12 + 24) = v11;
    v25 = v11;
    v30 = sub_1000B0290;
    v31 = v12;
    aBlock = _NSConcreteStackBlock;
    v27 = 1107296256;
    v28 = sub_100009BD0;
    v29 = &unk_1004483C8;
    v13 = _Block_copy(&aBlock);
    v14 = v31;
    v15 = a1;
    swift_retain(v12);
    objc_msgSend(v10, "performWithoutEnforcement:", v13, swift_release(v14).n128_f64[0]);

    _Block_release(v13);
    LOBYTE(v15) = swift_isEscapingClosureAtFileLocation(v12, "", 127, 609, 53, 1, v16);
    swift_release(v12);
    if ((v15 & 1) == 0)
    {
      v5 = sub_1000B03E4;
      v4 = v32;
      v6 = v25;
      goto LABEL_9;
    }
    __break(1u);
  }
  else
  {
    objc_opt_self(MPModelTVShow);
    if (swift_dynamicCastObjCClass(a1))
    {

      v5 = 0;
      v6 = 0;
      v4 = 6;
      goto LABEL_8;
    }
    objc_opt_self(MPModelTVEpisode);
    if (swift_dynamicCastObjCClass(a1))
    {

      v5 = 0;
      v6 = 0;
      v4 = 7;
      goto LABEL_8;
    }
    objc_opt_self(MPModelMovie);
    if (swift_dynamicCastObjCClass(a1))
    {

      v5 = 0;
      v6 = 0;
      v4 = 5;
      goto LABEL_8;
    }
    objc_opt_self(MPModelPlaylistEntry);
    v17 = (void *)swift_dynamicCastObjCClass(a1);
    if (v17)
    {
      v18 = objc_msgSend(v17, "innermostModelObject");
      objc_opt_self(MPModelPlaylistEntry);
      if (swift_dynamicCastObjCClass(v18))
      {

        v5 = 0;
        v6 = 0;
        v4 = 17;
        goto LABEL_8;
      }
      v3 = v18;
      goto LABEL_3;
    }
    objc_opt_self(MPModelRecordLabel);
    if (swift_dynamicCastObjCClass(a1))
    {

      v5 = 0;
      v6 = 0;
      v4 = 19;
      goto LABEL_8;
    }
    objc_opt_self(MPModelCreditsArtist);
    if (swift_dynamicCastObjCClass(a1))
    {

      v5 = 0;
      v6 = 0;
      v4 = 9;
      goto LABEL_8;
    }
  }
  aBlock = 0;
  v27 = 0xE000000000000000;
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease(v27);
  aBlock = (void **)0xD00000000000002BLL;
  v27 = 0x80000001003AF200;
  v19 = sub_1001CE00C((uint64_t)&off_10043C658);
  MPModelObject.humanDescription(including:)(v19);
  v21 = v20;
  v23 = v22;
  swift_bridgeObjectRelease(v19);
  v24._countAndFlagsBits = v21;
  v24._object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v23);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, aBlock, v27, "MusicCore/MetricsUtilities.swift", 32, 2, 635, 0);
  __break(1u);
  return result;
}

uint64_t MetricsContentType.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000AADB0 + 4 * byte_10038A50A[a1]))(0x6D75626C61, 0xE500000000000000);
}

uint64_t sub_1000AADB0()
{
  return 0x7473696C79616C70;
}

uint64_t sub_1000AAF3C()
{
  return 0x497972617262696CLL;
}

uint64_t sub_1000AAF5C()
{
  return 0x614C64726F636572;
}

BOOL sub_1000AAF7C()
{
  void *v0;
  uint64_t ObjectType;
  void *v2;
  void *ObjCClassFromMetadata;
  double v4;
  double v5;
  double v6;
  _BOOL8 result;

  ObjectType = swift_getObjectType(v0);
  result = 1;
  if (!objc_msgSend(v0, "cachedResponse")
    || (v2 = (void *)swift_getObjCClassFromMetadata(ObjectType),
        objc_msgSend(v0, "xpSamplingPercentageCachedResponses"),
        (objc_msgSend(v2, "shouldReportCachedEventWithSamplingPercentage:") & 1) == 0))
  {
    if ((objc_msgSend(v0, "cachedResponse") & 1) != 0)
      return 0;
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(ObjectType);
    objc_msgSend(v0, "xpSessionDuration");
    v5 = v4;
    objc_msgSend(v0, "xpSamplingPercentageUsers");
    if ((objc_msgSend(ObjCClassFromMetadata, "shouldCollectTimingDataWithSessionDuration:samplingPercentage:", v5, v6) & 1) == 0)return 0;
  }
  return result;
}

id ModelObjectBackedStoreItemMetadata.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

id Double.toMillisecondsInServerTime.getter(double a1)
{
  id v1;
  id v2;

  v1 = objc_msgSend((id)objc_opt_self(AMSMetrics), "serverTimeFromTimeInterval:", a1);
  v2 = objc_msgSend(v1, "unsignedLongLongValue");

  return v2;
}

uint64_t sub_1000AB0E0()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v4;
  _OWORD v5[2];
  _BYTE v6[24];
  uint64_t v7;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "propertyForBodyKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_1000AEB5C((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    if (swift_dynamicCast(&v4, v6, (char *)&type metadata for Any + 8, &type metadata for String, 6))
      return v4;
    else
      return 0;
  }
  else
  {
    sub_100008758((uint64_t)v6, &qword_100491B90);
    return 0;
  }
}

uint64_t SharePlayTogetherSession.Participant.displayName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 24));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t MetricsPageProperties.pageURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for MetricsPageProperties(0);
  return sub_100014A7C(v1 + *(int *)(v3 + 24), a1, &qword_10048D510);
}

uint64_t MetricsPageProperties.pageURL.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for MetricsPageProperties(0) + 24);
  return sub_1000A64CC(a1, v3);
}

CFRange (__swiftcall *MetricsPageProperties.pageURL.modify())(__C::_NSRange)
{
  type metadata accessor for MetricsPageProperties(0);
  return CFRange.init(_:);
}

uint64_t MetricsPageProperties.pageDetails.getter()
{
  type metadata accessor for MetricsPageProperties(0);
  return swift_bridgeObjectRetain();
}

uint64_t MetricsPageProperties.pageDetails.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for MetricsPageProperties(0) + 28);
  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + v3));
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

CFRange (__swiftcall *MetricsPageProperties.pageDetails.modify())(__C::_NSRange)
{
  type metadata accessor for MetricsPageProperties(0);
  return CFRange.init(_:);
}

uint64_t MetricsPageProperties.extRefUrl.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for MetricsPageProperties(0) + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricsPageProperties.extRefUrl.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for MetricsPageProperties(0) + 32));
  result = swift_bridgeObjectRelease(v5[1]);
  *v5 = a1;
  v5[1] = a2;
  return result;
}

CFRange (__swiftcall *MetricsPageProperties.extRefUrl.modify())(__C::_NSRange)
{
  type metadata accessor for MetricsPageProperties(0);
  return CFRange.init(_:);
}

uint64_t sub_1000AB3C4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = MetricsContentType.rawValue.getter(*a1);
  v5 = v4;
  v6 = MetricsContentType.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_1000AB44C()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6);
  v2 = MetricsContentType.rawValue.getter(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000AB4AC(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = MetricsContentType.rawValue.getter(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000AB4EC()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6);
  v2 = MetricsContentType.rawValue.getter(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000AB548@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s9MusicCore18MetricsContentTypeO8rawValueACSgSS_tcfC_0(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_1000AB574@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = MetricsContentType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

char *sub_1000AB59C()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD v20[5];
  __int128 v21;
  __int128 v22;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "valueForConfigurationKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    v21 = 0u;
    v22 = 0u;
  }
  sub_1000AEB5C((uint64_t)&v21, (uint64_t)v20);
  if (!v20[3])
  {
    sub_100008758((uint64_t)v20, &qword_100491B90);
    return 0;
  }
  v3 = sub_100005574(&qword_100490848);
  if ((swift_dynamicCast(&v18, v20, (char *)&type metadata for Any + 8, v3, 6) & 1) == 0)
    return 0;
  v4 = *(_QWORD *)(v18 + 16);
  if (v4)
  {
    v17 = v18;
    v5 = v18 + 32;
    v6 = (char *)_swiftEmptyArrayStorage;
    do
    {
      sub_10000684C(v5, (uint64_t)v20);
      v7 = sub_100005574((uint64_t *)&unk_100490B50);
      if ((swift_dynamicCast(&v21, v20, (char *)&type metadata for Any + 8, v7, 6) & 1) != 0)
      {
        v8 = v21;
        v18 = 0x6D614E646C656966;
        v19 = 0xE900000000000065;
        AnyHashable.init<A>(_:)(v20, &v18, &type metadata for String, &protocol witness table for String);
        if (*(_QWORD *)(v8 + 16) && (v9 = sub_1000A580C((uint64_t)v20), (v10 & 1) != 0))
        {
          sub_10000684C(*(_QWORD *)(v8 + 56) + 32 * v9, (uint64_t)&v21);
        }
        else
        {
          v21 = 0u;
          v22 = 0u;
        }
        swift_bridgeObjectRelease(v8);
        sub_10009B178((uint64_t)v20);
        if (*((_QWORD *)&v22 + 1))
        {
          if ((swift_dynamicCast(&v18, &v21, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
          {
            v11 = v18;
            v12 = v19;
            if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
              v6 = sub_10003DE28(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
            v14 = *((_QWORD *)v6 + 2);
            v13 = *((_QWORD *)v6 + 3);
            if (v14 >= v13 >> 1)
              v6 = sub_10003DE28((char *)(v13 > 1), v14 + 1, 1, v6);
            *((_QWORD *)v6 + 2) = v14 + 1;
            v15 = &v6[16 * v14];
            *((_QWORD *)v15 + 4) = v11;
            *((_QWORD *)v15 + 5) = v12;
          }
        }
        else
        {
          sub_100008758((uint64_t)&v21, &qword_100491B90);
        }
      }
      v5 += 32;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease(v17);
  }
  else
  {
    swift_bridgeObjectRelease(v18);
    return (char *)_swiftEmptyArrayStorage;
  }
  return v6;
}

uint64_t SSMetricsMutableEvent.dictionaryRepresentation.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v4;

  v1 = objc_msgSend(objc_allocWithZone((Class)NSMutableDictionary), "init");
  objc_msgSend(v0, "appendPropertiesToBody:", v1);
  v4 = 0;
  v2 = v1;
  static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

  return v4;
}

uint64_t sub_1000AB8F8(void *a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  void *v2;
  NSString v5;
  NSString v6;
  NSString v7;
  id v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSString v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v21[2];
  _QWORD v22[3];
  uint64_t v23;

  v5 = String._bridgeToObjectiveC()();
  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setProperty:forBodyKey:", v5, v6);

  if (!a1)
    goto LABEL_7;
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(a1, "valueForConfigurationKey:", v7);

  if (v8)
  {
    _bridgeAnyObjectToAny(_:)(v8);
    swift_unknownObjectRelease(v8);
  }
  else
  {
    memset(v21, 0, sizeof(v21));
  }
  sub_1000AEB5C((uint64_t)v21, (uint64_t)v22);
  v9 = v23;
  if (v23)
  {
    v10 = sub_10000ABC8(v22, v23);
    v11 = *(_QWORD *)(v9 - 8);
    __chkstk_darwin(v10);
    v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v11 + 16))(v13);
    v14 = _bridgeAnythingToObjectiveC<A>(_:)(v13, v9);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v9);
    sub_10000682C(v22);
  }
  else
  {
LABEL_7:
    v14 = 0;
  }
  v15 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setProperty:forBodyKey:", v14, v15);
  swift_unknownObjectRelease(v14);

  return a2(v16, v17, v18, v19);
}

double sub_1000ABAFC(void *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  double result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD aBlock[5];
  _QWORD *v34;

  v4 = v3;
  v27 = a2;
  v28 = a3;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v29 = *(_QWORD *)(v9 - 8);
  v30 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS.QoSClass(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000087DC(0, (unint64_t *)&qword_100490BC0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for DispatchQoS.QoSClass.userInitiated(_:), v12);
  v16 = (void *)static OS_dispatch_queue.global(qos:)(v15);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v17 = (_QWORD *)swift_allocObject(&unk_100448270, 48, 7);
  v17[2] = a1;
  v17[3] = v3;
  v18 = v28;
  v17[4] = v27;
  v17[5] = v18;
  aBlock[4] = sub_1000B033C;
  v34 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000BED80;
  aBlock[3] = &unk_100448288;
  v19 = _Block_copy(aBlock);
  v20 = a1;
  v21 = v4;
  swift_retain(v18);
  static DispatchQoS.unspecified.getter(v22);
  v32 = _swiftEmptyArrayStorage;
  v23 = sub_100006924((unint64_t *)&qword_1004921B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_100005574(&qword_100490838);
  v25 = sub_1000B0348();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v24, v25, v6, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v30);
  *(_QWORD *)&result = swift_release(v34).n128_u64[0];
  return result;
}

void sub_1000ABD74(uint64_t a1, void *a2, void (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  double v16;
  id v17;
  id v18;
  NSString v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t *v45;
  void (*v46)(uint64_t);
  uint64_t v47;
  int64_t v48;
  unint64_t v49;

  v5 = _s9MusicCore18DeviceCapabilitiesO9diskUsageSDyAC04DiskF8CategoryOs5Int64VGvgZ_0();
  v6 = sub_10009B280((uint64_t)&off_10043DFA8);
  v7 = sub_100005574(&qword_100490840);
  swift_arrayDestroy(&unk_10043DFC8, 5, v7);
  v46 = a3;
  if (a1 && (v8 = sub_1000AB59C()) != 0)
  {
    v9 = v8;
  }
  else
  {
    swift_bridgeObjectRelease(0);
    v9 = (char *)_swiftEmptyArrayStorage;
  }
  v10 = 0;
  v11 = v6 + 64;
  v12 = 1 << *(_BYTE *)(v6 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v6 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  v45 = (uint64_t *)(v9 + 72);
  v48 = v15;
  v49 = v6;
  while (1)
  {
    do
    {
      do
      {
        while (v14)
        {
          v20 = __clz(__rbit64(v14));
          v14 &= v14 - 1;
          v21 = v20 | (v10 << 6);
          if (*(_QWORD *)(v5 + 16))
            goto LABEL_28;
        }
        v22 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
LABEL_53:
          __break(1u);
          goto LABEL_54;
        }
        if (v22 >= v15)
          goto LABEL_51;
        v23 = *(_QWORD *)(v11 + 8 * v22);
        ++v10;
        if (!v23)
        {
          v10 = v22 + 1;
          if (v22 + 1 >= v15)
            goto LABEL_51;
          v23 = *(_QWORD *)(v11 + 8 * v10);
          if (!v23)
          {
            v10 = v22 + 2;
            if (v22 + 2 >= v15)
              goto LABEL_51;
            v23 = *(_QWORD *)(v11 + 8 * v10);
            if (!v23)
            {
              v24 = v22 + 3;
              if (v24 >= v15)
              {
LABEL_51:
                swift_bridgeObjectRelease(v5);
                swift_release(v6);
                v44 = swift_bridgeObjectRelease(v9);
                v46(v44);
                return;
              }
              v23 = *(_QWORD *)(v11 + 8 * v24);
              if (!v23)
              {
                while (1)
                {
                  v10 = v24 + 1;
                  if (__OFADD__(v24, 1))
                    goto LABEL_53;
                  if (v10 >= v15)
                    goto LABEL_51;
                  v23 = *(_QWORD *)(v11 + 8 * v10);
                  ++v24;
                  if (v23)
                    goto LABEL_27;
                }
              }
              v10 = v24;
            }
          }
        }
LABEL_27:
        v14 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v10 << 6);
      }
      while (!*(_QWORD *)(v5 + 16));
LABEL_28:
      v25 = (uint64_t *)(*(_QWORD *)(v6 + 56) + 16 * v21);
      v27 = *v25;
      v26 = v25[1];
      v28 = sub_1000A583C(*(_BYTE *)(*(_QWORD *)(v6 + 48) + v21));
    }
    while ((v29 & 1) == 0);
    v16 = (double)(*(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28) / 0x100000);
    v30 = *((_QWORD *)v9 + 2);
    if (v30)
      break;
LABEL_10:
    v17 = objc_allocWithZone((Class)NSNumber);
    swift_bridgeObjectRetain();
    v18 = objc_msgSend(v17, "initWithDouble:", v16);
    v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v26);
    objc_msgSend(a2, "setProperty:forBodyKey:", v18, v19);

  }
  v31 = v11;
  v32 = *((_QWORD *)v9 + 4);
  v33 = *((_QWORD *)v9 + 5);
  v34 = v9;
  v35 = v32 == v27 && v33 == v26;
  if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)(v32, v33, v27, v26, 0) & 1) != 0)
    goto LABEL_8;
  if (v30 == 1)
    goto LABEL_9;
  v36 = *((_QWORD *)v9 + 6);
  v37 = *((_QWORD *)v9 + 7);
  v38 = v36 == v27 && v37 == v26;
  if (v38 || (_stringCompareWithSmolCheck(_:_:expecting:)(v36, v37, v27, v26, 0) & 1) != 0)
  {
LABEL_8:
    v16 = floor(v16 / 100.0) * 100.0;
LABEL_9:
    v9 = v34;
    v11 = v31;
    v15 = v48;
    v6 = v49;
    goto LABEL_10;
  }
  if (v30 == 2)
    goto LABEL_9;
  v39 = v45;
  v40 = 2;
  while (!__OFADD__(v40, 1))
  {
    v41 = *(v39 - 1);
    v42 = *v39;
    if (v41 == v27 && v42 == v26)
      goto LABEL_8;
    v47 = v40 + 1;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v41, v42, v27, v26, 0) & 1) != 0)
      goto LABEL_8;
    v39 += 2;
    ++v40;
    if (v47 == v30)
      goto LABEL_9;
  }
LABEL_54:
  __break(1u);
}

void sub_1000AC0E0(void *a1, _QWORD *a2, void (*a3)(void), uint64_t a4)
{
  void *v4;
  void *v7;
  uint64_t v9;
  void (*v10)(void **, _QWORD *);
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  id v15;
  _QWORD v16[2];
  void *v17;
  _QWORD *v18;

  v18 = a2;
  if (a2[2])
  {
    v7 = v4;
    v10 = (void (*)(void **, _QWORD *))a2[4];
    v9 = a2[5];
    swift_bridgeObjectRetain();
    swift_retain(v9);
    sub_10004028C(0, 1);
    v11 = v18;
    v12 = (_QWORD *)swift_allocObject(&unk_1004481F8, 56, 7);
    v12[2] = v7;
    v12[3] = a1;
    v12[4] = v11;
    v12[5] = a3;
    v12[6] = a4;
    v17 = a1;
    v13 = swift_allocObject(&unk_100448220, 32, 7);
    *(_QWORD *)(v13 + 16) = sub_1000B028C;
    *(_QWORD *)(v13 + 24) = v12;
    v16[0] = sub_1000B04E0;
    v16[1] = v13;
    v14 = a1;
    swift_retain(a4);
    swift_retain(v12);
    v15 = v7;
    v10(&v17, v16);
    swift_release(v13);
    swift_release(v12);
    swift_release(v9);
  }
  else
  {
    a3();
  }
}

uint64_t sub_1000AC214(void *a1, uint64_t (*a2)(void), uint64_t a3, void *a4)
{
  id v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  Class isa;

  if (a1)
  {
    v6 = objc_msgSend(a1, "eventFields");
    if (v6)
    {
      v7 = v6;
      v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v6, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

      v9 = sub_1001F39D0(v8);
      swift_bridgeObjectRelease(v8);
      if (v9)
      {
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v9);
        objc_msgSend(a4, "addPropertiesWithDictionary:", isa);

      }
    }
  }
  return a2();
}

double sub_1000AC2F0(uint64_t *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t (*)(), uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v4 = *a1;
  v6 = *a2;
  v5 = a2[1];
  v7 = swift_allocObject(&unk_1004482C0, 32, 7);
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = v5;
  swift_retain(v5);
  a3(v4, sub_100009BB0, v7);
  *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  return result;
}

uint64_t sub_1000AC364(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, void *a4)
{
  id v6;
  id v7;
  NSString v8;

  v6 = objc_msgSend((id)objc_opt_self(ICDeviceInfo), "currentDeviceInfo");
  v7 = objc_msgSend(v6, "buildVersion");

  v8 = String._bridgeToObjectiveC()();
  objc_msgSend(a4, "setProperty:forBodyKey:", v7, v8);

  return a2();
}

void sub_1000AC4C8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  double v9;
  objc_super v10;
  _QWORD aBlock[5];
  uint64_t v12;

  aBlock[4] = a3;
  v12 = a4;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000BED80;
  aBlock[3] = &unk_100447F18;
  v7 = _Block_copy(aBlock);
  v8 = v12;
  swift_retain(a4);
  *(_QWORD *)&v9 = swift_release(v8).n128_u64[0];
  v10.receiver = a1;
  v10.super_class = (Class)SSMetricsBaseEvent;
  objc_msgSendSuper2(&v10, "setStandardPropertiesWith:completionHandler:", a2, v7, v9);
  _Block_release(v7);
}

void ICURLSession.enqueueDataRequestRecordingPerformanceMetrics(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[5];
  uint64_t v11;

  v7 = swift_allocObject(&unk_100447CB8, 32, 7);
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a3;
  v10[4] = sub_1000AE0F4;
  v11 = v7;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_1000AC9C8;
  v10[3] = &unk_100447CD0;
  v8 = _Block_copy(v10);
  v9 = v11;
  swift_retain(a3);
  objc_msgSend(v3, "enqueueDataRequest:withCompletionHandler:", a1, v8, swift_release(v9).n128_f64[0]);
  _Block_release(v8);
}

uint64_t sub_1000AC70C(void *a1, uint64_t a2, uint64_t (*a3)(void *, uint64_t), uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void *, uint64_t);
  void **aBlock;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  void *v37;
  void (*v38)();
  uint64_t v39;

  v32 = a4;
  v33 = a3;
  v31 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000087DC(0, (unint64_t *)&qword_100490BC0, OS_dispatch_queue_ptr);
  v20 = (void *)static OS_dispatch_queue.main.getter(v12, v13, v14, v15, v16, v17, v18, v19, v30, v31, v32, v33, aBlock, v35, v36);
  v21 = swift_allocObject(&unk_1004482E8, 24, 7);
  *(_QWORD *)(v21 + 16) = a1;
  v38 = sub_1000B03B8;
  v39 = v21;
  aBlock = _NSConcreteStackBlock;
  v35 = 1107296256;
  v36 = sub_1000BED80;
  v37 = &unk_100448300;
  v22 = _Block_copy(&aBlock);
  v23 = v39;
  v24 = a1;
  v25 = swift_release(v23);
  static DispatchQoS.unspecified.getter(v25);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v26 = sub_100006924((unint64_t *)&qword_1004921B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v27 = sub_100005574(&qword_100490838);
  v28 = sub_1000B0348();
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v27, v28, v5, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v33(a1, v31);
}

void sub_1000AC920(id a1)
{
  id v2;
  id v3;
  MusicCore::MetricsEvent::LoadUrl v4;

  if (qword_10048C648 == -1)
  {
    if (!a1)
      return;
  }
  else
  {
    swift_once(&qword_10048C648, sub_10009F8B8);
    if (!a1)
      return;
  }
  v2 = objc_msgSend(a1, "performanceMetrics");
  if (v2)
  {
    v3 = v2;
    sub_1000A6564(v3, (uint64_t)&v4);
    MetricsReportingController.recordLoadUrlEvent(_:)(&v4);
    sub_1000A69B0(&v4);

  }
}

void sub_1000AC9C8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

uint64_t sub_1000ACA3C()
{
  return sub_1000ACBF4();
}

uint64_t sub_1000ACA58()
{
  return sub_1000ACB1C(0xD000000000000017, 0x80000001003AEFD0);
}

uint64_t sub_1000ACB00()
{
  return sub_1000ACB1C(0xD00000000000001CLL, 0x80000001003AEF40);
}

uint64_t sub_1000ACB1C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD v4[2];
  __int128 v5;
  uint64_t v6;

  v4[0] = a1;
  v4[1] = a2;
  v2 = sub_10000D478();
  NSUserDefaults.subscript.getter((uint64_t)v4, (uint64_t)&type metadata for String, v2, &v5);
  if (v6)
  {
    if ((swift_dynamicCast(v4, &v5, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
      return LOBYTE(v4[0]);
  }
  else
  {
    sub_100008758((uint64_t)&v5, &qword_100491B90);
  }
  return 0;
}

uint64_t sub_1000ACBA0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACFE0(0xD00000000000001CLL, 0x80000001003AF1E0, a1);
}

uint64_t sub_1000ACBBC(uint64_t a1)
{
  return sub_1000AD0C4(a1, 0xD00000000000001CLL, 0x80000001003AF1E0);
}

uint64_t sub_1000ACBD8()
{
  return sub_1000ACBF4();
}

uint64_t sub_1000ACBF4()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "propertyForBodyKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_1000AEB5C((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    v3 = sub_1000087DC(0, &qword_100490738, NSNumber_ptr);
    if (swift_dynamicCast(&v5, v7, (char *)&type metadata for Any + 8, v3, 6))
      return v5;
    else
      return 0;
  }
  else
  {
    sub_100008758((uint64_t)v7, &qword_100491B90);
    return 0;
  }
}

uint64_t sub_1000ACD08(void *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v7;
  id v8;
  NSString v9;
  id v10;
  id v11;

  v7 = a1;
  swift_retain(a3);
  v8 = v3;
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v8, "setEventType:", v9);

  v10 = v8;
  v11 = v7;
  swift_retain(a3);
  sub_1000AFD38(a1, v10, v10, (uint64_t)a1, a2, a3);

  return swift_release_n(a3, 2);
}

id sub_1000ACF4C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Music_SSMetricsComponentRenderEvent();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000ACFA8()
{
  return sub_1000ACB1C(0xD000000000000017, 0x80000001003AF190);
}

uint64_t sub_1000ACFC4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACFE0(0xD000000000000026, 0x80000001003AF1B0, a1);
}

uint64_t sub_1000ACFE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  _QWORD v9[2];
  __int128 v10;
  uint64_t v11;

  v9[0] = a1;
  v9[1] = a2;
  v4 = sub_10000D478();
  NSUserDefaults.subscript.getter((uint64_t)v9, (uint64_t)&type metadata for String, v4, &v10);
  if (v11)
  {
    v5 = type metadata accessor for Date(0);
    v6 = swift_dynamicCast(a3, &v10, (char *)&type metadata for Any + 8, v5, 6);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a3, v6 ^ 1u, 1, v5);
  }
  else
  {
    sub_100008758((uint64_t)&v10, &qword_100491B90);
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a3, 1, 1, v8);
  }
}

uint64_t sub_1000AD0A8(uint64_t a1)
{
  return sub_1000AD0C4(a1, 0xD000000000000026, 0x80000001003AF1B0);
}

uint64_t sub_1000AD0C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD v14[2];
  __int128 v15;
  __int128 v16;

  v6 = sub_100005574(&qword_100490730);
  __chkstk_darwin(v6);
  v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100014A7C(a1, (uint64_t)v8, &qword_100490730);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_100008758((uint64_t)v8, &qword_100490730);
    v15 = 0u;
    v16 = 0u;
  }
  else
  {
    *((_QWORD *)&v16 + 1) = v9;
    v11 = sub_1000207D4(&v15);
    (*(void (**)(_QWORD *, char *, uint64_t))(v10 + 32))(v11, v8, v9);
  }
  v14[0] = a2;
  v14[1] = a3;
  v12 = sub_10000D478();
  NSUserDefaults.subscript.setter((uint64_t)&v15, (uint64_t)v14, (uint64_t)&type metadata for String, v12);
  return sub_100008758(a1, &qword_100490730);
}

id DeviceCapabilitiesObjC.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "init");
}

id Music_SSMetricsPageRenderEvent.__allocating_init(bodyDictionary:)(uint64_t a1)
{
  objc_class *v1;
  id v3;
  Class isa;
  id v5;

  v3 = objc_allocWithZone(v1);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v5 = objc_msgSend(v3, "initWithBodyDictionary:", isa);

  return v5;
}

id Music_SSMetricsPageRenderEvent.init(bodyDictionary:)(uint64_t a1)
{
  void *v1;
  objc_class *ObjectType;
  Class isa;
  id v5;
  objc_super v7;

  ObjectType = (objc_class *)swift_getObjectType(v1);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v7.receiver = v1;
  v7.super_class = ObjectType;
  v5 = objc_msgSendSuper2(&v7, "initWithBodyDictionary:", isa);

  return v5;
}

id DeviceCapabilitiesObjC.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000AD4D8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  char v27;
  int64_t v28;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v28 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v4 << 6);
      goto LABEL_25;
    }
    v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v11 >= v28)
      return 1;
    v12 = *(_QWORD *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      v4 = v11 + 1;
      if (v11 + 1 >= v28)
        return 1;
      v12 = *(_QWORD *)(v5 + 8 * v4);
      if (!v12)
      {
        v4 = v11 + 2;
        if (v11 + 2 >= v28)
          return 1;
        v12 = *(_QWORD *)(v5 + 8 * v4);
        if (!v12)
        {
          v4 = v11 + 3;
          if (v11 + 3 >= v28)
            return 1;
          v12 = *(_QWORD *)(v5 + 8 * v4);
          if (!v12)
            break;
        }
      }
    }
LABEL_24:
    v8 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_25:
    v14 = 16 * v10;
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + v14);
    v16 = *v15;
    v17 = v15[1];
    v18 = (uint64_t *)(*(_QWORD *)(v3 + 56) + v14);
    v20 = *v18;
    v19 = v18[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = sub_10009ABAC(v16, v17);
    v23 = v22;
    swift_bridgeObjectRelease(v17);
    if ((v23 & 1) == 0)
    {
      swift_bridgeObjectRelease(v19);
      return 0;
    }
    v24 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v21);
    v25 = v24[1];
    if (*v24 == v20 && v25 == v19)
    {
      result = swift_bridgeObjectRelease(v19);
    }
    else
    {
      v27 = _stringCompareWithSmolCheck(_:_:expecting:)(*v24, v25, v20, v19, 0);
      result = swift_bridgeObjectRelease(v19);
      if ((v27 & 1) == 0)
        return 0;
    }
  }
  v13 = v11 + 4;
  if (v13 >= v28)
    return 1;
  v12 = *(_QWORD *)(v5 + 8 * v13);
  if (v12)
  {
    v4 = v13;
    goto LABEL_24;
  }
  while (1)
  {
    v4 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v4 >= v28)
      return 1;
    v12 = *(_QWORD *)(v5 + 8 * v4);
    ++v13;
    if (v12)
      goto LABEL_24;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t _s9MusicCore21MetricsPagePropertiesV23__derived_struct_equalsySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  void (*v35)(_BYTE *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _BYTE v47[4];
  int v48;
  _BYTE *v49;
  uint64_t v50;
  _BYTE *v51;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v47[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_100005574(&qword_100490850);
  __chkstk_darwin(v8);
  v10 = &v47[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_100005574(&qword_10048D510);
  v12 = __chkstk_darwin(v11);
  v14 = &v47[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = __chkstk_darwin(v12);
  v17 = &v47[-v16];
  __chkstk_darwin(v15);
  v19 = &v47[-v18];
  v20 = a1[1];
  v21 = a2[1];
  if (*a1 == *a2 && v20 == v21
    || (v22 = _stringCompareWithSmolCheck(_:_:expecting:)(*a1, v20, *a2, v21, 0), result = 0, (v22 & 1) != 0))
  {
    if ((v24 = a1[2], v25 = a1[3], v26 = a2[2], v27 = a2[3], v24 == v26) && v25 == v27
      || (v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v26, v27, 0), result = 0, (v28 & 1) != 0))
    {
      v51 = v14;
      v49 = v7;
      v29 = type metadata accessor for MetricsPageProperties(0);
      sub_100014A7C((uint64_t)a1 + *(int *)(v29 + 24), (uint64_t)v19, &qword_10048D510);
      v50 = v29;
      sub_100014A7C((uint64_t)a2 + *(int *)(v29 + 24), (uint64_t)v17, &qword_10048D510);
      v30 = (uint64_t)&v10[*(int *)(v8 + 48)];
      sub_100014A7C((uint64_t)v19, (uint64_t)v10, &qword_10048D510);
      sub_100014A7C((uint64_t)v17, v30, &qword_10048D510);
      v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
      if (v31((uint64_t)v10, 1, v4) == 1)
      {
        sub_100008758((uint64_t)v17, &qword_10048D510);
        sub_100008758((uint64_t)v19, &qword_10048D510);
        if (v31(v30, 1, v4) == 1)
        {
          sub_100008758((uint64_t)v10, &qword_10048D510);
LABEL_16:
          v36 = v50;
          v37 = *(int *)(v50 + 28);
          v38 = *(_QWORD *)((char *)a1 + v37);
          v39 = *(_QWORD *)((char *)a2 + v37);
          if (v38)
          {
            if (v39)
            {
              swift_bridgeObjectRetain();
              v40 = swift_bridgeObjectRetain();
              v41 = sub_1000AD4D8(v40, v39);
              swift_bridgeObjectRelease(v38);
              swift_bridgeObjectRelease(v39);
              if ((v41 & 1) != 0)
              {
LABEL_21:
                v42 = *(int *)(v36 + 32);
                v43 = (_QWORD *)((char *)a1 + v42);
                v44 = *(_QWORD *)((char *)a1 + v42 + 8);
                v45 = (_QWORD *)((char *)a2 + v42);
                v46 = v45[1];
                if (v44)
                {
                  if (v46
                    && (*v43 == *v45 && v44 == v46
                     || (_stringCompareWithSmolCheck(_:_:expecting:)(*v43, v44, *v45, v46, 0) & 1) != 0))
                  {
                    return 1;
                  }
                }
                else if (!v46)
                {
                  return 1;
                }
              }
            }
          }
          else if (!v39)
          {
            goto LABEL_21;
          }
          return 0;
        }
      }
      else
      {
        v32 = (uint64_t)v51;
        sub_100014A7C((uint64_t)v10, (uint64_t)v51, &qword_10048D510);
        if (v31(v30, 1, v4) != 1)
        {
          v33 = v49;
          (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 32))(v49, v30, v4);
          v34 = sub_100006924(qword_100490858, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
          v48 = dispatch thunk of static Equatable.== infix(_:_:)(v32, v33, v4, v34);
          v35 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
          v35(v33, v4);
          sub_100008758((uint64_t)v17, &qword_10048D510);
          sub_100008758((uint64_t)v19, &qword_10048D510);
          v35((_BYTE *)v32, v4);
          sub_100008758((uint64_t)v10, &qword_10048D510);
          if ((v48 & 1) == 0)
            return 0;
          goto LABEL_16;
        }
        sub_100008758((uint64_t)v17, &qword_10048D510);
        sub_100008758((uint64_t)v19, &qword_10048D510);
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v32, v4);
      }
      sub_100008758((uint64_t)v10, &qword_100490850);
      return 0;
    }
  }
  return result;
}

void sub_1000ADB00(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v12;
  char v13;
  uint64_t v14;
  NSString v15;
  uint64_t v16;
  NSString v17;
  NSString v18;
  id v19;
  uint64_t v20;
  _QWORD *receiver;
  unint64_t v22;
  char v23;
  uint64_t v24;
  id v25;
  id v26;
  void *v27;
  Class isa;
  void *v29;
  uint64_t v30;
  objc_class *v31;
  objc_class *v32;
  NSString v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  id v37;
  id v38;
  NSString v39;
  void *v40;
  uint64_t v41;
  objc_super v42;
  objc_super v43[2];
  objc_super v44;
  __int128 aBlock;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;

  v12 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v13 = sub_1000ACB1C(0xD000000000000017, 0x80000001003AF190);

  LOBYTE(aBlock) = v13 & 1;
  v14 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&aBlock, &type metadata for Bool);
  v15 = String._bridgeToObjectiveC()();
  objc_msgSend(a2, "setProperty:forBodyKey:", v14, v15);
  swift_unknownObjectRelease(v14);

  *(_QWORD *)&aBlock = 0x646E655265676170;
  *((_QWORD *)&aBlock + 1) = 0xEA00000000007265;
  v16 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&aBlock, &type metadata for String);
  v17 = String._bridgeToObjectiveC()();
  objc_msgSend(a2, "setProperty:forBodyKey:", v16, v17);
  swift_unknownObjectRelease(v16);

  if (!a1)
  {
    aBlock = 0u;
    v46 = 0u;
LABEL_16:
    sub_100008758((uint64_t)&aBlock, &qword_100491B90);
    goto LABEL_17;
  }
  v18 = String._bridgeToObjectiveC()();
  v19 = objc_msgSend(a1, "valueForConfigurationKey:", v18);

  if (v19)
  {
    _bridgeAnyObjectToAny(_:)(v19);
    swift_unknownObjectRelease(v19);
  }
  else
  {
    memset(v43, 0, sizeof(v43));
  }
  sub_1000AEB5C((uint64_t)v43, (uint64_t)&aBlock);
  if (!*((_QWORD *)&v46 + 1))
    goto LABEL_16;
  v20 = sub_100005574((uint64_t *)&unk_100493380);
  if (swift_dynamicCast(v43, &aBlock, (char *)&type metadata for Any + 8, v20, 6))
  {
    receiver = v43[0].receiver;
    if (*((_QWORD *)v43[0].receiver + 2)
      && (v22 = sub_10009ABAC(0xD000000000000021, 0x80000001003AF140), (v23 & 1) != 0))
    {
      sub_10000684C(receiver[7] + 32 * v22, (uint64_t)&aBlock);
      v24 = sub_1000087DC(0, &qword_100490738, NSNumber_ptr);
      if (swift_dynamicCast(v43, &aBlock, (char *)&type metadata for Any + 8, v24, 6))
        v25 = v43[0].receiver;
      else
        v25 = 0;
      if ((v13 & 1) == 0)
        goto LABEL_14;
    }
    else
    {
      v25 = 0;
      if ((v13 & 1) == 0)
      {
LABEL_14:
        if (v25)
        {
          v26 = v25;
          v27 = v25;
          isa = (Class)v25;
        }
        else
        {
          v27 = 0;
          isa = 0;
        }
        goto LABEL_22;
      }
    }
    v27 = v25;
    sub_1000087DC(0, &qword_100490738, NSNumber_ptr);
    isa = NSNumber.init(floatLiteral:)(1.0).super.super.isa;
LABEL_22:
    v32 = isa;
    v33 = String._bridgeToObjectiveC()();
    objc_msgSend(a2, "setProperty:forBodyKey:", v32, v33);

    if (receiver[2])
    {
      v34 = sub_10009ABAC(0xD000000000000019, 0x80000001003AF170);
      if ((v35 & 1) != 0)
      {
        sub_10000684C(receiver[7] + 32 * v34, (uint64_t)&aBlock);
      }
      else
      {
        aBlock = 0u;
        v46 = 0u;
      }
    }
    else
    {
      aBlock = 0u;
      v46 = 0u;
    }
    swift_bridgeObjectRelease(receiver);
    if (*((_QWORD *)&v46 + 1))
    {
      v36 = sub_1000087DC(0, &qword_100490738, NSNumber_ptr);
      if (swift_dynamicCast(v43, &aBlock, (char *)&type metadata for Any + 8, v36, 6))
      {
        v37 = v43[0].receiver;
LABEL_32:
        v38 = v37;
        v39 = String._bridgeToObjectiveC()();
        objc_msgSend(a2, "setProperty:forBodyKey:", v38, v39);

        v47 = a5;
        v48 = a6;
        *(_QWORD *)&aBlock = _NSConcreteStackBlock;
        *((_QWORD *)&aBlock + 1) = 1107296256;
        *(_QWORD *)&v46 = sub_1000BED80;
        *((_QWORD *)&v46 + 1) = &unk_100448350;
        v40 = _Block_copy(&aBlock);
        v41 = v48;
        swift_retain(a6);
        swift_release(v41);
        v42.receiver = a3;
        v42.super_class = (Class)type metadata accessor for Music_SSMetricsPageRenderEvent();
        objc_msgSendSuper2(&v42, "setStandardPropertiesWith:completionHandler:", a4, v40);
        _Block_release(v40);

        return;
      }
    }
    else
    {
      sub_100008758((uint64_t)&aBlock, &qword_100491B90);
    }
    v37 = 0;
    goto LABEL_32;
  }
LABEL_17:
  v47 = a5;
  v48 = a6;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v46 = sub_1000BED80;
  *((_QWORD *)&v46 + 1) = &unk_100448328;
  v29 = _Block_copy(&aBlock);
  v30 = v48;
  swift_retain(a6);
  swift_release(v30);
  v31 = (objc_class *)type metadata accessor for Music_SSMetricsPageRenderEvent();
  v44.receiver = a3;
  v44.super_class = v31;
  objc_msgSendSuper2(&v44, "setStandardPropertiesWith:completionHandler:", a4, v29);
  _Block_release(v29);
}

uint64_t _s9MusicCore18MetricsContentTypeO8rawValueACSgSS_tcfC_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_10043DDA8, a1, a2, &unk_10048CFB0);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x14)
    return 20;
  else
    return v3;
}

uint64_t sub_1000AE0D0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000AE0F4(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000AC70C(a1, a2, *(uint64_t (**)(void *, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1000AE0FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000AE10C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1000AE118()
{
  unint64_t result;

  result = qword_100490740;
  if (!qword_100490740)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MetricsContentType, &type metadata for MetricsContentType);
    atomic_store(result, (unint64_t *)&qword_100490740);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MetricsPageProperties(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for URL(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      v15 = sub_100005574(&qword_10048D510);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v17 = a3[8];
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    v18 = (uint64_t *)((char *)v4 + v17);
    v19 = (uint64_t *)((char *)a2 + v17);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for MetricsPageProperties(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = a1 + a2[6];
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7]));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
}

_QWORD *initializeWithCopy for MetricsPageProperties(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    v14 = sub_100005574(&qword_10048D510);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MetricsPageProperties(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  *a1 = *a2;
  v6 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v6);
  a1[2] = a2[2];
  v7 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v7);
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = sub_100005574(&qword_10048D510);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  v17 = a3[7];
  v18 = *(_QWORD *)((char *)a1 + v17);
  *(_QWORD *)((char *)a1 + v17) = *(_QWORD *)((char *)a2 + v17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v18);
  v19 = a3[8];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  *v20 = *v21;
  v22 = v20[1];
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v22);
  return a1;
}

_OWORD *initializeWithTake for MetricsPageProperties(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_100005574(&qword_10048D510);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  return a1;
}

_QWORD *assignWithTake for MetricsPageProperties(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = sub_100005574(&qword_10048D510);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  v19 = a3[7];
  v20 = *(_QWORD *)((char *)a1 + v19);
  *(_QWORD *)((char *)a1 + v19) = *(_QWORD *)((char *)a2 + v19);
  swift_bridgeObjectRelease(v20);
  v21 = a3[8];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  v25 = *v23;
  v24 = v23[1];
  v26 = v22[1];
  *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease(v26);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricsPageProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000AE82C);
}

uint64_t sub_1000AE82C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100005574(&qword_10048D510);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for MetricsPageProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000AE8B8);
}

uint64_t sub_1000AE8B8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100005574(&qword_10048D510);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

void sub_1000AE930(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_10038A628;
  v4[1] = &unk_10038A628;
  sub_1000A78BC(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_10038A640;
    v4[4] = &unk_10038A658;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

uint64_t getEnumTagSinglePayload for MetricsContentType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xED)
    goto LABEL_17;
  if (a2 + 19 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 19) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 19;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 19;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 19;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x14;
  v8 = v6 - 20;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MetricsContentType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 19 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 19) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xED)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEC)
    return ((uint64_t (*)(void))((char *)&loc_1000AEA94 + 4 * byte_10038A523[v4]))();
  *a1 = a2 + 19;
  return ((uint64_t (*)(void))((char *)sub_1000AEAC8 + 4 * byte_10038A51E[v4]))();
}

uint64_t sub_1000AEAC8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AEAD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000AEAD8);
  return result;
}

uint64_t sub_1000AEAE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000AEAECLL);
  *(_BYTE *)result = a2 + 19;
  return result;
}

uint64_t sub_1000AEAF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AEAF8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MetricsContentType()
{
  return &type metadata for MetricsContentType;
}

uint64_t type metadata accessor for Music_SSMetricsComponentRenderEvent()
{
  return objc_opt_self(_TtC9MusicCore35Music_SSMetricsComponentRenderEvent);
}

uint64_t type metadata accessor for Music_SSMetricsPageRenderEvent()
{
  return objc_opt_self(_TtC9MusicCore30Music_SSMetricsPageRenderEvent);
}

uint64_t sub_1000AEB54()
{
  uint64_t v0;

  return sub_10016FF94(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000AEB5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005574(&qword_100491B90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1000AEBA4(void (*a1)(void))
{
  void *v1;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  _BOOL8 v8;
  id v9;
  uint64_t v10;
  __n128 v11;
  unint64_t v12;
  id v13;
  NSString v14;
  id v15;
  id v16;
  id v17;
  NSString v18;
  NSString v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  id v24;
  id v25;
  unint64_t v26;

  v3 = objc_msgSend((id)objc_opt_self(ICUserIdentityStore), "defaultIdentityStore");
  v4 = objc_msgSend((id)objc_opt_self(ICUserIdentity), "activeAccount");
  v25 = 0;
  v5 = objc_msgSend(v3, "DSIDForUserIdentity:outError:", v4, &v25);

  v6 = v25;
  if (v5)
  {
    v7 = v25;
    objc_msgSend(v1, "setAccountIdentifier:", v5);
    v8 = objc_msgSend(v5, "longLongValue") != 0;
  }
  else
  {
    v9 = v25;
    v10 = _convertNSErrorToError(_:)(v6);

    swift_willThrow(v11);
    swift_errorRelease(v10);
    objc_msgSend(v1, "setAccountIdentifier:", 0);
    v8 = 1;
  }
  v12 = 0xEA00000000006465;
  v13 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithBool:", v8);
  v14 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setProperty:forBodyKey:", v13, v14);

  v15 = objc_msgSend((id)objc_opt_self(MPCloudServiceStatusController), "sharedController");
  v16 = objc_msgSend(v15, "musicSubscriptionStatus");

  if (v16)
  {
    switch((unint64_t)objc_msgSend(v16, "statusType"))
    {
      case 0uLL:

        v12 = 0xE700000000000000;
        break;
      case 1uLL:
      case 3uLL:

        break;
      case 2uLL:
        v17 = objc_msgSend(v16, "reasonType");

        if (v17 == (id)4)
          v12 = 0x80000001003AF120;
        else
          v12 = 0xED00006465626972;
        break;
      default:
        v25 = 0;
        v26 = 0xE000000000000000;
        _StringGuts.grow(_:)(24);
        v20._object = (void *)0x80000001003AF0E0;
        v20._countAndFlagsBits = 0xD000000000000013;
        String.append(_:)(v20);
        objc_msgSend(v16, "statusType");
        v21._countAndFlagsBits = 0xD00000000000001DLL;
        v21._object = (void *)0x80000001003AF100;
        String.append(_:)(v21);
        v22._countAndFlagsBits = 32;
        v22._object = (void *)0xE100000000000000;
        String.append(_:)(v22);
        v24 = objc_msgSend(v16, "statusType");
        type metadata accessor for ICMusicSubscriptionStatusType(0);
        _print_unlocked<A, B>(_:_:)(&v24, &v25, v23, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v25, v26, "MusicCore/MetricsUtilities.swift", 32, 2, 151, 0);
        __break(1u);
        JUMPOUT(0x1000AEFC8);
    }
  }
  else
  {
    v12 = 0xE700000000000000;
  }
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  v19 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setProperty:forBodyKey:", v18, v19);

  a1();
}

uint64_t sub_1000AEFD8(uint64_t (*a1)(void))
{
  void *v1;
  void *v2;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  NSString v11;
  char v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  NSString v16;
  NSString v17;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  v2 = v1;
  swift_getObjectType();
  v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), "Topic");
  objc_msgSend(v2, "setTopic:", v4);

  v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v6 = objc_msgSend(v5, "infoDictionary");

  if (!v6
    || (v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v6, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String), v6, !v7))
  {
    v7 = 0;
    v21 = 0u;
    v22 = 0u;
    v12 = 1;
LABEL_12:
    sub_100008758((uint64_t)&v21, &qword_100491B90);
    goto LABEL_13;
  }
  if (!*(_QWORD *)(v7 + 16))
  {
    v12 = 0;
    v21 = 0u;
    v22 = 0u;
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  v8 = sub_10009ABAC(0xD000000000000012, 0x80000001003AF090);
  if ((v9 & 1) == 0)
  {
    v21 = 0u;
    v22 = 0u;
    swift_bridgeObjectRelease(v7);
    goto LABEL_11;
  }
  sub_10000684C(*(_QWORD *)(v7 + 56) + 32 * v8, (uint64_t)&v21);
  swift_bridgeObjectRelease(v7);
  if (!*((_QWORD *)&v22 + 1))
  {
LABEL_11:
    v12 = 0;
    goto LABEL_12;
  }
  if ((swift_dynamicCast(&v19, &v21, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
  {
    v10 = v20;
    v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v10);
    v12 = 0;
    goto LABEL_14;
  }
  v12 = 0;
LABEL_13:
  v11 = 0;
LABEL_14:
  objc_msgSend(v2, "setApplicationIdentifier:", v11);

  if ((v12 & 1) != 0)
  {
    v21 = 0u;
    v22 = 0u;
LABEL_23:
    sub_100008758((uint64_t)&v21, &qword_100491B90);
    goto LABEL_24;
  }
  if (*(_QWORD *)(v7 + 16) && (v13 = sub_10009ABAC(0xD00000000000001ALL, 0x80000001003AF070), (v14 & 1) != 0))
  {
    sub_10000684C(*(_QWORD *)(v7 + 56) + 32 * v13, (uint64_t)&v21);
  }
  else
  {
    v21 = 0u;
    v22 = 0u;
  }
  swift_bridgeObjectRelease(v7);
  if (!*((_QWORD *)&v22 + 1))
    goto LABEL_23;
  if ((swift_dynamicCast(&v19, &v21, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
LABEL_24:
    v16 = 0;
    goto LABEL_25;
  }
  v15 = v20;
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
LABEL_25:
  v17 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setProperty:forBodyKey:", v16, v17);
  swift_unknownObjectRelease(v16);

  return a1();
}

void sub_1000AF2CC(void (*a1)(void))
{
  void *v1;
  NSString v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  __n128 v9;
  NSString v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[5];
  uint64_t v14;

  v3 = objc_msgSend((id)objc_opt_self(ICStoreURLRequest), "currentConnectionTypeHeader");
  if (!v3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v5 = v4;
    v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  objc_msgSend(v1, "setConnection:", v3);

  v6 = objc_allocWithZone((Class)ICStoreRequestContext);
  v13[4] = CFRange.init(_:);
  v14 = 0;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_1000E776C;
  v13[3] = &unk_100448238;
  v7 = _Block_copy(v13);
  v8 = objc_msgSend(v6, "initWithBlock:", v7);
  _Block_release(v7);
  v9 = swift_release(v14);
  if ((swift_isEscapingClosureAtFileLocation(0, "", 0, 0, 0, 1, v9) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v10 = objc_msgSend(v8, "userAgent");
    if (!v10)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v12 = v11;
      v10 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v12);
    }
    objc_msgSend(v1, "setUserAgent:", v10);

    a1();
  }
}

double sub_1000AF45C(void *a1, _QWORD *a2, void *a3, void (**a4)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void **, _QWORD *);
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  id v15;
  double result;
  _QWORD v17[2];
  void *v18;
  _QWORD *v19;

  v8 = swift_allocObject(&unk_100448180, 24, 7);
  *(_QWORD *)(v8 + 16) = a4;
  v19 = a2;
  if (a2[2])
  {
    v10 = (void (*)(void **, _QWORD *))a2[4];
    v9 = a2[5];
    _Block_copy(a4);
    swift_bridgeObjectRetain();
    swift_retain(v9);
    sub_10004028C(0, 1);
    v11 = v19;
    v12 = (_QWORD *)swift_allocObject(&unk_1004481A8, 56, 7);
    v12[2] = a3;
    v12[3] = a1;
    v12[4] = v11;
    v12[5] = sub_1000B04B4;
    v12[6] = v8;
    v18 = a1;
    v13 = swift_allocObject(&unk_1004481D0, 32, 7);
    *(_QWORD *)(v13 + 16) = sub_1000B028C;
    *(_QWORD *)(v13 + 24) = v12;
    v17[0] = sub_1000B0290;
    v17[1] = v13;
    v14 = a1;
    swift_retain(v8);
    swift_retain(v12);
    v15 = a3;
    v10(&v18, v17);
    swift_release(v8);
    swift_release(v13);
    swift_release(v12);
    *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  }
  else
  {
    _Block_copy(a4);
    a4[2](a4);
    *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000AF5BC(void *a1, void *a2, void (**a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = sub_100005574(&qword_10048E7A8);
  v7 = swift_allocObject(v6, 144, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100384AC0;
  v8 = swift_allocObject(&unk_100447F50, 24, 7);
  *(_QWORD *)(v8 + 16) = a2;
  v9 = swift_allocObject(&unk_100447F78, 32, 7);
  *(_QWORD *)(v9 + 16) = sub_1000B01B8;
  *(_QWORD *)(v9 + 24) = v8;
  *(_QWORD *)(v7 + 32) = sub_1000B01C0;
  *(_QWORD *)(v7 + 40) = v9;
  v10 = swift_allocObject(&unk_100447FA0, 24, 7);
  *(_QWORD *)(v10 + 16) = a2;
  v11 = swift_allocObject(&unk_100447FC8, 32, 7);
  *(_QWORD *)(v11 + 16) = sub_1000B01C8;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v7 + 48) = sub_1000B04B0;
  *(_QWORD *)(v7 + 56) = v11;
  v12 = swift_allocObject(&unk_100447FF0, 24, 7);
  *(_QWORD *)(v12 + 16) = a2;
  v13 = swift_allocObject(&unk_100448018, 32, 7);
  *(_QWORD *)(v13 + 16) = sub_1000B01E8;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v7 + 64) = sub_1000B04B0;
  *(_QWORD *)(v7 + 72) = v13;
  v14 = swift_allocObject(&unk_100448040, 24, 7);
  *(_QWORD *)(v14 + 16) = a2;
  v15 = swift_allocObject(&unk_100448068, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_1000B0210;
  *(_QWORD *)(v15 + 24) = v14;
  *(_QWORD *)(v7 + 80) = sub_1000B04B0;
  *(_QWORD *)(v7 + 88) = v15;
  v16 = swift_allocObject(&unk_100448090, 24, 7);
  *(_QWORD *)(v16 + 16) = a2;
  v17 = swift_allocObject(&unk_1004480B8, 32, 7);
  *(_QWORD *)(v17 + 16) = sub_1000B0238;
  *(_QWORD *)(v17 + 24) = v16;
  *(_QWORD *)(v7 + 96) = sub_1000B04B0;
  *(_QWORD *)(v7 + 104) = v17;
  v18 = swift_allocObject(&unk_1004480E0, 24, 7);
  *(_QWORD *)(v18 + 16) = a2;
  v19 = swift_allocObject(&unk_100448108, 32, 7);
  *(_QWORD *)(v19 + 16) = sub_1000B0258;
  *(_QWORD *)(v19 + 24) = v18;
  *(_QWORD *)(v7 + 112) = sub_1000B04B0;
  *(_QWORD *)(v7 + 120) = v19;
  v20 = swift_allocObject(&unk_100448130, 24, 7);
  *(_QWORD *)(v20 + 16) = a2;
  v21 = swift_allocObject(&unk_100448158, 32, 7);
  *(_QWORD *)(v21 + 16) = sub_1000B0260;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v7 + 128) = sub_1000B04B0;
  *(_QWORD *)(v7 + 136) = v21;
  sub_1000AF45C(a1, (_QWORD *)v7, a2, a3);
  return swift_bridgeObjectRelease(v7);
}

double sub_1000AF844(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v6;
  NSString v7;
  id v8;
  NSString v9;
  uint64_t v10;
  double result;

  v3 = v2;
  v6 = objc_msgSend(v3, "windowHeight");
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "setProperty:forBodyKey:", v6, v7);

  v8 = objc_msgSend(v3, "windowWidth");
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "setProperty:forBodyKey:", v8, v9);

  sub_1000087DC(0, (unint64_t *)&qword_100490BC0, OS_dispatch_queue_ptr);
  v10 = swift_allocObject(&unk_100447F00, 32, 7);
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  swift_retain(a2);
  static OS_dispatch_queue.asyncOnMainIfNeeded(_:)(sub_100009BB0, v10);
  *(_QWORD *)&result = swift_release(v10).n128_u64[0];
  return result;
}

void sub_1000AF988(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v12;
  char v13;
  NSString v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  void *v24;
  uint64_t v25;
  double v26;
  __int128 v27;
  __int128 v28;
  objc_super v29;
  __int128 aBlock;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  v12 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v13 = sub_1000ACB1C(0xD000000000000017, 0x80000001003AEFD0);

  objc_msgSend(a2, "setXPSamplingForced:", v13 & 1);
  if (!a1)
  {
    aBlock = 0u;
    v31 = 0u;
LABEL_23:
    sub_100008758((uint64_t)&aBlock, &qword_100491B90);
    goto LABEL_24;
  }
  v14 = String._bridgeToObjectiveC()();
  v15 = objc_msgSend(a1, "valueForConfigurationKey:", v14);

  if (v15)
  {
    _bridgeAnyObjectToAny(_:)(v15);
    swift_unknownObjectRelease(v15);
  }
  else
  {
    v27 = 0u;
    v28 = 0u;
  }
  sub_1000AEB5C((uint64_t)&v27, (uint64_t)&aBlock);
  if (!*((_QWORD *)&v31 + 1))
    goto LABEL_23;
  v16 = sub_100005574((uint64_t *)&unk_100493380);
  if (!swift_dynamicCast(&v27, &aBlock, (char *)&type metadata for Any + 8, v16, 6))
    goto LABEL_24;
  v17 = v27;
  if (*(_QWORD *)(v27 + 16))
  {
    v18 = sub_10009ABAC(0xD000000000000017, 0x80000001003AEF80);
    if ((v19 & 1) != 0)
    {
      sub_10000684C(*(_QWORD *)(v17 + 56) + 32 * v18, (uint64_t)&aBlock);
      if (swift_dynamicCast(&v27, &aBlock, (char *)&type metadata for Any + 8, &type metadata for Double, 6))objc_msgSend(a2, "setXPSamplingPercentageUsers:", *(double *)&v27);
    }
  }
  if (*(_QWORD *)(v17 + 16))
  {
    v20 = sub_10009ABAC(0x446E6F6973736573, 0xEF6E6F6974617275);
    if ((v21 & 1) != 0)
    {
      sub_10000684C(*(_QWORD *)(v17 + 56) + 32 * v20, (uint64_t)&aBlock);
      if (swift_dynamicCast(&v27, &aBlock, (char *)&type metadata for Any + 8, &type metadata for Double, 6))objc_msgSend(a2, "setXPSessionDuration:", *(double *)&v27);
    }
  }
  if (*(_QWORD *)(v17 + 16) && (v22 = sub_10009ABAC(0xD000000000000021, 0x80000001003AEFA0), (v23 & 1) != 0))
  {
    sub_10000684C(*(_QWORD *)(v17 + 56) + 32 * v22, (uint64_t)&aBlock);
  }
  else
  {
    aBlock = 0u;
    v31 = 0u;
  }
  swift_bridgeObjectRelease(v17);
  if (!*((_QWORD *)&v31 + 1))
    goto LABEL_23;
  if ((swift_dynamicCast(&v27, &aBlock, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
    objc_msgSend(a2, "setXPSamplingPercentageCachedResponses:", *(double *)&v27);
LABEL_24:
  if (objc_msgSend(a2, "xpSamplingForced", v27, v28))
  {
    objc_msgSend(a2, "setXPSamplingPercentageUsers:", 1.0);
    objc_msgSend(a2, "setXPSamplingPercentageCachedResponses:", 1.0);
  }
  v32 = a5;
  v33 = a6;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v31 = sub_1000BED80;
  *((_QWORD *)&v31 + 1) = &unk_100447E78;
  v24 = _Block_copy(&aBlock);
  v25 = v33;
  swift_retain(a6);
  *(_QWORD *)&v26 = swift_release(v25).n128_u64[0];
  v29.receiver = a3;
  v29.super_class = (Class)SSMetricsLoadURLEvent;
  objc_msgSendSuper2(&v29, "setStandardPropertiesWith:completionHandler:", a4, v24, v26);
  _Block_release(v24);
}

void sub_1000AFD38(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v12;
  char v13;
  Class isa;
  NSString v15;
  NSString v16;
  id v17;
  uint64_t v18;
  _QWORD *receiver;
  unint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  id v24;
  id v25;
  NSString v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  int v30;
  id v31;
  id v32;
  NSString v33;
  void *v34;
  uint64_t v35;
  objc_class *v36;
  objc_super v37[2];
  objc_super v38;
  __int128 aBlock;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v12 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v13 = sub_1000ACB1C(0xD00000000000001CLL, 0x80000001003AEF40);

  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v15 = String._bridgeToObjectiveC()();
  objc_msgSend(a2, "setProperty:forBodyKey:", isa, v15);

  if (!a1)
  {
    aBlock = 0u;
    v40 = 0u;
LABEL_10:
    sub_100008758((uint64_t)&aBlock, &qword_100491B90);
    goto LABEL_29;
  }
  v16 = String._bridgeToObjectiveC()();
  v17 = objc_msgSend(a1, "valueForConfigurationKey:", v16);

  if (v17)
  {
    _bridgeAnyObjectToAny(_:)(v17);
    swift_unknownObjectRelease(v17);
  }
  else
  {
    memset(v37, 0, sizeof(v37));
  }
  sub_1000AEB5C((uint64_t)v37, (uint64_t)&aBlock);
  if (!*((_QWORD *)&v40 + 1))
    goto LABEL_10;
  v18 = sub_100005574((uint64_t *)&unk_100493380);
  if (!swift_dynamicCast(v37, &aBlock, (char *)&type metadata for Any + 8, v18, 6))
    goto LABEL_29;
  receiver = v37[0].receiver;
  if ((v13 & 1) != 0)
  {
    *((_QWORD *)&v40 + 1) = &type metadata for Double;
    *(_QWORD *)&aBlock = 0x3FF0000000000000;
    goto LABEL_14;
  }
  if (*((_QWORD *)v37[0].receiver + 2))
  {
    v20 = sub_10009ABAC(0xD000000000000026, 0x80000001003AEED0);
    if ((v21 & 1) != 0)
    {
      sub_10000684C(receiver[7] + 32 * v20, (uint64_t)&aBlock);
LABEL_14:
      v22 = sub_1000087DC(0, &qword_100490738, NSNumber_ptr);
      v23 = swift_dynamicCast(v37, &aBlock, (char *)&type metadata for Any + 8, v22, 6);
      v24 = v37[0].receiver;
      if (!v23)
        v24 = 0;
      goto LABEL_18;
    }
  }
  aBlock = 0u;
  v40 = 0u;
  sub_100008758((uint64_t)&aBlock, &qword_100491B90);
  v24 = 0;
LABEL_18:
  v25 = v24;
  v26 = String._bridgeToObjectiveC()();
  objc_msgSend(a2, "setProperty:forBodyKey:", v25, v26);

  if (receiver[2])
  {
    v27 = sub_10009ABAC(0xD00000000000001ELL, 0x80000001003AEF00);
    if ((v28 & 1) != 0)
    {
      sub_10000684C(receiver[7] + 32 * v27, (uint64_t)&aBlock);
    }
    else
    {
      aBlock = 0u;
      v40 = 0u;
    }
  }
  else
  {
    aBlock = 0u;
    v40 = 0u;
  }
  swift_bridgeObjectRelease(receiver);
  if (*((_QWORD *)&v40 + 1))
  {
    v29 = sub_1000087DC(0, &qword_100490738, NSNumber_ptr);
    v30 = swift_dynamicCast(v37, &aBlock, (char *)&type metadata for Any + 8, v29, 6);
    v31 = v37[0].receiver;
    if (!v30)
      v31 = 0;
  }
  else
  {
    sub_100008758((uint64_t)&aBlock, &qword_100491B90);
    v31 = 0;
  }
  v32 = v31;
  v33 = String._bridgeToObjectiveC()();
  objc_msgSend(a2, "setProperty:forBodyKey:", v32, v33);

LABEL_29:
  v41 = a5;
  v42 = a6;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v40 = sub_1000BED80;
  *((_QWORD *)&v40 + 1) = &unk_100447E28;
  v34 = _Block_copy(&aBlock);
  v35 = v42;
  swift_retain(a6);
  swift_release(v35);
  v36 = (objc_class *)type metadata accessor for Music_SSMetricsComponentRenderEvent();
  v38.receiver = a3;
  v38.super_class = v36;
  objc_msgSendSuper2(&v38, "setStandardPropertiesWith:completionHandler:", a4, v34);
  _Block_release(v34);
}

uint64_t sub_1000B0184()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000B01AC()
{
  uint64_t v0;

  sub_1000AC4C8(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1000B01B8(void *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v3;

  return sub_1000AC214(a1, a2, a3, *(void **)(v3 + 16));
}

double sub_1000B01C0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_1000AC2F0(a1, a2, *(void (**)(uint64_t, uint64_t (*)(), uint64_t))(v2 + 16));
}

uint64_t sub_1000B01C8(void *a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  return sub_1000AB8F8(a1, a2);
}

void sub_1000B01E8(uint64_t a1, void (*a2)(void))
{
  sub_1000AEBA4(a2);
}

uint64_t sub_1000B0210(uint64_t a1, uint64_t (*a2)(void))
{
  return sub_1000AEFD8(a2);
}

double sub_1000B0238(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000ABAFC(a1, a2, a3);
}

uint64_t sub_1000B0258(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v3;

  return sub_1000AC364(a1, a2, a3, *(void **)(v3 + 16));
}

void sub_1000B0260(uint64_t a1, void (*a2)(void))
{
  sub_1000AF2CC(a2);
}

uint64_t sub_1000B0290()
{
  uint64_t v0;

  return static MPPropertySet.with(_:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1000B029C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_1000B02D8()
{
  uint64_t v0;

  sub_1000AC0E0(*(void **)(v0 + 24), *(_QWORD **)(v0 + 32), *(void (**)(void))(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_1000B0308()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1000B033C()
{
  uint64_t v0;

  sub_1000ABD74(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(void (**)(uint64_t))(v0 + 32));
}

unint64_t sub_1000B0348()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1004921C0;
  if (!qword_1004921C0)
  {
    v1 = sub_100005600(&qword_100490838);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1004921C0);
  }
  return result;
}

uint64_t sub_1000B0394()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000B03B8()
{
  uint64_t v0;

  sub_1000AC920(*(id *)(v0 + 16));
}

uint64_t sub_1000B03C0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B03E4()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t result;

  v1 = *(_BYTE **)(v0 + 24);
  result = sub_1000AA37C((uint64_t)objc_msgSend(*(id *)(v0 + 16), "cloudStatus"), (uint64_t)&off_10043E040);
  if ((result & 1) != 0)
    *v1 = 18;
  return result;
}

uint64_t sub_1000B0424()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void static MusicCoreAnalytics.sendEvent<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  void (*v16)(_BYTE *, uint64_t, uint64_t);
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(_BYTE *, uint64_t);
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  os_log_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(_BYTE *, uint64_t);
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSString v44;
  void *v45;
  uint64_t v46;
  __n128 v47;
  _BYTE v48[4];
  int v49;
  os_log_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t);
  void (*v53)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v54;
  uint64_t aBlock[5];
  uint64_t v56;

  v5 = a1;
  v6 = *(_QWORD *)(a2 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(a1);
  v54 = &v48[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = __chkstk_darwin(v8);
  v11 = &v48[-v10];
  __chkstk_darwin(v9);
  v14 = &v48[-v13];
  if (qword_10048C650 != -1)
    swift_once(&qword_10048C650, sub_1000B09C4);
  v15 = type metadata accessor for Logger(0, v12);
  sub_1000086B4(v15, (uint64_t)qword_1004A1FC0);
  v16 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16);
  v16(v14, v5, a2);
  v53 = v16;
  v17 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v16)(v11, v5, a2);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  v20 = v19;
  if (os_log_type_enabled(v18, v19))
  {
    v21 = swift_slowAlloc(22, -1);
    v50 = v18;
    v22 = a3;
    v23 = v21;
    v51 = swift_slowAlloc(64, -1);
    aBlock[0] = v51;
    *(_DWORD *)v23 = 136315395;
    v52 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 8);
    v49 = v20;
    v24 = (char *)v52(a2, v22);
    v26 = v25;
    *(_QWORD *)(v23 + 4) = sub_100019400(v24, v25, aBlock);
    swift_bridgeObjectRelease(v26);
    v27 = v5;
    v28 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
    v28(v14, a2);
    *(_WORD *)(v23 + 12) = 2081;
    v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 16))(a2, v22);
    v28(v11, a2);
    v5 = v27;
    v30 = sub_1000B0AE0();
    v31 = (char *)Dictionary.description.getter(v29, &type metadata for String, v30, &protocol witness table for String);
    v33 = v32;
    swift_bridgeObjectRelease(v29);
    *(_QWORD *)(v23 + 14) = sub_100019400(v31, v33, aBlock);
    swift_bridgeObjectRelease(v33);
    v34 = v50;
    _os_log_impl((void *)&_mh_execute_header, v50, (os_log_type_t)v49, "Send analytics event: %s, payload: %{private}s", (uint8_t *)v23, 0x16u);
    v35 = v51;
    swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    v36 = v23;
    a3 = v22;
    swift_slowDealloc(v36, -1, -1);

    v52(a2, v22);
  }
  else
  {
    v38 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
    v38(v11, a2);
    v38(v14, a2);

    (*(void (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  }
  v39 = v37;
  v40 = v54;
  v53(v54, v5, a2);
  v41 = *(unsigned __int8 *)(v6 + 80);
  v42 = (v41 + 32) & ~v41;
  v43 = swift_allocObject(&unk_100448460, v42 + v7, v41 | 7);
  *(_QWORD *)(v43 + 16) = a2;
  *(_QWORD *)(v43 + 24) = a3;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v6 + 32))(v43 + v42, v40, a2);
  v44 = String._bridgeToObjectiveC()();
  aBlock[4] = (uint64_t)sub_1000B0A90;
  v56 = v43;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000B0950;
  aBlock[3] = (uint64_t)&unk_100448478;
  v45 = _Block_copy(aBlock);
  v46 = v56;
  swift_retain(v43);
  v47 = swift_release(v46);
  AnalyticsSendEventLazy(v44, v45, v47);
  _Block_release(v45);
  swift_release(v43);
  swift_bridgeObjectRelease(v39);

}

void static MusicCoreAnalytics.sendEvent(eventName:eventPayload:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v6;
  void *v7;
  uint64_t v8;
  __n128 v9;
  _QWORD v10[5];
  uint64_t v11;

  v6 = String._bridgeToObjectiveC()();
  v10[4] = a3;
  v11 = a4;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_1000B0950;
  v10[3] = &unk_1004484A0;
  v7 = _Block_copy(v10);
  v8 = v11;
  swift_retain(a4);
  v9 = swift_release(v8);
  AnalyticsSendEventLazy(v6, v7, v9);
  _Block_release(v7);

}

Class sub_1000B0950(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSDictionary v5;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v4 = v1(v3);
  swift_release(v2);
  if (v4)
  {
    sub_1000B0AE0();
    v5.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v5.super.isa = 0;
  }
  return v5.super.isa;
}

uint64_t sub_1000B09C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for Logger(0, a2);
  sub_1000086DC(v2, qword_1004A1FC0);
  sub_1000086B4(v2, (uint64_t)qword_1004A1FC0);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001003ACFD0, 0x7363697274654DLL, 0xE700000000000000);
}

uint64_t sub_1000B0A38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1000B0A90()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 24) + 16))();
}

uint64_t sub_1000B0AC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000B0AD8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1000B0AE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1004918F0;
  if (!qword_1004918F0)
  {
    v1 = objc_opt_self(NSObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1004918F0);
  }
  return result;
}

ValueMetadata *type metadata accessor for MusicCoreAnalytics()
{
  return &type metadata for MusicCoreAnalytics;
}

void *MetricsEvent.PageRender.performanceMetrics.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  _BYTE v4[24];

  swift_beginAccess(v0 + 16, v4, 0, 0);
  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

uint64_t MetricsEvent.PageRender.onScreenResourcesAppearEndTime.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 24, v2, 0, 0);
  return *(_QWORD *)(v0 + 24);
}

uint64_t MetricsEvent.PageRender.pageUserInteractiveTime.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 40, v2, 0, 0);
  return *(_QWORD *)(v0 + 40);
}

uint64_t MetricsEvent.PageRender.resourceRequestStartTime.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 56, v2, 0, 0);
  return *(_QWORD *)(v0 + 56);
}

uint64_t MetricsEvent.PageRender.pageEndTime.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 72, v2, 0, 0);
  return *(_QWORD *)(v0 + 72);
}

uint64_t MetricsEvent.PageRender.pageInterruptTime.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 88, v2, 0, 0);
  return *(_QWORD *)(v0 + 88);
}

uint64_t MetricsEvent.PageRender.pageAppearTime.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 104, v2, 0, 0);
  return *(_QWORD *)(v0 + 104);
}

uint64_t MetricsEvent.PageRender.pageRequestTime.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 120, v2, 0, 0);
  return *(_QWORD *)(v0 + 120);
}

uint64_t MetricsEvent.PageRender.request.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 152);
  swift_beginAccess(v4, v7, 0, 0);
  v5 = type metadata accessor for Optional(0, *(_QWORD *)(v3 + 80));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, v4, v5);
}

uint64_t MetricsEvent.PageRender.request.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 152);
  swift_beginAccess(v4, v7, 33, 0);
  v5 = type metadata accessor for Optional(0, *(_QWORD *)(v3 + 80));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
  return swift_endAccess(v7);
}

uint64_t (*MetricsEvent.PageRender.request.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + *(_QWORD *)(*(_QWORD *)v1 + 152), a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t MetricsEvent.PageRender.pageProperties.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000B0E20(v1 + *(_QWORD *)(*(_QWORD *)v1 + 160), a1);
}

uint64_t sub_1000B0E20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MetricsPageProperties(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t MetricsEvent.PageRender.__allocating_init(pageProperties:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  MetricsEvent.PageRender.init(pageProperties:)(a1);
  return v3;
}

uint64_t *MetricsEvent.PageRender.init(pageProperties:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  v1[2] = 0;
  v1[3] = 0;
  *((_BYTE *)v1 + 32) = 1;
  v1[5] = 0;
  *((_BYTE *)v1 + 48) = 1;
  v1[7] = 0;
  *((_BYTE *)v1 + 64) = 1;
  v1[9] = 0;
  *((_BYTE *)v1 + 80) = 1;
  v1[11] = 0;
  *((_BYTE *)v1 + 96) = 1;
  v1[13] = 0;
  *((_BYTE *)v1 + 112) = 1;
  v1[15] = 0;
  *((_BYTE *)v1 + 128) = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 56))((uint64_t)v1 + *(_QWORD *)(v3 + 152), 1, 1);
  *((_BYTE *)v1 + *(_QWORD *)(*v1 + 168)) = 0;
  sub_1000B0F40(a1, (uint64_t)v1 + *(_QWORD *)(*v1 + 160));
  return v1;
}

uint64_t sub_1000B0F40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MetricsPageProperties(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void MetricsEvent.PageRender.updatePerformanceMetrics(_:with:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE v13[24];
  _BYTE v14[24];

  swift_beginAccess(v3 + 16, v13, 1, 0);
  v7 = *(void **)(v3 + 16);
  *(_QWORD *)(v3 + 16) = a1;
  v8 = a1;

  v9 = *(void **)(v3 + 16);
  if (v9)
  {
    objc_msgSend(v9, "responseEndTime");
    v11 = v10;
    swift_beginAccess(v3 + 24, v14, 0, 0);
    if ((*(_BYTE *)(v3 + 32) & 1) == 0)
    {
      swift_beginAccess(v3 + 72, v12, 1, 0);
      *(_QWORD *)(v3 + 72) = v11;
      *(_BYTE *)(v3 + 80) = 0;
      sub_1000B1048(a2, a3);
    }
  }
}

double sub_1000B1048(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  double result;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 168);
  if ((*(_BYTE *)(v2 + v3) & 1) == 0)
  {
    *(_BYTE *)(v2 + v3) = 1;
    sub_1000651F0();
    v6 = (_QWORD *)swift_allocObject(&unk_1004485D8, 40, 7);
    v6[2] = v2;
    v6[3] = a1;
    v6[4] = a2;
    swift_bridgeObjectRetain();
    swift_retain(v2);
    static OS_dispatch_queue.asyncOnMainIfNeeded(_:)((uint64_t (*)(void))sub_1000B17FC, (uint64_t)v6);
    *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  }
  return result;
}

Swift::Void __swiftcall MetricsEvent.PageRender.markPageAppear()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  _BYTE v10[24];

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = swift_beginAccess(v1 + 104, v10, 1, 0);
  if (*(_BYTE *)(v1 + 112) == 1)
  {
    v7 = Date.init()(v6);
    v8 = Date.timeIntervalSince1970.getter(v7);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    *(double *)(v1 + 104) = v8;
    *(_BYTE *)(v1 + 112) = 0;
  }
}

Swift::Void __swiftcall MetricsEvent.PageRender.markPageRequest()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  _BYTE v10[24];

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = swift_beginAccess(v1 + 120, v10, 1, 0);
  if (*(_BYTE *)(v1 + 128) == 1)
  {
    v7 = Date.init()(v6);
    v8 = Date.timeIntervalSince1970.getter(v7);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    *(double *)(v1 + 120) = v8;
    *(_BYTE *)(v1 + 128) = 0;
  }
}

Swift::Void __swiftcall MetricsEvent.PageRender.markPageAsUserInteractive()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  _BYTE v10[24];

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = swift_beginAccess(v1 + 40, v10, 1, 0);
  if (*(_BYTE *)(v1 + 48) == 1)
  {
    v7 = Date.init()(v6);
    v8 = Date.timeIntervalSince1970.getter(v7);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    *(double *)(v1 + 40) = v8;
    *(_BYTE *)(v1 + 48) = 0;
  }
}

Swift::Void __swiftcall MetricsEvent.PageRender.markResourceRequestStartTime()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  _BYTE v10[24];

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = swift_beginAccess(v1 + 56, v10, 1, 0);
  if (*(_BYTE *)(v1 + 64) == 1)
  {
    v7 = Date.init()(v6);
    v8 = Date.timeIntervalSince1970.getter(v7);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    *(double *)(v1 + 56) = v8;
    *(_BYTE *)(v1 + 64) = 0;
  }
}

Swift::Void __swiftcall MetricsEvent.PageRender.markOnScreenResourcesAppearEndTime(with:)(Swift::String_optional with)
{
  uint64_t v1;
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  void *v13;
  _BYTE v15[24];
  _BYTE v16[24];
  _BYTE v17[24];

  v2 = v1;
  object = with.value._object;
  countAndFlagsBits = with.value._countAndFlagsBits;
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  swift_beginAccess(v2 + 24, v17, 1, 0);
  if (*(_BYTE *)(v2 + 32) == 1)
  {
    v10 = Date.init()(v9);
    v11 = Date.timeIntervalSince1970.getter(v10);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(double *)(v2 + 24) = v11;
    *(_BYTE *)(v2 + 32) = 0;
    *(_QWORD *)&v12 = swift_beginAccess(v2 + 16, v16, 0, 0).n128_u64[0];
    v13 = *(void **)(v2 + 16);
    if (v13)
    {
      objc_msgSend(v13, "responseEndTime", v12);
      swift_beginAccess(v2 + 72, v15, 1, 0);
      *(double *)(v2 + 72) = v11;
      *(_BYTE *)(v2 + 80) = 0;
      sub_1000B1048(countAndFlagsBits, (uint64_t)object);
    }
  }
}

Swift::Void __swiftcall MetricsEvent.PageRender.markPageDisappearanceAndRecordIfNecessary(with:)(Swift::String_optional with)
{
  uint64_t v1;
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  _BYTE v12[24];
  _BYTE v13[24];

  v2 = v1;
  object = with.value._object;
  countAndFlagsBits = with.value._countAndFlagsBits;
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess(v2 + 72, v13, 0, 0);
  if (*(_BYTE *)(v2 + 80) == 1)
  {
    swift_beginAccess(v2 + 88, v12, 1, 0);
    if (*(_BYTE *)(v2 + 96) == 1)
    {
      v10 = Date.init()(v9);
      v11 = Date.timeIntervalSince1970.getter(v10);
      (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
      *(double *)(v2 + 88) = v11;
      *(_BYTE *)(v2 + 96) = 0;
    }
  }
  sub_1000B1048(countAndFlagsBits, (uint64_t)object);
}

void sub_1000B15D4(uint64_t a1, uint64_t a2, void *a3)
{
  if (qword_10048C648 != -1)
    swift_once(&qword_10048C648, sub_10009F8B8);
  MetricsReportingController.recordPageRenderEvent<A>(_:pageContext:)(a1, a2, a3);
}

id *MetricsEvent.PageRender.deinit()
{
  id *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;

  v1 = *v0;

  v2 = (char *)v0 + *((_QWORD *)*v0 + 19);
  v3 = type metadata accessor for Optional(0, v1[10]);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  sub_1000B16B0((uint64_t)v0 + *((_QWORD *)*v0 + 20));
  return v0;
}

uint64_t sub_1000B16B0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MetricsPageProperties(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t MetricsEvent.PageRender.__deallocating_deinit()
{
  uint64_t v0;

  MetricsEvent.PageRender.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000B1710(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[11];

  v5[0] = "\b";
  v5[1] = &unk_10038A7C8;
  v5[2] = &unk_10038A7C8;
  v5[3] = &unk_10038A7C8;
  v5[4] = &unk_10038A7C8;
  v5[5] = &unk_10038A7C8;
  v5[6] = &unk_10038A7C8;
  v5[7] = &unk_10038A7C8;
  result = type metadata accessor for Optional(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v5[8] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for MetricsPageProperties(319);
    if (v4 <= 0x3F)
    {
      v5[9] = *(_QWORD *)(result - 8) + 64;
      v5[10] = &unk_10038A7E0;
      result = swift_initClassMetadata2(a1, 0, 11, v5, a1 + 88);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for MetricsEvent.PageRender(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100031DCC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MetricsEvent.PageRender);
}

uint64_t sub_1000B17D0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000B17FC()
{
  uint64_t v0;

  sub_1000B15D4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

__n128 static ApplicationCapabilities.shared.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  __n128 result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __n128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  if (qword_10048C658 != -1)
    swift_once(&qword_10048C658, sub_1000B3BEC);
  v2 = static ApplicationCapabilities.Controller.shared;
  KeyPath = swift_getKeyPath(&unk_10038A8D8);
  v4 = swift_getKeyPath(&unk_10038A900);
  static Published.subscript.getter(&v16, v2, KeyPath, v4);
  swift_release(KeyPath);
  swift_release(v4);
  v5 = BYTE1(v16);
  v6 = BYTE2(v16);
  v7 = v22;
  v8 = v23;
  v9 = v24;
  v10 = v25;
  v12 = v17;
  result = v18;
  v13 = v19;
  v14 = v20;
  v15 = v21;
  *(_BYTE *)a1 = v16;
  *(_BYTE *)(a1 + 1) = v5;
  *(_BYTE *)(a1 + 2) = v6;
  *(_OWORD *)(a1 + 8) = v12;
  *(__n128 *)(a1 + 24) = result;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v14;
  *(_OWORD *)(a1 + 72) = v15;
  *(_BYTE *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 96) = v8;
  *(_BYTE *)(a1 + 104) = v9;
  *(_QWORD *)(a1 + 112) = v10;
  return result;
}

uint64_t *ApplicationCapabilities.Controller.shared.unsafeMutableAddressor()
{
  if (qword_10048C658 != -1)
    swift_once(&qword_10048C658, sub_1000B3BEC);
  return &static ApplicationCapabilities.Controller.shared;
}

__n128 ApplicationCapabilities.Controller.capabilities.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  __n128 result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __n128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  KeyPath = swift_getKeyPath(&unk_10038A8D8);
  v4 = swift_getKeyPath(&unk_10038A900);
  static Published.subscript.getter(&v16, v1, KeyPath, v4);
  swift_release(v4);
  swift_release(KeyPath);
  v5 = BYTE1(v16);
  v6 = BYTE2(v16);
  v7 = v22;
  v8 = v23;
  v9 = v24;
  v10 = v25;
  v12 = v17;
  result = v18;
  v13 = v19;
  v14 = v20;
  v15 = v21;
  *(_BYTE *)a1 = v16;
  *(_BYTE *)(a1 + 1) = v5;
  *(_BYTE *)(a1 + 2) = v6;
  *(_OWORD *)(a1 + 8) = v12;
  *(__n128 *)(a1 + 24) = result;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v14;
  *(_OWORD *)(a1 + 72) = v15;
  *(_BYTE *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 96) = v8;
  *(_BYTE *)(a1 + 104) = v9;
  *(_QWORD *)(a1 + 112) = v10;
  return result;
}

uint64_t ApplicationCapabilities.hasNetworkConnectivity.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t ApplicationCapabilities.isCloudLibraryEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t Library.Menu.Request.filteringOptions.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t Library.Menu.Request.excludedIdentifiers.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 32));
}

uint64_t ApplicationCapabilities.Service.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000B1A58 + 4 * byte_10038A800[a1]))(0x636973756DLL, 0xE500000000000000);
}

uint64_t sub_1000B1A58()
{
  return 0x646956636973756DLL;
}

unint64_t sub_1000B1A78()
{
  return 0xD000000000000013;
}

uint64_t ApplicationCapabilities.Service.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000B1B8C + 4 * byte_10038A80B[a1]))(0x636973756DLL, 0xE500000000000000);
}

uint64_t sub_1000B1B8C()
{
  return 0x646956636973756DLL;
}

unint64_t sub_1000B1BAC()
{
  return 0xD000000000000013;
}

Swift::Int sub_1000B1C94()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6);
  v2 = ApplicationCapabilities.Service.rawValue.getter(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000B1CF4(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = ApplicationCapabilities.Service.rawValue.getter(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000B1D34()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6);
  v2 = ApplicationCapabilities.Service.rawValue.getter(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

unint64_t sub_1000B1D90@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s9MusicCore23ApplicationCapabilitiesV7ServiceO8rawValueAESgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000B1DBC@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = ApplicationCapabilities.Service.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000B1DE4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = ApplicationCapabilities.Service.rawValue.getter(*a1);
  v5 = v4;
  v6 = ApplicationCapabilities.Service.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_1000B1E6C()
{
  unsigned __int8 *v0;

  return ApplicationCapabilities.Service.rawValue.getter(*v0);
}

Swift::Void __swiftcall ApplicationCapabilities.setServiceEnabled(_:service:)(Swift::Bool _, MusicCore::ApplicationCapabilities::Service service)
{
  if (objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection"))
    __asm { BR              X11 }
  __break(1u);
  JUMPOUT(0x1000B1F6CLL);
}

uint64_t ApplicationCapabilities.ratingWarning.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)(v1 + 72);
  v3 = *(_OWORD *)(v1 + 56);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 40);
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = v2;
  swift_bridgeObjectRetain(v3);
  return swift_bridgeObjectRetain(v2);
}

uint64_t ApplicationCapabilities.RatingWarning.threshold.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ApplicationCapabilities.RatingWarning.message.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 32));
  return v1;
}

uint64_t ApplicationCapabilities.RatingWarning.description.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  Swift::String v2;
  void *object;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  _QWORD v23[2];

  v1 = v0;
  strcpy((char *)v23, "RatingWarning(");
  HIBYTE(v23[1]) = -18;
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 10;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 0x6C6F687365726874;
  v5._object = (void *)0xEA00000000003D64;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(0xEA00000000003D64);
  v6 = v0[1];
  v7 = v1[2];
  swift_bridgeObjectRetain(v7);
  v8 = Optional<A>.description.getter(v6, v7);
  v10 = v9;
  swift_bridgeObjectRelease(v7);
  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v10);
  v12._countAndFlagsBits = 10;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13._countAndFlagsBits = 0x3D656C746974;
  v13._object = (void *)0xE600000000000000;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(0xE600000000000000);
  v15 = v1[3];
  v14 = v1[4];
  swift_bridgeObjectRetain(v14);
  v16 = Optional<A>.description.getter(v15, v14);
  v18 = v17;
  swift_bridgeObjectRelease(v14);
  v19._countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v18);
  v20._countAndFlagsBits = 10;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0x3D6567617373656DLL;
  v21._object = (void *)0xE800000000000000;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(0xE800000000000000);
  return v23[0];
}

uint64_t sub_1000B21D8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return _s9MusicCore23ApplicationCapabilitiesV13RatingWarningV23__derived_struct_equalsySbAE_AEtFZ_0(v5, v7) & 1;
}

void *ApplicationCapabilities.subscriptionStatus.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 80);
  v2 = v1;
  return v1;
}

uint64_t ApplicationCapabilities.subscriptionState.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 88);
}

MusicCore::ApplicationCapabilities::SubscriptionState_optional __swiftcall ApplicationCapabilities.SubscriptionState.init(rawValue:)(Swift::String rawValue)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &off_10043E198;
  return (MusicCore::ApplicationCapabilities::SubscriptionState_optional)sub_1000BC738(rawValue, v1);
}

uint64_t ApplicationCapabilities.SubscriptionState.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000B22A4 + 4 * byte_10038A816[a1]))(0x6564696365646E75, 0xE900000000000064);
}

uint64_t sub_1000B22A4()
{
  return 0x63697373616C63;
}

uint64_t sub_1000B22BC()
{
  return 0x6269726373627573;
}

uint64_t sub_1000B22D8()
{
  return 0x6275536563696F76;
}

uint64_t sub_1000B22FC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100027FFC(*a1, *a2);
}

void sub_1000B2308()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_1000B2358()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x63697373616C63, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

void sub_1000B23D8()
{
  __asm { BR              X10 }
}

uint64_t sub_1000B2418(uint64_t a1)
{
  String.hash(into:)(a1, 0x63697373616C63, 0xE700000000000000);
  return swift_bridgeObjectRelease(0xE700000000000000);
}

void sub_1000B2484()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_1000B24D0()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x63697373616C63, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

unint64_t sub_1000B2550@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_10043E198;
  result = sub_1000BC738(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_1000B2584()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1000B25B8 + 4 * byte_10038A826[*v0]))();
}

void sub_1000B25B8(_QWORD *a1@<X8>)
{
  *a1 = 0x63697373616C63;
  a1[1] = 0xE700000000000000;
}

void sub_1000B25D4(_QWORD *a1@<X8>)
{
  *a1 = 0x6269726373627573;
  a1[1] = 0xEA00000000007265;
}

void sub_1000B25F4(_QWORD *a1@<X8>)
{
  *a1 = 0x6275536563696F76;
  a1[1] = 0xEF72656269726373;
}

uint64_t Player.ReplaceCommand.replaceIntent.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000B2624(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;

  v2 = *(unsigned __int8 *)(a1 + 1);
  v3 = *(unsigned __int8 *)(a2 + 1);
  sub_1000281B0(*(_BYTE *)a1);
  return v4 & ~(v2 ^ v3) & 1;
}

uint64_t ApplicationCapabilities.Tabs.description.getter(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  Swift::String v13;
  void *object;
  Swift::String v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  void *v23;
  char v25;
  Swift::String v26;
  uint64_t v27;
  unint64_t v28;

  v27 = 0x2873626154;
  v28 = 0xE500000000000000;
  v6 = swift_bridgeObjectRetain();
  v7 = Array.description.getter(v6, &type metadata for TabIdentifier);
  v9 = v8;
  swift_bridgeObjectRelease(a1);
  v10._countAndFlagsBits = 10;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = v7;
  v11._object = v9;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v9);
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease(0xE000000000000000);
  v26._countAndFlagsBits = 0xD000000000000010;
  v26._object = (void *)0x80000001003AF2D0;
  v25 = a2;
  v12 = sub_100005574(&qword_100490918);
  v13._countAndFlagsBits = String.init<A>(describing:)(&v25, v12);
  object = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(object);
  v15._countAndFlagsBits = 10;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  v16 = v26._object;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(v16);
  v26._countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease(v26._object);
  v26._countAndFlagsBits = 0xD000000000000012;
  v26._object = (void *)0x80000001003AF2F0;
  v17 = swift_bridgeObjectRetain();
  v18 = Array.description.getter(v17, &type metadata for ApplicationCapabilities.Tabs.Configuration);
  v20 = v19;
  swift_bridgeObjectRelease(a3);
  v21._countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v20);
  v22._countAndFlagsBits = 10;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  v23 = v26._object;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(v23);
  return v27;
}

uint64_t static ApplicationCapabilities.Tabs.__derived_struct_equals(_:_:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  char v10;

  if ((sub_1000B2BC0(a1, a4) & 1) == 0)
    return 0;
  if (a2 != 6)
  {
    if (a5 == 6)
      return 0;
    sub_100028000(a2);
    if ((v10 & 1) == 0)
      return 0;
    return sub_1000B2DCC(a3, a6);
  }
  if (a5 == 6)
    return sub_1000B2DCC(a3, a6);
  return 0;
}

uint64_t sub_1000B28B0(uint64_t a1, uint64_t a2)
{
  return sub_1000B3304(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist.Variant, (unint64_t *)&qword_100490B90, (uint64_t)&protocol conformance descriptor for Playlist.Variant);
}

uint64_t sub_1000B28CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X10 }
  }
  return 1;
}

uint64_t sub_1000B2BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X10 }
  }
  return 1;
}

uint64_t sub_1000B2DCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X10 }
  }
  return 1;
}

uint64_t sub_1000B3024(uint64_t a1, uint64_t a2)
{
  return sub_1000B304C(a1, a2, (uint64_t)&qword_100490B70, NSSortDescriptor_ptr);
}

uint64_t sub_1000B3038(uint64_t a1, uint64_t a2)
{
  return sub_1000B304C(a1, a2, (uint64_t)&qword_100490B78, MPIdentifierSet_ptr);
}

uint64_t sub_1000B304C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t i;
  id v21;
  void *v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v8 = (unint64_t)a1 >> 62;
  if (!((unint64_t)a1 >> 62))
  {
    v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v10 = (unint64_t)a2 >> 62;
    if (!((unint64_t)a2 >> 62))
      goto LABEL_3;
LABEL_38:
    if (a2 < 0)
      v26 = a2;
    else
      v26 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v11 = (void *)_CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease();
    if ((void *)v9 == v11)
      goto LABEL_4;
    return 0;
  }
  if (a1 < 0)
    v25 = a1;
  else
    v25 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v9 = _CocoaArrayWrapper.endIndex.getter(v25);
  swift_bridgeObjectRelease();
  v10 = (unint64_t)a2 >> 62;
  if ((unint64_t)a2 >> 62)
    goto LABEL_38;
LABEL_3:
  v11 = *(void **)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if ((void *)v9 != v11)
    return 0;
LABEL_4:
  if (!v9)
    return 1;
  v12 = a1 & 0xFFFFFFFFFFFFFF8;
  v13 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a1 < 0)
    v12 = a1;
  if (v8)
    v13 = v12;
  v14 = a2 & 0xFFFFFFFFFFFFFF8;
  v15 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0)
    v14 = a2;
  if (v10)
    v15 = v14;
  if (v13 == v15)
    return 1;
  if (v9 < 0)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  v27 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_47:
    result = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    goto LABEL_18;
  }
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_49;
  }
  result = (uint64_t)*(id *)(a1 + 32);
LABEL_18:
  v11 = (void *)result;
  v10 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
  {
LABEL_49:
    v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
LABEL_21:
    v18 = v17;
    a4 = (_QWORD *)sub_1000087DC(0, (unint64_t *)a3, a4);
    a3 = static NSObject.== infix(_:_:)(v11, v18);

    if ((a3 & 1) != 0)
    {
      v19 = 1 - v9;
      for (i = 5; ; ++i)
      {
        v9 = v19 + i == 5;
        if (v19 + i == 5)
          return v9;
        v24 = i - 4;
        if (v27)
        {
          a3 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1);
          if (v10)
            goto LABEL_23;
        }
        else
        {
          if (v24 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_45:
            __break(1u);
            goto LABEL_46;
          }
          a3 = (uint64_t)*(id *)(a1 + 8 * i);
          if (v10)
          {
LABEL_23:
            v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a2);
            goto LABEL_24;
          }
        }
        if (v24 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_45;
        v21 = *(id *)(a2 + 8 * i);
LABEL_24:
        v22 = v21;
        v23 = static NSObject.== infix(_:_:)(a3, v21);

        if ((v23 & 1) == 0)
          return v9;
      }
    }
    return 0;
  }
  if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v17 = *(id *)(a2 + 32);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000B32D4(uint64_t a1, uint64_t a2)
{
  return sub_1000B304C(a1, a2, (uint64_t)&qword_100490B80, MPModelObject_ptr);
}

uint64_t sub_1000B32E8(uint64_t a1, uint64_t a2)
{
  return sub_1000B3304(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist.Entry, &qword_100490B88, (uint64_t)&protocol conformance descriptor for Playlist.Entry);
}

uint64_t sub_1000B3304(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, unint64_t, uint64_t);
  uint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void (*v27)(uint64_t, uint64_t);
  BOOL v29;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, unint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);

  v10 = a3(0);
  v11 = __chkstk_darwin(v10);
  __chkstk_darwin(v11);
  v15 = (char *)&v31 - v14;
  v16 = *(_QWORD *)(a1 + 16);
  if (v16 == *(_QWORD *)(a2 + 16))
  {
    if (!v16 || a1 == a2)
    {
      v26 = 1;
    }
    else
    {
      v34 = v13;
      v35 = v12;
      v36 = a3;
      v17 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      v31 = *(_QWORD *)(v12 + 72);
      v32 = a1;
      v33 = *(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 16);
      v18 = v16 - 1;
      v19 = v13;
      do
      {
        v20 = v33;
        v33((uint64_t)v15, a1 + v17, v10);
        v21 = a2;
        v20(v19, a2 + v17, v10);
        v22 = a4;
        v23 = a4;
        v24 = a5;
        v25 = sub_100006924(v23, v36, a5);
        v26 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v19, v10, v25);
        v27 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
        v27(v19, v10);
        v27((uint64_t)v15, v10);
        v29 = v18-- != 0;
        if ((v26 & 1) == 0)
          break;
        v17 += v31;
        a5 = v24;
        a4 = v22;
        a2 = v21;
        a1 = v32;
      }
      while (v29);
    }
  }
  else
  {
    v26 = 0;
  }
  return v26 & 1;
}

uint64_t sub_1000B34A8(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  char v6;

  v2 = *(unsigned __int8 *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(unsigned __int8 *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  if ((sub_1000B2BC0(*(_QWORD *)a1, *(_QWORD *)a2) & 1) == 0)
    return 0;
  if (v2 != 6)
  {
    if (v4 == 6)
      return 0;
    sub_100028000(v2);
    if ((v6 & 1) == 0)
      return 0;
    return sub_1000B2DCC(v3, v5);
  }
  if (v4 == 6)
    return sub_1000B2DCC(v3, v5);
  return 0;
}

uint64_t sub_1000B3538()
{
  uint64_t v0;

  return ApplicationCapabilities.Tabs.description.getter(*(_QWORD *)v0, *(_BYTE *)(v0 + 8), *(_QWORD *)(v0 + 16));
}

uint64_t ApplicationCapabilities.tabs.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 112);
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v2);
  return v1;
}

void sub_1000B3590()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[512];
  _BYTE v22[8];
  id v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _BYTE v27[16];
  _BYTE v28[32];

  v1 = v0;
  v2 = sub_100005574(&qword_1004967B0);
  inited = swift_initStackObject(v2, v21);
  *(_OWORD *)(inited + 16) = xmmword_100384AD0;
  *(_QWORD *)(inited + 32) = 0x64656E6769537369;
  *(_QWORD *)(inited + 40) = 0xEA00000000006E49;
  *(_BYTE *)(inited + 48) = *(_BYTE *)v0;
  *(_QWORD *)(inited + 72) = &type metadata for Bool;
  *(_QWORD *)(inited + 80) = 0xD000000000000016;
  *(_QWORD *)(inited + 88) = 0x80000001003AFAD0;
  *(_BYTE *)(inited + 96) = *(_BYTE *)(v0 + 1);
  *(_QWORD *)(inited + 120) = &type metadata for Bool;
  *(_QWORD *)(inited + 128) = 0xD000000000000015;
  *(_QWORD *)(inited + 136) = 0x80000001003AFAF0;
  *(_BYTE *)(inited + 144) = *(_BYTE *)(v0 + 2);
  *(_QWORD *)(inited + 168) = &type metadata for Bool;
  *(_QWORD *)(inited + 176) = 0xD000000000000018;
  *(_QWORD *)(inited + 184) = 0x80000001003AFB10;
  sub_1000B3A58(v0, (uint64_t *)(inited + 192));
  *(_QWORD *)(inited + 224) = 0x536465776F6C6C61;
  *(_QWORD *)(inited + 232) = 0xEF73656369767265;
  v4 = *(_QWORD *)(v0 + 24);
  v5 = sub_1000BC520();
  v6 = swift_bridgeObjectRetain();
  v7 = Set.description.getter(v6, &type metadata for ApplicationCapabilities.Service, v5);
  v9 = v8;
  swift_bridgeObjectRelease(v4);
  *(_QWORD *)(inited + 240) = v7;
  *(_QWORD *)(inited + 248) = v9;
  *(_QWORD *)(inited + 264) = &type metadata for String;
  *(_QWORD *)(inited + 272) = 0xD000000000000012;
  *(_QWORD *)(inited + 280) = 0x80000001003AFB30;
  v10 = *(_QWORD *)(v1 + 32);
  v11 = swift_bridgeObjectRetain();
  v12 = Set.description.getter(v11, &type metadata for ApplicationCapabilities.Service, v5);
  v14 = v13;
  swift_bridgeObjectRelease(v10);
  *(_QWORD *)(inited + 288) = v12;
  *(_QWORD *)(inited + 296) = v14;
  *(_QWORD *)(inited + 312) = &type metadata for String;
  strcpy((char *)(inited + 320), "ratingWarning");
  *(_WORD *)(inited + 334) = -4864;
  v15 = *(_OWORD *)(v1 + 56);
  v24 = *(_OWORD *)(v1 + 40);
  v25 = v15;
  v26 = *(_QWORD *)(v1 + 72);
  sub_1000149A8((uint64_t)&v24 + 8, (uint64_t)v28, &qword_10048E9F8);
  sub_1000149A8((uint64_t)&v25 + 8, (uint64_t)v27, &qword_10048E9F8);
  sub_1000595EC((uint64_t)v28);
  sub_1000595EC((uint64_t)v27);
  v16 = ApplicationCapabilities.RatingWarning.description.getter();
  v18 = v17;
  sub_100052668((uint64_t)v28);
  sub_100052668((uint64_t)v27);
  *(_QWORD *)(inited + 336) = v16;
  *(_QWORD *)(inited + 344) = v18;
  *(_QWORD *)(inited + 360) = &type metadata for String;
  *(_QWORD *)(inited + 368) = 0xD000000000000012;
  *(_QWORD *)(inited + 376) = 0x80000001003AFB50;
  sub_1000149A8(v1 + 80, (uint64_t)&v23, (uint64_t *)&unk_100490BE0);
  sub_1000149A8((uint64_t)&v23, (uint64_t)v22, (uint64_t *)&unk_100490BE0);
  sub_1000BC564(&v23);
  v19 = sub_100005574((uint64_t *)&unk_100490BE0);
  *(_QWORD *)(inited + 384) = String.init<A>(describing:)(v22, v19);
  *(_QWORD *)(inited + 392) = v20;
  *(_QWORD *)(inited + 408) = &type metadata for String;
  *(_QWORD *)(inited + 416) = 0xD000000000000011;
  *(_QWORD *)(inited + 424) = 0x80000001003AFB70;
  __asm { BR              X12 }
}

unint64_t sub_1000B3874()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;

  v0[54] = 0x63697373616C63;
  v0[55] = 0xE700000000000000;
  v0[57] = v2;
  v0[58] = 1935827316;
  v0[59] = 0xE400000000000000;
  v4 = *(_QWORD *)(v1 + 96);
  *(_QWORD *)(v3 - 192) = v4;
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    sub_10007736C(0, v5, 0);
    __asm { BR              X9 }
  }
  v0[63] = sub_100005574(&qword_10048E158);
  v0[60] = _swiftEmptyArrayStorage;
  return sub_100098D5C((uint64_t)v0);
}

void sub_1000B3A58(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  Swift::String v5;
  void *object;
  Swift::String v7;

  v3 = 0xE700000000000000;
  v4 = 0x6E776F6E6B6E75;
  switch(*(_QWORD *)(a1 + 16))
  {
    case 0:
      break;
    case 1:
      v4 = 0x64656C62616E65;
      break;
    case 2:
      v3 = 0xE800000000000000;
      v4 = 0x64656C6261736964;
      break;
    case 3:
      v3 = 0xE500000000000000;
      v4 = 0x6564696C67;
      break;
    default:
      v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease(object);
      v7._countAndFlagsBits = 62;
      v7._object = (void *)0xE100000000000000;
      String.append(_:)(v7);
      v4 = 0x3C6E776F6E6B6E75;
      v3 = 0xE800000000000000;
      break;
  }
  a2[3] = (uint64_t)&type metadata for String;
  *a2 = v4;
  a2[1] = v3;
}

BOOL sub_1000B3B6C(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[7];
  uint64_t v13;
  _OWORD v14[7];
  uint64_t v15;

  v2 = *(_OWORD *)(a1 + 80);
  v12[4] = *(_OWORD *)(a1 + 64);
  v12[5] = v2;
  v12[6] = *(_OWORD *)(a1 + 96);
  v13 = *(_QWORD *)(a1 + 112);
  v3 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v3;
  v4 = *(_OWORD *)(a1 + 48);
  v12[2] = *(_OWORD *)(a1 + 32);
  v12[3] = v4;
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[3];
  v14[2] = a2[2];
  v14[3] = v7;
  v14[0] = v5;
  v14[1] = v6;
  v8 = a2[4];
  v9 = a2[5];
  v10 = a2[6];
  v15 = *((_QWORD *)a2 + 14);
  v14[5] = v9;
  v14[6] = v10;
  v14[4] = v8;
  return _s9MusicCore23ApplicationCapabilitiesV23__derived_struct_equalsySbAC_ACtFZ_0((unsigned __int8 *)v12, (unsigned __int8 *)v14);
}

uint64_t sub_1000B3BEC()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for ApplicationCapabilities.Controller(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_1000B3C68();
  static ApplicationCapabilities.Controller.shared = result;
  return result;
}

uint64_t static ApplicationCapabilities.Controller.shared.getter()
{
  if (qword_10048C658 != -1)
    swift_once(&qword_10048C658, sub_1000B3BEC);
  return swift_retain(static ApplicationCapabilities.Controller.shared);
}

uint64_t sub_1000B3C68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  NSString v25;
  uint64_t v26;
  void *v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _BYTE v39[32];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v1 = v0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_needsNetworkReachabilityUpdate) = 0;
  v2 = v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_stateHandler;
  *(_QWORD *)v2 = 0;
  *(_BYTE *)(v2 + 8) = 1;
  v3 = OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_lock;
  v4 = type metadata accessor for UnfairLock();
  swift_allocObject(v4, 24, 7);
  *(_QWORD *)(v0 + v3) = UnfairLock.init()();
  v5 = OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_storeBag;
  if (qword_10048C720 != -1)
    swift_once(&qword_10048C720, sub_1000C378C);
  sub_100005574(&qword_100490BA0);
  UnfairLock.locked<A>(_:)((void (*)(void))sub_10000D460);
  *(_QWORD *)(v0 + v5) = v40;
  *(_QWORD *)(v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_profileObserver) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_bagObserver) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_bindings) = _swiftEmptyArrayStorage;
  result = UIApp;
  if (UIApp)
  {
    *(_BYTE *)(v0 + 16) = objc_msgSend(UIApp, "launchedToTest");
    v7 = type metadata accessor for MusicTabsDictionaryProvider();
    swift_allocObject(v7, 56, 7);
    v8 = sub_1001F4674(0x626154636973756DLL, 0xE900000000000073, (uint64_t)sub_1000B4070, 0);
    *(_QWORD *)(v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_musicTabsDictionaryProvider) = v8;
    swift_retain(v8);
    UnfairLock.locked<A>(_:)((void (*)(void))sub_10000D460);
    v9 = *(_BYTE *)(v0 + 16);
    swift_retain(v8);
    sub_1000BA7E4((void *)v40, (uint64_t)v8, v9, (uint64_t)&v40);
    v10 = v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities;
    v11 = v45;
    *(_OWORD *)(v10 + 64) = v44;
    *(_OWORD *)(v10 + 80) = v11;
    *(_OWORD *)(v10 + 96) = v46;
    *(_QWORD *)(v10 + 112) = v47;
    v12 = v41;
    *(_OWORD *)v10 = v40;
    *(_OWORD *)(v10 + 16) = v12;
    v13 = v43;
    v14 = v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller__capabilities;
    *(_OWORD *)(v10 + 32) = v42;
    *(_OWORD *)(v10 + 48) = v13;
    swift_beginAccess(v14, v39, 33, 0);
    v35 = v44;
    v36 = v45;
    v37 = v46;
    v38 = v47;
    v31 = v40;
    v32 = v41;
    v33 = v42;
    v34 = v43;
    sub_1000BC050((uint64_t)&v40);
    Published.init(initialValue:)(&v31, &type metadata for ApplicationCapabilities);
    swift_endAccess(v39);
    v15 = swift_allocObject(&unk_1004489F0, 24, 7);
    swift_weakInit(v15 + 16, v1);
    swift_retain(v15);
    sub_1001F44F8((uint64_t)sub_1000BC4CC, v15);
    swift_release_n(v15, 2);
    UnfairLock.locked<A>(_:)((void (*)(void))sub_1000BC038);
    sub_1000B4238();
    v16 = sub_1000087DC(0, (unint64_t *)&qword_100490BC0, OS_dispatch_queue_ptr);
    v24 = (void *)static OS_dispatch_queue.main.getter(v16, v17, v18, v19, v20, v21, v22, v23, v31, *((_QWORD *)&v31 + 1), v32, *((_QWORD *)&v32 + 1), v33, *((_QWORD *)&v33 + 1), v34);
    v25 = String._bridgeToObjectiveC()();
    v26 = swift_allocObject(&unk_1004489F0, 24, 7);
    swift_weakInit(v26 + 16, v1);
    *(_QWORD *)&v33 = sub_1000BC4D4;
    *((_QWORD *)&v33 + 1) = v26;
    *(_QWORD *)&v31 = _NSConcreteStackBlock;
    *((_QWORD *)&v31 + 1) = 1107296256;
    *(_QWORD *)&v32 = sub_1000B4B4C;
    *((_QWORD *)&v32 + 1) = &unk_100448AA8;
    v27 = _Block_copy(&v31);
    v28 = swift_release(*((_QWORD *)&v33 + 1));
    v29 = MSVLogAddStateHandler(v24, v25, v27, v28);
    swift_release(v8);
    _Block_release(v27);

    v30 = v1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_stateHandler;
    *(_QWORD *)v30 = v29;
    *(_BYTE *)(v30 + 8) = 0;
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000B4070()
{
  id v0;
  uint64_t v1;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = sub_1000B40BC();

  return v1;
}

uint64_t sub_1000B40BC()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  LOBYTE(v4) = 1;
  v0 = sub_1000BC280();
  v1 = sub_10000D478();
  NSUserDefaults.subscript.getter((uint64_t)&_s3KeyON, v0, v1, &v5);
  if (v6)
  {
    v2 = sub_100005574(&qword_100490BF8);
    if (swift_dynamicCast(&v4, &v5, (char *)&type metadata for Any + 8, v2, 6))
      return v4;
    else
      return 0;
  }
  else
  {
    sub_100008758((uint64_t)&v5, &qword_100491B90);
    return 0;
  }
}

uint64_t property wrapper backing initializer of ApplicationCapabilities.Controller.capabilities(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  _OWORD v5[7];
  uint64_t v6;

  v1 = *(_OWORD *)(a1 + 80);
  v5[4] = *(_OWORD *)(a1 + 64);
  v5[5] = v1;
  v5[6] = *(_OWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 112);
  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v3 = *(_OWORD *)(a1 + 48);
  v5[2] = *(_OWORD *)(a1 + 32);
  v5[3] = v3;
  return Published.init(initialValue:)(v5, &type metadata for ApplicationCapabilities);
}

double sub_1000B41B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  double result;
  uint64_t v5;
  _BYTE v6[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v5 = Strong;
    UnfairLock.locked<A>(_:)((void (*)(void))sub_1000BC038);
    *(_QWORD *)&result = swift_release(v5).n128_u64[0];
  }
  return result;
}

double sub_1000B4238()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  __C::_NSRange v6;
  uint64_t v7;
  id v8;
  void *v9;
  __C::_NSRange v10;
  CFRange v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t inited;
  void *v16;
  __C::_NSRange v17;
  CFRange v18;
  void *v19;
  CFRange v20;
  void *v21;
  CFRange v22;
  void *v23;
  CFRange v24;
  void *v25;
  CFRange v26;
  uint64_t v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  double result;
  uint64_t v88;
  uint64_t v89;
  id v90;
  id v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  CFRange v97;
  ValueMetadata *v98;
  _UNKNOWN **v99;

  v1 = v0;
  v2 = type metadata accessor for Whitetail.Binding();
  v3 = (void *)ICUserIdentityStoreDidChangeNotification;
  v4 = (void *)objc_opt_self(ICUserIdentityStore);
  v5 = v3;
  v6.length = (Swift::Int)objc_msgSend(v4, "defaultIdentityStore");
  v6.location = (Swift::Int)v5;
  v98 = &type metadata for NotificationTrigger;
  v99 = &protocol witness table for NotificationTrigger;
  v97 = CFRange.init(_:)(v6);
  v7 = swift_allocObject(&unk_1004489F0, 24, 7);
  v93 = v1;
  swift_weakInit(v7 + 16, v1);
  v95 = Whitetail.Binding.__allocating_init(_:needsInitialConfiguration:configurationBlock:)(&v97, 1, (uint64_t)sub_1000BC58C, v7);
  v8 = objc_msgSend((id)objc_opt_self(MPCloudServiceStatusController), "sharedController");
  v9 = (void *)MPCloudServiceStatusControllerSubscriptionStatusDidChangeNotification;
  v10.location = MPCloudServiceStatusControllerSubscriptionStatusDidChangeNotification;
  v10.length = (Swift::Int)v8;
  v11 = CFRange.init(_:)(v10);
  v98 = &type metadata for NotificationTrigger;
  v99 = &protocol witness table for NotificationTrigger;
  v97 = v11;
  v12 = swift_allocObject(&unk_1004489F0, 24, 7);
  swift_weakInit(v12 + 16, v1);
  v13 = v9;
  v90 = v8;
  v94 = Whitetail.Binding.__allocating_init(_:needsInitialConfiguration:configurationBlock:)(&v97, 1, (uint64_t)sub_1000BC594, v12);
  v91 = objc_msgSend((id)objc_opt_self(MPPlaybackUserDefaults), "standardUserDefaults");
  v14 = sub_100005574(&qword_100490BF0);
  inited = swift_initStackObject(v14, &v96);
  *(_OWORD *)(inited + 16) = xmmword_100384AE0;
  v16 = (void *)MPPlaybackUserDefaultsPreferredResolutionsDidChangeNotification;
  v17.location = MPPlaybackUserDefaultsPreferredResolutionsDidChangeNotification;
  v17.length = (Swift::Int)v91;
  v18 = CFRange.init(_:)(v17);
  *(_QWORD *)(inited + 56) = &type metadata for NotificationTrigger;
  *(_QWORD *)(inited + 64) = &protocol witness table for NotificationTrigger;
  *(CFRange *)(inited + 32) = v18;
  v19 = (void *)MPCloudControllerHasProperNetworkConditionsToShowCloudMediaDidChangeNotification;
  v20 = CFRange.init(_:)((__C::_NSRange)MPCloudControllerHasProperNetworkConditionsToShowCloudMediaDidChangeNotification);
  *(_QWORD *)(inited + 96) = &type metadata for NotificationTrigger;
  *(_QWORD *)(inited + 104) = &protocol witness table for NotificationTrigger;
  *(CFRange *)(inited + 72) = v20;
  v21 = (void *)RadioAvailabilityControllerRadioAvailableDidChangeNotification;
  v22 = CFRange.init(_:)((__C::_NSRange)RadioAvailabilityControllerRadioAvailableDidChangeNotification);
  *(_QWORD *)(inited + 136) = &type metadata for NotificationTrigger;
  *(_QWORD *)(inited + 144) = &protocol witness table for NotificationTrigger;
  *(CFRange *)(inited + 112) = v22;
  v23 = (void *)MPCloudServiceStatusControllerSubscriptionAvailabilityDidChangeNotification;
  v24 = CFRange.init(_:)((__C::_NSRange)MPCloudServiceStatusControllerSubscriptionAvailabilityDidChangeNotification);
  *(_QWORD *)(inited + 176) = &type metadata for NotificationTrigger;
  *(_QWORD *)(inited + 184) = &protocol witness table for NotificationTrigger;
  *(CFRange *)(inited + 152) = v24;
  v25 = (void *)MPCloudServiceStatusControllerCloudLibraryEnabledDidChangeNotification;
  v26 = CFRange.init(_:)((__C::_NSRange)MPCloudServiceStatusControllerCloudLibraryEnabledDidChangeNotification);
  *(_QWORD *)(inited + 216) = &type metadata for NotificationTrigger;
  *(_QWORD *)(inited + 224) = &protocol witness table for NotificationTrigger;
  *(CFRange *)(inited + 192) = v26;
  v27 = swift_allocObject(&unk_1004489F0, 24, 7);
  swift_weakInit(v27 + 16, v93);
  v89 = v2;
  swift_allocObject(v2, 48, 7);
  v28 = v16;
  v92 = v91;
  v29 = v19;
  v30 = v21;
  v31 = v23;
  v32 = v25;
  v33 = Whitetail.Binding.init(_:needsInitialConfiguration:configurationBlock:)(inited, 1, (uint64_t)sub_1000BC594, v27);
  v34 = (uint64_t *)(v93 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_bindings);
  swift_beginAccess(v93 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_bindings, &v97, 33, 0);
  v35 = *v34;
  if ((unint64_t)*v34 >> 62)
  {
    if (v35 < 0)
      v88 = *v34;
    else
      v88 = v35 & 0xFFFFFFFFFFFFFF8;
    v37 = v95;
    swift_retain(v95);
    v38 = v94;
    swift_retain(v94);
    swift_retain(v33);
    swift_bridgeObjectRetain();
    v36 = _CocoaArrayWrapper.endIndex.getter(v88);
    swift_bridgeObjectRelease(v35);
    v40 = v36 + 3;
    if (!__OFADD__(v36, 3))
    {
LABEL_3:
      v41 = sub_1000B8EE4(v40, 1);
      specialized Array._endMutation()(v41);
      v42 = swift_retain(v37);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v42);
      v36 = *(_QWORD *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v39 = *(_QWORD *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v36 < v39 >> 1)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else
  {
    v36 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
    v37 = v95;
    swift_retain(v95);
    v38 = v94;
    swift_retain(v94);
    swift_retain(v33);
    v40 = v36 + 3;
    if (!__OFADD__(v36, 3))
      goto LABEL_3;
  }
  __break(1u);
LABEL_24:
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v36 + 1, 1);
LABEL_4:
  v43 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v36, v37);
  specialized Array._endMutation()(v43);
  v44 = swift_retain(v38);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v44);
  v46 = *(_QWORD *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v45 = *(_QWORD *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v46 >= v45 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1);
  v47 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v46, v38);
  specialized Array._endMutation()(v47);
  v48 = swift_retain(v33);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v48);
  v50 = *(_QWORD *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v49 = *(_QWORD *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v50 >= v49 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v50 + 1, 1);
  v51 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v50, v33);
  specialized Array._endMutation()(v51);
  swift_endAccess(&v97);
  swift_release(v37);
  swift_release(v33);
  v52 = v38;
  swift_release(v38);
  v53 = sub_1000BC23C();
  v55 = UserDefaultsKeyValueTrigger.init<A>(suiteName:key:)(0xD000000000000014, 0x80000001003AFB90, v54, (uint64_t)&type metadata for NSUserDefaults.MobileiPod, v53);
  v57 = v56;
  v59 = v58;
  v61 = v60;
  v98 = &type metadata for UserDefaultsKeyValueTrigger;
  v99 = &protocol witness table for UserDefaultsKeyValueTrigger;
  v62 = (_QWORD *)swift_allocObject(&unk_100448B08, 48, 7);
  v97.location = (CFIndex)v62;
  v62[2] = v55;
  v62[3] = v57;
  v62[4] = v59;
  v62[5] = v61;
  v63 = swift_allocObject(&unk_1004489F0, 24, 7);
  swift_weakInit(v63 + 16, v93);
  v64 = Whitetail.Binding.__allocating_init(_:needsInitialConfiguration:configurationBlock:)(&v97, 1, (uint64_t)sub_1000BC594, v63);
  swift_beginAccess(v34, &v97, 33, 0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v65);
  v67 = *(_QWORD *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v66 = *(_QWORD *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v67 >= v66 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1, v67 + 1, 1);
  v68 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v67, v64);
  specialized Array._endMutation()(v68);
  swift_endAccess(&v97);
  v69 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ApplicationCapabilities.Controller.ProfileObserver()), "init", v89);
  v70 = OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_profileObserver;
  v71 = *(void **)(v93 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_profileObserver);
  *(_QWORD *)(v93 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_profileObserver) = v69;

  v72 = *(_QWORD *)(v93 + v70);
  if (v72)
    swift_weakAssign(v72+ OBJC_IVAR____TtCCV9MusicCore23ApplicationCapabilities10ControllerP33_3C92A9FA31E0FE3D8D536795352BB0D115ProfileObserver_controller, v93);
  v73 = v52;
  if (qword_10048C720 != -1)
    swift_once(&qword_10048C720, sub_1000C378C);
  v74 = static BagProvider.shared;
  v75 = swift_allocObject(&unk_1004489F0, 24, 7);
  swift_weakInit(v75 + 16, v93);
  v76 = type metadata accessor for BagProvider.Observer();
  v77 = swift_allocObject(v76, 40, 7);
  v78 = swift_weakInit(v77 + 16, 0);
  *(_QWORD *)(v77 + 24) = 0;
  *(_QWORD *)(v77 + 32) = 0;
  swift_weakAssign(v78, v74);
  v79 = *(_QWORD *)(v77 + 24);
  v80 = *(_QWORD *)(v77 + 32);
  *(_QWORD *)(v77 + 24) = sub_1000BC5E0;
  *(_QWORD *)(v77 + 32) = v75;
  swift_retain_n(v75, 3);
  v81 = sub_10003A5C8(v79, v80);
  v97.location = 0;
  __chkstk_darwin(v81);
  UnfairLock.locked<A>(_:)(sub_1000A9F10);
  if (v97.location)
  {
    v82 = (id)v97.location;
    sub_1000B6B3C(v82, v75);

    v83 = v82;
    v84 = v82;
    v85 = v95;
  }
  else
  {
    sub_1000C3B6C(0);
    v85 = v95;
    v84 = v90;
    v83 = v92;
  }

  swift_release_n(v75, 2);
  swift_release(v33);
  swift_release(v73);
  swift_release(v85);
  swift_release(v75);
  v86 = *(_QWORD *)(v93 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_bagObserver);
  *(_QWORD *)(v93 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_bagObserver) = v77;
  *(_QWORD *)&result = swift_release(v86).n128_u64[0];
  return result;
}

uint64_t sub_1000B4A28(char a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v15[7];
  uint64_t v16;
  _BYTE v17[24];
  _OWORD v18[7];
  uint64_t v19;

  if ((a1 & 1) == 0)
    return 0;
  v5 = a4 + 16;
  swift_beginAccess(a4 + 16, v17, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (!Strong)
    return 0;
  v7 = Strong;
  KeyPath = swift_getKeyPath(&unk_10038A8D8);
  v9 = swift_getKeyPath(&unk_10038A900);
  static Published.subscript.getter(v15, v7, KeyPath, v9);
  swift_release(KeyPath);
  swift_release(v9);
  v18[4] = v15[4];
  v18[5] = v15[5];
  v18[6] = v15[6];
  v19 = v16;
  v18[0] = v15[0];
  v18[1] = v15[1];
  v18[2] = v15[2];
  v18[3] = v15[3];
  sub_1000B3590();
  v11 = v10;
  sub_1000BC0D0(v18);
  v12 = sub_1000F7F48(v11);
  swift_bridgeObjectRelease(v11);
  v13 = a2(v12);
  swift_release(v7);
  swift_bridgeObjectRelease(v12);
  return v13;
}

uint64_t sub_1000B4B4C(uint64_t a1, char a2, void *aBlock)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t (*)(uint64_t), uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a2 & 1;
  v5 = *(uint64_t (**)(uint64_t, uint64_t (*)(uint64_t), uint64_t))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v6 = _Block_copy(aBlock);
  v7 = swift_allocObject(&unk_100448AE0, 24, 7);
  *(_QWORD *)(v7 + 16) = v6;
  swift_retain(v4);
  v8 = v5(v3, sub_1000BC518, v7);
  swift_release(v4);
  swift_release(v7);
  return v8;
}

uint64_t sub_1000B4BD8(uint64_t a1, uint64_t a2)
{
  NSDictionary v3;
  uint64_t v4;

  if (a1)
    v3.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  else
    v3.super.isa = 0;
  v4 = (*(uint64_t (**)(uint64_t, Class))(a2 + 16))(a2, v3.super.isa);

  return v4;
}

__n128 sub_1000B4C40@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  __n128 result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __n128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10038A8D8);
  v5 = swift_getKeyPath(&unk_10038A900);
  static Published.subscript.getter(&v17, v3, KeyPath, v5);
  swift_release(v5);
  swift_release(KeyPath);
  v6 = BYTE1(v17);
  v7 = BYTE2(v17);
  v8 = v23;
  v9 = v24;
  v10 = v25;
  v11 = v26;
  v13 = v18;
  result = v19;
  v14 = v20;
  v15 = v21;
  v16 = v22;
  *(_BYTE *)a2 = v17;
  *(_BYTE *)(a2 + 1) = v6;
  *(_BYTE *)(a2 + 2) = v7;
  *(_OWORD *)(a2 + 8) = v13;
  *(__n128 *)(a2 + 24) = result;
  *(_OWORD *)(a2 + 40) = v14;
  *(_OWORD *)(a2 + 56) = v15;
  *(_OWORD *)(a2 + 72) = v16;
  *(_BYTE *)(a2 + 88) = v8;
  *(_QWORD *)(a2 + 96) = v9;
  *(_BYTE *)(a2 + 104) = v10;
  *(_QWORD *)(a2 + 112) = v11;
  return result;
}

uint64_t sub_1000B4D10(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  _BYTE v24[8];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;

  v2 = *a1;
  v19 = a1[2];
  v20 = a1[1];
  v3 = *((_QWORD *)a1 + 3);
  v17 = *((_QWORD *)a1 + 2);
  v18 = *((_QWORD *)a1 + 1);
  v4 = *((_QWORD *)a1 + 4);
  v16 = *((_QWORD *)a1 + 5);
  v6 = *((_QWORD *)a1 + 6);
  v5 = *((_QWORD *)a1 + 7);
  v8 = *((_QWORD *)a1 + 8);
  v7 = *((_QWORD *)a1 + 9);
  v9 = (void *)*((_QWORD *)a1 + 10);
  v10 = *((_QWORD *)a1 + 12);
  v14 = a1[104];
  v15 = a1[88];
  v11 = *((_QWORD *)a1 + 14);
  v21 = *a2;
  KeyPath = swift_getKeyPath(&unk_10038A8D8);
  v22 = swift_getKeyPath(&unk_10038A900);
  v24[0] = v2;
  v24[1] = v20;
  v24[2] = v19;
  v25 = v18;
  v26 = v17;
  v27 = v3;
  v28 = v4;
  v29 = v16;
  v30 = v6;
  v31 = v5;
  v32 = v8;
  v33 = v7;
  v34 = v9;
  v35 = v15;
  v36 = v10;
  v37 = v14;
  v38 = v11;
  v12 = v9;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_retain(v21);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  return static Published.subscript.setter(v24, v21, KeyPath, v22);
}

uint64_t ApplicationCapabilities.Controller.$capabilities.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller__capabilities, v3, 33, 0);
  v1 = sub_100005574((uint64_t *)&unk_100490920);
  Published.projectedValue.getter(v1);
  return swift_endAccess(v3);
}

uint64_t sub_1000B4EBC(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(*a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller__capabilities, v3, 33, 0);
  v1 = sub_100005574((uint64_t *)&unk_100490920);
  Published.projectedValue.getter(v1);
  return swift_endAccess(v3);
}

uint64_t sub_1000B4F20(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  void (*v11)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v4 = sub_100005574(&qword_100493730);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v6);
  v10 = &v16[-v9 - 8];
  v11 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16);
  v11(&v16[-v9 - 8], a1, v4);
  v12 = *a2;
  v11(v8, v10, v4);
  swift_beginAccess(v12 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller__capabilities, v16, 33, 0);
  v13 = sub_100005574((uint64_t *)&unk_100490920);
  Published.projectedValue.setter(v8, v13);
  swift_endAccess(v16);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v10, v4);
}

Swift::Void __swiftcall ApplicationCapabilities.Controller.setNeedsNetworkReachabilityUpdate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE v9[16];
  uint64_t v10;
  char *v11;
  char v12;

  v1 = v0;
  v2 = sub_100005574((uint64_t *)&unk_100493720);
  __chkstk_darwin(v2);
  v4 = &v9[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = 0;
  v10 = v0;
  v11 = &v12;
  UnfairLock.locked<A>(_:)(sub_1000BB3F8);
  if (v12 == 1)
  {
    static TaskPriority.userInitiated.getter(v5);
    v6 = type metadata accessor for TaskPriority(0);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v4, 0, 1, v6);
    v7 = (_QWORD *)swift_allocObject(&unk_100448608, 40, 7);
    v7[2] = 0;
    v7[3] = 0;
    v7[4] = v1;
    swift_retain(v1);
    v8 = sub_10002DE80((uint64_t)v4, (uint64_t)&unk_100490940, (uint64_t)v7);
    swift_release(v8);
    sub_100008758((uint64_t)v4, (uint64_t *)&unk_100493720);
  }
}

uint64_t sub_1000B5154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_1000B516C, 0, 0);
}

uint64_t sub_1000B516C()
{
  uint64_t v0;

  UnfairLock.locked<A>(_:)(sub_1000BC418);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000B51C8(char *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  id v12;
  void *v13;
  unsigned int v14;
  uint64_t KeyPath;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  _BYTE v68[32];
  _BYTE v69[48];
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;

  v3 = sub_100005574((uint64_t *)&unk_100493720);
  __chkstk_darwin(v3);
  v6 = OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_needsNetworkReachabilityUpdate;
  if (a1[OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_needsNetworkReachabilityUpdate] == 1)
  {
    v67 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    v73 = v1;
    if (qword_10048C670 != -1)
      swift_once(&qword_10048C670, sub_1000B89CC);
    v7 = type metadata accessor for Logger(0, v4);
    v8 = sub_1000086B4(v7, (uint64_t)qword_1004908F8);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Needs Network Reachability Update", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

    a1[v6] = 0;
    v12 = objc_msgSend((id)objc_opt_self(MPCloudController), "sharedCloudController");
    if (v12)
    {
      v13 = v12;
      if ((objc_msgSend(v12, "shouldProhibitMusicActionForCurrentNetworkConditions") & 1) != 0)
        v14 = 0;
      else
        v14 = objc_msgSend(v13, "hasProperNetworkConditionsToShowCloudMedia");

    }
    else
    {
      v14 = 0;
    }
    KeyPath = swift_getKeyPath(&unk_10038A8D8);
    v16 = swift_getKeyPath(&unk_10038A900);
    v66 = a1;
    static Published.subscript.getter(v68, a1, KeyPath, v16);
    swift_release(KeyPath);
    swift_release(v16);
    v17 = v68[1];
    v18 = *(_QWORD *)&v68[24];
    v19 = *(_QWORD *)v69;
    v20 = *(_QWORD *)&v69[24];
    v22 = *(_QWORD *)&v69[40];
    v21 = (void *)v70;
    v23 = v71;
    swift_bridgeObjectRelease(v72);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v22);

    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter(v25);
    v27 = os_log_type_enabled(v25, v26);
    if (v14 == v17)
    {
      if (v27)
      {
        v58 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v58 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Network Reachability status does not differ from currently known capabilities.", v58, 2u);
        swift_slowDealloc(v58, -1, -1);
      }

    }
    else
    {
      v28 = v14;
      if (v27)
      {
        v29 = swift_slowAlloc(12, -1);
        v30 = swift_slowAlloc(32, -1);
        *(_QWORD *)v68 = v30;
        *(_DWORD *)v29 = 136315138;
        if (v14)
          v31 = 0x1000000000000012;
        else
          v31 = 0x1000000000000016;
        if (v14)
          v32 = (char *)0x80000001003AFA70;
        else
          v32 = (char *)0x80000001003AFA50;
        *(_QWORD *)(v29 + 4) = sub_100019400((char *)v31, v32, (uint64_t *)v68);
        swift_bridgeObjectRelease(v32);
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Updating Network Reachability to: %s", (uint8_t *)v29, 0xCu);
        swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v30, -1, -1);
        swift_slowDealloc(v29, -1, -1);
      }

      v33 = v66;
      v34 = &v66[OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities];
      v35 = *(_OWORD *)&v66[OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 96];
      v36 = *(_OWORD *)&v66[OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 64];
      v70 = *(_OWORD *)&v66[OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 80];
      v71 = v35;
      v38 = *(_OWORD *)&v66[OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 16];
      v37 = *(_OWORD *)&v66[OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 32];
      *(_OWORD *)v68 = *(_OWORD *)&v66[OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities];
      *(_OWORD *)&v68[16] = v38;
      v72 = *(_QWORD *)&v66[OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 112];
      v39 = v72;
      v40 = *(_OWORD *)&v66[OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 48];
      *(_OWORD *)v69 = v37;
      *(_OWORD *)&v69[16] = v40;
      *(_OWORD *)&v69[32] = v36;
      v41 = v35;
      v42 = BYTE8(v70);
      v44 = *((_QWORD *)&v36 + 1);
      v43 = (void *)v70;
      v45 = *(_QWORD *)&v68[24];
      v46 = v37;
      v47 = v68[2];
      v48 = *(_QWORD *)&v66[OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 24];
      v62 = *(_QWORD *)&v66[OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 32];
      v63 = v48;
      v49 = *(_QWORD *)&v66[OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 72];
      v64 = *(_QWORD *)&v66[OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 56];
      v65 = v49;
      v66 = *(char **)&v66[OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 80];
      v60 = *((_QWORD *)v34 + 12);
      v50 = *((_QWORD *)v34 + 14);
      *v34 = v68[0];
      v34[1] = v28;
      v34[2] = v47;
      *(_OWORD *)(v34 + 8) = *(_OWORD *)&v68[8];
      *((_QWORD *)v34 + 3) = v45;
      *((_QWORD *)v34 + 4) = v37;
      *(_OWORD *)(v34 + 40) = *(_OWORD *)&v69[8];
      v61 = *(_OWORD *)&v69[24];
      *(_OWORD *)(v34 + 56) = *(_OWORD *)&v69[24];
      *((_QWORD *)v34 + 9) = *((_QWORD *)&v36 + 1);
      *((_QWORD *)v34 + 10) = v43;
      v34[88] = v42;
      *((_QWORD *)v34 + 12) = v35;
      v34[104] = BYTE8(v35);
      *((_QWORD *)v34 + 14) = v39;
      sub_1000BC050((uint64_t)v68);
      sub_1000BC050((uint64_t)v68);
      v51 = v61;
      *(_QWORD *)&v61 = v43;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease(v50);
      swift_bridgeObjectRelease(v60);
      swift_bridgeObjectRelease(v62);
      swift_bridgeObjectRelease(v63);
      swift_bridgeObjectRelease(v64);
      swift_bridgeObjectRelease(v65);

      sub_1000B58E4((uint64_t)v68);
      swift_bridgeObjectRelease(v39);
      swift_bridgeObjectRelease(v41);

      swift_bridgeObjectRelease(v44);
      swift_bridgeObjectRelease(v51);
      swift_bridgeObjectRelease(v46);
      swift_bridgeObjectRelease(v45);
      sub_1000BC0D0(v68);
      v52 = type metadata accessor for TaskPriority(0);
      v53 = (uint64_t)v67;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v67, 1, 1, v52);
      type metadata accessor for MainActor(0);
      v54 = swift_retain(v33);
      v55 = static MainActor.shared.getter(v54);
      v56 = (_QWORD *)swift_allocObject(&unk_100448A90, 40, 7);
      v56[2] = v55;
      v56[3] = &protocol witness table for MainActor;
      v56[4] = v33;
      v57 = sub_1000C66A8(v53, (uint64_t)&unk_100490BB0, (uint64_t)v56);
      swift_release(v57);
    }
  }
}

uint64_t sub_1000B579C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 16) = a4;
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 24) = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000B5808, v6, v7);
}

uint64_t sub_1000B5808()
{
  uint64_t v0;
  id v1;

  swift_release(*(_QWORD *)(v0 + 24));
  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_10048C6C8 != -1)
    swift_once(&qword_10048C6C8, sub_1000B8D6C);
  objc_msgSend(v1, "postNotificationName:object:", static ApplicationCapabilities.NotificationNames.hasNetworkConnectivityDidChange, *(_QWORD *)(v0 + 16));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t *ApplicationCapabilities.NotificationNames.hasNetworkConnectivityDidChange.unsafeMutableAddressor()
{
  if (qword_10048C6C8 != -1)
    swift_once(&qword_10048C6C8, sub_1000B8D6C);
  return &static ApplicationCapabilities.NotificationNames.hasNetworkConnectivityDidChange;
}

_QWORD *sub_1000B58E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  void *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v2 = v1;
  v4 = sub_100005574((uint64_t *)&unk_100493720);
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = &_swiftEmptySetSingleton;
  v7 = *(_OWORD *)(v1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 80);
  v45 = *(_OWORD *)(v1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 64);
  v46 = v7;
  v47 = *(_OWORD *)(v1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 96);
  v48 = *(_QWORD *)(v1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 112);
  v8 = *(_OWORD *)(v1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 16);
  v41 = *(_OWORD *)(v1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities);
  v42 = v8;
  v9 = *(_OWORD *)(v1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 48);
  v43 = *(_OWORD *)(v1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 32);
  v44 = v9;
  sub_1000BC050((uint64_t)&v41);
  if (qword_10048C7B0 != -1)
    swift_once(&qword_10048C7B0, sub_1000F39DC);
  if (static NSUserDefaults.mobileiPod)
  {
    v10 = sub_1000BC23C();
    v11 = sub_10000D478();
    NSUserDefaults.subscript.getter((uint64_t)&type metadata for NSUserDefaults.MobileiPod, v10, v11, &v38);
    if (v39)
    {
      if ((swift_dynamicCast((char *)&v37 + 7, &v38, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0
        && (v37 & 0x100000000000000) != 0)
      {
        __asm { BR              X10 }
      }
    }
    else
    {
      sub_100008758((uint64_t)&v38, &qword_100491B90);
    }
  }
  if (!_s9MusicCore23ApplicationCapabilitiesV23__derived_struct_equalsySbAC_ACtFZ_0((unsigned __int8 *)&v41, (unsigned __int8 *)a1))
  {
    if ((v41 & 1) != (*(_BYTE *)a1 & 1))
    {
      if (qword_10048C6C0 != -1)
        swift_once(&qword_10048C6C0, sub_1000B8D1C);
      sub_100132B70(&v38, (id)static ApplicationCapabilities.NotificationNames.activeAccountDidChange);

    }
    v12 = *((_QWORD *)&v42 + 1);
    v13 = sub_1000C69C8(5u, *((uint64_t *)&v42 + 1)) & 1;
    v14 = *(_QWORD *)(a1 + 24);
    if (v13 != (sub_1000C69C8(5u, v14) & 1))
    {
      if (qword_10048C678 != -1)
        swift_once(&qword_10048C678, sub_1000B8A4C);
      sub_100132B70(&v38, (id)static ApplicationCapabilities.NotificationNames.allowsiTunesContentDidChange);

    }
    v15 = sub_1000C69C8(0, v12) & 1;
    if (v15 != (sub_1000C69C8(0, v14) & 1))
    {
      if (qword_10048C680 != -1)
        swift_once(&qword_10048C680, sub_1000B8A9C);
      sub_100132B70(&v38, (id)static ApplicationCapabilities.NotificationNames.allowsMusicServiceDidChange);

    }
    v16 = sub_1000C69C8(3u, v12) & 1;
    if (v16 != (sub_1000C69C8(3u, v14) & 1))
    {
      if (qword_10048C688 != -1)
        swift_once(&qword_10048C688, sub_1000B8AEC);
      sub_100132B70(&v38, (id)static ApplicationCapabilities.NotificationNames.allowsSocialContentDidChange);

    }
    v17 = sub_1000C69C8(9u, v12) & 1;
    if (v17 != (sub_1000C69C8(9u, v14) & 1))
    {
      if (qword_10048C6A8 != -1)
        swift_once(&qword_10048C6A8, sub_1000B8C2C);
      sub_100132B70(&v38, (id)static ApplicationCapabilities.NotificationNames.allowsSharePlayTogetherDidChange);

    }
    v18 = sub_1000C69C8(4u, v12) & 1;
    if (v18 != (sub_1000C69C8(4u, v14) & 1))
    {
      if (qword_10048C690 != -1)
        swift_once(&qword_10048C690, sub_1000B8B3C);
      sub_100132B70(&v38, (id)static ApplicationCapabilities.NotificationNames.allowsRadioContentDidChange);

    }
    v19 = sub_1000C69C8(2u, v12) & 1;
    if (v19 != (sub_1000C69C8(2u, v14) & 1))
    {
      if (qword_10048C698 != -1)
        swift_once(&qword_10048C698, sub_1000B8B8C);
      sub_100132B70(&v38, (id)static ApplicationCapabilities.NotificationNames.allowsSubscriptionContentDidChange);

    }
    v20 = sub_1000C69C8(0xAu, v12) & 1;
    if (v20 != (sub_1000C69C8(0xAu, v14) & 1))
    {
      if (qword_10048C6A0 != -1)
        swift_once(&qword_10048C6A0, sub_1000B8BDC);
      sub_100132B70(&v38, (id)static ApplicationCapabilities.NotificationNames.mliEnabledDidChange);

    }
    if ((BYTE1(v41) & 1) != (*(_BYTE *)(a1 + 1) & 1))
    {
      if (qword_10048C6C8 != -1)
        swift_once(&qword_10048C6C8, sub_1000B8D6C);
      sub_100132B70(&v38, (id)static ApplicationCapabilities.NotificationNames.hasNetworkConnectivityDidChange);

    }
    if ((BYTE2(v41) & 1) != (*(_BYTE *)(a1 + 2) & 1))
    {
      if (qword_10048C6D8 != -1)
        swift_once(&qword_10048C6D8, sub_1000B8E0C);
      sub_100132B70(&v38, (id)static ApplicationCapabilities.NotificationNames.isCloudLibraryEnabledDidChange);

    }
    if (*((_QWORD *)&v43 + 1) != *(_QWORD *)(a1 + 40))
    {
      if (qword_10048C6D0 != -1)
        swift_once(&qword_10048C6D0, sub_1000B8DBC);
      sub_100132B70(&v38, (id)static ApplicationCapabilities.NotificationNames.ratingWarningThresholdDidChange);

    }
    if ((sub_100027FFC(BYTE8(v46), *(unsigned __int8 *)(a1 + 88)) & 1) == 0)
    {
      if (qword_10048C6B8 != -1)
        swift_once(&qword_10048C6B8, sub_1000B8CCC);
      sub_100132B70(&v38, (id)static ApplicationCapabilities.NotificationNames.userSubscriptionStateDidChange);

    }
    v21 = BYTE8(v47);
    v22 = v48;
    v23 = *(unsigned __int8 *)(a1 + 104);
    v24 = *(_QWORD *)(a1 + 112);
    if ((sub_1000B2BC0(v47, *(_QWORD *)(a1 + 96)) & 1) == 0)
      goto LABEL_65;
    if (v21 == 6)
    {
      if (v23 != 6)
        goto LABEL_65;
    }
    else
    {
      if (v23 == 6)
        goto LABEL_65;
      sub_100028000(v21);
      if ((v25 & 1) == 0)
        goto LABEL_65;
    }
    if ((sub_1000B2DCC(v22, v24) & 1) != 0)
    {
LABEL_68:
      if (*((_QWORD *)&v41 + 1) != *(_QWORD *)(a1 + 8))
      {
        if (qword_10048C6E0 != -1)
          swift_once(&qword_10048C6E0, sub_1000B8E5C);
        sub_100132B70(&v38, (id)static ApplicationCapabilities.NotificationNames.subscriptionCapabilitiesDidChange);

      }
      goto LABEL_72;
    }
LABEL_65:
    if (qword_10048C6B0 != -1)
      swift_once(&qword_10048C6B0, sub_1000B8C7C);
    sub_100132B70(&v38, (id)static ApplicationCapabilities.NotificationNames.supportedTabsDidChange);

    goto LABEL_68;
  }
LABEL_72:
  if (_s9MusicCore23ApplicationCapabilitiesV23__derived_struct_equalsySbAC_ACtFZ_0((unsigned __int8 *)&v41, (unsigned __int8 *)a1))
  {
    swift_bridgeObjectRelease(v40);
  }
  else
  {
    v26 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v6, 1, 1, v26);
    v27 = v40;
    type metadata accessor for MainActor(0);
    sub_1000BC050((uint64_t)&v41);
    v28 = swift_retain(v2);
    v29 = static MainActor.shared.getter(v28);
    v30 = swift_allocObject(&unk_1004489C8, 168, 7);
    v31 = v46;
    *(_OWORD *)(v30 + 104) = v45;
    *(_OWORD *)(v30 + 120) = v31;
    *(_OWORD *)(v30 + 136) = v47;
    v32 = v42;
    *(_OWORD *)(v30 + 40) = v41;
    *(_OWORD *)(v30 + 56) = v32;
    v33 = v44;
    *(_OWORD *)(v30 + 72) = v43;
    *(_QWORD *)(v30 + 16) = v29;
    *(_QWORD *)(v30 + 24) = &protocol witness table for MainActor;
    *(_QWORD *)(v30 + 32) = v2;
    v34 = v48;
    *(_OWORD *)(v30 + 88) = v33;
    *(_QWORD *)(v30 + 152) = v34;
    *(_QWORD *)(v30 + 160) = v27;
    v35 = sub_1000C66A8((uint64_t)v6, (uint64_t)&unk_100490B40, v30);
    swift_release(v35);
  }
  return sub_1000BC0D0(&v41);
}

uint64_t *ApplicationCapabilities.NotificationNames.activeAccountDidChange.unsafeMutableAddressor()
{
  if (qword_10048C6C0 != -1)
    swift_once(&qword_10048C6C0, sub_1000B8D1C);
  return &static ApplicationCapabilities.NotificationNames.activeAccountDidChange;
}

uint64_t *ApplicationCapabilities.NotificationNames.allowsiTunesContentDidChange.unsafeMutableAddressor()
{
  if (qword_10048C678 != -1)
    swift_once(&qword_10048C678, sub_1000B8A4C);
  return &static ApplicationCapabilities.NotificationNames.allowsiTunesContentDidChange;
}

uint64_t *ApplicationCapabilities.NotificationNames.allowsMusicServiceDidChange.unsafeMutableAddressor()
{
  if (qword_10048C680 != -1)
    swift_once(&qword_10048C680, sub_1000B8A9C);
  return &static ApplicationCapabilities.NotificationNames.allowsMusicServiceDidChange;
}

uint64_t *ApplicationCapabilities.NotificationNames.allowsSocialContentDidChange.unsafeMutableAddressor()
{
  if (qword_10048C688 != -1)
    swift_once(&qword_10048C688, sub_1000B8AEC);
  return &static ApplicationCapabilities.NotificationNames.allowsSocialContentDidChange;
}

uint64_t *ApplicationCapabilities.NotificationNames.allowsSharePlayTogetherDidChange.unsafeMutableAddressor()
{
  if (qword_10048C6A8 != -1)
    swift_once(&qword_10048C6A8, sub_1000B8C2C);
  return &static ApplicationCapabilities.NotificationNames.allowsSharePlayTogetherDidChange;
}

uint64_t *ApplicationCapabilities.NotificationNames.allowsRadioContentDidChange.unsafeMutableAddressor()
{
  if (qword_10048C690 != -1)
    swift_once(&qword_10048C690, sub_1000B8B3C);
  return &static ApplicationCapabilities.NotificationNames.allowsRadioContentDidChange;
}

uint64_t *ApplicationCapabilities.NotificationNames.allowsSubscriptionContentDidChange.unsafeMutableAddressor()
{
  if (qword_10048C698 != -1)
    swift_once(&qword_10048C698, sub_1000B8B8C);
  return &static ApplicationCapabilities.NotificationNames.allowsSubscriptionContentDidChange;
}

uint64_t *ApplicationCapabilities.NotificationNames.mliEnabledDidChange.unsafeMutableAddressor()
{
  if (qword_10048C6A0 != -1)
    swift_once(&qword_10048C6A0, sub_1000B8BDC);
  return &static ApplicationCapabilities.NotificationNames.mliEnabledDidChange;
}

uint64_t *ApplicationCapabilities.NotificationNames.isCloudLibraryEnabledDidChange.unsafeMutableAddressor()
{
  if (qword_10048C6D8 != -1)
    swift_once(&qword_10048C6D8, sub_1000B8E0C);
  return &static ApplicationCapabilities.NotificationNames.isCloudLibraryEnabledDidChange;
}

uint64_t *ApplicationCapabilities.NotificationNames.ratingWarningThresholdDidChange.unsafeMutableAddressor()
{
  if (qword_10048C6D0 != -1)
    swift_once(&qword_10048C6D0, sub_1000B8DBC);
  return &static ApplicationCapabilities.NotificationNames.ratingWarningThresholdDidChange;
}

uint64_t *ApplicationCapabilities.NotificationNames.userSubscriptionStateDidChange.unsafeMutableAddressor()
{
  if (qword_10048C6B8 != -1)
    swift_once(&qword_10048C6B8, sub_1000B8CCC);
  return &static ApplicationCapabilities.NotificationNames.userSubscriptionStateDidChange;
}

uint64_t *ApplicationCapabilities.NotificationNames.supportedTabsDidChange.unsafeMutableAddressor()
{
  if (qword_10048C6B0 != -1)
    swift_once(&qword_10048C6B0, sub_1000B8C7C);
  return &static ApplicationCapabilities.NotificationNames.supportedTabsDidChange;
}

uint64_t *ApplicationCapabilities.NotificationNames.subscriptionCapabilitiesDidChange.unsafeMutableAddressor()
{
  if (qword_10048C6E0 != -1)
    swift_once(&qword_10048C6E0, sub_1000B8E5C);
  return &static ApplicationCapabilities.NotificationNames.subscriptionCapabilitiesDidChange;
}

uint64_t sub_1000B65C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[18] = a5;
  v6[19] = a6;
  v6[17] = a4;
  v7 = type metadata accessor for MainActor(0);
  v6[20] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000B6634, v8, v9);
}

uint64_t sub_1000B6634()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 144);
  swift_release(*(_QWORD *)(v0 + 160));
  KeyPath = swift_getKeyPath(&unk_10038A8D8);
  v5 = swift_getKeyPath(&unk_10038A900);
  v6 = *(_OWORD *)(v3 + 48);
  v8 = *(_OWORD *)v3;
  v7 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v0 + 64) = v6;
  *(_OWORD *)(v0 + 16) = v8;
  *(_OWORD *)(v0 + 32) = v7;
  v10 = *(_OWORD *)(v3 + 80);
  v9 = *(_OWORD *)(v3 + 96);
  v11 = *(_OWORD *)(v3 + 64);
  *(_QWORD *)(v0 + 128) = *(_QWORD *)(v3 + 112);
  *(_OWORD *)(v0 + 96) = v10;
  *(_OWORD *)(v0 + 112) = v9;
  *(_OWORD *)(v0 + 80) = v11;
  sub_1000BC050(v3);
  swift_retain(v2);
  static Published.subscript.setter(v0 + 16, v2, KeyPath, v5);
  swift_retain(v2);
  sub_1000BB038(v1, v2);
  v12 = swift_release(v2);
  return (*(uint64_t (**)(__n128))(v0 + 8))(v12);
}

_QWORD *sub_1000B6710(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v4;
  id v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v23[7];
  uint64_t v24;
  _OWORD v25[7];
  uint64_t v26;

  v2 = *(void **)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_storeBag);
  v3 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_musicTabsDictionaryProvider);
  v4 = *(_BYTE *)(a1 + 16);
  v5 = v2;
  swift_retain(v3);
  sub_1000BA7E4(v2, v3, v4, (uint64_t)v23);
  v6 = a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities;
  v7 = *(_OWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 64);
  v8 = *(_OWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 96);
  v25[5] = *(_OWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 80);
  v25[6] = v8;
  v26 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 112);
  v9 = v26;
  v10 = *(_OWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 16);
  v25[0] = *(_OWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities);
  v11 = *(_OWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 32);
  v25[1] = v10;
  v25[2] = v11;
  v25[3] = *(_OWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 48);
  v25[4] = v7;
  v12 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 24);
  v13 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 32);
  v14 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 56);
  v15 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 72);
  v16 = *(void **)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 80);
  v17 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 96);
  v18 = v23[3];
  *(_OWORD *)(v6 + 32) = v23[2];
  *(_OWORD *)(v6 + 48) = v18;
  v19 = v23[1];
  *(_OWORD *)v6 = v23[0];
  *(_OWORD *)(v6 + 16) = v19;
  *(_QWORD *)(v6 + 112) = v24;
  v20 = v23[6];
  v21 = v23[4];
  *(_OWORD *)(v6 + 80) = v23[5];
  *(_OWORD *)(v6 + 96) = v20;
  *(_OWORD *)(v6 + 64) = v21;
  sub_1000BC050((uint64_t)v25);
  sub_1000BC050((uint64_t)v23);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v15);

  sub_1000B58E4((uint64_t)v25);
  sub_1000BC0D0(v23);
  return sub_1000BC0D0(v25);
}

double sub_1000B6874(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  double result;
  uint64_t v4;
  id v5;
  id v6;
  char v7;
  char v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  _QWORD v13[3];
  void *v14;
  _BYTE v15[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v15, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v4 = Strong;
    v5 = objc_msgSend((id)objc_opt_self(ICUserIdentityStore), "defaultIdentityStore");
    v6 = sub_1000B69B0();
    v8 = v7;

    v9 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    if ((v8 & 1) != 0)
    {
      v6 = 0;
      v13[1] = 0;
      v13[2] = 0;
      v14 = 0;
    }
    else
    {
      v14 = &type metadata for UInt64;
    }
    v13[0] = v6;
    v12 = 2;
    v10 = sub_1000BC280();
    v11 = sub_10000D478();
    NSUserDefaults.subscript.setter((uint64_t)v13, (uint64_t)&v12, (uint64_t)&_s3KeyON, v10, v11);

    UnfairLock.locked<A>(_:)((void (*)(void))sub_1000BC038);
    *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  }
  return result;
}

id sub_1000B69B0()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v6;
  uint64_t v7;
  id v8;
  char v9;

  v1 = objc_msgSend((id)objc_opt_self(ICUserIdentity), "activeAccount");
  v8 = 0;
  v2 = objc_msgSend(v0, "DSIDForUserIdentity:outError:", v1, &v8);

  v3 = v8;
  if (v2)
  {
    v8 = 0;
    v9 = 1;
    v4 = v3;
    static UInt64._conditionallyBridgeFromObjectiveC(_:result:)(v2, &v8);

    return v8;
  }
  else
  {
    v6 = v8;
    v7 = _convertNSErrorToError(_:)(v3);

    swift_willThrow();
    swift_errorRelease(v7);
    return 0;
  }
}

double sub_1000B6AB8(uint64_t a1, void (*a2)(void))
{
  uint64_t v3;
  uint64_t Strong;
  double result;
  uint64_t v6;
  _BYTE v7[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v6 = Strong;
    UnfairLock.locked<A>(_:)(a2);
    *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  }
  return result;
}

void sub_1000B6B3C(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSString v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v17, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    v6 = *(_QWORD *)(Strong + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_lock);
    __chkstk_darwin(Strong);
    swift_retain(v6);
    UnfairLock.locked<A>(_:)((void (*)(void))sub_1000BC5E8);
    swift_release(v6);
    UnfairLock.locked<A>(_:)((void (*)(void))sub_1000BC038);
    v7 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v8 = String._bridgeToObjectiveC()();
    v9 = objc_msgSend(a1, "dictionaryForBagKey:", v8);

    if (v9
      && (v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v9, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable), v9, v11 = sub_1001F3DA0(v10), swift_bridgeObjectRelease(v10), v11))
    {
      *((_QWORD *)&v16 + 1) = sub_100005574(&qword_100490BF8);
      *(_QWORD *)&v15 = v11;
    }
    else
    {
      v15 = 0u;
      v16 = 0u;
    }
    v14 = 1;
    v12 = sub_1000BC280();
    v13 = sub_10000D478();
    NSUserDefaults.subscript.setter((uint64_t)&v15, (uint64_t)&v14, (uint64_t)&_s3KeyON, v12, v13);
    swift_release(v5);

  }
}

uint64_t ApplicationCapabilities.Controller.updated()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 136) = a1;
  *(_QWORD *)(v2 + 144) = v1;
  return swift_task_switch(sub_1000B6D44, 0, 0);
}

uint64_t sub_1000B6D44()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 152) = v1;
  *v1 = v0;
  v1[1] = sub_1000B6DCC;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x2864657461647075, 0xE900000000000029, sub_1000BB484, *(_QWORD *)(v0 + 144), &type metadata for ApplicationCapabilities);
}

uint64_t sub_1000B6DCC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 152));
  return swift_task_switch(sub_1000B6E20, 0, 0);
}

uint64_t sub_1000B6E20()
{
  uint64_t v0;
  char v1;
  char v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v1 = *(_BYTE *)(v0 + 17);
  v2 = *(_BYTE *)(v0 + 18);
  v3 = *(_BYTE *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 112);
  v5 = *(_BYTE *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 136);
  v8 = *(_OWORD *)(v0 + 40);
  v9 = *(_OWORD *)(v0 + 24);
  v10 = *(_OWORD *)(v0 + 56);
  v11 = *(_OWORD *)(v0 + 72);
  v12 = *(_OWORD *)(v0 + 88);
  *(_BYTE *)v6 = *(_BYTE *)(v0 + 16);
  *(_BYTE *)(v6 + 1) = v1;
  *(_BYTE *)(v6 + 2) = v2;
  *(_OWORD *)(v6 + 8) = v9;
  *(_OWORD *)(v6 + 24) = v8;
  *(_OWORD *)(v6 + 40) = v10;
  *(_OWORD *)(v6 + 56) = v11;
  *(_OWORD *)(v6 + 72) = v12;
  *(_BYTE *)(v6 + 88) = v3;
  *(_QWORD *)(v6 + 96) = v4;
  *(_BYTE *)(v6 + 104) = v5;
  *(_QWORD *)(v6 + 112) = v7;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_1000B6E88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double result;
  uint64_t v29;
  char *v30;
  void *v31;

  v4 = sub_100005574(&qword_100490B98);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = __chkstk_darwin(v4);
  v8 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v29 - v9;
  if (qword_10048C720 != -1)
    swift_once(&qword_10048C720, sub_1000C378C);
  v11 = static BagProvider.shared;
  v12 = swift_allocObject(&unk_1004489F0, 24, 7);
  swift_weakInit(v12 + 16, a2);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v13(v10, a1, v4);
  v13(v8, (uint64_t)v10, v4);
  v14 = *(unsigned __int8 *)(v5 + 80);
  v15 = (v14 + 24) & ~v14;
  v16 = swift_allocObject(&unk_100448A18, v15 + v6, v14 | 7);
  *(_QWORD *)(v16 + 16) = v12;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v16 + v15, v10, v4);
  swift_retain_n(v12, 2);
  sub_100005574(&qword_100490BA0);
  UnfairLock.locked<A>(_:)((void (*)(void))sub_10000D460);
  v17 = v31;
  if (v31)
  {
    sub_1000B7178(v31, v12);
    swift_release(v12);
    swift_release(v16);

  }
  else
  {
    v19 = type metadata accessor for BagProvider.Observer();
    v20 = swift_allocObject(v19, 40, 7);
    v21 = swift_weakInit(v20 + 16, 0);
    *(_QWORD *)(v20 + 24) = 0;
    *(_QWORD *)(v20 + 32) = 0;
    swift_weakAssign(v21, v11);
    v22 = swift_allocObject(&unk_100448A40, 24, 7);
    v30 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    v23 = v22;
    swift_weakInit(v22 + 16, v11);
    v24 = (_QWORD *)swift_allocObject(&unk_100448A68, 48, 7);
    v24[2] = sub_1000BC360;
    v24[3] = v16;
    v24[4] = v23;
    v24[5] = v20;
    v25 = *(_QWORD *)(v20 + 24);
    v26 = *(_QWORD *)(v20 + 32);
    *(_QWORD *)(v20 + 24) = sub_1000BC3D8;
    *(_QWORD *)(v20 + 32) = v24;
    swift_retain(v16);
    swift_retain(v20);
    v27 = sub_10003A5C8(v25, v26);
    __chkstk_darwin(v27);
    *(&v29 - 2) = v11;
    *(&v29 - 1) = v20;
    UnfairLock.locked<A>(_:)((void (*)(void))sub_1000BC3E4);
    v8 = v30;
    sub_1000C3B6C(0);
    swift_release(v12);
    swift_release(v16);
    v18 = swift_release(v20);
  }
  (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v8, v4, v18);
  *(_QWORD *)&result = swift_release(v12).n128_u64[0];
  return result;
}

double sub_1000B7178(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  double result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[7];
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[7];
  uint64_t v16;

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, &v14, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v6 = Strong;
    v7 = *(_QWORD *)(Strong
                   + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_musicTabsDictionaryProvider);
    v8 = *(_BYTE *)(Strong + 16);
    a1;
    swift_retain(v7);
    v9 = sub_1000BA7E4(a1, v7, v8, (uint64_t)v15);
    v10 = *(_QWORD *)(v6 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_lock);
    __chkstk_darwin(v9);
    swift_retain(v10);
    UnfairLock.locked<A>(_:)((void (*)(void))sub_1000BC3FC);
    swift_release(v10);
    v12[4] = v15[4];
    v12[5] = v15[5];
    v12[6] = v15[6];
    v13 = v16;
    v12[0] = v15[0];
    v12[1] = v15[1];
    v12[2] = v15[2];
    v12[3] = v15[3];
    v11 = sub_100005574(&qword_100490B98);
    CheckedContinuation.resume(returning:)(v12, v11);
    *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  }
  return result;
}

_QWORD *sub_1000B72D8(uint64_t a1, void *a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  id v21;
  void *v23;
  _OWORD v24[7];
  uint64_t v25;

  v6 = *(void **)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_storeBag);
  *(_QWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_storeBag) = a2;

  v7 = a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities;
  v8 = *(_OWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 80);
  v24[4] = *(_OWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 64);
  v24[5] = v8;
  v24[6] = *(_OWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 96);
  v25 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 112);
  v9 = v25;
  v10 = *(_OWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 16);
  v24[0] = *(_OWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities);
  v24[1] = v10;
  v11 = *(_OWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 48);
  v24[2] = *(_OWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 32);
  v24[3] = v11;
  v12 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 24);
  v13 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 32);
  v14 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 56);
  v15 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 72);
  v23 = *(void **)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 80);
  v16 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 96);
  v17 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v7 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v7 + 48) = v17;
  v18 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v7 = *(_OWORD *)a3;
  *(_OWORD *)(v7 + 16) = v18;
  *(_QWORD *)(v7 + 112) = *(_QWORD *)(a3 + 112);
  v19 = *(_OWORD *)(a3 + 96);
  v20 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v7 + 96) = v19;
  *(_OWORD *)(v7 + 64) = v20;
  sub_1000BC050(a3);
  sub_1000BC050(a3);
  v21 = a2;
  sub_1000BC050((uint64_t)v24);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v15);

  sub_1000B58E4((uint64_t)v24);
  sub_1000BC0D0((_QWORD *)a3);
  return sub_1000BC0D0(v24);
}

uint64_t ApplicationCapabilities.Controller.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v1 = v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller__capabilities;
  v2 = sub_100005574((uint64_t *)&unk_100490920);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_lock));

  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 24);
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 32);
  v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 56);
  v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 72);
  v7 = *(void **)(v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 80);
  v8 = *(_QWORD *)(v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 96);
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities
                                      + 112));
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_bagObserver));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_bindings));
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_musicTabsDictionaryProvider));
  return v0;
}

uint64_t ApplicationCapabilities.Controller.__deallocating_deinit()
{
  uint64_t v0;

  ApplicationCapabilities.Controller.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000B7550@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;

  result = ObservableObject<>.objectWillChange.getter(*v1);
  *a1 = result;
  return result;
}

Swift::Bool __swiftcall ApplicationCapabilities.Tabs.shouldShowLoadingUpsellBanner(for:)(MusicCore::TabIdentifier a1)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_QWORD *)(v1 + 16))
  {
    v2 = v1;
    swift_bridgeObjectRetain();
    __asm { BR              X9 }
  }
  return 0;
}

BOOL sub_1000B779C(_BOOL8 a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  __int128 v14;
  uint64_t v15;

  v4 = sub_100005574(&qword_10048D510);
  __chkstk_darwin(v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10048C7B0 != -1)
    swift_once(&qword_10048C7B0, sub_1000F39DC);
  if (!static NSUserDefaults.mobileiPod)
    goto LABEL_10;
  v7 = sub_1000BC23C();
  v8 = sub_10000D478();
  NSUserDefaults.subscript.getter((uint64_t)&type metadata for NSUserDefaults.MobileiPod, v7, v8, &v14);
  if (!v15)
  {
    sub_100008758((uint64_t)&v14, &qword_100491B90);
LABEL_10:
    a1 = 1;
    goto LABEL_11;
  }
  if ((swift_dynamicCast(&v13, &v14, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) == 0
    || v13 != 1)
  {
    goto LABEL_10;
  }
  if (a1)
    a1 = objc_msgSend((id)a1, "statusType") == (id)1;
LABEL_11:
  v9 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  NSUserDefaults.applicationScriptURL.getter((uint64_t)v6);

  v10 = type metadata accessor for URL(0);
  LODWORD(v9) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v6, 1, v10);
  sub_100008758((uint64_t)v6, &qword_10048D510);
  if ((_DWORD)v9 == 1 && objc_msgSend(a2, "hasLoadedSubscriptionAvailability"))
    return objc_msgSend(a2, "isSubscriptionAvailable") & a1;
  return a1;
}

uint64_t sub_1000B7970(void *a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSString v6;
  _BOOL4 v7;
  NSString v8;
  id v9;
  id v10;
  id v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  unsigned __int8 v16;
  __int128 v17;
  uint64_t v18;

  if (a1)
  {
    v3 = a1;
    static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureMusicArtistActivityAllowed);
    v5 = v4;
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
    LODWORD(v3) = objc_msgSend(v3, "effectiveBoolValueForSetting:", v6);

    v7 = (_DWORD)v3 == 2;
    if (!a2)
      goto LABEL_12;
  }
  else
  {
    v7 = 1;
    if (!a2)
      goto LABEL_12;
  }
  if (qword_10048C660 != -1)
    swift_once(&qword_10048C660, sub_1000B8168);
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(a2, "dictionaryForBagKey:", v8);

  if (v9)
  {

    sub_1000087DC(0, &qword_100490B68, ICUserIdentityStore_ptr);
    v10 = static ICUserIdentityStore.activeAccountDSID.getter();

    if (v10 && !v7)
      return 1;
  }
LABEL_12:
  if (qword_10048CF08 != -1)
    swift_once(&qword_10048CF08, sub_1001EE2A4);
  if (static DeviceCapabilities.isInternalInstall != 1)
    return 0;
  v12 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v16 = 3;
  v13 = sub_1000BC280();
  v14 = sub_10000D478();
  NSUserDefaults.subscript.getter((uint64_t)&_s3KeyON, v13, v14, &v17);

  if (!v18)
  {
    sub_100008758((uint64_t)&v17, &qword_100491B90);
    return 0;
  }
  result = swift_dynamicCast(&v16, &v17, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
  if ((_DWORD)result)
    return v16;
  return result;
}

uint64_t sub_1000B7B84()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  _QWORD v11[2];
  unsigned __int8 v12[40];
  __int128 v13;
  __int128 v14;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "dictionaryForBagKey:", v1);

  if (!v2
    || (v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable), v2, !v3))
  {
    v13 = 0u;
    v14 = 0u;
LABEL_7:
    sub_100008758((uint64_t)&v13, &qword_100491B90);
LABEL_8:
    v13 = 0u;
    v14 = 0u;
LABEL_9:
    sub_100008758((uint64_t)&v13, &qword_100491B90);
    return 2;
  }
  v11[0] = 6909037;
  v11[1] = 0xE300000000000000;
  AnyHashable.init<A>(_:)(v12, v11, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v3 + 16) && (v4 = sub_1000A580C((uint64_t)v12), (v5 & 1) != 0))
  {
    sub_10000684C(*(_QWORD *)(v3 + 56) + 32 * v4, (uint64_t)&v13);
  }
  else
  {
    v13 = 0u;
    v14 = 0u;
  }
  swift_bridgeObjectRelease(v3);
  sub_10009B178((uint64_t)v12);
  if (!*((_QWORD *)&v14 + 1))
    goto LABEL_7;
  v7 = sub_100005574((uint64_t *)&unk_100490B50);
  if ((swift_dynamicCast(v12, &v13, (char *)&type metadata for Any + 8, v7, 6) & 1) == 0)
    goto LABEL_8;
  v8 = *(_QWORD *)v12;
  if (!*(_QWORD *)v12)
    goto LABEL_8;
  strcpy((char *)v11, "ismliEnabled");
  BYTE5(v11[1]) = 0;
  HIWORD(v11[1]) = -5120;
  AnyHashable.init<A>(_:)(v12, v11, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v8 + 16) && (v9 = sub_1000A580C((uint64_t)v12), (v10 & 1) != 0))
  {
    sub_10000684C(*(_QWORD *)(v8 + 56) + 32 * v9, (uint64_t)&v13);
  }
  else
  {
    v13 = 0u;
    v14 = 0u;
  }
  swift_bridgeObjectRelease(v8);
  sub_10009B178((uint64_t)v12);
  if (!*((_QWORD *)&v14 + 1))
    goto LABEL_9;
  if (swift_dynamicCast(v12, &v13, (char *)&type metadata for Any + 8, &type metadata for Bool, 6))
    return v12[0];
  else
    return 2;
}

uint64_t sub_1000B7DB0()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD v13[5];
  __int128 v14;
  __int128 v15;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "dictionaryForBagKey:", v1);

  if (!v2
    || (v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable), v2, !v3))
  {
    v14 = 0u;
    v15 = 0u;
LABEL_7:
    sub_100008758((uint64_t)&v14, &qword_100491B90);
LABEL_8:
    v14 = 0u;
    v15 = 0u;
LABEL_9:
    sub_100008758((uint64_t)&v14, &qword_100491B90);
    return 0;
  }
  v11 = 6909037;
  v12 = 0xE300000000000000;
  AnyHashable.init<A>(_:)(v13, &v11, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v3 + 16) && (v4 = sub_1000A580C((uint64_t)v13), (v5 & 1) != 0))
  {
    sub_10000684C(*(_QWORD *)(v3 + 56) + 32 * v4, (uint64_t)&v14);
  }
  else
  {
    v14 = 0u;
    v15 = 0u;
  }
  swift_bridgeObjectRelease(v3);
  sub_10009B178((uint64_t)v13);
  if (!*((_QWORD *)&v15 + 1))
    goto LABEL_7;
  v7 = sub_100005574((uint64_t *)&unk_100490B50);
  if ((swift_dynamicCast(v13, &v14, (char *)&type metadata for Any + 8, v7, 6) & 1) == 0)
    goto LABEL_8;
  v8 = v13[0];
  if (!v13[0])
    goto LABEL_8;
  v11 = 0xD000000000000011;
  v12 = 0x80000001003AF4C0;
  AnyHashable.init<A>(_:)(v13, &v11, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v8 + 16) && (v9 = sub_1000A580C((uint64_t)v13), (v10 & 1) != 0))
  {
    sub_10000684C(*(_QWORD *)(v8 + 56) + 32 * v9, (uint64_t)&v14);
  }
  else
  {
    v14 = 0u;
    v15 = 0u;
  }
  swift_bridgeObjectRelease(v8);
  sub_10009B178((uint64_t)v13);
  if (!*((_QWORD *)&v15 + 1))
    goto LABEL_9;
  result = swift_dynamicCast(v13, &v14, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  if ((_DWORD)result)
  {
    swift_bridgeObjectRelease(v13[1]);
    return 1;
  }
  return result;
}

void sub_1000B7FD8(char a1)
{
  __asm { BR              X10 }
}

_UNKNOWN **sub_1000B8020()
{
  return &off_10043C748;
}

uint64_t sub_1000B8168()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(MPStoreSocialBagKey);
  qword_1004908E0 = result;
  *(_QWORD *)algn_1004908E8 = v1;
  return result;
}

uint64_t sub_1000B8194@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, __int16 *a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t result;
  unsigned __int8 v9;
  unint64_t v10;
  char v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  Swift::String v15;
  _QWORD v16[5];
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v5 = *a1;
  v15._countAndFlagsBits = 25705;
  v15._object = (void *)0xE200000000000000;
  AnyHashable.init<A>(_:)(v16, &v15, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v5 + 16) && (v6 = sub_1000A580C((uint64_t)v16), (v7 & 1) != 0))
  {
    sub_10000684C(*(_QWORD *)(v5 + 56) + 32 * v6, (uint64_t)&v17);
  }
  else
  {
    v17 = 0u;
    v18 = 0u;
  }
  sub_10009B178((uint64_t)v16);
  if (*((_QWORD *)&v18 + 1))
  {
    result = swift_dynamicCast(&v15, &v17, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    if ((result & 1) != 0)
    {
      result = sub_1000C6094(v15);
      if (result != 7)
      {
        v9 = result;
        v15._countAndFlagsBits = 0xD000000000000012;
        v15._object = (void *)0x80000001003AF4E0;
        AnyHashable.init<A>(_:)(v16, &v15, &type metadata for String, &protocol witness table for String);
        if (*(_QWORD *)(v5 + 16) && (v10 = sub_1000A580C((uint64_t)v16), (v11 & 1) != 0))
        {
          sub_10000684C(*(_QWORD *)(v5 + 56) + 32 * v10, (uint64_t)&v17);
        }
        else
        {
          v17 = 0u;
          v18 = 0u;
        }
        sub_10009B178((uint64_t)v16);
        if (*((_QWORD *)&v18 + 1))
        {
          result = swift_dynamicCast(&v15, &v17, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
          if ((result & 1) != 0)
          {
            if (LOBYTE(v15._countAndFlagsBits) != 2)
            {
              v13 = v9;
              if ((v15._countAndFlagsBits & 1) != 0)
                v14 = 256;
              else
                v14 = 0;
LABEL_26:
              v12 = v14 | v13;
              goto LABEL_13;
            }
LABEL_22:
            if (*(_QWORD *)(a2 + 16))
            {
              swift_bridgeObjectRetain();
              v19 = a2;
              __asm { BR              X9 }
            }
            v14 = 0;
            v13 = v9;
            goto LABEL_26;
          }
        }
        else
        {
          result = sub_100008758((uint64_t)&v17, &qword_100491B90);
        }
        LOBYTE(v15._countAndFlagsBits) = 2;
        goto LABEL_22;
      }
    }
  }
  else
  {
    result = sub_100008758((uint64_t)&v17, &qword_100491B90);
  }
  v12 = 512;
LABEL_13:
  *a3 = v12;
  return result;
}

id sub_1000B8660()
{
  void *v0;
  id result;
  void *v2;
  objc_super v3;

  result = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
  if (result)
  {
    v2 = result;
    objc_msgSend(result, "unregisterObserver:", v0);

    v3.receiver = v0;
    v3.super_class = (Class)type metadata accessor for ApplicationCapabilities.Controller.ProfileObserver();
    return objc_msgSendSuper2(&v3, "dealloc");
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000B87A0(char *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v8;
  uint64_t Strong;
  uint64_t v10;
  char *v11;
  id v12;

  if (a4)
    v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a4, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  else
    v8 = 0;
  Strong = swift_weakLoadStrong(&a1[OBJC_IVAR____TtCCV9MusicCore23ApplicationCapabilities10ControllerP33_3C92A9FA31E0FE3D8D536795352BB0D115ProfileObserver_controller]);
  if (Strong)
  {
    v10 = Strong;
    v12 = a3;
    v11 = a1;
    UnfairLock.locked<A>(_:)(a5);
    swift_release(v10);
    swift_bridgeObjectRelease(v8);

  }
  else
  {
    swift_bridgeObjectRelease(v8);
  }
}

id sub_1000B8898()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)RadioAvailabilityController), "init");
  qword_1004908F0 = (uint64_t)result;
  return result;
}

uint64_t sub_1000B88C8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000B8908 + 4 * byte_10038A893[a1]))(0xD00000000000001FLL, 0x80000001003AC9E0);
}

uint64_t sub_1000B8908()
{
  uint64_t v0;

  return v0 + 16;
}

unint64_t sub_1000B8930()
{
  return 0xD000000000000014;
}

void sub_1000B894C(char *a1)
{
  sub_10002767C(*a1);
}

void sub_1000B8958()
{
  char *v0;

  sub_1000BE1B4(*v0);
}

void sub_1000B8960(uint64_t a1)
{
  char *v1;

  sub_1000BE68C(a1, *v1);
}

void sub_1000B8968(uint64_t a1)
{
  char *v1;

  sub_1000BEC34(a1, *v1);
}

unint64_t sub_1000B8970@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_10043E218;
  result = sub_1000BC738(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_1000B89A4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1000B88C8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000B89CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for Logger(0, a2);
  sub_1000086DC(v2, qword_1004908F8);
  sub_1000086B4(v2, (uint64_t)qword_1004908F8);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001003ACFD0, 0x6261706143707041, 0xEF73656974696C69);
}

NSString sub_1000B8A4C()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static ApplicationCapabilities.NotificationNames.allowsiTunesContentDidChange = (uint64_t)result;
  return result;
}

id static ApplicationCapabilities.NotificationNames.allowsiTunesContentDidChange.getter()
{
  return sub_1000B8EAC(&qword_10048C678, (id *)&static ApplicationCapabilities.NotificationNames.allowsiTunesContentDidChange);
}

NSString sub_1000B8A9C()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static ApplicationCapabilities.NotificationNames.allowsMusicServiceDidChange = (uint64_t)result;
  return result;
}

id static ApplicationCapabilities.NotificationNames.allowsMusicServiceDidChange.getter()
{
  return sub_1000B8EAC(&qword_10048C680, (id *)&static ApplicationCapabilities.NotificationNames.allowsMusicServiceDidChange);
}

NSString sub_1000B8AEC()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static ApplicationCapabilities.NotificationNames.allowsSocialContentDidChange = (uint64_t)result;
  return result;
}

id static ApplicationCapabilities.NotificationNames.allowsSocialContentDidChange.getter()
{
  return sub_1000B8EAC(&qword_10048C688, (id *)&static ApplicationCapabilities.NotificationNames.allowsSocialContentDidChange);
}

NSString sub_1000B8B3C()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static ApplicationCapabilities.NotificationNames.allowsRadioContentDidChange = (uint64_t)result;
  return result;
}

id static ApplicationCapabilities.NotificationNames.allowsRadioContentDidChange.getter()
{
  return sub_1000B8EAC(&qword_10048C690, (id *)&static ApplicationCapabilities.NotificationNames.allowsRadioContentDidChange);
}

NSString sub_1000B8B8C()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static ApplicationCapabilities.NotificationNames.allowsSubscriptionContentDidChange = (uint64_t)result;
  return result;
}

id static ApplicationCapabilities.NotificationNames.allowsSubscriptionContentDidChange.getter()
{
  return sub_1000B8EAC(&qword_10048C698, (id *)&static ApplicationCapabilities.NotificationNames.allowsSubscriptionContentDidChange);
}

NSString sub_1000B8BDC()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static ApplicationCapabilities.NotificationNames.mliEnabledDidChange = (uint64_t)result;
  return result;
}

id static ApplicationCapabilities.NotificationNames.mliEnabledDidChange.getter()
{
  return sub_1000B8EAC(&qword_10048C6A0, (id *)&static ApplicationCapabilities.NotificationNames.mliEnabledDidChange);
}

NSString sub_1000B8C2C()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static ApplicationCapabilities.NotificationNames.allowsSharePlayTogetherDidChange = (uint64_t)result;
  return result;
}

id static ApplicationCapabilities.NotificationNames.allowsSharePlayTogetherDidChange.getter()
{
  return sub_1000B8EAC(&qword_10048C6A8, (id *)&static ApplicationCapabilities.NotificationNames.allowsSharePlayTogetherDidChange);
}

NSString sub_1000B8C7C()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static ApplicationCapabilities.NotificationNames.supportedTabsDidChange = (uint64_t)result;
  return result;
}

id static ApplicationCapabilities.NotificationNames.supportedTabsDidChange.getter()
{
  return sub_1000B8EAC(&qword_10048C6B0, (id *)&static ApplicationCapabilities.NotificationNames.supportedTabsDidChange);
}

NSString sub_1000B8CCC()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static ApplicationCapabilities.NotificationNames.userSubscriptionStateDidChange = (uint64_t)result;
  return result;
}

id static ApplicationCapabilities.NotificationNames.userSubscriptionStateDidChange.getter()
{
  return sub_1000B8EAC(&qword_10048C6B8, (id *)&static ApplicationCapabilities.NotificationNames.userSubscriptionStateDidChange);
}

NSString sub_1000B8D1C()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static ApplicationCapabilities.NotificationNames.activeAccountDidChange = (uint64_t)result;
  return result;
}

id static ApplicationCapabilities.NotificationNames.activeAccountDidChange.getter()
{
  return sub_1000B8EAC(&qword_10048C6C0, (id *)&static ApplicationCapabilities.NotificationNames.activeAccountDidChange);
}

NSString sub_1000B8D6C()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static ApplicationCapabilities.NotificationNames.hasNetworkConnectivityDidChange = (uint64_t)result;
  return result;
}

id static ApplicationCapabilities.NotificationNames.hasNetworkConnectivityDidChange.getter()
{
  return sub_1000B8EAC(&qword_10048C6C8, (id *)&static ApplicationCapabilities.NotificationNames.hasNetworkConnectivityDidChange);
}

NSString sub_1000B8DBC()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static ApplicationCapabilities.NotificationNames.ratingWarningThresholdDidChange = (uint64_t)result;
  return result;
}

id static ApplicationCapabilities.NotificationNames.ratingWarningThresholdDidChange.getter()
{
  return sub_1000B8EAC(&qword_10048C6D0, (id *)&static ApplicationCapabilities.NotificationNames.ratingWarningThresholdDidChange);
}

NSString sub_1000B8E0C()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static ApplicationCapabilities.NotificationNames.isCloudLibraryEnabledDidChange = (uint64_t)result;
  return result;
}

id static ApplicationCapabilities.NotificationNames.isCloudLibraryEnabledDidChange.getter()
{
  return sub_1000B8EAC(&qword_10048C6D8, (id *)&static ApplicationCapabilities.NotificationNames.isCloudLibraryEnabledDidChange);
}

NSString sub_1000B8E5C()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static ApplicationCapabilities.NotificationNames.subscriptionCapabilitiesDidChange = (uint64_t)result;
  return result;
}

id static ApplicationCapabilities.NotificationNames.subscriptionCapabilitiesDidChange.getter()
{
  return sub_1000B8EAC(&qword_10048C6E0, (id *)&static ApplicationCapabilities.NotificationNames.subscriptionCapabilitiesDidChange);
}

id sub_1000B8EAC(_QWORD *a1, id *a2)
{
  if (*a1 != -1)
    swift_once();
  return *a2;
}

uint64_t sub_1000B8EE4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *v2 = v5;
  v7 = 0;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    if (a1 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1)
      return result;
    v7 = 1;
  }
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v10 = v5;
    else
      v10 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 <= a1)
    v9 = a1;
  else
    v9 = v8;
  result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v9, a2 & 1, v5);
  *v2 = result;
  return result;
}

uint64_t _s9MusicCore23ApplicationCapabilitiesV13RatingWarningV23__derived_struct_equalsySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*a1 != *a2)
    return 0;
  v4 = a1[2];
  v5 = a2[2];
  if (!v4)
  {
    if (v5)
      return 0;
    goto LABEL_11;
  }
  if (!v5)
    return 0;
  v6 = a1[1];
  v7 = a2[1];
  v8 = v6 == v7 && v4 == v5;
  if (v8 || (v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v4, v7, v5, 0), result = 0, (v9 & 1) != 0))
  {
LABEL_11:
    v11 = a1[4];
    v12 = a2[4];
    if (v11)
    {
      if (v12)
      {
        v13 = a1[3];
        v14 = a2[3];
        if (v13 == v14 && v11 == v12)
          return 1;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(v13, v11, v14, v12, 0) & 1) != 0)
          return 1;
      }
    }
    else if (!v12)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

BOOL _s9MusicCore23ApplicationCapabilitiesV23__derived_struct_equalsySbAC_ACtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  __int128 v4;
  __int128 v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  char v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  _OWORD v19[2];
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;

  if (((*a1 ^ *a2) & 1) != 0)
    return 0;
  if (((a1[1] ^ a2[1]) & 1) != 0)
    return 0;
  if (((a1[2] ^ a2[2]) & 1) != 0)
    return 0;
  if (*((_QWORD *)a1 + 1) != *((_QWORD *)a2 + 1))
    return 0;
  if (*((_QWORD *)a1 + 2) != *((_QWORD *)a2 + 2))
    return 0;
  if ((sub_10012CDF8(*((_QWORD *)a1 + 3), *((_QWORD *)a2 + 3)) & 1) == 0)
    return 0;
  if ((sub_10012CDF8(*((_QWORD *)a1 + 4), *((_QWORD *)a2 + 4)) & 1) == 0)
    return 0;
  v4 = *(_OWORD *)(a1 + 56);
  v21[0] = *(_OWORD *)(a1 + 40);
  v21[1] = v4;
  v22 = *((_QWORD *)a1 + 9);
  v5 = *(_OWORD *)(a2 + 56);
  v19[0] = *(_OWORD *)(a2 + 40);
  v19[1] = v5;
  v20 = *((_QWORD *)a2 + 9);
  if ((_s9MusicCore23ApplicationCapabilitiesV13RatingWarningV23__derived_struct_equalsySbAE_AEtFZ_0(v21, v19) & 1) == 0)
    return 0;
  v6 = (void *)*((_QWORD *)a1 + 10);
  v7 = (void *)*((_QWORD *)a2 + 10);
  if (v6)
  {
    if (!v7)
      return 0;
    sub_1000087DC(0, &qword_1004961F0, ICMusicSubscriptionStatus_ptr);
    v8 = v7;
    v9 = v6;
    v10 = static NSObject.== infix(_:_:)();

    if ((v10 & 1) == 0)
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  if ((sub_100027FFC(a1[88], a2[88]) & 1) == 0)
    return 0;
  v11 = *((_QWORD *)a1 + 12);
  v12 = a1[104];
  v13 = *((_QWORD *)a1 + 14);
  v14 = *((_QWORD *)a2 + 12);
  v15 = a2[104];
  v16 = *((_QWORD *)a2 + 14);
  if ((sub_1000B2BC0(v11, v14) & 1) == 0)
    return 0;
  if (v12 == 6)
  {
    if (v15 != 6)
      return 0;
  }
  else
  {
    if (v15 == 6)
      return 0;
    sub_100028000(v12);
    if ((v17 & 1) == 0)
      return 0;
  }
  return (sub_1000B2DCC(v13, v16) & 1) != 0;
}

char *sub_1000B9208(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v11;
  __int128 v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3 = (char *)_swiftEmptyArrayStorage;
    v4 = 32;
    do
    {
      v5 = *(_BYTE *)(a1 + v4);
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
        v3 = sub_10003DBE4(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
      v7 = *((_QWORD *)v3 + 2);
      v6 = *((_QWORD *)v3 + 3);
      if (v7 >= v6 >> 1)
        v3 = sub_10003DBE4((char *)(v6 > 1), v7 + 1, 1, v3);
      *((_QWORD *)v3 + 2) = v7 + 1;
      v3[v7 + 32] = 0x5040302010100uLL >> (8 * v5);
      v4 += 2;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = (char *)_swiftEmptyArrayStorage;
  }
  if (qword_10048C7B0 != -1)
    swift_once(&qword_10048C7B0, sub_1000F39DC);
  if (static NSUserDefaults.mobileiPod)
  {
    v8 = sub_1000BC23C();
    v9 = sub_10000D478();
    NSUserDefaults.subscript.getter((uint64_t)&type metadata for NSUserDefaults.MobileiPod, v8, v9, &v12);
    if (v13)
    {
      if ((swift_dynamicCast(&v11, &v12, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
      {
        if (!*((_QWORD *)v3 + 2))
          return v3;
LABEL_19:
        swift_bridgeObjectRetain();
        __asm { BR              X10 }
      }
    }
    else
    {
      sub_100008758((uint64_t)&v12, &qword_100491B90);
    }
  }
  if (*((_QWORD *)v3 + 2))
    goto LABEL_19;
  return v3;
}

uint64_t sub_1000B9538(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[9];

  if (!*(_QWORD *)(a1 + 16))
    return 1;
  if (*(_QWORD *)(a2 + 16))
  {
    v3 = *(_BYTE *)(a1 + 32);
    Hasher.init(_seed:)(v9);
    v4 = ApplicationCapabilities.Service.rawValue.getter(v3);
    v6 = v5;
    String.hash(into:)(v9, v4, v5);
    swift_bridgeObjectRelease(v6);
    v7 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(a2 + 32));
    if (((*(_QWORD *)(a2 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
      __asm { BR              X9 }
  }
  return 0;
}

void sub_1000B993C(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSString v12;
  id v13;
  uint64_t v14;
  id v15;
  NSString v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  if (a1)
  {
    v3 = a1;
    v4 = String._bridgeToObjectiveC()();
    v5 = objc_msgSend(v3, "numberForBagKey:", v4);

    if (v5)
    {
      v19 = 0;
      v20 = 1;
      static Int._conditionallyBridgeFromObjectiveC(_:result:)(v5, &v19);

      if (v20)
        v6 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v6 = v19;
    }
    else
    {

      v6 = 0x7FFFFFFFFFFFFFFFLL;
    }
    v11 = v3;
    v12 = String._bridgeToObjectiveC()();
    v13 = objc_msgSend(v11, "stringForBagKey:", v12);

    if (v13)
    {
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v10 = v14;

    }
    else
    {

      v9 = 0;
      v10 = 0;
    }
    v15 = v11;
    v16 = String._bridgeToObjectiveC()();
    v17 = objc_msgSend(v15, "stringForBagKey:", v16);

    if (v17)
    {
      v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v8 = v18;

    }
    else
    {

      v7 = 0;
      v8 = 0;
    }
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v6 = 0x7FFFFFFFFFFFFFFFLL;
  }
  *a2 = v6;
  a2[1] = v9;
  a2[2] = v10;
  a2[3] = v7;
  a2[4] = v8;
}

void sub_1000B9B24(char a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  int64_t v19;

  if (!a2)
  {
LABEL_25:
    sub_1000B7FD8(a1);
    return;
  }
  v18 = a2 + 64;
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 64);
  v19 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v7 << 6);
      goto LABEL_18;
    }
    if (__OFADD__(v7++, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v7 >= v19)
      goto LABEL_23;
    v11 = *(_QWORD *)(v18 + 8 * v7);
    if (!v11)
      break;
LABEL_17:
    v6 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_18:
    v13 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v9);
    v14 = *v13;
    v15 = (void *)v13[1];
    v16 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17._countAndFlagsBits = v14;
    v17._object = v15;
    _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10043C860, v17);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v16);
  }
  v12 = v7 + 1;
  if (v7 + 1 >= v19)
    goto LABEL_23;
  v11 = *(_QWORD *)(v18 + 8 * v12);
  if (v11)
    goto LABEL_16;
  v12 = v7 + 2;
  if (v7 + 2 >= v19)
    goto LABEL_23;
  v11 = *(_QWORD *)(v18 + 8 * v12);
  if (v11)
  {
LABEL_16:
    v7 = v12;
    goto LABEL_17;
  }
  v12 = v7 + 3;
  if (v7 + 3 < v19)
  {
    v11 = *(_QWORD *)(v18 + 8 * v12);
    if (!v11)
    {
      while (1)
      {
        v7 = v12 + 1;
        if (__OFADD__(v12, 1))
          break;
        if (v7 >= v19)
          goto LABEL_23;
        v11 = *(_QWORD *)(v18 + 8 * v7);
        ++v12;
        if (v11)
          goto LABEL_17;
      }
LABEL_27:
      __break(1u);
      JUMPOUT(0x1000B9FDCLL);
    }
    goto LABEL_16;
  }
LABEL_23:
  swift_release(a2);
  if (!_swiftEmptyArrayStorage[2])
  {
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    goto LABEL_25;
  }
}

_QWORD *sub_1000B9FFC(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  unsigned __int8 v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unsigned __int8 v23;
  uint64_t v24;
  _QWORD v25[9];
  _QWORD *v26;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return _swiftEmptyArrayStorage;
  v3 = a2;
  v4 = 0;
  v5 = _swiftEmptyArrayStorage;
  v24 = a1 + 32;
  v20 = *(_QWORD *)(a1 + 16);
  do
  {
    if (v4 <= v2)
      v6 = v2;
    else
      v6 = v4;
    v21 = v6;
    v22 = v5;
    while (1)
    {
      if (v4 == v6)
      {
        __break(1u);
        JUMPOUT(0x1000BA760);
      }
      v7 = (unsigned __int8 *)(v24 + 2 * v4);
      v8 = *v7;
      ++v4;
      if (v8 == 2)
      {
        v9 = *(_QWORD *)(v3 + 24);
        if (!*(_QWORD *)(v9 + 16))
          goto LABEL_9;
        Hasher.init(_seed:)(v25);
        swift_bridgeObjectRetain();
        String.hash(into:)(v25, 0xD000000000000013, 0x80000001003AC960);
        v11 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v9 + 32));
        if (((*(_QWORD *)(v9 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
          __asm { BR              X9 }
        goto LABEL_7;
      }
      if (v8 == 6)
      {
        v9 = *(_QWORD *)(v3 + 24);
        if (!*(_QWORD *)(v9 + 16))
          goto LABEL_9;
        Hasher.init(_seed:)(v25);
        swift_bridgeObjectRetain();
        String.hash(into:)(v25, 0x646956636973756DLL, 0xEB00000000736F65);
        v12 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v9 + 32));
        if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
          __asm { BR              X9 }
LABEL_7:
        v2 = v20;
        v5 = v22;
        goto LABEL_8;
      }
      if (v8 != 4)
        break;
      v9 = *(_QWORD *)(v3 + 24);
      if (!*(_QWORD *)(v9 + 16))
        goto LABEL_9;
      Hasher.init(_seed:)(v25);
      swift_bridgeObjectRetain();
      String.hash(into:)(v25, 0x6F69646172, 0xE500000000000000);
      v10 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v9 + 32));
      if (((*(_QWORD *)(v9 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
        __asm { BR              X9 }
      v3 = a2;
LABEL_8:
      v6 = v21;
      swift_bridgeObjectRelease(v9);
LABEL_9:
      if (v4 == v2)
        return v5;
    }
    v23 = v7[1];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
    v26 = v5;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100077318(0, v5[2] + 1, 1);
      v5 = v26;
    }
    v14 = v23;
    v16 = v5[2];
    v15 = v5[3];
    if (v16 >= v15 >> 1)
    {
      sub_100077318((char *)(v15 > 1), v16 + 1, 1);
      v14 = v23;
      v5 = v26;
    }
    v5[2] = v16 + 1;
    v17 = (char *)v5 + 2 * v16;
    v17[32] = v8;
    v17[33] = v14;
  }
  while (v4 != v2);
  return v5;
}

id sub_1000BA7E4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  void *v7;
  id result;
  void *v9;
  unsigned __int8 v10;
  void *v11;
  id v12;
  char v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  char v20;
  char v21;
  id v22;
  id v23;
  NSString v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  NSString v28;
  uint64_t v29;
  uint64_t v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  NSString v34;
  uint64_t v35;
  uint64_t v36;
  NSString v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  NSString v41;
  uint64_t v42;
  uint64_t v43;
  NSString v44;
  id v45;
  char v46;
  char v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  id v55;
  unsigned __int8 v56;
  unsigned __int8 v57;
  id v58;
  _QWORD *v59;
  _QWORD *v60;
  os_unfair_lock_s *v61;
  os_unfair_lock_s *v62;
  os_unfair_lock_s *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  char v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  unsigned int v80;
  id v81;
  char v82;
  id v84;
  uint64_t v85;
  BOOL v86;
  unsigned __int8 v87;
  unsigned __int8 v88;
  __int128 v89;
  __int128 v90;
  _BYTE v91[40];
  void *v92;
  char v93;
  char *v94;
  char v95;
  uint64_t v96;
  _OWORD v97[2];
  uint64_t v98;

  v7 = (void *)objc_opt_self(MPCloudController);
  result = objc_msgSend(v7, "sharedCloudController");
  if (result)
  {
    v9 = result;
    v10 = objc_msgSend(result, "hasProperNetworkConditionsToShowCloudMedia");

    v87 = v10;
    v88 = 0;
    v89 = 0uLL;
    *(_QWORD *)&v90 = &_swiftEmptySetSingleton;
    *((_QWORD *)&v90 + 1) = &_swiftEmptySetSingleton;
    *(_QWORD *)v91 = 0x7FFFFFFFFFFFFFFFLL;
    memset(&v91[8], 0, 32);
    v11 = (void *)objc_opt_self(MPCloudServiceStatusController);
    v12 = objc_msgSend(v11, "sharedController");
    v81 = objc_msgSend(v12, "musicSubscriptionStatus");

    v93 = 1;
    v94 = sub_1000B9208((uint64_t)_swiftEmptyArrayStorage);
    v95 = v13;
    v96 = v14;
    v15 = objc_msgSend(v11, "sharedController");
    v16 = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
    v84 = objc_msgSend(v7, "sharedCloudController");
    v17 = objc_msgSend(v15, "musicSubscriptionStatus");
    v18 = v17;
    v82 = a3;
    if (v17)
      v80 = objc_msgSend(v17, "capabilities") & 1;
    else
      v80 = 0;
    v19 = objc_msgSend((id)objc_opt_self(ICUserIdentityStore), "defaultIdentityStore");
    sub_1000B69B0();
    v21 = v20;

    v86 = (v21 & 1) == 0;
    if (v18)
    {
      v22 = v18;
      *((_QWORD *)&v89 + 1) = objc_msgSend(v22, "statusType");
      v23 = objc_msgSend(v22, "capabilities");

      *(_QWORD *)&v89 = v23;
    }
    if (sub_1000B779C((_BOOL8)v18, v15))
      sub_1001324CC((unsigned __int8 *)v97, 2u);
    if (qword_10048C668 != -1)
      swift_once(&qword_10048C668, sub_1000B8898);
    if (objc_msgSend((id)qword_1004908F0, "isRadioAvailable"))
      sub_1001324CC((unsigned __int8 *)v97, 4u);
    if ((sub_1000B7970(v16, a1) & 1) != 0)
      sub_1001324CC((unsigned __int8 *)v97, 3u);
    if (a1)
    {
      v24 = String._bridgeToObjectiveC()();
      v25 = objc_msgSend(a1, "BOOLValueForBagKey:", v24);

      if (v25)
        sub_1001324CC((unsigned __int8 *)v97, 9u);
    }
    if (v16)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureGroupActivityAllowed);
      v27 = v26;
      v28 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v27);
      LODWORD(v27) = objc_msgSend(v16, "effectiveBoolValueForSetting:", v28);

      if ((_DWORD)v27 != 2)
        sub_1001324CC((unsigned __int8 *)v97, 6u);
      static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureMusicServiceAllowed);
      v30 = v29;
      v31 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v30);
      LODWORD(v30) = objc_msgSend(v16, "effectiveBoolValueForSetting:", v31);

      if ((_DWORD)v30 != 2)
        sub_1001324CC((unsigned __int8 *)v97, 0);
      static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureMusicVideosAllowed);
      v33 = v32;
      v34 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v33);
      LODWORD(v33) = objc_msgSend(v16, "effectiveBoolValueForSetting:", v34);

      if ((_DWORD)v33 != 2)
        sub_1001324CC((unsigned __int8 *)v97, 1u);
      static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureITunesAllowed);
      v36 = v35;
      v37 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v36);
      LODWORD(v36) = objc_msgSend(v16, "effectiveBoolValueForSetting:", v37);

      if ((_DWORD)v36 != 2)
        sub_1001324CC((unsigned __int8 *)v97, 5u);
      v92 = v18;
      v38 = v18;

      static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureAccountModificationAllowed);
      v40 = v39;
      v41 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v40);
      LODWORD(v40) = objc_msgSend(v16, "effectiveBoolValueForSetting:", v41);

      if ((_DWORD)v40 != 2)
        sub_1001324CC((unsigned __int8 *)v97, 8u);
      static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureExplicitContentAllowed);
      v43 = v42;
      v44 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v43);
      LODWORD(v43) = objc_msgSend(v16, "isBoolSettingLockedDownByRestrictions:", v44);

      if ((_DWORD)v43)
        sub_1001324CC((unsigned __int8 *)v97, 7u);
    }
    else
    {
      v92 = v18;
      v45 = v18;

    }
    swift_bridgeObjectRetain();
    v46 = sub_1000B9538((uint64_t)&off_10043C8E0, v90);
    swift_bridgeObjectRelease(v90);
    if ((v46 & 1) != 0)
    {
      v47 = v80 ? 2 : 0;
      v93 = v47;
      if (v18)
      {
        v48 = v18;
        if (objc_msgSend(v48, "statusType") == (id)3)
        {
          if (qword_10048C670 != -1)
            swift_once(&qword_10048C670, sub_1000B89CC);
          v50 = type metadata accessor for Logger(0, v49);
          v51 = sub_1000086B4(v50, (uint64_t)qword_1004908F8);
          v52 = Logger.logObject.getter(v51);
          v53 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v52, v53))
          {
            v54 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v54 = 0;
            _os_log_impl((void *)&_mh_execute_header, v52, v53, "Unexpectedly found a Voice subscriber! 😡", v54, 2u);
            swift_slowDealloc(v54, -1, -1);
          }

        }
      }
    }
    if (a1 && (v89 & 1) != 0 && (sub_1000B7B84() & 1) != 0 && (sub_1000B7DB0() & 1) != 0)
      sub_1001324CC((unsigned __int8 *)v97, 0xAu);
    if (v84)
    {
      v55 = v84;
      if ((objc_msgSend(v55, "shouldProhibitMusicActionForCurrentNetworkConditions") & 1) != 0)
        v56 = 0;
      else
        v56 = objc_msgSend(v55, "hasProperNetworkConditionsToShowCloudMedia");

    }
    else
    {
      v56 = 0;
    }
    v87 = v56;
    v57 = objc_msgSend(v15, "isCloudLibraryEnabled");
    v88 = v57;
    v58 = a1;
    sub_1000B993C(a1, (uint64_t *)v97);
    swift_bridgeObjectRelease(*(_QWORD *)&v91[16]);
    swift_bridgeObjectRelease(*(_QWORD *)&v91[32]);
    *(_OWORD *)v91 = v97[0];
    *(_OWORD *)&v91[16] = v97[1];
    *(_QWORD *)&v91[32] = v98;
    if ((v82 & 1) != 0)
    {
      sub_1000B7FD8(2);
      v60 = v59;
    }
    else
    {
      v61 = *(os_unfair_lock_s **)(a2 + 16);
      v62 = v61 + 4;
      v63 = v61 + 11;
      os_unfair_lock_lock(v61 + 11);
      sub_1001F5384(v62, a1, a2, &v85);
      os_unfair_lock_unlock(v63);
      v64 = v85;
      if (v85)
      {
        sub_1000B9B24(v93, v85);
        v66 = v65;
        swift_bridgeObjectRelease(v64);
      }
      else
      {
        sub_1000B7FD8(v93);
        v66 = v67;
      }
      v60 = sub_1000B9FFC(v66, (uint64_t)&v86);
      swift_bridgeObjectRelease(v66);
      v56 = v87;
      v57 = v88;
    }
    v68 = sub_1000B9208((uint64_t)v60);
    v70 = v69;
    v72 = v71;

    swift_release(a2);
    swift_bridgeObjectRelease(v94);
    result = (id)swift_bridgeObjectRelease(v96);
    v73 = *(_QWORD *)&v91[32];
    v74 = v92;
    v75 = v93;
    v77 = v89;
    v76 = v90;
    v78 = *(_OWORD *)v91;
    v79 = *(_OWORD *)&v91[16];
    *(_BYTE *)a4 = v86;
    *(_BYTE *)(a4 + 1) = v56;
    *(_BYTE *)(a4 + 2) = v57;
    *(_OWORD *)(a4 + 8) = v77;
    *(_OWORD *)(a4 + 24) = v76;
    *(_OWORD *)(a4 + 40) = v78;
    *(_OWORD *)(a4 + 56) = v79;
    *(_QWORD *)(a4 + 72) = v73;
    *(_QWORD *)(a4 + 80) = v74;
    *(_BYTE *)(a4 + 88) = v75;
    *(_QWORD *)(a4 + 96) = v68;
    *(_BYTE *)(a4 + 104) = v70;
    *(_QWORD *)(a4 + 112) = v72;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000BB038(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  _UNKNOWN **v8;
  _UNKNOWN **v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _UNKNOWN **v30;
  id v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  id v41;
  uint64_t v42;

  v3 = a1;
  v37 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v38 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  v8 = &off_10048C000;
  v36 = a2;
  v9 = MPCPlaybackSharedListeningProperties_ptr;
  while (1)
  {
    if (v6)
    {
      v11 = __clz(__rbit64(v6));
      v12 = (v6 - 1) & v6;
      v40 = v7;
      v13 = v11 | (v7 << 6);
      goto LABEL_24;
    }
    v14 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v14 >= v38)
      goto LABEL_28;
    v15 = *(_QWORD *)(v37 + 8 * v14);
    v16 = v7 + 1;
    if (!v15)
    {
      v16 = v7 + 2;
      if (v7 + 2 >= v38)
        goto LABEL_28;
      v15 = *(_QWORD *)(v37 + 8 * v16);
      if (!v15)
      {
        v16 = v7 + 3;
        if (v7 + 3 >= v38)
          goto LABEL_28;
        v15 = *(_QWORD *)(v37 + 8 * v16);
        if (!v15)
        {
          v16 = v7 + 4;
          if (v7 + 4 >= v38)
            goto LABEL_28;
          v15 = *(_QWORD *)(v37 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_23:
    v12 = (v15 - 1) & v15;
    v40 = v16;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
LABEL_24:
    v39 = v12;
    v18 = v8[206];
    v20 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v13);
    if (v18 != (void *)-1)
      swift_once(&qword_10048C670, sub_1000B89CC);
    v21 = type metadata accessor for Logger(0, v19);
    sub_1000086B4(v21, (uint64_t)qword_1004908F8);
    v22 = v20;
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v42 = v26;
      *(_DWORD *)v25 = 136446210;
      v41 = v22;
      type metadata accessor for Name(0);
      v27 = v3;
      v29 = v28;
      v30 = v9;
      v31 = v22;
      v32 = (char *)String.init<A>(describing:)(&v41, v29);
      v34 = v33;
      *(_QWORD *)(v25 + 4) = sub_100019400(v32, v33, &v42);

      v9 = v30;
      v35 = v34;
      v3 = v27;
      a2 = v36;
      v8 = &off_10048C000;
      swift_bridgeObjectRelease(v35);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Notifying changes for '%{public}s'", (uint8_t *)v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

    }
    else
    {

    }
    v6 = v39;
    v7 = v40;
    v10 = objc_msgSend((id)objc_opt_self(v9[93]), "defaultCenter");
    objc_msgSend(v10, "postNotificationName:object:", v22, a2);

  }
  v17 = v7 + 5;
  if (v7 + 5 >= v38)
  {
LABEL_28:
    swift_release(v3);
    return;
  }
  v15 = *(_QWORD *)(v37 + 8 * v17);
  if (v15)
  {
    v16 = v7 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v38)
      goto LABEL_28;
    v15 = *(_QWORD *)(v37 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_23;
  }
LABEL_30:
  __break(1u);
}

unint64_t _s9MusicCore23ApplicationCapabilitiesV7ServiceO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10043E070, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xB)
    return 11;
  else
    return v3;
}

void sub_1000BB3F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_needsNetworkReachabilityUpdate;
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_needsNetworkReachabilityUpdate) & 1) == 0)
  {
    **(_BYTE **)(v0 + 24) = 1;
    *(_BYTE *)(v1 + v2) = 1;
  }
}

uint64_t sub_1000BB424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_10049093C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10000F894;
  v3[2] = v2;
  return swift_task_switch(sub_1000B516C, 0, 0);
}

double sub_1000BB484(uint64_t a1)
{
  uint64_t v1;

  return sub_1000B6E88(a1, v1);
}

unint64_t sub_1000BB490()
{
  unint64_t result;

  result = qword_100490980;
  if (!qword_100490980)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApplicationCapabilities.Service, &type metadata for ApplicationCapabilities.Service);
    atomic_store(result, (unint64_t *)&qword_100490980);
  }
  return result;
}

unint64_t sub_1000BB4D8()
{
  unint64_t result;

  result = qword_100490988;
  if (!qword_100490988)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApplicationCapabilities.SubscriptionState, &type metadata for ApplicationCapabilities.SubscriptionState);
    atomic_store(result, (unint64_t *)&qword_100490988);
  }
  return result;
}

uint64_t destroy for ApplicationCapabilities(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 96));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 112));
}

uint64_t initializeWithCopy for ApplicationCapabilities(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v4;
  v5 = *(void **)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v5;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ApplicationCapabilities(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v7);
  v8 = *(void **)(a1 + 80);
  v9 = *(void **)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v9;
  v10 = v9;

  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v11 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v12 = *(_QWORD *)(a2 + 112);
  v13 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t assignWithTake for ApplicationCapabilities(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v4);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
  v6 = *(void **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);

  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v7 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v8 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ApplicationCapabilities(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ApplicationCapabilities(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ApplicationCapabilities()
{
  return &type metadata for ApplicationCapabilities;
}

uint64_t getEnumTagSinglePayload for ApplicationCapabilities.Service(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ApplicationCapabilities.Service(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_1000BB9A8 + 4 * byte_10038A8B8[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1000BB9DC + 4 * byte_10038A8B3[v4]))();
}

uint64_t sub_1000BB9DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000BB9E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000BB9ECLL);
  return result;
}

uint64_t sub_1000BB9F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000BBA00);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1000BBA04(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000BBA0C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ApplicationCapabilities.Service()
{
  return &type metadata for ApplicationCapabilities.Service;
}

uint64_t destroy for ApplicationCapabilities.RatingWarning(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for ApplicationCapabilities.RatingWarning(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ApplicationCapabilities.RatingWarning(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  a1[3] = a2[3];
  v5 = a2[4];
  v6 = a1[4];
  a1[4] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t assignWithTake for ApplicationCapabilities.RatingWarning(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ApplicationCapabilities.RatingWarning(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ApplicationCapabilities.RatingWarning(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ApplicationCapabilities.RatingWarning()
{
  return &type metadata for ApplicationCapabilities.RatingWarning;
}

ValueMetadata *type metadata accessor for ApplicationCapabilities.SubscriptionState()
{
  return &type metadata for ApplicationCapabilities.SubscriptionState;
}

uint64_t destroy for ApplicationCapabilities.Tabs(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return swift_bridgeObjectRelease(a1[2]);
}

uint64_t _s9MusicCore23ApplicationCapabilitiesV4TabsVwCP_0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for ApplicationCapabilities.Tabs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  v5 = a2[2];
  v6 = a1[2];
  a1[2] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t *assignWithTake for ApplicationCapabilities.Tabs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  v5 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ApplicationCapabilities.Tabs(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ApplicationCapabilities.Tabs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ApplicationCapabilities.Tabs()
{
  return &type metadata for ApplicationCapabilities.Tabs;
}

uint64_t sub_1000BBDEC()
{
  return type metadata accessor for ApplicationCapabilities.Controller(0);
}

uint64_t type metadata accessor for ApplicationCapabilities.Controller(uint64_t a1)
{
  uint64_t result;

  result = qword_1004909C8;
  if (!qword_1004909C8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ApplicationCapabilities.Controller);
  return result;
}

void sub_1000BBE30(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[11];

  v4[0] = &unk_10038AC00;
  sub_1000BBEE8();
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_10038AC00;
    v4[3] = &unk_10038AC18;
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[5] = &unk_10038AC30;
    v4[6] = &unk_10038AC48;
    v4[7] = &unk_10038AC30;
    v4[8] = &unk_10038AC30;
    v4[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[10] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_updateClassMetadata2(a1, 256, 11, v4, a1 + 80);
  }
}

void sub_1000BBEE8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1004909D8)
  {
    v0 = type metadata accessor for Published(0, &type metadata for ApplicationCapabilities);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1004909D8);
  }
}

uint64_t type metadata accessor for ApplicationCapabilities.Controller.ProfileObserver()
{
  return objc_opt_self(_TtCCV9MusicCore23ApplicationCapabilities10ControllerP33_3C92A9FA31E0FE3D8D536795352BB0D115ProfileObserver);
}

ValueMetadata *type metadata accessor for ApplicationCapabilities.NotificationNames()
{
  return &type metadata for ApplicationCapabilities.NotificationNames;
}

uint64_t storeEnumTagSinglePayload for ApplicationCapabilities.Tabs.Configuration(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000BBFB8 + 4 * byte_10038A8C2[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_1000BBFEC + 4 * byte_10038A8BD[v4]))();
}

uint64_t sub_1000BBFEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1000BBFF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1000BBFFCLL);
  return result;
}

uint64_t sub_1000BC008(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x1000BC010);
  *(_BYTE *)(result + 1) = a2 + 1;
  return result;
}

uint64_t sub_1000BC014(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1000BC01C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ApplicationCapabilities.Tabs.Configuration()
{
  return &type metadata for ApplicationCapabilities.Tabs.Configuration;
}

_QWORD *sub_1000BC038()
{
  uint64_t v0;

  return sub_1000B6710(v0);
}

uint64_t sub_1000BC050(uint64_t a1)
{
  id v2;

  v2 = *(id *)(a1 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_1000BC0D0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[7];
  v5 = a1[9];
  v6 = (void *)a1[10];
  v7 = a1[12];
  swift_bridgeObjectRelease(a1[14]);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);

  return a1;
}

uint64_t sub_1000BC14C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 136));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 152));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 160));
  return swift_deallocObject(v0, 168, 7);
}

uint64_t sub_1000BC1B8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (uint64_t)(v1 + 5);
  v8 = v1[20];
  v9 = (_QWORD *)swift_task_alloc(dword_100490B3C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10000EA88;
  return sub_1000B65C4(a1, v4, v5, v6, v7, v8);
}

unint64_t sub_1000BC23C()
{
  unint64_t result;

  result = qword_100490B48;
  if (!qword_100490B48)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NSUserDefaults.MobileiPod, &type metadata for NSUserDefaults.MobileiPod);
    atomic_store(result, (unint64_t *)&qword_100490B48);
  }
  return result;
}

unint64_t sub_1000BC280()
{
  unint64_t result;

  result = qword_100490B60;
  if (!qword_100490B60)
  {
    result = swift_getWitnessTable(&unk_10038AD24, &_s3KeyON);
    atomic_store(result, (unint64_t *)&qword_100490B60);
  }
  return result;
}

uint64_t sub_1000BC2C4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000BC2E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  v1 = sub_100005574(&qword_100490B98);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v0 + v4, v1, v7);
  return swift_deallocObject(v0, v5, v6);
}

double sub_1000BC360(void *a1)
{
  uint64_t v1;

  sub_100005574(&qword_100490B98);
  return sub_1000B7178(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1000BC3A4()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

double sub_1000BC3D8(uint64_t a1)
{
  uint64_t v1;

  return sub_1000C38B8(a1, *(void (**)(void))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1000BC3E4()
{
  uint64_t v0;

  return sub_1000C3AC8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

_QWORD *sub_1000BC3FC()
{
  uint64_t v0;

  return sub_1000B72D8(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

void sub_1000BC418()
{
  char *v0;

  sub_1000B51C8(v0);
}

uint64_t sub_1000BC434()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000BC460(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100490BAC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000F894;
  return sub_1000B579C(a1, v4, v5, v6);
}

double sub_1000BC4CC(uint64_t a1)
{
  uint64_t v1;

  return sub_1000B41B4(a1, v1);
}

uint64_t sub_1000BC4D4(char a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v3;

  return sub_1000B4A28(a1, a2, a3, v3);
}

uint64_t sub_1000BC4DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000BC4EC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000BC4F4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000BC518(uint64_t a1)
{
  uint64_t v1;

  return sub_1000B4BD8(a1, *(_QWORD *)(v1 + 16));
}

unint64_t sub_1000BC520()
{
  unint64_t result;

  result = qword_100490BD0;
  if (!qword_100490BD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApplicationCapabilities.Service, &type metadata for ApplicationCapabilities.Service);
    atomic_store(result, (unint64_t *)&qword_100490BD0);
  }
  return result;
}

id *sub_1000BC564(id *a1)
{
  id v2;

  v2 = *a1;
  return a1;
}

double sub_1000BC58C()
{
  uint64_t v0;

  return sub_1000B6874(v0);
}

double sub_1000BC594()
{
  uint64_t v0;

  return sub_1000B6AB8(v0, (void (*)(void))sub_1000BC038);
}

uint64_t sub_1000BC5B4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1000BC5E0(void *a1)
{
  uint64_t v1;

  sub_1000B6B3C(a1, v1);
}

id sub_1000BC5E8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(void **)(v1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_storeBag);
  *(_QWORD *)(v1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_storeBag) = v2;

  return v2;
}

uint64_t _s9MusicCore23ApplicationCapabilitiesV17SubscriptionStateOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000BC670 + 4 * byte_10038A8CC[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000BC6A4 + 4 * byte_10038A8C7[v4]))();
}

uint64_t sub_1000BC6A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000BC6AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000BC6B4);
  return result;
}

uint64_t sub_1000BC6C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000BC6C8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000BC6CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000BC6D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s3KeyOMa()
{
  return &_s3KeyON;
}

unint64_t sub_1000BC6F4()
{
  unint64_t result;

  result = qword_100490C00;
  if (!qword_100490C00)
  {
    result = swift_getWitnessTable(&unk_10038ACFC, &_s3KeyON);
    atomic_store(result, (unint64_t *)&qword_100490C00);
  }
  return result;
}

unint64_t sub_1000BC738(Swift::String string, Swift::OpaquePointer cases)
{
  void *object;
  Swift::String v3;
  unint64_t v5;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease(object);
  if (v5 >= 4)
    return 4;
  else
    return v5;
}

void *BackgroundFetchManager.httpHeader.unsafeMutableAddressor()
{
  return &static BackgroundFetchManager.httpHeader;
}

unint64_t static BackgroundFetchManager.httpHeader.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_1000BC7A8()
{
  uint64_t Manager;
  uint64_t result;

  Manager = type metadata accessor for BackgroundFetchManager();
  result = swift_initStaticObject(Manager, &unk_10048CFC8);
  static BackgroundFetchManager.shared = result;
  return result;
}

uint64_t *BackgroundFetchManager.shared.unsafeMutableAddressor()
{
  if (qword_10048C6E8 != -1)
    swift_once(&qword_10048C6E8, sub_1000BC7A8);
  return &static BackgroundFetchManager.shared;
}

uint64_t static BackgroundFetchManager.shared.getter()
{
  uint64_t v0;

  return swift_initStaticObject(v0, &unk_10048CFC8);
}

uint64_t BackgroundFetchManager.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  swift_bridgeObjectRetain();
  v6 = sub_1000BD030();
  if (!*(_QWORD *)(v6 + 16) || (v7 = sub_10009ABAC(a1, a2), (v8 & 1) == 0))
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v6);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v6);
  if (!*(_QWORD *)(v9 + 16) || (v10 = sub_10009ABAC(7107189, 0xE300000000000000), (v11 & 1) == 0))
  {
    v17 = 0u;
    v18 = 0u;
    swift_bridgeObjectRelease(v9);
    goto LABEL_10;
  }
  sub_10000684C(*(_QWORD *)(v9 + 56) + 32 * v10, (uint64_t)&v17);
  swift_bridgeObjectRelease(v9);
  if (!*((_QWORD *)&v18 + 1))
  {
LABEL_10:
    sub_100008758((uint64_t)&v17, &qword_100491B90);
    goto LABEL_11;
  }
  if ((swift_dynamicCast(&v15, &v17, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
  {
    v12 = v16;
    URL.init(string:)(v15, v16);
    return swift_bridgeObjectRelease(v12);
  }
LABEL_11:
  v14 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a3, 1, 1, v14);
}

void (*BackgroundFetchManager.subscript.modify(uint64_t *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  size_t v6;
  void *v7;

  *a1 = a2;
  a1[1] = a3;
  v6 = *(_QWORD *)(*(_QWORD *)(sub_100005574(&qword_10048D510) - 8) + 64);
  a1[2] = (uint64_t)malloc(v6);
  v7 = malloc(v6);
  a1[3] = (uint64_t)v7;
  BackgroundFetchManager.subscript.getter(a2, a3, (uint64_t)v7);
  return sub_1000BC9F8;
}

void sub_1000BC9F8(uint64_t *a1, char a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (void *)a1[2];
  v3 = (void *)a1[3];
  v5 = *a1;
  v4 = a1[1];
  if ((a2 & 1) != 0)
  {
    sub_10000DCF8(a1[3], (uint64_t)v2);
    swift_bridgeObjectRetain();
    _s9MusicCore22BackgroundFetchManagerCy10Foundation3URLVSgSScis_0((uint64_t)v2, v5, v4);
    sub_100008758((uint64_t)v3, &qword_10048D510);
  }
  else
  {
    swift_bridgeObjectRetain();
    _s9MusicCore22BackgroundFetchManagerCy10Foundation3URLVSgSScis_0((uint64_t)v3, v5, v4);
  }
  free(v3);
  free(v2);
}

Swift::Void __swiftcall BackgroundFetchManager.removeAll()()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "removeObjectForKey:", v1);

}

void sub_1000BCB04(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), int a4, int a5, int a6, dispatch_group_t group)
{
  if (a3)
    a1 = a3(a1, a2);
  if (a2)
  {
    __chkstk_darwin(a1);
    swift_errorRetain(a2);
    UnfairLock.locked<A>(_:)((void (*)(void))sub_1000BE18C);
    swift_errorRelease(a2);
  }
  dispatch_group_leave(group);
}

uint64_t sub_1000BCBC0(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  _BYTE v8[24];

  swift_beginAccess(a1, v8, 1, 0);
  v4 = (_QWORD *)*a1;
  swift_errorRetain(a2);
  result = swift_isUniquelyReferenced_nonNull_native(v4);
  *a1 = (uint64_t)v4;
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_10003E528(0, v4[2] + 1, 1, v4);
    v4 = (_QWORD *)result;
    *a1 = result;
  }
  v7 = v4[2];
  v6 = v4[3];
  if (v7 >= v6 >> 1)
  {
    result = (uint64_t)sub_10003E528((_QWORD *)(v6 > 1), v7 + 1, 1, v4);
    v4 = (_QWORD *)result;
    *a1 = result;
  }
  v4[2] = v7 + 1;
  v4[v7 + 4] = a2;
  return result;
}

uint64_t sub_1000BCC90(uint64_t a1, uint64_t a2, void (*a3)())
{
  sub_100005574(&qword_100490CB8);
  UnfairLock.locked<A>(_:)((void (*)(void))sub_1000BE134);
  a3();
  return swift_bridgeObjectRelease();
}

void sub_1000BCD0C()
{
  void *v0;
  char v1;
  uint64_t v2;
  void *v3;
  char v4;

  if (qword_10048C720 != -1)
    swift_once(&qword_10048C720, sub_1000C378C);
  sub_100005574(&qword_100490BA0);
  UnfairLock.locked<A>(_:)((void (*)(void))sub_10000D460);
  v0 = v3;
  if (v3 && (sub_1000BCDE8(v3, (uint64_t)&v3), v0, (v4 & 1) == 0))
  {
    v1 = 0;
    v2 = (uint64_t)v3;
  }
  else
  {
    v1 = 1;
    v2 = 0x4122750000000000;
  }
  qword_100490C10 = v2;
  byte_100490C18 = v1;
}

uint64_t sub_1000BCDE8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  __int128 *v17;
  char v18;
  _QWORD v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  static String._unconditionallyBridgeFromObjectiveC(_:)(ICURLBagKeyMusicCommon);
  v5 = v4;
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  v7 = objc_msgSend(a1, "valueForBagKey:", v6);

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)(v7);
    swift_unknownObjectRelease(v7);
  }
  else
  {
    v22 = 0u;
    v23 = 0u;
  }
  sub_1000AEB5C((uint64_t)&v22, (uint64_t)&v20);
  if (!*((_QWORD *)&v21 + 1))
    goto LABEL_15;
  v8 = sub_100005574((uint64_t *)&unk_100493380);
  result = swift_dynamicCast(&v22, &v20, (char *)&type metadata for Any + 8, v8, 6);
  if ((result & 1) == 0)
  {
LABEL_17:
    *(_QWORD *)a2 = 0;
    v18 = 1;
    goto LABEL_18;
  }
  v10 = v22;
  if (*(_QWORD *)(v22 + 16) && (v11 = sub_10009ABAC(0xD00000000000001ELL, 0x80000001003AFC20), (v12 & 1) != 0))
  {
    sub_10000684C(*(_QWORD *)(v10 + 56) + 32 * v11, (uint64_t)&v20);
  }
  else
  {
    v20 = 0u;
    v21 = 0u;
  }
  swift_bridgeObjectRelease(v10);
  if (!*((_QWORD *)&v21 + 1))
  {
LABEL_15:
    v17 = &v20;
LABEL_16:
    result = sub_100008758((uint64_t)v17, &qword_100491B90);
    goto LABEL_17;
  }
  v13 = sub_100005574((uint64_t *)&unk_100490B50);
  result = swift_dynamicCast(&v22, &v20, (char *)&type metadata for Any + 8, v13, 6);
  if ((result & 1) == 0)
    goto LABEL_17;
  v14 = v22;
  v19[0] = 0xD000000000000021;
  v19[1] = 0x80000001003AFC40;
  AnyHashable.init<A>(_:)(&v20, v19, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v14 + 16) && (v15 = sub_1000A580C((uint64_t)&v20), (v16 & 1) != 0))
  {
    sub_10000684C(*(_QWORD *)(v14 + 56) + 32 * v15, (uint64_t)&v22);
  }
  else
  {
    v22 = 0u;
    v23 = 0u;
  }
  swift_bridgeObjectRelease(v14);
  sub_10009B178((uint64_t)&v20);
  if (!*((_QWORD *)&v23 + 1))
  {
    v17 = &v22;
    goto LABEL_16;
  }
  result = swift_dynamicCast(a2, &v22, (char *)&type metadata for Any + 8, &type metadata for Double, 6);
  if ((result & 1) == 0)
    *(_QWORD *)a2 = 0;
  v18 = result ^ 1;
LABEL_18:
  *(_BYTE *)(a2 + 8) = v18;
  return result;
}

uint64_t BackgroundFetchManager.deinit()
{
  uint64_t v0;

  return v0;
}

unint64_t sub_1000BD030()
{
  id v0;
  NSString v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "dictionaryForKey:", v1);

  if (v2)
  {
    v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    v4 = sub_1001F4178(v3);
    swift_bridgeObjectRelease(v3);
    if (v4)
      return v4;
  }
  else
  {

  }
  v6 = sub_100099248((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(0);
  return v6;
}

uint64_t _s9MusicCore22BackgroundFetchManagerCy10Foundation3URLVSgSScis_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  Class isa;
  NSString v17;
  uint64_t v19;
  uint64_t inited;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  id v27;
  Class v28;
  NSString v29;
  _BYTE v31[128];
  unint64_t v32;

  v6 = sub_100005574(&qword_10048D510);
  __chkstk_darwin(v6);
  v8 = &v31[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v31[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10000DCF8(a1, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_100008758((uint64_t)v8, &qword_10048D510);
    v32 = sub_1000BD030();
    v13 = sub_100180D7C(a2, a3);
    swift_bridgeObjectRelease(v13);
    v14 = v32;
    v15 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    sub_100005574((uint64_t *)&unk_100493380);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v14);
    v17 = String._bridgeToObjectiveC()();
    objc_msgSend(v15, "setObject:forKey:", isa, v17);

    sub_100008758(a1, &qword_10048D510);
    return swift_bridgeObjectRelease(a3);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    v19 = sub_100005574(&qword_1004967B0);
    inited = swift_initStackObject(v19, v31);
    *(_OWORD *)(inited + 16) = xmmword_100384A60;
    *(_QWORD *)(inited + 32) = 7107189;
    *(_QWORD *)(inited + 40) = 0xE300000000000000;
    *(_QWORD *)(inited + 48) = URL.absoluteString.getter();
    *(_QWORD *)(inited + 56) = v21;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 80) = 1702125924;
    *(_QWORD *)(inited + 88) = 0xE400000000000000;
    *(_QWORD *)(inited + 120) = type metadata accessor for Date(0);
    v22 = sub_1000207D4((_QWORD *)(inited + 96));
    Date.init()(v22);
    v23 = sub_100098D5C(inited);
    v24 = sub_1000BD030();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v24);
    v32 = v24;
    sub_10009A0E0(v23, a2, a3, isUniquelyReferenced_nonNull_native);
    v26 = v32;
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(0x8000000000000000);
    v27 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    sub_100005574((uint64_t *)&unk_100493380);
    v28 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v26);
    v29 = String._bridgeToObjectiveC()();
    objc_msgSend(v27, "setObject:forKey:", v28, v29);

    sub_100008758(a1, &qword_10048D510);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
}

void _s9MusicCore22BackgroundFetchManagerC14updateURLCache5queue20onDidReceiveResponse10completionySo012OS_dispatch_H0C_ySo13ICURLResponseCSg_s5Error_pSgtcSgySaysAM_pGctF_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  dispatch_group_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int64_t v37;
  unint64_t v38;
  int64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void (**v48)(dispatch_group_t, uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  double v53;
  char *v54;
  Swift::String v55;
  Swift::String v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  id v59;
  void *v60;
  id v61;
  uint64_t v62;
  void *v63;
  __n128 v64;
  id v65;
  Class isa;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  NSObject *v74;
  double v75;
  void *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  char *v82;
  __n128 v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  dispatch_group_t v89;
  _QWORD *v90;
  _QWORD *v91;
  char *v92;
  void (*v93)(char *, uint64_t);
  id v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  dispatch_group_t v117;
  char *v118;
  dispatch_group_t v119;
  uint64_t v120;
  void (**v121)(dispatch_group_t, uint64_t, uint64_t, uint64_t);
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  int64_t v126;
  __int128 aBlock;
  __int128 v128;
  void *v129;
  _QWORD *v130;
  _QWORD v131[2];

  v102 = a5;
  v101 = a4;
  v98 = a3;
  v97 = a2;
  v105 = a1;
  v109 = type metadata accessor for DispatchWorkItemFlags(0);
  v108 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v107 = (char *)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = type metadata accessor for DispatchQoS(0);
  v104 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106);
  v103 = (char *)&v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = type metadata accessor for URLRequest(0);
  v111 = *(_QWORD *)(v113 - 8);
  v7 = __chkstk_darwin(v113);
  v112 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v91 - v9;
  v11 = sub_100005574(&qword_100490730);
  __chkstk_darwin(v11);
  v13 = (dispatch_group_t)((char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for Date(0);
  v121 = *(void (***)(dispatch_group_t, uint64_t, uint64_t, uint64_t))(v14 - 8);
  v122 = v14;
  v15 = __chkstk_darwin(v14);
  v114 = (char *)&v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v91 - v17;
  v19 = sub_100005574(&qword_10048D510);
  __chkstk_darwin(v19);
  v21 = (char *)&v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = type metadata accessor for URL(0);
  v22 = *(_QWORD *)(v124 - 8);
  v23 = __chkstk_darwin(v124);
  v100 = (char *)&v91 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v123 = (char *)&v91 - v25;
  v117 = dispatch_group_create();
  v26 = type metadata accessor for UnfairLock();
  swift_allocObject(v26, 24, 7);
  v115 = UnfairLock.init()();
  v116 = swift_allocObject(&unk_100448C58, 24, 7);
  *(_QWORD *)(v116 + 16) = _swiftEmptyArrayStorage;
  if (qword_10048C6F0 != -1)
LABEL_45:
    swift_once(&qword_10048C6F0, sub_1000BCD0C);
  v27 = *(double *)&qword_100490C10;
  v28 = sub_1000BD030();
  v29 = v28;
  v30 = 0;
  v31 = v28 + 64;
  v32 = 1 << *(_BYTE *)(v28 + 32);
  v33 = -1;
  if (v32 < 64)
    v33 = ~(-1 << v32);
  v34 = v33 & *(_QWORD *)(v28 + 64);
  v126 = (unint64_t)(v32 + 63) >> 6;
  v125 = (char *)&type metadata for Any + 8;
  v99 = (void *)0x80000001003AFBB0;
  v119 = v13;
  v118 = v18;
  v110 = v21;
  v120 = v22;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          do
          {
            if (v34)
            {
              v35 = __clz(__rbit64(v34));
              v34 &= v34 - 1;
              v36 = v35 | (v30 << 6);
            }
            else
            {
              v37 = v30 + 1;
              if (__OFADD__(v30, 1))
              {
                __break(1u);
LABEL_44:
                __break(1u);
                goto LABEL_45;
              }
              if (v37 >= v126)
                goto LABEL_42;
              v38 = *(_QWORD *)(v31 + 8 * v37);
              ++v30;
              if (!v38)
              {
                v30 = v37 + 1;
                if (v37 + 1 >= v126)
                  goto LABEL_42;
                v38 = *(_QWORD *)(v31 + 8 * v30);
                if (!v38)
                {
                  v30 = v37 + 2;
                  if (v37 + 2 >= v126)
                    goto LABEL_42;
                  v38 = *(_QWORD *)(v31 + 8 * v30);
                  if (!v38)
                  {
                    v30 = v37 + 3;
                    if (v37 + 3 >= v126)
                      goto LABEL_42;
                    v38 = *(_QWORD *)(v31 + 8 * v30);
                    if (!v38)
                    {
                      v39 = v37 + 4;
                      if (v39 >= v126)
                      {
LABEL_42:
                        swift_release(v29);
                        v77 = (_QWORD *)swift_allocObject(&unk_100448CF8, 48, 7);
                        v78 = v115;
                        v79 = v116;
                        v77[2] = v115;
                        v77[3] = v79;
                        v80 = v102;
                        v77[4] = v101;
                        v77[5] = v80;
                        v129 = sub_1000BE0E0;
                        v130 = v77;
                        *(_QWORD *)&aBlock = _NSConcreteStackBlock;
                        *((_QWORD *)&aBlock + 1) = 1107296256;
                        *(_QWORD *)&v128 = sub_1000BED80;
                        *((_QWORD *)&v128 + 1) = &unk_100448D10;
                        v81 = _Block_copy(&aBlock);
                        swift_retain(v78);
                        swift_retain(v79);
                        swift_retain(v80);
                        v82 = v103;
                        static DispatchQoS.unspecified.getter(v83);
                        v131[0] = _swiftEmptyArrayStorage;
                        v84 = sub_1000BE0EC();
                        v85 = sub_100005574(&qword_100490838);
                        v86 = sub_1000B0348();
                        v87 = v107;
                        v88 = v109;
                        dispatch thunk of SetAlgebra.init<A>(_:)(v131, v85, v86, v109, v84);
                        v89 = v117;
                        OS_dispatch_group.notify(qos:flags:queue:execute:)(v82, v87, v105, v81);
                        _Block_release(v81);
                        swift_release(v78);

                        (*(void (**)(char *, uint64_t))(v108 + 8))(v87, v88);
                        (*(void (**)(char *, uint64_t))(v104 + 8))(v82, v106);
                        v90 = v130;
                        swift_release(v79);
                        swift_release(v90);
                        return;
                      }
                      v38 = *(_QWORD *)(v31 + 8 * v39);
                      if (!v38)
                      {
                        while (1)
                        {
                          v30 = v39 + 1;
                          if (__OFADD__(v39, 1))
                            goto LABEL_44;
                          if (v30 >= v126)
                            goto LABEL_42;
                          v38 = *(_QWORD *)(v31 + 8 * v30);
                          ++v39;
                          if (v38)
                            goto LABEL_23;
                        }
                      }
                      v30 = v39;
                    }
                  }
                }
              }
LABEL_23:
              v34 = (v38 - 1) & v38;
              v36 = __clz(__rbit64(v38)) + (v30 << 6);
            }
            v40 = *(_QWORD *)(*(_QWORD *)(v29 + 56) + 8 * v36);
          }
          while (!*(_QWORD *)(v40 + 16));
          swift_bridgeObjectRetain();
          v41 = sub_10009ABAC(7107189, 0xE300000000000000);
          if ((v42 & 1) != 0)
          {
            sub_10000684C(*(_QWORD *)(v40 + 56) + 32 * v41, (uint64_t)&aBlock);
            if ((swift_dynamicCast(v131, &aBlock, v125, &type metadata for String, 6) & 1) != 0)
              break;
          }
          swift_bridgeObjectRelease();
        }
        URL.init(string:)(v131[0], v131[1]);
        swift_bridgeObjectRelease();
        v18 = (char *)v124;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v21, 1, v124) != 1)
          break;
        swift_bridgeObjectRelease();
        sub_100008758((uint64_t)v21, &qword_10048D510);
      }
      (*(void (**)(char *, char *, char *))(v22 + 32))(v123, v21, v18);
      if (*(_QWORD *)(v40 + 16) && (v43 = sub_10009ABAC(1702125924, 0xE400000000000000), (v44 & 1) != 0))
      {
        sub_10000684C(*(_QWORD *)(v40 + 56) + 32 * v43, (uint64_t)&aBlock);
      }
      else
      {
        aBlock = 0u;
        v128 = 0u;
      }
      v13 = (dispatch_group_t)v123;
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v128 + 1))
        break;
      sub_100008758((uint64_t)&aBlock, &qword_100491B90);
      v45 = (uint64_t)v119;
      v121[7](v119, 1, 1, v122);
LABEL_39:
      v22 = v120;
      (*(void (**)(dispatch_group_t, uint64_t))(v120 + 8))(v13, v124);
      sub_100008758(v45, &qword_100490730);
    }
    v45 = (uint64_t)v119;
    v46 = v122;
    v47 = swift_dynamicCast(v119, &aBlock, (char *)&type metadata for Any + 8, v122, 6);
    v18 = (char *)v121;
    v121[7]((dispatch_group_t)v45, v47 ^ 1u, 1, v46);
    if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v18 + 6))(v45, 1, v46) == 1)
      goto LABEL_39;
    v48 = v121;
    v49 = v122;
    v50 = v118;
    v51 = ((uint64_t (*)(char *, uint64_t, uint64_t))v121[4])(v118, v45, v122);
    v52 = v114;
    Date.init()(v51);
    v53 = Date.timeIntervalSince(_:)(v50);
    v18 = (char *)v48[1];
    ((void (*)(char *, uint64_t))v18)(v52, v49);
    if (v53 < v27)
      break;
    ((void (*)(char *, uint64_t))v18)(v50, v49);
    v22 = v120;
    (*(void (**)(dispatch_group_t, uint64_t))(v120 + 8))(v13, v124);
LABEL_41:
    v21 = v110;
  }
  v96 = v18;
  v54 = v100;
  (*(void (**)(char *, dispatch_group_t, uint64_t))(v120 + 16))(v100, v13, v124);
  URLRequest.init(url:cachePolicy:timeoutInterval:)(v54, 0, 60.0);
  v55._countAndFlagsBits = 1702195828;
  v55._object = (void *)0xE400000000000000;
  v56._countAndFlagsBits = 0xD00000000000001ALL;
  v56._object = v99;
  URLRequest.addValue(_:forHTTPHeaderField:)(v55, v56);
  v57 = *(void (**)(char *, char *, uint64_t))(v111 + 16);
  v95 = v10;
  v58 = v113;
  v57(v112, v10, v113);
  v59 = objc_allocWithZone((Class)ICMusicKitRequestContext);
  v129 = sub_1000F514C;
  v130 = 0;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v128 = sub_1000E776C;
  *((_QWORD *)&v128 + 1) = &unk_100448C70;
  v60 = _Block_copy(&aBlock);
  v61 = objc_msgSend(v59, "initWithBlock:", v60);
  v62 = v58;
  v63 = v61;
  _Block_release(v60);
  v64 = swift_release(v130);
  if ((swift_isEscapingClosureAtFileLocation(0, "", 0, 0, 0, 1, v64) & 1) == 0)
  {
    v65 = objc_allocWithZone((Class)ICMusicKitURLRequest);
    isa = URLRequest._bridgeToObjectiveC()().super.isa;
    v94 = objc_msgSend(v65, "initWithURLRequest:requestContext:", isa, v63);

    v93 = *(void (**)(char *, uint64_t))(v111 + 8);
    v93(v112, v62);
    v13 = v117;
    dispatch_group_enter(v117);
    v92 = (char *)objc_msgSend((id)objc_opt_self(ICURLSessionManager), "highPrioritySession");
    v67 = (_QWORD *)swift_allocObject(&unk_100448CA8, 56, 7);
    v68 = v97;
    v69 = v98;
    v67[2] = v97;
    v67[3] = v69;
    v70 = v115;
    v71 = v116;
    v67[4] = v115;
    v67[5] = v71;
    v67[6] = v13;
    v129 = sub_1000BE09C;
    v130 = v67;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v128 = sub_1000AC9C8;
    *((_QWORD *)&v128 + 1) = &unk_100448CC0;
    v72 = _Block_copy(&aBlock);
    v91 = v130;
    sub_10003A434(v68, v69);
    v73 = v70;
    v22 = v120;
    swift_retain(v73);
    swift_retain(v71);
    v74 = v13;
    *(_QWORD *)&v75 = swift_release(v91).n128_u64[0];
    v18 = v92;
    v76 = v94;
    objc_msgSend(v92, "enqueueDataRequest:withCompletionHandler:", v94, v72, v75);
    _Block_release(v72);

    v10 = v95;
    v93(v95, v113);
    ((void (*)(char *, uint64_t))v96)(v118, v122);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v123, v124);
    goto LABEL_41;
  }
  __break(1u);
}

uint64_t type metadata accessor for BackgroundFetchManager()
{
  return objc_opt_self(_TtC9MusicCore22BackgroundFetchManager);
}

uint64_t sub_1000BE01C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000BE040(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000BE050(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000BE058()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));

  return swift_deallocObject(v0, 56, 7);
}

void sub_1000BE09C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000BCB04(a1, a2, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(dispatch_group_t *)(v2 + 48));
}

uint64_t sub_1000BE0AC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000BE0E0()
{
  uint64_t v0;

  return sub_1000BCC90(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)())(v0 + 32));
}

unint64_t sub_1000BE0EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1004921B0;
  if (!qword_1004921B0)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_1004921B0);
  }
  return result;
}

uint64_t sub_1000BE134@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  _BYTE v5[24];

  v3 = *(_QWORD **)(v1 + 16);
  swift_beginAccess(v3, v5, 0, 0);
  *a1 = *v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000BE18C()
{
  uint64_t v0;

  return sub_1000BCBC0(*(uint64_t **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1000BE1B4(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  __asm { BR              X10 }
}

Swift::Int sub_1000BE214()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, v0 + 16, 0x80000001003ACA00);
  swift_bridgeObjectRelease(0x80000001003ACA00);
  return Hasher._finalize()();
}

Swift::Int sub_1000BE284(char a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  if ((a1 & 1) != 0)
    v2 = 0xD000000000000018;
  else
    v2 = 0xD000000000000019;
  if ((a1 & 1) != 0)
    v3 = 0x80000001003ACAA0;
  else
    v3 = 0x80000001003ACA80;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_1000BE308(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  __asm { BR              X10 }
}

Swift::Int sub_1000BE364()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, v0 + 11, 0x80000001003ACAF0);
  swift_bridgeObjectRelease(0x80000001003ACAF0);
  return Hasher._finalize()();
}

void sub_1000BE3D4(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  __asm { BR              X10 }
}

Swift::Int sub_1000BE424()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6F4E6E657473696CLL, 0xE900000000000077);
  swift_bridgeObjectRelease(0xE900000000000077);
  return Hasher._finalize()();
}

Swift::Int sub_1000BE4B8(char a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  if ((a1 & 1) != 0)
    v2 = 0xD00000000000001CLL;
  else
    v2 = 0xD00000000000001DLL;
  if ((a1 & 1) != 0)
    v3 = 0x80000001003ACD60;
  else
    v3 = 0x80000001003ACD40;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_1000BE53C(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  __asm { BR              X10 }
}

Swift::Int sub_1000BE590()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6E776F6E6B6E75, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

Swift::Int sub_1000BE608(char a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  if ((a1 & 1) != 0)
    v2 = 0xD000000000000015;
  else
    v2 = 0xD000000000000019;
  if ((a1 & 1) != 0)
    v3 = 0x80000001003ACF20;
  else
    v3 = 0x80000001003ACF00;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_1000BE68C(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1000BE6D8(uint64_t a1)
{
  uint64_t v1;

  String.hash(into:)(a1, v1 + 16, 0x80000001003ACA00);
  return swift_bridgeObjectRelease(0x80000001003ACA00);
}

void sub_1000BE730(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1000BE778(uint64_t a1)
{
  uint64_t v1;

  String.hash(into:)(a1, v1 + 11, 0x80000001003ACAF0);
  return swift_bridgeObjectRelease(0x80000001003ACAF0);
}

void sub_1000BE7D0(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_1000BE81C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6F4E6E657473696CLL, 0xE900000000000077);
  swift_bridgeObjectRelease(0xE900000000000077);
  return Hasher._finalize()();
}

Swift::Int sub_1000BE8B0(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  if ((a2 & 1) != 0)
    v3 = 0xD000000000000015;
  else
    v3 = 0xD000000000000019;
  if ((a2 & 1) != 0)
    v4 = 0x80000001003ACF20;
  else
    v4 = 0x80000001003ACF00;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_1000BE930(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_1000BE980()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6E776F6E6B6E75, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

void sub_1000BE9F8(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_1000BEA44()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x756F795F726F66, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

Swift::Int sub_1000BEAEC(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  if ((a2 & 1) != 0)
    v3 = 0xD000000000000018;
  else
    v3 = 0xD000000000000019;
  if ((a2 & 1) != 0)
    v4 = 0x80000001003ACAA0;
  else
    v4 = 0x80000001003ACA80;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_1000BEB6C(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_1000BEBC4()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, v0 + 11, 0x80000001003ACAF0);
  swift_bridgeObjectRelease(0x80000001003ACAF0);
  return Hasher._finalize()();
}

void sub_1000BEC34(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_1000BEC90()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, v0 + 16, 0x80000001003ACA00);
  swift_bridgeObjectRelease(0x80000001003ACA00);
  return Hasher._finalize()();
}

Swift::Int sub_1000BED00(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  if ((a2 & 1) != 0)
    v3 = 0xD00000000000001CLL;
  else
    v3 = 0xD00000000000001DLL;
  if ((a2 & 1) != 0)
    v4 = 0x80000001003ACD60;
  else
    v4 = 0x80000001003ACD40;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000BED80(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

id sub_1000BEDAC()
{
  uint64_t refreshed;
  _QWORD *v1;
  id result;

  refreshed = type metadata accessor for BackgroundRefreshController();
  v1 = (_QWORD *)swift_allocObject(refreshed, 40, 7);
  v1[2] = 0;
  v1[3] = 0;
  result = objc_msgSend(objc_allocWithZone((Class)ICCloudClient), "init");
  v1[4] = result;
  static BackgroundRefreshController.shared = (uint64_t)v1;
  return result;
}

uint64_t *BackgroundRefreshController.shared.unsafeMutableAddressor()
{
  if (qword_10048C6F8 != -1)
    swift_once(&qword_10048C6F8, sub_1000BEDAC);
  return &static BackgroundRefreshController.shared;
}

uint64_t static BackgroundRefreshController.shared.getter()
{
  if (qword_10048C6F8 != -1)
    swift_once(&qword_10048C6F8, sub_1000BEDAC);
  return swift_retain(static BackgroundRefreshController.shared);
}

uint64_t CompoundRequestResponseInvalidation.onInvalidation.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 16, v3, 0, 0);
  v1 = *(_QWORD *)(v0 + 16);
  sub_10003A434(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t CompoundRequestResponseInvalidation.onInvalidation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  swift_beginAccess(v2 + 16, v8, 1, 0);
  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return sub_10003A5C8(v5, v6);
}

uint64_t (*BackgroundRefreshController.performanceMetricsRecorder.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 16, a1, 33, 0);
  return j__swift_endAccess;
}

Swift::Void __swiftcall BackgroundRefreshController.registerAllTasks()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  void *v4;
  void *v5;
  id v6;
  NSString v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  NSString v13;
  _QWORD aBlock[6];

  v0 = static os_log_type_t.default.getter();
  v1 = sub_100005574(&qword_10048F840);
  v2 = swift_allocObject(v1, 72, 7);
  *(_OWORD *)(v2 + 16) = xmmword_100384A80;
  *(_QWORD *)(v2 + 56) = &type metadata for String;
  v3 = sub_100081EF4();
  *(_QWORD *)(v2 + 64) = v3;
  *(_QWORD *)(v2 + 32) = 0xD00000000000002FLL;
  *(_QWORD *)(v2 + 40) = 0x80000001003AFCA0;
  sub_1000087DC(0, (unint64_t *)&qword_1004904C0, OS_os_log_ptr);
  v4 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)(v0, &_mh_execute_header, v4, "BackgroundRefreshController: REGISTER TASK: %@", 46, 2, v2);
  swift_bridgeObjectRelease();

  v5 = (void *)objc_opt_self(BGTaskScheduler);
  v6 = objc_msgSend(v5, "sharedScheduler");
  v7 = String._bridgeToObjectiveC()();
  aBlock[4] = sub_1000BF1D0;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100093320;
  aBlock[3] = &unk_100448D38;
  v8 = _Block_copy(aBlock);
  objc_msgSend(v6, "registerForTaskWithIdentifier:usingQueue:launchHandler:", v7, 0, v8);
  _Block_release(v8);

  v9 = static os_log_type_t.default.getter();
  v10 = swift_allocObject(v1, 72, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100384A80;
  *(_QWORD *)(v10 + 56) = &type metadata for String;
  *(_QWORD *)(v10 + 64) = v3;
  *(_QWORD *)(v10 + 32) = 0xD000000000000041;
  *(_QWORD *)(v10 + 40) = 0x80000001003AFD30;
  v11 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v11, "BackgroundRefreshController: CANCEL DEPRECATED TASK: %@", 55, 2, v10);
  swift_bridgeObjectRelease();

  v12 = objc_msgSend(v5, "sharedScheduler");
  v13 = String._bridgeToObjectiveC()();
  objc_msgSend(v12, "cancelTaskRequestWithIdentifier:", v13);

}

double sub_1000BF1D0(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  if (qword_10048C6F8 != -1)
    swift_once(&qword_10048C6F8, sub_1000BEDAC);
  v2 = objc_opt_self(BGAppRefreshTask);
  v3 = (void *)swift_dynamicCastObjCClassUnconditional(a1, v2, 0, 0, 0);
  return sub_1000BF244(v3);
}

double sub_1000BF244(void *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  double result;

  v3 = *v1;
  v4 = static os_log_type_t.default.getter(a1);
  v5 = sub_100005574(&qword_10048F840);
  v6 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100384A80;
  *(_QWORD *)(v6 + 56) = &type metadata for String;
  *(_QWORD *)(v6 + 64) = sub_100081EF4();
  *(_QWORD *)(v6 + 32) = 0xD00000000000002FLL;
  *(_QWORD *)(v6 + 40) = 0x80000001003AFCA0;
  sub_1000087DC(0, (unint64_t *)&qword_1004904C0, OS_os_log_ptr);
  v7 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v7, "BackgroundRefreshController: EXECUTING REFRESH SUBTASKS: %@", 59, 2, v6);
  swift_bridgeObjectRelease();

  v8 = swift_allocObject(&unk_100448ED0, 32, 7);
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = v3;
  v9 = a1;
  sub_1000C0534((uint64_t)sub_1000C285C, v8);
  *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  return result;
}

uint64_t sub_1000BF368(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000BF378(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

Swift::Void __swiftcall BackgroundRefreshController.scheduleAllTasks()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  char *v38;
  char *v39;
  double v40;
  char v41;
  id v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  char *v58;
  char v60;
  id v61;
  unint64_t v62;
  unint64_t v63;
  char v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  id v72;
  NSString v73;
  id v74;
  id v75;
  Class isa;
  uint64_t v77;
  void *v78;
  id v79;
  char *v80;
  __n128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t *v103;
  id v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  void (*v110)(char *, uint64_t, uint64_t);
  _QWORD *v111;
  __int128 aBlock;
  uint64_t (*v113)(uint64_t);
  void *v114;
  void (*v115)();
  uint64_t v116;

  v92 = *v0;
  v98 = type metadata accessor for DispatchWorkItemFlags(0);
  v97 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v96 = (char *)&v89 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for DispatchQoS(0);
  v94 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v93 = (char *)&v89 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100005574(&qword_100490730);
  v4 = __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v106 = (char *)&v89 - v7;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v99 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v101 = (char *)&v89 - v13;
  v14 = __chkstk_darwin(v12);
  v108 = (char *)&v89 - v15;
  v16 = __chkstk_darwin(v14);
  v18 = (uint64_t)&v89 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v89 - v20;
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v89 - v23;
  v25 = __chkstk_darwin(v22);
  v107 = (char *)&v89 - v26;
  v27 = __chkstk_darwin(v25);
  v29 = (char *)&v89 - v28;
  __chkstk_darwin(v27);
  v31 = (uint64_t)&v89 - v30;
  if (qword_10048C708 != -1)
LABEL_47:
    swift_once(&qword_10048C708, sub_1000C1E1C);
  v32 = (char *)off_100490CC8;
  ((void (*)(void))static Date.distantFuture.getter)();
  v110 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v110(v29, v31, v8);
  v33 = (char *)*((_QWORD *)v32 + 2);
  v109 = v9;
  v100 = v33;
  if (v33)
  {
    v90 = v31;
    v105 = v18;
    v103 = v6;
    v104 = (id)objc_opt_self(NSUserDefaults);
    swift_bridgeObjectRetain();
    v91 = v32;
    v34 = v32 + 49;
    v102 = (char *)&type metadata for Any + 8;
    v35 = v33;
    do
    {
      v40 = *(double *)(v34 - 9);
      v41 = *v34;
      v42 = objc_msgSend(v104, "standardUserDefaults");
      LOBYTE(v111) = v41;
      v43 = sub_1000C1F14();
      v44 = sub_10000D478();
      NSUserDefaults.subscript.getter((uint64_t)&type metadata for BackgroundTaskConfiguration.UserDefaultsKey, v43, v44, &aBlock);

      if (v114)
      {
        v45 = (uint64_t)v106;
        v46 = swift_dynamicCast(v106, &aBlock, v102, v8, 6);
        v47 = v109;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v109 + 56))(v45, v46 ^ 1u, 1, v8);
      }
      else
      {
        sub_100008758((uint64_t)&aBlock, &qword_100491B90);
        v47 = v109;
        v45 = (uint64_t)v106;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v109 + 56))(v106, 1, 1, v8);
      }
      v48 = (uint64_t)v103;
      sub_1000C1F58(v45, (uint64_t)v103);
      v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v48, 1, v8);
      v50 = v105;
      if ((_DWORD)v49 == 1)
      {
        Date.init()(v49);
        sub_100008758(v48, &qword_100490730);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 32))(v105, v48, v8);
      }
      sub_100008758(v45, &qword_100490730);
      static Date.+ infix(_:_:)(v50, v40);
      v51 = *(uint64_t (**)(uint64_t, uint64_t))(v47 + 8);
      v52 = v51(v50, v8);
      v53 = v108;
      Date.init()(v52);
      if ((static Date.< infix(_:_:)(v21, v53) & 1) != 0)
      {
        v54 = v101;
        static Date.+ infix(_:_:)(v53, 3600.0);
        v51((uint64_t)v53, v8);
        v51((uint64_t)v21, v8);
        v36 = *(void (**)(char *, char *, uint64_t))(v47 + 32);
        v36(v21, v54, v8);
      }
      else
      {
        v51((uint64_t)v53, v8);
        v36 = *(void (**)(char *, char *, uint64_t))(v47 + 32);
      }
      v34 += 24;
      v36(v24, v21, v8);
      v37 = sub_100006924(&qword_100490D08, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      if ((dispatch thunk of static Comparable.< infix(_:_:)(v24, v29, v8, v37) & 1) != 0)
        v38 = v24;
      else
        v38 = v29;
      v39 = v107;
      v110(v107, (uint64_t)v38, v8);
      v51((uint64_t)v24, v8);
      v51((uint64_t)v29, v8);
      v36(v29, v39, v8);
      --v35;
    }
    while (v35);
    v32 = v91;
    swift_bridgeObjectRelease();
    v9 = v109;
    v33 = v100;
    v31 = v90;
  }
  v55 = swift_allocBox(v8);
  v56 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v108 = v57;
  v56(v57, v29, v8);
  v58 = *(char **)(v9 + 8);
  ((void (*)(uint64_t, uint64_t))v58)(v31, v8);
  if (!v33)
  {
    v65 = v101;
    v66 = v99;
    goto LABEL_36;
  }
  v29 = v33;
  v106 = v58;
  v107 = (char *)v55;
  v24 = v32;
  swift_bridgeObjectRetain();
  LOBYTE(v9) = 0;
  v31 = 50;
  v18 = 1;
  v21 = (char *)&type metadata for Bool;
  v6 = &qword_100491B90;
  while (1)
  {
    if ((v9 & 1) != 0)
    {
      if (v29 == (char *)v18)
      {
        v67 = swift_bridgeObjectRelease();
LABEL_33:
        v65 = v101;
        Date.init()(v67);
        v68 = v108;
        (*(void (**)(char *, char *, uint64_t))(v109 + 40))(v108, v65, v8);
        LOBYTE(v33) = 1;
        v66 = v99;
        v58 = v106;
        v55 = (uint64_t)v107;
        goto LABEL_37;
      }
      v9 = 1;
      goto LABEL_21;
    }
    v60 = v32[v31];
    v61 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    LOBYTE(v111) = v60;
    v62 = sub_1000C1F14();
    v63 = sub_10000D478();
    NSUserDefaults.subscript.getter((uint64_t)&type metadata for BackgroundTaskConfiguration.UserDefaultsKey, v62, v63, &aBlock);

    if (!v114)
    {
      sub_100008758((uint64_t)&aBlock, &qword_100491B90);
      v29 = v100;
      if (v100 == (char *)v18)
      {
LABEL_34:
        swift_bridgeObjectRelease();
        goto LABEL_35;
      }
      goto LABEL_30;
    }
    v64 = swift_dynamicCast(&v111, &aBlock, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
    v29 = v100;
    if ((v64 & 1) == 0)
    {
      if (v100 == (char *)v18)
        goto LABEL_34;
LABEL_30:
      v9 = 0;
      goto LABEL_21;
    }
    v9 = v111;
    if (v100 == (char *)v18)
      break;
LABEL_21:
    v31 += 24;
    if (__OFADD__(v18++, 1))
    {
      __break(1u);
      goto LABEL_47;
    }
  }
  v67 = swift_bridgeObjectRelease();
  if ((_DWORD)v9)
    goto LABEL_33;
LABEL_35:
  LOBYTE(v33) = 0;
  v65 = v101;
  v66 = v99;
  v58 = v106;
  v55 = (uint64_t)v107;
LABEL_36:
  v68 = v108;
LABEL_37:
  v69 = ((uint64_t (*)(char *, char *, uint64_t))v110)(v65, v68, v8);
  static Date.distantFuture.getter(v69);
  v70 = static Date.< infix(_:_:)(v65, v66);
  ((void (*)(char *, uint64_t))v58)(v66, v8);
  ((void (*)(char *, uint64_t))v58)(v65, v8);
  if ((v33 & 1) != 0 || (v70 & 1) != 0)
  {
    v72 = objc_allocWithZone((Class)BGAppRefreshTaskRequest);
    v73 = String._bridgeToObjectiveC()();
    v74 = objc_msgSend(v72, "initWithIdentifier:", v73);

    v110(v65, (uint64_t)v68, v8);
    v75 = v74;
    isa = Date._bridgeToObjectiveC()().super.isa;
    ((void (*)(char *, uint64_t))v58)(v65, v8);
    objc_msgSend(v75, "setEarliestBeginDate:", isa);

    if (qword_10048C700 != -1)
      swift_once(&qword_10048C700, sub_1000C1C00);
    v77 = swift_allocObject(&unk_100448D70, 48, 7);
    *(_QWORD *)(v77 + 16) = v75;
    *(_QWORD *)(v77 + 24) = v55;
    *(_BYTE *)(v77 + 32) = (_BYTE)v33;
    *(_QWORD *)(v77 + 40) = v92;
    v115 = sub_1000C1FCC;
    v116 = v77;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v113 = sub_1000BED80;
    v114 = &unk_100448D88;
    v78 = _Block_copy(&aBlock);
    v79 = v75;
    swift_retain(v55);
    v80 = v93;
    static DispatchQoS.unspecified.getter(v81);
    v111 = _swiftEmptyArrayStorage;
    v82 = sub_100006924((unint64_t *)&qword_1004921B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v83 = sub_100005574(&qword_100490838);
    v84 = sub_1000C27F8((unint64_t *)&qword_1004921C0, &qword_100490838);
    v85 = v96;
    v86 = v83;
    v87 = v98;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v111, v86, v84, v98, v82);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v80, v85, v78);
    _Block_release(v78);

    (*(void (**)(char *, uint64_t))(v97 + 8))(v85, v87);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v80, v95);
    v88 = v116;
    swift_release(v55);
    v71 = v88;
  }
  else
  {
    v71 = v55;
  }
  swift_release(v71);
}

void sub_1000BFD84(void *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __n128 v17;
  uint64_t v18;
  double v19;
  void *v20;
  void *v21;
  id v22;
  unsigned int v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  NSString v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  id v48;
  _BYTE v49[24];

  v47 = a3;
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = swift_projectBox(a2);
  v10 = static os_log_type_t.default.getter();
  v46 = sub_100005574(&qword_10048F840);
  v11 = swift_allocObject(v46, 112, 7);
  v45 = xmmword_100384A60;
  *(_OWORD *)(v11 + 16) = xmmword_100384A60;
  v12 = objc_msgSend(a1, "identifier");
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  *(_QWORD *)(v11 + 56) = &type metadata for String;
  v16 = sub_100081EF4();
  *(_QWORD *)(v11 + 64) = v16;
  *(_QWORD *)(v11 + 32) = v13;
  *(_QWORD *)(v11 + 40) = v15;
  v17 = swift_beginAccess(v9, v49, 0, 0);
  v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v8, v9, v5, v17);
  v19 = Date.timeIntervalSince1970.getter(v18);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if ((~*(_QWORD *)&v19 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v19 <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  if (v19 >= 9.22337204e18)
    goto LABEL_12;
  *(_QWORD *)(v11 + 96) = &type metadata for Int;
  *(_QWORD *)(v11 + 104) = &protocol witness table for Int;
  *(_QWORD *)(v11 + 72) = (uint64_t)v19;
  sub_1000087DC(0, (unint64_t *)&qword_1004904C0, OS_os_log_ptr);
  v20 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v20, "BackgroundRefreshController: SCHEDULING TASK: %@ EARLIEST BEGIN DATE %{time_t}d", 79, 2, v11);
  swift_bridgeObjectRelease();

  v21 = (void *)objc_opt_self(BGTaskScheduler);
  v22 = objc_msgSend(v21, "sharedScheduler");
  v48 = 0;
  v23 = objc_msgSend(v22, "submitTaskRequest:error:", a1, &v48);

  v24 = v48;
  if (v23)
  {
    v25 = v48;
    if ((v47 & 1) == 0)
      return;
  }
  else
  {
    v26 = v48;
    v27 = (void *)_convertNSErrorToError(_:)(v24);

    v29 = swift_willThrow(v28);
    v30 = static os_log_type_t.error.getter(v29);
    v31 = swift_allocObject(v46, 112, 7);
    *(_OWORD *)(v31 + 16) = v45;
    v32 = objc_msgSend(a1, "identifier");
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v35 = v34;

    *(_QWORD *)(v31 + 56) = &type metadata for String;
    *(_QWORD *)(v31 + 64) = v16;
    *(_QWORD *)(v31 + 32) = v33;
    *(_QWORD *)(v31 + 40) = v35;
    v48 = v27;
    swift_errorRetain(v27);
    v36 = sub_100005574((uint64_t *)&unk_1004911F0);
    v37 = String.init<A>(describing:)(&v48, v36);
    *(_QWORD *)(v31 + 96) = &type metadata for String;
    *(_QWORD *)(v31 + 104) = v16;
    *(_QWORD *)(v31 + 72) = v37;
    *(_QWORD *)(v31 + 80) = v38;
    v39 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v39, "BackgroundRefreshController: SCHEDULING TASK: %@ ERROR %@", 57, 2, v31);
    swift_bridgeObjectRelease();

    swift_errorRelease(v27);
    if ((v47 & 1) == 0)
      return;
  }
  v40 = static os_log_type_t.default.getter();
  v41 = swift_allocObject(v46, 72, 7);
  *(_OWORD *)(v41 + 16) = xmmword_100384A80;
  *(_QWORD *)(v41 + 56) = &type metadata for String;
  *(_QWORD *)(v41 + 64) = v16;
  *(_QWORD *)(v41 + 32) = 0xD00000000000002FLL;
  *(_QWORD *)(v41 + 40) = 0x80000001003AFCA0;
  v42 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v42, "BackgroundRefreshController: FORCING TASK: %@", 45, 2, v41);
  swift_bridgeObjectRelease();

  v43 = objc_msgSend(v21, "sharedScheduler");
  v44 = String._bridgeToObjectiveC()();
  objc_msgSend(v43, "_simulateLaunchForTaskWithIdentifier:", v44);

}

double sub_1000C01EC(char a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  id v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double result;
  uint64_t v21;
  _QWORD *v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10048C700 != -1)
    swift_once(&qword_10048C700, sub_1000C1C00);
  v13 = swift_allocObject(&unk_100449038, 40, 7);
  *(_QWORD *)(v13 + 16) = a2;
  *(_BYTE *)(v13 + 24) = a1 & 1;
  *(_QWORD *)(v13 + 32) = a3;
  aBlock[4] = sub_1000C2A74;
  v24 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000BED80;
  aBlock[3] = &unk_100449050;
  v14 = _Block_copy(aBlock);
  v15 = a2;
  static DispatchQoS.unspecified.getter(v16);
  v22 = _swiftEmptyArrayStorage;
  v17 = sub_100006924((unint64_t *)&qword_1004921B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_100005574(&qword_100490838);
  v19 = sub_1000C27F8((unint64_t *)&qword_1004921C0, &qword_100490838);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v18, v19, v6, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  *(_QWORD *)&result = swift_release(v24).n128_u64[0];
  return result;
}

void sub_1000C040C(void *a1, char a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  id v8;

  if ((a2 & 1) != 0)
    v2 = 1702195828;
  else
    v2 = 0x65736C6166;
  if ((a2 & 1) != 0)
    v3 = 0xE400000000000000;
  else
    v3 = 0xE500000000000000;
  v4 = static os_log_type_t.error.getter(objc_msgSend(a1, "setTaskCompletedWithSuccess:", a2 & 1));
  v5 = sub_100005574(&qword_10048F840);
  v6 = swift_allocObject(v5, 112, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100384A60;
  *(_QWORD *)(v6 + 56) = &type metadata for String;
  v7 = sub_100081EF4();
  *(_QWORD *)(v6 + 32) = 0xD00000000000002FLL;
  *(_QWORD *)(v6 + 40) = 0x80000001003AFCA0;
  *(_QWORD *)(v6 + 96) = &type metadata for String;
  *(_QWORD *)(v6 + 104) = v7;
  *(_QWORD *)(v6 + 64) = v7;
  *(_QWORD *)(v6 + 72) = v2;
  *(_QWORD *)(v6 + 80) = v3;
  sub_1000087DC(0, (unint64_t *)&qword_1004904C0, OS_os_log_ptr);
  v8 = (id)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v8, "BackgroundRefreshController: COMPLETED REFRESH SUBTASKS: %@ SUCCESS: %@", 71, 2, v6);
  swift_bridgeObjectRelease();

}

void sub_1000C0534(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[5];
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  int v35;
  char *v36;
  char *v37;
  unint64_t v38;
  _QWORD aBlock[11];
  unsigned __int8 v40;

  v25[2] = a2;
  v25[1] = a1;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v27 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for DispatchQoS(0);
  v25[4] = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v25[3] = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005574(&qword_100490730);
  v6 = __chkstk_darwin(v5);
  v32 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = type metadata accessor for Date(0);
  v33 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v29 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v37 = (char *)v25 - v12;
  v13 = __chkstk_darwin(v11);
  v36 = (char *)v25 - v14;
  v15 = __chkstk_darwin(v13);
  v31 = (char *)v25 - v16;
  v17 = __chkstk_darwin(v15);
  v30 = (char *)v25 - v18;
  __chkstk_darwin(v17);
  v34 = (char *)v25 - v19;
  if (qword_10048C658 != -1)
    swift_once(&qword_10048C658, sub_1000B3BEC);
  v38 = 0xEA00000000007265;
  v20 = static ApplicationCapabilities.Controller.shared;
  KeyPath = swift_getKeyPath(&unk_10038AF10);
  v22 = swift_getKeyPath(&unk_10038AF38);
  static Published.subscript.getter(aBlock, v20, KeyPath, v22);
  swift_release(KeyPath);
  swift_release(v22);
  v23 = (void *)aBlock[10];
  v24 = v40;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v35 = 1;
  __asm { BR              X9 }
}

void sub_1000C103C(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  UnfairLock.locked<A>(_:)((void (*)(void))sub_1000C29E0);
  dispatch_group_leave(a4);
}

uint64_t sub_1000C10A0(_BYTE *a1, char a2)
{
  char v4;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[24];

  swift_beginAccess(a1, v7, 0, 0);
  v4 = *a1 & a2;
  result = swift_beginAccess(a1, &v6, 1, 0);
  *a1 = v4;
  return result;
}

void sub_1000C1108(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  id v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD aBlock[3];
  void *v33;
  uint64_t (*v34)(uint64_t, __n128);
  uint64_t v35;
  char v36;

  v31 = a1;
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10048C710 != -1)
    v5 = swift_once(&qword_10048C710, sub_1000C220C);
  v8 = word_100490CD0;
  v9 = HIBYTE(word_100490CD0);
  v10 = qword_100490CD8;
  v11 = word_100490CE0;
  v12 = HIBYTE(word_100490CE0);
  HIDWORD(v29) = byte_100490CE2;
  Date.init()(v5);
  v13 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v33 = (void *)v3;
  v14 = sub_1000207D4(aBlock);
  (*(void (**)(_QWORD *, char *, uint64_t))(v4 + 16))(v14, v7, v3);
  v36 = v12;
  v15 = sub_1000C1F14();
  v16 = sub_10000D478();
  NSUserDefaults.subscript.setter((uint64_t)aBlock, (uint64_t)&v36, (uint64_t)&type metadata for BackgroundTaskConfiguration.UserDefaultsKey, v15, v16);

  v17 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  v18 = static os_log_type_t.default.getter(v17);
  v19 = sub_100005574(&qword_10048F840);
  v20 = swift_allocObject(v19, 72, 7);
  v21 = v20;
  *(_OWORD *)(v20 + 16) = xmmword_100384A80;
  if (v8)
    v22 = 0xD000000000000018;
  else
    v22 = 0xD000000000000019;
  if (v8)
    v23 = 0x80000001003ACAA0;
  else
    v23 = 0x80000001003ACA80;
  *(_QWORD *)(v20 + 56) = &type metadata for String;
  *(_QWORD *)(v20 + 64) = sub_100081EF4();
  *(_QWORD *)(v21 + 32) = v22;
  *(_QWORD *)(v21 + 40) = v23;
  sub_1000087DC(0, (unint64_t *)&qword_1004904C0, OS_os_log_ptr);
  v24 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v24, "BackgroundRefreshController: EXECUTING SUBTASK: %@", 50, 2, v21);
  swift_bridgeObjectRelease(v21);

  v25 = *(void **)(v30 + 32);
  v26 = swift_allocObject(&unk_100448FC0, 56, 7);
  *(_BYTE *)(v26 + 16) = v8;
  *(_BYTE *)(v26 + 17) = v9;
  *(_QWORD *)(v26 + 24) = v10;
  *(_BYTE *)(v26 + 32) = v11;
  *(_BYTE *)(v26 + 33) = v12;
  *(_BYTE *)(v26 + 34) = BYTE4(v29);
  *(_QWORD *)(v26 + 40) = v31;
  *(_QWORD *)(v26 + 48) = a2;
  v34 = sub_1000C2984;
  v35 = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000F7EF4;
  v33 = &unk_100448FD8;
  v27 = _Block_copy(aBlock);
  v28 = v35;
  swift_retain(a2);
  objc_msgSend(v25, "updatePinnedSubscribedPlaylistsWithCompletion:", v27, swift_release(v28).n128_f64[0]);
  _Block_release(v27);
}

void sub_1000C13F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  char v11;
  uint64_t v12;
  char v13;
  id v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  char v32;
  _QWORD v33[4];

  v3 = v2;
  v31 = a1;
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10048C718 != -1)
    v7 = swift_once(&qword_10048C718, sub_1000C22CC);
  v10 = word_100490CE8;
  v11 = HIBYTE(word_100490CE8);
  v12 = qword_100490CF0;
  v13 = byte_100490CF9;
  v29 = byte_100490CFA;
  v30 = byte_100490CF8;
  Date.init()(v7);
  v14 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v33[3] = v5;
  v15 = sub_1000207D4(v33);
  (*(void (**)(_QWORD *, char *, uint64_t))(v6 + 16))(v15, v9, v5);
  v32 = v13;
  v16 = sub_1000C1F14();
  v17 = sub_10000D478();
  NSUserDefaults.subscript.setter((uint64_t)v33, (uint64_t)&v32, (uint64_t)&type metadata for BackgroundTaskConfiguration.UserDefaultsKey, v16, v17);

  v18 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v19 = static os_log_type_t.default.getter(v18);
  v20 = sub_100005574(&qword_10048F840);
  v21 = swift_allocObject(v20, 72, 7);
  v22 = v21;
  *(_OWORD *)(v21 + 16) = xmmword_100384A80;
  if (v10)
    v23 = 0xD000000000000018;
  else
    v23 = 0xD000000000000019;
  if (v10)
    v24 = 0x80000001003ACAA0;
  else
    v24 = 0x80000001003ACA80;
  *(_QWORD *)(v21 + 56) = &type metadata for String;
  *(_QWORD *)(v21 + 64) = sub_100081EF4();
  *(_QWORD *)(v22 + 32) = v23;
  *(_QWORD *)(v22 + 40) = v24;
  sub_1000087DC(0, (unint64_t *)&qword_1004904C0, OS_os_log_ptr);
  v25 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v25, "BackgroundRefreshController: EXECUTING SUBTASK: %@", 50, 2, v22);
  swift_bridgeObjectRelease();

  if (qword_10048C6E8 != -1)
    swift_once(&qword_10048C6E8, sub_1000BC7A8);
  if (qword_10048C700 != -1)
    swift_once(&qword_10048C700, sub_1000C1C00);
  v26 = qword_100490CC0;
  v27 = swift_allocObject(&unk_100449010, 56, 7);
  *(_BYTE *)(v27 + 16) = v10;
  *(_BYTE *)(v27 + 17) = v11;
  *(_QWORD *)(v27 + 24) = v12;
  *(_BYTE *)(v27 + 32) = v30;
  *(_BYTE *)(v27 + 33) = v13;
  *(_BYTE *)(v27 + 34) = v29;
  *(_QWORD *)(v27 + 40) = v31;
  *(_QWORD *)(v27 + 48) = a2;
  swift_retain(v3);
  swift_retain(a2);
  _s9MusicCore22BackgroundFetchManagerC14updateURLCache5queue20onDidReceiveResponse10completionySo012OS_dispatch_H0C_ySo13ICURLResponseCSg_s5Error_pSgtcSgySaysAM_pGctF_0(v26, (uint64_t)sub_1000C2990, v3, (uint64_t)sub_1000C2998, v27);
  swift_release(v3);
  swift_release(v27);
}

uint64_t sub_1000C1700(uint64_t a1, char a2, uint64_t a3, uint64_t (*a4)(BOOL))
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v28;

  v7 = 0xD000000000000018;
  if (a1)
  {
    v8 = swift_errorRetain(a1);
    v9 = static os_log_type_t.error.getter(v8);
    v10 = sub_100005574(&qword_10048F840);
    v11 = swift_allocObject(v10, 112, 7);
    v12 = (_QWORD *)v11;
    *(_OWORD *)(v11 + 16) = xmmword_100384A60;
    if ((a2 & 1) != 0)
    {
      v13 = 0x80000001003ACAA0;
    }
    else
    {
      v7 = 0xD000000000000019;
      v13 = 0x80000001003ACA80;
    }
    *(_QWORD *)(v11 + 56) = &type metadata for String;
    v14 = sub_100081EF4();
    v12[8] = v14;
    v12[4] = v7;
    v12[5] = v13;
    v28 = a1;
    swift_errorRetain(a1);
    v15 = sub_100005574((uint64_t *)&unk_1004911F0);
    v16 = String.init<A>(describing:)(&v28, v15);
    v12[12] = &type metadata for String;
    v12[13] = v14;
    v12[9] = v16;
    v12[10] = v17;
    sub_1000087DC(0, (unint64_t *)&qword_1004904C0, OS_os_log_ptr);
    v18 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v18, "BackgroundRefreshController: COMPLETED SUBTASK: %@ ERROR %@", 59, 2, v12);
    swift_bridgeObjectRelease(v12);

    swift_errorRelease(a1);
  }
  else
  {
    v19 = ((uint64_t (*)(void))static os_log_type_t.error.getter)();
    v20 = sub_100005574(&qword_10048F840);
    v21 = swift_allocObject(v20, 72, 7);
    v22 = v21;
    *(_OWORD *)(v21 + 16) = xmmword_100384A80;
    v23 = (a2 & 1) == 0;
    if ((a2 & 1) != 0)
      v24 = 0xD000000000000018;
    else
      v24 = 0xD000000000000019;
    if (v23)
      v25 = 0x80000001003ACA80;
    else
      v25 = 0x80000001003ACAA0;
    *(_QWORD *)(v21 + 56) = &type metadata for String;
    *(_QWORD *)(v21 + 64) = sub_100081EF4();
    *(_QWORD *)(v22 + 32) = v24;
    *(_QWORD *)(v22 + 40) = v25;
    sub_1000087DC(0, (unint64_t *)&qword_1004904C0, OS_os_log_ptr);
    v26 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v26, "BackgroundRefreshController: COMPLETED SUBTASK: %@ SUCCESS", 58, 2, v22);
    swift_bridgeObjectRelease(v22);

  }
  return a4(a1 == 0);
}

uint64_t sub_1000C1948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  void (*v6)(uint64_t);
  uint64_t v7;
  _BYTE v8[24];

  result = swift_beginAccess(a3 + 16, v8, 0, 0);
  v6 = *(void (**)(uint64_t))(a3 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)(a3 + 24);
    swift_retain(v7);
    v6(a1);
    return swift_release(v7);
  }
  return result;
}

uint64_t sub_1000C19B0(uint64_t a1, char a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t (*v30)(_QWORD);
  uint64_t v31;
  uint64_t v32;

  v7 = static os_log_type_t.default.getter(a1);
  v8 = sub_100005574(&qword_10048F840);
  v9 = swift_allocObject(v8, 72, 7);
  v10 = (_QWORD *)v9;
  *(_OWORD *)(v9 + 16) = xmmword_100384A80;
  v11 = (a2 & 1) == 0;
  if ((a2 & 1) != 0)
    v12 = 0xD000000000000018;
  else
    v12 = 0xD000000000000019;
  if (v11)
    v13 = 0x80000001003ACA80;
  else
    v13 = 0x80000001003ACAA0;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  v14 = sub_100081EF4();
  v10[8] = v14;
  v10[4] = v12;
  v10[5] = v13;
  v15 = v13;
  sub_1000087DC(0, (unint64_t *)&qword_1004904C0, OS_os_log_ptr);
  v16 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v16, "BackgroundRefreshController: COMPLETED SUBTASK: %@", 50, 2, v10);
  swift_bridgeObjectRelease();

  v17 = *(_QWORD *)(a1 + 16);
  if (v17)
  {
    v30 = a4;
    swift_bridgeObjectRetain();
    v18 = 0;
    v31 = v8;
    do
    {
      v19 = *(_QWORD *)(a1 + 8 * v18++ + 32);
      v20 = swift_errorRetain(v19);
      v21 = v17;
      v22 = static os_log_type_t.error.getter(v20);
      v23 = swift_allocObject(v31, 112, 7);
      *(_OWORD *)(v23 + 16) = xmmword_100384A60;
      *(_QWORD *)(v23 + 56) = &type metadata for String;
      *(_QWORD *)(v23 + 64) = v14;
      *(_QWORD *)(v23 + 32) = v12;
      *(_QWORD *)(v23 + 40) = v15;
      v32 = v19;
      swift_errorRetain(v19);
      v24 = sub_100005574((uint64_t *)&unk_1004911F0);
      v25 = String.init<A>(describing:)(&v32, v24);
      *(_QWORD *)(v23 + 96) = &type metadata for String;
      *(_QWORD *)(v23 + 104) = v14;
      *(_QWORD *)(v23 + 72) = v25;
      *(_QWORD *)(v23 + 80) = v26;
      v27 = (void *)static OS_os_log.default.getter();
      v28 = v22;
      v17 = v21;
      os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v27, "BackgroundRefreshController: ERROR EXECUTING SUBTASK: %@ ERROR %@", 65, 2, v23);
      swift_bridgeObjectRelease();

      swift_errorRelease(v19);
    }
    while (v21 != v18);
    swift_bridgeObjectRelease();
    a4 = v30;
  }
  return a4(v17 == 0);
}

uint64_t sub_1000C1C00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  _QWORD *v16;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000087DC(0, (unint64_t *)&qword_100490BC0, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v10);
  v16 = _swiftEmptyArrayStorage;
  v11 = sub_100006924(&qword_100490DC0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v12 = sub_100005574(&qword_100490DC8);
  v13 = sub_1000C27F8(&qword_100490DD0, &qword_100490DC8);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v4, v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003ELL, 0x80000001003AFEA0, v9, v6, v3, 0);
  qword_100490CC0 = result;
  return result;
}

uint64_t BackgroundRefreshController.deinit()
{
  uint64_t v0;

  sub_10003A5C8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));

  return v0;
}

uint64_t BackgroundRefreshController.__deallocating_deinit()
{
  uint64_t v0;

  sub_10003A5C8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));

  return swift_deallocClassInstance(v0, 40, 7);
}

double sub_1000C1E1C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  __int16 v5;
  char v6;
  double result;
  char v8;
  __int16 v9;

  v0 = sub_100005574(&qword_100490DD8);
  v1 = swift_allocObject(v0, 80, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100384A60;
  if (qword_10048C710 != -1)
    swift_once(&qword_10048C710, sub_1000C220C);
  v2 = HIBYTE(word_100490CD0);
  v3 = qword_100490CD8;
  v4 = word_100490CE0;
  v5 = *(__int16 *)((char *)&word_100490CE0 + 1);
  *(_BYTE *)(v1 + 32) = word_100490CD0;
  *(_BYTE *)(v1 + 33) = v2;
  *(_QWORD *)(v1 + 40) = v3;
  *(_BYTE *)(v1 + 48) = v4;
  *(_WORD *)(v1 + 49) = v5;
  if (qword_10048C718 != -1)
    swift_once(&qword_10048C718, sub_1000C22CC);
  v6 = HIBYTE(word_100490CE8);
  result = *(double *)&qword_100490CF0;
  v8 = byte_100490CF8;
  v9 = *(_WORD *)&byte_100490CF9;
  *(_BYTE *)(v1 + 56) = word_100490CE8;
  *(_BYTE *)(v1 + 57) = v6;
  *(double *)(v1 + 64) = result;
  *(_BYTE *)(v1 + 72) = v8;
  *(_WORD *)(v1 + 73) = v9;
  off_100490CC8 = (_UNKNOWN *)v1;
  return result;
}

unint64_t sub_1000C1F14()
{
  unint64_t result;

  result = qword_100490D00;
  if (!qword_100490D00)
  {
    result = swift_getWitnessTable(&unk_10038AED4, &type metadata for BackgroundTaskConfiguration.UserDefaultsKey);
    atomic_store(result, (unint64_t *)&qword_100490D00);
  }
  return result;
}

uint64_t sub_1000C1F58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005574(&qword_100490730);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C1FA0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1000C1FCC()
{
  uint64_t v0;

  sub_1000BFD84(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32));
}

uint64_t type metadata accessor for BackgroundRefreshController()
{
  return objc_opt_self(_TtC9MusicCore27BackgroundRefreshController);
}

_QWORD *assignWithCopy for BackgroundRefreshController.PerformanceMetricsRecorder(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t assignWithTake for BackgroundRefreshController.PerformanceMetricsRecorder(uint64_t a1, _OWORD *a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for BackgroundRefreshController.PerformanceMetricsRecorder(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BackgroundRefreshController.PerformanceMetricsRecorder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BackgroundRefreshController.PerformanceMetricsRecorder()
{
  return &type metadata for BackgroundRefreshController.PerformanceMetricsRecorder;
}

uint64_t storeEnumTagSinglePayload for BackgroundTaskConfiguration.UserDefaultsKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000C2144 + 4 * byte_10038ADC8[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000C2178 + 4 * byte_10038ADC3[v4]))();
}

uint64_t sub_1000C2178(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C2180(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C2188);
  return result;
}

uint64_t sub_1000C2194(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C219CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000C21A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C21A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BackgroundTaskConfiguration.UserDefaultsKey()
{
  return &type metadata for BackgroundTaskConfiguration.UserDefaultsKey;
}

unint64_t sub_1000C21C8()
{
  unint64_t result;

  result = qword_100490DB8;
  if (!qword_100490DB8)
  {
    result = swift_getWitnessTable(&unk_10038AEAC, &type metadata for BackgroundTaskConfiguration.UserDefaultsKey);
    atomic_store(result, (unint64_t *)&qword_100490DB8);
  }
  return result;
}

void sub_1000C220C()
{
  void *v0;

  if (qword_10048C720 != -1)
    swift_once(&qword_10048C720, sub_1000C378C);
  sub_100005574(&qword_100490BA0);
  UnfairLock.locked<A>(_:)((void (*)(void))sub_10000D460);

  word_100490CD0 = 256;
  qword_100490CD8 = 0x40E5180000000000;
  word_100490CE0 = 257;
  byte_100490CE2 = 0;
}

void sub_1000C22CC()
{
  void *v0;
  char v1;
  uint64_t v2;
  void *v3;
  char v4;

  if (qword_10048C720 != -1)
    swift_once(&qword_10048C720, sub_1000C378C);
  sub_100005574(&qword_100490BA0);
  UnfairLock.locked<A>(_:)((void (*)(void))sub_10000D460);
  v0 = v3;
  if (v3 && (sub_1000C23B8(v3, (uint64_t)&v3), v0, (v4 & 1) == 0))
  {
    v1 = 0;
    v2 = (uint64_t)v3;
  }
  else
  {
    v1 = 1;
    v2 = 0x40D5180000000000;
  }
  word_100490CE8 = 257;
  qword_100490CF0 = v2;
  byte_100490CF8 = v1;
  *(_WORD *)&byte_100490CF9 = 515;
}

void sub_1000C23B8(void *a1@<X0>, uint64_t a2@<X8>)
{
  NSString v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(a1, "dictionaryForBagKey:", v4);

  if (!v5)
    goto LABEL_12;
  v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v5, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  v7 = sub_1001F39D0(v6);
  swift_bridgeObjectRelease();
  if (!v7)
    goto LABEL_12;
  if (!*(_QWORD *)(v7 + 16) || (v8 = sub_10009ABAC(0xD00000000000001ELL, 0x80000001003AFC20), (v9 & 1) == 0))
  {
    v17 = 0u;
    v18 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  sub_10000684C(*(_QWORD *)(v7 + 56) + 32 * v8, (uint64_t)&v17);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v18 + 1))
    goto LABEL_11;
  v10 = sub_100005574((uint64_t *)&unk_100493380);
  if ((swift_dynamicCast(&v16, &v17, (char *)&type metadata for Any + 8, v10, 6) & 1) == 0)
  {
LABEL_12:
    *(_QWORD *)a2 = 0;
    v14 = 1;
    goto LABEL_13;
  }
  v11 = v16;
  if (*(_QWORD *)(v16 + 16) && (v12 = sub_10009ABAC(0xD00000000000001DLL, 0x80000001003AFEE0), (v13 & 1) != 0))
  {
    sub_10000684C(*(_QWORD *)(v11 + 56) + 32 * v12, (uint64_t)&v17);
  }
  else
  {
    v17 = 0u;
    v18 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v18 + 1))
  {
LABEL_11:
    sub_100008758((uint64_t)&v17, &qword_100491B90);
    goto LABEL_12;
  }
  v15 = swift_dynamicCast(a2, &v17, (char *)&type metadata for Any + 8, &type metadata for Double, 6);
  if ((v15 & 1) == 0)
    *(_QWORD *)a2 = 0;
  v14 = v15 ^ 1;
LABEL_13:
  *(_BYTE *)(a2 + 8) = v14;
}

uint64_t sub_1000C259C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000C25D8 + 4 * byte_10038ADCD[a1]))(0xD00000000000002FLL, 0x80000001003ACAC0);
}

uint64_t sub_1000C25D8()
{
  uint64_t v0;

  return v0 + 11;
}

unint64_t sub_1000C2600()
{
  return 0xD000000000000027;
}

uint64_t sub_1000C261C(char *a1, char *a2)
{
  return sub_100027F54(*a1, *a2);
}

Swift::Int sub_1000C2628()
{
  char *v0;

  return sub_1000BE284(*v0);
}

uint64_t sub_1000C2630(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000018;
  else
    v2 = 0xD000000000000019;
  if (*v1)
    v3 = 0x80000001003ACAA0;
  else
    v3 = 0x80000001003ACA80;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1000C2690(uint64_t a1)
{
  char *v1;

  return sub_1000BEAEC(a1, *v1);
}

uint64_t sub_1000C2698@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10043E298, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_1000C26F4(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000018;
  else
    v2 = 0xD000000000000019;
  v3 = 0x80000001003ACA80;
  if (*v1)
    v3 = 0x80000001003ACAA0;
  *a1 = v2;
  a1[1] = v3;
}

void sub_1000C2738(char *a1)
{
  sub_100027E08(*a1);
}

void sub_1000C2744()
{
  char *v0;

  sub_1000BE308(*v0);
}

void sub_1000C274C(uint64_t a1)
{
  char *v1;

  sub_1000BE730(a1, *v1);
}

void sub_1000C2754(uint64_t a1)
{
  char *v1;

  sub_1000BEB6C(a1, *v1);
}

unint64_t sub_1000C275C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000C27B0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000C2788@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1000C259C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1000C27B0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10043E2E8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t sub_1000C27F8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100005600(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000C2838()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

double sub_1000C285C(char a1)
{
  uint64_t v1;

  return sub_1000C01EC(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000C286C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000C287C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000C28B0()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  unsigned __int8 v3;

  v1 = *(uint64_t (**)(_QWORD))(v0 + 32);
  UnfairLock.locked<A>(_:)((void (*)(void))sub_1000C29FC);
  return v1(v3);
}

void sub_1000C291C(uint64_t a1)
{
  uint64_t v1;

  sub_1000C103C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(NSObject **)(v1 + 32));
}

uint64_t sub_1000C292C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000C2960()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000C2984(uint64_t a1, __n128 a2)
{
  return sub_1000C29A4(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, __n128))sub_1000C1700, a2);
}

uint64_t sub_1000C2990(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000C1948(a1, a2, v2);
}

uint64_t sub_1000C2998(uint64_t a1, __n128 a2)
{
  return sub_1000C29A4(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, __n128))sub_1000C19B0, a2);
}

uint64_t sub_1000C29A4(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, __n128), __n128 a3)
{
  uint64_t v3;
  int v4;

  if (*(_BYTE *)(v3 + 17))
    v4 = 256;
  else
    v4 = 0;
  a3.n128_u64[0] = *(_QWORD *)(v3 + 24);
  return a2(a1, v4 | *(unsigned __int8 *)(v3 + 16), *(unsigned __int8 *)(v3 + 32) | (*(unsigned __int8 *)(v3 + 33) << 8) | (*(unsigned __int8 *)(v3 + 34) << 16), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), a3);
}

uint64_t sub_1000C29E0()
{
  uint64_t v0;

  return sub_1000C10A0(*(_BYTE **)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_1000C29FC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = *(_BYTE **)(v1 + 16);
  result = swift_beginAccess(v3, v5, 0, 0);
  *a1 = *v3;
  return result;
}

uint64_t sub_1000C2A50()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

void sub_1000C2A74()
{
  uint64_t v0;

  sub_1000C040C(*(void **)(v0 + 16), *(_BYTE *)(v0 + 24));
}

__n128 initializeBufferWithCopyOfBuffer for BackgroundTaskConfiguration(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_DWORD *)(a1 + 15) = *(_DWORD *)(a2 + 15);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for BackgroundTaskConfiguration(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[19])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for BackgroundTaskConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 18) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 19) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 19) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for BackgroundTaskConfiguration()
{
  return &type metadata for BackgroundTaskConfiguration;
}

uint64_t storeEnumTagSinglePayload for BackgroundTaskConfiguration.Identifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000C2B80 + 4 * byte_10038ADD6[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000C2BB4 + 4 * byte_10038ADD1[v4]))();
}

uint64_t sub_1000C2BB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C2BBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C2BC4);
  return result;
}

uint64_t sub_1000C2BD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C2BD8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000C2BDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C2BE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BackgroundTaskConfiguration.Identifier()
{
  return &type metadata for BackgroundTaskConfiguration.Identifier;
}

unint64_t sub_1000C2C04()
{
  unint64_t result;

  result = qword_100490DE0[0];
  if (!qword_100490DE0[0])
  {
    result = swift_getWitnessTable(&unk_10038AFDC, &type metadata for BackgroundTaskConfiguration.Identifier);
    atomic_store(result, qword_100490DE0);
  }
  return result;
}

uint64_t BagControlledValue.init(fallback:reader:)@<X0>(uint64_t a1@<X0>, void (*a2)(void *)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  void (*v21)(void *);
  uint64_t v22;
  void *v23;

  v21 = a2;
  v22 = a1;
  v6 = type metadata accessor for Optional(0, a3);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v21 - v9;
  v11 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(v8);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10048C720 != -1)
    swift_once(&qword_10048C720, sub_1000C378C);
  sub_100005574(&qword_100490BA0);
  UnfairLock.locked<A>(_:)((void (*)(void))sub_10000D460);
  v16 = v23;
  if (!v23)
    goto LABEL_6;
  v21(v23);

  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, a3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
LABEL_6:
    *(_BYTE *)(a4 + *(int *)(type metadata accessor for BagControlledValue(0, a3, v14, v15) + 28)) = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(a4, v22, a3);
  }
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v22, a3);
  v18 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v18(v13, v10, a3);
  *(_BYTE *)(a4 + *(int *)(type metadata accessor for BagControlledValue(0, a3, v19, v20) + 28)) = 0;
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v18)(a4, v13, a3);
}

uint64_t BagControlledValue.source.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 28));
}

uint64_t type metadata accessor for BagControlledValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100031DCC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BagControlledValue);
}

uint64_t sub_1000C2E68(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for BagControlledValue<A>.Source, a1);
}

uint64_t sub_1000C2E78(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10038B0B8;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 24);
    return 0;
  }
  return result;
}

_QWORD *sub_1000C2EEC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 1) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(_QWORD *, _QWORD *))(v5 + 16))(a1, a2);
    *((_BYTE *)v4 + v6) = *((_BYTE *)a2 + v6);
  }
  else
  {
    v10 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v10 + ((v7 + 16) & ~v7));
    swift_retain(v10);
  }
  return v4;
}

uint64_t sub_1000C2F78(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_1000C2F88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t sub_1000C2FD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t sub_1000C3018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t sub_1000C3060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t sub_1000C30A8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = v7 + 1;
  v10 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 >= 0xFE)
        return (*(uint64_t (**)(void))(v4 + 48))();
      v15 = *(unsigned __int8 *)(v7 + a1);
      if (v15 >= 2)
        return v15 - 1;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if ((_DWORD)v7 == -1)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1000C3170 + 4 * byte_10038B010[(v9 - 1)]))();
}

void sub_1000C31D0(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 1;
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = &dword_100000004;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v7 != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v7 + 1);
        if (v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if (v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t sub_1000C33A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 8);
}

uint64_t sub_1000C33AC(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000C33F8 + 4 * byte_10038B023[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000C342C + 4 * byte_10038B01E[v4]))();
}

uint64_t sub_1000C342C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C3434(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C343CLL);
  return result;
}

uint64_t sub_1000C3448(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C3450);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000C3454(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C345C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for BagControlledValue.Source(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100031DCC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BagControlledValue.Source);
}

uint64_t *BagProvider.shared.unsafeMutableAddressor()
{
  if (qword_10048C720 != -1)
    swift_once(&qword_10048C720, sub_1000C378C);
  return &static BagProvider.shared;
}

uint64_t BagProvider.createObserver(handler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = type metadata accessor for BagProvider.Observer();
  v6 = swift_allocObject(v5, 40, 7);
  v7 = swift_weakInit(v6 + 16, 0);
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  swift_weakAssign(v7, v2);
  v8 = *(_QWORD *)(v6 + 24);
  v9 = *(_QWORD *)(v6 + 32);
  *(_QWORD *)(v6 + 24) = a1;
  *(_QWORD *)(v6 + 32) = a2;
  swift_retain(a2);
  sub_10003A5C8(v8, v9);
  UnfairLock.locked<A>(_:)(sub_1000A9F10);
  sub_1000C3B6C(0);
  return v6;
}

uint64_t BagProvider.bag.getter()
{
  uint64_t v1;

  sub_100005574(&qword_100490BA0);
  UnfairLock.locked<A>(_:)((void (*)(void))sub_1000C3DA8);
  return v1;
}

double BagProvider.getBag(completion:)(void (*a1)(), uint64_t a2)
{
  uint64_t v2;
  double result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  sub_100005574(&qword_100490BA0);
  UnfairLock.locked<A>(_:)((void (*)(void))sub_1000C3DA8);
  if (v14)
  {
    a1();

  }
  else
  {
    v6 = type metadata accessor for BagProvider.Observer();
    v7 = swift_allocObject(v6, 40, 7);
    v8 = swift_weakInit(v7 + 16, 0);
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 32) = 0;
    swift_weakAssign(v8, v2);
    v9 = swift_allocObject(&unk_100449300, 24, 7);
    swift_weakInit(v9 + 16, v2);
    v10 = (_QWORD *)swift_allocObject(&unk_100449328, 48, 7);
    v10[2] = a1;
    v10[3] = a2;
    v10[4] = v9;
    v10[5] = v7;
    v11 = *(_QWORD *)(v7 + 24);
    v12 = *(_QWORD *)(v7 + 32);
    *(_QWORD *)(v7 + 24) = sub_1000BC3D8;
    *(_QWORD *)(v7 + 32) = v10;
    swift_retain(a2);
    swift_retain(v7);
    v13 = sub_10003A5C8(v11, v12);
    __chkstk_darwin(v13);
    UnfairLock.locked<A>(_:)((void (*)(void))sub_1000BC3E4);
    sub_1000C3B6C(0);
    *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000C378C()
{
  void *v0;
  uint64_t v1;
  uint64_t result;

  if (qword_10048C7B8 != -1)
    swift_once(&qword_10048C7B8, sub_1000F4AB8);
  v0 = (void *)static ICClientInfo.music;
  v1 = type metadata accessor for BagProvider(0);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  result = sub_1000C4024(v0);
  static BagProvider.shared = result;
  return result;
}

uint64_t type metadata accessor for BagProvider.Observer()
{
  return objc_opt_self(_TtCC9MusicCore11BagProvider8Observer);
}

uint64_t static BagProvider.shared.getter()
{
  if (qword_10048C720 != -1)
    swift_once(&qword_10048C720, sub_1000C378C);
  return swift_retain(static BagProvider.shared);
}

_BYTE *sub_1000C3860@<X0>(_BYTE *result@<X0>, _QWORD *a2@<X8>)
{
  id *v3;
  id v4;

  v3 = (id *)&result[OBJC_IVAR____TtC9MusicCore11BagProvider_result];
  if (result[OBJC_IVAR____TtC9MusicCore11BagProvider_result + 8] == 1)
  {
    v4 = *v3;
    result = *v3;
  }
  else
  {
    v4 = 0;
  }
  *a2 = v4;
  return result;
}

double sub_1000C38B8(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t Strong;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[31];

  v4 = a4 + 16;
  a2();
  swift_beginAccess(v4, v10, 0, 0);
  Strong = swift_weakLoadStrong(v4);
  if (Strong)
  {
    v7 = Strong;
    v8 = *(_QWORD *)(Strong + OBJC_IVAR____TtC9MusicCore11BagProvider_lock);
    swift_retain(v8);
    swift_release(v7);
    __chkstk_darwin(v9);
    sub_100005574((uint64_t *)&unk_100491180);
    UnfairLock.locked<A>(_:)((void (*)(void))sub_1000C5544);
    *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  }
  return result;
}

void sub_1000C3998(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE v13[24];
  _BYTE v14[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v14, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  v7 = Strong;
  if (!Strong)
    goto LABEL_5;
  v8 = (unint64_t *)(Strong + OBJC_IVAR____TtC9MusicCore11BagProvider_singleFireObservers);
  swift_beginAccess(Strong + OBJC_IVAR____TtC9MusicCore11BagProvider_singleFireObservers, v13, 33, 0);
  swift_retain(a2);
  v9 = sub_1000C567C(v8, a2);
  swift_release(a2);
  v10 = *v8;
  if (*v8 >> 62)
  {
    if (v10 < 0)
      v12 = *v8;
    else
      v12 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease(v10);
    if (v11 >= v9)
      goto LABEL_4;
  }
  else
  {
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v11 >= v9)
    {
LABEL_4:
      sub_1000403B0(v9, v11);
      swift_endAccess(v13);
      swift_release(v7);
LABEL_5:
      *a3 = v7 == 0;
      return;
    }
  }
  __break(1u);
}

uint64_t sub_1000C3AC8(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE v9[24];

  v3 = (_QWORD *)(a1 + OBJC_IVAR____TtC9MusicCore11BagProvider_singleFireObservers);
  swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore11BagProvider_singleFireObservers, v9, 33, 0);
  v4 = swift_retain(a2);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v4);
  v6 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v5 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v6 >= v5 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
  v7 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, a2);
  specialized Array._endMutation()(v7);
  return swift_endAccess(v9);
}

void sub_1000C3B6C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  _QWORD aBlock[5];
  uint64_t v10;

  v2 = v1;
  UnfairLock.locked<A>(_:)((void (*)(void))sub_1000C5994);
  if (LOBYTE(aBlock[0]) == 1)
  {
    UnfairLock.locked<A>(_:)(sub_1000C59CC);
    v4 = objc_msgSend((id)objc_opt_self(ICUserIdentity), "activeAccount");
    v5 = objc_msgSend(objc_allocWithZone((Class)ICStoreRequestContext), "initWithIdentity:clientInfo:", v4, *(_QWORD *)(v1 + 16));

    v6 = objc_msgSend((id)objc_opt_self(ICURLBagProvider), "sharedBagProvider");
    aBlock[4] = sub_1000C59E0;
    v10 = v2;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000AC9C8;
    aBlock[3] = &unk_1004493D0;
    v7 = _Block_copy(aBlock);
    v8 = v10;
    swift_retain(v2);
    objc_msgSend(v6, "getBagForRequestContext:forceRefetch:withCompletionHandler:", v5, a1 & 1, v7, swift_release(v8).n128_f64[0]);
    _Block_release(v7);

  }
}

void sub_1000C3CF0(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v6;
  id v7;
  id *v8;
  id v9;
  void *v10;
  _BYTE v11[24];

  swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore11BagProvider_durableObservers, v11, 33, 0);
  v6 = sub_100005574(&qword_100491178);
  WeakArray.append(_:)(a2, v6);
  swift_endAccess(v11);
  v7 = 0;
  v8 = (id *)(a1 + OBJC_IVAR____TtC9MusicCore11BagProvider_result);
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC9MusicCore11BagProvider_result + 8) == 1)
  {
    v7 = *v8;
    v9 = *v8;
  }
  v10 = *a3;
  *a3 = v7;

}

id sub_1000C3DA8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1000C3DBC(a1);
}

id sub_1000C3DBC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  id *v3;
  id v4;
  id result;

  v3 = (id *)(v1 + OBJC_IVAR____TtC9MusicCore11BagProvider_result);
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC9MusicCore11BagProvider_result + 8) == 1)
  {
    v4 = *v3;
    result = *v3;
  }
  else
  {
    v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_1000C3E14()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000C3E38()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

id BagProvider.clientInfo.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t sub_1000C3E74@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  _BYTE v14[24];
  _BYTE v15[24];

  v3 = sub_100005574(&qword_100490F10);
  v4 = __chkstk_darwin(v3);
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v14[-v7];
  v9 = v1 + OBJC_IVAR____TtC9MusicCore11BagProvider____lazy_storage___signpost;
  swift_beginAccess(v1 + OBJC_IVAR____TtC9MusicCore11BagProvider____lazy_storage___signpost, v15, 0, 0);
  sub_1000C5A74(v9, (uint64_t)v8);
  v10 = type metadata accessor for Signpost(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1)
    return sub_1000C5B48((uint64_t)v8, (uint64_t)a1);
  sub_1000C51D0((uint64_t)v8);
  if (qword_10048C770 != -1)
    swift_once(&qword_10048C770, sub_1000F0340);
  v12 = (id)static OS_os_log.musicBag;
  swift_retain(v1);
  Signpost.init(name:object:log:)((uint64_t)"Bag", 3, 2, v1, v12, a1);
  sub_1000C5ABC((uint64_t)a1, (uint64_t)v6);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
  swift_beginAccess(v9, v14, 33, 0);
  sub_1000C5B00((uint64_t)v6, v9);
  return swift_endAccess(v14);
}

uint64_t sub_1000C4024(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  CFIndex location;
  uint64_t v19;
  id v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD v29[5];

  v2 = v1;
  v4 = type metadata accessor for Signpost(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v29[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 56))(v1 + OBJC_IVAR____TtC9MusicCore11BagProvider____lazy_storage___signpost, 1, 1);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC9MusicCore11BagProvider_bindings) = _swiftEmptyArrayStorage;
  v8 = OBJC_IVAR____TtC9MusicCore11BagProvider_lock;
  v9 = type metadata accessor for UnfairLock();
  swift_allocObject(v9, 24, 7);
  *(_QWORD *)(v1 + v8) = UnfairLock.init()();
  *(_QWORD *)(v1 + OBJC_IVAR____TtC9MusicCore11BagProvider_singleFireObservers) = _swiftEmptyArrayStorage;
  v10 = OBJC_IVAR____TtC9MusicCore11BagProvider_durableObservers;
  v11 = type metadata accessor for BagProvider.Observer();
  *(_QWORD *)(v2 + v10) = WeakArray.init(_:)((uint64_t)_swiftEmptyArrayStorage, v11);
  if (qword_10048C770 != -1)
    swift_once(&qword_10048C770, sub_1000F0340);
  Logger.init(_:)((id)static OS_os_log.musicBag);
  *(_BYTE *)(v2 + OBJC_IVAR____TtC9MusicCore11BagProvider_isFetching) = 0;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC9MusicCore11BagProvider_deferReload) = 0;
  v12 = OBJC_IVAR____TtC9MusicCore11BagProvider_retry;
  *(_QWORD *)(v2 + v12) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for BagProvider.Retry()), "init");
  *(_QWORD *)(v2 + 16) = a1;
  v13 = v2 + OBJC_IVAR____TtC9MusicCore11BagProvider_result;
  *(_QWORD *)v13 = 0;
  *(_BYTE *)(v13 + 8) = 2;
  v14 = a1;
  sub_1000C3E74(v6);
  Signpost.begin(dso:)((uint64_t)&_mh_execute_header);
  sub_1000C5A28((uint64_t)v6);
  sub_1000C3B6C(0);
  type metadata accessor for Whitetail.Binding();
  if (qword_10048C728 != -1)
    swift_once(&qword_10048C728, sub_1000C555C);
  v16 = (void *)qword_100490EF0;
  v17 = qword_100490EF0;
  location = CFRange.init(_:)(*(__C::_NSRange *)(&v15 - 1)).location;
  v29[3] = &type metadata for DistributedNotificationTrigger;
  v29[4] = &protocol witness table for DistributedNotificationTrigger;
  v29[0] = location;
  v19 = swift_allocObject(&unk_100449300, 24, 7);
  swift_weakInit(v19 + 16, v2);
  v20 = v16;
  v21 = Whitetail.Binding.__allocating_init(_:needsInitialConfiguration:configurationBlock:)(v29, 0, (uint64_t)sub_1000C5B8C, v19);
  v22 = (_QWORD *)(v2 + OBJC_IVAR____TtC9MusicCore11BagProvider_bindings);
  swift_beginAccess(v2 + OBJC_IVAR____TtC9MusicCore11BagProvider_bindings, v29, 33, 0);
  v23 = swift_retain(v21);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v23);
  v25 = *(_QWORD *)((*v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v24 = *(_QWORD *)((*v22 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v25 >= v24 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
  v26 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v21);
  specialized Array._endMutation()(v26);
  swift_endAccess(v29);
  swift_release(v21);

  return v2;
}

double sub_1000C4314(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  double result;
  uint64_t v4;
  _BYTE v5[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v4 = Strong;
    sub_1000C4368();
    *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  }
  return result;
}

void sub_1000C4368()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void *v5;
  char v6;

  UnfairLock.locked<A>(_:)((void (*)(void))sub_1000C5B94);

  if (v6 == 1)
  {
    UnfairLock.locked<A>(_:)(sub_1000C5BD4);
    __chkstk_darwin(v0);
    UnfairLock.locked<A>(_:)(sub_1000C5A14);
    v1 = swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    v2 = Logger.logObject.getter(v1);
    v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Notification triggered to update bag: storefrontChanged", v4, 2u);
      swift_slowDealloc(v4, -1, -1);
    }

    sub_1000C3B6C(1);
  }
}

void sub_1000C44DC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)();
  void *v12;
  char v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(void *);
  uint64_t v21;
  uint64_t v22;
  id v23;
  char v24;
  char v25;
  uint64_t *v26;
  _QWORD v27[2];
  char *v28;
  uint64_t v29;
  uint64_t v30;

  v6 = type metadata accessor for Signpost(0);
  __chkstk_darwin(v6);
  v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a3 + OBJC_IVAR____TtC9MusicCore11BagProvider_lock);
  UnfairLock.locked<A>(_:)((void (*)(void))sub_1000C5A00);
  if ((v30 & 1) != 0)
  {
    sub_1000C3B6C(1);
    v11 = sub_1000C5C14;
LABEL_23:
    UnfairLock.locked<A>(_:)(v11);
    return;
  }
  v12 = a1;
  if (!a1)
  {
    if (!a2)
      goto LABEL_25;
    swift_errorRetain(a2);
    v12 = (void *)_convertErrorToNSError(_:)(a2);
    v10 = swift_errorRelease(a2);
  }
  v30 = (uint64_t)_swiftEmptyArrayStorage;
  __chkstk_darwin(v10);
  v27[-4] = a3;
  v27[-3] = v12;
  v24 = v13;
  v25 = 1;
  v26 = &v30;
  v14 = a1;
  UnfairLock.locked<A>(_:)(sub_1000C5A14);
  if (!a1)
  {
LABEL_22:
    swift_bridgeObjectRelease(v30);
    sub_1000C3E74(v8);
    Signpost.end(dso:)((uint64_t)&_mh_execute_header);

    sub_1000C5A28((uint64_t)v8);
    v11 = sub_1000C5A64;
    goto LABEL_23;
  }
  v15 = v30;
  v28 = v8;
  v29 = v9;
  v27[1] = (char *)&type metadata for () + 8;
  if ((unint64_t)v30 >> 62)
  {
    if (v30 < 0)
      v22 = v30;
    else
      v22 = v30 & 0xFFFFFFFFFFFFFF8;
    v23 = v12;
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter(v22);
    if (v16)
      goto LABEL_9;
    goto LABEL_21;
  }
  v16 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
  v17 = v12;
  swift_bridgeObjectRetain();
  if (!v16)
  {
LABEL_21:

    swift_bridgeObjectRelease(v15);
    v8 = v28;
    goto LABEL_22;
  }
LABEL_9:
  if (v16 >= 1)
  {
    v18 = 0;
    while ((v15 & 0xC000000000000001) == 0)
    {
      v19 = *(_QWORD *)(v15 + 8 * v18 + 32);
      swift_retain(v19);
      v20 = *(void (**)(void *))(v19 + 24);
      if (v20)
        goto LABEL_16;
LABEL_11:
      ++v18;
      swift_release(v19);
      if (v16 == v18)
        goto LABEL_21;
    }
    v19 = specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v15);
    v20 = *(void (**)(void *))(v19 + 24);
    if (!v20)
      goto LABEL_11;
LABEL_16:
    v21 = *(_QWORD *)(v19 + 32);
    swift_retain(v21);
    v20(v12);
    sub_10003A5C8((uint64_t)v20, v21);
    goto LABEL_11;
  }
  __break(1u);
LABEL_25:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001003B0250, "MusicCore/BagProvider.swift", 27, 2, 149, 0);
  __break(1u);
}

uint64_t sub_1000C47EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore11BagProvider_durableObservers, v5, 33, 0);
  v3 = sub_100005574(&qword_100491178);
  WeakArray.remove(_:)(a2, v3);
  return swift_endAccess(v5);
}

double sub_1000C4864()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t Strong;
  char *v20;
  uint64_t v21;
  double result;

  v1 = v0;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC9MusicCore11BagProvider_result);
  if (!*(_BYTE *)(v0 + OBJC_IVAR____TtC9MusicCore11BagProvider_result + 8))
  {
    v13 = v2;
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc(12, -1);
      *(_DWORD *)v16 = 134217984;
      *(_QWORD *)(v16 + 4) = objc_msgSend(v13, "code");

      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Error retrieving bag: %ld", (uint8_t *)v16, 0xCu);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {

    }
    v17 = *(char **)(v1 + OBJC_IVAR____TtC9MusicCore11BagProvider_retry);
    v18 = &v17[OBJC_IVAR____TtCC9MusicCore11BagProviderP33_D1F028703756EAFCB4E62A24E619467F5Retry_provider];
    Strong = swift_weakLoadStrong(&v17[OBJC_IVAR____TtCC9MusicCore11BagProviderP33_D1F028703756EAFCB4E62A24E619467F5Retry_provider]);
    swift_weakAssign(v18, v1);
    v20 = v17;
    swift_retain(v1);
    sub_1000C4D34(Strong, v21);

    swift_release(Strong);
    v12 = v1;
    goto LABEL_11;
  }
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC9MusicCore11BagProvider_result + 8) == 1)
  {
    v3 = v2;
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Successfully loaded a bag from iTunesCloud", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

    v7 = *(char **)(v1 + OBJC_IVAR____TtC9MusicCore11BagProvider_retry);
    v8 = &v7[OBJC_IVAR____TtCC9MusicCore11BagProviderP33_D1F028703756EAFCB4E62A24E619467F5Retry_provider];
    v9 = swift_weakLoadStrong(&v7[OBJC_IVAR____TtCC9MusicCore11BagProviderP33_D1F028703756EAFCB4E62A24E619467F5Retry_provider]);
    swift_weakAssign(v8, 0);
    v10 = v7;
    sub_1000C4D34(v9, v11);

    v12 = v9;
LABEL_11:
    *(_QWORD *)&result = swift_release(v12).n128_u64[0];
  }
  return result;
}

void sub_1000C4AA4(uint64_t a1, void *a2, char a3, char a4, uint64_t *a5)
{
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20[24];
  char v21[24];

  v8 = a1 + OBJC_IVAR____TtC9MusicCore11BagProvider_result;
  v9 = *(void **)(a1 + OBJC_IVAR____TtC9MusicCore11BagProvider_result);
  *(_QWORD *)v8 = a2;
  *(_BYTE *)(v8 + 8) = a3;
  v10 = a2;

  sub_1000C4864();
  if ((a4 & 1) != 0)
  {
    v11 = (uint64_t *)(a1 + OBJC_IVAR____TtC9MusicCore11BagProvider_durableObservers);
    swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore11BagProvider_durableObservers, v21, 0, 0);
    v12 = *v11;
    v13 = type metadata accessor for BagProvider.Observer();
    v14 = swift_bridgeObjectRetain();
    v17 = WeakArray.allElements.getter(v14, v13, v15, v16);
    swift_bridgeObjectRelease(v12);
    swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore11BagProvider_singleFireObservers, v20, 0, 0);
    v18 = swift_bridgeObjectRetain();
    sub_10008A830(v18);
    v19 = *a5;
    *a5 = v17;
    swift_bridgeObjectRelease(v19);
  }
}

uint64_t BagProvider.Observer.deinit()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;

  Strong = swift_weakLoadStrong(v0 + 16);
  if (Strong)
  {
    v2 = Strong;
    __chkstk_darwin(Strong);
    UnfairLock.locked<A>(_:)((void (*)(void))sub_1000C4C5C);
    swift_release(v2);
  }
  swift_weakDestroy(v0 + 16);
  sub_10003A5C8(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return v0;
}

uint64_t sub_1000C4C5C()
{
  uint64_t v0;

  return sub_1000C47EC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t BagProvider.Observer.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;

  Strong = swift_weakLoadStrong(v0 + 16);
  if (Strong)
  {
    v2 = Strong;
    __chkstk_darwin(Strong);
    UnfairLock.locked<A>(_:)((void (*)(void))sub_1000C5C2C);
    swift_release(v2);
  }
  swift_weakDestroy(v0 + 16);
  sub_10003A5C8(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

void sub_1000C4D34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t Strong;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  char **v22;
  uint64_t v23;
  os_log_type_t v24;
  id v25;
  uint64_t v26;

  v3 = v2;
  v5 = type metadata accessor for Logger(0, a2);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v26 - v10;
  v12 = v3 + OBJC_IVAR____TtCC9MusicCore11BagProviderP33_D1F028703756EAFCB4E62A24E619467F5Retry_provider;
  Strong = swift_weakLoadStrong(v3 + OBJC_IVAR____TtCC9MusicCore11BagProviderP33_D1F028703756EAFCB4E62A24E619467F5Retry_provider);
  v14 = Strong;
  if (!a1)
  {
    if (!Strong)
      return;
    swift_release(Strong);
LABEL_7:
    v15 = swift_weakLoadStrong(v12);
    swift_release(v15);
    v16 = swift_weakLoadStrong(v12);
    v17 = v16;
    if (v15)
    {
      if (v16)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v11, v16 + OBJC_IVAR____TtC9MusicCore11BagProvider_logger, v5);
        v18 = swift_release(v17);
        v19 = Logger.logObject.getter(v18);
        v20 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v19, v20))
        {
          v22 = &selRef_registerObserver_;
          goto LABEL_19;
        }
        v21 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v21 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "Beginning observation to retry loading bag", v21, 2u);
        v22 = &selRef_registerObserver_;
LABEL_14:
        swift_slowDealloc(v21, -1, -1);
LABEL_19:

        (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
        goto LABEL_20;
      }
      v22 = &selRef_registerObserver_;
    }
    else
    {
      if (v16)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v16 + OBJC_IVAR____TtC9MusicCore11BagProvider_logger, v5);
        v23 = swift_release(v17);
        v19 = Logger.logObject.getter(v23);
        v24 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v19, v24))
        {
          v22 = &selRef_unregisterObserver_;
          v11 = v9;
          goto LABEL_19;
        }
        v21 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v21 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, v24, "Stopping observation to retry loading bag", v21, 2u);
        v22 = &selRef_unregisterObserver_;
        v11 = v9;
        goto LABEL_14;
      }
      v22 = &selRef_unregisterObserver_;
    }
LABEL_20:
    v25 = objc_msgSend((id)objc_opt_self(ICEnvironmentMonitor), "sharedMonitor");
    objc_msgSend(v25, *v22, v3);

    return;
  }
  if (!Strong)
    goto LABEL_7;
  swift_release(Strong);
  if (v14 != a1)
    goto LABEL_7;
}

id sub_1000C50A8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BagProvider.Retry();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t BagProvider.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000C51D0(v0 + OBJC_IVAR____TtC9MusicCore11BagProvider____lazy_storage___signpost);
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC9MusicCore11BagProvider_lock));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC9MusicCore11BagProvider_logger;
  v3 = type metadata accessor for Logger(0, v2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v1, v3);

  return v0;
}

uint64_t sub_1000C51D0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005574(&qword_100490F10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t BagProvider.__deallocating_deinit()
{
  uint64_t v0;

  BagProvider.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000C5234()
{
  return type metadata accessor for BagProvider(0);
}

uint64_t type metadata accessor for BagProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_100490F80;
  if (!qword_100490F80)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BagProvider);
  return result;
}

void sub_1000C5278(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[11];

  v6[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_1000C5348(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v6[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4 = type metadata accessor for Logger(319, v3);
    if (v5 <= 0x3F)
    {
      v6[6] = *(_QWORD *)(v4 - 8) + 64;
      v6[7] = "\t";
      v6[8] = &unk_10038B138;
      v6[9] = &unk_10038B138;
      v6[10] = (char *)&value witness table for Builtin.UnknownObject + 64;
      swift_updateClassMetadata2(a1, 256, 11, v6, a1 + 80);
    }
  }
}

void sub_1000C5348(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100490F90)
  {
    v2 = type metadata accessor for Signpost(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100490F90);
  }
}

uint64_t type metadata accessor for BagProvider.Retry()
{
  return objc_opt_self(_TtCC9MusicCore11BagProviderP33_D1F028703756EAFCB4E62A24E619467F5Retry);
}

uint64_t initializeBufferWithCopyOfBuffer for BagProvider.Result(uint64_t a1, uint64_t a2)
{
  void *v3;
  char v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  v5 = v3;
  return a1;
}

uint64_t assignWithCopy for BagProvider.Result(uint64_t a1, uint64_t a2)
{
  void *v3;
  char v4;
  void *v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(_BYTE *)(a2 + 8);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  v6 = v3;

  return a1;
}

uint64_t initializeWithTake for BagProvider.Result(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for BagProvider.Result(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;

  return a1;
}

uint64_t getEnumTagSinglePayload for BagProvider.Result(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BagProvider.Result(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000C5504(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_1000C551C(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for BagProvider.Result()
{
  return &type metadata for BagProvider.Result;
}

void sub_1000C5544(BOOL *a1@<X8>)
{
  uint64_t v1;

  sub_1000C3998(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

NSString sub_1000C555C()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_100490EF0 = (uint64_t)result;
  return result;
}

uint64_t sub_1000C5590(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((unint64_t)a1 >> 62)
    goto LABEL_13;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v4)
  {
    v5 = 0;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
        swift_unknownObjectRelease(v6);
        if (v6 == a2)
          return v5;
      }
      else if (*(_QWORD *)(a1 + 8 * v5 + 32) == a2)
      {
        return v5;
      }
      if (__OFADD__(v5, 1))
        break;
      if (++v5 == v4)
        return 0;
    }
    __break(1u);
LABEL_13:
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter(v8);
    swift_bridgeObjectRelease(a1);
  }
  return 0;
}

uint64_t sub_1000C567C(unint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t i;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = *a1;
  v6 = swift_bridgeObjectRetain();
  v7 = sub_1000C5590(v6, a2);
  v9 = v8;
  swift_bridgeObjectRelease(v5);
  if (v2)
    return v7;
  if ((v9 & 1) == 0)
  {
    v10 = v7 + 1;
    if (__OFADD__(v7, 1))
      goto LABEL_57;
    v9 = *a1;
    if (*a1 >> 62)
    {
LABEL_58:
      if ((v9 & 0x8000000000000000) != 0)
        v29 = v9;
      else
        v29 = v9 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v30 = _CocoaArrayWrapper.endIndex.getter(v29);
      swift_bridgeObjectRelease(v9);
      if (v10 != v30)
        goto LABEL_6;
    }
    else if (v10 != *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      for (i = v7 + 5; ; ++i)
      {
        v9 = i - 4;
        v12 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
          break;
        if ((v9 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
          goto LABEL_58;
        }
        if (v9 >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_48;
        if (*(_QWORD *)(v12 + 8 * i) != a2)
          goto LABEL_11;
LABEL_31:
        v10 = i - 3;
        if (__OFADD__(v9, 1))
          goto LABEL_49;
        v23 = *a1;
        if (*a1 >> 62)
        {
          if (v23 < 0)
            v26 = *a1;
          else
            v26 = v23 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain();
          v24 = _CocoaArrayWrapper.endIndex.getter(v26);
          swift_bridgeObjectRelease(v23);
        }
        else
        {
          v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        if (v10 == v24)
          return v7;
      }
      v25 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v12);
      swift_unknownObjectRelease(v25);
      if (v25 == a2)
        goto LABEL_31;
LABEL_11:
      if (v9 == v7)
      {
LABEL_30:
        if (__OFADD__(v7++, 1))
          goto LABEL_50;
        goto LABEL_31;
      }
      v10 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, *a1);
        v10 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
        {
LABEL_16:
          if ((v9 & 0x8000000000000000) != 0)
            goto LABEL_53;
          if (v9 >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_54;
          v14 = *(_QWORD *)(v10 + 8 * i);
          swift_retain(v14);
          goto LABEL_19;
        }
      }
      else
      {
        if ((v7 & 0x8000000000000000) != 0)
          goto LABEL_51;
        if (v7 >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_52;
        v13 = *(_QWORD *)(v10 + 8 * v7 + 32);
        swift_retain(v13);
        if ((v10 & 0xC000000000000001) == 0)
          goto LABEL_16;
      }
      v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v10);
      v10 = *a1;
LABEL_19:
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v10);
      *a1 = v10;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v10 < 0 || (v10 & 0x4000000000000000) != 0)
      {
        v10 = sub_1001B7088(v10);
        *a1 = v10;
      }
      v16 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 8 * v7 + 0x20);
      *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 8 * v7 + 0x20) = v14;
      swift_release(v16);
      specialized Array._endMutation()(v17);
      v10 = *a1;
      v18 = swift_isUniquelyReferenced_nonNull_bridgeObject(*a1);
      *a1 = v10;
      if (!v18 || v10 < 0 || (v10 & 0x4000000000000000) != 0)
      {
        v10 = sub_1001B7088(v10);
        *a1 = v10;
      }
      if ((v9 & 0x8000000000000000) != 0)
        goto LABEL_55;
      v19 = v10 & 0xFFFFFFFFFFFFFF8;
      if (v9 >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_56;
      v20 = *(_QWORD *)(v19 + 8 * i);
      *(_QWORD *)(v19 + 8 * i) = v13;
      swift_release(v20);
      specialized Array._endMutation()(v21);
      goto LABEL_30;
    }
    return v7;
  }
  v27 = *a1;
  if (!((unint64_t)v27 >> 62))
    return *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v27 < 0)
    v31 = v27;
  else
    v31 = v27 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v32 = _CocoaArrayWrapper.endIndex.getter(v31);
  swift_bridgeObjectRelease(v27);
  return v32;
}

void sub_1000C5994(BOOL *a1@<X8>)
{
  uint64_t v1;

  *a1 = (*(_BYTE *)(v1 + OBJC_IVAR____TtC9MusicCore11BagProvider_isFetching) & 1) == 0
     && *(_BYTE *)(v1 + OBJC_IVAR____TtC9MusicCore11BagProvider_result + 8) != 1;
}

void sub_1000C59CC()
{
  uint64_t v0;

  *(_BYTE *)(v0 + OBJC_IVAR____TtC9MusicCore11BagProvider_isFetching) = 1;
}

void sub_1000C59E0(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000C44DC(a1, a2, v2);
}

uint64_t sub_1000C59E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000C59F8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000C5A00(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + OBJC_IVAR____TtC9MusicCore11BagProvider_deferReload);
}

void sub_1000C5A14()
{
  sub_1000C5BF0();
}

uint64_t sub_1000C5A28(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Signpost(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1000C5A64()
{
  uint64_t v0;

  *(_BYTE *)(v0 + OBJC_IVAR____TtC9MusicCore11BagProvider_isFetching) = 0;
}

uint64_t sub_1000C5A74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005574(&qword_100490F10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C5ABC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Signpost(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C5B00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005574(&qword_100490F10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C5B48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Signpost(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double sub_1000C5B8C()
{
  uint64_t v0;

  return sub_1000C4314(v0);
}

id sub_1000C5B94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  char v3;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC9MusicCore11BagProvider_result);
  v3 = *(_BYTE *)(v1 + OBJC_IVAR____TtC9MusicCore11BagProvider_result + 8);
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  return v2;
}

void sub_1000C5BD4()
{
  uint64_t v0;

  *(_BYTE *)(v0 + OBJC_IVAR____TtC9MusicCore11BagProvider_deferReload) = *(_BYTE *)(v0
                                                                                  + OBJC_IVAR____TtC9MusicCore11BagProvider_isFetching);
}

void sub_1000C5BF0()
{
  uint64_t v0;

  sub_1000C4AA4(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_BYTE *)(v0 + 32), *(_BYTE *)(v0 + 33), *(uint64_t **)(v0 + 40));
}

void sub_1000C5C14()
{
  sub_1000C5A64();
}

uint64_t sub_1000C5C2C()
{
  return sub_1000C4C5C();
}

uint64_t TabIdentifier.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000C5C74 + 4 * byte_10038B180[a1]))(0x7972617262696CLL, 0xE700000000000000);
}

uint64_t sub_1000C5C74()
{
  return 0x6F4E6E657473696CLL;
}

uint64_t sub_1000C5C90()
{
  return 0x6573776F7262;
}

uint64_t sub_1000C5CA4()
{
  return 0x6F69646172;
}

uint64_t sub_1000C5CB8()
{
  return 0x686372616573;
}

uint64_t sub_1000C5CCC()
{
  return 0x736F65646976;
}

_UNKNOWN **static TabIdentifier.allCases.getter()
{
  return &off_10043E418;
}

void sub_1000C5CF0(char *a1)
{
  sub_100028000(*a1);
}

void sub_1000C5CFC()
{
  char *v0;

  sub_1000BE3D4(*v0);
}

void sub_1000C5D04()
{
  __asm { BR              X10 }
}

uint64_t sub_1000C5D40(uint64_t a1)
{
  String.hash(into:)(a1, 0x6F4E6E657473696CLL, 0xE900000000000077);
  return swift_bridgeObjectRelease(0xE900000000000077);
}

void sub_1000C5DC0(uint64_t a1)
{
  char *v1;

  sub_1000BE7D0(a1, *v1);
}

unint64_t sub_1000C5DC8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s9MusicCore13TabIdentifierO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000C5DF4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1000C5E24 + 4 * byte_10038B18C[*v0]))();
}

void sub_1000C5E24(_QWORD *a1@<X8>)
{
  *a1 = 0x6F4E6E657473696CLL;
  a1[1] = 0xE900000000000077;
}

void sub_1000C5E44(_QWORD *a1@<X8>)
{
  *a1 = 0x6573776F7262;
  a1[1] = 0xE600000000000000;
}

void sub_1000C5E5C(_QWORD *a1@<X8>)
{
  *a1 = 0x6F69646172;
  a1[1] = 0xE500000000000000;
}

void sub_1000C5E74(_QWORD *a1@<X8>)
{
  *a1 = 0x686372616573;
  a1[1] = 0xE600000000000000;
}

void sub_1000C5E8C(_QWORD *a1@<X8>)
{
  *a1 = 0x736F65646976;
  a1[1] = 0xE600000000000000;
}

void sub_1000C5EA4(_QWORD *a1@<X8>)
{
  *a1 = &off_10043E418;
}

void sub_1000C5EB4(char *a1)
{
  sub_1000281B0(*a1);
}

void sub_1000C5EC0()
{
  char *v0;

  sub_1000BE9F8(0, *v0);
}

void sub_1000C5ECC()
{
  __asm { BR              X10 }
}

uint64_t sub_1000C5F08(uint64_t a1)
{
  String.hash(into:)(a1, 0x756F795F726F66, 0xE700000000000000);
  return swift_bridgeObjectRelease(0xE700000000000000);
}

void sub_1000C5F9C(uint64_t a1)
{
  char *v1;

  sub_1000BE9F8(a1, *v1);
}

unint64_t sub_1000C5FA4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000C6094(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000C5FD0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1000C6000 + 4 * byte_10038B199[*v0]))();
}

void sub_1000C6000(_QWORD *a1@<X8>)
{
  *a1 = 0x756F795F726F66;
  a1[1] = 0xE700000000000000;
}

void sub_1000C601C(_QWORD *a1@<X8>)
{
  *a1 = 0x6E5F6E657473696CLL;
  a1[1] = 0xEA0000000000776FLL;
}

void sub_1000C603C(_QWORD *a1@<X8>)
{
  *a1 = 0x6573776F7262;
  a1[1] = 0xE600000000000000;
}

void sub_1000C6054(_QWORD *a1@<X8>)
{
  *a1 = 0x6F69646172;
  a1[1] = 0xE500000000000000;
}

unint64_t sub_1000C6094(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10043C798, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7)
    return 7;
  else
    return v3;
}

unint64_t _s9MusicCore13TabIdentifierO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10043E368, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

unint64_t sub_1000C6128()
{
  unint64_t result;

  result = qword_100491190;
  if (!qword_100491190)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TabIdentifier, &type metadata for TabIdentifier);
    atomic_store(result, (unint64_t *)&qword_100491190);
  }
  return result;
}

unint64_t sub_1000C6170()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100491198;
  if (!qword_100491198)
  {
    v1 = sub_100005600(&qword_1004911A0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100491198);
  }
  return result;
}

unint64_t sub_1000C61C0()
{
  unint64_t result;

  result = qword_1004911A8;
  if (!qword_1004911A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TabIdentifier, &type metadata for TabIdentifier);
    atomic_store(result, (unint64_t *)&qword_1004911A8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for TabIdentifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1000C6250 + 4 * byte_10038B1A5[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1000C6284 + 4 * byte_10038B1A0[v4]))();
}

uint64_t sub_1000C6284(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C628C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C6294);
  return result;
}

uint64_t sub_1000C62A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C62A8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1000C62AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C62B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TabIdentifier()
{
  return &type metadata for TabIdentifier;
}

uint64_t getEnumTagSinglePayload for BagTabIdentifier(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BagTabIdentifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1000C63AC + 4 * byte_10038B1AF[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1000C63E0 + 4 * byte_10038B1AA[v4]))();
}

uint64_t sub_1000C63E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C63E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C63F0);
  return result;
}

uint64_t sub_1000C63FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C6404);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1000C6408(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C6410(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BagTabIdentifier()
{
  return &type metadata for BagTabIdentifier;
}

unint64_t sub_1000C6430()
{
  unint64_t result;

  result = qword_1004911B0;
  if (!qword_1004911B0)
  {
    result = swift_getWitnessTable(&unk_10038B36C, &type metadata for BagTabIdentifier);
    atomic_store(result, (unint64_t *)&qword_1004911B0);
  }
  return result;
}

uint64_t Playlist.hasActiveCollaboration.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v18;
  uint64_t v20;

  v0 = sub_100005574(&qword_1004911E0);
  __chkstk_darwin(v0);
  v2 = (char *)&v20 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100005574(&qword_1004911E8);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v20 - v8;
  Playlist.collaboration.getter(v7);
  v10 = type metadata accessor for Playlist.Collaboration(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v2, 1, v10) == 1)
  {
    sub_100008758((uint64_t)v2, &qword_1004911E0);
    v12 = type metadata accessor for Playlist.Collaborator.Status(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v9, 1, 1, v12);
LABEL_13:
    v18 = 0;
    goto LABEL_14;
  }
  Playlist.Collaboration.collaboratorStatus.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v2, v10);
  v13 = type metadata accessor for Playlist.Collaborator.Status(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v9, 1, v13) == 1)
    goto LABEL_13;
  sub_100014A7C((uint64_t)v9, (uint64_t)v6, &qword_1004911E8);
  v15 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v6, v13);
  if (v15 != enum case for Playlist.Collaborator.Status.host(_:)
    && v15 != enum case for Playlist.Collaborator.Status.joined(_:)
    && v15 != enum case for Playlist.Collaborator.Status.pending(_:))
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v13);
    goto LABEL_13;
  }
  v18 = 1;
LABEL_14:
  sub_100008758((uint64_t)v9, &qword_1004911E8);
  return v18;
}

uint64_t static Collaboration.Setup.contextualImageName(active:)(char a1)
{
  if ((a1 & 1) != 0)
    return 0x322E6E6F73726570;
  else
    return 0xD000000000000011;
}

uint64_t sub_1000C66A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C6700(a1, a2, a3, (uint64_t)&unk_1004499C8, (uint64_t)&type metadata for () + 8, (uint64_t)&unk_1004915E0);
}

uint64_t sub_1000C66C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C686C(a1, a2, a3, (uint64_t)&unk_100449BD0, (uint64_t *)&unk_100491180, (uint64_t)&unk_1004916F0);
}

uint64_t sub_1000C66E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C6700(a1, a2, a3, (uint64_t)&unk_100449978, (uint64_t)&type metadata for Bool, (uint64_t)&unk_1004915B8);
}

uint64_t sub_1000C6700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD v25[4];

  v12 = type metadata accessor for TaskPriority(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a1, 1, v12) == 1)
  {
    sub_100008758(a1, (uint64_t *)&unk_100493720);
    v14 = 7168;
    v15 = *(_QWORD *)(a3 + 16);
    if (v15)
    {
LABEL_3:
      v16 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType();
      swift_unknownObjectRetain(v15);
      v18 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
      v20 = v19;
      swift_unknownObjectRelease(v15);
      goto LABEL_6;
    }
  }
  else
  {
    v21 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
    v14 = v21 | 0x1C00;
    v15 = *(_QWORD *)(a3 + 16);
    if (v15)
      goto LABEL_3;
  }
  v18 = 0;
  v20 = 0;
LABEL_6:
  v22 = swift_allocObject(a4, 32, 7);
  *(_QWORD *)(v22 + 16) = a2;
  *(_QWORD *)(v22 + 24) = a3;
  if (v20 | v18)
  {
    v25[0] = 0;
    v25[1] = 0;
    v23 = v25;
    v25[2] = v18;
    v25[3] = v20;
  }
  else
  {
    v23 = 0;
  }
  return swift_task_create(v14, v23, a5, a6, v22);
}

uint64_t sub_1000C6850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C686C(a1, a2, a3, (uint64_t)&unk_1004499A0, &qword_1004915D0, (uint64_t)&unk_1004915C8);
}

uint64_t sub_1000C686C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD v27[4];

  v12 = type metadata accessor for TaskPriority(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a1, 1, v12);
  if ((_DWORD)v14 == 1)
  {
    sub_100008758(a1, (uint64_t *)&unk_100493720);
    v15 = 7168;
    v16 = *(_QWORD *)(a3 + 16);
    if (v16)
    {
LABEL_3:
      v17 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType();
      swift_unknownObjectRetain(v16);
      v19 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v17);
      v21 = v20;
      swift_unknownObjectRelease(v16);
      goto LABEL_6;
    }
  }
  else
  {
    v22 = TaskPriority.rawValue.getter(v14);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
    v15 = v22 | 0x1C00;
    v16 = *(_QWORD *)(a3 + 16);
    if (v16)
      goto LABEL_3;
  }
  v19 = 0;
  v21 = 0;
LABEL_6:
  v23 = swift_allocObject(a4, 32, 7);
  *(_QWORD *)(v23 + 16) = a2;
  *(_QWORD *)(v23 + 24) = a3;
  v24 = sub_100005574(a5);
  if (v21 | v19)
  {
    v27[0] = 0;
    v27[1] = 0;
    v25 = v27;
    v27[2] = v19;
    v27[3] = v21;
  }
  else
  {
    v25 = 0;
  }
  return swift_task_create(v15, v25, v24, a6, v23);
}

uint64_t sub_1000C69C8(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[9];

  if (*(_QWORD *)(a2 + 16))
  {
    Hasher.init(_seed:)(v9);
    v4 = ApplicationCapabilities.Service.rawValue.getter(a1);
    v6 = v5;
    String.hash(into:)(v9, v4, v5);
    swift_bridgeObjectRelease(v6);
    v7 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(a2 + 32));
    if (((*(_QWORD *)(a2 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
      __asm { BR              X9 }
  }
  return 0;
}

uint64_t sub_1000C6D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  _QWORD v20[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20);
    String.hash(into:)(v20, a1, a2);
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = v11[1];
      v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0) & 1) != 0)
        return 1;
      v15 = ~v7;
      v16 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
      {
        while (1)
        {
          v17 = (_QWORD *)(v10 + 16 * v16);
          v18 = v17[1];
          v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
            break;
          result = 0;
          v16 = (v16 + 1) & v15;
          if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_1000C6EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for AudioVariant(0);
  v19 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (v7 = *(_QWORD *)(a2 + 40),
        v8 = sub_100006924(&qword_100491618, (uint64_t (*)(uint64_t))&type metadata accessor for AudioVariant, (uint64_t)&protocol conformance descriptor for AudioVariant), v9 = dispatch thunk of Hashable._rawHashValue(seed:)(v7, v4, v8), v10 = -1 << *(_BYTE *)(a2 + 32), v11 = v9 & ~v10, ((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0))
  {
    v12 = ~v10;
    v13 = *(_QWORD *)(v19 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
    do
    {
      v14(v6, *(_QWORD *)(a2 + 48) + v13 * v11, v4);
      v15 = sub_100006924(&qword_100491620, (uint64_t (*)(uint64_t))&type metadata accessor for AudioVariant, (uint64_t)&protocol conformance descriptor for AudioVariant);
      v16 = dispatch thunk of static Equatable.== infix(_:_:)(v6, a1, v4, v15);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
      if ((v16 & 1) != 0)
        break;
      v11 = (v11 + 1) & v12;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t sub_1000C704C(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[10];

  if (*(_QWORD *)(a2 + 16))
  {
    Hasher.init(_seed:)(v8);
    v4 = Library.Menu.Identifier.rawValue.getter(a1);
    String.hash(into:)(v8, v4, v5);
    swift_bridgeObjectRelease();
    v6 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(a2 + 32));
    if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
      __asm { BR              X9 }
  }
  return 0;
}

uint64_t sub_1000C73B0(int a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  Hasher.init(_seed:)(&v24);
  v4 = SortOptions.ContentType.identifier.getter(a1);
  String.hash(into:)(&v24, v4, v5);
  swift_bridgeObjectRelease();
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(a2 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
    return 0;
  v9 = ~v7;
  while (1)
  {
    v10 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v8);
    v11 = v10 >> 6;
    if (v10 >> 6)
      break;
    if (a1 >= 0x40u)
    {
      Hasher.init(_seed:)(&v24);
      v21 = v26;
      v22 = v27;
      v23 = v28;
      v19 = v24;
      v20 = v25;
      v14 = (v10 & 1) == 0;
      if ((v10 & 1) != 0)
        v15 = 0xD000000000000011;
      else
        v15 = 0x646956636973756DLL;
      v16 = 0xEB00000000736F65;
      v13 = 0x80000001003B0630;
      goto LABEL_34;
    }
    if (((v10 ^ a1) & 1) == 0)
      return 1;
LABEL_4:
    v8 = (v8 + 1) & v9;
    if (((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
      return 0;
  }
  if (v11 == 1)
  {
    if ((a1 & 0xC0) != 0x40)
    {
      Hasher.init(_seed:)(&v24);
      v21 = v26;
      v22 = v27;
      v23 = v28;
      v19 = v24;
      v20 = v25;
      __asm { BR              X9 }
    }
    if (((v10 ^ a1) & 0x3F) == 0)
      return 1;
    goto LABEL_4;
  }
  if (v11 != 3)
  {
    Hasher.init(_seed:)(&v24);
    v21 = v26;
    v22 = v27;
    v23 = v28;
    v19 = v24;
    v20 = v25;
    if ((v10 & 1) != 0)
      v15 = 0xD000000000000018;
    else
      v15 = 0x7473696C79616C70;
    if ((v10 & 1) != 0)
      v17 = 0x80000001003B05F0;
    else
      v17 = 0xE900000000000073;
    goto LABEL_37;
  }
  if (v10 != 192 || a1 != 192)
  {
    Hasher.init(_seed:)(&v24);
    v21 = v26;
    v22 = v27;
    v23 = v28;
    v19 = v24;
    v20 = v25;
    v12 = 0x7473696C79616C70;
    if (v10 == 193)
      v12 = 0x736569766F6DLL;
    v13 = 0xEE006C6961746544;
    if (v10 == 193)
      v13 = 0xE600000000000000;
    v14 = v10 == 192;
    if (v10 == 192)
      v15 = 0x73676E6F73;
    else
      v15 = v12;
    v16 = 0xE500000000000000;
LABEL_34:
    if (v14)
      v17 = v16;
    else
      v17 = v13;
LABEL_37:
    String.hash(into:)(&v19, v15, v17);
    swift_bridgeObjectRelease();
    Hasher._finalize()();
    Hasher.init(_seed:)(&v19);
    __asm { BR              X8 }
  }
  return 1;
}

BOOL sub_1000C792C(unsigned __int8 a1, uint64_t a2)
{
  Swift::UInt v3;
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  int v12;
  _QWORD v13[9];

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v3 = a1;
  Hasher.init(_seed:)(v13);
  Hasher._combine(_:)(v3);
  v4 = Hasher._finalize()();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(unsigned __int8 *)(v8 + v6) == (_DWORD)v3)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(unsigned __int8 *)(v8 + v11);
    result = v12 == (_DWORD)v3;
    if (v12 == (_DWORD)v3)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

void sub_1000C7A18()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  NSString v3;

  v0 = type metadata accessor for Collaboration.ArtworkCachingReference();
  v1 = swift_allocObject(v0, 32, 7);
  *(_QWORD *)(v1 + 16) = 0xD000000000000027;
  *(_QWORD *)(v1 + 24) = 0x80000001003ACF40;
  v2 = (void *)objc_opt_self(MPArtworkCatalog);
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setCacheLimit:forCacheIdentifier:cacheReference:", 100, v3, v1);

  static Collaboration.artworkCaching = v1;
}

uint64_t *Collaboration.artworkCaching.unsafeMutableAddressor()
{
  if (qword_10048C730 != -1)
    swift_once(&qword_10048C730, sub_1000C7A18);
  return &static Collaboration.artworkCaching;
}

uint64_t static Collaboration.artworkCaching.getter()
{
  _BYTE v1[24];

  if (qword_10048C730 != -1)
    swift_once(&qword_10048C730, sub_1000C7A18);
  swift_beginAccess(&static Collaboration.artworkCaching, v1, 0, 0);
  return swift_retain(static Collaboration.artworkCaching);
}

double static Collaboration.artworkCaching.setter(uint64_t a1)
{
  uint64_t v2;
  double result;
  _BYTE v4[24];

  if (qword_10048C730 != -1)
    swift_once(&qword_10048C730, sub_1000C7A18);
  swift_beginAccess(&static Collaboration.artworkCaching, v4, 1, 0);
  v2 = static Collaboration.artworkCaching;
  static Collaboration.artworkCaching = a1;
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

uint64_t (*static Collaboration.artworkCaching.modify(uint64_t a1))(_QWORD)
{
  if (qword_10048C730 != -1)
    swift_once(&qword_10048C730, sub_1000C7A18);
  swift_beginAccess(&static Collaboration.artworkCaching, a1, 33, 0);
  return j__swift_endAccess;
}

id sub_1000C7C40()
{
  id result;

  result = sub_1000C7C5C();
  static Collaboration.requiredProperties = (uint64_t)result;
  return result;
}

id sub_1000C7C5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Class isa;
  id v23;
  id v24;
  Class v25;
  Class v26;
  id v27;
  _BYTE v29[56];

  v0 = sub_100005574((uint64_t *)&unk_100491700);
  v1 = swift_allocObject(v0, 272, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100384AF0;
  *(_QWORD *)(v1 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistArtwork);
  *(_QWORD *)(v1 + 40) = v2;
  *(_QWORD *)(v1 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistIsOwner);
  *(_QWORD *)(v1 + 56) = v3;
  *(_QWORD *)(v1 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistEditorialArtwork);
  *(_QWORD *)(v1 + 72) = v4;
  *(_QWORD *)(v1 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistName);
  *(_QWORD *)(v1 + 88) = v5;
  *(_QWORD *)(v1 + 96) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistType);
  *(_QWORD *)(v1 + 104) = v6;
  *(_QWORD *)(v1 + 112) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistUserEditableComponents);
  *(_QWORD *)(v1 + 120) = v7;
  *(_QWORD *)(v1 + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistVisiblePlaylist);
  *(_QWORD *)(v1 + 136) = v8;
  *(_QWORD *)(v1 + 144) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistCuratorPlaylist);
  *(_QWORD *)(v1 + 152) = v9;
  *(_QWORD *)(v1 + 160) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistSubscribed);
  *(_QWORD *)(v1 + 168) = v10;
  *(_QWORD *)(v1 + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistIsCollaborative);
  *(_QWORD *)(v1 + 184) = v11;
  *(_QWORD *)(v1 + 192) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistCollaboratorStatus);
  *(_QWORD *)(v1 + 200) = v12;
  *(_QWORD *)(v1 + 208) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistCollaborationMode);
  *(_QWORD *)(v1 + 216) = v13;
  *(_QWORD *)(v1 + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistCollaboratorPermissions);
  *(_QWORD *)(v1 + 232) = v14;
  *(_QWORD *)(v1 + 240) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistCollaborationInvitationURL);
  *(_QWORD *)(v1 + 248) = v15;
  *(_QWORD *)(v1 + 256) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistCollaborationInvitationURLExpirationDate);
  *(_QWORD *)(v1 + 264) = v16;
  v17 = sub_100005574((uint64_t *)&unk_1004912A0);
  inited = swift_initStackObject(v17, v29);
  *(_OWORD *)(inited + 16) = xmmword_100384A80;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelRelationshipPlaylistCurator);
  *(_QWORD *)(inited + 40) = v19;
  v20 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v20 + 16) = xmmword_100384A80;
  *(_QWORD *)(v20 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyCuratorName);
  *(_QWORD *)(v20 + 40) = v21;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v23 = objc_msgSend((id)objc_opt_self(MPPropertySet), "propertySetWithProperties:", isa);

  *(_QWORD *)(inited + 48) = v23;
  sub_100098EAC(inited);
  v24 = objc_allocWithZone((Class)MPPropertySet);
  v25 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_1000087DC(0, (unint64_t *)&qword_1004918E0, MPPropertySet_ptr);
  v26 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v27 = objc_msgSend(v24, "initWithProperties:relationships:", v25, v26);

  return v27;
}

uint64_t *Collaboration.requiredProperties.unsafeMutableAddressor()
{
  if (qword_10048C738 != -1)
    swift_once(&qword_10048C738, sub_1000C7C40);
  return &static Collaboration.requiredProperties;
}

id static Collaboration.requiredProperties.getter()
{
  _BYTE v1[24];

  if (qword_10048C738 != -1)
    swift_once(&qword_10048C738, sub_1000C7C40);
  swift_beginAccess(&static Collaboration.requiredProperties, v1, 0, 0);
  return (id)static Collaboration.requiredProperties;
}

void static Collaboration.requiredProperties.setter(uint64_t a1)
{
  void *v2;
  _BYTE v3[24];

  if (qword_10048C738 != -1)
    swift_once(&qword_10048C738, sub_1000C7C40);
  swift_beginAccess(&static Collaboration.requiredProperties, v3, 1, 0);
  v2 = (void *)static Collaboration.requiredProperties;
  static Collaboration.requiredProperties = a1;

}

uint64_t (*static Collaboration.requiredProperties.modify(uint64_t a1))(_QWORD)
{
  if (qword_10048C738 != -1)
    swift_once(&qword_10048C738, sub_1000C7C40);
  swift_beginAccess(&static Collaboration.requiredProperties, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t static Collaboration.Setup.imageName(active:)(char a1)
{
  if ((a1 & 1) != 0)
    return 0x322E6E6F73726570;
  else
    return 0xD000000000000016;
}

void Collaboration.Error.errorDescription.getter(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1000C813C()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[8];

  v6[0] = 0;
  v6[1] = 0xE000000000000000;
  swift_errorRetain(v0);
  _StringGuts.grow(_:)(25);
  v2._object = (void *)0x80000001003B0380;
  v2._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v2);
  v5 = v0;
  v3 = sub_100005574((uint64_t *)&unk_1004911F0);
  _print_unlocked<A, B>(_:_:)(&v5, v6, v3, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  sub_1000D28A4(v0, v1, 0);
  return v6[0];
}

uint64_t sub_1000C82B4()
{
  uint64_t v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)&loc_1000C82A0 + 4 * byte_10038B3E2[v0]))(0x636120726F6E694DLL, 0xED0000746E756F63);
}

void sub_1000C82EC()
{
  JUMPOUT(0x1000C82A0);
}

void sub_1000C8308()
{
  JUMPOUT(0x1000C82A0);
}

double static Collaboration.Error.tapToRadarAlert()()
{
  uint64_t v0;
  double result;
  uint64_t v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[56];

  v0 = sub_100005574((uint64_t *)&unk_100493720);
  __chkstk_darwin(v0);
  v3 = &v9[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_10048CF08 != -1)
    swift_once(&qword_10048CF08, sub_1001EE2A4);
  if (static DeviceCapabilities.isInternalInstall == 1)
  {
    v4 = sub_100098FC4((uint64_t)_swiftEmptyArrayStorage);
    sub_1000DEBBC(0xD00000000000001FLL, 0x80000001003B0430, 0xD000000000000032, 0x80000001003AE4A0, (uint64_t)_swiftEmptyArrayStorage, v4, (uint64_t)_swiftEmptyArrayStorage, 1, (uint64_t)v9);
    swift_bridgeObjectRelease();
    v5 = type metadata accessor for TaskPriority(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v3, 1, 1, v5);
    v6 = swift_allocObject(&unk_1004495C0, 88, 7);
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    sub_1000149A8((uint64_t)v9, v6 + 32, &qword_100491208);
    v7 = sub_1000C686C((uint64_t)v3, (uint64_t)&unk_100491210, v6, (uint64_t)&unk_100449BD0, (uint64_t *)&unk_100491180, (uint64_t)&unk_1004916F0);
    *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000C8560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 72) = a1;
  *(_QWORD *)(v4 + 80) = a4;
  return swift_task_switch(sub_1000C8578, 0, 0);
}

uint64_t sub_1000C8578()
{
  uint64_t v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  sub_1000149A8(*(_QWORD *)(v0 + 80), v0 + 16, &qword_100491208);
  if (*(_QWORD *)(v0 + 24) && (v1 = *(int **)(v0 + 56)) != 0)
  {
    v4 = (uint64_t (*)(void))((char *)v1 + *v1);
    v2 = (_QWORD *)swift_task_alloc(v1[1]);
    *(_QWORD *)(v0 + 88) = v2;
    *v2 = v0;
    v2[1] = sub_1000C8610;
    return v4();
  }
  else
  {
    **(_BYTE **)(v0 + 72) = 1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000C8610()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 88));
  return swift_task_switch(sub_1000C8664, 0, 0);
}

uint64_t sub_1000C8664()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 72) = 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000C8674()
{
  uint64_t v0;

  Collaboration.Error.errorDescription.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t Collaboration.Object.name.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v15;

  v1 = v0;
  v2 = type metadata accessor for Playlist(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Collaboration.Object(0);
  __chkstk_darwin();
  v8 = (id *)((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000D2C94(v1, (uint64_t)v8);
  if (swift_getEnumCaseMultiPayload(v8, v6) == 1)
  {
    v9 = (*(uint64_t (**)(char *, id *, uint64_t))(v3 + 32))(v5, v8, v2);
    v10 = Playlist.name.getter(v9);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    v11 = *v8;
    v12 = objc_msgSend(*v8, "name");
    if (v12)
    {
      v13 = v12;
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);

    }
    else
    {

      return 0;
    }
  }
  return v10;
}

uint64_t Collaboration.Object.storeIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  uint64_t ObjectType;
  id v19;
  uint64_t v21;

  v1 = v0;
  v2 = type metadata accessor for Playlist(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Collaboration.Object(0);
  __chkstk_darwin();
  v8 = (void **)((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000D2C94(v1, (uint64_t)v8);
  if (swift_getEnumCaseMultiPayload(v8, v6) != 1)
  {
    v13 = *v8;
    objc_opt_self(MPModelGenericObject);
    v14 = (void *)swift_dynamicCastObjCClass(v13);
    if (v14)
    {
      v15 = objc_msgSend(v14, "anyObject");
    }
    else
    {
      objc_opt_self(MPModelStoreBrowseContentItem);
      v16 = (void *)swift_dynamicCastObjCClass(v13);
      if (!v16)
        goto LABEL_10;
      v15 = objc_msgSend(v16, "innerObject");
    }
    v17 = v15;
    if (v17)
    {
LABEL_11:
      ObjectType = swift_getObjectType();
      v19 = objc_msgSend(v17, "identifiers");
      v10 = sub_10009ACF0(ObjectType, 3, 2u, v19);

      return v10;
    }
LABEL_10:
    v17 = v13;
    goto LABEL_11;
  }
  v9 = (*(uint64_t (**)(char *, void **, uint64_t))(v3 + 32))(v5, v8, v2);
  v10 = Playlist.catalogID.getter(v9);
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (!v12)
    return 0;
  return v10;
}

uint64_t Collaboration.Object.hasActiveCollaboration.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  char active;
  id v10;
  char *v11;
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for Playlist(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Collaboration.Object(0);
  __chkstk_darwin(v6);
  v8 = (id *)((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000D2C94(v1, (uint64_t)v8);
  if (swift_getEnumCaseMultiPayload(v8, v6) == 1)
  {
    (*(void (**)(char *, id *, uint64_t))(v3 + 32))(v5, v8, v2);
    active = Playlist.hasActiveCollaboration.getter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    v10 = *v8;
    v11 = (char *)objc_msgSend(*v8, "collaboratorStatus");

    active = (unint64_t)(v11 - 2) < 3;
  }
  return active & 1;
}

BOOL MPModelPlaylist.hasActiveCollaboration.getter()
{
  void *v0;

  return (char *)objc_msgSend(v0, "collaboratorStatus") - 2 < (char *)3;
}

uint64_t Collaboration.Object.isOpenInvitation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  id v16;
  id v17;
  uint64_t v19;

  v1 = v0;
  v2 = sub_100005574(&qword_1004911E0);
  __chkstk_darwin(v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Playlist(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Collaboration.Object(0);
  __chkstk_darwin(v9);
  v11 = (id *)((char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000D2C94(v1, (uint64_t)v11);
  if (swift_getEnumCaseMultiPayload(v11, v9) == 1)
  {
    v12 = (*(uint64_t (**)(char *, id *, uint64_t))(v6 + 32))(v8, v11, v5);
    Playlist.collaboration.getter(v12);
    v13 = type metadata accessor for Playlist.Collaboration(0);
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v4, 1, v13) == 1)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      sub_100008758((uint64_t)v4, &qword_1004911E0);
      v15 = 0;
    }
    else
    {
      v15 = Playlist.Collaboration.isOpenInvitation.getter();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v4, v13);
    }
  }
  else
  {
    v16 = *v11;
    v17 = objc_msgSend(*v11, "collaborationMode");

    v15 = v17 == (id)1;
  }
  return v15 & 1;
}

uint64_t Playlist.Collaboration.isOpenInvitation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t *v20;
  char v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;

  v0 = type metadata accessor for Playlist.Collaboration.InvitationMode(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100005574(&qword_100491218);
  __chkstk_darwin(v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005574(&qword_100491220);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v25 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v25 - v15;
  Playlist.Collaboration.invitationMode.getter(v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v13, enum case for Playlist.Collaboration.InvitationMode.open(_:), v0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v1 + 56))(v13, 0, 1, v0);
  v17 = (uint64_t)&v6[*(int *)(v4 + 48)];
  sub_100014A7C((uint64_t)v16, (uint64_t)v6, &qword_100491220);
  sub_100014A7C((uint64_t)v13, v17, &qword_100491220);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  if (v18((uint64_t)v6, 1, v0) == 1)
  {
    sub_100008758((uint64_t)v13, &qword_100491220);
    sub_100008758((uint64_t)v16, &qword_100491220);
    v19 = v18(v17, 1, v0);
    if (v19 == 1)
      v20 = &qword_100491220;
    else
      v20 = &qword_100491218;
    if (v19 == 1)
      v21 = -1;
    else
      v21 = 0;
  }
  else
  {
    sub_100014A7C((uint64_t)v6, (uint64_t)v10, &qword_100491220);
    if (v18(v17, 1, v0) == 1)
    {
      sub_100008758((uint64_t)v13, &qword_100491220);
      sub_100008758((uint64_t)v16, &qword_100491220);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v10, v0);
      v21 = 0;
      v20 = &qword_100491218;
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v3, v17, v0);
      v22 = sub_100006924((unint64_t *)&unk_100491228, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist.Collaboration.InvitationMode, (uint64_t)&protocol conformance descriptor for Playlist.Collaboration.InvitationMode);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v3, v0, v22);
      v23 = *(void (**)(char *, uint64_t))(v1 + 8);
      v23(v3, v0);
      v20 = &qword_100491220;
      sub_100008758((uint64_t)v13, &qword_100491220);
      sub_100008758((uint64_t)v16, &qword_100491220);
      v23(v10, v0);
    }
  }
  sub_100008758((uint64_t)v6, v20);
  return v21 & 1;
}

uint64_t Collaboration.Object.collaborationURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  id *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = v1;
  v4 = sub_100005574(&qword_1004911E0);
  __chkstk_darwin(v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Playlist(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005574(&qword_10048D510);
  __chkstk_darwin(v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Collaboration.Object(0);
  __chkstk_darwin(v14);
  v16 = (id *)((char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000D2C94(v2, (uint64_t)v16);
  if (swift_getEnumCaseMultiPayload(v16, v14) == 1)
  {
    v17 = (*(uint64_t (**)(char *, id *, uint64_t))(v8 + 32))(v10, v16, v7);
    Playlist.collaboration.getter(v17);
    v18 = type metadata accessor for Playlist.Collaboration(0);
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v6, 1, v18) == 1)
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      sub_100008758((uint64_t)v6, &qword_1004911E0);
      v20 = type metadata accessor for URL(0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 1, 1, v20);
    }
    else
    {
      Playlist.Collaboration.invitationURL.getter();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v6, v18);
    }
  }
  else
  {
    v22 = *v16;
    v23 = objc_msgSend(*v16, "collaborationInvitationURL");
    if (v23)
    {
      v24 = v23;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v23);

      v25 = type metadata accessor for URL(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v13, 0, 1, v25);
    }
    else
    {

      v26 = type metadata accessor for URL(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v13, 1, 1, v26);
    }
    return sub_1000149A8((uint64_t)v13, a1, &qword_10048D510);
  }
}

void Collaboration.Object.artwork.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = v1;
  v4 = type metadata accessor for Playlist(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Collaboration.Object(0);
  __chkstk_darwin(v8);
  v10 = (void **)((char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000D2C94(v2, (uint64_t)v10);
  if (swift_getEnumCaseMultiPayload(v10, v8) == 1)
  {
    v11 = (*(uint64_t (**)(char *, void **, uint64_t))(v5 + 32))(v7, v10, v4);
    Playlist.artwork.getter(v11);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    v12 = *v10;
    if (MPModelPlaylist.preferredArtworkCatalog.getter())
    {
      Artwork.init(_:)();

      v13 = type metadata accessor for Artwork(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a1, 0, 1, v13);
    }
    else
    {
      v14 = type metadata accessor for Artwork(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a1, 1, 1, v14);

    }
  }
}

void Collaboration.Object.lpImage.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void (*v13)(char *, void **, uint64_t);
  __n128 v14;
  uint64_t v15;
  NSString v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  double v22;
  id v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  NSString v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  id v36;
  double v37;
  NSString v38;
  id v39;
  id v40;
  uint64_t v41;
  id v42;
  char *v43;
  char v44[24];
  void **aBlock;
  uint64_t v46;
  double (*v47)(uint64_t, void *, uint64_t, uint64_t);
  void *v48;
  void *v49;
  uint64_t v50;

  v1 = type metadata accessor for Playlist(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  __chkstk_darwin();
  v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v43 = (char *)&v41 - v5;
  v6 = type metadata accessor for UTType(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Collaboration.Object(0);
  __chkstk_darwin();
  v12 = (void **)((char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v42 = objc_msgSend(objc_allocWithZone((Class)NSItemProvider), "init");
  sub_1000D2C94(v0, (uint64_t)v12);
  if (swift_getEnumCaseMultiPayload(v12, v10) == 1)
  {
    v13 = *(void (**)(char *, void **, uint64_t))(v2 + 32);
    v13(v43, v12, v1);
    v15 = static UTType.png.getter(v14);
    UTType.identifier.getter(v15);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v17 = v43;
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v43, v1);
    v18 = *(unsigned __int8 *)(v2 + 80);
    v19 = (v18 + 16) & ~v18;
    v20 = swift_allocObject(&unk_1004495E8, v19 + v3, v18 | 7);
    v13((char *)(v20 + v19), (void **)v4, v1);
    v49 = sub_1000D2D38;
    v50 = v20;
    aBlock = _NSConcreteStackBlock;
    v46 = 1107296256;
    v47 = sub_1000C9A7C;
    v48 = &unk_100449600;
    v21 = _Block_copy(&aBlock);
    *(_QWORD *)&v22 = swift_release(v50).n128_u64[0];
    v23 = v42;
    objc_msgSend(v42, "registerItemForTypeIdentifier:loadHandler:", v16, v21, v22);
    _Block_release(v21);

    (*(void (**)(char *, uint64_t))(v2 + 8))(v17, v1);
  }
  else
  {
    v24 = v6;
    v25 = v42;
    v26 = *v12;
    v27 = MPModelPlaylist.preferredArtworkCatalog.getter();
    if (v27)
    {
      v28 = v27;
      if (qword_10048C730 != -1)
        swift_once(&qword_10048C730, sub_1000C7A18);
      swift_beginAccess(&static Collaboration.artworkCaching, v44, 0, 0);
      v29 = static Collaboration.artworkCaching;
      v30 = swift_retain(static Collaboration.artworkCaching);
      v31 = static UTType.png.getter(v30);
      UTType.identifier.getter(v31);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v24);
      v32 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v33 = swift_allocObject(&unk_100449638, 32, 7);
      *(_QWORD *)(v33 + 16) = v28;
      *(_QWORD *)(v33 + 24) = v29;
      v49 = sub_1000D2DE0;
      v50 = v33;
      aBlock = _NSConcreteStackBlock;
      v46 = 1107296256;
      v47 = sub_1000C9A7C;
      v48 = &unk_100449650;
      v34 = _Block_copy(&aBlock);
      v35 = v50;
      swift_retain(v29);
      v36 = v28;
      *(_QWORD *)&v37 = swift_release(v35).n128_u64[0];
      v23 = v25;
      objc_msgSend(v25, "registerItemForTypeIdentifier:loadHandler:", v32, v34, v37);
      _Block_release(v34);

      swift_release(v29);
    }
    else
    {

      v23 = v25;
    }
  }
  v38 = String._bridgeToObjectiveC()();
  v39 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v38);

  if (v39)
  {
    v40 = objc_msgSend(objc_allocWithZone((Class)LPImage), "initWithPlatformImage:", v39);

    objc_msgSend(objc_allocWithZone((Class)LPImage), "initWithItemProvider:properties:placeholderImage:", v23, 0, v40);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000C9810(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v9;
  NSString v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[5];
  uint64_t v16;

  if (result)
  {
    v9 = result;
    swift_retain(a2);
    v10 = String._bridgeToObjectiveC()();
    objc_msgSend(a5, "setCacheIdentifier:forCacheReference:", v10, a6);

    objc_msgSend(a5, "setFittingSize:", 300.0, 300.0);
    objc_msgSend(a5, "setDestinationScale:", 0.0);
    v11 = swift_allocObject(&unk_100449B08, 32, 7);
    *(_QWORD *)(v11 + 16) = v9;
    *(_QWORD *)(v11 + 24) = a2;
    v12 = swift_allocObject(&unk_100449B30, 32, 7);
    *(_QWORD *)(v12 + 16) = sub_1000D4F38;
    *(_QWORD *)(v12 + 24) = v11;
    v15[4] = sub_1000D4F44;
    v16 = v12;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 1107296256;
    v15[2] = sub_1000AC9C8;
    v15[3] = &unk_100449B48;
    v13 = _Block_copy(v15);
    v14 = v16;
    sub_10003A434(v9, a2);
    swift_retain(v11);
    objc_msgSend(a5, "requestImageWithCompletion:", v13, swift_release(v14).n128_f64[0]);
    _Block_release(v13);
    swift_release(v11);
    return sub_10003A5C8(v9, a2);
  }
  return result;
}

void sub_1000C9990(void *a1, char a2, void (*a3)(Class, _QWORD))
{
  NSData *v5;
  Class isa;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;

  if ((a2 & 1) != 0)
  {
    v11 = a1;
    v10 = sub_100005574((uint64_t *)&unk_1004911F0);
    swift_willThrowTypedImpl(&v11, v10, &protocol self-conformance witness table for Error);
    a3(0, 0);
  }
  else
  {
    v5 = UIImagePNGRepresentation((UIImage *)a1);
    isa = (Class)v5;
    if (v5)
    {
      v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);
      v9 = v8;

      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_1000067E8(v7, v9);
    }
    a3(isa, 0);
    swift_unknownObjectRelease(isa);
    sub_1000D4F4C(a1, 0);
  }
}

double sub_1000C9A7C(uint64_t a1, void *aBlock, uint64_t ObjCClassMetadata, uint64_t a4)
{
  uint64_t v6;
  void (*v7)(void *, uint64_t, uint64_t, uint64_t, __n128);
  void *v8;
  uint64_t v9;
  __n128 v10;
  double result;

  v7 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, __n128))(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v8 = _Block_copy(aBlock);
  if (v8)
  {
    v9 = swift_allocObject(&unk_100449B80, 24, 7);
    *(_QWORD *)(v9 + 16) = v8;
    v8 = sub_1000D4F7C;
    if (!ObjCClassMetadata)
      goto LABEL_4;
    goto LABEL_3;
  }
  v9 = 0;
  if (ObjCClassMetadata)
LABEL_3:
    ObjCClassMetadata = swift_getObjCClassMetadata(ObjCClassMetadata);
LABEL_4:
  if (a4)
    a4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a4, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  v10 = swift_retain(v6);
  v7(v8, v9, ObjCClassMetadata, a4, v10);
  swift_bridgeObjectRelease();
  sub_10003A5C8((uint64_t)v8, v9);
  *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  return result;
}

void sub_1000C9B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  if (a2)
    v5 = _convertErrorToNSError(_:)(a2);
  else
    v5 = 0;
  v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);

}

double sub_1000C9BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  double result;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v8 = type metadata accessor for Playlist(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin();
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005574((uint64_t *)&unk_100493720);
  __chkstk_darwin();
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v15 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a5, v8);
    v16 = *(unsigned __int8 *)(v9 + 80);
    v17 = (v16 + 32) & ~v16;
    v18 = (v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    v19 = swift_allocObject(&unk_100449BA8, v18 + 16, v16 | 7);
    *(_QWORD *)(v19 + 16) = 0;
    *(_QWORD *)(v19 + 24) = 0;
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v19 + v17, v11, v8);
    v20 = (_QWORD *)(v19 + v18);
    *v20 = a1;
    v20[1] = a2;
    swift_retain(a2);
    v21 = sub_1000C6700((uint64_t)v14, (uint64_t)&unk_1004916C8, v19, (uint64_t)&unk_1004499C8, (uint64_t)&type metadata for () + 8, (uint64_t)&unk_1004915E0);
    *(_QWORD *)&result = swift_release(v21).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000C9D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v7 = sub_100005574(&qword_1004916D0);
  v6[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005574(&qword_1004916D8);
  v6[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005574(&qword_1004916E0);
  v6[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000C9DE0, 0, 0);
}

uint64_t sub_1000C9DE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v2 = *(_QWORD *)(v1 + 56);
  Playlist.artwork.getter(a1);
  v3 = type metadata accessor for Artwork(0);
  *(_QWORD *)(v1 + 64) = v3;
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v1 + 72) = v4;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_100008758(*(_QWORD *)(v1 + 56), &qword_1004916E0);
    (*(void (**)(_QWORD, _QWORD))(v1 + 24))(0, 0);
    v5 = *(_QWORD *)(v1 + 48);
    v6 = *(_QWORD *)(v1 + 40);
    swift_task_dealloc(*(_QWORD *)(v1 + 56));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    v8 = *(_QWORD *)(v1 + 40);
    v9 = *(_QWORD *)(v1 + 48);
    v10 = type metadata accessor for Artwork.CropStyle(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
    v11 = type metadata accessor for Artwork.ImageFormat(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v8, 1, 1, v11);
    v12 = (_QWORD *)swift_task_alloc(async function pointer to Artwork.image(width:height:pixelLength:cropStyle:format:cacheOwner:)[1]);
    *(_QWORD *)(v1 + 80) = v12;
    *v12 = v1;
    v12[1] = sub_1000C9F2C;
    return Artwork.image(width:height:pixelLength:cropStyle:format:cacheOwner:)(*(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 40), 0, 0, 300.0, 300.0, 1.0);
  }
}

uint64_t sub_1000C9F2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *v2;
  v4 = (*v2)[10];
  (*v2)[11] = a1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v6 = v3[5];
    v5 = v3[6];
    swift_errorRelease(v1);
    sub_100008758(v6, &qword_1004916D0);
    sub_100008758(v5, &qword_1004916D8);
    v7 = sub_1000CA0CC;
  }
  else
  {
    v8 = v3[8];
    v9 = v3[9];
    v11 = v3[6];
    v10 = v3[7];
    sub_100008758(v3[5], &qword_1004916D0);
    sub_100008758(v11, &qword_1004916D8);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v8);
    v7 = sub_1000CA00C;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_1000CA00C()
{
  uint64_t v0;
  NSData *v1;
  NSData *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  NSData v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = UIImagePNGRepresentation((UIImage *)*(id *)(v0 + 88));
  if (v1)
  {
    v2 = v1;
    v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v5 = v4;

    v6.super.isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000067E8(v3, v5);
  }
  else
  {
    v6.super.isa = 0;
  }
  v7 = *(void **)(v0 + 88);
  (*(void (**)(Class, _QWORD))(v0 + 24))(v6.super.isa, 0);

  swift_unknownObjectRelease(v6.super.isa);
  v8 = *(_QWORD *)(v0 + 48);
  v9 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CA0CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  (*(void (**)(_QWORD, _QWORD))(v0 + 24))(0, 0);
  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CA130()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  id *v14;
  uint64_t v15;
  char v16;
  id v17;
  unsigned __int8 v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;

  v1 = type metadata accessor for Playlist.EditableComponents(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005574((uint64_t *)&unk_100491640);
  __chkstk_darwin(v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Playlist(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Collaboration.Object(0);
  __chkstk_darwin(v12);
  v14 = (id *)((char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000D2C94(v0, (uint64_t)v14);
  if (swift_getEnumCaseMultiPayload(v14, v12) == 1)
  {
    v15 = (*(uint64_t (**)(char *, id *, uint64_t))(v9 + 32))(v11, v14, v8);
    Playlist.editableComponents.getter(v15);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      sub_100008758((uint64_t)v7, (uint64_t *)&unk_100491640);
      v16 = 0;
    }
    else
    {
      static Playlist.EditableComponents.tracklist.getter();
      v19 = sub_100006924((unint64_t *)&qword_10048DEE8, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist.EditableComponents, (uint64_t)&protocol conformance descriptor for Playlist.EditableComponents);
      v16 = dispatch thunk of SetAlgebra.isSuperset(of:)(v4, v1, v19);
      v20 = *(void (**)(char *, uint64_t))(v2 + 8);
      v20(v4, v1);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      v20(v7, v1);
    }
  }
  else
  {
    v17 = *v14;
    v18 = objc_msgSend(*v14, "userEditableComponents");

    v16 = v18 & 1;
  }
  return v16 & 1;
}

id Collaboration.Object.isOwner.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  uint64_t v9;
  char v10;
  id v11;
  id v12;
  uint64_t v14;

  v1 = v0;
  v2 = type metadata accessor for Playlist(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Collaboration.Object(0);
  __chkstk_darwin(v6);
  v8 = (id *)((char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000D2C94(v1, (uint64_t)v8);
  if (swift_getEnumCaseMultiPayload(v8, v6) == 1)
  {
    v9 = (*(uint64_t (**)(char *, id *, uint64_t))(v3 + 32))(v5, v8, v2);
    v10 = Playlist.isOwner.getter(v9);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    if (v10 == 2)
      return 0;
    else
      return (id)(v10 & 1);
  }
  else
  {
    v12 = *v8;
    v11 = objc_msgSend(*v8, "isOwner");

  }
  return v11;
}

uint64_t Collaboration.Object.ownerName.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v16;

  v1 = v0;
  v2 = type metadata accessor for Playlist(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Collaboration.Object(0);
  __chkstk_darwin();
  v8 = (id *)((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000D2C94(v1, (uint64_t)v8);
  if (swift_getEnumCaseMultiPayload(v8, v6) == 1)
  {
    v9 = (*(uint64_t (**)(char *, id *, uint64_t))(v3 + 32))(v5, v8, v2);
    v10 = Playlist.curatorName.getter(v9);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    v11 = *v8;
    v12 = objc_msgSend(*v8, "curator");
    if (v12 && (v13 = v12, v14 = objc_msgSend(v12, "name"), v13, v14))
    {
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);

    }
    else
    {

      return 0;
    }
  }
  return v10;
}

uint64_t Collaboration.Object.musicItem.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v2 = v1;
  v4 = type metadata accessor for Collaboration.Object(0);
  __chkstk_darwin();
  v6 = (uint64_t *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000D2C94(v2, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload(v6, v4) == 1)
  {
    v7 = type metadata accessor for Playlist(0);
    v8 = *(_QWORD *)(v7 - 8);
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v8 + 32))(a1, v6, v7);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
  else
  {
    v10 = *v6;
    type metadata accessor for Playlist(0);
    return dispatch thunk of LegacyModelObjectConvertible.init(_:)(v10);
  }
}

uint64_t Collaboration.Object.hasUnsupportedContent.getter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1[32] = v0;
  v2 = type metadata accessor for Playlist.Entry(0);
  v1[33] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[34] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[35] = swift_task_alloc(v4);
  v1[36] = swift_task_alloc(v4);
  v5 = sub_100005574((uint64_t *)&unk_100491240);
  v1[37] = v5;
  v1[38] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005574(&qword_10048DA30);
  v1[39] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005574(&qword_100491250);
  v1[40] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[41] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[42] = swift_task_alloc(v9);
  v1[43] = swift_task_alloc(v9);
  v10 = sub_100005574(&qword_100491258);
  v1[44] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v1[45] = v11;
  v1[46] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005574(&qword_100491260);
  v1[47] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005574(&qword_100491268);
  v1[48] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v1[49] = v14;
  v1[50] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Playlist(0);
  v1[51] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v1[52] = v16;
  v1[53] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Collaboration.Object(0);
  v1[54] = v17;
  v1[55] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000CA894, 0, 0);
}

uint64_t sub_1000CA894()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  _QWORD *v11;
  id v13;
  id v14;
  NSString v15;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  char v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  id v30;
  Class isa;
  id v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  id v37;
  Class v38;
  uint64_t v39;
  uint64_t inited;
  uint64_t v41;
  void *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  Class v47;
  Class v48;
  id v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;

  v1 = *(_QWORD *)(v0 + 432);
  v2 = *(_QWORD *)(v0 + 440);
  sub_1000D2C94(*(_QWORD *)(v0 + 256), v2);
  if (swift_getEnumCaseMultiPayload(v2, v1) == 1)
  {
    v4 = *(_QWORD *)(v0 + 416);
    v3 = *(_QWORD *)(v0 + 424);
    v5 = *(_QWORD *)(v0 + 408);
    v6 = *(_QWORD *)(v0 + 376);
    v7 = *(_QWORD *)(v0 + 384);
    v8 = *(_QWORD *)(v0 + 264);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 32))(v3, *(_QWORD *)(v0 + 440), v5);
    MusicLibraryRequest.init()(v8, &protocol witness table for Playlist.Entry);
    KeyPath = swift_getKeyPath(&unk_10038B400);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v6, v3, v5);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v6, 0, 1, v5);
    v10 = sub_100006924(&qword_100491270, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist, (uint64_t)&protocol conformance descriptor for Playlist);
    MusicLibraryRequest<>.filter<A>(matching:equalTo:)(KeyPath, v6, v7, &protocol witness table for Playlist.Entry, v10);
    swift_release(KeyPath);
    sub_100008758(v6, &qword_100491260);
    v11 = (_QWORD *)swift_task_alloc(async function pointer to MusicLibraryRequest.response()[1]);
    *(_QWORD *)(v0 + 488) = v11;
    *v11 = v0;
    v11[1] = sub_1000CB19C;
    return MusicLibraryRequest.response()(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 384));
  }
  v53 = **(void ***)(v0 + 440);
  *(_QWORD *)(v0 + 448) = v53;
  v13 = objc_msgSend(objc_allocWithZone((Class)MPModelLibraryRequest), "init");
  *(_QWORD *)(v0 + 456) = v13;
  v14 = v13;
  v15 = String._bridgeToObjectiveC()();
  objc_msgSend(v14, "setLabel:", v15);

  v16 = objc_msgSend((id)objc_opt_self(MPMediaLibrary), "deviceMediaLibrary");
  objc_msgSend(v14, "setMediaLibrary:", v16);

  v52 = sub_100005574((uint64_t *)&unk_100491910);
  v17 = swift_allocObject(v52, 56, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100384B00;
  *(_QWORD *)(v17 + 32) = objc_msgSend((id)objc_opt_self(MPModelSong), "kindWithVariants:", 7);
  v18 = (void *)objc_opt_self(NSUserDefaults);
  v19 = objc_msgSend(v18, "standardUserDefaults");
  strcpy((char *)(v0 + 232), "showAllTVShows");
  *(_BYTE *)(v0 + 247) = -18;
  v20 = sub_10000D478();
  NSUserDefaults.subscript.getter(v0 + 232, (uint64_t)&type metadata for String, v20, (_OWORD *)(v0 + 152));
  if (!*(_QWORD *)(v0 + 176))
  {
    sub_100008758(v0 + 152, &qword_100491B90);
    goto LABEL_8;
  }
  if ((swift_dynamicCast(v0 + 506, v0 + 152, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) == 0)
  {
LABEL_8:

    v22 = v0 + 216;
    goto LABEL_9;
  }
  v21 = *(_BYTE *)(v0 + 506);

  v22 = v0 + 216;
  if ((v21 & 1) != 0)
  {
    v23 = 3;
    goto LABEL_10;
  }
LABEL_9:
  v23 = 2;
LABEL_10:
  *(_QWORD *)(v17 + 40) = objc_msgSend((id)objc_opt_self(MPModelTVEpisode), "kindWithVariants:", v23);
  v24 = objc_msgSend(v18, "standardUserDefaults");
  strcpy((char *)(v0 + 216), "showAllTVShows");
  *(_BYTE *)(v0 + 231) = -18;
  v54 = v0 + 184;
  NSUserDefaults.subscript.getter(v22, (uint64_t)&type metadata for String, v20, (_OWORD *)(v0 + 184));
  if (!*(_QWORD *)(v0 + 208))
  {
    sub_100008758(v54, &qword_100491B90);
    goto LABEL_15;
  }
  if ((swift_dynamicCast(v0 + 505, v54, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) == 0)
  {
LABEL_15:

    v26 = v52;
    v27 = v53;
    goto LABEL_16;
  }
  v25 = *(_BYTE *)(v0 + 505);

  v26 = v52;
  v27 = v53;
  if ((v25 & 1) == 0)
  {
LABEL_16:
    v28 = 2;
    goto LABEL_17;
  }
  v28 = 3;
LABEL_17:
  v29 = (void *)objc_opt_self(MPModelPlaylistEntry);
  v30 = objc_msgSend((id)objc_opt_self(MPModelMovie), "kindWithVariants:", v28);
  *(_QWORD *)(v17 + 48) = v30;
  specialized Array._endMutation()(v30);
  sub_100005574((uint64_t *)&unk_100491290);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v32 = objc_msgSend(v29, "kindWithKinds:", isa);
  *(_QWORD *)(v0 + 464) = v32;

  v33 = (void *)objc_opt_self(MPModelPlaylist);
  v34 = v14;
  v35 = objc_msgSend(v33, "kindWithVariants:playlistEntryKind:options:", 215, v32, 0);
  objc_msgSend(v34, "setSectionKind:", v35);

  objc_msgSend(v34, "setItemKind:", v32);
  v36 = swift_allocObject(v26, 40, 7);
  *(_OWORD *)(v36 + 16) = xmmword_100384730;
  *(_QWORD *)(v36 + 32) = v27;
  specialized Array._endMutation()(v36);
  sub_1000087DC(0, &qword_100490B80, MPModelObject_ptr);
  v37 = v27;
  v38 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v34, "setScopedContainers:", v38);

  v39 = sub_100005574((uint64_t *)&unk_1004912A0);
  inited = swift_initStackObject(v39, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100384A40;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelRelationshipPlaylistEntrySong);
  *(_QWORD *)(inited + 40) = v41;
  v42 = (void *)objc_opt_self(MPPropertySet);
  v43 = v34;
  *(_QWORD *)(inited + 48) = objc_msgSend(v42, "emptyPropertySet");
  *(_QWORD *)(inited + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelRelationshipPlaylistEntryTVEpisode);
  *(_QWORD *)(inited + 64) = v44;
  *(_QWORD *)(inited + 72) = objc_msgSend(v42, "emptyPropertySet");
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelRelationshipPlaylistEntryMovie);
  *(_QWORD *)(inited + 88) = v45;
  *(_QWORD *)(inited + 96) = objc_msgSend(v42, "emptyPropertySet");
  sub_100098EAC(inited);
  v46 = objc_allocWithZone((Class)MPPropertySet);
  v47 = Array._bridgeToObjectiveC()().super.isa;
  sub_1000087DC(0, (unint64_t *)&qword_1004918E0, MPPropertySet_ptr);
  v48 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v49 = objc_msgSend(v46, "initWithProperties:relationships:", v47, v48);

  objc_msgSend(v43, "setItemProperties:", v49);
  v50 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 472) = v50;
  *(_QWORD *)(v50 + 16) = v43;
  v51 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 480) = v51;
  *v51 = v0;
  v51[1] = sub_1000CB064;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 504, 0, 0, 0xD000000000000015, 0x80000001003B04C0, sub_1000D2E70, v50, &type metadata for Bool);
}

uint64_t sub_1000CB064()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 472);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 480));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1000CB0C0, 0, 0);
}

uint64_t sub_1000CB0C0()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unsigned int v14;

  v1 = *(void **)(v0 + 464);
  v2 = *(void **)(v0 + 448);

  v14 = *(unsigned __int8 *)(v0 + 504);
  v3 = *(_QWORD *)(v0 + 424);
  v4 = *(_QWORD *)(v0 + 400);
  v6 = *(_QWORD *)(v0 + 368);
  v5 = *(_QWORD *)(v0 + 376);
  v8 = *(_QWORD *)(v0 + 336);
  v7 = *(_QWORD *)(v0 + 344);
  v10 = *(_QWORD *)(v0 + 304);
  v9 = *(_QWORD *)(v0 + 312);
  v11 = *(_QWORD *)(v0 + 288);
  v13 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 440));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(v14);
}

uint64_t sub_1000CB19C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 488);
  *(_QWORD *)(*(_QWORD *)v1 + 496) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000CB584;
  else
    v3 = sub_1000CB200;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000CB200(__n128 a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD *, _QWORD);
  void (*v19)(uint64_t, uint64_t);
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v2 = v1[43];
  v3 = v1[41];
  v4 = v1[42];
  v5 = v1[40];
  v7 = v1[37];
  v6 = v1[38];
  MusicLibraryResponse.items.getter(v1[44], a1);
  v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v56(v4, v2, v5);
  v8 = sub_1000D2E2C(&qword_100491278, (uint64_t)&protocol conformance descriptor for MusicItemCollection<A>);
  dispatch thunk of Sequence.makeIterator()(v5, v8);
  v9 = (uint64_t *)(v6 + *(int *)(v7 + 36));
  v10 = *v9;
  v11 = sub_1000D2E2C((unint64_t *)&qword_100491280, (uint64_t)&protocol conformance descriptor for MusicItemCollection<A>);
  v54 = v1 + 31;
  dispatch thunk of Collection.endIndex.getter(v1 + 31, v5, v11);
  if (v10 == v1[31])
  {
LABEL_5:
    v26 = v1[41];
    v27 = v1[39];
    v28 = v1[33];
    v29 = v1[34];
    sub_100008758(v1[38], (uint64_t *)&unk_100491240);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v27, 1, 1, v28);
    v19 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
  }
  else
  {
    v52 = v1[41];
    v61 = v1[34];
    v53 = v1;
    v12 = v1 + 15;
    while (1)
    {
      v13 = v1[42];
      v14 = v1[40];
      v15 = v1[38];
      v16 = v1[36];
      v58 = v1[35];
      v17 = v1[33];
      v18 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read(v12, v9, v14, v11);
      (*(void (**)(uint64_t))(v61 + 16))(v16);
      v18(v12, 0);
      v56(v13, v15, v14);
      dispatch thunk of Collection.formIndex(after:)(v9, v14, v11);
      v19 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
      v19(v13, v14);
      v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v61 + 32);
      v21 = v20(v58, v16, v17);
      Playlist.Entry.catalogID.getter(v21);
      v23 = v22;
      swift_bridgeObjectRelease();
      if (!v23)
        break;
      v1 = v53;
      v24 = v53[40];
      (*(void (**)(_QWORD, _QWORD))(v61 + 8))(v53[35], v53[33]);
      v25 = *v9;
      dispatch thunk of Collection.endIndex.getter(v54, v24, v11);
      if (v25 == v53[31])
        goto LABEL_5;
    }
    v1 = v53;
    v30 = v53[39];
    v32 = v53[34];
    v31 = v53[35];
    v33 = v53[33];
    sub_100008758(v53[38], (uint64_t *)&unk_100491240);
    v20(v30, v31, v33);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v32 + 56))(v30, 0, 1, v33);
  }
  v34 = v1[50];
  v59 = v1[51];
  v62 = v1[53];
  v36 = v1[48];
  v35 = v1[49];
  v37 = v1[45];
  v38 = v1[46];
  v39 = v1[44];
  v40 = v1[39];
  v41 = v1[34];
  v55 = v1[33];
  v57 = v1[52];
  v19(v1[43], v1[40]);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v39);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v62, v59);
  LODWORD(v62) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v40, 1, v55) != 1;
  sub_100008758(v40, &qword_10048DA30);
  v42 = v1[53];
  v43 = v1[50];
  v45 = v1[46];
  v44 = v1[47];
  v47 = v1[42];
  v46 = v1[43];
  v49 = v1[38];
  v48 = v1[39];
  v50 = v1[36];
  v60 = v1[35];
  swift_task_dealloc(v1[55]);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v60);
  return ((uint64_t (*)(_QWORD))v1[1])(v62);
}

uint64_t sub_1000CB584()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 496);
  v3 = *(_QWORD *)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 424);
  v4 = *(_QWORD *)(v0 + 408);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 392) + 8))(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 384));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_errorRelease(v1);
  v5 = *(_QWORD *)(v0 + 424);
  v6 = *(_QWORD *)(v0 + 400);
  v8 = *(_QWORD *)(v0 + 368);
  v7 = *(_QWORD *)(v0 + 376);
  v10 = *(_QWORD *)(v0 + 336);
  v9 = *(_QWORD *)(v0 + 344);
  v12 = *(_QWORD *)(v0 + 304);
  v11 = *(_QWORD *)(v0 + 312);
  v13 = *(_QWORD *)(v0 + 288);
  v15 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 440));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

void sub_1000CB674(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD aBlock[5];
  uint64_t v12;

  v4 = sub_100005574(&qword_1004921D0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = swift_allocObject(&unk_100449A40, v8 + v6, v7 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_1000D4EA0;
  v12 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000AC9C8;
  aBlock[3] = &unk_100449A58;
  v10 = _Block_copy(aBlock);
  objc_msgSend(a2, "performWithResponseHandler:", v10, swift_release(v12).n128_f64[0]);
  _Block_release(v10);
}

void sub_1000CB7A4(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  __n128 v7;
  void (*v8)(void *, uint64_t, _BYTE *);
  char v9;
  uint64_t v10;
  _QWORD aBlock[5];
  uint64_t v12;
  char v13;

  v13 = 0;
  if (!a1)
  {
    v9 = 0;
    v8 = 0;
    v3 = 0;
    goto LABEL_6;
  }
  v1 = objc_msgSend(a1, "results");
  if (v1)
  {
    v2 = v1;
    v3 = swift_allocObject(&unk_100449A90, 24, 7);
    *(_QWORD *)(v3 + 16) = &v13;
    v4 = swift_allocObject(&unk_100449AB8, 32, 7);
    *(_QWORD *)(v4 + 16) = sub_1000D4F20;
    *(_QWORD *)(v4 + 24) = v3;
    aBlock[4] = sub_100009BB0;
    v12 = v4;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000CB9C8;
    aBlock[3] = &unk_100449AD0;
    v5 = _Block_copy(aBlock);
    v6 = v12;
    swift_retain(v4);
    objc_msgSend(v2, "enumerateItemsUsingBlock:", v5, swift_release(v6).n128_f64[0]);

    _Block_release(v5);
    LOBYTE(v2) = swift_isEscapingClosureAtFileLocation(v4, "", 128, 264, 62, 1, v7);
    swift_release(v4);
    if ((v2 & 1) == 0)
    {
      v8 = sub_1000D4F20;
      v9 = v13;
LABEL_6:
      LOBYTE(aBlock[0]) = v9;
      v10 = sub_100005574(&qword_1004921D0);
      CheckedContinuation.resume(returning:)(aBlock, v10);
      sub_10003A5C8((uint64_t)v8, v3);
      return;
    }
    __break(1u);
  }
  __break(1u);
}

void sub_1000CB934(void *a1, uint64_t a2, _BYTE *a3, _BYTE *a4)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v6 = objc_msgSend(a1, "anyObject");
  if (v6)
  {
    v9 = v6;
    MPModelObject.bestIdentifier(for:)(2, 1u);
    v8 = v7;
    swift_bridgeObjectRelease();
    if (!v8)
    {
      *a4 = 1;
      *a3 = 1;
    }

  }
}

uint64_t sub_1000CB9C8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (*v10)(void);
  id v11;
  uint64_t v13;

  v6 = type metadata accessor for IndexPath(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void (**)(void))(a1 + 32);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v11 = a2;
  v10();

  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t Collaboration.Object.duplicate()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1[2] = v0;
  v2 = type metadata accessor for MusicLibraryPlaylistResponse(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for MusicLibraryPlaylistRequest(0);
  v1[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[7] = v5;
  v1[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Playlist(0);
  v1[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[10] = v7;
  v1[11] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Collaboration.Object(0);
  v1[12] = v8;
  v1[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000CBB58, 0, 0);
}

id sub_1000CBB58()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  int EnumCaseMultiPayload;
  uint64_t *v4;
  uint64_t v5;
  uint64_t **v6;
  id result;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t **v12;

  v1 = v0[12];
  v2 = v0[13];
  sub_1000D2C94(v0[2], v2);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v2, v1);
  v4 = (uint64_t *)v0[13];
  if (EnumCaseMultiPayload == 1)
  {
    v5 = v0[11];
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v0[10] + 32))(v5, v4, v0[9]);
    static MusicLibraryPlaylistRequest.duplicatingPlaylist(_:)(v5);
    v6 = (uint64_t **)swift_task_alloc(async function pointer to MusicLibraryPlaylistRequest.response()[1]);
    v0[19] = (uint64_t)v6;
    *v6 = v0;
    v6[1] = (uint64_t *)sub_1000CBDB0;
    return (id)MusicLibraryPlaylistRequest.response()(v0[5]);
  }
  else
  {
    v8 = *v4;
    v0[14] = *v4;
    result = objc_msgSend((id)objc_opt_self(MPMediaLibrary), "deviceMediaLibrary");
    if (result)
    {
      v9 = result;
      v10 = objc_msgSend(objc_allocWithZone((Class)MPModelLibraryDuplicatePlaylistChangeRequest), "initWithLibrary:playlist:", result, v8);
      v0[15] = (uint64_t)v10;

      v11 = swift_task_alloc(32);
      v0[16] = v11;
      *(_QWORD *)(v11 + 16) = v10;
      v12 = (uint64_t **)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
      v0[17] = (uint64_t)v12;
      *v12 = v0;
      v12[1] = (uint64_t *)sub_1000CBCD8;
      return (id)withCheckedThrowingContinuation<A>(isolation:function:_:)(v12, 0, 0, 0x746163696C707564, 0xEB00000000292865, sub_1000D2E78, v11, (char *)&type metadata for () + 8);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1000CBCD8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 136);
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000CBEA8;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 128));
    v4 = sub_1000CBD44;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000CBD44()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 120);

  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CBDB0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000CBF20;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v2[4] + 8))(v2[5], v2[3]);
    v4 = sub_1000CBE24;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000CBE24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CBEA8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);

  swift_task_dealloc(v2);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CBF20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000CBFA4(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD aBlock[5];
  uint64_t v12;

  v4 = sub_100005574((uint64_t *)&unk_100491650);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = swift_allocObject(&unk_1004499F0, v8 + v6, v7 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_1000D4E24;
  v12 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000CC138;
  aBlock[3] = &unk_100449A08;
  v10 = _Block_copy(aBlock);
  objc_msgSend(a2, "performWithResponseHandler:", v10, swift_release(v12).n128_f64[0]);
  _Block_release(v10);
}

uint64_t sub_1000CC0D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v5 = a2;
    swift_errorRetain(a2);
    v2 = sub_100005574((uint64_t *)&unk_100491650);
    return CheckedContinuation.resume(throwing:)(&v5, v2);
  }
  else
  {
    v4 = sub_100005574((uint64_t *)&unk_100491650);
    return CheckedContinuation.resume(returning:)(v4, v4);
  }
}

void sub_1000CC138(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  id v7;

  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

uint64_t Collaboration.Manager.__allocating_init(coordinator:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, 56, 7);
  sub_1000137C8(a1, v3 + 16);
  return v3;
}

uint64_t Collaboration.Manager.init(coordinator:)(__int128 *a1)
{
  uint64_t v1;

  sub_1000137C8(a1, v1 + 16);
  return v1;
}

uint64_t GroupActivitiesManager.coordinator.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + 16;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_1000244B0(v3, a1);
}

id Collaboration.Manager.participantProfile.getter()
{
  id v0;
  id v1;
  id v2;
  id v3;

  v0 = objc_msgSend((id)objc_opt_self(ICMediaUserStateCenter), "shared");
  v1 = objc_msgSend(v0, "activeUserState");

  v2 = objc_msgSend(v1, "music");
  v3 = objc_msgSend(v2, "userProfile");

  return v3;
}

void Collaboration.Manager.supportsCollaboration(for:)(uint64_t a1)
{
  sub_1000D2E80(a1);
}

uint64_t Collaboration.Manager.isCollaborationSupported(for:)(uint64_t a1)
{
  return sub_1000CC57C(a1);
}

uint64_t Logger.collaboration.unsafeMutableAddressor(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (qword_10048C740 != -1)
    swift_once(&qword_10048C740, sub_1000D1FD4);
  v2 = type metadata accessor for Logger(0, a2);
  return sub_1000086B4(v2, (uint64_t)static Logger.collaboration);
}

void Collaboration.Manager.canCollaborate(for:)()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  id v8;
  void *v9;
  unsigned __int8 v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;

  if (qword_10048C658 != -1)
    swift_once(&qword_10048C658, sub_1000B3BEC);
  v0 = static ApplicationCapabilities.Controller.shared;
  KeyPath = swift_getKeyPath(&unk_10038B430);
  v2 = swift_getKeyPath(&unk_10038B458);
  static Published.subscript.getter(&v13, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  v3 = v15;
  if ((v14 & 1) == 0)
  {
    v4 = sub_1000D3204();
    swift_allocError(&type metadata for Collaboration.Error, v4, 0, 0);
    v7 = 3;
LABEL_10:
    *(_QWORD *)v5 = v7;
    goto LABEL_11;
  }
  if (!BYTE2(v13))
  {
    v12 = sub_1000D3204();
    swift_allocError(&type metadata for Collaboration.Error, v12, 0, 0);
    v7 = 6;
    goto LABEL_10;
  }
  v16 = v15;
  v8 = objc_msgSend((id)objc_opt_self(MPCloudController), "sharedCloudController");
  if (v8)
  {
    v9 = v8;
    v10 = objc_msgSend(v8, "isInitialImport");

    if ((v10 & 1) != 0)
    {
      v11 = sub_1000D3204();
      swift_allocError(&type metadata for Collaboration.Error, v11, 0, 0);
      *(_QWORD *)v5 = 7;
      v3 = v16;
LABEL_11:
      *(_QWORD *)(v5 + 8) = 0;
      *(_BYTE *)(v5 + 16) = 3;
      swift_willThrow(v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  else
  {
    __break(1u);
  }
}

uint64_t Collaboration.Manager.isCollaborationPossible(for:)(uint64_t a1)
{
  return sub_1000CC57C(a1);
}

uint64_t sub_1000CC57C(uint64_t a1)
{
  sub_1000D2E80(a1);
  return 1;
}

uint64_t *Collaboration.Manager.DeepLinkType.actionKey.unsafeMutableAddressor()
{
  return &static Collaboration.Manager.DeepLinkType.actionKey;
}

uint64_t static Collaboration.Manager.DeepLinkType.actionKey.getter()
{
  return sub_1000CC7BC(&static Collaboration.Manager.DeepLinkType.actionKey);
}

uint64_t static Collaboration.Manager.DeepLinkType.actionKey.setter(uint64_t a1, uint64_t a2)
{
  return sub_1000CC81C(a1, a2, &static Collaboration.Manager.DeepLinkType.actionKey, &qword_1004911C8);
}

uint64_t (*static Collaboration.Manager.DeepLinkType.actionKey.modify(uint64_t a1))(_QWORD)
{
  swift_beginAccess(&static Collaboration.Manager.DeepLinkType.actionKey, a1, 33, 0);
  return j_j__swift_endAccess;
}

void *Collaboration.Manager.DeepLinkType.profileKey.unsafeMutableAddressor()
{
  return &static Collaboration.Manager.DeepLinkType.profileKey;
}

uint64_t static Collaboration.Manager.DeepLinkType.profileKey.getter()
{
  return sub_1000CC7BC((uint64_t *)&static Collaboration.Manager.DeepLinkType.profileKey);
}

uint64_t sub_1000CC7BC(uint64_t *a1)
{
  uint64_t v2;
  _BYTE v4[24];

  swift_beginAccess(a1, v4, 0, 0);
  v2 = *a1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t static Collaboration.Manager.DeepLinkType.profileKey.setter(uint64_t a1, uint64_t a2)
{
  return sub_1000CC81C(a1, a2, static Collaboration.Manager.DeepLinkType.profileKey, &static Collaboration.Manager.DeepLinkType.profileKey[1]);
}

uint64_t sub_1000CC81C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v8;
  _BYTE v10[24];

  swift_beginAccess(a3, v10, 1, 0);
  v8 = *a4;
  *a3 = a1;
  *a4 = a2;
  return swift_bridgeObjectRelease(v8);
}

uint64_t (*static Collaboration.Manager.DeepLinkType.profileKey.modify(uint64_t a1))(_QWORD)
{
  swift_beginAccess(&static Collaboration.Manager.DeepLinkType.profileKey, a1, 33, 0);
  return j_j__swift_endAccess;
}

MusicCore::Collaboration::Manager::DeepLinkType_optional __swiftcall Collaboration.Manager.DeepLinkType.init(_:)(Swift::OpaquePointer a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  Swift::Int v10;
  MusicCore::Collaboration::Manager::DeepLinkType_optional v11;
  _BYTE v13[24];

  swift_beginAccess(&static Collaboration.Manager.DeepLinkType.actionKey, v13, 0, 0);
  if (!*((_QWORD *)a1._rawValue + 2))
    goto LABEL_10;
  v2 = qword_1004911C8;
  v3 = static Collaboration.Manager.DeepLinkType.actionKey;
  swift_bridgeObjectRetain();
  v4 = sub_10009ABAC(v3, v2);
  if ((v5 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_10:
    swift_bridgeObjectRelease();
    return (MusicCore::Collaboration::Manager::DeepLinkType_optional)2;
  }
  v6 = (uint64_t *)(*((_QWORD *)a1._rawValue + 7) + 16 * v4);
  v7 = *v6;
  v8 = (void *)v6[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = v7;
  v9._object = v8;
  v10 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10043E440, v9);
  swift_bridgeObjectRelease();
  if (v10 == 1)
    v11.value = MusicCore_Collaboration_Manager_DeepLinkType_pending;
  else
    v11.value = MusicCore_Collaboration_Manager_DeepLinkType_unknownDefault;
  if (v10)
    return v11;
  else
    return 0;
}

MusicCore::Collaboration::Manager::DeepLinkType_optional __swiftcall Collaboration.Manager.DeepLinkType.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  MusicCore::Collaboration::Manager::DeepLinkType_optional v4;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10043E440, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1)
    v4.value = MusicCore_Collaboration_Manager_DeepLinkType_pending;
  else
    v4.value = MusicCore_Collaboration_Manager_DeepLinkType_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t Collaboration.Manager.DeepLinkType.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x676E69646E6570;
  else
    return 1852403562;
}

uint64_t sub_1000CCA1C(char *a1, char *a2)
{
  return sub_1000287BC(*a1, *a2);
}

Swift::Int sub_1000CCA28()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x676E69646E6570;
  else
    v2 = 1852403562;
  if (v1)
    v3 = 0xE700000000000000;
  else
    v3 = 0xE400000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1000CCAA0(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x676E69646E6570;
  else
    v2 = 1852403562;
  if (*v1)
    v3 = 0xE700000000000000;
  else
    v3 = 0xE400000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1000CCAF4()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x676E69646E6570;
  else
    v2 = 1852403562;
  if (v1)
    v3 = 0xE700000000000000;
  else
    v3 = 0xE400000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1000CCB68@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10043E440, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_1000CCBC4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1852403562;
  if (*v1)
    v2 = 0x676E69646E6570;
  v3 = 0xE400000000000000;
  if (*v1)
    v3 = 0xE700000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t Collaboration.Manager.queryItemsDictionary(for:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  Swift::Int v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _BYTE v22[24];

  v2 = sub_100005574(&qword_1004912C0);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = type metadata accessor for URLComponents(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  URLComponents.init(url:resolvingAgainstBaseURL:)(a1, 0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100008758((uint64_t)v4, &qword_1004912C0);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  v9 = URLComponents.queryItemsDictionary.getter();
  if (v9)
  {
    v10 = sub_1000D28CC((uint64_t)&off_10043E490);
    swift_arrayDestroy(&unk_10043E4B0, 2, &type metadata for String);
    v11 = swift_beginAccess(&static Collaboration.Manager.DeepLinkType.actionKey, v22, 0, 0);
    if (*(_QWORD *)(v9 + 16))
    {
      v12 = qword_1004911C8;
      v13 = static Collaboration.Manager.DeepLinkType.actionKey;
      swift_bridgeObjectRetain();
      v14 = sub_10009ABAC(v13, v12);
      if ((v15 & 1) != 0)
      {
        v16 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v14);
        v17 = *v16;
        v18 = v16[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v19 = sub_1000C6D94(v17, v18, v10);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        swift_bridgeObjectRelease();
        if ((v19 & 1) != 0)
          return v9;
        goto LABEL_11;
      }
      swift_bridgeObjectRelease();
    }
    (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(v8, v5, v11);
    swift_bridgeObjectRelease();
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v9;
}

uint64_t Collaboration.Manager.start(_:isOpen:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t started;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_BYTE *)(v3 + 328) = a3;
  *(_QWORD *)(v3 + 32) = a1;
  *(_QWORD *)(v3 + 40) = a2;
  v4 = sub_100005574(&qword_1004911E0);
  *(_QWORD *)(v3 + 48) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Playlist(0);
  *(_QWORD *)(v3 + 56) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 64) = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 72) = swift_task_alloc(v7);
  *(_QWORD *)(v3 + 80) = swift_task_alloc(v7);
  *(_QWORD *)(v3 + 88) = swift_task_alloc(v7);
  *(_QWORD *)(v3 + 96) = swift_task_alloc(v7);
  v8 = type metadata accessor for URL(0);
  *(_QWORD *)(v3 + 104) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v3 + 112) = v9;
  *(_QWORD *)(v3 + 120) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*(_QWORD *)(*(_QWORD *)(sub_100005574(&qword_10048D510) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 128) = swift_task_alloc(v10);
  *(_QWORD *)(v3 + 136) = swift_task_alloc(v10);
  v11 = type metadata accessor for Playlist.Collaboration.InvitationMode(0);
  *(_QWORD *)(v3 + 144) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v3 + 152) = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 160) = swift_task_alloc(v13);
  *(_QWORD *)(v3 + 168) = swift_task_alloc(v13);
  v14 = sub_100005574((uint64_t *)&unk_1004912D0);
  *(_QWORD *)(v3 + 176) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  started = type metadata accessor for MusicCollaborativePlaylist.StartCollaborationRequest(0);
  *(_QWORD *)(v3 + 184) = started;
  v16 = *(_QWORD *)(started - 8);
  *(_QWORD *)(v3 + 192) = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 200) = swift_task_alloc(v17);
  *(_QWORD *)(v3 + 208) = swift_task_alloc(v17);
  v18 = type metadata accessor for Collaboration.Object(0);
  *(_QWORD *)(v3 + 216) = v18;
  *(_QWORD *)(v3 + 224) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v18 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v3 + 232) = static MainActor.shared.getter(v19);
  v20 = dispatch thunk of Actor.unownedExecutor.getter(v19, &protocol witness table for MainActor);
  *(_QWORD *)(v3 + 240) = v20;
  *(_QWORD *)(v3 + 248) = v21;
  return swift_task_switch(sub_1000CD010, v20, v21);
}

uint64_t sub_1000CD010(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  void (*v22)(uint64_t, void **, uint64_t);
  void (*v23)(uint64_t, uint64_t, uint64_t);
  unsigned int *v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  void *v34;
  void (*v35)(uint64_t, _QWORD, uint64_t);
  unsigned int *v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  if (qword_10048C740 != -1)
    swift_once(&qword_10048C740, sub_1000D1FD4);
  v3 = type metadata accessor for Logger(0, a2);
  v4 = sub_1000086B4(v3, (uint64_t)static Logger.collaboration);
  *(_QWORD *)(v2 + 256) = v4;
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(unsigned __int8 *)(v2 + 328);
    v8 = swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 67240192;
    *(_DWORD *)(v8 + 4) = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Start called - isOpenInvite=%{BOOL,public}d", (uint8_t *)v8, 8u);
    swift_slowDealloc(v8, -1, -1);
  }
  v10 = *(_QWORD *)(v2 + 216);
  v9 = *(_QWORD *)(v2 + 224);
  v11 = *(_QWORD *)(v2 + 40);

  sub_1000D2C94(v11, v9);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v10);
  v13 = *(void ***)(v2 + 224);
  if (EnumCaseMultiPayload == 1)
  {
    v15 = *(_QWORD *)(v2 + 152);
    v14 = *(_QWORD *)(v2 + 160);
    v16 = *(_QWORD *)(v2 + 144);
    v18 = *(_QWORD *)(v2 + 88);
    v17 = *(_QWORD *)(v2 + 96);
    v19 = *(_QWORD *)(v2 + 56);
    v20 = *(_QWORD *)(v2 + 64);
    v21 = *(unsigned __int8 *)(v2 + 328);
    v22 = *(void (**)(uint64_t, void **, uint64_t))(v20 + 32);
    *(_QWORD *)(v2 + 296) = v22;
    v22(v17, v13, v19);
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
    *(_QWORD *)(v2 + 304) = v23;
    v23(v18, v17, v19);
    v24 = (unsigned int *)&enum case for Playlist.Collaboration.InvitationMode.open(_:);
    if (!v21)
      v24 = (unsigned int *)&enum case for Playlist.Collaboration.InvitationMode.requiresApproval(_:);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v15 + 104))(v14, *v24, v16);
    MusicCollaborativePlaylist.StartCollaborationRequest.init(playlist:invitationMode:)(v18, v14);
    v25 = (_QWORD *)swift_task_alloc(async function pointer to MusicCollaborativePlaylist.StartCollaborationRequest.response()[1]);
    *(_QWORD *)(v2 + 312) = v25;
    *v25 = v2;
    v25[1] = sub_1000CD9BC;
    return MusicCollaborativePlaylist.StartCollaborationRequest.response()(*(_QWORD *)(v2 + 80));
  }
  else
  {
    v27 = *(_QWORD *)(v2 + 184);
    v28 = *(_QWORD *)(v2 + 192);
    v30 = *(_QWORD *)(v2 + 168);
    v29 = *(_QWORD *)(v2 + 176);
    v31 = *(_QWORD *)(v2 + 144);
    v32 = *(_QWORD *)(v2 + 152);
    v33 = *(unsigned __int8 *)(v2 + 328);
    v34 = *v13;
    *(_QWORD *)(v2 + 264) = *v13;
    v35 = *(void (**)(uint64_t, _QWORD, uint64_t))(v32 + 104);
    if (v33)
      v36 = (unsigned int *)&enum case for Playlist.Collaboration.InvitationMode.open(_:);
    else
      v36 = (unsigned int *)&enum case for Playlist.Collaboration.InvitationMode.requiresApproval(_:);
    v35(v30, *v36, v31);
    v37 = v34;
    MusicCollaborativePlaylist.StartCollaborationRequest.init(playlist:invitationMode:)();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v29, 1, v27) == 1)
    {
      v38 = *(_QWORD *)(v2 + 176);
      swift_release(*(_QWORD *)(v2 + 232));
      sub_100008758(v38, (uint64_t *)&unk_1004912D0);
      v39 = sub_1000D3204();
      swift_allocError(&type metadata for Collaboration.Error, v39, 0, 0);
      *(_OWORD *)v40 = xmmword_100384B10;
      *(_BYTE *)(v40 + 16) = 3;
      swift_willThrow((__n128)xmmword_100384B10);

      v42 = *(_QWORD *)(v2 + 200);
      v41 = *(_QWORD *)(v2 + 208);
      v44 = *(_QWORD *)(v2 + 168);
      v43 = *(_QWORD *)(v2 + 176);
      v45 = *(_QWORD *)(v2 + 160);
      v47 = *(_QWORD *)(v2 + 128);
      v46 = *(_QWORD *)(v2 + 136);
      v48 = *(_QWORD *)(v2 + 120);
      v49 = *(_QWORD *)(v2 + 96);
      v51 = *(_QWORD *)(v2 + 88);
      v52 = *(_QWORD *)(v2 + 80);
      v53 = *(_QWORD *)(v2 + 72);
      v54 = *(_QWORD *)(v2 + 48);
      swift_task_dealloc(*(_QWORD *)(v2 + 224));
      swift_task_dealloc(v41);
      swift_task_dealloc(v42);
      swift_task_dealloc(v43);
      swift_task_dealloc(v44);
      swift_task_dealloc(v45);
      swift_task_dealloc(v46);
      swift_task_dealloc(v47);
      swift_task_dealloc(v48);
      swift_task_dealloc(v49);
      swift_task_dealloc(v51);
      swift_task_dealloc(v52);
      swift_task_dealloc(v53);
      swift_task_dealloc(v54);
      return (*(uint64_t (**)(void))(v2 + 8))();
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v2 + 192) + 32))(*(_QWORD *)(v2 + 208), *(_QWORD *)(v2 + 176), *(_QWORD *)(v2 + 184));
      v50 = (_QWORD *)swift_task_alloc(async function pointer to MusicCollaborativePlaylist.StartCollaborationRequest.perform()[1]);
      *(_QWORD *)(v2 + 272) = v50;
      *v50 = v2;
      v50[1] = sub_1000CD3DC;
      return MusicCollaborativePlaylist.StartCollaborationRequest.perform()();
    }
  }
}

uint64_t sub_1000CD3DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 272);
  v3[35] = a1;
  v3[36] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1000CDFF0;
  else
    v5 = sub_1000CD444;
  return swift_task_switch(v5, v3[30], v3[31]);
}

uint64_t sub_1000CD444()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  void *v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  char *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72[2];

  v1 = objc_msgSend(*(id *)(v0 + 280), "collaborationInvitationURL", swift_release(*(_QWORD *)(v0 + 232)).n128_f64[0]);
  v2 = *(_QWORD *)(v0 + 136);
  if (v1)
  {
    v3 = v1;
    v5 = *(_QWORD *)(v0 + 112);
    v4 = *(_QWORD *)(v0 + 120);
    v6 = *(_QWORD *)(v0 + 104);
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v1);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v2, v4, v6);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v2, 0, 1, v6);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v2, 1, v6) != 1)
    {
      v7 = *(_QWORD *)(v0 + 280);
      v8 = *(_QWORD *)(v0 + 208);
      v9 = *(_QWORD *)(v0 + 216);
      v10 = *(_QWORD *)(v0 + 184);
      v11 = *(_QWORD *)(v0 + 192);
      v12 = *(_QWORD *)(v0 + 136);
      v13 = *(_QWORD **)(v0 + 32);

      sub_100008758(v12, &qword_10048D510);
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v8, v10);
      *v13 = v7;
      swift_storeEnumTagMultiPayload(v13, v9, 0);
      v14 = *(_QWORD *)(v0 + 200);
      v15 = *(_QWORD *)(v0 + 208);
      v17 = *(_QWORD *)(v0 + 168);
      v16 = *(_QWORD *)(v0 + 176);
      v18 = *(_QWORD *)(v0 + 160);
      v20 = *(_QWORD *)(v0 + 128);
      v19 = *(_QWORD *)(v0 + 136);
      v21 = *(_QWORD *)(v0 + 120);
      v22 = *(_QWORD *)(v0 + 96);
      v65 = *(_QWORD *)(v0 + 88);
      v67 = *(_QWORD *)(v0 + 80);
      v69 = *(_QWORD *)(v0 + 72);
      v71 = *(_QWORD *)(v0 + 48);
      swift_task_dealloc(*(_QWORD *)(v0 + 224));
      swift_task_dealloc(v15);
      swift_task_dealloc(v14);
      swift_task_dealloc(v16);
      swift_task_dealloc(v17);
      swift_task_dealloc(v18);
      swift_task_dealloc(v19);
      swift_task_dealloc(v20);
      swift_task_dealloc(v21);
      swift_task_dealloc(v22);
      swift_task_dealloc(v65);
      swift_task_dealloc(v67);
      swift_task_dealloc(v69);
      swift_task_dealloc(v71);
      v23 = *(uint64_t (**)(void))(v0 + 8);
      return v23();
    }
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 112) + 56))(*(_QWORD *)(v0 + 136), 1, 1, *(_QWORD *)(v0 + 104));
  }
  v24 = *(void **)(v0 + 280);
  sub_100008758(*(_QWORD *)(v0 + 136), &qword_10048D510);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.error.getter(v25);
  v27 = os_log_type_enabled(v25, v26);
  v28 = *(void **)(v0 + 280);
  if (v27)
  {
    v29 = swift_slowAlloc(12, -1);
    v30 = swift_slowAlloc(32, -1);
    v72[0] = v30;
    *(_DWORD *)v29 = 136446210;
    v31 = v28;
    v32 = objc_msgSend(v31, "description");
    v33 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v35 = v34;

    *(_QWORD *)(v29 + 4) = sub_100019400(v33, v35, v72);
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v25, v26, "invitationURL missing for=%{public}s", (uint8_t *)v29, 0xCu);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v29, -1, -1);
  }
  else
  {

  }
  v36 = sub_1000D3204();
  v37 = swift_allocError(&type metadata for Collaboration.Error, v36, 0, 0);
  *(_OWORD *)v38 = xmmword_100384AA0;
  *(_BYTE *)(v38 + 16) = 3;
  swift_willThrow((__n128)xmmword_100384AA0);

  swift_errorRetain(v37);
  v39 = swift_errorRetain(v37);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.error.getter(v40);
  if (os_log_type_enabled(v40, v41))
  {
    v42 = swift_slowAlloc(12, -1);
    v43 = swift_slowAlloc(32, -1);
    v72[0] = v43;
    *(_DWORD *)v42 = 136446210;
    *(_QWORD *)(v0 + 24) = v37;
    swift_errorRetain(v37);
    v44 = sub_100005574((uint64_t *)&unk_1004911F0);
    v45 = (char *)String.init<A>(describing:)(v0 + 24, v44);
    *(_QWORD *)(v42 + 4) = sub_100019400(v45, v46, v72);
    swift_bridgeObjectRelease();
    swift_errorRelease(v37);
    swift_errorRelease(v37);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Start failed with error=%{public}s", (uint8_t *)v42, 0xCu);
    swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v42, -1, -1);
  }
  else
  {
    swift_errorRelease(v37);
    swift_errorRelease(v37);
  }

  v47 = *(void **)(v0 + 264);
  v48 = *(_QWORD *)(v0 + 208);
  v49 = *(_QWORD *)(v0 + 184);
  v50 = *(_QWORD *)(v0 + 192);
  v51 = sub_1000D3204();
  swift_allocError(&type metadata for Collaboration.Error, v51, 0, 0);
  *(_QWORD *)v52 = v37;
  *(_QWORD *)(v52 + 8) = 0;
  *(_BYTE *)(v52 + 16) = 1;
  swift_willThrow(v53);

  (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v48, v49);
  v55 = *(_QWORD *)(v0 + 200);
  v54 = *(_QWORD *)(v0 + 208);
  v57 = *(_QWORD *)(v0 + 168);
  v56 = *(_QWORD *)(v0 + 176);
  v58 = *(_QWORD *)(v0 + 160);
  v60 = *(_QWORD *)(v0 + 128);
  v59 = *(_QWORD *)(v0 + 136);
  v61 = *(_QWORD *)(v0 + 120);
  v62 = *(_QWORD *)(v0 + 96);
  v64 = *(_QWORD *)(v0 + 88);
  v66 = *(_QWORD *)(v0 + 80);
  v68 = *(_QWORD *)(v0 + 72);
  v70 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v64);
  swift_task_dealloc(v66);
  swift_task_dealloc(v68);
  swift_task_dealloc(v70);
  v23 = *(uint64_t (**)(void))(v0 + 8);
  return v23();
}

uint64_t sub_1000CD9BC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 312);
  *(_QWORD *)(*v1 + 320) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000CE260;
  else
    v4 = sub_1000CDA1C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 240), *(_QWORD *)(v2 + 248));
}

uint64_t sub_1000CDA1C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(void);
  void (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86[2];

  v1 = v0[6];
  swift_release(v0[29]);
  Playlist.collaboration.getter(v2);
  v3 = type metadata accessor for Playlist.Collaboration(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v1, 1, v3);
  v6 = v0[16];
  v7 = v0[13];
  v8 = v0[14];
  v9 = v0[6];
  if (v5 == 1)
  {
    sub_100008758(v0[6], &qword_1004911E0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  }
  else
  {
    Playlist.Collaboration.invitationURL.getter();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v9, v3);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {
      v58 = (void (*)(uint64_t, uint64_t, uint64_t))v0[37];
      v84 = v0[27];
      v60 = v0[24];
      v59 = v0[25];
      v61 = v0[23];
      v62 = v0[12];
      v63 = v0[10];
      v65 = v0[7];
      v64 = v0[8];
      v66 = v0[4];
      sub_100008758(v0[16], &qword_10048D510);
      (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v59, v61);
      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v62, v65);
      v58(v66, v63, v65);
      swift_storeEnumTagMultiPayload(v66, v84, 1);
      v67 = v0[25];
      v68 = v0[26];
      v70 = v0[21];
      v69 = v0[22];
      v71 = v0[20];
      v73 = v0[16];
      v72 = v0[17];
      v74 = v0[15];
      v75 = v0[12];
      v79 = v0[11];
      v81 = v0[10];
      v83 = v0[9];
      v85 = v0[6];
      swift_task_dealloc(v0[28]);
      swift_task_dealloc(v68);
      swift_task_dealloc(v67);
      swift_task_dealloc(v69);
      swift_task_dealloc(v70);
      swift_task_dealloc(v71);
      swift_task_dealloc(v72);
      swift_task_dealloc(v73);
      swift_task_dealloc(v74);
      swift_task_dealloc(v75);
      swift_task_dealloc(v79);
      swift_task_dealloc(v81);
      swift_task_dealloc(v83);
      swift_task_dealloc(v85);
      v57 = (uint64_t (*)(void))v0[1];
      return v57();
    }
  }
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[38];
  v12 = v0[9];
  v11 = v0[10];
  v13 = v0[7];
  sub_100008758(v0[16], &qword_10048D510);
  v14 = v10(v12, v11, v13);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.error.getter(v15);
  v17 = os_log_type_enabled(v15, v16);
  v19 = v0[8];
  v18 = v0[9];
  v20 = v0[7];
  if (v17)
  {
    v21 = swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v86[0] = v22;
    *(_DWORD *)v21 = 136446210;
    v23 = sub_100006924(&qword_10048F2B0, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist, (uint64_t)&protocol conformance descriptor for Playlist);
    v24 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v20, v23);
    *(_QWORD *)(v21 + 4) = sub_100019400(v24, v25, v86);
    swift_bridgeObjectRelease();
    v26 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v26(v18, v20);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "invitationURL missing for=%{public}s", (uint8_t *)v21, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);
  }
  else
  {
    v26 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v26(v0[9], v0[7]);
  }

  v27 = v0[10];
  v28 = v0[7];
  v29 = sub_1000D3204();
  v30 = swift_allocError(&type metadata for Collaboration.Error, v29, 0, 0);
  *(_OWORD *)v31 = xmmword_100384AA0;
  *(_BYTE *)(v31 + 16) = 3;
  swift_willThrow((__n128)xmmword_100384AA0);
  v26(v27, v28);
  swift_errorRetain(v30);
  v32 = swift_errorRetain(v30);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.error.getter(v33);
  if (os_log_type_enabled(v33, v34))
  {
    v35 = swift_slowAlloc(12, -1);
    v36 = swift_slowAlloc(32, -1);
    v86[0] = v36;
    *(_DWORD *)v35 = 136446210;
    v0[2] = v30;
    swift_errorRetain(v30);
    v37 = sub_100005574((uint64_t *)&unk_1004911F0);
    v38 = (char *)String.init<A>(describing:)(v0 + 2, v37);
    *(_QWORD *)(v35 + 4) = sub_100019400(v38, v39, v86);
    swift_bridgeObjectRelease();
    swift_errorRelease(v30);
    swift_errorRelease(v30);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Start failed with error=%{public}s", (uint8_t *)v35, 0xCu);
    swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v35, -1, -1);
  }
  else
  {
    swift_errorRelease(v30);
    swift_errorRelease(v30);
  }

  v40 = v0[24];
  v41 = v0[25];
  v42 = v0[23];
  v43 = v0[12];
  v44 = v0[7];
  v45 = v0[8];
  swift_allocError(&type metadata for Collaboration.Error, v29, 0, 0);
  *(_QWORD *)v46 = v30;
  *(_QWORD *)(v46 + 8) = 0;
  *(_BYTE *)(v46 + 16) = 1;
  swift_willThrow(v47);
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v41, v42);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v44);
  v49 = v0[25];
  v48 = v0[26];
  v51 = v0[21];
  v50 = v0[22];
  v52 = v0[20];
  v54 = v0[16];
  v53 = v0[17];
  v55 = v0[15];
  v56 = v0[12];
  v77 = v0[11];
  v78 = v0[10];
  v80 = v0[9];
  v82 = v0[6];
  swift_task_dealloc(v0[28]);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v80);
  swift_task_dealloc(v82);
  v57 = (uint64_t (*)(void))v0[1];
  return v57();
}

uint64_t sub_1000CDFF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  swift_release(*(_QWORD *)(v0 + 232));
  v1 = *(_QWORD *)(v0 + 288);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v31 = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)(v0 + 24) = v1;
    swift_errorRetain(v1);
    v7 = sub_100005574((uint64_t *)&unk_1004911F0);
    v8 = (char *)String.init<A>(describing:)(v0 + 24, v7);
    *(_QWORD *)(v5 + 4) = sub_100019400(v8, v9, &v31);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Start failed with error=%{public}s", (uint8_t *)v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v10 = *(void **)(v0 + 264);
  v11 = *(_QWORD *)(v0 + 208);
  v12 = *(_QWORD *)(v0 + 184);
  v13 = *(_QWORD *)(v0 + 192);
  v14 = sub_1000D3204();
  swift_allocError(&type metadata for Collaboration.Error, v14, 0, 0);
  *(_QWORD *)v15 = v1;
  *(_QWORD *)(v15 + 8) = 0;
  *(_BYTE *)(v15 + 16) = 1;
  swift_willThrow(v16);

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  v18 = *(_QWORD *)(v0 + 200);
  v17 = *(_QWORD *)(v0 + 208);
  v20 = *(_QWORD *)(v0 + 168);
  v19 = *(_QWORD *)(v0 + 176);
  v21 = *(_QWORD *)(v0 + 160);
  v23 = *(_QWORD *)(v0 + 128);
  v22 = *(_QWORD *)(v0 + 136);
  v24 = *(_QWORD *)(v0 + 120);
  v25 = *(_QWORD *)(v0 + 96);
  v27 = *(_QWORD *)(v0 + 88);
  v28 = *(_QWORD *)(v0 + 80);
  v29 = *(_QWORD *)(v0 + 72);
  v30 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CE260()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  swift_release(*(_QWORD *)(v0 + 232));
  v1 = *(_QWORD *)(v0 + 320);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v33 = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)(v0 + 16) = v1;
    swift_errorRetain(v1);
    v7 = sub_100005574((uint64_t *)&unk_1004911F0);
    v8 = (char *)String.init<A>(describing:)(v0 + 16, v7);
    *(_QWORD *)(v5 + 4) = sub_100019400(v8, v9, &v33);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Start failed with error=%{public}s", (uint8_t *)v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v10 = *(_QWORD *)(v0 + 192);
  v11 = *(_QWORD *)(v0 + 200);
  v12 = *(_QWORD *)(v0 + 184);
  v13 = *(_QWORD *)(v0 + 96);
  v14 = *(_QWORD *)(v0 + 56);
  v15 = *(_QWORD *)(v0 + 64);
  v16 = sub_1000D3204();
  swift_allocError(&type metadata for Collaboration.Error, v16, 0, 0);
  *(_QWORD *)v17 = v1;
  *(_QWORD *)(v17 + 8) = 0;
  *(_BYTE *)(v17 + 16) = 1;
  swift_willThrow(v18);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  v20 = *(_QWORD *)(v0 + 200);
  v19 = *(_QWORD *)(v0 + 208);
  v22 = *(_QWORD *)(v0 + 168);
  v21 = *(_QWORD *)(v0 + 176);
  v23 = *(_QWORD *)(v0 + 160);
  v25 = *(_QWORD *)(v0 + 128);
  v24 = *(_QWORD *)(v0 + 136);
  v26 = *(_QWORD *)(v0 + 120);
  v27 = *(_QWORD *)(v0 + 96);
  v29 = *(_QWORD *)(v0 + 88);
  v30 = *(_QWORD *)(v0 + 80);
  v31 = *(_QWORD *)(v0 + 72);
  v32 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Collaboration.Manager.validate(_:url:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v4 = type metadata accessor for MusicCollaborativePlaylist.JoinRequest(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Collaboration.Object(0);
  v3[9] = v6;
  v3[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005574(&qword_100491260);
  v3[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Playlist(0);
  v3[12] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[13] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[14] = swift_task_alloc(v10);
  v3[15] = swift_task_alloc(v10);
  v11 = type metadata accessor for URL(0);
  v3[16] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v3[17] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[18] = swift_task_alloc(v13);
  v3[19] = swift_task_alloc(v13);
  v14 = type metadata accessor for MainActor(0);
  v3[20] = static MainActor.shared.getter(v14);
  v15 = dispatch thunk of Actor.unownedExecutor.getter(v14, &protocol witness table for MainActor);
  v3[21] = v15;
  v3[22] = v16;
  return swift_task_switch(sub_1000CE630, v15, v16);
}

uint64_t sub_1000CE630(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;

  if (qword_10048C740 != -1)
    swift_once(&qword_10048C740, sub_1000D1FD4);
  v3 = *(_QWORD *)(v2 + 152);
  v4 = *(_QWORD *)(v2 + 128);
  v5 = *(_QWORD *)(v2 + 136);
  v6 = *(_QWORD *)(v2 + 40);
  v7 = type metadata accessor for Logger(0, a2);
  *(_QWORD *)(v2 + 184) = sub_1000086B4(v7, (uint64_t)static Logger.collaboration);
  v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v8 = v43(v3, v6, v4);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  v11 = os_log_type_enabled(v9, v10);
  v12 = *(_QWORD *)(v2 + 152);
  v13 = *(_QWORD *)(v2 + 128);
  v14 = *(_QWORD *)(v2 + 136);
  if (v11)
  {
    v15 = swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v44 = v16;
    *(_DWORD *)v15 = 136446210;
    v17 = sub_100006924((unint64_t *)&qword_1004912E8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v18 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v13, v17);
    *(_QWORD *)(v15 + 4) = sub_100019400(v18, v19, &v44);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Validate called with url=%{public}s", (uint8_t *)v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v14 + 8))(*(_QWORD *)(v2 + 152), *(_QWORD *)(v2 + 128));
  }

  v20 = *(_QWORD *)(v2 + 72);
  v21 = *(_QWORD *)(v2 + 80);
  sub_1000D2C94(*(_QWORD *)(v2 + 32), v21);
  if (swift_getEnumCaseMultiPayload(v21, v20) == 1)
  {
    v22 = *(_QWORD *)(v2 + 96);
    v23 = *(_QWORD *)(v2 + 104);
    v24 = *(_QWORD *)(v2 + 88);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v23 + 32))(v24, *(_QWORD *)(v2 + 80), v22);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v23 + 56))(v24, 0, 1, v22);
  }
  else
  {
    dispatch thunk of LegacyModelObjectConvertible.init(_:)(**(_QWORD **)(v2 + 80));
  }
  v25 = *(_QWORD *)(v2 + 96);
  v26 = *(_QWORD *)(v2 + 104);
  v27 = *(_QWORD *)(v2 + 88);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v27, 1, v25) == 1)
  {
    swift_release(*(_QWORD *)(v2 + 160));
    sub_100008758(v27, &qword_100491260);
    v28 = sub_1000D3204();
    swift_allocError(&type metadata for Collaboration.Error, v28, 0, 0);
    *(_OWORD *)v29 = xmmword_100384B10;
    *(_BYTE *)(v29 + 16) = 3;
    swift_willThrow((__n128)xmmword_100384B10);
    v30 = *(_QWORD *)(v2 + 144);
    v32 = *(_QWORD *)(v2 + 112);
    v31 = *(_QWORD *)(v2 + 120);
    v34 = *(_QWORD *)(v2 + 80);
    v33 = *(_QWORD *)(v2 + 88);
    v35 = *(_QWORD *)(v2 + 64);
    swift_task_dealloc(*(_QWORD *)(v2 + 152));
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    return (*(uint64_t (**)(void))(v2 + 8))();
  }
  else
  {
    v37 = *(_QWORD *)(v2 + 144);
    v39 = *(_QWORD *)(v2 + 120);
    v38 = *(_QWORD *)(v2 + 128);
    v40 = *(_QWORD *)(v2 + 112);
    v41 = *(_QWORD *)(v2 + 40);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v39, v27, v25);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v40, v39, v25);
    v43(v37, v41, v38);
    MusicCollaborativePlaylist.JoinRequest.init(playlist:invitationURL:)(v40, v37);
    v42 = (_QWORD *)swift_task_alloc(async function pointer to MusicCollaborativePlaylist.JoinRequest.validate()[1]);
    *(_QWORD *)(v2 + 192) = v42;
    *v42 = v2;
    v42[1] = sub_1000CE9E0;
    return MusicCollaborativePlaylist.JoinRequest.validate()(*(_QWORD *)(v2 + 24));
  }
}

uint64_t sub_1000CE9E0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 192);
  *(_QWORD *)(*v1 + 200) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000CEB0C;
  else
    v4 = sub_1000CEA40;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 168), *(_QWORD *)(v2 + 176));
}

uint64_t sub_1000CEA40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v0 + 88);
  v12 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 64);
  v9 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 160));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3, v5);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CEB0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = swift_release(*(_QWORD *)(v0 + 160));
  (*(void (**)(uint64_t, uint64_t, __n128))(v3 + 8))(v2, v4, v5);
  swift_errorRetain(v1);
  v6 = swift_errorRetain(v1);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = *(_QWORD *)(v0 + 200);
    v10 = swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v30 = v11;
    *(_DWORD *)v10 = 136446210;
    *(_QWORD *)(v0 + 16) = v9;
    swift_errorRetain(v9);
    v12 = sub_100005574((uint64_t *)&unk_1004911F0);
    v13 = (char *)String.init<A>(describing:)(v0 + 16, v12);
    *(_QWORD *)(v10 + 4) = sub_100019400(v13, v14, &v30);
    swift_bridgeObjectRelease();
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Validate failed with error=%{public}s", (uint8_t *)v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 200);
    swift_errorRelease(v15);
    swift_errorRelease(v15);
  }

  v16 = *(_QWORD *)(v0 + 200);
  v17 = *(_QWORD *)(v0 + 120);
  v18 = *(_QWORD *)(v0 + 96);
  v19 = *(_QWORD *)(v0 + 104);
  v20 = sub_1000D3204();
  swift_allocError(&type metadata for Collaboration.Error, v20, 0, 0);
  *(_QWORD *)v21 = v16;
  *(_QWORD *)(v21 + 8) = 0;
  *(_BYTE *)(v21 + 16) = 1;
  swift_willThrow(v22);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
  v23 = *(_QWORD *)(v0 + 144);
  v25 = *(_QWORD *)(v0 + 112);
  v24 = *(_QWORD *)(v0 + 120);
  v27 = *(_QWORD *)(v0 + 80);
  v26 = *(_QWORD *)(v0 + 88);
  v28 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Collaboration.Manager.join(_:url:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2[3] = a1;
  v2[4] = a2;
  v3 = type metadata accessor for MusicCollaborativePlaylist.JoinRequest(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Collaboration.Object(0);
  v2[8] = v5;
  v2[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005574(&qword_100491260);
  v2[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Playlist(0);
  v2[11] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[12] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[13] = swift_task_alloc(v9);
  v2[14] = swift_task_alloc(v9);
  v2[15] = swift_task_alloc(v9);
  v10 = type metadata accessor for URL(0);
  v2[16] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[17] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[18] = swift_task_alloc(v12);
  v2[19] = swift_task_alloc(v12);
  v13 = type metadata accessor for MainActor(0);
  v2[20] = static MainActor.shared.getter(v13);
  v14 = dispatch thunk of Actor.unownedExecutor.getter(v13, &protocol witness table for MainActor);
  v2[21] = v14;
  v2[22] = v15;
  return swift_task_switch(sub_1000CEE90, v14, v15);
}

uint64_t sub_1000CEE90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;

  if (qword_10048C740 != -1)
    swift_once(&qword_10048C740, sub_1000D1FD4);
  v3 = *(_QWORD *)(v2 + 152);
  v4 = *(_QWORD *)(v2 + 128);
  v5 = *(_QWORD *)(v2 + 136);
  v6 = *(_QWORD *)(v2 + 32);
  v7 = type metadata accessor for Logger(0, a2);
  *(_QWORD *)(v2 + 184) = sub_1000086B4(v7, (uint64_t)static Logger.collaboration);
  v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v8 = v44(v3, v6, v4);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  v11 = os_log_type_enabled(v9, v10);
  v12 = *(_QWORD *)(v2 + 152);
  v13 = *(_QWORD *)(v2 + 128);
  v14 = *(_QWORD *)(v2 + 136);
  if (v11)
  {
    v15 = swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v45 = v16;
    *(_DWORD *)v15 = 136446210;
    v17 = sub_100006924((unint64_t *)&qword_1004912E8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v18 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v13, v17);
    *(_QWORD *)(v15 + 4) = sub_100019400(v18, v19, &v45);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Join called with url=%{public}s", (uint8_t *)v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v14 + 8))(*(_QWORD *)(v2 + 152), *(_QWORD *)(v2 + 128));
  }

  v20 = *(_QWORD *)(v2 + 64);
  v21 = *(_QWORD *)(v2 + 72);
  sub_1000D2C94(*(_QWORD *)(v2 + 24), v21);
  if (swift_getEnumCaseMultiPayload(v21, v20) == 1)
  {
    v22 = *(_QWORD *)(v2 + 88);
    v23 = *(_QWORD *)(v2 + 96);
    v24 = *(_QWORD *)(v2 + 80);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v23 + 32))(v24, *(_QWORD *)(v2 + 72), v22);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v23 + 56))(v24, 0, 1, v22);
  }
  else
  {
    dispatch thunk of LegacyModelObjectConvertible.init(_:)(**(_QWORD **)(v2 + 72));
  }
  v25 = *(_QWORD *)(v2 + 88);
  v26 = *(_QWORD *)(v2 + 96);
  v27 = *(_QWORD *)(v2 + 80);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v27, 1, v25) == 1)
  {
    swift_release(*(_QWORD *)(v2 + 160));
    sub_100008758(v27, &qword_100491260);
    v28 = sub_1000D3204();
    swift_allocError(&type metadata for Collaboration.Error, v28, 0, 0);
    *(_OWORD *)v29 = xmmword_100384B10;
    *(_BYTE *)(v29 + 16) = 3;
    swift_willThrow((__n128)xmmword_100384B10);
    v30 = *(_QWORD *)(v2 + 144);
    v32 = *(_QWORD *)(v2 + 112);
    v31 = *(_QWORD *)(v2 + 120);
    v33 = *(_QWORD *)(v2 + 104);
    v35 = *(_QWORD *)(v2 + 72);
    v34 = *(_QWORD *)(v2 + 80);
    v36 = *(_QWORD *)(v2 + 56);
    swift_task_dealloc(*(_QWORD *)(v2 + 152));
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    return (*(uint64_t (**)(void))(v2 + 8))();
  }
  else
  {
    v38 = *(_QWORD *)(v2 + 144);
    v40 = *(_QWORD *)(v2 + 120);
    v39 = *(_QWORD *)(v2 + 128);
    v41 = *(_QWORD *)(v2 + 112);
    v42 = *(_QWORD *)(v2 + 32);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v40, v27, v25);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v41, v40, v25);
    v44(v38, v42, v39);
    MusicCollaborativePlaylist.JoinRequest.init(playlist:invitationURL:)(v41, v38);
    v43 = (_QWORD *)swift_task_alloc(async function pointer to MusicCollaborativePlaylist.JoinRequest.response()[1]);
    *(_QWORD *)(v2 + 192) = v43;
    *v43 = v2;
    v43[1] = sub_1000CF24C;
    return MusicCollaborativePlaylist.JoinRequest.response()(*(_QWORD *)(v2 + 104));
  }
}

uint64_t sub_1000CF24C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[21];
    v5 = v2[22];
    v6 = sub_1000CF39C;
  }
  else
  {
    v7 = v2[13];
    v8 = v2[11];
    v9 = *(void (**)(uint64_t, uint64_t))(v2[12] + 8);
    v2[26] = v9;
    v9(v7, v8);
    v4 = v2[21];
    v5 = v2[22];
    v6 = sub_1000CF2C4;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_1000CF2C4()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 88);
  v11 = *(_QWORD *)(v0 + 104);
  v12 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 48);
  v8 = *(_QWORD *)(v0 + 56);
  v9 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 160));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  v1(v4, v6);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CF39C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 200);
  swift_release(*(_QWORD *)(v0 + 160));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 200);
    v6 = swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v30 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 16) = v5;
    swift_errorRetain(v5);
    v8 = sub_100005574((uint64_t *)&unk_1004911F0);
    v9 = (char *)String.init<A>(describing:)(v0 + 16, v8);
    *(_QWORD *)(v6 + 4) = sub_100019400(v9, v10, &v30);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Join failed with error=%{public}s", (uint8_t *)v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 200);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
  }

  v12 = *(_QWORD *)(v0 + 200);
  v13 = *(_QWORD *)(v0 + 120);
  v14 = *(_QWORD *)(v0 + 88);
  v15 = *(_QWORD *)(v0 + 96);
  v17 = *(_QWORD *)(v0 + 48);
  v16 = *(_QWORD *)(v0 + 56);
  v18 = *(_QWORD *)(v0 + 40);
  v19 = sub_1000D3204();
  swift_allocError(&type metadata for Collaboration.Error, v19, 0, 0);
  *(_QWORD *)v20 = v12;
  *(_QWORD *)(v20 + 8) = 0;
  *(_BYTE *)(v20 + 16) = 1;
  swift_willThrow(v21);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  v22 = *(_QWORD *)(v0 + 144);
  v24 = *(_QWORD *)(v0 + 112);
  v23 = *(_QWORD *)(v0 + 120);
  v25 = *(_QWORD *)(v0 + 104);
  v27 = *(_QWORD *)(v0 + 72);
  v26 = *(_QWORD *)(v0 + 80);
  v28 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Collaboration.Manager.end(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2[3] = a1;
  v2[4] = a2;
  v3 = type metadata accessor for Playlist(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MusicCollaborativePlaylist.EndCollaborationRequest(0);
  v2[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[9] = v6;
  v2[10] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  v2[11] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v2[12] = v8;
  v2[13] = v9;
  return swift_task_switch(sub_1000CF694, v8, v9);
}

uint64_t sub_1000CF694(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  if (qword_10048C740 != -1)
    swift_once(&qword_10048C740, sub_1000D1FD4);
  v3 = type metadata accessor for Logger(0, a2);
  v4 = sub_1000086B4(v3, (uint64_t)static Logger.collaboration);
  v2[14] = v4;
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "End called", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  v9 = v2[6];
  v8 = v2[7];
  v11 = v2[4];
  v10 = v2[5];

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v11, v10);
  MusicCollaborativePlaylist.EndCollaborationRequest.init(playlist:)(v8);
  v12 = (_QWORD *)swift_task_alloc(async function pointer to MusicCollaborativePlaylist.EndCollaborationRequest.response()[1]);
  v2[15] = v12;
  *v12 = v2;
  v12[1] = sub_1000CF7D4;
  return MusicCollaborativePlaylist.EndCollaborationRequest.response()(v2[3]);
}

uint64_t sub_1000CF7D4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000CF834;
  else
    v4 = sub_1000D5158;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 96), *(_QWORD *)(v2 + 104));
}

uint64_t sub_1000CF834()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 128);
  swift_release(*(_QWORD *)(v0 + 88));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 128);
    v6 = swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v21 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 16) = v5;
    swift_errorRetain(v5);
    v8 = sub_100005574((uint64_t *)&unk_1004911F0);
    v9 = (char *)String.init<A>(describing:)(v0 + 16, v8);
    *(_QWORD *)(v6 + 4) = sub_100019400(v9, v10, &v21);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "End failed with error=%{public}s", (uint8_t *)v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 128);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
  }

  v12 = *(_QWORD *)(v0 + 128);
  v14 = *(_QWORD *)(v0 + 72);
  v13 = *(_QWORD *)(v0 + 80);
  v16 = *(_QWORD *)(v0 + 56);
  v15 = *(_QWORD *)(v0 + 64);
  v17 = sub_1000D3204();
  swift_allocError(&type metadata for Collaboration.Error, v17, 0, 0);
  *(_QWORD *)v18 = v12;
  *(_QWORD *)(v18 + 8) = 0;
  *(_BYTE *)(v18 + 16) = 1;
  swift_willThrow(v19);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  swift_task_dealloc(v13);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Collaboration.Manager.moderate(_:collaborator:in:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v3 + 24) = a2;
  *(_QWORD *)(v3 + 32) = a3;
  *(_BYTE *)(v3 + 193) = a1;
  v4 = type metadata accessor for MusicCollaborativePlaylist.PendingCollaboratorDecisionRequest(0);
  *(_QWORD *)(v3 + 40) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 48) = v5;
  *(_QWORD *)(v3 + 56) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Playlist(0);
  *(_QWORD *)(v3 + 64) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 72) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 80) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 88) = swift_task_alloc(v8);
  v9 = type metadata accessor for Playlist.Collaborator(0);
  *(_QWORD *)(v3 + 96) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v3 + 104) = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 112) = swift_task_alloc(v11);
  *(_QWORD *)(v3 + 120) = swift_task_alloc(v11);
  v12 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v3 + 128) = static MainActor.shared.getter(v12);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(v12, &protocol witness table for MainActor);
  *(_QWORD *)(v3 + 136) = v13;
  *(_QWORD *)(v3 + 144) = v14;
  return swift_task_switch(sub_1000CFB1C, v13, v14);
}

uint64_t sub_1000CFB1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  _QWORD *v38;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  os_log_type_t type;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;

  if (qword_10048C740 != -1)
    swift_once(&qword_10048C740, sub_1000D1FD4);
  v3 = *(_QWORD *)(v2 + 120);
  v4 = *(_QWORD *)(v2 + 96);
  v5 = *(_QWORD *)(v2 + 104);
  v6 = *(_QWORD *)(v2 + 88);
  v7 = *(_QWORD *)(v2 + 64);
  v8 = *(_QWORD *)(v2 + 72);
  v10 = *(_QWORD *)(v2 + 24);
  v9 = *(_QWORD *)(v2 + 32);
  v11 = type metadata accessor for Logger(0, a2);
  *(_QWORD *)(v2 + 152) = sub_1000086B4(v11, (uint64_t)static Logger.collaboration);
  v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v44(v3, v10, v4);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  v13 = v12(v6, v9, v7);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  v16 = os_log_type_enabled(v14, v15);
  v17 = *(_QWORD *)(v2 + 120);
  v19 = *(_QWORD *)(v2 + 96);
  v18 = *(_QWORD *)(v2 + 104);
  v20 = *(_QWORD *)(v2 + 88);
  v22 = *(_QWORD *)(v2 + 64);
  v21 = *(_QWORD *)(v2 + 72);
  if (v16)
  {
    type = v15;
    v23 = *(_BYTE *)(v2 + 193) & 1;
    v41 = *(_QWORD *)(v2 + 72);
    v24 = swift_slowAlloc(32, -1);
    v42 = swift_slowAlloc(96, -1);
    v45 = v42;
    *(_DWORD *)v24 = 136446722;
    *(_BYTE *)(v2 + 192) = v23;
    v25 = (char *)String.init<A>(describing:)(v2 + 192, &type metadata for Collaboration.Manager.Moderation);
    *(_QWORD *)(v24 + 4) = sub_100019400(v25, v26, &v45);
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2082;
    v27 = sub_100006924(&qword_100491308, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist.Collaborator, (uint64_t)&protocol conformance descriptor for Playlist.Collaborator);
    v28 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v19, v27);
    *(_QWORD *)(v24 + 14) = sub_100019400(v28, v29, &v45);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    *(_WORD *)(v24 + 22) = 2082;
    v30 = sub_100006924(&qword_10048F2B0, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist, (uint64_t)&protocol conformance descriptor for Playlist);
    v31 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v22, v30);
    *(_QWORD *)(v24 + 24) = sub_100019400(v31, v32, &v45);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v20, v22);
    _os_log_impl((void *)&_mh_execute_header, v14, type, "    Moderate called for:\n        - type=%{public}s\n        - collaborator=%{public}s\n        - playlist=%{public}s", (uint8_t *)v24, 0x20u);
    swift_arrayDestroy(v42, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v24, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v18 + 8))(*(_QWORD *)(v2 + 120), *(_QWORD *)(v2 + 96));
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  }

  v33 = *(_QWORD *)(v2 + 112);
  v34 = *(_QWORD *)(v2 + 80);
  v35 = *(_QWORD *)(v2 + 64);
  v36 = *(_QWORD *)(v2 + 32);
  v37 = *(_BYTE *)(v2 + 193);
  v44(v33, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 96));
  v12(v34, v36, v35);
  MusicCollaborativePlaylist.PendingCollaboratorDecisionRequest.init(collaborator:playlist:)(v33, v34);
  if ((v37 & 1) != 0)
  {
    v40 = (_QWORD *)swift_task_alloc(async function pointer to MusicCollaborativePlaylist.PendingCollaboratorDecisionRequest.reject()[1]);
    *(_QWORD *)(v2 + 176) = v40;
    *v40 = v2;
    v40[1] = sub_1000CFF78;
    return MusicCollaborativePlaylist.PendingCollaboratorDecisionRequest.reject()();
  }
  else
  {
    v38 = (_QWORD *)swift_task_alloc(async function pointer to MusicCollaborativePlaylist.PendingCollaboratorDecisionRequest.approve()[1]);
    *(_QWORD *)(v2 + 160) = v38;
    *v38 = v2;
    v38[1] = sub_1000CFE84;
    return MusicCollaborativePlaylist.PendingCollaboratorDecisionRequest.approve()();
  }
}

uint64_t sub_1000CFE84()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 160);
  *(_QWORD *)(*v1 + 168) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000CFFD8;
  else
    v4 = sub_1000CFEE4;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 136), *(_QWORD *)(v2 + 144));
}

uint64_t sub_1000CFEE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v7 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 128));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CFF78()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 176);
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000D01D8;
  else
    v4 = sub_1000D5188;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 136), *(_QWORD *)(v2 + 144));
}

uint64_t sub_1000CFFD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 168);
  swift_release(*(_QWORD *)(v0 + 128));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v21 = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)(v0 + 16) = v1;
    swift_errorRetain(v1);
    v7 = sub_100005574((uint64_t *)&unk_1004911F0);
    v8 = (char *)String.init<A>(describing:)(v0 + 16, v7);
    *(_QWORD *)(v5 + 4) = sub_100019400(v8, v9, &v21);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Moderate failed with error=%{public}s", (uint8_t *)v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v11 = *(_QWORD *)(v0 + 112);
  v10 = *(_QWORD *)(v0 + 120);
  v12 = *(_QWORD *)(v0 + 88);
  v20 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 48);
  v14 = *(_QWORD *)(v0 + 56);
  v15 = *(_QWORD *)(v0 + 40);
  v16 = sub_1000D3204();
  swift_allocError(&type metadata for Collaboration.Error, v16, 0, 0);
  *(_QWORD *)v17 = v1;
  *(_QWORD *)(v17 + 8) = 0;
  *(_BYTE *)(v17 + 16) = 1;
  swift_willThrow(v18);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v20);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D01D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 184);
  swift_release(*(_QWORD *)(v0 + 128));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v21 = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)(v0 + 16) = v1;
    swift_errorRetain(v1);
    v7 = sub_100005574((uint64_t *)&unk_1004911F0);
    v8 = (char *)String.init<A>(describing:)(v0 + 16, v7);
    *(_QWORD *)(v5 + 4) = sub_100019400(v8, v9, &v21);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Moderate failed with error=%{public}s", (uint8_t *)v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v11 = *(_QWORD *)(v0 + 112);
  v10 = *(_QWORD *)(v0 + 120);
  v12 = *(_QWORD *)(v0 + 88);
  v20 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 48);
  v14 = *(_QWORD *)(v0 + 56);
  v15 = *(_QWORD *)(v0 + 40);
  v16 = sub_1000D3204();
  swift_allocError(&type metadata for Collaboration.Error, v16, 0, 0);
  *(_QWORD *)v17 = v1;
  *(_QWORD *)(v17 + 8) = 0;
  *(_BYTE *)(v17 + 16) = 1;
  swift_willThrow(v18);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v20);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Collaboration.Manager.remove(collaborator:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v4 = type metadata accessor for MusicCollaborativePlaylist.RemoveCollaboratorRequest(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Playlist(0);
  v3[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[10] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[11] = swift_task_alloc(v8);
  v3[12] = swift_task_alloc(v8);
  v9 = type metadata accessor for Playlist.Collaborator(0);
  v3[13] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[14] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[15] = swift_task_alloc(v11);
  v3[16] = swift_task_alloc(v11);
  v12 = type metadata accessor for MainActor(0);
  v3[17] = static MainActor.shared.getter(v12);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(v12, &protocol witness table for MainActor);
  v3[18] = v13;
  v3[19] = v14;
  return swift_task_switch(sub_1000D04E0, v13, v14);
}

uint64_t sub_1000D04E0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;

  if (qword_10048C740 != -1)
    swift_once(&qword_10048C740, sub_1000D1FD4);
  v3 = v2[16];
  v4 = v2[13];
  v5 = v2[14];
  v6 = v2[12];
  v7 = v2[9];
  v8 = v2[10];
  v10 = v2[4];
  v9 = v2[5];
  v11 = type metadata accessor for Logger(0, a2);
  v2[20] = sub_1000086B4(v11, (uint64_t)static Logger.collaboration);
  v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v38(v3, v10, v4);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  v13 = v12(v6, v9, v7);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  v16 = os_log_type_enabled(v14, v15);
  v17 = v2[16];
  v19 = v2[13];
  v18 = v2[14];
  v20 = v2[12];
  v22 = v2[9];
  v21 = v2[10];
  if (v16)
  {
    v36 = v2[10];
    v23 = swift_slowAlloc(22, -1);
    v37 = swift_slowAlloc(64, -1);
    v39 = v37;
    *(_DWORD *)v23 = 136446466;
    v24 = sub_100006924(&qword_100491308, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist.Collaborator, (uint64_t)&protocol conformance descriptor for Playlist.Collaborator);
    v25 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v19, v24);
    *(_QWORD *)(v23 + 4) = sub_100019400(v25, v26, &v39);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    *(_WORD *)(v23 + 12) = 2082;
    v27 = sub_100006924(&qword_10048F2B0, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist, (uint64_t)&protocol conformance descriptor for Playlist);
    v28 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v22, v27);
    *(_QWORD *)(v23 + 14) = sub_100019400(v28, v29, &v39);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v20, v22);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "    Remove called for:\n        - collaborator=%{public}s\n        - playlist=%{public}s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v23, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v18 + 8))(v2[16], v2[13]);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  }

  v30 = v2[15];
  v31 = v2[11];
  v32 = v2[9];
  v33 = v2[5];
  v38(v30, v2[4], v2[13]);
  v12(v31, v33, v32);
  MusicCollaborativePlaylist.RemoveCollaboratorRequest.init(collaborator:playlist:)(v30, v31);
  v34 = (_QWORD *)swift_task_alloc(async function pointer to MusicCollaborativePlaylist.RemoveCollaboratorRequest.response()[1]);
  v2[21] = v34;
  *v34 = v2;
  v34[1] = sub_1000D07C4;
  return MusicCollaborativePlaylist.RemoveCollaboratorRequest.response()(v2[3]);
}

uint64_t sub_1000D07C4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 168);
  *(_QWORD *)(*v1 + 176) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000D08B8;
  else
    v4 = sub_1000D0824;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 144), *(_QWORD *)(v2 + 152));
}

uint64_t sub_1000D0824()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 136));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D08B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 176);
  swift_release(*(_QWORD *)(v0 + 136));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 176);
    v6 = swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v24 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 16) = v5;
    swift_errorRetain(v5);
    v8 = sub_100005574((uint64_t *)&unk_1004911F0);
    v9 = (char *)String.init<A>(describing:)(v0 + 16, v8);
    *(_QWORD *)(v6 + 4) = sub_100019400(v9, v10, &v24);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Remove failed with error=%{public}s", (uint8_t *)v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 176);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
  }

  v12 = *(_QWORD *)(v0 + 176);
  v13 = *(_QWORD *)(v0 + 120);
  v14 = *(_QWORD *)(v0 + 128);
  v16 = *(_QWORD *)(v0 + 88);
  v15 = *(_QWORD *)(v0 + 96);
  v18 = *(_QWORD *)(v0 + 56);
  v17 = *(_QWORD *)(v0 + 64);
  v19 = *(_QWORD *)(v0 + 48);
  v20 = sub_1000D3204();
  swift_allocError(&type metadata for Collaboration.Error, v20, 0, 0);
  *(_QWORD *)v21 = v12;
  *(_QWORD *)(v21 + 8) = 0;
  *(_BYTE *)(v21 + 16) = 1;
  swift_willThrow(v22);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Collaboration.Manager.resetInvitationURL(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2[3] = a1;
  v2[4] = a2;
  v3 = type metadata accessor for Playlist(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MusicCollaborativePlaylist.ResetInvitationLinkRequest(0);
  v2[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[9] = v6;
  v2[10] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  v2[11] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v2[12] = v8;
  v2[13] = v9;
  return swift_task_switch(sub_1000D0B7C, v8, v9);
}

uint64_t sub_1000D0B7C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  if (qword_10048C740 != -1)
    swift_once(&qword_10048C740, sub_1000D1FD4);
  v3 = type metadata accessor for Logger(0, a2);
  v4 = sub_1000086B4(v3, (uint64_t)static Logger.collaboration);
  v2[14] = v4;
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Reset URL called", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  v9 = v2[6];
  v8 = v2[7];
  v11 = v2[4];
  v10 = v2[5];

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v11, v10);
  MusicCollaborativePlaylist.ResetInvitationLinkRequest.init(playlist:)(v8);
  v12 = (_QWORD *)swift_task_alloc(async function pointer to MusicCollaborativePlaylist.ResetInvitationLinkRequest.response()[1]);
  v2[15] = v12;
  *v12 = v2;
  v12[1] = sub_1000D0CBC;
  return MusicCollaborativePlaylist.ResetInvitationLinkRequest.response()(v2[3]);
}

uint64_t sub_1000D0CBC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000D0D80;
  else
    v4 = sub_1000D0D1C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 96), *(_QWORD *)(v2 + 104));
}

uint64_t sub_1000D0D1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 88));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D0D80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 128);
  swift_release(*(_QWORD *)(v0 + 88));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 128);
    v6 = swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v21 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 16) = v5;
    swift_errorRetain(v5);
    v8 = sub_100005574((uint64_t *)&unk_1004911F0);
    v9 = (char *)String.init<A>(describing:)(v0 + 16, v8);
    *(_QWORD *)(v6 + 4) = sub_100019400(v9, v10, &v21);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Reset failed with error=%{public}s", (uint8_t *)v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 128);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
  }

  v12 = *(_QWORD *)(v0 + 128);
  v14 = *(_QWORD *)(v0 + 72);
  v13 = *(_QWORD *)(v0 + 80);
  v16 = *(_QWORD *)(v0 + 56);
  v15 = *(_QWORD *)(v0 + 64);
  v17 = sub_1000D3204();
  swift_allocError(&type metadata for Collaboration.Error, v17, 0, 0);
  *(_QWORD *)v18 = v12;
  *(_QWORD *)(v18 + 8) = 0;
  *(_BYTE *)(v18 + 16) = 1;
  swift_willThrow(v19);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  swift_task_dealloc(v13);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Collaboration.Manager.updateShareOption(_:for:)(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t updated;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v2 + 24) = a2;
  *(_BYTE *)(v2 + 168) = a1;
  v3 = type metadata accessor for Playlist.Collaboration.InvitationMode(0);
  *(_QWORD *)(v2 + 32) = v3;
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 40) = v4;
  *(_QWORD *)(v2 + 48) = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for MusicCollaborativePlaylist.UpdateInvitationModeRequest(0);
  *(_QWORD *)(v2 + 56) = updated;
  v6 = *(_QWORD *)(updated - 8);
  *(_QWORD *)(v2 + 64) = v6;
  *(_QWORD *)(v2 + 72) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005574(&qword_1004911E0);
  *(_QWORD *)(v2 + 80) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Playlist.Collaboration(0);
  *(_QWORD *)(v2 + 88) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v2 + 96) = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 104) = swift_task_alloc(v10);
  *(_QWORD *)(v2 + 112) = swift_task_alloc(v10);
  v11 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v2 + 120) = static MainActor.shared.getter(v11);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(v11, &protocol witness table for MainActor);
  *(_QWORD *)(v2 + 128) = v12;
  *(_QWORD *)(v2 + 136) = v13;
  return swift_task_switch(sub_1000D107C, v12, v13);
}

uint64_t sub_1000D107C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int *v29;
  _QWORD *v30;

  if (qword_10048C740 != -1)
    swift_once(&qword_10048C740, sub_1000D1FD4);
  v3 = type metadata accessor for Logger(0, a2);
  v4 = sub_1000086B4(v3, (uint64_t)static Logger.collaboration);
  *(_QWORD *)(v2 + 144) = v4;
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(unsigned __int8 *)(v2 + 168);
    v8 = swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 67240192;
    *(_DWORD *)(v8 + 4) = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "updateShareOption called with isOpen=%{BOOL,public}d", (uint8_t *)v8, 8u);
    swift_slowDealloc(v8, -1, -1);
  }
  v9 = *(_QWORD *)(v2 + 88);
  v10 = *(_QWORD *)(v2 + 96);
  v11 = *(_QWORD *)(v2 + 80);

  Playlist.collaboration.getter(v12);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v11, 1, v9) == 1)
  {
    v13 = *(_QWORD *)(v2 + 80);
    swift_release(*(_QWORD *)(v2 + 120));
    sub_100008758(v13, &qword_1004911E0);
    v14 = sub_1000D3204();
    swift_allocError(&type metadata for Collaboration.Error, v14, 0, 0);
    *(_OWORD *)v15 = xmmword_100384B10;
    *(_BYTE *)(v15 + 16) = 3;
    swift_willThrow((__n128)xmmword_100384B10);
    v16 = *(_QWORD *)(v2 + 104);
    v18 = *(_QWORD *)(v2 + 72);
    v17 = *(_QWORD *)(v2 + 80);
    v19 = *(_QWORD *)(v2 + 48);
    swift_task_dealloc(*(_QWORD *)(v2 + 112));
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    return (*(uint64_t (**)(void))(v2 + 8))();
  }
  else
  {
    v21 = *(_QWORD *)(v2 + 104);
    v22 = *(_QWORD *)(v2 + 112);
    v23 = *(_QWORD *)(v2 + 88);
    v24 = *(_QWORD *)(v2 + 96);
    v26 = *(_QWORD *)(v2 + 40);
    v25 = *(_QWORD *)(v2 + 48);
    v27 = *(_QWORD *)(v2 + 32);
    v28 = *(unsigned __int8 *)(v2 + 168);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v24 + 32))(v22, *(_QWORD *)(v2 + 80), v23);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v21, v22, v23);
    v29 = (unsigned int *)&enum case for Playlist.Collaboration.InvitationMode.open(_:);
    if (!v28)
      v29 = (unsigned int *)&enum case for Playlist.Collaboration.InvitationMode.requiresApproval(_:);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v26 + 104))(v25, *v29, v27);
    MusicCollaborativePlaylist.UpdateInvitationModeRequest.init(collaboration:updatedInvitationMode:)(v21, v25);
    v30 = (_QWORD *)swift_task_alloc(async function pointer to MusicCollaborativePlaylist.UpdateInvitationModeRequest.response()[1]);
    *(_QWORD *)(v2 + 152) = v30;
    *v30 = v2;
    v30[1] = sub_1000D12FC;
    return MusicCollaborativePlaylist.UpdateInvitationModeRequest.response()();
  }
}

uint64_t sub_1000D12FC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 152);
  *(_QWORD *)(*v1 + 160) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000D1408;
  else
    v4 = sub_1000D135C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 128), *(_QWORD *)(v2 + 136));
}

uint64_t sub_1000D135C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 48);
  v8 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 120));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v4);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D1408()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 120));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 160);
    v6 = swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v27 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 16) = v5;
    swift_errorRetain(v5);
    v8 = sub_100005574((uint64_t *)&unk_1004911F0);
    v9 = (char *)String.init<A>(describing:)(v0 + 16, v8);
    *(_QWORD *)(v6 + 4) = sub_100019400(v9, v10, &v27);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "updateShareOption failed with error=%{public}s", (uint8_t *)v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 160);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
  }

  v12 = *(_QWORD *)(v0 + 160);
  v13 = *(_QWORD *)(v0 + 112);
  v14 = *(_QWORD *)(v0 + 88);
  v15 = *(_QWORD *)(v0 + 96);
  v17 = *(_QWORD *)(v0 + 64);
  v16 = *(_QWORD *)(v0 + 72);
  v18 = *(_QWORD *)(v0 + 56);
  v19 = sub_1000D3204();
  swift_allocError(&type metadata for Collaboration.Error, v19, 0, 0);
  *(_QWORD *)v20 = v12;
  *(_QWORD *)(v20 + 8) = 0;
  *(_BYTE *)(v20 + 16) = 1;
  swift_willThrow(v21);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  v22 = *(_QWORD *)(v0 + 104);
  v24 = *(_QWORD *)(v0 + 72);
  v23 = *(_QWORD *)(v0 + 80);
  v25 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Collaboration.Manager.handleError(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[24];

  v3 = v2;
  if (qword_10048C740 != -1)
    swift_once(&qword_10048C740, sub_1000D1FD4);
  v5 = type metadata accessor for Logger(0, a2);
  sub_1000086B4(v5, (uint64_t)static Logger.collaboration);
  swift_errorRetain(a1);
  v6 = swift_errorRetain(a1);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc(12, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 138543362;
    swift_errorRetain(a1);
    v11 = _swift_stdlib_bridgeErrorToNSError(a1);
    *(_QWORD *)(v9 + 4) = v11;
    *v10 = v11;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Calling coordinator to handle error=%{public}@", (uint8_t *)v9, 0xCu);
    v12 = sub_100005574(&qword_100494910);
    swift_arrayDestroy(v10, 1, v12);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  swift_beginAccess(v3 + 16, v19, 0, 0);
  sub_1000244B0(v3 + 16, (uint64_t)v16);
  v13 = v17;
  v14 = v18;
  sub_10000ABC8(v16, v17);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 8))(a1, v13, v14);
  return sub_10000682C(v16);
}

uint64_t Collaboration.Manager.activityViewController(for:url:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSURL *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  NSURL *v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  NSString v30;
  uint64_t v31;
  NSString v32;
  uint64_t v33;
  NSString v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  Class isa;
  id v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  id v46;
  id v47;
  uint64_t result;
  uint64_t v49;
  id v50;
  uint64_t v51;
  _QWORD aBlock[5];
  uint64_t v53;

  type metadata accessor for Locale(0);
  __chkstk_darwin();
  v4 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for String.LocalizationValue(0);
  v5 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin();
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v9 = (char *)&v49 - v8;
  sub_100005574(&qword_10048D510);
  __chkstk_darwin();
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v11, a2, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  v15 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
  {
    URL._bridgeToObjectiveC()(v14);
    v15 = v16;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v12);
  }
  v17 = objc_msgSend(objc_allocWithZone((Class)NSItemProvider), "initWithContentsOfURL:", v15);

  if (v17)
  {
    v18 = objc_msgSend(objc_allocWithZone((Class)LPLinkMetadata), "init");
    URL._bridgeToObjectiveC()(v19);
    v21 = v20;
    objc_msgSend(v18, "setURL:", v20);

    v22 = objc_msgSend(objc_allocWithZone((Class)LPiTunesMediaPlaylistMetadata), "init");
    v23 = Collaboration.Object.name.getter();
    if (!v24)
    {
      v50 = v17;
      v25 = v4;
      String.LocalizationValue.init(stringLiteral:)(0xD000000000000011, 0x80000001003B0520);
      v26 = v5;
      v27 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v28 = v51;
      v27(v7, v9, v51);
      if (qword_10048C570 != -1)
        swift_once(&qword_10048C570, sub_10000AD54);
      v29 = qword_1004A1DA0;
      static Locale.current.getter((id)qword_1004A1DA0);
      String.init(localized:table:bundle:locale:comment:)(v7, v23, 0, v29, v25, 0, 0, 256);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v28);
      v17 = v50;
    }
    v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    objc_msgSend(v22, "setName:", v30);

    Collaboration.Object.ownerName.getter();
    if (v31)
    {
      v32 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      v32 = 0;
    }
    objc_msgSend(v22, "setCurator:", v32);

    Collaboration.Object.storeIdentifier.getter();
    if (v33)
    {
      v34 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      v34 = 0;
    }
    objc_msgSend(v22, "setStoreIdentifier:", v34);

    Collaboration.Object.lpImage.getter();
    v36 = v35;
    objc_msgSend(v22, "setArtwork:", v35);

    objc_msgSend(v18, "setSpecialization:", v22);
    v37 = sub_100005574((uint64_t *)&unk_100491910);
    v38 = swift_allocObject(v37, 40, 7);
    *(_OWORD *)(v38 + 16) = xmmword_100384730;
    *(_QWORD *)(v38 + 32) = v17;
    aBlock[0] = v38;
    specialized Array._endMutation()(v38);
    v39 = objc_allocWithZone((Class)UIActivityItemsConfiguration);
    sub_1000087DC(0, &qword_100491330, NSItemProvider_ptr);
    v40 = v17;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v42 = objc_msgSend(v39, "initWithItemProviders:", isa);

    v43 = swift_allocObject(&unk_100449688, 24, 7);
    *(_QWORD *)(v43 + 16) = v18;
    aBlock[4] = sub_1000D326C;
    v53 = v43;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000D1E58;
    aBlock[3] = &unk_1004496A0;
    v44 = _Block_copy(aBlock);
    v45 = v53;
    v46 = v18;
    objc_msgSend(v42, "setPerItemMetadataProvider:", v44, swift_release(v45).n128_f64[0]);
    _Block_release(v44);
    v47 = objc_msgSend(objc_allocWithZone((Class)UIActivityViewController), "initWithActivityItemsConfiguration:", v42);
    objc_msgSend(v47, "setAllowsProminentActivity:", 0);

    return (uint64_t)v47;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000019, 0x80000001003B0500, "MusicCore/Collaboration.swift", 29, 2, 620, 0);
    __break(1u);
  }
  return result;
}

id sub_1000D1D78@<X0>(uint64_t a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  id result;

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIActivityItemsConfigurationMetadataKeyLinkPresentationMetadata);
  if (v4 == v7 && v6 == v8)
  {
    swift_bridgeObjectRelease_n(v6, 2);
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 0);
    swift_bridgeObjectRelease();
    result = (id)swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
    {
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      return result;
    }
  }
  *(_QWORD *)(a3 + 24) = sub_1000087DC(0, &qword_100491628, LPLinkMetadata_ptr);
  *(_QWORD *)a3 = a2;
  return a2;
}

id sub_1000D1E58(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(_QWORD *__return_ptr, uint64_t, id);
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _QWORD v14[3];
  uint64_t v15;

  v6 = *(void (**)(_QWORD *__return_ptr, uint64_t, id))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = a3;
  v6(v14, a2, v7);
  swift_release(v5);

  v8 = v15;
  if (!v15)
    return 0;
  sub_10000ABC8(v14, v15);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v11);
  v12 = (void *)_bridgeAnythingToObjectiveC<A>(_:)(v11, v8);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  sub_10000682C(v14);
  return v12;
}

uint64_t Collaboration.Manager.deinit()
{
  uint64_t v0;

  sub_10000682C((_QWORD *)(v0 + 16));
  return v0;
}

uint64_t Collaboration.Manager.__deallocating_deinit()
{
  uint64_t v0;

  sub_10000682C((_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t Collaboration.ArtworkCachingReference.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return v0;
}

uint64_t Collaboration.ArtworkCachingReference.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_1000D1FD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for Logger(0, a2);
  sub_1000086DC(v2, static Logger.collaboration);
  sub_1000086B4(v2, (uint64_t)static Logger.collaboration);
  sub_1000087DC(0, (unint64_t *)&qword_1004904C0, OS_os_log_ptr);
  v3 = OS_os_log.init(subsystem:category:)(0xD000000000000013, 0x80000001003ACFD0, 0x726F62616C6C6F43, 0xED00006E6F697461);
  return Logger.init(_:)(v3);
}

uint64_t static Logger.collaboration.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  if (qword_10048C740 != -1)
    swift_once(&qword_10048C740, sub_1000D1FD4);
  v3 = type metadata accessor for Logger(0, a1);
  v4 = sub_1000086B4(v3, (uint64_t)static Logger.collaboration);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a2, v4, v3);
}

uint64_t Playlist.Collaborator.isHost.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  int v16;
  uint64_t *v17;
  char v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;

  v0 = type metadata accessor for Playlist.Collaborator.Role(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin();
  v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100005574(&qword_100491338);
  __chkstk_darwin();
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005574(&qword_100491340);
  __chkstk_darwin();
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v10 = (char *)&v22 - v9;
  v11 = __chkstk_darwin();
  v13 = (char *)&v22 - v12;
  Playlist.Collaborator.role.getter(v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v10, enum case for Playlist.Collaborator.Role.host(_:), v0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v1 + 56))(v10, 0, 1, v0);
  v14 = (uint64_t)&v6[*(int *)(v4 + 48)];
  sub_100014A7C((uint64_t)v13, (uint64_t)v6, &qword_100491340);
  sub_100014A7C((uint64_t)v10, v14, &qword_100491340);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  if (v15((uint64_t)v6, 1, v0) == 1)
  {
    sub_100008758((uint64_t)v10, &qword_100491340);
    sub_100008758((uint64_t)v13, &qword_100491340);
    v16 = v15(v14, 1, v0);
    if (v16 == 1)
      v17 = &qword_100491340;
    else
      v17 = &qword_100491338;
    if (v16 == 1)
      v18 = -1;
    else
      v18 = 0;
  }
  else
  {
    sub_100014A7C((uint64_t)v6, (uint64_t)v8, &qword_100491340);
    if (v15(v14, 1, v0) == 1)
    {
      sub_100008758((uint64_t)v10, &qword_100491340);
      sub_100008758((uint64_t)v13, &qword_100491340);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v8, v0);
      v18 = 0;
      v17 = &qword_100491338;
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v3, v14, v0);
      v19 = sub_100006924(&qword_100491348, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist.Collaborator.Role, (uint64_t)&protocol conformance descriptor for Playlist.Collaborator.Role);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v3, v0, v19);
      v20 = *(void (**)(char *, uint64_t))(v1 + 8);
      v20(v3, v0);
      v17 = &qword_100491340;
      sub_100008758((uint64_t)v10, &qword_100491340);
      sub_100008758((uint64_t)v13, &qword_100491340);
      v20(v8, v0);
    }
  }
  sub_100008758((uint64_t)v6, v17);
  return v18 & 1;
}

uint64_t Playlist.hasJoinedCollaboration.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  uint64_t v19;

  v0 = sub_100005574(&qword_1004911E0);
  __chkstk_darwin(v0);
  v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100005574(&qword_1004911E8);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v19 - v8;
  Playlist.collaboration.getter(v7);
  v10 = type metadata accessor for Playlist.Collaboration(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v2, 1, v10) == 1)
  {
    sub_100008758((uint64_t)v2, &qword_1004911E0);
    v12 = type metadata accessor for Playlist.Collaborator.Status(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v9, 1, 1, v12);
LABEL_10:
    v17 = 0;
    goto LABEL_11;
  }
  Playlist.Collaboration.collaboratorStatus.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v2, v10);
  v13 = type metadata accessor for Playlist.Collaborator.Status(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v9, 1, v13) == 1)
    goto LABEL_10;
  sub_100014A7C((uint64_t)v9, (uint64_t)v6, &qword_1004911E8);
  v15 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v6, v13);
  if (v15 != enum case for Playlist.Collaborator.Status.host(_:)
    && v15 != enum case for Playlist.Collaborator.Status.joined(_:))
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v13);
    goto LABEL_10;
  }
  v17 = 1;
LABEL_11:
  sub_100008758((uint64_t)v9, &qword_1004911E8);
  return v17;
}

BOOL MPModelPlaylist.hasJoinedCollaboration.getter()
{
  void *v0;

  return (char *)objc_msgSend(v0, "collaboratorStatus") - 3 < (char *)2;
}

void *sub_1000D25E0(void *__src, uint64_t a2, void *__dst)
{
  if (__dst)
  {
    if (__src)
      return memmove(__dst, __src, a2 - (_QWORD)__src);
  }
  return __src;
}

uint64_t sub_1000D2604(uint64_t (*a1)(void))
{
  return a1() & 1;
}

uint64_t sub_1000D2628@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_1000D2650(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_1000D26B8;
  return v5(v2 + 32);
}

uint64_t sub_1000D26B8()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_BYTE **)(*v0 + 16);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  *v2 = *(_BYTE *)(v1 + 32);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t _s9MusicCore13CollaborationO5SetupO5title6activeSSSb_tFZ_0(char a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[16];

  v2 = type metadata accessor for Locale(0);
  __chkstk_darwin(v2);
  v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for String.LocalizationValue(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v11 = &v17[-v10];
  if ((a1 & 1) != 0)
  {
    v12 = 0x80000001003B06F0;
    v13 = 0x1000000000000017;
  }
  else
  {
    v13 = 0x726F62616C6C6F43;
    v12 = 0xAE00A680E2657461;
  }
  String.LocalizationValue.init(stringLiteral:)(v13, v12);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(v9, v11, v5);
  if (qword_10048C570 != -1)
    swift_once(&qword_10048C570, sub_10000AD54);
  v14 = qword_1004A1DA0;
  static Locale.current.getter((id)qword_1004A1DA0);
  v15 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, v14, v4, 0, 0, 256);
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v5);
  return v15;
}

uint64_t sub_1000D28A4(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 == 2)
    return swift_bridgeObjectRelease(a2);
  if (a3 <= 1u)
    return swift_errorRelease(result);
  return result;
}

Swift::Int sub_1000D28CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100005574((uint64_t *)&unk_100491630);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v27 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v27 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      Hasher.init(_seed:)(v28);
      swift_bridgeObjectRetain();
      String.hash(into:)(v28, v8, v7);
      result = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = v16[1];
        v18 = *v16 == v8 && v17 == v7;
        if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, v7, 0), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease(v7);
          goto LABEL_4;
        }
        v19 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v19;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v20 = (_QWORD *)(v15 + 16 * v11);
          v21 = v20[1];
          if (*v20 != v8 || v21 != v7)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, v7, 0);
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v23 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v23 = v8;
      v23[1] = v7;
      v24 = *(_QWORD *)(v3 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v26;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

Swift::Int sub_1000D2A6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;
  Swift::Int result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _QWORD v19[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100005574(&qword_1004915D8);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = *(unsigned __int8 *)(v6 + v4);
      Hasher.init(_seed:)(v19);
      Hasher._combine(_:)(v7);
      result = Hasher._finalize()();
      v9 = -1 << *(_BYTE *)(v3 + 32);
      v10 = result & ~v9;
      v11 = v10 >> 6;
      v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
      v13 = 1 << v10;
      v14 = *(_QWORD *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(unsigned __int8 *)(v14 + v10) == (_DWORD)v7)
          goto LABEL_3;
        v15 = ~v9;
        while (1)
        {
          v10 = (v10 + 1) & v15;
          v11 = v10 >> 6;
          v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
          v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0)
            break;
          if (*(unsigned __int8 *)(v14 + v10) == (_DWORD)v7)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
      *(_BYTE *)(v14 + v10) = v7;
      v16 = *(_QWORD *)(v3 + 16);
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_1000D2BAC()
{
  _QWORD *v0;
  uint64_t v1;

  swift_unknownObjectRelease(v0[2]);
  v1 = v0[5];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[7]);
    if (v0[9])
      swift_release(v0[10]);
  }
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_1000D2BF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_100491204);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10000EA88;
  v4[9] = a1;
  v4[10] = v1 + 32;
  return swift_task_switch(sub_1000C8578, 0, 0);
}

uint64_t type metadata accessor for Collaboration.Object(uint64_t a1)
{
  uint64_t result;

  result = qword_1004913D8;
  if (!qword_1004913D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Collaboration.Object);
  return result;
}

uint64_t sub_1000D2C94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Collaboration.Object(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D2CD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Playlist(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

double sub_1000D2D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Playlist(0) - 8) + 80);
  return sub_1000C9BB8(a1, a2, a3, a4, v4 + ((v9 + 16) & ~v9));
}

uint64_t sub_1000D2D9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000D2DAC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000D2DB4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D2DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1000C9810(a1, a2, a3, a4, *(void **)(v4 + 16), *(_QWORD *)(v4 + 24));
}

uint64_t sub_1000D2DE8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[3];
  v2 = a1[4];
  sub_10000ABC8(a1, v1);
  return dispatch thunk of LibraryPlaylistEntryInternalFilter.playlist.getter(v1, v2);
}

uint64_t sub_1000D2E2C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_100005600(&qword_100491250);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000D2E70(uint64_t a1)
{
  uint64_t v1;

  sub_1000CB674(a1, *(void **)(v1 + 16));
}

void sub_1000D2E78(uint64_t a1)
{
  uint64_t v1;

  sub_1000CBFA4(a1, *(void **)(v1 + 16));
}

void sub_1000D2E80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  int v12;
  uint64_t v13;
  void *v14;
  char active;
  id v16;
  char *v17;
  unint64_t v18;
  __n128 v19;
  __n128 *v20;
  __n128 *v21;
  __n128 *v22;
  unint64_t v23;
  __n128 *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[18];

  v2 = type metadata accessor for Playlist(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Collaboration.Object(0);
  __chkstk_darwin(v6);
  v8 = (id *)((char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_10048C658 != -1)
    swift_once(&qword_10048C658, sub_1000B3BEC);
  v9 = static ApplicationCapabilities.Controller.shared;
  KeyPath = swift_getKeyPath(&unk_10038B430);
  v11 = swift_getKeyPath(&unk_10038B458);
  static Published.subscript.getter(v34, v9, KeyPath, v11);
  swift_release(KeyPath);
  swift_release(v11);
  v12 = BYTE1(v34[0]);
  v13 = v34[3];
  v32 = v34[4];
  v33 = v34[7];
  v14 = (void *)v34[10];
  v34[17] = v34[9];
  v31 = v34[12];
  v29 = v34[1];
  v30 = v34[14];
  sub_1000D2C94(a1, (uint64_t)v8);
  if (swift_getEnumCaseMultiPayload(v8, v6) == 1)
  {
    (*(void (**)(char *, id *, uint64_t))(v3 + 32))(v5, v8, v2);
    active = Playlist.hasActiveCollaboration.getter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    if ((active & 1) != 0)
      goto LABEL_9;
  }
  else
  {
    v16 = *v8;
    v17 = (char *)objc_msgSend(*v8, "collaboratorStatus");

    if ((unint64_t)(v17 - 2) < 3)
      goto LABEL_9;
  }
  if (!v12)
  {
    v25 = sub_1000D3204();
    swift_allocError(&type metadata for Collaboration.Error, v25, 0, 0);
    v19 = (__n128)xmmword_1003849A0;
    goto LABEL_18;
  }
  if ((sub_1000CA130() & 1) == 0)
  {
    v26 = sub_1000D3204();
    swift_allocError(&type metadata for Collaboration.Error, v26, 0, 0);
    v19 = (__n128)xmmword_100384B20;
    goto LABEL_18;
  }
LABEL_9:
  if ((sub_1000C69C8(3u, v13) & 1) == 0)
  {
    v23 = sub_1000D3204();
    swift_allocError(&type metadata for Collaboration.Error, v23, 0, 0);
    v19 = (__n128)xmmword_100384B30;
LABEL_18:
    *v24 = v19;
    v22 = v24 + 1;
    goto LABEL_19;
  }
  if (!v14 || (objc_msgSend(v14, "isMinorAccountHolder") & 1) != 0)
  {
    v18 = sub_1000D3204();
    swift_allocError(&type metadata for Collaboration.Error, v18, 0, 0);
    v21 = v20;
    v22 = v20 + 1;
    v21->n128_u64[0] = 0;
    v21->n128_u64[1] = 0;
LABEL_19:
    v22->n128_u8[0] = 3;
    swift_willThrow(v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return;
  }
  if ((v29 & 1) == 0)
  {
    v27 = sub_1000D3204();
    swift_allocError(&type metadata for Collaboration.Error, v27, 0, 0);
    v19 = (__n128)xmmword_100384A70;
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

unint64_t sub_1000D3204()
{
  unint64_t result;

  result = qword_1004912B8;
  if (!qword_1004912B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Collaboration.Error, &type metadata for Collaboration.Error);
    atomic_store(result, (unint64_t *)&qword_1004912B8);
  }
  return result;
}

uint64_t sub_1000D3248()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_1000D326C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000D1D78(a1, *(void **)(v2 + 16), a2);
}

unint64_t sub_1000D3278()
{
  unint64_t result;

  result = qword_100491350;
  if (!qword_100491350)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Collaboration.Collaborator.Change, &type metadata for Collaboration.Collaborator.Change);
    atomic_store(result, (unint64_t *)&qword_100491350);
  }
  return result;
}

unint64_t sub_1000D32C4()
{
  unint64_t result;

  result = qword_100491358;
  if (!qword_100491358)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Collaboration.Manager.DeepLinkType, &type metadata for Collaboration.Manager.DeepLinkType);
    atomic_store(result, (unint64_t *)&qword_100491358);
  }
  return result;
}

unint64_t sub_1000D330C()
{
  unint64_t result;

  result = qword_100491360;
  if (!qword_100491360)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Collaboration.Manager.Moderation, &type metadata for Collaboration.Manager.Moderation);
    atomic_store(result, (unint64_t *)&qword_100491360);
  }
  return result;
}

ValueMetadata *type metadata accessor for Collaboration()
{
  return &type metadata for Collaboration;
}

ValueMetadata *type metadata accessor for Collaboration.Collaborator()
{
  return &type metadata for Collaboration.Collaborator;
}

uint64_t storeEnumTagSinglePayload for Collaboration.Collaborator.Change(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000D33BC + 4 * byte_10038B3F1[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000D33F0 + 4 * byte_10038B3EC[v4]))();
}

uint64_t sub_1000D33F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D33F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000D3400);
  return result;
}

uint64_t sub_1000D340C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000D3414);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000D3418(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D3420(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Collaboration.Collaborator.Change()
{
  return &type metadata for Collaboration.Collaborator.Change;
}

ValueMetadata *type metadata accessor for Collaboration.Setup()
{
  return &type metadata for Collaboration.Setup;
}

uint64_t sub_1000D3450(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 == 2)
    return swift_bridgeObjectRetain();
  if (a3 <= 1u)
    return swift_errorRetain();
  return result;
}

uint64_t destroy for Collaboration.Error(uint64_t a1)
{
  return sub_1000D28A4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s9MusicCore13CollaborationO5ErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000D3450(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for Collaboration.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000D3450(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1000D28A4(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for Collaboration.Error(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1000D28A4(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for Collaboration.Error(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Collaboration.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000D35F4(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_1000D360C(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Collaboration.Error()
{
  return &type metadata for Collaboration.Error;
}

char *initializeBufferWithCopyOfBuffer for Collaboration.Object(char *a1, char **a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v11[(v5 + 16) & ~(unint64_t)v5];
    swift_retain(v11);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v7 = type metadata accessor for Playlist(0);
      (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = a3;
      v10 = 1;
    }
    else
    {
      v12 = *a2;
      *(_QWORD *)a1 = *a2;
      v13 = v12;
      v8 = a1;
      v9 = a3;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

void destroy for Collaboration.Object(id *a1, uint64_t a2)
{
  uint64_t v3;

  if (swift_getEnumCaseMultiPayload(a1, a2) == 1)
  {
    v3 = type metadata accessor for Playlist(0);
    (*(void (**)(id *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  else
  {

  }
}

void **initializeWithCopy for Collaboration.Object(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for Playlist(0);
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    v7 = a1;
    v8 = a3;
    v9 = 1;
  }
  else
  {
    v10 = *a2;
    *a1 = *a2;
    v11 = v10;
    v7 = a1;
    v8 = a3;
    v9 = 0;
  }
  swift_storeEnumTagMultiPayload(v7, v8, v9);
  return a1;
}

void **assignWithCopy for Collaboration.Object(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  if (a1 != a2)
  {
    sub_1000D3870((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for Playlist(0);
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = a1;
      v8 = a3;
      v9 = 1;
    }
    else
    {
      v10 = *a2;
      *a1 = *a2;
      v11 = v10;
      v7 = a1;
      v8 = a3;
      v9 = 0;
    }
    swift_storeEnumTagMultiPayload(v7, v8, v9);
  }
  return a1;
}

uint64_t sub_1000D3870(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Collaboration.Object(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *initializeWithTake for Collaboration.Object(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for Playlist(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for Collaboration.Object(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_1000D3870((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for Playlist(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000D39D4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for Playlist(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for Collaboration.Manager()
{
  return objc_opt_self(_TtCO9MusicCore13Collaboration7Manager);
}

ValueMetadata *type metadata accessor for Collaboration.Manager.DeepLinkType()
{
  return &type metadata for Collaboration.Manager.DeepLinkType;
}

uint64_t _s9MusicCore13CollaborationO7ManagerC12DeepLinkTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000D3AC8 + 4 * byte_10038B3FB[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000D3AFC + 4 * byte_10038B3F6[v4]))();
}

uint64_t sub_1000D3AFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D3B04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000D3B0CLL);
  return result;
}

uint64_t sub_1000D3B18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000D3B20);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000D3B24(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D3B2C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Collaboration.Manager.Moderation()
{
  return &type metadata for Collaboration.Manager.Moderation;
}

uint64_t type metadata accessor for Collaboration.ArtworkCachingReference()
{
  return objc_opt_self(_TtCO9MusicCore13Collaboration23ArtworkCachingReference);
}

uint64_t sub_1000D3B68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1004915B4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10000F894;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1004915B0 + dword_1004915B0))(a1, v4);
}

uint64_t sub_1000D3BD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1004915C4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10000EA88;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1004915C0 + dword_1004915C0))(a1, v4);
}

void sub_1000D3C48(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease(a1);
    if (v3)
    {
LABEL_3:
      sub_100005574(&qword_100491600);
      v4 = (_QWORD *)static _SetStorage.allocate(capacity:)(v3);
      v26 = a1;
      if (!v2)
        goto LABEL_4;
LABEL_11:
      if (a1 < 0)
        v7 = a1;
      else
        v7 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v5 = _CocoaArrayWrapper.endIndex.getter(v7);
      swift_bridgeObjectRelease(a1);
      if (!v5)
        return;
      goto LABEL_15;
    }
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
  }
  v4 = &_swiftEmptySetSingleton;
  v26 = a1;
  if (v2)
    goto LABEL_11;
LABEL_4:
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v5)
    return;
LABEL_15:
  v8 = 0;
  v9 = (char *)(v4 + 7);
  v25 = v5;
  while ((v26 & 0xC000000000000001) != 0)
  {
    v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v26);
    v11 = __OFADD__(v8++, 1);
    if (v11)
      goto LABEL_32;
LABEL_24:
    v27 = v10;
    v29 = v10;
    v12 = v4[5];
    v13 = type metadata accessor for AnyCancellable(0);
    v14 = sub_100006924(&qword_100491608, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
    v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v12, v13, v14);
    v16 = -1 << *((_BYTE *)v4 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    v19 = *(_QWORD *)&v9[8 * (v17 >> 6)];
    v20 = 1 << v17;
    if (((1 << v17) & v19) != 0)
    {
      v21 = ~v16;
      v22 = sub_100006924(&qword_100491610, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
      do
      {
        v28 = *(_QWORD *)(v4[6] + 8 * v17);
        if ((dispatch thunk of static Equatable.== infix(_:_:)(&v28, &v29, v13, v22) & 1) != 0)
        {
          swift_release(v27);
          v5 = v25;
          goto LABEL_17;
        }
        v17 = (v17 + 1) & v21;
        v18 = v17 >> 6;
        v19 = *(_QWORD *)&v9[8 * (v17 >> 6)];
        v20 = 1 << v17;
      }
      while ((v19 & (1 << v17)) != 0);
      v5 = v25;
    }
    *(_QWORD *)&v9[8 * v18] = v20 | v19;
    *(_QWORD *)(v4[6] + 8 * v17) = v27;
    v23 = v4[2];
    v11 = __OFADD__(v23, 1);
    v24 = v23 + 1;
    if (v11)
      goto LABEL_33;
    v4[2] = v24;
LABEL_17:
    if (v8 == v5)
      return;
  }
  if (v8 >= *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_34;
  v10 = swift_retain(*(_QWORD *)(v26 + 32 + 8 * v8));
  v11 = __OFADD__(v8++, 1);
  if (!v11)
    goto LABEL_24;
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
}

Swift::Int sub_1000D3EDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int result;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100005574(&qword_1004915F8);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v24 = v1;
    v25 = a1 + 32;
    while (1)
    {
      v6 = *(unsigned __int8 *)(v25 + v4++);
      Hasher.init(_seed:)(v26);
      v7 = 0x657469726F766166;
      if (v6 != 1)
        v7 = 0x64616F6C6E776F64;
      if (v6)
        v8 = v7;
      else
        v8 = 7105633;
      if (v6)
        v9 = 0xE900000000000073;
      else
        v9 = 0xE300000000000000;
      String.hash(into:)(v26, v8, v9);
      swift_bridgeObjectRelease();
      result = Hasher._finalize()();
      v11 = ~(-1 << *(_BYTE *)(v3 + 32));
      v12 = result & v11;
      v13 = (result & (unint64_t)v11) >> 6;
      v14 = *(_QWORD *)(v5 + 8 * v13);
      v15 = 1 << (result & v11);
      if ((v15 & v14) != 0)
      {
        do
        {
          if (*(_BYTE *)(*(_QWORD *)(v3 + 48) + v12))
          {
            if (*(_BYTE *)(*(_QWORD *)(v3 + 48) + v12) == 1)
              v16 = 0x657469726F766166;
            else
              v16 = 0x64616F6C6E776F64;
            v17 = 0xE900000000000073;
            if (!v6)
            {
LABEL_18:
              v18 = 0xE300000000000000;
              v19 = 7105633;
              if (v16 != 7105633)
                goto LABEL_27;
              goto LABEL_26;
            }
          }
          else
          {
            v17 = 0xE300000000000000;
            v16 = 7105633;
            if (!v6)
              goto LABEL_18;
          }
          if (v6 == 1)
            v19 = 0x657469726F766166;
          else
            v19 = 0x64616F6C6E776F64;
          v18 = 0xE900000000000073;
          if (v16 != v19)
            goto LABEL_27;
LABEL_26:
          if (v17 == v18)
          {
            swift_bridgeObjectRelease_n(v17, 2);
            goto LABEL_4;
          }
LABEL_27:
          v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v19, v18, 0);
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          if ((v20 & 1) != 0)
            goto LABEL_4;
          v12 = (v12 + 1) & v11;
          v13 = v12 >> 6;
          v14 = *(_QWORD *)(v5 + 8 * (v12 >> 6));
          v15 = 1 << v12;
        }
        while ((v14 & (1 << v12)) != 0);
      }
      *(_QWORD *)(v5 + 8 * v13) = v15 | v14;
      *(_BYTE *)(*(_QWORD *)(v3 + 48) + v12) = v6;
      v21 = *(_QWORD *)(v3 + 16);
      v22 = __OFADD__(v21, 1);
      v23 = v21 + 1;
      if (v22)
        break;
      *(_QWORD *)(v3 + 16) = v23;
LABEL_4:
      if (v4 == v24)
        return v3;
    }
    __break(1u);
  }
  else
  {
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return result;
}

void *sub_1000D413C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v5[10];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100005574(&qword_1004915F0);
    static _SetStorage.allocate(capacity:)(v1);
    v3 = *(unsigned __int8 *)(a1 + 32);
    Hasher.init(_seed:)(v5);
    __asm { BR              X8 }
  }
  return &_swiftEmptySetSingleton;
}

void *sub_1000D4650(uint64_t a1)
{
  uint64_t v1;
  int v3;
  __int128 v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100005574(&qword_1004915E8);
    static _SetStorage.allocate(capacity:)(v1);
    v3 = *(unsigned __int8 *)(a1 + 32);
    Hasher.init(_seed:)(&v5);
    __asm { BR              X8 }
  }
  return &_swiftEmptySetSingleton;
}

uint64_t sub_1000D4E18()
{
  return sub_1000D4E44((uint64_t *)&unk_100491650);
}

uint64_t sub_1000D4E24(uint64_t a1, uint64_t a2)
{
  return sub_1000D4EB4(a1, a2, (uint64_t *)&unk_100491650, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000CC0D4);
}

uint64_t sub_1000D4E38()
{
  return sub_1000D4E44(&qword_1004921D0);
}

uint64_t sub_1000D4E44(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = sub_100005574(a1);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = v5 + *(_QWORD *)(v3 + 64);
  v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v6, v7);
}

uint64_t sub_1000D4EA0(uint64_t a1, uint64_t a2)
{
  return sub_1000D4EB4(a1, a2, &qword_1004921D0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000CB7A4);
}

uint64_t sub_1000D4EB4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(sub_100005574(a3) - 8) + 80);
  return a4(a1, a2, v4 + ((v7 + 16) & ~v7));
}

uint64_t sub_1000D4F10()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000D4F20(void *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;

  sub_1000CB934(a1, a2, a3, *(_BYTE **)(v3 + 16));
}

uint64_t sub_1000D4F28()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000D4F38(void *a1, char a2)
{
  uint64_t v2;

  sub_1000C9990(a1, a2 & 1, *(void (**)(Class, _QWORD))(v2 + 16));
}

void sub_1000D4F44(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000E589C(a1, a2, *(void (**)(void *, uint64_t))(v2 + 16));
}

void sub_1000D4F4C(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    swift_errorRelease(a1);
  else

}

uint64_t sub_1000D4F58()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000D4F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000C9B60(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1000D4F84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for Playlist(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1000D5018(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(type metadata accessor for Playlist(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = (uint64_t *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v10 = *v9;
  v11 = v9[1];
  v12 = (_QWORD *)swift_task_alloc(dword_1004916C4);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_10000F894;
  return sub_1000C9D38(a1, v6, v7, v8, v10, v11);
}

uint64_t sub_1000D50C4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D50E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1004916EC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10000F894;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1004916E8 + dword_1004916E8))(a1, v4);
}

double static Alert.enableCloudLibraryAlert(context:)@<D0>(char a1@<W0>, uint64_t a2@<X8>)
{
  __int128 v3;
  double result;
  _OWORD v5[2];
  __int128 v6;
  uint64_t v7;

  sub_1000DD89C(a1, (uint64_t)v5);
  v3 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v3;
  result = *(double *)&v6;
  *(_OWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 48) = v7;
  return result;
}

double static Alert.explicitRestrictedAlert(forPlayback:)@<D0>(char a1@<W0>, uint64_t a2@<X8>)
{
  __int128 v3;
  double result;
  _OWORD v5[2];
  __int128 v6;
  uint64_t v7;

  sub_1000DDA90(a1, (uint64_t)v5);
  v3 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v3;
  result = *(double *)&v6;
  *(_OWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 48) = v7;
  return result;
}

double static Alert.confirmDelete(for:library:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  double result;
  _OWORD v10[2];
  __int128 v11;
  uint64_t v12;

  v5 = a1[3];
  v6 = a1[4];
  v7 = sub_10000ABC8(a1, v5);
  sub_1000D6C94((uint64_t)v7, a2, v5, v6, (uint64_t)v10);
  v8 = v10[1];
  *(_OWORD *)a3 = v10[0];
  *(_OWORD *)(a3 + 16) = v8;
  result = *(double *)&v11;
  *(_OWORD *)(a3 + 32) = v11;
  *(_QWORD *)(a3 + 48) = v12;
  return result;
}

double static Alert.cellularDataDisallowedAlert(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  double result;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  sub_1000DE7C8(a1, a2, (uint64_t *)v6);
  v4 = v6[1];
  *(_OWORD *)a3 = v6[0];
  *(_OWORD *)(a3 + 16) = v4;
  result = *(double *)&v7;
  *(_OWORD *)(a3 + 32) = v7;
  *(_QWORD *)(a3 + 48) = v8;
  return result;
}

double static Alert.dolbyAtmosDownloadsAlert(message:completion:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;
  uint64_t v10;

  sub_1000DE424(a1, a2, a3, a4, (uint64_t)v8);
  v6 = v8[1];
  *(_OWORD *)a5 = v8[0];
  *(_OWORD *)(a5 + 16) = v6;
  result = *(double *)&v9;
  *(_OWORD *)(a5 + 32) = v9;
  *(_QWORD *)(a5 + 48) = v10;
  return result;
}

uint64_t static Alert.Action.tapToRadar(title:description:screenshots:attachments:keywords:withDevicePrefix:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  _BYTE v11[56];

  sub_1000DEBBC(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)v11);
  return sub_1000DEF10((uint64_t)v11, a9);
}

double static Alert.cellularRestrictedAlert(model:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  double result;
  _OWORD v5[2];
  __int128 v6;
  uint64_t v7;

  sub_1000DEF58(a1, v5);
  v3 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v3;
  result = *(double *)&v6;
  *(_OWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 48) = v7;
  return result;
}

uint64_t sub_1000D53B0()
{
  return swift_task_switch(sub_1000D53C4, 0, 0);
}

id sub_1000D53C4()
{
  uint64_t v0;
  id result;
  void *v2;

  result = objc_msgSend((id)objc_opt_self(MPNetworkObserver), "sharedNetworkObserver");
  if (result)
  {
    v2 = result;
    objc_msgSend(result, "setVideoCellularStreamingAllowed:", 1);

    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000D542C()
{
  return swift_task_switch(sub_1000D5440, 0, 0);
}

id sub_1000D5440()
{
  uint64_t v0;
  id result;
  void *v2;

  result = objc_msgSend((id)objc_opt_self(MPNetworkObserver), "sharedNetworkObserver");
  if (result)
  {
    v2 = result;
    objc_msgSend(result, "setMusicCellularStreamingAllowed:", 1);

    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

double static Alert.networkUnavailableAlert(model:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  double result;
  _OWORD v5[2];
  __int128 v6;
  uint64_t v7;

  sub_1000DFB18(a1, (uint64_t *)v5);
  v3 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v3;
  result = *(double *)&v6;
  *(_OWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 48) = v7;
  return result;
}

uint64_t sub_1000D54F0()
{
  return swift_task_switch(sub_1000E0648, 0, 0);
}

double static Alert.accountRequiredAlert()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v55 = type metadata accessor for UUID(0);
  v50 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v3 = (char *)&v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for String.LocalizationValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v45 - v12;
  String.LocalizationValue.init(stringLiteral:)(0xD000000000000010, 0x80000001003B0710);
  v14 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v14(v11, v13, v7);
  if (qword_10048C570 != -1)
    swift_once(&qword_10048C570, sub_10000AD54);
  v15 = qword_1004A1DA0;
  static Locale.current.getter((id)qword_1004A1DA0);
  v16 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v15, v6, 0, 0, 256);
  v53 = v17;
  v54 = v16;
  v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v13, v7);
  String.LocalizationValue.init(stringLiteral:)(0xD00000000000004FLL, 0x80000001003B0730);
  v14(v11, v13, v7);
  v19 = qword_1004A1DA0;
  static Locale.current.getter((id)qword_1004A1DA0);
  v20 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v19, v6, 0, 0, 256);
  v51 = v21;
  v52 = v20;
  v18(v13, v7);
  String.LocalizationValue.init(stringLiteral:)(19279, 0xE200000000000000);
  v14(v11, v13, v7);
  v22 = qword_1004A1DA0;
  static Locale.current.getter((id)qword_1004A1DA0);
  v23 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v22, v6, 0, 0, 256);
  v48 = v24;
  v49 = v23;
  v18(v13, v7);
  v25 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v26 = UUID.uuidString.getter(v25);
  v46 = v27;
  v47 = v26;
  v28 = *(void (**)(char *, uint64_t))(v50 + 8);
  v29 = v55;
  v28(v3, v55);
  String.LocalizationValue.init(stringLiteral:)(0x73676E6974746553, 0xE800000000000000);
  v14(v11, v13, v7);
  v30 = qword_1004A1DA0;
  static Locale.current.getter((id)qword_1004A1DA0);
  v31 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v30, v6, 0, 0, 256);
  v33 = v32;
  v18(v13, v7);
  v34 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v35 = UUID.uuidString.getter(v34);
  v37 = v36;
  v28(v3, v29);
  v38 = sub_100005574(&qword_100493240);
  v39 = swift_allocObject(v38, 144, 7);
  *(_QWORD *)&result = 2;
  *(_OWORD *)(v39 + 16) = xmmword_100384A60;
  *(_QWORD *)(v39 + 32) = v35;
  *(_QWORD *)(v39 + 40) = v37;
  *(_QWORD *)(v39 + 48) = v31;
  *(_QWORD *)(v39 + 56) = v33;
  *(_BYTE *)(v39 + 64) = 2;
  *(_QWORD *)(v39 + 72) = &unk_100491770;
  *(_QWORD *)(v39 + 80) = 0;
  v41 = v46;
  *(_QWORD *)(v39 + 88) = v47;
  *(_QWORD *)(v39 + 96) = v41;
  v42 = v48;
  *(_QWORD *)(v39 + 104) = v49;
  *(_QWORD *)(v39 + 112) = v42;
  *(_BYTE *)(v39 + 120) = 2;
  *(_QWORD *)(v39 + 128) = 0;
  *(_QWORD *)(v39 + 136) = 0;
  v43 = v53;
  *(_QWORD *)a1 = v54;
  *(_QWORD *)(a1 + 8) = v43;
  v44 = v51;
  *(_QWORD *)(a1 + 16) = v52;
  *(_QWORD *)(a1 + 24) = v44;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v39;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t sub_1000D58D0()
{
  return swift_task_switch(sub_1000D58E4, 0, 0);
}

id sub_1000D58E4()
{
  uint64_t v0;
  id result;
  void *v2;

  result = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (result)
  {
    v2 = result;
    LSApplicationWorkspace.openSettings()();

    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

double static Alert.subscriptionRequiredAlert()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v55 = type metadata accessor for UUID(0);
  v50 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v3 = (char *)&v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for String.LocalizationValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v45 - v12;
  String.LocalizationValue.init(stringLiteral:)(0xD000000000000015, 0x80000001003B0780);
  v14 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v14(v11, v13, v7);
  if (qword_10048C570 != -1)
    swift_once(&qword_10048C570, sub_10000AD54);
  v15 = qword_1004A1DA0;
  static Locale.current.getter((id)qword_1004A1DA0);
  v16 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v15, v6, 0, 0, 256);
  v53 = v17;
  v54 = v16;
  v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v13, v7);
  String.LocalizationValue.init(stringLiteral:)(0xD000000000000059, 0x80000001003B07A0);
  v14(v11, v13, v7);
  v19 = qword_1004A1DA0;
  static Locale.current.getter((id)qword_1004A1DA0);
  v20 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v19, v6, 0, 0, 256);
  v51 = v21;
  v52 = v20;
  v18(v13, v7);
  String.LocalizationValue.init(stringLiteral:)(19279, 0xE200000000000000);
  v14(v11, v13, v7);
  v22 = qword_1004A1DA0;
  static Locale.current.getter((id)qword_1004A1DA0);
  v23 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v22, v6, 0, 0, 256);
  v48 = v24;
  v49 = v23;
  v18(v13, v7);
  v25 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v26 = UUID.uuidString.getter(v25);
  v46 = v27;
  v47 = v26;
  v28 = *(void (**)(char *, uint64_t))(v50 + 8);
  v29 = v55;
  v28(v3, v55);
  String.LocalizationValue.init(stringLiteral:)(0x73676E6974746553, 0xE800000000000000);
  v14(v11, v13, v7);
  v30 = qword_1004A1DA0;
  static Locale.current.getter((id)qword_1004A1DA0);
  v31 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v30, v6, 0, 0, 256);
  v33 = v32;
  v18(v13, v7);
  v34 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v35 = UUID.uuidString.getter(v34);
  v37 = v36;
  v28(v3, v29);
  v38 = sub_100005574(&qword_100493240);
  v39 = swift_allocObject(v38, 144, 7);
  *(_QWORD *)&result = 2;
  *(_OWORD *)(v39 + 16) = xmmword_100384A60;
  *(_QWORD *)(v39 + 32) = v35;
  *(_QWORD *)(v39 + 40) = v37;
  *(_QWORD *)(v39 + 48) = v31;
  *(_QWORD *)(v39 + 56) = v33;
  *(_BYTE *)(v39 + 64) = 2;
  *(_QWORD *)(v39 + 72) = &unk_100491778;
  *(_QWORD *)(v39 + 80) = 0;
  v41 = v46;
  *(_QWORD *)(v39 + 88) = v47;
  *(_QWORD *)(v39 + 96) = v41;
  v42 = v48;
  *(_QWORD *)(v39 + 104) = v49;
  *(_QWORD *)(v39 + 112) = v42;
  *(_BYTE *)(v39 + 120) = 2;
  *(_QWORD *)(v39 + 128) = 0;
  *(_QWORD *)(v39 + 136) = 0;
  v43 = v53;
  *(_QWORD *)a1 = v54;
  *(_QWORD *)(a1 + 8) = v43;
  v44 = v51;
  *(_QWORD *)(a1 + 16) = v52;
  *(_QWORD *)(a1 + 24) = v44;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v39;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t sub_1000D5D0C()
{
  return swift_task_switch(sub_1000D5D20, 0, 0);
}

uint64_t sub_1000D5D20()
{
  uint64_t v0;
  id v1;
  void *v2;

  v1 = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (v1)
  {
    v2 = v1;
    LSApplicationWorkspace.openRestrictions()();

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D5D78()
{
  return swift_task_switch(sub_1000D5D8C, 0, 0);
}

id sub_1000D5D8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  id result;
  void *v5;
  NSString v6;
  void *v7;

  if (qword_10048C658 != -1)
    swift_once(&qword_10048C658, sub_1000B3BEC);
  v1 = static ApplicationCapabilities.Controller.shared;
  KeyPath = swift_getKeyPath(&unk_10038B720);
  v3 = swift_getKeyPath(&unk_10038B748);
  static Published.subscript.getter((_QWORD *)(v0 + 16), v1, KeyPath, v3);
  swift_release(v3);
  swift_release(KeyPath);
  v7 = *(void **)(v0 + 96);
  result = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
  if (result)
  {
    v5 = result;
    static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureExplicitContentAllowed);
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    objc_msgSend(v5, "setBoolValue:forSetting:", 1, v6);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

double static Alert.contentUnavailableAlert()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = type metadata accessor for UUID(0);
  v35 = *(_QWORD *)(v2 - 8);
  v36 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Locale(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for String.LocalizationValue(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v32 - v13;
  String.LocalizationValue.init(stringLiteral:)(0xD00000000000003FLL, 0x80000001003B0800);
  v15 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v15(v12, v14, v8);
  if (qword_10048C570 != -1)
    swift_once(&qword_10048C570, sub_10000AD54);
  v16 = qword_1004A1DA0;
  static Locale.current.getter((id)qword_1004A1DA0);
  v17 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v16, v7, 0, 0, 256);
  v33 = v18;
  v34 = v17;
  v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v14, v8);
  String.LocalizationValue.init(stringLiteral:)(19279, 0xE200000000000000);
  v15(v12, v14, v8);
  v20 = qword_1004A1DA0;
  static Locale.current.getter((id)qword_1004A1DA0);
  v21 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v20, v7, 0, 0, 256);
  v23 = v22;
  v19(v14, v8);
  v24 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v25 = UUID.uuidString.getter(v24);
  v27 = v26;
  (*(void (**)(char *, uint64_t))(v35 + 8))(v4, v36);
  v28 = sub_100005574(&qword_100493240);
  v29 = swift_allocObject(v28, 88, 7);
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v29 + 16) = xmmword_100384A80;
  *(_QWORD *)(v29 + 32) = v25;
  *(_QWORD *)(v29 + 40) = v27;
  *(_QWORD *)(v29 + 48) = v21;
  *(_QWORD *)(v29 + 56) = v23;
  *(_BYTE *)(v29 + 64) = 2;
  *(_QWORD *)(v29 + 72) = 0;
  *(_QWORD *)(v29 + 80) = 0;
  v31 = v33;
  *(_QWORD *)a1 = v34;
  *(_QWORD *)(a1 + 8) = v31;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v29;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

double static Alert.userUploadRequiredAlert()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = type metadata accessor for UUID(0);
  v38 = *(_QWORD *)(v2 - 8);
  v39 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Locale(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for String.LocalizationValue(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v35 - v13;
  String.LocalizationValue.init(stringLiteral:)(0xD00000000000002CLL, 0x80000001003B0840);
  v15 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v15(v12, v14, v8);
  if (qword_10048C570 != -1)
    swift_once(&qword_10048C570, sub_10000AD54);
  v16 = qword_1004A1DA0;
  static Locale.current.getter((id)qword_1004A1DA0);
  v17 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v16, v7, 0, 0, 256);
  v36 = v18;
  v37 = v17;
  v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v14, v8);
  String.LocalizationValue.init(stringLiteral:)(0xD000000000000060, 0x80000001003B0870);
  v15(v12, v14, v8);
  v20 = qword_1004A1DA0;
  static Locale.current.getter((id)qword_1004A1DA0);
  v35 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v20, v7, 0, 0, 256);
  v22 = v21;
  v19(v14, v8);
  String.LocalizationValue.init(stringLiteral:)(19279, 0xE200000000000000);
  v15(v12, v14, v8);
  v23 = qword_1004A1DA0;
  static Locale.current.getter((id)qword_1004A1DA0);
  v24 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v23, v7, 0, 0, 256);
  v26 = v25;
  v19(v14, v8);
  v27 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v28 = UUID.uuidString.getter(v27);
  v30 = v29;
  (*(void (**)(char *, uint64_t))(v38 + 8))(v4, v39);
  v31 = sub_100005574(&qword_100493240);
  v32 = swift_allocObject(v31, 88, 7);
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v32 + 16) = xmmword_100384A80;
  *(_QWORD *)(v32 + 32) = v28;
  *(_QWORD *)(v32 + 40) = v30;
  *(_QWORD *)(v32 + 48) = v24;
  *(_QWORD *)(v32 + 56) = v26;
  *(_BYTE *)(v32 + 64) = 2;
  *(_QWORD *)(v32 + 72) = 0;
  *(_QWORD *)(v32 + 80) = 0;
  v34 = v36;
  *(_QWORD *)a1 = v37;
  *(_QWORD *)(a1 + 8) = v34;
  *(_QWORD *)(a1 + 16) = v35;
  *(_QWORD *)(a1 + 24) = v22;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v32;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

double static Alert.ageVerificationFallbackAlert()@<D0>(uint64_t a1@<X8>)
{
  __int128 v2;
  double result;
  _OWORD v4[2];
  __int128 v5;
  uint64_t v6;

  sub_1000DFFDC((uint64_t)v4);
  v2 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v2;
  result = *(double *)&v5;
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  return result;
}

uint64_t sub_1000D64E8()
{
  return swift_task_switch(sub_1000D64FC, 0, 0);
}

uint64_t sub_1000D64FC()
{
  uint64_t v0;

  if (qword_10048C7E8 != -1)
    swift_once(&qword_10048C7E8, sub_1000F900C);
  CloudLibrary.StatusObserver.enableCloudLibrary(completion:)(0, 0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static Alert.Action.cancel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10048CE50 != -1)
    swift_once(&qword_10048CE50, sub_1001ECBE8);
  v7 = static String.cancelButtonTitle;
  v6 = qword_1004A2C90;
  swift_bridgeObjectRetain();
  v8 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v9 = UUID.uuidString.getter(v8);
  v11 = v10;
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t sub_1000D6644(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_1000D665C, 0, 0);
}

uint64_t sub_1000D665C()
{
  uint64_t v0;
  void (*v1)(_QWORD);

  v1 = *(void (**)(_QWORD))(v0 + 16);
  if (v1)
    v1(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D6698(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_1000D66B0, 0, 0);
}

id sub_1000D66B0()
{
  uint64_t v0;
  id result;
  void *v2;
  uint64_t v3;

  result = objc_msgSend((id)objc_opt_self(MPNetworkObserver), "sharedNetworkObserver");
  if (result)
  {
    v2 = result;
    v3 = *(_QWORD *)(v0 + 16);
    objc_msgSend(result, "setMusicCellularDownloadingAllowed:", 1);

    if (v3)
      (*(void (**)(uint64_t))(v0 + 16))(1);
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000D672C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return swift_task_switch(sub_1000D6744, 0, 0);
}

uint64_t sub_1000D6744()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *(_QWORD **)(v0 + 24);
  v3 = v1[3];
  v2 = v1[4];
  v4 = sub_10000ABC8(v1, v3);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to MusicLibrary.remove<A>(_:)[1]);
  *(_QWORD *)(v0 + 40) = v5;
  *v5 = v0;
  v5[1] = sub_1000D67B8;
  return MusicLibrary.remove<A>(_:)(v4, v3, v2);
}

uint64_t sub_1000D67B8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 40);
  v3 = *v1;
  *(_QWORD *)(v3 + 48) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1000D6824, 0, 0);
  else
    return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000D6824(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v16;

  if (qword_10048C590 != -1)
    swift_once(&qword_10048C590, sub_100086650);
  v3 = *(_QWORD *)(v2 + 48);
  v4 = type metadata accessor for Logger(0, a2);
  sub_1000086B4(v4, (uint64_t)static Logger.actions);
  swift_errorRetain(v3);
  v5 = swift_errorRetain(v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v2 + 48);
  if (v8)
  {
    v10 = swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v16 = v11;
    *(_DWORD *)v10 = 136315138;
    *(_QWORD *)(v2 + 16) = v9;
    swift_errorRetain(v9);
    v12 = sub_100005574((uint64_t *)&unk_1004911F0);
    v13 = (char *)String.init<A>(describing:)(v2 + 16, v12);
    *(_QWORD *)(v10 + 4) = sub_100019400(v13, v14, &v16);
    swift_bridgeObjectRelease();
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to delete item=%s", (uint8_t *)v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v9);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v2 + 48));
    swift_errorRelease(v9);
    swift_errorRelease(v9);

  }
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000D69E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_1000D6A00, 0, 0);
}

uint64_t sub_1000D6A00()
{
  uint64_t v0;
  int *v1;
  id v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v1 = *(int **)(v0 + 16);
  v2 = objc_msgSend((id)objc_opt_self(MPPlaybackUserDefaults), "standardUserDefaults");
  objc_msgSend(v2, "setPrefersSpatialDownloads:", 1);

  v5 = (uint64_t (*)(uint64_t))((char *)v1 + *v1);
  v3 = (_QWORD *)swift_task_alloc(v1[1]);
  *(_QWORD *)(v0 + 32) = v3;
  *v3 = v0;
  v3[1] = sub_1000D6A98;
  return v5(1);
}

uint64_t sub_1000D6A98()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 32));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000D6AE0(int *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD);

  v4 = (uint64_t (*)(_QWORD))((char *)a1 + *a1);
  v2 = (_QWORD *)swift_task_alloc(a1[1]);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10000F894;
  return v4(0);
}

uint64_t sub_1000D6B3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v1 + 24) = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000D6BA8, v3, v4);
}

uint64_t sub_1000D6BA8()
{
  uint64_t v0;
  id v1;
  NSURL *v2;
  void *v3;
  void *v4;
  Class isa;

  swift_release(*(_QWORD *)(v0 + 24));
  v1 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  URL._bridgeToObjectiveC()(v2);
  v4 = v3;
  sub_100098E90((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for OpenExternalURLOptionsKey(0);
  sub_100006924((unint64_t *)&qword_1004932E0, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_100386F78);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v1, "openURL:options:completionHandler:", v4, isa, 0);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D6C94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42[2];
  _QWORD v43[5];

  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43[3] = a3;
  v43[4] = a4;
  v14 = (void (*)(char *, char *, uint64_t))sub_1000207D4(v43);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(v14, a1, a3);
  v15 = sub_1000DC370(v14, a3, a4);
  v40 = v16;
  v41 = v15;
  v39 = v17;
  v19 = v18;
  sub_1000244B0((uint64_t)v43, (uint64_t)v42);
  v20 = swift_allocObject(&unk_100449D78, 64, 7);
  sub_1000137C8(v42, v20 + 16);
  *(_QWORD *)(v20 + 56) = a2;
  swift_bridgeObjectRetain();
  swift_retain(a2);
  v21 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v22 = UUID.uuidString.getter(v21);
  v37 = v23;
  v38 = v22;
  v24 = *(void (**)(char *, uint64_t))(v11 + 8);
  v24(v13, v10);
  if (qword_10048CE50 != -1)
    swift_once(&qword_10048CE50, sub_1001ECBE8);
  v26 = static String.cancelButtonTitle;
  v25 = qword_1004A2C90;
  swift_bridgeObjectRetain();
  v27 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v28 = UUID.uuidString.getter(v27);
  v30 = v29;
  v24(v13, v10);
  swift_bridgeObjectRelease(v19);
  v31 = sub_100005574(&qword_100493240);
  v32 = swift_allocObject(v31, 144, 7);
  *(_OWORD *)(v32 + 16) = xmmword_100384A60;
  v33 = v37;
  *(_QWORD *)(v32 + 32) = v38;
  *(_QWORD *)(v32 + 40) = v33;
  *(_QWORD *)(v32 + 48) = v39;
  *(_QWORD *)(v32 + 56) = v19;
  *(_BYTE *)(v32 + 64) = 2;
  *(_QWORD *)(v32 + 72) = &unk_1004917F8;
  *(_QWORD *)(v32 + 80) = v20;
  *(_QWORD *)(v32 + 88) = v28;
  *(_QWORD *)(v32 + 96) = v30;
  *(_QWORD *)(v32 + 104) = v26;
  *(_QWORD *)(v32 + 112) = v25;
  *(_BYTE *)(v32 + 120) = 0;
  *(_QWORD *)(v32 + 128) = 0;
  *(_QWORD *)(v32 + 136) = 0;
  result = sub_10000682C(v43);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  v35 = v40;
  *(_QWORD *)(a5 + 16) = v41;
  *(_QWORD *)(a5 + 24) = v35;
  *(_BYTE *)(a5 + 32) = 1;
  *(_QWORD *)(a5 + 40) = v32;
  *(_QWORD *)(a5 + 48) = 0;
  return result;
}

uint64_t sub_1000D6EAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  void (*v41)(_QWORD *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  uint64_t v46;
  id v47;
  char *v48;
  char *v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  char *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  char *v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  id v75;
  char *v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t);
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  id v86;
  char *v87;
  void (*v88)(char *, uint64_t);
  uint64_t v89;
  char *v90;
  void (*v91)(char *, char *, uint64_t);
  uint64_t v92;
  uint64_t v93;
  id v94;
  char *v95;
  void (*v96)(char *, uint64_t);
  uint64_t v97;
  char *v98;
  void (*v99)(char *, char *, uint64_t);
  uint64_t v100;
  uint64_t v101;
  id v102;
  char *v103;
  void (*v104)(char *, uint64_t);
  uint64_t v105;
  uint64_t *v106;
  char *v107;
  char *v108;
  void (*v109)(char *, char *, uint64_t);
  uint64_t v110;
  uint64_t v111;
  id v112;
  char *v113;
  void (*v114)(char *, uint64_t);
  uint64_t v115;
  uint64_t result;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  int v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(char *, uint64_t);
  char *v146;
  void (*v147)(char *, char *, uint64_t);
  uint64_t v148;
  uint64_t v149;
  id v150;
  char *v151;
  void (*v152)(char *, uint64_t);
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD v190[5];
  uint64_t v191;
  uint64_t v192;

  v188 = a1;
  v166 = type metadata accessor for Track(0);
  v161 = *(_QWORD *)(v166 - 8);
  v1 = __chkstk_darwin(v166);
  v159 = (char *)&v154 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __chkstk_darwin(v1);
  v160 = (char *)&v154 - v4;
  __chkstk_darwin(v3);
  v162 = (char *)&v154 - v5;
  v164 = type metadata accessor for Playlist.Entry.InternalItem(0);
  v163 = *(_QWORD *)(v164 - 8);
  __chkstk_darwin(v164);
  v165 = (char *)&v154 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = type metadata accessor for Playlist.Entry(0);
  v167 = *(_QWORD *)(v170 - 8);
  v7 = __chkstk_darwin(v170);
  v168 = (char *)&v154 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v169 = (char *)&v154 - v9;
  v174 = type metadata accessor for TVEpisode(0);
  v171 = *(_QWORD *)(v174 - 8);
  v10 = __chkstk_darwin(v174);
  v155 = (char *)&v154 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v173 = (char *)&v154 - v12;
  v177 = type metadata accessor for TVSeason(0);
  v172 = *(_QWORD *)(v177 - 8);
  __chkstk_darwin(v177);
  v176 = (char *)&v154 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = type metadata accessor for MusicMovie(0);
  v175 = *(_QWORD *)(v180 - 8);
  v14 = __chkstk_darwin(v180);
  v158 = (char *)&v154 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v179 = (char *)&v154 - v16;
  v17 = type metadata accessor for Song(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v157 = (char *)&v154 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v182 = (char *)&v154 - v21;
  v183 = type metadata accessor for Playlist(0);
  v181 = *(_QWORD *)(v183 - 8);
  __chkstk_darwin(v183);
  v185 = (char *)&v154 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for MusicVideo(0);
  v184 = *(_QWORD *)(v23 - 8);
  v24 = __chkstk_darwin(v23);
  v156 = (char *)&v154 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v27 = (char *)&v154 - v26;
  v28 = type metadata accessor for Locale(0);
  __chkstk_darwin(v28);
  v187 = (char *)&v154 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for String.LocalizationValue(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = __chkstk_darwin(v30);
  v34 = (char *)&v154 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v36 = (char *)&v154 - v35;
  v37 = type metadata accessor for Album(0);
  v186 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v39 = (char *)&v154 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190[3] = v17;
  v190[4] = &protocol witness table for Song;
  v40 = sub_1000207D4(v190);
  v178 = v18;
  v41 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v18 + 16);
  v42 = v188;
  v188 = v17;
  v41(v40, v42, v17);
  sub_1000244B0((uint64_t)v190, (uint64_t)&v189);
  v43 = sub_100005574(&qword_100491800);
  if (swift_dynamicCast(v39, &v189, v43, v37, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003DLL, 0x80000001003B1240);
    v44 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v44(v34, v36, v30);
    v45 = v34;
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v46 = qword_1004A1DA0;
    v47 = (id)qword_1004A1DA0;
    v48 = v187;
    static Locale.current.getter(v47);
    v188 = String.init(localized:table:bundle:locale:comment:)(v45, 0, 0, v46, v48, 0, 0, 256);
    v185 = v49;
    v50 = *(void (**)(char *, uint64_t))(v31 + 8);
    v50(v36, v30);
    String.LocalizationValue.init(stringLiteral:)(0x41206574656C6544, 0xEC0000006D75626CLL);
    v44(v45, v36, v30);
    v51 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v45, 0, 0, v51, v48, 0, 0, 256);
    v52 = v36;
    v53 = v188;
    v50(v52, v30);
    v54 = *(void (**)(char *, uint64_t))(v186 + 8);
    v55 = v39;
    goto LABEL_5;
  }
  v57 = v34;
  v186 = v30;
  v58 = v23;
  if ((swift_dynamicCast(v27, &v189, v43, v23, 0) & 1) != 0)
  {
    v188 = v23;
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000043, 0x80000001003B11D0);
    v59 = v31;
    v60 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v61 = v57;
    v62 = v186;
    v60(v57, v36, v186);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v63 = qword_1004A1DA0;
    v64 = (id)qword_1004A1DA0;
    v65 = v187;
    static Locale.current.getter(v64);
    v66 = String.init(localized:table:bundle:locale:comment:)(v61, 0, 0, v63, v65, 0, 0, 256);
    v67 = *(void (**)(char *, uint64_t))(v59 + 8);
    v67(v36, v62);
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000012, 0x80000001003B1220);
    v60(v61, v36, v62);
    v68 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v61, 0, 0, v68, v65, 0, 0, 256);
    v69 = v36;
    v53 = v66;
    v67(v69, v62);
    (*(void (**)(char *, uint64_t))(v184 + 8))(v27, v188);
    goto LABEL_32;
  }
  v70 = v183;
  if (swift_dynamicCast(v185, &v189, v43, v183, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000040, 0x80000001003B1180);
    v71 = v31;
    v72 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v73 = v186;
    v72(v34, v36, v186);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v74 = qword_1004A1DA0;
    v75 = (id)qword_1004A1DA0;
    v76 = v187;
    static Locale.current.getter(v75);
    v77 = String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v74, v76, 0, 0, 256);
    v78 = *(void (**)(char *, uint64_t))(v71 + 8);
    v78(v36, v73);
    String.LocalizationValue.init(stringLiteral:)(0x50206574656C6544, 0xEF7473696C79616CLL);
    v72(v34, v36, v73);
    v79 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v79, v76, 0, 0, 256);
    v80 = v36;
    v53 = v77;
    v78(v80, v73);
    (*(void (**)(char *, uint64_t))(v181 + 8))(v185, v70);
    goto LABEL_32;
  }
  v81 = v34;
  if (swift_dynamicCast(v182, &v189, v43, v188, 0))
  {
    v82 = v36;
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003CLL, 0x80000001003B1140);
    v83 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v84 = v186;
    v83(v57, v36, v186);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v85 = qword_1004A1DA0;
    v86 = (id)qword_1004A1DA0;
    v87 = v187;
    static Locale.current.getter(v86);
    v53 = String.init(localized:table:bundle:locale:comment:)(v81, 0, 0, v85, v87, 0, 0, 256);
    v88 = *(void (**)(char *, uint64_t))(v31 + 8);
    v88(v82, v84);
    String.LocalizationValue.init(stringLiteral:)(0x53206574656C6544, 0xEB00000000676E6FLL);
    v83(v81, v82, v84);
    v89 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v81, 0, 0, v89, v87, 0, 0, 256);
    v88(v82, v84);
    (*(void (**)(char *, uint64_t))(v178 + 8))(v182, v188);
    goto LABEL_32;
  }
  if (swift_dynamicCast(v179, &v189, v43, v180, 0))
  {
    v90 = v36;
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003DLL, 0x80000001003B1100);
    v91 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v92 = v186;
    v91(v57, v36, v186);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v93 = qword_1004A1DA0;
    v94 = (id)qword_1004A1DA0;
    v95 = v187;
    static Locale.current.getter(v94);
    v53 = String.init(localized:table:bundle:locale:comment:)(v81, 0, 0, v93, v95, 0, 0, 256);
    v96 = *(void (**)(char *, uint64_t))(v31 + 8);
    v96(v90, v92);
    String.LocalizationValue.init(stringLiteral:)(0x4D206574656C6544, 0xEC0000006569766FLL);
    v91(v81, v90, v92);
    v97 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v81, 0, 0, v97, v95, 0, 0, 256);
    v96(v90, v92);
    (*(void (**)(char *, uint64_t))(v175 + 8))(v179, v180);
    goto LABEL_32;
  }
  if (swift_dynamicCast(v176, &v189, v43, v177, 0))
  {
    v98 = v36;
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003FLL, 0x80000001003B10C0);
    v99 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v100 = v186;
    v99(v57, v36, v186);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v101 = qword_1004A1DA0;
    v102 = (id)qword_1004A1DA0;
    v103 = v187;
    static Locale.current.getter(v102);
    v53 = String.init(localized:table:bundle:locale:comment:)(v81, 0, 0, v101, v103, 0, 0, 256);
    v104 = *(void (**)(char *, uint64_t))(v31 + 8);
    v104(v98, v100);
    String.LocalizationValue.init(stringLiteral:)(0x54206574656C6544, 0xEE00776F68532056);
    v99(v81, v98, v100);
    v105 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v81, 0, 0, v105, v103, 0, 0, 256);
    v104(v98, v100);
    v54 = *(void (**)(char *, uint64_t))(v172 + 8);
    v55 = v176;
    v106 = &v192;
LABEL_30:
    v56 = *(v106 - 32);
    goto LABEL_31;
  }
  if (swift_dynamicCast(v173, &v189, v43, v174, 0))
  {
    v107 = v34;
    v108 = v36;
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000042, 0x80000001003B1050);
    v109 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v110 = v186;
    v109(v57, v36, v186);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v111 = qword_1004A1DA0;
    v112 = (id)qword_1004A1DA0;
    v113 = v187;
    static Locale.current.getter(v112);
    v53 = String.init(localized:table:bundle:locale:comment:)(v107, 0, 0, v111, v113, 0, 0, 256);
    v114 = *(void (**)(char *, uint64_t))(v31 + 8);
    v114(v108, v110);
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000011, 0x80000001003B10A0);
    v109(v107, v108, v110);
    v115 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v107, 0, 0, v115, v113, 0, 0, 256);
    v114(v108, v110);
    v54 = *(void (**)(char *, uint64_t))(v171 + 8);
    v55 = v173;
    v106 = &v191;
    goto LABEL_30;
  }
  v117 = v169;
  v37 = v170;
  if (!swift_dynamicCast(v169, &v189, v43, v170, 0))
  {
    v128 = v162;
    v129 = v166;
    if ((swift_dynamicCast(v162, &v189, v43, v166, 0) & 1) != 0)
    {
      v130 = v161;
      v131 = v160;
      (*(void (**)(char *, char *, uint64_t))(v161 + 32))(v160, v128, v129);
      v132 = v159;
      (*(void (**)(char *, char *, uint64_t))(v130 + 16))(v159, v131, v129);
      v133 = (*(uint64_t (**)(char *, uint64_t))(v130 + 88))(v132, v129);
      if (v133 == enum case for Track.song(_:))
      {
        (*(void (**)(char *, uint64_t))(v130 + 96))(v132, v129);
        v134 = v178;
        v135 = v157;
        v136 = v188;
        (*(void (**)(char *, char *, uint64_t))(v178 + 32))(v157, v132, v188);
        v53 = sub_1000D6EAC(v135);
        (*(void (**)(char *, uint64_t))(v134 + 8))(v135, v136);
LABEL_44:
        (*(void (**)(char *, uint64_t))(v130 + 8))(v131, v129);
        goto LABEL_32;
      }
      if (v133 == enum case for Track.musicVideo(_:))
      {
        (*(void (**)(char *, uint64_t))(v130 + 96))(v132, v129);
        v139 = v184;
        v140 = (uint64_t)v156;
        (*(void (**)(char *, char *, uint64_t))(v184 + 32))(v156, v132, v58);
        v53 = sub_1000D83C8(v140);
        (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v140, v58);
        goto LABEL_44;
      }
      v145 = *(void (**)(char *, uint64_t))(v130 + 8);
      v145(v131, v129);
      v145(v132, v129);
    }
LABEL_55:
    sub_10000682C(&v189);
    v146 = v36;
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000037, 0x80000001003B0FB0);
    v147 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v148 = v186;
    v147(v81, v36, v186);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v149 = qword_1004A1DA0;
    v150 = (id)qword_1004A1DA0;
    v151 = v187;
    static Locale.current.getter(v150);
    v53 = String.init(localized:table:bundle:locale:comment:)(v81, 0, 0, v149, v151, 0, 0, 256);
    v152 = *(void (**)(char *, uint64_t))(v31 + 8);
    v152(v146, v148);
    String.LocalizationValue.init(stringLiteral:)(0x6574656C6544, 0xE600000000000000);
    v147(v81, v146, v148);
    v153 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v81, 0, 0, v153, v151, 0, 0, 256);
    v152(v146, v148);
    goto LABEL_33;
  }
  v118 = v167;
  v119 = v168;
  v120 = (*(uint64_t (**)(char *, char *, uint64_t))(v167 + 32))(v168, v117, v37);
  v121 = v165;
  Playlist.Entry.internalItem.getter(v120);
  v122 = v163;
  v123 = v164;
  v124 = (*(uint64_t (**)(char *, uint64_t))(v163 + 88))(v121, v164);
  if (v124 == enum case for Playlist.Entry.InternalItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v122 + 96))(v121, v123);
    v125 = v175;
    v126 = (uint64_t)v158;
    v127 = v180;
    (*(void (**)(char *, char *, uint64_t))(v175 + 32))(v158, v121, v180);
    v53 = sub_1000D9910(v126);
    (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v126, v127);
    v54 = *(void (**)(char *, uint64_t))(v118 + 8);
    v55 = v119;
LABEL_5:
    v56 = v37;
LABEL_31:
    v54(v55, v56);
LABEL_32:
    sub_10000682C(&v189);
LABEL_33:
    sub_10000682C(v190);
    return v53;
  }
  if (v124 == enum case for Playlist.Entry.InternalItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v122 + 96))(v121, v123);
    v137 = v184;
    v138 = (uint64_t)v156;
    (*(void (**)(char *, char *, uint64_t))(v184 + 32))(v156, v121, v58);
    v53 = sub_1000D83C8(v138);
    (*(void (**)(uint64_t, uint64_t))(v137 + 8))(v138, v58);
LABEL_51:
    v54 = *(void (**)(char *, uint64_t))(v118 + 8);
    v55 = v119;
    goto LABEL_5;
  }
  if (v124 == enum case for Playlist.Entry.InternalItem.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v122 + 96))(v121, v123);
    v141 = v178;
    v142 = (uint64_t)v157;
    v143 = v188;
    (*(void (**)(char *, char *, uint64_t))(v178 + 32))(v157, v121, v188);
    v144 = sub_1000D6EAC(v142);
LABEL_50:
    v53 = v144;
    (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v142, v143);
    goto LABEL_51;
  }
  if (v124 == enum case for Playlist.Entry.InternalItem.tvEpisode(_:))
  {
    (*(void (**)(char *, uint64_t))(v122 + 96))(v121, v123);
    v141 = v171;
    v142 = (uint64_t)v155;
    v143 = v174;
    (*(void (**)(char *, char *, uint64_t))(v171 + 32))(v155, v121, v174);
    v144 = sub_1000DAE60(v142);
    goto LABEL_50;
  }
  if (v124 != enum case for Playlist.Entry.InternalItem.uploadedAudio(_:)
    && v124 != enum case for Playlist.Entry.InternalItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v118 + 8))(v119, v37);
    (*(void (**)(char *, uint64_t))(v122 + 8))(v121, v123);
    goto LABEL_55;
  }
  (*(void (**)(char *, uint64_t))(v122 + 8))(v121, v123);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000036, 0x80000001003B1010, "MusicCore/Alert+Music.swift", 27, 2, 304, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000D83C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  id v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  id v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t);
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  void (*v80)(char *, char *, uint64_t);
  uint64_t v81;
  id v82;
  char *v83;
  void (*v84)(char *, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(char *, char *, uint64_t);
  uint64_t v89;
  id v90;
  char *v91;
  void (*v92)(char *, uint64_t);
  uint64_t v93;
  void (*v94)(char *, char *, uint64_t);
  uint64_t v95;
  id v96;
  char *v97;
  void (*v98)(char *, uint64_t);
  uint64_t v99;
  void (*v100)(char *, uint64_t);
  char *v101;
  uint64_t *v102;
  void (*v103)(char *, char *, uint64_t);
  char *v104;
  uint64_t v105;
  id v106;
  char *v107;
  void (*v108)(char *, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t result;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  int v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  void (*v145)(char *, uint64_t);
  void (*v146)(char *, char *, uint64_t);
  uint64_t v147;
  id v148;
  char *v149;
  void (*v150)(char *, uint64_t);
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD v188[5];
  uint64_t v189;
  uint64_t v190;

  v186 = a1;
  v162 = type metadata accessor for Track(0);
  v159 = *(_QWORD *)(v162 - 8);
  v1 = __chkstk_darwin(v162);
  v157 = (char *)&v152 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __chkstk_darwin(v1);
  v158 = (char *)&v152 - v4;
  __chkstk_darwin(v3);
  v160 = (char *)&v152 - v5;
  v165 = type metadata accessor for Playlist.Entry.InternalItem(0);
  v164 = *(_QWORD *)(v165 - 8);
  __chkstk_darwin(v165);
  v161 = (char *)&v152 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = type metadata accessor for Playlist.Entry(0);
  v167 = *(_QWORD *)(v176 - 8);
  v7 = __chkstk_darwin(v176);
  v163 = (char *)&v152 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v166 = (char *)&v152 - v9;
  v171 = type metadata accessor for TVEpisode(0);
  v168 = *(_QWORD *)(v171 - 8);
  v10 = __chkstk_darwin(v171);
  v153 = (char *)&v152 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v170 = (char *)&v152 - v12;
  v174 = type metadata accessor for TVSeason(0);
  v169 = *(_QWORD *)(v174 - 8);
  __chkstk_darwin(v174);
  v173 = (char *)&v152 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = type metadata accessor for MusicMovie(0);
  v172 = *(_QWORD *)(v178 - 8);
  v14 = __chkstk_darwin(v178);
  v156 = (char *)&v152 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v177 = (char *)&v152 - v16;
  v181 = type metadata accessor for Song(0);
  v175 = *(_QWORD *)(v181 - 8);
  v17 = __chkstk_darwin(v181);
  v155 = (char *)&v152 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v180 = (char *)&v152 - v19;
  v183 = type metadata accessor for Playlist(0);
  v179 = *(_QWORD *)(v183 - 8);
  __chkstk_darwin(v183);
  v21 = (char *)&v152 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for MusicVideo(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v154 = (char *)&v152 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v27 = (char *)&v152 - v26;
  v28 = type metadata accessor for Locale(0);
  __chkstk_darwin(v28);
  v185 = (char *)&v152 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for String.LocalizationValue(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = __chkstk_darwin(v30);
  v34 = (char *)&v152 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v36 = (char *)&v152 - v35;
  v37 = type metadata accessor for Album(0);
  v184 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v39 = (char *)&v152 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188[3] = v22;
  v188[4] = &protocol witness table for MusicVideo;
  v40 = sub_1000207D4(v188);
  v182 = v23;
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v23 + 16))(v40, v186, v22);
  sub_1000244B0((uint64_t)v188, (uint64_t)&v187);
  v41 = sub_100005574(&qword_100491800);
  if (swift_dynamicCast(v39, &v187, v41, v37, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003DLL, 0x80000001003B1240);
    v42 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v42(v34, v36, v30);
    v43 = v30;
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v44 = qword_1004A1DA0;
    v45 = (id)qword_1004A1DA0;
    v46 = v185;
    static Locale.current.getter(v45);
    v47 = String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v44, v46, 0, 0, 256);
    v186 = v48;
    v49 = *(void (**)(char *, uint64_t))(v31 + 8);
    v49(v36, v43);
    String.LocalizationValue.init(stringLiteral:)(0x41206574656C6544, 0xEC0000006D75626CLL);
    v42(v34, v36, v43);
    v50 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v50, v46, 0, 0, 256);
    v51 = v36;
    v52 = v47;
    v49(v51, v43);
    (*(void (**)(char *, uint64_t))(v184 + 8))(v39, v37);
    goto LABEL_31;
  }
  if ((swift_dynamicCast(v27, &v187, v41, v22, 0) & 1) != 0)
  {
    v186 = v22;
    v53 = v36;
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000043, 0x80000001003B11D0);
    v54 = v31;
    v55 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v56 = v30;
    v55(v34, v36, v30);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v57 = qword_1004A1DA0;
    v58 = (id)qword_1004A1DA0;
    v59 = v185;
    static Locale.current.getter(v58);
    v60 = String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v57, v59, 0, 0, 256);
    v61 = *(void (**)(char *, uint64_t))(v54 + 8);
    v61(v53, v56);
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000012, 0x80000001003B1220);
    v55(v34, v53, v56);
    v62 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    v63 = v59;
    v52 = v60;
    String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v62, v63, 0, 0, 256);
    v61(v53, v56);
    (*(void (**)(char *, uint64_t))(v182 + 8))(v27, v186);
    goto LABEL_31;
  }
  if (swift_dynamicCast(v21, &v187, v41, v183, 0))
  {
    v64 = v36;
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000040, 0x80000001003B1180);
    v65 = v31;
    v66 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v67 = v34;
    v68 = v34;
    v69 = v30;
    v66(v68, v64, v30);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v70 = qword_1004A1DA0;
    v71 = (id)qword_1004A1DA0;
    v72 = v185;
    static Locale.current.getter(v71);
    v73 = String.init(localized:table:bundle:locale:comment:)(v67, 0, 0, v70, v72, 0, 0, 256);
    v186 = v74;
    v75 = *(void (**)(char *, uint64_t))(v65 + 8);
    v75(v64, v69);
    String.LocalizationValue.init(stringLiteral:)(0x50206574656C6544, 0xEF7473696C79616CLL);
    v66(v67, v64, v69);
    v76 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    v77 = v67;
    v52 = v73;
    String.init(localized:table:bundle:locale:comment:)(v77, 0, 0, v76, v72, 0, 0, 256);
    v75(v64, v69);
    (*(void (**)(char *, uint64_t))(v179 + 8))(v21, v183);
    goto LABEL_31;
  }
  v78 = v36;
  if (swift_dynamicCast(v180, &v187, v41, v181, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003CLL, 0x80000001003B1140);
    v79 = v31;
    v80 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v80(v34, v36, v30);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v81 = qword_1004A1DA0;
    v82 = (id)qword_1004A1DA0;
    v83 = v185;
    static Locale.current.getter(v82);
    v52 = String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v81, v83, 0, 0, 256);
    v84 = *(void (**)(char *, uint64_t))(v79 + 8);
    v84(v78, v30);
    String.LocalizationValue.init(stringLiteral:)(0x53206574656C6544, 0xEB00000000676E6FLL);
    v80(v34, v78, v30);
    v85 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v85, v83, 0, 0, 256);
    v84(v78, v30);
    (*(void (**)(char *, uint64_t))(v175 + 8))(v180, v181);
    goto LABEL_31;
  }
  v86 = v176;
  v87 = v30;
  if (swift_dynamicCast(v177, &v187, v41, v178, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003DLL, 0x80000001003B1100);
    v88 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v88(v34, v36, v87);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v89 = qword_1004A1DA0;
    v90 = (id)qword_1004A1DA0;
    v91 = v185;
    static Locale.current.getter(v90);
    v52 = String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v89, v91, 0, 0, 256);
    v92 = *(void (**)(char *, uint64_t))(v31 + 8);
    v92(v78, v87);
    String.LocalizationValue.init(stringLiteral:)(0x4D206574656C6544, 0xEC0000006569766FLL);
    v88(v34, v78, v87);
    v93 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v93, v91, 0, 0, 256);
    v92(v78, v87);
    (*(void (**)(char *, uint64_t))(v172 + 8))(v177, v178);
    goto LABEL_31;
  }
  if (swift_dynamicCast(v173, &v187, v41, v174, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003FLL, 0x80000001003B10C0);
    v94 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v94(v34, v36, v30);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v95 = qword_1004A1DA0;
    v96 = (id)qword_1004A1DA0;
    v97 = v185;
    static Locale.current.getter(v96);
    v52 = String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v95, v97, 0, 0, 256);
    v98 = *(void (**)(char *, uint64_t))(v31 + 8);
    v98(v78, v87);
    String.LocalizationValue.init(stringLiteral:)(0x54206574656C6544, 0xEE00776F68532056);
    v94(v34, v78, v87);
    v99 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v99, v97, 0, 0, 256);
    v98(v78, v87);
    v100 = *(void (**)(char *, uint64_t))(v169 + 8);
    v101 = v173;
    v102 = &v190;
LABEL_29:
    v110 = *(v102 - 32);
LABEL_30:
    v100(v101, v110);
LABEL_31:
    sub_10000682C(&v187);
LABEL_32:
    sub_10000682C(v188);
    return v52;
  }
  if (swift_dynamicCast(v170, &v187, v41, v171, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000042, 0x80000001003B1050);
    v103 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v104 = v34;
    v103(v34, v36, v30);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v105 = qword_1004A1DA0;
    v106 = (id)qword_1004A1DA0;
    v107 = v185;
    static Locale.current.getter(v106);
    v52 = String.init(localized:table:bundle:locale:comment:)(v104, 0, 0, v105, v107, 0, 0, 256);
    v108 = *(void (**)(char *, uint64_t))(v31 + 8);
    v108(v78, v87);
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000011, 0x80000001003B10A0);
    v103(v104, v78, v87);
    v109 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v104, 0, 0, v109, v107, 0, 0, 256);
    v108(v78, v87);
    v100 = *(void (**)(char *, uint64_t))(v168 + 8);
    v101 = v170;
    v102 = &v189;
    goto LABEL_29;
  }
  v112 = v166;
  if (!swift_dynamicCast(v166, &v187, v41, v86, 0))
  {
    v122 = v160;
    v123 = v162;
    if ((swift_dynamicCast(v160, &v187, v41, v162, 0) & 1) != 0)
    {
      v124 = v159;
      v125 = v158;
      (*(void (**)(char *, char *, uint64_t))(v159 + 32))(v158, v122, v123);
      v126 = v157;
      (*(void (**)(char *, char *, uint64_t))(v124 + 16))(v157, v125, v123);
      v127 = (*(uint64_t (**)(char *, uint64_t))(v124 + 88))(v126, v123);
      if (v127 == enum case for Track.song(_:))
      {
        (*(void (**)(char *, uint64_t))(v124 + 96))(v126, v123);
        v128 = v175;
        v129 = v155;
        v130 = v125;
        v131 = v181;
        (*(void (**)(char *, char *, uint64_t))(v175 + 32))(v155, v126, v181);
        v52 = sub_1000D6EAC(v129);
        (*(void (**)(char *, uint64_t))(v128 + 8))(v129, v131);
        v100 = *(void (**)(char *, uint64_t))(v124 + 8);
        v101 = v130;
LABEL_43:
        v110 = v123;
        goto LABEL_30;
      }
      if (v127 == enum case for Track.musicVideo(_:))
      {
        (*(void (**)(char *, uint64_t))(v124 + 96))(v126, v123);
        v136 = v182;
        v137 = v154;
        (*(void (**)(char *, char *, uint64_t))(v182 + 32))(v154, v126, v22);
        v52 = sub_1000D83C8(v137);
        (*(void (**)(char *, uint64_t))(v136 + 8))(v137, v22);
        v100 = *(void (**)(char *, uint64_t))(v124 + 8);
        v101 = v125;
        goto LABEL_43;
      }
      v144 = v125;
      v145 = *(void (**)(char *, uint64_t))(v124 + 8);
      v145(v144, v123);
      v145(v126, v123);
    }
LABEL_54:
    sub_10000682C(&v187);
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000037, 0x80000001003B0FB0);
    v146 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v146(v34, v78, v87);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v147 = qword_1004A1DA0;
    v148 = (id)qword_1004A1DA0;
    v149 = v185;
    static Locale.current.getter(v148);
    v52 = String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v147, v149, 0, 0, 256);
    v150 = *(void (**)(char *, uint64_t))(v31 + 8);
    v150(v78, v87);
    String.LocalizationValue.init(stringLiteral:)(0x6574656C6544, 0xE600000000000000);
    v146(v34, v78, v87);
    v151 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v151, v149, 0, 0, 256);
    v150(v78, v87);
    goto LABEL_32;
  }
  v113 = v163;
  v114 = (*(uint64_t (**)(char *, char *, uint64_t))(v167 + 32))(v163, v112, v86);
  v115 = v161;
  Playlist.Entry.internalItem.getter(v114);
  v116 = v164;
  v117 = v165;
  v118 = (*(uint64_t (**)(char *, uint64_t))(v164 + 88))(v115, v165);
  if (v118 == enum case for Playlist.Entry.InternalItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v116 + 96))(v115, v117);
    v119 = v172;
    v120 = (uint64_t)v156;
    v121 = v178;
    (*(void (**)(char *, char *, uint64_t))(v172 + 32))(v156, v115, v178);
    v52 = sub_1000D9910(v120);
    (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v120, v121);
    (*(void (**)(char *, uint64_t))(v167 + 8))(v113, v176);
    goto LABEL_31;
  }
  v132 = v113;
  v133 = v167;
  if (v118 == enum case for Playlist.Entry.InternalItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v164 + 96))(v115, v165);
    v134 = v182;
    v135 = v154;
    (*(void (**)(char *, char *, uint64_t))(v182 + 32))(v154, v115, v22);
    v52 = sub_1000D83C8(v135);
    (*(void (**)(char *, uint64_t))(v134 + 8))(v135, v22);
    v100 = *(void (**)(char *, uint64_t))(v133 + 8);
LABEL_50:
    v101 = v132;
    v110 = v86;
    goto LABEL_30;
  }
  v138 = v165;
  v139 = v164;
  if (v118 == enum case for Playlist.Entry.InternalItem.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v164 + 96))(v115, v165);
    v140 = v175;
    v141 = (uint64_t)v155;
    v142 = v181;
    (*(void (**)(char *, char *, uint64_t))(v175 + 32))(v155, v115, v181);
    v143 = sub_1000D6EAC(v141);
LABEL_49:
    v52 = v143;
    (*(void (**)(uint64_t, uint64_t))(v140 + 8))(v141, v142);
    v100 = *(void (**)(char *, uint64_t))(v133 + 8);
    goto LABEL_50;
  }
  if (v118 == enum case for Playlist.Entry.InternalItem.tvEpisode(_:))
  {
    (*(void (**)(char *, uint64_t))(v164 + 96))(v115, v165);
    v140 = v168;
    v141 = (uint64_t)v153;
    v142 = v171;
    (*(void (**)(char *, char *, uint64_t))(v168 + 32))(v153, v115, v171);
    v143 = sub_1000DAE60(v141);
    goto LABEL_49;
  }
  if (v118 != enum case for Playlist.Entry.InternalItem.uploadedAudio(_:)
    && v118 != enum case for Playlist.Entry.InternalItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v167 + 8))(v132, v86);
    (*(void (**)(char *, uint64_t))(v139 + 8))(v115, v138);
    goto LABEL_54;
  }
  (*(void (**)(char *, uint64_t))(v164 + 8))(v115, v165);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000036, 0x80000001003B1010, "MusicCore/Alert+Music.swift", 27, 2, 304, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000D9910(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  id v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  char *v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t);
  uint64_t v80;
  char *v81;
  uint64_t v82;
  void (*v83)(char *, char *, uint64_t);
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  char *v89;
  void (*v90)(char *, uint64_t);
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  void (*v95)(char *, char *, uint64_t);
  uint64_t v96;
  id v97;
  char *v98;
  void (*v99)(char *, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(char *, char *, uint64_t);
  uint64_t v104;
  id v105;
  char *v106;
  void (*v107)(char *, uint64_t);
  uint64_t v108;
  void (*v109)(char *, uint64_t);
  char *v110;
  uint64_t *v111;
  uint64_t v112;
  void (*v113)(char *, char *, uint64_t);
  uint64_t v114;
  id v115;
  char *v116;
  void (*v117)(char *, uint64_t);
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  int v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  void (*v152)(char *, uint64_t);
  uint64_t v153;
  uint64_t result;
  void (*v155)(char *, char *, uint64_t);
  uint64_t v156;
  id v157;
  char *v158;
  void (*v159)(char *, uint64_t);
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  char *v164;
  char *v165;
  char *v166;
  char *v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD v197[5];
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;

  v195 = a1;
  v172 = type metadata accessor for Track(0);
  v168 = *(_QWORD *)(v172 - 8);
  v1 = __chkstk_darwin(v172);
  v166 = (char *)&v161 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __chkstk_darwin(v1);
  v167 = (char *)&v161 - v4;
  __chkstk_darwin(v3);
  v169 = (char *)&v161 - v5;
  v170 = type metadata accessor for Playlist.Entry.InternalItem(0);
  v174 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170);
  v171 = (char *)&v161 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = type metadata accessor for Playlist.Entry(0);
  v175 = *(_QWORD *)(v178 - 8);
  v7 = __chkstk_darwin(v178);
  v173 = (char *)&v161 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v176 = (char *)&v161 - v9;
  v181 = type metadata accessor for TVEpisode(0);
  v177 = *(_QWORD *)(v181 - 8);
  v10 = __chkstk_darwin(v181);
  v162 = (char *)&v161 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v180 = (char *)&v161 - v12;
  v184 = type metadata accessor for TVSeason(0);
  v179 = *(_QWORD *)(v184 - 8);
  __chkstk_darwin(v184);
  v183 = (char *)&v161 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for MusicMovie(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v165 = (char *)&v161 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v186 = (char *)&v161 - v18;
  v189 = type metadata accessor for Song(0);
  v185 = *(_QWORD *)(v189 - 8);
  v19 = __chkstk_darwin(v189);
  v164 = (char *)&v161 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v188 = (char *)&v161 - v21;
  v190 = type metadata accessor for Playlist(0);
  v187 = *(_QWORD *)(v190 - 8);
  __chkstk_darwin(v190);
  v192 = (char *)&v161 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for MusicVideo(0);
  v191 = *(_QWORD *)(v23 - 8);
  v24 = __chkstk_darwin(v23);
  v163 = (char *)&v161 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v27 = (char *)&v161 - v26;
  v28 = type metadata accessor for Locale(0);
  __chkstk_darwin(v28);
  v194 = (char *)&v161 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for String.LocalizationValue(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = __chkstk_darwin(v30);
  v34 = (char *)&v161 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v36 = (char *)&v161 - v35;
  v37 = type metadata accessor for Album(0);
  v193 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v39 = (char *)&v161 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v197[3] = v14;
  v197[4] = sub_100006924(&qword_100491808, (uint64_t (*)(uint64_t))&type metadata accessor for MusicMovie, (uint64_t)&protocol conformance descriptor for MusicMovie);
  v40 = sub_1000207D4(v197);
  v182 = v15;
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v15 + 16))(v40, v195, v14);
  sub_1000244B0((uint64_t)v197, (uint64_t)&v196);
  v41 = sub_100005574(&qword_100491800);
  if (swift_dynamicCast(v39, &v196, v41, v37, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003DLL, 0x80000001003B1240);
    v42 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v42(v34, v36, v30);
    v43 = v30;
    v44 = v36;
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v45 = qword_1004A1DA0;
    v46 = (id)qword_1004A1DA0;
    v47 = v194;
    static Locale.current.getter(v46);
    v192 = (char *)String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v45, v47, 0, 0, 256);
    v195 = v48;
    v49 = *(void (**)(char *, uint64_t))(v31 + 8);
    v49(v44, v43);
    String.LocalizationValue.init(stringLiteral:)(0x41206574656C6544, 0xEC0000006D75626CLL);
    v42(v34, v44, v43);
    v50 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v50, v47, 0, 0, 256);
    v51 = v44;
    v52 = (uint64_t)v192;
    v49(v51, v43);
    (*(void (**)(char *, uint64_t))(v193 + 8))(v39, v37);
    goto LABEL_49;
  }
  v193 = v31;
  v53 = v34;
  v54 = v23;
  if ((swift_dynamicCast(v27, &v196, v41, v23, 0) & 1) != 0)
  {
    v192 = (char *)v23;
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000043, 0x80000001003B11D0);
    v55 = v193;
    v56 = *(void (**)(char *, char *, uint64_t))(v193 + 16);
    v57 = v34;
    v58 = v34;
    v59 = v30;
    v56(v58, v36, v30);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v60 = qword_1004A1DA0;
    v61 = (id)qword_1004A1DA0;
    v62 = v194;
    static Locale.current.getter(v61);
    v63 = String.init(localized:table:bundle:locale:comment:)(v53, 0, 0, v60, v62, 0, 0, 256);
    v195 = v64;
    v65 = *(void (**)(char *, uint64_t))(v55 + 8);
    v65(v36, v59);
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000012, 0x80000001003B1220);
    v56(v57, v36, v59);
    v66 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    v67 = v57;
    v52 = v63;
    String.init(localized:table:bundle:locale:comment:)(v67, 0, 0, v66, v62, 0, 0, 256);
    v65(v36, v59);
    (*(void (**)(char *, char *))(v191 + 8))(v27, v192);
    goto LABEL_49;
  }
  v68 = v190;
  if (swift_dynamicCast(v192, &v196, v41, v190, 0))
  {
    v69 = v36;
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000040, 0x80000001003B1180);
    v70 = v193;
    v71 = *(void (**)(char *, char *, uint64_t))(v193 + 16);
    v72 = v34;
    v73 = v34;
    v74 = v30;
    v71(v73, v69, v30);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v75 = qword_1004A1DA0;
    v76 = (id)qword_1004A1DA0;
    v77 = v194;
    static Locale.current.getter(v76);
    v78 = String.init(localized:table:bundle:locale:comment:)(v53, 0, 0, v75, v77, 0, 0, 256);
    v79 = *(void (**)(char *, uint64_t))(v70 + 8);
    v52 = v78;
    v79(v69, v74);
    String.LocalizationValue.init(stringLiteral:)(0x50206574656C6544, 0xEF7473696C79616CLL);
    v71(v72, v69, v74);
    v80 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v72, 0, 0, v80, v77, 0, 0, 256);
    v79(v69, v74);
    (*(void (**)(char *, uint64_t))(v187 + 8))(v192, v68);
    goto LABEL_49;
  }
  if (swift_dynamicCast(v188, &v196, v41, v189, 0))
  {
    v81 = v36;
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003CLL, 0x80000001003B1140);
    v82 = v193;
    v83 = *(void (**)(char *, char *, uint64_t))(v193 + 16);
    v84 = v53;
    v85 = v53;
    v86 = v30;
    v83(v85, v81, v30);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v87 = qword_1004A1DA0;
    v88 = (id)qword_1004A1DA0;
    v89 = v194;
    static Locale.current.getter(v88);
    v52 = String.init(localized:table:bundle:locale:comment:)(v84, 0, 0, v87, v89, 0, 0, 256);
    v90 = *(void (**)(char *, uint64_t))(v82 + 8);
    v90(v81, v86);
    String.LocalizationValue.init(stringLiteral:)(0x53206574656C6544, 0xEB00000000676E6FLL);
    v83(v84, v81, v86);
    v91 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v84, 0, 0, v91, v89, 0, 0, 256);
    v90(v81, v86);
    (*(void (**)(char *, uint64_t))(v185 + 8))(v188, v189);
    goto LABEL_49;
  }
  v92 = v30;
  v93 = v53;
  if (swift_dynamicCast(v186, &v196, v41, v14, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003DLL, 0x80000001003B1100);
    v94 = v193;
    v95 = *(void (**)(char *, char *, uint64_t))(v193 + 16);
    v95(v53, v36, v30);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v96 = qword_1004A1DA0;
    v97 = (id)qword_1004A1DA0;
    v98 = v194;
    static Locale.current.getter(v97);
    v192 = (char *)String.init(localized:table:bundle:locale:comment:)(v93, 0, 0, v96, v98, 0, 0, 256);
    v99 = *(void (**)(char *, uint64_t))(v94 + 8);
    v99(v36, v30);
    String.LocalizationValue.init(stringLiteral:)(0x4D206574656C6544, 0xEC0000006569766FLL);
    v95(v93, v36, v30);
    v100 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v93, 0, 0, v100, v98, 0, 0, 256);
    v99(v36, v30);
    v101 = v14;
    v52 = (uint64_t)v192;
    (*(void (**)(char *, uint64_t))(v182 + 8))(v186, v101);
    goto LABEL_49;
  }
  if (swift_dynamicCast(v183, &v196, v41, v184, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003FLL, 0x80000001003B10C0);
    v102 = v193;
    v103 = *(void (**)(char *, char *, uint64_t))(v193 + 16);
    v103(v53, v36, v30);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v104 = qword_1004A1DA0;
    v105 = (id)qword_1004A1DA0;
    v106 = v194;
    static Locale.current.getter(v105);
    v52 = String.init(localized:table:bundle:locale:comment:)(v93, 0, 0, v104, v106, 0, 0, 256);
    v107 = *(void (**)(char *, uint64_t))(v102 + 8);
    v107(v36, v30);
    String.LocalizationValue.init(stringLiteral:)(0x54206574656C6544, 0xEE00776F68532056);
    v103(v93, v36, v30);
    v108 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v93, 0, 0, v108, v106, 0, 0, 256);
    v107(v36, v30);
    v109 = *(void (**)(char *, uint64_t))(v179 + 8);
    v110 = v183;
    v111 = &v200;
    goto LABEL_47;
  }
  if (swift_dynamicCast(v180, &v196, v41, v181, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000042, 0x80000001003B1050);
    v112 = v193;
    v113 = *(void (**)(char *, char *, uint64_t))(v193 + 16);
    v113(v93, v36, v30);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v114 = qword_1004A1DA0;
    v115 = (id)qword_1004A1DA0;
    v116 = v194;
    static Locale.current.getter(v115);
    v52 = String.init(localized:table:bundle:locale:comment:)(v93, 0, 0, v114, v116, 0, 0, 256);
    v117 = *(void (**)(char *, uint64_t))(v112 + 8);
    v117(v36, v30);
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000011, 0x80000001003B10A0);
    v113(v93, v36, v30);
    v118 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v93, 0, 0, v118, v116, 0, 0, 256);
    v117(v36, v30);
    v109 = *(void (**)(char *, uint64_t))(v177 + 8);
    v110 = v180;
    v111 = &v199;
    goto LABEL_47;
  }
  v119 = v176;
  v120 = v178;
  if (!swift_dynamicCast(v176, &v196, v41, v178, 0))
  {
    v133 = v169;
    v134 = v41;
    v135 = v172;
    v136 = swift_dynamicCast(v169, &v196, v134, v172, 0);
    v137 = v193;
    if ((v136 & 1) != 0)
    {
      v138 = v168;
      v139 = v167;
      (*(void (**)(char *, char *, uint64_t))(v168 + 32))(v167, v133, v135);
      v140 = v166;
      (*(void (**)(char *, char *, uint64_t))(v138 + 16))(v166, v139, v135);
      v141 = (*(uint64_t (**)(char *, uint64_t))(v138 + 88))(v140, v135);
      if (v141 == enum case for Track.song(_:))
      {
        (*(void (**)(char *, uint64_t))(v138 + 96))(v140, v135);
        v142 = v139;
        v143 = v185;
        v144 = v164;
        v145 = v189;
        (*(void (**)(char *, char *, uint64_t))(v185 + 32))(v164, v140, v189);
        v52 = sub_1000D6EAC(v144);
        (*(void (**)(char *, uint64_t))(v143 + 8))(v144, v145);
        v109 = *(void (**)(char *, uint64_t))(v138 + 8);
        v110 = v142;
LABEL_39:
        v151 = v135;
LABEL_48:
        v109(v110, v151);
LABEL_49:
        sub_10000682C(&v196);
LABEL_50:
        sub_10000682C(v197);
        return v52;
      }
      if (v141 == enum case for Track.musicVideo(_:))
      {
        (*(void (**)(char *, uint64_t))(v138 + 96))(v140, v135);
        v149 = v191;
        v150 = v163;
        (*(void (**)(char *, char *, uint64_t))(v191 + 32))(v163, v140, v54);
        v52 = sub_1000D83C8(v150);
        (*(void (**)(char *, uint64_t))(v149 + 8))(v150, v54);
        v109 = *(void (**)(char *, uint64_t))(v138 + 8);
        v110 = v139;
        goto LABEL_39;
      }
      v152 = *(void (**)(char *, uint64_t))(v138 + 8);
      v152(v139, v135);
      v152(v140, v135);
    }
LABEL_54:
    sub_10000682C(&v196);
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000037, 0x80000001003B0FB0);
    v155 = *(void (**)(char *, char *, uint64_t))(v137 + 16);
    v155(v93, v36, v92);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v156 = qword_1004A1DA0;
    v157 = (id)qword_1004A1DA0;
    v158 = v194;
    static Locale.current.getter(v157);
    v52 = String.init(localized:table:bundle:locale:comment:)(v93, 0, 0, v156, v158, 0, 0, 256);
    v159 = *(void (**)(char *, uint64_t))(v137 + 8);
    v159(v36, v92);
    String.LocalizationValue.init(stringLiteral:)(0x6574656C6544, 0xE600000000000000);
    v155(v93, v36, v92);
    v160 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v93, 0, 0, v160, v158, 0, 0, 256);
    v159(v36, v92);
    goto LABEL_50;
  }
  v121 = v54;
  v122 = v175;
  v123 = v173;
  v124 = (*(uint64_t (**)(char *, char *, uint64_t))(v175 + 32))(v173, v119, v120);
  v125 = v171;
  Playlist.Entry.internalItem.getter(v124);
  v126 = v174;
  v127 = v170;
  v128 = (*(uint64_t (**)(char *, uint64_t))(v174 + 88))(v125, v170);
  if (v128 == enum case for Playlist.Entry.InternalItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v126 + 96))(v125, v127);
    v129 = v182;
    v130 = v165;
    (*(void (**)(char *, char *, uint64_t))(v182 + 32))(v165, v125, v14);
    v131 = sub_1000D9910(v130);
    v132 = v14;
    v52 = v131;
    (*(void (**)(char *, uint64_t))(v129 + 8))(v130, v132);
    v109 = *(void (**)(char *, uint64_t))(v122 + 8);
    v110 = v123;
LABEL_46:
    v111 = &v198;
LABEL_47:
    v151 = *(v111 - 32);
    goto LABEL_48;
  }
  if (v128 == enum case for Playlist.Entry.InternalItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v174 + 96))(v125, v127);
    v146 = v191;
    v147 = (uint64_t)v163;
    (*(void (**)(char *, char *, uint64_t))(v191 + 32))(v163, v125, v121);
    v148 = sub_1000D83C8(v147);
LABEL_45:
    v52 = v148;
    (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v147, v121);
    v109 = *(void (**)(char *, uint64_t))(v175 + 8);
    v110 = v123;
    goto LABEL_46;
  }
  if (v128 == enum case for Playlist.Entry.InternalItem.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v174 + 96))(v125, v127);
    v146 = v185;
    v147 = (uint64_t)v164;
    v121 = v189;
    (*(void (**)(char *, char *, uint64_t))(v185 + 32))(v164, v125, v189);
    v148 = sub_1000D6EAC(v147);
    goto LABEL_45;
  }
  v153 = v174;
  if (v128 == enum case for Playlist.Entry.InternalItem.tvEpisode(_:))
  {
    (*(void (**)(char *, uint64_t))(v174 + 96))(v125, v127);
    v146 = v177;
    v147 = (uint64_t)v162;
    v121 = v181;
    (*(void (**)(char *, char *, uint64_t))(v177 + 32))(v162, v125, v181);
    v148 = sub_1000DAE60(v147);
    goto LABEL_45;
  }
  if (v128 != enum case for Playlist.Entry.InternalItem.uploadedAudio(_:)
    && v128 != enum case for Playlist.Entry.InternalItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v175 + 8))(v123, v178);
    (*(void (**)(char *, uint64_t))(v153 + 8))(v125, v127);
    v137 = v193;
    goto LABEL_54;
  }
  (*(void (**)(char *, uint64_t))(v174 + 8))(v125, v127);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000036, 0x80000001003B1010, "MusicCore/Alert+Music.swift", 27, 2, 304, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000DAE60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  void (*v41)(_QWORD *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  id v47;
  char *v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  void (*v54)(char *, char *, uint64_t);
  char *v55;
  uint64_t v56;
  id v57;
  char *v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  char *v66;
  uint64_t v67;
  id v68;
  char *v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  void (*v76)(char *, char *, uint64_t);
  char *v77;
  uint64_t v78;
  id v79;
  char *v80;
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  char *v83;
  void (*v84)(char *, char *, uint64_t);
  uint64_t v85;
  id v86;
  char *v87;
  void (*v88)(char *, uint64_t);
  uint64_t v89;
  void (*v90)(char *, char *, uint64_t);
  uint64_t v91;
  id v92;
  char *v93;
  void (*v94)(char *, uint64_t);
  uint64_t v95;
  void (*v96)(char *, _QWORD);
  char *v97;
  uint64_t *v98;
  uint64_t result;
  void (*v100)(char *, char *, uint64_t);
  uint64_t v101;
  id v102;
  char *v103;
  uint64_t v104;
  void (*v105)(char *, uint64_t);
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  int v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(char *, uint64_t);
  uint64_t v135;
  void (*v136)(char *, char *, uint64_t);
  uint64_t v137;
  id v138;
  char *v139;
  void (*v140)(char *, uint64_t);
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD v178[5];
  uint64_t v179;
  uint64_t v180;

  v176 = a1;
  v153 = type metadata accessor for Track(0);
  v149 = *(_QWORD *)(v153 - 8);
  v1 = __chkstk_darwin(v153);
  v147 = (char *)&v142 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __chkstk_darwin(v1);
  v148 = (char *)&v142 - v4;
  __chkstk_darwin(v3);
  v150 = (char *)&v142 - v5;
  v151 = type metadata accessor for Playlist.Entry.InternalItem(0);
  v155 = *(_QWORD *)(v151 - 8);
  __chkstk_darwin(v151);
  v152 = (char *)&v142 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = type metadata accessor for Playlist.Entry(0);
  v156 = *(_QWORD *)(v159 - 8);
  v7 = __chkstk_darwin(v159);
  v154 = (char *)&v142 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v157 = (char *)&v142 - v9;
  v10 = type metadata accessor for TVEpisode(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v143 = (char *)&v142 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v161 = (char *)&v142 - v14;
  v164 = type metadata accessor for TVSeason(0);
  v160 = *(_QWORD *)(v164 - 8);
  __chkstk_darwin(v164);
  v163 = (char *)&v142 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = type metadata accessor for MusicMovie(0);
  v162 = *(_QWORD *)(v167 - 8);
  v16 = __chkstk_darwin(v167);
  v146 = (char *)&v142 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v166 = (char *)&v142 - v18;
  v170 = type metadata accessor for Song(0);
  v165 = *(_QWORD *)(v170 - 8);
  v19 = __chkstk_darwin(v170);
  v145 = (char *)&v142 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v169 = (char *)&v142 - v21;
  v171 = type metadata accessor for Playlist(0);
  v168 = *(_QWORD *)(v171 - 8);
  __chkstk_darwin(v171);
  v173 = (char *)&v142 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for MusicVideo(0);
  v172 = *(_QWORD *)(v23 - 8);
  v24 = __chkstk_darwin(v23);
  v144 = (char *)&v142 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v27 = (char *)&v142 - v26;
  v28 = type metadata accessor for Locale(0);
  __chkstk_darwin(v28);
  v175 = (char *)&v142 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for String.LocalizationValue(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = __chkstk_darwin(v30);
  v34 = (char *)&v142 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v36 = (char *)&v142 - v35;
  v37 = type metadata accessor for Album(0);
  v174 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v39 = (char *)&v142 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178[3] = v10;
  v178[4] = sub_100006924(&qword_100491810, (uint64_t (*)(uint64_t))&type metadata accessor for TVEpisode, (uint64_t)&protocol conformance descriptor for TVEpisode);
  v40 = sub_1000207D4(v178);
  v158 = v11;
  v41 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v11 + 16);
  v42 = v176;
  v176 = v10;
  v41(v40, v42, v10);
  sub_1000244B0((uint64_t)v178, (uint64_t)&v177);
  v43 = sub_100005574(&qword_100491800);
  if (swift_dynamicCast(v39, &v177, v43, v37, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003DLL, 0x80000001003B1240);
    v173 = *(char **)(v31 + 16);
    ((void (*)(char *, char *, uint64_t))v173)(v34, v36, v30);
    v44 = v36;
    v45 = v34;
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v46 = qword_1004A1DA0;
    v47 = (id)qword_1004A1DA0;
    v48 = v175;
    static Locale.current.getter(v47);
    v176 = String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v46, v48, 0, 0, 256);
    v49 = *(void (**)(char *, uint64_t))(v31 + 8);
    v49(v44, v30);
    String.LocalizationValue.init(stringLiteral:)(0x41206574656C6544, 0xEC0000006D75626CLL);
    ((void (*)(char *, char *, uint64_t))v173)(v45, v44, v30);
    v50 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v45, 0, 0, v50, v48, 0, 0, 256);
    v51 = v44;
    v52 = v176;
    v49(v51, v30);
    (*(void (**)(char *, uint64_t))(v174 + 8))(v39, v37);
    goto LABEL_26;
  }
  if ((swift_dynamicCast(v27, &v177, v43, v23, 0) & 1) != 0)
  {
    v174 = v23;
    v53 = v36;
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000043, 0x80000001003B11D0);
    v54 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v55 = v34;
    v54(v34, v53, v30);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v56 = qword_1004A1DA0;
    v57 = (id)qword_1004A1DA0;
    v58 = v175;
    static Locale.current.getter(v57);
    v176 = String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v56, v58, 0, 0, 256);
    v59 = *(void (**)(char *, uint64_t))(v31 + 8);
    v59(v53, v30);
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000012, 0x80000001003B1220);
    v54(v55, v53, v30);
    v60 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v55, 0, 0, v60, v58, 0, 0, 256);
    v59(v53, v30);
    v61 = v27;
    v52 = v176;
    (*(void (**)(char *, uint64_t))(v172 + 8))(v61, v174);
    goto LABEL_26;
  }
  v62 = v171;
  if (swift_dynamicCast(v173, &v177, v43, v171, 0))
  {
    v63 = v36;
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000040, 0x80000001003B1180);
    v64 = v31;
    v65 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v66 = v34;
    v65(v34, v36, v30);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v67 = qword_1004A1DA0;
    v68 = (id)qword_1004A1DA0;
    v69 = v175;
    static Locale.current.getter(v68);
    v70 = String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v67, v69, 0, 0, 256);
    v71 = *(void (**)(char *, uint64_t))(v64 + 8);
    v71(v63, v30);
    String.LocalizationValue.init(stringLiteral:)(0x50206574656C6544, 0xEF7473696C79616CLL);
    v65(v66, v63, v30);
    v72 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v66, 0, 0, v72, v69, 0, 0, 256);
    v73 = v63;
    v52 = v70;
    v71(v73, v30);
    (*(void (**)(char *, uint64_t))(v168 + 8))(v173, v62);
    goto LABEL_26;
  }
  v74 = v30;
  v75 = v36;
  if (swift_dynamicCast(v169, &v177, v43, v170, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003CLL, 0x80000001003B1140);
    v76 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v77 = v34;
    v76(v34, v75, v74);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v78 = qword_1004A1DA0;
    v79 = (id)qword_1004A1DA0;
    v80 = v175;
    static Locale.current.getter(v79);
    v52 = String.init(localized:table:bundle:locale:comment:)(v77, 0, 0, v78, v80, 0, 0, 256);
    v81 = *(void (**)(char *, uint64_t))(v31 + 8);
    v81(v75, v74);
    String.LocalizationValue.init(stringLiteral:)(0x53206574656C6544, 0xEB00000000676E6FLL);
    v76(v77, v75, v74);
    v82 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v77, 0, 0, v82, v80, 0, 0, 256);
    v81(v75, v74);
    (*(void (**)(char *, uint64_t))(v165 + 8))(v169, v170);
    goto LABEL_26;
  }
  v83 = v34;
  if (swift_dynamicCast(v166, &v177, v43, v167, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003DLL, 0x80000001003B1100);
    v84 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v84(v34, v75, v74);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v85 = qword_1004A1DA0;
    v86 = (id)qword_1004A1DA0;
    v87 = v175;
    static Locale.current.getter(v86);
    v52 = String.init(localized:table:bundle:locale:comment:)(v83, 0, 0, v85, v87, 0, 0, 256);
    v88 = *(void (**)(char *, uint64_t))(v31 + 8);
    v88(v75, v74);
    String.LocalizationValue.init(stringLiteral:)(0x4D206574656C6544, 0xEC0000006569766FLL);
    v84(v83, v75, v74);
    v89 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v83, 0, 0, v89, v87, 0, 0, 256);
    v88(v75, v74);
    (*(void (**)(char *, uint64_t))(v162 + 8))(v166, v167);
    goto LABEL_26;
  }
  if (swift_dynamicCast(v163, &v177, v43, v164, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003FLL, 0x80000001003B10C0);
    v90 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v90(v34, v75, v74);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v91 = qword_1004A1DA0;
    v92 = (id)qword_1004A1DA0;
    v93 = v175;
    static Locale.current.getter(v92);
    v52 = String.init(localized:table:bundle:locale:comment:)(v83, 0, 0, v91, v93, 0, 0, 256);
    v94 = *(void (**)(char *, uint64_t))(v31 + 8);
    v94(v75, v74);
    String.LocalizationValue.init(stringLiteral:)(0x54206574656C6544, 0xEE00776F68532056);
    v90(v83, v75, v74);
    v95 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v83, 0, 0, v95, v93, 0, 0, 256);
    v94(v75, v74);
    v96 = *(void (**)(char *, _QWORD))(v160 + 8);
    v97 = v163;
    v98 = &v180;
    goto LABEL_25;
  }
  if (swift_dynamicCast(v161, &v177, v43, v176, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000042, 0x80000001003B1050);
    v100 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v100(v34, v75, v74);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v101 = qword_1004A1DA0;
    v102 = (id)qword_1004A1DA0;
    v103 = v175;
    static Locale.current.getter(v102);
    v104 = String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v101, v103, 0, 0, 256);
    v105 = *(void (**)(char *, uint64_t))(v31 + 8);
    v52 = v104;
    v105(v75, v74);
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000011, 0x80000001003B10A0);
    v100(v34, v75, v74);
    v106 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v106, v103, 0, 0, 256);
    v105(v75, v74);
    (*(void (**)(char *, uint64_t))(v158 + 8))(v161, v176);
    goto LABEL_26;
  }
  v107 = v23;
  v108 = v157;
  v109 = v159;
  if (!swift_dynamicCast(v157, &v177, v43, v159, 0))
  {
    v120 = v150;
    v121 = v153;
    if ((swift_dynamicCast(v150, &v177, v43, v153, 0) & 1) != 0)
    {
      v122 = v149;
      v123 = v148;
      (*(void (**)(char *, char *, uint64_t))(v149 + 32))(v148, v120, v121);
      v124 = v147;
      (*(void (**)(char *, char *, uint64_t))(v122 + 16))(v147, v123, v121);
      v125 = (*(uint64_t (**)(char *, uint64_t))(v122 + 88))(v124, v121);
      if (v125 == enum case for Track.song(_:))
      {
        (*(void (**)(char *, uint64_t))(v122 + 96))(v124, v121);
        v126 = v165;
        v127 = v145;
        v128 = v170;
        (*(void (**)(char *, char *, uint64_t))(v165 + 32))(v145, v124, v170);
        v129 = sub_1000D6EAC(v127);
LABEL_42:
        v52 = v129;
        (*(void (**)(char *, uint64_t))(v126 + 8))(v127, v128);
        (*(void (**)(char *, uint64_t))(v122 + 8))(v123, v121);
        goto LABEL_26;
      }
      if (v125 == enum case for Track.musicVideo(_:))
      {
        (*(void (**)(char *, uint64_t))(v122 + 96))(v124, v121);
        v126 = v172;
        v127 = v144;
        v128 = v107;
        (*(void (**)(char *, char *, uint64_t))(v172 + 32))(v144, v124, v107);
        v129 = sub_1000D83C8(v127);
        goto LABEL_42;
      }
      v134 = *(void (**)(char *, uint64_t))(v122 + 8);
      v134(v123, v121);
      v134(v124, v121);
    }
LABEL_53:
    sub_10000682C(&v177);
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000037, 0x80000001003B0FB0);
    v136 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v136(v83, v75, v74);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v137 = qword_1004A1DA0;
    v138 = (id)qword_1004A1DA0;
    v139 = v175;
    static Locale.current.getter(v138);
    v52 = String.init(localized:table:bundle:locale:comment:)(v83, 0, 0, v137, v139, 0, 0, 256);
    v140 = *(void (**)(char *, uint64_t))(v31 + 8);
    v140(v75, v74);
    String.LocalizationValue.init(stringLiteral:)(0x6574656C6544, 0xE600000000000000);
    v136(v83, v75, v74);
    v141 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v83, 0, 0, v141, v139, 0, 0, 256);
    v140(v75, v74);
    goto LABEL_27;
  }
  v110 = v156;
  v111 = v154;
  v112 = (*(uint64_t (**)(char *, char *, uint64_t))(v156 + 32))(v154, v108, v109);
  v113 = v152;
  Playlist.Entry.internalItem.getter(v112);
  v114 = v155;
  v115 = v151;
  v116 = (*(uint64_t (**)(char *, uint64_t))(v155 + 88))(v113, v151);
  if (v116 == enum case for Playlist.Entry.InternalItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v114 + 96))(v113, v115);
    v117 = v162;
    v118 = v146;
    v119 = v167;
    (*(void (**)(char *, char *, uint64_t))(v162 + 32))(v146, v113, v167);
    v52 = sub_1000D9910(v118);
    (*(void (**)(char *, uint64_t))(v117 + 8))(v118, v119);
    v96 = *(void (**)(char *, _QWORD))(v110 + 8);
    v97 = v111;
LABEL_49:
    v98 = &v179;
LABEL_25:
    v96(v97, *(v98 - 32));
LABEL_26:
    sub_10000682C(&v177);
LABEL_27:
    sub_10000682C(v178);
    return v52;
  }
  if (v116 == enum case for Playlist.Entry.InternalItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v155 + 96))(v113, v115);
    v130 = v172;
    v131 = v144;
    v132 = v107;
    (*(void (**)(char *, char *, uint64_t))(v172 + 32))(v144, v113, v107);
    v133 = sub_1000D83C8(v131);
LABEL_48:
    v52 = v133;
    (*(void (**)(char *, uint64_t))(v130 + 8))(v131, v132);
    v96 = *(void (**)(char *, _QWORD))(v156 + 8);
    v97 = v111;
    goto LABEL_49;
  }
  if (v116 == enum case for Playlist.Entry.InternalItem.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v155 + 96))(v113, v115);
    v130 = v165;
    v131 = v145;
    v132 = v170;
    (*(void (**)(char *, char *, uint64_t))(v165 + 32))(v145, v113, v170);
    v133 = sub_1000D6EAC(v131);
    goto LABEL_48;
  }
  v135 = v155;
  if (v116 == enum case for Playlist.Entry.InternalItem.tvEpisode(_:))
  {
    (*(void (**)(char *, uint64_t))(v155 + 96))(v113, v115);
    v130 = v158;
    v131 = v143;
    v132 = v176;
    (*(void (**)(char *, char *, uint64_t))(v158 + 32))(v143, v113, v176);
    v133 = sub_1000DAE60(v131);
    goto LABEL_48;
  }
  if (v116 != enum case for Playlist.Entry.InternalItem.uploadedAudio(_:)
    && v116 != enum case for Playlist.Entry.InternalItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v156 + 8))(v111, v159);
    (*(void (**)(char *, uint64_t))(v135 + 8))(v113, v115);
    goto LABEL_53;
  }
  (*(void (**)(char *, uint64_t))(v155 + 8))(v113, v115);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000036, 0x80000001003B1010, "MusicCore/Alert+Music.swift", 27, 2, 304, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000DC370(void (*a1)(char *, char *, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  id v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  char *v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  char *v73;
  uint64_t v74;
  id v75;
  char *v76;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  char *v79;
  uint64_t v80;
  void (*v81)(char *, char *, uint64_t);
  uint64_t v82;
  id v83;
  char *v84;
  void (*v85)(char *, uint64_t);
  uint64_t v86;
  char *v87;
  uint64_t v88;
  void (*v89)(char *, char *, uint64_t);
  uint64_t v90;
  id v91;
  char *v92;
  void (*v93)(char *, uint64_t);
  uint64_t v94;
  void (*v95)(char *, uint64_t);
  char *v96;
  uint64_t *v97;
  uint64_t v98;
  void (*v99)(char *, char *, uint64_t);
  uint64_t v100;
  id v101;
  char *v102;
  void (*v103)(char *, uint64_t);
  uint64_t v104;
  uint64_t v105;
  void (*v106)(char *, char *, uint64_t);
  uint64_t v107;
  id v108;
  char *v109;
  void (*v110)(char *, uint64_t);
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  void (*v145)(char *, uint64_t);
  uint64_t v146;
  uint64_t result;
  void (*v148)(char *, char *, uint64_t);
  uint64_t v149;
  id v150;
  char *v151;
  void (*v152)(char *, uint64_t);
  uint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  void (*v188)(char *, char *, uint64_t);
  uint64_t v189;
  _QWORD v190[5];
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;

  v187 = a3;
  v188 = a1;
  v164 = type metadata accessor for Track(0);
  v160 = *(_QWORD *)(v164 - 8);
  v4 = __chkstk_darwin(v164);
  v158 = (char *)&v154 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v159 = (char *)&v154 - v7;
  __chkstk_darwin(v6);
  v161 = (char *)&v154 - v8;
  v162 = type metadata accessor for Playlist.Entry.InternalItem(0);
  v166 = *(_QWORD *)(v162 - 8);
  __chkstk_darwin(v162);
  v163 = (char *)&v154 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = type metadata accessor for Playlist.Entry(0);
  v167 = *(_QWORD *)(v170 - 8);
  v10 = __chkstk_darwin(v170);
  v165 = (char *)&v154 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v168 = (char *)&v154 - v12;
  v173 = type metadata accessor for TVEpisode(0);
  v169 = *(_QWORD *)(v173 - 8);
  v13 = __chkstk_darwin(v173);
  v154 = (char *)&v154 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v172 = (char *)&v154 - v15;
  v176 = type metadata accessor for TVSeason(0);
  v171 = *(_QWORD *)(v176 - 8);
  __chkstk_darwin(v176);
  v175 = (char *)&v154 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = type metadata accessor for MusicMovie(0);
  v174 = *(_QWORD *)(v179 - 8);
  v17 = __chkstk_darwin(v179);
  v157 = (char *)&v154 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v178 = (char *)&v154 - v19;
  v182 = type metadata accessor for Song(0);
  v177 = *(_QWORD *)(v182 - 8);
  v20 = __chkstk_darwin(v182);
  v156 = (char *)&v154 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v181 = (char *)&v154 - v22;
  v184 = type metadata accessor for Playlist(0);
  v180 = *(_QWORD *)(v184 - 8);
  __chkstk_darwin(v184);
  v24 = (char *)&v154 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for MusicVideo(0);
  v183 = *(_QWORD *)(v25 - 8);
  v26 = __chkstk_darwin(v25);
  v155 = (char *)&v154 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v29 = (char *)&v154 - v28;
  v30 = type metadata accessor for Locale(0);
  __chkstk_darwin(v30);
  v186 = (char *)&v154 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for String.LocalizationValue(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = __chkstk_darwin(v32);
  v36 = (char *)&v154 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v38 = (char *)&v154 - v37;
  v39 = type metadata accessor for Album(0);
  v185 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v41 = (char *)&v154 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190[3] = a2;
  v190[4] = v187;
  v42 = sub_1000207D4(v190);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v42, v188, a2);
  sub_1000244B0((uint64_t)v190, (uint64_t)&v189);
  v43 = sub_100005574(&qword_100491800);
  if (swift_dynamicCast(v41, &v189, v43, v39, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003DLL, 0x80000001003B1240);
    v188 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
    v188(v36, v38, v32);
    v44 = v32;
    v45 = v36;
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v46 = qword_1004A1DA0;
    v47 = (id)qword_1004A1DA0;
    v48 = v186;
    static Locale.current.getter(v47);
    v49 = String.init(localized:table:bundle:locale:comment:)(v45, 0, 0, v46, v48, 0, 0, 256);
    v187 = v50;
    v51 = *(void (**)(char *, uint64_t))(v33 + 8);
    v51(v38, v44);
    String.LocalizationValue.init(stringLiteral:)(0x41206574656C6544, 0xEC0000006D75626CLL);
    v188(v45, v38, v44);
    v52 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    v53 = v45;
    v54 = v49;
    String.init(localized:table:bundle:locale:comment:)(v53, 0, 0, v52, v48, 0, 0, 256);
    v51(v38, v44);
    (*(void (**)(char *, uint64_t))(v185 + 8))(v41, v39);
    goto LABEL_49;
  }
  v55 = v36;
  v56 = v25;
  if ((swift_dynamicCast(v29, &v189, v43, v25, 0) & 1) != 0)
  {
    v188 = (void (*)(char *, char *, uint64_t))v25;
    v57 = v38;
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000043, 0x80000001003B11D0);
    v58 = v33;
    v59 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
    v60 = v55;
    v61 = v55;
    v62 = v32;
    v59(v61, v57, v32);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v63 = qword_1004A1DA0;
    v64 = (id)qword_1004A1DA0;
    v65 = v186;
    static Locale.current.getter(v64);
    v66 = String.init(localized:table:bundle:locale:comment:)(v60, 0, 0, v63, v65, 0, 0, 256);
    v67 = *(void (**)(char *, uint64_t))(v58 + 8);
    v67(v57, v62);
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000012, 0x80000001003B1220);
    v59(v60, v57, v62);
    v68 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v60, 0, 0, v68, v65, 0, 0, 256);
    v69 = v57;
    v54 = v66;
    v67(v69, v62);
    (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v183 + 8))(v29, v188);
    goto LABEL_49;
  }
  v70 = v32;
  if (swift_dynamicCast(v24, &v189, v43, v184, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000040, 0x80000001003B1180);
    v71 = v33;
    v72 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
    v73 = v55;
    v72(v55, v38, v70);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v74 = qword_1004A1DA0;
    v75 = (id)qword_1004A1DA0;
    v76 = v186;
    static Locale.current.getter(v75);
    v188 = (void (*)(char *, char *, uint64_t))String.init(localized:table:bundle:locale:comment:)(v55, 0, 0, v74, v76, 0, 0, 256);
    v77 = *(void (**)(char *, uint64_t))(v71 + 8);
    v77(v38, v70);
    String.LocalizationValue.init(stringLiteral:)(0x50206574656C6544, 0xEF7473696C79616CLL);
    v72(v73, v38, v70);
    v78 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v73, 0, 0, v78, v76, 0, 0, 256);
    v77(v38, v70);
    v79 = v24;
    v54 = (uint64_t)v188;
    (*(void (**)(char *, uint64_t))(v180 + 8))(v79, v184);
    goto LABEL_49;
  }
  if (swift_dynamicCast(v181, &v189, v43, v182, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003CLL, 0x80000001003B1140);
    v80 = v33;
    v81 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
    v81(v55, v38, v32);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v82 = qword_1004A1DA0;
    v83 = (id)qword_1004A1DA0;
    v84 = v186;
    static Locale.current.getter(v83);
    v54 = String.init(localized:table:bundle:locale:comment:)(v55, 0, 0, v82, v84, 0, 0, 256);
    v85 = *(void (**)(char *, uint64_t))(v80 + 8);
    v85(v38, v32);
    String.LocalizationValue.init(stringLiteral:)(0x53206574656C6544, 0xEB00000000676E6FLL);
    v81(v55, v38, v32);
    v86 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v55, 0, 0, v86, v84, 0, 0, 256);
    v85(v38, v32);
    (*(void (**)(char *, uint64_t))(v177 + 8))(v181, v182);
    goto LABEL_49;
  }
  v87 = v55;
  if (swift_dynamicCast(v178, &v189, v43, v179, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003DLL, 0x80000001003B1100);
    v88 = v33;
    v89 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
    v89(v55, v38, v70);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v90 = qword_1004A1DA0;
    v91 = (id)qword_1004A1DA0;
    v92 = v186;
    static Locale.current.getter(v91);
    v54 = String.init(localized:table:bundle:locale:comment:)(v55, 0, 0, v90, v92, 0, 0, 256);
    v93 = *(void (**)(char *, uint64_t))(v88 + 8);
    v93(v38, v70);
    String.LocalizationValue.init(stringLiteral:)(0x4D206574656C6544, 0xEC0000006569766FLL);
    v89(v55, v38, v70);
    v94 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v55, 0, 0, v94, v92, 0, 0, 256);
    v93(v38, v70);
    v95 = *(void (**)(char *, uint64_t))(v174 + 8);
    v96 = v178;
    v97 = &v194;
    goto LABEL_47;
  }
  if (swift_dynamicCast(v175, &v189, v43, v176, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003FLL, 0x80000001003B10C0);
    v98 = v33;
    v99 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
    v99(v55, v38, v70);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v100 = qword_1004A1DA0;
    v101 = (id)qword_1004A1DA0;
    v102 = v186;
    static Locale.current.getter(v101);
    v54 = String.init(localized:table:bundle:locale:comment:)(v55, 0, 0, v100, v102, 0, 0, 256);
    v103 = *(void (**)(char *, uint64_t))(v98 + 8);
    v103(v38, v70);
    String.LocalizationValue.init(stringLiteral:)(0x54206574656C6544, 0xEE00776F68532056);
    v99(v55, v38, v70);
    v104 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v55, 0, 0, v104, v102, 0, 0, 256);
    v103(v38, v70);
    v95 = *(void (**)(char *, uint64_t))(v171 + 8);
    v96 = v175;
    v97 = &v193;
    goto LABEL_47;
  }
  if (swift_dynamicCast(v172, &v189, v43, v173, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000042, 0x80000001003B1050);
    v105 = v33;
    v106 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
    v106(v55, v38, v70);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v107 = qword_1004A1DA0;
    v108 = (id)qword_1004A1DA0;
    v109 = v186;
    static Locale.current.getter(v108);
    v54 = String.init(localized:table:bundle:locale:comment:)(v87, 0, 0, v107, v109, 0, 0, 256);
    v110 = *(void (**)(char *, uint64_t))(v105 + 8);
    v110(v38, v70);
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000011, 0x80000001003B10A0);
    v106(v87, v38, v70);
    v111 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v87, 0, 0, v111, v109, 0, 0, 256);
    v110(v38, v70);
    v95 = *(void (**)(char *, uint64_t))(v169 + 8);
    v96 = v172;
    v97 = &v192;
    goto LABEL_47;
  }
  v112 = v168;
  v113 = v170;
  if (!swift_dynamicCast(v168, &v189, v43, v170, 0))
  {
    v125 = v161;
    v126 = v43;
    v127 = v164;
    v128 = v33;
    if ((swift_dynamicCast(v161, &v189, v126, v164, 0) & 1) != 0)
    {
      v129 = v160;
      v130 = v159;
      (*(void (**)(char *, char *, uint64_t))(v160 + 32))(v159, v125, v127);
      v131 = v158;
      (*(void (**)(char *, char *, uint64_t))(v129 + 16))(v158, v130, v127);
      v132 = (*(uint64_t (**)(char *, uint64_t))(v129 + 88))(v131, v127);
      if (v132 == enum case for Track.song(_:))
      {
        (*(void (**)(char *, uint64_t))(v129 + 96))(v131, v127);
        v133 = v177;
        v134 = (uint64_t)v156;
        v135 = v130;
        v136 = v182;
        (*(void (**)(char *, char *, uint64_t))(v177 + 32))(v156, v131, v182);
        v54 = sub_1000D6EAC(v134);
        (*(void (**)(uint64_t, uint64_t))(v133 + 8))(v134, v136);
        v95 = *(void (**)(char *, uint64_t))(v129 + 8);
        v96 = v135;
LABEL_39:
        v143 = v127;
LABEL_48:
        v95(v96, v143);
LABEL_49:
        sub_10000682C(&v189);
LABEL_50:
        sub_10000682C(v190);
        return v54;
      }
      if (v132 == enum case for Track.musicVideo(_:))
      {
        (*(void (**)(char *, uint64_t))(v129 + 96))(v131, v127);
        v141 = v183;
        v142 = (uint64_t)v155;
        (*(void (**)(char *, char *, uint64_t))(v183 + 32))(v155, v131, v56);
        v54 = sub_1000D83C8(v142);
        (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v142, v56);
        v95 = *(void (**)(char *, uint64_t))(v129 + 8);
        v96 = v130;
        goto LABEL_39;
      }
      v144 = v130;
      v145 = *(void (**)(char *, uint64_t))(v129 + 8);
      v145(v144, v127);
      v145(v131, v127);
    }
LABEL_54:
    sub_10000682C(&v189);
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000037, 0x80000001003B0FB0);
    v148 = *(void (**)(char *, char *, uint64_t))(v128 + 16);
    v148(v87, v38, v70);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v149 = qword_1004A1DA0;
    v150 = (id)qword_1004A1DA0;
    v151 = v186;
    static Locale.current.getter(v150);
    v54 = String.init(localized:table:bundle:locale:comment:)(v87, 0, 0, v149, v151, 0, 0, 256);
    v152 = *(void (**)(char *, uint64_t))(v128 + 8);
    v152(v38, v70);
    String.LocalizationValue.init(stringLiteral:)(0x6574656C6544, 0xE600000000000000);
    v148(v87, v38, v70);
    v153 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    String.init(localized:table:bundle:locale:comment:)(v87, 0, 0, v153, v151, 0, 0, 256);
    v152(v38, v70);
    goto LABEL_50;
  }
  v114 = v25;
  v115 = v167;
  v116 = v165;
  v117 = (*(uint64_t (**)(char *, char *, uint64_t))(v167 + 32))(v165, v112, v113);
  v118 = v163;
  Playlist.Entry.internalItem.getter(v117);
  v119 = v166;
  v120 = v162;
  v121 = (*(uint64_t (**)(char *, uint64_t))(v166 + 88))(v118, v162);
  if (v121 == enum case for Playlist.Entry.InternalItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v119 + 96))(v118, v120);
    v122 = v174;
    v123 = (uint64_t)v157;
    v124 = v179;
    (*(void (**)(char *, char *, uint64_t))(v174 + 32))(v157, v118, v179);
    v54 = sub_1000D9910(v123);
    (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v123, v124);
    v95 = *(void (**)(char *, uint64_t))(v115 + 8);
LABEL_46:
    v96 = v116;
    v97 = &v191;
LABEL_47:
    v143 = *(v97 - 32);
    goto LABEL_48;
  }
  if (v121 == enum case for Playlist.Entry.InternalItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v166 + 96))(v118, v120);
    v137 = v183;
    v138 = (uint64_t)v155;
    v139 = v114;
    (*(void (**)(char *, char *, uint64_t))(v183 + 32))(v155, v118, v114);
    v140 = sub_1000D83C8(v138);
LABEL_45:
    v54 = v140;
    (*(void (**)(uint64_t, uint64_t))(v137 + 8))(v138, v139);
    v95 = *(void (**)(char *, uint64_t))(v167 + 8);
    goto LABEL_46;
  }
  if (v121 == enum case for Playlist.Entry.InternalItem.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v166 + 96))(v118, v120);
    v137 = v177;
    v138 = (uint64_t)v156;
    v139 = v182;
    (*(void (**)(char *, char *, uint64_t))(v177 + 32))(v156, v118, v182);
    v140 = sub_1000D6EAC(v138);
    goto LABEL_45;
  }
  v146 = v166;
  if (v121 == enum case for Playlist.Entry.InternalItem.tvEpisode(_:))
  {
    (*(void (**)(char *, uint64_t))(v166 + 96))(v118, v120);
    v137 = v169;
    v138 = (uint64_t)v154;
    v139 = v173;
    (*(void (**)(char *, char *, uint64_t))(v169 + 32))(v154, v118, v173);
    v140 = sub_1000DAE60(v138);
    goto LABEL_45;
  }
  if (v121 != enum case for Playlist.Entry.InternalItem.uploadedAudio(_:)
    && v121 != enum case for Playlist.Entry.InternalItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v167 + 8))(v116, v170);
    (*(void (**)(char *, uint64_t))(v146 + 8))(v118, v120);
    v128 = v33;
    goto LABEL_54;
  }
  (*(void (**)(char *, uint64_t))(v166 + 8))(v118, v120);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000036, 0x80000001003B1010, "MusicCore/Alert+Music.swift", 27, 2, 304, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000DD89C@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10048C7E0 != -1)
    swift_once(&qword_10048C7E0, sub_1000F8E40);
  v9 = static CloudLibrary.EnablementContext.action;
  v8 = unk_1004A2130;
  swift_bridgeObjectRetain();
  v10 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v11 = UUID.uuidString.getter(v10);
  v13 = v12;
  v32 = *(void (**)(char *, uint64_t))(v5 + 8);
  v32(v7, v4);
  CloudLibrary.EnablementContext.title.getter(a1);
  v35 = v15;
  v36 = v14;
  CloudLibrary.EnablementContext.message.getter(a1);
  v33 = v17;
  v34 = v16;
  v18 = sub_100005574(&qword_100493240);
  v19 = swift_allocObject(v18, 144, 7);
  *(_OWORD *)(v19 + 16) = xmmword_100384A60;
  *(_QWORD *)(v19 + 32) = v11;
  *(_QWORD *)(v19 + 40) = v13;
  *(_QWORD *)(v19 + 48) = v9;
  *(_QWORD *)(v19 + 56) = v8;
  *(_BYTE *)(v19 + 64) = 2;
  *(_QWORD *)(v19 + 72) = &unk_100491828;
  *(_QWORD *)(v19 + 80) = 0;
  v20 = qword_10048CE50;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = v4;
  if (v20 != -1)
    swift_once(&qword_10048CE50, sub_1001ECBE8);
  v22 = static String.cancelButtonTitle;
  v23 = qword_1004A2C90;
  swift_bridgeObjectRetain();
  v24 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v25 = UUID.uuidString.getter(v24);
  v27 = v26;
  v32(v7, v21);
  *(_QWORD *)(v19 + 88) = v25;
  *(_QWORD *)(v19 + 96) = v27;
  *(_QWORD *)(v19 + 104) = v22;
  *(_QWORD *)(v19 + 112) = v23;
  *(_BYTE *)(v19 + 120) = 0;
  *(_QWORD *)(v19 + 128) = 0;
  *(_QWORD *)(v19 + 136) = 0;
  swift_bridgeObjectRelease(v8);
  result = swift_bridgeObjectRelease(v13);
  v29 = v35;
  *(_QWORD *)a2 = v36;
  *(_QWORD *)(a2 + 8) = v29;
  v30 = v33;
  *(_QWORD *)(a2 + 16) = v34;
  *(_QWORD *)(a2 + 24) = v30;
  *(_BYTE *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = v19;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

char *sub_1000DDA90@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  unsigned __int8 v32;
  unint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *result;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  const char *v52;
  uint64_t v53;
  id v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  id v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  id v73;
  char *v74;
  unint64_t v75;
  uint64_t v76;
  id v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(char *, uint64_t);
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t (*v112)(char *, uint64_t);
  uint64_t v113;
  void (*v114)(char *, char *, uint64_t);
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  _QWORD v119[16];

  v111 = a2;
  v117 = type metadata accessor for UUID(0);
  v112 = *(uint64_t (**)(char *, uint64_t))(v117 - 8);
  __chkstk_darwin(v117);
  v116 = (char *)&v105 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v118 = (char *)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for String.LocalizationValue(0);
  v6 = *(_QWORD *)(v115 - 8);
  v7 = __chkstk_darwin(v115);
  v9 = (char *)&v105 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v105 - v10;
  if (qword_10048C658 != -1)
    swift_once(&qword_10048C658, sub_1000B3BEC);
  v12 = static ApplicationCapabilities.Controller.shared;
  KeyPath = swift_getKeyPath(&unk_10038B720);
  v14 = swift_getKeyPath(&unk_10038B748);
  static Published.subscript.getter(v119, v12, KeyPath, v14);
  swift_release(KeyPath);
  swift_release(v14);
  v15 = v119[3];
  v16 = v119[4];
  v17 = v119[7];
  v18 = v119[9];
  v19 = (void *)v119[10];
  v20 = v119[12];
  swift_bridgeObjectRelease(v119[14]);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v18);

  v21 = sub_1000C69C8(7u, v16);
  swift_bridgeObjectRelease(v16);
  if ((a1 & 1) != 0)
  {
    v22 = 0x80000001003B1480;
    v23 = 0xD000000000000012;
  }
  else
  {
    v22 = 0x80000001003B1280;
    v23 = 0x100000000000002DLL;
  }
  String.LocalizationValue.init(stringLiteral:)(v23, v22);
  v24 = v115;
  v114 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v114(v9, v11, v115);
  if (qword_10048C570 != -1)
    swift_once(&qword_10048C570, sub_10000AD54);
  v25 = qword_1004A1DA0;
  v26 = (id)qword_1004A1DA0;
  v27 = v118;
  static Locale.current.getter(v26);
  v28 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, v25, v27, 0, 0, 256);
  v30 = v29;
  v31 = *(void (**)(char *, uint64_t))(v6 + 8);
  v31(v11, v24);
  v32 = objc_msgSend((id)objc_opt_self(AMSRestrictions), "allowAccountModifications");
  v113 = v30;
  if ((v32 & 1) != 0)
  {
    v110 = v28;
    v109 = v31;
    if ((v21 & 1) != 0)
    {
      if ((a1 & 1) != 0)
      {
        v33 = 0xD000000000000087;
        v34 = "This content is restricted from playing on this device. To change your Content Restrictions, go to Setting"
              "s and allow explicit content.";
      }
      else
      {
        v33 = 0xD000000000000061;
        v34 = "To add this to your library, change your Content Restrictions to allow a less restrictive rating.";
      }
      String.LocalizationValue.init(stringLiteral:)(v33, (unint64_t)(v34 - 32) | 0x8000000000000000);
      v114(v9, v11, v24);
      if (qword_10048C570 != -1)
        swift_once(&qword_10048C570, sub_10000AD54);
      v53 = qword_1004A1DA0;
      v54 = (id)qword_1004A1DA0;
      v55 = v118;
      static Locale.current.getter(v54);
      v108 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, v53, v55, 0, 0, 256);
      v107 = v56;
      v31(v11, v24);
      String.LocalizationValue.init(stringLiteral:)(0x73676E6974746553, 0xE800000000000000);
      v114(v9, v11, v24);
      if (qword_10048C570 != -1)
        swift_once(&qword_10048C570, sub_10000AD54);
      v57 = qword_1004A1DA0;
      v58 = (id)qword_1004A1DA0;
      v59 = v118;
      static Locale.current.getter(v58);
      v106 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, v57, v59, 0, 0, 256);
      v105 = v60;
      v31(v11, v24);
      v61 = v116;
      v62 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
      v63 = UUID.uuidString.getter(v62);
      v65 = v64;
      v66 = (void (*)(char *, uint64_t))*((_QWORD *)v112 + 1);
      v66(v61, v117);
      v43 = sub_10003DCE4(0, 1, 1, (char *)_swiftEmptyArrayStorage);
      v68 = *((_QWORD *)v43 + 2);
      v67 = *((_QWORD *)v43 + 3);
      v112 = (uint64_t (*)(char *, uint64_t))v66;
      if (v68 >= v67 >> 1)
        v43 = sub_10003DCE4((char *)(v67 > 1), v68 + 1, 1, v43);
      *((_QWORD *)v43 + 2) = v68 + 1;
      v69 = &v43[56 * v68];
      *((_QWORD *)v69 + 4) = v63;
      *((_QWORD *)v69 + 5) = v65;
      v70 = v105;
      *((_QWORD *)v69 + 6) = v106;
      *((_QWORD *)v69 + 7) = v70;
      v69[64] = 2;
      v71 = &unk_100491820;
    }
    else
    {
      if ((a1 & 1) != 0)
      {
        v51 = 0xD00000000000005BLL;
        v52 = "To play this item, change your Content Restrictions to allow a less restrictive rating now.";
      }
      else
      {
        v51 = 0xD000000000000065;
        v52 = "To add this to your library, change your Content Restrictions to allow a less restrictive rating now.";
      }
      String.LocalizationValue.init(stringLiteral:)(v51, (unint64_t)(v52 - 32) | 0x8000000000000000);
      v114(v9, v11, v24);
      if (qword_10048C570 != -1)
        swift_once(&qword_10048C570, sub_10000AD54);
      v72 = qword_1004A1DA0;
      v73 = (id)qword_1004A1DA0;
      v74 = v118;
      static Locale.current.getter(v73);
      v108 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, v72, v74, 0, 0, 256);
      v107 = v75;
      v31(v11, v24);
      String.LocalizationValue.init(stringLiteral:)(0x776F6C6C41, 0xE500000000000000);
      v114(v9, v11, v24);
      if (qword_10048C570 != -1)
        swift_once(&qword_10048C570, sub_10000AD54);
      v76 = qword_1004A1DA0;
      v77 = (id)qword_1004A1DA0;
      v78 = v118;
      static Locale.current.getter(v77);
      v106 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, v76, v78, 0, 0, 256);
      v105 = v79;
      v31(v11, v24);
      v80 = v116;
      v81 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
      v82 = UUID.uuidString.getter(v81);
      v84 = v83;
      v85 = (void (*)(char *, uint64_t))*((_QWORD *)v112 + 1);
      v85(v80, v117);
      v43 = sub_10003DCE4(0, 1, 1, (char *)_swiftEmptyArrayStorage);
      v87 = *((_QWORD *)v43 + 2);
      v86 = *((_QWORD *)v43 + 3);
      v112 = (uint64_t (*)(char *, uint64_t))v85;
      if (v87 >= v86 >> 1)
        v43 = sub_10003DCE4((char *)(v86 > 1), v87 + 1, 1, v43);
      *((_QWORD *)v43 + 2) = v87 + 1;
      v69 = &v43[56 * v87];
      *((_QWORD *)v69 + 4) = v82;
      *((_QWORD *)v69 + 5) = v84;
      v88 = v105;
      *((_QWORD *)v69 + 6) = v106;
      *((_QWORD *)v69 + 7) = v88;
      v69[64] = 2;
      v71 = &unk_100491818;
    }
    *((_QWORD *)v69 + 9) = v71;
    *((_QWORD *)v69 + 10) = 0;
    String.LocalizationValue.init(stringLiteral:)(0x776F4E20746F4ELL, 0xE700000000000000);
    v89 = v115;
    v114(v9, v11, v115);
    v90 = qword_1004A1DA0;
    v91 = (id)qword_1004A1DA0;
    v92 = v118;
    static Locale.current.getter(v91);
    v93 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, v90, v92, 0, 0, 256);
    v95 = v94;
    v109(v11, v89);
    v96 = v116;
    v97 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
    v98 = UUID.uuidString.getter(v97);
    v100 = v99;
    result = (char *)v112(v96, v117);
    v102 = *((_QWORD *)v43 + 2);
    v101 = *((_QWORD *)v43 + 3);
    if (v102 >= v101 >> 1)
    {
      result = sub_10003DCE4((char *)(v101 > 1), v102 + 1, 1, v43);
      v43 = result;
    }
    v46 = v111;
    v47 = v108;
    v50 = v107;
    *((_QWORD *)v43 + 2) = v102 + 1;
    v103 = &v43[56 * v102];
    *((_QWORD *)v103 + 4) = v98;
    *((_QWORD *)v103 + 5) = v100;
    *((_QWORD *)v103 + 6) = v93;
    *((_QWORD *)v103 + 7) = v95;
    v103[64] = 2;
    v49 = v103 + 72;
    v28 = v110;
  }
  else
  {
    if (qword_10048CE40 != -1)
      swift_once(&qword_10048CE40, sub_1001ECB74);
    v35 = static String.okButtonTitle;
    v36 = qword_1004A2C70;
    swift_bridgeObjectRetain();
    v37 = v116;
    v38 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
    v39 = UUID.uuidString.getter(v38);
    v41 = v40;
    (*((void (**)(char *, uint64_t))v112 + 1))(v37, v117);
    result = sub_10003DCE4(0, 1, 1, (char *)_swiftEmptyArrayStorage);
    v43 = result;
    v45 = *((_QWORD *)result + 2);
    v44 = *((_QWORD *)result + 3);
    v46 = v111;
    if (v45 >= v44 >> 1)
    {
      result = sub_10003DCE4((char *)(v44 > 1), v45 + 1, 1, result);
      v43 = result;
    }
    v47 = 0;
    *((_QWORD *)v43 + 2) = v45 + 1;
    v48 = &v43[56 * v45];
    *((_QWORD *)v48 + 4) = v39;
    *((_QWORD *)v48 + 5) = v41;
    *((_QWORD *)v48 + 6) = v35;
    *((_QWORD *)v48 + 7) = v36;
    v48[64] = 2;
    v49 = v48 + 72;
    v50 = 0xE000000000000000;
  }
  *v49 = 0;
  v49[1] = 0;
  v104 = v113;
  *(_QWORD *)v46 = v28;
  *(_QWORD *)(v46 + 8) = v104;
  *(_QWORD *)(v46 + 16) = v47;
  *(_QWORD *)(v46 + 24) = v50;
  *(_BYTE *)(v46 + 32) = 0;
  *(_QWORD *)(v46 + 40) = v43;
  *(_QWORD *)(v46 + 48) = 0;
  return result;
}

uint64_t sub_1000DE424@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v54 = a2;
  v55 = a3;
  v53 = a1;
  v56 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Locale(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for String.LocalizationValue(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v44 - v18;
  String.LocalizationValue.init(stringLiteral:)(0x6E4F206E727554, 0xE700000000000000);
  v50 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v50(v17, v19, v13);
  if (qword_10048C570 != -1)
    swift_once(&qword_10048C570, sub_10000AD54);
  v20 = qword_1004A1DA0;
  static Locale.current.getter((id)qword_1004A1DA0);
  v21 = String.init(localized:table:bundle:locale:comment:)(v17, 0, 0, v20, v12, 0, 0, 256);
  v51 = v22;
  v52 = v21;
  v49 = *(void (**)(char *, uint64_t))(v14 + 8);
  v49(v19, v13);
  v23 = swift_allocObject(&unk_100449CD8, 32, 7);
  *(_QWORD *)(v23 + 16) = v55;
  *(_QWORD *)(v23 + 24) = a4;
  v45 = v23;
  swift_retain(a4);
  v24 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v25 = UUID.uuidString.getter(v24);
  v47 = v26;
  v48 = v25;
  v27 = *(void (**)(char *, uint64_t))(v7 + 8);
  v27(v9, v56);
  if (qword_10048CE60 != -1)
    swift_once(&qword_10048CE60, sub_1001ECCA8);
  v28 = qword_1004A2CB0;
  v46 = static String.notNowButtonTitle;
  v29 = swift_allocObject(&unk_100449D00, 32, 7);
  *(_QWORD *)(v29 + 16) = v55;
  *(_QWORD *)(v29 + 24) = a4;
  swift_retain(a4);
  swift_bridgeObjectRetain();
  v30 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v31 = UUID.uuidString.getter(v30);
  v55 = v32;
  v27(v9, v56);
  String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ELL, 0x80000001003B0E40);
  v50(v17, v19, v13);
  v33 = qword_1004A1DA0;
  static Locale.current.getter((id)qword_1004A1DA0);
  v34 = String.init(localized:table:bundle:locale:comment:)(v17, 0, 0, v33, v12, 0, 0, 256);
  v36 = v35;
  v49(v19, v13);
  v37 = sub_100005574(&qword_100493240);
  v38 = swift_allocObject(v37, 144, 7);
  *(_OWORD *)(v38 + 16) = xmmword_100384A60;
  v39 = v47;
  *(_QWORD *)(v38 + 32) = v48;
  *(_QWORD *)(v38 + 40) = v39;
  v40 = v51;
  *(_QWORD *)(v38 + 48) = v52;
  *(_QWORD *)(v38 + 56) = v40;
  *(_BYTE *)(v38 + 64) = 2;
  v41 = v45;
  *(_QWORD *)(v38 + 72) = &unk_1004917B8;
  *(_QWORD *)(v38 + 80) = v41;
  v42 = v55;
  *(_QWORD *)(v38 + 88) = v31;
  *(_QWORD *)(v38 + 96) = v42;
  *(_QWORD *)(v38 + 104) = v46;
  *(_QWORD *)(v38 + 112) = v28;
  *(_BYTE *)(v38 + 120) = 0;
  *(_QWORD *)(v38 + 128) = &unk_1004917C8;
  *(_QWORD *)(v38 + 136) = v29;
  result = swift_bridgeObjectRetain();
  *(_QWORD *)a5 = v34;
  *(_QWORD *)(a5 + 8) = v36;
  *(_QWORD *)(a5 + 16) = v53;
  *(_QWORD *)(a5 + 24) = result;
  *(_BYTE *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 40) = v38;
  *(_QWORD *)(a5 + 48) = 0;
  return result;
}

id sub_1000DE7C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  id result;
  void *v22;
  int wapiCapability;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);

  v47 = a3;
  v5 = type metadata accessor for Locale(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for String.LocalizationValue(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v44 - v13;
  String.LocalizationValue.init(stringLiteral:)(0xD000000000000020, 0x80000001003B0E60);
  v50 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v50(v12, v14, v8);
  if (qword_10048C570 != -1)
    swift_once(&qword_10048C570, sub_10000AD54);
  v15 = qword_1004A1DA0;
  static Locale.current.getter((id)qword_1004A1DA0);
  v16 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v15, v7, 0, 0, 256);
  v48 = v17;
  v49 = v16;
  v18 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
  v19 = v18(v14, v8);
  result = (id)MobileGestalt_get_current_device(v19, v20);
  if (result)
  {
    v22 = result;
    wapiCapability = MobileGestalt_get_wapiCapability();

    if (wapiCapability)
    {
      v24 = 0x80000001003B0F20;
      v25 = 0x100000000000008BLL;
    }
    else
    {
      v25 = 0x100000000000008CLL;
      v24 = 0x80000001003B0E90;
    }
    String.LocalizationValue.init(stringLiteral:)(v25, v24);
    v50(v12, v14, v8);
    v26 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    v27 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v26, v7, 0, 0, 256);
    v45 = v28;
    v46 = v27;
    v29 = a1;
    v30 = a2;
    v18(v14, v8);
    v31 = sub_100005574(&qword_100493240);
    v32 = swift_allocObject(v31, 144, 7);
    *(_OWORD *)(v32 + 16) = xmmword_100384A60;
    if (qword_10048CE60 != -1)
      swift_once(&qword_10048CE60, sub_1001ECCA8);
    v33 = static String.notNowButtonTitle;
    v34 = qword_1004A2CB0;
    v35 = swift_allocObject(&unk_100449D28, 32, 7);
    *(_QWORD *)(v35 + 16) = v29;
    *(_QWORD *)(v35 + 24) = v30;
    *(_QWORD *)(v32 + 32) = 0x6C65636E6163;
    *(_QWORD *)(v32 + 40) = 0xE600000000000000;
    *(_QWORD *)(v32 + 48) = v33;
    *(_QWORD *)(v32 + 56) = v34;
    *(_BYTE *)(v32 + 64) = 0;
    *(_QWORD *)(v32 + 72) = &unk_1004917D8;
    *(_QWORD *)(v32 + 80) = v35;
    swift_bridgeObjectRetain();
    sub_10003A434(v29, v30);
    String.LocalizationValue.init(stringLiteral:)(0x6E4F206E727554, 0xE700000000000000);
    v50(v12, v14, v8);
    v36 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    v37 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v36, v7, 0, 0, 256);
    v39 = v38;
    v18(v14, v8);
    v40 = swift_allocObject(&unk_100449D50, 32, 7);
    *(_QWORD *)(v40 + 16) = v29;
    *(_QWORD *)(v40 + 24) = v30;
    *(_QWORD *)(v32 + 88) = 0x6E4F6E727574;
    *(_QWORD *)(v32 + 96) = 0xE600000000000000;
    *(_QWORD *)(v32 + 104) = v37;
    *(_QWORD *)(v32 + 112) = v39;
    *(_BYTE *)(v32 + 120) = 2;
    *(_QWORD *)(v32 + 128) = &unk_1004917E8;
    *(_QWORD *)(v32 + 136) = v40;
    result = (id)sub_10003A434(v29, v30);
    v41 = v47;
    v42 = v48;
    *v47 = v49;
    v41[1] = v42;
    v43 = v45;
    v41[2] = v46;
    v41[3] = v43;
    *((_BYTE *)v41 + 32) = 0;
    v41[5] = v32;
    v41[6] = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000DEBBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t result;
  uint64_t v26;
  char *v27;
  int64x2_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  __int128 v33;
  void (*v34)(char *, char *, uint64_t);
  id v35;
  NSURL *v36;
  void *v37;
  void *v38;
  unsigned int v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v52 = a8;
  v55 = a6;
  v56 = a7;
  v53 = a4;
  v54 = a5;
  v13 = type metadata accessor for UUID(0);
  v50 = *(_QWORD *)(v13 - 8);
  v51 = v13;
  __chkstk_darwin(v13);
  v49 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  v18 = __chkstk_darwin(v15);
  v48 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v47 - v19;
  v21 = sub_100005574(&qword_10048D510);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v47 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v22);
  v27 = (char *)&v47 - v26;
  if (qword_10048CF08 != -1)
    result = swift_once(&qword_10048CF08, sub_1001EE2A4);
  v28 = 0uLL;
  if (static DeviceCapabilities.isInternalInstall == 1)
  {
    sub_1000F71A4(a1, a2, a3, v53, v54, v55, v56, v52 & 1, (uint64_t)v27);
    sub_10000DCF8((uint64_t)v27, (uint64_t)v24);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v24, 1, v15) == 1)
    {
      sub_10000DD40((uint64_t)v27);
      v29 = (uint64_t)v24;
LABEL_10:
      result = sub_10000DD40(v29);
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 0uLL;
      v28 = 0uLL;
      goto LABEL_11;
    }
    v34 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    v34(v20, v24, v15);
    v35 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
    URL._bridgeToObjectiveC()(v36);
    v38 = v37;
    v39 = objc_msgSend(v35, "canOpenURL:", v37);

    if (!v39)
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v15);
      v29 = (uint64_t)v27;
      goto LABEL_10;
    }
    v40 = v48;
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v48, v20, v15);
    v41 = *(unsigned __int8 *)(v16 + 80);
    v42 = (v41 + 16) & ~v41;
    v32 = swift_allocObject(&unk_100449CB0, v42 + v17, v41 | 7);
    v34((char *)(v32 + v42), v40, v15);
    v43 = v49;
    v44 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
    v30 = UUID.uuidString.getter(v44);
    v46 = v45;
    (*(void (**)(char *, uint64_t))(v50 + 8))(v43, v51);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v15);
    result = sub_10000DD40((uint64_t)v27);
    v28 = vdupq_n_s64(0x52206120656C6946uLL);
    v28.i64[0] = v46;
    v33 = xmmword_100384B40;
    v31 = &unk_1004917A8;
  }
  else
  {
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0uLL;
  }
LABEL_11:
  *(_QWORD *)a9 = v30;
  *(int64x2_t *)(a9 + 8) = v28;
  *(_OWORD *)(a9 + 24) = v33;
  *(_QWORD *)(a9 + 40) = v31;
  *(_QWORD *)(a9 + 48) = v32;
  return result;
}

uint64_t sub_1000DEF10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005574(&qword_100491208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id sub_1000DEF58@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  id result;
  void *v19;
  char wapiCapability;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  id v24;
  char *v25;
  void *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  id v37;
  char *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  id v46;
  id v47;
  void *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  void *v56;
  uint64_t v57;
  BOOL v58;
  id v59;
  id v60;
  uint64_t v61;
  id v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  char *v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  id v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  void (*v88)(char *, uint64_t);
  char *v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  id v112;
  uint64_t v113;
  void *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  char *v120;

  v4 = type metadata accessor for UUID(0);
  v119 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v109 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  __chkstk_darwin(v7);
  v120 = (char *)&v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v109 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v109 - v15;
  result = (id)MobileGestalt_get_current_device(v14, v17);
  if (!result)
  {
    __break(1u);
    return result;
  }
  v19 = result;
  wapiCapability = MobileGestalt_get_wapiCapability();

  v117 = v4;
  v118 = a2;
  if (!a1)
    goto LABEL_24;
  objc_opt_self(MPModelRadioStation);
  if (swift_dynamicCastObjCClass(a1) || (objc_opt_self(MPModelArtist), swift_dynamicCastObjCClass(a1)))
  {
    v21 = v6;
    if ((wapiCapability & 1) != 0)
    {
      String.LocalizationValue.init(stringLiteral:)(0xD00000000000001DLL, 0x80000001003B0A60);
      v22 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
      v22(v13, v16, v9);
      if (qword_10048C570 != -1)
        swift_once(&qword_10048C570, sub_10000AD54);
      v23 = qword_1004A1DA0;
      v24 = (id)qword_1004A1DA0;
      v25 = v120;
      static Locale.current.getter(v24);
      v26 = (void *)String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, v23, v25, 0, 0, 256);
      v111 = v27;
      v112 = v26;
      v28 = *(void (**)(char *, uint64_t))(v10 + 8);
      v28(v16, v9);
      v29 = 0x80000001003B0DD0;
      v30 = 0x100000000000006ALL;
      goto LABEL_48;
    }
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ELL, 0x80000001003B0A10);
    v22 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v22(v13, v16, v9);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v31 = qword_1004A1DA0;
    v32 = (id)qword_1004A1DA0;
    v25 = v120;
    static Locale.current.getter(v32);
    v33 = (void *)String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, v31, v25, 0, 0, 256);
    v111 = v34;
    v112 = v33;
    v28 = *(void (**)(char *, uint64_t))(v10 + 8);
    v28(v16, v9);
    v30 = 0x100000000000006BLL;
    v35 = "To play Radio when you aren’t connected to Wi-Fi, turn on cellular playback in Music in the Settings app.";
LABEL_47:
    v29 = (unint64_t)(v35 - 32) | 0x8000000000000000;
LABEL_48:
    String.LocalizationValue.init(stringLiteral:)(v30, v29);
    v22(v13, v16, v9);
    v77 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    v78 = String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, v77, v25, 0, 0, 256);
    v109 = v79;
    v110 = v78;
    v28(v16, v9);
    String.LocalizationValue.init(stringLiteral:)(0x6E4F206E727554, 0xE700000000000000);
    v22(v13, v16, v9);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v80 = qword_1004A1DA0;
    v81 = (id)qword_1004A1DA0;
    v82 = v120;
    static Locale.current.getter(v81);
    v115 = String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, v80, v82, 0, 0, 256);
    v113 = v83;
    v72 = &unk_100491788;
    goto LABEL_51;
  }
  objc_opt_self(MPModelTVEpisode);
  if (swift_dynamicCastObjCClass(a1) || (objc_opt_self(MPModelMovie), swift_dynamicCastObjCClass(a1)))
  {
    if ((wapiCapability & 1) == 0)
      goto LABEL_37;
LABEL_15:
    v21 = v6;
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ELL, 0x80000001003B0CB0);
    v22 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v22(v13, v16, v9);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v36 = qword_1004A1DA0;
    v37 = (id)qword_1004A1DA0;
    v38 = v120;
    static Locale.current.getter(v37);
    v39 = (void *)String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, v36, v38, 0, 0, 256);
    v111 = v40;
    v112 = v39;
    v28 = *(void (**)(char *, uint64_t))(v10 + 8);
    v28(v16, v9);
    v41 = 0x1000000000000087;
    v42 = "To stream videos when you aren’t connected to WLAN, turn on Cellular Data for streaming. You can change this a"
          "nytime in Settings > TV";
    goto LABEL_40;
  }
  objc_opt_self(MPModelMediaClip);
  v43 = swift_dynamicCastObjCClass(a1);
  if (!v43)
  {
LABEL_24:
    if ((wapiCapability & 1) != 0)
      goto LABEL_25;
LABEL_44:
    v21 = v6;
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000020, 0x80000001003B0AB0);
    v22 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v22(v13, v16, v9);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v73 = qword_1004A1DA0;
    v74 = (id)qword_1004A1DA0;
    v25 = v120;
    static Locale.current.getter(v74);
    v75 = (void *)String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, v73, v25, 0, 0, 256);
    v111 = v76;
    v112 = v75;
    v28 = *(void (**)(char *, uint64_t))(v10 + 8);
    v28(v16, v9);
    v30 = 0x100000000000008BLL;
    v35 = "To stream music when you aren’t connected to Wi-Fi, turn on Cellular Data for streaming. You can change this a"
          "nytime in Settings > Music.";
    goto LABEL_47;
  }
  v44 = (void *)v43;
  v45 = MPModelRelationshipMediaClipStaticAssets;
  v46 = a1;
  if (!objc_msgSend(v44, "hasLoadedValueForKey:", v45)
    || (v47 = objc_msgSend(v44, "staticAssets")) == 0)
  {

    if ((wapiCapability & 1) != 0)
      goto LABEL_25;
    goto LABEL_44;
  }
  v48 = v47;
  v49 = sub_1000E02B8();
  v50 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v48, v49);

  v51 = v50;
  v116 = v50;
  v112 = v46;
  if (v50 >> 62)
  {
LABEL_55:
    if (v51 < 0)
      v107 = v116;
    else
      v107 = v51 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v108 = v107;
    v51 = v116;
    v52 = _CocoaArrayWrapper.endIndex.getter(v108);
    swift_bridgeObjectRelease();
    if (v52)
      goto LABEL_23;
LABEL_59:

    swift_bridgeObjectRelease();
    if ((wapiCapability & 1) == 0)
      goto LABEL_44;
LABEL_25:
    v21 = v6;
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000020, 0x80000001003B0AB0);
    v22 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v22(v13, v16, v9);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v54 = qword_1004A1DA0;
    v55 = (id)qword_1004A1DA0;
    v25 = v120;
    static Locale.current.getter(v55);
    v56 = (void *)String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, v54, v25, 0, 0, 256);
    v111 = v57;
    v112 = v56;
    v28 = *(void (**)(char *, uint64_t))(v10 + 8);
    v28(v16, v9);
    v30 = 0x100000000000008ALL;
    v35 = "To stream music when you aren’t connected to WLAN, turn on Cellular Data for streaming. You can change this an"
          "ytime in Settings > Music.";
    goto LABEL_47;
  }
  v52 = *(_QWORD *)((v50 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v52)
    goto LABEL_59;
LABEL_23:
  v115 = v51 & 0xC000000000000001;
  v113 = v9;
  v114 = (void *)MPModelPropertyStaticAssetMediaType;
  v53 = 4;
  while (1)
  {
    if (v115)
      v59 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v53 - 4, v51);
    else
      v59 = *(id *)(v51 + 8 * v53);
    v51 = (uint64_t)v59;
    v9 = v53 - 3;
    if (__OFADD__(v53 - 4, 1))
    {
      __break(1u);
      goto LABEL_55;
    }
    if (objc_msgSend(v59, "hasLoadedValueForKey:", v114))
      break;

LABEL_29:
    ++v53;
    v58 = v9 == v52;
    v9 = v113;
    v51 = v116;
    if (v58)
      goto LABEL_59;
  }
  v60 = objc_msgSend((id)v51, "mediaType");

  if (v60 != (id)2)
    goto LABEL_29;

  swift_bridgeObjectRelease();
  v9 = v113;
  if ((wapiCapability & 1) != 0)
    goto LABEL_15;
LABEL_37:
  v21 = v6;
  String.LocalizationValue.init(stringLiteral:)(0xD00000000000001FLL, 0x80000001003B0C00);
  v22 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v22(v13, v16, v9);
  if (qword_10048C570 != -1)
    swift_once(&qword_10048C570, sub_10000AD54);
  v61 = qword_1004A1DA0;
  v62 = (id)qword_1004A1DA0;
  v38 = v120;
  static Locale.current.getter(v62);
  v63 = (void *)String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, v61, v38, 0, 0, 256);
  v111 = v64;
  v112 = v63;
  v28 = *(void (**)(char *, uint64_t))(v10 + 8);
  v28(v16, v9);
  v41 = 0x1000000000000088;
  v42 = "To stream videos when you aren’t connected to Wi-Fi, turn on Cellular Data for streaming. You can change this an"
        "ytime in Settings > TV";
LABEL_40:
  String.LocalizationValue.init(stringLiteral:)(v41, (unint64_t)(v42 - 32) | 0x8000000000000000);
  v22(v13, v16, v9);
  v65 = qword_1004A1DA0;
  static Locale.current.getter((id)qword_1004A1DA0);
  v66 = String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, v65, v38, 0, 0, 256);
  v109 = v67;
  v110 = v66;
  v28(v16, v9);
  String.LocalizationValue.init(stringLiteral:)(0x6E4F206E727554, 0xE700000000000000);
  v22(v13, v16, v9);
  if (qword_10048C570 != -1)
    swift_once(&qword_10048C570, sub_10000AD54);
  v68 = qword_1004A1DA0;
  v69 = (id)qword_1004A1DA0;
  v70 = v120;
  static Locale.current.getter(v69);
  v115 = String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, v68, v70, 0, 0, 256);
  v113 = v71;
  v72 = &unk_100491798;
LABEL_51:
  v114 = v72;
  v28(v16, v9);
  v84 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v85 = v21;
  v86 = UUID.uuidString.getter(v84);
  v116 = v87;
  v88 = *(void (**)(char *, uint64_t))(v119 + 8);
  v89 = v21;
  v90 = v117;
  v88(v89, v117);
  String.LocalizationValue.init(stringLiteral:)(0x776F4E20746F4ELL, 0xE700000000000000);
  v22(v13, v16, v9);
  if (qword_10048C570 != -1)
    swift_once(&qword_10048C570, sub_10000AD54);
  v91 = qword_1004A1DA0;
  v92 = (id)qword_1004A1DA0;
  v93 = v120;
  static Locale.current.getter(v92);
  v94 = String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, v91, v93, 0, 0, 256);
  v96 = v95;
  v28(v16, v9);
  v97 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v98 = UUID.uuidString.getter(v97);
  v100 = v99;
  v88(v85, v90);
  v101 = sub_100005574(&qword_100493240);
  result = (id)swift_allocObject(v101, 144, 7);
  *((_OWORD *)result + 1) = xmmword_100384A60;
  v102 = v116;
  *((_QWORD *)result + 4) = v86;
  *((_QWORD *)result + 5) = v102;
  v103 = v113;
  *((_QWORD *)result + 6) = v115;
  *((_QWORD *)result + 7) = v103;
  *((_BYTE *)result + 64) = 2;
  *((_QWORD *)result + 9) = v114;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 11) = v98;
  *((_QWORD *)result + 12) = v100;
  *((_QWORD *)result + 13) = v94;
  *((_QWORD *)result + 14) = v96;
  *((_BYTE *)result + 120) = 0;
  *((_QWORD *)result + 16) = 0;
  *((_QWORD *)result + 17) = 0;
  v104 = v118;
  v105 = v111;
  *v118 = v112;
  v104[1] = v105;
  v106 = v109;
  v104[2] = v110;
  v104[3] = v106;
  *((_BYTE *)v104 + 32) = 0;
  v104[5] = result;
  v104[6] = 0;
  return result;
}

id sub_1000DFB18@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  id result;
  void *v19;
  int wapiCapability;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  int cellularDataCapability;
  uint64_t v25;
  unint64_t v26;
  const char *v27;
  const char *v28;
  unint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  uint64_t v33;
  id v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  id v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;

  v4 = type metadata accessor for UUID(0);
  v69 = *(_QWORD *)(v4 - 8);
  v70 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  __chkstk_darwin(v7);
  v71 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v62 - v15;
  result = (id)MobileGestalt_get_current_device(v14, v17);
  if (!result)
  {
    __break(1u);
    goto LABEL_30;
  }
  v19 = result;
  wapiCapability = MobileGestalt_get_wapiCapability();

  result = (id)MobileGestalt_get_current_device(v21, v22);
  if (!result)
  {
LABEL_30:
    __break(1u);
    return result;
  }
  v23 = result;
  cellularDataCapability = MobileGestalt_get_cellularDataCapability();

  v68 = a2;
  if (!a1)
  {
    if (wapiCapability)
    {
      if ((cellularDataCapability & 1) != 0)
        goto LABEL_10;
LABEL_20:
      v28 = "Connect to WLAN to Play Music";
      goto LABEL_21;
    }
    if ((cellularDataCapability & 1) != 0)
    {
LABEL_15:
      v26 = 0xD00000000000002ALL;
      v27 = "Connect to Wi-Fi or Cellular to Play Music";
      goto LABEL_23;
    }
LABEL_22:
    v26 = 0xD00000000000001ELL;
    v27 = "Connect to Wi-Fi to Play Music";
    goto LABEL_23;
  }
  objc_opt_self(MPModelRadioStation);
  v25 = swift_dynamicCastObjCClass(a1);
  if (!wapiCapability)
  {
    if (cellularDataCapability)
    {
      if (v25)
      {
        v26 = 0xD00000000000002ALL;
        v27 = "Connect to Wi-Fi or Cellular to Play Radio";
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v25)
    {
      v26 = 0xD00000000000001ELL;
      v27 = "Connect to Wi-Fi to Play Radio";
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (cellularDataCapability)
  {
    if (v25)
    {
      v26 = 0xD000000000000029;
      v27 = "Connect to WLAN or Cellular to Play Radio";
LABEL_23:
      v29 = (unint64_t)(v27 - 32) | 0x8000000000000000;
      goto LABEL_24;
    }
LABEL_10:
    v26 = 0xD000000000000029;
    v27 = "Connect to WLAN or Cellular to Play Music";
    goto LABEL_23;
  }
  if (!v25)
    goto LABEL_20;
  v28 = "Connect to WLAN to Play Radio";
LABEL_21:
  v29 = (unint64_t)(v28 - 32) | 0x8000000000000000;
  v26 = 0xD00000000000001DLL;
LABEL_24:
  String.LocalizationValue.init(stringLiteral:)(v26, v29);
  v30 = v10;
  v31 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v32 = v13;
  v31(v13, v16, v9);
  if (qword_10048C570 != -1)
    swift_once(&qword_10048C570, sub_10000AD54);
  v33 = qword_1004A1DA0;
  v34 = (id)qword_1004A1DA0;
  v35 = v71;
  static Locale.current.getter(v34);
  v36 = String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, v33, v35, 0, 0, 256);
  v62 = v37;
  v63 = v36;
  v38 = *(void (**)(char *, uint64_t))(v30 + 8);
  v38(v16, v9);
  String.LocalizationValue.init(stringLiteral:)(0x73676E6974746553, 0xE800000000000000);
  v31(v13, v16, v9);
  if (qword_10048C570 != -1)
    swift_once(&qword_10048C570, sub_10000AD54);
  v39 = qword_1004A1DA0;
  v40 = (id)qword_1004A1DA0;
  v41 = v71;
  static Locale.current.getter(v40);
  v42 = String.init(localized:table:bundle:locale:comment:)(v32, 0, 0, v39, v41, 0, 0, 256);
  v66 = v43;
  v67 = v42;
  v38(v16, v9);
  v44 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v45 = UUID.uuidString.getter(v44);
  v64 = v46;
  v65 = v45;
  v47 = v70;
  v48 = *(void (**)(char *, uint64_t))(v69 + 8);
  v48(v6, v70);
  String.LocalizationValue.init(stringLiteral:)(19279, 0xE200000000000000);
  v31(v32, v16, v9);
  v49 = qword_1004A1DA0;
  static Locale.current.getter((id)qword_1004A1DA0);
  v50 = String.init(localized:table:bundle:locale:comment:)(v32, 0, 0, v49, v41, 0, 0, 256);
  v52 = v51;
  v38(v16, v9);
  v53 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v54 = UUID.uuidString.getter(v53);
  v56 = v55;
  v48(v6, v47);
  v57 = sub_100005574(&qword_100493240);
  result = (id)swift_allocObject(v57, 144, 7);
  *((_OWORD *)result + 1) = xmmword_100384A60;
  v58 = v64;
  *((_QWORD *)result + 4) = v65;
  *((_QWORD *)result + 5) = v58;
  v59 = v66;
  *((_QWORD *)result + 6) = v67;
  *((_QWORD *)result + 7) = v59;
  *((_BYTE *)result + 64) = 2;
  *((_QWORD *)result + 9) = &unk_100491780;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 11) = v54;
  *((_QWORD *)result + 12) = v56;
  *((_QWORD *)result + 13) = v50;
  *((_QWORD *)result + 14) = v52;
  *((_BYTE *)result + 120) = 2;
  *((_QWORD *)result + 16) = 0;
  *((_QWORD *)result + 17) = 0;
  v60 = v68;
  v61 = v62;
  *v68 = v63;
  v60[1] = v61;
  v60[2] = 0;
  v60[3] = 0;
  *((_BYTE *)v60 + 32) = 0;
  v60[5] = (uint64_t)result;
  v60[6] = 0;
  return result;
}

uint64_t sub_1000DFFDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v2 = type metadata accessor for UUID(0);
  v37 = *(_QWORD *)(v2 - 8);
  v38 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Locale(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for String.LocalizationValue(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v34 - v13;
  String.LocalizationValue.init(stringLiteral:)(0xD000000000000024, 0x80000001003B08E0);
  v15 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v15(v12, v14, v8);
  if (qword_10048C570 != -1)
    swift_once(&qword_10048C570, sub_10000AD54);
  v16 = qword_1004A1DA0;
  static Locale.current.getter((id)qword_1004A1DA0);
  v17 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v16, v7, 0, 0, 256);
  v35 = v18;
  v36 = v17;
  v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v14, v8);
  String.LocalizationValue.init(stringLiteral:)(0xD000000000000057, 0x80000001003B0910);
  v15(v12, v14, v8);
  v20 = qword_1004A1DA0;
  static Locale.current.getter((id)qword_1004A1DA0);
  v21 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v20, v7, 0, 0, 256);
  v23 = v22;
  v19(v14, v8);
  v24 = sub_100005574(&qword_100493240);
  v25 = swift_allocObject(v24, 88, 7);
  *(_OWORD *)(v25 + 16) = xmmword_100384A80;
  if (qword_10048CE50 != -1)
    swift_once(&qword_10048CE50, sub_1001ECBE8);
  v26 = static String.cancelButtonTitle;
  v27 = qword_1004A2C90;
  swift_bridgeObjectRetain();
  v28 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v29 = UUID.uuidString.getter(v28);
  v31 = v30;
  result = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v4, v38);
  *(_QWORD *)(v25 + 32) = v29;
  *(_QWORD *)(v25 + 40) = v31;
  *(_QWORD *)(v25 + 48) = v26;
  *(_QWORD *)(v25 + 56) = v27;
  *(_BYTE *)(v25 + 64) = 2;
  *(_QWORD *)(v25 + 72) = 0;
  *(_QWORD *)(v25 + 80) = 0;
  v33 = v35;
  *(_QWORD *)a1 = v36;
  *(_QWORD *)(a1 + 8) = v33;
  *(_QWORD *)(a1 + 16) = v21;
  *(_QWORD *)(a1 + 24) = v23;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v25;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

unint64_t sub_1000E02B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100491790;
  if (!qword_100491790)
  {
    v1 = objc_opt_self(MPModelStaticAsset);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100491790);
  }
  return result;
}

uint64_t sub_1000E02F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000E0354()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_1004917A4);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10000F894;
  return sub_1000D6B3C(v3);
}

uint64_t sub_1000E03B8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000E03DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_1004917B4);
  v3 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_10000F894;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch(sub_1000D6A00, 0, 0);
}

uint64_t sub_1000E043C()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD);

  v2 = *(int **)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_1004917C4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10000EA88;
  v6 = (uint64_t (*)(_QWORD))((char *)v2 + *v2);
  v4 = (_QWORD *)swift_task_alloc(v2[1]);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_10000F894;
  return v6(0);
}

uint64_t sub_1000E04C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1004917D4);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10000F894;
  v4[2] = v2;
  v4[3] = v3;
  return swift_task_switch(sub_1000D665C, 0, 0);
}

uint64_t sub_1000E0524()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000E0550()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1004917E4);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10000F894;
  v4[2] = v2;
  v4[3] = v3;
  return swift_task_switch(sub_1000D66B0, 0, 0);
}

uint64_t sub_1000E05B0()
{
  uint64_t v0;

  sub_10000682C((_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000E05DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0 + 16;
  v3 = *(_QWORD *)(v0 + 56);
  v4 = (_QWORD *)swift_task_alloc(dword_1004917F4);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10000F894;
  v4[3] = v2;
  v4[4] = v3;
  return swift_task_switch(sub_1000D6744, 0, 0);
}

uint64_t UInt32.formatName.getter(int a1)
{
  OSStatus Property;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  UInt32 ioPropertyDataSize;
  uint64_t inSpecifier;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  id outPropertyData;

  inSpecifier = 0;
  v13 = 0;
  v15 = 0;
  v14 = 0;
  v16 = 0;
  v12 = a1;
  if (a1 == 1634492771)
    return 1128352833;
  outPropertyData = 0;
  ioPropertyDataSize = 8;
  Property = AudioFormatGetProperty(0x666E616Du, 0x28u, &inSpecifier, &ioPropertyDataSize, &outPropertyData);
  v3 = outPropertyData;
  if (Property != noErr.getter() && v3)
    return String.init(_:)(v3)._countAndFlagsBits;
  if (qword_10048C778 != -1)
    swift_once(&qword_10048C778, sub_1000F03BC);
  v5 = type metadata accessor for Logger(0, v4);
  v6 = sub_1000086B4(v5, (uint64_t)static Logger.audioFormat);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 67109120;
    *(_DWORD *)(v9 + 4) = Property;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "AudioFormatGetProperty kAudioFormatProperty_FormatName error: %d", (uint8_t *)v9, 8u);
    swift_slowDealloc(v9, -1, -1);
  }

  return 0;
}

_QWORD *sub_1000E07F0()
{
  _QWORD *result;

  result = sub_1000E080C();
  static Datavault.music = (uint64_t)result;
  return result;
}

_QWORD *sub_1000E080C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  id v18;
  NSString v19;
  id v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  _QWORD *v33;
  char *v35;
  _QWORD v36[3];

  v0 = sub_100005574(&qword_100491848);
  __chkstk_darwin(v0);
  v35 = (char *)&v36[-1] - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100005574(&qword_10048D510);
  __chkstk_darwin(v2);
  v4 = (char *)&v36[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v36[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v36[-1] - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v36[-1] - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v36[-1] - v16;
  v18 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v19 = String._bridgeToObjectiveC()();
  v20 = objc_msgSend(v18, "containerURLForSecurityApplicationGroupIdentifier:", v19);

  if (!v20)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_5;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v20);

  v21 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v21(v4, v15, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_5:
    sub_10000DD40((uint64_t)v4);
    return 0;
  }
  v22 = v6;
  v23 = v17;
  v21(v17, v4, v5);
  v24 = v12;
  URL.appendingPathComponent(_:isDirectory:)(0x6C75617661746164, 0xE900000000000074, 1);
  type metadata accessor for Datavault(0);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v12, v5);
  v25 = Datavault.__allocating_init(url:storageClass:)((uint64_t)v9, 0x707041636973754DLL, 0xE800000000000000);
  v33 = v25;
  if (qword_10048C750 != -1)
    swift_once(&qword_10048C750, sub_1000E1088);
  v27 = type metadata accessor for Logger(0, v26);
  v28 = sub_1000086B4(v27, (uint64_t)qword_100491830);
  v29 = *(_QWORD *)(v27 - 8);
  v30 = (uint64_t)v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v35, v28, v27);
  v31 = *(void (**)(char *, uint64_t))(v22 + 8);
  v31(v24, v5);
  v31(v23, v5);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v29 + 56))(v30, 0, 1, v27);
  v32 = (uint64_t)v33 + OBJC_IVAR____TtC14MusicUtilities9Datavault_logger;
  swift_beginAccess((char *)v33 + OBJC_IVAR____TtC14MusicUtilities9Datavault_logger, v36, 33, 0);
  sub_1000E1100(v30, v32);
  swift_endAccess(v36);
  return v33;
}

uint64_t *Datavault.music.unsafeMutableAddressor()
{
  if (qword_10048C748 != -1)
    swift_once(&qword_10048C748, sub_1000E07F0);
  return &static Datavault.music;
}

uint64_t static Datavault.music.getter()
{
  _BYTE v1[24];

  if (qword_10048C748 != -1)
    swift_once(&qword_10048C748, sub_1000E07F0);
  swift_beginAccess(&static Datavault.music, v1, 0, 0);
  return swift_retain(static Datavault.music);
}

double static Datavault.music.setter(uint64_t a1)
{
  uint64_t v2;
  double result;
  _BYTE v4[24];

  if (qword_10048C748 != -1)
    swift_once(&qword_10048C748, sub_1000E07F0);
  swift_beginAccess(&static Datavault.music, v4, 1, 0);
  v2 = static Datavault.music;
  static Datavault.music = a1;
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

uint64_t (*static Datavault.music.modify(uint64_t a1))(_QWORD)
{
  if (qword_10048C748 != -1)
    swift_once(&qword_10048C748, sub_1000E07F0);
  swift_beginAccess(&static Datavault.music, a1, 33, 0);
  return j__swift_endAccess;
}

unint64_t sub_1000E104C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100491C10;
  if (!qword_100491C10)
  {
    v1 = objc_opt_self(NSError);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100491C10);
  }
  return result;
}

uint64_t sub_1000E1088(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for Logger(0, a2);
  sub_1000086DC(v2, qword_100491830);
  sub_1000086B4(v2, (uint64_t)qword_100491830);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001003ACFD0, 0x6C75617661746144, 0xE900000000000074);
}

uint64_t sub_1000E1100(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005574(&qword_100491848);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t NSDateComponents.lastUpdatedDateString.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v1 = sub_100005574(&qword_100490730);
  __chkstk_darwin(v1);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v21 - v9;
  v11 = type metadata accessor for DateComponents(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v0);
  v16 = static Date.now.getter(v15);
  DateComponents.date.getter(v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_1000E1474((uint64_t)v3);
    v17 = 0;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v3, v4);
    Date.lastUpdatedDateString(relativeTo:)();
    v17 = v18;
    v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v8, v4);
    v19(v10, v4);
  }
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return v17;
}

uint64_t DateComponents.lastUpdatedDateString(relativeTo:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v0 = sub_100005574(&qword_100490730);
  __chkstk_darwin(v0);
  v2 = (char *)&v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  DateComponents.date.getter(v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_1000E1474((uint64_t)v2);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v2, v3);
    Date.lastUpdatedDateString(relativeTo:)();
    v8 = v9;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  return v8;
}

uint64_t sub_1000E1474(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005574(&qword_100490730);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t DateComponents.lastUpdatedDateString.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v16;

  v0 = sub_100005574(&qword_100490730);
  __chkstk_darwin(v0);
  v2 = (char *)&v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v16 - v9;
  v11 = static Date.now.getter(v8);
  DateComponents.date.getter(v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_1000E1474((uint64_t)v2);
    v12 = 0;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v3);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v2, v3);
    Date.lastUpdatedDateString(relativeTo:)();
    v12 = v13;
    v14 = *(void (**)(char *, uint64_t))(v4 + 8);
    v14(v7, v3);
    v14(v10, v3);
  }
  return v12;
}

void Date.lastUpdatedDateString(relativeTo:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  double v14;
  double v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  Swift::String v22;
  unint64_t v23;
  double v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;

  v1 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for String.LocalizationValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v31 - v12;
  v14 = Date.timeIntervalSince(_:)(v0);
  if (v14 <= 0.0)
    return;
  if (v14 < 3600.0)
  {
    v15 = v14 / 60.0;
    if ((~*(_QWORD *)&v15 & 0x7FF0000000000000) != 0)
    {
      if (v15 > -9.22337204e18)
      {
        if (v15 < 9.22337204e18)
        {
          v16 = (uint64_t)v15;
          if (!(uint64_t)v15)
          {
            String.LocalizationValue.init(stringLiteral:)(0x647055207473754ALL, 0xEC00000064657461);
            goto LABEL_21;
          }
          String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(13, 1);
          v17._countAndFlagsBits = 0x2064657461647055;
          v17._object = (void *)0xE800000000000000;
          String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v17);
          v32 = v16;
          String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v32, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
          v18 = 9;
          goto LABEL_8;
        }
        goto LABEL_34;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v14 >= 86400.0)
  {
    if (v14 >= 604800.0)
    {
      if (v14 >= 2592000.0)
        return;
      v28 = v14 / 604800.0;
      if ((~*(_QWORD *)&v28 & 0x7FF0000000000000) != 0)
      {
        if (v28 > -9.22337204e18)
        {
          if (v28 < 9.22337204e18)
          {
            v29 = (uint64_t)v28;
            String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(13, 1);
            v30._countAndFlagsBits = 0x2064657461647055;
            v30._object = (void *)0xE800000000000000;
            String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v30);
            v32 = v29;
            String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v32, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
            v18 = 19;
LABEL_8:
            v19 = v18 | 0x6F67612064;
LABEL_19:
            v23 = 0xE500000000000000;
            goto LABEL_20;
          }
LABEL_43:
          __break(1u);
          return;
        }
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    v24 = v14 / 86400.0;
    if ((~*(_QWORD *)&v24 & 0x7FF0000000000000) != 0)
    {
      if (v24 > -9.22337204e18)
      {
        if (v24 < 9.22337204e18)
        {
          v25 = (uint64_t)v24;
          String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(13, 1);
          v26._countAndFlagsBits = 0x2064657461647055;
          v26._object = (void *)0xE800000000000000;
          String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v26);
          v32 = v25;
          String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v32, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
          v19 = 0x6F67612064;
          goto LABEL_19;
        }
        goto LABEL_40;
      }
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v20 = v14 / 3600.0;
  if ((~*(_QWORD *)&v20 & 0x7FF0000000000000) == 0)
    goto LABEL_35;
  if (v20 <= -9.22337204e18)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v20 >= 9.22337204e18)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v21 = (uint64_t)v20;
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(14, 1);
  v22._countAndFlagsBits = 0x2064657461647055;
  v22._object = (void *)0xE800000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v22);
  v32 = v21;
  String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v32, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
  v19 = 0x6F6761207268;
  v23 = 0xE600000000000000;
LABEL_20:
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&v19);
  String.LocalizationValue.init(stringInterpolation:)(v3);
LABEL_21:
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  if (qword_10048C570 != -1)
    swift_once(&qword_10048C570, sub_10000AD54);
  v27 = qword_1004A1DA0;
  static Locale.current.getter((id)qword_1004A1DA0);
  String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v27, v6, 0, 0, 256);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
}

uint64_t Date.lastUpdatedDateString.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v0 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date.now.getter(v2);
  Date.lastUpdatedDateString(relativeTo:)();
  v6 = v5;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return v6;
}

uint64_t static String.stringForTrackCountAndDuration(trackCount:duration:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  double v27;
  void (*v28)(char *, _QWORD, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;
  Swift::String v60;
  char *v61;
  uint64_t v62;
  Swift::String v63;
  Swift::String v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  id v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  _QWORD v80[2];
  _QWORD v81[2];
  _QWORD v82[3];

  v78 = a1;
  v7 = type metadata accessor for Locale(0);
  __chkstk_darwin(v7);
  v75 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  v76 = *(_QWORD *)(v9 - 8);
  v77 = v9;
  v10 = __chkstk_darwin(v9);
  v74 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v79 = (char *)&v71 - v12;
  v13 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Calendar.Component(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Calendar(0);
  v21 = __chkstk_darwin(v20);
  v24 = (char *)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = 0;
  v26 = 0;
  if ((a4 & 1) != 0)
  {
LABEL_32:
    if ((a2 & 1) != 0)
      goto LABEL_41;
    goto LABEL_33;
  }
  v27 = *(double *)&a3;
  if (*(double *)&a3 <= 0.0)
  {
    v25 = 0;
    v26 = 0;
    goto LABEL_32;
  }
  v72 = v22;
  v73 = v21;
  static Calendar.current.getter(v21);
  v28 = *(void (**)(char *, _QWORD, uint64_t))(v17 + 104);
  v28(v19, enum case for Calendar.Component.second(_:), v16);
  Calendar.maximumRange(of:)(v19);
  v30 = v29;
  v32 = v31;
  v33 = *(void (**)(char *, uint64_t))(v17 + 8);
  v33(v19, v16);
  if ((v32 & 1) != 0)
    goto LABEL_28;
  v28(v19, enum case for Calendar.Component.minute(_:), v16);
  Calendar.maximumRange(of:)(v19);
  v35 = v34;
  v37 = v36;
  result = ((uint64_t (*)(char *, uint64_t))v33)(v19, v16);
  if ((v37 & 1) != 0)
    goto LABEL_28;
  v39 = v30 * v35;
  if ((unsigned __int128)(v30 * (__int128)v35) >> 64 != (v30 * v35) >> 63)
  {
    __break(1u);
    goto LABEL_45;
  }
  if ((~a3 & 0x7FF0000000000000) == 0)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (*(double *)&a3 <= -9.22337204e18)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (*(double *)&a3 >= 9.22337204e18)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (!v39)
  {
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v40 = (uint64_t)*(double *)&a3;
  if ((uint64_t)*(double *)&a3 == 0x8000000000000000 && v39 == -1)
    goto LABEL_55;
  v41 = v40 / v39 * v39;
  if ((unsigned __int128)(v40 / v39 * (__int128)v39) >> 64 != v41 >> 63)
    goto LABEL_49;
  v42 = v40 % v39;
  if (__OFSUB__(v40, v41))
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (!v30)
  {
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v42 == 0x8000000000000000 && v30 == -1)
    goto LABEL_56;
  v44 = v42 / v30;
  v45 = v42 / v30 * v30;
  if ((unsigned __int128)(v44 * (__int128)v30) >> 64 != v45 >> 63)
    goto LABEL_52;
  v46 = __OFADD__(v41, v45);
  v47 = v41 + v45;
  if (v46)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  v46 = __OFSUB__(v40, v47);
  v48 = v40 - v47;
  if (v46)
  {
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  if (v30 >= 0)
    v49 = v30;
  else
    v49 = v30 + 1;
  if (v48 < v49 >> 1)
  {
LABEL_28:
    v51 = objc_msgSend((id)*NSDateFormatter.collectionsDurationFormatter.unsafeMutableAddressor(), "stringFromTimeInterval:", v27);
    v26 = v51;
    if (v51)
    {
      v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
      v54 = v53;

      v82[0] = v52;
      v82[1] = v54;
      v81[0] = 44;
      v81[1] = 0xE100000000000000;
      v80[0] = 0;
      v80[1] = 0xE000000000000000;
      v55 = sub_10000D478();
      v25 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v81, v80, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v55, v55, v55);
      v26 = v56;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v72 + 8))(v24, v73);
      if ((a2 & 1) != 0)
      {
LABEL_41:
        if (v26)
          return v25;
        return 0;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v72 + 8))(v24, v73);
      v25 = 0;
      if ((a2 & 1) != 0)
        goto LABEL_41;
    }
LABEL_33:
    if (v26)
    {
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(10, 2);
      v57._countAndFlagsBits = 0;
      v57._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v57);
      v82[0] = v78;
      String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(v82, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
      v58._countAndFlagsBits = 0x297328676E6F7320;
      v58._object = (void *)0xEA0000000000202CLL;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v58);
      v59._countAndFlagsBits = v25;
      v59._object = v26;
      String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v59);
      swift_bridgeObjectRelease();
      v60._countAndFlagsBits = 0;
      v60._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v60);
      v61 = v79;
    }
    else
    {
      v62 = v78;
      v61 = v79;
      if (v78 < 1)
        return 0;
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(8, 1);
      v63._countAndFlagsBits = 0;
      v63._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v63);
      v82[0] = v62;
      String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(v82, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
      v64._countAndFlagsBits = 0x297328676E6F7320;
      v64._object = (void *)0xE800000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v64);
    }
    String.LocalizationValue.init(stringInterpolation:)(v15);
    v66 = v76;
    v65 = v77;
    v67 = v74;
    (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v74, v61, v77);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v68 = qword_1004A1DA0;
    v69 = (id)qword_1004A1DA0;
    v70 = v75;
    static Locale.current.getter(v69);
    v25 = String.init(localized:table:bundle:locale:comment:)(v67, 0, 0, v68, v70, 0, 0, 256);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v61, v65);
    return v25;
  }
  v46 = __OFSUB__(v30, v48);
  v50 = v30 - v48;
  if (!v46)
  {
    v27 = *(double *)&a3 + (double)v50;
    goto LABEL_28;
  }
LABEL_57:
  __break(1u);
  return result;
}

uint64_t NSFileManager.musicAppGroupCachesURL.getter@<X0>(uint64_t a1@<X8>)
{
  return NSFileManager.groupCacheURL(for:)(a1);
}

Swift::Void __swiftcall LSApplicationWorkspace.openSettings()()
{
  sub_1000E21D0(0x3A7366657270, 0xE600000000000000);
}

Swift::Void __swiftcall LSApplicationWorkspace.openRestrictions()()
{
  sub_1000E21D0(0xD00000000000002BLL, 0x80000001003B14F0);
}

uint64_t sub_1000E21D0(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  NSURL *v14;
  void *v15;
  void *v16;
  Class isa;
  uint64_t v18;

  v5 = v2;
  v6 = sub_100005574(&qword_10048D510);
  __chkstk_darwin(v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.init(string:)(a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100008758((uint64_t)v8, &qword_10048D510);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
  URL._bridgeToObjectiveC()(v14);
  v16 = v15;
  sub_100098D5C((uint64_t)_swiftEmptyArrayStorage);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v5, "openSensitiveURL:withOptions:", v16, isa);

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

Swift::Void __swiftcall LSApplicationWorkspace.openAudioQuality()()
{
  sub_1000E21D0(0xD000000000000032, 0x80000001003B1520);
}

Swift::Void __swiftcall LSApplicationWorkspace.openAtmos()()
{
  sub_1000E21D0(0xD00000000000002BLL, 0x80000001003B1560);
}

Swift::Void __swiftcall LSApplicationWorkspace.openMusicSettings()()
{
  sub_1000E21D0(0xD000000000000025, 0x80000001003B1590);
}

Swift::Void __swiftcall LSApplicationWorkspace.openAccountSettings()()
{
  sub_1000E21D0(0xD000000000000018, 0x80000001003B15C0);
}

Swift::Bool __swiftcall LSApplicationWorkspace.openNotificationSettings()()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unsigned __int8 v9;
  NSURL *v10;
  void *v11;
  void *v12;
  Class isa;
  uint64_t v15;

  v1 = v0;
  v2 = sub_100005574(&qword_10048D510);
  __chkstk_darwin(v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.init(string:)(0xD000000000000030, 0x80000001003B15E0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100008758((uint64_t)v4, &qword_10048D510);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    URL._bridgeToObjectiveC()(v10);
    v12 = v11;
    sub_100098D5C((uint64_t)_swiftEmptyArrayStorage);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v9 = objc_msgSend(v1, "openSensitiveURL:withOptions:", v12, isa);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return v9;
}

Swift::Void __swiftcall LSApplicationWorkspace.openMusicHapticsSettings()()
{
  sub_1000E21D0(0xD00000000000002ALL, 0x80000001003B1620);
}

uint64_t LSApplicationWorkspace.openiTunesStore(with:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t, uint64_t);
  id v24;
  id v25;
  void *v26;
  NSString v27;
  id v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  NSURL *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  Class isa;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  id v54;
  uint64_t v55;
  char *v56;
  id v57;
  char *v58;
  char *v59;
  uint64_t v60;
  id v61;
  _QWORD *v62;

  v4 = type metadata accessor for URLComponents(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v58 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005574(&qword_10048D510);
  v8 = __chkstk_darwin(v7);
  v59 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v52 - v10;
  v12 = type metadata accessor for URL(0);
  v60 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v56 = (char *)&v52 - v16;
  v17 = sub_100005574(&qword_1004912C0);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v52 - v21;
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v24 = (id)v23((char *)&v52 - v21, 1, 1, v4);
  if (a1)
  {
    v24 = objc_msgSend(a1, "universalStore");
    if (v24)
    {
      v25 = v24;
      v55 = a2;
      v53 = objc_msgSend(v24, "adamID");
      swift_unknownObjectRelease(v25);
      if (qword_10048C720 != -1)
        swift_once(&qword_10048C720, sub_1000C378C);
      sub_100005574(&qword_100490BA0);
      UnfairLock.locked<A>(_:)((void (*)(void))sub_10000D460);
      v26 = v62;
      a2 = v55;
      if (v62)
      {
        v27 = String._bridgeToObjectiveC()();
        v54 = v26;
        v28 = objc_msgSend(v26, "urlForBagKey:", v27);

        if (v28)
        {
          static URL._unconditionallyBridgeFromObjectiveC(_:)(v28);

          v29 = v60;
          v30 = *(void (**)(char *, char *, uint64_t))(v60 + 32);
          v30(v11, v15, v12);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v11, 0, 1, v12);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v11, 1, v12) != 1)
          {
            v31 = v56;
            v30(v56, v11, v12);
            URLComponents.init(url:resolvingAgainstBaseURL:)(v31, 0);
            sub_1000E2BE4((uint64_t)v20, (uint64_t)v22);
            v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
            v33 = v32(v22, 1, v4);
            if ((_DWORD)v33 || (v34 = (_QWORD *)URLComponents.queryItems.getter(v33)) == 0)
            {
              swift_bridgeObjectRelease();
              v34 = _swiftEmptyArrayStorage;
            }
            v37 = v60;
            v62 = v34;
            v47 = sub_100005574(&qword_10048E830);
            v48 = type metadata accessor for URLQueryItem(0);
            v49 = swift_allocObject(v47, ((*(unsigned __int8 *)(*(_QWORD *)(v48 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v48 - 8) + 80))+ 2 * *(_QWORD *)(*(_QWORD *)(v48 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v48 - 8) + 80) | 7);
            *(_OWORD *)(v49 + 16) = xmmword_100384A60;
            v61 = v53;
            v50 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
            URLQueryItem.init(name:value:)(25705, 0xE200000000000000, v50, v51);
            swift_bridgeObjectRelease();
            URLQueryItem.init(name:value:)(7368801, 0xE300000000000000, 0x73656E757469, 0xE600000000000000);
            sub_10008A83C(v49);
            if (v32(v22, 1, v4))
            {

              swift_bridgeObjectRelease();
            }
            else
            {
              URLComponents.queryItems.setter(v62);

            }
            a2 = v55;
            v36 = (uint64_t)v59;
            (*(void (**)(char *, uint64_t))(v37 + 8))(v56, v12);
            goto LABEL_16;
          }
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v60 + 56))(v11, 1, 1, v12);
        }

        v24 = (id)sub_100008758((uint64_t)v11, &qword_10048D510);
        a2 = v55;
      }
    }
  }
  URLComponents.init()(v24);
  v23(v20, 0, 1, v4);
  sub_1000E2BE4((uint64_t)v20, (uint64_t)v22);
  v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (!v32(v22, 1, v4))
    URLComponents.scheme.setter(0x73736D7469, 0xE500000000000000);
  v35 = v32(v22, 1, v4);
  v36 = (uint64_t)v59;
  v37 = v60;
  if (!v35)
    URLComponents.host.setter(0, 0xE000000000000000);
LABEL_16:
  if (v32(v22, 1, v4))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56))(v36, 1, 1, v12);
  }
  else
  {
    v38 = v58;
    v39 = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 16))(v58, v22, v4);
    URLComponents.url.getter(v39);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v38, v4);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v36, 1, v12) != 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(a2, v36, v12);
      URL._bridgeToObjectiveC()(v42);
      v44 = v43;
      sub_100098D5C((uint64_t)_swiftEmptyArrayStorage);
      v45 = a2;
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v57, "openSensitiveURL:withOptions:", v44, isa);

      a2 = v45;
      v40 = 0;
      goto LABEL_20;
    }
  }
  sub_100008758(v36, &qword_10048D510);
  v40 = 1;
LABEL_20:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56))(a2, v40, 1, v12);
  return sub_100008758((uint64_t)v22, &qword_1004912C0);
}

uint64_t sub_1000E2BE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005574(&qword_1004912C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t LSApplicationWorkspace.openiTunesStore(with:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  NSString v26;
  id v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  NSURL *v46;
  void *v47;
  void *v48;
  Class isa;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;

  v57 = a1;
  v1 = type metadata accessor for URLComponents(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v55 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100005574(&qword_10048D510);
  v5 = __chkstk_darwin(v4);
  v56 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v50 - v7;
  v9 = type metadata accessor for URL(0);
  v59 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v54 = (char *)&v50 - v13;
  v14 = sub_100005574(&qword_1004912C0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v50 - v18;
  v58 = v2;
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
  v21 = v20((char *)&v50 - v18, 1, 1, v1);
  v22 = Album.catalogID.getter(v21);
  if (v23)
  {
    v24 = v23;
    v51 = v22;
    if (qword_10048C720 != -1)
      swift_once(&qword_10048C720, sub_1000C378C);
    sub_100005574(&qword_100490BA0);
    UnfairLock.locked<A>(_:)((void (*)(void))sub_10000D460);
    v25 = v60;
    if (v60)
    {
      v26 = String._bridgeToObjectiveC()();
      v52 = v25;
      v27 = objc_msgSend(v25, "urlForBagKey:", v26);

      if (v27)
      {
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v27);

        v28 = v59;
        v29 = *(void (**)(char *, char *, uint64_t))(v59 + 32);
        v29(v8, v12, v9);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v8, 0, 1, v9);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v8, 1, v9) != 1)
        {
          v30 = v54;
          v29(v54, v8, v9);
          URLComponents.init(url:resolvingAgainstBaseURL:)(v30, 0);
          sub_1000E2BE4((uint64_t)v17, (uint64_t)v19);
          v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 48);
          v32 = v31(v19, 1, v1);
          if ((_DWORD)v32 || (v33 = (_QWORD *)URLComponents.queryItems.getter(v32)) == 0)
          {
            swift_bridgeObjectRelease();
            v33 = _swiftEmptyArrayStorage;
          }
          v37 = (uint64_t)v56;
          v36 = v57;
          v60 = v33;
          v39 = sub_100005574(&qword_10048E830);
          v40 = type metadata accessor for URLQueryItem(0);
          v41 = swift_allocObject(v39, ((*(unsigned __int8 *)(*(_QWORD *)(v40 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v40 - 8) + 80))+ 2 * *(_QWORD *)(*(_QWORD *)(v40 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v40 - 8) + 80) | 7);
          *(_OWORD *)(v41 + 16) = xmmword_100384A60;
          URLQueryItem.init(name:value:)(25705, 0xE200000000000000, v51, v24);
          swift_bridgeObjectRelease();
          URLQueryItem.init(name:value:)(7368801, 0xE300000000000000, 0x73656E757469, 0xE600000000000000);
          sub_10008A83C(v41);
          if (v31(v19, 1, v1))
          {

            swift_bridgeObjectRelease();
          }
          else
          {
            URLComponents.queryItems.setter(v60);

          }
          v38 = v59;
          (*(void (**)(char *, uint64_t))(v59 + 8))(v54, v9);
          v34 = v58;
          goto LABEL_21;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v59 + 56))(v8, 1, 1, v9);
      }

      swift_bridgeObjectRelease();
      v22 = sub_100008758((uint64_t)v8, &qword_10048D510);
    }
    else
    {
      v22 = swift_bridgeObjectRelease();
    }
  }
  URLComponents.init()(v22);
  v20(v17, 0, 1, v1);
  sub_1000E2BE4((uint64_t)v17, (uint64_t)v19);
  v34 = v58;
  v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 48);
  if (!v31(v19, 1, v1))
    URLComponents.scheme.setter(0x73736D7469, 0xE500000000000000);
  v35 = v31(v19, 1, v1);
  v37 = (uint64_t)v56;
  v36 = v57;
  v38 = v59;
  if (!v35)
    URLComponents.host.setter(0, 0xE000000000000000);
LABEL_21:
  if (v31(v19, 1, v1))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56))(v37, 1, 1, v9);
  }
  else
  {
    v42 = v55;
    v43 = (*(uint64_t (**)(char *, char *, uint64_t))(v34 + 16))(v55, v19, v1);
    URLComponents.url.getter(v43);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v42, v1);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v37, 1, v9) != 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v36, v37, v9);
      URL._bridgeToObjectiveC()(v46);
      v48 = v47;
      sub_100098D5C((uint64_t)_swiftEmptyArrayStorage);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v53, "openSensitiveURL:withOptions:", v48, isa);

      v44 = 0;
      goto LABEL_25;
    }
  }
  sub_100008758(v37, &qword_10048D510);
  v44 = 1;
LABEL_25:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56))(v36, v44, 1, v9);
  return sub_100008758((uint64_t)v19, &qword_1004912C0);
}

Swift::Void __swiftcall LSApplicationWorkspace.openMusic(tabIdentifier:)(MusicCore::TabIdentifier_optional tabIdentifier)
{
  void *v1;
  void *v2;
  int value;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  NSURL *v12;
  void *v13;
  void *v14;
  Class isa;
  _QWORD v16[4];

  v2 = v1;
  value = tabIdentifier.value;
  v5 = sub_100005574(&qword_10048D510);
  __chkstk_darwin(v5);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[2] = 0x2F2F3A636973756DLL;
  v16[3] = 0xE800000000000000;
  if (value != 6)
  {
    v16[0] = 0x6261743F2F626174;
    v16[1] = 0xE90000000000003DLL;
    __asm { BR              X11 }
  }
  URL.init(string:)(0x2F2F3A636973756DLL, 0xE800000000000000);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_100008758((uint64_t)v7, &qword_10048D510);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    URL._bridgeToObjectiveC()(v12);
    v14 = v13;
    sub_100098D5C((uint64_t)_swiftEmptyArrayStorage);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v2, "openSensitiveURL:withOptions:", v14, isa);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

id static MPModelPlaylistEntry.defaultMusicKind.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  id v7;
  char v8;
  uint64_t v9;
  void *v10;
  id v11;
  Class isa;
  id v13;
  char v15[16];
  __int128 v16;
  uint64_t v17;

  v0 = sub_100005574((uint64_t *)&unk_100491910);
  v1 = swift_allocObject(v0, 56, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100384B00;
  *(_QWORD *)(v1 + 32) = objc_msgSend((id)objc_opt_self(MPModelSong), "kindWithVariants:", 7);
  v2 = (void *)objc_opt_self(NSUserDefaults);
  v3 = objc_msgSend(v2, "standardUserDefaults");
  strcpy(v15, "showAllTVShows");
  v15[15] = -18;
  v4 = sub_10000D478();
  NSUserDefaults.subscript.getter((uint64_t)v15, (uint64_t)&type metadata for String, v4, &v16);
  if (!v17)
  {
    sub_100098B58((uint64_t)&v16);
    goto LABEL_6;
  }
  if ((swift_dynamicCast(v15, &v16, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) == 0)
  {
LABEL_6:

    goto LABEL_7;
  }
  v5 = v15[0];

  if ((v5 & 1) != 0)
  {
    v6 = 3;
    goto LABEL_8;
  }
LABEL_7:
  v6 = 2;
LABEL_8:
  *(_QWORD *)(v1 + 40) = objc_msgSend((id)objc_opt_self(MPModelTVEpisode), "kindWithVariants:", v6);
  v7 = objc_msgSend(v2, "standardUserDefaults");
  strcpy(v15, "showAllTVShows");
  v15[15] = -18;
  NSUserDefaults.subscript.getter((uint64_t)v15, (uint64_t)&type metadata for String, v4, &v16);
  if (!v17)
  {
    sub_100098B58((uint64_t)&v16);
    goto LABEL_13;
  }
  if ((swift_dynamicCast(v15, &v16, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) == 0)
  {
LABEL_13:

    goto LABEL_14;
  }
  v8 = v15[0];

  if ((v8 & 1) == 0)
  {
LABEL_14:
    v9 = 2;
    goto LABEL_15;
  }
  v9 = 3;
LABEL_15:
  v10 = (void *)objc_opt_self(MPModelPlaylistEntry);
  v11 = objc_msgSend((id)objc_opt_self(MPModelMovie), "kindWithVariants:", v9);
  *(_QWORD *)(v1 + 48) = v11;
  *(_QWORD *)&v16 = v1;
  specialized Array._endMutation()(v11);
  sub_100005574((uint64_t *)&unk_100491290);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v13 = objc_msgSend(v10, "kindWithKinds:", isa);

  return v13;
}

void *MPModelObject.isCloudLibraryRequired.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *result;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_opt_self(MPModelSong);
  result = (void *)swift_dynamicCastObjCClass(v0, v1);
  if (result)
    return (void *)(objc_msgSend(result, "isLibraryAdded") ^ 1);
  v3 = objc_opt_self(MPModelAlbum);
  result = (void *)swift_dynamicCastObjCClass(v0, v3);
  if (result)
    return (void *)(objc_msgSend(result, "isLibraryAdded") ^ 1);
  v4 = objc_opt_self(MPModelPlaylist);
  result = (void *)swift_dynamicCastObjCClass(v0, v4);
  if (result)
    return (void *)(objc_msgSend(result, "isLibraryAdded") ^ 1);
  return result;
}

id static MPModelPlaylist.defaultMusicKind.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  id v7;
  char v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  Class isa;
  id v14;
  id v15;
  char v17[16];
  __int128 v18;
  uint64_t v19;

  v0 = sub_100005574((uint64_t *)&unk_100491910);
  v1 = swift_allocObject(v0, 56, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100384B00;
  *(_QWORD *)(v1 + 32) = objc_msgSend((id)objc_opt_self(MPModelSong), "kindWithVariants:", 7);
  v2 = (void *)objc_opt_self(NSUserDefaults);
  v3 = objc_msgSend(v2, "standardUserDefaults");
  strcpy(v17, "showAllTVShows");
  v17[15] = -18;
  v4 = sub_10000D478();
  NSUserDefaults.subscript.getter((uint64_t)v17, (uint64_t)&type metadata for String, v4, &v18);
  if (!v19)
  {
    sub_100098B58((uint64_t)&v18);
    goto LABEL_6;
  }
  if ((swift_dynamicCast(v17, &v18, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) == 0)
  {
LABEL_6:

    goto LABEL_7;
  }
  v5 = v17[0];

  if ((v5 & 1) != 0)
  {
    v6 = 3;
    goto LABEL_8;
  }
LABEL_7:
  v6 = 2;
LABEL_8:
  *(_QWORD *)(v1 + 40) = objc_msgSend((id)objc_opt_self(MPModelTVEpisode), "kindWithVariants:", v6);
  v7 = objc_msgSend(v2, "standardUserDefaults");
  strcpy(v17, "showAllTVShows");
  v17[15] = -18;
  NSUserDefaults.subscript.getter((uint64_t)v17, (uint64_t)&type metadata for String, v4, &v18);
  if (!v19)
  {
    sub_100098B58((uint64_t)&v18);
    goto LABEL_13;
  }
  if ((swift_dynamicCast(v17, &v18, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) == 0)
  {
LABEL_13:

    goto LABEL_14;
  }
  v8 = v17[0];

  if ((v8 & 1) == 0)
  {
LABEL_14:
    v9 = 2;
    goto LABEL_15;
  }
  v9 = 3;
LABEL_15:
  v10 = (void *)objc_opt_self(MPModelPlaylist);
  v11 = (void *)objc_opt_self(MPModelPlaylistEntry);
  v12 = objc_msgSend((id)objc_opt_self(MPModelMovie), "kindWithVariants:", v9);
  *(_QWORD *)(v1 + 48) = v12;
  *(_QWORD *)&v18 = v1;
  specialized Array._endMutation()(v12);
  sub_100005574((uint64_t *)&unk_100491290);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v11, "kindWithKinds:", isa);

  v15 = objc_msgSend(v10, "kindWithPlaylistEntryKind:options:", v14, 0);
  return v15;
}

id static MPModelTVEpisode.defaultMusicKind.getter()
{
  return sub_1000E3AD0(MPModelTVEpisode_ptr);
}

id static MPModelMovie.defaultMusicKind.getter()
{
  return sub_1000E3AD0(MPModelMovie_ptr);
}

id sub_1000E3AD0(_QWORD *a1)
{
  id v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  char v7[16];
  __int128 v8;
  uint64_t v9;

  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  strcpy(v7, "showAllTVShows");
  v7[15] = -18;
  v3 = sub_10000D478();
  NSUserDefaults.subscript.getter((uint64_t)v7, (uint64_t)&type metadata for String, v3, &v8);
  if (!v9)
  {
    sub_100098B58((uint64_t)&v8);
    goto LABEL_6;
  }
  if ((swift_dynamicCast(v7, &v8, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) == 0)
  {
LABEL_6:

    goto LABEL_7;
  }
  v4 = v7[0];

  if ((v4 & 1) == 0)
  {
LABEL_7:
    v5 = 2;
    return objc_msgSend((id)objc_opt_self(*a1), "kindWithVariants:", v5);
  }
  v5 = 3;
  return objc_msgSend((id)objc_opt_self(*a1), "kindWithVariants:", v5);
}

id static MPModelArtist.defaultMusicKind.getter()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  id v4;

  v0 = (void *)objc_opt_self(MPModelArtist);
  v1 = (void *)objc_opt_self(MPModelAlbum);
  v2 = objc_msgSend((id)objc_opt_self(MPModelSong), "kindWithVariants:", 3);
  v3 = objc_msgSend(v1, "kindWithSongKind:", v2);

  v4 = objc_msgSend(v0, "kindWithAlbumKind:", v3);
  return v4;
}

id static MPModelAlbum.defaultMusicKind.getter()
{
  void *v0;
  id v1;
  id v2;

  v0 = (void *)objc_opt_self(MPModelAlbum);
  v1 = objc_msgSend((id)objc_opt_self(MPModelSong), "kindWithVariants:", 3);
  v2 = objc_msgSend(v0, "kindWithSongKind:", v1);

  return v2;
}

id static MPModelTVShow.defaultMusicKind.getter()
{
  id v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  char v10[16];
  __int128 v11;
  uint64_t v12;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  strcpy(v10, "showAllTVShows");
  v10[15] = -18;
  v1 = sub_10000D478();
  NSUserDefaults.subscript.getter((uint64_t)v10, (uint64_t)&type metadata for String, v1, &v11);
  if (!v12)
  {
    sub_100098B58((uint64_t)&v11);
    goto LABEL_6;
  }
  if ((swift_dynamicCast(v10, &v11, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) == 0)
  {
LABEL_6:

    goto LABEL_7;
  }
  v2 = v10[0];

  if ((v2 & 1) == 0)
  {
LABEL_7:
    v3 = 2;
    goto LABEL_8;
  }
  v3 = 3;
LABEL_8:
  v4 = (void *)objc_opt_self(MPModelTVShow);
  v5 = (void *)objc_opt_self(MPModelTVSeason);
  v6 = objc_msgSend((id)objc_opt_self(MPModelTVEpisode), "kindWithVariants:", v3);
  v7 = objc_msgSend(v5, "kindWithEpisodeKind:", v6);

  v8 = objc_msgSend(v4, "kindWithSeasonKind:", v7);
  return v8;
}

id static MPModelTVSeason.defaultMusicKind.getter()
{
  id v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  char v8[16];
  __int128 v9;
  uint64_t v10;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  strcpy(v8, "showAllTVShows");
  v8[15] = -18;
  v1 = sub_10000D478();
  NSUserDefaults.subscript.getter((uint64_t)v8, (uint64_t)&type metadata for String, v1, &v9);
  if (!v10)
  {
    sub_100098B58((uint64_t)&v9);
    goto LABEL_6;
  }
  if ((swift_dynamicCast(v8, &v9, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) == 0)
  {
LABEL_6:

    goto LABEL_7;
  }
  v2 = v8[0];

  if ((v2 & 1) == 0)
  {
LABEL_7:
    v3 = 2;
    goto LABEL_8;
  }
  v3 = 3;
LABEL_8:
  v4 = (void *)objc_opt_self(MPModelTVSeason);
  v5 = objc_msgSend((id)objc_opt_self(MPModelTVEpisode), "kindWithVariants:", v3);
  v6 = objc_msgSend(v4, "kindWithEpisodeKind:", v5);

  return v6;
}

id MPModelObject.innermostModelObject.getter()
{
  void *v0;

  return v0;
}

id MPModelPlaylistEntry.innermostModelObject.getter()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id result;
  id v5;

  v1 = objc_msgSend(v0, "type");
  if (v1 == (id)3)
  {
    v3 = objc_msgSend(v5, "movie");
    goto LABEL_7;
  }
  if (v1 == (id)2)
  {
    v3 = objc_msgSend(v5, "tvEpisode");
LABEL_7:
    result = v3;
    v2 = v5;
    if (result)
      return result;
    return v2;
  }
  v2 = v5;
  if (v1 == (id)1)
  {
    v3 = objc_msgSend(v5, "song");
    goto LABEL_7;
  }
  return v2;
}

id MPModelGenericObject.innermostModelObject.getter()
{
  void *v0;
  id result;
  id v2;
  void *v3;
  id v4;
  id v5;

  switch((unint64_t)objc_msgSend(v0, "type"))
  {
    case 1uLL:
      result = objc_msgSend(v5, "song");
      if (!result)
        goto LABEL_37;
      break;
    case 2uLL:
      result = objc_msgSend(v5, "album");
      if (!result)
        goto LABEL_37;
      break;
    case 3uLL:
      result = objc_msgSend(v5, "artist");
      if (!result)
        goto LABEL_37;
      break;
    case 4uLL:
      result = objc_msgSend(v5, "playlist");
      if (!result)
        goto LABEL_37;
      break;
    case 5uLL:
      v2 = objc_msgSend(v5, "playlistEntry");
      if (!v2)
        goto LABEL_37;
      v3 = v2;
      v4 = objc_msgSend(v2, "innermostModelObject");

      result = v4;
      break;
    case 6uLL:
      result = objc_msgSend(v5, "tvEpisode");
      if (!result)
        goto LABEL_37;
      break;
    case 7uLL:
      result = objc_msgSend(v5, "season");
      if (!result)
        goto LABEL_37;
      break;
    case 8uLL:
      result = objc_msgSend(v5, "show");
      if (!result)
        goto LABEL_37;
      break;
    case 9uLL:
      result = objc_msgSend(v5, "movie");
      if (!result)
        goto LABEL_37;
      break;
    case 0xAuLL:
      result = objc_msgSend(v5, "mediaClip");
      if (!result)
        goto LABEL_37;
      break;
    case 0xBuLL:
      result = objc_msgSend(v5, "podcast");
      if (!result)
        goto LABEL_37;
      break;
    case 0xCuLL:
      result = objc_msgSend(v5, "podcastEpisode");
      if (!result)
        goto LABEL_37;
      break;
    case 0xDuLL:
      result = objc_msgSend(v5, "radioStation");
      if (!result)
        goto LABEL_37;
      break;
    case 0xFuLL:
      result = objc_msgSend(v5, "genre");
      if (!result)
        goto LABEL_37;
      break;
    case 0x10uLL:
      result = objc_msgSend(v5, "curator");
      if (!result)
        goto LABEL_37;
      break;
    case 0x11uLL:
      result = objc_msgSend(v5, "socialPerson");
      if (!result)
        goto LABEL_37;
      break;
    case 0x13uLL:
      result = objc_msgSend(v5, "recordLabel");
      if (!result)
        goto LABEL_37;
      break;
    case 0x14uLL:
      result = objc_msgSend(v5, "creditsArtist");
      if (!result)
        goto LABEL_37;
      break;
    default:
LABEL_37:
      result = v5;
      break;
  }
  return result;
}

id MPModelStoreBrowseContentItem.innermostModelObject.getter()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id v5;

  v1 = objc_msgSend(v0, "innerObject");
  if (!v1)
    return v5;
  v2 = v1;
  v3 = objc_msgSend(v1, "innermostModelObject");

  return v3;
}

uint64_t MPModelSong.nowPlayingTitle(radioStation:)(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  id v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v27[16];

  v2 = v1;
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v27[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v27[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = &v27[-v12];
  v14 = objc_msgSend(v2, "title");
  if (v14)
  {
    v15 = v14;
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v18 = v17;

    v19 = HIBYTE(v18) & 0xF;
    if ((v18 & 0x2000000000000000) == 0)
      v19 = v16 & 0xFFFFFFFFFFFFLL;
    if (v19)
      return v16;
    swift_bridgeObjectRelease();
  }
  if (!a1)
    goto LABEL_12;
  v20 = objc_msgSend(a1, "name");
  if (!v20)
    goto LABEL_12;
  v21 = v20;
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  v24 = HIBYTE(v23) & 0xF;
  if ((v23 & 0x2000000000000000) == 0)
    v24 = v16 & 0xFFFFFFFFFFFFLL;
  if (!v24)
  {
    swift_bridgeObjectRelease();
LABEL_12:
    String.LocalizationValue.init(stringLiteral:)(0x206E776F6E6B6E55, 0xED0000656C746954);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v11, v13, v7);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v25 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    v16 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v25, v6, 0, 0, 256);
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v13, v7);
  }
  return v16;
}

uint64_t MPModelSong.preferredBylineAttribution(with:radioStation:)(uint64_t a1, id a2)
{
  void *v2;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;

  if (a2 && (v4 = objc_msgSend(a2, "attributionLabel")) != 0)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);

  }
  else
  {
    v7 = v2;
    v8 = sub_1000E4DE0(a1, v7);

    if (*((_QWORD *)v8 + 2))
    {
      v9 = sub_100005574(&qword_10048E158);
      v10 = sub_1000E4F20();
      v6 = BidirectionalCollection<>.joined(separator:)(0x209480E220, 0xA500000000000000, v9, v10);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return v6;
}

void sub_1000E47D0(unsigned __int8 *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  id v17;
  unsigned int v18;
  id v19;
  uint64_t *v20;
  void *v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;

  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v47 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for String.LocalizationValue(0);
  v46 = *(_QWORD *)(v48 - 8);
  v8 = __chkstk_darwin(v48);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v45 - v11;
  v13 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a1;
  v17 = sub_1000E4B20(v16);
  v18 = objc_msgSend(a2, "hasLoadedValuesForPropertySet:", v17);

  if (!v18)
  {
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  if (v16 == 2)
  {
    v19 = objc_msgSend(a2, "artist");
    v20 = a3;
    if (!v19)
      goto LABEL_21;
    v21 = v19;
    v22 = objc_msgSend(v19, "name");

    if (!v22)
      goto LABEL_21;
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v25 = v24;

    v26 = HIBYTE(v25) & 0xF;
    if ((v25 & 0x2000000000000000) == 0)
      v26 = v23 & 0xFFFFFFFFFFFFLL;
    if (v26)
    {
      *a3 = v23;
      a3[1] = v25;
      return;
    }
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    *v20 = 0;
    v20[1] = 0;
    return;
  }
  v20 = a3;
  if ((v16 & 1) == 0 && !objc_msgSend(a2, "shouldShowComposer"))
    goto LABEL_21;
  v27 = objc_msgSend(a2, "composer");
  if (!v27)
    goto LABEL_21;
  v28 = v27;
  v29 = objc_msgSend(v27, "name");

  if (!v29)
    goto LABEL_21;
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  v32 = v31;

  v33 = HIBYTE(v32) & 0xF;
  if ((v32 & 0x2000000000000000) == 0)
    v33 = v30 & 0xFFFFFFFFFFFFLL;
  if (!v33)
    goto LABEL_20;
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(3, 1);
  v34._countAndFlagsBits = 2128194;
  v34._object = (void *)0xE300000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v34);
  v35._countAndFlagsBits = v30;
  v35._object = (void *)v32;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v35);
  swift_bridgeObjectRelease();
  v36._countAndFlagsBits = 0;
  v36._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v36);
  String.LocalizationValue.init(stringInterpolation:)(v15);
  v37 = v46;
  v38 = v48;
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v10, v12, v48);
  if (qword_10048C570 != -1)
    swift_once(&qword_10048C570, sub_10000AD54);
  v39 = qword_1004A1DA0;
  v40 = (id)qword_1004A1DA0;
  v41 = v47;
  static Locale.current.getter(v40);
  v42 = String.init(localized:table:bundle:locale:comment:)(v10, 0, 0, v39, v41, 0, 0, 256);
  v44 = v43;
  (*(void (**)(char *, uint64_t))(v37 + 8))(v12, v38);
  *a3 = v42;
  a3[1] = v44;
}

id sub_1000E4B20(char a1)
{
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  id v8;
  id v9;
  NSArray v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Class v20;
  id v21;
  Class v22;
  id v23;
  _BYTE v25[56];
  _BYTE v26[56];

  if (a1 == 2)
  {
    v1 = sub_100005574((uint64_t *)&unk_1004912A0);
    inited = swift_initStackObject(v1, v25);
    *(_OWORD *)(inited + 16) = xmmword_100384A80;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelRelationshipSongArtist);
    *(_QWORD *)(inited + 40) = v3;
    v4 = sub_100005574((uint64_t *)&unk_100491700);
    v5 = swift_allocObject(v4, 48, 7);
    *(_OWORD *)(v5 + 16) = xmmword_100384A80;
    *(_QWORD *)(v5 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyArtistName);
    *(_QWORD *)(v5 + 40) = v6;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v8 = objc_msgSend((id)objc_opt_self(MPPropertySet), "propertySetWithProperties:", isa);

    *(_QWORD *)(inited + 48) = v8;
    sub_100098EAC(inited);
    v9 = objc_allocWithZone((Class)MPPropertySet);
    v10.super.isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    if ((a1 & 1) == 0)
    {
      v11 = sub_100005574((uint64_t *)&unk_100491700);
      v12 = swift_allocObject(v11, 48, 7);
      *(_OWORD *)(v12 + 16) = xmmword_100384A80;
      *(_QWORD *)(v12 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertySongShouldShowComposer);
      *(_QWORD *)(v12 + 40) = v13;
    }
    v14 = sub_100005574((uint64_t *)&unk_1004912A0);
    v15 = swift_initStackObject(v14, v26);
    *(_OWORD *)(v15 + 16) = xmmword_100384A80;
    *(_QWORD *)(v15 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelRelationshipSongComposer);
    *(_QWORD *)(v15 + 40) = v16;
    v17 = sub_100005574((uint64_t *)&unk_100491700);
    v18 = swift_allocObject(v17, 48, 7);
    *(_OWORD *)(v18 + 16) = xmmword_100384A80;
    *(_QWORD *)(v18 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyComposerName);
    *(_QWORD *)(v18 + 40) = v19;
    v20 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v21 = objc_msgSend((id)objc_opt_self(MPPropertySet), "propertySetWithProperties:", v20);

    *(_QWORD *)(v15 + 48) = v21;
    sub_100098EAC(v15);
    v9 = objc_allocWithZone((Class)MPPropertySet);
    v10.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  sub_1000E5128();
  v22 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v23 = objc_msgSend(v9, "initWithProperties:relationships:", v10.super.isa, v22);

  return v23;
}

char *sub_1000E4DE0(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return (char *)_swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  v5 = 0;
  v6 = (char *)_swiftEmptyArrayStorage;
  do
  {
    v16 = *(_BYTE *)(a1 + v5 + 32);
    sub_1000E47D0(&v16, a2, &v14);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v6;
    }
    v8 = v15;
    if (v15)
    {
      v9 = v14;
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
        v6 = sub_10003DE28(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
      v11 = *((_QWORD *)v6 + 2);
      v10 = *((_QWORD *)v6 + 3);
      if (v11 >= v10 >> 1)
        v6 = sub_10003DE28((char *)(v10 > 1), v11 + 1, 1, v6);
      *((_QWORD *)v6 + 2) = v11 + 1;
      v7 = &v6[16 * v11];
      *((_QWORD *)v7 + 4) = v9;
      *((_QWORD *)v7 + 5) = v8;
    }
    ++v5;
  }
  while (v3 != v5);
  swift_bridgeObjectRelease();
  return v6;
}

unint64_t sub_1000E4F20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100491870;
  if (!qword_100491870)
  {
    v1 = sub_100005600(&qword_10048E158);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100491870);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SongBylineAttributionComponent(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
  {
    v6 = *a1;
    v7 = v6 >= 2;
    v8 = (v6 + 2147483646) & 0x7FFFFFFF;
    if (!v7)
      v8 = -1;
    if (v8 + 1 >= 2)
      return v8;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 2;
    if (a2 + 2 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1000E4FBC + 4 * byte_10038B780[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for SongBylineAttributionComponent(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFE)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000E5074 + 4 * byte_10038B78A[v5]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000E50A8 + 4 * byte_10038B785[v5]))();
}

uint64_t sub_1000E50A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E50B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000E50B8);
  return result;
}

uint64_t sub_1000E50C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000E50CCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000E50D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E50D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E50E4(unsigned __int8 *a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;

  v1 = *a1;
  v2 = v1 >= 2;
  v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2)
    return (v3 + 1);
  else
    return 0;
}

_BYTE *sub_1000E5100(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 1;
  return result;
}

ValueMetadata *type metadata accessor for SongBylineAttributionComponent()
{
  return &type metadata for SongBylineAttributionComponent;
}

unint64_t sub_1000E5128()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1004918E0;
  if (!qword_1004918E0)
  {
    v1 = objc_opt_self(MPPropertySet);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1004918E0);
  }
  return result;
}

uint64_t sub_1000E5168(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  double v29;

  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for String.LocalizationValue(0);
  v9 = *(_QWORD *)(v28 - 8);
  v10 = __chkstk_darwin(v28);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v27 - v13;
  v15 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = 0;
  if ((a2 & 0x8000000000000000) == 0 && a1 >= 1)
  {
    String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(10, 3);
    v19._countAndFlagsBits = 0;
    v19._object = (void *)0xE000000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v19);
    v29 = *(double *)&a1;
    String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v29, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
    v20._countAndFlagsBits = 0x2F7469622DLL;
    v20._object = (void *)0xE500000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v20);
    v29 = (double)a2 / 1000.0;
    String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v29, 6712357, 0xE300000000000000, &type metadata for Double, &protocol witness table for Double);
    v21._countAndFlagsBits = 0x207A486B20;
    v21._object = (void *)0xE500000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v21);
    v22._countAndFlagsBits = UInt32.formatName.getter(a3);
    String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v22);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v23);
    String.LocalizationValue.init(stringInterpolation:)(v17);
    v24 = v28;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v28);
    if (qword_10048C570 != -1)
      swift_once(&qword_10048C570, sub_10000AD54);
    v25 = qword_1004A1DA0;
    static Locale.current.getter((id)qword_1004A1DA0);
    v18 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v25, v8, 0, 0, 256);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v24);
  }
  return v18;
}

uint64_t _sSo27MPNowPlayingInfoAudioFormatC9MusicCoreE12inputDetailsSSSgvg_0()
{
  void *v0;

  return sub_1000E5168((uint64_t)objc_msgSend(v0, "bitDepth"), (uint64_t)objc_msgSend(v0, "sampleRate"), (int)objc_msgSend(v0, "codec"));
}

void *MPIdentifierSet.Purpose.Options.catalog.unsafeMutableAddressor()
{
  return &static MPIdentifierSet.Purpose.Options.catalog;
}

uint64_t MPModelObject.bestIdentifier(for:)(uint64_t a1, unsigned __int8 a2)
{
  void *v2;
  void *v3;
  void *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t ObjectType;

  v3 = v2;
  objc_opt_self(MPModelGenericObject);
  v6 = (void *)swift_dynamicCastObjCClass(v3);
  if (v6)
  {
    v7 = objc_msgSend(v6, "anyObject");
    goto LABEL_5;
  }
  objc_opt_self(MPModelStoreBrowseContentItem);
  v8 = (void *)swift_dynamicCastObjCClass(v3);
  if (v8)
  {
    v7 = objc_msgSend(v8, "innerObject");
LABEL_5:
    v9 = v7;
    if (v9)
      goto LABEL_7;
  }
  v9 = v3;
LABEL_7:
  if (a2 == 1)
  {
    v10 = objc_msgSend(v9, "identifiers");
    if (a1 == 2)
    {
      ObjectType = swift_getObjectType();
      v12 = sub_10009ACF0(ObjectType, 2, 1u, v10);
    }
    else if (a1 == 1 || (v11 = swift_getObjectType(), v12 = sub_10009ACF0(v11, 2, 1u, v10), !v13))
    {
      sub_1000E6BFC(v9);
    }
    v16 = v12;

  }
  else
  {
    v14 = swift_getObjectType();
    v15 = objc_msgSend(v9, "identifiers");
    v16 = sub_10009ACF0(v14, a1, a2, v15);

  }
  return v16;
}

void MPArtworkCatalog.requestImage(_:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[5];
  uint64_t v9;

  v5 = swift_allocObject(&unk_100449E38, 32, 7);
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v8[4] = sub_1000D4F44;
  v9 = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_1000AC9C8;
  v8[3] = &unk_100449E50;
  v6 = _Block_copy(v8);
  v7 = v9;
  swift_retain(a2);
  objc_msgSend(v2, "requestImageWithCompletion:", v6, swift_release(v7).n128_f64[0]);
  _Block_release(v6);
}

uint64_t static MPModelPlaylistVariants.allPlaylists.getter()
{
  return 215;
}

uint64_t MPArtworkCatalog.getImage()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = v0;
  return swift_task_switch(sub_1000E56D0, 0, 0);
}

uint64_t sub_1000E56D0()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0 + 2;
  v2 = (void *)v0[16];
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1000E5764;
  v3 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v4 = v0 + 10;
  v4[1] = 0x40000000;
  v4[2] = sub_1000E5810;
  v4[3] = &unk_100449E78;
  v4[4] = v3;
  objc_msgSend(v2, "requestImageWithCompletion:", v4);
  return swift_continuation_await(v1);
}

uint64_t sub_1000E5764()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 136) = v1;
  if (v1)
    v2 = sub_1000E57D4;
  else
    v2 = sub_1000E57C4;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000E57C4()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 120));
}

uint64_t sub_1000E57D4()
{
  uint64_t v0;

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000E5810(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  id v9;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_100005574((uint64_t *)&unk_1004911F0);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    swift_continuation_throwingResumeWithError(v3, v6);
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    v9 = a2;
    swift_continuation_throwingResume(v3);
  }
  else
  {
    __break(1u);
  }
}

void sub_1000E589C(void *a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;

  if (a1)
  {
    v9 = a1;
    a3(a1, 0);

  }
  else
  {
    v6 = sub_1000ECDE0();
    v7 = swift_allocError(&_s12LoadingErrorON, v6, 0, 0);
    *v8 = a2;
    swift_errorRetain(a2);
    a3((void *)v7, 1);
    swift_errorRelease(v7);
  }
}

void *MPArtworkCatalog.image(from:size:)(void *a1, double a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  dispatch_semaphore_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  __n128 v17;
  void *v18;
  id v19;
  _QWORD aBlock[5];
  uint64_t v22;

  v6 = type metadata accessor for DispatchTime(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = swift_allocObject(&unk_100449EA0, 24, 7);
  *(_QWORD *)(v10 + 16) = 0;
  objc_msgSend(a1, "setDestinationScale:", 0.0);
  objc_msgSend(a1, "setFittingSize:", a2, a3);
  v11 = dispatch_semaphore_create(0);
  v12 = swift_allocObject(&unk_100449EC8, 32, 7);
  *(_QWORD *)(v12 + 16) = v10;
  *(_QWORD *)(v12 + 24) = v11;
  v13 = swift_allocObject(&unk_100449EF0, 32, 7);
  *(_QWORD *)(v13 + 16) = sub_1000EB70C;
  *(_QWORD *)(v13 + 24) = v12;
  aBlock[4] = sub_1000ED060;
  v22 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000AC9C8;
  aBlock[3] = &unk_100449F08;
  v14 = _Block_copy(aBlock);
  v15 = v22;
  swift_retain(v10);
  v16 = v11;
  swift_retain(v12);
  objc_msgSend(a1, "requestImageWithCompletion:", v14, swift_release(v15).n128_f64[0]);
  _Block_release(v14);
  v17 = swift_release(v12);
  static DispatchTime.distantFuture.getter(v17);
  OS_dispatch_semaphore.wait(timeout:)(v9);

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_beginAccess(v10 + 16, aBlock, 0, 0);
  v18 = *(void **)(v10 + 16);
  v19 = v18;
  swift_release(v10);
  return v18;
}

Swift::Int sub_1000E5B3C(void *a1, char a2, uint64_t a3)
{
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  _QWORD v9[3];

  v4 = a1;
  if ((a2 & 1) != 0)
  {
    v9[0] = a1;
    v6 = sub_100005574((uint64_t *)&unk_1004911F0);
    swift_willThrowTypedImpl(v9, v6, &protocol self-conformance witness table for Error);
    v4 = 0;
  }
  else
  {
    v5 = a1;
  }
  swift_beginAccess(a3 + 16, v9, 1, 0);
  v7 = *(void **)(a3 + 16);
  *(_QWORD *)(a3 + 16) = v4;

  return OS_dispatch_semaphore.signal()();
}

double MPArtworkCatalog.setDestination<A>(_:for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  double result;
  _QWORD v15[5];
  _QWORD *v16;

  v10 = _bridgeAnythingToObjectiveC<A>(_:)(a1, a5);
  v11 = (_QWORD *)swift_allocObject(&unk_100449F40, 40, 7);
  v11[2] = a5;
  v11[3] = a3;
  v11[4] = a4;
  v15[4] = sub_1000EB73C;
  v16 = v11;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  v15[2] = sub_1000E5D64;
  v15[3] = &unk_100449F58;
  v12 = _Block_copy(v15);
  v13 = v16;
  swift_retain(a4);
  objc_msgSend(v5, "setDestination:forRepresentationKinds:configurationBlock:", v10, a2, v12, swift_release(v13).n128_f64[0]);
  _Block_release(v12);
  *(_QWORD *)&result = swift_unknownObjectRelease(v10).n128_u64[0];
  return result;
}

uint64_t sub_1000E5CB4(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE v13[32];

  v8 = *(_QWORD *)(a5 - 8);
  v9 = __chkstk_darwin();
  v11 = &v13[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000684C(v9, (uint64_t)v13);
  swift_dynamicCast(v11, v13, (char *)&type metadata for Any + 8, a5, 7);
  a3(v11, a2);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v11, a5);
}

uint64_t sub_1000E5D64(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(_QWORD *, id);
  id v7;
  _QWORD v9[4];

  v6 = *(void (**)(_QWORD *, id))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v9[3] = swift_getObjectType();
  v9[0] = a2;
  swift_retain(v5);
  swift_unknownObjectRetain(a2);
  v7 = a3;
  v6(v9, v7);
  swift_release(v5);

  return sub_10000682C(v9);
}

uint64_t MPArtworkCatalog.originalSize.getter()
{
  void *v0;
  id v1;
  uint64_t v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v9;
  _BYTE v10[32];

  v1 = objc_msgSend(v0, "token");
  _bridgeAnyObjectToAny(_:)(v1);
  swift_unknownObjectRelease(v1);
  v2 = sub_1000087DC(0, &qword_100491858, MPStoreArtworkRequestToken_ptr);
  if ((swift_dynamicCast(&v9, v10, (char *)&type metadata for Any + 8, v2, 6) & 1) != 0)
  {
    v3 = v9;
    v4 = objc_msgSend(v9, "imageArtworkInfo");
    if (v4)
    {
      v5 = v4;
      objc_msgSend(v4, "originalSize");
      v7 = v6;

      return v7;
    }

  }
  return 0;
}

uint64_t MPArtworkCatalog.expectedRatio.getter()
{
  double v0;
  double v1;
  char v2;
  uint64_t result;

  v0 = COERCE_DOUBLE(MPArtworkCatalog.originalSize.getter());
  if ((v2 & 1) != 0 || v1 <= 0.0)
    *(double *)&result = 0.0;
  else
    *(double *)&result = v0 / v1;
  return result;
}

id static MPArtworkCatalog.monogram(for:layoutDirection:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  return sub_1000EBA20(a1, a2, a3, a4 & 1);
}

id static MPMediaLibrary.device.getter()
{
  uint64_t v0;
  id result;

  result = objc_msgSend((id)swift_getObjCClassFromMetadata(v0), "deviceMediaLibrary");
  if (!result)
    __break(1u);
  return result;
}

id MPMediaLibrary.canCreatePlaylists.getter()
{
  uint64_t v0;
  id result;
  void *v2;
  char v3;

  result = objc_msgSend((id)objc_opt_self(MPMediaLibrary), "deviceMediaLibrary");
  if (result)
  {
    v2 = result;
    sub_1000087DC(0, (unint64_t *)&unk_100491860, MPMediaLibrary_ptr);
    v3 = static NSObject.== infix(_:_:)(v0, v2);

    return (id)(v3 & 1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *MPMediaPickerConfiguration.musicTypeIdentifiers.getter()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v3 = NSBundle.exportedTypeDeclarations.getter();

  if (!v3)
    return (char *)_swiftEmptyArrayStorage;
  v4 = objc_msgSend(v1, "typeIdentifiers");
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, &type metadata for String);

  v6 = *(_QWORD *)(v5 + 16);
  swift_bridgeObjectRelease();
  if (v6)
  {
    v7 = objc_msgSend(v1, "typeIdentifiers");
    v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, &type metadata for String);

    swift_bridgeObjectRetain();
    v9 = sub_1000EB8D0(v8, v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v3, 2);
    sub_1000EB46C((uint64_t)v9);
    v11 = v10;
    swift_bridgeObjectRelease();
    return (char *)v11;
  }
  swift_bridgeObjectRelease();
  if (objc_msgSend(v1, "mediaTypes"))
    return sub_1000E630C((__int16)objc_msgSend(v1, "mediaTypes"));
  else
    return (char *)_swiftEmptyArrayStorage;
}

uint64_t sub_1000E613C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  _BYTE v19[32];
  uint64_t v20;
  uint64_t v21;
  char *v22;

  v2 = a2;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    v5 = 0;
    v6 = (char *)_swiftEmptyArrayStorage;
    v22 = (char *)&type metadata for Any + 8;
    do
    {
      v8 = *(_QWORD *)(a1 + 8 * v5 + 32);
      v9 = *(_QWORD *)(v8 + 16);
      swift_bridgeObjectRetain();
      if (!v9
        || (v10 = sub_10009ABAC(0xD000000000000010, 0x80000001003B18F0), (v11 & 1) == 0)
        || (sub_10000684C(*(_QWORD *)(v8 + 56) + 32 * v10, (uint64_t)v19),
            (swift_dynamicCast(&v20, v19, v22, &type metadata for String, 6) & 1) == 0))
      {
        v20 = 0;
        v21 = 0;
      }
      swift_bridgeObjectRelease();
      v12 = v21;
      if (v21)
      {
        v13 = v20;
        if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
          v6 = sub_10003DE28(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
        v15 = *((_QWORD *)v6 + 2);
        v14 = *((_QWORD *)v6 + 3);
        if (v15 >= v14 >> 1)
          v6 = sub_10003DE28((char *)(v14 > 1), v15 + 1, 1, v6);
        *((_QWORD *)v6 + 2) = v15 + 1;
        v7 = &v6[16 * v15];
        *((_QWORD *)v7 + 4) = v13;
        *((_QWORD *)v7 + 5) = v12;
      }
      ++v5;
    }
    while (v3 != v5);
    swift_bridgeObjectRelease();
    v2 = a2;
  }
  else
  {
    v6 = (char *)_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  v16 = sub_1000EB748((uint64_t)v6);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *v2 = v16;
  return result;
}

char *sub_1000E630C(__int16 a1)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;

  if ((a1 & 1) == 0)
  {
    v2 = (char *)_swiftEmptyArrayStorage;
    if ((a1 & 0x800) == 0)
      return v2;
    goto LABEL_7;
  }
  v2 = sub_10003DE28(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  v4 = *((_QWORD *)v2 + 2);
  v3 = *((_QWORD *)v2 + 3);
  if (v4 >= v3 >> 1)
    v2 = sub_10003DE28((char *)(v3 > 1), v4 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v4 + 1;
  v5 = &v2[16 * v4];
  *((_QWORD *)v5 + 4) = 0xD000000000000014;
  *((_QWORD *)v5 + 5) = 0x80000001003B1930;
  if ((a1 & 0x800) != 0)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10003DE28(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
    v7 = *((_QWORD *)v2 + 2);
    v6 = *((_QWORD *)v2 + 3);
    if (v7 >= v6 >> 1)
      v2 = sub_10003DE28((char *)(v6 > 1), v7 + 1, 1, v2);
    *((_QWORD *)v2 + 2) = v7 + 1;
    v8 = &v2[16 * v7];
    *((_QWORD *)v8 + 4) = 0xD00000000000001BLL;
    *((_QWORD *)v8 + 5) = 0x80000001003B1910;
  }
  return v2;
}

id MPMediaPickerConfiguration.supportsCatalogContent.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  char v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  if (qword_10048C658 != -1)
    swift_once(&qword_10048C658, sub_1000B3BEC);
  v1 = static ApplicationCapabilities.Controller.shared;
  KeyPath = swift_getKeyPath(&unk_10038B820);
  v3 = swift_getKeyPath(&unk_10038B848);
  static Published.subscript.getter(&v7, v1, KeyPath, v3);
  swift_release(KeyPath);
  swift_release(v3);
  v4 = v8;
  v5 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if ((v4 & 1) != 0)
    return objc_msgSend(v0, "showsCatalogContent");
  else
    return 0;
}

id MPMediaPickerConfiguration.supportsCloudLibrary.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  __int16 v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  if (qword_10048C658 != -1)
    swift_once(&qword_10048C658, sub_1000B3BEC);
  v1 = static ApplicationCapabilities.Controller.shared;
  KeyPath = swift_getKeyPath(&unk_10038B820);
  v3 = swift_getKeyPath(&unk_10038B848);
  static Published.subscript.getter(&v7, v1, KeyPath, v3);
  swift_release(KeyPath);
  swift_release(v3);
  v4 = v8;
  v5 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if ((v4 & 0x100) != 0)
    return objc_msgSend(v0, "showsCloudItems");
  else
    return 0;
}

void *MPIdentifierSet.Purpose.Options.local.unsafeMutableAddressor()
{
  return &static MPIdentifierSet.Purpose.Options.local;
}

void *MPIdentifierSet.Purpose.Options.all.unsafeMutableAddressor()
{
  return &static MPIdentifierSet.Purpose.Options.all;
}

unint64_t MPIdentifierSet.publicLoggingDescription.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  Swift::String v30;
  Swift::String v31;

  v1 = MPIdentifierSet.bestLibraryIdentifier.getter();
  if (v2)
  {
    String.append(_:)(*(Swift::String *)&v1);
    swift_bridgeObjectRelease();
    v3._countAndFlagsBits = 59;
    v3._object = (void *)0xE100000000000000;
    String.append(_:)(v3);
    v4 = sub_10003DE28(0, 1, 1, (char *)_swiftEmptyArrayStorage);
    v6 = *((_QWORD *)v4 + 2);
    v5 = *((_QWORD *)v4 + 3);
    if (v6 >= v5 >> 1)
      v4 = sub_10003DE28((char *)(v5 > 1), v6 + 1, 1, v4);
    *((_QWORD *)v4 + 2) = v6 + 1;
    v7 = &v4[16 * v6];
    *((_QWORD *)v7 + 4) = 0x507972617262696CLL;
    *((_QWORD *)v7 + 5) = 0xEB000000003D4449;
  }
  else
  {
    v4 = (char *)_swiftEmptyArrayStorage;
  }
  v8 = objc_msgSend(v0, "universalStore");
  if (v8)
  {
    v9 = v8;
    v10 = objc_msgSend(v8, "globalPlaylistID");
    swift_unknownObjectRelease(v9);
    if (v10)
    {
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      v13 = v12;

      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      v14._countAndFlagsBits = v11;
      v14._object = v13;
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v15._countAndFlagsBits = 59;
      v15._object = (void *)0xE100000000000000;
      String.append(_:)(v15);
      if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
        v4 = sub_10003DE28(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
      v17 = *((_QWORD *)v4 + 2);
      v16 = *((_QWORD *)v4 + 3);
      if (v17 >= v16 >> 1)
        v4 = sub_10003DE28((char *)(v16 > 1), v17 + 1, 1, v4);
      *((_QWORD *)v4 + 2) = v17 + 1;
      v18 = &v4[16 * v17];
      *((_QWORD *)v18 + 4) = 0xD000000000000011;
      *((_QWORD *)v18 + 5) = 0x80000001003B16F0;
    }
  }
  v19 = MPIdentifierSet.bestStoreIdentifier.getter();
  if (v20)
  {
    String.append(_:)(*(Swift::String *)&v19);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 59;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
      v4 = sub_10003DE28(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
    v23 = *((_QWORD *)v4 + 2);
    v22 = *((_QWORD *)v4 + 3);
    if (v23 >= v22 >> 1)
      v4 = sub_10003DE28((char *)(v22 > 1), v23 + 1, 1, v4);
    *((_QWORD *)v4 + 2) = v23 + 1;
    v24 = &v4[16 * v23];
    *((_QWORD *)v24 + 4) = 0x3D65726F7473;
    *((_QWORD *)v24 + 5) = 0xE600000000000000;
  }
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v25 = sub_100005574(&qword_10048E158);
  v26 = sub_1000E4F20();
  v27 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v25, v26);
  v29 = v28;
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = v27;
  v30._object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._countAndFlagsBits = 62;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  return 0xD000000000000010;
}

uint64_t MPIdentifierSet.bestLibraryIdentifier.getter()
{
  void *v0;
  id v1;
  void *v2;
  Class isa;
  id v4;
  uint64_t v5;

  v1 = objc_msgSend(v0, "library");
  if (!v1)
    return 0;
  v2 = v1;
  if (!objc_msgSend(v1, "persistentID")
    || (objc_msgSend(v2, "persistentID"),
        isa = Int64._bridgeToObjectiveC()().super.super.isa,
        v4 = (id)MPStoreItemMetadataStringNormalizeStoreIDValue(),
        isa,
        !v4))
  {
    swift_unknownObjectRelease(v2);
    return 0;
  }
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);

  swift_unknownObjectRelease(v2);
  return v5;
}

uint64_t MPIdentifierSet.bestStoreIdentifier.getter()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  Class isa;
  id v8;

  v1 = objc_msgSend(v0, "universalStore");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = objc_msgSend(v1, "subscriptionAdamID");
  v4 = objc_msgSend(v2, "purchasedAdamID");
  v5 = objc_msgSend(v2, "adamID");
  if (!v3 && !v4)
  {
    v6 = (uint64_t)v5;
    if (!v5)
    {
      swift_unknownObjectRelease(v2);
      return v6;
    }
  }
  isa = Int64._bridgeToObjectiveC()().super.super.isa;
  v8 = (id)MPStoreItemMetadataStringNormalizeStoreIDValue();

  if (!v8)
  {
    swift_unknownObjectRelease(v2);
    return 0;
  }
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);

  swift_unknownObjectRelease(v2);
  return v6;
}

void static MPIdentifierSet.bestPlayabilityIdentifier<A>(for:options:identifiers:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 == 2)
  {
    sub_1000E6F84((uint64_t)a1, a3);
  }
  else if (a2 == 1 || (sub_1000E6F84((uint64_t)a1, a3), !v7))
  {
    sub_1000E6D84(a1, (uint64_t)a3, a4);
  }
}

void sub_1000E6BFC(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  __n128 v8;
  _QWORD aBlock[5];
  uint64_t v10;
  char v11;

  v11 = 2;
  v2 = objc_opt_self(MPModelObject);
  v3 = swift_allocObject(&unk_10044A7E8, 32, 7);
  *(_QWORD *)(v3 + 16) = &v11;
  *(_QWORD *)(v3 + 24) = a1;
  v4 = swift_allocObject(&unk_10044A810, 32, 7);
  *(_QWORD *)(v4 + 16) = sub_1000ECE48;
  *(_QWORD *)(v4 + 24) = v3;
  aBlock[4] = sub_10000AD24;
  v10 = v4;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100009BD0;
  aBlock[3] = &unk_10044A828;
  v5 = _Block_copy(aBlock);
  v6 = v10;
  v7 = a1;
  swift_retain(v4);
  objc_msgSend((id)v2, "performWithoutEnforcement:", v5, swift_release(v6).n128_f64[0]);
  _Block_release(v5);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation(v4, "", 129, 235, 53, 1, v8);
  swift_release(v4);
  if ((v2 & 1) != 0)
  {
    __break(1u);
  }
  else if (v11 != 2 && (v11 & 1) != 0)
  {
    MPIdentifierSet.bestLibraryIdentifier.getter();
    swift_release(v3);
  }
  else
  {
    swift_release(v3);
  }
}

void sub_1000E6D84(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  __n128 v11;
  _QWORD aBlock[5];
  uint64_t v13;
  char v14;

  v14 = 2;
  v5 = objc_opt_self(MPModelObject);
  v6 = (_QWORD *)swift_allocObject(&unk_10044A770, 40, 7);
  v6[2] = a3;
  v6[3] = &v14;
  v6[4] = a1;
  v7 = swift_allocObject(&unk_10044A798, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_1000ECDC4;
  *(_QWORD *)(v7 + 24) = v6;
  aBlock[4] = sub_10000AD24;
  v13 = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100009BD0;
  aBlock[3] = &unk_10044A7B0;
  v8 = _Block_copy(aBlock);
  v9 = v13;
  v10 = a1;
  swift_retain(v7);
  objc_msgSend((id)v5, "performWithoutEnforcement:", v8, swift_release(v9).n128_f64[0]);
  _Block_release(v8);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation(v7, "", 129, 235, 53, 1, v11);
  swift_release(v7);
  if ((v5 & 1) != 0)
  {
    __break(1u);
  }
  else if (v14 != 2 && (v14 & 1) != 0)
  {
    MPIdentifierSet.bestLibraryIdentifier.getter();
    swift_release(v6);
  }
  else
  {
    swift_release(v6);
  }
}

uint64_t sub_1000E6F14(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v2 = a2;
  ObjectType = swift_getObjectType(a2);
  result = swift_conformsToProtocol2(ObjectType, &protocol descriptor for LibraryAddable);
  if (result)
    v6 = result;
  else
    v6 = 0;
  if (!result)
    v2 = 0;
  if (v2)
  {
    v7 = swift_getObjectType(v2);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v7, v6);
    v8 = result & 1;
  }
  else
  {
    v8 = 2;
  }
  *a1 = v8;
  return result;
}

uint64_t sub_1000E6F84(uint64_t a1, void *a2)
{
  uint64_t ObjectType;

  sub_1000087DC(0, &qword_100490B78, MPIdentifierSet_ptr);
  ObjectType = swift_getObjectType();
  return static MPIdentifierSet.bestIdentifier<A>(for:purpose:identifiers:)(ObjectType, 2, 1u, a2);
}

uint64_t static MPIdentifierSet.bestIdentifier<A>(for:purpose:identifiers:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, void *a4)
{
  char v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  Class isa;
  id v31;

  v5 = a2;
  if (a3 > 1u)
    __asm { BR              X9 }
  v7 = sub_1000087DC(0, &qword_100490428, MPModelPlaylist_ptr);
  if (!swift_dynamicCastMetatype(a1, v7))
  {
    v10 = sub_1000087DC(0, &qword_100490430, MPModelSocialPerson_ptr);
    if (swift_dynamicCastMetatype(a1, v10))
    {
      if ((v5 & 1) != 0)
      {
        v8 = MPIdentifierSet.bestLibraryIdentifier.getter();
        if (v11)
          return v8;
      }
      if ((v5 & 2) == 0)
        return 0;
      v17 = objc_msgSend(a4, "universalStore");
      if (!v17)
        return MPIdentifierSet.bestStoreIdentifier.getter();
      v14 = v17;
      v15 = objc_msgSend(v17, "socialProfileID");
      goto LABEL_24;
    }
    v12 = sub_1000087DC(0, qword_100490438, MPModelRadioStation_ptr);
    if (!swift_dynamicCastMetatype(a1, v12))
    {
      if ((v5 & 1) != 0)
      {
        v8 = MPIdentifierSet.bestLibraryIdentifier.getter();
        if (v16)
          return v8;
      }
      if ((v5 & 2) == 0)
        return 0;
      return MPIdentifierSet.bestStoreIdentifier.getter();
    }
    if ((v5 & 2) == 0)
      return 0;
    v23 = objc_msgSend(a4, "radio");
    if (!v23)
      return 0;
    v24 = v23;
    v25 = objc_msgSend(v23, "stationStringID");
    if (v25)
    {
      v26 = v25;
      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v28 = v27;

      v29 = HIBYTE(v28) & 0xF;
      if ((v28 & 0x2000000000000000) == 0)
        v29 = v19 & 0xFFFFFFFFFFFFLL;
      if (v29)
      {
LABEL_40:
        swift_unknownObjectRelease(v24);
        return v19;
      }
      swift_bridgeObjectRelease();
    }
    if (!objc_msgSend(v24, "stationID")
      || (objc_msgSend(v24, "stationID"),
          isa = Int64._bridgeToObjectiveC()().super.super.isa,
          v31 = (id)MPStoreItemMetadataStringNormalizeStoreIDValue(),
          isa,
          !v31))
    {
      swift_unknownObjectRelease(v24);
      return 0;
    }
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);

    goto LABEL_40;
  }
  if ((v5 & 1) != 0)
  {
    v8 = MPIdentifierSet.bestLibraryIdentifier.getter();
    if (v9)
      return v8;
  }
  if ((v5 & 2) == 0)
    return 0;
  v13 = objc_msgSend(a4, "universalStore");
  if (!v13)
    return MPIdentifierSet.bestStoreIdentifier.getter();
  v14 = v13;
  v15 = objc_msgSend(v13, "globalPlaylistID");
LABEL_24:
  v18 = v15;
  swift_unknownObjectRelease(v14);
  if (!v18)
    return MPIdentifierSet.bestStoreIdentifier.getter();
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  v22 = HIBYTE(v21) & 0xF;
  if ((v21 & 0x2000000000000000) == 0)
    v22 = v19 & 0xFFFFFFFFFFFFLL;
  if (!v22)
  {
    swift_bridgeObjectRelease();
    return MPIdentifierSet.bestStoreIdentifier.getter();
  }
  return v19;
}

void MPIdentifierSet.init(kind:deviceLibraryPID:)(void *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  __n128 v9;
  _QWORD v10[5];
  uint64_t v11;

  v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v5 = swift_allocObject(&unk_100449F90, 24, 7);
  *(_QWORD *)(v5 + 16) = a2;
  v6 = swift_allocObject(&unk_100449FB8, 32, 7);
  *(_QWORD *)(v6 + 16) = sub_1000EBBA0;
  *(_QWORD *)(v6 + 24) = v5;
  v10[4] = sub_100009BB0;
  v11 = v6;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_1000E776C;
  v10[3] = &unk_100449FD0;
  v7 = _Block_copy(v10);
  v8 = v11;
  swift_retain(v6);
  objc_msgSend(v4, "initWithModelKind:block:", a1, v7, swift_release(v8).n128_f64[0]);

  _Block_release(v7);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation(v6, "", 129, 335, 36, 1, v9);
  swift_release(v5);
  swift_release(v6);
  if ((a1 & 1) != 0)
    __break(1u);
}

void sub_1000E7594(void *a1, uint64_t a2)
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  __n128 v11;
  char isEscapingClosureAtFileLocation;
  _QWORD v13[5];
  uint64_t v14;

  v4 = objc_msgSend((id)objc_opt_self(MPMediaLibrary), "deviceMediaLibrary");
  if (!v4)
    goto LABEL_6;
  v5 = v4;
  v6 = objc_msgSend(v4, "uniqueIdentifier");

  if (v6)
  {
    v7 = swift_allocObject(&unk_10044A6F8, 24, 7);
    *(_QWORD *)(v7 + 16) = a2;
    v8 = swift_allocObject(&unk_10044A720, 32, 7);
    *(_QWORD *)(v8 + 16) = sub_1000ECD80;
    *(_QWORD *)(v8 + 24) = v7;
    v13[4] = sub_10000AD24;
    v14 = v8;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256;
    v13[2] = sub_1000E7710;
    v13[3] = &unk_10044A738;
    v9 = _Block_copy(v13);
    v10 = v14;
    swift_retain(v8);
    objc_msgSend(a1, "setLibraryIdentifiersWithDatabaseID:block:", v6, v9, swift_release(v10).n128_f64[0]);

    _Block_release(v9);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v8, "", 129, 338, 78, 1, v11);
    swift_release(v7);
    swift_release(v8);
    if ((isEscapingClosureAtFileLocation & 1) != 0)
    {
      __break(1u);
LABEL_6:
      __break(1u);
    }
  }
}

uint64_t sub_1000E7710(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain(a2);
  v3(a2);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_1000E774C(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_1000E776C(uint64_t a1, void *a2)
{
  void (*v2)(void);
  id v3;

  v2 = *(void (**)(void))(a1 + 32);
  v3 = a2;
  v2();

}

uint64_t LibraryAddable.hasLoadedLibraryAddedProperty.getter()
{
  void *v0;

  if ((objc_msgSend(v0, "hasLoadedValueForKey:", MPModelPropertyAlbumLibraryAdded) & 1) != 0
    || (objc_msgSend(v0, "hasLoadedValueForKey:", MPModelPropertyMovieLibraryAdded) & 1) != 0
    || (objc_msgSend(v0, "hasLoadedValueForKey:", MPModelPropertyPlaylistLibraryAdded) & 1) != 0
    || (objc_msgSend(v0, "hasLoadedValueForKey:", MPModelPropertySongLibraryAdded) & 1) != 0
    || (objc_msgSend(v0, "hasLoadedValueForKey:", MPModelPropertyTVEpisodeLibraryAdded) & 1) != 0
    || (objc_msgSend(v0, "hasLoadedValueForKey:", MPModelPropertyTVSeasonLibraryAdded) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return (uint64_t)objc_msgSend(v0, "hasLoadedValueForKey:", MPModelPropertyArtistLibraryAdded);
  }
}

BOOL LibraryAddable.isUserLibraryAddable.getter()
{
  uint64_t v0;
  id v1;
  char *v2;

  v1 = objc_msgSend(objc_allocWithZone((Class)MPLibraryAddStatusObserver), "init");
  objc_msgSend(v1, "configureWithModelObject:", v0);
  v2 = (char *)objc_msgSend(v1, "currentStatus");

  return (unint64_t)(v2 - 1) < 3;
}

id sub_1000E78F0()
{
  void *v0;

  return objc_msgSend(v0, "isLibraryAdded");
}

BOOL PlaylistAddable.isPlaylistAddEligible.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;

  v5 = objc_opt_self(MPModelSong);
  v6 = (void *)swift_dynamicCastObjCClass(v2, v5);
  return (!v6 || (objc_msgSend(v6, "isArtistUploadedContent") & 1) == 0)
      && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2 + 8) + 16))(a1) & 1) != 0;
}

Swift::String_optional __swiftcall MPModelObject.genericModelRelationshipKey()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  Swift::String_optional result;

  objc_opt_self(MPModelAlbum);
  if (swift_dynamicCastObjCClass(v0))
  {
    v1 = &MPModelRelationshipGenericAlbum;
  }
  else
  {
    objc_opt_self(MPModelArtist);
    if (swift_dynamicCastObjCClass(v0))
    {
      v1 = &MPModelRelationshipGenericArtist;
    }
    else
    {
      objc_opt_self(MPModelComposer);
      if (swift_dynamicCastObjCClass(v0))
      {
        v1 = &MPModelRelationshipGenericComposer;
      }
      else
      {
        objc_opt_self(MPModelCurator);
        if (swift_dynamicCastObjCClass(v0))
        {
          v1 = &MPModelRelationshipGenericCurator;
        }
        else
        {
          objc_opt_self(MPModelGenre);
          if (swift_dynamicCastObjCClass(v0))
          {
            v1 = &MPModelRelationshipGenericGenre;
          }
          else
          {
            objc_opt_self(MPModelMovie);
            if (swift_dynamicCastObjCClass(v0))
            {
              v1 = &MPModelRelationshipGenericMovie;
            }
            else
            {
              objc_opt_self(MPModelPlaylist);
              if (swift_dynamicCastObjCClass(v0))
              {
                v1 = &MPModelRelationshipGenericPlaylist;
              }
              else
              {
                objc_opt_self(MPModelRadioStation);
                if (swift_dynamicCastObjCClass(v0))
                {
                  v1 = &MPModelRelationshipGenericRadioStation;
                }
                else
                {
                  objc_opt_self(MPModelSong);
                  if (swift_dynamicCastObjCClass(v0))
                  {
                    v1 = &MPModelRelationshipGenericSong;
                  }
                  else
                  {
                    objc_opt_self(MPModelTVEpisode);
                    if (swift_dynamicCastObjCClass(v0))
                    {
                      v1 = &MPModelRelationshipGenericTVEpisode;
                    }
                    else
                    {
                      objc_opt_self(MPModelTVSeason);
                      if (swift_dynamicCastObjCClass(v0))
                      {
                        v1 = &MPModelRelationshipGenericTVSeason;
                      }
                      else
                      {
                        objc_opt_self(MPModelTVShow);
                        v2 = swift_dynamicCastObjCClass(v0);
                        if (!v2)
                        {
                          v3 = 0;
                          goto LABEL_27;
                        }
                        v1 = &MPModelRelationshipGenericTVShow;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
LABEL_27:
  result.value._object = v3;
  result.value._countAndFlagsBits = v2;
  return result;
}

uint64_t MPModelObject.MediaKitPlayableKind.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000E7BBC
                                                            + 4 * asc_10038B7D0[a1]))(0x73676E6F73, 0xE500000000000000);
}

uint64_t sub_1000E7BBC()
{
  return 0x6F736970652D7674;
}

uint64_t sub_1000E7BDC()
{
  return 0x73776F68732D7674;
}

uint64_t sub_1000E7BF4()
{
  return 0x646564616F6C7075;
}

uint64_t sub_1000E7C28()
{
  return 0x736E6F6974617473;
}

uint64_t sub_1000E7C40()
{
  return 0x69762D636973756DLL;
}

uint64_t sub_1000E7C60()
{
  return 0x6F6D2D636973756DLL;
}

uint64_t sub_1000E7C80()
{
  return 0x7473696C79616C70;
}

uint64_t sub_1000E7C9C()
{
  return 0x736D75626C61;
}

uint64_t sub_1000E7CB0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = *a2;
  v3 = MPModelObject.MediaKitPlayableKind.rawValue.getter(*a1);
  v5 = v4;
  v6 = MPModelObject.MediaKitPlayableKind.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_1000E7D38()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = MPModelObject.MediaKitPlayableKind.rawValue.getter(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1000E7D98(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = MPModelObject.MediaKitPlayableKind.rawValue.getter(*v1);
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000E7DD8()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = MPModelObject.MediaKitPlayableKind.rawValue.getter(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_1000E7E34@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _sSo13MPModelObjectC9MusicCoreE20MediaKitPlayableKindO8rawValueAESgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000E7E60@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = MPModelObject.MediaKitPlayableKind.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t MPModelObject.mediaKitPlayableKind.getter()
{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;
  unsigned int v4;
  unsigned int v5;

  objc_opt_self(MPModelSong);
  v1 = swift_dynamicCastObjCClass(v0);
  if (v1)
  {
    v2 = (void *)v1;
    v3 = v0;
    v4 = objc_msgSend(v2, "isArtistUploadedContent");
    v5 = objc_msgSend(v2, "hasVideo");

    if (v4)
    {
      if (v5)
        return 4;
      else
        return 3;
    }
    else if (v5)
    {
      return 6;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    objc_opt_self(MPModelTVEpisode);
    if (swift_dynamicCastObjCClass(v0))
    {
      return 1;
    }
    else
    {
      objc_opt_self(MPModelTVShow);
      if (swift_dynamicCastObjCClass(v0))
      {
        return 2;
      }
      else
      {
        objc_opt_self(MPModelRadioStation);
        if (swift_dynamicCastObjCClass(v0))
        {
          return 5;
        }
        else
        {
          objc_opt_self(MPModelMovie);
          if (swift_dynamicCastObjCClass(v0))
          {
            return 7;
          }
          else
          {
            objc_opt_self(MPModelPlaylist);
            if (swift_dynamicCastObjCClass(v0))
            {
              return 8;
            }
            else
            {
              objc_opt_self(MPModelAlbum);
              if (swift_dynamicCastObjCClass(v0))
                return 9;
              else
                return 10;
            }
          }
        }
      }
    }
  }
}

uint64_t MPModelObject.FavoriteStatus.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000E8030 + 4 * byte_10038B7DA[a1]))(0x657469726F766166, 0xE900000000000064);
}

uint64_t sub_1000E8030()
{
  return 0x6C61727475656ELL;
}

uint64_t sub_1000E8048()
{
  return 0x64656B696C736964;
}

uint64_t sub_1000E8060()
{
  return 0x726F707075736E75;
}

void sub_1000E8080(char *a1)
{
  sub_1000277CC(*a1);
}

void sub_1000E808C()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_1000E80DC()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6C61727475656ELL, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

void sub_1000E8154()
{
  __asm { BR              X10 }
}

uint64_t sub_1000E8194(uint64_t a1)
{
  String.hash(into:)(a1, 0x6C61727475656ELL, 0xE700000000000000);
  return swift_bridgeObjectRelease(0xE700000000000000);
}

void sub_1000E81F8()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_1000E8244()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6C61727475656ELL, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

unint64_t sub_1000E82BC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _sSo13MPModelObjectC9MusicCoreE14FavoriteStatusO8rawValueAESgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000E82E8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1000E831C + 4 * byte_10038B7EA[*v0]))();
}

void sub_1000E831C(_QWORD *a1@<X8>)
{
  *a1 = 0x6C61727475656ELL;
  a1[1] = 0xE700000000000000;
}

void sub_1000E8338(_QWORD *a1@<X8>)
{
  *a1 = 0x64656B696C736964;
  a1[1] = 0xE800000000000000;
}

void sub_1000E8354(_QWORD *a1@<X8>)
{
  *a1 = 0x726F707075736E75;
  a1[1] = 0xEB00000000646574;
}

uint64_t MPModelObject.favoriteStatus.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t result;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  char v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void *v24;
  id v25;
  void *v26;
  unsigned __int8 v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;

  v1 = v0;
  objc_opt_self(MPModelSong);
  v2 = swift_dynamicCastObjCClass(v0);
  if (v2
    || (objc_opt_self(MPModelAlbum), (v2 = swift_dynamicCastObjCClass(v0)) != 0)
    || (objc_opt_self(MPModelPlaylist), (v2 = swift_dynamicCastObjCClass(v0)) != 0))
  {
    v3 = (void *)v2;
    v4 = v1;
LABEL_5:
    v5 = objc_msgSend(v3, "isFavorite");
    v6 = objc_msgSend(v3, "isDisliked");
    v7 = v6;
    if (v5)
    {
      if ((v6 & 1) == 0)
      {

        return 0;
      }
LABEL_28:
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000004DLL, 0x80000001003B1780, "MusicCore/MediaPlayer+Music.swift", 33, 2, 513, 0);
      __break(1u);
      return result;
    }

    v9 = v7 == 0;
    goto LABEL_9;
  }
  objc_opt_self(MPModelArtist);
  v10 = swift_dynamicCastObjCClass(v0);
  if (v10)
  {
    v3 = (void *)v10;
    v11 = qword_10048C658;
    v4 = v1;
    if (v11 != -1)
      swift_once(&qword_10048C658, sub_1000B3BEC);
    v12 = static ApplicationCapabilities.Controller.shared;
    KeyPath = swift_getKeyPath(&unk_10038B820);
    v14 = swift_getKeyPath(&unk_10038B848);
    static Published.subscript.getter(&v30, v12, KeyPath, v14);
    swift_release(KeyPath);
    swift_release(v14);
    v15 = v31;
    v16 = v32;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if ((v15 & 1) != 0)
      goto LABEL_5;
    goto LABEL_25;
  }
  objc_opt_self(MPModelCreditsArtist);
  v17 = swift_dynamicCastObjCClass(v0);
  if (!v17)
    return 3;
  v18 = (void *)v17;
  v19 = qword_10048C658;
  v4 = v1;
  if (v19 != -1)
    swift_once(&qword_10048C658, sub_1000B3BEC);
  v20 = static ApplicationCapabilities.Controller.shared;
  v21 = swift_getKeyPath(&unk_10038B820);
  v22 = swift_getKeyPath(&unk_10038B848);
  static Published.subscript.getter(&v30, v20, v21, v22);
  swift_release(v21);
  swift_release(v22);
  v23 = v31;
  v24 = v32;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if ((v23 & 1) == 0 || (v25 = objc_msgSend(v18, "artist")) == 0)
  {
LABEL_25:

    return 3;
  }
  v26 = v25;
  v27 = objc_msgSend(v25, "isFavorite");
  v28 = objc_msgSend(v26, "isDisliked");
  v29 = v28;
  if ((v27 & 1) != 0)
  {
    if ((v28 & 1) == 0)
    {

      return 0;
    }
    goto LABEL_28;
  }

  v9 = v29 == 0;
LABEL_9:
  if (v9)
    return 1;
  else
    return 2;
}

void *MPModelAlbum.orphanMusicVideo.getter()
{
  void *v0;
  id v1;
  void *v2;

  if ((uint64_t)objc_msgSend(v0, "trackCount") > 1)
    return 0;
  v1 = objc_msgSend(v0, "representativeSong");
  v2 = v1;
  if (v1 && (objc_msgSend(v1, "hasVideo") & 1) == 0)
  {

    return 0;
  }
  return v2;
}

uint64_t static MPModelPlaylistVariants.playlistsAndFolders.getter()
{
  return 223;
}

uint64_t Array<A>.union()(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t WitnessTable;
  _QWORD v7[5];
  id v8[2];
  uint64_t v9;

  v8[1] = a1;
  v8[0] = objc_msgSend((id)objc_opt_self(MPPropertySet), "emptyPropertySet");
  v7[2] = a2;
  v3 = type metadata accessor for Array(0);
  v4 = sub_1000087DC(0, (unint64_t *)&qword_1004918E0, MPPropertySet_ptr);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v3);
  Sequence.reduce<A>(_:_:)(&v9, v8, sub_1000EBC48, v7, v3, v4, WitnessTable);

  return v9;
}

id SnapshotIdentifier.Lazy.identifiers.getter(uint64_t a1)
{
  return sub_1000E8874(a1, (SEL *)&selRef_identifiersForSectionAtIndex_, (SEL *)&selRef_identifiersForItemAtIndexPath_);
}

id SnapshotIdentifier.Lazy.object.getter(uint64_t a1)
{
  return sub_1000E8874(a1, (SEL *)&selRef_sectionAtIndex_, (SEL *)&selRef_itemAtIndexPath_);
}

id sub_1000E8874(uint64_t a1, SEL *a2, SEL *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  Class isa;
  id v18;
  void *v20;
  id v21;
  uint64_t v22;

  v6 = v3;
  v8 = type metadata accessor for IndexPath(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (uint64_t *)((char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v15 + 16))(v14, v6, a1);
  if (swift_getEnumCaseMultiPayload(v14, a1) == 1)
  {
    v16 = *(void **)((char *)v14 + *(int *)(sub_100005574(&qword_1004918E8) + 48));
    (*(void (**)(char *, _QWORD *, uint64_t))(v9 + 32))(v12, v14, v8);
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    v18 = objc_msgSend(v16, *a3, isa);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    return v18;
  }
  else
  {
    v20 = (void *)v14[1];
    v21 = objc_msgSend(v20, *a2, *v14);

    return v21;
  }
}

id SnapshotIdentifier.identifiers.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id *v13;
  uint64_t v14;
  id v15;
  id v16;
  id v18;
  uint64_t v19;

  v5 = v4;
  v7 = type metadata accessor for SnapshotIdentifier.Lazy(0, *(_QWORD *)(a1 + 16), a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v19 - v10;
  __chkstk_darwin(v9);
  v13 = (id *)((char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(id *, uint64_t, uint64_t))(v14 + 16))(v13, v5, a1);
  if (swift_getEnumCaseMultiPayload(v13, a1) == 1)
  {
    v15 = *v13;
    v16 = objc_msgSend(*v13, "identifiers");

    return v16;
  }
  else
  {
    (*(void (**)(char *, id *, uint64_t))(v8 + 32))(v11, v13, v7);
    v18 = SnapshotIdentifier.Lazy.identifiers.getter(v7);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    return v18;
  }
}

id SnapshotIdentifier.object.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  uint64_t v17;

  v5 = v4;
  v7 = type metadata accessor for SnapshotIdentifier.Lazy(0, *(_QWORD *)(a1 + 16), a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v17 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v13, v5, a1);
  if (swift_getEnumCaseMultiPayload(v13, a1) == 1)
    return *(id *)v13;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v13, v7);
  v15 = SnapshotIdentifier.Lazy.object.getter(v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return v15;
}

unint64_t SnapshotIdentifier.debugDescription.getter(uint64_t a1)
{
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t WitnessTable;
  id v11;
  Swift::String v12;
  unint64_t v13;
  uint64_t v14;

  v13 = SnapshotIdentifier.description.getter(a1);
  v14 = v2;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v3._countAndFlagsBits = 0x7463656A626F202CLL;
  v3._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v3);
  v7 = SnapshotIdentifier.object.getter(a1, v4, v5, v6);
  v11 = v7;
  v8 = *(_QWORD *)(a1 + 16);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v8);
  DefaultStringInterpolation.appendInterpolation<A>(_:)(&v11, v8, WitnessTable);

  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  return v13;
}

unint64_t SnapshotIdentifier.description.getter(uint64_t a1)
{
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;

  v2._countAndFlagsBits = _typeName(_:qualified:)(*(_QWORD *)(a1 + 16), 0);
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 2112062;
  v3._object = (void *)0xE300000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 60;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v8 = SnapshotIdentifier.identifiers.getter(a1, v5, v6, v7);
  v9 = objc_msgSend(v8, "description");
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);

  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x696669746E656469;
  v14._object = (void *)0xEB000000003D7265;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  return 0xD000000000000012;
}

void SnapshotIdentifier.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v5;

  v5 = SnapshotIdentifier.identifiers.getter(a2, a2, a3, a4);
  NSObject.hash(into:)(a1);

}

uint64_t static SnapshotIdentifier.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  char v15;

  sub_1000087DC(0, (unint64_t *)&qword_1004918F0, NSObject_ptr);
  v6 = type metadata accessor for SnapshotIdentifier(0, a3, v4, v5);
  v10 = SnapshotIdentifier.identifiers.getter(v6, v7, v8, v9);
  v14 = SnapshotIdentifier.identifiers.getter(v6, v11, v12, v13);
  v15 = static NSObject.== infix(_:_:)(v10, v14);

  return v15 & 1;
}

Swift::Int SnapshotIdentifier.hashValue.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7);
  v5 = SnapshotIdentifier.identifiers.getter(a1, v2, v3, v4);
  NSObject.hash(into:)(v7);

  return Hasher._finalize()();
}

Swift::Int sub_1000E8F14(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  SnapshotIdentifier.hash(into:)((uint64_t)v6, a2, v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_1000E8F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static SnapshotIdentifier.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16));
}

void static NSDiffableDataSourceSnapshot<>.enumerateSnapshotIdentifierItems(from:using:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  __n128 v17;
  _QWORD aBlock[5];
  uint64_t v19;
  char v20;

  v20 = 0;
  v12 = (_QWORD *)swift_allocObject(&unk_10044A008, 72, 7);
  v12[2] = a4;
  v12[3] = a5;
  v12[4] = a6;
  v12[5] = a1;
  v12[6] = a2;
  v12[7] = a3;
  v12[8] = &v20;
  v13 = swift_allocObject(&unk_10044A030, 32, 7);
  *(_QWORD *)(v13 + 16) = sub_1000EBCC8;
  *(_QWORD *)(v13 + 24) = v12;
  aBlock[4] = sub_100009BB0;
  v19 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E91E4;
  aBlock[3] = &unk_10044A048;
  v14 = _Block_copy(aBlock);
  v15 = v19;
  v16 = a1;
  swift_retain(v13);
  objc_msgSend(v16, "enumerateItemIdentifiersUsingBlock:", v14, swift_release(v15).n128_f64[0]);
  _Block_release(v14);
  LOBYTE(v16) = swift_isEscapingClosureAtFileLocation(v13, "", 129, 656, 45, 1, v17);
  swift_release(v12);
  swift_release(v13);
  if ((v16 & 1) != 0)
    __break(1u);
}

uint64_t sub_1000E90C0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t, char *, _BYTE *), uint64_t a6, _BYTE *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v24;
  _BYTE *v25;

  v25 = (_BYTE *)a3;
  v13 = type metadata accessor for SnapshotIdentifier(0, a9, a3, (uint64_t)a4);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v24 - v15;
  v17 = *(int *)(sub_100005574(&qword_1004918E8) + 48);
  v18 = type metadata accessor for IndexPath(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, a1, v18);
  *(_QWORD *)&v16[v17] = a4;
  v21 = type metadata accessor for SnapshotIdentifier.Lazy(0, a9, v19, v20);
  swift_storeEnumTagMultiPayload(v16, v21, 1);
  swift_storeEnumTagMultiPayload(v16, v13, 0);
  v22 = a4;
  a5(a1, v16, a7);
  *v25 = *a7;
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t sub_1000E91E4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, id, uint64_t);
  id v13;
  uint64_t v15;

  v8 = type metadata accessor for IndexPath(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void (**)(char *, id, uint64_t))(a1 + 32);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v13 = a3;
  v12(v11, v13, a4);

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

void static NSDiffableDataSourceSnapshot<>.enumerateSnapshotIdentifierItems(from:inSection:using:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  __n128 v19;
  _QWORD aBlock[5];
  uint64_t v21;
  char v22;

  v22 = 0;
  v14 = (_QWORD *)swift_allocObject(&unk_10044A080, 80, 7);
  v14[2] = a5;
  v14[3] = a6;
  v14[4] = a7;
  v14[5] = a2;
  v14[6] = a1;
  v14[7] = a3;
  v14[8] = a4;
  v14[9] = &v22;
  v15 = swift_allocObject(&unk_10044A0A8, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_1000EBD2C;
  *(_QWORD *)(v15 + 24) = v14;
  aBlock[4] = sub_100009BB0;
  v21 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E9520;
  aBlock[3] = &unk_10044A0C0;
  v16 = _Block_copy(aBlock);
  v17 = v21;
  v18 = a1;
  swift_retain(v15);
  objc_msgSend(v18, "enumerateItemIdentifiersInSectionAtIndex:usingBlock:", a2, v16, swift_release(v17).n128_f64[0]);
  _Block_release(v16);
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation(v15, "", 129, 668, 67, 1, v19);
  swift_release(v14);
  swift_release(v15);
  if ((a2 & 1) != 0)
    __break(1u);
}

uint64_t sub_1000E9408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void (*a6)(uint64_t, char *, _BYTE *), uint64_t a7, _BYTE *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v25;
  _BYTE *v26;

  v25 = a7;
  v26 = (_BYTE *)a3;
  v15 = type metadata accessor for SnapshotIdentifier(0, a10, a3, a4);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v25 - v17;
  v19 = *(int *)(sub_100005574(&qword_1004918E8) + 48);
  IndexPath.init(item:section:)(a1, a4);
  *(_QWORD *)&v18[v19] = a5;
  v22 = type metadata accessor for SnapshotIdentifier.Lazy(0, a10, v20, v21);
  swift_storeEnumTagMultiPayload(v18, v22, 1);
  swift_storeEnumTagMultiPayload(v18, v15, 0);
  v23 = a5;
  a6(a1, v18, a8);
  *v26 = *a8;
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

void sub_1000E9520(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  void (*v6)(uint64_t, id, uint64_t);
  id v7;

  v6 = *(void (**)(uint64_t, id, uint64_t))(a1 + 32);
  v7 = a3;
  v6(a2, v7, a4);

}

uint64_t static NSDiffableDataSourceSnapshot<>.snapshotIdentifiers(from:inSection:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD v12[7];
  uint64_t v13;

  v10 = type metadata accessor for SnapshotIdentifier(0, a4, a3, a4);
  v13 = static Array._allocateUninitialized(_:)(0, v10);
  v12[2] = a3;
  v12[3] = a4;
  v12[4] = a5;
  v12[5] = &v13;
  static NSDiffableDataSourceSnapshot<>.enumerateSnapshotIdentifierItems(from:inSection:using:)(a1, a2, (uint64_t)sub_1000EBD70, (uint64_t)v12, a3, a4, a5);
  return v13;
}

uint64_t sub_1000E9604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v7 = type metadata accessor for SnapshotIdentifier(0, a6, a3, a4);
  __chkstk_darwin(v7);
  v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v13 - v8, a2, v7);
  v11 = type metadata accessor for Array(0);
  return Array.append(_:)(v9, v11);
}

void static NSDiffableDataSourceSnapshot<>.enumerateSnapshotIdentifierSections(from:using:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  __n128 v17;
  _QWORD aBlock[5];
  uint64_t v19;
  char v20;

  v20 = 0;
  v12 = (_QWORD *)swift_allocObject(&unk_10044A0F8, 72, 7);
  v12[2] = a4;
  v12[3] = a5;
  v12[4] = a6;
  v12[5] = a1;
  v12[6] = a2;
  v12[7] = a3;
  v12[8] = &v20;
  v13 = swift_allocObject(&unk_10044A120, 32, 7);
  *(_QWORD *)(v13 + 16) = sub_1000EBD7C;
  *(_QWORD *)(v13 + 24) = v12;
  aBlock[4] = sub_10000AD24;
  v19 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E9520;
  aBlock[3] = &unk_10044A138;
  v14 = _Block_copy(aBlock);
  v15 = v19;
  v16 = a1;
  swift_retain(v13);
  objc_msgSend(v16, "enumerateSectionIdentifiersUsingBlock:", v14, swift_release(v15).n128_f64[0]);
  _Block_release(v14);
  LOBYTE(v16) = swift_isEscapingClosureAtFileLocation(v13, "", 129, 691, 48, 1, v17);
  swift_release(v12);
  swift_release(v13);
  if ((v16 & 1) != 0)
    __break(1u);
}

uint64_t sub_1000E97F0(uint64_t a1, uint64_t a2, _BYTE *a3, void *a4, void (*a5)(uint64_t, _QWORD *, _BYTE *), uint64_t a6, _BYTE *a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v23;

  v14 = type metadata accessor for SnapshotIdentifier(0, a8, (uint64_t)a3, (uint64_t)a4);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (uint64_t *)((char *)&v23 - v16);
  *v17 = a1;
  v17[1] = a4;
  v20 = type metadata accessor for SnapshotIdentifier.Lazy(0, a8, v18, v19);
  swift_storeEnumTagMultiPayload(v17, v20, 0);
  swift_storeEnumTagMultiPayload(v17, v14, 0);
  v21 = a4;
  a5(a1, v17, a7);
  *a3 = *a7;
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v15 + 8))(v17, v14);
}

void static NSDiffableDataSourceSnapshot<>.snapshot(from:)(void *a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t WitnessTable;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  id v22;
  __n128 v23;
  __n128 v24;
  void **aBlock;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v28;
  uint64_t (*v29)();
  _QWORD *v30;

  v10 = type metadata accessor for SnapshotIdentifier(255, a3, a3, a4);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for SnapshotIdentifier<A>, v10);
  aBlock = a2;
  v26 = v10;
  v27 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))a4;
  v28 = (void *)WitnessTable;
  v12 = type metadata accessor for NSDiffableDataSourceSnapshot(0, &aBlock);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&aBlock - v14;
  NSDiffableDataSourceSnapshot.init()(a2, v10, a4, WitnessTable);
  v16 = objc_opt_self(MPSectionedCollection);
  v17 = swift_dynamicCastObjCClassUnconditional(a1, v16, 0, 0, 0);
  v18 = (_QWORD *)swift_allocObject(&unk_10044A170, 56, 7);
  v18[2] = a2;
  v18[3] = a3;
  v18[4] = a4;
  v18[5] = v15;
  v18[6] = v17;
  v19 = (_QWORD *)swift_allocObject(&unk_10044A198, 56, 7);
  v19[2] = a2;
  v19[3] = a3;
  v19[4] = a4;
  v19[5] = sub_1000EBDE0;
  v19[6] = v18;
  v29 = sub_1000EBE00;
  v30 = v19;
  aBlock = _NSConcreteStackBlock;
  v26 = 1107296256;
  v27 = sub_1000E9C28;
  v28 = &unk_10044A1B0;
  v20 = _Block_copy(&aBlock);
  v21 = v30;
  v22 = a1;
  swift_retain(v19);
  objc_msgSend(v22, "enumerateSectionsUsingBlock:", v20, swift_release(v21).n128_f64[0]);
  _Block_release(v20);
  LOBYTE(v22) = swift_isEscapingClosureAtFileLocation(v19, "", 129, 708, 38, 1, v23);
  v24 = swift_release(v19);
  if ((v22 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t, __n128))(v13 + 32))(a5, v15, v12, v24);
    swift_release(v18);
  }
}

uint64_t sub_1000E9AF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[4];

  v14 = sub_100123878(a6, a6);
  v15 = swift_allocObject(v14, ((*(unsigned int *)(v14 + 48) + 7) & 0x1FFFFFFF8) + 8, *(unsigned __int16 *)(v14 + 52) | 7);
  v16 = static Array._adoptStorage(_:count:)(v15, 1);
  *v17 = a1;
  v18 = sub_10003001C(v16);
  v21 = type metadata accessor for SnapshotIdentifier(255, a7, v19, v20);
  swift_unknownObjectRetain(a1);
  v25[0] = a6;
  v25[1] = v21;
  v25[2] = a8;
  v25[3] = swift_getWitnessTable(&protocol conformance descriptor for SnapshotIdentifier<A>, v21);
  v22 = type metadata accessor for NSDiffableDataSourceSnapshot(0, v25);
  NSDiffableDataSourceSnapshot.appendSections(_:)((Swift::OpaquePointer)v18);
  swift_bridgeObjectRelease();
  v23 = static NSDiffableDataSourceSnapshot<>.snapshotIdentifiers(from:inSection:)(a5, a2, a6, a7, a8);
  v25[0] = a1;
  swift_unknownObjectRetain(a1);
  NSDiffableDataSourceSnapshot.appendItems(_:toSection:)(v23, v25, v22);
  swift_unknownObjectRelease(a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000E9C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;

  sub_1000087DC(0, &qword_100490B80, MPModelObject_ptr);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  v9 = swift_unknownObjectRetain(a2);
  v8(v9, a3, a4);
  return swift_unknownObjectRelease(a2);
}

void static NSDiffableDataSourceSnapshot<>.snapshot(from:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  __n128 v21;
  __n128 v22;
  void **aBlock;
  uint64_t v24;
  void (*v25)(uint64_t, void *);
  void *v26;
  uint64_t (*v27)();
  uint64_t v28;

  v8 = type metadata accessor for SnapshotIdentifier(255, a2, a3, a4);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for SnapshotIdentifier<A>, v8);
  aBlock = (void **)&type metadata for String;
  v24 = v8;
  v25 = (void (*)(uint64_t, void *))&protocol witness table for String;
  v26 = (void *)WitnessTable;
  v10 = type metadata accessor for NSDiffableDataSourceSnapshot(0, &aBlock);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&aBlock - v12;
  NSDiffableDataSourceSnapshot.init()(&type metadata for String, v8, &protocol witness table for String, WitnessTable);
  v14 = objc_opt_self(MPSectionedCollection);
  v15 = swift_dynamicCastObjCClassUnconditional(a1, v14, 0, 0, 0);
  v16 = (_QWORD *)swift_allocObject(&unk_10044A1E8, 40, 7);
  v16[2] = a2;
  v16[3] = v13;
  v16[4] = v15;
  v17 = swift_allocObject(&unk_10044A210, 32, 7);
  *(_QWORD *)(v17 + 16) = sub_1000EBE20;
  *(_QWORD *)(v17 + 24) = v16;
  v27 = sub_10000AD24;
  v28 = v17;
  aBlock = _NSConcreteStackBlock;
  v24 = 1107296256;
  v25 = sub_1000E9FD0;
  v26 = &unk_10044A228;
  v18 = _Block_copy(&aBlock);
  v19 = v28;
  v20 = a1;
  swift_retain(v17);
  objc_msgSend(v20, "enumerateSectionsUsingBlock:", v18, swift_release(v19).n128_f64[0]);
  _Block_release(v18);
  LOBYTE(v20) = swift_isEscapingClosureAtFileLocation(v17, "", 129, 725, 38, 1, v21);
  v22 = swift_release(v17);
  if ((v20 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t, __n128))(v11 + 32))(a5, v13, v10, v22);
    swift_release(v16);
  }
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t WitnessTable;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  _QWORD v20[6];

  v9 = type metadata accessor for SnapshotIdentifier(0, a2, a3, a4);
  v12 = type metadata accessor for SnapshotIdentifier(0, a3, v10, v11);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for SnapshotIdentifier<A>, v9);
  v14 = swift_getWitnessTable(&protocol conformance descriptor for SnapshotIdentifier<A>, v12);
  NSDiffableDataSourceSnapshot.init()(v9, v12, WitnessTable, v14);
  v15 = objc_opt_self(MPSectionedCollection);
  v16 = (void *)swift_dynamicCastObjCClassUnconditional(a1, v15, 0, 0, 0);
  v17 = objc_opt_self(MPSectionedCollection);
  v20[2] = a2;
  v20[3] = a3;
  v20[4] = a5;
  v20[5] = swift_dynamicCastObjCClassUnconditional(a1, v17, 0, 0, 0);
  v18 = a1;
  v19 = swift_getWitnessTable(&protocol conformance descriptor for NSObject, a3);
  static NSDiffableDataSourceSnapshot<>.enumerateSnapshotIdentifierSections(from:using:)(v16, (uint64_t)sub_1000EBE3C, (uint64_t)v20, a2, a3, v19);

}

uint64_t sub_1000E9EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v10;
  Swift::OpaquePointer v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  uint64_t WitnessTable;

  v10 = sub_100005574((uint64_t *)&unk_100491700);
  v11._rawValue = (void *)swift_allocObject(v10, 48, 7);
  *((_OWORD *)v11._rawValue + 1) = xmmword_100384A80;
  *((_QWORD *)v11._rawValue + 4) = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *((_QWORD *)v11._rawValue + 5) = v12;
  v19 = &type metadata for String;
  v20 = type metadata accessor for SnapshotIdentifier(255, a6, v13, v14);
  v21 = &protocol witness table for String;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for SnapshotIdentifier<A>, v20);
  v15 = type metadata accessor for NSDiffableDataSourceSnapshot(0, &v19);
  NSDiffableDataSourceSnapshot.appendSections(_:)(v11);
  swift_bridgeObjectRelease();
  v16 = static NSDiffableDataSourceSnapshot<>.snapshotIdentifiers(from:inSection:)(a5, a2, (uint64_t)&type metadata for String, a6, (uint64_t)&protocol witness table for String);
  v19 = (_QWORD *)static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v20 = v17;
  NSDiffableDataSourceSnapshot.appendItems(_:toSection:)(v16, &v19, v15);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_1000E9FD0(uint64_t a1, void *a2)
{
  void (*v2)(void);
  id v3;

  v2 = *(void (**)(void))(a1 + 32);
  v3 = a2;
  v2();

}

uint64_t sub_1000EA148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t WitnessTable;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[4];

  v30 = a2;
  v31 = a6;
  v32 = a1;
  v33 = a5;
  v9 = type metadata accessor for SnapshotIdentifier(255, a6, a3, a4);
  v10 = type metadata accessor for Optional(0, v9);
  v34 = *(_QWORD *)(v10 - 8);
  v35 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v30 - v11;
  v13 = type metadata accessor for _ContiguousArrayStorage(0, v9);
  v14 = *(_QWORD *)(v9 - 8);
  v15 = swift_allocObject(v13, ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72), *(unsigned __int8 *)(v14 + 80) | 7);
  v16 = static Array._adoptStorage(_:count:)(v15, 1);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  v17(v18, a2, v9);
  v19 = sub_10003001C(v16);
  v22 = type metadata accessor for SnapshotIdentifier(255, a7, v20, v21);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for SnapshotIdentifier<A>, v9);
  v24 = swift_getWitnessTable(&protocol conformance descriptor for SnapshotIdentifier<A>, v22);
  v36[0] = v9;
  v36[1] = v22;
  v36[2] = WitnessTable;
  v36[3] = v24;
  v25 = type metadata accessor for NSDiffableDataSourceSnapshot(0, v36);
  NSDiffableDataSourceSnapshot.appendSections(_:)((Swift::OpaquePointer)v19);
  swift_bridgeObjectRelease();
  v26 = v31;
  v27 = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v31);
  v28 = static NSDiffableDataSourceSnapshot<>.snapshotIdentifiers(from:inSection:)(v33, v32, v26, a7, v27);
  v17((uint64_t)v12, v30, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v9);
  NSDiffableDataSourceSnapshot.appendItems(_:toSection:)(v28, v12, v25);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v12, v35);
}

uint64_t MPModelPlaylist.supportsSing.getter()
{
  void *v0;

  if ((objc_msgSend(v0, "traits") & 0x100) != 0)
    return MSVDeviceSupportsVocalAttenuation();
  else
    return 0;
}

id MPModelPlaylist.coverArtworkCatalog.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Class isa;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;

  v1 = sub_100005574((uint64_t *)&unk_100491700);
  v2 = swift_allocObject(v1, 80, 7);
  *(_OWORD *)(v2 + 16) = xmmword_100384A40;
  *(_QWORD *)(v2 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistName);
  *(_QWORD *)(v2 + 40) = v3;
  *(_QWORD *)(v2 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistCoverArtworkRecipe);
  *(_QWORD *)(v2 + 56) = v4;
  *(_QWORD *)(v2 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistUserEditableComponents);
  *(_QWORD *)(v2 + 72) = v5;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v7 = objc_msgSend((id)objc_opt_self(MPPropertySet), "propertySetWithProperties:", isa);

  LODWORD(isa) = objc_msgSend(v0, "hasLoadedValuesForPropertySet:", v7);
  if (!(_DWORD)isa)
    return 0;
  v8 = objc_msgSend(v0, "name");
  if (!v8)
    return 0;
  v9 = v8;
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v12 = v11;

  if ((objc_msgSend(v0, "userEditableComponents") & 2) == 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v13 = objc_msgSend(v0, "coverArtworkRecipe");
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v16 = v15;

  v17 = _s9MusicCore14PlaylistCoversO12ArtworkTokenC7rawJSON13playlistTitleAESgSS_SStcfC_0(v14, v16, v10, v12);
  if (!v17)
    return 0;
  v18 = v17;
  v19 = objc_msgSend(v0, "artworkCatalog");
  if (v19)
  {
    v21 = v19;

  }
  else
  {
    if (qword_10048C8F0 != -1)
      swift_once(&qword_10048C8F0, sub_10019C6CC);
    v23 = type metadata accessor for Logger(0, v20);
    sub_1000086B4(v23, (uint64_t)static Logger.playlistCovers);
    v24 = v0;
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc(12, -1);
      v28 = swift_slowAlloc(32, -1);
      v35 = v28;
      *(_DWORD *)v27 = 136446210;
      v29 = objc_msgSend(v24, "coverArtworkRecipe");
      v30 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      v32 = v31;

      *(_QWORD *)(v27 + 4) = sub_100019400(v30, v32, &v35);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "No server artwork catalog available for playlist with coverArtworkRecipe=%{public}s", (uint8_t *)v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

    }
    else
    {

    }
    v33 = qword_10048C8A0;
    v34 = v18;
    if (v33 != -1)
      swift_once(&qword_10048C8A0, sub_10018DCCC);
    v21 = objc_msgSend(objc_allocWithZone((Class)MPArtworkCatalog), "initWithToken:dataSource:", v34, static PlaylistCovers.ArtworkDataSource.shared);

  }
  return v21;
}

void *static MPModelPlaylist.favoriteSongsRequest(labeled:)(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  NSString v6;

  sub_100005574((uint64_t *)&unk_100491900);
  static MPModelLibraryRequest<>.favoriteSongs.getter();
  v4 = v3;
  if (a2 && v3)
  {
    v5 = v3;
    v6 = String._bridgeToObjectiveC()();
    objc_msgSend(v5, "setLabel:", v6);

  }
  return v4;
}

void static MPModelLibraryRequest<>.favoriteSongs.getter()
{
  id v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  void *v15;
  id v16;
  Class isa;
  id v18;
  id v19;
  id v20;
  NSString v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  id v29;
  __n128 v30;
  uint64_t v31;
  Class v32;
  void *v33;
  uint64_t v34;
  __int128 aBlock;
  void (*v36)(uint64_t, void *);
  void *v37;
  uint64_t (*v38)();
  uint64_t v39;
  uint64_t v40;
  _OWORD v41[2];

  v0 = objc_msgSend((id)objc_opt_self(MPMediaQuery), "favoriteSongsPlaylist");
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend(v0, "valueForProperty:", MPMediaItemPropertyPersistentID);
    if (v2)
    {
      v3 = v2;
      _bridgeAnyObjectToAny(_:)(v2);
      swift_unknownObjectRelease(v3);
    }
    else
    {
      memset(v41, 0, sizeof(v41));
    }
    sub_1000AEB5C((uint64_t)v41, (uint64_t)&aBlock);
    if (!v37)
    {

      sub_100098B58((uint64_t)&aBlock);
      return;
    }
    if ((swift_dynamicCast(&v40, &aBlock, (char *)&type metadata for Any + 8, &type metadata for Int64, 6) & 1) == 0)
    {

      return;
    }
    v34 = v40;
    v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), "init");
    v5 = sub_100005574((uint64_t *)&unk_100491910);
    v6 = swift_allocObject(v5, 56, 7);
    *(_OWORD *)(v6 + 16) = xmmword_100384B00;
    *(_QWORD *)(v6 + 32) = objc_msgSend((id)objc_opt_self(MPModelSong), "kindWithVariants:", 7);
    v7 = (void *)objc_opt_self(NSUserDefaults);
    v8 = objc_msgSend(v7, "standardUserDefaults");
    strcpy((char *)v41, "showAllTVShows");
    HIBYTE(v41[0]) = -18;
    v9 = sub_10000D478();
    NSUserDefaults.subscript.getter((uint64_t)v41, (uint64_t)&type metadata for String, v9, &aBlock);
    if (v37)
    {
      if ((swift_dynamicCast(v41, &aBlock, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
      {
        v10 = v41[0];

        if ((v10 & 1) != 0)
        {
          v11 = 3;
          goto LABEL_17;
        }
LABEL_16:
        v11 = 2;
LABEL_17:
        *(_QWORD *)(v6 + 40) = objc_msgSend((id)objc_opt_self(MPModelTVEpisode), "kindWithVariants:", v11);
        v12 = objc_msgSend(v7, "standardUserDefaults");
        strcpy((char *)v41, "showAllTVShows");
        HIBYTE(v41[0]) = -18;
        NSUserDefaults.subscript.getter((uint64_t)v41, (uint64_t)&type metadata for String, v9, &aBlock);
        if (v37)
        {
          if ((swift_dynamicCast(v41, &aBlock, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
          {
            v13 = v41[0];

            if ((v13 & 1) != 0)
            {
              v14 = 3;
              goto LABEL_24;
            }
LABEL_23:
            v14 = 2;
LABEL_24:
            v15 = (void *)objc_opt_self(MPModelPlaylistEntry);
            v16 = objc_msgSend((id)objc_opt_self(MPModelMovie), "kindWithVariants:", v14);
            *(_QWORD *)(v6 + 48) = v16;
            *(_QWORD *)&aBlock = v6;
            specialized Array._endMutation()(v16);
            sub_100005574((uint64_t *)&unk_100491290);
            isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            v18 = objc_msgSend(v15, "kindWithKinds:", isa);

            v19 = objc_msgSend((id)objc_opt_self(MPModelPlaylist), "kindWithVariants:playlistEntryKind:options:", 2, v18, 0);
            v20 = v4;
            v21 = String._bridgeToObjectiveC()();
            objc_msgSend(v20, "setLabel:", v21);

            objc_msgSend(v20, "setSectionKind:", v19);
            v33 = v18;
            objc_msgSend(v20, "setItemKind:", v18);
            v22 = swift_allocObject(v5, 40, 7);
            *(_OWORD *)(v22 + 16) = xmmword_100384730;
            v23 = objc_allocWithZone((Class)MPIdentifierSet);
            v24 = swift_allocObject(&unk_10044A260, 24, 7);
            *(_QWORD *)(v24 + 16) = v34;
            v25 = swift_allocObject(&unk_10044A288, 32, 7);
            *(_QWORD *)(v25 + 16) = sub_1000ECFE4;
            *(_QWORD *)(v25 + 24) = v24;
            v38 = sub_10000AD24;
            v39 = v25;
            *(_QWORD *)&aBlock = _NSConcreteStackBlock;
            *((_QWORD *)&aBlock + 1) = 1107296256;
            v36 = sub_1000E776C;
            v37 = &unk_10044A2A0;
            v26 = _Block_copy(&aBlock);
            v27 = v39;
            v28 = v19;
            swift_retain(v25);
            v29 = objc_msgSend(v23, "initWithModelKind:block:", v28, v26, swift_release(v27).n128_f64[0]);

            _Block_release(v26);
            LOBYTE(v27) = swift_isEscapingClosureAtFileLocation(v25, "", 129, 335, 36, 1, v30);
            swift_release(v24);
            swift_release(v25);
            if ((v27 & 1) != 0)
            {
              __break(1u);
            }
            else
            {
              *(_QWORD *)(v22 + 32) = v29;
              *(_QWORD *)&aBlock = v22;
              specialized Array._endMutation()(v31);
              sub_1000087DC(0, &qword_100490B78, MPIdentifierSet_ptr);
              v32 = Array._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              objc_msgSend(v20, "setAllowedSectionIdentifiers:", v32);

            }
            return;
          }
        }
        else
        {
          sub_100098B58((uint64_t)&aBlock);
        }

        goto LABEL_23;
      }
    }
    else
    {
      sub_100098B58((uint64_t)&aBlock);
    }

    goto LABEL_16;
  }
}

unint64_t MPNowPlayingAudioFormatBadging.debugDescription.getter(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  Swift::String v3;
  void *object;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;

  switch(a1)
  {
    case 0:
      v1 = 0x6574537973736F6CLL;
      v2 = 0xEB000000006F6572;
      goto LABEL_9;
    case 1:
      v2 = 0xEA0000000000736FLL;
      v1 = 0x6D744179626C6F64;
      goto LABEL_9;
    case 2:
      v1 = 0x64754179626C6F64;
      v2 = 0xEA00000000006F69;
      goto LABEL_9;
    case 3:
      v1 = 0x7373656C73736F6CLL;
      v2 = 0xE800000000000000;
      goto LABEL_9;
    case 4:
      v2 = 0x80000001003B18A0;
      v1 = 0xD000000000000016;
      goto LABEL_9;
    case 5:
      v1 = 0x416C616974617073;
      v2 = 0xEC0000006F696475;
LABEL_9:
      String.append(_:)(*(Swift::String *)&v1);
      break;
    default:
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v3._object;
      String.append(_:)(v3);
      swift_bridgeObjectRelease(object);
      v5._countAndFlagsBits = 62;
      v5._object = (void *)0xE100000000000000;
      String.append(_:)(v5);
      v6._countAndFlagsBits = 0x3C6E776F6E6B6E75;
      v6._object = (void *)0xE800000000000000;
      String.append(_:)(v6);
      swift_bridgeObjectRelease(0xE800000000000000);
      break;
  }
  v7._countAndFlagsBits = 41;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0xD00000000000001FLL;
}

unint64_t sub_1000EAEF8()
{
  uint64_t *v0;

  return MPNowPlayingAudioFormatBadging.debugDescription.getter(*v0);
}

id MPModelPerson.monogramArtworkCatalog.getter()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v7;

  if (!objc_msgSend(v0, "hasLoadedValueForKey:", MPModelPropertyPersonName))
    return 0;
  v1 = objc_msgSend(v0, "name");
  if (v1)
  {
    v2 = v1;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v5 = v4;

  }
  else
  {
    v3 = 0;
    v5 = 0;
  }
  v7 = sub_1000EBA20(v3, v5, 0, 1);
  swift_bridgeObjectRelease();
  return v7;
}

id sub_1000EAFAC()
{
  void *v0;
  id result;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  result = objc_msgSend(v0, "artworkCatalog");
  if (!result)
  {
    if (objc_msgSend(v0, "hasLoadedValueForKey:", MPModelPropertyPersonName))
    {
      v2 = objc_msgSend(v0, "name");
      if (v2)
      {
        v3 = v2;
        v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
        v6 = v5;

      }
      else
      {
        v4 = 0;
        v6 = 0;
      }
      v7 = sub_1000EBA20(v4, v6, 0, 1);
      swift_bridgeObjectRelease();
      return v7;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void MPModelTVSeason.title.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD v9[5];
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10044A2D8, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = v11;
  v3 = swift_allocObject(&unk_10044A300, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1000EBE8C;
  *(_QWORD *)(v3 + 24) = v2;
  v9[4] = sub_100009BB0;
  v10 = v3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_100009BD0;
  v9[3] = &unk_10044A318;
  v4 = _Block_copy(v9);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 129, 870, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

uint64_t sub_1000EB1B8(void *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;

  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for String.LocalizationValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v29 - v12;
  v14 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((uint64_t)objc_msgSend(a1, "number") < 1)
  {
    v24 = objc_msgSend(a1, "show");
    v25 = v24;
    if (v24)
    {
      v26 = objc_msgSend(v24, "title");

      if (v26)
      {
        v25 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
        v28 = v27;

LABEL_10:
        *a2 = (uint64_t)v25;
        a2[1] = v28;
        return swift_bridgeObjectRelease();
      }
      v25 = 0;
    }
    v28 = 0;
    goto LABEL_10;
  }
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(7, 1);
  v17._countAndFlagsBits = 0x206E6F73616553;
  v17._object = (void *)0xE700000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v17);
  v30 = objc_msgSend(a1, "number");
  String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v30, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v18);
  String.LocalizationValue.init(stringInterpolation:)(v16);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  if (qword_10048C570 != -1)
    swift_once(&qword_10048C570, sub_10000AD54);
  v19 = qword_1004A1DA0;
  static Locale.current.getter((id)qword_1004A1DA0);
  v20 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v19, v6, 0, 0, 256);
  v22 = v21;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  *a2 = v20;
  a2[1] = v22;
  return swift_bridgeObjectRelease();
}

void sub_1000EB46C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = a1 + 32;
  swift_bridgeObjectRetain();
  v3 = 0;
  v4 = 0;
  v5 = (char *)_swiftEmptyArrayStorage;
  v6 = (char *)&_swiftEmptyArrayStorage[4];
LABEL_3:
  v8 = *(_QWORD *)(a1 + 16);
  if (v4 != v8)
  {
    if (v4 >= v8)
    {
LABEL_34:
      __break(1u);
    }
    else
    {
      while (1)
      {
        v9 = *(_QWORD *)(v2 + 8 * v4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (v9)
        {
          v7 = *(_QWORD *)(v9 + 16);
          if (v7)
            break;
        }
        ++v4;
        v10 = *(_QWORD *)(a1 + 16);
        if (v4 == v10)
          goto LABEL_30;
        if (v4 >= v10)
          goto LABEL_34;
      }
      v11 = 0;
      ++v4;
      while (v11 < v7)
      {
        v12 = v9 + 16 * v11;
        v13 = *(_QWORD *)(v12 + 40);
        v30 = *(_QWORD *)(v12 + 32);
        if (v3)
        {
          swift_bridgeObjectRetain();
          v14 = v5;
          v15 = __OFSUB__(v3--, 1);
          if (v15)
            goto LABEL_36;
        }
        else
        {
          v16 = *((_QWORD *)v5 + 3);
          if ((uint64_t)((v16 >> 1) + 0x4000000000000000) < 0)
            goto LABEL_37;
          v17 = v16 & 0xFFFFFFFFFFFFFFFELL;
          if (v17 <= 1)
            v18 = 1;
          else
            v18 = v17;
          v19 = sub_100005574((uint64_t *)&unk_100491700);
          v14 = (char *)swift_allocObject(v19, 16 * v18 + 32, 7);
          v20 = j__malloc_size(v14);
          v21 = v20 - 32;
          if (v20 < 32)
            v21 = v20 - 17;
          v22 = v21 >> 4;
          *((_QWORD *)v14 + 2) = v18;
          *((_QWORD *)v14 + 3) = 2 * (v21 >> 4);
          v23 = v14 + 32;
          v24 = *((_QWORD *)v5 + 3) >> 1;
          v6 = &v14[16 * v24 + 32];
          v25 = (v22 & 0x7FFFFFFFFFFFFFFFLL) - v24;
          if (*((_QWORD *)v5 + 2))
          {
            v26 = v5 + 32;
            if (v14 != v5 || v23 >= &v26[16 * v24])
              memmove(v23, v26, 16 * v24);
            swift_bridgeObjectRetain();
            *((_QWORD *)v5 + 2) = 0;
          }
          else
          {
            swift_bridgeObjectRetain();
          }
          swift_release(v5);
          v15 = __OFSUB__(v25, 1);
          v3 = v25 - 1;
          if (v15)
            goto LABEL_36;
        }
        ++v11;
        *(_QWORD *)v6 = v30;
        *((_QWORD *)v6 + 1) = v13;
        v6 += 16;
        v5 = v14;
        v7 = *(_QWORD *)(v9 + 16);
        if (v11 == v7)
          goto LABEL_3;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
LABEL_30:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v27 = *((_QWORD *)v5 + 3);
  if (v27 >= 2)
  {
    v28 = v27 >> 1;
    v15 = __OFSUB__(v28, v3);
    v29 = v28 - v3;
    if (v15)
    {
LABEL_38:
      __break(1u);
      return;
    }
    *((_QWORD *)v5 + 2) = v29;
  }
}

uint64_t sub_1000EB680()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000EB6A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000EB6B4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000EB6BC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000EB6E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

Swift::Int sub_1000EB70C(void *a1, char a2)
{
  uint64_t v2;

  return sub_1000E5B3C(a1, a2 & 1, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1000EB718()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000EB73C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000E5CB4(a1, a2, *(void (**)(_BYTE *, uint64_t))(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 16));
}

uint64_t sub_1000EB748(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  __CFString *v11;
  __CFString *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return (uint64_t)_swiftEmptyArrayStorage;
  v2 = 0;
  v3 = result + 40;
  v4 = -(uint64_t)v1;
  v5 = _swiftEmptyArrayStorage;
  v17 = result + 40;
  v18 = *(_QWORD *)(result + 16);
  do
  {
    v19 = v5;
    if (v2 <= v1)
      v6 = v1;
    else
      v6 = v2;
    v7 = -(uint64_t)v6;
    for (i = (uint64_t *)(v3 + 16 * v2++); ; i += 2)
    {
      if (v7 + v2 == 1)
      {
        __break(1u);
        return result;
      }
      v10 = *(i - 1);
      v9 = *i;
      swift_bridgeObjectRetain();
      v11 = (__CFString *)String._bridgeToObjectiveC()();
      v12 = (__CFString *)String._bridgeToObjectiveC()();
      v13 = UTTypeConformsTo(v11, v12);

      if (v13)
        break;
      result = swift_bridgeObjectRelease();
      ++v2;
      if (v4 + v2 == 1)
        return (uint64_t)v19;
    }
    v5 = v19;
    result = swift_isUniquelyReferenced_nonNull_native(v19);
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_10007736C(0, v19[2] + 1, 1);
      v5 = v19;
    }
    v15 = v5[2];
    v14 = v5[3];
    if (v15 >= v14 >> 1)
    {
      result = (uint64_t)sub_10007736C((char *)(v14 > 1), v15 + 1, 1);
      v5 = v19;
    }
    v5[2] = v15 + 1;
    v16 = &v5[2 * v15];
    v16[4] = v10;
    v16[5] = v9;
    v3 = v17;
    v1 = v18;
  }
  while (v4 + v2);
  return (uint64_t)v5;
}

_QWORD *sub_1000EB8D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return _swiftEmptyArrayStorage;
  v5 = swift_bridgeObjectRetain() + 40;
  v6 = _swiftEmptyArrayStorage;
  do
  {
    swift_bridgeObjectRetain();
    sub_1000E613C(a2, &v11);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v6;
    }
    swift_bridgeObjectRelease();
    v7 = v11;
    if (v11)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
        v6 = sub_10003E2E8(0, v6[2] + 1, 1, v6);
      v9 = v6[2];
      v8 = v6[3];
      if (v9 >= v8 >> 1)
        v6 = sub_10003E2E8((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
      v6[2] = v9 + 1;
      v6[v9 + 4] = v7;
    }
    v5 += 16;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  return v6;
}

id sub_1000EBA20(uint64_t a1, uint64_t a2, id a3, char a4)
{
  id v6;
  NSString v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;

  if ((a4 & 1) != 0)
  {
    if (!objc_msgSend((id)objc_opt_self(NSThread), "isMainThread"))
    {
      a3 = 0;
      if (a2)
        goto LABEL_5;
      goto LABEL_7;
    }
    v6 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
    a3 = objc_msgSend(v6, "userInterfaceLayoutDirection");

  }
  if (a2)
  {
LABEL_5:
    swift_bridgeObjectRetain();
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    goto LABEL_8;
  }
LABEL_7:
  v7 = 0;
LABEL_8:
  v8 = objc_msgSend(objc_allocWithZone((Class)MusicMonogramArtworkToken), "initWithFullName:rightToLeft:", v7, a3 == (id)1);

  if (v8)
  {
    v9 = (void *)objc_opt_self(MusicMonogramArtworkDataSource);
    v10 = v8;
    v11 = objc_msgSend(v9, "sharedMonogramArtworkDataSource");
    v12 = objc_allocWithZone((Class)MPArtworkCatalog);
    v13 = v10;
    v8 = objc_msgSend(v12, "initWithToken:dataSource:", v13, v11);

  }
  return v8;
}

uint64_t sub_1000EBB90()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000EBBA0(void *a1)
{
  uint64_t v1;

  sub_1000E7594(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1000EBBA8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t _sSo13MPModelObjectC9MusicCoreE20MediaKitPlayableKindO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10043E4D0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xA)
    return 10;
  else
    return v3;
}

unint64_t _sSo13MPModelObjectC9MusicCoreE14FavoriteStatusO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10043E5E0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

id sub_1000EBC48@<X0>(id *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "propertySetByCombiningWithPropertySet:", *a2);
  *a3 = result;
  return result;
}

uint64_t type metadata accessor for SnapshotIdentifier.Lazy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100031DCC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SnapshotIdentifier.Lazy);
}

uint64_t type metadata accessor for SnapshotIdentifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100031DCC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SnapshotIdentifier);
}

uint64_t sub_1000EBCA4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1000EBCC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1000E90C0(a1, a2, a3, *(void **)(v3 + 40), *(void (**)(uint64_t, char *, _BYTE *))(v3 + 48), *(_QWORD *)(v3 + 56), *(_BYTE **)(v3 + 64), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_1000EBCF8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000EBD08()
{
  uint64_t v0;

  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1000EBD2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1000E9408(a1, a2, a3, *(_QWORD *)(v3 + 40), *(void **)(v3 + 48), *(void (**)(uint64_t, char *, _BYTE *))(v3 + 56), *(_QWORD *)(v3 + 64), *(_BYTE **)(v3 + 72), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_1000EBD60()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000EBD70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_1000E9604(a1, a2, a3, v3[5], v3[2], v3[3]);
}

uint64_t sub_1000EBD7C(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;

  return sub_1000E97F0(a1, a2, a3, *(void **)(v3 + 40), *(void (**)(uint64_t, _QWORD *, _BYTE *))(v3 + 48), *(_QWORD *)(v3 + 56), *(_BYTE **)(v3 + 64), *(_QWORD *)(v3 + 16));
}

uint64_t sub_1000EBDAC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000EBDBC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000EBDE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1000E9AF0(a1, a2, a3, *(_QWORD *)(v3 + 40), *(void **)(v3 + 48), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
}

uint64_t sub_1000EBDF0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000EBE00()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t sub_1000EBE20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1000E9EA0(a1, a2, a3, *(_QWORD *)(v3 + 24), *(void **)(v3 + 32), *(_QWORD *)(v3 + 16));
}

uint64_t sub_1000EBE2C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000EBE3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1000EA148(a1, a2, a3, *(_QWORD *)(v3 + 32), *(void **)(v3 + 40), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_1000EBE48()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000EBE58()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000EBE68()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000EBE8C()
{
  uint64_t v0;

  return sub_1000EB1B8(*(void **)(v0 + 16), *(uint64_t **)(v0 + 24));
}

uint64_t sub_1000EBE94()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1000EBEA8()
{
  unint64_t result;

  result = qword_100491920;
  if (!qword_100491920)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MPIdentifierSet.Purpose.Options, &type metadata for MPIdentifierSet.Purpose.Options);
    atomic_store(result, (unint64_t *)&qword_100491920);
  }
  return result;
}

unint64_t sub_1000EBEF0()
{
  unint64_t result;

  result = qword_100491928;
  if (!qword_100491928)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MPIdentifierSet.Purpose.Options, &type metadata for MPIdentifierSet.Purpose.Options);
    atomic_store(result, (unint64_t *)&qword_100491928);
  }
  return result;
}

unint64_t sub_1000EBF38()
{
  unint64_t result;

  result = qword_100491930;
  if (!qword_100491930)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MPIdentifierSet.Purpose.Options, &type metadata for MPIdentifierSet.Purpose.Options);
    atomic_store(result, (unint64_t *)&qword_100491930);
  }
  return result;
}

unint64_t sub_1000EBF80()
{
  unint64_t result;

  result = qword_100491938;
  if (!qword_100491938)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MPIdentifierSet.Purpose.Options, &type metadata for MPIdentifierSet.Purpose.Options);
    atomic_store(result, (unint64_t *)&qword_100491938);
  }
  return result;
}

unint64_t sub_1000EBFC8()
{
  unint64_t result;

  result = qword_100491940;
  if (!qword_100491940)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MPModelObject.MediaKitPlayableKind, &type metadata for MPModelObject.MediaKitPlayableKind);
    atomic_store(result, (unint64_t *)&qword_100491940);
  }
  return result;
}

unint64_t sub_1000EC010()
{
  unint64_t result;

  result = qword_100491948[0];
  if (!qword_100491948[0])
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MPModelObject.FavoriteStatus, &type metadata for MPModelObject.FavoriteStatus);
    atomic_store(result, qword_100491948);
  }
  return result;
}

uint64_t sub_1000EC054(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for SnapshotIdentifier<A>, a1);
}

ValueMetadata *type metadata accessor for MPIdentifierSet.Purpose()
{
  return &type metadata for MPIdentifierSet.Purpose;
}

ValueMetadata *type metadata accessor for MPIdentifierSet.Purpose.Options()
{
  return &type metadata for MPIdentifierSet.Purpose.Options;
}

uint64_t _s20MediaKitPlayableKindOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s20MediaKitPlayableKindOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1000EC160 + 4 * byte_10038B7F9[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1000EC194 + 4 * byte_10038B7F4[v4]))();
}

uint64_t sub_1000EC194(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EC19C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000EC1A4);
  return result;
}

uint64_t sub_1000EC1B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000EC1B8);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1000EC1BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EC1C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MPModelObject.MediaKitPlayableKind()
{
  return &type metadata for MPModelObject.MediaKitPlayableKind;
}

uint64_t _s14FavoriteStatusOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000EC22C + 4 * byte_10038B803[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000EC260 + 4 * byte_10038B7FE[v4]))();
}

uint64_t sub_1000EC260(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EC268(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000EC270);
  return result;
}

uint64_t sub_1000EC27C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000EC284);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000EC288(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EC290(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MPModelObject.FavoriteStatus()
{
  return &type metadata for MPModelObject.FavoriteStatus;
}

uint64_t sub_1000EC2AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v6;
  _QWORD v7[2];

  result = type metadata accessor for SnapshotIdentifier.Lazy(319, *(_QWORD *)(a1 + 16), a3, a4);
  if (v6 <= 0x3F)
  {
    v7[0] = *(_QWORD *)(result - 8) + 64;
    v7[1] = "\b";
    swift_initEnumMetadataMultiPayload(a1, 0, 2, v7);
    return 0;
  }
  return result;
}

char *sub_1000EC31C(char *a1, char **a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v14[(v5 + 16) & ~(unint64_t)v5];
    swift_retain(v14);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v9 = *a2;
      *(_QWORD *)a1 = *a2;
      v10 = v9;
      v11 = a1;
      v12 = a3;
      v13 = 1;
    }
    else
    {
      v15 = type metadata accessor for SnapshotIdentifier.Lazy(0, *(_QWORD *)(a3 + 16), v7, v8);
      if (swift_getEnumCaseMultiPayload(a2, v15) == 1)
      {
        v16 = type metadata accessor for IndexPath(0);
        (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(a1, a2, v16);
        v17 = *(int *)(sub_100005574(&qword_1004918E8) + 48);
        v18 = *(char **)((char *)a2 + v17);
        *(_QWORD *)&a1[v17] = v18;
        v19 = v18;
        v20 = a1;
        v21 = v15;
        v22 = 1;
      }
      else
      {
        v23 = a2[1];
        *(_QWORD *)a1 = *a2;
        *((_QWORD *)a1 + 1) = v23;
        v24 = v23;
        v20 = a1;
        v21 = v15;
        v22 = 0;
      }
      swift_storeEnumTagMultiPayload(v20, v21, v22);
      v11 = a1;
      v12 = a3;
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v12, v13);
  }
  return a1;
}

void sub_1000EC444(id *a1, uint64_t a2)
{
  id *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a1;
  if (swift_getEnumCaseMultiPayload(a1, a2) != 1)
  {
    v6 = type metadata accessor for SnapshotIdentifier.Lazy(0, *(_QWORD *)(a2 + 16), v4, v5);
    if (swift_getEnumCaseMultiPayload(v3, v6) == 1)
    {
      v7 = type metadata accessor for IndexPath(0);
      (*(void (**)(id *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v3, v7);
      v3 = (id *)((char *)v3 + *(int *)(sub_100005574(&qword_1004918E8) + 48));
    }
    else
    {
      ++v3;
    }
  }

}

_QWORD *sub_1000EC4CC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v8 = *(void **)a2;
    *a1 = *(_QWORD *)a2;
    v9 = v8;
    v10 = a1;
    v11 = a3;
    v12 = 1;
  }
  else
  {
    v13 = type metadata accessor for SnapshotIdentifier.Lazy(0, *(_QWORD *)(a3 + 16), v6, v7);
    if (swift_getEnumCaseMultiPayload(a2, v13) == 1)
    {
      v14 = type metadata accessor for IndexPath(0);
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
      v15 = *(int *)(sub_100005574(&qword_1004918E8) + 48);
      v16 = *(void **)(a2 + v15);
      *(_QWORD *)((char *)a1 + v15) = v16;
      v17 = v16;
      v18 = a1;
      v19 = v13;
      v20 = 1;
    }
    else
    {
      v21 = *(void **)(a2 + 8);
      *a1 = *(_QWORD *)a2;
      a1[1] = v21;
      v22 = v21;
      v18 = a1;
      v19 = v13;
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v18, v19, v20);
    v10 = a1;
    v11 = a3;
    v12 = 0;
  }
  swift_storeEnumTagMultiPayload(v10, v11, v12);
  return a1;
}

void **sub_1000EC5C8(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;

  if (a1 != a2)
  {
    (*(void (**)(void **, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v8 = *a2;
      *a1 = *a2;
      v9 = v8;
      v10 = 1;
    }
    else
    {
      v11 = type metadata accessor for SnapshotIdentifier.Lazy(0, *(_QWORD *)(a3 + 16), v6, v7);
      if (swift_getEnumCaseMultiPayload(a2, v11) == 1)
      {
        v12 = type metadata accessor for IndexPath(0);
        (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        v13 = *(int *)(sub_100005574(&qword_1004918E8) + 48);
        v14 = *(void **)((char *)a2 + v13);
        *(void **)((char *)a1 + v13) = v14;
        v15 = v14;
        v16 = a1;
        v17 = v11;
        v18 = 1;
      }
      else
      {
        *a1 = *a2;
        v19 = a2[1];
        a1[1] = v19;
        v20 = v19;
        v16 = a1;
        v17 = v11;
        v18 = 0;
      }
      swift_storeEnumTagMultiPayload(v16, v17, v18);
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, a3, v10);
  }
  return a1;
}

char *sub_1000EC6E0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for SnapshotIdentifier.Lazy(0, *(_QWORD *)(a3 + 16), v6, v7);
    if (swift_getEnumCaseMultiPayload(a2, v8) == 1)
    {
      v9 = type metadata accessor for IndexPath(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      v10 = sub_100005574(&qword_1004918E8);
      *(_QWORD *)&a1[*(int *)(v10 + 48)] = *(_QWORD *)&a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload(a1, v8, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

char *sub_1000EC7CC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v6 = *(_QWORD *)(a3 - 8);
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, a3);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(_QWORD *)(v6 + 64));
    }
    else
    {
      v9 = type metadata accessor for SnapshotIdentifier.Lazy(0, *(_QWORD *)(a3 + 16), v7, v8);
      if (swift_getEnumCaseMultiPayload(a2, v9) == 1)
      {
        v10 = type metadata accessor for IndexPath(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
        v11 = sub_100005574(&qword_1004918E8);
        *(_QWORD *)&a1[*(int *)(v11 + 48)] = *(_QWORD *)&a2[*(int *)(v11 + 48)];
        swift_storeEnumTagMultiPayload(a1, v9, 1);
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_1000EC8D0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _BYTE v4[32];
  _QWORD v5[2];

  v5[0] = &unk_10038BDF8;
  result = type metadata accessor for IndexPath(319);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v4, *(_QWORD *)(result - 8) + 64, (char *)&value witness table for Builtin.UnknownObject + 64);
    v5[1] = v4;
    swift_initEnumMetadataMultiPayload(a1, 0, 2, v5);
    return 0;
  }
  return result;
}

uint64_t *sub_1000EC958(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v7 = type metadata accessor for IndexPath(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = *(int *)(sub_100005574(&qword_1004918E8) + 48);
      v9 = *(void **)((char *)a2 + v8);
      *(uint64_t *)((char *)a1 + v8) = (uint64_t)v9;
      v10 = v9;
      v11 = a1;
      v12 = a3;
      v13 = 1;
    }
    else
    {
      v15 = (void *)a2[1];
      *a1 = *a2;
      a1[1] = (uint64_t)v15;
      v16 = v15;
      v11 = a1;
      v12 = a3;
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v12, v13);
  }
  return a1;
}

void sub_1000ECA30(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id *v4;

  if (swift_getEnumCaseMultiPayload(a1, a2) == 1)
  {
    v3 = type metadata accessor for IndexPath(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
    v4 = (id *)(a1 + *(int *)(sub_100005574(&qword_1004918E8) + 48));
  }
  else
  {
    v4 = (id *)(a1 + 8);
  }

}

_QWORD *sub_1000ECA94(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for IndexPath(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    v7 = *(int *)(sub_100005574(&qword_1004918E8) + 48);
    v8 = *(void **)((char *)a2 + v7);
    *(_QWORD *)((char *)a1 + v7) = v8;
    v9 = v8;
    v10 = a1;
    v11 = a3;
    v12 = 1;
  }
  else
  {
    v13 = (void *)a2[1];
    *a1 = *a2;
    a1[1] = v13;
    v14 = v13;
    v10 = a1;
    v11 = a3;
    v12 = 0;
  }
  swift_storeEnumTagMultiPayload(v10, v11, v12);
  return a1;
}

_QWORD *sub_1000ECB40(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;

  if (a1 != a2)
  {
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for IndexPath(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = *(int *)(sub_100005574(&qword_1004918E8) + 48);
      v8 = *(void **)((char *)a2 + v7);
      *(_QWORD *)((char *)a1 + v7) = v8;
      v9 = v8;
      v10 = a1;
      v11 = a3;
      v12 = 1;
    }
    else
    {
      *a1 = *a2;
      v13 = (void *)a2[1];
      a1[1] = v13;
      v14 = v13;
      v10 = a1;
      v11 = a3;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
  }
  return a1;
}

char *sub_1000ECC10(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for IndexPath(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    v7 = sub_100005574(&qword_1004918E8);
    *(_QWORD *)&a1[*(int *)(v7 + 48)] = *(_QWORD *)&a2[*(int *)(v7 + 48)];
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *sub_1000ECCB4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    v6 = *(_QWORD *)(a3 - 8);
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, a3);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v7 = type metadata accessor for IndexPath(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = sub_100005574(&qword_1004918E8);
      *(_QWORD *)&a1[*(int *)(v8 + 48)] = *(_QWORD *)&a2[*(int *)(v8 + 48)];
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(v6 + 64));
    }
  }
  return a1;
}

uint64_t sub_1000ECD70()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_1000ECD80(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, "setPersistentID:", *(_QWORD *)(v1 + 16));
}

uint64_t sub_1000ECD90()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000ECDA0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000ECDC4()
{
  uint64_t v0;

  return sub_1000E6F14(*(char **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1000ECDD0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1000ECDE0()
{
  unint64_t result;

  result = qword_100491AC0;
  if (!qword_100491AC0)
  {
    result = swift_getWitnessTable(&unk_10038BE38, &_s12LoadingErrorON);
    atomic_store(result, (unint64_t *)&qword_100491AC0);
  }
  return result;
}

uint64_t sub_1000ECE24()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000ECE48()
{
  uint64_t v0;

  return sub_1000E6F14(*(char **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000ECE50()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

_QWORD *_s12LoadingErrorOwCP(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = *a2;
  swift_errorRetain(*a2);
  *a1 = v3;
  return a1;
}

uint64_t _s12LoadingErrorOwxx(_QWORD *a1)
{
  return swift_errorRelease(*a1);
}

uint64_t *_s12LoadingErrorOwca(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  swift_errorRetain(*a2);
  v4 = *a1;
  *a1 = v3;
  swift_errorRelease(v4);
  return a1;
}

_QWORD *_s13InsertCommandV8LocationOwtk(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t *_s12LoadingErrorOwta(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  swift_errorRelease(v3);
  return a1;
}

uint64_t _s12LoadingErrorOwet(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t _s12LoadingErrorOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

_QWORD *sub_1000ECFB0(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *_s12LoadingErrorOMa()
{
  return &_s12LoadingErrorON;
}

void *Playlist.maximumBatchLimit.unsafeMutableAddressor()
{
  return &static Playlist.maximumBatchLimit;
}

BOOL sub_1000ED070(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD, uint64_t);
  uint64_t v14;
  uint64_t v15;

  v2 = (*(uint64_t (**)(void))(a2 + 8))();
  if (v2)
    v3 = (_QWORD *)v2;
  else
    v3 = _swiftEmptyArrayStorage;
  v4 = sub_1000EFF48((uint64_t)v3);
  swift_bridgeObjectRelease(v3);
  v5 = sub_100005574((uint64_t *)&unk_100491B60);
  v6 = type metadata accessor for AudioVariant(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 72);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject(v5, v10 + 2 * v8, v9 | 7);
  *(_OWORD *)(v11 + 16) = xmmword_100384A60;
  v12 = v11 + v10;
  v13 = *(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104);
  v13(v12, enum case for AudioVariant.dolbyAtmos(_:), v6);
  v13(v12 + v8, enum case for AudioVariant.dolbyAudio(_:), v6);
  v14 = sub_1000EEAF0(v11, v4);
  swift_setDeallocating(v11);
  swift_arrayDestroy(v12, *(_QWORD *)(v11 + 16), v6);
  swift_deallocClassInstance(v11, 32, 7);
  v15 = *(_QWORD *)(v14 + 16);
  swift_release(v14);
  return v15 != 0;
}

uint64_t sub_1000ED198(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t (*v12)(char *, uint64_t);
  int v13;
  int v14;
  int v15;
  int v16;
  int v19;
  void (*v22)(char *, uint64_t);
  uint64_t v23;

  v4 = sub_100005574(&qword_100491B50);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = &v7[*(int *)(v5 + 48)];
  v9 = type metadata accessor for AudioVariant(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v11(v7, a2, v9);
  v11(v8, a1, v9);
  v12 = *(uint64_t (**)(char *, uint64_t))(v10 + 88);
  v13 = v12(v7, v9);
  v14 = enum case for AudioVariant.dolbyAtmos(_:);
  if (v13 == enum case for AudioVariant.dolbyAtmos(_:))
    goto LABEL_20;
  v15 = enum case for AudioVariant.dolbyAudio(_:);
  if (v13 == enum case for AudioVariant.dolbyAudio(_:))
  {
    if (v12(v8, v9) == v14)
      return 1;
LABEL_20:
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    return 0;
  }
  if (v13 == enum case for AudioVariant.lossless(_:))
  {
    v16 = v12(v8, v9);
    if (v16 == v14 || v16 == v15 || v16 == enum case for AudioVariant.highResolutionLossless(_:))
      return 1;
    goto LABEL_20;
  }
  if (v13 == enum case for AudioVariant.highResolutionLossless(_:))
  {
    v19 = v12(v8, v9);
    if (v19 == v14 || v19 == v15)
      return 1;
    goto LABEL_20;
  }
  v22 = *(void (**)(char *, uint64_t))(v10 + 8);
  v22(v8, v9);
  v22(v7, v9);
  return 1;
}

BOOL MusicLibrarySectionedResponse.isEmpty.getter()
{
  return MusicLibrarySectionedResponse.totalItemCount.getter() == 0;
}

uint64_t AudioVariant.supportsBadge.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  BOOL v9;
  uint64_t v10;
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for AudioVariant(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  v9 = v6 == enum case for AudioVariant.dolbyAtmos(_:)
    || v6 == enum case for AudioVariant.dolbyAudio(_:)
    || v6 == enum case for AudioVariant.lossless(_:)
    || v6 == enum case for AudioVariant.highResolutionLossless(_:);
  v10 = v9;
  if (!v9)
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v10;
}

unint64_t AudioVariant.symbolString.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v10;

  v1 = v0;
  v2 = 0xD000000000000018;
  v3 = type metadata accessor for AudioVariant(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1, v3);
  v7 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v3);
  if (v7 != enum case for AudioVariant.dolbyAtmos(_:) && v7 != enum case for AudioVariant.dolbyAudio(_:))
  {
    if (v7 == enum case for AudioVariant.lossless(_:) || v7 == enum case for AudioVariant.highResolutionLossless(_:))
    {
      return 0xD000000000000015;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      return 0;
    }
  }
  return v2;
}

uint64_t AudioVariant.accessibilityLabel.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v10;

  v1 = v0;
  v2 = type metadata accessor for AudioVariant(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for AudioVariant.dolbyAtmos(_:))
  {
    if (qword_10048CE98 != -1)
      swift_once(&qword_10048CE98, sub_1001ED5BC);
    v7 = &static AccessibilityString.dolbyAtmosLabel;
  }
  else if (v6 == enum case for AudioVariant.dolbyAudio(_:))
  {
    if (qword_10048CEA0 != -1)
      swift_once(&qword_10048CEA0, sub_1001ED608);
    v7 = &static AccessibilityString.dolbyAudioLabel;
  }
  else if (v6 == enum case for AudioVariant.lossless(_:))
  {
    if (qword_10048CEB0 != -1)
      swift_once(&qword_10048CEB0, sub_1001ED6A4);
    v7 = &static AccessibilityString.losslessLabel;
  }
  else
  {
    if (v6 != enum case for AudioVariant.highResolutionLossless(_:))
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      return 0;
    }
    if (qword_10048CEA8 != -1)
      swift_once(&qword_10048CEA8, sub_1001ED654);
    v7 = &static AccessibilityString.hiResLosslessLabel;
  }
  v8 = *v7;
  swift_bridgeObjectRetain();
  return v8;
}

uint64_t AudioVariant.badgeText.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];

  v1 = v0;
  v2 = type metadata accessor for Locale(0);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for String.LocalizationValue(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = &v22[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v11 = &v22[-v10];
  v12 = type metadata accessor for AudioVariant(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = &v22[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v15, v1, v12);
  v16 = (*(uint64_t (**)(_BYTE *, uint64_t))(v13 + 88))(v15, v12);
  if (v16 == enum case for AudioVariant.lossless(_:))
  {
    v17 = 0x7373656C73736F4CLL;
    v18 = 0xE800000000000000;
  }
  else
  {
    if (v16 != enum case for AudioVariant.highResolutionLossless(_:))
    {
      (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v15, v12);
      return 0;
    }
    v18 = 0x80000001003B19B0;
    v17 = 0x1000000000000012;
  }
  String.LocalizationValue.init(stringLiteral:)(v17, v18);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(v9, v11, v5);
  if (qword_10048C570 != -1)
    swift_once(&qword_10048C570, sub_10000AD54);
  v19 = qword_1004A1DA0;
  static Locale.current.getter((id)qword_1004A1DA0);
  v20 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, v19, v4, 0, 0, 256);
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v5);
  return v20;
}

uint64_t sub_1000ED97C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t (*v12)(char *, uint64_t);
  int v13;
  int v14;
  int v15;
  int v16;
  int v19;
  void (*v22)(char *, uint64_t);
  uint64_t v23;

  v4 = sub_100005574(&qword_100491B50);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = &v7[*(int *)(v5 + 48)];
  v9 = type metadata accessor for AudioVariant(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v11(v7, a1, v9);
  v11(v8, a2, v9);
  v12 = *(uint64_t (**)(char *, uint64_t))(v10 + 88);
  v13 = v12(v7, v9);
  v14 = enum case for AudioVariant.dolbyAtmos(_:);
  if (v13 == enum case for AudioVariant.dolbyAtmos(_:))
    goto LABEL_20;
  v15 = enum case for AudioVariant.dolbyAudio(_:);
  if (v13 == enum case for AudioVariant.dolbyAudio(_:))
  {
    if (v12(v8, v9) == v14)
      return 1;
LABEL_20:
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    return 0;
  }
  if (v13 == enum case for AudioVariant.lossless(_:))
  {
    v16 = v12(v8, v9);
    if (v16 == v14 || v16 == v15 || v16 == enum case for AudioVariant.highResolutionLossless(_:))
      return 1;
    goto LABEL_20;
  }
  if (v13 == enum case for AudioVariant.highResolutionLossless(_:))
  {
    v19 = v12(v8, v9);
    if (v19 == v14 || v19 == v15)
      return 1;
    goto LABEL_20;
  }
  v22 = *(void (**)(char *, uint64_t))(v10 + 8);
  v22(v8, v9);
  v22(v7, v9);
  return 1;
}

uint64_t sub_1000EDB24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t (*v12)(char *, uint64_t);
  int v13;
  int v14;
  int v15;
  int v16;
  int v19;
  void (*v22)(char *, uint64_t);
  uint64_t v23;

  v4 = sub_100005574(&qword_100491B50);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = &v7[*(int *)(v5 + 48)];
  v9 = type metadata accessor for AudioVariant(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v11(v7, a2, v9);
  v11(v8, a1, v9);
  v12 = *(uint64_t (**)(char *, uint64_t))(v10 + 88);
  v13 = v12(v7, v9);
  v14 = enum case for AudioVariant.dolbyAtmos(_:);
  if (v13 == enum case for AudioVariant.dolbyAtmos(_:))
    goto LABEL_20;
  v15 = enum case for AudioVariant.dolbyAudio(_:);
  if (v13 == enum case for AudioVariant.dolbyAudio(_:))
  {
    if (v12(v8, v9) == v14)
      return 0;
LABEL_20:
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    return 1;
  }
  if (v13 == enum case for AudioVariant.lossless(_:))
  {
    v16 = v12(v8, v9);
    if (v16 == v14 || v16 == v15 || v16 == enum case for AudioVariant.highResolutionLossless(_:))
      return 0;
    goto LABEL_20;
  }
  if (v13 == enum case for AudioVariant.highResolutionLossless(_:))
  {
    v19 = v12(v8, v9);
    if (v19 == v14 || v19 == v15)
      return 0;
    goto LABEL_20;
  }
  v22 = *(void (**)(char *, uint64_t))(v10 + 8);
  v22(v8, v9);
  v22(v7, v9);
  return 0;
}

uint64_t Array<A>.removingEquivalents()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, _QWORD, uint64_t);
  char v10;
  void (*v11)(char *, uint64_t);
  uint64_t v12;
  char v13;
  uint64_t v15;
  uint64_t v16;

  v0 = sub_100005574(&qword_100491B30);
  __chkstk_darwin(v0);
  v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for AudioVariant(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = swift_bridgeObjectRetain();
  v8 = sub_1000EFF48(v7);
  swift_bridgeObjectRelease();
  v16 = v8;
  v9 = *(void (**)(char *, _QWORD, uint64_t))(v4 + 104);
  v9(v6, enum case for AudioVariant.highResolutionLossless(_:), v3);
  swift_bridgeObjectRetain();
  v10 = sub_1000C6EC8((uint64_t)v6, v8);
  swift_bridgeObjectRelease();
  v11 = *(void (**)(char *, uint64_t))(v4 + 8);
  v11(v6, v3);
  if ((v10 & 1) != 0)
  {
    v9(v6, enum case for AudioVariant.lossless(_:), v3);
    sub_1000EEF30((uint64_t)v6, (uint64_t)v2);
    v11(v6, v3);
    sub_1000F0070((uint64_t)v2);
  }
  v12 = v16;
  v9(v6, enum case for AudioVariant.dolbyAtmos(_:), v3);
  swift_bridgeObjectRetain();
  v13 = sub_1000C6EC8((uint64_t)v6, v12);
  swift_bridgeObjectRelease();
  v11(v6, v3);
  if ((v13 & 1) != 0)
  {
    v9(v6, enum case for AudioVariant.dolbyAudio(_:), v3);
    sub_1000EEF30((uint64_t)v6, (uint64_t)v2);
    v11(v6, v3);
    sub_1000F0070((uint64_t)v2);
  }
  return v16;
}

uint64_t MusicLibrary.DownloadStatus.DownloadPauseReasons.init(mediaPlayerReason:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v4 = type metadata accessor for MusicLibrary.DownloadStatus.DownloadPauseReasons(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 4) != 0)
  {
    static MusicLibrary.DownloadStatus.DownloadPauseReasons.cellularDataDisallowed.getter(v6);
  }
  else if ((a1 & 2) != 0)
  {
    static MusicLibrary.DownloadStatus.DownloadPauseReasons.constrainedNetwork.getter(v6);
  }
  else
  {
    if ((a1 & 1) == 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1, 1, v4);
    static MusicLibrary.DownloadStatus.DownloadPauseReasons.thermalPressure.getter(v6);
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v8, v4);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
}

uint64_t MusicLibrary.DownloadStatus.DownloadPauseReasons.alert.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  id v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  id v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71[4];
  unsigned __int8 v72;
  uint64_t v73;
  uint64_t v74;

  v2 = v1;
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v69 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for String.LocalizationValue(0);
  v6 = *(_QWORD *)(v70 - 8);
  v7 = __chkstk_darwin(v70);
  v9 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v67 - v10;
  v12 = type metadata accessor for MusicLibrary.DownloadStatus.DownloadPauseReasons(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v67 - v17;
  v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v67 - v17, v2, v12);
  static MusicLibrary.DownloadStatus.DownloadPauseReasons.cellularDataDisallowed.getter(v19);
  v20 = sub_100006924(&qword_100491B38, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.DownloadStatus.DownloadPauseReasons, (uint64_t)&protocol conformance descriptor for MusicLibrary.DownloadStatus.DownloadPauseReasons);
  v21 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v18, v12, v20);
  v22 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
  v23 = v22(v16, v12);
  if ((v21 & 1) != 0)
  {
    v22(v18, v12);
    result = (uint64_t)sub_1000DE7C8(0, 0, v71);
    v25 = v71[0];
    v26 = v71[1];
    v27 = v71[2];
    v28 = v71[3];
    v29 = v72;
    v31 = v73;
    v30 = v74;
  }
  else
  {
    static MusicLibrary.DownloadStatus.DownloadPauseReasons.constrainedNetwork.getter(v23);
    v32 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v18, v12, v20);
    v33 = v22(v16, v12);
    if ((v32 & 1) != 0)
    {
      v22(v18, v12);
      String.LocalizationValue.init(stringLiteral:)(0xD000000000000014, 0x80000001003B1A70);
      v34 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
      v35 = v70;
      v34(v9, v11, v70);
      if (qword_10048C570 != -1)
        swift_once(&qword_10048C570, sub_10000AD54);
      v36 = qword_1004A1DA0;
      v37 = (id)qword_1004A1DA0;
      v38 = v69;
      static Locale.current.getter(v37);
      v39 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, v36, v38, 0, 0, 256);
      v67 = v40;
      v68 = v39;
      v41 = *(void (**)(char *, uint64_t))(v6 + 8);
      v41(v11, v35);
      String.LocalizationValue.init(stringLiteral:)(0xD000000000000038, 0x80000001003B1A90);
      v34(v9, v11, v35);
      v42 = qword_1004A1DA0;
      static Locale.current.getter((id)qword_1004A1DA0);
      v27 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, v42, v38, 0, 0, 256);
      v28 = v43;
      v41(v11, v35);
      v44 = sub_100005574(&qword_100493240);
      v45 = v34;
      v31 = swift_allocObject(v44, 144, 7);
      *(_OWORD *)(v31 + 16) = xmmword_100384A60;
      if (qword_10048CE40 != -1)
        swift_once(&qword_10048CE40, sub_1001ECB74);
      v47 = static String.okButtonTitle;
      v46 = qword_1004A2C70;
      *(_QWORD *)(v31 + 32) = 0x6C65636E6163;
      *(_QWORD *)(v31 + 40) = 0xE600000000000000;
      *(_QWORD *)(v31 + 48) = v47;
      *(_QWORD *)(v31 + 56) = v46;
      *(_BYTE *)(v31 + 64) = 0;
      *(_QWORD *)(v31 + 72) = 0;
      *(_QWORD *)(v31 + 80) = 0;
      swift_bridgeObjectRetain();
      String.LocalizationValue.init(stringLiteral:)(0x73676E6974746553, 0xE800000000000000);
      v45(v9, v11, v35);
      v48 = qword_1004A1DA0;
      static Locale.current.getter((id)qword_1004A1DA0);
      v49 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, v48, v38, 0, 0, 256);
      v50 = v35;
      v52 = v51;
      result = ((uint64_t (*)(char *, uint64_t))v41)(v11, v50);
      v29 = 0;
      v30 = 0;
      *(_QWORD *)(v31 + 88) = 0x73676E6974746573;
      *(_QWORD *)(v31 + 96) = 0xE800000000000000;
      *(_QWORD *)(v31 + 104) = v49;
      *(_QWORD *)(v31 + 112) = v52;
      *(_BYTE *)(v31 + 120) = 2;
      *(_QWORD *)(v31 + 128) = &unk_100491B40;
      *(_QWORD *)(v31 + 136) = 0;
    }
    else
    {
      static MusicLibrary.DownloadStatus.DownloadPauseReasons.thermalPressure.getter(v33);
      v53 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v18, v12, v20);
      v22(v16, v12);
      result = v22(v18, v12);
      if ((v53 & 1) == 0)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = 0;
        v31 = 0;
        v30 = 0;
        goto LABEL_17;
      }
      String.LocalizationValue.init(stringLiteral:)(0xD000000000000036, 0x80000001003B19D0);
      v54 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
      v55 = v70;
      v54(v9, v11, v70);
      if (qword_10048C570 != -1)
        swift_once(&qword_10048C570, sub_10000AD54);
      v56 = qword_1004A1DA0;
      v57 = (id)qword_1004A1DA0;
      v58 = v69;
      static Locale.current.getter(v57);
      v59 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, v56, v58, 0, 0, 256);
      v67 = v60;
      v68 = v59;
      v61 = *(void (**)(char *, uint64_t))(v6 + 8);
      v61(v11, v55);
      String.LocalizationValue.init(stringLiteral:)(0xD000000000000055, 0x80000001003B1A10);
      v54(v9, v11, v55);
      v62 = qword_1004A1DA0;
      static Locale.current.getter((id)qword_1004A1DA0);
      v27 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, v62, v58, 0, 0, 256);
      v28 = v63;
      v61(v11, v55);
      v64 = sub_100005574(&qword_100493240);
      v31 = swift_allocObject(v64, 88, 7);
      *(_OWORD *)(v31 + 16) = xmmword_100384A80;
      if (qword_10048CE40 != -1)
        swift_once(&qword_10048CE40, sub_1001ECB74);
      v66 = static String.okButtonTitle;
      v65 = qword_1004A2C70;
      *(_QWORD *)(v31 + 32) = 0x6C65636E6163;
      *(_QWORD *)(v31 + 40) = 0xE600000000000000;
      *(_QWORD *)(v31 + 48) = v66;
      *(_QWORD *)(v31 + 56) = v65;
      *(_BYTE *)(v31 + 64) = 0;
      *(_QWORD *)(v31 + 72) = 0;
      *(_QWORD *)(v31 + 80) = 0;
      result = swift_bridgeObjectRetain();
      v29 = 0;
      v30 = 0;
    }
    v26 = v67;
    v25 = v68;
  }
LABEL_17:
  *a1 = v25;
  a1[1] = v26;
  a1[2] = v27;
  a1[3] = v28;
  a1[4] = v29;
  a1[5] = v31;
  a1[6] = v30;
  return result;
}

uint64_t Track.musicItem.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, uint64_t, uint64_t);
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;

  v3 = type metadata accessor for Track(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v29 - v8;
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v10((char *)&v29 - v8, v1, v3);
  v11 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v9, v3);
  if (v11 == enum case for Track.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v9, v3);
    v13 = type metadata accessor for Song(0);
    v14 = v13;
    v15 = &protocol witness table for Song;
LABEL_5:
    *(_QWORD *)(a1 + 24) = v13;
    *(_QWORD *)(a1 + 32) = v15;
    v16 = sub_1000207D4((_QWORD *)a1);
    return (*(uint64_t (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v16, v9, v14);
  }
  if (v11 == enum case for Track.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v9, v3);
    v13 = type metadata accessor for MusicVideo(0);
    v14 = v13;
    v15 = &protocol witness table for MusicVideo;
    goto LABEL_5;
  }
  if (qword_10048C760 != -1)
    swift_once(&qword_10048C760, sub_1000EEA0C);
  v18 = type metadata accessor for Logger(0, v12);
  sub_1000086B4(v18, (uint64_t)static Logger.musicKit);
  v19 = ((uint64_t (*)(char *, uint64_t, uint64_t))v10)(v7, v1, v3);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc(12, -1);
    v23 = swift_slowAlloc(32, -1);
    v30 = v23;
    *(_DWORD *)v22 = 136315138;
    v24 = sub_100006924(&qword_100491B48, (uint64_t (*)(uint64_t))&type metadata accessor for Track, (uint64_t)&protocol conformance descriptor for Track);
    v25 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v3, v24);
    v27 = v26;
    *(_QWORD *)(v22 + 4) = sub_100019400(v25, v26, &v30);
    swift_bridgeObjectRelease(v27);
    v28 = *(void (**)(char *, uint64_t))(v4 + 8);
    v28(v7, v3);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Unsupported Track type=%s", (uint8_t *)v22, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    v28 = *(void (**)(char *, uint64_t))(v4 + 8);
    v28(v7, v3);
  }

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return ((uint64_t (*)(char *, uint64_t))v28)(v9, v3);
}

uint64_t Logger.musicKit.unsafeMutableAddressor(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (qword_10048C760 != -1)
    swift_once(&qword_10048C760, sub_1000EEA0C);
  v2 = type metadata accessor for Logger(0, a2);
  return sub_1000086B4(v2, (uint64_t)static Logger.musicKit);
}

NSString sub_1000EE950()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static MusicLibrary.downloadingStateDidChange = (uint64_t)result;
  return result;
}

uint64_t *MusicLibrary.downloadingStateDidChange.unsafeMutableAddressor()
{
  if (qword_10048C758 != -1)
    swift_once(&qword_10048C758, sub_1000EE950);
  return &static MusicLibrary.downloadingStateDidChange;
}

id static MusicLibrary.downloadingStateDidChange.getter()
{
  if (qword_10048C758 != -1)
    swift_once(&qword_10048C758, sub_1000EE950);
  return (id)static MusicLibrary.downloadingStateDidChange;
}

uint64_t static Playlist.maximumBatchLimit.getter()
{
  return 10000;
}

uint64_t sub_1000EEA0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for Logger(0, a2);
  sub_1000086DC(v2, static Logger.musicKit);
  sub_1000086B4(v2, (uint64_t)static Logger.musicKit);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001003ACFD0, 0x74694B636973754DLL, 0xE800000000000000);
}

uint64_t static Logger.musicKit.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  if (qword_10048C760 != -1)
    swift_once(&qword_10048C760, sub_1000EEA0C);
  v3 = type metadata accessor for Logger(0, a1);
  v4 = sub_1000086B4(v3, (uint64_t)static Logger.musicKit);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a2, v4, v3);
}

uint64_t sub_1000EEAF0(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3;
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;

  v3 = isStackAllocationSafe;
  v4 = *(_BYTE *)(a2 + 32);
  v5 = v4 & 0x3F;
  v6 = (1 << v4) + 63;
  v7 = v6 >> 6;
  v8 = 8 * (v6 >> 6);
  if (v5 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v6 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    v9 = sub_1000EEC70((unint64_t *)((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, v3, a2);
    swift_release(a2);
  }
  else
  {
    v10 = (void *)swift_slowAlloc(v8, -1);
    bzero(v10, v8);
    v9 = sub_1000EEC70((unint64_t *)v10, v7, v3, a2);
    swift_release(a2);
    swift_slowDealloc(v10, -1, -1);
  }
  return v9;
}

uint64_t sub_1000EEC70(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v35 = a1;
  v8 = type metadata accessor for AudioVariant(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v14 = (char *)&v31 - v13;
  v37 = *(_QWORD *)(a3 + 16);
  if (v37)
  {
    v32 = a2;
    v33 = v4;
    v39 = v12;
    v40 = a4 + 56;
    v36 = a3 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v41 = *(_QWORD *)(v12 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v31 = a3;
    swift_bridgeObjectRetain();
    v34 = 0;
    v16 = 0;
    while (1)
    {
      v38 = v16;
      v15(v14, v36 + v41 * v16, v8);
      v18 = a4;
      v19 = *(_QWORD *)(a4 + 40);
      v20 = sub_100006924(&qword_100491618, (uint64_t (*)(uint64_t))&type metadata accessor for AudioVariant, (uint64_t)&protocol conformance descriptor for AudioVariant);
      v21 = dispatch thunk of Hashable._rawHashValue(seed:)(v19, v8, v20);
      a4 = v18;
      v22 = -1 << *(_BYTE *)(v18 + 32);
      v23 = v21 & ~v22;
      if (((*(_QWORD *)(v40 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) != 0)
      {
        v24 = ~v22;
        while (1)
        {
          v15(v11, *(_QWORD *)(a4 + 48) + v23 * v41, v8);
          v25 = sub_100006924(&qword_100491620, (uint64_t (*)(uint64_t))&type metadata accessor for AudioVariant, (uint64_t)&protocol conformance descriptor for AudioVariant);
          v26 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v14, v8, v25);
          v17 = *(void (**)(char *, uint64_t))(v39 + 8);
          v17(v11, v8);
          if ((v26 & 1) != 0)
            break;
          v23 = (v23 + 1) & v24;
          a4 = v18;
          if (((*(_QWORD *)(v40 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
            goto LABEL_4;
        }
        result = ((uint64_t (*)(char *, uint64_t))v17)(v14, v8);
        v28 = (v23 >> 3) & 0x1FFFFFFFFFFFFFF8;
        v29 = *(unint64_t *)((char *)v35 + v28);
        *(unint64_t *)((char *)v35 + v28) = v29 | (1 << v23);
        if ((v29 & (1 << v23)) != 0)
        {
          a4 = v18;
        }
        else
        {
          if (__OFADD__(v34, 1))
          {
            __break(1u);
            return result;
          }
          a4 = v18;
          ++v34;
        }
      }
      else
      {
        v17 = *(void (**)(char *, uint64_t))(v39 + 8);
LABEL_4:
        v17(v14, v8);
      }
      v16 = v38 + 1;
      if (v38 + 1 == v37)
      {
        swift_bridgeObjectRelease(v31);
        a2 = v32;
        v30 = v34;
        goto LABEL_17;
      }
    }
  }
  v30 = 0;
LABEL_17:
  swift_retain(a4);
  return sub_10013555C(v35, a2, v30, a4);
}

uint64_t sub_1000EEF30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = v2;
  v6 = type metadata accessor for AudioVariant(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100006924(&qword_100491618, v12, (uint64_t)&protocol conformance descriptor for AudioVariant);
  swift_bridgeObjectRetain();
  v32 = a1;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v30 = v3;
    v31 = a2;
    v17 = ~v15;
    v18 = *(_QWORD *)(v7 + 72);
    v33 = v7;
    v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    while (1)
    {
      v20 = v18 * v16;
      v19(v9, *(_QWORD *)(v10 + 48) + v18 * v16, v6);
      v21 = sub_100006924(&qword_100491620, (uint64_t (*)(uint64_t))&type metadata accessor for AudioVariant, (uint64_t)&protocol conformance descriptor for AudioVariant);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v32, v6, v21);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        break;
      v16 = (v16 + 1) & v17;
      if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v23 = 1;
        a2 = v31;
        v7 = v33;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v23, 1, v6);
      }
    }
    swift_bridgeObjectRelease();
    v24 = v30;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v30);
    v26 = *v24;
    v34 = *v24;
    *v24 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100136FCC();
      v26 = v34;
    }
    v27 = *(_QWORD *)(v26 + 48) + v20;
    v7 = v33;
    a2 = v31;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v33 + 32))(v31, v27, v6);
    sub_1000EF648(v16);
    *v24 = v34;
    swift_bridgeObjectRelease();
    v23 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v23 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v23, 1, v6);
}

uint64_t sub_1000EF16C(unsigned __int8 a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[10];

  v3 = *v1;
  Hasher.init(_seed:)(v9);
  v4 = Library.Menu.Identifier.rawValue.getter(a1);
  v6 = v5;
  swift_bridgeObjectRetain();
  String.hash(into:)(v9, v4, v6);
  swift_bridgeObjectRelease();
  v7 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v3 + 32));
  if (((*(_QWORD *)(v3 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease();
  return 13;
}

uint64_t sub_1000EF540(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = *v2;
  v5 = static Hasher._hash(seed:_:)(*(_QWORD *)(*v2 + 40), a1);
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = v5 & ~v6;
  if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(v4 + 48);
  if (*(_QWORD *)(v8 + 8 * v7) != a1)
  {
    v9 = ~v6;
    do
    {
      v7 = (v7 + 1) & v9;
      if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
        return 0;
    }
    while (*(_QWORD *)(v8 + 8 * v7) != a1);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v11 = *v2;
  v14 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001376D4();
    v11 = v14;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v7);
  sub_1000EFC20(v7);
  *v2 = v14;
  swift_bridgeObjectRelease();
  return v12;
}

void sub_1000EF648(int64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  void (*v30)(char *, unint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;

  v3 = type metadata accessor for AudioVariant(0);
  v32 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v1;
  v7 = *v1 + 56;
  v8 = -1 << *(_BYTE *)(*v1 + 32);
  v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(v7 + 8 * (v9 >> 6))) != 0)
  {
    v29 = v1;
    v10 = ~v8;
    swift_retain(v6);
    v11 = _HashTable.previousHole(before:)(a1, v7, v10);
    v31 = v7;
    if ((*(_QWORD *)(v7 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v12 = (v11 + 1) & v10;
      v13 = *(_QWORD *)(v32 + 72);
      v30 = *(void (**)(char *, unint64_t, uint64_t))(v32 + 16);
      do
      {
        v14 = v13 * v9;
        v30(v5, *(_QWORD *)(v6 + 48) + v13 * v9, v3);
        v15 = *(_QWORD *)(v6 + 40);
        v16 = sub_100006924(&qword_100491618, (uint64_t (*)(uint64_t))&type metadata accessor for AudioVariant, (uint64_t)&protocol conformance descriptor for AudioVariant);
        v17 = dispatch thunk of Hashable._rawHashValue(seed:)(v15, v3, v16);
        (*(void (**)(char *, uint64_t))(v32 + 8))(v5, v3);
        v18 = v17 & v10;
        if (a1 >= (uint64_t)v12)
        {
          if (v18 < v12 || a1 < (uint64_t)v18)
            goto LABEL_6;
        }
        else if (v18 < v12 && a1 < (uint64_t)v18)
        {
          goto LABEL_6;
        }
        v21 = *(_QWORD *)(v6 + 48);
        v22 = v13 * a1;
        v23 = v21 + v13 * a1;
        v24 = v21 + v14;
        if (v13 * a1 < v14 || v23 >= v24 + v13)
        {
          swift_arrayInitWithTakeFrontToBack(v23, v24, 1, v3);
        }
        else
        {
          a1 = v9;
          if (v22 == v14)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront();
        }
        a1 = v9;
LABEL_6:
        v9 = (v9 + 1) & v10;
      }
      while (((*(_QWORD *)(v31 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    *(_QWORD *)(v31 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    swift_release(v6);
    v1 = v29;
  }
  else
  {
    *(_QWORD *)(v7 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v25 = *v1;
  v26 = *(_QWORD *)(*v1 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v25 + 16) = v28;
    ++*(_DWORD *)(v25 + 36);
  }
}

unint64_t sub_1000EF8C4(unint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD v12[10];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v6);
      Hasher.init(_seed:)(v12);
      __asm { BR              X8 }
    }
    *(_QWORD *)(v4 + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v9 = *(_QWORD *)(v3 + 16);
  v10 = __OFSUB__(v9, 1);
  v11 = v9 - 1;
  if (v10)
  {
    __break(1u);
    JUMPOUT(0x1000EFBECLL);
  }
  *(_QWORD *)(v3 + 16) = v11;
  ++*(_DWORD *)(v3 + 36);
  return result;
}

unint64_t sub_1000EFC20(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(v3);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 48);
        v11 = (_QWORD *)(v10 + 8 * v6);
        v12 = static Hasher._hash(seed:_:)(*(_QWORD *)(v3 + 40), *v11) & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            v15 = (_QWORD *)(v10 + 8 * v2);
            if (v2 != v6 || (v2 = v6, v15 >= v11 + 1))
            {
              *v15 = *v11;
              v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v16 = *(_QWORD *)(v3 + 16);
  v17 = __OFSUB__(v16, 1);
  v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t _s8MusicKit12AudioVariantO0A4CoreE1loiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t (*v12)(char *, uint64_t);
  int v13;
  int v14;
  int v15;
  int v16;
  int v19;
  void (*v22)(char *, uint64_t);
  uint64_t v23;

  v4 = sub_100005574(&qword_100491B50);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = &v7[*(int *)(v5 + 48)];
  v9 = type metadata accessor for AudioVariant(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v11(v7, a1, v9);
  v11(v8, a2, v9);
  v12 = *(uint64_t (**)(char *, uint64_t))(v10 + 88);
  v13 = v12(v7, v9);
  v14 = enum case for AudioVariant.dolbyAtmos(_:);
  if (v13 == enum case for AudioVariant.dolbyAtmos(_:))
    goto LABEL_20;
  v15 = enum case for AudioVariant.dolbyAudio(_:);
  if (v13 == enum case for AudioVariant.dolbyAudio(_:))
  {
    if (v12(v8, v9) == v14)
      return 0;
LABEL_20:
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    return 1;
  }
  if (v13 == enum case for AudioVariant.lossless(_:))
  {
    v16 = v12(v8, v9);
    if (v16 == v14 || v16 == v15 || v16 == enum case for AudioVariant.highResolutionLossless(_:))
      return 0;
    goto LABEL_20;
  }
  if (v13 == enum case for AudioVariant.highResolutionLossless(_:))
  {
    v19 = v12(v8, v9);
    if (v19 == v14 || v19 == v15)
      return 0;
    goto LABEL_20;
  }
  v22 = *(void (**)(char *, uint64_t))(v10 + 8);
  v22(v8, v9);
  v22(v7, v9);
  return 0;
}

uint64_t sub_1000EFF48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;

  v2 = type metadata accessor for AudioVariant(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v16 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  v11 = sub_100006924(&qword_100491618, v10, (uint64_t)&protocol conformance descriptor for AudioVariant);
  result = Set.init(minimumCapacity:)(v9, v2, v11);
  v17 = result;
  if (v9)
  {
    v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v14 = *(_QWORD *)(v3 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v15(v6, v13, v2);
      sub_100132914((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v13 += v14;
      --v9;
    }
    while (v9);
    return v17;
  }
  return result;
}

uint64_t sub_1000F0070(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005574(&qword_100491B30);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000F00B0()
{
  return sub_100006924(&qword_100491620, (uint64_t (*)(uint64_t))&type metadata accessor for AudioVariant, (uint64_t)&protocol conformance descriptor for AudioVariant);
}

uint64_t sub_1000F00DC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  unsigned __int8 *v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_1000F014C();
  result = Set.init(minimumCapacity:)(v2, &type metadata for Library.Menu.Identifier, v3);
  v8 = result;
  if (v2)
  {
    v5 = (unsigned __int8 *)(a1 + 32);
    do
    {
      v6 = *v5++;
      sub_100133060(&v7, v6);
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

unint64_t sub_1000F014C()
{
  unint64_t result;

  result = qword_100491B58;
  if (!qword_100491B58)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Library.Menu.Identifier, &type metadata for Library.Menu.Identifier);
    atomic_store(result, (unint64_t *)&qword_100491B58);
  }
  return result;
}

uint64_t static Logger.music(_:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001003ACFD0, a1, a2);
}

uint64_t Logger.motion.unsafeMutableAddressor()
{
  return sub_1000F04E4(&qword_10048C788, (uint64_t)static Logger.motion, (uint64_t)sub_1000F0540);
}

uint64_t *OS_os_log.musicBag.unsafeMutableAddressor()
{
  if (qword_10048C770 != -1)
    swift_once(&qword_10048C770, sub_1000F0340);
  return &static OS_os_log.musicBag;
}

uint64_t OS_os_log.init(musicCategory:)(uint64_t a1, uint64_t a2)
{
  return OS_os_log.init(subsystem:category:)(0xD000000000000013, 0x80000001003ACFD0, a1, a2);
}

uint64_t Logger.audioFormat.unsafeMutableAddressor()
{
  return sub_1000F04E4(&qword_10048C778, (uint64_t)static Logger.audioFormat, (uint64_t)sub_1000F03BC);
}

uint64_t sub_1000F0284()
{
  uint64_t result;

  sub_1000F08E8();
  result = OS_os_log.init(subsystem:category:)(0xD000000000000013, 0x80000001003ACFD0, 0x74736F706E676953, 0xE900000000000073);
  static OS_os_log.musicSignposts = result;
  return result;
}

uint64_t *OS_os_log.musicSignposts.unsafeMutableAddressor()
{
  if (qword_10048C768 != -1)
    swift_once(&qword_10048C768, sub_1000F0284);
  return &static OS_os_log.musicSignposts;
}

id static OS_os_log.musicSignposts.getter()
{
  return sub_1000B8EAC(&qword_10048C768, (id *)&static OS_os_log.musicSignposts);
}

uint64_t sub_1000F0340()
{
  uint64_t result;

  sub_1000F08E8();
  result = OS_os_log.init(subsystem:category:)(0xD000000000000013, 0x80000001003ACFD0, 6775106, 0xE300000000000000);
  static OS_os_log.musicBag = result;
  return result;
}

id static OS_os_log.musicBag.getter()
{
  return sub_1000B8EAC(&qword_10048C770, (id *)&static OS_os_log.musicBag);
}

void *String.musicSubsystem.unsafeMutableAddressor()
{
  return &static String.musicSubsystem;
}

uint64_t sub_1000F03BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for Logger(0, a2);
  sub_1000086DC(v2, static Logger.audioFormat);
  sub_1000086B4(v2, (uint64_t)static Logger.audioFormat);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001003ACFD0, 0x726F466F69647541, 0xEB0000000074616DLL);
}

uint64_t static Logger.audioFormat.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F05D8(&qword_10048C778, (uint64_t)static Logger.audioFormat, (uint64_t)sub_1000F03BC, a1);
}

uint64_t sub_1000F0454(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for Logger(0, a2);
  sub_1000086DC(v2, static Logger.badging);
  sub_1000086B4(v2, (uint64_t)static Logger.badging);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001003ACFD0, 0x676E6967646142, 0xE700000000000000);
}

uint64_t Logger.badging.unsafeMutableAddressor()
{
  return sub_1000F04E4(&qword_10048C780, (uint64_t)static Logger.badging, (uint64_t)sub_1000F0454);
}

uint64_t sub_1000F04E4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (*a1 != -1)
    swift_once(a1, a3);
  v4 = type metadata accessor for Logger(0, a2);
  return sub_1000086B4(v4, a2);
}

uint64_t static Logger.badging.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F05D8(&qword_10048C780, (uint64_t)static Logger.badging, (uint64_t)sub_1000F0454, a1);
}

uint64_t sub_1000F0540(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for Logger(0, a2);
  sub_1000086DC(v2, static Logger.motion);
  sub_1000086B4(v2, (uint64_t)static Logger.motion);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001003ACFD0, 0x7472416F65646956, 0xEC0000006B726F77);
}

uint64_t static Logger.motion.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F05D8(&qword_10048C788, (uint64_t)static Logger.motion, (uint64_t)sub_1000F0540, a1);
}

uint64_t sub_1000F05D8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  if (*a1 != -1)
    swift_once(a1, a3);
  v6 = type metadata accessor for Logger(0, a2);
  v7 = sub_1000086B4(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a4, v7, v6);
}

unint64_t static String.musicSubsystem.getter()
{
  return 0xD000000000000013;
}

uint64_t Optional.expectNotNil(logger:file:line:function:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, char *a4@<X4>, char *a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  os_log_type_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v29;
  os_log_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v8 = v7;
  v34 = a3;
  v35 = a4;
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a6 + 16) - 8) + 48))(v7, 1) == 1)
  {
    v33 = a7;
    v18 = static os_log_type_t.info.getter();
    swift_bridgeObjectRetain_n(a2, 2);
    v19 = swift_bridgeObjectRetain_n(a5, 2);
    v20 = Logger.logObject.getter(v19);
    if (os_log_type_enabled(v20, v18))
    {
      v21 = swift_slowAlloc(32, -1);
      v32 = v18;
      v22 = v21;
      v31 = swift_slowAlloc(64, -1);
      v36 = v31;
      *(_DWORD *)v22 = 136315650;
      v23 = URL.init(fileURLWithPath:)(a1, a2);
      v30 = v20;
      v24 = (char *)URL.lastPathComponent.getter(v23);
      v26 = v25;
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      *(_QWORD *)(v22 + 4) = sub_100019400(v24, v26, &v36);
      swift_bridgeObjectRelease_n(a2, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2048;
      *(_QWORD *)(v22 + 14) = v34;
      *(_WORD *)(v22 + 22) = 2080;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v22 + 24) = sub_100019400(v35, a5, &v36);
      swift_bridgeObjectRelease_n(a5, 3);
      v20 = v30;
      _os_log_impl((void *)&_mh_execute_header, v30, (os_log_type_t)v32, "Unexpectedly found nil: %s:%ld %s", (uint8_t *)v22, 0x20u);
      v27 = v31;
      swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a5, 2);
      swift_bridgeObjectRelease_n(a2, 2);
    }

    a7 = v33;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 16))(a7, v8, a6);
}

uint64_t sub_1000F08C0@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

unint64_t sub_1000F08E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1004904C0;
  if (!qword_1004904C0)
  {
    v1 = objc_opt_self(OS_os_log);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1004904C0);
  }
  return result;
}

id sub_1000F0950()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)_s27WeakViewControllerReferenceCMa();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000F0994()
{
  uint64_t result;

  result = swift_slowAlloc(1, -1);
  qword_100491B70 = result;
  return result;
}

uint64_t sub_1000F09B8()
{
  uint64_t result;

  result = swift_slowAlloc(1, -1);
  qword_100491B78 = result;
  return result;
}

uint64_t sub_1000F09DC()
{
  uint64_t result;

  result = swift_slowAlloc(1, -1);
  qword_100491B80 = result;
  return result;
}

uint64_t sub_1000F0A00()
{
  uint64_t result;

  result = swift_slowAlloc(1, -1);
  qword_100491B88 = result;
  return result;
}

id UIViewController.playActivityFeatureNameSourceViewController.getter()
{
  return sub_1000F0B10(&qword_10048C798, (const void **)&qword_100491B78, (uint64_t)sub_1000F09B8);
}

uint64_t _s27WeakViewControllerReferenceCMa()
{
  return objc_opt_self(_TtCE9MusicCoreCSo16UIViewControllerP33_DFE32C8D797FD8FF4F7188EA667D17A427WeakViewControllerReference);
}

void UIViewController.playActivityFeatureNameSourceViewController.setter(void *a1)
{
  sub_1000F0C34(a1, &qword_10048C798, (const void **)&qword_100491B78, (uint64_t)sub_1000F09B8);
}

id UIViewController.playActivityRecommendationDataSourceViewController.getter()
{
  return sub_1000F0B10(&qword_10048C7A0, (const void **)&qword_100491B80, (uint64_t)sub_1000F09DC);
}

id sub_1000F0B10(_QWORD *a1, const void **a2, uint64_t a3)
{
  void *v3;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t Strong;
  char *v11;
  _OWORD v12[2];
  _BYTE v13[24];
  uint64_t v14;

  if (*a1 != -1)
    swift_once(a1, a3);
  v5 = objc_getAssociatedObject(v3, *a2);
  if (v5)
  {
    v6 = v5;
    _bridgeAnyObjectToAny(_:)(v5);
    swift_unknownObjectRelease(v6);
  }
  else
  {
    memset(v12, 0, sizeof(v12));
  }
  sub_1000AEB5C((uint64_t)v12, (uint64_t)v13);
  if (!v14)
  {
    sub_100098B58((uint64_t)v13);
    return objc_msgSend(v3, "parentViewController");
  }
  v7 = _s27WeakViewControllerReferenceCMa();
  if ((swift_dynamicCast(&v11, v13, (char *)&type metadata for Any + 8, v7, 6) & 1) == 0)
    return objc_msgSend(v3, "parentViewController");
  v8 = v11;
  Strong = swift_unknownObjectWeakLoadStrong(&v11[OBJC_IVAR____TtCE9MusicCoreCSo16UIViewControllerP33_DFE32C8D797FD8FF4F7188EA667D17A427WeakViewControllerReference_viewController]);

  if (!Strong)
    return objc_msgSend(v3, "parentViewController");
  return (id)Strong;
}

void UIViewController.playActivityRecommendationDataSourceViewController.setter(void *a1)
{
  sub_1000F0C34(a1, &qword_10048C7A0, (const void **)&qword_100491B80, (uint64_t)sub_1000F09DC);
}

void sub_1000F0C34(void *a1, _QWORD *a2, const void **a3, uint64_t a4)
{
  void *v4;
  objc_class *v9;
  char *v10;
  uint64_t v11;
  id v12;
  const void *v13;
  id v14;
  objc_super v15;

  if (a1)
  {
    v9 = (objc_class *)_s27WeakViewControllerReferenceCMa();
    v10 = (char *)objc_allocWithZone(v9);
    v11 = swift_unknownObjectWeakInit(&v10[OBJC_IVAR____TtCE9MusicCoreCSo16UIViewControllerP33_DFE32C8D797FD8FF4F7188EA667D17A427WeakViewControllerReference_viewController], 0);
    swift_unknownObjectWeakAssign(v11, a1);
    v15.receiver = v10;
    v15.super_class = v9;
    v12 = objc_msgSendSuper2(&v15, "init");
  }
  else
  {
    v12 = 0;
  }
  if (*a2 != -1)
    swift_once(a2, a4);
  v13 = *a3;
  v14 = v12;
  objc_setAssociatedObject(v4, v13, v14, (void *)1);

}

void (*UIViewController.playActivityRecommendationDataSourceViewController.modify(_QWORD *a1))(objc_super **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  v3[4] = UIViewController.playActivityRecommendationDataSourceViewController.getter();
  return sub_1000F0D64;
}

void sub_1000F0D64(objc_super **a1, char a2)
{
  objc_super *v2;
  id receiver;
  objc_class *v4;
  char *v5;
  uint64_t v6;
  id v7;
  objc_super *v8;
  objc_class *v9;
  char *v10;
  uint64_t v11;
  id v12;
  Class super_class;
  const void *v14;
  objc_super *v15;
  Class v16;
  const void *v17;
  id v18;

  v2 = *a1;
  receiver = (*a1)[2].receiver;
  if ((a2 & 1) != 0)
  {
    if (receiver)
    {
      v4 = (objc_class *)_s27WeakViewControllerReferenceCMa();
      v5 = (char *)objc_allocWithZone(v4);
      v6 = swift_unknownObjectWeakInit(&v5[OBJC_IVAR____TtCE9MusicCoreCSo16UIViewControllerP33_DFE32C8D797FD8FF4F7188EA667D17A427WeakViewControllerReference_viewController], 0);
      swift_unknownObjectWeakAssign(v6, receiver);
      v2->receiver = v5;
      v2->super_class = v4;
      v7 = receiver;
      v8 = -[objc_super init](v2, "init");
    }
    else
    {
      v8 = 0;
    }
    if (qword_10048C7A0 != -1)
      swift_once(&qword_10048C7A0, sub_1000F09DC);
    super_class = v2[2].super_class;
    v14 = (const void *)qword_100491B80;
    v15 = v8;
    objc_setAssociatedObject(super_class, v14, v15, (void *)1);

    receiver = v2[2].receiver;
  }
  else
  {
    if (receiver)
    {
      v9 = (objc_class *)_s27WeakViewControllerReferenceCMa();
      v10 = (char *)objc_allocWithZone(v9);
      v11 = swift_unknownObjectWeakInit(&v10[OBJC_IVAR____TtCE9MusicCoreCSo16UIViewControllerP33_DFE32C8D797FD8FF4F7188EA667D17A427WeakViewControllerReference_viewController], 0);
      swift_unknownObjectWeakAssign(v11, receiver);
      v2[1].receiver = v10;
      v2[1].super_class = v9;
      v12 = objc_msgSendSuper2(v2 + 1, "init");
    }
    else
    {
      v12 = 0;
    }
    if (qword_10048C7A0 != -1)
      swift_once(&qword_10048C7A0, sub_1000F09DC);
    v16 = v2[2].super_class;
    v17 = (const void *)qword_100491B80;
    v18 = v12;
    objc_setAssociatedObject(v16, v17, v18, (void *)1);

  }
  free(v2);
}

uint64_t UIViewController.playActivityRecommendationData.getter()
{
  return 0;
}

uint64_t UIViewController.playActivityForwardedRecommendationData.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v4;
  _OWORD v5[2];
  _BYTE v6[24];
  uint64_t v7;

  if (qword_10048C7A8 != -1)
    swift_once(&qword_10048C7A8, sub_1000F0A00);
  v1 = objc_getAssociatedObject(v0, (const void *)qword_100491B88);
  if (v1)
  {
    v2 = v1;
    _bridgeAnyObjectToAny(_:)(v1);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_1000AEB5C((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    if (swift_dynamicCast(&v4, v6, (char *)&type metadata for Any + 8, &type metadata for Data, 6))
      return v4;
    else
      return 0;
  }
  else
  {
    sub_100098B58((uint64_t)v6);
    return 0;
  }
}

void UIViewController.playActivityForwardedRecommendationData.setter(uint64_t a1, unint64_t a2)
{
  void *v2;
  void *v3;
  const void *v6;
  Class value;

  v3 = v2;
  if (qword_10048C7A8 != -1)
    swift_once(&qword_10048C7A8, sub_1000F0A00);
  v6 = (const void *)qword_100491B88;
  if (a2 >> 60 == 15)
  {
    value = 0;
    objc_setAssociatedObject(v3, (const void *)qword_100491B88, 0, (void *)3);
  }
  else
  {
    sub_1000516F8(a1, a2);
    value = Data._bridgeToObjectiveC()().super.isa;
    sub_1000067D4(a1, a2);
    objc_setAssociatedObject(v3, v6, value, (void *)3);
  }
  sub_1000067D4(a1, a2);

}

void (*UIViewController.playActivityForwardedRecommendationData.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  *a1 = UIViewController.playActivityForwardedRecommendationData.getter();
  a1[1] = v3;
  return sub_1000F1104;
}

void sub_1000F1104(uint64_t a1, char a2)
{
  uint64_t v3;
  unint64_t v4;
  const void *v5;
  Class isa;
  const void *v7;
  Class value;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  if ((a2 & 1) != 0)
  {
    sub_1000516E4(*(_QWORD *)a1, v4);
    if (qword_10048C7A8 != -1)
      swift_once(&qword_10048C7A8, sub_1000F0A00);
    v5 = (const void *)qword_100491B88;
    if (v4 >> 60 == 15)
    {
      isa = 0;
    }
    else
    {
      sub_1000516F8(v3, v4);
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_1000067D4(v3, v4);
    }
    objc_setAssociatedObject(*(id *)(a1 + 16), v5, isa, (void *)3);
    sub_1000067D4(v3, v4);

    sub_1000067D4(v3, v4);
  }
  else
  {
    if (qword_10048C7A8 != -1)
      swift_once(&qword_10048C7A8, sub_1000F0A00);
    v7 = (const void *)qword_100491B88;
    if (v4 >> 60 == 15)
    {
      value = 0;
      objc_setAssociatedObject(*(id *)(a1 + 16), (const void *)qword_100491B88, 0, (void *)3);
    }
    else
    {
      sub_1000516F8(v3, v4);
      value = Data._bridgeToObjectiveC()().super.isa;
      sub_1000067D4(v3, v4);
      objc_setAssociatedObject(*(id *)(a1 + 16), v7, value, (void *)3);
    }
    sub_1000067D4(v3, v4);

  }
}

uint64_t UIViewController.inheritedPlayActivityRecommendationData(shouldIncludeForwardedRecommendationData:)(char a1)
{
  void *v1;
  id v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  id Strong;
  id v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  int v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  void *v24;
  _QWORD v26[2];
  __int128 v27;
  __int128 v28;
  _BYTE v29[24];
  uint64_t v30;

  v3 = objc_msgSend(v1, "playActivityRecommendationData");
  if (v3)
  {
    v4 = v3;
    v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    if ((a1 & 1) == 0)
    {
      Strong = UIViewController.playActivityRecommendationDataSourceViewController.getter();
      v5 = 0;
LABEL_8:
      if (!Strong)
        return v5;
      while (1)
      {
        v10 = objc_msgSend(Strong, "playActivityRecommendationData");
        if (v10)
        {
          v11 = v10;
          v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);
          v13 = v12;

          goto LABEL_27;
        }
        if ((a1 & 1) == 0)
          goto LABEL_26;
        v14 = qword_10048C7A8;
        v15 = Strong;
        if (v14 != -1)
          swift_once(&qword_10048C7A8, sub_1000F0A00);
        v16 = objc_getAssociatedObject(v15, (const void *)qword_100491B88);
        if (v16)
        {
          v17 = v16;
          _bridgeAnyObjectToAny(_:)(v16);
          swift_unknownObjectRelease(v17);
        }
        else
        {
          v27 = 0u;
          v28 = 0u;
        }
        sub_1000AEB5C((uint64_t)&v27, (uint64_t)v29);
        if (!v30)
          break;
        v18 = swift_dynamicCast(v26, v29, (char *)&type metadata for Any + 8, &type metadata for Data, 6);
        if (v18)
          v5 = v26[0];
        else
          v5 = 0;
        if (v18)
          v13 = v26[1];
        else
          v13 = 0xF000000000000000;

LABEL_27:
        v19 = qword_10048C7A0;
        v20 = Strong;
        if (v19 != -1)
          swift_once(&qword_10048C7A0, sub_1000F09DC);
        v21 = objc_getAssociatedObject(v20, (const void *)qword_100491B80);
        if (v21)
        {
          v22 = v21;
          _bridgeAnyObjectToAny(_:)(v21);
          swift_unknownObjectRelease(v22);
        }
        else
        {
          v27 = 0u;
          v28 = 0u;
        }
        sub_1000AEB5C((uint64_t)&v27, (uint64_t)v29);
        if (v30)
        {
          v23 = _s27WeakViewControllerReferenceCMa();
          if ((swift_dynamicCast(v26, v29, (char *)&type metadata for Any + 8, v23, 6) & 1) != 0)
          {
            v24 = (void *)v26[0];
            Strong = (id)swift_unknownObjectWeakLoadStrong(v26[0]+ OBJC_IVAR____TtCE9MusicCoreCSo16UIViewControllerP33_DFE32C8D797FD8FF4F7188EA667D17A427WeakViewControllerReference_viewController);

            if (Strong)
              goto LABEL_38;
          }
        }
        else
        {
          sub_100098B58((uint64_t)v29);
        }
        Strong = objc_msgSend(v20, "parentViewController");
LABEL_38:

        if (v13 >> 60 != 15)
          goto LABEL_6;
        if (!Strong)
          return v5;
      }
      sub_100098B58((uint64_t)v29);

LABEL_26:
      v5 = 0;
      v13 = 0xF000000000000000;
      goto LABEL_27;
    }
    v5 = UIViewController.playActivityForwardedRecommendationData.getter();
    v7 = v8;
  }
  Strong = UIViewController.playActivityRecommendationDataSourceViewController.getter();
  if (v7 >> 60 == 15)
    goto LABEL_8;
LABEL_6:

  return v5;
}

uint64_t UIViewController.playActivityFeatureName.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v4;
  _OWORD v5[2];
  _BYTE v6[24];
  uint64_t v7;

  if (qword_10048C790 != -1)
    swift_once(&qword_10048C790, sub_1000F0994);
  v1 = objc_getAssociatedObject(v0, (const void *)qword_100491B70);
  if (v1)
  {
    v2 = v1;
    _bridgeAnyObjectToAny(_:)(v1);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_1000AEB5C((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    if (swift_dynamicCast(&v4, v6, (char *)&type metadata for Any + 8, &type metadata for String, 6))
      return v4;
  }
  else
  {
    sub_100098B58((uint64_t)v6);
  }
  return 0;
}

void UIViewController.playActivityFeatureName.setter()
{
  void *v0;
  const void *v1;
  id value;

  if (qword_10048C790 != -1)
    swift_once(&qword_10048C790, sub_1000F0994);
  v1 = (const void *)qword_100491B70;
  value = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_setAssociatedObject(v0, v1, value, (void *)3);

}

uint64_t UIViewController.playActivityFeatureIdentifier.getter()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, "playActivityFeatureName");
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v4 = v3;

  return _s9MusicCore29PlayActivityFeatureIdentifierO8rawValueACSgSS_tcfC_0(v2, v4);
}

void UIViewController.playActivityFeatureIdentifier.setter(unsigned __int8 a1)
{
  void *v1;
  id v2;

  if (a1 != 18)
    PlayActivityFeatureIdentifier.rawValue.getter(a1);
  v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v1, "setPlayActivityFeatureName:", v2);

}

void (*UIViewController.playActivityFeatureIdentifier.modify(uint64_t a1))(uint64_t a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = v1;
  v3 = objc_msgSend(v1, "playActivityFeatureName");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  *(_BYTE *)(a1 + 8) = _s9MusicCore29PlayActivityFeatureIdentifierO8rawValueACSgSS_tcfC_0(v4, v6);
  return sub_1000F1900;
}

void sub_1000F1900(uint64_t a1)
{
  int v2;
  void *v3;
  id v4;

  v2 = *(unsigned __int8 *)(a1 + 8);
  if (v2 != 18)
    PlayActivityFeatureIdentifier.rawValue.getter(v2);
  v3 = *(void **)a1;
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v3, "setPlayActivityFeatureName:", v4);

}

uint64_t UIViewController.playActivityFeatureNames(sourceChildViewController:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100005574((uint64_t *)&unk_100491700);
  v2 = swift_allocObject(v1, 48, 7);
  *(_OWORD *)(v2 + 16) = xmmword_100384A80;
  v3 = objc_msgSend(v0, "playActivityFeatureName");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  *(_QWORD *)(v2 + 32) = v4;
  *(_QWORD *)(v2 + 40) = v6;
  return v2;
}

uint64_t UIViewController.completePlayActivityFeatureNames.getter()
{
  void *v0;
  id v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = v0;
  v2 = 0;
  do
  {
    v3 = v1;
    v4 = objc_msgSend(v1, "playActivityFeatureNamesWithSourceChildViewController:", v2);
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, &type metadata for String);

    sub_10008A93C(v5);
    v1 = objc_msgSend(v3, "playActivityFeatureNameSourceViewController");
    v2 = v3;
  }
  while (v1);
  v6 = _swiftEmptyArrayStorage[2];
  if (v6)
  {
    swift_bridgeObjectRetain();
    v7 = &_swiftEmptyArrayStorage[5];
    do
    {
      v12 = *(v7 - 1);
      v11 = *v7;
      v13 = HIBYTE(*v7) & 0xF;
      if ((*v7 & 0x2000000000000000) == 0)
        v13 = v12 & 0xFFFFFFFFFFFFLL;
      if (v13)
      {
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_10007736C(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v9 = _swiftEmptyArrayStorage[2];
        v8 = _swiftEmptyArrayStorage[3];
        if (v9 >= v8 >> 1)
          sub_10007736C((char *)(v8 > 1), v9 + 1, 1);
        _swiftEmptyArrayStorage[2] = v9 + 1;
        v10 = &_swiftEmptyArrayStorage[2 * v9];
        v10[4] = v12;
        v10[5] = v11;
      }
      v7 += 2;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v14 = sub_1000F1CA4((uint64_t)_swiftEmptyArrayStorage);

  return v14;
}

uint64_t sub_1000F1CA4(uint64_t result)
{
  char *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;

  v1 = (char *)result;
  v2 = *(_QWORD *)(result + 16);
  if (v2 < 2)
    return (uint64_t)v1;
  v3 = 0;
  v4 = 0;
  v5 = v2 >> 1;
  v6 = v2 - 1;
  v7 = 16 * v2 + 16;
  v15 = v2 >> 1;
  while (1)
  {
    if (v4 == v6)
      goto LABEL_4;
    v8 = *((_QWORD *)v1 + 2);
    if (v4 >= v8)
      break;
    if (v6 >= v8)
      goto LABEL_13;
    v10 = *(_QWORD *)&v1[v3 + 32];
    v9 = *(_QWORD *)&v1[v3 + 40];
    v12 = *(_QWORD *)&v1[v7];
    v11 = *(_QWORD *)&v1[v7 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native(v1) & 1) == 0)
      v1 = sub_1001B70F0((uint64_t)v1);
    v13 = &v1[v3];
    result = swift_bridgeObjectRelease();
    *((_QWORD *)v13 + 4) = v12;
    *((_QWORD *)v13 + 5) = v11;
    if (v6 >= *((_QWORD *)v1 + 2))
      goto LABEL_14;
    v14 = &v1[v7];
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v14 = v10;
    *((_QWORD *)v14 + 1) = v9;
    v5 = v15;
LABEL_4:
    ++v4;
    --v6;
    v7 -= 16;
    v3 += 16;
    if (v5 == v4)
      return (uint64_t)v1;
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t UIViewController.combinedPlayActivityFeatureName.getter()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, "completePlayActivityFeatureNames");
  static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String);

  v2 = sub_100005574(&qword_10048E158);
  v3 = sub_10002FFB8((unint64_t *)&qword_100491870, &qword_10048E158, (uint64_t)&protocol conformance descriptor for [A]);
  v4 = BidirectionalCollection<>.joined(separator:)(2109216, 0xE300000000000000, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t UIViewController.playActivityInformation.getter()
{
  void *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(v0, "combinedPlayActivityFeatureName");
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  UIViewController.inheritedPlayActivityRecommendationData(shouldIncludeForwardedRecommendationData:)(1);
  return v2;
}

uint64_t UINavigationController.playActivityFeatureNames(sourceChildViewController:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  id v25;
  unint64_t v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;

  v5 = objc_msgSend((id)v1, "viewControllers");
  v6 = sub_1000087DC(0, &qword_100491BA8, UIViewController_ptr);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  if (!a1)
    goto LABEL_25;
  v8 = a1;
  v9 = sub_1000F23FC((uint64_t)v8, v7);
  if ((v10 & 1) == 0)
  {
    v11 = v9;
    if (v9 < 0)
      goto LABEL_56;
    v3 = (unint64_t)v7 >> 62;
    if ((unint64_t)v7 >> 62)
    {
LABEL_57:
      if (v7 < 0)
        v39 = v7;
      else
        v39 = v7 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v2 = _CocoaArrayWrapper.endIndex.getter(v39);
      result = swift_bridgeObjectRelease();
      if (v2 < 0)
      {
        __break(1u);
        return result;
      }
      swift_bridgeObjectRetain();
      v12 = _CocoaArrayWrapper.endIndex.getter(v39);
      v9 = swift_bridgeObjectRelease();
      if (v12 >= (uint64_t)v11)
      {
LABEL_6:
        if ((v7 & 0xC000000000000001) != 0 && v11)
        {
          v13 = 0;
          do
          {
            v14 = v13 + 1;
            _ArrayBuffer._typeCheckSlowPath(_:)(v13);
            v13 = v14;
          }
          while (v11 != v14);
        }
        if (v3)
        {
          if (v7 < 0)
            v15 = v7;
          else
            v15 = v7 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain();
          v6 = _CocoaArrayWrapper.subscript.getter(0, v11, v15);
          v2 = v16;
          v12 = v17;
          v11 = v18;
          swift_bridgeObjectRelease_n(v7, 2);
          if ((v11 & 1) == 0)
            goto LABEL_18;
        }
        else
        {
          v12 = 0;
          v6 = v7 & 0xFFFFFFFFFFFFFF8;
          v2 = (v7 & 0xFFFFFFFFFFFFFF8) + 32;
          v11 = (2 * v11) | 1;
          if ((v11 & 1) == 0)
          {
LABEL_18:
            sub_1000F28F8(v6, v2, v12, v11);
            v7 = v19;

            swift_unknownObjectRelease(v6);
            goto LABEL_25;
          }
        }
        v20 = type metadata accessor for __ContiguousArrayStorageBase(0);
        v22 = swift_unknownObjectRetain_n(v6, 2, v21);
        v23 = (_QWORD *)swift_dynamicCastClass(v22, v20);
        if (!v23)
        {
          swift_unknownObjectRelease(v6);
          v23 = _swiftEmptyArrayStorage;
        }
        v3 = v23[2];
        swift_release(v23);
        if (!__OFSUB__(v11 >> 1, v12))
        {
          v9 = v6;
          if (v3 == (v11 >> 1) - v12)
          {
            v7 = swift_dynamicCastClass(v6, v20);

            swift_unknownObjectRelease(v6);
            if (!v7)
            {
              swift_unknownObjectRelease(v6);
              v7 = (uint64_t)_swiftEmptyArrayStorage;
            }
            goto LABEL_25;
          }
          goto LABEL_64;
        }
LABEL_63:
        __break(1u);
LABEL_64:
        swift_unknownObjectRelease(v9);
        goto LABEL_18;
      }
    }
    else
    {
      v12 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v12 >= v9)
        goto LABEL_6;
    }
    __break(1u);
    goto LABEL_63;
  }

LABEL_25:
  v24 = sub_100005574((uint64_t *)&unk_100491700);
  v8 = (char *)swift_allocObject(v24, 48, 7);
  *((_OWORD *)v8 + 1) = xmmword_100384A80;
  v25 = objc_msgSend((id)v1, "playActivityFeatureName");
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v11 = v26;

  *((_QWORD *)v8 + 4) = v6;
  *((_QWORD *)v8 + 5) = v11;
  if ((unint64_t)v7 >> 62)
    goto LABEL_50;
  v1 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v1)
  {
    if (v1 < 1)
    {
      __break(1u);
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    v6 = 0;
    v11 = (unint64_t)&type metadata for String;
    while (1)
    {
      v27 = (v7 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v7)
          : *(id *)(v7 + 8 * v6 + 32);
      v28 = v27;
      v29 = objc_msgSend(v27, "playActivityFeatureNamesWithSourceChildViewController:", 0);
      v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v29, &type metadata for String);

      v3 = *(_QWORD *)(v30 + 16);
      v31 = *((_QWORD *)v8 + 2);
      v32 = v31 + v3;
      if (__OFADD__(v31, v3))
        break;
      if (v32 > *((_QWORD *)v8 + 3) >> 1)
      {
        if (v31 <= v32)
          v36 = v31 + v3;
        else
          v36 = *((_QWORD *)v8 + 2);
        v8 = sub_10003DE28((char *)1, v36, 1, v8);
        v31 = *((_QWORD *)v8 + 2);
        if (*(_QWORD *)(v30 + 16))
        {
LABEL_37:
          if ((*((_QWORD *)v8 + 3) >> 1) - v31 < v3)
            goto LABEL_48;
          swift_arrayInitWithCopy(&v8[16 * v31 + 32], v30 + 32, v3, &type metadata for String);
          if (v3)
          {
            v33 = *((_QWORD *)v8 + 2);
            v34 = __OFADD__(v33, v3);
            v35 = v33 + v3;
            if (v34)
              goto LABEL_49;
            *((_QWORD *)v8 + 2) = v35;
          }
          goto LABEL_30;
        }
      }
      else if (v3)
      {
        goto LABEL_37;
      }
      if (v3)
        goto LABEL_47;
LABEL_30:
      ++v6;
      swift_bridgeObjectRelease();

      if (v1 == v6)
        goto LABEL_54;
    }
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    if (v7 < 0)
      v37 = v7;
    else
      v37 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v1 = _CocoaArrayWrapper.endIndex.getter(v37);
    swift_bridgeObjectRelease();
  }
LABEL_54:
  swift_bridgeObjectRelease();
  return (uint64_t)v8;
}

uint64_t sub_1000F23FC(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  char v7;
  unint64_t v8;
  uint64_t i;
  id v10;
  void *v11;
  char v12;
  uint64_t v13;

  v3 = result;
  if ((unint64_t)a2 >> 62)
    goto LABEL_21;
  v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v4)
  {
    if ((a2 & 0xC000000000000001) != 0)
    {
      v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
    }
    else
    {
      if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return result;
      }
      v5 = *(id *)(a2 + 32);
    }
    v6 = v5;
    sub_1000087DC(0, &qword_100491BA8, UIViewController_ptr);
    v7 = static NSObject.== infix(_:_:)(v6, v3);

    if ((v7 & 1) != 0)
      return 0;
    for (i = 0; ; ++i)
    {
      v8 = i + 1;
      if (__OFADD__(i, 1))
        break;
      if (v8 == v4)
        return 0;
      if ((a2 & 0xC000000000000001) != 0)
      {
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i + 1, a2);
      }
      else
      {
        if ((v8 & 0x8000000000000000) != 0)
          goto LABEL_19;
        if (v8 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_20;
        v10 = *(id *)(a2 + 32 + 8 * v8);
      }
      v11 = v10;
      v12 = static NSObject.== infix(_:_:)(v10, v3);

      if ((v12 & 1) != 0)
        return v8;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    if (a2 < 0)
      v13 = a2;
    else
      v13 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter(v13);
    result = swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t sub_1000F2594(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    __asm { BR              X9 }
  return 0;
}

void sub_1000F28F8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_11:
    __break(1u);
    return;
  }
  if (v5)
  {
    if (v5 <= 0)
    {
      v9 = _swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_7:
        v12 = sub_1000087DC(0, &qword_100491BA8, UIViewController_ptr);
        swift_arrayInitWithCopy(v9 + 4, a2 + 8 * a3, v5, v12);
        return;
      }
    }
    else
    {
      v8 = sub_100005574((uint64_t *)&unk_100491910);
      v9 = (_QWORD *)swift_allocObject(v8, 8 * v5 + 32, 7);
      v10 = j__malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 25;
      v9[2] = v5;
      v9[3] = (2 * (v11 >> 3)) | 1;
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
    goto LABEL_11;
  }
}

_QWORD *sub_1000F29E4(const void *a1, uint64_t a2)
{
  uint64_t v4;
  size_t v5;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;

  if (!a2)
    return _swiftEmptyArrayStorage;
  if (a2 <= 0)
  {
    v5 = 8 * a2;
    v6 = _swiftEmptyArrayStorage;
  }
  else
  {
    v4 = sub_100005574(&qword_100491C08);
    v5 = 8 * a2;
    v6 = (_QWORD *)swift_allocObject(v4, 8 * a2 + 32, 7);
    v7 = j__malloc_size(v6);
    v8 = v7 - 32;
    if (v7 < 32)
      v8 = v7 - 25;
    v6[2] = a2;
    v6[3] = 2 * (v8 >> 3);
  }
  memcpy(v6 + 4, a1, v5);
  return v6;
}

_QWORD *sub_1000F2A84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100005574(&qword_100491BF8);
  v4 = (_QWORD *)swift_allocObject(v3, 16 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  v7 = sub_1000F2E70((uint64_t)&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain();
  sub_1000F38AC(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_1000F2B68(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v2 <= 0)
    {
      v4 = _swiftEmptyArrayStorage;
    }
    else
    {
      v3 = sub_100005574((uint64_t *)&unk_100491910);
      v4 = (_QWORD *)swift_allocObject(v3, 8 * v2 + 32, 7);
      v5 = j__malloc_size(v4);
      v6 = v5 - 32;
      if (v5 < 32)
        v6 = v5 - 25;
      v4[2] = v2;
      v4[3] = (2 * (v6 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_1000F3700((uint64_t)(v4 + 4), v2, v1);
    v1 = v7;
    swift_bridgeObjectRelease();
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    if (v1 < 0)
      v8 = v1;
    else
      v8 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter(v8);
    swift_bridgeObjectRelease();
    if (!v2)
      return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_1000F2C5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100005574(&qword_100491C00);
  v4 = (_QWORD *)swift_allocObject(v3, 40 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v4[2] = v1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 40);
  v6 = sub_1000F306C((uint64_t)&v9, (uint64_t)(v4 + 4), v1, a1);
  v7 = v9;
  swift_bridgeObjectRetain();
  sub_1000F38AC(v7);
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

uint64_t sub_1000F2D4C(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a4 + 16);
  if (a2)
  {
    if (a3)
    {
      if (a3 < 0)
      {
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      if (!v6)
      {
LABEL_20:
        v8 = 0;
        goto LABEL_17;
      }
      v8 = v6 - 1;
      v9 = a4 + 16 * (v6 - 1);
      v10 = *(_QWORD *)(v9 + 40);
      *a2 = *(_QWORD *)(v9 + 32);
      a2[1] = v10;
      if (a3 == 1)
      {
LABEL_15:
        v6 = a3;
      }
      else if (v6 != 1)
      {
        v11 = 0;
        v12 = a3 - 2;
        v13 = (uint64_t *)(a4 + 16 * v6 + 8);
        v14 = a2 + 3;
        while (v6 + v11 - 1 <= *(_QWORD *)(a4 + 16))
        {
          v15 = *v13;
          *(v14 - 1) = *(v13 - 1);
          *v14 = v15;
          if (!(v12 + v11))
          {
            swift_bridgeObjectRetain();
            v8 = v6 + v11 - 2;
            goto LABEL_15;
          }
          swift_bridgeObjectRetain();
          --v11;
          v13 -= 2;
          v14 += 2;
          if (v6 + v11 == 1)
          {
            v8 = 0;
            goto LABEL_16;
          }
        }
        __break(1u);
        goto LABEL_19;
      }
LABEL_16:
      swift_bridgeObjectRetain();
    }
    else
    {
      v8 = *(_QWORD *)(a4 + 16);
      v6 = 0;
    }
  }
  else
  {
    v8 = *(_QWORD *)(a4 + 16);
    v6 = 0;
  }
LABEL_17:
  *a1 = a4;
  a1[1] = v8;
  return v6;
}

uint64_t sub_1000F2E70(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1000F306C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v13 = 0;
LABEL_36:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v13;
  }
  if (!a3)
  {
    v12 = 0;
    v13 = 0;
    goto LABEL_36;
  }
  if (a3 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  v22 = -1 << *(_BYTE *)(a4 + 32);
  while (v9)
  {
    v15 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v16 = v15 | (v12 << 6);
LABEL_9:
    ++v13;
    result = sub_10009B414(*(_QWORD *)(a4 + 48) + 40 * v16, (uint64_t)v23);
    v17 = v24;
    v18 = v23[1];
    *(_OWORD *)v11 = v23[0];
    *(_OWORD *)(v11 + 16) = v18;
    *(_QWORD *)(v11 + 32) = v17;
    v11 += 40;
    if (v13 == a3)
    {
      v13 = a3;
LABEL_35:
      v7 = v22;
      goto LABEL_36;
    }
  }
  v19 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v19 >= v14)
    goto LABEL_34;
  v20 = *(_QWORD *)(v6 + 8 * v19);
  if (v20)
    goto LABEL_23;
  v21 = v12 + 2;
  ++v12;
  if (v19 + 1 >= v14)
    goto LABEL_34;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
    goto LABEL_16;
  v12 = v19 + 1;
  if (v19 + 2 >= v14)
    goto LABEL_34;
  v20 = *(_QWORD *)(v6 + 8 * (v19 + 2));
  if (v20)
  {
    v19 += 2;
    goto LABEL_23;
  }
  v12 = v19 + 2;
  if (v19 + 3 >= v14)
    goto LABEL_34;
  v20 = *(_QWORD *)(v6 + 8 * (v19 + 3));
  if (v20)
  {
    v19 += 3;
    goto LABEL_23;
  }
  v21 = v19 + 4;
  v12 = v19 + 3;
  if (v19 + 4 >= v14)
  {
LABEL_34:
    v9 = 0;
    goto LABEL_35;
  }
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
LABEL_16:
    v19 = v21;
LABEL_23:
    v9 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v19 << 6);
    v12 = v19;
    goto LABEL_9;
  }
  while (1)
  {
    v19 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v19 >= v14)
    {
      v12 = v14 - 1;
      goto LABEL_34;
    }
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v21;
    if (v20)
      goto LABEL_23;
  }
LABEL_39:
  __break(1u);
  return result;
}

void (*sub_1000F3274(uint64_t **a1, unint64_t a2, uint64_t a3))(_QWORD *)
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_100089000(v6, a2, a3);
  return sub_1000F32C8;
}

void (*sub_1000F32CC(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_100089074(v6, a2, a3);
  return sub_1000F32C8;
}

void (*sub_1000F3320(uint64_t **a1, unint64_t a2, uint64_t a3))(_QWORD *)
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_1000890E8(v6, a2, a3);
  return sub_1000F32C8;
}

void sub_1000F3374(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t sub_1000F33A0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17[4];

  v5 = result;
  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    result = swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (v5)
  {
    if (v6)
    {
      if (a3 < 0)
        v10 = a3;
      else
        v10 = a3 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v11 = _CocoaArrayWrapper.endIndex.getter(v10);
      result = swift_bridgeObjectRelease(a3);
      if (v11 <= a2)
      {
        if (v7 >= 1)
        {
          sub_10002FFB8((unint64_t *)&unk_100491C30, &qword_100491C28, (uint64_t)&protocol conformance descriptor for [A]);
          swift_bridgeObjectRetain();
          for (i = 0; i != v7; ++i)
          {
            sub_100005574(&qword_100491C28);
            v13 = sub_1000F3274(v17, i, a3);
            v15 = *v14;
            swift_retain(*v14);
            ((void (*)(uint64_t **, _QWORD))v13)(v17, 0);
            *(_QWORD *)(v5 + 8 * i) = v15;
          }
          swift_bridgeObjectRelease(a3);
          return a3;
        }
        goto LABEL_22;
      }
    }
    else
    {
      v8 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v8 <= a2)
      {
        v9 = type metadata accessor for BagProvider.Observer();
        swift_arrayInitWithCopy(v5, (a3 & 0xFFFFFFFFFFFFFF8) + 32, v8, v9);
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_22:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000F3548(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  void (*v17[4])(id *);

  v5 = result;
  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    result = swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (v5)
  {
    if (v6)
    {
      if (a3 < 0)
        v10 = a3;
      else
        v10 = a3 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v11 = _CocoaArrayWrapper.endIndex.getter(v10);
      result = swift_bridgeObjectRelease(a3);
      if (v11 <= a2)
      {
        if (v7 >= 1)
        {
          sub_10002FFB8(&qword_100491C20, &qword_100491C18, (uint64_t)&protocol conformance descriptor for [A]);
          swift_bridgeObjectRetain();
          for (i = 0; i != v7; ++i)
          {
            sub_100005574(&qword_100491C18);
            v13 = sub_1000F32CC(v17, i, a3);
            v15 = *v14;
            ((void (*)(void (**)(id *), _QWORD))v13)(v17, 0);
            *(_QWORD *)(v5 + 8 * i) = v15;
          }
          swift_bridgeObjectRelease(a3);
          return a3;
        }
        goto LABEL_22;
      }
    }
    else
    {
      v8 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v8 <= a2)
      {
        v9 = sub_1000087DC(0, (unint64_t *)&qword_100491C10, NSError_ptr);
        swift_arrayInitWithCopy(v5, (a3 & 0xFFFFFFFFFFFFFF8) + 32, v8, v9);
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_22:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000F3700(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17[4];

  v5 = result;
  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    result = swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (v5)
  {
    if (v6)
    {
      if (a3 < 0)
        v10 = a3;
      else
        v10 = a3 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v11 = _CocoaArrayWrapper.endIndex.getter(v10);
      result = swift_bridgeObjectRelease();
      if (v11 <= a2)
      {
        if (v7 >= 1)
        {
          sub_10002FFB8(&qword_100491BF0, &qword_100491BE8, (uint64_t)&protocol conformance descriptor for [A]);
          swift_bridgeObjectRetain();
          for (i = 0; i != v7; ++i)
          {
            sub_100005574(&qword_100491BE8);
            v13 = sub_1000F3320(v17, i, a3);
            v15 = *v14;
            swift_unknownObjectRetain(*v14);
            ((void (*)(uint64_t **, _QWORD))v13)(v17, 0);
            *(_QWORD *)(v5 + 8 * i) = v15;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_22;
      }
    }
    else
    {
      v8 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v8 <= a2)
      {
        v9 = sub_100005574(&qword_100491BE0);
        swift_arrayInitWithCopy(v5, (a3 & 0xFFFFFFFFFFFFFF8) + 32, v8, v9);
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_22:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000F38AC(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t *NSUserDefaults.mobileiPod.unsafeMutableAddressor()
{
  if (qword_10048C7B0 != -1)
    swift_once(&qword_10048C7B0, sub_1000F39DC);
  return &static NSUserDefaults.mobileiPod;
}

uint64_t NSUserDefaults.hasUserRequestedSubscriptionHidden.getter()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t result;
  unsigned __int8 v3;
  __int128 v4;
  uint64_t v5;

  v0 = sub_1000BC23C();
  v1 = sub_10000D478();
  NSUserDefaults.subscript.getter((uint64_t)&type metadata for NSUserDefaults.MobileiPod, v0, v1, &v4);
  if (v5)
  {
    result = swift_dynamicCast(&v3, &v4, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
    if ((_DWORD)result)
      return v3;
  }
  else
  {
    sub_100098B58((uint64_t)&v4);
    return 0;
  }
  return result;
}

uint64_t NSUserDefaults.hasUserRequestedSubscriptionHidden.setter(char a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _BYTE v5[24];
  void *v6;

  v6 = &type metadata for Bool;
  v5[0] = a1;
  v1 = sub_1000BC23C();
  v2 = sub_10000D478();
  return NSUserDefaults.subscript.setter((uint64_t)v5, v3, (uint64_t)&type metadata for NSUserDefaults.MobileiPod, v1, v2);
}

void *NSUserDefaults.MobileiPod.suiteName.unsafeMutableAddressor()
{
  return &static NSUserDefaults.MobileiPod.suiteName;
}

void sub_1000F39DC()
{
  id v0;
  NSString v1;
  id v2;

  v0 = objc_allocWithZone((Class)NSUserDefaults);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "initWithSuiteName:", v1);

  static NSUserDefaults.mobileiPod = (uint64_t)v2;
}

uint64_t static NSUserDefaults.mobileiPod.getter()
{
  uint64_t v0;
  id v1;

  if (qword_10048C7B0 != -1)
    swift_once(&qword_10048C7B0, sub_1000F39DC);
  v0 = static NSUserDefaults.mobileiPod;
  v1 = (id)static NSUserDefaults.mobileiPod;
  return v0;
}

unint64_t static NSUserDefaults.MobileiPod.suiteName.getter()
{
  return 0xD000000000000014;
}

BOOL NSUserDefaults.MobileiPod.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10043E830, v2);
  swift_bridgeObjectRelease(object);
  return v3 != 0;
}

unint64_t NSUserDefaults.MobileiPod.rawValue.getter()
{
  return 0xD00000000000001FLL;
}

Swift::Int sub_1000F3B14()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0xD00000000000001FLL, 0x80000001003AC9E0);
  return Hasher._finalize()();
}

uint64_t sub_1000F3B68(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD00000000000001FLL, 0x80000001003AC9E0);
}

Swift::Int sub_1000F3B84()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0xD00000000000001FLL, 0x80000001003AC9E0);
  return Hasher._finalize()();
}

uint64_t sub_1000F3BD4@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10043E868, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_1000F3C24(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001FLL;
  a1[1] = 0x80000001003AC9E0;
}

void (*NSUserDefaults.hasUserRequestedSubscriptionHidden.modify(_QWORD *a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  char v6;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = sub_1000BC23C();
  v3[5] = v4;
  v5 = sub_10000D478();
  v3[6] = v5;
  NSUserDefaults.subscript.getter((uint64_t)&type metadata for NSUserDefaults.MobileiPod, v4, v5, v3);
  if (!v3[3])
  {
    sub_100098B58((uint64_t)v3);
    goto LABEL_5;
  }
  if ((swift_dynamicCast((char *)v3 + 57, v3, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) == 0)
  {
LABEL_5:
    v6 = 0;
    goto LABEL_6;
  }
  v6 = *((_BYTE *)v3 + 57);
LABEL_6:
  *((_BYTE *)v3 + 56) = v6;
  return sub_1000F3D04;
}

void sub_1000F3D04(uint64_t a1, uint64_t a2)
{
  void *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[24];
  void *v7;

  v2 = *(void **)a1;
  v3 = *(_BYTE *)(*(_QWORD *)a1 + 56);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  v7 = &type metadata for Bool;
  v6[0] = v3;
  NSUserDefaults.subscript.setter((uint64_t)v6, a2, (uint64_t)&type metadata for NSUserDefaults.MobileiPod, v4, v5);
  free(v2);
}

unint64_t sub_1000F3D5C()
{
  unint64_t result;

  result = qword_100491C40;
  if (!qword_100491C40)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NSUserDefaults.MobileiPod, &type metadata for NSUserDefaults.MobileiPod);
    atomic_store(result, (unint64_t *)&qword_100491C40);
  }
  return result;
}

uint64_t _s10MobileiPodOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000F3DE0 + 4 * byte_10038BFA8[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000F3E00 + 4 * byte_10038BFAD[v4]))();
}

_BYTE *sub_1000F3DE0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000F3E00(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000F3E08(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000F3E10(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000F3E18(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000F3E20(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NSUserDefaults.MobileiPod()
{
  return &type metadata for NSUserDefaults.MobileiPod;
}

id static ICUserIdentity.active.getter()
{
  uint64_t v0;

  return objc_msgSend((id)swift_getObjCClassFromMetadata(v0), "activeAccount");
}

id static ICUserIdentityStore.activeAccountDSID.getter()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v8;

  v1 = objc_msgSend((id)swift_getObjCClassFromMetadata(v0), "defaultIdentityStore");
  v2 = objc_msgSend((id)objc_opt_self(ICUserIdentity), "activeAccount");
  v8 = 0;
  v3 = objc_msgSend(v1, "DSIDForUserIdentity:outError:", v2, &v8);

  v4 = v8;
  if (!v3)
  {
    v5 = v4;
    v6 = _convertNSErrorToError(_:)(v4);

    swift_willThrow();
    swift_errorRelease(v6);
    return 0;
  }
  return v3;
}

uint64_t static ICMusicKitRequestContext.music.getter()
{
  id v0;
  void *v1;
  id v2;
  __n128 v3;
  uint64_t result;
  _QWORD v5[5];
  uint64_t v6;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v5[4] = sub_1000F514C;
  v6 = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_1000E776C;
  v5[3] = &unk_10044ABC8;
  v1 = _Block_copy(v5);
  v2 = objc_msgSend(v0, "initWithBlock:", v1);
  _Block_release(v1);
  v3 = swift_release(v6);
  result = swift_isEscapingClosureAtFileLocation(0, "", 0, 0, 0, 1, v3);
  if ((result & 1) == 0)
    return (uint64_t)v2;
  __break(1u);
  return result;
}

id static ICURLSessionManager.musicSession.getter()
{
  return objc_msgSend((id)objc_opt_self(ICURLSessionManager), "highPrioritySession");
}

double ICURLBag.subscript.getter@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  NSString v6;
  id v7;
  double result;

  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v5 = v4;
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  v7 = objc_msgSend(v2, "valueForBagKey:", v6);

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)(v7);
    swift_unknownObjectRelease(v7);
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t *ICClientInfo.music.unsafeMutableAddressor()
{
  if (qword_10048C7B8 != -1)
    swift_once(&qword_10048C7B8, sub_1000F4AB8);
  return &static ICClientInfo.music;
}

void sub_1000F4120(void *a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  NSString v5;
  NSString v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;

  objc_opt_self(ICMusicKitRequestContext);
  v2 = swift_dynamicCastObjCClass(a1);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = a1;
    v5 = String._bridgeToObjectiveC()();
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend((id)objc_opt_self(ICClientInfo), "clientInfoForMusicKitRequestWithClientIdentifier:clientVersion:", v5, v6);

    objc_msgSend(v3, "setClientInfo:", v7);
    v8 = (void *)objc_opt_self(ICUserIdentityStore);
    v9 = v4;
    v10 = objc_msgSend(v8, "defaultIdentityStore");
    objc_msgSend(v3, "setIdentityStore:", v10);

    v11 = (void *)objc_opt_self(ICUserIdentity);
    v12 = v9;
    v13 = objc_msgSend(v11, "activeAccount");
    objc_msgSend(v3, "setIdentity:", v13);

  }
}

void ICMusicSubscriptionStatusController.performDefaultActiveSubscriptionStatusRequest(completionHandler:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v5;
  void *v6;
  id v7;
  __n128 v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;

  v5 = objc_allocWithZone((Class)ICStoreRequestContext);
  v17 = sub_1000F5150;
  v18 = 0;
  v13 = _NSConcreteStackBlock;
  v14 = 1107296256;
  v15 = sub_1000E776C;
  v16 = &unk_10044ABF0;
  v6 = _Block_copy(&v13);
  v7 = objc_msgSend(v5, "initWithBlock:", v6);
  _Block_release(v6);
  v8 = swift_release(v18);
  if ((swift_isEscapingClosureAtFileLocation(0, "", 0, 0, 0, 1, v8) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v9 = objc_msgSend(objc_allocWithZone((Class)ICMusicSubscriptionStatusRequest), "initWithStoreRequestContext:", v7);
    objc_msgSend(v9, "setShouldReturnLastKnownStatusOnly:", 1);
    v10 = swift_allocObject(&unk_10044AC28, 32, 7);
    *(_QWORD *)(v10 + 16) = a1;
    *(_QWORD *)(v10 + 24) = a2;
    v17 = sub_100009BB0;
    v18 = v10;
    v13 = _NSConcreteStackBlock;
    v14 = 1107296256;
    v15 = sub_1000AC9C8;
    v16 = &unk_10044AC40;
    v11 = _Block_copy(&v13);
    v12 = v18;
    swift_retain(a2);
    objc_msgSend(v2, "performSubscriptionStatusRequest:withCompletionHandler:", v9, v11, swift_release(v12).n128_f64[0]);
    _Block_release(v11);

  }
}

void sub_1000F4460(void *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;

  objc_opt_self(ICStoreRequestContext);
  v2 = swift_dynamicCastObjCClass(a1);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = (void *)objc_opt_self(ICUserIdentityStore);
    v5 = a1;
    v6 = objc_msgSend(v4, "defaultIdentityStore");
    objc_msgSend(v3, "setIdentityStore:", v6);

    v7 = objc_msgSend((id)objc_opt_self(ICUserIdentity), "activeAccount");
    objc_msgSend(v3, "setIdentity:", v7);

    objc_msgSend(v3, "setAllowsExpiredBags:", 1);
    v8 = objc_allocWithZone((Class)ICURLResponseAuthenticationProvider);
    v9 = v5;
    v10 = objc_msgSend(v8, "initWithUserInteractionLevel:", 1);
    objc_msgSend(v3, "setAuthenticationProvider:", v10);

  }
}

BOOL ICMusicSubscriptionStatusCapabilities.hasVoiceActivatedCatalogPlaybackOnly.getter(char a1)
{
  return (a1 & 3) == 2;
}

void static ICStoreRequestContext.default(withConfigurationBlock:)(uint64_t a1, uint64_t a2)
{
  id v2;
  uint64_t v3;
  void *v4;
  __n128 v5;
  _QWORD v6[4];
  _QWORD aBlock[5];
  uint64_t v8;

  v6[2] = a1;
  v6[3] = a2;
  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v3 = swift_allocObject(&unk_10044AC78, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1000F5190;
  *(_QWORD *)(v3 + 24) = v6;
  aBlock[4] = sub_100009BB0;
  v8 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E776C;
  aBlock[3] = &unk_10044AC90;
  v4 = _Block_copy(aBlock);
  swift_retain(v3);
  objc_msgSend(v2, "initWithBlock:", v4);
  _Block_release(v4);
  v5 = swift_release(v8);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation(v3, "", 0, 0, 0, 1, v5);
  swift_release(v3);
  if ((v4 & 1) != 0)
    __break(1u);
}

void sub_1000F46CC(void *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;

  objc_opt_self(ICStoreRequestContext);
  v2 = swift_dynamicCastObjCClass(a1);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = (void *)objc_opt_self(ICUserIdentityStore);
    v8 = a1;
    v5 = objc_msgSend(v4, "defaultIdentityStore");
    objc_msgSend(v3, "setIdentityStore:", v5);

    v6 = objc_msgSend((id)objc_opt_self(ICUserIdentity), "activeAccount");
    objc_msgSend(v3, "setIdentity:", v6);

    objc_msgSend(v3, "setAllowsExpiredBags:", 1);
    v7 = objc_msgSend(objc_allocWithZone((Class)ICURLResponseAuthenticationProvider), "initWithUserInteractionLevel:", 1);
    objc_msgSend(v3, "setAuthenticationProvider:", v7);

    if (qword_10048C7C0 != -1)
      swift_once(&qword_10048C7C0, sub_1000F4B08);
    objc_msgSend(v3, "setClientInfo:", static ICClientInfo.storeFlow);

  }
}

void sub_1000F4844(void *a1, void (*a2)(void *))
{
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;

  objc_opt_self(ICStoreRequestContext);
  v4 = swift_dynamicCastObjCClass(a1);
  if (v4)
  {
    v5 = (void *)v4;
    v6 = (void *)objc_opt_self(ICUserIdentityStore);
    v9 = a1;
    v7 = objc_msgSend(v6, "defaultIdentityStore");
    objc_msgSend(v5, "setIdentityStore:", v7);

    v8 = objc_msgSend((id)objc_opt_self(ICUserIdentity), "activeAccount");
    objc_msgSend(v5, "setIdentity:", v8);

    a2(v5);
  }
}

id static ICStoreRequestContext.current.getter()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(ICUserIdentity), "activeAccount");
  v1 = objc_msgSend(objc_allocWithZone((Class)ICStoreRequestContext), "initWithIdentity:", v0);

  return v1;
}

uint64_t static ICStoreRequestContext.storeFlow.getter()
{
  id v0;
  void *v1;
  id v2;
  __n128 v3;
  uint64_t result;
  _QWORD v5[5];
  uint64_t v6;

  v0 = objc_allocWithZone((Class)ICStoreRequestContext);
  v5[4] = sub_1000F5148;
  v6 = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_1000E776C;
  v5[3] = &unk_10044ACB8;
  v1 = _Block_copy(v5);
  v2 = objc_msgSend(v0, "initWithBlock:", v1);
  _Block_release(v1);
  v3 = swift_release(v6);
  result = swift_isEscapingClosureAtFileLocation(0, "", 0, 0, 0, 1, v3);
  if ((result & 1) == 0)
    return (uint64_t)v2;
  __break(1u);
  return result;
}

uint64_t *ICClientInfo.storeFlow.unsafeMutableAddressor()
{
  if (qword_10048C7C0 != -1)
    swift_once(&qword_10048C7C0, sub_1000F4B08);
  return &static ICClientInfo.storeFlow;
}

id sub_1000F4AB8()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)ICClientInfo), "initWithSystemApplicationType:", 0);
  static ICClientInfo.music = (uint64_t)result;
  return result;
}

id static ICClientInfo.music.getter()
{
  return sub_1000B8EAC(&qword_10048C7B8, (id *)&static ICClientInfo.music);
}

void *sub_1000F4B08()
{
  void *result;

  result = sub_1000F4B24();
  static ICClientInfo.storeFlow = (uint64_t)result;
  return result;
}

void *sub_1000F4B24()
{
  id v0;
  id v1;
  unint64_t v2;
  void *v3;
  NSString v4;
  void *v6;
  _BYTE v7[32];

  v0 = objc_msgSend(objc_allocWithZone((Class)ICClientInfo), "initWithSystemApplicationType:", 0);
  v1 = objc_msgSend(v0, "mutableCopy");

  _bridgeAnyObjectToAny(_:)(v1);
  swift_unknownObjectRelease(v1);
  v2 = sub_1000F5610();
  swift_dynamicCast(&v6, v7, (char *)&type metadata for Any + 8, v2, 7);
  v3 = v6;
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "setBagProfileVersion:", v4);

  return v3;
}

id static ICClientInfo.storeFlow.getter()
{
  return sub_1000B8EAC(&qword_10048C7C0, (id *)&static ICClientInfo.storeFlow);
}

double ICURLBag.subscript.getter@<D0>(_OWORD *a1@<X8>)
{
  void *v1;
  NSString v3;
  id v4;
  double result;

  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v1, "valueForBagKey:", v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v4);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    result = 0.0;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

uint64_t ICURLBag.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  id v15;
  NSString v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  __n128 v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  char *v38;
  char v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  __n128 v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  id v51;
  __n128 v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  _OWORD v65[2];
  _OWORD v66[2];
  uint64_t v67;

  v5 = v4;
  v6 = v3;
  v10 = type metadata accessor for Optional(0, a2);
  __chkstk_darwin(v10);
  v13 = (char *)&v53 - v12;
  if (!*(_QWORD *)(a1 + 16))
  {
    v31 = sub_1000F51A8();
    swift_allocError(&type metadata for ICURLBag.Error, v31, 0, 0);
    v32 = 0uLL;
    *(_OWORD *)v33 = 0u;
    *(_OWORD *)(v33 + 16) = 0u;
    *(_QWORD *)(v33 + 32) = 0;
    *(_BYTE *)(v33 + 40) = 2;
    return swift_willThrow(v32);
  }
  v61 = v11;
  v67 = a1;
  v14 = *(void **)(a1 + 32);
  swift_bridgeObjectRetain();
  v15 = v14;
  sub_100040174(0, 1);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v17 = objc_msgSend(v6, "valueForBagKey:", v16);

  if (!v17)
  {
    swift_bridgeObjectRelease();
    v34 = sub_1000F51A8();
    swift_allocError(&type metadata for ICURLBag.Error, v34, 0, 0);
    *(_QWORD *)v35 = v15;
    *(_BYTE *)(v35 + 40) = 0;
    return swift_willThrow(v32);
  }
  v55 = v10;
  v56 = a3;
  v58 = v13;
  v59 = a2;
  v57 = v5;
  _bridgeAnyObjectToAny(_:)(v17);
  swift_unknownObjectRelease(v17);
  sub_10009B168(v65, v66);
  sub_10000684C((uint64_t)v66, (uint64_t)v65);
  v18 = v67;
  v19 = *(_QWORD *)(v67 + 16);
  v60 = v15;
  if (v19)
  {
    v20 = v15;
    v21 = 0;
    v54 = v20;
    v22 = v20;
    while (1)
    {
      v23 = *(void **)(v18 + 8 * v21 + 32);
      sub_10000684C((uint64_t)v65, (uint64_t)&v63);
      v24 = v23;
      v25 = sub_100005574((uint64_t *)&unk_100493380);
      if (!swift_dynamicCast(&v62, &v63, (char *)&type metadata for Any + 8, v25, 6))
      {
        swift_bridgeObjectRelease();
        v46 = sub_1000F51A8();
        swift_allocError(&type metadata for ICURLBag.Error, v46, 0, 0);
        v48 = v47;
        *v47 = v24;
        sub_10000684C((uint64_t)v65, (uint64_t)(v47 + 1));
        *((_BYTE *)v48 + 40) = 1;
        goto LABEL_22;
      }
      v26 = v62;
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      if (*(_QWORD *)(v26 + 16) && (v29 = sub_10009ABAC(v27, v28), (v30 & 1) != 0))
      {
        sub_10000684C(*(_QWORD *)(v26 + 56) + 32 * v29, (uint64_t)&v63);
      }
      else
      {
        v63 = 0u;
        v64 = 0u;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!*((_QWORD *)&v64 + 1))
        break;
      ++v21;
      sub_10000682C(v65);

      sub_10009B168(&v63, v65);
      v22 = v24;
      if (v19 == v21)
        goto LABEL_17;
    }
    swift_bridgeObjectRelease();
    sub_100098B58((uint64_t)&v63);
    v49 = sub_1000F51A8();
    swift_allocError(&type metadata for ICURLBag.Error, v49, 0, 0);
    *(_QWORD *)v50 = v24;
    *(_BYTE *)(v50 + 40) = 0;
LABEL_22:
    v51 = v24;
    swift_willThrow(v52);

  }
  else
  {
    v24 = v15;
LABEL_17:
    swift_bridgeObjectRelease();
    sub_10000684C((uint64_t)v65, (uint64_t)&v63);
    v38 = v58;
    v37 = v59;
    v39 = swift_dynamicCast(v58, &v63, (char *)&type metadata for Any + 8, v59, 6);
    v40 = *(_QWORD *)(v37 - 8);
    v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56);
    if ((v39 & 1) != 0)
    {
      v41(v38, 0, 1, v37);

      sub_10000682C(v65);
      sub_10000682C(v66);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v40 + 32))(v56, v38, v37);
    }
    v41(v38, 1, 1, v37);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v38, v55);
    v42 = sub_1000F51A8();
    swift_allocError(&type metadata for ICURLBag.Error, v42, 0, 0);
    v44 = v43;
    *v43 = v24;
    sub_10000684C((uint64_t)v65, (uint64_t)(v43 + 1));
    *((_BYTE *)v44 + 40) = 1;
    swift_willThrow(v45);

  }
  sub_10000682C(v65);
  return sub_10000682C(v66);
}

BOOL static ICEnvironmentMonitorThermalPressureLevel.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 < a2;
}

BOOL sub_1000F50F8(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

BOOL sub_1000F510C(_QWORD *a1, _QWORD *a2)
{
  return *a2 >= *a1;
}

BOOL sub_1000F5120(_QWORD *a1, _QWORD *a2)
{
  return *a1 >= *a2;
}

BOOL sub_1000F5134(_QWORD *a1, _QWORD *a2)
{
  return *a2 < *a1;
}

uint64_t sub_1000F5154(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000F5164(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000F516C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000F5190(void *a1)
{
  uint64_t v1;

  sub_1000F4844(a1, *(void (**)(void *))(v1 + 16));
}

uint64_t sub_1000F5198()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1000F51A8()
{
  unint64_t result;

  result = qword_100491C48;
  if (!qword_100491C48)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ICURLBag.Error, &type metadata for ICURLBag.Error);
    atomic_store(result, (unint64_t *)&qword_100491C48);
  }
  return result;
}

unint64_t sub_1000F51F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100491C50;
  if (!qword_100491C50)
  {
    type metadata accessor for ICEnvironmentMonitorThermalPressureLevel(255);
    result = swift_getWitnessTable(&unk_100385E4C, v1);
    atomic_store(result, (unint64_t *)&qword_100491C50);
  }
  return result;
}

void _s5ErrorOwxx(uint64_t a1)
{
  unsigned int v2;

  v2 = *(unsigned __int8 *)(a1 + 40);
  if (v2 >= 2)
    v2 = *(_DWORD *)a1 + 2;
  if (v2 == 1)
  {

    sub_10000682C((_QWORD *)(a1 + 8));
  }
  else if (!v2)
  {

  }
}

uint64_t _s5ErrorOwcp(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  id v10;
  __int128 v11;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  if (v3 == 1)
  {
    v6 = *(void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v7 = a2 + 8;
    v8 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 32) = v8;
    v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
    v10 = v6;
    v9(a1 + 8, v7, v8);
    *(_BYTE *)(a1 + 40) = 1;
  }
  else if (v3)
  {
    v11 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v11;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    v4 = *(void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 40) = 0;
    v5 = v4;
  }
  return a1;
}

uint64_t _s5ErrorOwca(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  id v12;
  __int128 v13;
  __int128 v14;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {

      sub_10000682C((_QWORD *)(a1 + 8));
    }
    else if (!v4)
    {

    }
    v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v8 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v9 = (uint64_t)a2 + 8;
      v10 = *((_QWORD *)a2 + 4);
      *(_QWORD *)(a1 + 32) = v10;
      v11 = **(void (***)(uint64_t, uint64_t, uint64_t))(v10 - 8);
      v12 = v8;
      v11(a1 + 8, v9, v10);
      *(_BYTE *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      v13 = *a2;
      v14 = a2[1];
      *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
      *(_OWORD *)a1 = v13;
      *(_OWORD *)(a1 + 16) = v14;
    }
    else
    {
      v6 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 40) = 0;
      v7 = v6;
    }
  }
  return a1;
}

__n128 _s5ErrorOwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s5ErrorOwta(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {

      sub_10000682C((_QWORD *)(a1 + 8));
    }
    else if (!v4)
    {

    }
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t _s5ErrorOwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 3)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t _s5ErrorOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000F55BC(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t sub_1000F55D8(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ICURLBag.Error()
{
  return &type metadata for ICURLBag.Error;
}

unint64_t sub_1000F5610()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100491C58;
  if (!qword_100491C58)
  {
    v1 = objc_opt_self(ICMutableClientInfo);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100491C58);
  }
  return result;
}

unint64_t EnvironmentVariable.rawValue.getter()
{
  return 0xD000000000000013;
}

uint64_t EnvironmentVariable.isEnabled.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v0 = _s9MusicCore19EnvironmentVariableO5valueSSSgvg_0();
  if (v1)
  {
    v2 = v0;
    v3 = v1;
    if (v0 == 49 && v1 == 0xE100000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v0, v1, 49, 0xE100000000000000, 0) & 1) != 0
      || v2 == 1702195828 && v3 == 0xE400000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v2, v3, 1702195828, 0xE400000000000000, 0) & 1) != 0
      || v2 == 5457241 && v3 == 0xE300000000000000)
    {
      v4 = 1;
    }
    else
    {
      v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v3, 5457241, 0xE300000000000000, 0);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = 0;
  }
  return v4 & 1;
}

BOOL EnvironmentVariable.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10043E8A0, v2);
  swift_bridgeObjectRelease(object);
  return v3 != 0;
}

Swift::Int sub_1000F57BC()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0xD000000000000013, 0x80000001003ACD00);
  return Hasher._finalize()();
}

uint64_t sub_1000F5810(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD000000000000013, 0x80000001003ACD00);
}

Swift::Int sub_1000F582C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0xD000000000000013, 0x80000001003ACD00);
  return Hasher._finalize()();
}

uint64_t sub_1000F587C@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10043E8D8, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_1000F58CC(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000013;
  a1[1] = 0x80000001003ACD00;
}

uint64_t _s9MusicCore19EnvironmentVariableO5valueSSSgvg_0()
{
  id v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;

  v0 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
  v1 = objc_msgSend(v0, "environment");

  v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v2 + 16) && (v3 = sub_10009ABAC(0xD000000000000013, 0x80000001003ACD00), (v4 & 1) != 0))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 16 * v3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v5 = 0;
  }
  swift_bridgeObjectRelease();
  return v5;
}

unint64_t sub_1000F59CC()
{
  unint64_t result;

  result = qword_100491C60;
  if (!qword_100491C60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EnvironmentVariable, &type metadata for EnvironmentVariable);
    atomic_store(result, (unint64_t *)&qword_100491C60);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for EnvironmentVariable(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000F5A50 + 4 * asc_10038C120[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000F5A70 + 4 * byte_10038C125[v4]))();
}

_BYTE *sub_1000F5A50(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000F5A70(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000F5A78(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000F5A80(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000F5A88(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000F5A90(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentVariable()
{
  return &type metadata for EnvironmentVariable;
}

uint64_t StagedInstall.isInstalled.getter(char a1)
{
  return a1 & 1;
}

uint64_t sub_1000F5AB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for Logger(0, a2);
  sub_1000086DC(v2, qword_100491C68);
  sub_1000086B4(v2, (uint64_t)qword_100491C68);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001003ACFD0, 0x6E49646567617453, 0xED00006C6C617473);
}

uint64_t static StagedInstall.current()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  id v13;
  NSString v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v25;
  uint64_t v26;

  v0 = sub_100005574(&qword_10048D510);
  __chkstk_darwin(v0);
  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  v7 = (char *)&v25 - v6;
  if (qword_10048CF08 != -1)
    swift_once(&qword_10048CF08, sub_1001EE2A4);
  if (static DeviceCapabilities.isInternalInstall == 1)
  {
    if (qword_10048C7C8 != -1)
      swift_once(&qword_10048C7C8, sub_1000F5AB4);
    v26 = v1;
    v8 = type metadata accessor for Logger(0, v5);
    v9 = sub_1000086B4(v8, (uint64_t)qword_100491C68);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Checking for a staged install of Music", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    URL.init(fileURLWithPath:)(0xD00000000000002FLL, 0x80000001003B1D00);
    v13 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
    URL.path.getter(v13);
    v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v15 = objc_msgSend(v13, "fileExistsAtPath:", v14);

    v17 = Logger.logObject.getter(v16);
    v18 = v17;
    if (v15)
    {
      v19 = static os_log_type_t.error.getter(v17);
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Found Music.app in staged_system_apps", v20, 2u);
        swift_slowDealloc(v20, -1, -1);
      }

      Data.init(contentsOf:options:)(v7, 0);
      __asm { BR              X10 }
    }
    v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v21, "✅ No staged copy found", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v26);
  }
  return 2;
}

void sub_1000F6284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1000F62E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x1000F64C8);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

void sub_1000F64EC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1000F6548()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = v3;
  v9 = v4;
  v10 = BYTE2(v4);
  v11 = BYTE3(v4);
  v12 = BYTE4(v4);
  v13 = BYTE5(v4);
  sub_1000F6284((uint64_t)&v8, (uint64_t)&v8 + BYTE6(v4), v1, v0);
  sub_1000067E8(v1, v0);
  if (!v2)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_1000F6710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_1000F6284(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_1000F67C4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1000F6808()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_1000F683C + dword_1000F68FC[v0 >> 62]))();
}

uint64_t sub_1000F684C@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  if (a1 == BYTE6(v1))
  {
    if (a1 < 1)
    {
      v5 = 1;
    }
    else
    {
      sub_1000516F8(v2, v1);
      sub_1000F64EC(v4, v3);
    }
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

uint64_t getEnumTagSinglePayload for StagedInstall(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for StagedInstall(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000F69F8 + 4 * byte_10038C1F9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000F6A2C + 4 * asc_10038C1F4[v4]))();
}

uint64_t sub_1000F6A2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F6A34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000F6A3CLL);
  return result;
}

uint64_t sub_1000F6A48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000F6A50);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000F6A54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F6A5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StagedInstall()
{
  return &type metadata for StagedInstall;
}

char *sub_1000F6A78(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  UIImage *v6;
  UIImage *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    v3 = (char *)_swiftEmptyArrayStorage;
    v4 = 4;
    v16 = v2;
    while (1)
    {
      v6 = (a1 & 0xC000000000000001) != 0
         ? (UIImage *)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, a1)
         : (UIImage *)*(id *)(a1 + 8 * v4);
      v7 = v6;
      v8 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v9 = sub_1000F7940(v4 - 4, v6);
      v11 = v10;

      if (v11)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
          v3 = sub_10003DE28(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
        v13 = *((_QWORD *)v3 + 2);
        v12 = *((_QWORD *)v3 + 3);
        if (v13 >= v12 >> 1)
          v3 = sub_10003DE28((char *)(v12 > 1), v13 + 1, 1, v3);
        *((_QWORD *)v3 + 2) = v13 + 1;
        v5 = &v3[16 * v13];
        *((_QWORD *)v5 + 4) = v9;
        *((_QWORD *)v5 + 5) = v11;
        v2 = v16;
      }
      ++v4;
      if (v8 == v2)
        goto LABEL_21;
    }
    __break(1u);
LABEL_16:
    if (a1 < 0)
      v14 = a1;
    else
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  v3 = (char *)_swiftEmptyArrayStorage;
LABEL_21:
  swift_bridgeObjectRelease(a1);
  return v3;
}

uint64_t sub_1000F6BEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  int64_t v13;
  __int128 v14;
  unint64_t v15;
  BOOL v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  void *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  Swift::String v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  __int128 v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  void *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;

  v2 = v1;
  v4 = type metadata accessor for URL.DirectoryHint(0);
  v62 = *(_QWORD *)(v4 - 8);
  v63 = v4;
  __chkstk_darwin(v4);
  v61 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v60 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v68 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 64);
  v56 = a1 + 64;
  v9 = 1 << *(_BYTE *)(a1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v8;
  v57 = (unint64_t)(v9 + 63) >> 6;
  v59 = enum case for URL.DirectoryHint.inferFromPath(_:);
  v64 = a1;
  result = swift_bridgeObjectRetain();
  v13 = 0;
  v53 = (char *)_swiftEmptyArrayStorage;
  *(_QWORD *)&v14 = 136446210;
  v55 = v14;
  v54 = (char *)&type metadata for Any + 8;
  v58 = v6;
  while (1)
  {
    if (v11)
    {
      v65 = (v11 - 1) & v11;
      v66 = v13;
      v15 = __clz(__rbit64(v11)) | (v13 << 6);
      goto LABEL_22;
    }
    v16 = __OFADD__(v13, 1);
    v17 = v13 + 1;
    if (v16)
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v57)
      goto LABEL_38;
    v18 = *(_QWORD *)(v56 + 8 * v17);
    if (!v18)
      break;
LABEL_21:
    v65 = (v18 - 1) & v18;
    v66 = v17;
    v15 = __clz(__rbit64(v18)) + (v17 << 6);
LABEL_22:
    v20 = 16 * v15;
    v21 = (uint64_t *)(*(_QWORD *)(v64 + 48) + v20);
    v22 = *v21;
    v23 = (void *)v21[1];
    v24 = (uint64_t *)(*(_QWORD *)(v64 + 56) + v20);
    v26 = *v24;
    v25 = v24[1];
    swift_bridgeObjectRetain();
    sub_1000516F8(v26, v25);
    if (qword_10048C7D0 != -1)
      swift_once(&qword_10048C7D0, sub_1000F779C);
    sub_1000086B4(v6, (uint64_t)qword_100491C80);
    v69 = 47;
    v70 = 0xE100000000000000;
    v27._countAndFlagsBits = v22;
    v67 = v23;
    v27._object = v23;
    String.append(_:)(v27);
    v28 = v61;
    v29 = v62;
    v30 = v63;
    (*(void (**)(char *, _QWORD, uint64_t))(v62 + 104))(v61, v59, v63);
    v31 = sub_10000D478();
    v32 = v68;
    URL.appending<A>(path:directoryHint:)(&v69, v28, &type metadata for String, v31);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v28, v30);
    swift_bridgeObjectRelease(v70);
    v33 = Data.write(to:options:)(v32, 0, v26, v25);
    if (v2)
    {
      if (qword_10048C7D8 != -1)
        swift_once(&qword_10048C7D8, sub_1000F78C4);
      v35 = type metadata accessor for Logger(0, v34);
      sub_1000086B4(v35, (uint64_t)qword_100491C98);
      swift_errorRetain(v2);
      v36 = swift_errorRetain(v2);
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, v38))
      {
        v39 = swift_slowAlloc(12, -1);
        v40 = swift_slowAlloc(32, -1);
        v69 = v40;
        *(_DWORD *)v39 = v55;
        v71 = v2;
        swift_errorRetain(v2);
        v41 = sub_100005574((uint64_t *)&unk_1004911F0);
        v42 = (char *)String.init<A>(describing:)(&v71, v41);
        v44 = v43;
        *(_QWORD *)(v39 + 4) = sub_100019400(v42, v43, &v69);
        swift_bridgeObjectRelease(v44);
        swift_errorRelease(v2);
        swift_errorRelease(v2);
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Tap-to-Radar Attachment file write failed with error: %{public}s", (uint8_t *)v39, 0xCu);
        swift_arrayDestroy(v40, 1, v54);
        swift_slowDealloc(v40, -1, -1);
        swift_slowDealloc(v39, -1, -1);

      }
      else
      {

        swift_errorRelease(v2);
        swift_errorRelease(v2);
      }
      swift_errorRelease(v2);
      v6 = v58;
      (*(void (**)(char *, uint64_t))(v60 + 8))(v68, v58);
      swift_bridgeObjectRelease(v67);
      result = sub_1000067E8(v26, v25);
      v2 = 0;
    }
    else
    {
      v45 = v68;
      v46 = URL.path.getter(v33);
      v48 = v47;
      v6 = v58;
      (*(void (**)(char *, uint64_t))(v60 + 8))(v45, v58);
      swift_bridgeObjectRelease(v67);
      sub_1000067E8(v26, v25);
      result = swift_isUniquelyReferenced_nonNull_native(v53);
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_10003DE28(0, *((_QWORD *)v53 + 2) + 1, 1, v53);
        v53 = (char *)result;
      }
      v50 = *((_QWORD *)v53 + 2);
      v49 = *((_QWORD *)v53 + 3);
      if (v50 >= v49 >> 1)
      {
        result = (uint64_t)sub_10003DE28((char *)(v49 > 1), v50 + 1, 1, v53);
        v53 = (char *)result;
      }
      v51 = v53;
      *((_QWORD *)v53 + 2) = v50 + 1;
      v52 = &v51[16 * v50];
      *((_QWORD *)v52 + 4) = v46;
      *((_QWORD *)v52 + 5) = v48;
    }
    v11 = v65;
    v13 = v66;
  }
  v19 = v17 + 1;
  if (v17 + 1 >= v57)
    goto LABEL_38;
  v18 = *(_QWORD *)(v56 + 8 * v19);
  if (v18)
    goto LABEL_20;
  v19 = v17 + 2;
  if (v17 + 2 >= v57)
    goto LABEL_38;
  v18 = *(_QWORD *)(v56 + 8 * v19);
  if (v18)
    goto LABEL_20;
  v19 = v17 + 3;
  if (v17 + 3 >= v57)
    goto LABEL_38;
  v18 = *(_QWORD *)(v56 + 8 * v19);
  if (v18)
    goto LABEL_20;
  v19 = v17 + 4;
  if (v17 + 4 >= v57)
  {
LABEL_38:
    swift_release(v64);
    return (uint64_t)v53;
  }
  v18 = *(_QWORD *)(v56 + 8 * v19);
  if (v18)
  {
LABEL_20:
    v17 = v19;
    goto LABEL_21;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v57)
      goto LABEL_38;
    v18 = *(_QWORD *)(v56 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_21;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1000F71A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v69 = a3;
  v70 = a4;
  v16 = sub_100005574(&qword_1004912C0);
  __chkstk_darwin(v16);
  v18 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for URLComponents(0);
  __chkstk_darwin(v19);
  v22 = (char *)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10048CF08 != -1)
  {
    v68 = a7;
    v58 = v20;
    swift_once(&qword_10048CF08, sub_1001EE2A4);
    v20 = v58;
    a7 = v68;
  }
  if (static DeviceCapabilities.isInternalInstall != 1)
  {
    v29 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(a9, 1, 1, v29);
  }
  v68 = a7;
  v23 = v20;
  URLComponents.init(string:)(0xD000000000000012, 0x80000001003B1D30);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v18, 1, v19);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    return result;
  }
  v65 = v23;
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v22, v18, v19);
  if ((unint64_t)a5 >> 62)
  {
    if (a5 < 0)
      v59 = a5;
    else
      v59 = a5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v60 = _CocoaArrayWrapper.endIndex.getter(v59);
    swift_bridgeObjectRelease(a5);
    v66 = a8;
    if (v60)
      goto LABEL_8;
  }
  else
  {
    v25 = *(_QWORD *)((a5 & 0xFFFFFFFFFFFFF8) + 0x10);
    v66 = a8;
    if (v25)
    {
LABEL_8:
      v26 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      if (qword_10048C7D0 != -1)
        swift_once(&qword_10048C7D0, sub_1000F779C);
      v27 = type metadata accessor for URL(0);
      sub_1000086B4(v27, (uint64_t)qword_100491C80);
      NSFileManager.createDirectoryIfNeeded(at:)();
      v28 = a2;

      goto LABEL_13;
    }
  }
  if (*(_QWORD *)(a6 + 16))
    goto LABEL_8;
  v28 = a2;
LABEL_13:
  v30 = swift_bridgeObjectRetain();
  v31 = sub_1000F6A78(v30);
  swift_bridgeObjectRelease(a5);
  v63 = sub_1000F6BEC(a6);
  v32 = sub_100005574(&qword_10048E830);
  v33 = *(_QWORD *)(type metadata accessor for URLQueryItem(0) - 8);
  v34 = swift_allocObject(v32, ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))+ 8 * *(_QWORD *)(v33 + 72), *(unsigned __int8 *)(v33 + 80) | 7);
  *(_OWORD *)(v34 + 16) = xmmword_100384B50;
  URLQueryItem.init(name:value:)(0x656C746954, 0xE500000000000000, a1, v28);
  URLQueryItem.init(name:value:)(0x7470697263736544, 0xEB000000006E6F69, v69, v70);
  v35 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v36 = objc_msgSend(v35, "bundleIdentifier");

  v67 = a9;
  v64 = v19;
  v62 = v34;
  if (v36)
  {
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v39 = v38;

  }
  else
  {
    v37 = 0;
    v39 = 0;
  }
  URLQueryItem.init(name:value:)(0x4449656C646E7542, 0xE800000000000000, v37, v39);
  swift_bridgeObjectRelease(v39);
  v71 = (uint64_t)v31;
  v40 = sub_100005574(&qword_10048E158);
  v41 = sub_1000E4F20();
  v42 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v40, v41);
  v44 = v43;
  URLQueryItem.init(name:value:)(0x68736E6565726353, 0xEA0000000000746FLL, v42, v43);
  swift_bridgeObjectRelease(v44);
  v45 = (char *)v63;
  v71 = v63;
  v46 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v40, v41);
  v48 = v47;
  URLQueryItem.init(name:value:)(0x656D686361747441, 0xEB0000000073746ELL, v46, v47);
  swift_bridgeObjectRelease(v48);
  v71 = v68;
  v49 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v40, v41);
  v51 = v50;
  URLQueryItem.init(name:value:)(0x7364726F7779654BLL, 0xE800000000000000, v49, v50);
  swift_bridgeObjectRelease(v51);
  v71 = (uint64_t)v31;
  sub_10008A650(v45);
  v52 = *(_QWORD *)(v71 + 16);
  swift_bridgeObjectRelease(v71);
  if (v52)
    v53 = 49;
  else
    v53 = 0;
  if (v52)
    v54 = 0xE100000000000000;
  else
    v54 = 0;
  URLQueryItem.init(name:value:)(0x6E4F6574656C6544, 0xEE00686361747441, v53, v54);
  swift_bridgeObjectRelease(v54);
  if ((v66 & 1) != 0)
    v55 = 49;
  else
    v55 = 0;
  if ((v66 & 1) != 0)
    v56 = 0xE100000000000000;
  else
    v56 = 0;
  URLQueryItem.init(name:value:)(0xD00000000000001ALL, 0x80000001003B1D50, v55, v56);
  swift_bridgeObjectRelease(v56);
  v57 = URLComponents.queryItems.setter(v62);
  URLComponents.url.getter(v57);
  return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v22, v64);
}

uint64_t sub_1000F779C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v0 = type metadata accessor for URL.DirectoryHint(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100005574(&qword_10048D510);
  __chkstk_darwin(v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  sub_1000086DC(v7, qword_100491C80);
  sub_1000086B4(v7, (uint64_t)qword_100491C80);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for URL.DirectoryHint.inferFromPath(_:), v0);
  return URL.init(filePath:directoryHint:relativeTo:)(0xD000000000000015, 0x80000001003B1D90, v3, v6);
}

uint64_t sub_1000F78C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for Logger(0, a2);
  sub_1000086DC(v2, qword_100491C98);
  sub_1000086B4(v2, (uint64_t)qword_100491C98);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001003ACFD0, 0x522D6F742D706154, 0xEC00000072616461);
}

uint64_t sub_1000F7940(uint64_t a1, UIImage *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  Swift::String v16;
  void *object;
  Swift::String v18;
  unint64_t v19;
  void (*v20)(char *, uint64_t);
  NSData *v21;
  NSData *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD v28[2];
  unint64_t v29;
  unint64_t v30;

  v4 = type metadata accessor for URL.DirectoryHint(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)v28 - v13;
  if (qword_10048C7D0 != -1)
    swift_once(&qword_10048C7D0, sub_1000F779C);
  v15 = sub_1000086B4(v8, (uint64_t)qword_100491C80);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v15, v8);
  v29 = 0;
  v30 = 0xE000000000000000;
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease(v30);
  v29 = 0xD000000000000012;
  v30 = 0x80000001003B1D70;
  v28[1] = a1;
  v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(object);
  v18._countAndFlagsBits = 1735420462;
  v18._object = (void *)0xE400000000000000;
  String.append(_:)(v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for URL.DirectoryHint.inferFromPath(_:), v4);
  v19 = sub_10000D478();
  URL.appending<A>(path:directoryHint:)(&v29, v7, &type metadata for String, v19);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_bridgeObjectRelease(v30);
  v20 = *(void (**)(char *, uint64_t))(v9 + 8);
  v20(v12, v8);
  v21 = UIImageJPEGRepresentation(a2, 85.0);
  if (v21)
  {
    v22 = v21;
    v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v25 = v24;

    Data.write(to:options:)(v14, 0, v23, v25);
    v21 = (NSData *)sub_1000067E8(v23, v25);
  }
  v26 = URL.path.getter(v21);
  v20(v14, v8);
  return v26;
}

uint64_t static CloudLibrary.presentCloudLibraryEnabler(context:presentationSource:style:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v3 + 16) = a2;
  *(_QWORD *)(v3 + 24) = a3;
  *(_BYTE *)(v3 + 89) = a1;
  v4 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v3 + 32) = v4;
  *(_QWORD *)(v3 + 40) = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  *(_QWORD *)(v3 + 48) = v5;
  *(_QWORD *)(v3 + 56) = v6;
  return swift_task_switch(sub_1000F7DC0, v5, v6);
}

uint64_t sub_1000F7DC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_BYTE *)(v1 + 89);
  v5 = static MainActor.shared.getter(a1);
  *(_QWORD *)(v1 + 64) = v5;
  v6 = swift_task_alloc(48);
  *(_QWORD *)(v1 + 72) = v6;
  *(_BYTE *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v3;
  *(_QWORD *)(v6 + 32) = v2;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v1 + 80) = v7;
  *v7 = v1;
  v7[1] = sub_1000F7E8C;
  return withCheckedContinuation<A>(isolation:function:_:)(v1 + 88, v5, &protocol witness table for MainActor, 0xD00000000000003DLL, 0x80000001003AD1D0, sub_1000FC558, v6, &type metadata for Bool);
}

uint64_t sub_1000F7E8C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 72);
  v3 = *(_QWORD *)(*v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*v0 + 80));
  swift_release(v3);
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100100768, *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

void sub_1000F7EF4(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

uint64_t sub_1000F7F48(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  _OWORD v38[3];
  _OWORD v39[2];
  __int128 v40;
  _OWORD v41[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100005574((uint64_t *)&unk_1004921F0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain();
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v28)
        goto LABEL_37;
      v15 = *(_QWORD *)(v29 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v28)
          goto LABEL_37;
        v15 = *(_QWORD *)(v29 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v28)
            goto LABEL_37;
          v15 = *(_QWORD *)(v29 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v20 = *v18;
    v19 = v18[1];
    sub_10000684C(*(_QWORD *)(a1 + 56) + 32 * v13, (uint64_t)v41);
    *(_QWORD *)&v40 = v20;
    *((_QWORD *)&v40 + 1) = v19;
    v38[2] = v40;
    v39[0] = v41[0];
    v39[1] = v41[1];
    *(_QWORD *)&v38[0] = v20;
    *((_QWORD *)&v38[0] + 1) = v19;
    swift_bridgeObjectRetain();
    swift_dynamicCast(&v30, v38, &type metadata for String, &type metadata for AnyHashable, 7);
    sub_10009B168(v39, v33);
    v34 = v30;
    v35 = v31;
    v36 = v32;
    sub_10009B168(v33, v37);
    v30 = v34;
    v31 = v35;
    v32 = v36;
    sub_10009B168(v37, v38);
    sub_10009B168(v38, &v34);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v21 = -1 << *((_BYTE *)v3 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)&v7[8 * v23];
      }
      while (v27 == -1);
      v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v30;
    *(_OWORD *)(v11 + 16) = v31;
    *(_QWORD *)(v11 + 32) = v32;
    result = (uint64_t)sub_10009B168(&v34, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_1000F38AC(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v29 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1000F830C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[2];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _OWORD v38[2];
  _OWORD v39[3];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100005574((uint64_t *)&unk_1004921F0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain();
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v28)
        goto LABEL_37;
      v15 = *(_QWORD *)(v29 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v28)
          goto LABEL_37;
        v15 = *(_QWORD *)(v29 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v28)
            goto LABEL_37;
          v15 = *(_QWORD *)(v29 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v19 = v18[1];
    v20 = *(_BYTE *)(*(_QWORD *)(a1 + 56) + v13);
    *(_QWORD *)&v39[0] = *v18;
    *((_QWORD *)&v39[0] + 1) = v19;
    swift_bridgeObjectRetain();
    swift_dynamicCast(&v31, v39, &type metadata for String, &type metadata for AnyHashable, 7);
    v30 = v20;
    swift_dynamicCast(v34, &v30, &type metadata for Bool, (char *)&type metadata for Any + 8, 7);
    v35 = v31;
    v36 = v32;
    v37 = v33;
    sub_10009B168(v34, v38);
    v31 = v35;
    v32 = v36;
    v33 = v37;
    sub_10009B168(v38, v39);
    sub_10009B168(v39, &v35);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v21 = -1 << *((_BYTE *)v3 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)&v7[8 * v23];
      }
      while (v27 == -1);
      v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v31;
    *(_OWORD *)(v11 + 16) = v32;
    *(_QWORD *)(v11 + 32) = v33;
    result = (uint64_t)sub_10009B168(&v35, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_1000F38AC(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v29 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t *CloudLibrary.EnablementContext.action.unsafeMutableAddressor()
{
  if (qword_10048C7E0 != -1)
    swift_once(&qword_10048C7E0, sub_1000F8E40);
  return &static CloudLibrary.EnablementContext.action;
}

uint64_t *CloudLibrary.StatusObserver.shared.unsafeMutableAddressor()
{
  if (qword_10048C7E8 != -1)
    swift_once(&qword_10048C7E8, sub_1000F900C);
  return &static CloudLibrary.StatusObserver.shared;
}

void CloudLibrary.EnablementContext.title.getter(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = type metadata accessor for Locale(0);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for String.LocalizationValue(0);
  v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  __asm { BR              X10 }
}

uint64_t sub_1000F87F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  String.LocalizationValue.init(stringLiteral:)(0xD000000000000021, 0x80000001003B1E70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v1, v0);
  if (qword_10048C570 != -1)
    swift_once(&qword_10048C570, sub_10000AD54);
  v5 = qword_1004A1DA0;
  static Locale.current.getter((id)qword_1004A1DA0);
  v6 = String.init(localized:table:bundle:locale:comment:)(v3, 0, 0, v5, v2, 0, 0, 256);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v0);
  return v6;
}

void CloudLibrary.EnablementContext.message.getter(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = type metadata accessor for Locale(0);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for String.LocalizationValue(0);
  v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  __asm { BR              X10 }
}

uint64_t sub_1000F89F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  String.LocalizationValue.init(stringLiteral:)(0xD000000000000079, 0x80000001003B21E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v1, v0);
  if (qword_10048C570 != -1)
    swift_once(&qword_10048C570, sub_10000AD54);
  v5 = qword_1004A1DA0;
  static Locale.current.getter((id)qword_1004A1DA0);
  v6 = String.init(localized:table:bundle:locale:comment:)(v3, 0, 0, v5, v2, 0, 0, 256);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v0);
  return v6;
}

void UIView.CompressionResistancePriority.vertical.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 4) = a1;
}

CFRange (__swiftcall *UIView.CompressionResistancePriority.vertical.modify())(__C::_NSRange)
{
  return CFRange.init(_:);
}

uint64_t static CloudLibrary.UpdateContext.__derived_struct_equals(_:_:)(int a1, unsigned int a2, float a3, float a4)
{
  return (a3 == a4) & ~(a1 ^ a2);
}

BOOL sub_1000F8B80(float *a1, float *a2)
{
  return *(unsigned __int8 *)a1 == *(unsigned __int8 *)a2 && a1[1] == a2[1];
}

unint64_t CloudLibrary.FailureType.rawValue.getter(int a1)
{
  return ~a1 | 0xFFFFFFFFFFFFFF00;
}

Swift::Int sub_1000F8BBC()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(~v1);
  return Hasher._finalize()();
}

void sub_1000F8C00()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(~(unint64_t)*v0);
}

Swift::Int sub_1000F8C2C()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(~v1);
  return Hasher._finalize()();
}

uint64_t sub_1000F8C6C@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s9MusicCore12CloudLibraryO11FailureTypeO8rawValueAESgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_1000F8C94(unint64_t *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = ~(unint64_t)*v1;
}

BOOL CloudLibrary.Status.shouldDisplayBanner.getter(uint64_t a1)
{
  if (a1 >> 30 == 1)
    return a1 & 1;
  return a1 >> 30 != 2 || (unint64_t)(a1 - 0x80000000) >= 3;
}

BOOL CloudLibrary.Status.shouldShowDismissButton.getter(uint64_t a1)
{
  return a1 >> 30 != 1 && (a1 >> 30 != 2 || a1 != 2147483652);
}

BOOL CloudLibrary.Status.shouldShowActionButton.getter(uint64_t a1)
{
  return !(a1 >> 30) || a1 >> 30 == 2 && a1 == 2147483651;
}

void (*CloudLibrary.Status.action.getter(uint64_t a1))()
{
  if (!(a1 >> 30) || a1 >> 30 == 2 && a1 == 2147483651)
    return sub_1000F8D78;
  else
    return 0;
}

void sub_1000F8D78()
{
  if (qword_10048C7E8 != -1)
    swift_once(&qword_10048C7E8, sub_1000F900C);
  CloudLibrary.StatusObserver.enableCloudLibrary(completion:)(0, 0);
}

BOOL CloudLibrary.Status.shouldShowLoadingView.getter(uint64_t a1)
{
  return a1 >> 30 == 1 || a1 >> 30 == 2 && a1 == 2147483652;
}

unint64_t CloudLibrary.Status.progress.getter(unint64_t a1)
{
  unint64_t v1;

  v1 = HIDWORD(a1);
  if ((a1 & 0xC0000000) != 0x40000000)
    v1 = 0;
  return v1 | ((unint64_t)((a1 & 0xC0000000) != 0x40000000) << 32);
}

uint64_t sub_1000F8E34(uint64_t *a1, uint64_t *a2)
{
  return _s9MusicCore12CloudLibraryO6StatusO21__derived_enum_equalsySbAE_AEtFZ_0(*a1, *a2);
}

uint64_t sub_1000F8E40()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _BYTE v15[16];

  v0 = type metadata accessor for Locale(0);
  __chkstk_darwin(v0);
  v2 = &v15[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for String.LocalizationValue(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v9 = &v15[-v8];
  String.LocalizationValue.init(stringLiteral:)(0xD000000000000014, 0x80000001003B2650);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 16))(v7, v9, v3);
  if (qword_10048C570 != -1)
    swift_once(&qword_10048C570, sub_10000AD54);
  v10 = qword_1004A1DA0;
  static Locale.current.getter((id)qword_1004A1DA0);
  v11 = String.init(localized:table:bundle:locale:comment:)(v7, 0, 0, v10, v2, 0, 0, 256);
  v13 = v12;
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v9, v3);
  static CloudLibrary.EnablementContext.action = v11;
  unk_1004A2130 = v13;
  return result;
}

uint64_t static CloudLibrary.EnablementContext.action.getter()
{
  uint64_t v0;

  if (qword_10048C7E0 != -1)
    swift_once(&qword_10048C7E0, sub_1000F8E40);
  v0 = static CloudLibrary.EnablementContext.action;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_1000F900C()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for CloudLibrary.StatusObserver(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_1000F9088();
  static CloudLibrary.StatusObserver.shared = result;
  return result;
}

uint64_t static CloudLibrary.StatusObserver.shared.getter()
{
  if (qword_10048C7E8 != -1)
    swift_once(&qword_10048C7E8, sub_1000F900C);
  return swift_retain(static CloudLibrary.StatusObserver.shared);
}

uint64_t sub_1000F9088()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  void *v14;
  Swift::Int v15;
  __C::_NSRange v16;
  CFRange v17;
  uint64_t v18;
  id v19;
  void *v20;
  Swift::Int v21;
  __C::_NSRange v22;
  CFRange v23;
  void *v24;
  CFRange v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v44[152];
  _QWORD v45[2];
  char v46;
  __int128 v47;
  uint64_t v48;
  char v49;

  v1 = v0;
  v2 = sub_100005574((uint64_t *)&unk_100491CE8);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v44[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v46 = 2;
  v45[0] = 0xD000000000000014;
  v45[1] = 0x80000001003ACF70;
  v6 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v7 = sub_10000D478();
  UserDefault.init(wrappedValue:defaults:key:)((uint64_t)&v46, (uint64_t)v6, (uint64_t)v45, (uint64_t)&type metadata for String, (uint64_t)&type metadata for Bool, v7, (char *)&v47);
  v8 = v48;
  v9 = v49;
  *(_OWORD *)(v1 + 16) = v47;
  *(_QWORD *)(v1 + 32) = v8;
  *(_BYTE *)(v1 + 40) = v9;
  *(_QWORD *)(v1 + 48) = _swiftEmptyArrayStorage;
  if (qword_10048C658 != -1)
    swift_once(&qword_10048C658, sub_1000B3BEC);
  v10 = static ApplicationCapabilities.Controller.shared;
  *(_QWORD *)(v1 + 56) = static ApplicationCapabilities.Controller.shared;
  *(_QWORD *)(v1 + 64) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v1 + 72) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = 0;
  v11 = v1 + OBJC_IVAR____TtCO9MusicCore12CloudLibrary14StatusObserver__status;
  *(_QWORD *)&v47 = 0x80000000;
  swift_retain(v10);
  Published.init(initialValue:)(&v47, &type metadata for CloudLibrary.Status);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v3 + 32))(v11, v5, v2);
  *(_QWORD *)(v1 + OBJC_IVAR____TtCO9MusicCore12CloudLibrary14StatusObserver_updateContext) = 2;
  v12 = sub_100005574(&qword_100490BF0);
  inited = swift_initStackObject(v12, v44);
  *(_OWORD *)(inited + 16) = xmmword_100384A40;
  if (qword_10048C6B8 != -1)
    swift_once(&qword_10048C6B8, sub_1000B8CCC);
  v14 = (void *)static ApplicationCapabilities.NotificationNames.userSubscriptionStateDidChange;
  v15 = *(_QWORD *)(v1 + 56);
  v16.location = static ApplicationCapabilities.NotificationNames.userSubscriptionStateDidChange;
  v16.length = v15;
  v17 = CFRange.init(_:)(v16);
  *(_QWORD *)(inited + 56) = &type metadata for NotificationTrigger;
  *(_QWORD *)(inited + 64) = &protocol witness table for NotificationTrigger;
  *(CFRange *)(inited + 32) = v17;
  v18 = qword_10048C6D8;
  v19 = v14;
  swift_retain(v15);
  if (v18 != -1)
    swift_once(&qword_10048C6D8, sub_1000B8E0C);
  v20 = (void *)static ApplicationCapabilities.NotificationNames.isCloudLibraryEnabledDidChange;
  v21 = *(_QWORD *)(v1 + 56);
  v22.location = static ApplicationCapabilities.NotificationNames.isCloudLibraryEnabledDidChange;
  v22.length = v21;
  v23 = CFRange.init(_:)(v22);
  *(_QWORD *)(inited + 96) = &type metadata for NotificationTrigger;
  *(_QWORD *)(inited + 104) = &protocol witness table for NotificationTrigger;
  *(CFRange *)(inited + 72) = v23;
  v24 = (void *)MPCloudControllerCloudLibraryFailureDidChangeNotification;
  v25 = CFRange.init(_:)((__C::_NSRange)MPCloudControllerCloudLibraryFailureDidChangeNotification);
  *(_QWORD *)(inited + 136) = &type metadata for NotificationTrigger;
  *(_QWORD *)(inited + 144) = &protocol witness table for NotificationTrigger;
  *(CFRange *)(inited + 112) = v25;
  v26 = swift_allocObject(&unk_10044AF40, 24, 7);
  swift_weakInit(v26 + 16, v1);
  v27 = type metadata accessor for Whitetail.Binding();
  swift_allocObject(v27, 48, 7);
  v28 = v20;
  swift_retain(v21);
  v29 = v24;
  v30 = Whitetail.Binding.init(_:needsInitialConfiguration:configurationBlock:)(inited, 1, (uint64_t)sub_100100534, v26);
  swift_beginAccess(v1 + 72, &v47, 33, 0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v31);
  v33 = *(_QWORD *)((*(_QWORD *)(v1 + 72) & 0xFFFFFFFFFFFFFF8) + 0x10);
  v32 = *(_QWORD *)((*(_QWORD *)(v1 + 72) & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v33 >= v32 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
  v34 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v33, v30);
  specialized Array._endMutation()(v34);
  swift_endAccess(&v47);
  v35 = (void *)MPCloudControllerIsUpdateInProgressDidChangeNotification;
  v36 = (void *)objc_opt_self(MPCloudController);
  v37 = v35;
  v38 = objc_msgSend(v36, "sharedCloudController");
  v39 = swift_allocObject(&unk_10044AF40, 24, 7);
  swift_weakInit(v39 + 16, v1);
  v40 = type metadata accessor for NotificationObserver();
  swift_allocObject(v40, 64, 7);
  v41 = NotificationObserver.init(name:object:dispatchOnMainThread:usesLocalNotificationCenter:handler:)(v37, (uint64_t)v38, 1, 1, (uint64_t)sub_10010053C, v39);
  v42 = *(_QWORD *)(v1 + 80);
  *(_QWORD *)(v1 + 80) = v41;
  swift_release(v42);
  return v1;
}

uint64_t property wrapper backing initializer of CloudLibrary.StatusObserver.status(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return Published.init(initialValue:)(&v2, &type metadata for CloudLibrary.Status);
}

uint64_t sub_1000F94E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 aBlock;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v22, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = *(_QWORD *)(result + 56);
    KeyPath = swift_getKeyPath(&unk_10038C748);
    v5 = swift_getKeyPath(&unk_10038C770);
    static Published.subscript.getter(&aBlock, v3, KeyPath, v5);
    swift_release(KeyPath);
    swift_release(v5);
    v6 = v14;
    v7 = v15;
    v8 = v16;
    v9 = v17;
    v10 = v18;
    v11 = v19;
    v12 = v20;
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v9);

    __asm { BR              X9 }
  }
  return result;
}

uint64_t sub_1000F9948(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  id v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void **aBlock;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  void *v35;
  void (*v36)();
  _QWORD *v37;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000087DC(0, (unint64_t *)&qword_100490BC0, OS_dispatch_queue_ptr);
  v20 = (void *)static OS_dispatch_queue.main.getter(v12, v13, v14, v15, v16, v17, v18, v19, v30, v31, aBlock, v33, v34, v35, v36);
  v21 = (_QWORD *)swift_allocObject(&unk_10044B638, 40, 7);
  v21[2] = a2;
  v21[3] = a1;
  v21[4] = a3;
  v36 = sub_100100580;
  v37 = v21;
  aBlock = _NSConcreteStackBlock;
  v33 = 1107296256;
  v34 = sub_1000BED80;
  v35 = &unk_10044B650;
  v22 = _Block_copy(&aBlock);
  v23 = v37;
  swift_errorRetain(a2);
  v24 = a1;
  swift_retain(a3);
  v25 = swift_release(v23);
  static DispatchQoS.unspecified.getter(v25);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v26 = sub_100006924((unint64_t *)&qword_1004921B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v27 = sub_100005574(&qword_100490838);
  v28 = sub_10002FFB8((unint64_t *)&qword_1004921C0, &qword_100490838, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v27, v28, v6, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v30);
}

void sub_1000F9B74(uint64_t a1, void *a2, uint64_t a3)
{
  id v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!a1 && a2)
  {
    v4 = a2;
    v5 = (unint64_t)objc_msgSend(v4, "integerValue");
    if (v5 > 0xFFFFFFFFFFFFFFF9)
    {
      v6 = ~v5;
      KeyPath = swift_getKeyPath(&unk_10038C248);
      v8 = swift_getKeyPath(&unk_10038C270);
      static Published.subscript.getter(&v17, a3, KeyPath, v8);
      swift_release(KeyPath);
      swift_release(v8);
      v9 = v17;
      v10 = swift_getKeyPath(&unk_10038C248);
      v11 = swift_getKeyPath(&unk_10038C270);
      v17 = v6;
      swift_retain(a3);
      static Published.subscript.setter(&v17, a3, v10, v11);
      sub_1000FAE10(v9);

      return;
    }

  }
  v12 = swift_getKeyPath(&unk_10038C248);
  v13 = swift_getKeyPath(&unk_10038C270);
  static Published.subscript.getter(&v17, a3, v12, v13);
  swift_release(v12);
  swift_release(v13);
  v14 = v17;
  v15 = swift_getKeyPath(&unk_10038C248);
  v16 = swift_getKeyPath(&unk_10038C270);
  v17 = 2147483651;
  swift_retain(a3);
  static Published.subscript.setter(&v17, a3, v15, v16);
  sub_1000FAE10(v14);
}

double sub_1000F9D08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  double result;
  uint64_t v5;
  _BYTE v6[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v5 = Strong;
    sub_1000FB474();
    *(_QWORD *)&result = swift_release(v5).n128_u64[0];
  }
  return result;
}

BOOL CloudLibrary.StatusObserver.shouldDisplayStatusBanner.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _BOOL4 v3;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_10038C248);
  v2 = swift_getKeyPath(&unk_10038C270);
  static Published.subscript.getter(&v5, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  v3 = (unint64_t)(v5 - 2147483651) < 0xFFFFFFFFFFFFFFFDLL;
  if (v5 >> 30 != 2)
    v3 = 1;
  if (v5 >> 30 == 1)
    return v5 & 1;
  else
    return v3;
}

void sub_1000F9DFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  char v13;
  _BYTE v14[24];

  v1 = v0;
  swift_beginAccess(v0 + 16, v14, 0, 0);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_BYTE *)(v0 + 40);
  v10 = *(_OWORD *)(v0 + 16);
  v11 = v2;
  v12 = v3;
  v4 = sub_100005574(&qword_100491CD8);
  UserDefault.wrappedValue.getter(v4, (uint64_t)&v13);
  if ((v13 & 1) != 0)
  {
    KeyPath = swift_getKeyPath(&unk_10038C248);
    v6 = swift_getKeyPath(&unk_10038C270);
    static Published.subscript.getter(&v10, v0, KeyPath, v6);
    swift_release(v6);
    swift_release(KeyPath);
    v7 = v10;
    v8 = swift_getKeyPath(&unk_10038C248);
    v9 = swift_getKeyPath(&unk_10038C270);
    *(_QWORD *)&v10 = 2147483650;
    swift_retain(v1);
    static Published.subscript.setter(&v10, v1, v8, v9);
    sub_1000FAE10(v7);
  }
}

uint64_t CloudLibrary.StatusObserver.hasDisregardedBanner.getter()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 v3;
  _BYTE v4[24];

  swift_beginAccess(v0 + 16, v4, 0, 0);
  v1 = sub_100005574(&qword_100491CD8);
  UserDefault.wrappedValue.getter(v1, (uint64_t)&v3);
  return v3;
}

void CloudLibrary.StatusObserver.hasDisregardedBanner.setter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v3[31];
  char v4;

  v4 = a1;
  swift_beginAccess(v1 + 16, v3, 33, 0);
  v2 = sub_100005574(&qword_100491CD8);
  UserDefault.wrappedValue.setter((uint64_t)&v4, v2);
  swift_endAccess(v3);
  sub_1000F9DFC();
}

void (*CloudLibrary.StatusObserver.hasDisregardedBanner.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[7] = v1;
  swift_beginAccess(v1 + 16, v3 + 4, 0, 0);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_BYTE *)(v1 + 40);
  *(_OWORD *)v3 = *(_OWORD *)(v1 + 16);
  v3[2] = v4;
  *((_BYTE *)v3 + 24) = v5;
  v6 = sub_100005574(&qword_100491CD8);
  v3[8] = v6;
  UserDefault.wrappedValue.getter(v6, (uint64_t)v3 + 25);
  return sub_1000FA078;
}

void sub_1000FA078(uint64_t *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (void *)*a1;
  v3 = *(_QWORD *)(*a1 + 56);
  v2 = *(_QWORD *)(*a1 + 64);
  v4 = *a1;
  *(_BYTE *)(*a1 + 26) = *(_BYTE *)(*a1 + 25);
  swift_beginAccess(v3 + 16, v1, 33, 0);
  UserDefault.wrappedValue.setter(v4 + 26, v2);
  swift_endAccess(v1);
  sub_1000F9DFC();
  free(v1);
}

void CloudLibrary.StatusObserver.enableCloudLibrary(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t inited;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  Class isa;
  uint64_t v25;
  void *v26;
  _QWORD v27[5];
  uint64_t v28;
  _BYTE v29[80];

  if (a1)
  {
    v5 = swift_allocObject(&unk_10044AF90, 32, 7);
    *(_QWORD *)(v5 + 16) = a1;
    *(_QWORD *)(v5 + 24) = a2;
    v6 = *(_QWORD **)(v2 + 48);
    swift_retain(a2);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
    *(_QWORD *)(v2 + 48) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v6 = sub_10003E648(0, v6[2] + 1, 1, v6);
      *(_QWORD *)(v2 + 48) = v6;
    }
    v9 = v6[2];
    v8 = v6[3];
    if (v9 >= v8 >> 1)
    {
      v6 = sub_10003E648((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
      *(_QWORD *)(v2 + 48) = v6;
    }
    v6[2] = v9 + 1;
    v10 = &v6[2 * v9];
    v10[4] = sub_1000FF170;
    v10[5] = v5;
  }
  KeyPath = swift_getKeyPath(&unk_10038C248);
  v12 = swift_getKeyPath(&unk_10038C270);
  static Published.subscript.getter(v27, v2, KeyPath, v12);
  swift_release(v12);
  swift_release(KeyPath);
  v13 = v27[0];
  v14 = swift_getKeyPath(&unk_10038C248);
  v15 = swift_getKeyPath(&unk_10038C270);
  v27[0] = 2147483652;
  swift_retain(v2);
  static Published.subscript.setter(v27, v2, v14, v15);
  sub_1000FAE10(v13);
  v16 = sub_100005574(&qword_100491CE0);
  inited = swift_initStackObject(v16, v29);
  *(_OWORD *)(inited + 16) = xmmword_100384A60;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPCloudControllerEnableCloudLibraryOptionStartInitialImport);
  *(_QWORD *)(inited + 40) = v18;
  *(_BYTE *)(inited + 48) = 1;
  *(_QWORD *)(inited + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPCloudControllerEnableCloudLibraryOptionMergeWithCloudLibrary);
  *(_QWORD *)(inited + 64) = v19;
  *(_BYTE *)(inited + 72) = 1;
  v20 = sub_100099360(inited);
  v21 = objc_msgSend((id)objc_opt_self(MPCloudController), "sharedCloudController");
  if (v21)
  {
    v22 = v21;
    v23 = sub_1000F830C(v20);
    swift_bridgeObjectRelease(v20);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v23);
    v25 = swift_allocObject(&unk_10044AF40, 24, 7);
    swift_weakInit(v25 + 16, v2);
    v27[4] = sub_1000FF150;
    v28 = v25;
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 1107296256;
    v27[2] = sub_1000F7EF4;
    v27[3] = &unk_10044AF58;
    v26 = _Block_copy(v27);
    objc_msgSend(v22, "enableCloudLibraryWithOptions:completionHandler:", isa, v26, swift_release(v28).n128_f64[0]);
    _Block_release(v26);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000FA3D4(unsigned __int8 *a1, uint64_t (*a2)(_QWORD))
{
  return a2(*a1);
}

uint64_t sub_1000FA3F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  void **v19;
  void **v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void **aBlock;
  uint64_t v53;
  uint64_t (*v54)(uint64_t);
  void *v55;
  uint64_t (*v56)();
  uint64_t v57;
  _QWORD v58[3];

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v50 = *(_QWORD *)(v8 - 8);
  v51 = v8;
  __chkstk_darwin(v8);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a2 + 16;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10048C7F0 != -1)
      swift_once(&qword_10048C7F0, sub_1000FEEB0);
    v14 = type metadata accessor for Logger(0, v13);
    sub_1000086B4(v14, (uint64_t)qword_100491CB0);
    swift_errorRetain(a1);
    v15 = swift_errorRetain(a1);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc(12, -1);
      v19 = (void **)swift_slowAlloc(32, -1);
      v49 = v5;
      v20 = v19;
      aBlock = v19;
      *(_DWORD *)v18 = 136315138;
      v58[0] = a1;
      swift_errorRetain(a1);
      v21 = sub_100005574((uint64_t *)&unk_1004911F0);
      v22 = (char *)String.init<A>(describing:)(v58, v21);
      v24 = v23;
      *(_QWORD *)(v18 + 4) = sub_100019400(v22, v23, (uint64_t *)&aBlock);
      swift_bridgeObjectRelease(v24);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failed to enable Cloud Library with error=%s", (uint8_t *)v18, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      v25 = v20;
      v5 = v49;
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v18, -1, -1);

      swift_errorRelease(a1);
      goto LABEL_12;
    }
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  else
  {
    if (qword_10048C7F0 != -1)
      swift_once(&qword_10048C7F0, sub_1000FEEB0);
    v26 = type metadata accessor for Logger(0, v9);
    v27 = sub_1000086B4(v26, (uint64_t)qword_100491CB0);
    v16 = Logger.logObject.getter(v27);
    v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v28, "Successfully enabled Cloud Library", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }
  }

LABEL_12:
  swift_beginAccess(v12, v58, 0, 0);
  result = swift_weakLoadStrong(v12);
  if (result)
  {
    v31 = result;
    v32 = sub_1000087DC(0, (unint64_t *)&qword_100490BC0, OS_dispatch_queue_ptr);
    v40 = (void *)static OS_dispatch_queue.main.getter(v32, v33, v34, v35, v36, v37, v38, v39, v49, v50, v51, aBlock, v53, v54, v55);
    v41 = swift_allocObject(&unk_10044B5C0, 32, 7);
    *(_QWORD *)(v41 + 16) = v31;
    *(_QWORD *)(v41 + 24) = a1;
    v56 = sub_10010052C;
    v57 = v41;
    aBlock = _NSConcreteStackBlock;
    v53 = 1107296256;
    v54 = sub_1000BED80;
    v55 = &unk_10044B5D8;
    v42 = _Block_copy(&aBlock);
    v43 = v57;
    swift_errorRetain(a1);
    swift_retain(v31);
    v44 = swift_release(v43);
    static DispatchQoS.unspecified.getter(v44);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v45 = sub_100006924((unint64_t *)&qword_1004921B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v46 = sub_100005574(&qword_100490838);
    v47 = sub_10002FFB8((unint64_t *)&qword_1004921C0, &qword_100490838, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v46, v47, v4, v45);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v42);
    _Block_release(v42);

    v48 = swift_release(v31);
    (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v7, v4, v48);
    return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v11, v51);
  }
  return result;
}

uint64_t sub_1000FA874(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t *v5;
  uint64_t v6;
  void (*v7)(BOOL *);
  BOOL v9;

  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = &_swiftEmptyArrayStorage;
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = a2 == 0;
    swift_bridgeObjectRetain();
    v5 = (uint64_t *)(v2 + 40);
    do
    {
      v7 = (void (*)(BOOL *))*(v5 - 1);
      v6 = *v5;
      v9 = v4;
      swift_retain(v6);
      v7(&v9);
      swift_release(v6);
      v5 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease(v2);
  }
  return swift_bridgeObjectRelease(v2);
}

uint64_t CloudLibrary.StatusObserver.add(updateObserver:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Strong;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t KeyPath;
  uint64_t v15;
  __n128 v16;
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  _QWORD v21[2];
  _BYTE v22[8];
  uint64_t v23;
  _BYTE v24[24];

  v3 = v2;
  v6 = (_QWORD *)(v3 + 64);
  swift_beginAccess(v3 + 64, v24, 1, 0);
  v7 = *(_QWORD *)(v3 + 64);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = v7 + 32;
    swift_bridgeObjectRetain();
    do
    {
      Strong = swift_unknownObjectWeakLoadStrong(v9);
      if (Strong)
      {
        v11 = Strong;
        swift_unknownObjectRelease(Strong);
        if (v11 == a1)
          return swift_bridgeObjectRelease();
      }
      v9 += 16;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  v23 = a2;
  swift_unknownObjectWeakInit(v22, a1);
  ObjectType = swift_getObjectType();
  KeyPath = swift_getKeyPath(&unk_10038C248);
  v15 = swift_getKeyPath(&unk_10038C270);
  static Published.subscript.getter(v21, v3, KeyPath, v15);
  swift_release(v15);
  v16 = swift_release(KeyPath);
  (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(a2 + 8))(v21[0], ObjectType, a2, v16);
  sub_1000FF194((uint64_t)v22, (uint64_t)v21);
  v17 = *(_QWORD **)(v3 + 64);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
  *(_QWORD *)(v3 + 64) = v17;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v17 = sub_10003E770(0, v17[2] + 1, 1, v17);
    *v6 = v17;
  }
  v20 = v17[2];
  v19 = v17[3];
  if (v20 >= v19 >> 1)
  {
    v17 = sub_10003E770((_QWORD *)(v19 > 1), v20 + 1, 1, v17);
    *v6 = v17;
  }
  v17[2] = v20 + 1;
  sub_1000FF1CC((uint64_t)v21, (uint64_t)&v17[2 * v20 + 4]);
  return sub_1000FF204((uint64_t)v22);
}

void CloudLibrary.StatusObserver.remove(updateObserver:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t Strong;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE v11[16];
  _BYTE v12[24];

  v3 = v1 + 64;
  swift_beginAccess(v1 + 64, v12, 0, 0);
  v4 = *(_QWORD *)(v1 + 64);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = v4 + 32;
    swift_bridgeObjectRetain();
    for (i = 0; i != v5; ++i)
    {
      Strong = swift_unknownObjectWeakLoadStrong(v6);
      if (Strong)
      {
        v9 = Strong;
        swift_unknownObjectRelease(Strong);
        if (v9 == a1)
        {
          swift_bridgeObjectRelease();
          swift_beginAccess(v3, v10, 33, 0);
          sub_1000FABAC(i, (uint64_t)v11);
          sub_1000FF204((uint64_t)v11);
          swift_endAccess(v10);
          return;
        }
      }
      v6 += 16;
    }
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000FABAC@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v5 = (_QWORD *)*v2;
  result = swift_isUniquelyReferenced_nonNull_native(*v2);
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1001B7104(v5);
    v5 = (_QWORD *)result;
  }
  v7 = v5[2];
  if (v7 <= a1)
  {
    __break(1u);
  }
  else
  {
    v8 = v7 - 1;
    v9 = &v5[2 * a1];
    sub_1000FF1CC((uint64_t)(v9 + 4), a2);
    result = swift_arrayInitWithTakeFrontToBack(v9 + 4, v9 + 6, v8 - a1, &type metadata for CloudLibrary.StatusObserver.InternalObserver);
    v5[2] = v8;
    *v2 = v5;
  }
  return result;
}

char *sub_1000FAC4C(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  char *result;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v3 = *v1;
  result = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((result & 1) == 0)
  {
    result = sub_1001B7118(v3);
    v3 = (uint64_t)result;
  }
  v5 = *(_QWORD *)(v3 + 16);
  if (v5 <= a1)
  {
    __break(1u);
  }
  else
  {
    v6 = v5 - 1;
    v7 = *(unsigned __int8 *)(v3 + a1 + 32);
    memmove((void *)(v3 + a1 + 32), (const void *)(v3 + a1 + 33), v5 - 1 - a1);
    *(_QWORD *)(v3 + 16) = v6;
    *v1 = v3;
    return (char *)v7;
  }
  return result;
}

uint64_t sub_1000FACCC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10038C248);
  v5 = swift_getKeyPath(&unk_10038C270);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(v5);
  result = swift_release(KeyPath);
  *a2 = v7;
  return result;
}

void sub_1000FAD48(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10038C248);
  v5 = swift_getKeyPath(&unk_10038C270);
  static Published.subscript.getter(&v9, v3, KeyPath, v5);
  swift_release(v5);
  swift_release(KeyPath);
  v6 = v9;
  v7 = swift_getKeyPath(&unk_10038C248);
  v8 = swift_getKeyPath(&unk_10038C270);
  v9 = v2;
  swift_retain(v3);
  static Published.subscript.setter(&v9, v3, v7, v8);
  sub_1000FAE10(v6);
}

void sub_1000FAE10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  KeyPath = swift_getKeyPath(&unk_10038C248);
  v5 = swift_getKeyPath(&unk_10038C270);
  static Published.subscript.getter(&v19, v2, KeyPath, v5);
  swift_release(v5);
  swift_release(KeyPath);
  if ((_s9MusicCore12CloudLibraryO6StatusO21__derived_enum_equalsySbAE_AEtFZ_0(v19, a1) & 1) == 0)
  {
    if (qword_10048C7F0 != -1)
      swift_once(&qword_10048C7F0, sub_1000FEEB0);
    v7 = type metadata accessor for Logger(0, v6);
    sub_1000086B4(v7, (uint64_t)qword_100491CB0);
    v8 = swift_retain_n(v2, 2);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v19 = v12;
      *(_DWORD *)v11 = 136315138;
      v13 = swift_getKeyPath(&unk_10038C248);
      v14 = swift_getKeyPath(&unk_10038C270);
      static Published.subscript.getter(&v18, v2, v13, v14);
      swift_release(v14);
      swift_release(v13);
      v15 = (char *)String.init<A>(describing:)(&v18, &type metadata for CloudLibrary.Status);
      v17 = v16;
      *(_QWORD *)(v11 + 4) = sub_100019400(v15, v16, &v19);
      swift_bridgeObjectRelease(v17);
      swift_release_n(v2, 2);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Status did change: %s", (uint8_t *)v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {
      swift_release_n(v2, 2);
    }

    sub_1000FBDE4();
  }
}

uint64_t CloudLibrary.StatusObserver.status.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10038C248);
  v2 = swift_getKeyPath(&unk_10038C270);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

uint64_t sub_1000FB0A8(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(*a1 + OBJC_IVAR____TtCO9MusicCore12CloudLibrary14StatusObserver__status, v3, 33, 0);
  v1 = sub_100005574((uint64_t *)&unk_100491CE8);
  Published.projectedValue.getter(v1);
  return swift_endAccess(v3);
}

uint64_t sub_1000FB10C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  void (*v11)(_BYTE *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v4 = sub_100005574(&qword_1004921C8);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v6);
  v10 = &v16[-v9 - 8];
  v11 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  v11(&v16[-v9 - 8], a1, v4);
  v12 = *a2;
  v11(v8, (uint64_t)v10, v4);
  swift_beginAccess(v12 + OBJC_IVAR____TtCO9MusicCore12CloudLibrary14StatusObserver__status, v16, 33, 0);
  v13 = sub_100005574((uint64_t *)&unk_100491CE8);
  Published.projectedValue.setter(v8, v13);
  swift_endAccess(v16);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v10, v4);
}

uint64_t CloudLibrary.StatusObserver.$status.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + OBJC_IVAR____TtCO9MusicCore12CloudLibrary14StatusObserver__status, v3, 33, 0);
  v1 = sub_100005574((uint64_t *)&unk_100491CE8);
  Published.projectedValue.getter(v1);
  return swift_endAccess(v3);
}

void sub_1000FB27C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtCO9MusicCore12CloudLibrary14StatusObserver_updateContext);
  if (a1 == 2)
  {
    if (v2 != 2 && (v2 & 1) != 0)
    {
      v3 = HIDWORD(v2);
      goto LABEL_9;
    }
  }
  else
  {
    if (v2 == 2)
    {
      KeyPath = swift_getKeyPath(&unk_10038C248);
      v5 = swift_getKeyPath(&unk_10038C270);
      static Published.subscript.getter(&v12, v1, KeyPath, v5);
      swift_release(v5);
      swift_release(KeyPath);
      v6 = v12;
      v7 = swift_getKeyPath(&unk_10038C248);
      v8 = swift_getKeyPath(&unk_10038C270);
      v12 = 0x80000000;
LABEL_10:
      swift_retain(v1);
      static Published.subscript.setter(&v12, v1, v7, v8);
      sub_1000FAE10(v6);
      return;
    }
    v3 = HIDWORD(v2);
    if (((((a1 & 1) == 0) ^ v2) & (*((float *)&a1 + 1) == *((float *)&v2 + 1))) == 0 && (v2 & 1) != 0)
    {
LABEL_9:
      v9 = (v3 << 32) | 0x40000001;
      v10 = swift_getKeyPath(&unk_10038C248);
      v11 = swift_getKeyPath(&unk_10038C270);
      static Published.subscript.getter(&v12, v1, v10, v11);
      swift_release(v11);
      swift_release(v10);
      v6 = v12;
      v7 = swift_getKeyPath(&unk_10038C248);
      v8 = swift_getKeyPath(&unk_10038C270);
      v12 = v9;
      goto LABEL_10;
    }
  }
}

void (*sub_1000FB424(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = OBJC_IVAR____TtCO9MusicCore12CloudLibrary14StatusObserver_updateContext;
  a1[1] = v1;
  a1[2] = v2;
  *a1 = *(_QWORD *)(v1 + v2);
  return sub_1000FB448;
}

void sub_1000FB448(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v1 = a1[2];
  v3 = *a1;
  v4 = *(_QWORD *)(v2 + v1);
  *(_QWORD *)(v2 + v1) = v3;
  sub_1000FB27C(v4);
}

void sub_1000FB474()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  id v20;
  void *v21;
  unsigned int v22;
  id v23;
  void *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t ObjectType;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v39;
  void (*v40)(_QWORD *, uint64_t);
  void *v41;
  char *v42;
  __n128 v43;
  char *v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD aBlock[5];
  uint64_t v64;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v61 = *(_QWORD *)(v2 - 8);
  v62 = v2;
  __chkstk_darwin(v2);
  v60 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v58 = *(_QWORD *)(v4 - 8);
  v59 = v4;
  __chkstk_darwin(v4);
  v57 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchTimeInterval(0);
  v55 = *(_QWORD *)(v6 - 8);
  v56 = v6;
  v7 = __chkstk_darwin(v6);
  v54 = (uint64_t *)((char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v53 = (uint64_t *)((char *)&v48 - v9);
  v10 = type metadata accessor for DispatchTime(0);
  v51 = *(_QWORD *)(v10 - 8);
  v52 = v10;
  __chkstk_darwin(v10);
  v50 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OS_dispatch_source.TimerFlags(0);
  v49 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS.QoSClass(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (void *)objc_opt_self(MPCloudController);
  v20 = objc_msgSend(v19, "sharedCloudController");
  if (!v20)
  {
    __break(1u);
    goto LABEL_13;
  }
  v21 = v20;
  v22 = objc_msgSend(v20, "isUpdateInProgress");

  v23 = objc_msgSend(v19, "sharedCloudController");
  if (!v23)
  {
LABEL_13:
    __break(1u);
    return;
  }
  v24 = v23;
  v25 = objc_msgSend(v23, "isInitialImport");

  v26 = *(_QWORD *)(v1 + 88);
  if ((v22 & v25) == 1)
  {
    if (!v26)
    {
      v27 = *(_QWORD *)(v1 + OBJC_IVAR____TtCO9MusicCore12CloudLibrary14StatusObserver_updateContext);
      *(_QWORD *)(v1 + OBJC_IVAR____TtCO9MusicCore12CloudLibrary14StatusObserver_updateContext) = 1;
      sub_1000FB27C(v27);
      sub_1000087DC(0, &qword_1004940E0, OS_dispatch_source_ptr);
      sub_1000087DC(0, (unint64_t *)&qword_100490BC0, OS_dispatch_queue_ptr);
      (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for DispatchQoS.QoSClass.userInteractive(_:), v15);
      v28 = (void *)static OS_dispatch_queue.global(qos:)(v18);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      aBlock[0] = _swiftEmptyArrayStorage;
      v29 = sub_100006924(&qword_100492198, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
      v30 = sub_100005574(&qword_1004921A0);
      v31 = sub_10002FFB8(&qword_1004921A8, &qword_1004921A0, (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v30, v31, v12, v29);
      v32 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v14, v28);

      (*(void (**)(char *, uint64_t))(v49 + 8))(v14, v12);
      ObjectType = swift_getObjectType();
      v34 = v50;
      static DispatchTime.now()(ObjectType);
      v35 = v53;
      *v53 = 1;
      v37 = v55;
      v36 = v56;
      v38 = *(void (**)(_QWORD *, _QWORD, uint64_t))(v55 + 104);
      v38(v35, enum case for DispatchTimeInterval.seconds(_:), v56);
      v39 = v54;
      *v54 = 1;
      v38(v39, enum case for DispatchTimeInterval.nanoseconds(_:), v36);
      OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v34, v35, v39, ObjectType);
      v40 = *(void (**)(_QWORD *, uint64_t))(v37 + 8);
      v40(v39, v36);
      v40(v35, v36);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v34, v52);
      aBlock[4] = sub_10010046C;
      v64 = v1;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000BED80;
      aBlock[3] = &unk_10044B448;
      v41 = _Block_copy(aBlock);
      swift_retain(v1);
      v42 = v57;
      j___s8Dispatch0A3QoSV11unspecifiedACvgZ(v43);
      v44 = v60;
      sub_10016FFA0();
      OS_dispatch_source.setEventHandler(qos:flags:handler:)(v42, v44, v41, ObjectType);
      _Block_release(v41);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v44, v62);
      (*(void (**)(char *, uint64_t))(v58 + 8))(v42, v59);
      v45 = swift_release(v64);
      v46 = *(_QWORD *)(v1 + 88);
      *(_QWORD *)(v1 + 88) = v32;
      swift_unknownObjectRetain_n(v32, 2, v45);
      if (v46)
      {
        swift_getObjectType();
        swift_unknownObjectRetain(v46);
        OS_dispatch_source.cancel()();
        swift_unknownObjectRelease_n(v46, 2);
      }
      swift_unknownObjectRelease(v32);
      OS_dispatch_source.resume()();
      swift_unknownObjectRelease(v32);
    }
  }
  else
  {
    *(_QWORD *)(v1 + 88) = 0;
    if (v26)
    {
      swift_getObjectType();
      swift_unknownObjectRetain(v26);
      OS_dispatch_source.cancel()();
      swift_unknownObjectRelease_n(v26, 2);
    }
    v47 = *(_QWORD *)(v1 + OBJC_IVAR____TtCO9MusicCore12CloudLibrary14StatusObserver_updateContext);
    *(_QWORD *)(v1 + OBJC_IVAR____TtCO9MusicCore12CloudLibrary14StatusObserver_updateContext) = 2;
    sub_1000FB27C(v47);
  }
}

void sub_1000FBA14(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[5];
  uint64_t v7;

  v2 = objc_msgSend((id)objc_opt_self(MPCloudController), "sharedCloudController");
  if (v2)
  {
    v3 = v2;
    v6[4] = sub_100100474;
    v7 = a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 1107296256;
    v6[2] = sub_1000FBDA8;
    v6[3] = &unk_10044B470;
    v4 = _Block_copy(v6);
    v5 = v7;
    swift_retain(a1);
    objc_msgSend(v3, "loadCloudMusicLibraryUpdateProgressWithCompletionHandler:", v4, swift_release(v5).n128_f64[0]);
    _Block_release(v4);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000FBAE4(uint64_t a1, float a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  void **aBlock;
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  void *v33;
  void (*v34)();
  uint64_t v35;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v29 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000087DC(0, (unint64_t *)&qword_100490BC0, OS_dispatch_queue_ptr);
  v19 = (void *)static OS_dispatch_queue.main.getter(v11, v12, v13, v14, v15, v16, v17, v18, v28, v29, aBlock, v31, v32, v33, v34);
  v20 = swift_allocObject(&unk_10044AF40, 24, 7);
  swift_weakInit(v20 + 16, a1);
  v21 = swift_allocObject(&unk_10044B4A8, 28, 7);
  *(_QWORD *)(v21 + 16) = v20;
  *(float *)(v21 + 24) = a2;
  v34 = sub_1001004A0;
  v35 = v21;
  aBlock = _NSConcreteStackBlock;
  v31 = 1107296256;
  v32 = sub_1000BED80;
  v33 = &unk_10044B4C0;
  v22 = _Block_copy(&aBlock);
  v23 = swift_release(v35);
  static DispatchQoS.unspecified.getter(v23);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v24 = sub_100006924((unint64_t *)&qword_1004921B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_100005574(&qword_100490838);
  v26 = sub_10002FFB8((unint64_t *)&qword_1004921C0, &qword_100490838, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v25, v26, v4, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v6, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void sub_1000FBD24(uint64_t a1, float a2)
{
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t *);
  _QWORD v8[4];
  _BYTE v9[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v9, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    v7 = sub_1000FB424(v8);
    if (*(_BYTE *)v6 != 2)
      *(float *)(v6 + 4) = a2;
    ((void (*)(_QWORD *, _QWORD))v7)(v8, 0);
    swift_release(v5);
  }
}

uint64_t sub_1000FBDA8(uint64_t a1, float a2)
{
  void (*v3)(uint64_t, float);
  uint64_t v4;
  uint64_t v5;

  v3 = *(void (**)(uint64_t, float))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = swift_retain(v4);
  v3(v5, a2);
  return swift_release(v4);
}

void sub_1000FBDE4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  _BYTE v11[8];
  uint64_t v12;
  _QWORD v13[3];

  KeyPath = swift_getKeyPath(&unk_10038C248);
  v2 = swift_getKeyPath(&unk_10038C270);
  static Published.subscript.getter(v13, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  v3 = v13[0];
  swift_beginAccess(v0 + 64, v13, 0, 0);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = v4 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_1000FF194(v6, (uint64_t)v11);
      Strong = swift_unknownObjectWeakLoadStrong(v11);
      if (Strong)
      {
        v8 = Strong;
        v9 = v12;
        ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 8))(v3, ObjectType, v9);
        swift_unknownObjectRelease(v8);
      }
      sub_1000FF204((uint64_t)v11);
      v6 += 16;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease(v4);
  }
}

_QWORD *CloudLibrary.StatusObserver.deinit()
{
  _QWORD *v0;
  void *v1;
  char *v2;
  uint64_t v3;

  v1 = (void *)v0[2];
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release(v0[7]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(v0[10]);
  swift_unknownObjectRelease(v0[11]);
  v2 = (char *)v0 + OBJC_IVAR____TtCO9MusicCore12CloudLibrary14StatusObserver__status;
  v3 = sub_100005574((uint64_t *)&unk_100491CE8);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return v0;
}

uint64_t CloudLibrary.StatusObserver.__deallocating_deinit()
{
  uint64_t v0;

  CloudLibrary.StatusObserver.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000FBF98@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for CloudLibrary.StatusObserver(0);
  result = ObservableObject<>.objectWillChange.getter(v2);
  *a1 = result;
  return result;
}

uint64_t CloudLibrary.Status.message.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[16];

  v2 = type metadata accessor for Locale(0);
  __chkstk_darwin(v2);
  v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for String.LocalizationValue(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v11 = &v17[-v10];
  if (a1 >> 30)
  {
    if (a1 >> 30 == 1)
      goto LABEL_3;
    if ((unint64_t)(a1 - 0x80000000) < 3)
      return 0;
    if (a1 != 2147483651)
    {
LABEL_3:
      v12 = 0x80000001003B2280;
      v13 = 0x1000000000000017;
    }
    else
    {
      v13 = 0xD00000000000002ALL;
      v12 = 0x80000001003B22A0;
    }
  }
  else
  {
    v12 = 0x80000001003B2260;
    v13 = 0xD00000000000001CLL;
  }
  String.LocalizationValue.init(stringLiteral:)(v13, v12);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(v9, v11, v5);
  if (qword_10048C570 != -1)
    swift_once(&qword_10048C570, sub_10000AD54);
  v14 = qword_1004A1DA0;
  static Locale.current.getter((id)qword_1004A1DA0);
  v15 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, v14, v4, 0, 0, 256);
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v5);
  return v15;
}

uint64_t CloudLibrary.Status.actionTitle.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE v17[16];

  v2 = type metadata accessor for Locale(0);
  __chkstk_darwin(v2);
  v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for String.LocalizationValue(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v11 = &v17[-v10];
  if (a1 >> 30)
  {
    v12 = 0;
    if (a1 >> 30 == 1)
      return v12;
    if (a1 != 2147483651)
      return 0;
    v13 = 0x6E4F206E727554;
    v14 = 0xE700000000000000;
  }
  else
  {
    v13 = 0x7972746552;
    v14 = 0xE500000000000000;
  }
  String.LocalizationValue.init(stringLiteral:)(v13, v14);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(v9, v11, v5);
  if (qword_10048C570 != -1)
    swift_once(&qword_10048C570, sub_10000AD54);
  v15 = qword_1004A1DA0;
  static Locale.current.getter((id)qword_1004A1DA0);
  v12 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, v15, v4, 0, 0, 256);
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v5);
  return v12;
}

BOOL static CloudLibrary.PresentationStyle.__derived_enum_equals(_:_:)(void *a1, void *a2)
{
  char v5;

  if (!a1)
    return !a2;
  if (a1 == (void *)1)
    return a2 == (void *)1;
  if ((unint64_t)a2 < 2)
    return 0;
  sub_1000087DC(0, (unint64_t *)&qword_1004918F0, NSObject_ptr);
  sub_1000FF228(a1);
  sub_1000FF228(a2);
  v5 = static NSObject.== infix(_:_:)(a1, a2);
  sub_1000FF238(a2);
  sub_1000FF238(a1);
  return v5 & 1;
}

BOOL sub_1000FC428(void **a1, void **a2)
{
  void *v2;
  void *v3;
  char v5;

  v2 = *a1;
  v3 = *a2;
  if (!*a1)
    return !v3;
  if (v2 == (void *)1)
    return v3 == (void *)1;
  if ((unint64_t)v3 < 2)
    return 0;
  sub_1000087DC(0, (unint64_t *)&qword_1004918F0, NSObject_ptr);
  sub_1000FF228(v2);
  sub_1000FF228(v3);
  v5 = static NSObject.== infix(_:_:)(v2, v3);
  sub_1000FF238(v3);
  sub_1000FF238(v2);
  return v5 & 1;
}

void sub_1000FC4D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_10048C7E8 != -1)
    swift_once(&qword_10048C7E8, sub_1000F900C);
  CloudLibrary.StatusObserver.enableCloudLibrary(completion:)(a2, a3);
}

double sub_1000FC53C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000FC76C(a1, a2, a3, a4, (uint64_t)&unk_10044B688, (uint64_t)sub_1001004B0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))_s9MusicCore12CloudLibraryO07presentcD7Enabler7context18presentationSource5style10completionyAC17EnablementContextO_AA012PresentationI0VAC0N5StyleOySbcSgtFZ_0);
}

double sub_1000FC558(uint64_t a1)
{
  uint64_t v1;

  return sub_1000FC76C(a1, *(unsigned __int8 *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), (uint64_t)&unk_10044B688, (uint64_t)sub_1001004B0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))_s9MusicCore12CloudLibraryO07presentcD7Enabler7context18presentationSource5style10completionyAC17EnablementContextO_AA012PresentationI0VAC0N5StyleOySbcSgtFZ_0);
}

uint64_t static CloudLibrary.presentCloudLibraryEnablerIfNeeded(context:presentationSource:style:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v3 + 16) = a2;
  *(_QWORD *)(v3 + 24) = a3;
  *(_BYTE *)(v3 + 89) = a1;
  v4 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v3 + 32) = v4;
  *(_QWORD *)(v3 + 40) = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  *(_QWORD *)(v3 + 48) = v5;
  *(_QWORD *)(v3 + 56) = v6;
  return swift_task_switch(sub_1000FC604, v5, v6);
}

uint64_t sub_1000FC604(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_BYTE *)(v1 + 89);
  v5 = static MainActor.shared.getter(a1);
  *(_QWORD *)(v1 + 64) = v5;
  v6 = swift_task_alloc(48);
  *(_QWORD *)(v1 + 72) = v6;
  *(_BYTE *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v3;
  *(_QWORD *)(v6 + 32) = v2;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v1 + 80) = v7;
  *v7 = v1;
  v7[1] = sub_1000FC6D0;
  return withCheckedContinuation<A>(isolation:function:_:)(v1 + 88, v5, &protocol witness table for MainActor, 0xD000000000000045, 0x80000001003B22D0, sub_1000FF8FC, v6, &type metadata for Bool);
}

uint64_t sub_1000FC6D0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 72);
  v3 = *(_QWORD *)(*v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*v0 + 80));
  swift_release(v3);
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000FC738, *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_1000FC738()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 88));
}

double sub_1000FC76C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v21 = a7;
  v13 = sub_100005574(&qword_1004921D0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v13);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = swift_allocObject(a5, v17 + v15, v16 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v18 + v17, (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
  v21(a2, a3, a4, a6, v18);
  *(_QWORD *)&result = swift_release(v18).n128_u64[0];
  return result;
}

char *sub_1000FC870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (**v21)();
  uint64_t v22;
  uint64_t v23;
  char *v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v36[2];

  *(_QWORD *)&v6[qword_100491F18] = 0;
  v13 = type metadata accessor for EnableCloudLibraryView.Model(0);
  v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  v15 = v6;
  sub_10003A434(a5, a6);
  sub_1000FD0B0(a1, a2, a3, a4, a5, a6, 1, 0, 0);
  *(_QWORD *)&v15[qword_100491F10] = v14;
  swift_retain_n(v14, 2);

  v16 = sub_100006924(&qword_1004921D8, type metadata accessor for EnableCloudLibraryView.Model, (uint64_t)&unk_10038C694);
  v36[0] = ObservedObject.init(wrappedValue:)(v14, v13, v16);
  v36[1] = v17;
  v18 = (char *)UIHostingController.init(rootView:)(v36);
  v19 = *(_QWORD *)&v18[qword_100491F10];
  v20 = swift_allocObject(&unk_10044B430, 24, 7);
  swift_unknownObjectWeakInit(v20 + 16, v18);
  v21 = (void (**)())(v19 + OBJC_IVAR____TtCV9MusicCore22EnableCloudLibraryView5Model_dismiss);
  v22 = *(_QWORD *)(v19 + OBJC_IVAR____TtCV9MusicCore22EnableCloudLibraryView5Model_dismiss);
  v23 = (uint64_t)v21[1];
  *v21 = sub_1001004F8;
  v21[1] = (void (*)())v20;
  v24 = v18;
  sub_10003A5C8(v22, v23);
  sub_1000FCE18();
  v25 = objc_msgSend(v24, "presentingViewController");
  if (v25)
  {
    v26 = v25;
    v27 = sub_100005574((uint64_t *)&unk_1004921E0);
    v28 = swift_allocObject(v27, 48, 7);
    *(_OWORD *)(v28 + 16) = xmmword_100384A80;
    *(_QWORD *)(v28 + 32) = type metadata accessor for UITraitHorizontalSizeClass(0);
    *(_QWORD *)(v28 + 40) = &protocol witness table for UITraitHorizontalSizeClass;
    v29 = UIViewController.registerForTraitChanges(_:action:)(v28, "determineHorizontalSizeClass");
    swift_unknownObjectRelease(v29);

    swift_bridgeObjectRelease(v28);
  }
  v30 = objc_msgSend(v24, "presentationController");
  if (v30)
  {
    v31 = v30;
    v32 = sub_100005574((uint64_t *)&unk_1004921E0);
    v33 = swift_allocObject(v32, 48, 7);
    *(_OWORD *)(v33 + 16) = xmmword_100384A80;
    *(_QWORD *)(v33 + 32) = type metadata accessor for UITraitHorizontalSizeClass(0);
    *(_QWORD *)(v33 + 40) = &protocol witness table for UITraitHorizontalSizeClass;
    v34 = UIPresentationController.registerForTraitChanges(_:action:)(v33, "determineHorizontalSizeClass");
    sub_10003A5C8(a5, a6);
    swift_unknownObjectRelease(v34);

    swift_bridgeObjectRelease(v33);
  }
  else
  {
    sub_10003A5C8(a5, a6);
  }
  swift_release(v14);

  return v24;
}

void sub_1000FCB0C(uint64_t a1)
{
  uint64_t v1;
  void *Strong;
  void *v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    objc_msgSend(Strong, "dismissViewControllerAnimated:completion:", 1, 0);

  }
}

void sub_1000FCB6C(char *a1, uint64_t a2, void *a3)
{
  id v4;

  *(_QWORD *)&a1[qword_100491F18] = 0;
  v4 = a3;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001003B2590, "MusicCore/CloudLibrary.swift", 28, 2, 499, 0);
  __break(1u);
}

void sub_1000FCBE0(void *a1)
{
  id v1;
  id v2;
  objc_class *v3;
  id v4;
  objc_super v5;

  v5.receiver = a1;
  v5.super_class = (Class)type metadata accessor for CloudLibraryViewController(0);
  v1 = v5.receiver;
  objc_msgSendSuper2(&v5, "viewDidLoad");
  v2 = objc_msgSend(v1, "navigationItem", v5.receiver, v5.super_class);
  v3 = sub_1000FCCA4();
  objc_msgSend(v2, "setRightBarButtonItem:", v3);

  v4 = objc_msgSend(v1, "navigationItem");
  objc_msgSend(v4, "setLargeTitleDisplayMode:", 2);

}

objc_class *sub_1000FCCA4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  objc_class *v3;
  uint64_t v4;
  uint64_t v5;
  UIBarButtonItem v6;
  void *v7;
  id v8;
  UIAction_optional v10;
  UIMenu_optional v11;

  v1 = qword_100491F18;
  v2 = *(void **)(v0 + qword_100491F18);
  if (v2)
  {
    v3 = *(objc_class **)(v0 + qword_100491F18);
  }
  else
  {
    v4 = v0;
    sub_1000087DC(0, &qword_100492188, UIBarButtonItem_ptr);
    sub_1000087DC(0, &qword_100492190, UIAction_ptr);
    v5 = swift_allocObject(&unk_10044B430, 24, 7);
    swift_unknownObjectWeakInit(v5 + 16, v0);
    v10.value.super.super.isa = (Class)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_100100464, v5);
    v10.is_nil = 0;
    v6.super.super.isa = UIBarButtonItem.init(systemItem:primaryAction:menu:)(UIBarButtonSystemItemClose, v10, v11).super.super.isa;
    v7 = *(void **)(v0 + v1);
    *(UIBarButtonItem *)(v4 + v1) = v6;
    v3 = v6.super.super.isa;

    v2 = 0;
  }
  v8 = v2;
  return v3;
}

void sub_1000FCDB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *Strong;
  void *v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = Strong;
    objc_msgSend(Strong, "dismissViewControllerAnimated:completion:", 1, 0);

  }
}

void sub_1000FCE18()
{
  char *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t KeyPath;
  uint64_t v9;
  id v10;

  v1 = objc_msgSend(v0, "presentingViewController");
  if (v1
    && (v2 = v1, v3 = objc_msgSend(v1, "traitCollection"), v2, v3)
    || (v4 = objc_msgSend(v0, "presentationController")) != 0
    && (v5 = v4, v3 = objc_msgSend(v4, "traitCollection"), v5, v3))
  {
    v6 = *(_QWORD *)&v0[qword_100491F10];
    swift_retain(v6);
    v7 = objc_msgSend(v3, "horizontalSizeClass");
    KeyPath = swift_getKeyPath(&unk_10038C6D0);
    v9 = swift_getKeyPath(&unk_10038C6F8);
    v10 = v7;
    static Published.subscript.setter(&v10, v6, KeyPath, v9);

  }
}

void sub_1000FCF1C(void *a1)
{
  id v1;

  v1 = a1;
  sub_1000FCE18();

}

void sub_1000FCF50()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + qword_100491F10));

}

id sub_1000FCF7C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CloudLibraryViewController(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_1000FCFB0(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + qword_100491F10));

}

uint64_t sub_1000FCFE8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10038C6D0);
  v2 = swift_getKeyPath(&unk_10038C6F8);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

void sub_1000FD058()
{
  _swift_stdlib_reportUnimplementedInitializer("MusicCore.CloudLibraryViewController", 36, "init(rootView:)", 15, 0);
  __break(1u);
}

void sub_1000FD084()
{
  _swift_stdlib_reportUnimplementedInitializer("MusicCore.CloudLibraryViewController", 36, "init(coder:rootView:)", 21, 0);
  __break(1u);
}

_QWORD *sub_1000FD0B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _BYTE v21[24];

  v14 = (_QWORD *)((char *)v9 + OBJC_IVAR____TtCV9MusicCore22EnableCloudLibraryView5Model_dismiss);
  *v14 = 0;
  v14[1] = 0;
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  v9[6] = a5;
  v9[7] = a6;
  swift_beginAccess((char *)v9 + OBJC_IVAR____TtCV9MusicCore22EnableCloudLibraryView5Model__horizontalSizeClass, v21, 33, 0);
  v20 = a7;
  sub_10003A434(a5, a6);
  type metadata accessor for UIUserInterfaceSizeClass(0);
  Published.init(initialValue:)(&v20, v15);
  swift_endAccess(v21);
  sub_10003A5C8(a5, a6);
  v16 = (_QWORD *)((char *)v9 + OBJC_IVAR____TtCV9MusicCore22EnableCloudLibraryView5Model_dismiss);
  v17 = *(_QWORD *)((char *)v9 + OBJC_IVAR____TtCV9MusicCore22EnableCloudLibraryView5Model_dismiss);
  v18 = *(_QWORD *)((char *)v9 + OBJC_IVAR____TtCV9MusicCore22EnableCloudLibraryView5Model_dismiss + 8);
  *v16 = a8;
  v16[1] = a9;
  sub_10003A5C8(v17, v18);
  return v9;
}

uint64_t sub_1000FD18C()
{
  uint64_t *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10003A5C8(v0[6], v0[7]);
  v1 = (char *)v0 + OBJC_IVAR____TtCV9MusicCore22EnableCloudLibraryView5Model__horizontalSizeClass;
  v2 = sub_100005574(&qword_100492180);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_10003A5C8(*(uint64_t *)((char *)v0 + OBJC_IVAR____TtCV9MusicCore22EnableCloudLibraryView5Model_dismiss), *(uint64_t *)((char *)v0 + OBJC_IVAR____TtCV9MusicCore22EnableCloudLibraryView5Model_dismiss + 8));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1000FD20C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for EnableCloudLibraryView.Model(0);
  result = ObservableObject<>.objectWillChange.getter(v2);
  *a1 = result;
  return result;
}

uint64_t sub_1000FD248@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v45;
  uint64_t v46;

  v45 = a3;
  v5 = sub_100005574(&qword_1004920A8);
  __chkstk_darwin(v5);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005574(&qword_1004920B0);
  __chkstk_darwin(v8);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005574(&qword_1004920B8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v7 = static Axis.Set.vertical.getter(v12);
  v15 = sub_100005574(&qword_1004920C0);
  v16 = sub_1000FD510(a1, a2, (uint64_t)&v7[*(int *)(v15 + 44)]);
  v17 = static Edge.Set.horizontal.getter(v16);
  KeyPath = swift_getKeyPath(&unk_10038C6D0);
  v19 = swift_getKeyPath(&unk_10038C6F8);
  v20 = swift_retain(a2);
  static Published.subscript.getter(&v46, v20, KeyPath, v19);
  swift_release(a2);
  swift_release(KeyPath);
  swift_release(v19);
  v21 = 32.0;
  if (v46 != 2)
    v21 = 24.0;
  v22 = EdgeInsets.init(_all:)(v21);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  sub_100014A7C((uint64_t)v7, (uint64_t)v10, &qword_1004920A8);
  v29 = &v10[*(int *)(v8 + 36)];
  *v29 = v17;
  *((double *)v29 + 1) = v22;
  *((_QWORD *)v29 + 2) = v24;
  *((_QWORD *)v29 + 3) = v26;
  *((_QWORD *)v29 + 4) = v28;
  v29[40] = 0;
  v30 = sub_100008758((uint64_t)v7, &qword_1004920A8);
  v31 = static Edge.Set.bottom.getter(v30);
  v32 = swift_getKeyPath(&unk_10038C6D0);
  v33 = swift_getKeyPath(&unk_10038C6F8);
  v34 = swift_retain(a2);
  static Published.subscript.getter(&v46, v34, v32, v33);
  swift_release(a2);
  swift_release(v32);
  swift_release(v33);
  v35 = 36.0;
  if (v46 != 2)
    v35 = 8.0;
  v36 = EdgeInsets.init(_all:)(v35);
  v38 = v37;
  v40 = v39;
  v42 = v41;
  sub_100014A7C((uint64_t)v10, (uint64_t)v14, &qword_1004920B0);
  v43 = &v14[*(int *)(v11 + 36)];
  *v43 = v31;
  *((double *)v43 + 1) = v36;
  *((_QWORD *)v43 + 2) = v38;
  *((_QWORD *)v43 + 3) = v40;
  *((_QWORD *)v43 + 4) = v42;
  v43[40] = 0;
  sub_100008758((uint64_t)v10, &qword_1004920B0);
  return sub_1000149A8((uint64_t)v14, v45, &qword_1004920B8);
}

uint64_t sub_1000FD510@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  v6 = sub_100005574(&qword_1004920C8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v32 - v10;
  v12 = sub_100005574(&qword_1004920D0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v32 - v16;
  v18 = sub_100005574(&qword_1004920D8);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v32 - v23;
  *(_QWORD *)v24 = static HorizontalAlignment.center.getter(v22);
  *((_QWORD *)v24 + 1) = 0;
  v24[16] = 1;
  v25 = sub_100005574(&qword_1004920E0);
  v26 = sub_1000FD7BC(a1, a2, (uint64_t)&v24[*(int *)(v25 + 44)]);
  *(_QWORD *)v17 = static HorizontalAlignment.center.getter(v26);
  *((_QWORD *)v17 + 1) = 0;
  v17[16] = 1;
  v27 = sub_100005574(&qword_1004920E8);
  v28 = sub_1000FDC74(a1, a2, (uint64_t)&v17[*(int *)(v27 + 44)]);
  *(_QWORD *)v11 = static HorizontalAlignment.center.getter(v28);
  *((_QWORD *)v11 + 1) = 0;
  v11[16] = 1;
  v29 = sub_100005574(&qword_1004920F0);
  sub_1000FE23C(a1, (uint64_t)a2, &v11[*(int *)(v29 + 44)]);
  sub_100014A7C((uint64_t)v24, (uint64_t)v21, &qword_1004920D8);
  sub_100014A7C((uint64_t)v17, (uint64_t)v15, &qword_1004920D0);
  sub_100014A7C((uint64_t)v11, (uint64_t)v9, &qword_1004920C8);
  sub_100014A7C((uint64_t)v21, a3, &qword_1004920D8);
  v30 = sub_100005574(&qword_1004920F8);
  sub_100014A7C((uint64_t)v15, a3 + *(int *)(v30 + 48), &qword_1004920D0);
  sub_100014A7C((uint64_t)v9, a3 + *(int *)(v30 + 64), &qword_1004920C8);
  sub_100008758((uint64_t)v11, &qword_1004920C8);
  sub_100008758((uint64_t)v17, &qword_1004920D0);
  sub_100008758((uint64_t)v24, &qword_1004920D8);
  sub_100008758((uint64_t)v9, &qword_1004920C8);
  sub_100008758((uint64_t)v15, &qword_1004920D0);
  return sub_100008758((uint64_t)v21, &qword_1004920D8);
}

uint64_t sub_1000FD7BC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[2];
  unsigned __int8 v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 v73;

  v53 = type metadata accessor for BorderedProminentButtonStyle(0);
  v54 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005574(&qword_100492100);
  v52 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005574(&qword_100492108);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v56 = (char *)&v41 - v17;
  v51 = static HorizontalAlignment.center.getter(v16);
  sub_1000FE7C4(a2, (uint64_t)v63);
  v58 = v63[0];
  v44 = v63[1];
  v57 = v64;
  v59 = v65;
  v61 = v66;
  v50 = v67;
  v47 = v68;
  v46 = v69;
  v45 = v70;
  v60 = v71;
  v48 = v72;
  v49 = v73;
  v62 = Image.init(_:bundle:)(0xD000000000000011, 0x80000001003B2550, 0);
  v18 = swift_allocObject(&unk_10044B408, 32, 7);
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = a2;
  swift_retain(a2);
  v19 = sub_100005574(&qword_100492130);
  v20 = sub_100100628(&qword_100492138, &qword_100492130, (void (*)(void))sub_100100354);
  v21 = Button.init(action:label:)(sub_100100714, v18, sub_1000FEB4C, 0, v19, v20);
  BorderedProminentButtonStyle.init()(v21);
  v22 = sub_10002FFB8(&qword_100492150, &qword_100492100, (uint64_t)&protocol conformance descriptor for Button<A>);
  v23 = sub_100006924(&qword_100492158, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedProminentButtonStyle);
  v55 = v15;
  v24 = v53;
  View.buttonStyle<A>(_:)(v7, v8, v53, v22, v23);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v7, v24);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v10, v8);
  v43 = v12;
  v25 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v26 = v56;
  v42 = v11;
  v25(v56, v15, v11);
  v54 = *(_QWORD *)(v12 + 16);
  ((void (*)(char *, char *, uint64_t))v54)(v15, v26, v11);
  *(_QWORD *)a3 = v51;
  *(_QWORD *)(a3 + 8) = 0x4020000000000000;
  *(_BYTE *)(a3 + 16) = 0;
  v27 = v58;
  v28 = v59;
  v29 = v44;
  *(_QWORD *)(a3 + 24) = v58;
  *(_QWORD *)(a3 + 32) = v29;
  LOBYTE(v26) = v57;
  *(_BYTE *)(a3 + 40) = v57;
  v31 = v60;
  v30 = v61;
  *(_QWORD *)(a3 + 48) = v28;
  *(_QWORD *)(a3 + 56) = v30;
  *(_BYTE *)(a3 + 64) = v50;
  v32 = v47;
  v33 = v46;
  *(_QWORD *)(a3 + 72) = v47;
  *(_QWORD *)(a3 + 80) = v33;
  LOBYTE(v19) = v45;
  *(_BYTE *)(a3 + 88) = v45;
  v34 = v48;
  *(_QWORD *)(a3 + 96) = v31;
  *(_QWORD *)(a3 + 104) = v34;
  *(_BYTE *)(a3 + 112) = v49;
  *(_QWORD *)(a3 + 120) = 0;
  *(_BYTE *)(a3 + 128) = 1;
  *(_QWORD *)(a3 + 136) = v62;
  *(_QWORD *)(a3 + 144) = 0;
  *(_BYTE *)(a3 + 152) = 1;
  v35 = a3 + *(int *)(sub_100005574(&qword_100492178) + 96);
  v36 = v42;
  ((void (*)(uint64_t, char *, uint64_t))v54)(v35, v55, v42);
  sub_10003B4C0(v27, v29, (char)v26);
  swift_bridgeObjectRetain();
  v37 = v61;
  swift_retain(v61);
  sub_10003B4C0(v32, v33, v19);
  v38 = *(void (**)(char *, uint64_t))(v43 + 8);
  swift_bridgeObjectRetain();
  swift_retain(v34);
  v39 = v62;
  swift_retain(v62);
  v38(v56, v36);
  v38(v55, v36);
  swift_release(v39);
  sub_10003B4D0(v58, v29, v57);
  swift_release(v37);
  swift_bridgeObjectRelease();
  sub_10003B4D0(v32, v33, v19);
  swift_release(v34);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000FDC74@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t KeyPath;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  _QWORD v78[2];
  unsigned __int8 v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;

  v58 = type metadata accessor for BorderedProminentButtonStyle(0);
  v59 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005574(&qword_100492100);
  v57 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_100005574(&qword_100492108);
  v71 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_100005574(&qword_100492110);
  v13 = __chkstk_darwin(v70);
  v75 = (uint64_t)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v56 - v16;
  v18 = __chkstk_darwin(v15);
  v73 = (uint64_t)&v56 - v19;
  v69 = static HorizontalAlignment.center.getter(v18);
  sub_1000FE7C4(a2, (uint64_t)v78);
  v61 = v78[0];
  v60 = v78[1];
  v76 = v79;
  v62 = v80;
  v77 = v81;
  v68 = v82;
  v65 = v83;
  v64 = v84;
  v63 = v85;
  v74 = v86;
  v66 = v87;
  v67 = v88;
  v20 = swift_allocObject(&unk_10044B3E0, 32, 7);
  *(_QWORD *)(v20 + 16) = a1;
  *(_QWORD *)(v20 + 24) = a2;
  swift_retain(a2);
  v21 = sub_100005574(&qword_100492130);
  v22 = sub_100100628(&qword_100492138, &qword_100492130, (void (*)(void))sub_100100354);
  v23 = Button.init(action:label:)(sub_100100714, v20, sub_1000FEB4C, 0, v21, v22);
  BorderedProminentButtonStyle.init()(v23);
  v24 = sub_10002FFB8(&qword_100492150, &qword_100492100, (uint64_t)&protocol conformance descriptor for Button<A>);
  v25 = sub_100006924(&qword_100492158, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedProminentButtonStyle);
  v26 = v58;
  View.buttonStyle<A>(_:)(v7, v8, v58, v24, v25);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v7, v26);
  v27 = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v10, v8);
  v28 = static Edge.Set.top.getter(v27);
  KeyPath = swift_getKeyPath(&unk_10038C6D0);
  v30 = swift_getKeyPath(&unk_10038C6F8);
  v31 = swift_retain(a2);
  static Published.subscript.getter(v78, v31, KeyPath, v30);
  swift_release(a2);
  swift_release(KeyPath);
  swift_release(v30);
  v32 = 16.0;
  if (v78[0] == 2)
    v32 = 24.0;
  v33 = EdgeInsets.init(_all:)(v32);
  v35 = v34;
  v37 = v36;
  v39 = v38;
  v40 = v71;
  v41 = v72;
  (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v17, v12, v72);
  v42 = &v17[*(int *)(v70 + 36)];
  *v42 = v28;
  *((double *)v42 + 1) = v33;
  *((_QWORD *)v42 + 2) = v35;
  *((_QWORD *)v42 + 3) = v37;
  *((_QWORD *)v42 + 4) = v39;
  v42[40] = 0;
  (*(void (**)(char *, uint64_t))(v40 + 8))(v12, v41);
  v43 = v73;
  sub_1000149A8((uint64_t)v17, v73, &qword_100492110);
  v44 = v43;
  v45 = v75;
  sub_100014A7C(v44, v75, &qword_100492110);
  *(_QWORD *)a3 = v69;
  *(_QWORD *)(a3 + 8) = 0x4020000000000000;
  *(_BYTE *)(a3 + 16) = 0;
  v46 = v61;
  v47 = v60;
  *(_QWORD *)(a3 + 24) = v61;
  *(_QWORD *)(a3 + 32) = v47;
  *(_BYTE *)(a3 + 40) = v76;
  v48 = v77;
  *(_QWORD *)(a3 + 48) = v62;
  *(_QWORD *)(a3 + 56) = v48;
  *(_BYTE *)(a3 + 64) = v68;
  v49 = v65;
  v50 = v64;
  *(_QWORD *)(a3 + 72) = v65;
  *(_QWORD *)(a3 + 80) = v50;
  v51 = v63;
  *(_BYTE *)(a3 + 88) = v63;
  v52 = v66;
  *(_QWORD *)(a3 + 96) = v74;
  *(_QWORD *)(a3 + 104) = v52;
  *(_BYTE *)(a3 + 112) = v67;
  *(_QWORD *)(a3 + 120) = 0;
  *(_BYTE *)(a3 + 128) = 1;
  v53 = sub_100005574(&qword_100492170);
  sub_100014A7C(v45, a3 + *(int *)(v53 + 64), &qword_100492110);
  LOBYTE(v45) = v76;
  sub_10003B4C0(v46, v47, v76);
  swift_bridgeObjectRetain();
  v54 = v77;
  swift_retain(v77);
  sub_10003B4C0(v49, v50, v51);
  swift_bridgeObjectRetain();
  swift_retain(v52);
  sub_100008758(v73, &qword_100492110);
  sub_100008758(v75, &qword_100492110);
  sub_10003B4D0(v46, v47, v45);
  swift_release(v54);
  swift_bridgeObjectRelease();
  sub_10003B4D0(v49, v50, v51);
  swift_release(v52);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000FE23C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t KeyPath;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  void (*v63)(char *, uint64_t);
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char v79[16];
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v78 = a3;
  v5 = type metadata accessor for BorderedProminentButtonStyle(0);
  v6 = *(_QWORD *)(v5 - 8);
  v69 = v5;
  v70 = v6;
  __chkstk_darwin(v5);
  v8 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005574(&qword_100492100);
  v10 = *(_QWORD *)(v9 - 8);
  v67 = v9;
  v68 = v10;
  __chkstk_darwin(v9);
  v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005574(&qword_100492108);
  v75 = *(_QWORD *)(v13 - 8);
  v76 = v13;
  __chkstk_darwin(v13);
  v66 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_100005574(&qword_100492110);
  v15 = __chkstk_darwin(v74);
  v77 = (uint64_t)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v65 - v18;
  __chkstk_darwin(v17);
  v73 = (uint64_t)&v65 - v20;
  v21 = sub_100005574(&qword_100492118);
  v72 = *(_QWORD *)(v21 - 8);
  v22 = __chkstk_darwin(v21);
  v71 = (char *)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v65 - v25;
  v27 = static Axis.Set.vertical.getter(v24);
  v80 = a1;
  v81 = a2;
  v28 = sub_100005574(&qword_100492120);
  v29 = sub_10002FFB8(&qword_100492128, &qword_100492120, (uint64_t)&protocol conformance descriptor for VStack<A>);
  ScrollView.init(_:showsIndicators:content:)(v27, 1, sub_100100320, v79, v28, v29);
  v30 = swift_allocObject(&unk_10044B3B8, 32, 7);
  *(_QWORD *)(v30 + 16) = a1;
  *(_QWORD *)(v30 + 24) = a2;
  swift_retain(a2);
  v31 = sub_100005574(&qword_100492130);
  v32 = sub_100100628(&qword_100492138, &qword_100492130, (void (*)(void))sub_100100354);
  v33 = Button.init(action:label:)(sub_10010034C, v30, sub_1000FEB4C, 0, v31, v32);
  BorderedProminentButtonStyle.init()(v33);
  v34 = sub_10002FFB8(&qword_100492150, &qword_100492100, (uint64_t)&protocol conformance descriptor for Button<A>);
  v35 = sub_100006924(&qword_100492158, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedProminentButtonStyle);
  v36 = v66;
  v37 = v67;
  v38 = v69;
  View.buttonStyle<A>(_:)(v8, v67, v69, v34, v35);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v8, v38);
  v39 = (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v12, v37);
  v40 = static Edge.Set.top.getter(v39);
  KeyPath = swift_getKeyPath(&unk_10038C6D0);
  v42 = swift_getKeyPath(&unk_10038C6F8);
  v43 = swift_retain(a2);
  static Published.subscript.getter(&v82, v43, KeyPath, v42);
  swift_release(a2);
  swift_release(KeyPath);
  swift_release(v42);
  v44 = 16.0;
  if (v82 == 2)
    v44 = 24.0;
  v45 = EdgeInsets.init(_all:)(v44);
  v47 = v46;
  v49 = v48;
  v51 = v50;
  v53 = v75;
  v52 = v76;
  (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v19, v36, v76);
  v54 = &v19[*(int *)(v74 + 36)];
  *v54 = v40;
  *((double *)v54 + 1) = v45;
  *((_QWORD *)v54 + 2) = v47;
  *((_QWORD *)v54 + 3) = v49;
  *((_QWORD *)v54 + 4) = v51;
  v54[40] = 0;
  (*(void (**)(char *, uint64_t))(v53 + 8))(v36, v52);
  v55 = v73;
  sub_1000149A8((uint64_t)v19, v73, &qword_100492110);
  v56 = v71;
  v57 = v72;
  v58 = *(void (**)(char *, char *, uint64_t))(v72 + 16);
  v58(v71, v26, v21);
  v59 = v77;
  sub_100014A7C(v55, v77, &qword_100492110);
  v60 = v78;
  v58(v78, v56, v21);
  v61 = sub_100005574((uint64_t *)&unk_100492160);
  v62 = &v60[*(int *)(v61 + 48)];
  *(_QWORD *)v62 = 0;
  v62[8] = 1;
  sub_100014A7C(v59, (uint64_t)&v60[*(int *)(v61 + 64)], &qword_100492110);
  sub_100008758(v55, &qword_100492110);
  v63 = *(void (**)(char *, uint64_t))(v57 + 8);
  v63(v26, v21);
  sub_100008758(v59, &qword_100492110);
  return ((uint64_t (*)(char *, uint64_t))v63)(v56, v21);
}

__n128 sub_1000FE72C@<Q0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  char v9;
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  __n128 v16;
  char v17;
  __int128 v18;
  char v19;
  __int128 v20;
  char v21;

  v5 = static HorizontalAlignment.center.getter(a1);
  sub_1000FE7C4(a2, (uint64_t)&v14);
  v6 = v15;
  v7 = v17;
  v8 = v19;
  v9 = v21;
  result = v16;
  v11 = v20;
  v12 = v14;
  v13 = v18;
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = 0x4020000000000000;
  *(_BYTE *)(a3 + 16) = 0;
  *(_OWORD *)(a3 + 24) = v12;
  *(_BYTE *)(a3 + 40) = v6;
  *(__n128 *)(a3 + 48) = result;
  *(_BYTE *)(a3 + 64) = v7;
  *(_OWORD *)(a3 + 72) = v13;
  *(_BYTE *)(a3 + 88) = v8;
  *(_OWORD *)(a3 + 96) = v11;
  *(_BYTE *)(a3 + 112) = v9;
  return result;
}

uint64_t sub_1000FE7C4@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  unint64_t v50;
  uint64_t KeyPath;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v3 = a1[3];
  v57 = a1[2];
  v58 = v3;
  v50 = sub_10000D478();
  swift_bridgeObjectRetain();
  v4 = Text.init<A>(_:)(&v57, &type metadata for String, v50);
  v6 = v5;
  v8 = v7;
  v10 = v9 & 1;
  v11 = static Font.largeTitle.getter();
  v12 = Text.font(_:)(v11, v4, v6, v10, v8);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  swift_release(v11);
  v19 = v16 & 1;
  sub_10003B4D0(v4, v6, v10);
  v20 = swift_bridgeObjectRelease();
  v21 = static Font.Weight.bold.getter(v20);
  v22 = Text.fontWeight(_:)(*(_QWORD *)&v21, 0, v12, v14, v19, v18);
  v54 = v23;
  v55 = v22;
  v56 = v24;
  v53 = v25 & 1;
  sub_10003B4D0(v12, v14, v19);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath(&unk_10038C718);
  v26 = a1[5];
  v57 = a1[4];
  v58 = v26;
  swift_bridgeObjectRetain();
  v27 = Text.init<A>(_:)(&v57, &type metadata for String, v50);
  v29 = v28;
  v31 = v30;
  v33 = v32 & 1;
  v34 = static Font.title3.getter();
  v35 = Text.font(_:)(v34, v27, v29, v33, v31);
  v37 = v36;
  LOBYTE(v10) = v38;
  v40 = v39;
  swift_release(v34);
  sub_10003B4D0(v27, v29, v33);
  v41 = swift_bridgeObjectRelease();
  LODWORD(v57) = static HierarchicalShapeStyle.primary.getter(v41);
  v42 = Text.foregroundStyle<A>(_:)(&v57, v35, v37, v10 & 1, v40, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v44 = v43;
  v46 = v45;
  LOBYTE(v33) = v47 & 1;
  sub_10003B4D0(v35, v37, v10 & 1);
  swift_bridgeObjectRelease();
  v48 = swift_getKeyPath(&unk_10038C718);
  LOBYTE(v57) = v53;
  *(_QWORD *)a2 = v55;
  *(_QWORD *)(a2 + 8) = v54;
  *(_BYTE *)(a2 + 16) = v53;
  *(_QWORD *)(a2 + 24) = v56;
  *(_QWORD *)(a2 + 32) = KeyPath;
  *(_BYTE *)(a2 + 40) = 1;
  *(_QWORD *)(a2 + 48) = v42;
  *(_QWORD *)(a2 + 56) = v44;
  *(_BYTE *)(a2 + 64) = v33;
  *(_QWORD *)(a2 + 72) = v46;
  *(_QWORD *)(a2 + 80) = v48;
  *(_BYTE *)(a2 + 88) = 1;
  sub_10003B4C0(v55, v54, v53);
  swift_bridgeObjectRetain();
  swift_retain(KeyPath);
  sub_10003B4C0(v42, v44, v33);
  swift_bridgeObjectRetain();
  swift_retain(v48);
  sub_10003B4D0(v42, v44, v33);
  swift_release(v48);
  swift_bridgeObjectRelease();
  sub_10003B4D0(v55, v54, v57);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000FEA94(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;

  if (qword_10048C7E8 != -1)
    swift_once(&qword_10048C7E8, sub_1000F900C);
  v3 = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 56);
  sub_10003A434(v3, v4);
  CloudLibrary.StatusObserver.enableCloudLibrary(completion:)(v3, v4);
  result = sub_10003A5C8(v3, v4);
  v6 = a2 + OBJC_IVAR____TtCV9MusicCore22EnableCloudLibraryView5Model_dismiss;
  v7 = *(void (**)(uint64_t))(a2 + OBJC_IVAR____TtCV9MusicCore22EnableCloudLibraryView5Model_dismiss);
  if (v7)
  {
    v8 = *(_QWORD *)(v6 + 8);
    v9 = swift_retain(v8);
    v7(v9);
    return sub_10003A5C8((uint64_t)v7, v8);
  }
  return result;
}

double sub_1000FEB4C@<D0>(_OWORD *a1@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  double result;
  __int128 v28;
  _OWORD v29[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;

  if (qword_10048C7E0 != -1)
    swift_once(&qword_10048C7E0, sub_1000F8E40);
  v29[0] = static CloudLibrary.EnablementContext.action;
  v2 = sub_10000D478();
  swift_bridgeObjectRetain();
  v3 = Text.init<A>(_:)(v29, &type metadata for String, v2);
  v5 = v4;
  v7 = v6 & 1;
  v8 = Text.bold()();
  v10 = v9;
  v12 = v11;
  v14 = v13 & 1;
  sub_10003B4D0(v3, v5, v7);
  v15 = swift_bridgeObjectRelease();
  LOBYTE(v3) = static Edge.Set.vertical.getter(v15);
  v16 = EdgeInsets.init(_all:)(8.0);
  v40 = v8;
  v41 = v10;
  v42 = v14;
  v43 = v12;
  v44 = v3;
  v45 = v16;
  v46 = v17;
  v47 = v18;
  v48 = v19;
  v49 = 0;
  v20 = static Alignment.center.getter();
  sub_1000FECFC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v29, 0.0, 1, 0.0, 1, v20, v21);
  sub_10003B4D0(v8, v10, v14);
  swift_bridgeObjectRelease();
  v22 = v37;
  a1[8] = v36;
  a1[9] = v22;
  v23 = v39;
  a1[10] = v38;
  a1[11] = v23;
  v24 = v33;
  a1[4] = v32;
  a1[5] = v24;
  v25 = v35;
  a1[6] = v34;
  a1[7] = v25;
  v26 = v29[1];
  *a1 = v29[0];
  a1[1] = v26;
  result = *(double *)&v30;
  v28 = v31;
  a1[2] = v30;
  a1[3] = v28;
  return result;
}

uint64_t sub_1000FECFC@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  _OWORD *v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unsigned int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _OWORD v45[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v43 = a5;
    v44 = a7;
    v42 = a3;
    v41 = a1;
    v40 = v20;
    v32 = static os_log_type_t.fault.getter();
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v40;
    v19 = a10;
    a1 = v41;
    a3 = v42;
    v18 = a12;
    a5 = v43;
    a7 = v44;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v45, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = v15[3];
  a9[2] = v15[2];
  a9[3] = v34;
  *(_OWORD *)((char *)a9 + 57) = *(_OWORD *)((char *)v15 + 57);
  v35 = v15[1];
  *a9 = *v15;
  a9[1] = v35;
  v36 = v45[5];
  a9[9] = v45[4];
  a9[10] = v36;
  a9[11] = v45[6];
  v37 = v45[1];
  a9[5] = v45[0];
  a9[6] = v37;
  v38 = v45[3];
  a9[7] = v45[2];
  a9[8] = v38;
  return sub_1001003B8((uint64_t)v15);
}

uint64_t sub_1000FEEA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000FD248(*(_QWORD *)v1, *(_QWORD **)(v1 + 8), a1);
}

uint64_t sub_1000FEEB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for Logger(0, a2);
  sub_1000086DC(v2, qword_100491CB0);
  sub_1000086B4(v2, (uint64_t)qword_100491CB0);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001003ACFD0, 0x62694C64756F6C43, 0xEC00000079726172);
}

uint64_t sub_1000FEF2C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10038C6D0);
  v5 = swift_getKeyPath(&unk_10038C6F8);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_1000FEFA8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10038C6D0);
  v5 = swift_getKeyPath(&unk_10038C6F8);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t _s9MusicCore12CloudLibraryO6StatusO21__derived_enum_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  if (a1 >> 30)
  {
    if (a1 >> 30 == 1)
    {
      if ((a2 & 0xC0000000) == 0x40000000)
        return (((a1 & 1) == 0) ^ a2) & (*((float *)&a1 + 1) == *((float *)&a2 + 1));
      return 0;
    }
    return ((uint64_t (*)(void))((char *)&loc_1000FF094 + 4 * byte_10038C22E[a1 - 0x80000000]))();
  }
  else
  {
    if ((a2 & 0xC0000000) != 0)
      return 0;
    return a1 == a2;
  }
}

uint64_t sub_1000FF0CC(uint64_t a1, uint64_t a2)
{
  if (a2 != 2147483650)
    JUMPOUT(0x1000FF06CLL);
  return 1;
}

uint64_t sub_1000FF0E4(uint64_t a1, uint64_t a2)
{
  if (a2 != 2147483651)
    JUMPOUT(0x1000FF06CLL);
  return 1;
}

uint64_t sub_1000FF0FC(uint64_t a1, uint64_t a2)
{
  if (a2 != 2147483652)
    JUMPOUT(0x1000FF06CLL);
  return 1;
}

uint64_t _s9MusicCore12CloudLibraryO11FailureTypeO8rawValueAESgSi_tcfC_0(unint64_t a1)
{
  if (a1 > 0xFFFFFFFFFFFFFFF9)
    return ~(_DWORD)a1;
  else
    return 6;
}

uint64_t sub_1000FF12C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000FF150(uint64_t a1)
{
  uint64_t v1;

  return sub_1000FA3F8(a1, v1);
}

uint64_t sub_1000FF158(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000FF168(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000FF170(unsigned __int8 *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t sub_1000FF194(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakCopyInit(a2, a1);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  return a2;
}

uint64_t sub_1000FF1CC(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakTakeInit(a2, a1);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  return a2;
}

uint64_t sub_1000FF204(uint64_t a1)
{
  swift_unknownObjectWeakDestroy(a1);
  return a1;
}

id sub_1000FF228(id result)
{
  if ((unint64_t)result >= 2)
    return result;
  return result;
}

void sub_1000FF238(id a1)
{
  if ((unint64_t)a1 >= 2)

}

void _s9MusicCore12CloudLibraryO07presentcD7Enabler7context18presentationSource5style10completionyAC17EnablementContextO_AA012PresentationI0VAC0N5StyleOySbcSgtFZ_0(char a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSString v17;
  NSString v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  NSString v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  NSString v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  char *v45;
  id v46;
  void **aBlock;
  uint64_t v48;
  void (*v49)(uint64_t, void *);
  void *v50;
  void *v51;
  uint64_t v52;

  CloudLibrary.EnablementContext.title.getter(a1);
  v10 = v9;
  v12 = v11;
  CloudLibrary.EnablementContext.message.getter(a1);
  v14 = v13;
  v16 = v15;
  if (a3)
  {
    v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v12);
    v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v16);
    v19 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", v17, v18, 1);

    if (qword_10048CE50 != -1)
      swift_once(&qword_10048CE50, sub_1001ECBE8);
    v20 = qword_1004A2C90;
    v21 = swift_allocObject(&unk_10044B520, 32, 7);
    *(_QWORD *)(v21 + 16) = a4;
    *(_QWORD *)(v21 + 24) = a5;
    sub_10003A434(a4, a5);
    swift_bridgeObjectRetain();
    v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v20);
    v51 = sub_1001004C0;
    v52 = v21;
    aBlock = _NSConcreteStackBlock;
    v48 = 1107296256;
    v49 = sub_100093320;
    v50 = &unk_10044B538;
    v23 = _Block_copy(&aBlock);
    swift_release(v52);
    v24 = (void *)objc_opt_self(UIAlertAction);
    v25 = objc_msgSend(v24, "actionWithTitle:style:handler:", v22, 1, v23);
    _Block_release(v23);

    objc_msgSend(v19, "addAction:", v25);
    if (qword_10048C7E0 != -1)
      swift_once(&qword_10048C7E0, sub_1000F8E40);
    v26 = unk_1004A2130;
    v27 = swift_allocObject(&unk_10044B570, 32, 7);
    *(_QWORD *)(v27 + 16) = a4;
    *(_QWORD *)(v27 + 24) = a5;
    sub_10003A434(a4, a5);
    swift_bridgeObjectRetain();
    v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v26);
    v51 = sub_1001004F0;
    v52 = v27;
    aBlock = _NSConcreteStackBlock;
    v48 = 1107296256;
    v49 = sub_100093320;
    v50 = &unk_10044B588;
    v29 = _Block_copy(&aBlock);
    v30 = objc_msgSend(v24, "actionWithTitle:style:handler:", v28, 0, v29, swift_release(v52).n128_f64[0]);
    _Block_release(v29);

    objc_msgSend(v19, "addAction:", v30);
    if ((unint64_t)a3 >= 2)
    {
      v31 = a3;
      objc_msgSend(v19, "setPreferredStyle:", 0);
      v32 = v31;
      objc_msgSend(v32, "bounds");
      v34 = v33;
      v36 = v35;
      v38 = v37;
      v40 = v39;
      v41 = objc_msgSend(v19, "popoverPresentationController");
      if (v41)
      {
        v42 = v41;
        v43 = v32;
        objc_msgSend(v42, "setSourceView:", v43);
        objc_msgSend(v42, "setSourceRect:", v34, v36, v38, v40);

        sub_1000FF238(a3);
        sub_1000FF238(a3);

      }
      else
      {
        sub_1000FF238(a3);
        sub_1000FF238(a3);
      }
    }
    PresentationSource.present(_:wantsAutomaticModalPresentationStyle:permittedArrowDirections:animated:completion:)(v19, 1, (id)0xF, (void **)((unint64_t)a3 > 1), 0, 0);

  }
  else
  {
    v44 = objc_allocWithZone((Class)type metadata accessor for CloudLibraryViewController(0));
    sub_10003A434(a4, a5);
    v45 = sub_1000FC870(v10, v12, v14, v16, a4, a5);
    v46 = objc_msgSend(objc_allocWithZone((Class)UINavigationController), "initWithRootViewController:", v45);
    objc_msgSend(v46, "setModalPresentationStyle:", 2);
    objc_msgSend(v46, "setModalPresentationCapturesStatusBarAppearance:", 1);
    PresentationSource.present(_:wantsAutomaticModalPresentationStyle:permittedArrowDirections:animated:completion:)(v46, 1, (id)0xF, (void **)1, 0, 0);

  }
}

void _s9MusicCore12CloudLibraryO07presentcD15EnablerIfNeeded7context18presentationSource5style05cloudD17EnabledCompletionyAC17EnablementContextO_AA012PresentationK0VAC0R5StyleOySbcSgtFZ_0(char a1, uint64_t a2, void *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  char v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  void *v17;
  uint64_t v21;
  uint64_t v22;
  void *v23;

  if (qword_10048C658 != -1)
    swift_once(&qword_10048C658, sub_1000B3BEC);
  v7 = static ApplicationCapabilities.Controller.shared;
  KeyPath = swift_getKeyPath(&unk_10038C748);
  v9 = swift_getKeyPath(&unk_10038C770);
  static Published.subscript.getter(&v21, v7, KeyPath, v9);
  swift_release(KeyPath);
  swift_release(v9);
  v10 = BYTE2(v21);
  v11 = v23;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if ((v10 & 1) != 0)
  {
    if (!a4)
      return;
    v12 = 1;
LABEL_9:
    a4(v12);
    return;
  }
  v13 = static ApplicationCapabilities.Controller.shared;
  v14 = swift_getKeyPath(&unk_10038C748);
  v15 = swift_getKeyPath(&unk_10038C770);
  static Published.subscript.getter(&v21, v13, v14, v15);
  swift_release(v14);
  swift_release(v15);
  v16 = v22;
  v17 = v23;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if ((v16 & 0x100) == 0)
  {
    if (!a4)
      return;
    v12 = 0;
    goto LABEL_9;
  }
  _s9MusicCore12CloudLibraryO07presentcD7Enabler7context18presentationSource5style10completionyAC17EnablementContextO_AA012PresentationI0VAC0N5StyleOySbcSgtFZ_0(a1, a2, a3, (uint64_t)a4, a5);
}

double sub_1000FF8FC(uint64_t a1)
{
  uint64_t v1;

  return sub_1000FC76C(a1, *(unsigned __int8 *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), (uint64_t)&unk_10044B4F8, (uint64_t)sub_1001004B0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))_s9MusicCore12CloudLibraryO07presentcD15EnablerIfNeeded7context18presentationSource5style05cloudD17EnabledCompletionyAC17EnablementContextO_AA012PresentationK0VAC0R5StyleOySbcSgtFZ_0);
}

unint64_t sub_1000FF934()
{
  unint64_t result;

  result = qword_100491D00;
  if (!qword_100491D00)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CloudLibrary.FailureType, &type metadata for CloudLibrary.FailureType);
    atomic_store(result, (unint64_t *)&qword_100491D00);
  }
  return result;
}

unint64_t sub_1000FF97C()
{
  unint64_t result;

  result = qword_100491D08;
  if (!qword_100491D08)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CloudLibrary.EnablementContext, &type metadata for CloudLibrary.EnablementContext);
    atomic_store(result, (unint64_t *)&qword_100491D08);
  }
  return result;
}

ValueMetadata *type metadata accessor for CloudLibrary()
{
  return &type metadata for CloudLibrary;
}

uint64_t getEnumTagSinglePayload for CloudLibrary.UpdateContext(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[8])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CloudLibrary.UpdateContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CloudLibrary.UpdateContext()
{
  return &type metadata for CloudLibrary.UpdateContext;
}

uint64_t storeEnumTagSinglePayload for CloudLibrary.FailureType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1000FFAC8 + 4 * byte_10038C238[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1000FFAFC + 4 * byte_10038C233[v4]))();
}

uint64_t sub_1000FFAFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000FFB04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000FFB0CLL);
  return result;
}

uint64_t sub_1000FFB18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000FFB20);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1000FFB24(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000FFB2C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CloudLibrary.FailureType()
{
  return &type metadata for CloudLibrary.FailureType;
}

uint64_t getEnumTagSinglePayload for CloudLibrary.Status(uint64_t a1, unsigned int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 > 0x1FFFFFFD && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 536870910);
  if ((((*(_DWORD *)a1 >> 1) & 0x1FFFFFFC | (*(_DWORD *)a1 >> 30)) ^ 0x1FFFFFFFu) >= 0x1FFFFFFD)
    v3 = -1;
  else
    v3 = ((*(_DWORD *)a1 >> 1) & 0x1FFFFFFC | (*(_DWORD *)a1 >> 30)) ^ 0x1FFFFFFF;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for CloudLibrary.Status(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x1FFFFFFD)
  {
    *(_QWORD *)result = a2 - 536870910;
    if (a3 >= 0x1FFFFFFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x1FFFFFFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = 8 * ((-a2 >> 2) & 0x7FFFFFF) - (a2 << 30);
  }
  return result;
}

uint64_t sub_1000FFC08(_QWORD *a1)
{
  if ((int)*a1 >= 0)
    return *a1 >> 30;
  else
    return ((*a1 >> 29) & 0xFFFFFFF8 | *a1 & 7) + 2;
}

_QWORD *sub_1000FFC28(_QWORD *result)
{
  *result &= 0xFFFFFFFF3FFFFFFFLL;
  return result;
}

unint64_t *sub_1000FFC38(unint64_t *result, unsigned int a2)
{
  if (a2 < 2)
    *result = *result & 0xFFFFFFFF00000007 | (a2 << 30);
  else
    *result = ((a2 - 2) | ((unint64_t)(a2 - 2) << 29)) & 0xFFFFFFFF00000007 | 0x80000000;
  return result;
}

ValueMetadata *type metadata accessor for CloudLibrary.Status()
{
  return &type metadata for CloudLibrary.Status;
}

uint64_t storeEnumTagSinglePayload for CloudLibrary.EnablementContext(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1000FFCC8 + 4 * byte_10038C242[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1000FFCFC + 4 * byte_10038C23D[v4]))();
}

uint64_t sub_1000FFCFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000FFD04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000FFD0CLL);
  return result;
}

uint64_t sub_1000FFD18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000FFD20);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1000FFD24(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000FFD2C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CloudLibrary.EnablementContext()
{
  return &type metadata for CloudLibrary.EnablementContext;
}

uint64_t sub_1000FFD48()
{
  return type metadata accessor for CloudLibrary.StatusObserver(0);
}

uint64_t type metadata accessor for CloudLibrary.StatusObserver(uint64_t a1)
{
  return sub_1000091AC(a1, (uint64_t *)&unk_100491D38, (uint64_t)&nominal type descriptor for CloudLibrary.StatusObserver);
}

void sub_1000FFD64(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[9];

  v4[0] = &unk_10038C510;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[5] = &unk_10038C528;
  v4[6] = &unk_10038C528;
  sub_1000FFE10();
  if (v3 <= 0x3F)
  {
    v4[7] = *(_QWORD *)(v2 - 8) + 64;
    v4[8] = &unk_10038C540;
    swift_updateClassMetadata2(a1, 256, 9, v4, a1 + 80);
  }
}

void sub_1000FFE10()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_100491D48)
  {
    v0 = type metadata accessor for Published(0, &type metadata for CloudLibrary.Status);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_100491D48);
  }
}

_QWORD *_s13InsertCommandV8LocationOwCP(_QWORD *a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v4 = v3;
  *a1 = v3;
  return a1;
}

void _s13InsertCommandV8LocationOwxx(void **a1)
{
  void *v1;

  v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF)

}

void **_s13InsertCommandV8LocationOwca(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
    {
      *a1 = v4;
      v6 = v4;
      return a1;
    }
LABEL_7:
    *a1 = v4;
    return a1;
  }
  if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    v4 = *a2;
    goto LABEL_7;
  }
  *a1 = v4;
  v5 = v4;

  return a1;
}

void **_s13InsertCommandV8LocationOwta(void **a1, unint64_t *a2)
{
  void *v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
    goto LABEL_6;
  if (v4 < 0xFFFFFFFF)
  {

LABEL_6:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

uint64_t getEnumTagSinglePayload for CloudLibrary.PresentationStyle(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CloudLibrary.PresentationStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CloudLibrary.PresentationStyle()
{
  return &type metadata for CloudLibrary.PresentationStyle;
}

uint64_t type metadata accessor for CloudLibraryViewController(uint64_t a1)
{
  return sub_1000091AC(a1, (uint64_t *)&unk_100491F30, (uint64_t)&nominal type descriptor for CloudLibraryViewController);
}

uint64_t sub_100100068(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[1] = &unk_10038C528;
  return swift_initClassMetadata2(a1, 0, 2, v2, a1 + qword_100491F20);
}

uint64_t sub_1001000BC()
{
  return type metadata accessor for CloudLibraryViewController(0);
}

uint64_t sub_1001000C4()
{
  return type metadata accessor for EnableCloudLibraryView.Model(0);
}

uint64_t type metadata accessor for EnableCloudLibraryView.Model(uint64_t a1)
{
  return sub_1000091AC(a1, (uint64_t *)&unk_100491FB0, (uint64_t)&nominal type descriptor for EnableCloudLibraryView.Model);
}

void sub_1001000E0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_10038C5D8;
  v4[1] = &unk_10038C5D8;
  v4[2] = &unk_10038C5F0;
  sub_100100164(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    v4[4] = &unk_10038C5F0;
    swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
  }
}

void sub_100100164(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100491FC0)
  {
    type metadata accessor for UIUserInterfaceSizeClass(255);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100491FC0);
  }
}

ValueMetadata *type metadata accessor for EnableCloudLibraryView()
{
  return &type metadata for EnableCloudLibraryView;
}

uint64_t initializeWithCopy for CloudLibrary.StatusObserver.InternalObserver(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakCopyInit(a1, a2);
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t assignWithCopy for CloudLibrary.StatusObserver.InternalObserver(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakCopyAssign();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t initializeWithTake for CloudLibrary.StatusObserver.InternalObserver(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakTakeInit(a1, a2);
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t assignWithTake for CloudLibrary.StatusObserver.InternalObserver(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakTakeAssign();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t getEnumTagSinglePayload for CloudLibrary.StatusObserver.InternalObserver(uint64_t a1, int a2)
{
  int v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  if ((*(_QWORD *)(a1 + 8) & 0xF000000000000007) != 0)
    v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  else
    v2 = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CloudLibrary.StatusObserver.InternalObserver(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      *(_QWORD *)(result + 8) = 1;
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CloudLibrary.StatusObserver.InternalObserver()
{
  return &type metadata for CloudLibrary.StatusObserver.InternalObserver;
}

uint64_t sub_100100308(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1003DB9BC, 1);
}

double sub_100100320@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_1000FE72C(*(_QWORD *)(v1 + 16), (_QWORD *)*(_QWORD *)(v1 + 24), a1).n128_u64[0];
  return result;
}

uint64_t sub_100100328()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10010034C()
{
  uint64_t v0;

  return sub_1000FEA94(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_100100354()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100492140;
  if (!qword_100492140)
  {
    v1 = sub_100005600(&qword_100492148);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100492140);
  }
  return result;
}

uint64_t sub_1001003B8(uint64_t a1)
{
  sub_10003B4C0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1001003F4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10010041C(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

uint64_t sub_100100440()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100100464(uint64_t a1)
{
  uint64_t v1;

  sub_1000FCDB8(a1, v1);
}

void sub_10010046C()
{
  uint64_t v0;

  sub_1000FBA14(v0);
}

uint64_t sub_100100474(float a1)
{
  uint64_t v1;

  return sub_1000FBAE4(v1, a1);
}

uint64_t sub_10010047C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 28, 7);
}

void sub_1001004A0()
{
  uint64_t v0;

  sub_1000FBD24(*(_QWORD *)(v0 + 16), *(float *)(v0 + 24));
}

uint64_t sub_1001004C0()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  uint64_t result;

  v1 = *(uint64_t (**)(_QWORD))(v0 + 16);
  if (v1)
    return v1(0);
  return result;
}

void sub_1001004F0(uint64_t a1)
{
  uint64_t v1;

  sub_1000FC4D8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_1001004F8()
{
  uint64_t v0;

  sub_1000FCB0C(v0);
}

uint64_t sub_100100500()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_errorRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10010052C()
{
  uint64_t v0;

  return sub_1000FA874(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100100534()
{
  uint64_t v0;

  return sub_1000F94E0(v0);
}

double sub_10010053C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000F9D08(a1, v1);
}

uint64_t sub_100100544(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000F9948(a1, a2, v2);
}

uint64_t sub_10010054C()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100100580()
{
  uint64_t v0;

  sub_1000F9B74(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100100590()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100005574(&qword_1004921D0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001005F4()
{
  return sub_100100628(&qword_100492200, &qword_1004920B8, (void (*)(void))sub_100100690);
}

uint64_t sub_100100628(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100005600(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100100690()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100492208;
  if (!qword_100492208)
  {
    v1 = sub_100005600(&qword_1004920B0);
    sub_10002FFB8((unint64_t *)&unk_100492210, &qword_1004920A8, (uint64_t)&protocol conformance descriptor for ViewThatFits<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100492208);
  }
  return result;
}

uint64_t sub_10010076C(uint64_t a1, char a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *(_BYTE *)(v3 + 256) = a2;
  v4 = sub_100005574((uint64_t *)&unk_100493720);
  *(_QWORD *)(v3 + 152) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005574(&qword_10048E088);
  *(_QWORD *)(v3 + 160) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0, v6);
  *(_QWORD *)(v3 + 168) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 176) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 184) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 192) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 200) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 208) = swift_task_alloc(v9);
  v10 = v2[5];
  *(_OWORD *)(v3 + 80) = v2[4];
  *(_OWORD *)(v3 + 96) = v10;
  *(_OWORD *)(v3 + 112) = v2[6];
  v11 = v2[1];
  *(_OWORD *)(v3 + 16) = *v2;
  *(_OWORD *)(v3 + 32) = v11;
  v12 = v2[3];
  *(_OWORD *)(v3 + 48) = v2[2];
  *(_OWORD *)(v3 + 64) = v12;
  return swift_task_switch(sub_10010085C, 0, 0);
}

uint64_t sub_10010085C()
{
  uint64_t v0;
  char v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  double v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  _QWORD *v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  BOOL v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __n128 v84;
  NSObject *log;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  os_log_type_t typea[8];
  os_log_type_t type;
  unsigned __int8 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  _OWORD v100[3];
  char v101;
  uint64_t (*v102)(_QWORD);
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;

  if ((*(_BYTE *)(v0 + 256) & 1) != 0)
    goto LABEL_3;
  v1 = *(_BYTE *)(v0 + 64);
  v2 = *(uint64_t (**)(_QWORD))(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_OWORD *)(v0 + 32);
  v100[0] = *(_OWORD *)(v0 + 16);
  v100[1] = v5;
  v100[2] = *(_OWORD *)(v0 + 48);
  v101 = v1;
  v102 = v2;
  v103 = v3;
  v104 = v4;
  v6 = *(_OWORD *)(v0 + 112);
  v105 = *(_OWORD *)(v0 + 96);
  v106 = v6;
  v7 = v2(v100);
  if (v8 == 1)
  {
LABEL_3:
    if (qword_10048C578 != -1)
      swift_once(&qword_10048C578, sub_10002E5A0);
    v9 = *(_QWORD *)(v0 + 208);
    v10 = *(_QWORD *)(v0 + 168);
    v11 = *(_QWORD *)(v0 + 176);
    v12 = sub_1000086B4(v10, (uint64_t)qword_10048E058);
    *(_QWORD *)(v0 + 216) = v12;
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    *(_QWORD *)(v0 + 224) = v13;
    v13(v9, v12, v10);
    v14 = *(_QWORD *)(v0 + 24);
    v15 = *(_QWORD *)(v0 + 40);
    v16 = *(_QWORD *)(v0 + 56);
    v91 = *(_BYTE *)(v0 + 64);
    v17 = *(_QWORD *)(v0 + 80);
    v18 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 120);
    swift_retain(v14);
    swift_retain(v15);
    swift_retain(v16);
    swift_retain(v17);
    v93 = v18;
    swift_retain(v18);
    v96 = v19;
    v20 = swift_retain(v19);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    v23 = os_log_type_enabled(v21, v22);
    v24 = *(_QWORD *)(v0 + 208);
    v25 = *(_QWORD *)(v0 + 168);
    v26 = *(_QWORD *)(v0 + 176);
    if (v23)
    {
      *(_QWORD *)typea = *(_QWORD *)(v0 + 208);
      v27 = swift_slowAlloc(12, -1);
      v87 = v25;
      v28 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v100[0] = v28;
      *(_DWORD *)v27 = 136446210;
      v29 = (char *)ActionType.rawValue.getter(v91);
      *(_QWORD *)(v27 + 4) = sub_100019400(v29, v30, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      swift_release(v14);
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v93);
      swift_release(v96);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s: performing…", (uint8_t *)v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      (*(void (**)(os_log_type_t *, uint64_t))(v26 + 8))(*(os_log_type_t **)typea, v87);
    }
    else
    {
      swift_release(v14);
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v93);
      swift_release(v96);

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    }
    v31 = *(_QWORD *)(v0 + 160);
    sub_1000087DC(0, (unint64_t *)&qword_10048E090, NSTimer_ptr);
    v32 = *(double *)(v0 + 88);
    v33 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v34 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v31, 1, 1, v34);
    v35 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v33, NSRunLoopCommonModes, v31, v32);

    sub_100008758(v31, &qword_10048E088);
    *(_QWORD *)(v0 + 128) = v35;
    v36 = type metadata accessor for NSTimer.TimerPublisher(0);
    v37 = sub_100006924((unint64_t *)&qword_10048E098, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
    v38 = ConnectablePublisher.autoconnect()(v36, v37);
    swift_release(v35);
    *(_QWORD *)(v0 + 136) = v38;
    v39 = *(_QWORD *)(v0 + 16);
    v40 = *(_QWORD *)(v0 + 56);
    v41 = *(_BYTE *)(v0 + 64);
    v43 = *(_QWORD *)(v0 + 72);
    v42 = *(_QWORD *)(v0 + 80);
    v44 = *(_QWORD *)(v0 + 88);
    v45 = *(_QWORD *)(v0 + 96);
    v46 = *(_QWORD *)(v0 + 120);
    v47 = swift_allocObject(&unk_10044C010, 128, 7);
    *(_QWORD *)(v47 + 16) = v39;
    v48 = *(_OWORD *)(v0 + 24);
    *(_OWORD *)(v47 + 24) = v48;
    v94 = *(_OWORD *)(v0 + 40);
    *(_OWORD *)(v47 + 40) = v94;
    *(_QWORD *)(v47 + 56) = v40;
    *(_BYTE *)(v47 + 64) = v41;
    *(_QWORD *)(v47 + 72) = v43;
    *(_QWORD *)(v47 + 80) = v42;
    *(_QWORD *)(v47 + 88) = v44;
    *(_QWORD *)(v47 + 96) = v45;
    v97 = *(_OWORD *)(v0 + 104);
    *(_OWORD *)(v47 + 104) = v97;
    *(_QWORD *)(v47 + 120) = v46;
    swift_retain(v48);
    swift_retain(v94);
    swift_retain(v40);
    swift_retain(v42);
    swift_retain(v97);
    swift_retain(v46);
    v49 = sub_100005574(&qword_10048E0A0);
    v50 = sub_10002FFB8(&qword_10048E0A8, &qword_10048E0A0, (uint64_t)&protocol conformance descriptor for Publishers.Autoconnect<A>);
    *(_QWORD *)(v0 + 232) = Publisher<>.sink(receiveValue:)(sub_100125DEC, v47, v49, v50);
    swift_release(v47);
    swift_release(*(_QWORD *)(v0 + 136));
    v51 = *(int **)(v0 + 96);
    *(_QWORD *)&v97 = (char *)v51 + *v51;
    v52 = (_QWORD *)swift_task_alloc(v51[1]);
    *(_QWORD *)(v0 + 240) = v52;
    *v52 = v0;
    v52[1] = sub_1001010FC;
    return ((uint64_t (*)(void))v97)();
  }
  else
  {
    v54 = v8;
    v99 = v7;
    if (qword_10048C578 != -1)
      swift_once(&qword_10048C578, sub_10002E5A0);
    v55 = *(_QWORD *)(v0 + 176);
    v56 = *(_QWORD *)(v0 + 184);
    v57 = *(_QWORD *)(v0 + 168);
    v58 = sub_1000086B4(v57, (uint64_t)qword_10048E058);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v56, v58, v57);
    v59 = *(_QWORD *)(v0 + 24);
    v60 = *(_QWORD *)(v0 + 40);
    v61 = *(_QWORD *)(v0 + 56);
    v88 = *(_BYTE *)(v0 + 64);
    v62 = *(_QWORD *)(v0 + 80);
    v63 = *(_QWORD *)(v0 + 104);
    v64 = *(_QWORD *)(v0 + 120);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v62);
    swift_retain(v63);
    swift_retain(v64);
    v65 = v99;
    sub_10002ECD0(v99, v54);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v62);
    swift_retain(v63);
    swift_retain(v64);
    v66 = sub_10002ECD0(v99, v54);
    v67 = Logger.logObject.getter(v66);
    type = static os_log_type_t.error.getter(v67);
    v68 = os_log_type_enabled(v67, type);
    v98 = *(_QWORD *)(v0 + 184);
    v92 = *(_QWORD *)(v0 + 176);
    v95 = *(_QWORD *)(v0 + 168);
    if (v68)
    {
      log = v67;
      v69 = swift_slowAlloc(22, -1);
      v86 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v100[0] = v86;
      *(_DWORD *)v69 = 136446466;
      swift_release(v59);
      swift_release(v60);
      swift_release(v61);
      swift_release(v62);
      swift_release(v63);
      swift_release(v64);
      v70 = (char *)ActionType.rawValue.getter(v88);
      *(_QWORD *)(v69 + 4) = sub_100019400(v70, v71, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      swift_release(v59);
      swift_release(v60);
      swift_release(v61);
      swift_release(v62);
      swift_release(v63);
      swift_release(v64);
      *(_WORD *)(v69 + 12) = 2082;
      swift_bridgeObjectRetain();
      v72 = Optional<A>.description.getter(v99, v54);
      v74 = v73;
      sub_10001406C(v99, v54);
      v75 = (char *)v72;
      v65 = v99;
      *(_QWORD *)(v69 + 14) = sub_100019400(v75, v74, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      sub_10001406C(v99, v54);
      sub_10001406C(v99, v54);
      _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s: attempted to execute but was unsupported for reason: %{public}s", (uint8_t *)v69, 0x16u);
      swift_arrayDestroy(v86, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v86, -1, -1);
      swift_slowDealloc(v69, -1, -1);

    }
    else
    {
      swift_release_n(v59, 2);
      swift_release_n(v60, 2);
      swift_release_n(v61, 2);
      swift_release_n(v62, 2);
      swift_release_n(v63, 2);
      swift_release_n(v64, 2);
      sub_10001406C(v99, v54);
      sub_10001406C(v99, v54);

    }
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v98, v95);
    v76 = sub_10002ECE4();
    swift_allocError(&type metadata for ActionError, v76, 0, 0);
    *v77 = v65;
    v77[1] = v54;
    v79 = *(_QWORD *)(v0 + 200);
    v78 = *(_QWORD *)(v0 + 208);
    v81 = *(_QWORD *)(v0 + 184);
    v80 = *(_QWORD *)(v0 + 192);
    v83 = *(_QWORD *)(v0 + 152);
    v82 = *(_QWORD *)(v0 + 160);
    swift_willThrow(v84);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001010FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100125E0C;
  else
    v3 = sub_100101160;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100101160()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 224);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 168);
  AnyCancellable.cancel()();
  v1(v3, v2, v4);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 56);
  v41 = *(_BYTE *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 120);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  v43 = v10;
  v11 = swift_retain(v10);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(_QWORD *)(v0 + 200);
  v16 = *(_QWORD *)(v0 + 168);
  v45 = *(_QWORD *)(v0 + 176);
  if (v14)
  {
    v39 = *(_QWORD *)(v0 + 200);
    v17 = swift_slowAlloc(22, -1);
    v37 = swift_slowAlloc(64, -1);
    v47 = v37;
    *(_DWORD *)v17 = 136446466;
    v18 = (char *)ActionType.rawValue.getter(v41);
    *(_QWORD *)(v17 + 4) = sub_100019400(v18, v19, &v47);
    swift_bridgeObjectRelease();
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v43);
    *(_WORD *)(v17 + 12) = 2082;
    *(_QWORD *)(v17 + 14) = sub_100019400(0, (char *)0xE000000000000000, &v47);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: perform success%{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v16);
  }
  else
  {
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v43);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v15, v16);
  }
  v36 = *(_QWORD *)(v0 + 232);
  v38 = *(_QWORD *)(v0 + 208);
  v40 = *(_QWORD *)(v0 + 200);
  v42 = *(_QWORD *)(v0 + 192);
  v20 = *(_QWORD *)(v0 + 152);
  v44 = *(_QWORD *)(v0 + 184);
  v46 = *(_QWORD *)(v0 + 160);
  v21 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = *(_QWORD *)(v0 + 16);
  v23 = *(_QWORD *)(v0 + 56);
  v24 = *(_BYTE *)(v0 + 64);
  v25 = *(_QWORD *)(v0 + 72);
  v26 = *(_QWORD *)(v0 + 80);
  v27 = *(_QWORD *)(v0 + 88);
  v28 = *(_QWORD *)(v0 + 96);
  v29 = *(_QWORD *)(v0 + 120);
  v30 = swift_allocObject(&unk_10044C038, 144, 7);
  *(_QWORD *)(v30 + 16) = 0;
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = v22;
  v31 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v30 + 40) = v31;
  v34 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v30 + 56) = v34;
  *(_QWORD *)(v30 + 72) = v23;
  *(_BYTE *)(v30 + 80) = v24;
  *(_QWORD *)(v30 + 88) = v25;
  *(_QWORD *)(v30 + 96) = v26;
  *(_QWORD *)(v30 + 104) = v27;
  *(_QWORD *)(v30 + 112) = v28;
  v35 = *(_OWORD *)(v0 + 104);
  *(_OWORD *)(v30 + 120) = v35;
  *(_QWORD *)(v30 + 136) = v29;
  swift_retain(v31);
  swift_retain(v34);
  swift_retain(v23);
  swift_retain(v26);
  swift_retain(v35);
  swift_retain(v29);
  v32 = sub_10002DE80(v20, (uint64_t)&unk_1004924B8, v30);
  swift_release(v32);
  swift_release(v36);
  sub_100008758(v20, (uint64_t *)&unk_100493720);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100101510(uint64_t a1, char a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *(_BYTE *)(v3 + 256) = a2;
  v4 = sub_100005574((uint64_t *)&unk_100493720);
  *(_QWORD *)(v3 + 152) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005574(&qword_10048E088);
  *(_QWORD *)(v3 + 160) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0, v6);
  *(_QWORD *)(v3 + 168) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 176) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 184) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 192) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 200) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 208) = swift_task_alloc(v9);
  v10 = v2[5];
  *(_OWORD *)(v3 + 80) = v2[4];
  *(_OWORD *)(v3 + 96) = v10;
  *(_OWORD *)(v3 + 112) = v2[6];
  v11 = v2[1];
  *(_OWORD *)(v3 + 16) = *v2;
  *(_OWORD *)(v3 + 32) = v11;
  v12 = v2[3];
  *(_OWORD *)(v3 + 48) = v2[2];
  *(_OWORD *)(v3 + 64) = v12;
  return swift_task_switch(sub_100101600, 0, 0);
}

uint64_t sub_100101600()
{
  uint64_t v0;
  char v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  double v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  _QWORD *v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  BOOL v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __n128 v84;
  NSObject *log;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  os_log_type_t typea[8];
  os_log_type_t type;
  unsigned __int8 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  _OWORD v100[3];
  char v101;
  uint64_t (*v102)(_QWORD);
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;

  if ((*(_BYTE *)(v0 + 256) & 1) != 0)
    goto LABEL_3;
  v1 = *(_BYTE *)(v0 + 64);
  v2 = *(uint64_t (**)(_QWORD))(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_OWORD *)(v0 + 32);
  v100[0] = *(_OWORD *)(v0 + 16);
  v100[1] = v5;
  v100[2] = *(_OWORD *)(v0 + 48);
  v101 = v1;
  v102 = v2;
  v103 = v3;
  v104 = v4;
  v6 = *(_OWORD *)(v0 + 112);
  v105 = *(_OWORD *)(v0 + 96);
  v106 = v6;
  v7 = v2(v100);
  if (v8 == 1)
  {
LABEL_3:
    if (qword_10048C578 != -1)
      swift_once(&qword_10048C578, sub_10002E5A0);
    v9 = *(_QWORD *)(v0 + 208);
    v10 = *(_QWORD *)(v0 + 168);
    v11 = *(_QWORD *)(v0 + 176);
    v12 = sub_1000086B4(v10, (uint64_t)qword_10048E058);
    *(_QWORD *)(v0 + 216) = v12;
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    *(_QWORD *)(v0 + 224) = v13;
    v13(v9, v12, v10);
    v14 = *(_QWORD *)(v0 + 24);
    v15 = *(_QWORD *)(v0 + 40);
    v16 = *(_QWORD *)(v0 + 56);
    v91 = *(_BYTE *)(v0 + 64);
    v17 = *(_QWORD *)(v0 + 80);
    v18 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 120);
    swift_retain(v14);
    swift_retain(v15);
    swift_retain(v16);
    swift_retain(v17);
    v93 = v18;
    swift_retain(v18);
    v96 = v19;
    v20 = swift_retain(v19);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    v23 = os_log_type_enabled(v21, v22);
    v24 = *(_QWORD *)(v0 + 208);
    v25 = *(_QWORD *)(v0 + 168);
    v26 = *(_QWORD *)(v0 + 176);
    if (v23)
    {
      *(_QWORD *)typea = *(_QWORD *)(v0 + 208);
      v27 = swift_slowAlloc(12, -1);
      v87 = v25;
      v28 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v100[0] = v28;
      *(_DWORD *)v27 = 136446210;
      v29 = (char *)ActionType.rawValue.getter(v91);
      *(_QWORD *)(v27 + 4) = sub_100019400(v29, v30, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      swift_release(v14);
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v93);
      swift_release(v96);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s: performing…", (uint8_t *)v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      (*(void (**)(os_log_type_t *, uint64_t))(v26 + 8))(*(os_log_type_t **)typea, v87);
    }
    else
    {
      swift_release(v14);
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v93);
      swift_release(v96);

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    }
    v31 = *(_QWORD *)(v0 + 160);
    sub_1000087DC(0, (unint64_t *)&qword_10048E090, NSTimer_ptr);
    v32 = *(double *)(v0 + 88);
    v33 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v34 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v31, 1, 1, v34);
    v35 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v33, NSRunLoopCommonModes, v31, v32);

    sub_100008758(v31, &qword_10048E088);
    *(_QWORD *)(v0 + 128) = v35;
    v36 = type metadata accessor for NSTimer.TimerPublisher(0);
    v37 = sub_100006924((unint64_t *)&qword_10048E098, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
    v38 = ConnectablePublisher.autoconnect()(v36, v37);
    swift_release(v35);
    *(_QWORD *)(v0 + 136) = v38;
    v39 = *(_QWORD *)(v0 + 16);
    v40 = *(_QWORD *)(v0 + 56);
    v41 = *(_BYTE *)(v0 + 64);
    v43 = *(_QWORD *)(v0 + 72);
    v42 = *(_QWORD *)(v0 + 80);
    v44 = *(_QWORD *)(v0 + 88);
    v45 = *(_QWORD *)(v0 + 96);
    v46 = *(_QWORD *)(v0 + 120);
    v47 = swift_allocObject(&unk_10044C088, 128, 7);
    *(_QWORD *)(v47 + 16) = v39;
    v48 = *(_OWORD *)(v0 + 24);
    *(_OWORD *)(v47 + 24) = v48;
    v94 = *(_OWORD *)(v0 + 40);
    *(_OWORD *)(v47 + 40) = v94;
    *(_QWORD *)(v47 + 56) = v40;
    *(_BYTE *)(v47 + 64) = v41;
    *(_QWORD *)(v47 + 72) = v43;
    *(_QWORD *)(v47 + 80) = v42;
    *(_QWORD *)(v47 + 88) = v44;
    *(_QWORD *)(v47 + 96) = v45;
    v97 = *(_OWORD *)(v0 + 104);
    *(_OWORD *)(v47 + 104) = v97;
    *(_QWORD *)(v47 + 120) = v46;
    swift_retain(v48);
    swift_retain(v94);
    swift_retain(v40);
    swift_retain(v42);
    swift_retain(v97);
    swift_retain(v46);
    v49 = sub_100005574(&qword_10048E0A0);
    v50 = sub_10002FFB8(&qword_10048E0A8, &qword_10048E0A0, (uint64_t)&protocol conformance descriptor for Publishers.Autoconnect<A>);
    *(_QWORD *)(v0 + 232) = Publisher<>.sink(receiveValue:)(sub_100125DEC, v47, v49, v50);
    swift_release(v47);
    swift_release(*(_QWORD *)(v0 + 136));
    v51 = *(int **)(v0 + 96);
    *(_QWORD *)&v97 = (char *)v51 + *v51;
    v52 = (_QWORD *)swift_task_alloc(v51[1]);
    *(_QWORD *)(v0 + 240) = v52;
    *v52 = v0;
    v52[1] = sub_100101EA0;
    return ((uint64_t (*)(void))v97)();
  }
  else
  {
    v54 = v8;
    v99 = v7;
    if (qword_10048C578 != -1)
      swift_once(&qword_10048C578, sub_10002E5A0);
    v55 = *(_QWORD *)(v0 + 176);
    v56 = *(_QWORD *)(v0 + 184);
    v57 = *(_QWORD *)(v0 + 168);
    v58 = sub_1000086B4(v57, (uint64_t)qword_10048E058);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v56, v58, v57);
    v59 = *(_QWORD *)(v0 + 24);
    v60 = *(_QWORD *)(v0 + 40);
    v61 = *(_QWORD *)(v0 + 56);
    v88 = *(_BYTE *)(v0 + 64);
    v62 = *(_QWORD *)(v0 + 80);
    v63 = *(_QWORD *)(v0 + 104);
    v64 = *(_QWORD *)(v0 + 120);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v62);
    swift_retain(v63);
    swift_retain(v64);
    v65 = v99;
    sub_10002ECD0(v99, v54);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v62);
    swift_retain(v63);
    swift_retain(v64);
    v66 = sub_10002ECD0(v99, v54);
    v67 = Logger.logObject.getter(v66);
    type = static os_log_type_t.error.getter(v67);
    v68 = os_log_type_enabled(v67, type);
    v98 = *(_QWORD *)(v0 + 184);
    v92 = *(_QWORD *)(v0 + 176);
    v95 = *(_QWORD *)(v0 + 168);
    if (v68)
    {
      log = v67;
      v69 = swift_slowAlloc(22, -1);
      v86 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v100[0] = v86;
      *(_DWORD *)v69 = 136446466;
      swift_release(v59);
      swift_release(v60);
      swift_release(v61);
      swift_release(v62);
      swift_release(v63);
      swift_release(v64);
      v70 = (char *)ActionType.rawValue.getter(v88);
      *(_QWORD *)(v69 + 4) = sub_100019400(v70, v71, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      swift_release(v59);
      swift_release(v60);
      swift_release(v61);
      swift_release(v62);
      swift_release(v63);
      swift_release(v64);
      *(_WORD *)(v69 + 12) = 2082;
      swift_bridgeObjectRetain();
      v72 = Optional<A>.description.getter(v99, v54);
      v74 = v73;
      sub_10001406C(v99, v54);
      v75 = (char *)v72;
      v65 = v99;
      *(_QWORD *)(v69 + 14) = sub_100019400(v75, v74, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      sub_10001406C(v99, v54);
      sub_10001406C(v99, v54);
      _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s: attempted to execute but was unsupported for reason: %{public}s", (uint8_t *)v69, 0x16u);
      swift_arrayDestroy(v86, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v86, -1, -1);
      swift_slowDealloc(v69, -1, -1);

    }
    else
    {
      swift_release_n(v59, 2);
      swift_release_n(v60, 2);
      swift_release_n(v61, 2);
      swift_release_n(v62, 2);
      swift_release_n(v63, 2);
      swift_release_n(v64, 2);
      sub_10001406C(v99, v54);
      sub_10001406C(v99, v54);

    }
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v98, v95);
    v76 = sub_10002ECE4();
    swift_allocError(&type metadata for ActionError, v76, 0, 0);
    *v77 = v65;
    v77[1] = v54;
    v79 = *(_QWORD *)(v0 + 200);
    v78 = *(_QWORD *)(v0 + 208);
    v81 = *(_QWORD *)(v0 + 184);
    v80 = *(_QWORD *)(v0 + 192);
    v83 = *(_QWORD *)(v0 + 152);
    v82 = *(_QWORD *)(v0 + 160);
    swift_willThrow(v84);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100101EA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100125E0C;
  else
    v3 = sub_100101F04;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100101F04()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 224);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 168);
  AnyCancellable.cancel()();
  v1(v3, v2, v4);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 56);
  v41 = *(_BYTE *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 120);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  v43 = v10;
  v11 = swift_retain(v10);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(_QWORD *)(v0 + 200);
  v16 = *(_QWORD *)(v0 + 168);
  v45 = *(_QWORD *)(v0 + 176);
  if (v14)
  {
    v39 = *(_QWORD *)(v0 + 200);
    v17 = swift_slowAlloc(22, -1);
    v37 = swift_slowAlloc(64, -1);
    v47 = v37;
    *(_DWORD *)v17 = 136446466;
    v18 = (char *)ActionType.rawValue.getter(v41);
    *(_QWORD *)(v17 + 4) = sub_100019400(v18, v19, &v47);
    swift_bridgeObjectRelease();
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v43);
    *(_WORD *)(v17 + 12) = 2082;
    *(_QWORD *)(v17 + 14) = sub_100019400(0, (char *)0xE000000000000000, &v47);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: perform success%{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v16);
  }
  else
  {
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v43);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v15, v16);
  }
  v36 = *(_QWORD *)(v0 + 232);
  v38 = *(_QWORD *)(v0 + 208);
  v40 = *(_QWORD *)(v0 + 200);
  v42 = *(_QWORD *)(v0 + 192);
  v20 = *(_QWORD *)(v0 + 152);
  v44 = *(_QWORD *)(v0 + 184);
  v46 = *(_QWORD *)(v0 + 160);
  v21 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = *(_QWORD *)(v0 + 16);
  v23 = *(_QWORD *)(v0 + 56);
  v24 = *(_BYTE *)(v0 + 64);
  v25 = *(_QWORD *)(v0 + 72);
  v26 = *(_QWORD *)(v0 + 80);
  v27 = *(_QWORD *)(v0 + 88);
  v28 = *(_QWORD *)(v0 + 96);
  v29 = *(_QWORD *)(v0 + 120);
  v30 = swift_allocObject(&unk_10044C0B0, 144, 7);
  *(_QWORD *)(v30 + 16) = 0;
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = v22;
  v31 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v30 + 40) = v31;
  v34 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v30 + 56) = v34;
  *(_QWORD *)(v30 + 72) = v23;
  *(_BYTE *)(v30 + 80) = v24;
  *(_QWORD *)(v30 + 88) = v25;
  *(_QWORD *)(v30 + 96) = v26;
  *(_QWORD *)(v30 + 104) = v27;
  *(_QWORD *)(v30 + 112) = v28;
  v35 = *(_OWORD *)(v0 + 104);
  *(_OWORD *)(v30 + 120) = v35;
  *(_QWORD *)(v30 + 136) = v29;
  swift_retain(v31);
  swift_retain(v34);
  swift_retain(v23);
  swift_retain(v26);
  swift_retain(v35);
  swift_retain(v29);
  v32 = sub_10002DE80(v20, (uint64_t)&unk_1004924D8, v30);
  swift_release(v32);
  swift_release(v36);
  sub_100008758(v20, (uint64_t *)&unk_100493720);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001022B4(uint64_t a1, char a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *(_BYTE *)(v3 + 256) = a2;
  v4 = sub_100005574((uint64_t *)&unk_100493720);
  *(_QWORD *)(v3 + 152) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005574(&qword_10048E088);
  *(_QWORD *)(v3 + 160) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0, v6);
  *(_QWORD *)(v3 + 168) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 176) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 184) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 192) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 200) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 208) = swift_task_alloc(v9);
  v10 = v2[5];
  *(_OWORD *)(v3 + 80) = v2[4];
  *(_OWORD *)(v3 + 96) = v10;
  *(_OWORD *)(v3 + 112) = v2[6];
  v11 = v2[1];
  *(_OWORD *)(v3 + 16) = *v2;
  *(_OWORD *)(v3 + 32) = v11;
  v12 = v2[3];
  *(_OWORD *)(v3 + 48) = v2[2];
  *(_OWORD *)(v3 + 64) = v12;
  return swift_task_switch(sub_1001023A4, 0, 0);
}

uint64_t sub_1001023A4()
{
  uint64_t v0;
  char v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  double v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  _QWORD *v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  BOOL v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __n128 v84;
  NSObject *log;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  os_log_type_t typea[8];
  os_log_type_t type;
  unsigned __int8 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  _OWORD v100[3];
  char v101;
  uint64_t (*v102)(_QWORD);
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;

  if ((*(_BYTE *)(v0 + 256) & 1) != 0)
    goto LABEL_3;
  v1 = *(_BYTE *)(v0 + 64);
  v2 = *(uint64_t (**)(_QWORD))(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_OWORD *)(v0 + 32);
  v100[0] = *(_OWORD *)(v0 + 16);
  v100[1] = v5;
  v100[2] = *(_OWORD *)(v0 + 48);
  v101 = v1;
  v102 = v2;
  v103 = v3;
  v104 = v4;
  v6 = *(_OWORD *)(v0 + 112);
  v105 = *(_OWORD *)(v0 + 96);
  v106 = v6;
  v7 = v2(v100);
  if (v8 == 1)
  {
LABEL_3:
    if (qword_10048C578 != -1)
      swift_once(&qword_10048C578, sub_10002E5A0);
    v9 = *(_QWORD *)(v0 + 208);
    v10 = *(_QWORD *)(v0 + 168);
    v11 = *(_QWORD *)(v0 + 176);
    v12 = sub_1000086B4(v10, (uint64_t)qword_10048E058);
    *(_QWORD *)(v0 + 216) = v12;
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    *(_QWORD *)(v0 + 224) = v13;
    v13(v9, v12, v10);
    v14 = *(_QWORD *)(v0 + 24);
    v15 = *(_QWORD *)(v0 + 40);
    v16 = *(_QWORD *)(v0 + 56);
    v91 = *(_BYTE *)(v0 + 64);
    v17 = *(_QWORD *)(v0 + 80);
    v18 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 120);
    swift_retain(v14);
    swift_retain(v15);
    swift_retain(v16);
    swift_retain(v17);
    v93 = v18;
    swift_retain(v18);
    v96 = v19;
    v20 = swift_retain(v19);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    v23 = os_log_type_enabled(v21, v22);
    v24 = *(_QWORD *)(v0 + 208);
    v25 = *(_QWORD *)(v0 + 168);
    v26 = *(_QWORD *)(v0 + 176);
    if (v23)
    {
      *(_QWORD *)typea = *(_QWORD *)(v0 + 208);
      v27 = swift_slowAlloc(12, -1);
      v87 = v25;
      v28 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v100[0] = v28;
      *(_DWORD *)v27 = 136446210;
      v29 = (char *)ActionType.rawValue.getter(v91);
      *(_QWORD *)(v27 + 4) = sub_100019400(v29, v30, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      swift_release(v14);
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v93);
      swift_release(v96);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s: performing…", (uint8_t *)v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      (*(void (**)(os_log_type_t *, uint64_t))(v26 + 8))(*(os_log_type_t **)typea, v87);
    }
    else
    {
      swift_release(v14);
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v93);
      swift_release(v96);

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    }
    v31 = *(_QWORD *)(v0 + 160);
    sub_1000087DC(0, (unint64_t *)&qword_10048E090, NSTimer_ptr);
    v32 = *(double *)(v0 + 88);
    v33 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v34 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v31, 1, 1, v34);
    v35 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v33, NSRunLoopCommonModes, v31, v32);

    sub_100008758(v31, &qword_10048E088);
    *(_QWORD *)(v0 + 128) = v35;
    v36 = type metadata accessor for NSTimer.TimerPublisher(0);
    v37 = sub_100006924((unint64_t *)&qword_10048E098, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
    v38 = ConnectablePublisher.autoconnect()(v36, v37);
    swift_release(v35);
    *(_QWORD *)(v0 + 136) = v38;
    v39 = *(_QWORD *)(v0 + 16);
    v40 = *(_QWORD *)(v0 + 56);
    v41 = *(_BYTE *)(v0 + 64);
    v43 = *(_QWORD *)(v0 + 72);
    v42 = *(_QWORD *)(v0 + 80);
    v44 = *(_QWORD *)(v0 + 88);
    v45 = *(_QWORD *)(v0 + 96);
    v46 = *(_QWORD *)(v0 + 120);
    v47 = swift_allocObject(&unk_10044C268, 128, 7);
    *(_QWORD *)(v47 + 16) = v39;
    v48 = *(_OWORD *)(v0 + 24);
    *(_OWORD *)(v47 + 24) = v48;
    v94 = *(_OWORD *)(v0 + 40);
    *(_OWORD *)(v47 + 40) = v94;
    *(_QWORD *)(v47 + 56) = v40;
    *(_BYTE *)(v47 + 64) = v41;
    *(_QWORD *)(v47 + 72) = v43;
    *(_QWORD *)(v47 + 80) = v42;
    *(_QWORD *)(v47 + 88) = v44;
    *(_QWORD *)(v47 + 96) = v45;
    v97 = *(_OWORD *)(v0 + 104);
    *(_OWORD *)(v47 + 104) = v97;
    *(_QWORD *)(v47 + 120) = v46;
    swift_retain(v48);
    swift_retain(v94);
    swift_retain(v40);
    swift_retain(v42);
    swift_retain(v97);
    swift_retain(v46);
    v49 = sub_100005574(&qword_10048E0A0);
    v50 = sub_10002FFB8(&qword_10048E0A8, &qword_10048E0A0, (uint64_t)&protocol conformance descriptor for Publishers.Autoconnect<A>);
    *(_QWORD *)(v0 + 232) = Publisher<>.sink(receiveValue:)(sub_100125DEC, v47, v49, v50);
    swift_release(v47);
    swift_release(*(_QWORD *)(v0 + 136));
    v51 = *(int **)(v0 + 96);
    *(_QWORD *)&v97 = (char *)v51 + *v51;
    v52 = (_QWORD *)swift_task_alloc(v51[1]);
    *(_QWORD *)(v0 + 240) = v52;
    *v52 = v0;
    v52[1] = sub_100102C44;
    return ((uint64_t (*)(void))v97)();
  }
  else
  {
    v54 = v8;
    v99 = v7;
    if (qword_10048C578 != -1)
      swift_once(&qword_10048C578, sub_10002E5A0);
    v55 = *(_QWORD *)(v0 + 176);
    v56 = *(_QWORD *)(v0 + 184);
    v57 = *(_QWORD *)(v0 + 168);
    v58 = sub_1000086B4(v57, (uint64_t)qword_10048E058);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v56, v58, v57);
    v59 = *(_QWORD *)(v0 + 24);
    v60 = *(_QWORD *)(v0 + 40);
    v61 = *(_QWORD *)(v0 + 56);
    v88 = *(_BYTE *)(v0 + 64);
    v62 = *(_QWORD *)(v0 + 80);
    v63 = *(_QWORD *)(v0 + 104);
    v64 = *(_QWORD *)(v0 + 120);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v62);
    swift_retain(v63);
    swift_retain(v64);
    v65 = v99;
    sub_10002ECD0(v99, v54);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v62);
    swift_retain(v63);
    swift_retain(v64);
    v66 = sub_10002ECD0(v99, v54);
    v67 = Logger.logObject.getter(v66);
    type = static os_log_type_t.error.getter(v67);
    v68 = os_log_type_enabled(v67, type);
    v98 = *(_QWORD *)(v0 + 184);
    v92 = *(_QWORD *)(v0 + 176);
    v95 = *(_QWORD *)(v0 + 168);
    if (v68)
    {
      log = v67;
      v69 = swift_slowAlloc(22, -1);
      v86 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v100[0] = v86;
      *(_DWORD *)v69 = 136446466;
      swift_release(v59);
      swift_release(v60);
      swift_release(v61);
      swift_release(v62);
      swift_release(v63);
      swift_release(v64);
      v70 = (char *)ActionType.rawValue.getter(v88);
      *(_QWORD *)(v69 + 4) = sub_100019400(v70, v71, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      swift_release(v59);
      swift_release(v60);
      swift_release(v61);
      swift_release(v62);
      swift_release(v63);
      swift_release(v64);
      *(_WORD *)(v69 + 12) = 2082;
      swift_bridgeObjectRetain();
      v72 = Optional<A>.description.getter(v99, v54);
      v74 = v73;
      sub_10001406C(v99, v54);
      v75 = (char *)v72;
      v65 = v99;
      *(_QWORD *)(v69 + 14) = sub_100019400(v75, v74, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      sub_10001406C(v99, v54);
      sub_10001406C(v99, v54);
      _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s: attempted to execute but was unsupported for reason: %{public}s", (uint8_t *)v69, 0x16u);
      swift_arrayDestroy(v86, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v86, -1, -1);
      swift_slowDealloc(v69, -1, -1);

    }
    else
    {
      swift_release_n(v59, 2);
      swift_release_n(v60, 2);
      swift_release_n(v61, 2);
      swift_release_n(v62, 2);
      swift_release_n(v63, 2);
      swift_release_n(v64, 2);
      sub_10001406C(v99, v54);
      sub_10001406C(v99, v54);

    }
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v98, v95);
    v76 = sub_10002ECE4();
    swift_allocError(&type metadata for ActionError, v76, 0, 0);
    *v77 = v65;
    v77[1] = v54;
    v79 = *(_QWORD *)(v0 + 200);
    v78 = *(_QWORD *)(v0 + 208);
    v81 = *(_QWORD *)(v0 + 184);
    v80 = *(_QWORD *)(v0 + 192);
    v83 = *(_QWORD *)(v0 + 152);
    v82 = *(_QWORD *)(v0 + 160);
    swift_willThrow(v84);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100102C44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100125E0C;
  else
    v3 = sub_100102CA8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100102CA8()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 224);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 168);
  AnyCancellable.cancel()();
  v1(v3, v2, v4);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 56);
  v41 = *(_BYTE *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 120);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  v43 = v10;
  v11 = swift_retain(v10);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(_QWORD *)(v0 + 200);
  v16 = *(_QWORD *)(v0 + 168);
  v45 = *(_QWORD *)(v0 + 176);
  if (v14)
  {
    v39 = *(_QWORD *)(v0 + 200);
    v17 = swift_slowAlloc(22, -1);
    v37 = swift_slowAlloc(64, -1);
    v47 = v37;
    *(_DWORD *)v17 = 136446466;
    v18 = (char *)ActionType.rawValue.getter(v41);
    *(_QWORD *)(v17 + 4) = sub_100019400(v18, v19, &v47);
    swift_bridgeObjectRelease();
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v43);
    *(_WORD *)(v17 + 12) = 2082;
    *(_QWORD *)(v17 + 14) = sub_100019400(0, (char *)0xE000000000000000, &v47);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: perform success%{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v16);
  }
  else
  {
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v43);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v15, v16);
  }
  v36 = *(_QWORD *)(v0 + 232);
  v38 = *(_QWORD *)(v0 + 208);
  v40 = *(_QWORD *)(v0 + 200);
  v42 = *(_QWORD *)(v0 + 192);
  v20 = *(_QWORD *)(v0 + 152);
  v44 = *(_QWORD *)(v0 + 184);
  v46 = *(_QWORD *)(v0 + 160);
  v21 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = *(_QWORD *)(v0 + 16);
  v23 = *(_QWORD *)(v0 + 56);
  v24 = *(_BYTE *)(v0 + 64);
  v25 = *(_QWORD *)(v0 + 72);
  v26 = *(_QWORD *)(v0 + 80);
  v27 = *(_QWORD *)(v0 + 88);
  v28 = *(_QWORD *)(v0 + 96);
  v29 = *(_QWORD *)(v0 + 120);
  v30 = swift_allocObject(&unk_10044C290, 144, 7);
  *(_QWORD *)(v30 + 16) = 0;
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = v22;
  v31 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v30 + 40) = v31;
  v34 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v30 + 56) = v34;
  *(_QWORD *)(v30 + 72) = v23;
  *(_BYTE *)(v30 + 80) = v24;
  *(_QWORD *)(v30 + 88) = v25;
  *(_QWORD *)(v30 + 96) = v26;
  *(_QWORD *)(v30 + 104) = v27;
  *(_QWORD *)(v30 + 112) = v28;
  v35 = *(_OWORD *)(v0 + 104);
  *(_OWORD *)(v30 + 120) = v35;
  *(_QWORD *)(v30 + 136) = v29;
  swift_retain(v31);
  swift_retain(v34);
  swift_retain(v23);
  swift_retain(v26);
  swift_retain(v35);
  swift_retain(v29);
  v32 = sub_10002DE80(v20, (uint64_t)&unk_100492558, v30);
  swift_release(v32);
  swift_release(v36);
  sub_100008758(v20, (uint64_t *)&unk_100493720);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100103058(uint64_t a1, char a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  *(_QWORD *)(v3 + 936) = v2;
  *(_BYTE *)(v3 + 1056) = a2;
  v4 = sub_100005574((uint64_t *)&unk_100493720);
  *(_QWORD *)(v3 + 944) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005574(&qword_10048E088);
  *(_QWORD *)(v3 + 952) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0, v6);
  *(_QWORD *)(v3 + 960) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 968) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 976) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 984) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 992) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 1000) = swift_task_alloc(v9);
  v10 = v2[5];
  *(_OWORD *)(v3 + 80) = v2[4];
  *(_OWORD *)(v3 + 96) = v10;
  v11 = v2[7];
  *(_OWORD *)(v3 + 112) = v2[6];
  *(_OWORD *)(v3 + 128) = v11;
  v12 = v2[1];
  *(_OWORD *)(v3 + 16) = *v2;
  *(_OWORD *)(v3 + 32) = v12;
  v13 = v2[3];
  *(_OWORD *)(v3 + 48) = v2[2];
  *(_OWORD *)(v3 + 64) = v13;
  return swift_task_switch(sub_10010314C, 0, 0);
}

uint64_t sub_10010314C()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  NSObject *v20;
  os_log_type_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  double v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _OWORD *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  _QWORD *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __n128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(void);
  uint64_t v89;
  _OWORD v90[4];
  uint64_t v91;
  uint64_t (*v92)(_QWORD);
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;

  v1 = (_OWORD *)(v0 + 16);
  if ((*(_BYTE *)(v0 + 1056) & 1) != 0)
    goto LABEL_3;
  v2 = *(_QWORD *)(v0 + 936);
  v3 = *(_OWORD *)(v2 + 48);
  v90[2] = *(_OWORD *)(v2 + 32);
  v90[3] = v3;
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_OWORD *)(v2 + 16);
  v90[0] = *(_OWORD *)v2;
  v90[1] = v5;
  v96 = *(_QWORD *)(v0 + 136);
  v6 = *(uint64_t (**)(_QWORD))(v0 + 88);
  v7 = *(_QWORD *)(v0 + 96);
  v94 = *(_OWORD *)(v0 + 104);
  v95 = *(_OWORD *)(v0 + 120);
  v91 = v4;
  v92 = v6;
  v93 = v7;
  v8 = v6(v90);
  if (v9 == 1)
  {
LABEL_3:
    if (qword_10048C578 != -1)
      swift_once(&qword_10048C578, sub_10002E5A0);
    v10 = *(_QWORD *)(v0 + 1000);
    v11 = *(_QWORD *)(v0 + 968);
    v12 = *(_QWORD *)(v0 + 960);
    v13 = sub_1000086B4(v12, (uint64_t)qword_10048E058);
    *(_QWORD *)(v0 + 1008) = v13;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    *(_QWORD *)(v0 + 1016) = v14;
    v14(v10, v13, v12);
    v15 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 208) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 224) = v15;
    v16 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 240) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 256) = v16;
    v17 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 144) = *v1;
    *(_OWORD *)(v0 + 160) = v17;
    v18 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 192) = v18;
    v19 = sub_100054DC0((_QWORD *)(v0 + 144));
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter();
    v22 = os_log_type_enabled(v20, v21);
    v23 = *(_QWORD *)(v0 + 1000);
    v24 = *(_QWORD *)(v0 + 968);
    v25 = *(_QWORD *)(v0 + 960);
    if (v22)
    {
      v87 = *(_QWORD *)(v0 + 1000);
      v26 = swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v90[0] = v27;
      *(_DWORD *)v26 = 136446210;
      v28 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 208));
      *(_QWORD *)(v26 + 4) = sub_100019400(v28, v29, (uint64_t *)v90);
      swift_bridgeObjectRelease();
      sub_1000549E0((_QWORD *)(v0 + 144));
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%{public}s: performing…", (uint8_t *)v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      v30 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
      v30(v87, v25);
    }
    else
    {
      sub_1000549E0((_QWORD *)(v0 + 144));

      v30 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
      v30(v23, v25);
    }
    *(_QWORD *)(v0 + 1024) = v30;
    v31 = *(_QWORD *)(v0 + 952);
    sub_1000087DC(0, (unint64_t *)&qword_10048E090, NSTimer_ptr);
    v32 = *(double *)(v0 + 104);
    v33 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v34 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v31, 1, 1, v34);
    v35 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v33, NSRunLoopCommonModes, v31, v32);

    sub_100008758(v31, &qword_10048E088);
    *(_QWORD *)(v0 + 928) = v35;
    v36 = type metadata accessor for NSTimer.TimerPublisher(0);
    v37 = sub_100006924((unint64_t *)&qword_10048E098, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
    v38 = ConnectablePublisher.autoconnect()(v36, v37);
    swift_release(v35);
    *(_QWORD *)(v0 + 920) = v38;
    v39 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 336) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 352) = v39;
    v40 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 368) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 384) = v40;
    v41 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 272) = *v1;
    *(_OWORD *)(v0 + 288) = v41;
    v42 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 304) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 320) = v42;
    v43 = (_OWORD *)swift_allocObject(&unk_10044C1F0, 144, 7);
    v44 = *(_OWORD *)(v0 + 96);
    v43[5] = *(_OWORD *)(v0 + 80);
    v43[6] = v44;
    v45 = *(_OWORD *)(v0 + 128);
    v43[7] = *(_OWORD *)(v0 + 112);
    v43[8] = v45;
    v46 = *(_OWORD *)(v0 + 32);
    v43[1] = *v1;
    v43[2] = v46;
    v47 = *(_OWORD *)(v0 + 64);
    v43[3] = *(_OWORD *)(v0 + 48);
    v43[4] = v47;
    sub_100054DC0((_QWORD *)(v0 + 272));
    v48 = sub_100005574(&qword_10048E0A0);
    v49 = sub_10002FFB8(&qword_10048E0A8, &qword_10048E0A0, (uint64_t)&protocol conformance descriptor for Publishers.Autoconnect<A>);
    *(_QWORD *)(v0 + 1032) = Publisher<>.sink(receiveValue:)(sub_100125BA4, v43, v48, v49);
    swift_release(v43);
    swift_release(*(_QWORD *)(v0 + 920));
    v50 = *(int **)(v0 + 112);
    v88 = (uint64_t (*)(void))((char *)v50 + *v50);
    v51 = (_QWORD *)swift_task_alloc(v50[1]);
    *(_QWORD *)(v0 + 1040) = v51;
    *v51 = v0;
    v51[1] = sub_10010386C;
    return v88();
  }
  else
  {
    v53 = v8;
    v54 = v9;
    if (qword_10048C578 != -1)
      swift_once(&qword_10048C578, sub_10002E5A0);
    v55 = *(_QWORD *)(v0 + 976);
    v56 = *(_QWORD *)(v0 + 968);
    v57 = *(_QWORD *)(v0 + 960);
    v58 = sub_1000086B4(v57, (uint64_t)qword_10048E058);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v55, v58, v57);
    v59 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 464) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 480) = v59;
    v60 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 496) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 512) = v60;
    v61 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 400) = *v1;
    *(_OWORD *)(v0 + 416) = v61;
    v62 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 432) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 448) = v62;
    sub_100054DC0((_QWORD *)(v0 + 400));
    sub_10002ECD0(v53, v54);
    sub_100054DC0((_QWORD *)(v0 + 400));
    v63 = sub_10002ECD0(v53, v54);
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.error.getter(v64);
    v66 = os_log_type_enabled(v64, v65);
    v67 = *(_QWORD *)(v0 + 976);
    v68 = *(_QWORD *)(v0 + 968);
    v69 = *(_QWORD *)(v0 + 960);
    if (v66)
    {
      v89 = *(_QWORD *)(v0 + 960);
      v70 = swift_slowAlloc(22, -1);
      v71 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v90[0] = v71;
      *(_DWORD *)v70 = 136446466;
      sub_1000549E0((_QWORD *)(v0 + 400));
      v72 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 464));
      v86 = v67;
      *(_QWORD *)(v70 + 4) = sub_100019400(v72, v73, (uint64_t *)v90);
      swift_bridgeObjectRelease();
      sub_1000549E0((_QWORD *)(v0 + 400));
      *(_WORD *)(v70 + 12) = 2082;
      swift_bridgeObjectRetain();
      v74 = (char *)Optional<A>.description.getter(v53, v54);
      v76 = v75;
      sub_10001406C(v53, v54);
      *(_QWORD *)(v70 + 14) = sub_100019400(v74, v76, (uint64_t *)v90);
      swift_bridgeObjectRelease();
      sub_10001406C(v53, v54);
      sub_10001406C(v53, v54);
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "%{public}s: attempted to execute but was unsupported for reason: %{public}s", (uint8_t *)v70, 0x16u);
      swift_arrayDestroy(v71, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v70, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v86, v89);
    }
    else
    {
      sub_1000549E0((_QWORD *)(v0 + 400));
      sub_1000549E0((_QWORD *)(v0 + 400));
      sub_10001406C(v53, v54);
      sub_10001406C(v53, v54);

      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v69);
    }
    v77 = sub_10002ECE4();
    swift_allocError(&type metadata for ActionError, v77, 0, 0);
    *v78 = v53;
    v78[1] = v54;
    v79 = *(_QWORD *)(v0 + 1000);
    v80 = *(_QWORD *)(v0 + 992);
    v81 = *(_QWORD *)(v0 + 984);
    v82 = *(_QWORD *)(v0 + 976);
    v83 = *(_QWORD *)(v0 + 952);
    v84 = *(_QWORD *)(v0 + 944);
    swift_willThrow(v85);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10010386C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1040);
  *(_QWORD *)(*(_QWORD *)v1 + 1048) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100103BB4;
  else
    v3 = sub_1001038D0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001038D0()
{
  uint64_t v0;
  _OWORD *v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;

  v1 = (_OWORD *)(v0 + 16);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1016);
  v3 = *(_QWORD *)(v0 + 1008);
  v4 = *(_QWORD *)(v0 + 992);
  v5 = *(_QWORD *)(v0 + 960);
  AnyCancellable.cancel()();
  v2(v4, v3, v5);
  v6 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 848) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 864) = v6;
  v7 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 880) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 896) = v7;
  v8 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 784) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 800) = v8;
  v9 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 816) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 832) = v9;
  v10 = sub_100054DC0((_QWORD *)(v0 + 784));
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  v13 = os_log_type_enabled(v11, v12);
  v14 = *(void (**)(uint64_t, uint64_t))(v0 + 1024);
  v15 = *(_QWORD *)(v0 + 992);
  v16 = *(_QWORD *)(v0 + 960);
  if (v13)
  {
    v39 = *(void (**)(uint64_t, uint64_t))(v0 + 1024);
    v17 = swift_slowAlloc(22, -1);
    v18 = swift_slowAlloc(64, -1);
    v41 = v18;
    *(_DWORD *)v17 = 136446466;
    v19 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 848));
    *(_QWORD *)(v17 + 4) = sub_100019400(v19, v20, &v41);
    swift_bridgeObjectRelease();
    sub_1000549E0((_QWORD *)(v0 + 784));
    *(_WORD *)(v17 + 12) = 2082;
    *(_QWORD *)(v17 + 14) = sub_100019400(0, (char *)0xE000000000000000, &v41);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s: perform success%{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    v39(v15, v16);
  }
  else
  {
    sub_1000549E0((_QWORD *)(v0 + 784));

    v14(v15, v16);
  }
  v21 = *(_QWORD *)(v0 + 1032);
  v22 = *(_QWORD *)(v0 + 1000);
  v23 = *(_QWORD *)(v0 + 992);
  v24 = *(_QWORD *)(v0 + 984);
  v25 = *(_QWORD *)(v0 + 976);
  v40 = *(_QWORD *)(v0 + 952);
  v26 = *(_QWORD *)(v0 + 944);
  v27 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
  v28 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 592) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 608) = v28;
  v29 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 624) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 640) = v29;
  v30 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 528) = *v1;
  *(_OWORD *)(v0 + 544) = v30;
  v31 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 560) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 576) = v31;
  v32 = swift_allocObject(&unk_10044C218, 160, 7);
  *(_QWORD *)(v32 + 16) = 0;
  *(_QWORD *)(v32 + 24) = 0;
  v33 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v32 + 96) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v32 + 112) = v33;
  v34 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v32 + 128) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v32 + 144) = v34;
  v35 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v32 + 32) = *v1;
  *(_OWORD *)(v32 + 48) = v35;
  v36 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v32 + 64) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v32 + 80) = v36;
  sub_100054DC0((_QWORD *)(v0 + 528));
  v37 = sub_10002DE80(v26, (uint64_t)&unk_100492538, v32);
  swift_release(v37);
  swift_release(v21);
  sub_100008758(v26, (uint64_t *)&unk_100493720);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v40);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100103BB4()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __n128 v23;
  uint64_t v24;
  double (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37[2];

  v1 = *(_QWORD *)(v0 + 1048);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v0 + 1016);
  v3 = *(_QWORD *)(v0 + 1008);
  v4 = *(_QWORD *)(v0 + 984);
  v5 = *(_QWORD *)(v0 + 960);
  v6 = swift_release(*(_QWORD *)(v0 + 1032));
  v2(v4, v3, v5, v6);
  v7 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 720) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 736) = v7;
  v8 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 752) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 768) = v8;
  v9 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 656) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 672) = v9;
  v10 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 688) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 704) = v10;
  sub_100054DC0((_QWORD *)(v0 + 656));
  swift_errorRetain(v1);
  sub_100054DC0((_QWORD *)(v0 + 656));
  v11 = swift_errorRetain(v1);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.error.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = *(_QWORD *)(v0 + 1048);
    v35 = *(_QWORD *)(v0 + 984);
    v36 = *(void (**)(uint64_t, uint64_t))(v0 + 1024);
    v15 = *(_QWORD *)(v0 + 960);
    v16 = swift_slowAlloc(22, -1);
    v17 = swift_slowAlloc(64, -1);
    v37[0] = v17;
    *(_DWORD *)v16 = 136446466;
    sub_1000549E0((_QWORD *)(v0 + 656));
    v18 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 720));
    *(_QWORD *)(v16 + 4) = sub_100019400(v18, v19, v37);
    swift_bridgeObjectRelease();
    sub_1000549E0((_QWORD *)(v0 + 656));
    *(_WORD *)(v16 + 12) = 2082;
    *(_QWORD *)(v0 + 912) = v14;
    swift_errorRetain(v14);
    v20 = sub_100005574((uint64_t *)&unk_1004911F0);
    v21 = (char *)String.init<A>(describing:)(v0 + 912, v20);
    *(_QWORD *)(v16 + 14) = sub_100019400(v21, v22, v37);
    swift_bridgeObjectRelease();
    swift_errorRelease(v14);
    swift_errorRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: perform failed: %{public}s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy(v17, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v36(v35, v15);
  }
  else
  {
    v24 = *(_QWORD *)(v0 + 1048);
    v25 = *(double (**)(uint64_t, uint64_t))(v0 + 1024);
    v26 = *(_QWORD *)(v0 + 984);
    v27 = *(_QWORD *)(v0 + 960);
    sub_1000549E0((_QWORD *)(v0 + 656));
    sub_1000549E0((_QWORD *)(v0 + 656));
    swift_errorRelease(v24);
    swift_errorRelease(v24);

    v23.n128_f64[0] = v25(v26, v27);
  }
  v28 = *(_QWORD *)(v0 + 1000);
  v29 = *(_QWORD *)(v0 + 992);
  v30 = *(_QWORD *)(v0 + 984);
  v31 = *(_QWORD *)(v0 + 976);
  v32 = *(_QWORD *)(v0 + 952);
  v33 = *(_QWORD *)(v0 + 944);
  swift_willThrow(v23);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100103E60(uint64_t a1, char a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  *(_QWORD *)(v3 + 936) = v2;
  *(_BYTE *)(v3 + 1056) = a2;
  v4 = sub_100005574((uint64_t *)&unk_100493720);
  *(_QWORD *)(v3 + 944) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005574(&qword_10048E088);
  *(_QWORD *)(v3 + 952) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0, v6);
  *(_QWORD *)(v3 + 960) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 968) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 976) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 984) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 992) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 1000) = swift_task_alloc(v9);
  v10 = v2[5];
  *(_OWORD *)(v3 + 80) = v2[4];
  *(_OWORD *)(v3 + 96) = v10;
  v11 = v2[7];
  *(_OWORD *)(v3 + 112) = v2[6];
  *(_OWORD *)(v3 + 128) = v11;
  v12 = v2[1];
  *(_OWORD *)(v3 + 16) = *v2;
  *(_OWORD *)(v3 + 32) = v12;
  v13 = v2[3];
  *(_OWORD *)(v3 + 48) = v2[2];
  *(_OWORD *)(v3 + 64) = v13;
  return swift_task_switch(sub_100103F54, 0, 0);
}

uint64_t sub_100103F54()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  NSObject *v20;
  os_log_type_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  double v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _OWORD *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  _QWORD *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __n128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(void);
  uint64_t v90;
  _OWORD v91[4];
  uint64_t v92;
  uint64_t (*v93)(_QWORD);
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;

  v1 = (_OWORD *)(v0 + 16);
  if ((*(_BYTE *)(v0 + 1056) & 1) != 0)
    goto LABEL_3;
  v2 = *(_QWORD *)(v0 + 936);
  v3 = *(_OWORD *)(v2 + 48);
  v91[2] = *(_OWORD *)(v2 + 32);
  v91[3] = v3;
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_OWORD *)(v2 + 16);
  v91[0] = *(_OWORD *)v2;
  v91[1] = v5;
  v97 = *(_QWORD *)(v0 + 136);
  v6 = *(uint64_t (**)(_QWORD))(v0 + 88);
  v7 = *(_QWORD *)(v0 + 96);
  v95 = *(_OWORD *)(v0 + 104);
  v96 = *(_OWORD *)(v0 + 120);
  v92 = v4;
  v93 = v6;
  v94 = v7;
  v8 = v6(v91);
  if (v9 == 1)
  {
LABEL_3:
    if (qword_10048C578 != -1)
      swift_once(&qword_10048C578, sub_10002E5A0);
    v10 = *(_QWORD *)(v0 + 1000);
    v11 = *(_QWORD *)(v0 + 968);
    v12 = *(_QWORD *)(v0 + 960);
    v13 = sub_1000086B4(v12, (uint64_t)qword_10048E058);
    *(_QWORD *)(v0 + 1008) = v13;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    *(_QWORD *)(v0 + 1016) = v14;
    v14(v10, v13, v12);
    v15 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 208) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 224) = v15;
    v16 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 240) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 256) = v16;
    v17 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 144) = *v1;
    *(_OWORD *)(v0 + 160) = v17;
    v18 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 192) = v18;
    v19 = sub_100054B90((_QWORD *)(v0 + 144));
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter();
    v22 = os_log_type_enabled(v20, v21);
    v23 = *(_QWORD *)(v0 + 1000);
    v24 = *(_QWORD *)(v0 + 968);
    v25 = *(_QWORD *)(v0 + 960);
    if (v22)
    {
      v88 = *(_QWORD *)(v0 + 1000);
      v26 = swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v91[0] = v27;
      *(_DWORD *)v26 = 136446210;
      v28 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 208));
      *(_QWORD *)(v26 + 4) = sub_100019400(v28, v29, (uint64_t *)v91);
      swift_bridgeObjectRelease();
      sub_100054A68((_QWORD *)(v0 + 144), (void (*)(uint64_t))&_swift_bridgeObjectRelease);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%{public}s: performing…", (uint8_t *)v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      v30 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
      v30(v88, v25);
    }
    else
    {
      sub_100054A68((_QWORD *)(v0 + 144), (void (*)(uint64_t))&_swift_bridgeObjectRelease);

      v30 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
      v30(v23, v25);
    }
    *(_QWORD *)(v0 + 1024) = v30;
    v31 = *(_QWORD *)(v0 + 952);
    sub_1000087DC(0, (unint64_t *)&qword_10048E090, NSTimer_ptr);
    v32 = *(double *)(v0 + 104);
    v33 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v34 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v31, 1, 1, v34);
    v35 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v33, NSRunLoopCommonModes, v31, v32);

    sub_100008758(v31, &qword_10048E088);
    *(_QWORD *)(v0 + 928) = v35;
    v36 = type metadata accessor for NSTimer.TimerPublisher(0);
    v37 = sub_100006924((unint64_t *)&qword_10048E098, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
    v38 = ConnectablePublisher.autoconnect()(v36, v37);
    swift_release(v35);
    *(_QWORD *)(v0 + 920) = v38;
    v39 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 336) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 352) = v39;
    v40 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 368) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 384) = v40;
    v41 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 272) = *v1;
    *(_OWORD *)(v0 + 288) = v41;
    v42 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 304) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 320) = v42;
    v43 = (_OWORD *)swift_allocObject(&unk_10044C178, 144, 7);
    v44 = *(_OWORD *)(v0 + 96);
    v43[5] = *(_OWORD *)(v0 + 80);
    v43[6] = v44;
    v45 = *(_OWORD *)(v0 + 128);
    v43[7] = *(_OWORD *)(v0 + 112);
    v43[8] = v45;
    v46 = *(_OWORD *)(v0 + 32);
    v43[1] = *v1;
    v43[2] = v46;
    v47 = *(_OWORD *)(v0 + 64);
    v43[3] = *(_OWORD *)(v0 + 48);
    v43[4] = v47;
    sub_100054B90((_QWORD *)(v0 + 272));
    v48 = sub_100005574(&qword_10048E0A0);
    v49 = sub_10002FFB8(&qword_10048E0A8, &qword_10048E0A0, (uint64_t)&protocol conformance descriptor for Publishers.Autoconnect<A>);
    *(_QWORD *)(v0 + 1032) = Publisher<>.sink(receiveValue:)(sub_100125A58, v43, v48, v49);
    swift_release(v43);
    swift_release(*(_QWORD *)(v0 + 920));
    v50 = *(int **)(v0 + 112);
    v89 = (uint64_t (*)(void))((char *)v50 + *v50);
    v51 = (_QWORD *)swift_task_alloc(v50[1]);
    *(_QWORD *)(v0 + 1040) = v51;
    *v51 = v0;
    v51[1] = sub_1001046AC;
    return v89();
  }
  else
  {
    v53 = v8;
    v54 = v9;
    if (qword_10048C578 != -1)
      swift_once(&qword_10048C578, sub_10002E5A0);
    v55 = *(_QWORD *)(v0 + 976);
    v56 = *(_QWORD *)(v0 + 968);
    v57 = *(_QWORD *)(v0 + 960);
    v58 = sub_1000086B4(v57, (uint64_t)qword_10048E058);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v55, v58, v57);
    v59 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 464) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 480) = v59;
    v60 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 496) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 512) = v60;
    v61 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 400) = *v1;
    *(_OWORD *)(v0 + 416) = v61;
    v62 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 432) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 448) = v62;
    sub_100054B90((_QWORD *)(v0 + 400));
    sub_10002ECD0(v53, v54);
    sub_100054B90((_QWORD *)(v0 + 400));
    v63 = sub_10002ECD0(v53, v54);
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.error.getter(v64);
    v66 = os_log_type_enabled(v64, v65);
    v67 = *(_QWORD *)(v0 + 976);
    v68 = *(_QWORD *)(v0 + 968);
    v69 = *(_QWORD *)(v0 + 960);
    if (v66)
    {
      v90 = *(_QWORD *)(v0 + 968);
      v70 = swift_slowAlloc(22, -1);
      v71 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v91[0] = v71;
      *(_DWORD *)v70 = 136446466;
      v87 = v67;
      sub_100054A68((_QWORD *)(v0 + 400), (void (*)(uint64_t))&_swift_bridgeObjectRelease);
      v72 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 464));
      v86 = v69;
      *(_QWORD *)(v70 + 4) = sub_100019400(v72, v73, (uint64_t *)v91);
      swift_bridgeObjectRelease();
      sub_100054A68((_QWORD *)(v0 + 400), (void (*)(uint64_t))&_swift_bridgeObjectRelease);
      *(_WORD *)(v70 + 12) = 2082;
      swift_bridgeObjectRetain();
      v74 = (char *)Optional<A>.description.getter(v53, v54);
      v76 = v75;
      sub_10001406C(v53, v54);
      *(_QWORD *)(v70 + 14) = sub_100019400(v74, v76, (uint64_t *)v91);
      swift_bridgeObjectRelease();
      sub_10001406C(v53, v54);
      sub_10001406C(v53, v54);
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "%{public}s: attempted to execute but was unsupported for reason: %{public}s", (uint8_t *)v70, 0x16u);
      swift_arrayDestroy(v71, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v70, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v87, v86);
    }
    else
    {
      sub_100054A68((_QWORD *)(v0 + 400), (void (*)(uint64_t))&_swift_bridgeObjectRelease);
      sub_100054A68((_QWORD *)(v0 + 400), (void (*)(uint64_t))&_swift_bridgeObjectRelease);
      sub_10001406C(v53, v54);
      sub_10001406C(v53, v54);

      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v69);
    }
    v77 = sub_10002ECE4();
    swift_allocError(&type metadata for ActionError, v77, 0, 0);
    *v78 = v53;
    v78[1] = v54;
    v79 = *(_QWORD *)(v0 + 1000);
    v80 = *(_QWORD *)(v0 + 992);
    v81 = *(_QWORD *)(v0 + 984);
    v82 = *(_QWORD *)(v0 + 976);
    v83 = *(_QWORD *)(v0 + 952);
    v84 = *(_QWORD *)(v0 + 944);
    swift_willThrow(v85);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001046AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1040);
  *(_QWORD *)(*(_QWORD *)v1 + 1048) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100104A04;
  else
    v3 = sub_100104710;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100104710()
{
  uint64_t v0;
  _OWORD *v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;

  v1 = (_OWORD *)(v0 + 16);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1016);
  v3 = *(_QWORD *)(v0 + 1008);
  v4 = *(_QWORD *)(v0 + 992);
  v5 = *(_QWORD *)(v0 + 960);
  AnyCancellable.cancel()();
  v2(v4, v3, v5);
  v6 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 848) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 864) = v6;
  v7 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 880) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 896) = v7;
  v8 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 784) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 800) = v8;
  v9 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 816) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 832) = v9;
  v10 = sub_100054B90((_QWORD *)(v0 + 784));
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  v13 = os_log_type_enabled(v11, v12);
  v14 = *(void (**)(uint64_t, uint64_t))(v0 + 1024);
  v15 = *(_QWORD *)(v0 + 992);
  v16 = *(_QWORD *)(v0 + 960);
  if (v13)
  {
    v39 = *(void (**)(uint64_t, uint64_t))(v0 + 1024);
    v17 = swift_slowAlloc(22, -1);
    v18 = swift_slowAlloc(64, -1);
    v41 = v18;
    *(_DWORD *)v17 = 136446466;
    v19 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 848));
    *(_QWORD *)(v17 + 4) = sub_100019400(v19, v20, &v41);
    swift_bridgeObjectRelease();
    sub_100054A68((_QWORD *)(v0 + 784), (void (*)(uint64_t))&_swift_bridgeObjectRelease);
    *(_WORD *)(v17 + 12) = 2082;
    *(_QWORD *)(v17 + 14) = sub_100019400(0, (char *)0xE000000000000000, &v41);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s: perform success%{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    v39(v15, v16);
  }
  else
  {
    sub_100054A68((_QWORD *)(v0 + 784), (void (*)(uint64_t))&_swift_bridgeObjectRelease);

    v14(v15, v16);
  }
  v21 = *(_QWORD *)(v0 + 1032);
  v22 = *(_QWORD *)(v0 + 1000);
  v23 = *(_QWORD *)(v0 + 992);
  v24 = *(_QWORD *)(v0 + 984);
  v25 = *(_QWORD *)(v0 + 976);
  v40 = *(_QWORD *)(v0 + 952);
  v26 = *(_QWORD *)(v0 + 944);
  v27 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
  v28 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 592) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 608) = v28;
  v29 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 624) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 640) = v29;
  v30 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 528) = *v1;
  *(_OWORD *)(v0 + 544) = v30;
  v31 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 560) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 576) = v31;
  v32 = swift_allocObject(&unk_10044C1A0, 160, 7);
  *(_QWORD *)(v32 + 16) = 0;
  *(_QWORD *)(v32 + 24) = 0;
  v33 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v32 + 96) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v32 + 112) = v33;
  v34 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v32 + 128) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v32 + 144) = v34;
  v35 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v32 + 32) = *v1;
  *(_OWORD *)(v32 + 48) = v35;
  v36 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v32 + 64) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v32 + 80) = v36;
  sub_100054B90((_QWORD *)(v0 + 528));
  v37 = sub_10002DE80(v26, (uint64_t)&unk_100492518, v32);
  swift_release(v37);
  swift_release(v21);
  sub_100008758(v26, (uint64_t *)&unk_100493720);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v40);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100104A04()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __n128 v22;
  uint64_t v23;
  double (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37[2];

  v1 = *(_QWORD *)(v0 + 1048);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v0 + 1016);
  v3 = *(_QWORD *)(v0 + 1008);
  v4 = *(_QWORD *)(v0 + 984);
  v5 = *(_QWORD *)(v0 + 960);
  v6 = swift_release(*(_QWORD *)(v0 + 1032));
  v2(v4, v3, v5, v6);
  v7 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 720) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 736) = v7;
  v8 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 752) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 768) = v8;
  v9 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 656) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 672) = v9;
  v10 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 688) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 704) = v10;
  sub_100054B90((_QWORD *)(v0 + 656));
  swift_errorRetain(v1);
  sub_100054B90((_QWORD *)(v0 + 656));
  v11 = swift_errorRetain(v1);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.error.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = *(_QWORD *)(v0 + 1048);
    v35 = *(_QWORD *)(v0 + 984);
    v36 = *(void (**)(uint64_t, uint64_t))(v0 + 1024);
    v34 = *(_QWORD *)(v0 + 960);
    v15 = swift_slowAlloc(22, -1);
    v16 = swift_slowAlloc(64, -1);
    v37[0] = v16;
    *(_DWORD *)v15 = 136446466;
    sub_100054A68((_QWORD *)(v0 + 656), (void (*)(uint64_t))&_swift_bridgeObjectRelease);
    v17 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 720));
    *(_QWORD *)(v15 + 4) = sub_100019400(v17, v18, v37);
    swift_bridgeObjectRelease();
    sub_100054A68((_QWORD *)(v0 + 656), (void (*)(uint64_t))&_swift_bridgeObjectRelease);
    *(_WORD *)(v15 + 12) = 2082;
    *(_QWORD *)(v0 + 912) = v14;
    swift_errorRetain(v14);
    v19 = sub_100005574((uint64_t *)&unk_1004911F0);
    v20 = (char *)String.init<A>(describing:)(v0 + 912, v19);
    *(_QWORD *)(v15 + 14) = sub_100019400(v20, v21, v37);
    swift_bridgeObjectRelease();
    swift_errorRelease(v14);
    swift_errorRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: perform failed: %{public}s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v16, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    v36(v35, v34);
  }
  else
  {
    v23 = *(_QWORD *)(v0 + 1048);
    v24 = *(double (**)(uint64_t, uint64_t))(v0 + 1024);
    v25 = *(_QWORD *)(v0 + 984);
    v26 = *(_QWORD *)(v0 + 960);
    sub_100054A68((_QWORD *)(v0 + 656), (void (*)(uint64_t))&_swift_bridgeObjectRelease);
    sub_100054A68((_QWORD *)(v0 + 656), (void (*)(uint64_t))&_swift_bridgeObjectRelease);
    swift_errorRelease(v23);
    swift_errorRelease(v23);

    v22.n128_f64[0] = v24(v25, v26);
  }
  v27 = *(_QWORD *)(v0 + 1000);
  v28 = *(_QWORD *)(v0 + 992);
  v29 = *(_QWORD *)(v0 + 984);
  v30 = *(_QWORD *)(v0 + 976);
  v31 = *(_QWORD *)(v0 + 952);
  v32 = *(_QWORD *)(v0 + 944);
  swift_willThrow(v22);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100104CD4(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  *(_QWORD *)(v3 + 992) = v2;
  *(_BYTE *)(v3 + 1112) = a2;
  v4 = sub_100005574((uint64_t *)&unk_100493720);
  *(_QWORD *)(v3 + 1000) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005574(&qword_10048E088);
  *(_QWORD *)(v3 + 1008) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0, v6);
  *(_QWORD *)(v3 + 1016) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 1024) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 1032) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 1040) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 1048) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 1056) = swift_task_alloc(v9);
  v10 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(v3 + 112) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(v3 + 128) = v10;
  *(_QWORD *)(v3 + 144) = *(_QWORD *)(v2 + 128);
  v11 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v3 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v3 + 64) = v11;
  v12 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v3 + 80) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v3 + 96) = v12;
  v13 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v3 + 32) = v13;
  return swift_task_switch(sub_100104DD0, 0, 0);
}

uint64_t sub_100104DD0()
{
  uint64_t v0;
  _OWORD *v1;
  _OWORD *v2;
  __int128 v3;
  __int128 v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  double v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  _QWORD *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __n128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(void);
  uint64_t v89;
  _OWORD v90[5];
  uint64_t (*v91)(_QWORD);
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;

  v1 = (_OWORD *)(v0 + 16);
  if ((*(_BYTE *)(v0 + 1112) & 1) != 0)
    goto LABEL_3;
  v2 = *(_OWORD **)(v0 + 992);
  v3 = v2[3];
  v90[2] = v2[2];
  v90[3] = v3;
  v90[4] = v2[4];
  v4 = v2[1];
  v90[0] = *v2;
  v90[1] = v4;
  v5 = *(uint64_t (**)(_QWORD))(v0 + 96);
  v6 = *(_QWORD *)(v0 + 104);
  v7 = *(_OWORD *)(v0 + 128);
  v93 = *(_OWORD *)(v0 + 112);
  v94 = v7;
  v95 = *(_QWORD *)(v0 + 144);
  v91 = v5;
  v92 = v6;
  v8 = v5(v90);
  if (v9 == 1)
  {
LABEL_3:
    if (qword_10048C578 != -1)
      swift_once(&qword_10048C578, sub_10002E5A0);
    v10 = *(_QWORD *)(v0 + 1056);
    v11 = *(_QWORD *)(v0 + 1024);
    v12 = *(_QWORD *)(v0 + 1016);
    v13 = sub_1000086B4(v12, (uint64_t)qword_10048E058);
    *(_QWORD *)(v0 + 1064) = v13;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    *(_QWORD *)(v0 + 1072) = v14;
    v14(v10, v13, v12);
    v15 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 248) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 264) = v15;
    *(_QWORD *)(v0 + 280) = *(_QWORD *)(v0 + 144);
    v16 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 184) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 200) = v16;
    v17 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 216) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 232) = v17;
    v18 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 152) = *v1;
    *(_OWORD *)(v0 + 168) = v18;
    v19 = sub_100052850(v0 + 152);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter();
    v22 = os_log_type_enabled(v20, v21);
    v23 = *(_QWORD *)(v0 + 1056);
    v24 = *(_QWORD *)(v0 + 1024);
    v25 = *(_QWORD *)(v0 + 1016);
    if (v22)
    {
      v87 = *(_QWORD *)(v0 + 1056);
      v26 = swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v90[0] = v27;
      *(_DWORD *)v26 = 136446210;
      v28 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 224));
      *(_QWORD *)(v26 + 4) = sub_100019400(v28, v29, (uint64_t *)v90);
      swift_bridgeObjectRelease();
      sub_100052690(v0 + 152);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%{public}s: performing…", (uint8_t *)v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      v30 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
      v30(v87, v25);
    }
    else
    {
      sub_100052690(v0 + 152);

      v30 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
      v30(v23, v25);
    }
    *(_QWORD *)(v0 + 1080) = v30;
    v31 = *(_QWORD *)(v0 + 1008);
    sub_1000087DC(0, (unint64_t *)&qword_10048E090, NSTimer_ptr);
    v32 = *(double *)(v0 + 112);
    v33 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v34 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v31, 1, 1, v34);
    v35 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v33, NSRunLoopCommonModes, v31, v32);

    sub_100008758(v31, &qword_10048E088);
    *(_QWORD *)(v0 + 984) = v35;
    v36 = type metadata accessor for NSTimer.TimerPublisher(0);
    v37 = sub_100006924((unint64_t *)&qword_10048E098, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
    v38 = ConnectablePublisher.autoconnect()(v36, v37);
    swift_release(v35);
    *(_QWORD *)(v0 + 976) = v38;
    v39 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 384) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 400) = v39;
    *(_QWORD *)(v0 + 416) = *(_QWORD *)(v0 + 144);
    v40 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 320) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 336) = v40;
    v41 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 352) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 368) = v41;
    v42 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 288) = *v1;
    *(_OWORD *)(v0 + 304) = v42;
    v43 = swift_allocObject(&unk_10044BDB8, 152, 7);
    v44 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v43 + 112) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v43 + 128) = v44;
    *(_QWORD *)(v43 + 144) = *(_QWORD *)(v0 + 144);
    v45 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v43 + 48) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v43 + 64) = v45;
    v46 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v43 + 80) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v43 + 96) = v46;
    v47 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v43 + 16) = *v1;
    *(_OWORD *)(v43 + 32) = v47;
    sub_100052850(v0 + 288);
    v48 = sub_100005574(&qword_10048E0A0);
    v49 = sub_10002FFB8(&qword_10048E0A8, &qword_10048E0A0, (uint64_t)&protocol conformance descriptor for Publishers.Autoconnect<A>);
    *(_QWORD *)(v0 + 1088) = Publisher<>.sink(receiveValue:)(sub_100125408, v43, v48, v49);
    swift_release(v43);
    swift_release(*(_QWORD *)(v0 + 976));
    v50 = *(int **)(v0 + 120);
    v88 = (uint64_t (*)(void))((char *)v50 + *v50);
    v51 = (_QWORD *)swift_task_alloc(v50[1]);
    *(_QWORD *)(v0 + 1096) = v51;
    *v51 = v0;
    v51[1] = sub_100105508;
    return v88();
  }
  else
  {
    v53 = v8;
    v54 = v9;
    if (qword_10048C578 != -1)
      swift_once(&qword_10048C578, sub_10002E5A0);
    v55 = *(_QWORD *)(v0 + 1032);
    v56 = *(_QWORD *)(v0 + 1024);
    v57 = *(_QWORD *)(v0 + 1016);
    v58 = sub_1000086B4(v57, (uint64_t)qword_10048E058);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v55, v58, v57);
    v59 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 520) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 536) = v59;
    *(_QWORD *)(v0 + 552) = *(_QWORD *)(v0 + 144);
    v60 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 456) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 472) = v60;
    v61 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 488) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 504) = v61;
    v62 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 424) = *v1;
    *(_OWORD *)(v0 + 440) = v62;
    sub_100052850(v0 + 424);
    sub_10002ECD0(v53, v54);
    sub_100052850(v0 + 424);
    v63 = sub_10002ECD0(v53, v54);
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.error.getter(v64);
    v66 = os_log_type_enabled(v64, v65);
    v67 = *(_QWORD *)(v0 + 1032);
    v68 = *(_QWORD *)(v0 + 1024);
    v69 = *(_QWORD *)(v0 + 1016);
    if (v66)
    {
      v89 = *(_QWORD *)(v0 + 1016);
      v70 = swift_slowAlloc(22, -1);
      v71 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v90[0] = v71;
      *(_DWORD *)v70 = 136446466;
      sub_100052690(v0 + 424);
      v72 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 496));
      v86 = v67;
      *(_QWORD *)(v70 + 4) = sub_100019400(v72, v73, (uint64_t *)v90);
      swift_bridgeObjectRelease();
      sub_100052690(v0 + 424);
      *(_WORD *)(v70 + 12) = 2082;
      swift_bridgeObjectRetain();
      v74 = (char *)Optional<A>.description.getter(v53, v54);
      v76 = v75;
      sub_10001406C(v53, v54);
      *(_QWORD *)(v70 + 14) = sub_100019400(v74, v76, (uint64_t *)v90);
      swift_bridgeObjectRelease();
      sub_10001406C(v53, v54);
      sub_10001406C(v53, v54);
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "%{public}s: attempted to execute but was unsupported for reason: %{public}s", (uint8_t *)v70, 0x16u);
      swift_arrayDestroy(v71, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v70, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v86, v89);
    }
    else
    {
      sub_100052690(v0 + 424);
      sub_100052690(v0 + 424);
      sub_10001406C(v53, v54);
      sub_10001406C(v53, v54);

      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v69);
    }
    v77 = sub_10002ECE4();
    swift_allocError(&type metadata for ActionError, v77, 0, 0);
    *v78 = v53;
    v78[1] = v54;
    v79 = *(_QWORD *)(v0 + 1056);
    v80 = *(_QWORD *)(v0 + 1048);
    v81 = *(_QWORD *)(v0 + 1040);
    v82 = *(_QWORD *)(v0 + 1032);
    v83 = *(_QWORD *)(v0 + 1008);
    v84 = *(_QWORD *)(v0 + 1000);
    swift_willThrow(v85);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100105508()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1096);
  *(_QWORD *)(*(_QWORD *)v1 + 1104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100105868;
  else
    v3 = sub_10010556C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10010556C()
{
  uint64_t v0;
  _OWORD *v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;

  v1 = (_OWORD *)(v0 + 16);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1072);
  v3 = *(_QWORD *)(v0 + 1064);
  v4 = *(_QWORD *)(v0 + 1048);
  v5 = *(_QWORD *)(v0 + 1016);
  AnyCancellable.cancel()();
  v2(v4, v3, v5);
  v6 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 928) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 944) = v6;
  *(_QWORD *)(v0 + 960) = *(_QWORD *)(v0 + 144);
  v7 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 864) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 880) = v7;
  v8 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 896) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 912) = v8;
  v9 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 832) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 848) = v9;
  v10 = sub_100052850(v0 + 832);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  v13 = os_log_type_enabled(v11, v12);
  v14 = *(void (**)(uint64_t, uint64_t))(v0 + 1080);
  v15 = *(_QWORD *)(v0 + 1048);
  v16 = *(_QWORD *)(v0 + 1016);
  if (v13)
  {
    v39 = *(void (**)(uint64_t, uint64_t))(v0 + 1080);
    v17 = swift_slowAlloc(22, -1);
    v18 = swift_slowAlloc(64, -1);
    v41 = v18;
    *(_DWORD *)v17 = 136446466;
    v19 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 904));
    *(_QWORD *)(v17 + 4) = sub_100019400(v19, v20, &v41);
    swift_bridgeObjectRelease();
    sub_100052690(v0 + 832);
    *(_WORD *)(v17 + 12) = 2082;
    *(_QWORD *)(v17 + 14) = sub_100019400(0, (char *)0xE000000000000000, &v41);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s: perform success%{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    v39(v15, v16);
  }
  else
  {
    sub_100052690(v0 + 832);

    v14(v15, v16);
  }
  v21 = *(_QWORD *)(v0 + 1088);
  v22 = *(_QWORD *)(v0 + 1056);
  v23 = *(_QWORD *)(v0 + 1048);
  v24 = *(_QWORD *)(v0 + 1040);
  v25 = *(_QWORD *)(v0 + 1032);
  v40 = *(_QWORD *)(v0 + 1008);
  v26 = *(_QWORD *)(v0 + 1000);
  v27 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
  v28 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 656) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 672) = v28;
  *(_QWORD *)(v0 + 688) = *(_QWORD *)(v0 + 144);
  v29 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 592) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 608) = v29;
  v30 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 624) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 640) = v30;
  v31 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 560) = *v1;
  *(_OWORD *)(v0 + 576) = v31;
  v32 = swift_allocObject(&unk_10044BDE0, 168, 7);
  *(_QWORD *)(v32 + 16) = 0;
  *(_QWORD *)(v32 + 24) = 0;
  v33 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v32 + 128) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v32 + 144) = v33;
  *(_QWORD *)(v32 + 160) = *(_QWORD *)(v0 + 144);
  v34 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v32 + 64) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v32 + 80) = v34;
  v35 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v32 + 96) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v32 + 112) = v35;
  v36 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v32 + 32) = *v1;
  *(_OWORD *)(v32 + 48) = v36;
  sub_100052850(v0 + 560);
  v37 = sub_10002DE80(v26, (uint64_t)&unk_100492418, v32);
  swift_release(v37);
  swift_release(v21);
  sub_100008758(v26, (uint64_t *)&unk_100493720);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v40);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100105868()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __n128 v23;
  uint64_t v24;
  double (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37[2];

  v1 = *(_QWORD *)(v0 + 1104);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v0 + 1072);
  v3 = *(_QWORD *)(v0 + 1064);
  v4 = *(_QWORD *)(v0 + 1040);
  v5 = *(_QWORD *)(v0 + 1016);
  v6 = swift_release(*(_QWORD *)(v0 + 1088));
  v2(v4, v3, v5, v6);
  v7 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 792) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 808) = v7;
  *(_QWORD *)(v0 + 824) = *(_QWORD *)(v0 + 144);
  v8 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 728) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 744) = v8;
  v9 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 760) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 776) = v9;
  v10 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 696) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 712) = v10;
  sub_100052850(v0 + 696);
  swift_errorRetain(v1);
  sub_100052850(v0 + 696);
  v11 = swift_errorRetain(v1);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.error.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = *(_QWORD *)(v0 + 1104);
    v35 = *(_QWORD *)(v0 + 1040);
    v36 = *(void (**)(uint64_t, uint64_t))(v0 + 1080);
    v15 = *(_QWORD *)(v0 + 1016);
    v16 = swift_slowAlloc(22, -1);
    v17 = swift_slowAlloc(64, -1);
    v37[0] = v17;
    *(_DWORD *)v16 = 136446466;
    sub_100052690(v0 + 696);
    v18 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 768));
    *(_QWORD *)(v16 + 4) = sub_100019400(v18, v19, v37);
    swift_bridgeObjectRelease();
    sub_100052690(v0 + 696);
    *(_WORD *)(v16 + 12) = 2082;
    *(_QWORD *)(v0 + 968) = v14;
    swift_errorRetain(v14);
    v20 = sub_100005574((uint64_t *)&unk_1004911F0);
    v21 = (char *)String.init<A>(describing:)(v0 + 968, v20);
    *(_QWORD *)(v16 + 14) = sub_100019400(v21, v22, v37);
    swift_bridgeObjectRelease();
    swift_errorRelease(v14);
    swift_errorRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: perform failed: %{public}s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy(v17, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v36(v35, v15);
  }
  else
  {
    v24 = *(_QWORD *)(v0 + 1104);
    v25 = *(double (**)(uint64_t, uint64_t))(v0 + 1080);
    v26 = *(_QWORD *)(v0 + 1040);
    v27 = *(_QWORD *)(v0 + 1016);
    sub_100052690(v0 + 696);
    sub_100052690(v0 + 696);
    swift_errorRelease(v24);
    swift_errorRelease(v24);

    v23.n128_f64[0] = v25(v26, v27);
  }
  v28 = *(_QWORD *)(v0 + 1056);
  v29 = *(_QWORD *)(v0 + 1048);
  v30 = *(_QWORD *)(v0 + 1040);
  v31 = *(_QWORD *)(v0 + 1032);
  v32 = *(_QWORD *)(v0 + 1008);
  v33 = *(_QWORD *)(v0 + 1000);
  swift_willThrow(v23);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100105B1C(uint64_t a1, char a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *(_BYTE *)(v3 + 256) = a2;
  v4 = sub_100005574((uint64_t *)&unk_100493720);
  *(_QWORD *)(v3 + 152) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005574(&qword_10048E088);
  *(_QWORD *)(v3 + 160) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0, v6);
  *(_QWORD *)(v3 + 168) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 176) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 184) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 192) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 200) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 208) = swift_task_alloc(v9);
  v10 = v2[5];
  *(_OWORD *)(v3 + 80) = v2[4];
  *(_OWORD *)(v3 + 96) = v10;
  *(_OWORD *)(v3 + 112) = v2[6];
  v11 = v2[1];
  *(_OWORD *)(v3 + 16) = *v2;
  *(_OWORD *)(v3 + 32) = v11;
  v12 = v2[3];
  *(_OWORD *)(v3 + 48) = v2[2];
  *(_OWORD *)(v3 + 64) = v12;
  return swift_task_switch(sub_100105C0C, 0, 0);
}

uint64_t sub_100105C0C()
{
  uint64_t v0;
  char v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  double v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  _QWORD *v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  BOOL v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __n128 v84;
  NSObject *log;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  os_log_type_t typea[8];
  os_log_type_t type;
  unsigned __int8 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  _OWORD v100[3];
  char v101;
  uint64_t (*v102)(_QWORD);
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;

  if ((*(_BYTE *)(v0 + 256) & 1) != 0)
    goto LABEL_3;
  v1 = *(_BYTE *)(v0 + 64);
  v2 = *(uint64_t (**)(_QWORD))(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_OWORD *)(v0 + 32);
  v100[0] = *(_OWORD *)(v0 + 16);
  v100[1] = v5;
  v100[2] = *(_OWORD *)(v0 + 48);
  v101 = v1;
  v102 = v2;
  v103 = v3;
  v104 = v4;
  v6 = *(_OWORD *)(v0 + 112);
  v105 = *(_OWORD *)(v0 + 96);
  v106 = v6;
  v7 = v2(v100);
  if (v8 == 1)
  {
LABEL_3:
    if (qword_10048C578 != -1)
      swift_once(&qword_10048C578, sub_10002E5A0);
    v9 = *(_QWORD *)(v0 + 208);
    v10 = *(_QWORD *)(v0 + 168);
    v11 = *(_QWORD *)(v0 + 176);
    v12 = sub_1000086B4(v10, (uint64_t)qword_10048E058);
    *(_QWORD *)(v0 + 216) = v12;
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    *(_QWORD *)(v0 + 224) = v13;
    v13(v9, v12, v10);
    v14 = *(_QWORD *)(v0 + 24);
    v15 = *(_QWORD *)(v0 + 40);
    v16 = *(_QWORD *)(v0 + 56);
    v91 = *(_BYTE *)(v0 + 64);
    v17 = *(_QWORD *)(v0 + 80);
    v18 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 120);
    swift_retain(v14);
    swift_retain(v15);
    swift_retain(v16);
    swift_retain(v17);
    v93 = v18;
    swift_retain(v18);
    v96 = v19;
    v20 = swift_retain(v19);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    v23 = os_log_type_enabled(v21, v22);
    v24 = *(_QWORD *)(v0 + 208);
    v25 = *(_QWORD *)(v0 + 168);
    v26 = *(_QWORD *)(v0 + 176);
    if (v23)
    {
      *(_QWORD *)typea = *(_QWORD *)(v0 + 208);
      v27 = swift_slowAlloc(12, -1);
      v87 = v25;
      v28 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v100[0] = v28;
      *(_DWORD *)v27 = 136446210;
      v29 = (char *)ActionType.rawValue.getter(v91);
      *(_QWORD *)(v27 + 4) = sub_100019400(v29, v30, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      swift_release(v14);
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v93);
      swift_release(v96);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s: performing…", (uint8_t *)v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      (*(void (**)(os_log_type_t *, uint64_t))(v26 + 8))(*(os_log_type_t **)typea, v87);
    }
    else
    {
      swift_release(v14);
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v93);
      swift_release(v96);

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    }
    v31 = *(_QWORD *)(v0 + 160);
    sub_1000087DC(0, (unint64_t *)&qword_10048E090, NSTimer_ptr);
    v32 = *(double *)(v0 + 88);
    v33 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v34 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v31, 1, 1, v34);
    v35 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v33, NSRunLoopCommonModes, v31, v32);

    sub_100008758(v31, &qword_10048E088);
    *(_QWORD *)(v0 + 128) = v35;
    v36 = type metadata accessor for NSTimer.TimerPublisher(0);
    v37 = sub_100006924((unint64_t *)&qword_10048E098, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
    v38 = ConnectablePublisher.autoconnect()(v36, v37);
    swift_release(v35);
    *(_QWORD *)(v0 + 136) = v38;
    v39 = *(_QWORD *)(v0 + 16);
    v40 = *(_QWORD *)(v0 + 56);
    v41 = *(_BYTE *)(v0 + 64);
    v43 = *(_QWORD *)(v0 + 72);
    v42 = *(_QWORD *)(v0 + 80);
    v44 = *(_QWORD *)(v0 + 88);
    v45 = *(_QWORD *)(v0 + 96);
    v46 = *(_QWORD *)(v0 + 120);
    v47 = swift_allocObject(&unk_10044C100, 128, 7);
    *(_QWORD *)(v47 + 16) = v39;
    v48 = *(_OWORD *)(v0 + 24);
    *(_OWORD *)(v47 + 24) = v48;
    v94 = *(_OWORD *)(v0 + 40);
    *(_OWORD *)(v47 + 40) = v94;
    *(_QWORD *)(v47 + 56) = v40;
    *(_BYTE *)(v47 + 64) = v41;
    *(_QWORD *)(v47 + 72) = v43;
    *(_QWORD *)(v47 + 80) = v42;
    *(_QWORD *)(v47 + 88) = v44;
    *(_QWORD *)(v47 + 96) = v45;
    v97 = *(_OWORD *)(v0 + 104);
    *(_OWORD *)(v47 + 104) = v97;
    *(_QWORD *)(v47 + 120) = v46;
    swift_retain(v48);
    swift_retain(v94);
    swift_retain(v40);
    swift_retain(v42);
    swift_retain(v97);
    swift_retain(v46);
    v49 = sub_100005574(&qword_10048E0A0);
    v50 = sub_10002FFB8(&qword_10048E0A8, &qword_10048E0A0, (uint64_t)&protocol conformance descriptor for Publishers.Autoconnect<A>);
    *(_QWORD *)(v0 + 232) = Publisher<>.sink(receiveValue:)(sub_100125DEC, v47, v49, v50);
    swift_release(v47);
    swift_release(*(_QWORD *)(v0 + 136));
    v51 = *(int **)(v0 + 96);
    *(_QWORD *)&v97 = (char *)v51 + *v51;
    v52 = (_QWORD *)swift_task_alloc(v51[1]);
    *(_QWORD *)(v0 + 240) = v52;
    *v52 = v0;
    v52[1] = sub_1001064AC;
    return ((uint64_t (*)(void))v97)();
  }
  else
  {
    v54 = v8;
    v99 = v7;
    if (qword_10048C578 != -1)
      swift_once(&qword_10048C578, sub_10002E5A0);
    v55 = *(_QWORD *)(v0 + 176);
    v56 = *(_QWORD *)(v0 + 184);
    v57 = *(_QWORD *)(v0 + 168);
    v58 = sub_1000086B4(v57, (uint64_t)qword_10048E058);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v56, v58, v57);
    v59 = *(_QWORD *)(v0 + 24);
    v60 = *(_QWORD *)(v0 + 40);
    v61 = *(_QWORD *)(v0 + 56);
    v88 = *(_BYTE *)(v0 + 64);
    v62 = *(_QWORD *)(v0 + 80);
    v63 = *(_QWORD *)(v0 + 104);
    v64 = *(_QWORD *)(v0 + 120);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v62);
    swift_retain(v63);
    swift_retain(v64);
    v65 = v99;
    sub_10002ECD0(v99, v54);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v62);
    swift_retain(v63);
    swift_retain(v64);
    v66 = sub_10002ECD0(v99, v54);
    v67 = Logger.logObject.getter(v66);
    type = static os_log_type_t.error.getter(v67);
    v68 = os_log_type_enabled(v67, type);
    v98 = *(_QWORD *)(v0 + 184);
    v92 = *(_QWORD *)(v0 + 176);
    v95 = *(_QWORD *)(v0 + 168);
    if (v68)
    {
      log = v67;
      v69 = swift_slowAlloc(22, -1);
      v86 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v100[0] = v86;
      *(_DWORD *)v69 = 136446466;
      swift_release(v59);
      swift_release(v60);
      swift_release(v61);
      swift_release(v62);
      swift_release(v63);
      swift_release(v64);
      v70 = (char *)ActionType.rawValue.getter(v88);
      *(_QWORD *)(v69 + 4) = sub_100019400(v70, v71, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      swift_release(v59);
      swift_release(v60);
      swift_release(v61);
      swift_release(v62);
      swift_release(v63);
      swift_release(v64);
      *(_WORD *)(v69 + 12) = 2082;
      swift_bridgeObjectRetain();
      v72 = Optional<A>.description.getter(v99, v54);
      v74 = v73;
      sub_10001406C(v99, v54);
      v75 = (char *)v72;
      v65 = v99;
      *(_QWORD *)(v69 + 14) = sub_100019400(v75, v74, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      sub_10001406C(v99, v54);
      sub_10001406C(v99, v54);
      _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s: attempted to execute but was unsupported for reason: %{public}s", (uint8_t *)v69, 0x16u);
      swift_arrayDestroy(v86, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v86, -1, -1);
      swift_slowDealloc(v69, -1, -1);

    }
    else
    {
      swift_release_n(v59, 2);
      swift_release_n(v60, 2);
      swift_release_n(v61, 2);
      swift_release_n(v62, 2);
      swift_release_n(v63, 2);
      swift_release_n(v64, 2);
      sub_10001406C(v99, v54);
      sub_10001406C(v99, v54);

    }
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v98, v95);
    v76 = sub_10002ECE4();
    swift_allocError(&type metadata for ActionError, v76, 0, 0);
    *v77 = v65;
    v77[1] = v54;
    v79 = *(_QWORD *)(v0 + 200);
    v78 = *(_QWORD *)(v0 + 208);
    v81 = *(_QWORD *)(v0 + 184);
    v80 = *(_QWORD *)(v0 + 192);
    v83 = *(_QWORD *)(v0 + 152);
    v82 = *(_QWORD *)(v0 + 160);
    swift_willThrow(v84);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001064AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100125E0C;
  else
    v3 = sub_100106510;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100106510()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 224);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 168);
  AnyCancellable.cancel()();
  v1(v3, v2, v4);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 56);
  v41 = *(_BYTE *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 120);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  v43 = v10;
  v11 = swift_retain(v10);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(_QWORD *)(v0 + 200);
  v16 = *(_QWORD *)(v0 + 168);
  v45 = *(_QWORD *)(v0 + 176);
  if (v14)
  {
    v39 = *(_QWORD *)(v0 + 200);
    v17 = swift_slowAlloc(22, -1);
    v37 = swift_slowAlloc(64, -1);
    v47 = v37;
    *(_DWORD *)v17 = 136446466;
    v18 = (char *)ActionType.rawValue.getter(v41);
    *(_QWORD *)(v17 + 4) = sub_100019400(v18, v19, &v47);
    swift_bridgeObjectRelease();
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v43);
    *(_WORD *)(v17 + 12) = 2082;
    *(_QWORD *)(v17 + 14) = sub_100019400(0, (char *)0xE000000000000000, &v47);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: perform success%{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v16);
  }
  else
  {
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v43);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v15, v16);
  }
  v36 = *(_QWORD *)(v0 + 232);
  v38 = *(_QWORD *)(v0 + 208);
  v40 = *(_QWORD *)(v0 + 200);
  v42 = *(_QWORD *)(v0 + 192);
  v20 = *(_QWORD *)(v0 + 152);
  v44 = *(_QWORD *)(v0 + 184);
  v46 = *(_QWORD *)(v0 + 160);
  v21 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = *(_QWORD *)(v0 + 16);
  v23 = *(_QWORD *)(v0 + 56);
  v24 = *(_BYTE *)(v0 + 64);
  v25 = *(_QWORD *)(v0 + 72);
  v26 = *(_QWORD *)(v0 + 80);
  v27 = *(_QWORD *)(v0 + 88);
  v28 = *(_QWORD *)(v0 + 96);
  v29 = *(_QWORD *)(v0 + 120);
  v30 = swift_allocObject(&unk_10044C128, 144, 7);
  *(_QWORD *)(v30 + 16) = 0;
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = v22;
  v31 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v30 + 40) = v31;
  v34 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v30 + 56) = v34;
  *(_QWORD *)(v30 + 72) = v23;
  *(_BYTE *)(v30 + 80) = v24;
  *(_QWORD *)(v30 + 88) = v25;
  *(_QWORD *)(v30 + 96) = v26;
  *(_QWORD *)(v30 + 104) = v27;
  *(_QWORD *)(v30 + 112) = v28;
  v35 = *(_OWORD *)(v0 + 104);
  *(_OWORD *)(v30 + 120) = v35;
  *(_QWORD *)(v30 + 136) = v29;
  swift_retain(v31);
  swift_retain(v34);
  swift_retain(v23);
  swift_retain(v26);
  swift_retain(v35);
  swift_retain(v29);
  v32 = sub_10002DE80(v20, (uint64_t)&unk_1004924F8, v30);
  swift_release(v32);
  swift_release(v36);
  sub_100008758(v20, (uint64_t *)&unk_100493720);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001068C0(uint64_t a1, char a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *(_BYTE *)(v3 + 256) = a2;
  v4 = sub_100005574((uint64_t *)&unk_100493720);
  *(_QWORD *)(v3 + 152) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005574(&qword_10048E088);
  *(_QWORD *)(v3 + 160) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0, v6);
  *(_QWORD *)(v3 + 168) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 176) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 184) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 192) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 200) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 208) = swift_task_alloc(v9);
  v10 = v2[5];
  *(_OWORD *)(v3 + 80) = v2[4];
  *(_OWORD *)(v3 + 96) = v10;
  *(_OWORD *)(v3 + 112) = v2[6];
  v11 = v2[1];
  *(_OWORD *)(v3 + 16) = *v2;
  *(_OWORD *)(v3 + 32) = v11;
  v12 = v2[3];
  *(_OWORD *)(v3 + 48) = v2[2];
  *(_OWORD *)(v3 + 64) = v12;
  return swift_task_switch(sub_1001069B0, 0, 0);
}

uint64_t sub_1001069B0()
{
  uint64_t v0;
  char v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  double v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  _QWORD *v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  BOOL v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __n128 v84;
  NSObject *log;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  os_log_type_t typea[8];
  os_log_type_t type;
  unsigned __int8 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  _OWORD v100[3];
  char v101;
  uint64_t (*v102)(_QWORD);
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;

  if ((*(_BYTE *)(v0 + 256) & 1) != 0)
    goto LABEL_3;
  v1 = *(_BYTE *)(v0 + 64);
  v2 = *(uint64_t (**)(_QWORD))(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_OWORD *)(v0 + 32);
  v100[0] = *(_OWORD *)(v0 + 16);
  v100[1] = v5;
  v100[2] = *(_OWORD *)(v0 + 48);
  v101 = v1;
  v102 = v2;
  v103 = v3;
  v104 = v4;
  v6 = *(_OWORD *)(v0 + 112);
  v105 = *(_OWORD *)(v0 + 96);
  v106 = v6;
  v7 = v2(v100);
  if (v8 == 1)
  {
LABEL_3:
    if (qword_10048C578 != -1)
      swift_once(&qword_10048C578, sub_10002E5A0);
    v9 = *(_QWORD *)(v0 + 208);
    v10 = *(_QWORD *)(v0 + 168);
    v11 = *(_QWORD *)(v0 + 176);
    v12 = sub_1000086B4(v10, (uint64_t)qword_10048E058);
    *(_QWORD *)(v0 + 216) = v12;
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    *(_QWORD *)(v0 + 224) = v13;
    v13(v9, v12, v10);
    v14 = *(_QWORD *)(v0 + 24);
    v15 = *(_QWORD *)(v0 + 40);
    v16 = *(_QWORD *)(v0 + 56);
    v91 = *(_BYTE *)(v0 + 64);
    v17 = *(_QWORD *)(v0 + 80);
    v18 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 120);
    swift_retain(v14);
    swift_retain(v15);
    swift_retain(v16);
    swift_retain(v17);
    v93 = v18;
    swift_retain(v18);
    v96 = v19;
    v20 = swift_retain(v19);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    v23 = os_log_type_enabled(v21, v22);
    v24 = *(_QWORD *)(v0 + 208);
    v25 = *(_QWORD *)(v0 + 168);
    v26 = *(_QWORD *)(v0 + 176);
    if (v23)
    {
      *(_QWORD *)typea = *(_QWORD *)(v0 + 208);
      v27 = swift_slowAlloc(12, -1);
      v87 = v25;
      v28 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v100[0] = v28;
      *(_DWORD *)v27 = 136446210;
      v29 = (char *)ActionType.rawValue.getter(v91);
      *(_QWORD *)(v27 + 4) = sub_100019400(v29, v30, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      swift_release(v14);
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v93);
      swift_release(v96);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s: performing…", (uint8_t *)v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      (*(void (**)(os_log_type_t *, uint64_t))(v26 + 8))(*(os_log_type_t **)typea, v87);
    }
    else
    {
      swift_release(v14);
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v93);
      swift_release(v96);

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    }
    v31 = *(_QWORD *)(v0 + 160);
    sub_1000087DC(0, (unint64_t *)&qword_10048E090, NSTimer_ptr);
    v32 = *(double *)(v0 + 88);
    v33 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v34 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v31, 1, 1, v34);
    v35 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v33, NSRunLoopCommonModes, v31, v32);

    sub_100008758(v31, &qword_10048E088);
    *(_QWORD *)(v0 + 128) = v35;
    v36 = type metadata accessor for NSTimer.TimerPublisher(0);
    v37 = sub_100006924((unint64_t *)&qword_10048E098, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
    v38 = ConnectablePublisher.autoconnect()(v36, v37);
    swift_release(v35);
    *(_QWORD *)(v0 + 136) = v38;
    v39 = *(_QWORD *)(v0 + 16);
    v40 = *(_QWORD *)(v0 + 56);
    v41 = *(_BYTE *)(v0 + 64);
    v43 = *(_QWORD *)(v0 + 72);
    v42 = *(_QWORD *)(v0 + 80);
    v44 = *(_QWORD *)(v0 + 88);
    v45 = *(_QWORD *)(v0 + 96);
    v46 = *(_QWORD *)(v0 + 120);
    v47 = swift_allocObject(&unk_10044BF20, 128, 7);
    *(_QWORD *)(v47 + 16) = v39;
    v48 = *(_OWORD *)(v0 + 24);
    *(_OWORD *)(v47 + 24) = v48;
    v94 = *(_OWORD *)(v0 + 40);
    *(_OWORD *)(v47 + 40) = v94;
    *(_QWORD *)(v47 + 56) = v40;
    *(_BYTE *)(v47 + 64) = v41;
    *(_QWORD *)(v47 + 72) = v43;
    *(_QWORD *)(v47 + 80) = v42;
    *(_QWORD *)(v47 + 88) = v44;
    *(_QWORD *)(v47 + 96) = v45;
    v97 = *(_OWORD *)(v0 + 104);
    *(_OWORD *)(v47 + 104) = v97;
    *(_QWORD *)(v47 + 120) = v46;
    swift_retain(v48);
    swift_retain(v94);
    swift_retain(v40);
    swift_retain(v42);
    swift_retain(v97);
    swift_retain(v46);
    v49 = sub_100005574(&qword_10048E0A0);
    v50 = sub_10002FFB8(&qword_10048E0A8, &qword_10048E0A0, (uint64_t)&protocol conformance descriptor for Publishers.Autoconnect<A>);
    *(_QWORD *)(v0 + 232) = Publisher<>.sink(receiveValue:)(sub_100125DEC, v47, v49, v50);
    swift_release(v47);
    swift_release(*(_QWORD *)(v0 + 136));
    v51 = *(int **)(v0 + 96);
    *(_QWORD *)&v97 = (char *)v51 + *v51;
    v52 = (_QWORD *)swift_task_alloc(v51[1]);
    *(_QWORD *)(v0 + 240) = v52;
    *v52 = v0;
    v52[1] = sub_100107250;
    return ((uint64_t (*)(void))v97)();
  }
  else
  {
    v54 = v8;
    v99 = v7;
    if (qword_10048C578 != -1)
      swift_once(&qword_10048C578, sub_10002E5A0);
    v55 = *(_QWORD *)(v0 + 176);
    v56 = *(_QWORD *)(v0 + 184);
    v57 = *(_QWORD *)(v0 + 168);
    v58 = sub_1000086B4(v57, (uint64_t)qword_10048E058);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v56, v58, v57);
    v59 = *(_QWORD *)(v0 + 24);
    v60 = *(_QWORD *)(v0 + 40);
    v61 = *(_QWORD *)(v0 + 56);
    v88 = *(_BYTE *)(v0 + 64);
    v62 = *(_QWORD *)(v0 + 80);
    v63 = *(_QWORD *)(v0 + 104);
    v64 = *(_QWORD *)(v0 + 120);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v62);
    swift_retain(v63);
    swift_retain(v64);
    v65 = v99;
    sub_10002ECD0(v99, v54);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v62);
    swift_retain(v63);
    swift_retain(v64);
    v66 = sub_10002ECD0(v99, v54);
    v67 = Logger.logObject.getter(v66);
    type = static os_log_type_t.error.getter(v67);
    v68 = os_log_type_enabled(v67, type);
    v98 = *(_QWORD *)(v0 + 184);
    v92 = *(_QWORD *)(v0 + 176);
    v95 = *(_QWORD *)(v0 + 168);
    if (v68)
    {
      log = v67;
      v69 = swift_slowAlloc(22, -1);
      v86 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v100[0] = v86;
      *(_DWORD *)v69 = 136446466;
      swift_release(v59);
      swift_release(v60);
      swift_release(v61);
      swift_release(v62);
      swift_release(v63);
      swift_release(v64);
      v70 = (char *)ActionType.rawValue.getter(v88);
      *(_QWORD *)(v69 + 4) = sub_100019400(v70, v71, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      swift_release(v59);
      swift_release(v60);
      swift_release(v61);
      swift_release(v62);
      swift_release(v63);
      swift_release(v64);
      *(_WORD *)(v69 + 12) = 2082;
      swift_bridgeObjectRetain();
      v72 = Optional<A>.description.getter(v99, v54);
      v74 = v73;
      sub_10001406C(v99, v54);
      v75 = (char *)v72;
      v65 = v99;
      *(_QWORD *)(v69 + 14) = sub_100019400(v75, v74, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      sub_10001406C(v99, v54);
      sub_10001406C(v99, v54);
      _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s: attempted to execute but was unsupported for reason: %{public}s", (uint8_t *)v69, 0x16u);
      swift_arrayDestroy(v86, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v86, -1, -1);
      swift_slowDealloc(v69, -1, -1);

    }
    else
    {
      swift_release_n(v59, 2);
      swift_release_n(v60, 2);
      swift_release_n(v61, 2);
      swift_release_n(v62, 2);
      swift_release_n(v63, 2);
      swift_release_n(v64, 2);
      sub_10001406C(v99, v54);
      sub_10001406C(v99, v54);

    }
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v98, v95);
    v76 = sub_10002ECE4();
    swift_allocError(&type metadata for ActionError, v76, 0, 0);
    *v77 = v65;
    v77[1] = v54;
    v79 = *(_QWORD *)(v0 + 200);
    v78 = *(_QWORD *)(v0 + 208);
    v81 = *(_QWORD *)(v0 + 184);
    v80 = *(_QWORD *)(v0 + 192);
    v83 = *(_QWORD *)(v0 + 152);
    v82 = *(_QWORD *)(v0 + 160);
    swift_willThrow(v84);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100107250()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100125E0C;
  else
    v3 = sub_1001072B4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001072B4()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 224);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 168);
  AnyCancellable.cancel()();
  v1(v3, v2, v4);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 56);
  v41 = *(_BYTE *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 120);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  v43 = v10;
  v11 = swift_retain(v10);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(_QWORD *)(v0 + 200);
  v16 = *(_QWORD *)(v0 + 168);
  v45 = *(_QWORD *)(v0 + 176);
  if (v14)
  {
    v39 = *(_QWORD *)(v0 + 200);
    v17 = swift_slowAlloc(22, -1);
    v37 = swift_slowAlloc(64, -1);
    v47 = v37;
    *(_DWORD *)v17 = 136446466;
    v18 = (char *)ActionType.rawValue.getter(v41);
    *(_QWORD *)(v17 + 4) = sub_100019400(v18, v19, &v47);
    swift_bridgeObjectRelease();
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v43);
    *(_WORD *)(v17 + 12) = 2082;
    *(_QWORD *)(v17 + 14) = sub_100019400(0, (char *)0xE000000000000000, &v47);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: perform success%{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v16);
  }
  else
  {
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v43);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v15, v16);
  }
  v36 = *(_QWORD *)(v0 + 232);
  v38 = *(_QWORD *)(v0 + 208);
  v40 = *(_QWORD *)(v0 + 200);
  v42 = *(_QWORD *)(v0 + 192);
  v20 = *(_QWORD *)(v0 + 152);
  v44 = *(_QWORD *)(v0 + 184);
  v46 = *(_QWORD *)(v0 + 160);
  v21 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = *(_QWORD *)(v0 + 16);
  v23 = *(_QWORD *)(v0 + 56);
  v24 = *(_BYTE *)(v0 + 64);
  v25 = *(_QWORD *)(v0 + 72);
  v26 = *(_QWORD *)(v0 + 80);
  v27 = *(_QWORD *)(v0 + 88);
  v28 = *(_QWORD *)(v0 + 96);
  v29 = *(_QWORD *)(v0 + 120);
  v30 = swift_allocObject(&unk_10044BF48, 144, 7);
  *(_QWORD *)(v30 + 16) = 0;
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = v22;
  v31 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v30 + 40) = v31;
  v34 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v30 + 56) = v34;
  *(_QWORD *)(v30 + 72) = v23;
  *(_BYTE *)(v30 + 80) = v24;
  *(_QWORD *)(v30 + 88) = v25;
  *(_QWORD *)(v30 + 96) = v26;
  *(_QWORD *)(v30 + 104) = v27;
  *(_QWORD *)(v30 + 112) = v28;
  v35 = *(_OWORD *)(v0 + 104);
  *(_OWORD *)(v30 + 120) = v35;
  *(_QWORD *)(v30 + 136) = v29;
  swift_retain(v31);
  swift_retain(v34);
  swift_retain(v23);
  swift_retain(v26);
  swift_retain(v35);
  swift_retain(v29);
  v32 = sub_10002DE80(v20, (uint64_t)&unk_100492478, v30);
  swift_release(v32);
  swift_release(v36);
  sub_100008758(v20, (uint64_t *)&unk_100493720);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100107664(uint64_t a1, char a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *(_BYTE *)(v3 + 256) = a2;
  v4 = sub_100005574((uint64_t *)&unk_100493720);
  *(_QWORD *)(v3 + 152) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005574(&qword_10048E088);
  *(_QWORD *)(v3 + 160) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0, v6);
  *(_QWORD *)(v3 + 168) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 176) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 184) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 192) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 200) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 208) = swift_task_alloc(v9);
  v10 = v2[5];
  *(_OWORD *)(v3 + 80) = v2[4];
  *(_OWORD *)(v3 + 96) = v10;
  *(_OWORD *)(v3 + 112) = v2[6];
  v11 = v2[1];
  *(_OWORD *)(v3 + 16) = *v2;
  *(_OWORD *)(v3 + 32) = v11;
  v12 = v2[3];
  *(_OWORD *)(v3 + 48) = v2[2];
  *(_OWORD *)(v3 + 64) = v12;
  return swift_task_switch(sub_100107754, 0, 0);
}

uint64_t sub_100107754()
{
  uint64_t v0;
  char v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  double v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  _QWORD *v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  BOOL v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __n128 v84;
  NSObject *log;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  os_log_type_t typea[8];
  os_log_type_t type;
  unsigned __int8 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  _OWORD v100[3];
  char v101;
  uint64_t (*v102)(_QWORD);
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;

  if ((*(_BYTE *)(v0 + 256) & 1) != 0)
    goto LABEL_3;
  v1 = *(_BYTE *)(v0 + 64);
  v2 = *(uint64_t (**)(_QWORD))(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_OWORD *)(v0 + 32);
  v100[0] = *(_OWORD *)(v0 + 16);
  v100[1] = v5;
  v100[2] = *(_OWORD *)(v0 + 48);
  v101 = v1;
  v102 = v2;
  v103 = v3;
  v104 = v4;
  v6 = *(_OWORD *)(v0 + 112);
  v105 = *(_OWORD *)(v0 + 96);
  v106 = v6;
  v7 = v2(v100);
  if (v8 == 1)
  {
LABEL_3:
    if (qword_10048C578 != -1)
      swift_once(&qword_10048C578, sub_10002E5A0);
    v9 = *(_QWORD *)(v0 + 208);
    v10 = *(_QWORD *)(v0 + 168);
    v11 = *(_QWORD *)(v0 + 176);
    v12 = sub_1000086B4(v10, (uint64_t)qword_10048E058);
    *(_QWORD *)(v0 + 216) = v12;
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    *(_QWORD *)(v0 + 224) = v13;
    v13(v9, v12, v10);
    v14 = *(_QWORD *)(v0 + 24);
    v15 = *(_QWORD *)(v0 + 40);
    v16 = *(_QWORD *)(v0 + 56);
    v91 = *(_BYTE *)(v0 + 64);
    v17 = *(_QWORD *)(v0 + 80);
    v18 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 120);
    swift_retain(v14);
    swift_retain(v15);
    swift_retain(v16);
    swift_retain(v17);
    v93 = v18;
    swift_retain(v18);
    v96 = v19;
    v20 = swift_retain(v19);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    v23 = os_log_type_enabled(v21, v22);
    v24 = *(_QWORD *)(v0 + 208);
    v25 = *(_QWORD *)(v0 + 168);
    v26 = *(_QWORD *)(v0 + 176);
    if (v23)
    {
      *(_QWORD *)typea = *(_QWORD *)(v0 + 208);
      v27 = swift_slowAlloc(12, -1);
      v87 = v25;
      v28 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v100[0] = v28;
      *(_DWORD *)v27 = 136446210;
      v29 = (char *)ActionType.rawValue.getter(v91);
      *(_QWORD *)(v27 + 4) = sub_100019400(v29, v30, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      swift_release(v14);
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v93);
      swift_release(v96);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s: performing…", (uint8_t *)v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      (*(void (**)(os_log_type_t *, uint64_t))(v26 + 8))(*(os_log_type_t **)typea, v87);
    }
    else
    {
      swift_release(v14);
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v93);
      swift_release(v96);

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    }
    v31 = *(_QWORD *)(v0 + 160);
    sub_1000087DC(0, (unint64_t *)&qword_10048E090, NSTimer_ptr);
    v32 = *(double *)(v0 + 88);
    v33 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v34 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v31, 1, 1, v34);
    v35 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v33, NSRunLoopCommonModes, v31, v32);

    sub_100008758(v31, &qword_10048E088);
    *(_QWORD *)(v0 + 128) = v35;
    v36 = type metadata accessor for NSTimer.TimerPublisher(0);
    v37 = sub_100006924((unint64_t *)&qword_10048E098, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
    v38 = ConnectablePublisher.autoconnect()(v36, v37);
    swift_release(v35);
    *(_QWORD *)(v0 + 136) = v38;
    v39 = *(_QWORD *)(v0 + 16);
    v40 = *(_QWORD *)(v0 + 56);
    v41 = *(_BYTE *)(v0 + 64);
    v43 = *(_QWORD *)(v0 + 72);
    v42 = *(_QWORD *)(v0 + 80);
    v44 = *(_QWORD *)(v0 + 88);
    v45 = *(_QWORD *)(v0 + 96);
    v46 = *(_QWORD *)(v0 + 120);
    v47 = swift_allocObject(&unk_10044BA70, 128, 7);
    *(_QWORD *)(v47 + 16) = v39;
    v48 = *(_OWORD *)(v0 + 24);
    *(_OWORD *)(v47 + 24) = v48;
    v94 = *(_OWORD *)(v0 + 40);
    *(_OWORD *)(v47 + 40) = v94;
    *(_QWORD *)(v47 + 56) = v40;
    *(_BYTE *)(v47 + 64) = v41;
    *(_QWORD *)(v47 + 72) = v43;
    *(_QWORD *)(v47 + 80) = v42;
    *(_QWORD *)(v47 + 88) = v44;
    *(_QWORD *)(v47 + 96) = v45;
    v97 = *(_OWORD *)(v0 + 104);
    *(_OWORD *)(v47 + 104) = v97;
    *(_QWORD *)(v47 + 120) = v46;
    swift_retain(v48);
    swift_retain(v94);
    swift_retain(v40);
    swift_retain(v42);
    swift_retain(v97);
    swift_retain(v46);
    v49 = sub_100005574(&qword_10048E0A0);
    v50 = sub_10002FFB8(&qword_10048E0A8, &qword_10048E0A0, (uint64_t)&protocol conformance descriptor for Publishers.Autoconnect<A>);
    *(_QWORD *)(v0 + 232) = Publisher<>.sink(receiveValue:)(sub_100125DEC, v47, v49, v50);
    swift_release(v47);
    swift_release(*(_QWORD *)(v0 + 136));
    v51 = *(int **)(v0 + 96);
    *(_QWORD *)&v97 = (char *)v51 + *v51;
    v52 = (_QWORD *)swift_task_alloc(v51[1]);
    *(_QWORD *)(v0 + 240) = v52;
    *v52 = v0;
    v52[1] = sub_100107FF4;
    return ((uint64_t (*)(void))v97)();
  }
  else
  {
    v54 = v8;
    v99 = v7;
    if (qword_10048C578 != -1)
      swift_once(&qword_10048C578, sub_10002E5A0);
    v55 = *(_QWORD *)(v0 + 176);
    v56 = *(_QWORD *)(v0 + 184);
    v57 = *(_QWORD *)(v0 + 168);
    v58 = sub_1000086B4(v57, (uint64_t)qword_10048E058);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v56, v58, v57);
    v59 = *(_QWORD *)(v0 + 24);
    v60 = *(_QWORD *)(v0 + 40);
    v61 = *(_QWORD *)(v0 + 56);
    v88 = *(_BYTE *)(v0 + 64);
    v62 = *(_QWORD *)(v0 + 80);
    v63 = *(_QWORD *)(v0 + 104);
    v64 = *(_QWORD *)(v0 + 120);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v62);
    swift_retain(v63);
    swift_retain(v64);
    v65 = v99;
    sub_10002ECD0(v99, v54);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v62);
    swift_retain(v63);
    swift_retain(v64);
    v66 = sub_10002ECD0(v99, v54);
    v67 = Logger.logObject.getter(v66);
    type = static os_log_type_t.error.getter(v67);
    v68 = os_log_type_enabled(v67, type);
    v98 = *(_QWORD *)(v0 + 184);
    v92 = *(_QWORD *)(v0 + 176);
    v95 = *(_QWORD *)(v0 + 168);
    if (v68)
    {
      log = v67;
      v69 = swift_slowAlloc(22, -1);
      v86 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v100[0] = v86;
      *(_DWORD *)v69 = 136446466;
      swift_release(v59);
      swift_release(v60);
      swift_release(v61);
      swift_release(v62);
      swift_release(v63);
      swift_release(v64);
      v70 = (char *)ActionType.rawValue.getter(v88);
      *(_QWORD *)(v69 + 4) = sub_100019400(v70, v71, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      swift_release(v59);
      swift_release(v60);
      swift_release(v61);
      swift_release(v62);
      swift_release(v63);
      swift_release(v64);
      *(_WORD *)(v69 + 12) = 2082;
      swift_bridgeObjectRetain();
      v72 = Optional<A>.description.getter(v99, v54);
      v74 = v73;
      sub_10001406C(v99, v54);
      v75 = (char *)v72;
      v65 = v99;
      *(_QWORD *)(v69 + 14) = sub_100019400(v75, v74, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      sub_10001406C(v99, v54);
      sub_10001406C(v99, v54);
      _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s: attempted to execute but was unsupported for reason: %{public}s", (uint8_t *)v69, 0x16u);
      swift_arrayDestroy(v86, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v86, -1, -1);
      swift_slowDealloc(v69, -1, -1);

    }
    else
    {
      swift_release_n(v59, 2);
      swift_release_n(v60, 2);
      swift_release_n(v61, 2);
      swift_release_n(v62, 2);
      swift_release_n(v63, 2);
      swift_release_n(v64, 2);
      sub_10001406C(v99, v54);
      sub_10001406C(v99, v54);

    }
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v98, v95);
    v76 = sub_10002ECE4();
    swift_allocError(&type metadata for ActionError, v76, 0, 0);
    *v77 = v65;
    v77[1] = v54;
    v79 = *(_QWORD *)(v0 + 200);
    v78 = *(_QWORD *)(v0 + 208);
    v81 = *(_QWORD *)(v0 + 184);
    v80 = *(_QWORD *)(v0 + 192);
    v83 = *(_QWORD *)(v0 + 152);
    v82 = *(_QWORD *)(v0 + 160);
    swift_willThrow(v84);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100107FF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100125E0C;
  else
    v3 = sub_100108058;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100108058()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 224);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 168);
  AnyCancellable.cancel()();
  v1(v3, v2, v4);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 56);
  v41 = *(_BYTE *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 120);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  v43 = v10;
  v11 = swift_retain(v10);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(_QWORD *)(v0 + 200);
  v16 = *(_QWORD *)(v0 + 168);
  v45 = *(_QWORD *)(v0 + 176);
  if (v14)
  {
    v39 = *(_QWORD *)(v0 + 200);
    v17 = swift_slowAlloc(22, -1);
    v37 = swift_slowAlloc(64, -1);
    v47 = v37;
    *(_DWORD *)v17 = 136446466;
    v18 = (char *)ActionType.rawValue.getter(v41);
    *(_QWORD *)(v17 + 4) = sub_100019400(v18, v19, &v47);
    swift_bridgeObjectRelease();
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v43);
    *(_WORD *)(v17 + 12) = 2082;
    *(_QWORD *)(v17 + 14) = sub_100019400(0, (char *)0xE000000000000000, &v47);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: perform success%{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v16);
  }
  else
  {
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v43);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v15, v16);
  }
  v36 = *(_QWORD *)(v0 + 232);
  v38 = *(_QWORD *)(v0 + 208);
  v40 = *(_QWORD *)(v0 + 200);
  v42 = *(_QWORD *)(v0 + 192);
  v20 = *(_QWORD *)(v0 + 152);
  v44 = *(_QWORD *)(v0 + 184);
  v46 = *(_QWORD *)(v0 + 160);
  v21 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = *(_QWORD *)(v0 + 16);
  v23 = *(_QWORD *)(v0 + 56);
  v24 = *(_BYTE *)(v0 + 64);
  v25 = *(_QWORD *)(v0 + 72);
  v26 = *(_QWORD *)(v0 + 80);
  v27 = *(_QWORD *)(v0 + 88);
  v28 = *(_QWORD *)(v0 + 96);
  v29 = *(_QWORD *)(v0 + 120);
  v30 = swift_allocObject(&unk_10044BA98, 144, 7);
  *(_QWORD *)(v30 + 16) = 0;
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = v22;
  v31 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v30 + 40) = v31;
  v34 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v30 + 56) = v34;
  *(_QWORD *)(v30 + 72) = v23;
  *(_BYTE *)(v30 + 80) = v24;
  *(_QWORD *)(v30 + 88) = v25;
  *(_QWORD *)(v30 + 96) = v26;
  *(_QWORD *)(v30 + 104) = v27;
  *(_QWORD *)(v30 + 112) = v28;
  v35 = *(_OWORD *)(v0 + 104);
  *(_OWORD *)(v30 + 120) = v35;
  *(_QWORD *)(v30 + 136) = v29;
  swift_retain(v31);
  swift_retain(v34);
  swift_retain(v23);
  swift_retain(v26);
  swift_retain(v35);
  swift_retain(v29);
  v32 = sub_10002DE80(v20, (uint64_t)&unk_100492340, v30);
  swift_release(v32);
  swift_release(v36);
  sub_100008758(v20, (uint64_t *)&unk_100493720);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100108408(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  *(_QWORD *)(v2 + 1240) = v1;
  *(_BYTE *)(v2 + 1362) = a1;
  v3 = sub_100005574((uint64_t *)&unk_100493720);
  *(_QWORD *)(v2 + 1248) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100005574(&qword_10048E088);
  *(_QWORD *)(v2 + 1256) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0, v5);
  *(_QWORD *)(v2 + 1264) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v2 + 1272) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 1280) = swift_task_alloc(v8);
  *(_QWORD *)(v2 + 1288) = swift_task_alloc(v8);
  *(_QWORD *)(v2 + 1296) = swift_task_alloc(v8);
  *(_QWORD *)(v2 + 1304) = swift_task_alloc(v8);
  return swift_task_switch(sub_1001084DC, 0, 0);
}

uint64_t sub_1001084DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  char *v19;
  char *v20;
  char *v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  double v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  _QWORD *v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __n128 v75;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  uint64_t v79[2];

  if ((*(_BYTE *)(v0 + 1362) & 1) != 0 || (v1 = (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 1240) + 144))(), v2 == 1))
  {
    if (qword_10048C578 != -1)
      swift_once(&qword_10048C578, sub_10002E5A0);
    v3 = *(_QWORD *)(v0 + 1304);
    v4 = *(_QWORD *)(v0 + 1272);
    v5 = *(_QWORD *)(v0 + 1264);
    v6 = *(_QWORD *)(v0 + 1240);
    v7 = sub_1000086B4(v5, (uint64_t)qword_10048E058);
    *(_QWORD *)(v0 + 1312) = v7;
    v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    *(_QWORD *)(v0 + 1320) = v8;
    v8(v3, v7, v5);
    v9 = sub_100014A7C(v6, v0 + 16, &qword_10048DCF0);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter();
    v12 = os_log_type_enabled(v10, v11);
    v13 = *(_QWORD *)(v0 + 1304);
    v14 = *(_QWORD *)(v0 + 1272);
    v15 = *(_QWORD *)(v0 + 1264);
    if (v12)
    {
      v16 = swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v79[0] = v17;
      *(_DWORD *)v16 = 136446210;
      v18 = *(_BYTE *)(v0 + 153);
      sub_100008758(v0 + 16, &qword_10048DCF0);
      v19 = (char *)ActionType.rawValue.getter(v18);
      v21 = v20;
      *(_QWORD *)(v16 + 4) = sub_100019400(v19, v20, v79);
      swift_bridgeObjectRelease(v21);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}s: performing…", (uint8_t *)v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {
      sub_100008758(v0 + 16, &qword_10048DCF0);
    }

    v22 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v22(v13, v15);
    *(_QWORD *)(v0 + 1328) = v22;
    v23 = *(_QWORD *)(v0 + 1256);
    v24 = *(_QWORD *)(v0 + 1240);
    sub_1000087DC(0, (unint64_t *)&qword_10048E090, NSTimer_ptr);
    v25 = *(double *)(v24 + 160);
    v26 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v27 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v23, 1, 1, v27);
    v28 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v26, NSRunLoopCommonModes, v23, v25);

    sub_100008758(v23, &qword_10048E088);
    *(_QWORD *)(v0 + 1232) = v28;
    v29 = type metadata accessor for NSTimer.TimerPublisher(0);
    v30 = sub_100006924((unint64_t *)&qword_10048E098, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
    v31 = ConnectablePublisher.autoconnect()(v29, v30);
    swift_release(v28);
    *(_QWORD *)(v0 + 1224) = v31;
    sub_100014A7C(v24, v0 + 616, &qword_10048DCF0);
    v32 = swift_allocObject(&unk_10044BAE8, 216, 7);
    v33 = *(_OWORD *)(v0 + 792);
    *(_OWORD *)(v32 + 176) = *(_OWORD *)(v0 + 776);
    *(_OWORD *)(v32 + 192) = v33;
    *(_QWORD *)(v32 + 208) = *(_QWORD *)(v0 + 808);
    v34 = *(_OWORD *)(v0 + 728);
    *(_OWORD *)(v32 + 112) = *(_OWORD *)(v0 + 712);
    *(_OWORD *)(v32 + 128) = v34;
    v35 = *(_OWORD *)(v0 + 760);
    *(_OWORD *)(v32 + 144) = *(_OWORD *)(v0 + 744);
    *(_OWORD *)(v32 + 160) = v35;
    v36 = *(_OWORD *)(v0 + 664);
    *(_OWORD *)(v32 + 48) = *(_OWORD *)(v0 + 648);
    *(_OWORD *)(v32 + 64) = v36;
    v37 = *(_OWORD *)(v0 + 696);
    *(_OWORD *)(v32 + 80) = *(_OWORD *)(v0 + 680);
    *(_OWORD *)(v32 + 96) = v37;
    v38 = *(_OWORD *)(v0 + 632);
    *(_OWORD *)(v32 + 16) = *(_OWORD *)(v0 + 616);
    *(_OWORD *)(v32 + 32) = v38;
    v39 = sub_100005574(&qword_10048E0A0);
    v40 = sub_10002FFB8(&qword_10048E0A8, &qword_10048E0A0, (uint64_t)&protocol conformance descriptor for Publishers.Autoconnect<A>);
    *(_QWORD *)(v0 + 1336) = Publisher<>.sink(receiveValue:)(sub_100124E48, v32, v39, v40);
    swift_release(v32);
    swift_release(*(_QWORD *)(v0 + 1224));
    v41 = *(int **)(v24 + 168);
    v77 = (int *)((char *)v41 + *v41);
    v42 = (_QWORD *)swift_task_alloc(v41[1]);
    *(_QWORD *)(v0 + 1344) = v42;
    *v42 = v0;
    v42[1] = sub_100108BB0;
    return ((uint64_t (*)(uint64_t, _QWORD))v77)(v0 + 1360, *(_QWORD *)(v0 + 1240));
  }
  else
  {
    v44 = v1;
    v45 = v2;
    if (qword_10048C578 != -1)
      swift_once(&qword_10048C578, sub_10002E5A0);
    v46 = *(_QWORD *)(v0 + 1280);
    v47 = *(_QWORD *)(v0 + 1272);
    v48 = *(_QWORD *)(v0 + 1264);
    v49 = *(_QWORD *)(v0 + 1240);
    v50 = sub_1000086B4(v48, (uint64_t)qword_10048E058);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v46, v50, v48);
    sub_100014A7C(v49, v0 + 216, &qword_10048DCF0);
    sub_10002ECD0(v44, v45);
    v51 = swift_bridgeObjectRetain();
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.error.getter();
    v54 = os_log_type_enabled(v52, v53);
    v55 = *(_QWORD *)(v0 + 1280);
    v56 = *(_QWORD *)(v0 + 1272);
    v57 = *(_QWORD *)(v0 + 1264);
    if (v54)
    {
      v78 = *(_QWORD *)(v0 + 1264);
      v58 = swift_slowAlloc(22, -1);
      v59 = swift_slowAlloc(64, -1);
      v79[0] = v59;
      *(_DWORD *)v58 = 136446466;
      v76 = v55;
      v60 = *(_BYTE *)(v0 + 353);
      sub_100008758(v0 + 216, &qword_10048DCF0);
      v61 = (char *)ActionType.rawValue.getter(v60);
      v63 = v62;
      *(_QWORD *)(v58 + 4) = sub_100019400(v61, v62, v79);
      swift_bridgeObjectRelease(v63);
      *(_WORD *)(v58 + 12) = 2082;
      swift_bridgeObjectRetain();
      v64 = (char *)Optional<A>.description.getter(v44, v45);
      v66 = v65;
      sub_10001406C(v44, v45);
      *(_QWORD *)(v58 + 14) = sub_100019400(v64, v66, v79);
      swift_bridgeObjectRelease(v66);
      sub_10001406C(v44, v45);
      sub_10001406C(v44, v45);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "%{public}s: attempted to execute but was unsupported for reason: %{public}s", (uint8_t *)v58, 0x16u);
      swift_arrayDestroy(v59, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v58, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v76, v78);
    }
    else
    {
      sub_100008758(v0 + 216, &qword_10048DCF0);
      sub_10001406C(v44, v45);
      sub_10001406C(v44, v45);

      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v57);
    }
    v67 = sub_10002ECE4();
    swift_allocError(&type metadata for ActionError, v67, 0, 0);
    *v68 = v44;
    v68[1] = v45;
    v69 = *(_QWORD *)(v0 + 1304);
    v70 = *(_QWORD *)(v0 + 1296);
    v71 = *(_QWORD *)(v0 + 1288);
    v72 = *(_QWORD *)(v0 + 1280);
    v73 = *(_QWORD *)(v0 + 1256);
    v74 = *(_QWORD *)(v0 + 1248);
    swift_willThrow(v75);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100108BB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1344);
  *(_QWORD *)(*(_QWORD *)v1 + 1352) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100108F88;
  else
    v3 = sub_100108C14;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100108C14()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  char *v14;
  char *v15;
  char *v16;
  Swift::String v17;
  void *object;
  char *v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  char *v46[2];

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1320);
  v2 = *(_QWORD *)(v0 + 1312);
  v3 = *(_QWORD *)(v0 + 1296);
  v4 = *(_QWORD *)(v0 + 1264);
  v5 = *(_QWORD *)(v0 + 1240);
  AnyCancellable.cancel()();
  v1(v3, v2, v4);
  v6 = sub_100014A7C(v5, v0 + 816, &qword_10048DCF0);
  v7 = *(_BYTE *)(v0 + 1360);
  v8 = Logger.logObject.getter(v6);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = *(_QWORD *)(v0 + 1296);
    v43 = *(_QWORD *)(v0 + 1264);
    v44 = *(void (**)(uint64_t, uint64_t))(v0 + 1328);
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    v45 = v12;
    *(_DWORD *)v11 = 136446466;
    v13 = *(_BYTE *)(v0 + 953);
    sub_100008758(v0 + 816, &qword_10048DCF0);
    v14 = (char *)ActionType.rawValue.getter(v13);
    v16 = v15;
    *(_QWORD *)(v11 + 4) = sub_100019400(v14, v15, &v45);
    swift_bridgeObjectRelease(v16);
    *(_WORD *)(v11 + 12) = 2082;
    v46[0] = 0;
    v46[1] = (char *)0xE000000000000000;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease(v46[1]);
    strcpy((char *)v46, " with result: ");
    HIBYTE(v46[1]) = -18;
    *(_BYTE *)(v0 + 1361) = v7;
    v17._countAndFlagsBits = String.init<A>(describing:)(v0 + 1361, &type metadata for Actions.DeleteOrRemoveDownload.Choice);
    object = v17._object;
    String.append(_:)(v17);
    swift_bridgeObjectRelease(object);
    v19 = v46[1];
    *(_QWORD *)(v11 + 14) = sub_100019400(v46[0], v46[1], &v45);
    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s: perform success%{public}s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    v44(v10, v43);
  }
  else
  {
    v20 = *(void (**)(uint64_t, uint64_t))(v0 + 1328);
    v21 = *(_QWORD *)(v0 + 1296);
    v22 = *(_QWORD *)(v0 + 1264);
    sub_100008758(v0 + 816, &qword_10048DCF0);

    v20(v21, v22);
  }
  v23 = *(_QWORD *)(v0 + 1336);
  v24 = *(_QWORD *)(v0 + 1304);
  v25 = *(_QWORD *)(v0 + 1296);
  v26 = *(_QWORD *)(v0 + 1288);
  v27 = *(_QWORD *)(v0 + 1280);
  v28 = *(_QWORD *)(v0 + 1256);
  v29 = *(_QWORD *)(v0 + 1248);
  v30 = *(_QWORD *)(v0 + 1240);
  v31 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v29, 1, 1, v31);
  sub_100014A7C(v30, v0 + 416, &qword_10048DCF0);
  v32 = *(_BYTE *)(v0 + 1360);
  v33 = swift_allocObject(&unk_10044BB10, 233, 7);
  *(_QWORD *)(v33 + 16) = 0;
  *(_QWORD *)(v33 + 24) = 0;
  v34 = *(_OWORD *)(v0 + 592);
  *(_OWORD *)(v33 + 192) = *(_OWORD *)(v0 + 576);
  *(_OWORD *)(v33 + 208) = v34;
  *(_QWORD *)(v33 + 224) = *(_QWORD *)(v0 + 608);
  v35 = *(_OWORD *)(v0 + 528);
  *(_OWORD *)(v33 + 128) = *(_OWORD *)(v0 + 512);
  *(_OWORD *)(v33 + 144) = v35;
  v36 = *(_OWORD *)(v0 + 560);
  *(_OWORD *)(v33 + 160) = *(_OWORD *)(v0 + 544);
  *(_OWORD *)(v33 + 176) = v36;
  v37 = *(_OWORD *)(v0 + 464);
  *(_OWORD *)(v33 + 64) = *(_OWORD *)(v0 + 448);
  *(_OWORD *)(v33 + 80) = v37;
  v38 = *(_OWORD *)(v0 + 496);
  *(_OWORD *)(v33 + 96) = *(_OWORD *)(v0 + 480);
  *(_OWORD *)(v33 + 112) = v38;
  v39 = *(_OWORD *)(v0 + 432);
  *(_OWORD *)(v33 + 32) = *(_OWORD *)(v0 + 416);
  *(_OWORD *)(v33 + 48) = v39;
  *(_BYTE *)(v33 + 232) = v32;
  v40 = sub_10002DE80(v29, (uint64_t)&unk_100492358, v33);
  swift_release(v40);
  swift_release(v23);
  sub_100008758(v29, (uint64_t *)&unk_100493720);
  v41 = *(unsigned __int8 *)(v0 + 1360);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v41);
}

uint64_t sub_100108F88()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __n128 v23;
  uint64_t v24;
  double (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37[2];

  v1 = *(_QWORD *)(v0 + 1352);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v0 + 1320);
  v3 = *(_QWORD *)(v0 + 1312);
  v4 = *(_QWORD *)(v0 + 1288);
  v5 = *(_QWORD *)(v0 + 1264);
  v6 = *(_QWORD *)(v0 + 1240);
  v7 = swift_release(*(_QWORD *)(v0 + 1336));
  v2(v4, v3, v5, v7);
  sub_100014A7C(v6, v0 + 1016, &qword_10048DCF0);
  swift_errorRetain(v1);
  v8 = swift_errorRetain(v1);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = *(_QWORD *)(v0 + 1352);
    v35 = *(_QWORD *)(v0 + 1288);
    v36 = *(void (**)(uint64_t, uint64_t))(v0 + 1328);
    v12 = *(_QWORD *)(v0 + 1264);
    v13 = swift_slowAlloc(22, -1);
    v14 = swift_slowAlloc(64, -1);
    v37[0] = v14;
    *(_DWORD *)v13 = 136446466;
    v15 = *(_BYTE *)(v0 + 1153);
    sub_100008758(v0 + 1016, &qword_10048DCF0);
    v16 = (char *)ActionType.rawValue.getter(v15);
    v18 = v17;
    *(_QWORD *)(v13 + 4) = sub_100019400(v16, v17, v37);
    swift_bridgeObjectRelease(v18);
    *(_WORD *)(v13 + 12) = 2082;
    *(_QWORD *)(v0 + 1216) = v11;
    swift_errorRetain(v11);
    v19 = sub_100005574((uint64_t *)&unk_1004911F0);
    v20 = (char *)String.init<A>(describing:)(v0 + 1216, v19);
    v22 = v21;
    *(_QWORD *)(v13 + 14) = sub_100019400(v20, v21, v37);
    swift_bridgeObjectRelease(v22);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s: perform failed: %{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    v36(v35, v12);
  }
  else
  {
    v24 = *(_QWORD *)(v0 + 1352);
    v25 = *(double (**)(uint64_t, uint64_t))(v0 + 1328);
    v26 = *(_QWORD *)(v0 + 1288);
    v27 = *(_QWORD *)(v0 + 1264);
    sub_100008758(v0 + 1016, &qword_10048DCF0);
    swift_errorRelease(v24);
    swift_errorRelease(v24);

    v23.n128_f64[0] = v25(v26, v27);
  }
  v28 = *(_QWORD *)(v0 + 1304);
  v29 = *(_QWORD *)(v0 + 1296);
  v30 = *(_QWORD *)(v0 + 1288);
  v31 = *(_QWORD *)(v0 + 1280);
  v32 = *(_QWORD *)(v0 + 1256);
  v33 = *(_QWORD *)(v0 + 1248);
  swift_willThrow(v23);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

