uint64_t sub_100081098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v8[21] = v17;
  v8[22] = v18;
  v8[19] = a7;
  v8[20] = a8;
  v8[17] = a5;
  v8[18] = a6;
  v8[15] = a3;
  v8[16] = a4;
  v8[13] = a1;
  v8[14] = a2;
  v9 = type metadata accessor for PlaybackIntentDescriptor.IntentType(0);
  v8[23] = v9;
  v8[24] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PlaybackIntentDescriptor(0);
  v8[25] = v10;
  v11 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[26] = swift_task_alloc(v11);
  v8[27] = swift_task_alloc(v11);
  v12 = type metadata accessor for MusicPlayer.PlayabilityStatus(0);
  v8[28] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v8[29] = v13;
  v8[30] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000057B4(&qword_1004BB5B8);
  v8[31] = v14;
  v8[32] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(_QWORD *)(*(_QWORD *)(sub_1000057B4(&qword_1004BB470) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[33] = swift_task_alloc(v15);
  v8[34] = swift_task_alloc(v15);
  return swift_task_switch(sub_1000811C0, 0, 0);
}

uint64_t sub_1000811C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  void (*v33)(uint64_t, uint64_t);
  unint64_t v34;
  void *v35;
  NSString v36;
  Class isa;
  uint64_t v38;
  int *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  _QWORD *v45;
  uint64_t v46;
  id v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;

  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 232);
  v6 = *(_QWORD *)(v0 + 104);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v1, enum case for MusicPlayer.PlayabilityStatus.playable(_:), v4);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v1, 0, 1, v4);
  v7 = v3 + *(int *)(v2 + 48);
  sub_10000FEB4(v6, v3, &qword_1004BB470);
  sub_10000FEB4(v1, v7, &qword_1004BB470);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v8(v3, 1, v4) != 1)
  {
    v10 = *(_QWORD *)(v0 + 224);
    sub_10000FEB4(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264), &qword_1004BB470);
    v11 = v8(v7, 1, v10);
    v12 = *(_QWORD *)(v0 + 264);
    v13 = *(_QWORD *)(v0 + 272);
    if (v11 != 1)
    {
      v27 = *(_QWORD *)(v0 + 256);
      v29 = *(_QWORD *)(v0 + 232);
      v28 = *(_QWORD *)(v0 + 240);
      v30 = *(_QWORD *)(v0 + 224);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32))(v28, v7, v30);
      v31 = sub_100004D8C(&qword_1004BB5C0, (uint64_t (*)(uint64_t))&type metadata accessor for MusicPlayer.PlayabilityStatus, (uint64_t)&protocol conformance descriptor for MusicPlayer.PlayabilityStatus);
      v32 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v28, v30, v31);
      v33 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
      v33(v28, v30);
      sub_10000FE2C(v13, &qword_1004BB470);
      v33(v12, v30);
      sub_10000FE2C(v27, &qword_1004BB470);
      if ((v32 & 1) != 0)
        goto LABEL_9;
LABEL_7:
      v17 = *(_QWORD *)(v0 + 168);
      v16 = *(_QWORD *)(v0 + 176);
      v18 = *(_QWORD *)(v0 + 112);
      *(_QWORD *)(v0 + 40) = v17;
      *(_QWORD *)(v0 + 48) = *(_QWORD *)(v16 + 8);
      v19 = sub_1000407CC((_QWORD *)(v0 + 16));
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v19, v18, v17);
      *(_BYTE *)(v0 + 56) = 0;
      _s9MusicCore27SubscriptionUpsellPresenterV7present3foryAC9PlacementO_tFZ_0(v0 + 16);
      sub_10003492C(v0 + 16);
      v20 = *(_QWORD *)(v0 + 264);
      v21 = *(_QWORD *)(v0 + 256);
      v22 = *(_QWORD *)(v0 + 240);
      v24 = *(_QWORD *)(v0 + 208);
      v23 = *(_QWORD *)(v0 + 216);
      v25 = *(_QWORD *)(v0 + 192);
      swift_task_dealloc(*(_QWORD *)(v0 + 272));
      swift_task_dealloc(v20);
      swift_task_dealloc(v21);
      swift_task_dealloc(v22);
      swift_task_dealloc(v23);
      swift_task_dealloc(v24);
      swift_task_dealloc(v25);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v14 = *(_QWORD *)(v0 + 224);
    v15 = *(_QWORD *)(v0 + 232);
    sub_10000FE2C(*(_QWORD *)(v0 + 272), &qword_1004BB470);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v12, v14);
LABEL_6:
    sub_10000FE2C(*(_QWORD *)(v0 + 256), &qword_1004BB5B8);
    goto LABEL_7;
  }
  v9 = *(_QWORD *)(v0 + 224);
  sub_10000FE2C(*(_QWORD *)(v0 + 272), &qword_1004BB470);
  if (v8(v7, 1, v9) != 1)
    goto LABEL_6;
  sub_10000FE2C(*(_QWORD *)(v0 + 256), &qword_1004BB470);
LABEL_9:
  v34 = *(_QWORD *)(v0 + 152);
  v35 = *(void **)(v0 + 120);
  v36 = String._bridgeToObjectiveC()();
  objc_msgSend(v35, "setPlayActivityFeatureName:", v36);

  if (v34 >> 60 == 15)
    isa = 0;
  else
    isa = Data._bridgeToObjectiveC()().super.isa;
  v38 = *(_QWORD *)(v0 + 208);
  v40 = *(_QWORD **)(v0 + 192);
  v39 = *(int **)(v0 + 200);
  v42 = *(_QWORD *)(v0 + 176);
  v41 = *(_QWORD *)(v0 + 184);
  v43 = *(_QWORD *)(v0 + 168);
  v44 = *(void **)(v0 + 120);
  v49 = *(_QWORD *)(v0 + 112);
  v50 = *(_QWORD *)(v0 + 216);
  objc_msgSend(v44, "setPlayActivityRecommendationData:", isa);

  *v40 = v44;
  swift_storeEnumTagMultiPayload(v40, v41, 0);
  *(_QWORD *)(v0 + 88) = v43;
  *(_QWORD *)(v0 + 96) = *(_QWORD *)(v42 + 8);
  v45 = sub_1000407CC((_QWORD *)(v0 + 64));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v45, v49, v43);
  v46 = v38 + v39[7];
  *(_QWORD *)(v46 + 32) = 0;
  *(_OWORD *)v46 = 0u;
  *(_OWORD *)(v46 + 16) = 0u;
  *(_BYTE *)(v38 + v39[8]) = 0;
  *(_BYTE *)(v38 + v39[9]) = 0;
  sub_1000847FC((uint64_t)v40, v38);
  v47 = v44;
  sub_100084840(v0 + 64, v46);
  *(_QWORD *)(v38 + v39[5]) = 2;
  *(_QWORD *)(v38 + v39[6]) = 0;
  sub_10000FE2C(v0 + 64, &qword_1004BF910);
  sub_100034960((uint64_t)v40, type metadata accessor for PlaybackIntentDescriptor.IntentType);
  sub_100084888(v38, v50, type metadata accessor for PlaybackIntentDescriptor);
  v48 = (_QWORD *)swift_task_alloc(dword_1004BF5A4);
  *(_QWORD *)(v0 + 280) = v48;
  *v48 = v0;
  v48[1] = sub_100081600;
  return PlaybackController.add(_:route:)(*(_QWORD *)(v0 + 216), 0);
}

uint64_t sub_100081600()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 280));
  if (v0)
  {
    swift_errorRelease(v0);
    v2 = sub_100085278;
  }
  else
  {
    v2 = sub_10008166C;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10008166C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_100034960(*(_QWORD *)(v0 + 216), type metadata accessor for PlaybackIntentDescriptor);
  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 216);
  v6 = *(_QWORD *)(v0 + 192);
  swift_task_dealloc(*(_QWORD *)(v0 + 272));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100081700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[11] = a3;
  v4[12] = a4;
  v4[9] = a1;
  v4[10] = a2;
  v5 = sub_1000057B4(&qword_1004B99B0);
  v4[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000057B4(&qword_1004B9D88);
  v4[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Actions.MetricsReportingContext(0);
  v4[15] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[16] = v8;
  v4[17] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000817AC, 0, 0);
}

uint64_t sub_1000817AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 112);
  sub_10000FEB4(*(_QWORD *)(v0 + 72), v3, &qword_1004B9D88);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10000FE2C(*(_QWORD *)(v0 + 112), &qword_1004B9D88);
    v4 = *(_QWORD *)(v0 + 104);
    v5 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc(*(_QWORD *)(v0 + 136));
    swift_task_dealloc(v5);
    swift_task_dealloc(v4);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 104);
    v8 = *(_QWORD *)(v0 + 88);
    sub_100084888(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 136), type metadata accessor for Actions.MetricsReportingContext);
    *(_QWORD *)(v0 + 144) = MusicItem.metricsTargetIdentifier.getter(v8);
    *(_QWORD *)(v0 + 152) = v9;
    v10 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v7, 1, 1, v10);
    v11 = sub_1000057B4(&qword_1004B9DD0);
    inited = swift_initStackObject(v11, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_1003C64D0;
    *(_QWORD *)(inited + 32) = MusicItem.metricsContentType.getter(v8);
    *(_QWORD *)(inited + 40) = v13;
    *(_BYTE *)(inited + 48) = 0;
    *(_QWORD *)(v0 + 160) = sub_100053464(inited);
    *(_QWORD *)(v0 + 168) = v14;
    *(_QWORD *)(v0 + 176) = v15;
    *(_WORD *)(v0 + 192) = v16;
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), &type metadata for MetricsEvent.Click.ActionDetails.Key);
    v17 = type metadata accessor for MainActor(0);
    *(_QWORD *)(v0 + 184) = static MainActor.shared.getter(v18);
    v19 = dispatch thunk of Actor.unownedExecutor.getter(v17, &protocol witness table for MainActor);
    return swift_task_switch(sub_100081970, v19, v20);
  }
}

uint64_t sub_100081970()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 176);
  v3 = *(void **)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 152);
  v6 = *(uint64_t **)(v0 + 136);
  v7 = *(_QWORD *)(v0 + 104);
  v8 = *(unsigned __int16 *)(v0 + 192);
  swift_release(*(_QWORD *)(v0 + 184));
  sub_100053874(v5, v4, 5, 24, v7, v3, v2, v1, v8, v6);
  sub_10002F650(v3, v2, v1, v8, SBYTE1(v8));
  swift_bridgeObjectRelease(v4);
  sub_10000FE2C(v7, &qword_1004B99B0);
  return swift_task_switch(sub_10007A9CC, 0, 0);
}

uint64_t sub_100081A40(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t DynamicType;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  void *v25;
  BOOL v26;
  _QWORD *v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  unint64_t v37;
  ValueMetadata *v38;
  _UNKNOWN **v39;
  _BYTE v40[24];

  v12 = type metadata accessor for MusicPlayer.PlayabilityStatus(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (uint64_t *)((char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = (uint64_t *)(a1 + OBJC_IVAR____TtC9MusicCore18PlaybackController_player);
  swift_beginAccess(v16, v40, 0, 0);
  v17 = *v16;
  if (!v17)
  {
    v36 = 0;
    v37 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    v29._countAndFlagsBits = 0xD000000000000025;
    v29._object = (void *)0x80000001003A7E60;
    String.append(_:)(v29);
    DefaultStringInterpolation.appendInterpolation<A>(_:)(a2, a5);
    return (uint64_t)v36;
  }
  v33 = a6;
  v34 = a5;
  v38 = &type metadata for Player.InsertCommand;
  v39 = &protocol witness table for Player.InsertCommand;
  v36 = a4;
  v37 = (unint64_t)a3;
  v18 = sub_1000096A0(&v36, (uint64_t)&type metadata for Player.InsertCommand);
  DynamicType = swift_getDynamicType(v18, &type metadata for Player.InsertCommand, 1);
  v20 = (uint64_t)v39;
  v21 = a4;
  sub_1000728C0(a3);
  v22 = v21;
  sub_1000728C0(a3);
  v23 = v22;
  sub_1000728C0(a3);
  swift_retain(v17);
  v24 = sub_100197B00(DynamicType, v20);
  if (!v24)
  {
    sub_10000970C(&v36);

    sub_100072634(a3);
    goto LABEL_7;
  }
  v25 = (void *)v24;
  v26 = MPCPlayerResponse.canPerform(_:)((uint64_t)&v36);

  sub_10000970C(&v36);
  sub_100072634(a3);
  if (!v26)
  {
LABEL_7:
    v36 = 0;
    v37 = 0xE000000000000000;
    _StringGuts.grow(_:)(34);
    v30._object = (void *)0x80000001003A7E90;
    v30._countAndFlagsBits = 0xD000000000000020;
    String.append(_:)(v30);
    v35 = a3;
    _print_unlocked<A, B>(_:_:)(&v35, &v36, &type metadata for Player.InsertCommand.Location, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);

    sub_100072634(a3);
    swift_release(v17);
    return (uint64_t)v36;
  }
  v27 = Player.state<A>(for:)(a2, v34, v33);
  MusicItemState.playabilityStatus.getter(v15);
  swift_release(v27);
  v28 = sub_10007E998();

  swift_release(v17);
  sub_100072634(a3);
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
  return v28;
}

uint64_t sub_100081CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;

  v8[14] = a7;
  v8[15] = a8;
  v8[12] = a5;
  v8[13] = a6;
  v8[10] = a3;
  v8[11] = a4;
  v8[8] = a1;
  v8[9] = a2;
  v9 = type metadata accessor for Notice(0);
  v8[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100081D54, 0, 0);
}

uint64_t sub_100081D54()
{
  uint64_t v0;
  unint64_t v1;
  void *v2;
  NSString v3;
  Class isa;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(void **)(v0 + 64);
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setPlayActivityFeatureName:", v3);

  if (v1 >> 60 == 15)
    isa = 0;
  else
    isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(*(id *)(v0 + 64), "setPlayActivityRecommendationData:", isa);

  v5 = (_QWORD *)swift_task_alloc(dword_1004BF56C);
  *(_QWORD *)(v0 + 136) = v5;
  *v5 = v0;
  v5[1] = sub_100081E14;
  return PlaybackController.insert(_:location:)(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 112));
}

uint64_t sub_100081E14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100082014;
  else
    v3 = sub_100081E78;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100081E78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;

  sub_10000FEB4(*(_QWORD *)(v0 + 120), v0 + 16, &qword_1004B9DF8);
  v1 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 152) = v1;
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 112);
    *(_QWORD *)(v0 + 160) = *(_QWORD *)(v0 + 48);
    *(_QWORD *)(v0 + 168) = sub_1000096A0((_QWORD *)(v0 + 16), v1);
    Player.InsertCommand.Location.notice.getter(v2);
    v3 = type metadata accessor for MainActor(0);
    *(_QWORD *)(v0 + 176) = static MainActor.shared.getter(v4);
    v5 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
    return swift_task_switch(sub_100081F68, v5, v6);
  }
  else
  {
    sub_10000FE2C(v0 + 16, &qword_1004B9DF8);
    swift_task_dealloc(*(_QWORD *)(v0 + 128));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100081F68()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v0[19];
  v1 = v0[20];
  v3 = v0[16];
  swift_release(v0[22]);
  sub_1000A45E0(v3, 0, v2, v1);
  sub_100034960(v3, type metadata accessor for Notice);
  return swift_task_switch(sub_100081FD8, 0, 0);
}

uint64_t sub_100081FD8()
{
  uint64_t v0;

  sub_10000970C((_QWORD *)(v0 + 16));
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100082014()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v15;

  if (qword_1004B8A30 != -1)
    swift_once(&qword_1004B8A30, sub_1000A6660);
  v1 = *(_QWORD *)(v0 + 144);
  v2 = type metadata accessor for Logger(0);
  sub_100039D34(v2, (uint64_t)static Logger.actions);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 144);
  if (v6)
  {
    v8 = swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v15 = v9;
    *(_DWORD *)v8 = 136446210;
    *(_QWORD *)(v0 + 56) = v7;
    swift_errorRetain(v7);
    v10 = sub_1000057B4((uint64_t *)&unk_1004BD690);
    v11 = (char *)String.init<A>(describing:)(v0 + 56, v10);
    v13 = v12;
    *(_QWORD *)(v8 + 4) = sub_1000393D0(v11, v12, &v15);
    swift_bridgeObjectRelease(v13);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to perform add to queue with error=%{public}s", (uint8_t *)v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 144));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Player.InsertCommand.Location.notice.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for Notice.Variant(0);
  __chkstk_darwin(v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)(a1 - 1) >= 3)
    v6 = 3;
  else
    v6 = (a1 + 3);
  swift_storeEnumTagMultiPayload(v5, v3, v6);
  static Notice.variant(_:)((uint64_t)v5);
  return sub_100034960((uint64_t)v5, type metadata accessor for Notice.Variant);
}

uint64_t sub_100082284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[12] = a4;
  v5[13] = a5;
  v5[10] = a2;
  v5[11] = a3;
  v5[9] = a1;
  v6 = sub_1000057B4(&qword_1004B99B0);
  v5[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000057B4(&qword_1004B9D88);
  v5[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Actions.MetricsReportingContext(0);
  v5[16] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[17] = v9;
  v5[18] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100082334, 0, 0);
}

uint64_t sub_100082334()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 120);
  sub_10000FEB4(*(_QWORD *)(v0 + 72), v3, &qword_1004B9D88);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10000FE2C(*(_QWORD *)(v0 + 120), &qword_1004B9D88);
    v4 = *(_QWORD *)(v0 + 112);
    v5 = *(_QWORD *)(v0 + 120);
    swift_task_dealloc(*(_QWORD *)(v0 + 144));
    swift_task_dealloc(v5);
    swift_task_dealloc(v4);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 96);
    v8 = *(_QWORD *)(v0 + 88);
    sub_100084888(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 144), type metadata accessor for Actions.MetricsReportingContext);
    *(_QWORD *)(v0 + 152) = MusicItem.metricsTargetIdentifier.getter(v7);
    *(_QWORD *)(v0 + 160) = v9;
    if (v8 >= 4)
    {
      return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001BLL, 0x80000001003A7E40, "MusicCore/Actions+Playback.swift", 32, 2, 443, 0);
    }
    else
    {
      *(_BYTE *)(v0 + 202) = 0x19041A1Bu >> (8 * v8);
      v10 = *(_QWORD *)(v0 + 112);
      v11 = *(_QWORD *)(v0 + 96);
      v12 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v10, 1, 1, v12);
      v13 = sub_1000057B4(&qword_1004B9DD0);
      inited = swift_initStackObject(v13, v0 + 16);
      *(_OWORD *)(inited + 16) = xmmword_1003C64D0;
      *(_QWORD *)(inited + 32) = MusicItem.metricsContentType.getter(v11);
      *(_QWORD *)(inited + 40) = v15;
      *(_BYTE *)(inited + 48) = 0;
      *(_QWORD *)(v0 + 168) = sub_100053464(inited);
      *(_QWORD *)(v0 + 176) = v16;
      *(_QWORD *)(v0 + 184) = v17;
      *(_WORD *)(v0 + 200) = v18;
      swift_setDeallocating(inited);
      swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), &type metadata for MetricsEvent.Click.ActionDetails.Key);
      v19 = type metadata accessor for MainActor(0);
      *(_QWORD *)(v0 + 192) = static MainActor.shared.getter(v20);
      v21 = dispatch thunk of Actor.unownedExecutor.getter(v19, &protocol witness table for MainActor);
      return swift_task_switch(sub_100082580, v21, v22);
    }
  }
}

uint64_t sub_100082580()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(void **)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 160);
  v6 = *(uint64_t **)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 112);
  v8 = *(unsigned __int8 *)(v0 + 202);
  v9 = *(unsigned __int16 *)(v0 + 200);
  swift_release(*(_QWORD *)(v0 + 192));
  sub_100053874(v5, v4, 5, v8, v7, v3, v2, v1, v9, v6);
  sub_10002F650(v3, v2, v1, v9, SBYTE1(v9));
  swift_bridgeObjectRelease(v4);
  sub_10000FE2C(v7, &qword_1004B99B0);
  return swift_task_switch(sub_100082658, 0, 0);
}

uint64_t sub_100082658()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100034960(*(_QWORD *)(v0 + 144), type metadata accessor for Actions.MetricsReportingContext);
  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Actions.Play.Context.menuItemTitle.getter()
{
  return sub_10007A140(2036427856, 0xE400000000000000);
}

uint64_t (*Actions.Play.Context.menuItemImage.getter())()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_allocObject(&unk_10046DC40, 32, 7);
  *(_QWORD *)(v0 + 16) = 2036427888;
  *(_QWORD *)(v0 + 24) = 0xE400000000000000;
  v1 = swift_allocObject(&unk_10046DC68, 32, 7);
  *(_QWORD *)(v1 + 16) = 2036427888;
  *(_QWORD *)(v1 + 24) = 0xE400000000000000;
  return sub_10002F6E4;
}

uint64_t sub_100082738(uint64_t a1, uint64_t a2)
{
  return sub_10007A304(a1, a2, 2036427856, 0xE400000000000000);
}

uint64_t (*sub_100082748())()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_allocObject(&unk_10046E098, 32, 7);
  *(_QWORD *)(v0 + 16) = 2036427888;
  *(_QWORD *)(v0 + 24) = 0xE400000000000000;
  v1 = swift_allocObject(&unk_10046E0C0, 32, 7);
  *(_QWORD *)(v1 + 16) = 2036427888;
  *(_QWORD *)(v1 + 24) = 0xE400000000000000;
  return sub_10002F6E4;
}

uint64_t Actions.Queue.Context.menuItemTitle.getter()
{
  uint64_t *v0;

  return sub_100083EC8(*v0);
}

uint64_t Actions.Queue.Context.menuItemSubtitle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
  return v1;
}

uint64_t (*Actions.Queue.Context.menuItemImage.getter())()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  sub_1000725D0(v0, &v6);
  sub_1000725D0(&v6, &v7);
  if (v7)
    v1 = 0xD000000000000028;
  else
    v1 = 0xD000000000000029;
  if (v7)
    v2 = 0x80000001003A7D90;
  else
    v2 = 0x80000001003A7DC0;
  v3 = swift_allocObject(&unk_10046DC90, 32, 7);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = swift_allocObject(&unk_10046DCB8, 32, 7);
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v2;
  swift_bridgeObjectRetain();
  return sub_10002F6E4;
}

uint64_t (*sub_1000828C8())()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*v0)
    v1 = 0xD000000000000028;
  else
    v1 = 0xD000000000000029;
  if (*v0)
    v2 = 0x80000001003A7D90;
  else
    v2 = 0x80000001003A7DC0;
  v3 = swift_allocObject(&unk_10046E048, 32, 7);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = swift_allocObject(&unk_10046E070, 32, 7);
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v2;
  swift_bridgeObjectRetain(v2);
  return sub_10002F6E4;
}

uint64_t sub_10008298C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1003CA7D8);
  v5 = swift_getKeyPath(&unk_1003CA800);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_100082A08(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  void *v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1003CA7D8);
  v5 = swift_getKeyPath(&unk_1003CA800);
  v8 = v2;
  v6 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v8, v3, KeyPath, v5);
}

double sub_100082A7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  double result;
  uint64_t v5;
  _BYTE v6[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v5 = Strong;
    sub_100082C6C();
    *(_QWORD *)&result = swift_release(v5).n128_u64[0];
  }
  return result;
}

uint64_t sub_100082AD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];

  v3 = type metadata accessor for MusicPlayer.PreviewCapabilityStatus(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v17[-v8 - 8];
  a2 += 16;
  swift_beginAccess(a2, v17, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v11 = result;
    v12 = dispatch thunk of MusicPlayer.ItemState.previewCapabilityStatus.getter();
    __chkstk_darwin(v12);
    v13 = type metadata accessor for Song(0);
    *(&v16 - 2) = v13;
    *(&v16 - 1) = (uint64_t)&protocol witness table for Song;
    KeyPath = swift_getKeyPath(&unk_1003CA9A0);
    __chkstk_darwin(KeyPath);
    *(&v16 - 2) = v13;
    *(&v16 - 1) = (uint64_t)&protocol witness table for Song;
    v15 = swift_getKeyPath(&unk_1003CA9D8);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
    swift_retain(v11);
    static Published.subscript.setter(v7, v11, KeyPath, v15);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    return swift_release(v11);
  }
  return result;
}

uint64_t sub_100082C6C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __n128 v21;
  __n128 v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t (**v27)(char *, char *, uint64_t, __n128);
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t v32;
  uint64_t v33;
  id v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  void (*v42)(char *, uint64_t);
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  char *v57;
  char *v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  void (*v66)(char *, char *, uint64_t);
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  _QWORD *v74;
  void (*v75)(char *, char *, uint64_t);
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  _QWORD *v83;
  char *v85;
  __n128 v86;
  uint64_t (**v87)(char *, char *, uint64_t, __n128);
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  void (*v99)(char *, _QWORD, uint64_t);
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t (**v111)(char *, char *, uint64_t, __n128);
  void (*v112)(char *, char *, uint64_t);
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  _QWORD *v117;
  id v118[3];

  v113 = type metadata accessor for Song(0);
  v111 = *(uint64_t (***)(char *, char *, uint64_t, __n128))(v113 - 8);
  __chkstk_darwin(v113);
  v110 = (char *)&v107 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for MusicPlayer.PlayabilityStatus.UnplayableReason(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v107 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v107 - v7;
  v9 = type metadata accessor for MusicPlayer.PlayabilityStatus(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v114 = (char *)&v107 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v115 = (char *)&v107 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v107 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v107 - v18;
  v117 = v0;
  v20 = v0[2];
  v21 = swift_retain(v20);
  dispatch thunk of MusicPlayer.ItemState.playabilityStatus.getter(v21);
  v22 = swift_release(v20);
  v23 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v116 = v19;
  v112 = v23;
  ((void (*)(char *, char *, uint64_t, __n128))v23)(v17, v19, v9, v22);
  v24 = (*(uint64_t (**)(char *, uint64_t))(v10 + 88))(v17, v9);
  v25 = enum case for MusicPlayer.PlayabilityStatus.unplayable(_:);
  if ((_DWORD)v24 == enum case for MusicPlayer.PlayabilityStatus.unplayable(_:))
  {
    (*(void (**)(char *, uint64_t))(v10 + 96))(v17, v9);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v17, v2);
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for MusicPlayer.PlayabilityStatus.UnplayableReason.subscriptionRequired(_:), v2);
    v26 = static MusicPlayer.PlayabilityStatus.UnplayableReason.== infix(_:_:)(v8, v6);
    v27 = *(uint64_t (***)(char *, char *, uint64_t, __n128))(v3 + 8);
    ((void (*)(char *, uint64_t))v27)(v6, v2);
    v28 = v10;
    v29 = v8;
    v111 = v27;
    if ((v26 & 1) != 0)
    {
      v30 = v117[3];
      KeyPath = swift_getKeyPath(&unk_1003CA9F8);
      v32 = swift_getKeyPath(&unk_1003CAA20);
      swift_retain(v30);
      static Published.subscript.getter(v118, v33, KeyPath, v32);
      swift_release(v30);
      swift_release(KeyPath);
      swift_release(v32);
      v34 = v118[0];

      if (v34)
      {
        v35 = v115;
        v36 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v28 + 104))(v115, enum case for MusicPlayer.PlayabilityStatus.playable(_:), v9);
        __chkstk_darwin(v36);
        v37 = v113;
        *(&v107 - 2) = v113;
        *(&v107 - 1) = (uint64_t)&protocol witness table for Song;
        v38 = swift_getKeyPath(&unk_1003CA948);
        __chkstk_darwin(v38);
        *(&v107 - 2) = v37;
        *(&v107 - 1) = (uint64_t)&protocol witness table for Song;
        v39 = swift_getKeyPath(&unk_1003CA980);
        v40 = v114;
        v112(v114, v35, v9);
        v41 = v117;
        swift_retain(v117);
        static Published.subscript.setter(v40, v41, v38, v39);
        v42 = *(void (**)(char *, uint64_t))(v28 + 8);
        v42(v35, v9);
        ((void (*)(char *, uint64_t))v111)(v8, v2);
        v43 = v116;
        return ((uint64_t (*)(char *, uint64_t))v42)(v43, v9);
      }
    }
    v65 = v115;
    v17 = v116;
    v66 = v112;
    v67 = ((uint64_t (*)(char *, char *, uint64_t))v112)(v115, v116, v9);
    __chkstk_darwin(v67);
    v108 = v2;
    v68 = v66;
    v69 = v113;
    *(&v107 - 2) = v113;
    *(&v107 - 1) = (uint64_t)&protocol witness table for Song;
    v70 = swift_getKeyPath(&unk_1003CA948);
    v110 = v29;
    v71 = v28;
    __chkstk_darwin(v70);
    *(&v107 - 2) = v69;
    *(&v107 - 1) = (uint64_t)&protocol witness table for Song;
    v72 = swift_getKeyPath(&unk_1003CA980);
    v73 = v114;
    v68(v114, v65, v9);
    v74 = v117;
    swift_retain(v117);
    static Published.subscript.setter(v73, v74, v70, v72);
    v42 = *(void (**)(char *, uint64_t))(v71 + 8);
    v42(v65, v9);
    ((void (*)(char *, uint64_t))v111)(v110, v108);
LABEL_12:
    v43 = v17;
    return ((uint64_t (*)(char *, uint64_t))v42)(v43, v9);
  }
  v44 = v24;
  v109 = v10;
  if ((_DWORD)v24 != enum case for MusicPlayer.PlayabilityStatus.playable(_:))
  {
    v75 = v112;
    v77 = v115;
    v76 = v116;
    v78 = ((uint64_t (*)(char *, char *, uint64_t))v112)(v115, v116, v9);
    __chkstk_darwin(v78);
    v79 = v113;
    *(&v107 - 2) = v113;
    *(&v107 - 1) = (uint64_t)&protocol witness table for Song;
    v80 = swift_getKeyPath(&unk_1003CA948);
    __chkstk_darwin(v80);
    *(&v107 - 2) = v79;
    *(&v107 - 1) = (uint64_t)&protocol witness table for Song;
    v81 = swift_getKeyPath(&unk_1003CA980);
    v82 = v114;
    v75(v114, v77, v9);
    v83 = v117;
    swift_retain(v117);
    static Published.subscript.setter(v82, v83, v80, v81);
    v42 = *(void (**)(char *, uint64_t))(v109 + 8);
    v42(v77, v9);
    v42(v76, v9);
    goto LABEL_12;
  }
  v108 = v2;
  v45 = v117;
  v46 = v117[3];
  v47 = swift_getKeyPath(&unk_1003CA9F8);
  v48 = swift_getKeyPath(&unk_1003CAA20);
  swift_retain(v46);
  static Published.subscript.getter(v118, v49, v47, v48);
  swift_release(v46);
  swift_release(v47);
  swift_release(v48);
  v50 = v118[0];

  if (!v50)
    goto LABEL_9;
  v51 = v45[3];
  v52 = swift_getKeyPath(&unk_1003CAA40);
  v53 = swift_getKeyPath(&unk_1003CAA68);
  swift_retain(v51);
  static Published.subscript.getter(v118, v54, v52, v53);
  swift_release(v51);
  swift_release(v52);
  swift_release(v53);
  if (((uint64_t)v118[0] & 1) != 0
    || (v55 = v45[3],
        swift_retain(v55),
        v56 = Player.supportsDelegation.getter(),
        swift_release(v55),
        (v56 & 1) != 0))
  {
LABEL_9:
    v58 = v115;
    v57 = v116;
    v59 = v112;
    v60 = ((uint64_t (*)(char *, char *, uint64_t))v112)(v115, v116, v9);
    __chkstk_darwin(v60);
    v61 = v113;
    *(&v107 - 2) = v113;
    *(&v107 - 1) = (uint64_t)&protocol witness table for Song;
    v62 = swift_getKeyPath(&unk_1003CA948);
    __chkstk_darwin(v62);
    *(&v107 - 2) = v61;
    *(&v107 - 1) = (uint64_t)&protocol witness table for Song;
    v63 = swift_getKeyPath(&unk_1003CA980);
    v64 = v114;
    v59(v114, v58, v9);
    swift_retain(v45);
    static Published.subscript.setter(v64, v45, v62, v63);
    v42 = *(void (**)(char *, uint64_t))(v109 + 8);
    v42(v58, v9);
    v43 = v57;
  }
  else
  {
    v85 = (char *)v45 + *(_QWORD *)(*v45 + 120);
    v86 = swift_beginAccess(v85, v118, 0, 0);
    v88 = v110;
    v87 = v111;
    v89 = v113;
    v90 = v111[2](v110, v85, v113, v86);
    Song.catalogID.getter(v90);
    v92 = v91;
    ((void (*)(char *, uint64_t))v87[1])(v88, v89);
    if (v92)
    {
      swift_bridgeObjectRelease(v92);
      v93 = v109;
      v94 = v115;
      v95 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v109 + 104))(v115, v44, v9);
      __chkstk_darwin(v95);
      *(&v107 - 2) = v89;
      *(&v107 - 1) = (uint64_t)&protocol witness table for Song;
      v96 = swift_getKeyPath(&unk_1003CA948);
      __chkstk_darwin(v96);
      *(&v107 - 2) = v89;
      *(&v107 - 1) = (uint64_t)&protocol witness table for Song;
      v97 = swift_getKeyPath(&unk_1003CA980);
      v98 = v114;
      v112(v114, v94, v9);
      swift_retain(v45);
      static Published.subscript.setter(v98, v45, v96, v97);
      v42 = *(void (**)(char *, uint64_t))(v93 + 8);
      v42(v94, v9);
    }
    else
    {
      v99 = *(void (**)(char *, _QWORD, uint64_t))(v3 + 104);
      v100 = v89;
      v101 = v115;
      v99(v115, enum case for MusicPlayer.PlayabilityStatus.UnplayableReason.contentUnavailable(_:), v108);
      v102 = v109;
      v103 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v109 + 104))(v101, v25, v9);
      __chkstk_darwin(v103);
      *(&v107 - 2) = v100;
      *(&v107 - 1) = (uint64_t)&protocol witness table for Song;
      v104 = swift_getKeyPath(&unk_1003CA948);
      __chkstk_darwin(v104);
      *(&v107 - 2) = v100;
      *(&v107 - 1) = (uint64_t)&protocol witness table for Song;
      v105 = swift_getKeyPath(&unk_1003CA980);
      v106 = v114;
      v112(v114, v101, v9);
      swift_retain(v45);
      static Published.subscript.setter(v106, v45, v104, v105);
      v42 = *(void (**)(char *, uint64_t))(v102 + 8);
      v42(v101, v9);
    }
    v43 = v116;
  }
  return ((uint64_t (*)(_QWORD, _QWORD))v42)(v43, v9);
}

uint64_t sub_100083610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(sub_1000057B4(&qword_1004BB470) - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v13 = *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(v1 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = type metadata accessor for MusicPlayer.PlayabilityStatus(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v0 + v4, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0 + v4, v8);
  v10 = (v4 + v13 + v6) & ~v6;
  v11 = v10 + v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v10, v1);
  return swift_deallocObject(v0, v11, v3 | v6 | 7);
}

unint64_t sub_1000836F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(sub_1000057B4(&qword_1004BB470) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  return sub_100080930(v0 + v4, v0 + ((v4 + *(_QWORD *)(v3 + 64) + v5) & ~v5), v1, v2);
}

uint64_t sub_100083760()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(sub_1000057B4(&qword_1004BB470) - 8);
  v17 = v1;
  v18 = *(unsigned __int8 *)(v2 + 80);
  v3 = (v18 + 32) & ~v18;
  v4 = *(_QWORD *)(v1 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v3 + *(_QWORD *)(v2 + 64) + v5) & ~v5;
  v7 = (*(_QWORD *)(v4 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v10 = v0 + v3;
  v11 = type metadata accessor for MusicPlayer.PlayabilityStatus(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v6, v17);

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v8 + 8));
  v13 = *(_QWORD *)(v0 + v9 + 8);
  if (v13 >> 60 != 15)
    sub_10000FC28(*(_QWORD *)(v0 + v9), v13);
  v14 = (v9 + 23) & 0xFFFFFFFFFFFFFFF8;
  v15 = v14 + 8;

  return swift_deallocObject(v0, v15, v18 | v5 | 7);
}

uint64_t sub_1000838A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(sub_1000057B4(&qword_1004BB470) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v2 - 8);
  v6 = (v4 + *(_QWORD *)(v3 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v10 = v0 + v4;
  v11 = v0 + v6;
  v12 = *(_QWORD *)(v0 + v7);
  v13 = *(_QWORD *)(v0 + v8);
  v14 = *(_QWORD *)(v0 + v8 + 8);
  v15 = *(_QWORD *)(v0 + v9);
  v16 = *(_QWORD *)(v0 + v9 + 8);
  v17 = *(_QWORD *)(v0 + ((v9 + 23) & 0xFFFFFFFFFFFFF8));
  v18 = (_QWORD *)swift_task_alloc(dword_1004BB47C);
  *(_QWORD *)(v1 + 16) = v18;
  *v18 = v1;
  v18[1] = sub_10002F6EC;
  return sub_100081098(v10, v11, v12, v13, v14, v15, v16, v17);
}

uint64_t sub_1000839B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(sub_1000057B4(&qword_1004B9D88) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  v7 = v0 + v5;
  v8 = v0 + ((v5 + *(_QWORD *)(v4 + 64) + v6) & ~v6);
  v9 = (_QWORD *)swift_task_alloc(dword_1004BB48C);
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = sub_10002F6EC;
  return sub_100081700(v7, v8, v2, v3);
}

uint64_t sub_100083A5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  v6 = *(void **)(v0 + v5);
  if ((unint64_t)v6 >= 4)

  v7 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 + 8;

  return swift_deallocObject(v0, v8, v3 | 7);
}

uint64_t sub_100083AF4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = v0[2];
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100081A40(v0[4], (uint64_t)v0 + v3, *(void **)((char *)v0 + v4), *(void **)((char *)v0 + ((v4 + 15) & 0xFFFFFFFFFFFFF8)), v1, v0[3]);
}

uint64_t sub_100083B34()
{
  uint64_t v0;
  unint64_t v1;
  void *v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  v1 = *(_QWORD *)(v0 + 48);
  if (v1 >> 60 != 15)
    sub_10000FC28(*(_QWORD *)(v0 + 40), v1);

  v2 = *(void **)(v0 + 64);
  if ((unint64_t)v2 >= 4)

  if (*(_QWORD *)(v0 + 96))
    sub_10000970C((_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 112, 7);
}

uint64_t sub_100083BA0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v6 = v0[6];
  v7 = v0[7];
  v8 = v0[8];
  v9 = (_QWORD *)swift_task_alloc(dword_1004BB4AC);
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = sub_10002F6EC;
  return sub_100081CF0(v2, v3, v4, v5, v6, v7, v8, (uint64_t)(v0 + 9));
}

uint64_t sub_100083C30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int *v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(sub_1000057B4(&qword_1004B9D88) - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v1 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v4 + *(_QWORD *)(v2 + 64) + v6) & ~v6;
  v8 = (*(_QWORD *)(v5 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = v0 + v4;
  v10 = (int *)type metadata accessor for Actions.MetricsReportingContext(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v10 - 1) + 48))(v9, 1, v10))
  {
    v21 = v1;
    v11 = *(_QWORD *)(v9 + 8);
    if (v11 >= 0xA)
      swift_bridgeObjectRelease(v11);
    v12 = v9 + v10[5];
    v13 = (int *)type metadata accessor for MetricsEvent.Page(0);
    v20 = v12;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v13 - 1) + 48))(v12, 1, v13))
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v12 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v12 + 24));
      v14 = v12 + v13[6];
      v15 = type metadata accessor for URL(0);
      v18 = *(_QWORD *)(v15 - 8);
      v19 = v15;
      if (!(*(unsigned int (**)(uint64_t, uint64_t))(v18 + 48))(v14, 1))
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v14, v19);
      swift_bridgeObjectRelease(*(_QWORD *)(v20 + v13[7]));
      swift_bridgeObjectRelease(*(_QWORD *)(v20 + v13[8] + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v20 + v13[10] + 8));
    }
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + v10[6] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + v10[7]));
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + v10[8]));
    v1 = v21;
  }
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v7, v1);
  v16 = *(void **)(v0 + v8);
  if ((unint64_t)v16 >= 4)

  return swift_deallocObject(v0, v8 + 8, v3 | v6 | 7);
}

uint64_t sub_100083E0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(sub_1000057B4(&qword_1004B9D88) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v2 - 8);
  v7 = (v5 + *(_QWORD *)(v4 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = v0 + v5;
  v9 = v0 + v7;
  v10 = *(_QWORD *)(v0 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFF8));
  v11 = (_QWORD *)swift_task_alloc(dword_1004BB4BC);
  *(_QWORD *)(v1 + 16) = v11;
  *v11 = v1;
  v11[1] = sub_10002F6EC;
  return sub_100082284(v8, v9, v10, v2, v3);
}

uint64_t sub_100083EC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[16];

  v2 = type metadata accessor for Locale(0);
  __chkstk_darwin(v2);
  v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for String.LocalizationValue(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v11 = &v17[-v10];
  if (a1 == 3)
  {
    v12 = 0x7466412079616C50;
    v13 = 0xEA00000000007265;
  }
  else if (a1 == 2)
  {
    v12 = 0x51206F7420646441;
    v13 = 0xEC00000065756575;
  }
  else
  {
    if (a1)
      v12 = 0x73614C2079616C50;
    else
      v12 = 0x78654E2079616C50;
    v13 = 0xE900000000000074;
  }
  String.LocalizationValue.init(stringLiteral:)(v12, v13);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(v9, v11, v5);
  if (qword_1004B8A10 != -1)
    swift_once(&qword_1004B8A10, sub_10002B2B8);
  v14 = qword_1004F4630;
  static Locale.current.getter((id)qword_1004F4630);
  v15 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, v14, v4, 0, 0, 256);
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v5);
  return v15;
}

uint64_t _s9MusicCore7ActionsO7PreviewO7ContextV13menuItemTitleSSvg_0()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for Locale(0);
  __chkstk_darwin(v0);
  v2 = &v13[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for String.LocalizationValue(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v9 = &v13[-v8];
  String.LocalizationValue.init(stringLiteral:)(0xD000000000000013, 0x80000001003A7DF0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 16))(v7, v9, v3);
  if (qword_1004B8A10 != -1)
    swift_once(&qword_1004B8A10, sub_10002B2B8);
  v10 = qword_1004F4630;
  static Locale.current.getter((id)qword_1004F4630);
  v11 = String.init(localized:table:bundle:locale:comment:)(v7, 0, 0, v10, v2, 0, 0, 256);
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v9, v3);
  return v11;
}

void sub_100084208(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[16];
  uint64_t v16;
  unint64_t v17;

  v4 = *a1;
  v5 = (uint64_t)(a1 + 1);
  v6 = a1[1];
  v7 = a1[2];
  v13 = *(_OWORD *)(a1 + 5);
  v14 = *(_OWORD *)(a1 + 3);
  v12 = *(_OWORD *)(a1 + 7);
  sub_1000725D0(a1, &v16);
  sub_1000725D0(&v16, &v17);
  if (v17 >= 4)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001BLL, 0x80000001003A7E40, "MusicCore/Actions+Playback.swift", 32, 2, 218, 0);
    __break(1u);
  }
  else
  {
    v8 = 0x22232021u >> (8 * v17);
    sub_10000FD10(v5, (uint64_t)v15, &qword_1004BAE98);
    v9 = a1[4];
    v10 = a1[6];
    v11 = a1[8];
    sub_1000795C8((uint64_t)v15);
    *(_QWORD *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v6;
    *(_QWORD *)(a2 + 16) = v7;
    *(_OWORD *)(a2 + 24) = v14;
    *(_OWORD *)(a2 + 40) = v13;
    *(_OWORD *)(a2 + 56) = v12;
    *(_BYTE *)(a2 + 72) = v8;
    *(_QWORD *)(a2 + 80) = sub_1000807E4;
    *(_QWORD *)(a2 + 88) = 0;
    *(_QWORD *)(a2 + 96) = 0x4014000000000000;
    *(_QWORD *)(a2 + 104) = &unk_1004BB5A8;
    *(_QWORD *)(a2 + 112) = 0;
    *(_QWORD *)(a2 + 120) = &unk_1004BB5B0;
    *(_QWORD *)(a2 + 128) = 0;
    swift_retain(v9);
    swift_retain(v10);
    swift_retain(v11);
  }
}

uint64_t sub_100084378()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000843A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(sub_1000057B4(&qword_1004B9D88) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  v7 = v0 + v5;
  v8 = v0 + ((v5 + *(_QWORD *)(v4 + 64) + v6) & ~v6);
  v9 = (_QWORD *)swift_task_alloc(dword_1004BB4CC);
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = sub_10002F6EC;
  return sub_10007DA4C(v7, v8, v2, v3);
}

ValueMetadata *type metadata accessor for Actions.Preview()
{
  return &type metadata for Actions.Preview;
}

ValueMetadata *type metadata accessor for Actions.Preview.Context()
{
  return &type metadata for Actions.Preview.Context;
}

ValueMetadata *type metadata accessor for Actions.CreateStation()
{
  return &type metadata for Actions.CreateStation;
}

ValueMetadata *type metadata accessor for Actions.CreateStation.Context()
{
  return &type metadata for Actions.CreateStation.Context;
}

ValueMetadata *type metadata accessor for Actions.Play()
{
  return &type metadata for Actions.Play;
}

ValueMetadata *type metadata accessor for Actions.Play.Context()
{
  return &type metadata for Actions.Play.Context;
}

ValueMetadata *type metadata accessor for Actions.Queue()
{
  return &type metadata for Actions.Queue;
}

uint64_t _s5QueueO7ContextVwxx(uint64_t a1)
{
  if (*(_QWORD *)a1 >= 4uLL)

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  swift_release(*(_QWORD *)(a1 + 32));
  swift_release(*(_QWORD *)(a1 + 48));
  return swift_release(*(_QWORD *)(a1 + 64));
}

uint64_t _s5QueueO7ContextVwcp(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;

  v4 = *(void **)a2;
  if (*(_QWORD *)a2 >= 4uLL)
    v5 = v4;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_OWORD *)(a2 + 16);
  v10 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = v10;
  v8 = *(_QWORD *)(a2 + 64);
  v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 64) = v8;
  swift_bridgeObjectRetain(v7);
  swift_retain(v10);
  swift_retain(v11);
  swift_retain(v8);
  return a1;
}

uint64_t _s5QueueO7ContextVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  if (*(_QWORD *)a1 >= 4uLL)
  {
    if ((unint64_t)v5 >= 4)
    {
      *(_QWORD *)a1 = v5;
      v7 = v5;

      goto LABEL_8;
    }

    v5 = *(void **)a2;
    goto LABEL_6;
  }
  if ((unint64_t)v5 < 4)
  {
LABEL_6:
    *(_QWORD *)a1 = v5;
    goto LABEL_8;
  }
  *(_QWORD *)a1 = v5;
  v6 = v5;
LABEL_8:
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = *(_QWORD *)(a2 + 48);
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v12;
  swift_retain(v12);
  swift_release(v13);
  v15 = *(_QWORD *)(a2 + 56);
  v14 = *(_QWORD *)(a2 + 64);
  v16 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v15;
  *(_QWORD *)(a1 + 64) = v14;
  swift_retain(v14);
  swift_release(v16);
  return a1;
}

__n128 _s5QueueO7ContextVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _s5QueueO7ContextVwta(uint64_t a1, uint64_t a2)
{
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(void **)a1;
  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a1 >= 4uLL)
  {
    if (v5 >= 4)
    {
      *(_QWORD *)a1 = v5;

      goto LABEL_6;
    }

  }
  *(_QWORD *)a1 = v5;
LABEL_6:
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release(*(_QWORD *)(a1 + 32));
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release(*(_QWORD *)(a1 + 48));
  v6 = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v6;
  swift_release(v7);
  return a1;
}

uint64_t _s5QueueO7ContextVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s5QueueO7ContextVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Actions.Queue.Context()
{
  return &type metadata for Actions.Queue.Context;
}

uint64_t sub_1000847D8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000847FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PlaybackIntentDescriptor.IntentType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100084840(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000057B4(&qword_1004BF910);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100084888(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

_QWORD *sub_1000848D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  char *v38;
  char *v39;
  void (*v40)(char *, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t KeyPath;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t, uint64_t, uint64_t);
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  __n128 v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __n128 v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  _QWORD *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  void *v132;
  id v133[4];

  v4 = v3;
  v118 = a3;
  v127 = a2;
  v128 = a1;
  v5 = sub_1000057B4(&qword_1004BB5E8);
  v120 = *(_QWORD *)(v5 - 8);
  v121 = v5;
  __chkstk_darwin(v5);
  v119 = (char *)&v105 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000057B4((uint64_t *)&unk_1004C06E0);
  v123 = *(_QWORD *)(v7 - 8);
  v124 = v7;
  __chkstk_darwin(v7);
  v122 = (char *)&v105 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000057B4((uint64_t *)&unk_1004C2770);
  __chkstk_darwin(v9);
  v125 = (char *)&v105 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = sub_1000057B4(&qword_1004BB5F0);
  v126 = *(_QWORD **)(v114 - 8);
  __chkstk_darwin(v114);
  v112 = (char *)&v105 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000057B4(&qword_1004BB5F8);
  v13 = *(_QWORD *)(v12 - 8);
  v115 = v12;
  v116 = v13;
  __chkstk_darwin(v12);
  v113 = (char *)&v105 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_1000057B4((uint64_t *)&unk_1004BFD60);
  v110 = *(_QWORD *)(v117 - 8);
  __chkstk_darwin(v117);
  v109 = (char *)&v105 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for MusicPlayer.PreviewCapabilityStatus(0);
  v16 = *(_QWORD *)(v108 - 8);
  v17 = __chkstk_darwin(v108);
  v107 = (char *)&v105 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v20 = (char *)&v105 - v19;
  v106 = sub_1000057B4((uint64_t *)&unk_1004BFD50);
  v21 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106);
  v23 = (char *)&v105 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for MusicPlayer.PlayabilityStatus(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = __chkstk_darwin(v24);
  v28 = (char *)&v105 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v30 = (char *)&v105 - v29;
  v4[4] = _swiftEmptyArrayStorage;
  v111 = v4 + 4;
  v31 = (char *)v4 + *(_QWORD *)(*v4 + 128);
  (*(void (**)(char *, _QWORD, uint64_t))(v25 + 104))((char *)&v105 - v29, enum case for MusicPlayer.PlayabilityStatus.playable(_:), v24);
  (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v28, v30, v24);
  Published.init(initialValue:)(v28, v24);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v30, v24);
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v31, v23, v106);
  v32 = (char *)v4 + *(_QWORD *)(*v4 + 136);
  v33 = enum case for MusicPlayer.PreviewCapabilityStatus.UnpreviewableReason.notSupported(_:);
  v34 = type metadata accessor for MusicPlayer.PreviewCapabilityStatus.UnpreviewableReason(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 104))(v20, v33, v34);
  v35 = v108;
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v20, enum case for MusicPlayer.PreviewCapabilityStatus.unpreviewable(_:), v108);
  v36 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  v37 = v16;
  v38 = v107;
  v36(v107, v20, v35);
  v39 = v109;
  Published.init(initialValue:)(v38, v35);
  v40 = *(void (**)(char *, uint64_t))(v37 + 8);
  v40(v20, v35);
  (*(void (**)(char *, char *, uint64_t))(v110 + 32))(v32, v39, v117);
  v41 = (char *)v4 + *(_QWORD *)(*v4 + 120);
  v42 = type metadata accessor for Song(0);
  v117 = *(_QWORD *)(v42 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v117 + 16))(v41, v128, v42);
  v43 = v118;
  v44 = v127;
  v4[2] = v127;
  v4[3] = v43;
  swift_retain(v43);
  swift_retain(v44);
  v45 = sub_100082C6C();
  dispatch thunk of MusicPlayer.ItemState.previewCapabilityStatus.getter(v45);
  v131 = v42;
  v132 = &protocol witness table for Song;
  KeyPath = swift_getKeyPath(&unk_1003CA9A0);
  v118 = v42;
  v129 = v42;
  v130 = &protocol witness table for Song;
  v47 = swift_getKeyPath(&unk_1003CA9D8);
  v36(v38, v20, v35);
  swift_retain(v4);
  static Published.subscript.setter(v38, v4, KeyPath, v47);
  v48 = ((uint64_t (*)(char *, uint64_t))v40)(v20, v35);
  v49 = v112;
  dispatch thunk of MusicPlayer.ItemState.$playabilityStatus.getter(v48);
  v50 = sub_1000851CC();
  v133[0] = (id)static OS_dispatch_queue.main.getter(v50, v51, v52, v53, v54, v55, v56, v57, v105, v106, v107, v108, v109, v110, v111);
  v58 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v59 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56);
  v60 = v125;
  v59(v125, 1, 1, v58);
  v61 = sub_10004FFFC((unint64_t *)&unk_1004C06F0, &qword_1004BB5F0, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  sub_100004D8C((unint64_t *)&qword_1004BFCF0, (uint64_t (*)(uint64_t))sub_1000851CC, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v62 = v113;
  v63 = v60;
  v64 = (uint64_t)v60;
  v65 = v114;
  Publisher.receive<A>(on:options:)(v133, v63, v114, v50, v61);
  sub_10000FE2C(v64, (uint64_t *)&unk_1004C2770);

  ((void (*)(char *, uint64_t))v126[1])(v49, v65);
  v66 = swift_allocObject(&unk_10046E188, 24, 7);
  v126 = v4;
  swift_weakInit(v66 + 16, v4);
  v67 = sub_10004FFFC(&qword_1004BB600, &qword_1004BB5F8, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v68 = v115;
  v69 = v62;
  v70 = Publisher<>.sink(receiveValue:)(sub_10008522C, v66, v115, v67);
  v71 = swift_release(v66);
  v72 = v111;
  (*(void (**)(char *, uint64_t, __n128))(v116 + 8))(v69, v68, v71);
  swift_beginAccess(v72, v133, 33, 0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v73);
  v75 = *(_QWORD *)((*v72 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v74 = *(_QWORD *)((*v72 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v75 >= v74 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v74 > 1, v75 + 1, 1);
  v76 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v75, v70);
  specialized Array._endMutation()(v76);
  v77 = swift_endAccess(v133);
  v78 = v72;
  v79 = v119;
  v80 = v127;
  v81 = dispatch thunk of MusicPlayer.ItemState.$previewCapabilityStatus.getter(v77);
  v133[0] = (id)static OS_dispatch_queue.main.getter(v81, v82, v83, v84, v85, v86, v87, v88, v105, v106, v107, v108, v109, v110, v111);
  v89 = (uint64_t)v125;
  v59(v125, 1, 1, v58);
  v90 = sub_10004FFFC(qword_1004C0700, &qword_1004BB5E8, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v91 = v121;
  v92 = v122;
  Publisher.receive<A>(on:options:)(v133, v89, v121, v50, v90);
  sub_10000FE2C(v89, (uint64_t *)&unk_1004C2770);

  (*(void (**)(char *, uint64_t))(v120 + 8))(v79, v91);
  v93 = swift_allocObject(&unk_10046E188, 24, 7);
  v94 = v126;
  swift_weakInit(v93 + 16, v126);
  v95 = swift_allocObject(&unk_10046E1B0, 32, 7);
  *(_QWORD *)(v95 + 16) = v93;
  *(_QWORD *)(v95 + 24) = v80;
  v96 = sub_10004FFFC(&qword_1004BB608, (uint64_t *)&unk_1004C06E0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v80);
  v97 = v124;
  v98 = Publisher<>.sink(receiveValue:)(sub_100085260, v95, v124, v96);
  v99 = swift_release(v95);
  (*(void (**)(char *, uint64_t, __n128))(v123 + 8))(v92, v97, v99);
  swift_beginAccess(v78, v133, 33, 0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v100);
  v102 = *(_QWORD *)((v94[4] & 0xFFFFFFFFFFFFFF8) + 0x10);
  v101 = *(_QWORD *)((v94[4] & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v102 >= v101 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v101 > 1, v102 + 1, 1);
  v103 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v102, v98);
  specialized Array._endMutation()(v103);
  swift_endAccess(v133);
  (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v128, v118);
  return v126;
}

uint64_t sub_100085194()
{
  return 16;
}

__n128 sub_1000851A0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000851B4()
{
  return 16;
}

__n128 sub_1000851C0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

unint64_t sub_1000851CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1004BD060;
  if (!qword_1004BD060)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1004BD060);
  }
  return result;
}

uint64_t sub_100085208()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_10008522C(uint64_t a1)
{
  uint64_t v1;

  return sub_100082A7C(a1, v1);
}

uint64_t sub_100085234()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100085260(uint64_t a1)
{
  uint64_t v1;

  return sub_100082AD0(a1, *(_QWORD *)(v1 + 16));
}

double Actions.Share.Context.init(item:applicationCapabilities:shareSheetPresenting:metricsReportingContext:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  __int128 v6;
  double result;
  __int128 v8;
  _OWORD v9[2];
  __int128 v10;
  __int128 v11;

  sub_100097E18(a1, a2, a3, a4, v9);
  v6 = v9[1];
  *a5 = v9[0];
  a5[1] = v6;
  result = *(double *)&v10;
  v8 = v11;
  a5[2] = v10;
  a5[3] = v8;
  return result;
}

__n128 static Actions.Share.action(context:)@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  __n128 v9;
  __int128 v10;
  __int128 v11;

  v4 = *a1;
  v5 = a1[5];
  v7 = a1[7];
  v10 = *(_OWORD *)(a1 + 1);
  v11 = *((_OWORD *)a1 + 3);
  v6 = v11;
  swift_retain(v10);
  v9 = *(__n128 *)(a1 + 3);
  swift_retain(a1[3]);
  swift_retain(v5);
  sub_1000795C8((uint64_t)&v11);
  *(_QWORD *)a2 = v4;
  *(_OWORD *)(a2 + 8) = v10;
  result = v9;
  *(__n128 *)(a2 + 24) = v9;
  *(_QWORD *)(a2 + 40) = v5;
  *(_QWORD *)(a2 + 48) = v6;
  *(_QWORD *)(a2 + 56) = v7;
  *(_BYTE *)(a2 + 64) = 42;
  *(_QWORD *)(a2 + 72) = sub_10002F788;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0x4014000000000000;
  *(_QWORD *)(a2 + 96) = &unk_1004BB628;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = &unk_1004BB630;
  *(_QWORD *)(a2 + 120) = 0;
  return result;
}

uint64_t Actions.Share.Context.menuItemTitle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 56));
  return v1;
}

uint64_t Actions.Share.Context.menuItemTitle.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 56));
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

CFRange (__swiftcall *Actions.Share.Context.menuItemTitle.modify())(__C::_NSRange)
{
  return CFRange.init(_:);
}

uint64_t sub_10008542C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v7;

  v3 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  v5 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 8) = v5;
  v7 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v7;
  *(_QWORD *)(a2 + 40) = v3;
  *(_QWORD *)(a2 + 48) = v2;
  *(_QWORD *)(a2 + 56) = v4;
  *(_BYTE *)(a2 + 64) = 42;
  *(_QWORD *)(a2 + 72) = sub_10002F788;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0x4014000000000000;
  *(_QWORD *)(a2 + 96) = &unk_1004BB628;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = &unk_1004BB630;
  *(_QWORD *)(a2 + 120) = 0;
  swift_retain(v5);
  swift_retain(v7);
  swift_retain(v3);
  return swift_bridgeObjectRetain();
}

uint64_t (*Actions.Share.Context.menuItemImage.getter())()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_allocObject(&unk_10046E218, 32, 7);
  *(_QWORD *)(v0 + 16) = 0xD000000000000013;
  *(_QWORD *)(v0 + 24) = 0x80000001003A8000;
  v1 = swift_allocObject(&unk_10046E240, 32, 7);
  *(_QWORD *)(v1 + 16) = 0xD000000000000013;
  *(_QWORD *)(v1 + 24) = 0x80000001003A8000;
  return sub_10002F080;
}

uint64_t (*sub_100085550())()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_allocObject(&unk_10046EA30, 32, 7);
  *(_QWORD *)(v0 + 16) = 0xD000000000000013;
  *(_QWORD *)(v0 + 24) = 0x80000001003A8000;
  v1 = swift_allocObject(&unk_10046EA58, 32, 7);
  *(_QWORD *)(v1 + 16) = 0xD000000000000013;
  *(_QWORD *)(v1 + 24) = 0x80000001003A8000;
  return sub_10002F6E4;
}

uint64_t sub_1000855D4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for MainActor(0);
  v2[4] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v2[5] = v5;
  v2[6] = v6;
  return swift_task_switch(sub_100085640, v5, v6);
}

uint64_t sub_100085640()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = (_QWORD *)v0[2];
  v2 = v1[3];
  v3 = v1[4];
  sub_1000096A0(v1, v2);
  v4 = *(int **)(v3 + 8);
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[7] = v5;
  *v5 = v0;
  v5[1] = sub_1000856C0;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v7)(v0[3], v2, v3);
}

uint64_t sub_1000856C0()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 56));
  return swift_task_switch(sub_10008570C, *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_10008570C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Actions.Share.Context.init(item:applicationCapabilities:shareAction:metricsReportingContext:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t (**a6)()@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t (*v17)();
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, __n128);
  __n128 v25;
  uint64_t v26;
  unint64_t (*v27)();
  unint64_t (*v28)();
  uint64_t result;
  uint64_t v30;
  __int128 v31[2];

  v12 = sub_1000057B4(&qword_1004B9D88);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000444A8((uint64_t)a1, (uint64_t)v31);
  v16 = swift_allocObject(&unk_10046E268, 64, 7);
  *(_QWORD *)(v16 + 16) = a2;
  sub_100033620(v31, v16 + 24);
  v17 = (unint64_t (*)())swift_allocObject(&unk_10046E290, 48, 7);
  *((_QWORD *)v17 + 2) = sub_1000980C0;
  *((_QWORD *)v17 + 3) = v16;
  *((_QWORD *)v17 + 4) = a3;
  *((_QWORD *)v17 + 5) = a4;
  sub_10000FEB4(a5, (uint64_t)v15, &qword_1004B9D88);
  sub_1000444A8((uint64_t)a1, (uint64_t)v31);
  v18 = *(unsigned __int8 *)(v13 + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = (v14 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject(&unk_10046E2B8, v20 + 40, v18 | 7);
  sub_10002F244((uint64_t)v15, v21 + v19);
  sub_100033620(v31, v21 + v20);
  v22 = a1[3];
  v23 = a1[4];
  sub_1000096A0(a1, v22);
  v24 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v23 + 32);
  v25 = swift_retain(v16);
  v26 = v24(v22, v23, v25);
  v28 = v27;
  sub_10000FE2C(a5, &qword_1004B9D88);
  result = sub_10000970C(a1);
  *a6 = sub_1000980C0;
  a6[1] = (unint64_t (*)())v16;
  a6[2] = (unint64_t (*)())&unk_1004BB640;
  a6[3] = v17;
  a6[4] = (unint64_t (*)())&unk_1004BB650;
  a6[5] = (unint64_t (*)())v21;
  a6[6] = (unint64_t (*)())v26;
  a6[7] = v28;
  return result;
}

unint64_t sub_100085908(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t KeyPath;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  char v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t, uint64_t);
  char *v36;
  char v37;
  char *v38;
  void (*v39)(char *, uint64_t);
  char v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[40];
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  _QWORD v51[16];

  v4 = sub_1000057B4(&qword_1004BD700);
  __chkstk_darwin(v4);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for Playlist(0);
  v45 = *(_QWORD *)(v46 - 8);
  v7 = __chkstk_darwin(v46);
  v43 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v44 = (char *)&v42 - v9;
  v10 = sub_1000057B4(&qword_1004B99B0);
  __chkstk_darwin(v10);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1003CAA90);
  v14 = swift_getKeyPath(&unk_1003CAAB8);
  static Published.subscript.getter(v51, a1, KeyPath, v14);
  swift_release(KeyPath);
  swift_release(v14);
  v15 = BYTE1(v51[0]);
  v16 = v51[3];
  v17 = v51[4];
  v18 = v51[7];
  v19 = v51[9];
  v20 = (void *)v51[10];
  v21 = v51[12];
  swift_bridgeObjectRelease(v51[14]);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v19);

  if (v15 != 1)
    return 0xD000000000000016;
  v22 = a2[3];
  v23 = a2[4];
  sub_1000096A0(a2, v22);
  (*(void (**)(uint64_t, uint64_t))(v23 + 16))(v22, v23);
  v24 = type metadata accessor for URL(0);
  LODWORD(v22) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v12, 1, v24);
  sub_10000FE2C((uint64_t)v12, &qword_1004B99B0);
  sub_1000444A8((uint64_t)a2, (uint64_t)v51);
  if ((_DWORD)v22 != 1)
  {
    sub_10000970C(v51);
    return 0;
  }
  sub_1000444A8((uint64_t)v51, (uint64_t)v47);
  v25 = sub_1000057B4(&qword_1004BB010);
  v26 = sub_1000057B4(&qword_1004BA720);
  if (swift_dynamicCast(&v48, v47, v25, v26, 6))
  {
    v27 = *((_QWORD *)&v49 + 1);
    v28 = v50;
    sub_1000096A0(&v48, *((uint64_t *)&v49 + 1));
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v28);
    v30 = v29;
    sub_10000970C(v51);
    sub_10000970C(&v48);
    if (v30)
    {
      swift_bridgeObjectRelease(v30);
      return 0;
    }
  }
  else
  {
    v50 = 0;
    v48 = 0u;
    v49 = 0u;
    sub_10000970C(v51);
    sub_10000FE2C((uint64_t)&v48, (uint64_t *)&unk_1004C0560);
  }
  sub_1000444A8((uint64_t)a2, (uint64_t)&v48);
  v32 = v46;
  v33 = swift_dynamicCast(v6, &v48, v25, v46, 6);
  v34 = v45;
  v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56);
  if ((v33 & 1) == 0)
  {
    v35(v6, 1, 1, v32);
    sub_10000FE2C((uint64_t)v6, &qword_1004BD700);
    return 0xD000000000000023;
  }
  v35(v6, 0, 1, v32);
  v36 = v44;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v44, v6, v32);
  v37 = Playlist.isShareable.getter();
  v38 = v43;
  (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v43, v36, v32);
  if ((v37 & 1) != 0)
  {
    v39 = *(void (**)(char *, uint64_t))(v34 + 8);
    v39(v38, v32);
    v39(v36, v32);
    return 0;
  }
  v40 = Playlist.canMakeShareable.getter();
  v41 = *(void (**)(char *, uint64_t))(v34 + 8);
  v41(v38, v32);
  if ((v40 & 1) != 0)
  {
    v41(v36, v32);
    return 0;
  }
  v41(v36, v32);
  return 0xD000000000000021;
}

uint64_t Playlist.isShareable.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  unsigned int v36;
  uint64_t v37;
  void (*v38)(_BYTE *, uint64_t);
  unsigned int v39;
  _BYTE *v40;
  void (*v41)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v42;
  _BYTE *v43;
  _QWORD *v45;
  _BYTE *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  unsigned int (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  void (*v60)(_BYTE *, uint64_t);
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(_BYTE *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  _BYTE v71[4];
  int v72;
  _QWORD *v73;
  unsigned int (*v74)(uint64_t, uint64_t, uint64_t);
  void (*v75)(_BYTE *, _QWORD, uint64_t);
  void (*v76)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  _BYTE *v82;
  _BYTE *v83;
  _BYTE *v84;
  _BYTE *v85;
  uint64_t v86;
  _BYTE *v87;
  void (*v88)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v89;

  v1 = v0;
  v2 = type metadata accessor for Playlist.Variant(0);
  v3 = *(_QWORD **)(v2 - 8);
  __chkstk_darwin(v2);
  v78 = &v71[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v86 = sub_1000057B4(&qword_1004BA4F0);
  v5 = __chkstk_darwin(v86);
  v82 = &v71[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v8 = &v71[-v7];
  v9 = sub_1000057B4(&qword_1004BA390);
  v10 = __chkstk_darwin(v9);
  v84 = &v71[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = __chkstk_darwin(v10);
  v85 = &v71[-v13];
  v14 = __chkstk_darwin(v12);
  v83 = &v71[-v15];
  v16 = __chkstk_darwin(v14);
  v80 = &v71[-v17];
  v18 = __chkstk_darwin(v16);
  v20 = &v71[-v19];
  __chkstk_darwin(v18);
  v22 = &v71[-v21];
  v23 = type metadata accessor for Playlist(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = __chkstk_darwin(v23);
  v87 = &v71[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v27 = __chkstk_darwin(v25);
  v89 = &v71[-v28];
  v29 = __chkstk_darwin(v27);
  v31 = &v71[-v30];
  v32 = Playlist.isPublic.getter(v29);
  v88 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v24 + 16);
  v33 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v88)(v31, v1, v23);
  if ((v32 & 1) != 0)
  {
    v38 = *(void (**)(_BYTE *, uint64_t))(v24 + 8);
    v38(v31, v23);
    goto LABEL_6;
  }
  v77 = v24;
  v79 = v23;
  v81 = v1;
  Playlist.variant.getter(v33);
  v75 = (void (*)(_BYTE *, _QWORD, uint64_t))v3[13];
  v75(v20, enum case for Playlist.Variant.subscribed(_:), v2);
  v76 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v3[7];
  v76(v20, 0, 1, v2);
  v34 = (uint64_t)&v8[*(int *)(v86 + 48)];
  sub_10000FEB4((uint64_t)v22, (uint64_t)v8, &qword_1004BA390);
  sub_10000FEB4((uint64_t)v20, v34, &qword_1004BA390);
  v35 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v3[6];
  v36 = v35((uint64_t)v8, 1, v2);
  v37 = (uint64_t)v8;
  v73 = v3;
  if (v36 == 1)
  {
    sub_10000FE2C((uint64_t)v20, &qword_1004BA390);
    sub_10000FE2C((uint64_t)v22, &qword_1004BA390);
    v38 = *(void (**)(_BYTE *, uint64_t))(v77 + 8);
    v38(v31, v79);
    v39 = v35(v34, 1, v2);
    v40 = v85;
    if (v39 == 1)
    {
      sub_10000FE2C(v37, &qword_1004BA390);
      v1 = v81;
      v23 = v79;
LABEL_6:
      v41 = v88;
      v42 = v89;
      v88(v89, v1, v23);
LABEL_7:
      v38(v42, v23);
LABEL_8:
      v43 = v87;
      v41(v87, v1, v23);
LABEL_9:
      v38(v43, v23);
      return 1;
    }
    v74 = v35;
    v50 = v81;
    v41 = v88;
    v42 = v89;
    v51 = (uint64_t)v83;
    v49 = v79;
    goto LABEL_15;
  }
  v45 = v3;
  v46 = v80;
  sub_10000FEB4((uint64_t)v8, (uint64_t)v80, &qword_1004BA390);
  v47 = v35(v34, 1, v2);
  v48 = v77;
  v74 = v35;
  if (v47 == 1)
  {
    sub_10000FE2C((uint64_t)v20, &qword_1004BA390);
    sub_10000FE2C((uint64_t)v22, &qword_1004BA390);
    v38 = *(void (**)(_BYTE *, uint64_t))(v48 + 8);
    v49 = v79;
    v38(v31, v79);
    ((void (*)(_BYTE *, uint64_t))v45[1])(v46, v2);
    v50 = v81;
    v41 = v88;
    v42 = v89;
    v51 = (uint64_t)v83;
    v40 = v85;
LABEL_15:
    sub_10000FE2C(v37, &qword_1004BA4F0);
    v52 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v41)(v42, v50, v49);
    v23 = v49;
    goto LABEL_16;
  }
  v57 = v46;
  v58 = v78;
  ((void (*)(_BYTE *, uint64_t, uint64_t))v45[4])(v78, v34, v2);
  v59 = sub_100004D8C((unint64_t *)&qword_1004BD030, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist.Variant, (uint64_t)&protocol conformance descriptor for Playlist.Variant);
  v72 = dispatch thunk of static Equatable.== infix(_:_:)(v57, v58, v2, v59);
  v60 = (void (*)(_BYTE *, uint64_t))v45[1];
  v60(v58, v2);
  sub_10000FE2C((uint64_t)v20, &qword_1004BA390);
  sub_10000FE2C((uint64_t)v22, &qword_1004BA390);
  v38 = *(void (**)(_BYTE *, uint64_t))(v48 + 8);
  v61 = v31;
  v62 = v79;
  v38(v61, v79);
  v60(v57, v2);
  v63 = v37;
  v23 = v62;
  sub_10000FE2C(v63, &qword_1004BA390);
  v41 = v88;
  v42 = v89;
  v1 = v81;
  v52 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v88)(v89, v81, v62);
  v51 = (uint64_t)v83;
  v40 = v85;
  if ((v72 & 1) != 0)
    goto LABEL_7;
LABEL_16:
  Playlist.variant.getter(v52);
  v75(v40, enum case for Playlist.Variant.admin(_:), v2);
  v76(v40, 0, 1, v2);
  v53 = v82;
  v54 = (uint64_t)&v82[*(int *)(v86 + 48)];
  sub_10000FEB4(v51, (uint64_t)v82, &qword_1004BA390);
  sub_10000FEB4((uint64_t)v40, v54, &qword_1004BA390);
  v55 = v74;
  if (v74((uint64_t)v53, 1, v2) == 1)
  {
    sub_10000FE2C((uint64_t)v40, &qword_1004BA390);
    sub_10000FE2C(v51, &qword_1004BA390);
    v38(v42, v23);
    if (v55(v54, 1, v2) == 1)
    {
      sub_10000FE2C((uint64_t)v53, &qword_1004BA390);
      v1 = v81;
      goto LABEL_8;
    }
    goto LABEL_21;
  }
  sub_10000FEB4((uint64_t)v53, (uint64_t)v84, &qword_1004BA390);
  if (v55(v54, 1, v2) == 1)
  {
    sub_10000FE2C((uint64_t)v40, &qword_1004BA390);
    sub_10000FE2C(v51, &qword_1004BA390);
    v38(v42, v23);
    ((void (*)(_BYTE *, uint64_t))v73[1])(v84, v2);
LABEL_21:
    sub_10000FE2C((uint64_t)v53, &qword_1004BA4F0);
    v43 = v87;
    v56 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v41)(v87, v81, v23);
    goto LABEL_25;
  }
  v64 = v73;
  v65 = v78;
  ((void (*)(_BYTE *, uint64_t, uint64_t))v73[4])(v78, v54, v2);
  v66 = sub_100004D8C((unint64_t *)&qword_1004BD030, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist.Variant, (uint64_t)&protocol conformance descriptor for Playlist.Variant);
  LODWORD(v88) = dispatch thunk of static Equatable.== infix(_:_:)(v84, v65, v2, v66);
  v67 = v51;
  v68 = (void (*)(_BYTE *, uint64_t))v64[1];
  v68(v65, v2);
  sub_10000FE2C((uint64_t)v85, &qword_1004BA390);
  sub_10000FE2C(v67, &qword_1004BA390);
  v38(v89, v23);
  v68(v84, v2);
  sub_10000FE2C((uint64_t)v53, &qword_1004BA390);
  v43 = v87;
  v56 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v41)(v87, v81, v23);
  if ((v88 & 1) != 0)
    goto LABEL_9;
LABEL_25:
  Playlist.catalogID.getter(v56);
  v70 = v69;
  v38(v43, v23);
  if (!v70)
    return 0;
  swift_bridgeObjectRelease(v70);
  return 1;
}

uint64_t Playlist.canMakeShareable.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char v41;
  void (*v42)(char *, uint64_t);
  void (*v43)(char *, uint64_t);
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  void (*v58)(char *, uint64_t);
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;

  v65 = type metadata accessor for Playlist.Variant(0);
  v63 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v59 = (char *)&v59 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_1000057B4(&qword_1004BA4F0);
  __chkstk_darwin(v62);
  v64 = (uint64_t)&v59 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_1000057B4(&qword_1004BA390);
  v3 = __chkstk_darwin(v2);
  v60 = (uint64_t)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v69 = (char *)&v59 - v6;
  __chkstk_darwin(v5);
  v70 = (char *)&v59 - v7;
  v8 = type metadata accessor for Playlist.EditableComponents(0);
  v67 = *(_QWORD *)(v8 - 8);
  v68 = v8;
  __chkstk_darwin(v8);
  v61 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000057B4((uint64_t *)&unk_1004BDAE0);
  __chkstk_darwin(v10);
  v66 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Playlist(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v71 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v59 - v16;
  if (qword_1004B8AF8 != -1)
    swift_once(&qword_1004B8AF8, sub_1000D365C);
  v18 = static ApplicationCapabilities.Controller.shared;
  KeyPath = swift_getKeyPath(&unk_1003CAA90);
  v20 = swift_getKeyPath(&unk_1003CAAB8);
  static Published.subscript.getter(&v73, v18, KeyPath, v20);
  swift_release(KeyPath);
  swift_release(v20);
  v21 = v74;
  v22 = v75;
  v23 = v76;
  v24 = v77;
  v26 = v78;
  v25 = v79;
  v27 = v80;
  swift_bridgeObjectRelease(v81);
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v26);

  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v29 = v28(v17, v72, v12);
  v30 = v12;
  v31 = v17;
  if ((v21 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v12);
LABEL_15:
    v44 = 0;
    return v44 & 1;
  }
  v72 = v13;
  v32 = (uint64_t)v66;
  Playlist.editableComponents.getter(v29);
  v34 = v67;
  v33 = v68;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v32, 1, v68) == 1)
  {
    sub_10000FE2C(v32, (uint64_t *)&unk_1004BDAE0);
    v35 = v71;
    v36 = v28(v71, (uint64_t)v31, v30);
    v38 = (uint64_t)v69;
    v37 = (uint64_t)v70;
    goto LABEL_9;
  }
  v39 = v61;
  static Playlist.EditableComponents.tracklist.getter();
  v40 = sub_100004D8C((unint64_t *)&qword_1004BA388, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist.EditableComponents, (uint64_t)&protocol conformance descriptor for Playlist.EditableComponents);
  v41 = dispatch thunk of SetAlgebra.isSuperset(of:)(v39, v33, v40);
  v42 = *(void (**)(char *, uint64_t))(v34 + 8);
  v42(v39, v33);
  v42((char *)v32, v33);
  v35 = v71;
  v36 = v28(v71, (uint64_t)v31, v30);
  v38 = (uint64_t)v69;
  v37 = (uint64_t)v70;
  if ((v41 & 1) == 0)
  {
LABEL_9:
    v70 = v31;
    Playlist.variant.getter(v36);
    v45 = v63;
    v46 = v65;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v63 + 104))(v38, enum case for Playlist.Variant.favoriteSongs(_:), v65);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v45 + 56))(v38, 0, 1, v46);
    v47 = v64;
    v48 = v64 + *(int *)(v62 + 48);
    sub_10000FEB4(v37, v64, &qword_1004BA390);
    sub_10000FEB4(v38, v48, &qword_1004BA390);
    v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
    if (v49(v47, 1, v46) == 1)
    {
      sub_10000FE2C(v38, &qword_1004BA390);
      sub_10000FE2C(v37, &qword_1004BA390);
      v50 = *(void (**)(char *, uint64_t))(v72 + 8);
      v50(v35, v30);
      v50(v70, v30);
      if (v49(v48, 1, v46) == 1)
      {
        sub_10000FE2C(v47, &qword_1004BA390);
        v44 = 1;
        return v44 & 1;
      }
    }
    else
    {
      v51 = v60;
      sub_10000FEB4(v47, v60, &qword_1004BA390);
      if (v49(v48, 1, v46) != 1)
      {
        v54 = v59;
        (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v59, v48, v46);
        v55 = sub_100004D8C((unint64_t *)&qword_1004BD030, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist.Variant, (uint64_t)&protocol conformance descriptor for Playlist.Variant);
        v56 = v51;
        v44 = dispatch thunk of static Equatable.== infix(_:_:)(v51, v54, v46, v55);
        v57 = *(void (**)(char *, uint64_t))(v45 + 8);
        v57(v54, v46);
        sub_10000FE2C(v38, &qword_1004BA390);
        sub_10000FE2C(v37, &qword_1004BA390);
        v58 = *(void (**)(char *, uint64_t))(v72 + 8);
        v58(v71, v30);
        v58(v70, v30);
        v57((char *)v56, v46);
        sub_10000FE2C(v47, &qword_1004BA390);
        return v44 & 1;
      }
      sub_10000FE2C(v38, &qword_1004BA390);
      sub_10000FE2C(v37, &qword_1004BA390);
      v52 = *(void (**)(char *, uint64_t))(v72 + 8);
      v52(v71, v30);
      v52(v70, v30);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v51, v46);
    }
    sub_10000FE2C(v47, &qword_1004BA4F0);
    goto LABEL_15;
  }
  v43 = *(void (**)(char *, uint64_t))(v72 + 8);
  v43(v35, v30);
  v43(v31, v30);
  v44 = 1;
  return v44 & 1;
}

uint64_t sub_100086BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for MainActor(0);
  v4[6] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[7] = v7;
  v4[8] = v8;
  return swift_task_switch(sub_100086C28, v7, v8);
}

uint64_t sub_100086C28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  __n128 v10;
  uint64_t (*v12)(void);

  v1 = (*(uint64_t (**)(void))(v0 + 16))();
  if (v2 == 1)
  {
    v3 = *(int **)(v0 + 32);
    v12 = (uint64_t (*)(void))((char *)v3 + *v3);
    v4 = (_QWORD *)swift_task_alloc(v3[1]);
    *(_QWORD *)(v0 + 72) = v4;
    *v4 = v0;
    v4[1] = sub_100086CE8;
    v5 = v12;
  }
  else
  {
    v6 = v1;
    v7 = v2;
    swift_release(*(_QWORD *)(v0 + 48));
    v8 = sub_10004ECE8();
    swift_allocError(&type metadata for ActionError, v8, 0, 0);
    *v9 = v6;
    v9[1] = v7;
    swift_willThrow(v10);
    v5 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v5();
}

uint64_t sub_100086CE8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100086D7C;
  else
    v4 = sub_100086D48;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
}

uint64_t sub_100086D48()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100086D7C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100086DB0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[9] = a1;
  v2[10] = a2;
  v3 = sub_1000057B4(&qword_1004B99B0);
  v2[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000057B4(&qword_1004B9D88);
  v2[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Actions.MetricsReportingContext(0);
  v2[13] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[14] = v6;
  v2[15] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100086E58, 0, 0);
}

uint64_t sub_100086E58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  sub_10000FEB4(*(_QWORD *)(v0 + 72), v3, &qword_1004B9D88);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10000FE2C(*(_QWORD *)(v0 + 96), &qword_1004B9D88);
    v4 = *(_QWORD *)(v0 + 88);
    v5 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 120));
    swift_task_dealloc(v5);
    swift_task_dealloc(v4);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 88);
    v8 = *(_QWORD **)(v0 + 80);
    sub_10002F60C(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
    v9 = v8[3];
    sub_1000096A0(v8, v9);
    *(_QWORD *)(v0 + 128) = MusicItem.metricsTargetIdentifier.getter(v9);
    *(_QWORD *)(v0 + 136) = v10;
    v11 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v7, 1, 1, v11);
    v12 = sub_1000057B4(&qword_1004B9DD0);
    inited = swift_initStackObject(v12, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_1003C64D0;
    v14 = v8[3];
    sub_1000096A0(v8, v14);
    *(_QWORD *)(inited + 32) = MusicItem.metricsContentType.getter(v14);
    *(_QWORD *)(inited + 40) = v15;
    *(_BYTE *)(inited + 48) = 0;
    *(_QWORD *)(v0 + 144) = sub_100053464(inited);
    *(_QWORD *)(v0 + 152) = v16;
    *(_QWORD *)(v0 + 160) = v17;
    *(_WORD *)(v0 + 176) = v18;
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), &type metadata for MetricsEvent.Click.ActionDetails.Key);
    v19 = type metadata accessor for MainActor(0);
    *(_QWORD *)(v0 + 168) = static MainActor.shared.getter(v20);
    v21 = dispatch thunk of Actor.unownedExecutor.getter(v19, &protocol witness table for MainActor);
    return swift_task_switch(sub_10008703C, v21, v22);
  }
}

uint64_t sub_10008703C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(void **)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 136);
  v6 = *(uint64_t **)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 88);
  v8 = *(unsigned __int16 *)(v0 + 176);
  swift_release(*(_QWORD *)(v0 + 168));
  sub_100053874(v5, v4, 5, 35, v7, v3, v2, v1, v8, v6);
  sub_10002F650(v3, v2, v1, v8, SBYTE1(v8));
  swift_bridgeObjectRelease(v4);
  sub_10000FE2C(v7, &qword_1004B99B0);
  return swift_task_switch(sub_1000989AC, 0, 0);
}

double static Actions.ShareLyrics.action(context:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;
  double result;
  __int128 v5;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  v3 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 8) = v3;
  v5 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 40) = v2;
  *(_BYTE *)(a2 + 48) = 43;
  *(_QWORD *)(a2 + 56) = sub_10002F788;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0x4014000000000000;
  *(_QWORD *)(a2 + 80) = &unk_1004BB658;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = &unk_1004BB660;
  *(_QWORD *)(a2 + 104) = 0;
  swift_retain(v3);
  swift_retain(v5);
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t Actions.ShareLyrics.Context.init(item:canShareLyrics:shareLyrics:metricsReportingContext:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;

  v14 = *(_QWORD *)(sub_1000057B4(&qword_1004B9D88) - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = (*(_QWORD *)(v14 + 64) + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = swift_allocObject(&unk_10046E2E0, v17 + 40, v15 | 7);
  sub_10002F244(a6, v18 + v16);
  result = sub_100033620(a1, v18 + v17);
  *a7 = a2;
  a7[1] = a3;
  a7[2] = a4;
  a7[3] = a5;
  a7[4] = &unk_1004BB670;
  a7[5] = v18;
  return result;
}

uint64_t sub_100087260(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[9] = a1;
  v2[10] = a2;
  v3 = sub_1000057B4(&qword_1004B99B0);
  v2[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000057B4(&qword_1004B9D88);
  v2[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Actions.MetricsReportingContext(0);
  v2[13] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[14] = v6;
  v2[15] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100087308, 0, 0);
}

uint64_t sub_100087308()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  sub_10000FEB4(*(_QWORD *)(v0 + 72), v3, &qword_1004B9D88);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10000FE2C(*(_QWORD *)(v0 + 96), &qword_1004B9D88);
    v4 = *(_QWORD *)(v0 + 88);
    v5 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 120));
    swift_task_dealloc(v5);
    swift_task_dealloc(v4);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 88);
    v8 = *(_QWORD **)(v0 + 80);
    sub_10002F60C(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
    v9 = v8[3];
    sub_1000096A0(v8, v9);
    *(_QWORD *)(v0 + 128) = MusicItem.metricsTargetIdentifier.getter(v9);
    *(_QWORD *)(v0 + 136) = v10;
    v11 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v7, 1, 1, v11);
    v12 = sub_1000057B4(&qword_1004B9DD0);
    inited = swift_initStackObject(v12, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_1003C64D0;
    v14 = v8[3];
    sub_1000096A0(v8, v14);
    *(_QWORD *)(inited + 32) = MusicItem.metricsContentType.getter(v14);
    *(_QWORD *)(inited + 40) = v15;
    *(_BYTE *)(inited + 48) = 0;
    *(_QWORD *)(v0 + 144) = sub_100053464(inited);
    *(_QWORD *)(v0 + 152) = v16;
    *(_QWORD *)(v0 + 160) = v17;
    *(_WORD *)(v0 + 176) = v18;
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), &type metadata for MetricsEvent.Click.ActionDetails.Key);
    v19 = type metadata accessor for MainActor(0);
    *(_QWORD *)(v0 + 168) = static MainActor.shared.getter(v20);
    v21 = dispatch thunk of Actor.unownedExecutor.getter(v19, &protocol witness table for MainActor);
    return swift_task_switch(sub_1000874EC, v21, v22);
  }
}

uint64_t sub_1000874EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(void **)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 136);
  v6 = *(uint64_t **)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 88);
  v8 = *(unsigned __int16 *)(v0 + 176);
  swift_release(*(_QWORD *)(v0 + 168));
  sub_100053874(v5, v4, 5, 37, v7, v3, v2, v1, v8, v6);
  sub_10002F650(v3, v2, v1, v8, SBYTE1(v8));
  swift_bridgeObjectRelease(v4);
  sub_10000FE2C(v7, &qword_1004B99B0);
  return swift_task_switch(sub_10003A88C, 0, 0);
}

uint64_t Actions.ShareLyrics.Context.menuItemTitle.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for Locale(0);
  __chkstk_darwin(v0);
  v2 = &v13[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for String.LocalizationValue(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v9 = &v13[-v8];
  String.LocalizationValue.init(stringLiteral:)(0x794C206572616853, 0xAFA680E273636972);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 16))(v7, v9, v3);
  if (qword_1004B8A10 != -1)
    swift_once(&qword_1004B8A10, sub_10002B2B8);
  v10 = qword_1004F4630;
  static Locale.current.getter((id)qword_1004F4630);
  v11 = String.init(localized:table:bundle:locale:comment:)(v7, 0, 0, v10, v2, 0, 0, 256);
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v9, v3);
  return v11;
}

uint64_t (*Actions.ShareLyrics.Context.menuItemImage.getter())()
{
  return sub_10005D7DC;
}

id sub_10008774C()
{
  NSString v0;
  id v1;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:", v0);

  return v1;
}

uint64_t ShareableMusicItem.actionTitle.getter(uint64_t a1, uint64_t a2)
{
  return sub_10007A304(a1, a2, 0xA680E26572616853, 0xA800000000000000);
}

uint64_t sub_1000877CC()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for Locale(0);
  __chkstk_darwin(v0);
  v2 = &v13[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for String.LocalizationValue(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v9 = &v13[-v8];
  String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ALL, 0x80000001003A8020);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 16))(v7, v9, v3);
  if (qword_1004B8A10 != -1)
    swift_once(&qword_1004B8A10, sub_10002B2B8);
  v10 = qword_1004F4630;
  static Locale.current.getter((id)qword_1004F4630);
  v11 = String.init(localized:table:bundle:locale:comment:)(v7, 0, 0, v10, v2, 0, 0, 256);
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v9, v3);
  return v11;
}

uint64_t ShareableMusicItem.failureMessage.getter(uint64_t a1, uint64_t a2)
{
  return sub_10007A304(a1, a2, 0xD00000000000001ALL, 0x80000001003A8020);
}

uint64_t ShareableMusicItem.shareURL.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_100087970, 0, 0);
}

uint64_t sub_100087970()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(*(_QWORD *)(v0 + 32) + 16))(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000879A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = sub_1000057B4(&qword_1004B99B0);
  *(_QWORD *)(v1 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100087A04, 0, 0);
}

uint64_t sub_100087A04()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  NSURL *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = **(void ***)(v0 + 16);
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v1, 1, 1, v3);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v1, 1, v3);
  v7 = 0;
  if (v5 != 1)
  {
    v8 = *(_QWORD *)(v0 + 24);
    URL._bridgeToObjectiveC()(v6);
    v7 = v9;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v8, v3);
  }
  v10 = *(_QWORD *)(v0 + 24);
  objc_msgSend(v2, "setOriginalURL:", v7);

  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100087AD0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_1000057B4(&qword_1004B99B0);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100087B2C, 0, 0);
}

uint64_t sub_100087B2C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  NSURL *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = **(void ***)(v0 + 16);
  Curator.url.getter();
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  v6 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v1, 1, v3) != 1)
  {
    v7 = *(_QWORD *)(v0 + 32);
    URL._bridgeToObjectiveC()(v5);
    v6 = v8;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
  }
  v9 = *(_QWORD *)(v0 + 32);
  objc_msgSend(v2, "setOriginalURL:", v6);

  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100087BEC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_1000057B4(&qword_1004B99B0);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100087C48, 0, 0);
}

uint64_t sub_100087C48()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  NSURL *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = **(void ***)(v0 + 16);
  EditorialItem.url.getter();
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  v6 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v1, 1, v3) != 1)
  {
    v7 = *(_QWORD *)(v0 + 32);
    URL._bridgeToObjectiveC()(v5);
    v6 = v8;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
  }
  v9 = *(_QWORD *)(v0 + 32);
  objc_msgSend(v2, "setOriginalURL:", v6);

  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100087D08(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_1000057B4(&qword_1004B99B0);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100087D64, 0, 0);
}

uint64_t sub_100087D64()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  NSURL *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = **(void ***)(v0 + 16);
  Genre.url.getter();
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  v6 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v1, 1, v3) != 1)
  {
    v7 = *(_QWORD *)(v0 + 32);
    URL._bridgeToObjectiveC()(v5);
    v6 = v8;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
  }
  v9 = *(_QWORD *)(v0 + 32);
  objc_msgSend(v2, "setOriginalURL:", v6);

  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100087E24(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_1000057B4(&qword_1004B99B0);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100087E80, 0, 0);
}

uint64_t sub_100087E80()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  NSURL *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = **(void ***)(v0 + 16);
  RadioShow.url.getter();
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  v6 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v1, 1, v3) != 1)
  {
    v7 = *(_QWORD *)(v0 + 32);
    URL._bridgeToObjectiveC()(v5);
    v6 = v8;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
  }
  v9 = *(_QWORD *)(v0 + 32);
  objc_msgSend(v2, "setOriginalURL:", v6);

  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100087F40(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_1000057B4(&qword_1004B99B0);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100087F9C, 0, 0);
}

uint64_t sub_100087F9C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  NSURL *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = **(void ***)(v0 + 16);
  RecordLabel.url.getter();
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  v6 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v1, 1, v3) != 1)
  {
    v7 = *(_QWORD *)(v0 + 32);
    URL._bridgeToObjectiveC()(v5);
    v6 = v8;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
  }
  v9 = *(_QWORD *)(v0 + 32);
  objc_msgSend(v2, "setOriginalURL:", v6);

  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008805C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_1000057B4(&qword_1004B99B0);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000880B8, 0, 0);
}

uint64_t sub_1000880B8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  NSURL *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = **(void ***)(v0 + 16);
  SocialProfile.url.getter();
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  v6 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v1, 1, v3) != 1)
  {
    v7 = *(_QWORD *)(v0 + 32);
    URL._bridgeToObjectiveC()(v5);
    v6 = v8;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
  }
  v9 = *(_QWORD *)(v0 + 32);
  objc_msgSend(v2, "setOriginalURL:", v6);

  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ShareableMusicItem.augmentMetadata(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = sub_1000057B4(&qword_1004B99B0);
  v4[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000881D8, 0, 0);
}

uint64_t sub_1000881D8()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  int *v5;

  v1 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 56) = **(_QWORD **)(v0 + 16);
  v2 = *(int **)(v1 + 24);
  v5 = (int *)((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  *(_QWORD *)(v0 + 64) = v3;
  *v3 = v0;
  v3[1] = sub_100088248;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v5)(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100088248()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  return swift_task_switch(sub_10008829C, 0, 0);
}

uint64_t sub_10008829C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSURL *v4;
  void *v5;
  void *v6;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v5 = 0;
  }
  else
  {
    URL._bridgeToObjectiveC()(v4);
    v5 = v6;
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
    v1 = *(_QWORD *)(v0 + 48);
  }
  objc_msgSend(*(id *)(v0 + 56), "setOriginalURL:", v5);

  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Album.actionTitle.getter()
{
  return sub_10007A140(0x6C41206572616853, 0xAE00A680E26D7562);
}

uint64_t Album.failureMessage.getter()
{
  return sub_10007A140(0xD00000000000001BLL, 0x80000001003A8040);
}

uint64_t Album.shareURL.getter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2[4] = a1;
  v2[5] = v1;
  v3 = sub_1000057B4(&qword_1004BB108);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000057B4(&qword_1004B9E98);
  v2[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000057B4(&qword_1004BB690);
  v2[10] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[11] = v7;
  v2[12] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000057B4(&qword_1004BB698);
  v2[13] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[14] = v9;
  v2[15] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000057B4(&qword_1004B99B0);
  v2[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100088484, 0, 0);
}

uint64_t sub_100088484()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 128);
  Album.url.getter();
  v2 = type metadata accessor for URL(0);
  *(_QWORD *)(v0 + 136) = v2;
  v3 = *(_QWORD *)(v2 - 8);
  *(_QWORD *)(v0 + 144) = v3;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = sub_10000FE2C(*(_QWORD *)(v0 + 128), &qword_1004B99B0);
    v5 = Album.catalogID.getter(v4);
    *(_QWORD *)(v0 + 152) = v5;
    *(_QWORD *)(v0 + 160) = v6;
    if (v6)
    {
      v7 = v5;
      v8 = v6;
      KeyPath = swift_getKeyPath(&unk_1003CAAD8);
      *(_QWORD *)(v0 + 16) = v7;
      *(_QWORD *)(v0 + 24) = v8;
      v10 = type metadata accessor for Album(0);
      *(_QWORD *)(v0 + 168) = v10;
      v11 = sub_100004D8C(&qword_1004B9F18, (uint64_t (*)(uint64_t))&type metadata accessor for Album, (uint64_t)&protocol conformance descriptor for Album);
      swift_bridgeObjectRetain();
      MusicCatalogResourceRequest.init<A>(matching:equalTo:)(KeyPath, v0 + 16, v10, &protocol witness table for Album, v11);
      v12 = (_QWORD *)swift_task_alloc(async function pointer to MusicCatalogResourceRequest.response()[1]);
      *(_QWORD *)(v0 + 176) = v12;
      *v12 = v0;
      v12[1] = sub_10008865C;
      return MusicCatalogResourceRequest.response()(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v3 + 56))(*(_QWORD *)(v0 + 32), 1, 1, v2);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 32);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 32))(v14, *(_QWORD *)(v0 + 128), v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v14, 0, 1, v2);
  }
  v15 = *(_QWORD *)(v0 + 120);
  v16 = *(_QWORD *)(v0 + 96);
  v18 = *(_QWORD *)(v0 + 64);
  v17 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008865C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 176);
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100088840;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 160));
    v4 = sub_1000886C8;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000886C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  MusicCatalogResourceResponse.items.getter(*(_QWORD *)(v0 + 80));
  sub_1000756B0(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v6 = *(_QWORD *)(v1 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 1, v1) == 1)
  {
    v7 = *(_QWORD *)(v0 + 136);
    v8 = *(_QWORD *)(v0 + 144);
    v10 = *(_QWORD *)(v0 + 112);
    v9 = *(_QWORD *)(v0 + 120);
    v11 = *(_QWORD *)(v0 + 104);
    v12 = *(_QWORD *)(v0 + 72);
    v13 = *(_QWORD *)(v0 + 32);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    sub_10000FE2C(v12, &qword_1004B9E98);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v13, 1, 1, v7);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 168);
    v16 = *(_QWORD *)(v0 + 112);
    v15 = *(_QWORD *)(v0 + 120);
    v18 = *(_QWORD *)(v0 + 96);
    v17 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 80);
    v20 = *(_QWORD *)(v0 + 88);
    v21 = *(_QWORD *)(v0 + 72);
    Album.url.getter();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v21, v14);
  }
  v22 = *(_QWORD *)(v0 + 120);
  v23 = *(_QWORD *)(v0 + 96);
  v25 = *(_QWORD *)(v0 + 64);
  v24 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100088840()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (qword_1004B8A28 != -1)
    swift_once(&qword_1004B8A28, sub_1000971E8);
  v1 = *(_QWORD *)(v0 + 184);
  v2 = type metadata accessor for Logger(0);
  sub_100039D34(v2, (uint64_t)qword_1004BB610);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain();
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 160);
  if (v6)
  {
    v9 = *(_QWORD *)(v0 + 152);
    v26 = *(_QWORD *)(v0 + 112);
    v27 = *(_QWORD *)(v0 + 104);
    v28 = *(_QWORD *)(v0 + 120);
    v10 = swift_slowAlloc(22, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    v12 = swift_slowAlloc(32, -1);
    v29 = v12;
    *(_DWORD *)v10 = 136446466;
    swift_bridgeObjectRetain();
    v13 = (char *)MusicItemID.description.getter(v9, v8);
    v15 = v14;
    swift_bridgeObjectRelease(v8);
    *(_QWORD *)(v10 + 4) = sub_1000393D0(v13, v15, &v29);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease_n(v8, 2);
    *(_WORD *)(v10 + 12) = 2114;
    swift_errorRetain(v7);
    v16 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v10 + 14) = v16;
    *v11 = v16;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to get share URL for album catalogID: %{public}s: %{public}@", (uint8_t *)v10, 0x16u);
    v17 = sub_1000057B4(&qword_1004C0DB0);
    swift_arrayDestroy(v11, 1, v17);
    swift_slowDealloc(v11, -1, -1);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v7);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v28, v27);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 112);
    v18 = *(_QWORD *)(v0 + 120);
    v20 = *(_QWORD *)(v0 + 104);

    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_bridgeObjectRelease_n(v8, 2);
    swift_errorRelease(v7);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 144) + 56))(*(_QWORD *)(v0 + 32), 1, 1, *(_QWORD *)(v0 + 136));
  v21 = *(_QWORD *)(v0 + 120);
  v22 = *(_QWORD *)(v0 + 96);
  v24 = *(_QWORD *)(v0 + 64);
  v23 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Album.augmentMetadata(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2[4] = a1;
  v2[5] = v1;
  v3 = type metadata accessor for MusicOffer.Kind(0);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MusicOffer(0);
  v2[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[10] = v6;
  v2[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000057B4(&qword_1004B99B0);
  v2[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000057B4(&qword_1004BB108);
  v2[13] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[14] = v9;
  v2[15] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*(_QWORD *)(*(_QWORD *)(sub_1000057B4(&qword_1004B9E98) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[16] = swift_task_alloc(v10);
  v2[17] = swift_task_alloc(v10);
  v2[18] = swift_task_alloc(v10);
  v11 = sub_1000057B4(&qword_1004BB690);
  v2[19] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v2[20] = v12;
  v2[21] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000057B4(&qword_1004BB698);
  v2[22] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v2[23] = v14;
  v2[24] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100088C84, 0, 0);
}

uint64_t sub_100088C84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = Album.catalogID.getter(a1);
  *(_QWORD *)(v1 + 200) = v2;
  *(_QWORD *)(v1 + 208) = v3;
  if (v3)
  {
    v4 = v2;
    v5 = v3;
    v6 = objc_msgSend(**(id **)(v1 + 32), "specialization");
    *(_QWORD *)(v1 + 216) = v6;
    if (v6)
    {
      v7 = v6;
      objc_opt_self(LPiTunesMediaAlbumMetadata);
      v8 = swift_dynamicCastObjCClass(v7);
      *(_QWORD *)(v1 + 224) = v8;
      if (v8)
      {
        v9 = *(_QWORD *)(v1 + 176);
        KeyPath = swift_getKeyPath(&unk_1003CAAD8);
        *(_QWORD *)(v1 + 16) = v4;
        *(_QWORD *)(v1 + 24) = v5;
        v11 = type metadata accessor for Album(0);
        *(_QWORD *)(v1 + 232) = v11;
        v12 = sub_100004D8C(&qword_1004B9F18, (uint64_t (*)(uint64_t))&type metadata accessor for Album, (uint64_t)&protocol conformance descriptor for Album);
        swift_bridgeObjectRetain();
        MusicCatalogResourceRequest.init<A>(matching:equalTo:)(KeyPath, v1 + 16, v11, &protocol witness table for Album, v12);
        v13 = sub_1000057B4((uint64_t *)&unk_1004BDDB0);
        v14 = swift_allocObject(v13, 40, 7);
        *(_OWORD *)(v14 + 16) = xmmword_1003C6240;
        sub_1000057B4(&qword_1004B9F10);
        v15 = static PartialMusicProperty<A>.offers.getter();
        *(_QWORD *)(v14 + 32) = v15;
        specialized Array._endMutation()(v15);
        MusicCatalogResourceRequest.properties.setter(v14, v9);
        v16 = (_QWORD *)swift_task_alloc(async function pointer to MusicCatalogResourceRequest.response()[1]);
        *(_QWORD *)(v1 + 240) = v16;
        *v16 = v1;
        v16[1] = sub_100088EC8;
        return MusicCatalogResourceRequest.response()(*(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 176));
      }
      swift_bridgeObjectRelease(v5);

    }
    else
    {
      swift_bridgeObjectRelease(v5);
    }
  }
  v18 = *(_QWORD *)(v1 + 168);
  v20 = *(_QWORD *)(v1 + 136);
  v19 = *(_QWORD *)(v1 + 144);
  v22 = *(_QWORD *)(v1 + 120);
  v21 = *(_QWORD *)(v1 + 128);
  v24 = *(_QWORD *)(v1 + 88);
  v23 = *(_QWORD *)(v1 + 96);
  v25 = *(_QWORD *)(v1 + 64);
  swift_task_dealloc(*(_QWORD *)(v1 + 192));
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100088EC8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 240);
  *(_QWORD *)(*v1 + 248) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10008935C;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 208));
    v4 = sub_100088F34;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100088F34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSURL *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Class isa;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  Class v60;
  uint64_t (*v61)(uint64_t, char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 104);
  v7 = *(void ***)(v0 + 32);
  MusicCatalogResourceResponse.items.getter(*(_QWORD *)(v0 + 152));
  sub_1000756B0(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v8 = *v7;
  sub_10000FEB4(v2, v3, &qword_1004B9E98);
  v9 = *(_QWORD *)(v1 - 8);
  v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v10(v3, 1, v1) == 1)
  {
    v11 = *(_QWORD *)(v0 + 96);
    sub_10000FE2C(*(_QWORD *)(v0 + 136), &qword_1004B9E98);
    v12 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = 0;
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 232);
    v15 = *(_QWORD *)(v0 + 136);
    v16 = *(_QWORD *)(v0 + 96);
    Album.url.getter();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v15, v14);
    v17 = type metadata accessor for URL(0);
    v18 = *(_QWORD *)(v17 - 8);
    v13 = 0;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
    {
      v20 = *(_QWORD *)(v0 + 96);
      URL._bridgeToObjectiveC()(v19);
      v13 = v21;
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v20, v17);
    }
  }
  v22 = *(_QWORD *)(v0 + 232);
  v23 = *(_QWORD *)(v0 + 144);
  v24 = *(_QWORD *)(v0 + 128);
  objc_msgSend(v8, "setOriginalURL:", v13);

  sub_10000FEB4(v23, v24, &qword_1004B9E98);
  if (v10(v24, 1, v22) == 1)
  {
    sub_10000FE2C(*(_QWORD *)(v0 + 128), &qword_1004B9E98);
    isa = 0;
  }
  else
  {
    v26 = *(_QWORD *)(v0 + 232);
    v27 = *(_QWORD *)(v0 + 128);
    isa = (Class)Album.offers.getter();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v27, v26);
    if (isa)
    {
      v28 = *((_QWORD *)isa + 2);
      if (v28)
      {
        v29 = *(_QWORD *)(v0 + 80);
        v63 = *(_QWORD *)(v0 + 56);
        sub_100097348(0, v28, 0);
        v30 = (char *)isa
            + ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80));
        v62 = *(_QWORD *)(v29 + 72);
        v64 = v29;
        v60 = isa;
        v61 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 16);
        do
        {
          v31 = *(_QWORD *)(v0 + 88);
          v33 = *(_QWORD *)(v0 + 64);
          v32 = *(_QWORD *)(v0 + 72);
          v34 = *(_QWORD *)(v0 + 48);
          v35 = v61(v31, v30, v32);
          v36 = MusicOffer.kind.getter(v35);
          v37 = MusicOffer.Kind.rawValue.getter(v36);
          v39 = v38;
          (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v33, v34);
          (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v31, v32);
          if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
            sub_100097348(0, _swiftEmptyArrayStorage[2] + 1, 1);
          v41 = _swiftEmptyArrayStorage[2];
          v40 = _swiftEmptyArrayStorage[3];
          if (v41 >= v40 >> 1)
            sub_100097348((char *)(v40 > 1), v41 + 1, 1);
          _swiftEmptyArrayStorage[2] = v41 + 1;
          v42 = &_swiftEmptyArrayStorage[2 * v41];
          v42[4] = v37;
          v42[5] = v39;
          v30 += v62;
          --v28;
        }
        while (v28);
        swift_bridgeObjectRelease(v60);
      }
      else
      {
        swift_bridgeObjectRelease(isa);
      }
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    }
  }
  v43 = *(void **)(v0 + 216);
  v45 = *(_QWORD *)(v0 + 184);
  v44 = *(_QWORD *)(v0 + 192);
  v47 = *(_QWORD *)(v0 + 168);
  v46 = *(_QWORD *)(v0 + 176);
  v48 = *(_QWORD *)(v0 + 152);
  v49 = *(_QWORD *)(v0 + 160);
  v50 = *(_QWORD *)(v0 + 144);
  objc_msgSend(*(id *)(v0 + 224), "setOffers:", isa);

  sub_10000FE2C(v50, &qword_1004B9E98);
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v47, v48);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
  v51 = *(_QWORD *)(v0 + 168);
  v53 = *(_QWORD *)(v0 + 136);
  v52 = *(_QWORD *)(v0 + 144);
  v55 = *(_QWORD *)(v0 + 120);
  v54 = *(_QWORD *)(v0 + 128);
  v57 = *(_QWORD *)(v0 + 88);
  v56 = *(_QWORD *)(v0 + 96);
  v58 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008935C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (qword_1004B8A28 != -1)
    swift_once(&qword_1004B8A28, sub_1000971E8);
  v1 = *(_QWORD *)(v0 + 248);
  v2 = type metadata accessor for Logger(0);
  sub_100039D34(v2, (uint64_t)qword_1004BB610);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain();
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 248);
  v8 = *(_QWORD *)(v0 + 208);
  if (v6)
  {
    v9 = *(_QWORD *)(v0 + 200);
    v30 = *(void **)(v0 + 216);
    v31 = *(_QWORD *)(v0 + 184);
    v32 = *(_QWORD *)(v0 + 176);
    v33 = *(_QWORD *)(v0 + 192);
    v10 = swift_slowAlloc(22, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    v12 = swift_slowAlloc(32, -1);
    v34 = v12;
    *(_DWORD *)v10 = 136446466;
    swift_bridgeObjectRetain();
    v13 = (char *)MusicItemID.description.getter(v9, v8);
    v15 = v14;
    swift_bridgeObjectRelease(v8);
    *(_QWORD *)(v10 + 4) = sub_1000393D0(v13, v15, &v34);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease_n(v8, 2);
    *(_WORD *)(v10 + 12) = 2114;
    swift_errorRetain(v7);
    v16 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v10 + 14) = v16;
    *v11 = v16;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to get share URL for album catalogID: %{public}s: %{public}@", (uint8_t *)v10, 0x16u);
    v17 = sub_1000057B4(&qword_1004C0DB0);
    swift_arrayDestroy(v11, 1, v17);
    swift_slowDealloc(v11, -1, -1);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v7);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v33, v32);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 184);
    v18 = *(_QWORD *)(v0 + 192);
    v20 = *(_QWORD *)(v0 + 176);

    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_bridgeObjectRelease_n(v8, 2);
    swift_errorRelease(v7);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  }
  v21 = *(_QWORD *)(v0 + 168);
  v23 = *(_QWORD *)(v0 + 136);
  v22 = *(_QWORD *)(v0 + 144);
  v25 = *(_QWORD *)(v0 + 120);
  v24 = *(_QWORD *)(v0 + 128);
  v27 = *(_QWORD *)(v0 + 88);
  v26 = *(_QWORD *)(v0 + 96);
  v28 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100089650(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1004BB68C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10002F6EC;
  return Album.shareURL.getter(a1);
}

uint64_t sub_1000896A0(uint64_t a1, uint64_t a2)
{
  return sub_10007A304(a1, a2, 0x6C41206572616853, 0xAE00A680E26D7562);
}

uint64_t sub_1000896C4()
{
  return Album.failureMessage.getter();
}

uint64_t sub_1000896D8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1004BB6A4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10002F6EC;
  return Album.augmentMetadata(_:)(a1);
}

uint64_t Artist.actionTitle.getter()
{
  return sub_10007A140(0x7241206572616853, 0xAFA680E274736974);
}

uint64_t Artist.failureMessage.getter()
{
  return sub_10007A140(0xD00000000000001CLL, 0x80000001003A8060);
}

uint64_t Artist.shareURL.getter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2[4] = a1;
  v2[5] = v1;
  v3 = sub_1000057B4(&qword_1004BB3C0);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000057B4(&qword_1004BB6B0);
  v2[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000057B4(&qword_1004BB6B8);
  v2[10] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[11] = v7;
  v2[12] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000057B4(&qword_1004BB6C0);
  v2[13] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[14] = v9;
  v2[15] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000057B4(&qword_1004B99B0);
  v2[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10008986C, 0, 0);
}

uint64_t sub_10008986C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 128);
  Artist.url.getter();
  v2 = type metadata accessor for URL(0);
  *(_QWORD *)(v0 + 136) = v2;
  v3 = *(_QWORD *)(v2 - 8);
  *(_QWORD *)(v0 + 144) = v3;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = sub_10000FE2C(*(_QWORD *)(v0 + 128), &qword_1004B99B0);
    v5 = Artist.catalogID.getter(v4);
    *(_QWORD *)(v0 + 152) = v5;
    *(_QWORD *)(v0 + 160) = v6;
    if (v6)
    {
      v7 = v5;
      v8 = v6;
      KeyPath = swift_getKeyPath(&unk_1003CAB00);
      *(_QWORD *)(v0 + 16) = v7;
      *(_QWORD *)(v0 + 24) = v8;
      v10 = type metadata accessor for Artist(0);
      *(_QWORD *)(v0 + 168) = v10;
      v11 = sub_100004D8C(&qword_1004BB6C8, (uint64_t (*)(uint64_t))&type metadata accessor for Artist, (uint64_t)&protocol conformance descriptor for Artist);
      swift_bridgeObjectRetain();
      MusicCatalogResourceRequest.init<A>(matching:equalTo:)(KeyPath, v0 + 16, v10, &protocol witness table for Artist, v11);
      v12 = (_QWORD *)swift_task_alloc(async function pointer to MusicCatalogResourceRequest.response()[1]);
      *(_QWORD *)(v0 + 176) = v12;
      *v12 = v0;
      v12[1] = sub_100089A44;
      return MusicCatalogResourceRequest.response()(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v3 + 56))(*(_QWORD *)(v0 + 32), 1, 1, v2);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 32);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 32))(v14, *(_QWORD *)(v0 + 128), v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v14, 0, 1, v2);
  }
  v15 = *(_QWORD *)(v0 + 120);
  v16 = *(_QWORD *)(v0 + 96);
  v18 = *(_QWORD *)(v0 + 64);
  v17 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100089A44()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 176);
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100089C28;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 160));
    v4 = sub_100089AB0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100089AB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  MusicCatalogResourceResponse.items.getter(*(_QWORD *)(v0 + 80));
  sub_1000756CC(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v6 = *(_QWORD *)(v1 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 1, v1) == 1)
  {
    v7 = *(_QWORD *)(v0 + 136);
    v8 = *(_QWORD *)(v0 + 144);
    v10 = *(_QWORD *)(v0 + 112);
    v9 = *(_QWORD *)(v0 + 120);
    v11 = *(_QWORD *)(v0 + 104);
    v12 = *(_QWORD *)(v0 + 72);
    v13 = *(_QWORD *)(v0 + 32);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    sub_10000FE2C(v12, &qword_1004BB6B0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v13, 1, 1, v7);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 168);
    v16 = *(_QWORD *)(v0 + 112);
    v15 = *(_QWORD *)(v0 + 120);
    v18 = *(_QWORD *)(v0 + 96);
    v17 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 80);
    v20 = *(_QWORD *)(v0 + 88);
    v21 = *(_QWORD *)(v0 + 72);
    Artist.url.getter();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v21, v14);
  }
  v22 = *(_QWORD *)(v0 + 120);
  v23 = *(_QWORD *)(v0 + 96);
  v25 = *(_QWORD *)(v0 + 64);
  v24 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100089C28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (qword_1004B8A28 != -1)
    swift_once(&qword_1004B8A28, sub_1000971E8);
  v1 = *(_QWORD *)(v0 + 184);
  v2 = type metadata accessor for Logger(0);
  sub_100039D34(v2, (uint64_t)qword_1004BB610);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain();
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 160);
  if (v6)
  {
    v9 = *(_QWORD *)(v0 + 152);
    v26 = *(_QWORD *)(v0 + 112);
    v27 = *(_QWORD *)(v0 + 104);
    v28 = *(_QWORD *)(v0 + 120);
    v10 = swift_slowAlloc(22, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    v12 = swift_slowAlloc(32, -1);
    v29 = v12;
    *(_DWORD *)v10 = 136446466;
    swift_bridgeObjectRetain();
    v13 = (char *)MusicItemID.description.getter(v9, v8);
    v15 = v14;
    swift_bridgeObjectRelease(v8);
    *(_QWORD *)(v10 + 4) = sub_1000393D0(v13, v15, &v29);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease_n(v8, 2);
    *(_WORD *)(v10 + 12) = 2114;
    swift_errorRetain(v7);
    v16 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v10 + 14) = v16;
    *v11 = v16;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to get share URL for artist catalogID: %{public}s: %{public}@", (uint8_t *)v10, 0x16u);
    v17 = sub_1000057B4(&qword_1004C0DB0);
    swift_arrayDestroy(v11, 1, v17);
    swift_slowDealloc(v11, -1, -1);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v7);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v28, v27);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 112);
    v18 = *(_QWORD *)(v0 + 120);
    v20 = *(_QWORD *)(v0 + 104);

    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_bridgeObjectRelease_n(v8, 2);
    swift_errorRelease(v7);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 144) + 56))(*(_QWORD *)(v0 + 32), 1, 1, *(_QWORD *)(v0 + 136));
  v21 = *(_QWORD *)(v0 + 120);
  v22 = *(_QWORD *)(v0 + 96);
  v24 = *(_QWORD *)(v0 + 64);
  v23 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100089F00(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1004BB6AC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10002F6EC;
  return Artist.shareURL.getter(a1);
}

uint64_t sub_100089F50(uint64_t a1, uint64_t a2)
{
  return sub_10007A304(a1, a2, 0x7241206572616853, 0xAFA680E274736974);
}

uint64_t sub_100089F74()
{
  return Artist.failureMessage.getter();
}

uint64_t sub_100089F88(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_1000057B4(&qword_1004B99B0);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100089FE4, 0, 0);
}

uint64_t sub_100089FE4()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 40) = **(_QWORD **)(v0 + 16);
  v1 = (_QWORD *)swift_task_alloc(dword_1004BB6AC);
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_10008A03C;
  return Artist.shareURL.getter(*(_QWORD *)(v0 + 32));
}

uint64_t sub_10008A03C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  return swift_task_switch(sub_1000989A8, 0, 0);
}

uint64_t Composer.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t Composer.actionTitle.getter()
{
  return sub_10007A140(0x1000000000000011, 0x80000001003A8080);
}

uint64_t Composer.failureMessage.getter()
{
  return sub_10007A140(0xD00000000000001ELL, 0x80000001003A80A0);
}

uint64_t sub_10008A108(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_10008A120, 0, 0);
}

uint64_t sub_10008A120()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008A170()
{
  return Composer.actionTitle.getter();
}

uint64_t sub_10008A184()
{
  return Composer.failureMessage.getter();
}

uint64_t sub_10008A198(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((char *)&dword_1004BBAB0 + dword_1004BBAB0);
  v3 = (_QWORD *)swift_task_alloc(unk_1004BBAB4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10002F6EC;
  return v5(a1);
}

uint64_t Curator.actionTitle.getter()
{
  return sub_10007A140(0x1000000000000010, 0x80000001003A80C0);
}

uint64_t Curator.failureMessage.getter()
{
  return sub_10007A140(0xD00000000000001DLL, 0x80000001003A80E0);
}

uint64_t sub_10008A238(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch(sub_10008A250, 0, 0);
}

uint64_t sub_10008A250()
{
  uint64_t v0;

  Curator.url.getter();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008A280()
{
  return Curator.actionTitle.getter();
}

uint64_t sub_10008A294()
{
  return Curator.failureMessage.getter();
}

uint64_t sub_10008A2A8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((char *)&dword_1004BBAA8 + dword_1004BBAA8);
  v3 = (_QWORD *)swift_task_alloc(unk_1004BBAAC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10002F6EC;
  return v5(a1);
}

uint64_t EditorialItem.actionTitle.getter()
{
  return sub_10007A140(0xA680E26572616853, 0xA800000000000000);
}

uint64_t sub_10008A328(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch(sub_10008A340, 0, 0);
}

uint64_t sub_10008A340()
{
  uint64_t v0;

  EditorialItem.url.getter();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008A370()
{
  return sub_1000877CC();
}

uint64_t sub_10008A384(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((char *)&dword_1004BBAA0 + dword_1004BBAA0);
  v3 = (_QWORD *)swift_task_alloc(unk_1004BBAA4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10002F6EC;
  return v5(a1);
}

uint64_t Genre.actionTitle.getter()
{
  return sub_10007A140(0x6547206572616853, 0xAE00A680E265726ELL);
}

uint64_t Genre.failureMessage.getter()
{
  return sub_10007A140(0xD00000000000001BLL, 0x80000001003A8100);
}

uint64_t sub_10008A42C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch(sub_10008A444, 0, 0);
}

uint64_t sub_10008A444()
{
  uint64_t v0;

  Genre.url.getter();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008A474(uint64_t a1, uint64_t a2)
{
  return sub_10007A304(a1, a2, 0x6547206572616853, 0xAE00A680E265726ELL);
}

uint64_t sub_10008A498()
{
  return Genre.failureMessage.getter();
}

uint64_t sub_10008A4AC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((char *)&dword_1004BBA98 + dword_1004BBA98);
  v3 = (_QWORD *)swift_task_alloc(unk_1004BBA9C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10002F6EC;
  return v5(a1);
}

uint64_t MusicMovie.actionTitle.getter()
{
  return sub_10007A140(0x6F4D206572616853, 0xAE00A680E2656976);
}

uint64_t MusicMovie.failureMessage.getter()
{
  return sub_10007A140(0xD00000000000001BLL, 0x80000001003A8120);
}

uint64_t MusicMovie.shareURL.getter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2[4] = a1;
  v2[5] = v1;
  v3 = sub_1000057B4(&qword_1004BB3B0);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000057B4(&qword_1004BB6D8);
  v2[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000057B4(&qword_1004BB6E0);
  v2[10] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[11] = v7;
  v2[12] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000057B4(&qword_1004BB6E8);
  v2[13] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[14] = v9;
  v2[15] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000057B4(&qword_1004B99B0);
  v2[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10008A654, 0, 0);
}

uint64_t sub_10008A654()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 128);
  MusicMovie.url.getter();
  v2 = type metadata accessor for URL(0);
  *(_QWORD *)(v0 + 136) = v2;
  v3 = *(_QWORD *)(v2 - 8);
  *(_QWORD *)(v0 + 144) = v3;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = sub_10000FE2C(*(_QWORD *)(v0 + 128), &qword_1004B99B0);
    v5 = MusicMovie.catalogID.getter(v4);
    *(_QWORD *)(v0 + 152) = v5;
    *(_QWORD *)(v0 + 160) = v6;
    if (v6)
    {
      v7 = v5;
      v8 = v6;
      KeyPath = swift_getKeyPath(&unk_1003CAB28);
      *(_QWORD *)(v0 + 16) = v7;
      *(_QWORD *)(v0 + 24) = v8;
      v10 = type metadata accessor for MusicMovie(0);
      *(_QWORD *)(v0 + 168) = v10;
      v11 = sub_100004D8C(&qword_1004BB6F0, (uint64_t (*)(uint64_t))&type metadata accessor for MusicMovie, (uint64_t)&protocol conformance descriptor for MusicMovie);
      v12 = sub_100004D8C(&qword_1004BB6F8, (uint64_t (*)(uint64_t))&type metadata accessor for MusicMovie, (uint64_t)&protocol conformance descriptor for MusicMovie);
      swift_bridgeObjectRetain();
      MusicCatalogResourceRequest.init<A>(matching:equalTo:)(KeyPath, v0 + 16, v10, v11, v12);
      v13 = (_QWORD *)swift_task_alloc(async function pointer to MusicCatalogResourceRequest.response()[1]);
      *(_QWORD *)(v0 + 176) = v13;
      *v13 = v0;
      v13[1] = sub_10008A854;
      return MusicCatalogResourceRequest.response()(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v3 + 56))(*(_QWORD *)(v0 + 32), 1, 1, v2);
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 32);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 32))(v15, *(_QWORD *)(v0 + 128), v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v15, 0, 1, v2);
  }
  v16 = *(_QWORD *)(v0 + 120);
  v17 = *(_QWORD *)(v0 + 96);
  v19 = *(_QWORD *)(v0 + 64);
  v18 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008A854()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 176);
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10008AA38;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 160));
    v4 = sub_10008A8C0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10008A8C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  MusicCatalogResourceResponse.items.getter(*(_QWORD *)(v0 + 80));
  sub_1000757F8(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v6 = *(_QWORD *)(v1 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 1, v1) == 1)
  {
    v7 = *(_QWORD *)(v0 + 136);
    v8 = *(_QWORD *)(v0 + 144);
    v10 = *(_QWORD *)(v0 + 112);
    v9 = *(_QWORD *)(v0 + 120);
    v11 = *(_QWORD *)(v0 + 104);
    v12 = *(_QWORD *)(v0 + 72);
    v13 = *(_QWORD *)(v0 + 32);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    sub_10000FE2C(v12, &qword_1004BB6D8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v13, 1, 1, v7);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 168);
    v16 = *(_QWORD *)(v0 + 112);
    v15 = *(_QWORD *)(v0 + 120);
    v18 = *(_QWORD *)(v0 + 96);
    v17 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 80);
    v20 = *(_QWORD *)(v0 + 88);
    v21 = *(_QWORD *)(v0 + 72);
    MusicMovie.url.getter();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v21, v14);
  }
  v22 = *(_QWORD *)(v0 + 120);
  v23 = *(_QWORD *)(v0 + 96);
  v25 = *(_QWORD *)(v0 + 64);
  v24 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008AA38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (qword_1004B8A28 != -1)
    swift_once(&qword_1004B8A28, sub_1000971E8);
  v1 = *(_QWORD *)(v0 + 184);
  v2 = type metadata accessor for Logger(0);
  sub_100039D34(v2, (uint64_t)qword_1004BB610);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain();
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 160);
  if (v6)
  {
    v9 = *(_QWORD *)(v0 + 152);
    v26 = *(_QWORD *)(v0 + 112);
    v27 = *(_QWORD *)(v0 + 104);
    v28 = *(_QWORD *)(v0 + 120);
    v10 = swift_slowAlloc(22, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    v12 = swift_slowAlloc(32, -1);
    v29 = v12;
    *(_DWORD *)v10 = 136446466;
    swift_bridgeObjectRetain();
    v13 = (char *)MusicItemID.description.getter(v9, v8);
    v15 = v14;
    swift_bridgeObjectRelease(v8);
    *(_QWORD *)(v10 + 4) = sub_1000393D0(v13, v15, &v29);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease_n(v8, 2);
    *(_WORD *)(v10 + 12) = 2114;
    swift_errorRetain(v7);
    v16 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v10 + 14) = v16;
    *v11 = v16;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to get share URL for music movie catalogID: %{public}s: %{public}@", (uint8_t *)v10, 0x16u);
    v17 = sub_1000057B4(&qword_1004C0DB0);
    swift_arrayDestroy(v11, 1, v17);
    swift_slowDealloc(v11, -1, -1);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v7);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v28, v27);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 112);
    v18 = *(_QWORD *)(v0 + 120);
    v20 = *(_QWORD *)(v0 + 104);

    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_bridgeObjectRelease_n(v8, 2);
    swift_errorRelease(v7);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 144) + 56))(*(_QWORD *)(v0 + 32), 1, 1, *(_QWORD *)(v0 + 136));
  v21 = *(_QWORD *)(v0 + 120);
  v22 = *(_QWORD *)(v0 + 96);
  v24 = *(_QWORD *)(v0 + 64);
  v23 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008AD10(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1004BB6D4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10002F6EC;
  return MusicMovie.shareURL.getter(a1);
}

uint64_t sub_10008AD60(uint64_t a1, uint64_t a2)
{
  return sub_10007A304(a1, a2, 0x6F4D206572616853, 0xAE00A680E2656976);
}

uint64_t sub_10008AD84()
{
  return MusicMovie.failureMessage.getter();
}

uint64_t sub_10008AD98(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_1000057B4(&qword_1004B99B0);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10008ADF4, 0, 0);
}

uint64_t sub_10008ADF4()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 40) = **(_QWORD **)(v0 + 16);
  v1 = (_QWORD *)swift_task_alloc(dword_1004BB6D4);
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_10008A03C;
  return MusicMovie.shareURL.getter(*(_QWORD *)(v0 + 32));
}

uint64_t MusicVideo.actionTitle.getter()
{
  return sub_10007A140(0x6956206572616853, 0xAE00A680E26F6564);
}

uint64_t MusicVideo.failureMessage.getter()
{
  return sub_10007A140(0xD00000000000001BLL, 0x80000001003A8140);
}

uint64_t MusicVideo.shareURL.getter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2[4] = a1;
  v2[5] = v1;
  v3 = sub_1000057B4(&qword_1004BB3A0);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000057B4(&qword_1004B9EE0);
  v2[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000057B4(&qword_1004BB708);
  v2[10] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[11] = v7;
  v2[12] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000057B4(&qword_1004BB710);
  v2[13] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[14] = v9;
  v2[15] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000057B4(&qword_1004B99B0);
  v2[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10008AF94, 0, 0);
}

uint64_t sub_10008AF94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 128);
  MusicVideo.url.getter();
  v2 = type metadata accessor for URL(0);
  *(_QWORD *)(v0 + 136) = v2;
  v3 = *(_QWORD *)(v2 - 8);
  *(_QWORD *)(v0 + 144) = v3;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = sub_10000FE2C(*(_QWORD *)(v0 + 128), &qword_1004B99B0);
    v5 = MusicVideo.catalogID.getter(v4);
    *(_QWORD *)(v0 + 152) = v5;
    *(_QWORD *)(v0 + 160) = v6;
    if (v6)
    {
      v7 = v5;
      v8 = v6;
      KeyPath = swift_getKeyPath(&unk_1003CAB50);
      *(_QWORD *)(v0 + 16) = v7;
      *(_QWORD *)(v0 + 24) = v8;
      v10 = type metadata accessor for MusicVideo(0);
      *(_QWORD *)(v0 + 168) = v10;
      v11 = sub_100004D8C(&qword_1004BB718, (uint64_t (*)(uint64_t))&type metadata accessor for MusicVideo, (uint64_t)&protocol conformance descriptor for MusicVideo);
      swift_bridgeObjectRetain();
      MusicCatalogResourceRequest.init<A>(matching:equalTo:)(KeyPath, v0 + 16, v10, &protocol witness table for MusicVideo, v11);
      v12 = (_QWORD *)swift_task_alloc(async function pointer to MusicCatalogResourceRequest.response()[1]);
      *(_QWORD *)(v0 + 176) = v12;
      *v12 = v0;
      v12[1] = sub_10008B16C;
      return MusicCatalogResourceRequest.response()(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v3 + 56))(*(_QWORD *)(v0 + 32), 1, 1, v2);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 32);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 32))(v14, *(_QWORD *)(v0 + 128), v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v14, 0, 1, v2);
  }
  v15 = *(_QWORD *)(v0 + 120);
  v16 = *(_QWORD *)(v0 + 96);
  v18 = *(_QWORD *)(v0 + 64);
  v17 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008B16C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 176);
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10008B350;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 160));
    v4 = sub_10008B1D8;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10008B1D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  MusicCatalogResourceResponse.items.getter(*(_QWORD *)(v0 + 80));
  sub_100075814(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v6 = *(_QWORD *)(v1 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 1, v1) == 1)
  {
    v7 = *(_QWORD *)(v0 + 136);
    v8 = *(_QWORD *)(v0 + 144);
    v10 = *(_QWORD *)(v0 + 112);
    v9 = *(_QWORD *)(v0 + 120);
    v11 = *(_QWORD *)(v0 + 104);
    v12 = *(_QWORD *)(v0 + 72);
    v13 = *(_QWORD *)(v0 + 32);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    sub_10000FE2C(v12, &qword_1004B9EE0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v13, 1, 1, v7);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 168);
    v16 = *(_QWORD *)(v0 + 112);
    v15 = *(_QWORD *)(v0 + 120);
    v18 = *(_QWORD *)(v0 + 96);
    v17 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 80);
    v20 = *(_QWORD *)(v0 + 88);
    v21 = *(_QWORD *)(v0 + 72);
    MusicVideo.url.getter();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v21, v14);
  }
  v22 = *(_QWORD *)(v0 + 120);
  v23 = *(_QWORD *)(v0 + 96);
  v25 = *(_QWORD *)(v0 + 64);
  v24 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008B350()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (qword_1004B8A28 != -1)
    swift_once(&qword_1004B8A28, sub_1000971E8);
  v1 = *(_QWORD *)(v0 + 184);
  v2 = type metadata accessor for Logger(0);
  sub_100039D34(v2, (uint64_t)qword_1004BB610);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain();
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 160);
  if (v6)
  {
    v9 = *(_QWORD *)(v0 + 152);
    v26 = *(_QWORD *)(v0 + 112);
    v27 = *(_QWORD *)(v0 + 104);
    v28 = *(_QWORD *)(v0 + 120);
    v10 = swift_slowAlloc(22, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    v12 = swift_slowAlloc(32, -1);
    v29 = v12;
    *(_DWORD *)v10 = 136446466;
    swift_bridgeObjectRetain();
    v13 = (char *)MusicItemID.description.getter(v9, v8);
    v15 = v14;
    swift_bridgeObjectRelease(v8);
    *(_QWORD *)(v10 + 4) = sub_1000393D0(v13, v15, &v29);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease_n(v8, 2);
    *(_WORD *)(v10 + 12) = 2114;
    swift_errorRetain(v7);
    v16 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v10 + 14) = v16;
    *v11 = v16;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to get share URL for music video catalogID: %{public}s: %{public}@", (uint8_t *)v10, 0x16u);
    v17 = sub_1000057B4(&qword_1004C0DB0);
    swift_arrayDestroy(v11, 1, v17);
    swift_slowDealloc(v11, -1, -1);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v7);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v28, v27);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 112);
    v18 = *(_QWORD *)(v0 + 120);
    v20 = *(_QWORD *)(v0 + 104);

    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_bridgeObjectRelease_n(v8, 2);
    swift_errorRelease(v7);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 144) + 56))(*(_QWORD *)(v0 + 32), 1, 1, *(_QWORD *)(v0 + 136));
  v21 = *(_QWORD *)(v0 + 120);
  v22 = *(_QWORD *)(v0 + 96);
  v24 = *(_QWORD *)(v0 + 64);
  v23 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008B624@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10008D3A0(a1, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of MusicVideoFilter.id.getter, a2);
}

uint64_t sub_10008B634(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1004BB704);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10002F6EC;
  return MusicVideo.shareURL.getter(a1);
}

uint64_t sub_10008B684(uint64_t a1, uint64_t a2)
{
  return sub_10007A304(a1, a2, 0x6956206572616853, 0xAE00A680E26F6564);
}

uint64_t sub_10008B6A8()
{
  return MusicVideo.failureMessage.getter();
}

uint64_t sub_10008B6BC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_1000057B4(&qword_1004B99B0);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10008B718, 0, 0);
}

uint64_t sub_10008B718()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 40) = **(_QWORD **)(v0 + 16);
  v1 = (_QWORD *)swift_task_alloc(dword_1004BB704);
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_10008A03C;
  return MusicVideo.shareURL.getter(*(_QWORD *)(v0 + 32));
}

uint64_t Playlist.actionTitle.getter()
{
  return sub_10007A140(0x1000000000000011, 0x80000001003A8160);
}

uint64_t Playlist.failureMessage.getter()
{
  return sub_10007A140(0xD00000000000001ELL, 0x80000001003A8180);
}

uint64_t Playlist.shareURL.getter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2[4] = a1;
  v2[5] = v1;
  v3 = sub_1000057B4(&qword_1004BB390);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_1000057B4(&qword_1004BD700) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[9] = swift_task_alloc(v5);
  v2[10] = swift_task_alloc(v5);
  v6 = sub_1000057B4(&qword_1004BB728);
  v2[11] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[12] = v7;
  v2[13] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000057B4(&qword_1004BB730);
  v2[14] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[15] = v9;
  v2[16] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000057B4(&qword_1004B99B0);
  v2[17] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10008B8C0, 0, 0);
}

uint64_t sub_10008B8C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  char v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 136);
  Playlist.url.getter();
  v2 = type metadata accessor for URL(0);
  *(_QWORD *)(v0 + 144) = v2;
  v3 = *(_QWORD *)(v2 - 8);
  *(_QWORD *)(v0 + 152) = v3;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = sub_10000FE2C(*(_QWORD *)(v0 + 136), &qword_1004B99B0);
    v5 = Playlist.catalogID.getter(v4);
    *(_QWORD *)(v0 + 160) = v5;
    *(_QWORD *)(v0 + 168) = v6;
    if (v6)
    {
      v7 = v5;
      v8 = v6;
      KeyPath = swift_getKeyPath(&unk_1003CAB78);
      *(_QWORD *)(v0 + 16) = v7;
      *(_QWORD *)(v0 + 24) = v8;
      v10 = type metadata accessor for Playlist(0);
      *(_QWORD *)(v0 + 176) = v10;
      v11 = sub_100004D8C(&qword_1004BB740, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist, (uint64_t)&protocol conformance descriptor for Playlist);
      swift_bridgeObjectRetain();
      MusicCatalogResourceRequest.init<A>(matching:equalTo:)(KeyPath, v0 + 16, v10, &protocol witness table for Playlist, v11);
      v12 = (_QWORD *)swift_task_alloc(async function pointer to MusicCatalogResourceRequest.response()[1]);
      *(_QWORD *)(v0 + 184) = v12;
      *v12 = v0;
      v12[1] = sub_10008BB1C;
      return MusicCatalogResourceRequest.response()(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
    }
    v15 = Playlist.isPublic.getter(v5);
    v16 = v15 != 2 && (v15 & 1) == 0;
    if (v16 && (Playlist.isShareable.getter() & 1) == 0 && (Playlist.canMakeShareable.getter() & 1) != 0)
    {
      v17 = (_QWORD *)swift_task_alloc(dword_1004BB73C);
      *(_QWORD *)(v0 + 200) = v17;
      *v17 = v0;
      v17[1] = sub_10008BD0C;
      return Playlist.publish()(*(_QWORD *)(v0 + 72));
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v3 + 56))(*(_QWORD *)(v0 + 32), 1, 1, v2);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 32);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 32))(v14, *(_QWORD *)(v0 + 136), v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v14, 0, 1, v2);
  }
  v18 = *(_QWORD *)(v0 + 128);
  v19 = *(_QWORD *)(v0 + 104);
  v21 = *(_QWORD *)(v0 + 72);
  v20 = *(_QWORD *)(v0 + 80);
  v22 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008BB1C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 184);
  *(_QWORD *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10008BE50;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 168));
    v4 = sub_10008BB88;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10008BB88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  MusicCatalogResourceResponse.items.getter(*(_QWORD *)(v0 + 88));
  sub_100075830(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v6 = *(_QWORD *)(v1 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 1, v1) == 1)
  {
    v7 = *(_QWORD *)(v0 + 144);
    v8 = *(_QWORD *)(v0 + 152);
    v10 = *(_QWORD *)(v0 + 120);
    v9 = *(_QWORD *)(v0 + 128);
    v11 = *(_QWORD *)(v0 + 112);
    v12 = *(_QWORD *)(v0 + 80);
    v13 = *(_QWORD *)(v0 + 32);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    sub_10000FE2C(v12, &qword_1004BD700);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v13, 1, 1, v7);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 176);
    v16 = *(_QWORD *)(v0 + 120);
    v15 = *(_QWORD *)(v0 + 128);
    v18 = *(_QWORD *)(v0 + 104);
    v17 = *(_QWORD *)(v0 + 112);
    v19 = *(_QWORD *)(v0 + 88);
    v20 = *(_QWORD *)(v0 + 96);
    v21 = *(_QWORD *)(v0 + 80);
    Playlist.url.getter();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v21, v14);
  }
  v22 = *(_QWORD *)(v0 + 128);
  v23 = *(_QWORD *)(v0 + 104);
  v25 = *(_QWORD *)(v0 + 72);
  v24 = *(_QWORD *)(v0 + 80);
  v26 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008BD0C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 200));
  return swift_task_switch(sub_10008BD60, 0, 0);
}

uint64_t sub_10008BD60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = type metadata accessor for Playlist(0);
  v3 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 144);
    v5 = *(_QWORD *)(v0 + 152);
    v6 = *(_QWORD *)(v0 + 32);
    sub_10000FE2C(v1, &qword_1004BD700);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v6, 1, 1, v4);
  }
  else
  {
    Playlist.url.getter();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  }
  v7 = *(_QWORD *)(v0 + 128);
  v8 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 80);
  v11 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008BE50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (qword_1004B8A28 != -1)
    swift_once(&qword_1004B8A28, sub_1000971E8);
  v1 = *(_QWORD *)(v0 + 192);
  v2 = type metadata accessor for Logger(0);
  sub_100039D34(v2, (uint64_t)qword_1004BB610);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain();
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 192);
  v8 = *(_QWORD *)(v0 + 168);
  if (v6)
  {
    v9 = *(_QWORD *)(v0 + 160);
    v27 = *(_QWORD *)(v0 + 120);
    v28 = *(_QWORD *)(v0 + 112);
    v29 = *(_QWORD *)(v0 + 128);
    v10 = swift_slowAlloc(22, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    v12 = swift_slowAlloc(32, -1);
    v30 = v12;
    *(_DWORD *)v10 = 136446466;
    swift_bridgeObjectRetain();
    v13 = (char *)MusicItemID.description.getter(v9, v8);
    v15 = v14;
    swift_bridgeObjectRelease(v8);
    *(_QWORD *)(v10 + 4) = sub_1000393D0(v13, v15, &v30);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease_n(v8, 2);
    *(_WORD *)(v10 + 12) = 2114;
    swift_errorRetain(v7);
    v16 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v10 + 14) = v16;
    *v11 = v16;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to get share URL for playlist catalogID: %{public}s: %{public}@", (uint8_t *)v10, 0x16u);
    v17 = sub_1000057B4(&qword_1004C0DB0);
    swift_arrayDestroy(v11, 1, v17);
    swift_slowDealloc(v11, -1, -1);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v7);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v29, v28);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 120);
    v18 = *(_QWORD *)(v0 + 128);
    v20 = *(_QWORD *)(v0 + 112);

    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_bridgeObjectRelease_n(v8, 2);
    swift_errorRelease(v7);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 152) + 56))(*(_QWORD *)(v0 + 32), 1, 1, *(_QWORD *)(v0 + 144));
  v21 = *(_QWORD *)(v0 + 128);
  v22 = *(_QWORD *)(v0 + 104);
  v24 = *(_QWORD *)(v0 + 72);
  v23 = *(_QWORD *)(v0 + 80);
  v25 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Playlist.publish()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2[3] = a1;
  v2[4] = v1;
  v3 = type metadata accessor for Playlist(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MusicLibraryPlaylistResponse(0);
  v2[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[9] = v6;
  v2[10] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MusicLibraryPlaylistRequest.CompletionPolicy(0);
  v2[11] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[12] = v8;
  v2[13] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000057B4(&qword_1004BB748);
  v2[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MusicLibraryPlaylistRequest(0);
  v2[15] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[16] = v11;
  v2[17] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10008C22C, 0, 0);
}

uint64_t sub_10008C22C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[13];
  v1 = v0[14];
  v3 = v0[11];
  v4 = v0[12];
  v5 = v0[4];
  v6 = type metadata accessor for Curator(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v1, 1, 1, v6);
  static MusicLibraryPlaylistRequest.editing(_:name:description:userImage:isPublic:isVisible:curator:)(v5, 0, 0, 0, 0, 0, 1, 2, v1);
  sub_10000FE2C(v1, &qword_1004BB748);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v2, enum case for MusicLibraryPlaylistRequest.CompletionPolicy.afterCloudLibraryChanges(_:), v3);
  MusicLibraryPlaylistRequest.completionPolicy.setter(v2);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to MusicLibraryPlaylistRequest.response()[1]);
  v0[18] = v7;
  *v7 = v0;
  v7[1] = sub_10008C32C;
  return MusicLibraryPlaylistRequest.response()(v0[10]);
}

uint64_t sub_10008C32C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10008C464;
  else
    v3 = sub_10008C390;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10008C390()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(v0 + 128);
  v1 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 48);
  v9 = *(_QWORD *)(v0 + 24);
  MusicLibraryPlaylistResponse.playlist.getter();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v9, 0, 1, v7);
  v10 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v0 + 112);
  v12 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008C464()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (qword_1004B8A28 != -1)
    swift_once(&qword_1004B8A28, sub_1000971E8);
  v1 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v6 = type metadata accessor for Logger(0);
  sub_100039D34(v6, (uint64_t)qword_1004BB610);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain(v1);
  v7 = swift_errorRetain(v1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 152);
  v13 = *(_QWORD *)(v0 + 128);
  v12 = *(_QWORD *)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 120);
  v15 = *(_QWORD *)(v0 + 48);
  v16 = *(_QWORD *)(v0 + 56);
  v17 = *(_QWORD *)(v0 + 40);
  if (v10)
  {
    v35 = *(_QWORD *)(v0 + 120);
    v18 = swift_slowAlloc(22, -1);
    v34 = v13;
    v19 = swift_slowAlloc(64, -1);
    v36 = v19;
    *(_DWORD *)v18 = 136446466;
    v20 = sub_100004D8C(&qword_1004BB750, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist, (uint64_t)&protocol conformance descriptor for Playlist);
    v21 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v17, v20);
    v33 = v12;
    v23 = v22;
    *(_QWORD *)(v18 + 4) = sub_1000393D0(v21, v22, &v36);
    swift_bridgeObjectRelease(v23);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
    *(_WORD *)(v18 + 12) = 2082;
    *(_QWORD *)(v0 + 16) = v11;
    swift_errorRetain(v11);
    v24 = sub_1000057B4((uint64_t *)&unk_1004BD690);
    v25 = (char *)String.init<A>(describing:)(v0 + 16, v24);
    v27 = v26;
    *(_QWORD *)(v18 + 14) = sub_1000393D0(v25, v26, &v36);
    swift_bridgeObjectRelease(v27);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to make playlist=%{public}s public with error=%{public}s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    swift_errorRelease(v11);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
  }
  else
  {

    swift_errorRelease(v11);
    swift_errorRelease(v11);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
    swift_errorRelease(v11);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 48) + 56))(*(_QWORD *)(v0 + 24), 1, 1, *(_QWORD *)(v0 + 40));
  v28 = *(_QWORD *)(v0 + 104);
  v29 = *(_QWORD *)(v0 + 112);
  v30 = *(_QWORD *)(v0 + 80);
  v31 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v29);
  swift_task_dealloc(v28);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008C744(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1004BB724);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10002F6EC;
  return Playlist.shareURL.getter(a1);
}

uint64_t sub_10008C794()
{
  return Playlist.actionTitle.getter();
}

uint64_t sub_10008C7A8()
{
  return Playlist.failureMessage.getter();
}

uint64_t sub_10008C7BC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_1000057B4(&qword_1004B99B0);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10008C818, 0, 0);
}

uint64_t sub_10008C818()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 40) = **(_QWORD **)(v0 + 16);
  v1 = (_QWORD *)swift_task_alloc(dword_1004BB724);
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_10008A03C;
  return Playlist.shareURL.getter(*(_QWORD *)(v0 + 32));
}

uint64_t RadioShow.actionTitle.getter()
{
  return sub_10007A140(0x6853206572616853, 0xAD0000A680E2776FLL);
}

uint64_t RadioShow.failureMessage.getter()
{
  return sub_10007A140(0xD00000000000001ALL, 0x80000001003A81A0);
}

uint64_t sub_10008C8BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch(sub_10008C8D4, 0, 0);
}

uint64_t sub_10008C8D4()
{
  uint64_t v0;

  RadioShow.url.getter();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008C904(uint64_t a1, uint64_t a2)
{
  return sub_10007A304(a1, a2, 0x6853206572616853, 0xAD0000A680E2776FLL);
}

uint64_t sub_10008C928()
{
  return RadioShow.failureMessage.getter();
}

uint64_t sub_10008C93C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((char *)&dword_1004BBA90 + dword_1004BBA90);
  v3 = (_QWORD *)swift_task_alloc(unk_1004BBA94);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10002F6EC;
  return v5(a1);
}

uint64_t RecordLabel.actionTitle.getter()
{
  return sub_10007A140(0x1000000000000015, 0x80000001003A81C0);
}

uint64_t RecordLabel.failureMessage.getter()
{
  return sub_10007A140(0xD000000000000022, 0x80000001003A81E0);
}

uint64_t sub_10008C9DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch(sub_10008C9F4, 0, 0);
}

uint64_t sub_10008C9F4()
{
  uint64_t v0;

  RecordLabel.url.getter();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008CA24()
{
  return RecordLabel.actionTitle.getter();
}

uint64_t sub_10008CA38()
{
  return RecordLabel.failureMessage.getter();
}

uint64_t sub_10008CA4C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((char *)&dword_1004BBA88 + dword_1004BBA88);
  v3 = (_QWORD *)swift_task_alloc(unk_1004BBA8C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10002F6EC;
  return v5(a1);
}

uint64_t SocialProfile.actionTitle.getter()
{
  return sub_10007A140(0x1000000000000010, 0x80000001003A8210);
}

uint64_t SocialProfile.failureMessage.getter()
{
  return sub_10007A140(0xD00000000000001DLL, 0x80000001003A8230);
}

uint64_t sub_10008CAEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch(sub_10008CB04, 0, 0);
}

uint64_t sub_10008CB04()
{
  uint64_t v0;

  SocialProfile.url.getter();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008CB34()
{
  return SocialProfile.actionTitle.getter();
}

uint64_t sub_10008CB48()
{
  return SocialProfile.failureMessage.getter();
}

uint64_t sub_10008CB5C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((char *)&dword_1004BBA80 + dword_1004BBA80);
  v3 = (_QWORD *)swift_task_alloc(unk_1004BBA84);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10002F6EC;
  return v5(a1);
}

uint64_t Song.actionTitle.getter()
{
  return sub_10007A140(0x6F53206572616853, 0xAD0000A680E2676ELL);
}

uint64_t Song.failureMessage.getter()
{
  return sub_10007A140(0xD00000000000001ALL, 0x80000001003A8250);
}

uint64_t Song.shareURL.getter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2[4] = a1;
  v2[5] = v1;
  v3 = sub_1000057B4(&qword_1004BB380);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000057B4(&qword_1004B9EE8);
  v2[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000057B4(&qword_1004BB760);
  v2[10] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[11] = v7;
  v2[12] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000057B4(&qword_1004BB768);
  v2[13] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[14] = v9;
  v2[15] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000057B4(&qword_1004B99B0);
  v2[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10008CD04, 0, 0);
}

uint64_t sub_10008CD04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 128);
  Song.url.getter();
  v2 = type metadata accessor for URL(0);
  *(_QWORD *)(v0 + 136) = v2;
  v3 = *(_QWORD *)(v2 - 8);
  *(_QWORD *)(v0 + 144) = v3;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = sub_10000FE2C(*(_QWORD *)(v0 + 128), &qword_1004B99B0);
    v5 = Song.catalogID.getter(v4);
    *(_QWORD *)(v0 + 152) = v5;
    *(_QWORD *)(v0 + 160) = v6;
    if (v6)
    {
      v7 = v5;
      v8 = v6;
      KeyPath = swift_getKeyPath(&unk_1003CABA0);
      *(_QWORD *)(v0 + 16) = v7;
      *(_QWORD *)(v0 + 24) = v8;
      v10 = type metadata accessor for Song(0);
      *(_QWORD *)(v0 + 168) = v10;
      v11 = sub_100004D8C(&qword_1004BB770, (uint64_t (*)(uint64_t))&type metadata accessor for Song, (uint64_t)&protocol conformance descriptor for Song);
      swift_bridgeObjectRetain();
      MusicCatalogResourceRequest.init<A>(matching:equalTo:)(KeyPath, v0 + 16, v10, &protocol witness table for Song, v11);
      v12 = (_QWORD *)swift_task_alloc(async function pointer to MusicCatalogResourceRequest.response()[1]);
      *(_QWORD *)(v0 + 176) = v12;
      *v12 = v0;
      v12[1] = sub_10008CEDC;
      return MusicCatalogResourceRequest.response()(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v3 + 56))(*(_QWORD *)(v0 + 32), 1, 1, v2);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 32);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 32))(v14, *(_QWORD *)(v0 + 128), v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v14, 0, 1, v2);
  }
  v15 = *(_QWORD *)(v0 + 120);
  v16 = *(_QWORD *)(v0 + 96);
  v18 = *(_QWORD *)(v0 + 64);
  v17 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008CEDC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 176);
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10008D0C0;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 160));
    v4 = sub_10008CF48;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10008CF48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  MusicCatalogResourceResponse.items.getter(*(_QWORD *)(v0 + 80));
  sub_10007584C(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v6 = *(_QWORD *)(v1 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 1, v1) == 1)
  {
    v7 = *(_QWORD *)(v0 + 136);
    v8 = *(_QWORD *)(v0 + 144);
    v10 = *(_QWORD *)(v0 + 112);
    v9 = *(_QWORD *)(v0 + 120);
    v11 = *(_QWORD *)(v0 + 104);
    v12 = *(_QWORD *)(v0 + 72);
    v13 = *(_QWORD *)(v0 + 32);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    sub_10000FE2C(v12, &qword_1004B9EE8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v13, 1, 1, v7);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 168);
    v16 = *(_QWORD *)(v0 + 112);
    v15 = *(_QWORD *)(v0 + 120);
    v18 = *(_QWORD *)(v0 + 96);
    v17 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 80);
    v20 = *(_QWORD *)(v0 + 88);
    v21 = *(_QWORD *)(v0 + 72);
    Song.url.getter();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v21, v14);
  }
  v22 = *(_QWORD *)(v0 + 120);
  v23 = *(_QWORD *)(v0 + 96);
  v25 = *(_QWORD *)(v0 + 64);
  v24 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008D0C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (qword_1004B8A28 != -1)
    swift_once(&qword_1004B8A28, sub_1000971E8);
  v1 = *(_QWORD *)(v0 + 184);
  v2 = type metadata accessor for Logger(0);
  sub_100039D34(v2, (uint64_t)qword_1004BB610);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain();
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 160);
  if (v6)
  {
    v9 = *(_QWORD *)(v0 + 152);
    v26 = *(_QWORD *)(v0 + 112);
    v27 = *(_QWORD *)(v0 + 104);
    v28 = *(_QWORD *)(v0 + 120);
    v10 = swift_slowAlloc(22, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    v12 = swift_slowAlloc(32, -1);
    v29 = v12;
    *(_DWORD *)v10 = 136446466;
    swift_bridgeObjectRetain();
    v13 = (char *)MusicItemID.description.getter(v9, v8);
    v15 = v14;
    swift_bridgeObjectRelease(v8);
    *(_QWORD *)(v10 + 4) = sub_1000393D0(v13, v15, &v29);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease_n(v8, 2);
    *(_WORD *)(v10 + 12) = 2114;
    swift_errorRetain(v7);
    v16 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v10 + 14) = v16;
    *v11 = v16;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to get share URL for song catalogID: %{public}s: %{public}@", (uint8_t *)v10, 0x16u);
    v17 = sub_1000057B4(&qword_1004C0DB0);
    swift_arrayDestroy(v11, 1, v17);
    swift_slowDealloc(v11, -1, -1);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v7);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v28, v27);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 112);
    v18 = *(_QWORD *)(v0 + 120);
    v20 = *(_QWORD *)(v0 + 104);

    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_bridgeObjectRelease_n(v8, 2);
    swift_errorRelease(v7);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 144) + 56))(*(_QWORD *)(v0 + 32), 1, 1, *(_QWORD *)(v0 + 136));
  v21 = *(_QWORD *)(v0 + 120);
  v22 = *(_QWORD *)(v0 + 96);
  v24 = *(_QWORD *)(v0 + 64);
  v23 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008D394@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10008D3A0(a1, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of SongFilter.id.getter, a2);
}

uint64_t sub_10008D3A0@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v5 = a1[3];
  v6 = a1[4];
  sub_1000096A0(a1, v5);
  result = a2(v5, v6);
  *a3 = result;
  a3[1] = v8;
  return result;
}

uint64_t Song.augmentMetadata(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2[4] = a1;
  v2[5] = v1;
  v3 = sub_1000057B4(&qword_1004BB780);
  v2[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for MusicOffer.Kind(0);
  v2[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[8] = v5;
  v2[9] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MusicOffer(0);
  v2[10] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[11] = v7;
  v2[12] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (*(_QWORD *)(*(_QWORD *)(sub_1000057B4(&qword_1004B99B0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[13] = swift_task_alloc(v8);
  v2[14] = swift_task_alloc(v8);
  v9 = sub_1000057B4(&qword_1004BB380);
  v2[15] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[16] = v10;
  v2[17] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (*(_QWORD *)(*(_QWORD *)(sub_1000057B4(&qword_1004B9EE8) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[18] = swift_task_alloc(v11);
  v2[19] = swift_task_alloc(v11);
  v2[20] = swift_task_alloc(v11);
  v2[21] = swift_task_alloc(v11);
  v12 = sub_1000057B4(&qword_1004BB760);
  v2[22] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v2[23] = v13;
  v2[24] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000057B4(&qword_1004BB768);
  v2[25] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v2[26] = v15;
  v2[27] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10008D5A0, 0, 0);
}

uint64_t sub_10008D5A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = Song.catalogID.getter(a1);
  *(_QWORD *)(v1 + 224) = v2;
  *(_QWORD *)(v1 + 232) = v3;
  if (v3)
  {
    v4 = v2;
    v5 = v3;
    v6 = objc_msgSend(**(id **)(v1 + 32), "specialization");
    *(_QWORD *)(v1 + 240) = v6;
    if (v6)
    {
      v7 = v6;
      objc_opt_self(LPiTunesMediaSongMetadata);
      v8 = swift_dynamicCastObjCClass(v7);
      *(_QWORD *)(v1 + 248) = v8;
      if (v8)
      {
        v9 = *(_QWORD *)(v1 + 200);
        KeyPath = swift_getKeyPath(&unk_1003CABA0);
        *(_QWORD *)(v1 + 16) = v4;
        *(_QWORD *)(v1 + 24) = v5;
        v11 = type metadata accessor for Song(0);
        *(_QWORD *)(v1 + 256) = v11;
        v12 = sub_100004D8C(&qword_1004BB770, (uint64_t (*)(uint64_t))&type metadata accessor for Song, (uint64_t)&protocol conformance descriptor for Song);
        swift_bridgeObjectRetain();
        MusicCatalogResourceRequest.init<A>(matching:equalTo:)(KeyPath, v1 + 16, v11, &protocol witness table for Song, v12);
        v13 = sub_1000057B4((uint64_t *)&unk_1004BDDB0);
        v14 = swift_allocObject(v13, 40, 7);
        *(_OWORD *)(v14 + 16) = xmmword_1003C6240;
        sub_1000057B4(&qword_1004BB788);
        v15 = static PartialMusicProperty<A>.offers.getter();
        *(_QWORD *)(v14 + 32) = v15;
        specialized Array._endMutation()(v15);
        MusicCatalogResourceRequest.properties.setter(v14, v9);
        v16 = (_QWORD *)swift_task_alloc(async function pointer to MusicCatalogResourceRequest.response()[1]);
        *(_QWORD *)(v1 + 264) = v16;
        *v16 = v1;
        v16[1] = sub_10008D80C;
        return MusicCatalogResourceRequest.response()(*(_QWORD *)(v1 + 192), *(_QWORD *)(v1 + 200));
      }
      swift_bridgeObjectRelease(v5);

    }
    else
    {
      swift_bridgeObjectRelease(v5);
    }
  }
  v18 = *(_QWORD *)(v1 + 192);
  v20 = *(_QWORD *)(v1 + 160);
  v19 = *(_QWORD *)(v1 + 168);
  v22 = *(_QWORD *)(v1 + 144);
  v21 = *(_QWORD *)(v1 + 152);
  v23 = *(_QWORD *)(v1 + 136);
  v25 = *(_QWORD *)(v1 + 104);
  v24 = *(_QWORD *)(v1 + 112);
  v26 = *(_QWORD *)(v1 + 96);
  v27 = *(_QWORD *)(v1 + 72);
  v28 = *(_QWORD *)(v1 + 48);
  swift_task_dealloc(*(_QWORD *)(v1 + 216));
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10008D80C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 264);
  *(_QWORD *)(*v1 + 272) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10008DE8C;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 232));
    v4 = sub_10008D878;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10008D878()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSURL *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Class isa;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSURL *v81;
  uint64_t v82;
  void *v83;
  Class v84;
  uint64_t v85;
  unsigned int (*v86)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v87)(uint64_t, char *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v1 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 120);
  v7 = *(void ***)(v0 + 32);
  MusicCatalogResourceResponse.items.getter(*(_QWORD *)(v0 + 176));
  sub_10007584C(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v8 = *v7;
  sub_10000FEB4(v2, v3, &qword_1004B9EE8);
  v9 = *(_QWORD *)(v1 - 8);
  v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v10(v3, 1, v1) == 1)
  {
    v11 = *(_QWORD *)(v0 + 112);
    sub_10000FE2C(*(_QWORD *)(v0 + 160), &qword_1004B9EE8);
    v12 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = 0;
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 256);
    v15 = *(_QWORD *)(v0 + 160);
    v16 = *(_QWORD *)(v0 + 112);
    Song.url.getter();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v15, v14);
    v17 = type metadata accessor for URL(0);
    v18 = *(_QWORD *)(v17 - 8);
    v13 = 0;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
    {
      v20 = *(_QWORD *)(v0 + 112);
      URL._bridgeToObjectiveC()(v19);
      v13 = v21;
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v20, v17);
    }
  }
  v22 = *(_QWORD *)(v0 + 256);
  v23 = *(_QWORD *)(v0 + 168);
  v24 = *(_QWORD *)(v0 + 152);
  objc_msgSend(v8, "setOriginalURL:", v13);

  sub_10000FEB4(v23, v24, &qword_1004B9EE8);
  v86 = v10;
  if (v10(v24, 1, v22) == 1)
  {
    sub_10000FE2C(*(_QWORD *)(v0 + 152), &qword_1004B9EE8);
    isa = 0;
  }
  else
  {
    v26 = *(_QWORD *)(v0 + 256);
    v27 = *(_QWORD *)(v0 + 152);
    isa = (Class)Song.offers.getter();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v27, v26);
    if (isa)
    {
      v28 = *((_QWORD *)isa + 2);
      if (v28)
      {
        v85 = v9;
        v29 = *(_QWORD *)(v0 + 88);
        v89 = *(_QWORD *)(v0 + 64);
        sub_100097348(0, v28, 0);
        v84 = isa;
        v30 = (char *)isa
            + ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80));
        v91 = v29;
        v87 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 16);
        v88 = *(_QWORD *)(v29 + 72);
        do
        {
          v31 = *(_QWORD *)(v0 + 96);
          v33 = *(_QWORD *)(v0 + 72);
          v32 = *(_QWORD *)(v0 + 80);
          v34 = *(_QWORD *)(v0 + 56);
          v35 = v87(v31, v30, v32);
          v36 = MusicOffer.kind.getter(v35);
          v37 = MusicOffer.Kind.rawValue.getter(v36);
          v39 = v38;
          (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v33, v34);
          (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v31, v32);
          if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
            sub_100097348(0, _swiftEmptyArrayStorage[2] + 1, 1);
          v41 = _swiftEmptyArrayStorage[2];
          v40 = _swiftEmptyArrayStorage[3];
          if (v41 >= v40 >> 1)
            sub_100097348((char *)(v40 > 1), v41 + 1, 1);
          _swiftEmptyArrayStorage[2] = v41 + 1;
          v42 = &_swiftEmptyArrayStorage[2 * v41];
          v42[4] = v37;
          v42[5] = v39;
          v30 += v88;
          --v28;
        }
        while (v28);
        swift_bridgeObjectRelease(v84);
        v9 = v85;
      }
      else
      {
        swift_bridgeObjectRelease(isa);
      }
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    }
  }
  v44 = (uint64_t *)(v0 + 144);
  v43 = *(_QWORD *)(v0 + 144);
  v45 = *(_QWORD *)(v0 + 256);
  v46 = *(_QWORD *)(v0 + 168);
  objc_msgSend(*(id *)(v0 + 248), "setOffers:", isa);

  v47 = &qword_1004B9EE8;
  sub_10000FEB4(v46, v43, &qword_1004B9EE8);
  if (v86(v43, 1, v45) == 1)
    goto LABEL_25;
  v48 = *(_QWORD *)(v0 + 256);
  v49 = *(_QWORD *)(v0 + 144);
  v50 = Song.previewAssets.getter();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v49, v48);
  if (!v50)
  {
LABEL_26:
    v56 = *(_QWORD *)(v0 + 104);
    v57 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v56, 1, 1, v57);
    v58 = 0;
    goto LABEL_27;
  }
  v51 = *(_QWORD *)(v50 + 16);
  v52 = type metadata accessor for PreviewAsset(0);
  v53 = *(_QWORD *)(v52 - 8);
  if (v51)
  {
    (*(void (**)(_QWORD, unint64_t, uint64_t))(v53 + 16))(*(_QWORD *)(v0 + 48), v50 + ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80)), v52);
    v54 = 0;
  }
  else
  {
    v54 = 1;
  }
  v44 = (uint64_t *)(v0 + 48);
  v55 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56))(v55, v54, 1, v52);
  swift_bridgeObjectRelease(v50);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v55, 1, v52) == 1)
  {
    v47 = (uint64_t *)&unk_1004BB780;
LABEL_25:
    sub_10000FE2C(*v44, v47);
    goto LABEL_26;
  }
  v77 = *(_QWORD *)(v0 + 104);
  v78 = *(_QWORD *)(v0 + 48);
  PreviewAsset.url.getter();
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v78, v52);
  v79 = type metadata accessor for URL(0);
  v80 = *(_QWORD *)(v79 - 8);
  v58 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48))(v77, 1, v79) != 1)
  {
    v82 = *(_QWORD *)(v0 + 104);
    URL._bridgeToObjectiveC()(v81);
    v58 = v83;
    (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v82, v79);
  }
LABEL_27:
  v59 = *(void **)(v0 + 240);
  v61 = *(_QWORD *)(v0 + 208);
  v60 = *(_QWORD *)(v0 + 216);
  v63 = *(_QWORD *)(v0 + 192);
  v62 = *(_QWORD *)(v0 + 200);
  v64 = *(_QWORD *)(v0 + 176);
  v65 = *(_QWORD *)(v0 + 184);
  v66 = *(_QWORD *)(v0 + 168);
  objc_msgSend(*(id *)(v0 + 248), "setPreviewURL:", v58);

  sub_10000FE2C(v66, &qword_1004B9EE8);
  (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v63, v64);
  (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
  v67 = *(_QWORD *)(v0 + 192);
  v69 = *(_QWORD *)(v0 + 160);
  v68 = *(_QWORD *)(v0 + 168);
  v71 = *(_QWORD *)(v0 + 144);
  v70 = *(_QWORD *)(v0 + 152);
  v72 = *(_QWORD *)(v0 + 136);
  v74 = *(_QWORD *)(v0 + 104);
  v73 = *(_QWORD *)(v0 + 112);
  v75 = *(_QWORD *)(v0 + 96);
  v90 = *(_QWORD *)(v0 + 72);
  v92 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v90);
  swift_task_dealloc(v92);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008DE8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  if (qword_1004B8A28 != -1)
    swift_once(&qword_1004B8A28, sub_1000971E8);
  v1 = *(_QWORD *)(v0 + 272);
  v2 = type metadata accessor for Logger(0);
  sub_100039D34(v2, (uint64_t)qword_1004BB610);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain();
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 272);
  v8 = *(_QWORD *)(v0 + 232);
  if (v6)
  {
    v9 = *(_QWORD *)(v0 + 224);
    v31 = *(void **)(v0 + 240);
    v32 = *(_QWORD *)(v0 + 208);
    v33 = *(_QWORD *)(v0 + 200);
    v35 = *(_QWORD *)(v0 + 216);
    v10 = swift_slowAlloc(22, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    v12 = swift_slowAlloc(32, -1);
    v37 = v12;
    *(_DWORD *)v10 = 136446466;
    swift_bridgeObjectRetain();
    v13 = (char *)MusicItemID.description.getter(v9, v8);
    v15 = v14;
    swift_bridgeObjectRelease(v8);
    *(_QWORD *)(v10 + 4) = sub_1000393D0(v13, v15, &v37);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease_n(v8, 2);
    *(_WORD *)(v10 + 12) = 2114;
    swift_errorRetain(v7);
    v16 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v10 + 14) = v16;
    *v11 = v16;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to get share URL for album catalogID: %{public}s: %{public}@", (uint8_t *)v10, 0x16u);
    v17 = sub_1000057B4(&qword_1004C0DB0);
    swift_arrayDestroy(v11, 1, v17);
    swift_slowDealloc(v11, -1, -1);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v7);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v35, v33);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 208);
    v18 = *(_QWORD *)(v0 + 216);
    v20 = *(_QWORD *)(v0 + 200);

    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_bridgeObjectRelease_n(v8, 2);
    swift_errorRelease(v7);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  }
  v21 = *(_QWORD *)(v0 + 192);
  v23 = *(_QWORD *)(v0 + 160);
  v22 = *(_QWORD *)(v0 + 168);
  v25 = *(_QWORD *)(v0 + 144);
  v24 = *(_QWORD *)(v0 + 152);
  v26 = *(_QWORD *)(v0 + 136);
  v28 = *(_QWORD *)(v0 + 104);
  v27 = *(_QWORD *)(v0 + 112);
  v29 = *(_QWORD *)(v0 + 96);
  v34 = *(_QWORD *)(v0 + 72);
  v36 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008E1A8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1004BB75C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10002F6EC;
  return Song.shareURL.getter(a1);
}

uint64_t sub_10008E1F8(uint64_t a1, uint64_t a2)
{
  return sub_10007A304(a1, a2, 0x6F53206572616853, 0xAD0000A680E2676ELL);
}

uint64_t sub_10008E21C()
{
  return Song.failureMessage.getter();
}

uint64_t sub_10008E230(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1004BB77C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10002F6EC;
  return Song.augmentMetadata(_:)(a1);
}

uint64_t Station.actionTitle.getter()
{
  return sub_10007A140(0x1000000000000010, 0x80000001003A8270);
}

uint64_t Station.failureMessage.getter()
{
  return sub_10007A140(0xD00000000000001DLL, 0x80000001003A8290);
}

uint64_t Station.shareURL.getter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2[4] = a1;
  v2[5] = v1;
  v3 = sub_1000057B4(&qword_1004BB370);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000057B4(&qword_1004BB798);
  v2[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000057B4(&qword_1004BB7A0);
  v2[10] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[11] = v7;
  v2[12] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000057B4(&qword_1004BB7A8);
  v2[13] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[14] = v9;
  v2[15] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000057B4(&qword_1004B99B0);
  v2[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10008E3BC, 0, 0);
}

uint64_t sub_10008E3BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 128);
  Station.url.getter();
  v2 = type metadata accessor for URL(0);
  *(_QWORD *)(v0 + 136) = v2;
  v3 = *(_QWORD *)(v2 - 8);
  *(_QWORD *)(v0 + 144) = v3;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = sub_10000FE2C(*(_QWORD *)(v0 + 128), &qword_1004B99B0);
    v5 = Station.id.getter(v4);
    v7 = v6;
    *(_QWORD *)(v0 + 152) = v5;
    *(_QWORD *)(v0 + 160) = v6;
    KeyPath = swift_getKeyPath(&unk_1003CABC8);
    *(_QWORD *)(v0 + 16) = v5;
    *(_QWORD *)(v0 + 24) = v7;
    v9 = type metadata accessor for Station(0);
    *(_QWORD *)(v0 + 168) = v9;
    v10 = sub_100004D8C(&qword_1004BB7B0, (uint64_t (*)(uint64_t))&type metadata accessor for Station, (uint64_t)&protocol conformance descriptor for Station);
    swift_bridgeObjectRetain();
    MusicCatalogResourceRequest.init<A>(matching:equalTo:)(KeyPath, v0 + 16, v9, &protocol witness table for Station, v10);
    v11 = (_QWORD *)swift_task_alloc(async function pointer to MusicCatalogResourceRequest.response()[1]);
    *(_QWORD *)(v0 + 176) = v11;
    *v11 = v0;
    v11[1] = sub_10008E578;
    return MusicCatalogResourceRequest.response()(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 32);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 32))(v13, *(_QWORD *)(v0 + 128), v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v13, 0, 1, v2);
    v14 = *(_QWORD *)(v0 + 120);
    v15 = *(_QWORD *)(v0 + 96);
    v17 = *(_QWORD *)(v0 + 64);
    v16 = *(_QWORD *)(v0 + 72);
    swift_task_dealloc(*(_QWORD *)(v0 + 128));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10008E578()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 176);
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10008E75C;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 160));
    v4 = sub_10008E5E4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10008E5E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  MusicCatalogResourceResponse.items.getter(*(_QWORD *)(v0 + 80));
  sub_1000758F4(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v6 = *(_QWORD *)(v1 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 1, v1) == 1)
  {
    v7 = *(_QWORD *)(v0 + 136);
    v8 = *(_QWORD *)(v0 + 144);
    v10 = *(_QWORD *)(v0 + 112);
    v9 = *(_QWORD *)(v0 + 120);
    v11 = *(_QWORD *)(v0 + 104);
    v12 = *(_QWORD *)(v0 + 72);
    v13 = *(_QWORD *)(v0 + 32);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    sub_10000FE2C(v12, &qword_1004BB798);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v13, 1, 1, v7);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 168);
    v16 = *(_QWORD *)(v0 + 112);
    v15 = *(_QWORD *)(v0 + 120);
    v18 = *(_QWORD *)(v0 + 96);
    v17 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 80);
    v20 = *(_QWORD *)(v0 + 88);
    v21 = *(_QWORD *)(v0 + 72);
    Station.url.getter();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v21, v14);
  }
  v22 = *(_QWORD *)(v0 + 120);
  v23 = *(_QWORD *)(v0 + 96);
  v25 = *(_QWORD *)(v0 + 64);
  v24 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008E75C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (qword_1004B8A28 != -1)
    swift_once(&qword_1004B8A28, sub_1000971E8);
  v1 = *(_QWORD *)(v0 + 184);
  v2 = type metadata accessor for Logger(0);
  sub_100039D34(v2, (uint64_t)qword_1004BB610);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain();
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 160);
  if (v6)
  {
    v9 = *(_QWORD *)(v0 + 152);
    v26 = *(_QWORD *)(v0 + 112);
    v27 = *(_QWORD *)(v0 + 104);
    v28 = *(_QWORD *)(v0 + 120);
    v10 = swift_slowAlloc(22, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    v12 = swift_slowAlloc(32, -1);
    v29 = v12;
    *(_DWORD *)v10 = 136446466;
    swift_bridgeObjectRetain();
    v13 = (char *)MusicItemID.description.getter(v9, v8);
    v15 = v14;
    swift_bridgeObjectRelease(v8);
    *(_QWORD *)(v10 + 4) = sub_1000393D0(v13, v15, &v29);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease_n(v8, 2);
    *(_WORD *)(v10 + 12) = 2114;
    swift_errorRetain(v7);
    v16 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v10 + 14) = v16;
    *v11 = v16;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to get share URL for station catalogID: %{public}s: %{public}@", (uint8_t *)v10, 0x16u);
    v17 = sub_1000057B4(&qword_1004C0DB0);
    swift_arrayDestroy(v11, 1, v17);
    swift_slowDealloc(v11, -1, -1);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v7);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v28, v27);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 112);
    v18 = *(_QWORD *)(v0 + 120);
    v20 = *(_QWORD *)(v0 + 104);

    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_bridgeObjectRelease_n(v8, 2);
    swift_errorRelease(v7);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 144) + 56))(*(_QWORD *)(v0 + 32), 1, 1, *(_QWORD *)(v0 + 136));
  v21 = *(_QWORD *)(v0 + 120);
  v22 = *(_QWORD *)(v0 + 96);
  v24 = *(_QWORD *)(v0 + 64);
  v23 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008EA34(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1004BB794);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10002F6EC;
  return Station.shareURL.getter(a1);
}

uint64_t sub_10008EA84()
{
  return Station.actionTitle.getter();
}

uint64_t sub_10008EA98()
{
  return Station.failureMessage.getter();
}

uint64_t sub_10008EAAC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_1000057B4(&qword_1004B99B0);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10008EB08, 0, 0);
}

uint64_t sub_10008EB08()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 40) = **(_QWORD **)(v0 + 16);
  v1 = (_QWORD *)swift_task_alloc(dword_1004BB794);
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_10008A03C;
  return Station.shareURL.getter(*(_QWORD *)(v0 + 32));
}

uint64_t Track.actionTitle.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  char *v37;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;

  v0 = type metadata accessor for Song(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v43 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for String.LocalizationValue(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v39 - v11;
  v13 = type metadata accessor for MusicVideo(0);
  v39 = *(_QWORD *)(v13 - 8);
  v40 = v13;
  __chkstk_darwin(v13);
  v41 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Track(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v42, v15);
  v19 = (*(uint64_t (**)(char *, uint64_t))(v16 + 88))(v18, v15);
  if (v19 == enum case for Track.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
    (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v3, v18, v0);
    String.LocalizationValue.init(stringLiteral:)(0x6F53206572616853, 0xAD0000A680E2676ELL);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
    v20 = v6;
    v21 = v1;
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v22 = qword_1004F4630;
    v23 = (id)qword_1004F4630;
    v24 = v43;
    static Locale.current.getter(v23);
    v25 = String.init(localized:table:bundle:locale:comment:)(v10, 0, 0, v22, v24, 0, 0, 256);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v20);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v3, v0);
  }
  else if (v19 == enum case for Track.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
    v27 = v39;
    v26 = v40;
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v41, v18, v40);
    String.LocalizationValue.init(stringLiteral:)(0x6956206572616853, 0xAE00A680E26F6564);
    v28 = v6;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v29 = qword_1004F4630;
    v30 = (id)qword_1004F4630;
    v31 = v43;
    static Locale.current.getter(v30);
    v25 = String.init(localized:table:bundle:locale:comment:)(v10, 0, 0, v29, v31, 0, 0, 256);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v28);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v41, v26);
  }
  else
  {
    String.LocalizationValue.init(stringLiteral:)(0xA680E26572616853, 0xA800000000000000);
    v32 = v10;
    v33 = v10;
    v34 = v6;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v33, v12, v6);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v35 = qword_1004F4630;
    v36 = (id)qword_1004F4630;
    v37 = v43;
    static Locale.current.getter(v36);
    v25 = String.init(localized:table:bundle:locale:comment:)(v32, 0, 0, v35, v37, 0, 0, 256);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v34);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
  return v25;
}

uint64_t Track.failureMessage.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  char *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;

  v1 = type metadata accessor for Song(0);
  v35 = *(_QWORD *)(v1 - 8);
  v36 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v38 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for String.LocalizationValue(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v32 - v11;
  v13 = type metadata accessor for MusicVideo(0);
  v33 = *(_QWORD *)(v13 - 8);
  v34 = v13;
  __chkstk_darwin(v13);
  v37 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Track(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v0, v15);
  v19 = (*(uint64_t (**)(char *, uint64_t))(v16 + 88))(v18, v15);
  if (v19 == enum case for Track.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
    v20 = v35;
    v21 = v36;
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v3, v18, v36);
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ALL, 0x80000001003A8250);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v22 = qword_1004F4630;
    v23 = (id)qword_1004F4630;
    v24 = v38;
    static Locale.current.getter(v23);
    v25 = String.init(localized:table:bundle:locale:comment:)(v10, 0, 0, v22, v24, 0, 0, 256);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v3, v21);
  }
  else if (v19 == enum case for Track.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
    v27 = v33;
    v26 = v34;
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v37, v18, v34);
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000001BLL, 0x80000001003A8140);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v28 = qword_1004F4630;
    v29 = (id)qword_1004F4630;
    v30 = v38;
    static Locale.current.getter(v29);
    v25 = String.init(localized:table:bundle:locale:comment:)(v10, 0, 0, v28, v30, 0, 0, 256);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v37, v26);
  }
  else
  {
    v25 = Track.failureMessage.getter();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
  return v25;
}

uint64_t Track.shareURL.getter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for Song(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MusicVideo(0);
  v2[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[8] = v6;
  v2[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Track(0);
  v2[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[11] = v8;
  v2[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10008F44C, 0, 0);
}

uint64_t sub_10008F44C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v1, *(_QWORD *)(v0 + 24), v3);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  if (v4 == enum case for Track.song(_:))
  {
    v5 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 40);
    v6 = *(_QWORD *)(v0 + 48);
    v8 = *(_QWORD *)(v0 + 32);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 96))(v5, *(_QWORD *)(v0 + 80));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v6, v5, v8);
    v9 = (_QWORD *)swift_task_alloc(dword_1004BB75C);
    *(_QWORD *)(v0 + 112) = v9;
    *v9 = v0;
    v9[1] = sub_10008F6B8;
    return Song.shareURL.getter(*(_QWORD *)(v0 + 16));
  }
  else if (v4 == enum case for Track.musicVideo(_:))
  {
    v11 = *(_QWORD *)(v0 + 96);
    v12 = *(_QWORD *)(v0 + 72);
    v13 = *(_QWORD *)(v0 + 56);
    v14 = *(_QWORD *)(v0 + 64);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 96))(v11, *(_QWORD *)(v0 + 80));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v12, v11, v13);
    v15 = (_QWORD *)swift_task_alloc(dword_1004BB704);
    *(_QWORD *)(v0 + 104) = v15;
    *v15 = v0;
    v15[1] = sub_10008F604;
    return MusicVideo.shareURL.getter(*(_QWORD *)(v0 + 16));
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 16);
    v17 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
    v18 = *(_QWORD *)(v0 + 96);
    v19 = *(_QWORD *)(v0 + 72);
    v20 = *(_QWORD *)(v0 + 48);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(v18, *(_QWORD *)(v0 + 80));
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10008F604()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 104));
  return swift_task_switch(sub_10008F658, 0, 0);
}

uint64_t sub_10008F658()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(v1, *(_QWORD *)(v0 + 56));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008F6B8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 112));
  return swift_task_switch(sub_10008F70C, 0, 0);
}

uint64_t sub_10008F70C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 72);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 40) + 8))(v1, *(_QWORD *)(v0 + 32));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008F774(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1004BB7BC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10002F6EC;
  return Track.shareURL.getter(a1);
}

uint64_t sub_10008F7CC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_1000057B4(&qword_1004B99B0);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10008F828, 0, 0);
}

uint64_t sub_10008F828()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 40) = **(_QWORD **)(v0 + 16);
  v1 = (_QWORD *)swift_task_alloc(dword_1004BB7BC);
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_10008A03C;
  return Track.shareURL.getter(*(_QWORD *)(v0 + 32));
}

uint64_t TVEpisode.actionTitle.getter()
{
  return sub_10007A140(0x1000000000000010, 0x80000001003A82B0);
}

uint64_t TVEpisode.failureMessage.getter()
{
  return sub_10007A140(0xD00000000000001DLL, 0x80000001003A82D0);
}

uint64_t TVEpisode.shareURL.getter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2[4] = a1;
  v2[5] = v1;
  v3 = sub_1000057B4(&qword_1004BB360);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000057B4(&qword_1004BB7C8);
  v2[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000057B4(&qword_1004BB7D0);
  v2[10] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[11] = v7;
  v2[12] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000057B4(&qword_1004BB7D8);
  v2[13] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[14] = v9;
  v2[15] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000057B4(&qword_1004B99B0);
  v2[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10008F9C0, 0, 0);
}

uint64_t sub_10008F9C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 128);
  TVEpisode.url.getter();
  v2 = type metadata accessor for URL(0);
  *(_QWORD *)(v0 + 136) = v2;
  v3 = *(_QWORD *)(v2 - 8);
  *(_QWORD *)(v0 + 144) = v3;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = sub_10000FE2C(*(_QWORD *)(v0 + 128), &qword_1004B99B0);
    v5 = TVEpisode.catalogID.getter(v4);
    *(_QWORD *)(v0 + 152) = v5;
    *(_QWORD *)(v0 + 160) = v6;
    if (v6)
    {
      v7 = v5;
      v8 = v6;
      KeyPath = swift_getKeyPath(&unk_1003CABF0);
      *(_QWORD *)(v0 + 16) = v7;
      *(_QWORD *)(v0 + 24) = v8;
      v10 = type metadata accessor for TVEpisode(0);
      *(_QWORD *)(v0 + 168) = v10;
      v11 = sub_100004D8C(&qword_1004BB7E0, (uint64_t (*)(uint64_t))&type metadata accessor for TVEpisode, (uint64_t)&protocol conformance descriptor for TVEpisode);
      v12 = sub_100004D8C(&qword_1004BB7E8, (uint64_t (*)(uint64_t))&type metadata accessor for TVEpisode, (uint64_t)&protocol conformance descriptor for TVEpisode);
      swift_bridgeObjectRetain();
      MusicCatalogResourceRequest.init<A>(matching:equalTo:)(KeyPath, v0 + 16, v10, v11, v12);
      v13 = (_QWORD *)swift_task_alloc(async function pointer to MusicCatalogResourceRequest.response()[1]);
      *(_QWORD *)(v0 + 176) = v13;
      *v13 = v0;
      v13[1] = sub_10008FBC0;
      return MusicCatalogResourceRequest.response()(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v3 + 56))(*(_QWORD *)(v0 + 32), 1, 1, v2);
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 32);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 32))(v15, *(_QWORD *)(v0 + 128), v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v15, 0, 1, v2);
  }
  v16 = *(_QWORD *)(v0 + 120);
  v17 = *(_QWORD *)(v0 + 96);
  v19 = *(_QWORD *)(v0 + 64);
  v18 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008FBC0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 176);
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10008FDA4;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 160));
    v4 = sub_10008FC2C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10008FC2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  MusicCatalogResourceResponse.items.getter(*(_QWORD *)(v0 + 80));
  sub_100075868(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v6 = *(_QWORD *)(v1 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 1, v1) == 1)
  {
    v7 = *(_QWORD *)(v0 + 136);
    v8 = *(_QWORD *)(v0 + 144);
    v10 = *(_QWORD *)(v0 + 112);
    v9 = *(_QWORD *)(v0 + 120);
    v11 = *(_QWORD *)(v0 + 104);
    v12 = *(_QWORD *)(v0 + 72);
    v13 = *(_QWORD *)(v0 + 32);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    sub_10000FE2C(v12, &qword_1004BB7C8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v13, 1, 1, v7);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 168);
    v16 = *(_QWORD *)(v0 + 112);
    v15 = *(_QWORD *)(v0 + 120);
    v18 = *(_QWORD *)(v0 + 96);
    v17 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 80);
    v20 = *(_QWORD *)(v0 + 88);
    v21 = *(_QWORD *)(v0 + 72);
    TVEpisode.url.getter();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v21, v14);
  }
  v22 = *(_QWORD *)(v0 + 120);
  v23 = *(_QWORD *)(v0 + 96);
  v25 = *(_QWORD *)(v0 + 64);
  v24 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008FDA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (qword_1004B8A28 != -1)
    swift_once(&qword_1004B8A28, sub_1000971E8);
  v1 = *(_QWORD *)(v0 + 184);
  v2 = type metadata accessor for Logger(0);
  sub_100039D34(v2, (uint64_t)qword_1004BB610);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain();
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 160);
  if (v6)
  {
    v9 = *(_QWORD *)(v0 + 152);
    v26 = *(_QWORD *)(v0 + 112);
    v27 = *(_QWORD *)(v0 + 104);
    v28 = *(_QWORD *)(v0 + 120);
    v10 = swift_slowAlloc(22, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    v12 = swift_slowAlloc(32, -1);
    v29 = v12;
    *(_DWORD *)v10 = 136446466;
    swift_bridgeObjectRetain();
    v13 = (char *)MusicItemID.description.getter(v9, v8);
    v15 = v14;
    swift_bridgeObjectRelease(v8);
    *(_QWORD *)(v10 + 4) = sub_1000393D0(v13, v15, &v29);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease_n(v8, 2);
    *(_WORD *)(v10 + 12) = 2114;
    swift_errorRetain(v7);
    v16 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v10 + 14) = v16;
    *v11 = v16;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to get share URL for TVEpisode catalogID: %{public}s: %{public}@", (uint8_t *)v10, 0x16u);
    v17 = sub_1000057B4(&qword_1004C0DB0);
    swift_arrayDestroy(v11, 1, v17);
    swift_slowDealloc(v11, -1, -1);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v7);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v28, v27);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 112);
    v18 = *(_QWORD *)(v0 + 120);
    v20 = *(_QWORD *)(v0 + 104);

    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_bridgeObjectRelease_n(v8, 2);
    swift_errorRelease(v7);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 144) + 56))(*(_QWORD *)(v0 + 32), 1, 1, *(_QWORD *)(v0 + 136));
  v21 = *(_QWORD *)(v0 + 120);
  v22 = *(_QWORD *)(v0 + 96);
  v24 = *(_QWORD *)(v0 + 64);
  v23 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009007C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1004BB7C4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10002F6EC;
  return TVEpisode.shareURL.getter(a1);
}

uint64_t sub_1000900CC()
{
  return TVEpisode.actionTitle.getter();
}

uint64_t sub_1000900E0()
{
  return TVEpisode.failureMessage.getter();
}

uint64_t sub_1000900F4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_1000057B4(&qword_1004B99B0);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100090150, 0, 0);
}

uint64_t sub_100090150()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 40) = **(_QWORD **)(v0 + 16);
  v1 = (_QWORD *)swift_task_alloc(dword_1004BB7C4);
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_10008A03C;
  return TVEpisode.shareURL.getter(*(_QWORD *)(v0 + 32));
}

uint64_t TVSeason.actionTitle.getter()
{
  return sub_10007A140(0x6553206572616853, 0xAFA680E26E6F7361);
}

uint64_t TVSeason.failureMessage.getter()
{
  return sub_10007A140(0xD00000000000001CLL, 0x80000001003A82F0);
}

uint64_t TVSeason.shareURL.getter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2[4] = a1;
  v2[5] = v1;
  v3 = sub_1000057B4(&qword_1004BB350);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000057B4(&qword_1004BB7F8);
  v2[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000057B4(&qword_1004BB800);
  v2[10] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[11] = v7;
  v2[12] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000057B4(&qword_1004BB808);
  v2[13] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[14] = v9;
  v2[15] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000057B4(&qword_1004B99B0);
  v2[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000902F0, 0, 0);
}

uint64_t sub_1000902F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 128);
  TVSeason.url.getter();
  v2 = type metadata accessor for URL(0);
  *(_QWORD *)(v0 + 136) = v2;
  v3 = *(_QWORD *)(v2 - 8);
  *(_QWORD *)(v0 + 144) = v3;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = sub_10000FE2C(*(_QWORD *)(v0 + 128), &qword_1004B99B0);
    v5 = TVSeason.catalogID.getter(v4);
    *(_QWORD *)(v0 + 152) = v5;
    *(_QWORD *)(v0 + 160) = v6;
    if (v6)
    {
      v7 = v5;
      v8 = v6;
      KeyPath = swift_getKeyPath(&unk_1003CAC18);
      *(_QWORD *)(v0 + 16) = v7;
      *(_QWORD *)(v0 + 24) = v8;
      v10 = type metadata accessor for TVSeason(0);
      *(_QWORD *)(v0 + 168) = v10;
      v11 = sub_100004D8C(&qword_1004BB810, (uint64_t (*)(uint64_t))&type metadata accessor for TVSeason, (uint64_t)&protocol conformance descriptor for TVSeason);
      v12 = sub_100004D8C(&qword_1004BB818, (uint64_t (*)(uint64_t))&type metadata accessor for TVSeason, (uint64_t)&protocol conformance descriptor for TVSeason);
      swift_bridgeObjectRetain();
      MusicCatalogResourceRequest.init<A>(matching:equalTo:)(KeyPath, v0 + 16, v10, v11, v12);
      v13 = (_QWORD *)swift_task_alloc(async function pointer to MusicCatalogResourceRequest.response()[1]);
      *(_QWORD *)(v0 + 176) = v13;
      *v13 = v0;
      v13[1] = sub_1000904F0;
      return MusicCatalogResourceRequest.response()(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v3 + 56))(*(_QWORD *)(v0 + 32), 1, 1, v2);
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 32);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 32))(v15, *(_QWORD *)(v0 + 128), v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v15, 0, 1, v2);
  }
  v16 = *(_QWORD *)(v0 + 120);
  v17 = *(_QWORD *)(v0 + 96);
  v19 = *(_QWORD *)(v0 + 64);
  v18 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000904F0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 176);
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000906D4;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 160));
    v4 = sub_10009055C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10009055C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  MusicCatalogResourceResponse.items.getter(*(_QWORD *)(v0 + 80));
  sub_100075884(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v6 = *(_QWORD *)(v1 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 1, v1) == 1)
  {
    v7 = *(_QWORD *)(v0 + 136);
    v8 = *(_QWORD *)(v0 + 144);
    v10 = *(_QWORD *)(v0 + 112);
    v9 = *(_QWORD *)(v0 + 120);
    v11 = *(_QWORD *)(v0 + 104);
    v12 = *(_QWORD *)(v0 + 72);
    v13 = *(_QWORD *)(v0 + 32);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    sub_10000FE2C(v12, &qword_1004BB7F8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v13, 1, 1, v7);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 168);
    v16 = *(_QWORD *)(v0 + 112);
    v15 = *(_QWORD *)(v0 + 120);
    v18 = *(_QWORD *)(v0 + 96);
    v17 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 80);
    v20 = *(_QWORD *)(v0 + 88);
    v21 = *(_QWORD *)(v0 + 72);
    TVSeason.url.getter();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v21, v14);
  }
  v22 = *(_QWORD *)(v0 + 120);
  v23 = *(_QWORD *)(v0 + 96);
  v25 = *(_QWORD *)(v0 + 64);
  v24 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000906D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (qword_1004B8A28 != -1)
    swift_once(&qword_1004B8A28, sub_1000971E8);
  v1 = *(_QWORD *)(v0 + 184);
  v2 = type metadata accessor for Logger(0);
  sub_100039D34(v2, (uint64_t)qword_1004BB610);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain();
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 160);
  if (v6)
  {
    v9 = *(_QWORD *)(v0 + 152);
    v26 = *(_QWORD *)(v0 + 112);
    v27 = *(_QWORD *)(v0 + 104);
    v28 = *(_QWORD *)(v0 + 120);
    v10 = swift_slowAlloc(22, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    v12 = swift_slowAlloc(32, -1);
    v29 = v12;
    *(_DWORD *)v10 = 136446466;
    swift_bridgeObjectRetain();
    v13 = (char *)MusicItemID.description.getter(v9, v8);
    v15 = v14;
    swift_bridgeObjectRelease(v8);
    *(_QWORD *)(v10 + 4) = sub_1000393D0(v13, v15, &v29);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease_n(v8, 2);
    *(_WORD *)(v10 + 12) = 2114;
    swift_errorRetain(v7);
    v16 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v10 + 14) = v16;
    *v11 = v16;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to get share URL for TVSeason catalogID: %{public}s: %{public}@", (uint8_t *)v10, 0x16u);
    v17 = sub_1000057B4(&qword_1004C0DB0);
    swift_arrayDestroy(v11, 1, v17);
    swift_slowDealloc(v11, -1, -1);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v7);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v28, v27);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 112);
    v18 = *(_QWORD *)(v0 + 120);
    v20 = *(_QWORD *)(v0 + 104);

    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_bridgeObjectRelease_n(v8, 2);
    swift_errorRelease(v7);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 144) + 56))(*(_QWORD *)(v0 + 32), 1, 1, *(_QWORD *)(v0 + 136));
  v21 = *(_QWORD *)(v0 + 120);
  v22 = *(_QWORD *)(v0 + 96);
  v24 = *(_QWORD *)(v0 + 64);
  v23 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000909AC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1004BB7F4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10002F6EC;
  return TVSeason.shareURL.getter(a1);
}

uint64_t sub_1000909FC(uint64_t a1, uint64_t a2)
{
  return sub_10007A304(a1, a2, 0x6553206572616853, 0xAFA680E26E6F7361);
}

uint64_t sub_100090A20()
{
  return TVSeason.failureMessage.getter();
}

uint64_t sub_100090A34(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_1000057B4(&qword_1004B99B0);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100090A90, 0, 0);
}

uint64_t sub_100090A90()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 40) = **(_QWORD **)(v0 + 16);
  v1 = (_QWORD *)swift_task_alloc(dword_1004BB7F4);
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_10008A03C;
  return TVSeason.shareURL.getter(*(_QWORD *)(v0 + 32));
}

uint64_t TVShow.shareURL.getter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2[4] = a1;
  v2[5] = v1;
  v3 = sub_1000057B4(&qword_1004BB340);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000057B4(&qword_1004BB828);
  v2[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000057B4(&qword_1004BB830);
  v2[10] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[11] = v7;
  v2[12] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000057B4(&qword_1004BB838);
  v2[13] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[14] = v9;
  v2[15] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000057B4(&qword_1004B99B0);
  v2[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100090BF0, 0, 0);
}

uint64_t sub_100090BF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 128);
  TVShow.url.getter();
  v2 = type metadata accessor for URL(0);
  *(_QWORD *)(v0 + 136) = v2;
  v3 = *(_QWORD *)(v2 - 8);
  *(_QWORD *)(v0 + 144) = v3;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = sub_10000FE2C(*(_QWORD *)(v0 + 128), &qword_1004B99B0);
    v5 = TVShow.catalogID.getter(v4);
    *(_QWORD *)(v0 + 152) = v5;
    *(_QWORD *)(v0 + 160) = v6;
    if (v6)
    {
      v7 = v5;
      v8 = v6;
      KeyPath = swift_getKeyPath(&unk_1003CAC40);
      *(_QWORD *)(v0 + 16) = v7;
      *(_QWORD *)(v0 + 24) = v8;
      v10 = type metadata accessor for TVShow(0);
      *(_QWORD *)(v0 + 168) = v10;
      v11 = sub_100004D8C(&qword_1004BB840, (uint64_t (*)(uint64_t))&type metadata accessor for TVShow, (uint64_t)&protocol conformance descriptor for TVShow);
      v12 = sub_100004D8C(&qword_1004BB848, (uint64_t (*)(uint64_t))&type metadata accessor for TVShow, (uint64_t)&protocol conformance descriptor for TVShow);
      swift_bridgeObjectRetain();
      MusicCatalogResourceRequest.init<A>(matching:equalTo:)(KeyPath, v0 + 16, v10, v11, v12);
      v13 = (_QWORD *)swift_task_alloc(async function pointer to MusicCatalogResourceRequest.response()[1]);
      *(_QWORD *)(v0 + 176) = v13;
      *v13 = v0;
      v13[1] = sub_100090DF0;
      return MusicCatalogResourceRequest.response()(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v3 + 56))(*(_QWORD *)(v0 + 32), 1, 1, v2);
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 32);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 32))(v15, *(_QWORD *)(v0 + 128), v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v15, 0, 1, v2);
  }
  v16 = *(_QWORD *)(v0 + 120);
  v17 = *(_QWORD *)(v0 + 96);
  v19 = *(_QWORD *)(v0 + 64);
  v18 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100090DF0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 176);
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100090FD4;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 160));
    v4 = sub_100090E5C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100090E5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  MusicCatalogResourceResponse.items.getter(*(_QWORD *)(v0 + 80));
  sub_1000758A0(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v6 = *(_QWORD *)(v1 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 1, v1) == 1)
  {
    v7 = *(_QWORD *)(v0 + 136);
    v8 = *(_QWORD *)(v0 + 144);
    v10 = *(_QWORD *)(v0 + 112);
    v9 = *(_QWORD *)(v0 + 120);
    v11 = *(_QWORD *)(v0 + 104);
    v12 = *(_QWORD *)(v0 + 72);
    v13 = *(_QWORD *)(v0 + 32);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    sub_10000FE2C(v12, &qword_1004BB828);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v13, 1, 1, v7);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 168);
    v16 = *(_QWORD *)(v0 + 112);
    v15 = *(_QWORD *)(v0 + 120);
    v18 = *(_QWORD *)(v0 + 96);
    v17 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 80);
    v20 = *(_QWORD *)(v0 + 88);
    v21 = *(_QWORD *)(v0 + 72);
    TVShow.url.getter();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v21, v14);
  }
  v22 = *(_QWORD *)(v0 + 120);
  v23 = *(_QWORD *)(v0 + 96);
  v25 = *(_QWORD *)(v0 + 64);
  v24 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100090FD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (qword_1004B8A28 != -1)
    swift_once(&qword_1004B8A28, sub_1000971E8);
  v1 = *(_QWORD *)(v0 + 184);
  v2 = type metadata accessor for Logger(0);
  sub_100039D34(v2, (uint64_t)qword_1004BB610);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain();
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 160);
  if (v6)
  {
    v9 = *(_QWORD *)(v0 + 152);
    v26 = *(_QWORD *)(v0 + 112);
    v27 = *(_QWORD *)(v0 + 104);
    v28 = *(_QWORD *)(v0 + 120);
    v10 = swift_slowAlloc(22, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    v12 = swift_slowAlloc(32, -1);
    v29 = v12;
    *(_DWORD *)v10 = 136446466;
    swift_bridgeObjectRetain();
    v13 = (char *)MusicItemID.description.getter(v9, v8);
    v15 = v14;
    swift_bridgeObjectRelease(v8);
    *(_QWORD *)(v10 + 4) = sub_1000393D0(v13, v15, &v29);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease_n(v8, 2);
    *(_WORD *)(v10 + 12) = 2114;
    swift_errorRetain(v7);
    v16 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v10 + 14) = v16;
    *v11 = v16;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to get share URL for TVShow catalogID: %{public}s: %{public}@", (uint8_t *)v10, 0x16u);
    v17 = sub_1000057B4(&qword_1004C0DB0);
    swift_arrayDestroy(v11, 1, v17);
    swift_slowDealloc(v11, -1, -1);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v7);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v28, v27);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 112);
    v18 = *(_QWORD *)(v0 + 120);
    v20 = *(_QWORD *)(v0 + 104);

    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_bridgeObjectRelease_n(v8, 2);
    swift_errorRelease(v7);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 144) + 56))(*(_QWORD *)(v0 + 32), 1, 1, *(_QWORD *)(v0 + 136));
  v21 = *(_QWORD *)(v0 + 120);
  v22 = *(_QWORD *)(v0 + 96);
  v24 = *(_QWORD *)(v0 + 64);
  v23 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000912AC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1004BB824);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10002F6EC;
  return TVShow.shareURL.getter(a1);
}

uint64_t sub_1000912FC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_1000057B4(&qword_1004B99B0);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100091358, 0, 0);
}

uint64_t sub_100091358()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 40) = **(_QWORD **)(v0 + 16);
  v1 = (_QWORD *)swift_task_alloc(dword_1004BB824);
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_10008A03C;
  return TVShow.shareURL.getter(*(_QWORD *)(v0 + 32));
}

uint64_t UploadedAudio.shareURL.getter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2[4] = a1;
  v2[5] = v1;
  v3 = sub_1000057B4(&qword_1004BB330);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000057B4(&qword_1004BB858);
  v2[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000057B4(&qword_1004BB860);
  v2[10] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[11] = v7;
  v2[12] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000057B4(&qword_1004BB868);
  v2[13] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[14] = v9;
  v2[15] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000057B4(&qword_1004B99B0);
  v2[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000914B8, 0, 0);
}

uint64_t sub_1000914B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 128);
  _s16MusicKitInternal13UploadedAudioV0A4CoreE3url10Foundation3URLVSgvg_0();
  v2 = type metadata accessor for URL(0);
  *(_QWORD *)(v0 + 136) = v2;
  v3 = *(_QWORD *)(v2 - 8);
  *(_QWORD *)(v0 + 144) = v3;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = sub_10000FE2C(*(_QWORD *)(v0 + 128), &qword_1004B99B0);
    v5 = UploadedAudio.catalogID.getter(v4);
    *(_QWORD *)(v0 + 152) = v5;
    *(_QWORD *)(v0 + 160) = v6;
    if (v6)
    {
      v7 = v5;
      v8 = v6;
      KeyPath = swift_getKeyPath(&unk_1003CAC68);
      *(_QWORD *)(v0 + 16) = v7;
      *(_QWORD *)(v0 + 24) = v8;
      v10 = type metadata accessor for UploadedAudio(0);
      *(_QWORD *)(v0 + 168) = v10;
      v11 = sub_100004D8C(&qword_1004BB870, (uint64_t (*)(uint64_t))&type metadata accessor for UploadedAudio, (uint64_t)&protocol conformance descriptor for UploadedAudio);
      v12 = sub_100004D8C(&qword_1004BB878, (uint64_t (*)(uint64_t))&type metadata accessor for UploadedAudio, (uint64_t)&protocol conformance descriptor for UploadedAudio);
      swift_bridgeObjectRetain();
      MusicCatalogResourceRequest.init<A>(matching:equalTo:)(KeyPath, v0 + 16, v10, v11, v12);
      v13 = (_QWORD *)swift_task_alloc(async function pointer to MusicCatalogResourceRequest.response()[1]);
      *(_QWORD *)(v0 + 176) = v13;
      *v13 = v0;
      v13[1] = sub_1000916B8;
      return MusicCatalogResourceRequest.response()(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v3 + 56))(*(_QWORD *)(v0 + 32), 1, 1, v2);
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 32);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 32))(v15, *(_QWORD *)(v0 + 128), v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v15, 0, 1, v2);
  }
  v16 = *(_QWORD *)(v0 + 120);
  v17 = *(_QWORD *)(v0 + 96);
  v19 = *(_QWORD *)(v0 + 64);
  v18 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000916B8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 176);
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10009189C;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 160));
    v4 = sub_100091724;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100091724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  MusicCatalogResourceResponse.items.getter(*(_QWORD *)(v0 + 80));
  sub_1000758BC(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v6 = *(_QWORD *)(v1 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 1, v1) == 1)
  {
    v7 = *(_QWORD *)(v0 + 136);
    v8 = *(_QWORD *)(v0 + 144);
    v10 = *(_QWORD *)(v0 + 112);
    v9 = *(_QWORD *)(v0 + 120);
    v11 = *(_QWORD *)(v0 + 104);
    v12 = *(_QWORD *)(v0 + 72);
    v13 = *(_QWORD *)(v0 + 32);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    sub_10000FE2C(v12, &qword_1004BB858);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v13, 1, 1, v7);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 168);
    v16 = *(_QWORD *)(v0 + 112);
    v15 = *(_QWORD *)(v0 + 120);
    v18 = *(_QWORD *)(v0 + 96);
    v17 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 80);
    v20 = *(_QWORD *)(v0 + 88);
    v21 = *(_QWORD *)(v0 + 72);
    _s16MusicKitInternal13UploadedAudioV0A4CoreE3url10Foundation3URLVSgvg_0();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v21, v14);
  }
  v22 = *(_QWORD *)(v0 + 120);
  v23 = *(_QWORD *)(v0 + 96);
  v25 = *(_QWORD *)(v0 + 64);
  v24 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009189C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (qword_1004B8A28 != -1)
    swift_once(&qword_1004B8A28, sub_1000971E8);
  v1 = *(_QWORD *)(v0 + 184);
  v2 = type metadata accessor for Logger(0);
  sub_100039D34(v2, (uint64_t)qword_1004BB610);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain();
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 160);
  if (v6)
  {
    v9 = *(_QWORD *)(v0 + 152);
    v26 = *(_QWORD *)(v0 + 112);
    v27 = *(_QWORD *)(v0 + 104);
    v28 = *(_QWORD *)(v0 + 120);
    v10 = swift_slowAlloc(22, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    v12 = swift_slowAlloc(32, -1);
    v29 = v12;
    *(_DWORD *)v10 = 136446466;
    swift_bridgeObjectRetain();
    v13 = (char *)MusicItemID.description.getter(v9, v8);
    v15 = v14;
    swift_bridgeObjectRelease(v8);
    *(_QWORD *)(v10 + 4) = sub_1000393D0(v13, v15, &v29);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease_n(v8, 2);
    *(_WORD *)(v10 + 12) = 2114;
    swift_errorRetain(v7);
    v16 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v10 + 14) = v16;
    *v11 = v16;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to get share URL for uploaded audio catalogID: %{public}s: %{public}@", (uint8_t *)v10, 0x16u);
    v17 = sub_1000057B4(&qword_1004C0DB0);
    swift_arrayDestroy(v11, 1, v17);
    swift_slowDealloc(v11, -1, -1);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v7);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v28, v27);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 112);
    v18 = *(_QWORD *)(v0 + 120);
    v20 = *(_QWORD *)(v0 + 104);

    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_bridgeObjectRelease_n(v8, 2);
    swift_errorRelease(v7);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 144) + 56))(*(_QWORD *)(v0 + 32), 1, 1, *(_QWORD *)(v0 + 136));
  v21 = *(_QWORD *)(v0 + 120);
  v22 = *(_QWORD *)(v0 + 96);
  v24 = *(_QWORD *)(v0 + 64);
  v23 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100091B74(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1004BB854);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10002F6EC;
  return UploadedAudio.shareURL.getter(a1);
}

uint64_t sub_100091BC4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_1000057B4(&qword_1004B99B0);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100091C20, 0, 0);
}

uint64_t sub_100091C20()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 40) = **(_QWORD **)(v0 + 16);
  v1 = (_QWORD *)swift_task_alloc(dword_1004BB854);
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_10008A03C;
  return UploadedAudio.shareURL.getter(*(_QWORD *)(v0 + 32));
}

uint64_t UploadedVideo.shareURL.getter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2[4] = a1;
  v2[5] = v1;
  v3 = sub_1000057B4(&qword_1004BB320);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000057B4(&qword_1004BB888);
  v2[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000057B4(&qword_1004BB890);
  v2[10] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[11] = v7;
  v2[12] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000057B4(&qword_1004BB898);
  v2[13] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[14] = v9;
  v2[15] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000057B4(&qword_1004B99B0);
  v2[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100091D80, 0, 0);
}

uint64_t sub_100091D80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 128);
  _s16MusicKitInternal13UploadedVideoV0A4CoreE3url10Foundation3URLVSgvg_0();
  v2 = type metadata accessor for URL(0);
  *(_QWORD *)(v0 + 136) = v2;
  v3 = *(_QWORD *)(v2 - 8);
  *(_QWORD *)(v0 + 144) = v3;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = sub_10000FE2C(*(_QWORD *)(v0 + 128), &qword_1004B99B0);
    v5 = UploadedVideo.catalogID.getter(v4);
    *(_QWORD *)(v0 + 152) = v5;
    *(_QWORD *)(v0 + 160) = v6;
    if (v6)
    {
      v7 = v5;
      v8 = v6;
      KeyPath = swift_getKeyPath(&unk_1003CAC90);
      *(_QWORD *)(v0 + 16) = v7;
      *(_QWORD *)(v0 + 24) = v8;
      v10 = type metadata accessor for UploadedVideo(0);
      *(_QWORD *)(v0 + 168) = v10;
      v11 = sub_100004D8C(&qword_1004BB8A0, (uint64_t (*)(uint64_t))&type metadata accessor for UploadedVideo, (uint64_t)&protocol conformance descriptor for UploadedVideo);
      v12 = sub_100004D8C(&qword_1004BB8A8, (uint64_t (*)(uint64_t))&type metadata accessor for UploadedVideo, (uint64_t)&protocol conformance descriptor for UploadedVideo);
      swift_bridgeObjectRetain();
      MusicCatalogResourceRequest.init<A>(matching:equalTo:)(KeyPath, v0 + 16, v10, v11, v12);
      v13 = (_QWORD *)swift_task_alloc(async function pointer to MusicCatalogResourceRequest.response()[1]);
      *(_QWORD *)(v0 + 176) = v13;
      *v13 = v0;
      v13[1] = sub_100091F80;
      return MusicCatalogResourceRequest.response()(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v3 + 56))(*(_QWORD *)(v0 + 32), 1, 1, v2);
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 32);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 32))(v15, *(_QWORD *)(v0 + 128), v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v15, 0, 1, v2);
  }
  v16 = *(_QWORD *)(v0 + 120);
  v17 = *(_QWORD *)(v0 + 96);
  v19 = *(_QWORD *)(v0 + 64);
  v18 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100091F80()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 176);
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100092164;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 160));
    v4 = sub_100091FEC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100091FEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  MusicCatalogResourceResponse.items.getter(*(_QWORD *)(v0 + 80));
  sub_1000758D8(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v6 = *(_QWORD *)(v1 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 1, v1) == 1)
  {
    v7 = *(_QWORD *)(v0 + 136);
    v8 = *(_QWORD *)(v0 + 144);
    v10 = *(_QWORD *)(v0 + 112);
    v9 = *(_QWORD *)(v0 + 120);
    v11 = *(_QWORD *)(v0 + 104);
    v12 = *(_QWORD *)(v0 + 72);
    v13 = *(_QWORD *)(v0 + 32);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    sub_10000FE2C(v12, &qword_1004BB888);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v13, 1, 1, v7);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 168);
    v16 = *(_QWORD *)(v0 + 112);
    v15 = *(_QWORD *)(v0 + 120);
    v18 = *(_QWORD *)(v0 + 96);
    v17 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 80);
    v20 = *(_QWORD *)(v0 + 88);
    v21 = *(_QWORD *)(v0 + 72);
    _s16MusicKitInternal13UploadedVideoV0A4CoreE3url10Foundation3URLVSgvg_0();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v21, v14);
  }
  v22 = *(_QWORD *)(v0 + 120);
  v23 = *(_QWORD *)(v0 + 96);
  v25 = *(_QWORD *)(v0 + 64);
  v24 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100092164()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (qword_1004B8A28 != -1)
    swift_once(&qword_1004B8A28, sub_1000971E8);
  v1 = *(_QWORD *)(v0 + 184);
  v2 = type metadata accessor for Logger(0);
  sub_100039D34(v2, (uint64_t)qword_1004BB610);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain();
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 160);
  if (v6)
  {
    v9 = *(_QWORD *)(v0 + 152);
    v26 = *(_QWORD *)(v0 + 112);
    v27 = *(_QWORD *)(v0 + 104);
    v28 = *(_QWORD *)(v0 + 120);
    v10 = swift_slowAlloc(22, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    v12 = swift_slowAlloc(32, -1);
    v29 = v12;
    *(_DWORD *)v10 = 136446466;
    swift_bridgeObjectRetain();
    v13 = (char *)MusicItemID.description.getter(v9, v8);
    v15 = v14;
    swift_bridgeObjectRelease(v8);
    *(_QWORD *)(v10 + 4) = sub_1000393D0(v13, v15, &v29);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease_n(v8, 2);
    *(_WORD *)(v10 + 12) = 2114;
    swift_errorRetain(v7);
    v16 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v10 + 14) = v16;
    *v11 = v16;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to get share URL for uploaded video catalogID: %{public}s: %{public}@", (uint8_t *)v10, 0x16u);
    v17 = sub_1000057B4(&qword_1004C0DB0);
    swift_arrayDestroy(v11, 1, v17);
    swift_slowDealloc(v11, -1, -1);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v7);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v28, v27);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 112);
    v18 = *(_QWORD *)(v0 + 120);
    v20 = *(_QWORD *)(v0 + 104);

    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_bridgeObjectRelease_n(v8, 2);
    swift_errorRelease(v7);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 144) + 56))(*(_QWORD *)(v0 + 32), 1, 1, *(_QWORD *)(v0 + 136));
  v21 = *(_QWORD *)(v0 + 120);
  v22 = *(_QWORD *)(v0 + 96);
  v24 = *(_QWORD *)(v0 + 64);
  v23 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009243C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1004BB884);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10002F6EC;
  return UploadedVideo.shareURL.getter(a1);
}

uint64_t sub_10009248C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_1000057B4(&qword_1004B99B0);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000924E8, 0, 0);
}

uint64_t sub_1000924E8()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 40) = **(_QWORD **)(v0 + 16);
  v1 = (_QWORD *)swift_task_alloc(dword_1004BB884);
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_10008A03C;
  return UploadedVideo.shareURL.getter(*(_QWORD *)(v0 + 32));
}

uint64_t GenericMusicItem.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;

  v114 = a1;
  v68 = type metadata accessor for UploadedVideo(0);
  v67 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v66 = (char *)&v66 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for UploadedAudio(0);
  v70 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v69 = (char *)&v66 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for TVShow(0);
  v73 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v72 = (char *)&v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for TVSeason(0);
  v76 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v75 = (char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for TVEpisode(0);
  v79 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v78 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for Station(0);
  v82 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v81 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for Song(0);
  v85 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  v84 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for SocialProfile(0);
  v88 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v87 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for RecordLabel(0);
  v91 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v90 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for RadioShow(0);
  v94 = *(_QWORD *)(v10 - 8);
  v95 = v10;
  __chkstk_darwin(v10);
  v93 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Playlist(0);
  v97 = *(_QWORD *)(v12 - 8);
  v98 = v12;
  __chkstk_darwin(v12);
  v96 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for MusicVideo(0);
  v100 = *(_QWORD *)(v14 - 8);
  v101 = v14;
  __chkstk_darwin(v14);
  v99 = (char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for MusicMovie(0);
  v103 = *(_QWORD *)(v16 - 8);
  v104 = v16;
  __chkstk_darwin(v16);
  v102 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Genre(0);
  v106 = *(_QWORD *)(v18 - 8);
  v107 = v18;
  __chkstk_darwin(v18);
  v105 = (char *)&v66 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for EditorialItem(0);
  v109 = *(_QWORD *)(v20 - 8);
  v110 = v20;
  __chkstk_darwin(v20);
  v108 = (char *)&v66 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Curator(0);
  v111 = *(_QWORD *)(v22 - 8);
  v112 = v22;
  __chkstk_darwin(v22);
  v24 = (char *)&v66 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for Artist(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v28 = (char *)&v66 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for Album(0);
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v32 = (char *)&v66 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for GenericMusicItem(0);
  v34 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v36 = (char *)&v66 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v36, v113, v33);
  v37 = (*(uint64_t (**)(char *, uint64_t))(v34 + 88))(v36, v33);
  if (v37 == enum case for GenericMusicItem.album(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v36, v33);
    v38 = (*(uint64_t (**)(char *, char *, uint64_t))(v30 + 32))(v32, v36, v29);
    Album.url.getter(v38);
    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v32, v29);
  }
  v40 = v114;
  if (v37 != enum case for GenericMusicItem.artist(_:))
  {
    if (v37 == enum case for GenericMusicItem.composer(_:) || v37 == enum case for GenericMusicItem.creditArtist(_:))
    {
      (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
      goto LABEL_9;
    }
    if (v37 == enum case for GenericMusicItem.curator(_:))
    {
      (*(void (**)(char *, uint64_t))(v34 + 96))(v36, v33);
      v44 = v111;
      v43 = v112;
      v45 = (*(uint64_t (**)(char *, char *, uint64_t))(v111 + 32))(v24, v36, v112);
      Curator.url.getter(v45);
      return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v24, v43);
    }
    if (v37 == enum case for GenericMusicItem.editorialItem(_:))
    {
      (*(void (**)(char *, uint64_t))(v34 + 96))(v36, v33);
      v47 = v108;
      v46 = v109;
      v48 = v110;
      v49 = (*(uint64_t (**)(char *, char *, uint64_t))(v109 + 32))(v108, v36, v110);
      EditorialItem.url.getter(v49);
      return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v47, v48);
    }
    if (v37 == enum case for GenericMusicItem.genre(_:))
    {
      (*(void (**)(char *, uint64_t))(v34 + 96))(v36, v33);
      v50 = v105;
      v51 = v106;
      v52 = v107;
      v53 = (*(uint64_t (**)(char *, char *, uint64_t))(v106 + 32))(v105, v36, v107);
      Genre.url.getter(v53);
    }
    else if (v37 == enum case for GenericMusicItem.musicMovie(_:))
    {
      (*(void (**)(char *, uint64_t))(v34 + 96))(v36, v33);
      v50 = v102;
      v51 = v103;
      v52 = v104;
      v54 = (*(uint64_t (**)(char *, char *, uint64_t))(v103 + 32))(v102, v36, v104);
      MusicMovie.url.getter(v54);
    }
    else if (v37 == enum case for GenericMusicItem.musicVideo(_:))
    {
      (*(void (**)(char *, uint64_t))(v34 + 96))(v36, v33);
      v50 = v99;
      v51 = v100;
      v52 = v101;
      v55 = (*(uint64_t (**)(char *, char *, uint64_t))(v100 + 32))(v99, v36, v101);
      MusicVideo.url.getter(v55);
    }
    else if (v37 == enum case for GenericMusicItem.playlist(_:))
    {
      (*(void (**)(char *, uint64_t))(v34 + 96))(v36, v33);
      v50 = v96;
      v51 = v97;
      v52 = v98;
      v56 = (*(uint64_t (**)(char *, char *, uint64_t))(v97 + 32))(v96, v36, v98);
      Playlist.url.getter(v56);
    }
    else if (v37 == enum case for GenericMusicItem.radioShow(_:))
    {
      (*(void (**)(char *, uint64_t))(v34 + 96))(v36, v33);
      v51 = v94;
      v50 = v93;
      v52 = v95;
      v57 = (*(uint64_t (**)(char *, char *, uint64_t))(v94 + 32))(v93, v36, v95);
      RadioShow.url.getter(v57);
    }
    else if (v37 == enum case for GenericMusicItem.recordLabel(_:))
    {
      (*(void (**)(char *, uint64_t))(v34 + 96))(v36, v33);
      v51 = v91;
      v50 = v90;
      v52 = v92;
      v58 = (*(uint64_t (**)(char *, char *, uint64_t))(v91 + 32))(v90, v36, v92);
      RecordLabel.url.getter(v58);
    }
    else if (v37 == enum case for GenericMusicItem.socialProfile(_:))
    {
      (*(void (**)(char *, uint64_t))(v34 + 96))(v36, v33);
      v51 = v88;
      v50 = v87;
      v52 = v89;
      v59 = (*(uint64_t (**)(char *, char *, uint64_t))(v88 + 32))(v87, v36, v89);
      SocialProfile.url.getter(v59);
    }
    else
    {
      if (v37 != enum case for GenericMusicItem.song(_:))
      {
        if (v37 == enum case for GenericMusicItem.station(_:))
        {
          (*(void (**)(char *, uint64_t))(v34 + 96))(v36, v33);
          v46 = v82;
          v47 = v81;
          v48 = v83;
          v61 = (*(uint64_t (**)(char *, char *, uint64_t))(v82 + 32))(v81, v36, v83);
          Station.url.getter(v61);
        }
        else if (v37 == enum case for GenericMusicItem.tvEpisode(_:))
        {
          (*(void (**)(char *, uint64_t))(v34 + 96))(v36, v33);
          v46 = v79;
          v47 = v78;
          v48 = v80;
          v62 = (*(uint64_t (**)(char *, char *, uint64_t))(v79 + 32))(v78, v36, v80);
          TVEpisode.url.getter(v62);
        }
        else if (v37 == enum case for GenericMusicItem.tvSeason(_:))
        {
          (*(void (**)(char *, uint64_t))(v34 + 96))(v36, v33);
          v46 = v76;
          v47 = v75;
          v48 = v77;
          v63 = (*(uint64_t (**)(char *, char *, uint64_t))(v76 + 32))(v75, v36, v77);
          TVSeason.url.getter(v63);
        }
        else if (v37 == enum case for GenericMusicItem.tvShow(_:))
        {
          (*(void (**)(char *, uint64_t))(v34 + 96))(v36, v33);
          v46 = v73;
          v47 = v72;
          v48 = v74;
          v64 = (*(uint64_t (**)(char *, char *, uint64_t))(v73 + 32))(v72, v36, v74);
          TVShow.url.getter(v64);
        }
        else if (v37 == enum case for GenericMusicItem.uploadedAudio(_:))
        {
          (*(void (**)(char *, uint64_t))(v34 + 96))(v36, v33);
          v46 = v70;
          v47 = v69;
          v48 = v71;
          (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v69, v36, v71);
          _s16MusicKitInternal13UploadedAudioV0A4CoreE3url10Foundation3URLVSgvg_0();
        }
        else
        {
          if (v37 != enum case for GenericMusicItem.uploadedVideo(_:))
          {
            if (v37 != enum case for GenericMusicItem.other(_:))
            {
              v65 = type metadata accessor for URL(0);
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v40, 1, 1, v65);
              return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v36, v33);
            }
            (*(void (**)(char *, uint64_t))(v34 + 96))(v36, v33);
            swift_bridgeObjectRelease(*((_QWORD *)v36 + 1));
LABEL_9:
            v42 = type metadata accessor for URL(0);
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v40, 1, 1, v42);
          }
          (*(void (**)(char *, uint64_t))(v34 + 96))(v36, v33);
          v46 = v67;
          v47 = v66;
          v48 = v68;
          (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v66, v36, v68);
          _s16MusicKitInternal13UploadedVideoV0A4CoreE3url10Foundation3URLVSgvg_0();
        }
        return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v47, v48);
      }
      (*(void (**)(char *, uint64_t))(v34 + 96))(v36, v33);
      v51 = v85;
      v50 = v84;
      v52 = v86;
      v60 = (*(uint64_t (**)(char *, char *, uint64_t))(v85 + 32))(v84, v36, v86);
      Song.url.getter(v60);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v50, v52);
  }
  (*(void (**)(char *, uint64_t))(v34 + 96))(v36, v33);
  v41 = (*(uint64_t (**)(char *, char *, uint64_t))(v26 + 32))(v28, v36, v25);
  Artist.url.getter(v41);
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v28, v25);
}

uint64_t GenericMusicItem.shareURL.getter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for UploadedVideo(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UploadedAudio(0);
  v2[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[8] = v6;
  v2[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TVShow(0);
  v2[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[11] = v8;
  v2[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TVSeason(0);
  v2[13] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[14] = v10;
  v2[15] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TVEpisode(0);
  v2[16] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v2[17] = v12;
  v2[18] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Song(0);
  v2[19] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v2[20] = v14;
  v2[21] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Playlist(0);
  v2[22] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v2[23] = v16;
  v2[24] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for MusicVideo(0);
  v2[25] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v2[26] = v18;
  v2[27] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for MusicMovie(0);
  v2[28] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v2[29] = v20;
  v2[30] = swift_task_alloc((*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Artist(0);
  v2[31] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v2[32] = v22;
  v2[33] = swift_task_alloc((*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for Album(0);
  v2[34] = v23;
  v24 = *(_QWORD *)(v23 - 8);
  v2[35] = v24;
  v2[36] = swift_task_alloc((*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for GenericMusicItem(0);
  v2[37] = v25;
  v26 = *(_QWORD *)(v25 - 8);
  v2[38] = v26;
  v2[39] = swift_task_alloc((*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000933C8, 0, 0);
}

uint64_t sub_1000933C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v2 = *(_QWORD *)(v0 + 304);
  v1 = *(_QWORD *)(v0 + 312);
  v3 = *(_QWORD *)(v0 + 296);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v1, *(_QWORD *)(v0 + 24), v3);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  if (v4 == enum case for GenericMusicItem.album(_:))
  {
    v5 = *(_QWORD *)(v0 + 312);
    v6 = *(_QWORD *)(v0 + 288);
    v7 = *(_QWORD *)(v0 + 272);
    v8 = *(_QWORD *)(v0 + 280);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 304) + 96))(v5, *(_QWORD *)(v0 + 296));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v6, v5, v7);
    v9 = (_QWORD *)swift_task_alloc(dword_1004BB68C);
    *(_QWORD *)(v0 + 320) = v9;
    *v9 = v0;
    v9[1] = sub_100093C34;
    return Album.shareURL.getter(*(_QWORD *)(v0 + 16));
  }
  if (v4 == enum case for GenericMusicItem.artist(_:))
  {
    v11 = *(_QWORD *)(v0 + 312);
    v13 = *(_QWORD *)(v0 + 256);
    v12 = *(_QWORD *)(v0 + 264);
    v14 = *(_QWORD *)(v0 + 248);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 304) + 96))(v11, *(_QWORD *)(v0 + 296));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v12, v11, v14);
    v15 = (_QWORD *)swift_task_alloc(dword_1004BB6AC);
    *(_QWORD *)(v0 + 328) = v15;
    *v15 = v0;
    v15[1] = sub_100093D70;
    return Artist.shareURL.getter(*(_QWORD *)(v0 + 16));
  }
  if (v4 == enum case for GenericMusicItem.composer(_:))
    goto LABEL_16;
  if (v4 == enum case for GenericMusicItem.creditArtist(_:))
  {
LABEL_7:
    v16 = *(_QWORD *)(v0 + 16);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 304) + 8))(*(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 296));
    v17 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
LABEL_17:
    v21 = *(_QWORD *)(v0 + 288);
    v22 = *(_QWORD *)(v0 + 264);
    v23 = *(_QWORD *)(v0 + 240);
    v24 = *(_QWORD *)(v0 + 216);
    v25 = *(_QWORD *)(v0 + 192);
    v26 = *(_QWORD *)(v0 + 168);
    v27 = *(_QWORD *)(v0 + 144);
    v28 = *(_QWORD *)(v0 + 120);
    v29 = *(_QWORD *)(v0 + 96);
    v78 = *(_QWORD *)(v0 + 72);
    v79 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(*(_QWORD *)(v0 + 312));
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v18 = v4 == enum case for GenericMusicItem.curator(_:) || v4 == enum case for GenericMusicItem.editorialItem(_:);
  if (v18 || v4 == enum case for GenericMusicItem.genre(_:))
    goto LABEL_16;
  if (v4 == enum case for GenericMusicItem.musicMovie(_:))
  {
    v30 = *(_QWORD *)(v0 + 312);
    v32 = *(_QWORD *)(v0 + 232);
    v31 = *(_QWORD *)(v0 + 240);
    v33 = *(_QWORD *)(v0 + 224);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 304) + 96))(v30, *(_QWORD *)(v0 + 296));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32))(v31, v30, v33);
    v34 = (_QWORD *)swift_task_alloc(dword_1004BB6D4);
    *(_QWORD *)(v0 + 336) = v34;
    *v34 = v0;
    v34[1] = sub_100093EAC;
    return MusicMovie.shareURL.getter(*(_QWORD *)(v0 + 16));
  }
  if (v4 == enum case for GenericMusicItem.musicVideo(_:))
  {
    v35 = *(_QWORD *)(v0 + 312);
    v37 = *(_QWORD *)(v0 + 208);
    v36 = *(_QWORD *)(v0 + 216);
    v38 = *(_QWORD *)(v0 + 200);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 304) + 96))(v35, *(_QWORD *)(v0 + 296));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(v36, v35, v38);
    v39 = (_QWORD *)swift_task_alloc(dword_1004BB704);
    *(_QWORD *)(v0 + 344) = v39;
    *v39 = v0;
    v39[1] = sub_100093FE8;
    return MusicVideo.shareURL.getter(*(_QWORD *)(v0 + 16));
  }
  if (v4 == enum case for GenericMusicItem.playlist(_:))
  {
    v40 = *(_QWORD *)(v0 + 312);
    v42 = *(_QWORD *)(v0 + 184);
    v41 = *(_QWORD *)(v0 + 192);
    v43 = *(_QWORD *)(v0 + 176);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 304) + 96))(v40, *(_QWORD *)(v0 + 296));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))(v41, v40, v43);
    v44 = (_QWORD *)swift_task_alloc(dword_1004BB724);
    *(_QWORD *)(v0 + 352) = v44;
    *v44 = v0;
    v44[1] = sub_100094124;
    return Playlist.shareURL.getter(*(_QWORD *)(v0 + 16));
  }
  if (v4 == enum case for GenericMusicItem.radioShow(_:)
    || v4 == enum case for GenericMusicItem.recordLabel(_:)
    || v4 == enum case for GenericMusicItem.socialProfile(_:))
  {
    goto LABEL_16;
  }
  if (v4 == enum case for GenericMusicItem.song(_:))
  {
    v45 = *(_QWORD *)(v0 + 312);
    v47 = *(_QWORD *)(v0 + 160);
    v46 = *(_QWORD *)(v0 + 168);
    v48 = *(_QWORD *)(v0 + 152);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 304) + 96))(v45, *(_QWORD *)(v0 + 296));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 32))(v46, v45, v48);
    v49 = (_QWORD *)swift_task_alloc(dword_1004BB75C);
    *(_QWORD *)(v0 + 360) = v49;
    *v49 = v0;
    v49[1] = sub_100094260;
    return Song.shareURL.getter(*(_QWORD *)(v0 + 16));
  }
  if (v4 == enum case for GenericMusicItem.station(_:))
  {
LABEL_16:
    v20 = *(_QWORD *)(v0 + 16);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 304) + 8))(*(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 296));
    GenericMusicItem.url.getter(v20);
    goto LABEL_17;
  }
  if (v4 == enum case for GenericMusicItem.tvEpisode(_:))
  {
    v50 = *(_QWORD *)(v0 + 312);
    v52 = *(_QWORD *)(v0 + 136);
    v51 = *(_QWORD *)(v0 + 144);
    v53 = *(_QWORD *)(v0 + 128);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 304) + 96))(v50, *(_QWORD *)(v0 + 296));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v51, v50, v53);
    v54 = (_QWORD *)swift_task_alloc(dword_1004BB7C4);
    *(_QWORD *)(v0 + 368) = v54;
    *v54 = v0;
    v54[1] = sub_10009439C;
    return TVEpisode.shareURL.getter(*(_QWORD *)(v0 + 16));
  }
  else if (v4 == enum case for GenericMusicItem.tvSeason(_:))
  {
    v55 = *(_QWORD *)(v0 + 312);
    v57 = *(_QWORD *)(v0 + 112);
    v56 = *(_QWORD *)(v0 + 120);
    v58 = *(_QWORD *)(v0 + 104);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 304) + 96))(v55, *(_QWORD *)(v0 + 296));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 32))(v56, v55, v58);
    v59 = (_QWORD *)swift_task_alloc(dword_1004BB7F4);
    *(_QWORD *)(v0 + 376) = v59;
    *v59 = v0;
    v59[1] = sub_1000944D8;
    return TVSeason.shareURL.getter(*(_QWORD *)(v0 + 16));
  }
  else if (v4 == enum case for GenericMusicItem.tvShow(_:))
  {
    v60 = *(_QWORD *)(v0 + 312);
    v62 = *(_QWORD *)(v0 + 88);
    v61 = *(_QWORD *)(v0 + 96);
    v63 = *(_QWORD *)(v0 + 80);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 304) + 96))(v60, *(_QWORD *)(v0 + 296));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 32))(v61, v60, v63);
    v64 = (_QWORD *)swift_task_alloc(dword_1004BB824);
    *(_QWORD *)(v0 + 384) = v64;
    *v64 = v0;
    v64[1] = sub_100094614;
    return TVShow.shareURL.getter(*(_QWORD *)(v0 + 16));
  }
  else if (v4 == enum case for GenericMusicItem.uploadedAudio(_:))
  {
    v65 = *(_QWORD *)(v0 + 312);
    v67 = *(_QWORD *)(v0 + 64);
    v66 = *(_QWORD *)(v0 + 72);
    v68 = *(_QWORD *)(v0 + 56);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 304) + 96))(v65, *(_QWORD *)(v0 + 296));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 32))(v66, v65, v68);
    v69 = (_QWORD *)swift_task_alloc(dword_1004BB854);
    *(_QWORD *)(v0 + 392) = v69;
    *v69 = v0;
    v69[1] = sub_100094750;
    return UploadedAudio.shareURL.getter(*(_QWORD *)(v0 + 16));
  }
  else
  {
    if (v4 != enum case for GenericMusicItem.uploadedVideo(_:))
    {
      if (v4 != enum case for GenericMusicItem.other(_:))
      {
        v76 = *(_QWORD *)(v0 + 304);
        v75 = *(_QWORD *)(v0 + 312);
        v77 = *(_QWORD *)(v0 + 296);
        GenericMusicItem.url.getter(*(_QWORD *)(v0 + 16));
        (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v75, v77);
        goto LABEL_17;
      }
      goto LABEL_7;
    }
    v70 = *(_QWORD *)(v0 + 312);
    v72 = *(_QWORD *)(v0 + 40);
    v71 = *(_QWORD *)(v0 + 48);
    v73 = *(_QWORD *)(v0 + 32);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 304) + 96))(v70, *(_QWORD *)(v0 + 296));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 32))(v71, v70, v73);
    v74 = (_QWORD *)swift_task_alloc(dword_1004BB884);
    *(_QWORD *)(v0 + 400) = v74;
    *v74 = v0;
    v74[1] = sub_10009488C;
    return UploadedVideo.shareURL.getter(*(_QWORD *)(v0 + 16));
  }
}

uint64_t sub_100093C34()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 320));
  return swift_task_switch(sub_100093C88, 0, 0);
}

uint64_t sub_100093C88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 8))(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 272));
  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 96);
  v11 = *(_QWORD *)(v0 + 72);
  v12 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 312));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100093D70()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 328));
  return swift_task_switch(sub_100093DC4, 0, 0);
}

uint64_t sub_100093DC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 256) + 8))(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 248));
  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 96);
  v11 = *(_QWORD *)(v0 + 72);
  v12 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 312));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100093EAC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 336));
  return swift_task_switch(sub_100093F00, 0, 0);
}

uint64_t sub_100093F00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 232) + 8))(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 224));
  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 96);
  v11 = *(_QWORD *)(v0 + 72);
  v12 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 312));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100093FE8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 344));
  return swift_task_switch(sub_10009403C, 0, 0);
}

uint64_t sub_10009403C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 208) + 8))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 200));
  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 96);
  v11 = *(_QWORD *)(v0 + 72);
  v12 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 312));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100094124()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 352));
  return swift_task_switch(sub_100094178, 0, 0);
}

uint64_t sub_100094178()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176));
  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 96);
  v11 = *(_QWORD *)(v0 + 72);
  v12 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 312));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100094260()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 360));
  return swift_task_switch(sub_1000942B4, 0, 0);
}

uint64_t sub_1000942B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 152));
  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 96);
  v11 = *(_QWORD *)(v0 + 72);
  v12 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 312));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009439C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 368));
  return swift_task_switch(sub_1000943F0, 0, 0);
}

uint64_t sub_1000943F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 128));
  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 96);
  v11 = *(_QWORD *)(v0 + 72);
  v12 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 312));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000944D8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 376));
  return swift_task_switch(sub_10009452C, 0, 0);
}

uint64_t sub_10009452C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 96);
  v11 = *(_QWORD *)(v0 + 72);
  v12 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 312));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100094614()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 384));
  return swift_task_switch(sub_100094668, 0, 0);
}

uint64_t sub_100094668()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 96);
  v11 = *(_QWORD *)(v0 + 72);
  v12 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 312));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100094750()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 392));
  return swift_task_switch(sub_1000947A4, 0, 0);
}

uint64_t sub_1000947A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 96);
  v11 = *(_QWORD *)(v0 + 72);
  v12 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 312));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009488C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 400));
  return swift_task_switch(sub_1000948E0, 0, 0);
}

uint64_t sub_1000948E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 8))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 32));
  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 96);
  v11 = *(_QWORD *)(v0 + 72);
  v12 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 312));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t GenericMusicItem.actionTitle.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  int v39;
  uint64_t v40;
  id v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  id v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  id v55;
  char *v56;
  char *v57;
  uint64_t v58;
  id v59;
  char *v60;
  unsigned int v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int16 v68;
  unint64_t v69;
  char *v70;
  char *v71;
  const char *v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  id v77;
  char *v78;
  uint64_t v79;
  id v80;
  char *v81;
  uint64_t v82;
  id v83;
  char *v84;
  uint64_t v85;
  id v86;
  char *v87;
  uint64_t v88;
  id v89;
  char *v90;
  uint64_t v91;
  id v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;

  v97 = type metadata accessor for UploadedVideo(0);
  v96 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v95 = (char *)&v94 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for UploadedAudio(0);
  v99 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v98 = (char *)&v94 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = type metadata accessor for TVShow(0);
  v102 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v101 = (char *)&v94 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = type metadata accessor for TVSeason(0);
  v108 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v107 = (char *)&v94 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = type metadata accessor for TVEpisode(0);
  v105 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106);
  v104 = (char *)&v94 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = type metadata accessor for Station(0);
  v111 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v110 = (char *)&v94 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for Song(0);
  v114 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v113 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = type metadata accessor for SocialProfile(0);
  v117 = *(_QWORD *)(v118 - 8);
  __chkstk_darwin(v118);
  v116 = (char *)&v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = type metadata accessor for RecordLabel(0);
  v120 = *(_QWORD *)(v121 - 8);
  __chkstk_darwin(v121);
  v119 = (char *)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = type metadata accessor for RadioShow(0);
  v123 = *(_QWORD *)(v124 - 8);
  __chkstk_darwin(v124);
  v122 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = type metadata accessor for Playlist(0);
  v126 = *(_QWORD *)(v127 - 8);
  __chkstk_darwin(v127);
  v125 = (char *)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = type metadata accessor for MusicVideo(0);
  v129 = *(_QWORD *)(v130 - 8);
  __chkstk_darwin(v130);
  v128 = (char *)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for MusicMovie(0);
  v132 = *(_QWORD *)(v12 - 8);
  v133 = v12;
  __chkstk_darwin(v12);
  v131 = (char *)&v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Genre(0);
  v135 = *(_QWORD *)(v14 - 8);
  v136 = v14;
  __chkstk_darwin(v14);
  v134 = (char *)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Curator(0);
  v138 = *(_QWORD *)(v16 - 8);
  v139 = v16;
  __chkstk_darwin(v16);
  v137 = (char *)&v94 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Composer(0);
  v141 = *(_QWORD *)(v18 - 8);
  v142 = v18;
  __chkstk_darwin(v18);
  v140 = (char *)&v94 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Artist(0);
  v144 = *(_QWORD *)(v20 - 8);
  v145 = v20;
  __chkstk_darwin(v20);
  v143 = (char *)&v94 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Locale(0);
  __chkstk_darwin(v22);
  v147 = (char *)&v94 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for String.LocalizationValue(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = __chkstk_darwin(v24);
  v28 = (char *)&v94 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v30 = (char *)&v94 - v29;
  v31 = type metadata accessor for Album(0);
  v32 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v34 = (char *)&v94 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for GenericMusicItem(0);
  v36 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v38 = (char *)&v94 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v38, v146, v35);
  v39 = (*(uint64_t (**)(char *, uint64_t))(v36 + 88))(v38, v35);
  if (v39 == enum case for GenericMusicItem.album(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v34, v38, v31);
    String.LocalizationValue.init(stringLiteral:)(0x6C41206572616853, 0xAE00A680E26D7562);
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v28, v30, v24);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v40 = qword_1004F4630;
    v41 = (id)qword_1004F4630;
    v42 = v147;
    static Locale.current.getter(v41);
    v43 = String.init(localized:table:bundle:locale:comment:)(v28, 0, 0, v40, v42, 0, 0, 256);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v30, v24);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v31);
    return v43;
  }
  if (v39 == enum case for GenericMusicItem.artist(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    v45 = v143;
    v44 = v144;
    v46 = v145;
    (*(void (**)(char *, char *, uint64_t))(v144 + 32))(v143, v38, v145);
    v47 = 0x7241206572616853;
    v48 = 0xAFA680E274736974;
LABEL_7:
    String.LocalizationValue.init(stringLiteral:)(v47, v48);
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v28, v30, v24);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v49 = qword_1004F4630;
    v50 = (id)qword_1004F4630;
    v51 = v147;
    static Locale.current.getter(v50);
    v43 = String.init(localized:table:bundle:locale:comment:)(v28, 0, 0, v49, v51, 0, 0, 256);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v30, v24);
LABEL_18:
    (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v46);
    return v43;
  }
  if (v39 == enum case for GenericMusicItem.composer(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    v45 = v140;
    v44 = v141;
    v46 = v142;
    (*(void (**)(char *, char *, uint64_t))(v141 + 32))(v140, v38, v142);
    v52 = v30;
    String.LocalizationValue.init(stringLiteral:)(0x1000000000000011, 0x80000001003A8080);
    v53 = v28;
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v28, v30, v24);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v54 = qword_1004F4630;
    v55 = (id)qword_1004F4630;
    v56 = v147;
    static Locale.current.getter(v55);
    v43 = String.init(localized:table:bundle:locale:comment:)(v53, 0, 0, v54, v56, 0, 0, 256);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v52, v24);
    goto LABEL_18;
  }
  if (v39 == enum case for GenericMusicItem.curator(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    v45 = v137;
    v44 = v138;
    v46 = v139;
    (*(void (**)(char *, char *, uint64_t))(v138 + 32))(v137, v38, v139);
    v57 = v30;
    String.LocalizationValue.init(stringLiteral:)(0x1000000000000010, 0x80000001003A80C0);
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v28, v30, v24);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v58 = qword_1004F4630;
    v59 = (id)qword_1004F4630;
    v60 = v147;
    static Locale.current.getter(v59);
    v43 = String.init(localized:table:bundle:locale:comment:)(v28, 0, 0, v58, v60, 0, 0, 256);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v57, v24);
    goto LABEL_18;
  }
  if (v39 == enum case for GenericMusicItem.genre(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    v45 = v134;
    v44 = v135;
    v46 = v136;
    (*(void (**)(char *, char *, uint64_t))(v135 + 32))(v134, v38, v136);
    v48 = 0xAE00A680E265726ELL;
    v47 = 0x6547206572616853;
    goto LABEL_7;
  }
  if (v39 == enum case for GenericMusicItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    v45 = v131;
    v44 = v132;
    v46 = v133;
    (*(void (**)(char *, char *, uint64_t))(v132 + 32))(v131, v38, v133);
    v47 = 0x6F4D206572616853;
    v62 = -496670346;
LABEL_26:
    v48 = v62 | 0xAE00A68000000000;
    goto LABEL_7;
  }
  if (v39 == enum case for GenericMusicItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    v44 = v129;
    v45 = v128;
    v46 = v130;
    (*(void (**)(char *, char *, uint64_t))(v129 + 32))(v128, v38, v130);
    v47 = 0x6956206572616853;
    v62 = -496016028;
    goto LABEL_26;
  }
  if (v39 == enum case for GenericMusicItem.playlist(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    v44 = v126;
    v45 = v125;
    v46 = v127;
    (*(void (**)(char *, char *, uint64_t))(v126 + 32))(v125, v38, v127);
    v47 = 0x1000000000000011;
    v48 = 0x80000001003A8160;
    goto LABEL_7;
  }
  if (v39 == enum case for GenericMusicItem.radioShow(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    v63 = v123;
    v64 = v122;
    v65 = v38;
    v66 = v124;
    (*(void (**)(char *, char *, uint64_t))(v123 + 32))(v122, v65, v124);
    v67 = 0x6853206572616853;
    v68 = 30575;
LABEL_31:
    v69 = v68 | 0xAD0000A680E20000;
LABEL_43:
    String.LocalizationValue.init(stringLiteral:)(v67, v69);
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v28, v30, v24);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v76 = qword_1004F4630;
    v77 = (id)qword_1004F4630;
    v78 = v147;
    static Locale.current.getter(v77);
    v43 = String.init(localized:table:bundle:locale:comment:)(v28, 0, 0, v76, v78, 0, 0, 256);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v30, v24);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v66);
    return v43;
  }
  if (v39 == enum case for GenericMusicItem.recordLabel(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    v63 = v120;
    v64 = v119;
    v70 = v38;
    v66 = v121;
    (*(void (**)(char *, char *, uint64_t))(v120 + 32))(v119, v70, v121);
    v67 = 0x1000000000000015;
    v69 = 0x80000001003A81C0;
    goto LABEL_43;
  }
  if (v39 == enum case for GenericMusicItem.socialProfile(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    v63 = v117;
    v64 = v116;
    v71 = v38;
    v66 = v118;
    (*(void (**)(char *, char *, uint64_t))(v117 + 32))(v116, v71, v118);
    v72 = "Share Profile…";
LABEL_42:
    v69 = (unint64_t)(v72 - 32) | 0x8000000000000000;
    v67 = 0x1000000000000010;
    goto LABEL_43;
  }
  if (v39 == enum case for GenericMusicItem.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    v63 = v114;
    v64 = v113;
    v73 = v38;
    v66 = v115;
    (*(void (**)(char *, char *, uint64_t))(v114 + 32))(v113, v73, v115);
    v67 = 0x6F53206572616853;
    v68 = 26478;
    goto LABEL_31;
  }
  if (v39 == enum case for GenericMusicItem.station(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    v63 = v111;
    v64 = v110;
    v74 = v38;
    v66 = v112;
    (*(void (**)(char *, char *, uint64_t))(v111 + 32))(v110, v74, v112);
    v72 = "Share Station…";
    goto LABEL_42;
  }
  if (v39 == enum case for GenericMusicItem.tvEpisode(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    v63 = v105;
    v64 = v104;
    v75 = v38;
    v66 = v106;
    (*(void (**)(char *, char *, uint64_t))(v105 + 32))(v104, v75, v106);
    v72 = "Share Episode…";
    goto LABEL_42;
  }
  if (v39 == enum case for GenericMusicItem.tvSeason(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    (*(void (**)(char *, char *, uint64_t))(v108 + 32))(v107, v38, v109);
    String.LocalizationValue.init(stringLiteral:)(0x6553206572616853, 0xAFA680E26E6F7361);
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v28, v30, v24);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v79 = qword_1004F4630;
    v80 = (id)qword_1004F4630;
    v81 = v147;
    static Locale.current.getter(v80);
    v43 = String.init(localized:table:bundle:locale:comment:)(v28, 0, 0, v79, v81, 0, 0, 256);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v30, v24);
    (*(void (**)(char *, uint64_t))(v108 + 8))(v107, v109);
  }
  else if (v39 == enum case for GenericMusicItem.tvShow(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    (*(void (**)(char *, char *, uint64_t))(v102 + 32))(v101, v38, v103);
    String.LocalizationValue.init(stringLiteral:)(0x6853206572616853, 0xAD0000A680E2776FLL);
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v28, v30, v24);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v82 = qword_1004F4630;
    v83 = (id)qword_1004F4630;
    v84 = v147;
    static Locale.current.getter(v83);
    v43 = String.init(localized:table:bundle:locale:comment:)(v28, 0, 0, v82, v84, 0, 0, 256);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v30, v24);
    (*(void (**)(char *, uint64_t))(v102 + 8))(v101, v103);
  }
  else if (v39 == enum case for GenericMusicItem.uploadedAudio(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v98, v38, v100);
    String.LocalizationValue.init(stringLiteral:)(0xA680E26572616853, 0xA800000000000000);
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v28, v30, v24);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v85 = qword_1004F4630;
    v86 = (id)qword_1004F4630;
    v87 = v147;
    static Locale.current.getter(v86);
    v43 = String.init(localized:table:bundle:locale:comment:)(v28, 0, 0, v85, v87, 0, 0, 256);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v30, v24);
    (*(void (**)(char *, uint64_t))(v99 + 8))(v98, v100);
  }
  else if (v39 == enum case for GenericMusicItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    (*(void (**)(char *, char *, uint64_t))(v96 + 32))(v95, v38, v97);
    String.LocalizationValue.init(stringLiteral:)(0x6956206572616853, 0xAE00A680E26F6564);
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v28, v30, v24);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v88 = qword_1004F4630;
    v89 = (id)qword_1004F4630;
    v90 = v147;
    static Locale.current.getter(v89);
    v43 = String.init(localized:table:bundle:locale:comment:)(v28, 0, 0, v88, v90, 0, 0, 256);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v30, v24);
    (*(void (**)(char *, uint64_t))(v96 + 8))(v95, v97);
  }
  else
  {
    String.LocalizationValue.init(stringLiteral:)(0xA680E26572616853, 0xA800000000000000);
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v28, v30, v24);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v91 = qword_1004F4630;
    v92 = (id)qword_1004F4630;
    v93 = v147;
    static Locale.current.getter(v92);
    v43 = String.init(localized:table:bundle:locale:comment:)(v28, 0, 0, v91, v93, 0, 0, 256);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v30, v24);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v35);
  }
  return v43;
}

uint64_t GenericMusicItem.failureMessage.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  int v39;
  uint64_t v40;
  id v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  const char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  id v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  id v56;
  char *v57;
  const char *v59;
  uint64_t v60;
  id v61;
  char *v62;
  uint64_t v63;
  id v64;
  char *v65;
  uint64_t v66;
  id v67;
  char *v68;
  uint64_t v69;
  id v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;

  v75 = type metadata accessor for UploadedVideo(0);
  v74 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v73 = (char *)&v72 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for UploadedAudio(0);
  v77 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v76 = (char *)&v72 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for TVShow(0);
  v80 = *(_QWORD *)(v81 - 8);
  __chkstk_darwin(v81);
  v79 = (char *)&v72 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for TVSeason(0);
  v86 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v85 = (char *)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = type metadata accessor for TVEpisode(0);
  v83 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v82 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for Station(0);
  v89 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v88 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = type metadata accessor for Song(0);
  v92 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v91 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for SocialProfile(0);
  v95 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v94 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for RecordLabel(0);
  v98 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v97 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for RadioShow(0);
  v101 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v100 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = type metadata accessor for Playlist(0);
  v104 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105);
  v103 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for MusicVideo(0);
  v107 = *(_QWORD *)(v108 - 8);
  __chkstk_darwin(v108);
  v106 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for MusicMovie(0);
  v110 = *(_QWORD *)(v12 - 8);
  v111 = v12;
  __chkstk_darwin(v12);
  v109 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Genre(0);
  v113 = *(_QWORD *)(v14 - 8);
  v114 = v14;
  __chkstk_darwin(v14);
  v112 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Curator(0);
  v116 = *(_QWORD *)(v16 - 8);
  v117 = v16;
  __chkstk_darwin(v16);
  v115 = (char *)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Composer(0);
  v119 = *(_QWORD *)(v18 - 8);
  v120 = v18;
  __chkstk_darwin(v18);
  v118 = (char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Artist(0);
  v122 = *(_QWORD *)(v20 - 8);
  v123 = v20;
  __chkstk_darwin(v20);
  v121 = (char *)&v72 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Locale(0);
  __chkstk_darwin(v22);
  v124 = (char *)&v72 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for String.LocalizationValue(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = __chkstk_darwin(v24);
  v28 = (char *)&v72 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v30 = (char *)&v72 - v29;
  v31 = type metadata accessor for Album(0);
  v32 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v34 = (char *)&v72 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for GenericMusicItem(0);
  v36 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v38 = (char *)&v72 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v38, v125, v35);
  v39 = (*(uint64_t (**)(char *, uint64_t))(v36 + 88))(v38, v35);
  if (v39 == enum case for GenericMusicItem.album(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v34, v38, v31);
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000001BLL, 0x80000001003A8040);
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v28, v30, v24);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v40 = qword_1004F4630;
    v41 = (id)qword_1004F4630;
    v42 = v124;
    static Locale.current.getter(v41);
    v43 = String.init(localized:table:bundle:locale:comment:)(v28, 0, 0, v40, v42, 0, 0, 256);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v30, v24);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v31);
    return v43;
  }
  if (v39 == enum case for GenericMusicItem.artist(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    v45 = v121;
    v44 = v122;
    v46 = v123;
    (*(void (**)(char *, char *, uint64_t))(v122 + 32))(v121, v38, v123);
    v47 = 0xD00000000000001CLL;
    v48 = "Unable to share this artist.";
LABEL_13:
    v54 = (unint64_t)(v48 - 32) | 0x8000000000000000;
LABEL_14:
    String.LocalizationValue.init(stringLiteral:)(v47, v54);
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v28, v30, v24);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v55 = qword_1004F4630;
    v56 = (id)qword_1004F4630;
    v57 = v124;
    static Locale.current.getter(v56);
    v43 = String.init(localized:table:bundle:locale:comment:)(v28, 0, 0, v55, v57, 0, 0, 256);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v30, v24);
LABEL_17:
    (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v46);
    return v43;
  }
  if (v39 == enum case for GenericMusicItem.composer(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    v45 = v118;
    v44 = v119;
    v46 = v120;
    (*(void (**)(char *, char *, uint64_t))(v119 + 32))(v118, v38, v120);
    v49 = v30;
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ELL, 0x80000001003A80A0);
    v50 = v28;
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v28, v30, v24);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v51 = qword_1004F4630;
    v52 = (id)qword_1004F4630;
    v53 = v124;
    static Locale.current.getter(v52);
    v43 = String.init(localized:table:bundle:locale:comment:)(v50, 0, 0, v51, v53, 0, 0, 256);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v49, v24);
    goto LABEL_17;
  }
  if (v39 == enum case for GenericMusicItem.curator(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    v45 = v115;
    v44 = v116;
    v46 = v117;
    (*(void (**)(char *, char *, uint64_t))(v116 + 32))(v115, v38, v117);
    v47 = 0xD00000000000001DLL;
    v48 = "Unable to share this curator.";
    goto LABEL_13;
  }
  if (v39 == enum case for GenericMusicItem.genre(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    v45 = v112;
    v44 = v113;
    v46 = v114;
    (*(void (**)(char *, char *, uint64_t))(v113 + 32))(v112, v38, v114);
    v59 = "Unable to share this genre.";
LABEL_25:
    v54 = (unint64_t)(v59 - 32) | 0x8000000000000000;
    v47 = 0xD00000000000001BLL;
    goto LABEL_14;
  }
  if (v39 == enum case for GenericMusicItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    v45 = v109;
    v44 = v110;
    v46 = v111;
    (*(void (**)(char *, char *, uint64_t))(v110 + 32))(v109, v38, v111);
    v59 = "Unable to share this movie.";
    goto LABEL_25;
  }
  if (v39 == enum case for GenericMusicItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    v44 = v107;
    v45 = v106;
    v46 = v108;
    (*(void (**)(char *, char *, uint64_t))(v107 + 32))(v106, v38, v108);
    v59 = "Unable to share this video.";
    goto LABEL_25;
  }
  if (v39 == enum case for GenericMusicItem.playlist(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    v44 = v104;
    v45 = v103;
    v46 = v105;
    (*(void (**)(char *, char *, uint64_t))(v104 + 32))(v103, v38, v105);
    v47 = 0xD00000000000001ELL;
    v48 = "Unable to share this playlist.";
    goto LABEL_13;
  }
  if (v39 == enum case for GenericMusicItem.radioShow(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    v44 = v101;
    v45 = v100;
    v46 = v102;
    (*(void (**)(char *, char *, uint64_t))(v101 + 32))(v100, v38, v102);
    v47 = 0xD00000000000001ALL;
    v48 = "Unable to share this show.";
    goto LABEL_13;
  }
  if (v39 == enum case for GenericMusicItem.recordLabel(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    v44 = v98;
    v45 = v97;
    v46 = v99;
    (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v97, v38, v99);
    v47 = 0xD000000000000022;
    v48 = "Unable to share this record label.";
    goto LABEL_13;
  }
  if (v39 == enum case for GenericMusicItem.socialProfile(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    v44 = v95;
    v45 = v94;
    v46 = v96;
    (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v94, v38, v96);
    v47 = 0xD00000000000001DLL;
    v48 = "Unable to share this profile.";
    goto LABEL_13;
  }
  if (v39 == enum case for GenericMusicItem.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    v44 = v92;
    v45 = v91;
    v46 = v93;
    (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v91, v38, v93);
    v47 = 0xD00000000000001ALL;
    v48 = "Unable to share this song.";
    goto LABEL_13;
  }
  if (v39 == enum case for GenericMusicItem.station(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    v44 = v89;
    v45 = v88;
    v46 = v90;
    (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v88, v38, v90);
    v47 = 0xD00000000000001DLL;
    v48 = "Unable to share this station.";
    goto LABEL_13;
  }
  if (v39 == enum case for GenericMusicItem.tvEpisode(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    v44 = v83;
    v45 = v82;
    v46 = v84;
    (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v82, v38, v84);
    v47 = 0xD00000000000001DLL;
    v48 = "Unable to share this episode.";
    goto LABEL_13;
  }
  if (v39 == enum case for GenericMusicItem.tvSeason(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    (*(void (**)(char *, char *, uint64_t))(v86 + 32))(v85, v38, v87);
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000001CLL, 0x80000001003A82F0);
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v28, v30, v24);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v60 = qword_1004F4630;
    v61 = (id)qword_1004F4630;
    v62 = v124;
    static Locale.current.getter(v61);
    v43 = String.init(localized:table:bundle:locale:comment:)(v28, 0, 0, v60, v62, 0, 0, 256);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v30, v24);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v85, v87);
  }
  else if (v39 == enum case for GenericMusicItem.tvShow(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v79, v38, v81);
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ALL, 0x80000001003A81A0);
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v28, v30, v24);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v63 = qword_1004F4630;
    v64 = (id)qword_1004F4630;
    v65 = v124;
    static Locale.current.getter(v64);
    v43 = String.init(localized:table:bundle:locale:comment:)(v28, 0, 0, v63, v65, 0, 0, 256);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v30, v24);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v79, v81);
  }
  else if (v39 == enum case for GenericMusicItem.uploadedAudio(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    (*(void (**)(char *, char *, uint64_t))(v77 + 32))(v76, v38, v78);
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ALL, 0x80000001003A8020);
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v28, v30, v24);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v66 = qword_1004F4630;
    v67 = (id)qword_1004F4630;
    v68 = v124;
    static Locale.current.getter(v67);
    v43 = String.init(localized:table:bundle:locale:comment:)(v28, 0, 0, v66, v68, 0, 0, 256);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v30, v24);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v76, v78);
  }
  else if (v39 == enum case for GenericMusicItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
    (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v73, v38, v75);
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000001BLL, 0x80000001003A8140);
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v28, v30, v24);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v69 = qword_1004F4630;
    v70 = (id)qword_1004F4630;
    v71 = v124;
    static Locale.current.getter(v70);
    v43 = String.init(localized:table:bundle:locale:comment:)(v28, 0, 0, v69, v71, 0, 0, 256);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v30, v24);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v73, v75);
  }
  else
  {
    v43 = GenericMusicItem.failureMessage.getter();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v35);
  }
  return v43;
}

uint64_t sub_100096FE4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1004BB8B4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10002E8E0;
  return GenericMusicItem.shareURL.getter(a1);
}

uint64_t sub_10009703C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_1000057B4(&qword_1004B99B0);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100097098, 0, 0);
}

uint64_t sub_100097098()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 40) = **(_QWORD **)(v0 + 16);
  v1 = (_QWORD *)swift_task_alloc(dword_1004BB8B4);
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_1000970F0;
  return GenericMusicItem.shareURL.getter(*(_QWORD *)(v0 + 32));
}

uint64_t sub_1000970F0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  return swift_task_switch(sub_100097144, 0, 0);
}

uint64_t sub_100097144()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSURL *v4;
  void *v5;
  void *v6;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v5 = 0;
  }
  else
  {
    URL._bridgeToObjectiveC()(v4);
    v5 = v6;
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
    v1 = *(_QWORD *)(v0 + 32);
  }
  objc_msgSend(*(id *)(v0 + 40), "setOriginalURL:", v5);

  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000971E8()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10004FD4C(v0, qword_1004BB610);
  sub_100039D34(v0, (uint64_t)qword_1004BB610);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001003A7200, 0x676E6972616853, 0xE700000000000000);
}

uint64_t sub_10009725C(uint64_t (*a1)(void))
{
  uint64_t v1;

  v1 = a1();
  return _swift_stdlib_bridgeErrorToNSError(v1);
}

void sub_10009727C(_QWORD **a1, _QWORD **a2, uint64_t a3, uint64_t (*a4)(void))
{
  void *v6;
  _QWORD *v7;
  _QWORD *v8;

  v6 = (void *)a4();
  v7 = *a1;
  *v7 = v6;
  *a1 = v7 + 1;
  v8 = *a2;
  if (*a2)
  {
    *v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {

  }
}

size_t sub_1000972D8(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_1000973D4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

char *sub_1000972F4(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_100097550(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_100097310(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_100097644(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_10009732C(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_100097760(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_100097348(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_100097894(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_100097364(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_100097994(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_100097380(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_100097AB4(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_10009739C(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_100097BAC(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

size_t sub_1000973B8(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_100097CA4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

size_t sub_1000973D4(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_1000057B4(&qword_1004B99B8);
  v11 = *(_QWORD *)(sub_1000057B4(&qword_1004B99B0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_29;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  v17 = sub_1000057B4(&qword_1004B99B0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v20 = (char *)v15 + v19;
  v21 = (char *)a4 + v19;
  if ((v5 & 1) != 0)
  {
    if (v15 < a4 || v20 >= &v21[*(_QWORD *)(v18 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v20, v21, v8, v17);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v20);
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v20);
  }
  swift_release(a4);
  return (size_t)v15;
}

char *sub_100097550(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  int64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000057B4(&qword_1004BAC38);
    v11 = (char *)swift_allocObject(v10, 2 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 31;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = v13 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[2 * v8])
      memmove(v14, v15, 2 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 2 * v8);
  }
  swift_release(a4);
  return v11;
}

char *sub_100097644(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000057B4(&qword_1004BF6E0);
    v11 = (char *)swift_allocObject(v10, 56 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 56);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[56 * v8])
      memmove(v13, v14, 56 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v13);
  }
  swift_release(a4);
  return v11;
}

_QWORD *sub_100097760(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000057B4((uint64_t *)&unk_1004C0590);
    v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[5 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_1000057B4(&qword_1004BF5C0);
    swift_arrayInitWithCopy(v11 + 4);
  }
  swift_release(a4);
  return v11;
}

char *sub_100097894(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000057B4((uint64_t *)&unk_1004BDBA0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14);
  }
  swift_release(a4);
  return v11;
}

_QWORD *sub_100097994(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000057B4(&qword_1004BACC8);
    v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 3);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[v8 + 4])
      memmove(v11 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_1000057B4(&qword_1004BA5F8);
    swift_arrayInitWithCopy(v11 + 4);
  }
  swift_release(a4);
  return v11;
}

char *sub_100097AB4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000057B4(&qword_1004BAC30);
    v11 = (char *)swift_allocObject(v10, 4 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 29;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 2);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[4 * v8])
      memmove(v14, v15, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 4 * v8);
  }
  swift_release(a4);
  return v11;
}

char *sub_100097BAC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000057B4(&qword_1004BAC80);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 32 * v8);
  }
  swift_release(a4);
  return v11;
}

size_t sub_100097CA4(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_1000057B4(&qword_1004BAC28);
  v11 = *(_QWORD *)(type metadata accessor for SharePlayTogetherSession.Participant(0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_29;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  v17 = type metadata accessor for SharePlayTogetherSession.Participant(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v20 = (char *)v15 + v19;
  v21 = (char *)a4 + v19;
  if ((v5 & 1) != 0)
  {
    if (v15 < a4 || v20 >= &v21[*(_QWORD *)(v18 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v20, v21, v8, v17);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v20);
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v20);
  }
  swift_release(a4);
  return (size_t)v15;
}

uint64_t sub_100097E18@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, __n128);
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  __int128 v35[2];
  __int128 v36[2];
  __int128 v37[2];
  _QWORD v38[3];
  uint64_t v39;
  uint64_t v40;

  v33 = a4;
  v34 = a3;
  v10 = sub_1000057B4(&qword_1004B9D88);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = __chkstk_darwin(v10);
  v14 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v32 - v15;
  sub_1000444A8((uint64_t)a1, (uint64_t)v38);
  sub_1000444A8((uint64_t)a3, (uint64_t)v37);
  sub_1000444A8((uint64_t)a1, (uint64_t)v36);
  v17 = swift_allocObject(&unk_10046EA80, 96, 7);
  sub_100033620(v37, v17 + 16);
  sub_100033620(v36, v17 + 56);
  sub_10000FEB4(a4, (uint64_t)v16, &qword_1004B9D88);
  sub_1000444A8((uint64_t)v38, (uint64_t)v35);
  v18 = swift_allocObject(&unk_10046EAA8, 64, 7);
  *(_QWORD *)(v18 + 16) = a2;
  sub_100033620(v35, v18 + 24);
  v19 = (_QWORD *)swift_allocObject(&unk_10046EAD0, 48, 7);
  v19[2] = sub_1000989B0;
  v19[3] = v18;
  v19[4] = &unk_1004BBAC0;
  v19[5] = v17;
  sub_10000FEB4((uint64_t)v16, (uint64_t)v14, &qword_1004B9D88);
  sub_1000444A8((uint64_t)v38, (uint64_t)v35);
  v20 = *(unsigned __int8 *)(v11 + 80);
  v21 = (v20 + 16) & ~v20;
  v22 = (v12 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = swift_allocObject(&unk_10046EAF8, v22 + 40, v20 | 7);
  sub_10002F244((uint64_t)v14, v23 + v21);
  sub_100033620(v35, v23 + v22);
  v24 = v39;
  v25 = v40;
  sub_1000096A0(v38, v39);
  v26 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v25 + 32);
  v27 = swift_retain(v18);
  v28 = v26(v24, v25, v27);
  v30 = v29;
  sub_10000FE2C((uint64_t)v16, &qword_1004B9D88);
  sub_10000970C(v38);
  sub_10000FE2C(v33, &qword_1004B9D88);
  sub_10000970C(v34);
  result = sub_10000970C(a1);
  *a5 = sub_1000989B0;
  a5[1] = v18;
  a5[2] = &unk_1004BBAC8;
  a5[3] = v19;
  a5[4] = &unk_1004BBAD0;
  a5[5] = v23;
  a5[6] = v28;
  a5[7] = v30;
  return result;
}

uint64_t sub_100098098()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1000980C0()
{
  uint64_t v0;

  return sub_100085908(*(_QWORD *)(v0 + 16), (_QWORD *)(v0 + 24));
}

uint64_t sub_1000980D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v5 = v0[4];
  v4 = v0[5];
  v6 = (_QWORD *)swift_task_alloc(dword_1004BB63C);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_10002F6EC;
  return sub_100086BB8(v2, v3, v5, v4);
}

uint64_t sub_100098138()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(sub_1000057B4(&qword_1004B9D88) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v0 + v3;
  v5 = v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)swift_task_alloc(dword_1004BB64C);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_10002F6EC;
  return sub_100086DB0(v4, v5);
}

uint64_t sub_1000981C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(sub_1000057B4(&qword_1004B9D88) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v0 + v3;
  v5 = v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)swift_task_alloc(dword_1004BB66C);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_10002E8E0;
  return sub_100087260(v4, v5);
}

uint64_t sub_100098244@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10008D3A0(a1, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of AlbumFilter.id.getter, a2);
}

uint64_t sub_100098250@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10008D3A0(a1, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of ArtistFilter.id.getter, a2);
}

uint64_t sub_10009825C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10008D3A0(a1, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of MusicMovieFilter.id.getter, a2);
}

uint64_t sub_100098268@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10008D3A0(a1, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of MusicVideoFilter.id.getter, a2);
}

uint64_t sub_100098274@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10008D3A0(a1, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of PlaylistFilter.id.getter, a2);
}

uint64_t sub_100098280@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10008D3A0(a1, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of SongFilter.id.getter, a2);
}

uint64_t sub_10009828C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10008D3A0(a1, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of StationFilter.id.getter, a2);
}

uint64_t sub_100098298@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10008D3A0(a1, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of TVEpisodeFilter.id.getter, a2);
}

uint64_t sub_1000982A4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10008D3A0(a1, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of TVSeasonFilter.id.getter, a2);
}

uint64_t sub_1000982B0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10008D3A0(a1, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of TVShowFilter.id.getter, a2);
}

uint64_t sub_1000982BC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10008D3A0(a1, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of UploadedAudioFilter.id.getter, a2);
}

uint64_t sub_1000982C8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10008D3A0(a1, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of UploadedVideoFilter.id.getter, a2);
}

uint64_t sub_1000982D4(uint64_t a1)
{
  uint64_t result;

  result = sub_100004D8C(&qword_1004BB948, (uint64_t (*)(uint64_t))&type metadata accessor for Composer, (uint64_t)&protocol conformance descriptor for Composer);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100098310(uint64_t a1)
{
  uint64_t result;

  result = sub_100004D8C(&qword_1004BB080, (uint64_t (*)(uint64_t))&type metadata accessor for EditorialItem, (uint64_t)&protocol conformance descriptor for EditorialItem);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10009834C(uint64_t a1)
{
  uint64_t result;

  result = sub_100004D8C(&qword_1004BB088, (uint64_t (*)(uint64_t))&type metadata accessor for MusicMovie, (uint64_t)&protocol conformance descriptor for MusicMovie);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100098388(uint64_t a1)
{
  uint64_t result;

  result = sub_100004D8C(&qword_1004BB9E0, (uint64_t (*)(uint64_t))&type metadata accessor for SocialProfile, (uint64_t)&protocol conformance descriptor for SocialProfile);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000983C4(uint64_t a1)
{
  uint64_t result;

  result = sub_100004D8C(&qword_1004BB090, (uint64_t (*)(uint64_t))&type metadata accessor for TVEpisode, (uint64_t)&protocol conformance descriptor for TVEpisode);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100098400(uint64_t a1)
{
  uint64_t result;

  result = sub_100004D8C(&qword_1004BB098, (uint64_t (*)(uint64_t))&type metadata accessor for TVSeason, (uint64_t)&protocol conformance descriptor for TVSeason);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10009843C(uint64_t a1)
{
  uint64_t result;

  result = sub_100004D8C(&qword_1004BB0A0, (uint64_t (*)(uint64_t))&type metadata accessor for TVShow, (uint64_t)&protocol conformance descriptor for TVShow);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100098478(uint64_t a1)
{
  uint64_t result;

  result = sub_100004D8C(&qword_1004BBA58, (uint64_t (*)(uint64_t))&type metadata accessor for UploadedAudio, (uint64_t)&protocol conformance descriptor for UploadedAudio);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000984B4(uint64_t a1)
{
  uint64_t result;

  result = sub_100004D8C(&qword_1004BB0A8, (uint64_t (*)(uint64_t))&type metadata accessor for UploadedVideo, (uint64_t)&protocol conformance descriptor for UploadedVideo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000984F0(uint64_t a1)
{
  uint64_t result;

  result = sub_100004D8C((unint64_t *)&unk_1004BF730, (uint64_t (*)(uint64_t))&type metadata accessor for GenericMusicItem, (uint64_t)&protocol conformance descriptor for GenericMusicItem);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for Actions.Share()
{
  return &type metadata for Actions.Share;
}

uint64_t _s5ShareO7ContextVwxx(_QWORD *a1)
{
  swift_release(a1[1]);
  swift_release(a1[3]);
  swift_release(a1[5]);
  return swift_bridgeObjectRelease(a1[7]);
}

uint64_t _s5ShareO7ContextVwcp(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 8) = v3;
  v8 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v8;
  v5 = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v4;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v6;
  swift_retain(v3);
  swift_retain(v8);
  swift_retain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

_QWORD *_s5ShareO7ContextVwca(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_retain(v8);
  swift_release(v9);
  a1[6] = a2[6];
  v10 = a2[7];
  v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t _s5ShareO7ContextVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  v5 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release(v5);
  v6 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release(v6);
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease(v8);
  return a1;
}

ValueMetadata *type metadata accessor for Actions.Share.Context()
{
  return &type metadata for Actions.Share.Context;
}

ValueMetadata *type metadata accessor for Actions.ShareLyrics()
{
  return &type metadata for Actions.ShareLyrics;
}

ValueMetadata *type metadata accessor for Actions.ShareLyrics.Context()
{
  return &type metadata for Actions.ShareLyrics.Context;
}

uint64_t sub_10009871C()
{
  uint64_t v0;

  sub_10000970C((_QWORD *)(v0 + 16));
  sub_10000970C((_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_100098748()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_1004BBABC);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10002F6EC;
  return sub_1000855D4(v0 + 16, v0 + 56);
}

uint64_t sub_1000987A0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  sub_10000970C((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000987D0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100098800()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  unint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;

  v1 = *(_QWORD *)(sub_1000057B4(&qword_1004B9D88) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = v0 + v3;
  v6 = (int *)type metadata accessor for Actions.MetricsReportingContext(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v6 - 1) + 48))(v0 + v3, 1, v6))
  {
    v7 = *(_QWORD *)(v5 + 8);
    if (v7 >= 0xA)
      swift_bridgeObjectRelease(v7);
    v8 = v5 + v6[5];
    v9 = (int *)type metadata accessor for MetricsEvent.Page(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v9 - 1) + 48))(v8, 1, v9))
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
      v10 = v8 + v9[6];
      v11 = type metadata accessor for URL(0);
      v15 = *(_QWORD *)(v11 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v10, 1, v11))
        (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v10, v11);
      swift_bridgeObjectRelease(*(_QWORD *)(v8 + v9[7]));
      swift_bridgeObjectRelease(*(_QWORD *)(v8 + v9[8] + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v8 + v9[10] + 8));
    }
    swift_bridgeObjectRelease(*(_QWORD *)(v5 + v6[6] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v5 + v6[7]));
    swift_bridgeObjectRelease(*(_QWORD *)(v5 + v6[8]));
  }
  v12 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = v12 + 40;
  sub_10000970C((_QWORD *)(v0 + v12));
  return swift_deallocObject(v0, v13, v2 | 7);
}

void Actions.Favorite.Context.init<A>(item:library:alertPresenter:noticePresenting:presentationSource:metricsReportingContext:onFinish:)(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t (**a9)()@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)();
  uint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t (*v31)();
  char *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)();
  uint64_t v41;
  uint64_t v42;
  uint64_t (**v43)();
  uint64_t (*v44)();
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  __int128 *v54;
  uint64_t (*v55)();
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (**v59)();
  uint64_t v60;

  v56 = a7;
  v57 = a8;
  v58 = a6;
  v59 = a9;
  v53 = a5;
  v54 = a3;
  v51 = a4;
  v60 = a2;
  v12 = *(_QWORD *)(a10 - 8);
  v13 = __chkstk_darwin(a1);
  v52 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v46 = (char *)&v45 - v16;
  v18 = v17;
  v50 = v17;
  __chkstk_darwin(v15);
  v20 = (char *)&v45 - v19;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v47 = a1;
  v21((char *)&v45 - v19, a1, a10);
  v49 = *(unsigned __int8 *)(v12 + 80);
  v22 = (v49 + 40) & ~v49;
  v23 = v22 + v18;
  v24 = v49 | 7;
  v25 = (uint64_t (*)())swift_allocObject(&unk_10046EB48, v23, v49 | 7);
  v55 = v25;
  *((_QWORD *)v25 + 2) = a10;
  *((_QWORD *)v25 + 3) = a11;
  v48 = a11;
  v26 = v60;
  *((_QWORD *)v25 + 4) = v60;
  v45 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v45((char *)v25 + v22, v20, a10);
  v27 = v46;
  v21(v46, a1, a10);
  v28 = (v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  v29 = (v28 + 47) & 0xFFFFFFFFFFFFFFF8;
  v30 = (v29 + 79) & 0xFFFFFFFFFFFFFFF8;
  v31 = (uint64_t (*)())swift_allocObject(&unk_10046EB70, v30 + 40, v24);
  *((_QWORD *)v31 + 2) = a10;
  *((_QWORD *)v31 + 3) = a11;
  *((_QWORD *)v31 + 4) = v26;
  v32 = (char *)v31 + v22;
  v33 = (void (*)(char *, uint64_t, uint64_t))v45;
  v45(v32, v27, a10);
  sub_10000FD10(v51, (uint64_t)v31 + v28, &qword_1004B9DF8);
  sub_10000FD10(v53, (uint64_t)v31 + v29, &qword_1004B9DF0);
  sub_100033620(v54, (uint64_t)v31 + v30);
  v34 = v52;
  v33(v52, v47, a10);
  v35 = (void (*)(char *, char *, uint64_t))v33;
  v36 = *(_QWORD *)(sub_1000057B4(&qword_1004B9D88) - 8);
  v37 = *(unsigned __int8 *)(v36 + 80);
  v38 = (v37 + 48) & ~v37;
  v39 = (*(_QWORD *)(v36 + 64) + v49 + v38) & ~v49;
  v40 = (uint64_t (*)())swift_allocObject(&unk_10046EB98, v39 + v50, v24 | v37);
  v41 = v48;
  *((_QWORD *)v40 + 2) = a10;
  *((_QWORD *)v40 + 3) = v41;
  v42 = v57;
  *((_QWORD *)v40 + 4) = v56;
  *((_QWORD *)v40 + 5) = v42;
  sub_10000FD10(v58, (uint64_t)v40 + v38, &qword_1004B9D88);
  v35((char *)v40 + v39, v34, a10);
  swift_retain(v60);
  v43 = v59;
  v44 = v55;
  *v59 = sub_10009956C;
  v43[1] = v44;
  v43[2] = (uint64_t (*)())&unk_1004BBAE0;
  v43[3] = v31;
  v43[4] = (uint64_t (*)())&unk_1004BBAF0;
  v43[5] = v40;
}

uint64_t static Actions.Favorite.action(context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10007A490(a1, 10, (uint64_t)sub_10007B69C, (uint64_t)&unk_1004BBAF8, (uint64_t)&unk_1004BBB00, a2);
}

void Actions.UndoFavorite.Context.init<A>(item:library:alertPresenter:noticePresenting:presentationSource:metricsReportingContext:onFinish:)(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t (**a9)()@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)();
  uint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t (*v31)();
  char *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)();
  uint64_t v41;
  uint64_t v42;
  uint64_t (**v43)();
  uint64_t (*v44)();
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  __int128 *v54;
  uint64_t (*v55)();
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (**v59)();
  uint64_t v60;

  v56 = a7;
  v57 = a8;
  v58 = a6;
  v59 = a9;
  v53 = a5;
  v54 = a3;
  v51 = a4;
  v60 = a2;
  v12 = *(_QWORD *)(a10 - 8);
  v13 = __chkstk_darwin(a1);
  v52 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v46 = (char *)&v45 - v16;
  v18 = v17;
  v50 = v17;
  __chkstk_darwin(v15);
  v20 = (char *)&v45 - v19;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v47 = a1;
  v21((char *)&v45 - v19, a1, a10);
  v49 = *(unsigned __int8 *)(v12 + 80);
  v22 = (v49 + 40) & ~v49;
  v23 = v22 + v18;
  v24 = v49 | 7;
  v25 = (uint64_t (*)())swift_allocObject(&unk_10046EBC0, v23, v49 | 7);
  v55 = v25;
  *((_QWORD *)v25 + 2) = a10;
  *((_QWORD *)v25 + 3) = a11;
  v48 = a11;
  v26 = v60;
  *((_QWORD *)v25 + 4) = v60;
  v45 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v45((char *)v25 + v22, v20, a10);
  v27 = v46;
  v21(v46, a1, a10);
  v28 = (v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  v29 = (v28 + 47) & 0xFFFFFFFFFFFFFFF8;
  v30 = (v29 + 79) & 0xFFFFFFFFFFFFFFF8;
  v31 = (uint64_t (*)())swift_allocObject(&unk_10046EBE8, v30 + 40, v24);
  *((_QWORD *)v31 + 2) = a10;
  *((_QWORD *)v31 + 3) = a11;
  *((_QWORD *)v31 + 4) = v26;
  v32 = (char *)v31 + v22;
  v33 = (void (*)(char *, uint64_t, uint64_t))v45;
  v45(v32, v27, a10);
  sub_10000FD10(v51, (uint64_t)v31 + v28, &qword_1004B9DF8);
  sub_10000FD10(v53, (uint64_t)v31 + v29, &qword_1004B9DF0);
  sub_100033620(v54, (uint64_t)v31 + v30);
  v34 = v52;
  v33(v52, v47, a10);
  v35 = (void (*)(char *, char *, uint64_t))v33;
  v36 = *(_QWORD *)(sub_1000057B4(&qword_1004B9D88) - 8);
  v37 = *(unsigned __int8 *)(v36 + 80);
  v38 = (v37 + 48) & ~v37;
  v39 = (*(_QWORD *)(v36 + 64) + v49 + v38) & ~v49;
  v40 = (uint64_t (*)())swift_allocObject(&unk_10046EC10, v39 + v50, v24 | v37);
  v41 = v48;
  *((_QWORD *)v40 + 2) = a10;
  *((_QWORD *)v40 + 3) = v41;
  v42 = v57;
  *((_QWORD *)v40 + 4) = v56;
  *((_QWORD *)v40 + 5) = v42;
  sub_10000FD10(v58, (uint64_t)v40 + v38, &qword_1004B9D88);
  v35((char *)v40 + v39, v34, a10);
  swift_retain(v60);
  v43 = v59;
  v44 = v55;
  *v59 = sub_10009AF44;
  v43[1] = v44;
  v43[2] = (uint64_t (*)())&unk_1004BBB10;
  v43[3] = v31;
  v43[4] = (uint64_t (*)())&unk_1004BBB20;
  v43[5] = v40;
}

uint64_t static Actions.UndoFavorite.action(context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10007A490(a1, 55, (uint64_t)sub_10007B69C, (uint64_t)&unk_1004BBB28, (uint64_t)&unk_1004BBB30, a2);
}

void Actions.SuggestLess.Context.init<A>(item:library:noticePresenting:metricsReportingContext:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (**a7)()@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)();
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t (*v26)();
  char *v27;
  void (*v28)(char *, uint64_t, uint64_t);
  char *v29;
  void (*v30)(uint64_t, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (**v36)();
  uint64_t (*v37)();
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  uint64_t v40;
  uint64_t (*v41)();
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (**v45)();
  uint64_t v46;
  uint64_t v47;

  v43 = a3;
  v44 = a4;
  v46 = a1;
  v47 = a2;
  v45 = a7;
  v9 = *(_QWORD *)(a5 - 8);
  v10 = __chkstk_darwin(a1);
  v42 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v39 = (char *)&v38 - v13;
  v40 = v14;
  v15 = v14;
  __chkstk_darwin(v12);
  v17 = (char *)&v38 - v16;
  v18 = *(void (**)(char *))(v9 + 16);
  v18((char *)&v38 - v16);
  v19 = *(unsigned __int8 *)(v9 + 80);
  v20 = (v19 + 40) & ~v19;
  v21 = v20 + v15;
  v22 = (uint64_t (*)())swift_allocObject(&unk_10046EC38, v21, v19 | 7);
  v41 = v22;
  *((_QWORD *)v22 + 2) = a5;
  *((_QWORD *)v22 + 3) = a6;
  v23 = v47;
  *((_QWORD *)v22 + 4) = v47;
  v38 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v38((char *)v22 + v20, v17, a5);
  v24 = v39;
  ((void (*)(char *, uint64_t, uint64_t))v18)(v39, v46, a5);
  v25 = (v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = (uint64_t (*)())swift_allocObject(&unk_10046EC60, v25 + 40, v19 | 7);
  *((_QWORD *)v26 + 2) = a5;
  *((_QWORD *)v26 + 3) = a6;
  *((_QWORD *)v26 + 4) = v23;
  v27 = (char *)v26 + v20;
  v28 = (void (*)(char *, uint64_t, uint64_t))v38;
  v38(v27, v24, a5);
  sub_10000FD10(v43, (uint64_t)v26 + v25, &qword_1004B9DF8);
  v29 = v42;
  v28(v42, v46, a5);
  v30 = (void (*)(uint64_t, char *, uint64_t))v28;
  v31 = *(_QWORD *)(sub_1000057B4(&qword_1004B9D88) - 8);
  v32 = *(unsigned __int8 *)(v31 + 80);
  v33 = (v32 + 32) & ~v32;
  v34 = (*(_QWORD *)(v31 + 64) + v19 + v33) & ~v19;
  v35 = swift_allocObject(&unk_10046EC88, v34 + v40, v19 | 7 | v32);
  *(_QWORD *)(v35 + 16) = a5;
  *(_QWORD *)(v35 + 24) = a6;
  sub_10000FD10(v44, v35 + v33, &qword_1004B9D88);
  v30(v35 + v34, v29, a5);
  swift_retain(v47);
  v36 = v45;
  v37 = v41;
  *v45 = sub_10009CBFC;
  v36[1] = v37;
  v36[2] = (uint64_t (*)())&unk_1004BBB40;
  v36[3] = v26;
  v36[4] = (uint64_t (*)())&unk_1004BBB50;
  v36[5] = (uint64_t (*)())v35;
}

uint64_t static Actions.SuggestLess.action(context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10007A490(a1, 54, (uint64_t)sub_10002F788, (uint64_t)&unk_1004BBB58, (uint64_t)&unk_1004BBB60, a2);
}

void Actions.UndoSuggestLess.Context.init<A>(item:library:noticePresenting:metricsReportingContext:)(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t (**a6)()@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)();
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  uint64_t (*v28)();
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (**v35)();
  uint64_t (*v36)();
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t (*v42)();
  char *v43;
  uint64_t v44;
  uint64_t (**v45)();
  uint64_t v46;

  v44 = a3;
  v45 = a6;
  v46 = a2;
  v39 = a1;
  v9 = *(_QWORD *)(a4 - 8);
  v10 = __chkstk_darwin(a1);
  v43 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v37 - v13;
  v16 = v15;
  v41 = v15;
  __chkstk_darwin(v12);
  v18 = (char *)&v37 - v17;
  sub_10000FE2C(v19, &qword_1004B9DF8);
  v40 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v40(v18, (uint64_t)a1, a4);
  v20 = *(unsigned __int8 *)(v9 + 80);
  v21 = (v20 + 40) & ~v20;
  v22 = v21 + v16;
  v38 = v21 + v16;
  v23 = v20 | 7;
  v24 = (uint64_t (*)())swift_allocObject(&unk_10046ECB0, v22, v20 | 7);
  v42 = v24;
  *((_QWORD *)v24 + 2) = a4;
  *((_QWORD *)v24 + 3) = a5;
  v25 = v46;
  *((_QWORD *)v24 + 4) = v46;
  v26 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v26((char *)v24 + v21, v18, a4);
  v27 = v39;
  v40(v14, (uint64_t)v39, a4);
  v28 = (uint64_t (*)())swift_allocObject(&unk_10046ECD8, v38, v20 | 7);
  *((_QWORD *)v28 + 2) = a4;
  *((_QWORD *)v28 + 3) = a5;
  *((_QWORD *)v28 + 4) = v25;
  v26((char *)v28 + v21, v14, a4);
  v29 = v43;
  v26(v43, v27, a4);
  v30 = *(_QWORD *)(sub_1000057B4(&qword_1004B9D88) - 8);
  v31 = *(unsigned __int8 *)(v30 + 80);
  v32 = (v31 + 32) & ~v31;
  v33 = (*(_QWORD *)(v30 + 64) + v20 + v32) & ~v20;
  v34 = swift_allocObject(&unk_10046ED00, v33 + v41, v23 | v31);
  *(_QWORD *)(v34 + 16) = a4;
  *(_QWORD *)(v34 + 24) = a5;
  sub_10000FD10(v44, v34 + v32, &qword_1004B9D88);
  v26((char *)(v34 + v33), v29, a4);
  swift_retain(v46);
  v35 = v45;
  v36 = v42;
  *v45 = sub_10009D930;
  v35[1] = v36;
  v35[2] = (uint64_t (*)())&unk_1004BBB70;
  v35[3] = v28;
  v35[4] = (uint64_t (*)())&unk_1004BBB80;
  v35[5] = (uint64_t (*)())v34;
}

uint64_t static Actions.UndoSuggestLess.action(context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10007A490(a1, 56, (uint64_t)sub_10007B69C, (uint64_t)&unk_1004BBB88, (uint64_t)&unk_1004BBB90, a2);
}

uint64_t sub_100099400@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10007A524(a1, 10, (uint64_t)sub_10007B69C, (uint64_t)&unk_1004BBAF8, (uint64_t)&unk_1004BBB00, a2);
}

uint64_t sub_100099420@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10007A524(a1, 55, (uint64_t)sub_10007B69C, (uint64_t)&unk_1004BBB28, (uint64_t)&unk_1004BBB30, a2);
}

uint64_t sub_100099440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v7 = type metadata accessor for MusicLibrary.FavoriteAction(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000057B4(&qword_1004BBC70);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static MusicLibraryAction<>.favorite.getter(v13);
  MusicLibrary.supportedStatus<A, B>(for:action:)(a2, v10, a3, v7, *(_QWORD *)(a4 + 8), &protocol witness table for MusicLibrary.FavoriteAction);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v16 = sub_100099578();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  return v16;
}

uint64_t sub_10009956C()
{
  return sub_10009D93C((uint64_t (*)(_QWORD, uint64_t))sub_100099440);
}

uint64_t sub_100099578()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t);
  int v19;
  void (*v20)(char *, char *, uint64_t);
  int v21;
  char *v22;
  unint64_t v23;
  Swift::String v24;
  void *object;
  char *v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  Swift::String v40;
  void *v41;
  void (*v42)(char *, uint64_t);
  char *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;

  v1 = v0;
  v2 = type metadata accessor for MusicLibrary.FavoriteAction.UnsupportedReason(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v43 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v43 - v7;
  __chkstk_darwin(v6);
  v10 = (char *)&v43 - v9;
  v11 = sub_1000057B4(&qword_1004BBC70);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v43 - v16;
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v18((char *)&v43 - v16, v1, v11);
  v19 = (*(uint64_t (**)(char *, uint64_t))(v12 + 88))(v17, v11);
  if (v19 != enum case for MusicLibrary.SupportedStatus.unsupported<A>(_:))
  {
    if (v19 != enum case for MusicLibrary.SupportedStatus.supported<A>(_:))
    {
      v44 = 0;
      v45 = 0xE000000000000000;
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease(v45);
      v44 = 0xD000000000000019;
      v45 = 0x80000001003A8390;
      v18(v15, v1, v11);
      v24._countAndFlagsBits = String.init<A>(describing:)(v15, v11);
      object = v24._object;
      String.append(_:)(v24);
      swift_bridgeObjectRelease(object);
      v23 = v44;
      (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
      return v23;
    }
    return 0;
  }
  (*(void (**)(char *, uint64_t))(v12 + 96))(v17, v11);
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v10, v17, v2);
  v20 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v20(v8, v10, v2);
  v21 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v8, v2);
  if (v21 == enum case for MusicLibrary.FavoriteAction.UnsupportedReason.unsupportedType(_:))
  {
LABEL_3:
    v22 = v10;
    v23 = 0xD000000000000010;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v22, v2);
    return v23;
  }
  if (v21 == enum case for MusicLibrary.FavoriteAction.UnsupportedReason.alreadyFavorited(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
    return 0xD000000000000011;
  }
  if (v21 == enum case for MusicLibrary.FavoriteAction.UnsupportedReason.cannotFavoriteWhenDisliked(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
    return 0xD00000000000001DLL;
  }
  if (v21 == enum case for MusicLibrary.FavoriteAction.UnsupportedReason.subscriptionRequired(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
    return 0xD000000000000018;
  }
  if (v21 == enum case for MusicLibrary.FavoriteAction.UnsupportedReason.cloudLibraryRequired(_:))
  {
    v27 = v10;
    if (qword_1004B8AF8 != -1)
      swift_once(&qword_1004B8AF8, sub_1000D365C);
    v28 = static ApplicationCapabilities.Controller.shared;
    KeyPath = swift_getKeyPath(&unk_1003CB108);
    v30 = swift_getKeyPath(&unk_1003CB130);
    static Published.subscript.getter(&v44, v28, KeyPath, v30);
    swift_release(KeyPath);
    swift_release(v30);
    v31 = v45;
    v32 = v46;
    v33 = v47;
    v34 = v48;
    v35 = v49;
    v36 = v50;
    v37 = v51;
    swift_bridgeObjectRelease(v52);
    swift_bridgeObjectRelease(v37);
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(v35);

    if ((v31 & 0x100) != 0)
      v23 = 0;
    else
      v23 = 0xD000000000000016;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v27, v2);
    return v23;
  }
  if (v21 == enum case for MusicLibrary.FavoriteAction.UnsupportedReason.explicitContentRestricted(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
    return 0;
  }
  if (v21 == enum case for MusicLibrary.FavoriteAction.UnsupportedReason.sharedLibrary(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
    return 0x6C20646572616853;
  }
  if (v21 == enum case for MusicLibrary.FavoriteAction.UnsupportedReason.cloudLibraryInitialImport(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
    return 0xD00000000000001CLL;
  }
  if (v21 == enum case for MusicLibrary.FavoriteAction.UnsupportedReason.libraryAddIneligibleContent(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
    return 0xD000000000000013;
  }
  if (v21 == enum case for MusicLibrary.FavoriteAction.UnsupportedReason.invalidContentType(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
    return 0xD000000000000014;
  }
  if (v21 == enum case for MusicLibrary.FavoriteAction.UnsupportedReason.networkRequired(_:))
    goto LABEL_3;
  if (v21 == enum case for MusicLibrary.FavoriteAction.UnsupportedReason.subscriptionAccountLinkingRequired(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
    return 0xD000000000000025;
  }
  else
  {
    v38 = v10;
    if (v21 == enum case for MusicLibrary.FavoriteAction.UnsupportedReason.unknown(_:))
    {
      v23 = 0x206E776F6E6B6E55;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v38, v2);
    }
    else
    {
      v44 = 0;
      v45 = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease(v45);
      v44 = 0x206E776F6E6B6E55;
      v45 = 0xEF206E6F73616572;
      v39 = v43;
      v20(v43, v38, v2);
      v40._countAndFlagsBits = String.init<A>(describing:)(v39, v2);
      v41 = v40._object;
      String.append(_:)(v40);
      swift_bridgeObjectRelease(v41);
      v23 = v44;
      v42 = *(void (**)(char *, uint64_t))(v3 + 8);
      v42(v38, v2);
      v42(v8, v2);
    }
  }
  return v23;
}

uint64_t sub_100099C34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v7[44] = a6;
  v7[45] = a7;
  v7[42] = a4;
  v7[43] = a5;
  v7[40] = a2;
  v7[41] = a3;
  v7[39] = a1;
  v8 = type metadata accessor for MusicLibrary.FavoriteAction.UnsupportedReason(0);
  v7[46] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[47] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[48] = swift_task_alloc(v10);
  v7[49] = swift_task_alloc(v10);
  v11 = type metadata accessor for Notice.Variant(0);
  v7[50] = v11;
  v7[51] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for MusicLibrary.FavoriteAction(0);
  v7[52] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v7[53] = v13;
  v7[54] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000057B4(&qword_1004BBC70);
  v7[55] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v7[56] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[57] = swift_task_alloc(v16);
  v7[58] = swift_task_alloc(v16);
  return swift_task_switch(sub_100099D38, 0, 0);
}

uint64_t sub_100099D38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v2 = *(_QWORD *)(v1 + 464);
  v3 = *(_QWORD *)(v1 + 440);
  v4 = *(_QWORD *)(v1 + 448);
  v5 = *(_QWORD *)(v1 + 432);
  v52 = *(_QWORD *)(v1 + 424);
  v53 = *(_QWORD *)(v1 + 456);
  v6 = *(_QWORD *)(v1 + 416);
  v8 = *(_QWORD *)(v1 + 352);
  v7 = *(_QWORD *)(v1 + 360);
  v9 = *(_QWORD *)(v1 + 320);
  static MusicLibraryAction<>.favorite.getter(a1);
  MusicLibrary.supportedStatus<A, B>(for:action:)(v9, v5, v8, v6, *(_QWORD *)(v7 + 8), &protocol witness table for MusicLibrary.FavoriteAction);
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v53, v2, v3);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 88))(v53, v3);
  if (v10 == enum case for MusicLibrary.SupportedStatus.unsupported<A>(_:))
  {
    v11 = *(_QWORD *)(v1 + 456);
    v13 = *(_QWORD *)(v1 + 384);
    v12 = *(_QWORD *)(v1 + 392);
    v14 = *(_QWORD *)(v1 + 368);
    v15 = *(_QWORD *)(v1 + 376);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 448) + 96))(v11, *(_QWORD *)(v1 + 440));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v12, v11, v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, v12, v14);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 88))(v13, v14);
    if (v16 == enum case for MusicLibrary.FavoriteAction.UnsupportedReason.cloudLibraryRequired(_:))
    {
      sub_10000FEB4(*(_QWORD *)(v1 + 336), v1 + 88, &qword_1004B9DF0);
      if (*(_QWORD *)(v1 + 144) != 1)
      {
        sub_100034A2C(v1 + 88, v1 + 16);
        v37 = type metadata accessor for MainActor(0);
        *(_QWORD *)(v1 + 568) = v37;
        *(_QWORD *)(v1 + 576) = static MainActor.shared.getter(v38);
        v39 = dispatch thunk of Actor.unownedExecutor.getter(v37, &protocol witness table for MainActor);
        v33 = v40;
        *(_QWORD *)(v1 + 584) = v39;
        *(_QWORD *)(v1 + 592) = v40;
        v24 = sub_10009A51C;
        v32 = v39;
        return swift_task_switch(v24, v32, v33);
      }
      v17 = *(_QWORD **)(v1 + 344);
      sub_10000FE2C(v1 + 88, &qword_1004B9DF0);
      v18 = v17[3];
      *(_QWORD *)(v1 + 528) = v18;
      *(_QWORD *)(v1 + 536) = v17[4];
      *(_QWORD *)(v1 + 544) = sub_1000096A0(v17, v18);
      v19 = type metadata accessor for MainActor(0);
      *(_QWORD *)(v1 + 552) = static MainActor.shared.getter(v20);
      v21 = dispatch thunk of Actor.unownedExecutor.getter(v19, &protocol witness table for MainActor);
      v23 = v22;
      v24 = sub_10009A438;
LABEL_9:
      v32 = v21;
      v33 = v23;
      return swift_task_switch(v24, v32, v33);
    }
    if (v16 == enum case for MusicLibrary.FavoriteAction.UnsupportedReason.explicitContentRestricted(_:))
    {
      v27 = *(_QWORD **)(v1 + 344);
      v28 = v27[3];
      *(_QWORD *)(v1 + 624) = v28;
      *(_QWORD *)(v1 + 632) = v27[4];
      *(_QWORD *)(v1 + 640) = sub_1000096A0(v27, v28);
      v29 = type metadata accessor for MainActor(0);
      *(_QWORD *)(v1 + 648) = static MainActor.shared.getter(v30);
      v21 = dispatch thunk of Actor.unownedExecutor.getter(v29, &protocol witness table for MainActor);
      v23 = v31;
      v24 = sub_10009A73C;
      goto LABEL_9;
    }
    v41 = *(_QWORD *)(v1 + 464);
    v42 = *(_QWORD *)(v1 + 440);
    v43 = *(_QWORD *)(v1 + 448);
    v44 = *(_QWORD *)(v1 + 384);
    v45 = *(_QWORD *)(v1 + 368);
    v46 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 376) + 8);
    v46(*(_QWORD *)(v1 + 392), v45);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v41, v42);
    v46(v44, v45);
  }
  else
  {
    if (v10 == enum case for MusicLibrary.SupportedStatus.supported<A>(_:))
    {
      v25 = (_QWORD *)swift_task_alloc(async function pointer to MusicLibrary.favorite<A>(_:)[1]);
      *(_QWORD *)(v1 + 472) = v25;
      *v25 = v1;
      v25[1] = sub_10009A104;
      return MusicLibrary.favorite<A>(_:)(*(_QWORD *)(v1 + 320), *(_QWORD *)(v1 + 352), *(_QWORD *)(v1 + 360));
    }
    v34 = *(_QWORD *)(v1 + 456);
    v35 = *(_QWORD *)(v1 + 440);
    v36 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 448) + 8);
    v36(*(_QWORD *)(v1 + 464), v35);
    v36(v34, v35);
  }
  v47 = *(_QWORD *)(v1 + 456);
  v48 = *(_QWORD *)(v1 + 432);
  v49 = *(_QWORD *)(v1 + 408);
  v51 = *(_QWORD *)(v1 + 384);
  v50 = *(_QWORD *)(v1 + 392);
  swift_task_dealloc(*(_QWORD *)(v1 + 464));
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10009A104()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 472);
  *(_QWORD *)(*(_QWORD *)v1 + 480) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10009A8C0;
  else
    v3 = sub_10009A168;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10009A168()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t (*v10)(uint64_t);

  sub_10000FEB4(v0[41], (uint64_t)(v0 + 34), &qword_1004B9DF8);
  v1 = v0[37];
  v0[61] = v1;
  if (v1)
  {
    v3 = v0[50];
    v2 = v0[51];
    v0[62] = v0[38];
    v0[63] = sub_1000096A0(v0 + 34, v1);
    swift_storeEnumTagMultiPayload(v2, v3, 9);
    v4 = type metadata accessor for MainActor(0);
    v0[64] = static MainActor.shared.getter(v5);
    v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
    return swift_task_switch(sub_10009A284, v6, v7);
  }
  else
  {
    sub_10000FE2C((uint64_t)(v0 + 34), &qword_1004B9DF8);
    v10 = (uint64_t (*)(uint64_t))((char *)&dword_1004C2AD0 + dword_1004C2AD0);
    v9 = (_QWORD *)swift_task_alloc(unk_1004C2AD4);
    v0[65] = v9;
    *v9 = v0;
    v9[1] = sub_10009A35C;
    return v10(v0[42]);
  }
}

uint64_t sub_10009A284()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v0[61];
  v1 = v0[62];
  v3 = v0[51];
  swift_release(v0[64]);
  sub_1000A4544(v3, 0, v2, v1);
  sub_100034960(v3, type metadata accessor for Notice.Variant);
  return swift_task_switch(sub_10009A2F4, 0, 0);
}

uint64_t sub_10009A2F4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t);

  sub_10000970C(v0 + 34);
  v3 = (uint64_t (*)(uint64_t))((char *)&dword_1004C2AD0 + dword_1004C2AD0);
  v1 = (_QWORD *)swift_task_alloc(unk_1004C2AD4);
  v0[65] = v1;
  *v1 = v0;
  v1[1] = sub_10009A35C;
  return v3(v0[42]);
}

uint64_t sub_10009A35C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 520));
  return swift_task_switch(sub_10009A3B0, 0, 0);
}

uint64_t sub_10009A3B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 448) + 8))(*(_QWORD *)(v0 + 464), *(_QWORD *)(v0 + 440));
  v1 = *(_QWORD *)(v0 + 456);
  v2 = *(_QWORD *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 408);
  v5 = *(_QWORD *)(v0 + 384);
  v4 = *(_QWORD *)(v0 + 392);
  swift_task_dealloc(*(_QWORD *)(v0 + 464));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009A438()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  int *v5;

  v1 = v0[67];
  swift_release(v0[69]);
  sub_1000FD26C(5, (uint64_t)(v0 + 27));
  v2 = *(int **)(v1 + 8);
  v5 = (int *)((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  v0[70] = v3;
  *v3 = v0;
  v3[1] = sub_10009A4BC;
  return ((uint64_t (*)(_QWORD *, _QWORD, _QWORD))v5)(v0 + 27, v0[66], v0[67]);
}

uint64_t sub_10009A4BC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(*(_QWORD *)v0 + 216);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 560));
  sub_10003499C(v1);
  return swift_task_switch(sub_10009E570, 0, 0);
}

uint64_t sub_10009A51C(__n128 a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = static MainActor.shared.getter(a1);
  v1[75] = v2;
  v3 = swift_task_alloc(48);
  v1[76] = v3;
  *(_BYTE *)(v3 + 16) = 5;
  *(_QWORD *)(v3 + 24) = v1 + 2;
  *(_QWORD *)(v3 + 32) = 0;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v1[77] = v4;
  *v4 = v1;
  v4[1] = sub_10009A5E0;
  return withCheckedContinuation<A>(isolation:function:_:)(v1 + 83, v2, &protocol witness table for MainActor, 0xD00000000000003DLL, 0x80000001003A7400, sub_10009E578, v3, &type metadata for Bool);
}

uint64_t sub_10009A5E0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 608);
  v3 = *(_QWORD *)(*v0 + 600);
  swift_task_dealloc(*(_QWORD *)(*v0 + 616));
  swift_release(v3);
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10009A650, *(_QWORD *)(v1 + 584), *(_QWORD *)(v1 + 592));
}

uint64_t sub_10009A650()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 576));
  return swift_task_switch(sub_10009A68C, 0, 0);
}

uint64_t sub_10009A68C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 464);
  v2 = *(_QWORD *)(v0 + 440);
  v3 = *(_QWORD *)(v0 + 448);
  v4 = *(_QWORD *)(v0 + 392);
  v5 = *(_QWORD *)(v0 + 368);
  v6 = *(_QWORD *)(v0 + 376);
  sub_100034A74(v0 + 16);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v7 = *(_QWORD *)(v0 + 456);
  v8 = *(_QWORD *)(v0 + 432);
  v9 = *(_QWORD *)(v0 + 408);
  v11 = *(_QWORD *)(v0 + 384);
  v10 = *(_QWORD *)(v0 + 392);
  swift_task_dealloc(*(_QWORD *)(v0 + 464));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009A73C()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  int *v5;

  v1 = v0[79];
  swift_release(v0[81]);
  sub_1000FD460(0, (uint64_t)(v0 + 20));
  v2 = *(int **)(v1 + 8);
  v5 = (int *)((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  v0[82] = v3;
  *v3 = v0;
  v3[1] = sub_10009A7C0;
  return ((uint64_t (*)(_QWORD *, _QWORD, _QWORD))v5)(v0 + 20, v0[78], v0[79]);
}

uint64_t sub_10009A7C0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(*(_QWORD *)v0 + 160);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 656));
  sub_10003499C(v1);
  return swift_task_switch(sub_10009A820, 0, 0);
}

uint64_t sub_10009A820()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 464);
  v2 = *(_QWORD *)(v0 + 440);
  v3 = *(_QWORD *)(v0 + 448);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 376) + 8))(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 368));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 456);
  v5 = *(_QWORD *)(v0 + 432);
  v6 = *(_QWORD *)(v0 + 408);
  v8 = *(_QWORD *)(v0 + 384);
  v7 = *(_QWORD *)(v0 + 392);
  swift_task_dealloc(*(_QWORD *)(v0 + 464));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009A8C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 456);
  v2 = *(_QWORD *)(v0 + 464);
  v3 = *(_QWORD *)(v0 + 432);
  v4 = *(_QWORD *)(v0 + 408);
  v6 = *(_QWORD *)(v0 + 384);
  v5 = *(_QWORD *)(v0 + 392);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 448) + 8))(v2, *(_QWORD *)(v0 + 440));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009A950()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v2 = v0[2];
  v3 = v0[3];
  v4 = *(_QWORD *)(v2 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 47) & 0xFFFFFFFFFFFFFFF8;
  v8 = v0[4];
  v9 = (uint64_t)v0 + v5;
  v10 = (uint64_t)v0 + v6;
  v11 = (uint64_t)v0 + v7;
  v12 = (uint64_t)v0 + ((v7 + 79) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)swift_task_alloc(dword_1004BBADC);
  *(_QWORD *)(v1 + 16) = v13;
  *v13 = v1;
  v13[1] = sub_10002F6EC;
  return sub_100099C34(v8, v9, v10, v11, v12, v2, v3);
}

uint64_t sub_10009AA10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6[13] = a5;
  v6[14] = a6;
  v6[11] = a3;
  v6[12] = a4;
  v6[9] = a1;
  v6[10] = a2;
  v7 = sub_1000057B4(&qword_1004B99B0);
  v6[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000057B4(&qword_1004B9D88);
  v6[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Actions.MetricsReportingContext(0);
  v6[17] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[18] = v10;
  v6[19] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10009AAC0, 0, 0);
}

uint64_t sub_10009AAC0()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(void (**)(uint64_t))(v0 + 72);
  if (v1)
    v1(10);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 128);
  sub_10000FEB4(*(_QWORD *)(v0 + 88), v4, &qword_1004B9D88);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) == 1)
  {
    sub_10000FE2C(*(_QWORD *)(v0 + 128), &qword_1004B9D88);
    v5 = *(_QWORD *)(v0 + 120);
    v6 = *(_QWORD *)(v0 + 128);
    swift_task_dealloc(*(_QWORD *)(v0 + 152));
    swift_task_dealloc(v6);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 120);
    v9 = *(_QWORD *)(v0 + 104);
    sub_10002F60C(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 152));
    *(_QWORD *)(v0 + 160) = MusicItem.metricsTargetIdentifier.getter(v9);
    *(_QWORD *)(v0 + 168) = v10;
    v11 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v8, 1, 1, v11);
    v12 = sub_1000057B4(&qword_1004B9DD0);
    inited = swift_initStackObject(v12, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_1003C64D0;
    *(_QWORD *)(inited + 32) = MusicItem.metricsContentType.getter(v9);
    *(_QWORD *)(inited + 40) = v14;
    *(_BYTE *)(inited + 48) = 0;
    *(_QWORD *)(v0 + 176) = sub_100053464(inited);
    *(_QWORD *)(v0 + 184) = v15;
    *(_QWORD *)(v0 + 192) = v16;
    *(_WORD *)(v0 + 208) = v17;
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), &type metadata for MetricsEvent.Click.ActionDetails.Key);
    v18 = type metadata accessor for MainActor(0);
    *(_QWORD *)(v0 + 200) = static MainActor.shared.getter(v19);
    v20 = dispatch thunk of Actor.unownedExecutor.getter(v18, &protocol witness table for MainActor);
    return swift_task_switch(sub_10009AC94, v20, v21);
  }
}

uint64_t sub_10009AC94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 192);
  v3 = *(void **)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 168);
  v6 = *(uint64_t **)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 120);
  v8 = *(unsigned __int16 *)(v0 + 208);
  swift_release(*(_QWORD *)(v0 + 200));
  sub_100053874(v5, v4, 5, 17, v7, v3, v2, v1, v8, v6);
  sub_10002F650(v3, v2, v1, v8, SBYTE1(v8));
  swift_bridgeObjectRelease(v4);
  sub_10000FE2C(v7, &qword_1004B99B0);
  return swift_task_switch(sub_10009E574, 0, 0);
}

uint64_t sub_10009AD68()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = v0[2];
  v3 = v0[3];
  v4 = *(_QWORD *)(sub_1000057B4(&qword_1004B9D88) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  v7 = v0[4];
  v8 = v0[5];
  v9 = (uint64_t)v0 + v5;
  v10 = (uint64_t)v0 + ((v5 + *(_QWORD *)(v4 + 64) + v6) & ~v6);
  v11 = (_QWORD *)swift_task_alloc(dword_1004BBAEC);
  *(_QWORD *)(v1 + 16) = v11;
  *v11 = v1;
  v11[1] = sub_10002F6EC;
  return sub_10009AA10(v7, v8, v9, v10, v2, v3);
}

uint64_t sub_10009AE18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v7 = type metadata accessor for MusicLibrary.UndoFavoriteAction(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000057B4(&qword_1004BBC68);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static MusicLibraryAction<>.undoFavorite.getter(v13);
  MusicLibrary.supportedStatus<A, B>(for:action:)(a2, v10, a3, v7, *(_QWORD *)(a4 + 8), &protocol witness table for MusicLibrary.UndoFavoriteAction);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v16 = sub_10009AF50();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  return v16;
}

uint64_t sub_10009AF44()
{
  return sub_10009D93C((uint64_t (*)(_QWORD, uint64_t))sub_10009AE18);
}

uint64_t sub_10009AF50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t);
  int v19;
  void (*v20)(char *, char *, uint64_t);
  int v21;
  unint64_t v22;
  Swift::String v23;
  void *object;
  char *v26;
  uint64_t v27;
  uint64_t KeyPath;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  Swift::String v39;
  void *v40;
  void (*v41)(char *, uint64_t);
  char *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;

  v1 = v0;
  v2 = type metadata accessor for MusicLibrary.UndoFavoriteAction.UnsupportedReason(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v42 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v42 - v7;
  __chkstk_darwin(v6);
  v10 = (char *)&v42 - v9;
  v11 = sub_1000057B4(&qword_1004BBC68);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v42 - v16;
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v18((char *)&v42 - v16, v1, v11);
  v19 = (*(uint64_t (**)(char *, uint64_t))(v12 + 88))(v17, v11);
  if (v19 != enum case for MusicLibrary.SupportedStatus.unsupported<A>(_:))
  {
    if (v19 != enum case for MusicLibrary.SupportedStatus.supported<A>(_:))
    {
      v43 = 0;
      v44 = 0xE000000000000000;
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease(v44);
      v43 = 0xD000000000000019;
      v44 = 0x80000001003A8390;
      v18(v15, v1, v11);
      v23._countAndFlagsBits = String.init<A>(describing:)(v15, v11);
      object = v23._object;
      String.append(_:)(v23);
      swift_bridgeObjectRelease(object);
      v22 = v43;
      (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
      return v22;
    }
    return 0;
  }
  (*(void (**)(char *, uint64_t))(v12 + 96))(v17, v11);
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v10, v17, v2);
  v20 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v20(v8, v10, v2);
  v21 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v8, v2);
  if (v21 == enum case for MusicLibrary.UndoFavoriteAction.UnsupportedReason.unsupportedType(_:))
  {
    v22 = 0xD000000000000010;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
    return v22;
  }
  if (v21 == enum case for MusicLibrary.UndoFavoriteAction.UnsupportedReason.notFavorited(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
    return 0x6F76614620746F4ELL;
  }
  if (v21 == enum case for MusicLibrary.UndoFavoriteAction.UnsupportedReason.subscriptionRequired(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
    return 0xD000000000000018;
  }
  if (v21 != enum case for MusicLibrary.UndoFavoriteAction.UnsupportedReason.cloudLibraryRequired(_:))
  {
    if (v21 != enum case for MusicLibrary.UndoFavoriteAction.UnsupportedReason.explicitContentRestricted(_:))
    {
      if (v21 == enum case for MusicLibrary.UndoFavoriteAction.UnsupportedReason.sharedLibrary(_:))
      {
        (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
        return 0x6C20646572616853;
      }
      else if (v21 == enum case for MusicLibrary.UndoFavoriteAction.UnsupportedReason.cloudLibraryInitialImport(_:))
      {
        (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
        return 0xD00000000000001CLL;
      }
      else if (v21 == enum case for MusicLibrary.UndoFavoriteAction.UnsupportedReason.libraryAddIneligibleContent(_:))
      {
        (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
        return 0xD000000000000013;
      }
      else if (v21 == enum case for MusicLibrary.UndoFavoriteAction.UnsupportedReason.invalidContentType(_:))
      {
        (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
        return 0xD000000000000014;
      }
      else if (v21 == enum case for MusicLibrary.UndoFavoriteAction.UnsupportedReason.subscriptionAccountLinkingRequired(_:))
      {
        (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
        return 0xD000000000000025;
      }
      else
      {
        v22 = 0x206E776F6E6B6E55;
        if (v21 == enum case for MusicLibrary.UndoFavoriteAction.UnsupportedReason.unknown(_:))
        {
          (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
        }
        else
        {
          v43 = 0;
          v44 = 0xE000000000000000;
          v37 = v10;
          _StringGuts.grow(_:)(17);
          swift_bridgeObjectRelease(v44);
          v43 = 0x206E776F6E6B6E55;
          v44 = 0xEF206E6F73616572;
          v38 = v42;
          v20(v42, v37, v2);
          v39._countAndFlagsBits = String.init<A>(describing:)(v38, v2);
          v40 = v39._object;
          String.append(_:)(v39);
          swift_bridgeObjectRelease(v40);
          v22 = v43;
          v41 = *(void (**)(char *, uint64_t))(v3 + 8);
          v41(v37, v2);
          v41(v8, v2);
        }
      }
      return v22;
    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
    return 0;
  }
  v26 = v10;
  if (qword_1004B8AF8 != -1)
    swift_once(&qword_1004B8AF8, sub_1000D365C);
  v27 = static ApplicationCapabilities.Controller.shared;
  KeyPath = swift_getKeyPath(&unk_1003CB108);
  v29 = swift_getKeyPath(&unk_1003CB130);
  static Published.subscript.getter(&v43, v27, KeyPath, v29);
  swift_release(KeyPath);
  swift_release(v29);
  v30 = v44;
  v31 = v45;
  v32 = v46;
  v33 = v47;
  v34 = v48;
  v35 = v49;
  v36 = v50;
  swift_bridgeObjectRelease(v51);
  swift_bridgeObjectRelease(v36);
  swift_bridgeObjectRelease(v32);
  swift_bridgeObjectRelease(v31);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease(v34);

  if ((v30 & 0x100) != 0)
    v22 = 0;
  else
    v22 = 0xD000000000000016;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v26, v2);
  return v22;
}

uint64_t sub_10009B590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v7[44] = a6;
  v7[45] = a7;
  v7[42] = a4;
  v7[43] = a5;
  v7[40] = a2;
  v7[41] = a3;
  v7[39] = a1;
  v8 = type metadata accessor for MusicLibrary.UndoFavoriteAction.UnsupportedReason(0);
  v7[46] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[47] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[48] = swift_task_alloc(v10);
  v7[49] = swift_task_alloc(v10);
  v11 = type metadata accessor for Notice.Variant(0);
  v7[50] = v11;
  v7[51] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for MusicLibrary.UndoFavoriteAction(0);
  v7[52] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v7[53] = v13;
  v7[54] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000057B4(&qword_1004BBC68);
  v7[55] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v7[56] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[57] = swift_task_alloc(v16);
  v7[58] = swift_task_alloc(v16);
  return swift_task_switch(sub_10009B694, 0, 0);
}

uint64_t sub_10009B694(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v2 = *(_QWORD *)(v1 + 464);
  v3 = *(_QWORD *)(v1 + 440);
  v4 = *(_QWORD *)(v1 + 448);
  v5 = *(_QWORD *)(v1 + 432);
  v52 = *(_QWORD *)(v1 + 424);
  v53 = *(_QWORD *)(v1 + 456);
  v6 = *(_QWORD *)(v1 + 416);
  v8 = *(_QWORD *)(v1 + 352);
  v7 = *(_QWORD *)(v1 + 360);
  v9 = *(_QWORD *)(v1 + 320);
  static MusicLibraryAction<>.undoFavorite.getter(a1);
  MusicLibrary.supportedStatus<A, B>(for:action:)(v9, v5, v8, v6, *(_QWORD *)(v7 + 8), &protocol witness table for MusicLibrary.UndoFavoriteAction);
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v53, v2, v3);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 88))(v53, v3);
  if (v10 == enum case for MusicLibrary.SupportedStatus.unsupported<A>(_:))
  {
    v11 = *(_QWORD *)(v1 + 456);
    v13 = *(_QWORD *)(v1 + 384);
    v12 = *(_QWORD *)(v1 + 392);
    v14 = *(_QWORD *)(v1 + 368);
    v15 = *(_QWORD *)(v1 + 376);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 448) + 96))(v11, *(_QWORD *)(v1 + 440));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v12, v11, v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, v12, v14);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 88))(v13, v14);
    if (v16 == enum case for MusicLibrary.UndoFavoriteAction.UnsupportedReason.cloudLibraryRequired(_:))
    {
      sub_10000FEB4(*(_QWORD *)(v1 + 336), v1 + 88, &qword_1004B9DF0);
      if (*(_QWORD *)(v1 + 144) != 1)
      {
        sub_100034A2C(v1 + 88, v1 + 16);
        v37 = type metadata accessor for MainActor(0);
        *(_QWORD *)(v1 + 560) = v37;
        *(_QWORD *)(v1 + 568) = static MainActor.shared.getter(v38);
        v39 = dispatch thunk of Actor.unownedExecutor.getter(v37, &protocol witness table for MainActor);
        v33 = v40;
        *(_QWORD *)(v1 + 576) = v39;
        *(_QWORD *)(v1 + 584) = v40;
        v24 = sub_10009BDEC;
        v32 = v39;
        return swift_task_switch(v24, v32, v33);
      }
      v17 = *(_QWORD **)(v1 + 344);
      sub_10000FE2C(v1 + 88, &qword_1004B9DF0);
      v18 = v17[3];
      *(_QWORD *)(v1 + 520) = v18;
      *(_QWORD *)(v1 + 528) = v17[4];
      *(_QWORD *)(v1 + 536) = sub_1000096A0(v17, v18);
      v19 = type metadata accessor for MainActor(0);
      *(_QWORD *)(v1 + 544) = static MainActor.shared.getter(v20);
      v21 = dispatch thunk of Actor.unownedExecutor.getter(v19, &protocol witness table for MainActor);
      v23 = v22;
      v24 = sub_10009BD08;
LABEL_9:
      v32 = v21;
      v33 = v23;
      return swift_task_switch(v24, v32, v33);
    }
    if (v16 == enum case for MusicLibrary.UndoFavoriteAction.UnsupportedReason.explicitContentRestricted(_:))
    {
      v27 = *(_QWORD **)(v1 + 344);
      v28 = v27[3];
      *(_QWORD *)(v1 + 616) = v28;
      *(_QWORD *)(v1 + 624) = v27[4];
      *(_QWORD *)(v1 + 632) = sub_1000096A0(v27, v28);
      v29 = type metadata accessor for MainActor(0);
      *(_QWORD *)(v1 + 640) = static MainActor.shared.getter(v30);
      v21 = dispatch thunk of Actor.unownedExecutor.getter(v29, &protocol witness table for MainActor);
      v23 = v31;
      v24 = sub_10009BF5C;
      goto LABEL_9;
    }
    v41 = *(_QWORD *)(v1 + 464);
    v42 = *(_QWORD *)(v1 + 440);
    v43 = *(_QWORD *)(v1 + 448);
    v44 = *(_QWORD *)(v1 + 384);
    v45 = *(_QWORD *)(v1 + 368);
    v46 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 376) + 8);
    v46(*(_QWORD *)(v1 + 392), v45);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v41, v42);
    v46(v44, v45);
  }
  else
  {
    if (v10 == enum case for MusicLibrary.SupportedStatus.supported<A>(_:))
    {
      v25 = (_QWORD *)swift_task_alloc(async function pointer to MusicLibrary.undoFavorite<A>(_:)[1]);
      *(_QWORD *)(v1 + 472) = v25;
      *v25 = v1;
      v25[1] = sub_10009BA60;
      return MusicLibrary.undoFavorite<A>(_:)(*(_QWORD *)(v1 + 320), *(_QWORD *)(v1 + 352), *(_QWORD *)(v1 + 360));
    }
    v34 = *(_QWORD *)(v1 + 456);
    v35 = *(_QWORD *)(v1 + 440);
    v36 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 448) + 8);
    v36(*(_QWORD *)(v1 + 464), v35);
    v36(v34, v35);
  }
  v47 = *(_QWORD *)(v1 + 456);
  v48 = *(_QWORD *)(v1 + 432);
  v49 = *(_QWORD *)(v1 + 408);
  v51 = *(_QWORD *)(v1 + 384);
  v50 = *(_QWORD *)(v1 + 392);
  swift_task_dealloc(*(_QWORD *)(v1 + 464));
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10009BA60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 472);
  *(_QWORD *)(*(_QWORD *)v1 + 480) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10009A8C0;
  else
    v3 = sub_10009BAC4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10009BAC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_10000FEB4(*(_QWORD *)(v0 + 328), v0 + 272, &qword_1004B9DF8);
  v1 = *(_QWORD *)(v0 + 296);
  *(_QWORD *)(v0 + 488) = v1;
  if (v1)
  {
    v3 = *(_QWORD *)(v0 + 400);
    v2 = *(_QWORD *)(v0 + 408);
    *(_QWORD *)(v0 + 496) = *(_QWORD *)(v0 + 304);
    *(_QWORD *)(v0 + 504) = sub_1000096A0((_QWORD *)(v0 + 272), v1);
    swift_storeEnumTagMultiPayload(v2, v3, 10);
    v4 = type metadata accessor for MainActor(0);
    *(_QWORD *)(v0 + 512) = static MainActor.shared.getter(v5);
    v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
    return swift_task_switch(sub_10009BC04, v6, v7);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 448) + 8))(*(_QWORD *)(v0 + 464), *(_QWORD *)(v0 + 440));
    sub_10000FE2C(v0 + 272, &qword_1004B9DF8);
    v9 = *(_QWORD *)(v0 + 456);
    v10 = *(_QWORD *)(v0 + 432);
    v11 = *(_QWORD *)(v0 + 408);
    v13 = *(_QWORD *)(v0 + 384);
    v12 = *(_QWORD *)(v0 + 392);
    swift_task_dealloc(*(_QWORD *)(v0 + 464));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10009BC04()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v0[61];
  v1 = v0[62];
  v3 = v0[51];
  swift_release(v0[64]);
  sub_1000A4544(v3, 0, v2, v1);
  sub_100034960(v3, type metadata accessor for Notice.Variant);
  return swift_task_switch(sub_10009BC74, 0, 0);
}

uint64_t sub_10009BC74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 448) + 8))(*(_QWORD *)(v0 + 464), *(_QWORD *)(v0 + 440));
  sub_10000970C((_QWORD *)(v0 + 272));
  v1 = *(_QWORD *)(v0 + 456);
  v2 = *(_QWORD *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 408);
  v5 = *(_QWORD *)(v0 + 384);
  v4 = *(_QWORD *)(v0 + 392);
  swift_task_dealloc(*(_QWORD *)(v0 + 464));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009BD08()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  int *v5;

  v1 = v0[66];
  swift_release(v0[68]);
  sub_1000FD26C(5, (uint64_t)(v0 + 27));
  v2 = *(int **)(v1 + 8);
  v5 = (int *)((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  v0[69] = v3;
  *v3 = v0;
  v3[1] = sub_10009BD8C;
  return ((uint64_t (*)(_QWORD *, _QWORD, _QWORD))v5)(v0 + 27, v0[65], v0[66]);
}

uint64_t sub_10009BD8C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(*(_QWORD *)v0 + 216);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 552));
  sub_10003499C(v1);
  return swift_task_switch(sub_10009E570, 0, 0);
}

uint64_t sub_10009BDEC(__n128 a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = static MainActor.shared.getter(a1);
  v1[74] = v2;
  v3 = swift_task_alloc(48);
  v1[75] = v3;
  *(_BYTE *)(v3 + 16) = 5;
  *(_QWORD *)(v3 + 24) = v1 + 2;
  *(_QWORD *)(v3 + 32) = 0;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v1[76] = v4;
  *v4 = v1;
  v4[1] = sub_10009BEB0;
  return withCheckedContinuation<A>(isolation:function:_:)(v1 + 82, v2, &protocol witness table for MainActor, 0xD00000000000003DLL, 0x80000001003A7400, sub_100034A68, v3, &type metadata for Bool);
}

uint64_t sub_10009BEB0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 600);
  v3 = *(_QWORD *)(*v0 + 592);
  swift_task_dealloc(*(_QWORD *)(*v0 + 608));
  swift_release(v3);
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10009BF20, *(_QWORD *)(v1 + 576), *(_QWORD *)(v1 + 584));
}

uint64_t sub_10009BF20()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 568));
  return swift_task_switch(sub_10009A68C, 0, 0);
}

uint64_t sub_10009BF5C()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  int *v5;

  v1 = v0[78];
  swift_release(v0[80]);
  sub_1000FD460(0, (uint64_t)(v0 + 20));
  v2 = *(int **)(v1 + 8);
  v5 = (int *)((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  v0[81] = v3;
  *v3 = v0;
  v3[1] = sub_10009BFE0;
  return ((uint64_t (*)(_QWORD *, _QWORD, _QWORD))v5)(v0 + 20, v0[77], v0[78]);
}

uint64_t sub_10009BFE0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(*(_QWORD *)v0 + 160);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 648));
  sub_10003499C(v1);
  return swift_task_switch(sub_10009A820, 0, 0);
}

uint64_t sub_10009C044()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __n128 v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 47) & 0xFFFFFFFFFFFFFFF8;
  v7 = swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v0 + v4, v1, v7);
  if (*(_QWORD *)(v0 + v5 + 24))
    sub_10000970C((_QWORD *)(v0 + v5));
  v8 = v0 + v6;
  if (*(_QWORD *)(v0 + v6 + 56) != 1)
  {
    swift_unknownObjectWeakDestroy(v0 + v6);
    v9 = *(unsigned __int8 *)(v8 + 48);
    if (v9 != 255)
      sub_1000335FC(*(id *)(v8 + 8), *(_QWORD *)(v8 + 16), *(_QWORD *)(v8 + 24), *(_QWORD *)(v8 + 32), *(_QWORD *)(v8 + 40), v9);
    if (*(_QWORD *)(v8 + 56))
      swift_release(*(_QWORD *)(v8 + 64));
  }
  v10 = (v6 + 79) & 0xFFFFFFFFFFFFFFF8;
  v11 = v10 + 40;
  sub_10000970C((_QWORD *)(v0 + v10));
  return swift_deallocObject(v0, v11, v3 | 7);
}

uint64_t sub_10009C130()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v2 = v0[2];
  v3 = v0[3];
  v4 = *(_QWORD *)(v2 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 47) & 0xFFFFFFFFFFFFFFF8;
  v8 = v0[4];
  v9 = (uint64_t)v0 + v5;
  v10 = (uint64_t)v0 + v6;
  v11 = (uint64_t)v0 + v7;
  v12 = (uint64_t)v0 + ((v7 + 79) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)swift_task_alloc(dword_1004BBB0C);
  *(_QWORD *)(v1 + 16) = v13;
  *v13 = v1;
  v13[1] = sub_10002F6EC;
  return sub_10009B590(v8, v9, v10, v11, v12, v2, v3);
}

uint64_t sub_10009C1F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6[13] = a5;
  v6[14] = a6;
  v6[11] = a3;
  v6[12] = a4;
  v6[9] = a1;
  v6[10] = a2;
  v7 = sub_1000057B4(&qword_1004B99B0);
  v6[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000057B4(&qword_1004B9D88);
  v6[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Actions.MetricsReportingContext(0);
  v6[17] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[18] = v10;
  v6[19] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10009C2A0, 0, 0);
}

uint64_t sub_10009C2A0()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(void (**)(uint64_t))(v0 + 72);
  if (v1)
    v1(55);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 128);
  sub_10000FEB4(*(_QWORD *)(v0 + 88), v4, &qword_1004B9D88);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) == 1)
  {
    sub_10000FE2C(*(_QWORD *)(v0 + 128), &qword_1004B9D88);
    v5 = *(_QWORD *)(v0 + 120);
    v6 = *(_QWORD *)(v0 + 128);
    swift_task_dealloc(*(_QWORD *)(v0 + 152));
    swift_task_dealloc(v6);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 120);
    v9 = *(_QWORD *)(v0 + 104);
    sub_10002F60C(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 152));
    *(_QWORD *)(v0 + 160) = MusicItem.metricsTargetIdentifier.getter(v9);
    *(_QWORD *)(v0 + 168) = v10;
    v11 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v8, 1, 1, v11);
    v12 = sub_1000057B4(&qword_1004B9DD0);
    inited = swift_initStackObject(v12, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_1003C64D0;
    *(_QWORD *)(inited + 32) = MusicItem.metricsContentType.getter(v9);
    *(_QWORD *)(inited + 40) = v14;
    *(_BYTE *)(inited + 48) = 0;
    *(_QWORD *)(v0 + 176) = sub_100053464(inited);
    *(_QWORD *)(v0 + 184) = v15;
    *(_QWORD *)(v0 + 192) = v16;
    *(_WORD *)(v0 + 208) = v17;
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), &type metadata for MetricsEvent.Click.ActionDetails.Key);
    v18 = type metadata accessor for MainActor(0);
    *(_QWORD *)(v0 + 200) = static MainActor.shared.getter(v19);
    v20 = dispatch thunk of Actor.unownedExecutor.getter(v18, &protocol witness table for MainActor);
    return swift_task_switch(sub_10009C474, v20, v21);
  }
}

uint64_t sub_10009C474()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 192);
  v3 = *(void **)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 168);
  v6 = *(uint64_t **)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 120);
  v8 = *(unsigned __int16 *)(v0 + 208);
  swift_release(*(_QWORD *)(v0 + 200));
  sub_100053874(v5, v4, 5, 18, v7, v3, v2, v1, v8, v6);
  sub_10002F650(v3, v2, v1, v8, SBYTE1(v8));
  swift_bridgeObjectRelease(v4);
  sub_10000FE2C(v7, &qword_1004B99B0);
  return swift_task_switch(sub_10009C544, 0, 0);
}

uint64_t sub_10009C544()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100034960(*(_QWORD *)(v0 + 152), type metadata accessor for Actions.MetricsReportingContext);
  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009C5A0()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  unint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *((_QWORD *)v0 + 2);
  v2 = *(_QWORD *)(sub_1000057B4(&qword_1004B9D88) - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = *(_QWORD *)(v1 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  if (*((_QWORD *)v0 + 4))
    swift_release(*((_QWORD *)v0 + 5));
  v9 = &v0[v4];
  v10 = (int *)type metadata accessor for Actions.MetricsReportingContext(0);
  if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v10 - 1) + 48))(&v0[v4], 1, v10))
  {
    v21 = v8;
    v22 = v5;
    v11 = *((_QWORD *)v9 + 1);
    if (v11 >= 0xA)
      swift_bridgeObjectRelease(v11);
    v12 = &v9[v10[5]];
    v13 = (int *)type metadata accessor for MetricsEvent.Page(0);
    if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v13 - 1) + 48))(v12, 1, v13))
    {
      swift_bridgeObjectRelease(*((_QWORD *)v12 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v12 + 3));
      v20 = &v12[v13[6]];
      v14 = type metadata accessor for URL(0);
      v18 = *(_QWORD *)(v14 - 8);
      v19 = v14;
      if (!(*(unsigned int (**)(char *, uint64_t))(v18 + 48))(v20, 1))
        (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v19);
      swift_bridgeObjectRelease(*(_QWORD *)&v12[v13[7]]);
      swift_bridgeObjectRelease(*(_QWORD *)&v12[v13[8] + 8]);
      swift_bridgeObjectRelease(*(_QWORD *)&v12[v13[10] + 8]);
    }
    swift_bridgeObjectRelease(*(_QWORD *)&v9[v10[6] + 8]);
    swift_bridgeObjectRelease(*(_QWORD *)&v9[v10[7]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v9[v10[8]]);
    v8 = v21;
    v5 = v22;
  }
  v15 = (v4 + v5 + v7) & ~v7;
  v16 = v15 + v8;
  (*(void (**)(char *, uint64_t))(v6 + 8))(&v0[v15], v1);
  return swift_deallocObject(v0, v16, v3 | v7 | 7);
}

uint64_t sub_10009C770()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = v0[2];
  v3 = v0[3];
  v4 = *(_QWORD *)(sub_1000057B4(&qword_1004B9D88) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  v7 = v0[4];
  v8 = v0[5];
  v9 = (uint64_t)v0 + v5;
  v10 = (uint64_t)v0 + ((v5 + *(_QWORD *)(v4 + 64) + v6) & ~v6);
  v11 = (_QWORD *)swift_task_alloc(dword_1004BBB1C);
  *(_QWORD *)(v1 + 16) = v11;
  *v11 = v1;
  v11[1] = sub_10002F6EC;
  return sub_10009C1F0(v7, v8, v9, v10, v2, v3);
}

uint64_t Actions.Favorite.Context.menuItemTitle.getter()
{
  return sub_10007A140(0x657469726F766146, 0xE800000000000000);
}

uint64_t (*Actions.Favorite.Context.menuItemImage.getter())()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_allocObject(&unk_10046ED28, 32, 7);
  *(_QWORD *)(v0 + 16) = 1918989427;
  *(_QWORD *)(v0 + 24) = 0xE400000000000000;
  v1 = swift_allocObject(&unk_10046ED50, 32, 7);
  *(_QWORD *)(v1 + 16) = 1918989427;
  *(_QWORD *)(v1 + 24) = 0xE400000000000000;
  return sub_10002F080;
}

uint64_t sub_10009C8B0(uint64_t a1, uint64_t a2)
{
  return sub_10007A304(a1, a2, 0x657469726F766146, 0xE800000000000000);
}

uint64_t (*sub_10009C8C8())()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_allocObject(&unk_10046F2B8, 32, 7);
  *(_QWORD *)(v0 + 16) = 1918989427;
  *(_QWORD *)(v0 + 24) = 0xE400000000000000;
  v1 = swift_allocObject(&unk_10046F2E0, 32, 7);
  *(_QWORD *)(v1 + 16) = 1918989427;
  *(_QWORD *)(v1 + 24) = 0xE400000000000000;
  return sub_10002F6E4;
}

uint64_t Actions.UndoFavorite.Context.menuItemTitle.getter()
{
  return sub_10007A140(0x766146206F646E55, 0xED0000657469726FLL);
}

uint64_t (*Actions.UndoFavorite.Context.menuItemImage.getter())()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_allocObject(&unk_10046ED78, 32, 7);
  *(_QWORD *)(v0 + 16) = 0x616C732E72617473;
  *(_QWORD *)(v0 + 24) = 0xEA00000000006873;
  v1 = swift_allocObject(&unk_10046EDA0, 32, 7);
  *(_QWORD *)(v1 + 16) = 0x616C732E72617473;
  *(_QWORD *)(v1 + 24) = 0xEA00000000006873;
  return sub_10002F6E4;
}

uint64_t sub_10009C9E8(uint64_t a1, uint64_t a2)
{
  return sub_10007A304(a1, a2, 0x766146206F646E55, 0xED0000657469726FLL);
}

uint64_t (*sub_10009CA0C())()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_allocObject(&unk_10046F268, 32, 7);
  *(_QWORD *)(v0 + 16) = 0x616C732E72617473;
  *(_QWORD *)(v0 + 24) = 0xEA00000000006873;
  v1 = swift_allocObject(&unk_10046F290, 32, 7);
  *(_QWORD *)(v1 + 16) = 0x616C732E72617473;
  *(_QWORD *)(v1 + 24) = 0xEA00000000006873;
  return sub_10002F6E4;
}

uint64_t sub_10009CA90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10007A524(a1, 54, (uint64_t)sub_10002F788, (uint64_t)&unk_1004BBB58, (uint64_t)&unk_1004BBB60, a2);
}

uint64_t sub_10009CAB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10007A524(a1, 56, (uint64_t)sub_10007B69C, (uint64_t)&unk_1004BBB88, (uint64_t)&unk_1004BBB90, a2);
}

uint64_t sub_10009CAD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v7 = type metadata accessor for MusicLibrary.DislikeAction(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000057B4(&qword_1004BBC60);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static MusicLibraryAction<>.dislike.getter(v13);
  MusicLibrary.supportedStatus<A, B>(for:action:)(a2, v10, a3, v7, *(_QWORD *)(a4 + 8), &protocol witness table for MusicLibrary.DislikeAction);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v16 = sub_10009CC08();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  return v16;
}

uint64_t sub_10009CBFC()
{
  return sub_10009D93C((uint64_t (*)(_QWORD, uint64_t))sub_10009CAD0);
}

uint64_t sub_10009CC08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  int v14;
  uint64_t v15;
  Swift::String v16;
  void *object;
  unint64_t v19;
  unint64_t v20;

  v1 = v0;
  v2 = type metadata accessor for MusicLibrary.DislikeAction.UnsupportedReason(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000057B4(&qword_1004BBC60);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v19 - v11;
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v13((char *)&v19 - v11, v1, v6);
  v14 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v12, v6);
  if (v14 == enum case for MusicLibrary.SupportedStatus.unsupported<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v7 + 96))(v12, v6);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v12, v2);
    v15 = sub_10009D590((uint64_t)v5);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else if (v14 == enum case for MusicLibrary.SupportedStatus.supported<A>(_:))
  {
    return 0;
  }
  else
  {
    v19 = 0;
    v20 = 0xE000000000000000;
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease(v20);
    v19 = 0xD000000000000019;
    v20 = 0x80000001003A8390;
    v13(v10, v1, v6);
    v16._countAndFlagsBits = String.init<A>(describing:)(v10, v6);
    object = v16._object;
    String.append(_:)(v16);
    swift_bridgeObjectRelease(object);
    v15 = v19;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  }
  return v15;
}

uint64_t sub_10009CDF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v9;
  _QWORD *v10;

  v5[7] = a3;
  v9 = type metadata accessor for Notice.Variant(0);
  v5[8] = v9;
  v5[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (_QWORD *)swift_task_alloc(async function pointer to MusicLibrary.new_dislike<A>(_:)[1]);
  v5[10] = v10;
  *v10 = v5;
  v10[1] = sub_10009CE90;
  return MusicLibrary.new_dislike<A>(_:)(a2, a4, a5);
}

uint64_t sub_10009CE90()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0)
    return swift_task_switch(sub_10009CF00, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v2 + 72));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_10009CF00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;

  sub_10000FEB4(*(_QWORD *)(v0 + 56), v0 + 16, &qword_1004B9DF8);
  v1 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 88) = v1;
  if (v1)
  {
    v3 = *(_QWORD *)(v0 + 64);
    v2 = *(_QWORD *)(v0 + 72);
    *(_QWORD *)(v0 + 96) = *(_QWORD *)(v0 + 48);
    *(_QWORD *)(v0 + 104) = sub_1000096A0((_QWORD *)(v0 + 16), v1);
    swift_storeEnumTagMultiPayload(v2, v3, 11);
    v4 = type metadata accessor for MainActor(0);
    *(_QWORD *)(v0 + 112) = static MainActor.shared.getter(v5);
    v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
    return swift_task_switch(sub_10009CFF0, v6, v7);
  }
  else
  {
    sub_10000FE2C(v0 + 16, &qword_1004B9DF8);
    swift_task_dealloc(*(_QWORD *)(v0 + 72));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10009CFF0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v0[11];
  v1 = v0[12];
  v3 = v0[9];
  swift_release(v0[14]);
  sub_1000A4544(v3, 0, v2, v1);
  sub_100034960(v3, type metadata accessor for Notice.Variant);
  return swift_task_switch(sub_10009D060, 0, 0);
}

uint64_t sub_10009D060()
{
  uint64_t v0;

  sub_10000970C((_QWORD *)(v0 + 16));
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009D09C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  __n128 v6;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v0 + v4, v1, v6);
  if (*(_QWORD *)(v0 + v5 + 24))
    sub_10000970C((_QWORD *)(v0 + v5));
  return swift_deallocObject(v0, v5 + 40, v3 | 7);
}

uint64_t sub_10009D11C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = v0[2];
  v3 = v0[3];
  v4 = *(_QWORD *)(v2 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v0[4];
  v7 = (uint64_t)v0 + v5;
  v8 = (uint64_t)v0 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)swift_task_alloc(dword_1004BBB3C);
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = sub_10002E8E0;
  return sub_10009CDF8(v6, v7, v8, v2, v3);
}

uint64_t sub_10009D1B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[11] = a3;
  v4[12] = a4;
  v4[9] = a1;
  v4[10] = a2;
  v5 = sub_1000057B4(&qword_1004B99B0);
  v4[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000057B4(&qword_1004B9D88);
  v4[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Actions.MetricsReportingContext(0);
  v4[15] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[16] = v8;
  v4[17] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10009D260, 0, 0);
}

uint64_t sub_10009D260()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 112);
  sub_10000FEB4(*(_QWORD *)(v0 + 72), v3, &qword_1004B9D88);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10000FE2C(*(_QWORD *)(v0 + 112), &qword_1004B9D88);
    v4 = *(_QWORD *)(v0 + 104);
    v5 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc(*(_QWORD *)(v0 + 136));
    swift_task_dealloc(v5);
    swift_task_dealloc(v4);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 104);
    v8 = *(_QWORD *)(v0 + 88);
    sub_10002F60C(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 136));
    *(_QWORD *)(v0 + 144) = MusicItem.metricsTargetIdentifier.getter(v8);
    *(_QWORD *)(v0 + 152) = v9;
    v10 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v7, 1, 1, v10);
    v11 = sub_1000057B4(&qword_1004B9DD0);
    inited = swift_initStackObject(v11, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_1003C64D0;
    *(_QWORD *)(inited + 32) = MusicItem.metricsContentType.getter(v8);
    *(_QWORD *)(inited + 40) = v13;
    *(_BYTE *)(inited + 48) = 0;
    *(_QWORD *)(v0 + 160) = sub_100053464(inited);
    *(_QWORD *)(v0 + 168) = v14;
    *(_QWORD *)(v0 + 176) = v15;
    *(_WORD *)(v0 + 192) = v16;
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), &type metadata for MetricsEvent.Click.ActionDetails.Key);
    v17 = type metadata accessor for MainActor(0);
    *(_QWORD *)(v0 + 184) = static MainActor.shared.getter(v18);
    v19 = dispatch thunk of Actor.unownedExecutor.getter(v17, &protocol witness table for MainActor);
    return swift_task_switch(sub_10009D420, v19, v20);
  }
}

uint64_t sub_10009D420()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 176);
  v3 = *(void **)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 152);
  v6 = *(uint64_t **)(v0 + 136);
  v7 = *(_QWORD *)(v0 + 104);
  v8 = *(unsigned __int16 *)(v0 + 192);
  swift_release(*(_QWORD *)(v0 + 184));
  sub_100053874(v5, v4, 5, 19, v7, v3, v2, v1, v8, v6);
  sub_10002F650(v3, v2, v1, v8, SBYTE1(v8));
  swift_bridgeObjectRelease(v4);
  sub_10000FE2C(v7, &qword_1004B99B0);
  return swift_task_switch(sub_10007A9CC, 0, 0);
}

uint64_t sub_10009D4F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(sub_1000057B4(&qword_1004B9D88) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  v7 = v0 + v5;
  v8 = v0 + ((v5 + *(_QWORD *)(v4 + 64) + v6) & ~v6);
  v9 = (_QWORD *)swift_task_alloc(dword_1004BBB4C);
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = sub_10002F6EC;
  return sub_10009D1B4(v7, v8, v2, v3);
}

uint64_t sub_10009D590(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, uint64_t, uint64_t);
  int v11;
  Swift::String v13;
  void *object;
  uint64_t v15;
  unint64_t v16;

  v2 = 0xD000000000000010;
  v3 = type metadata accessor for MusicLibrary.DislikeAction.UnsupportedReason(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v15 - v8;
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v10((char *)&v15 - v8, a1, v3);
  v11 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v9, v3);
  if (v11 != enum case for MusicLibrary.DislikeAction.UnsupportedReason.unsupportedType(_:)
    && v11 != enum case for MusicLibrary.DislikeAction.UnsupportedReason.alreadyDisliked(_:))
  {
    if (v11 == enum case for MusicLibrary.DislikeAction.UnsupportedReason.cannotDislikeWhenFavorited(_:))
    {
      return 0xD00000000000001DLL;
    }
    else if (v11 == enum case for MusicLibrary.DislikeAction.UnsupportedReason.cannotDislikeWhenLiked(_:))
    {
      return 0xD000000000000019;
    }
    else if (v11 == enum case for MusicLibrary.DislikeAction.UnsupportedReason.subscriptionRequired(_:))
    {
      return 0xD000000000000015;
    }
    else if (v11 == enum case for MusicLibrary.DislikeAction.UnsupportedReason.cloudLibraryRequired(_:))
    {
      return 0xD000000000000016;
    }
    else if (v11 != enum case for MusicLibrary.DislikeAction.UnsupportedReason.networkRequired(_:))
    {
      if (v11 == enum case for MusicLibrary.DislikeAction.UnsupportedReason.sharedLibrary(_:))
      {
        return 0x6C20646572616853;
      }
      else
      {
        v15 = 0;
        v16 = 0xE000000000000000;
        _StringGuts.grow(_:)(17);
        swift_bridgeObjectRelease(v16);
        v15 = 0x206E776F6E6B6E55;
        v16 = 0xEF206E6F73616572;
        v10(v7, a1, v3);
        v13._countAndFlagsBits = String.init<A>(describing:)(v7, v3);
        object = v13._object;
        String.append(_:)(v13);
        swift_bridgeObjectRelease(object);
        v2 = v15;
        (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
      }
    }
  }
  return v2;
}

uint64_t sub_10009D804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v7 = type metadata accessor for MusicLibrary.UndoDislikeAction(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000057B4(&qword_1004BBC58);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static MusicLibraryAction<>.undoDislike.getter(v13);
  MusicLibrary.supportedStatus<A, B>(for:action:)(a2, v10, a3, v7, *(_QWORD *)(a4 + 8), &protocol witness table for MusicLibrary.UndoDislikeAction);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v16 = sub_10009D960();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  return v16;
}

uint64_t sub_10009D930()
{
  return sub_10009D93C((uint64_t (*)(_QWORD, uint64_t))sub_10009D804);
}

uint64_t sub_10009D93C(uint64_t (*a1)(_QWORD, uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v1 + 16) - 8) + 80);
  return a1(*(_QWORD *)(v1 + 32), v1 + ((v2 + 40) & ~v2));
}

uint64_t sub_10009D960()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  int v17;
  uint64_t v18;
  Swift::String v19;
  void *object;
  unint64_t v22;
  unint64_t v23;

  v1 = v0;
  v2 = type metadata accessor for MusicLibrary.UndoDislikeAction.UnsupportedReason(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v22 - v7;
  v9 = sub_1000057B4(&qword_1004BBC58);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v22 - v14;
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v16((char *)&v22 - v14, v1, v9);
  v17 = (*(uint64_t (**)(char *, uint64_t))(v10 + 88))(v15, v9);
  if (v17 == enum case for MusicLibrary.SupportedStatus.unsupported<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v10 + 96))(v15, v9);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v15, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
    v18 = String.init<A>(describing:)(v6, v2);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  }
  else if (v17 == enum case for MusicLibrary.SupportedStatus.supported<A>(_:))
  {
    return 0;
  }
  else
  {
    v22 = 0;
    v23 = 0xE000000000000000;
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease(v23);
    v22 = 0xD000000000000019;
    v23 = 0x80000001003A8390;
    v16(v13, v1, v9);
    v19._countAndFlagsBits = String.init<A>(describing:)(v13, v9);
    object = v19._object;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(object);
    v18 = v22;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  }
  return v18;
}

uint64_t sub_10009DB84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc(async function pointer to MusicLibrary.new_undoDislike<A>(_:)[1]);
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_10002F6EC;
  return MusicLibrary.new_undoDislike<A>(_:)(a2, a3, a4);
}

uint64_t sub_10009DBF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10009DC64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  v5 = v0 + ((v4 + 40) & ~v4);
  v6 = (_QWORD *)swift_task_alloc(dword_1004BBB6C);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_10002F6EC;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to MusicLibrary.new_undoDislike<A>(_:)[1]);
  v6[2] = v7;
  *v7 = v6;
  v7[1] = sub_10002F6EC;
  return MusicLibrary.new_undoDislike<A>(_:)(v5, v2, v3);
}

uint64_t sub_10009DD08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[11] = a3;
  v4[12] = a4;
  v4[9] = a1;
  v4[10] = a2;
  v5 = sub_1000057B4(&qword_1004B99B0);
  v4[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000057B4(&qword_1004B9D88);
  v4[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Actions.MetricsReportingContext(0);
  v4[15] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[16] = v8;
  v4[17] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10009DDB4, 0, 0);
}

uint64_t sub_10009DDB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 112);
  sub_10000FEB4(*(_QWORD *)(v0 + 72), v3, &qword_1004B9D88);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10000FE2C(*(_QWORD *)(v0 + 112), &qword_1004B9D88);
    v4 = *(_QWORD *)(v0 + 104);
    v5 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc(*(_QWORD *)(v0 + 136));
    swift_task_dealloc(v5);
    swift_task_dealloc(v4);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 104);
    v8 = *(_QWORD *)(v0 + 88);
    sub_10002F60C(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 136));
    *(_QWORD *)(v0 + 144) = MusicItem.metricsTargetIdentifier.getter(v8);
    *(_QWORD *)(v0 + 152) = v9;
    v10 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v7, 1, 1, v10);
    v11 = sub_1000057B4(&qword_1004B9DD0);
    inited = swift_initStackObject(v11, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_1003C64D0;
    *(_QWORD *)(inited + 32) = MusicItem.metricsContentType.getter(v8);
    *(_QWORD *)(inited + 40) = v13;
    *(_BYTE *)(inited + 48) = 0;
    *(_QWORD *)(v0 + 160) = sub_100053464(inited);
    *(_QWORD *)(v0 + 168) = v14;
    *(_QWORD *)(v0 + 176) = v15;
    *(_WORD *)(v0 + 192) = v16;
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), &type metadata for MetricsEvent.Click.ActionDetails.Key);
    v17 = type metadata accessor for MainActor(0);
    *(_QWORD *)(v0 + 184) = static MainActor.shared.getter(v18);
    v19 = dispatch thunk of Actor.unownedExecutor.getter(v17, &protocol witness table for MainActor);
    return swift_task_switch(sub_10009DF74, v19, v20);
  }
}

uint64_t sub_10009DF74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 176);
  v3 = *(void **)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 152);
  v6 = *(uint64_t **)(v0 + 136);
  v7 = *(_QWORD *)(v0 + 104);
  v8 = *(unsigned __int16 *)(v0 + 192);
  swift_release(*(_QWORD *)(v0 + 184));
  sub_100053874(v5, v4, 5, 20, v7, v3, v2, v1, v8, v6);
  sub_10002F650(v3, v2, v1, v8, SBYTE1(v8));
  swift_bridgeObjectRelease(v4);
  sub_10000FE2C(v7, &qword_1004B99B0);
  return swift_task_switch(sub_10007B6A4, 0, 0);
}

uint64_t sub_10009E048()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(sub_1000057B4(&qword_1004B9D88) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  v7 = v0 + v5;
  v8 = v0 + ((v5 + *(_QWORD *)(v4 + 64) + v6) & ~v6);
  v9 = (_QWORD *)swift_task_alloc(dword_1004BBB7C);
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = sub_10002F6EC;
  return sub_10009DD08(v7, v8, v2, v3);
}

uint64_t Actions.SuggestLess.Context.menuItemTitle.getter()
{
  return sub_10007A140(0x2074736567677553, 0xEC0000007373654CLL);
}

uint64_t (*Actions.SuggestLess.Context.menuItemImage.getter())()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_allocObject(&unk_10046EDC8, 32, 7);
  *(_QWORD *)(v0 + 16) = 0x7568742E646E6168;
  *(_QWORD *)(v0 + 24) = 0xEF6E776F6473626DLL;
  v1 = swift_allocObject(&unk_10046EDF0, 32, 7);
  *(_QWORD *)(v1 + 16) = 0x7568742E646E6168;
  *(_QWORD *)(v1 + 24) = 0xEF6E776F6473626DLL;
  return sub_10002F6E4;
}

uint64_t sub_10009E190(uint64_t a1, uint64_t a2)
{
  return sub_10007A304(a1, a2, 0x2074736567677553, 0xEC0000007373654CLL);
}

uint64_t (*sub_10009E1B0())()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_allocObject(&unk_10046F218, 32, 7);
  *(_QWORD *)(v0 + 16) = 0x7568742E646E6168;
  *(_QWORD *)(v0 + 24) = 0xEF6E776F6473626DLL;
  v1 = swift_allocObject(&unk_10046F240, 32, 7);
  *(_QWORD *)(v1 + 16) = 0x7568742E646E6168;
  *(_QWORD *)(v1 + 24) = 0xEF6E776F6473626DLL;
  return sub_10002F6E4;
}

uint64_t (*Actions.UndoSuggestLess.Context.menuItemImage.getter())()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_allocObject(&unk_10046EE18, 32, 7);
  *(_QWORD *)(v0 + 16) = 0x7568742E646E6168;
  *(_QWORD *)(v0 + 24) = 0xEF6E776F6473626DLL;
  v1 = swift_allocObject(&unk_10046EE40, 32, 7);
  *(_QWORD *)(v1 + 16) = 0x7568742E646E6168;
  *(_QWORD *)(v1 + 24) = 0xEF6E776F6473626DLL;
  return sub_10002F6E4;
}

uint64_t (*sub_10009E2CC())()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_allocObject(&unk_10046F1C8, 32, 7);
  *(_QWORD *)(v0 + 16) = 0x7568742E646E6168;
  *(_QWORD *)(v0 + 24) = 0xEF6E776F6473626DLL;
  v1 = swift_allocObject(&unk_10046F1F0, 32, 7);
  *(_QWORD *)(v1 + 16) = 0x7568742E646E6168;
  *(_QWORD *)(v1 + 24) = 0xEF6E776F6473626DLL;
  return sub_10002F6E4;
}

uint64_t _s9MusicCore7ActionsO15UndoSuggestLessO7ContextV13menuItemTitleSSvg_0()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for Locale(0);
  __chkstk_darwin(v0);
  v2 = &v13[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for String.LocalizationValue(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v9 = &v13[-v8];
  String.LocalizationValue.init(stringLiteral:)(0xD000000000000011, 0x80000001003A8370);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 16))(v7, v9, v3);
  if (qword_1004B8A10 != -1)
    swift_once(&qword_1004B8A10, sub_10002B2B8);
  v10 = qword_1004F4630;
  static Locale.current.getter((id)qword_1004F4630);
  v11 = String.init(localized:table:bundle:locale:comment:)(v7, 0, 0, v10, v2, 0, 0, 256);
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v9, v3);
  return v11;
}

ValueMetadata *type metadata accessor for Actions.Favorite()
{
  return &type metadata for Actions.Favorite;
}

ValueMetadata *type metadata accessor for Actions.Favorite.Context()
{
  return &type metadata for Actions.Favorite.Context;
}

ValueMetadata *type metadata accessor for Actions.UndoFavorite()
{
  return &type metadata for Actions.UndoFavorite;
}

ValueMetadata *type metadata accessor for Actions.UndoFavorite.Context()
{
  return &type metadata for Actions.UndoFavorite.Context;
}

ValueMetadata *type metadata accessor for Actions.SuggestLess()
{
  return &type metadata for Actions.SuggestLess;
}

ValueMetadata *type metadata accessor for Actions.SuggestLess.Context()
{
  return &type metadata for Actions.SuggestLess.Context;
}

ValueMetadata *type metadata accessor for Actions.UndoSuggestLess()
{
  return &type metadata for Actions.UndoSuggestLess;
}

ValueMetadata *type metadata accessor for Actions.UndoSuggestLess.Context()
{
  return &type metadata for Actions.UndoSuggestLess.Context;
}

uint64_t sub_10009E544()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t (*Actions.RateSong.Context.init<A>(item:library:ratingViewController:presentationSource:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))()
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v36 = a8;
  v37 = a3;
  v32 = a1;
  v33 = a7;
  v38 = a4;
  v39 = a5;
  v35 = a2;
  v11 = *(_QWORD *)(a6 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = __chkstk_darwin(a1);
  v34 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v32 - v14;
  (*(void (**)(char *))(v11 + 16))((char *)&v32 - v14);
  v16 = *(unsigned __int8 *)(v11 + 80);
  v17 = (v16 + 48) & ~v16;
  v18 = v16 | 7;
  v19 = (_QWORD *)swift_allocObject(&unk_10046F328, v17 + v12, v16 | 7);
  v19[2] = a6;
  v19[3] = a7;
  v20 = v36;
  v19[4] = v36;
  v19[5] = a2;
  v21 = (char *)v19 + v17;
  v22 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v22(v21, v15, a6);
  v23 = v34;
  v22(v34, v32, a6);
  v24 = (v16 + 56) & ~v16;
  v25 = (v12 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = (v25 + 15) & 0xFFFFFFFFFFFFFFF8;
  v27 = (char *)swift_allocObject(&unk_10046F350, v26 + 72, v18);
  v28 = v33;
  *((_QWORD *)v27 + 2) = a6;
  *((_QWORD *)v27 + 3) = v28;
  v29 = v37;
  *((_QWORD *)v27 + 4) = v20;
  *((_QWORD *)v27 + 5) = v29;
  *((_QWORD *)v27 + 6) = v38;
  v22(&v27[v24], v23, a6);
  v30 = v35;
  *(_QWORD *)&v27[v25] = v35;
  sub_100034A2C(v39, (uint64_t)&v27[v26]);
  swift_retain(v30);
  return sub_10009EDBC;
}

double static Actions.RateSong.action(context:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  double result;

  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_QWORD *)(a5 + 24) = a4;
  *(_BYTE *)(a5 + 32) = 38;
  *(_QWORD *)(a5 + 40) = sub_10002F788;
  *(_QWORD *)(a5 + 48) = 0;
  *(_QWORD *)(a5 + 56) = 0x4014000000000000;
  *(_QWORD *)(a5 + 64) = &unk_1004BBC88;
  *(_QWORD *)(a5 + 72) = 0;
  *(_QWORD *)(a5 + 80) = &unk_1004BBC90;
  *(_QWORD *)(a5 + 88) = 0;
  swift_retain(a2);
  *(_QWORD *)&result = swift_retain(a4).n128_u64[0];
  return result;
}

double sub_10009E7C4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;
  double result;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  v3 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 24) = v2;
  *(_BYTE *)(a2 + 32) = 38;
  *(_QWORD *)(a2 + 40) = sub_10002F788;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0x4014000000000000;
  *(_QWORD *)(a2 + 64) = &unk_1004BBC88;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = &unk_1004BBC90;
  *(_QWORD *)(a2 + 88) = 0;
  swift_retain(v3);
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t Actions.RateSong.Context.menuItemTitle.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for Locale(0);
  __chkstk_darwin(v0);
  v2 = &v13[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for String.LocalizationValue(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v9 = &v13[-v8];
  String.LocalizationValue.init(stringLiteral:)(0x6E6F532065746152, 0xAC000000A680E267);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 16))(v7, v9, v3);
  if (qword_1004B8A10 != -1)
    swift_once(&qword_1004B8A10, sub_10002B2B8);
  v10 = qword_1004F4630;
  static Locale.current.getter((id)qword_1004F4630);
  v11 = String.init(localized:table:bundle:locale:comment:)(v7, 0, 0, v10, v2, 0, 0, 256);
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v9, v3);
  return v11;
}

uint64_t (*Actions.RateSong.Context.menuItemImage.getter())()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_allocObject(&unk_10046F378, 32, 7);
  *(_QWORD *)(v0 + 16) = 0xD000000000000017;
  *(_QWORD *)(v0 + 24) = 0x80000001003A8510;
  v1 = swift_allocObject(&unk_10046F3A0, 32, 7);
  *(_QWORD *)(v1 + 16) = 0xD000000000000017;
  *(_QWORD *)(v1 + 24) = 0x80000001003A8510;
  return sub_10002F080;
}

uint64_t (*sub_10009EA28())()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_allocObject(&unk_10046F498, 32, 7);
  *(_QWORD *)(v0 + 16) = 0xD000000000000017;
  *(_QWORD *)(v0 + 24) = 0x80000001003A8510;
  v1 = swift_allocObject(&unk_10046F4C0, 32, 7);
  *(_QWORD *)(v1 + 16) = 0xD000000000000017;
  *(_QWORD *)(v1 + 24) = 0x80000001003A8510;
  return sub_10002F6E4;
}

unint64_t sub_10009EAAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSString v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v34 = a4;
  v35 = a2;
  v36 = a3;
  v5 = type metadata accessor for MusicLibrary.AddAction(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000057B4(&qword_1004B9E28);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MusicLibrary(0);
  v13 = static MusicLibrary.shared.getter();
  v14 = static MusicLibrary.== infix(_:_:)(a1, v13);
  swift_release(v13);
  if ((v14 & 1) == 0)
    return 0xD00000000000001DLL;
  v30 = v6;
  v31 = v5;
  v16 = v35;
  v15 = v36;
  v32 = v10;
  v33 = a1;
  v17 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v18 = String._bridgeToObjectiveC()();
  v19 = objc_msgSend(v17, "BOOLForKey:", v18);

  if (!v19)
    return 0xD000000000000018;
  static MusicLibraryAction<>.add.getter(v20);
  v21 = v31;
  MusicLibrary.supportedStatus<A, B>(for:action:)(v16, v8, v15, v31, v34, &protocol witness table for MusicLibrary.AddAction);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v21);
  v22 = v32;
  v23 = 0xD000000000000011;
  if ((*(unsigned int (**)(char *, uint64_t))(v32 + 88))(v12, v9) == enum case for MusicLibrary.SupportedStatus.unsupported<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v22 + 96))(v12, v9);
    v24 = type metadata accessor for MusicLibrary.AddAction.UnsupportedReason(0);
    v25 = *(_QWORD *)(v24 - 8);
    v26 = (*(uint64_t (**)(char *, uint64_t))(v25 + 88))(v12, v24);
    v27 = enum case for MusicLibrary.AddAction.UnsupportedReason.alreadyAdded(_:);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v24);
    if (v26 == v27)
      return 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v9);
  }
  return v23;
}

uint64_t sub_10009ED50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 40));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

unint64_t sub_10009EDBC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[2];
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  return sub_10009EAAC(v0[5], (uint64_t)v0 + ((v2 + 48) & ~v2), v1, v0[3]);
}

id NSUserDefaults.showStarRatings.getter()
{
  void *v0;
  NSString v1;
  id v2;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "BOOLForKey:", v1);

  return v2;
}

uint64_t sub_10009EE3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;

  v8[14] = a7;
  v8[15] = a8;
  v8[12] = a5;
  v8[13] = a6;
  v8[10] = a3;
  v8[11] = a4;
  v8[8] = a1;
  v8[9] = a2;
  v9 = *(_QWORD *)(a6 - 8);
  v8[16] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v8[17] = v10;
  v8[18] = swift_task_alloc((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Locale(0);
  v8[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for String.LocalizationValue(0);
  v8[20] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v8[21] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[22] = swift_task_alloc(v14);
  v8[23] = swift_task_alloc(v14);
  v15 = type metadata accessor for MainActor(0);
  v8[24] = static MainActor.shared.getter(v16);
  v17 = dispatch thunk of Actor.unownedExecutor.getter(v15, &protocol witness table for MainActor);
  return swift_task_switch(sub_10009EF2C, v17, v18);
}

uint64_t sub_10009EF2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  id v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  NSString v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  NSString v33;
  void *v34;
  id v35;
  __int128 v37;
  uint64_t v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;

  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 192));
  String.LocalizationValue.init(stringLiteral:)(0x7461522072617453, 0xEB00000000676E69);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  if (qword_1004B8A10 != -1)
    swift_once(&qword_1004B8A10, sub_10002B2B8);
  v5 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 160);
  v8 = *(_QWORD *)(v0 + 168);
  v9 = *(_QWORD *)(v0 + 152);
  v10 = qword_1004F4630;
  static Locale.current.getter((id)qword_1004F4630);
  String.init(localized:table:bundle:locale:comment:)(v5, 0, 0, v10, v9, 0, 0, 256);
  v12 = v11;
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  v14 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", v13, 0, 1);

  if (qword_1004B92F0 != -1)
    swift_once(&qword_1004B92F0, sub_10020C0C0);
  v15 = *(_QWORD *)(v0 + 80);
  v16 = *(uint64_t (**)(uint64_t))(v0 + 64);
  v17 = qword_1004F5520;
  swift_bridgeObjectRetain();
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v17);
  v39 = (id)objc_opt_self(UIAlertAction);
  v19 = objc_msgSend(v39, "actionWithTitle:style:handler:", v18, 1, 0);

  v44 = v19;
  objc_msgSend(v14, "addAction:", v19);
  v20 = (void *)v16(v15);
  v38 = v21;
  v40 = v14;
  if (qword_1004B92E8 != -1)
    swift_once(&qword_1004B92E8, sub_10020C084);
  v41 = *(_QWORD *)(v0 + 184);
  v42 = *(_QWORD *)(v0 + 176);
  v22 = *(_QWORD *)(v0 + 144);
  v43 = *(_QWORD *)(v0 + 152);
  v23 = *(_QWORD *)(v0 + 128);
  v24 = *(_QWORD *)(v0 + 136);
  v25 = *(_QWORD *)(v0 + 120);
  v26 = *(_QWORD *)(v0 + 88);
  v27 = qword_1004F5510;
  v37 = *(_OWORD *)(v0 + 104);
  v28 = *(_QWORD *)(v0 + 104);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v23 + 16))(v22, *(_QWORD *)(v0 + 80), v28);
  v29 = *(unsigned __int8 *)(v23 + 80);
  v30 = (v29 + 64) & ~v29;
  v31 = swift_allocObject(&unk_10046F4E8, v30 + v24, v29 | 7);
  *(_OWORD *)(v31 + 16) = v37;
  *(_QWORD *)(v31 + 32) = v25;
  *(_QWORD *)(v31 + 40) = v20;
  *(_QWORD *)(v31 + 48) = v38;
  *(_QWORD *)(v31 + 56) = v26;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(v31 + v30, v22, v28);
  swift_bridgeObjectRetain();
  v32 = v20;
  swift_retain(v26);
  v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v27);
  *(_QWORD *)(v0 + 48) = sub_10009FB98;
  *(_QWORD *)(v0 + 56) = v31;
  *(_QWORD *)(v0 + 16) = _NSConcreteStackBlock;
  *(_QWORD *)(v0 + 24) = 1107296256;
  *(_QWORD *)(v0 + 32) = sub_1000179E8;
  *(_QWORD *)(v0 + 40) = &unk_10046F500;
  v34 = _Block_copy((const void *)(v0 + 16));
  v35 = objc_msgSend(v39, "actionWithTitle:style:handler:", v33, 0, v34, swift_release(*(_QWORD *)(v0 + 56)).n128_f64[0]);
  _Block_release(v34);

  objc_msgSend(v40, "addAction:", v35);
  objc_msgSend(v40, "setPreferredAction:", v35);
  objc_msgSend(v40, "setContentViewController:", v32);
  PresentationSource.present(_:wantsAutomaticModalPresentationStyle:permittedArrowDirections:animated:completion:)(v40, 1, (id)0xF, (void **)1, 0, 0);

  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009F35C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __n128 v7;
  uint64_t v8;
  int v9;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = swift_release(*(_QWORD *)(v0 + 48));
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v0 + v4, v1, v7);
  swift_release(*(_QWORD *)(v0 + v5));
  v8 = v0 + v6;
  swift_unknownObjectWeakDestroy(v0 + v6);
  v9 = *(unsigned __int8 *)(v0 + v6 + 48);
  if (v9 != 255)
    sub_1000335FC(*(id *)(v8 + 8), *(_QWORD *)(v8 + 16), *(_QWORD *)(v8 + 24), *(_QWORD *)(v8 + 32), *(_QWORD *)(v8 + 40), v9);
  if (*(_QWORD *)(v8 + 56))
    swift_release(*(_QWORD *)(v8 + 64));
  return swift_deallocObject(v0, v6 + 72, v3 | 7);
}

uint64_t sub_10009F41C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v2 = v0[2];
  v3 = v0[3];
  v4 = *(_QWORD *)(v2 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0[4];
  v8 = v0[5];
  v9 = v0[6];
  v10 = (uint64_t)v0 + v5;
  v11 = *(_QWORD *)((char *)v0 + v6);
  v12 = (uint64_t)v0 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)swift_task_alloc(dword_1004BBC7C);
  *(_QWORD *)(v1 + 16) = v13;
  *v13 = v1;
  v13[1] = sub_10002E8E0;
  return sub_10009EE3C(v8, v9, v10, v11, v12, v2, v3, v7);
}

ValueMetadata *type metadata accessor for Actions.RateSong()
{
  return &type metadata for Actions.RateSong;
}

ValueMetadata *type metadata accessor for Actions.RateSong.Context()
{
  return &type metadata for Actions.RateSong.Context;
}

uint64_t sub_10009F4F8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

double sub_10009F51C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  id v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  double result;
  uint64_t v29;
  uint64_t v30;

  v29 = a7;
  v30 = a8;
  v13 = *(_QWORD *)(a6 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(a1);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000057B4((uint64_t *)&unk_1004BFBC0);
  __chkstk_darwin(v16);
  v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a5, a6);
  type metadata accessor for MainActor(0);
  v20 = a2;
  v21 = swift_retain(a4);
  v22 = static MainActor.shared.getter(v21);
  v23 = *(unsigned __int8 *)(v13 + 80);
  v24 = (v23 + 80) & ~v23;
  v25 = (char *)swift_allocObject(&unk_10046F538, v24 + v14, v23 | 7);
  *((_QWORD *)v25 + 2) = v22;
  *((_QWORD *)v25 + 3) = &protocol witness table for MainActor;
  v26 = v29;
  *((_QWORD *)v25 + 4) = a6;
  *((_QWORD *)v25 + 5) = v26;
  *((_QWORD *)v25 + 6) = v30;
  *((_QWORD *)v25 + 7) = v20;
  *((_QWORD *)v25 + 8) = a3;
  *((_QWORD *)v25 + 9) = a4;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v25[v24], v15, a6);
  v27 = sub_1000E6084((uint64_t)v18, (uint64_t)&unk_1004BBCD0, (uint64_t)v25);
  *(_QWORD *)&result = swift_release(v27).n128_u64[0];
  return result;
}

uint64_t sub_10009F6A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v8[8] = v16;
  v8[9] = v17;
  v8[6] = a7;
  v8[7] = a8;
  v8[4] = a5;
  v8[5] = a6;
  v8[3] = a4;
  v9 = *(_QWORD *)(a8 - 8);
  v8[10] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[11] = swift_task_alloc(v10);
  v8[12] = swift_task_alloc(v10);
  v11 = type metadata accessor for MainActor(0);
  v8[13] = static MainActor.shared.getter(v12);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(v11, &protocol witness table for MainActor);
  v8[14] = v13;
  v8[15] = v14;
  return swift_task_switch(sub_10009F754, v13, v14);
}

uint64_t sub_10009F754()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v4;
  double v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = v0[8];
  v2 = v0[4];
  ObjectType = swift_getObjectType();
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(ObjectType, v2);
  v0[16] = v4;
  v5 = (double)v4 / 5.0;
  v6 = (_QWORD *)swift_task_alloc(async function pointer to MusicLibrary.setUserRating<A>(_:for:)[1]);
  v0[17] = v6;
  v7 = *(_QWORD *)(v1 + 8);
  *v6 = v0;
  v6[1] = sub_10009F7E8;
  return MusicLibrary.setUserRating<A>(_:for:)(v0[6], v0[7], v7, v0[9], v5);
}

uint64_t sub_10009F7E8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 136);
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10009F888;
  else
    v4 = sub_10009F848;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 112), *(_QWORD *)(v2 + 120));
}

uint64_t sub_10009F848()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 104));
  v1 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009F888()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  swift_release(*(_QWORD *)(v0 + 104));
  if (qword_1004B8A30 != -1)
    swift_once(&qword_1004B8A30, sub_1000A6660);
  v1 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v6 = type metadata accessor for Logger(0);
  sub_100039D34(v6, (uint64_t)static Logger.actions);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v7(v2, v5, v4);
  swift_errorRetain(v1);
  v8 = swift_errorRetain(v1);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter();
  v11 = os_log_type_enabled(v9, v10);
  v12 = *(_QWORD *)(v0 + 144);
  if (v11)
  {
    v13 = *(_QWORD *)(v0 + 88);
    v14 = *(_QWORD *)(v0 + 96);
    v31 = *(_QWORD *)(v0 + 80);
    v15 = *(_QWORD *)(v0 + 56);
    v16 = (double)*(uint64_t *)(v0 + 128) / 5.0;
    v17 = swift_slowAlloc(32, -1);
    v18 = swift_slowAlloc(64, -1);
    v32 = v18;
    *(_DWORD *)v17 = 134349570;
    *(double *)(v17 + 4) = v16;
    *(_WORD *)(v17 + 12) = 2082;
    v7(v14, v13, v15);
    v19 = (char *)String.init<A>(describing:)(v14, v15);
    v21 = v20;
    *(_QWORD *)(v17 + 14) = sub_1000393D0(v19, v20, &v32);
    swift_bridgeObjectRelease(v21);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v13, v15);
    *(_WORD *)(v17 + 22) = 2082;
    *(_QWORD *)(v0 + 16) = v12;
    swift_errorRetain(v12);
    v22 = sub_1000057B4((uint64_t *)&unk_1004BD690);
    v23 = (char *)String.init<A>(describing:)(v0 + 16, v22);
    v25 = v24;
    *(_QWORD *)(v17 + 24) = sub_1000393D0(v23, v24, &v32);
    swift_bridgeObjectRelease(v25);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to set userRating=%{public}f for item=%{public}s with error=%{public}s", (uint8_t *)v17, 0x20u);
    swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    swift_errorRelease(v12);
  }
  else
  {
    v27 = *(_QWORD *)(v0 + 80);
    v26 = *(_QWORD *)(v0 + 88);
    v28 = *(_QWORD *)(v0 + 56);
    swift_errorRelease(*(_QWORD *)(v0 + 144));
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
    swift_errorRelease(v12);
    swift_errorRelease(v12);

  }
  v29 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009FB24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 64) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  swift_release(*(_QWORD *)(v0 + 56));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

double sub_10009FB98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  return sub_10009F51C(a1, *(void **)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), v1 + ((v3 + 64) & ~v3), v2, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_10009FBBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10009FBCC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10009FBD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 80) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 72));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10009FC50(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = v1[4];
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[7];
  v8 = v1[8];
  v9 = v1[9];
  v10 = (uint64_t)v1 + ((v4 + 80) & ~v4);
  v11 = (_QWORD *)swift_task_alloc(dword_1004BBCCC);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_10002E8E0;
  return sub_10009F6A8(a1, v5, v6, v7, v8, v9, v10, v3);
}

void static Notice.variant(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(_QWORD);
  char *v18;
  _QWORD v19[14];

  v2 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v2);
  v3 = sub_1000057B4(&qword_1004BDB80);
  v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  v5 = sub_1000057B4(&qword_1004BBCD8);
  v6 = __chkstk_darwin(v5);
  v7 = __chkstk_darwin(v6);
  __chkstk_darwin(v7);
  v19[10] = (char *)v19 - v8;
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v19[7] = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for String.LocalizationValue(0);
  v19[8] = *(_QWORD *)(v11 - 8);
  v19[9] = v11;
  v12 = __chkstk_darwin(v11);
  v19[6] = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = type metadata accessor for Notice.Variant(0);
  __chkstk_darwin(v14);
  v16 = (char *)v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A2258(a1, (uint64_t)v16, v17);
  v18 = (char *)sub_10009FF38 + 4 * word_1003CB1B8[swift_getEnumCaseMultiPayload(v16, v14)];
  __asm { BR              X10 }
}

uint64_t sub_10009FF38()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  void (*v18)(_QWORD *, uint64_t, uint64_t, uint64_t);
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;

  *(_QWORD *)(v8 - 112) = *v4;
  *(_QWORD *)(v8 - 152) = v4[1];
  v9 = sub_1000057B4(&qword_1004BBCF0);
  v10 = *(_QWORD *)((char *)v4 + *(int *)(v9 + 64));
  sub_1000A1F48((uint64_t)v4 + *(int *)(v9 + 48), v5);
  Notice.Variant.id.getter();
  *(_QWORD *)(v8 - 168) = v12;
  *(_QWORD *)(v8 - 160) = v11;
  sub_10000FEB4(v5, v2, &qword_1004BDB80);
  v13 = type metadata accessor for Artwork(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v2, 1, v13) == 1)
  {
    sub_10000FE2C(v2, &qword_1004BDB80);
    v15 = type metadata accessor for Notice.Thumbnail(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v1, 1, 1, v15);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v1, v2, v13);
    v15 = type metadata accessor for Notice.Thumbnail(0);
    swift_storeEnumTagMultiPayload(v1, v15, 1);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v1, 0, 1, v15);
  }
  type metadata accessor for Notice.Thumbnail(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v1, 1, v15);
  *(_QWORD *)(v8 - 176) = v15;
  if (v17 == 1)
  {
    *v6 = Image.init(_internalSystemName:)(0x6461622E74786574, 0xEF73756C702E6567);
    swift_storeEnumTagMultiPayload(v6, v15, 0);
    v18 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v16 + 56);
    v18(v6, 0, 1, v15);
    sub_10000FE2C(v1, &qword_1004BBCD8);
  }
  else
  {
    sub_1000A1F90(v1, (uint64_t)v6);
    v18 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v16 + 56);
    v18(v6, 0, 1, v15);
  }
  ((void (*)(uint64_t, uint64_t))String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:))(14, 1);
  v19._countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v19);
  *(_QWORD *)(v8 - 96) = v10;
  ((void (*)(uint64_t, uint64_t, unint64_t, void *, void *))String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:))(v8 - 96, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
  v20._countAndFlagsBits = 0x297328676E6F7320;
  v20._object = (void *)0xEE00646564646120;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v20);
  ((void (*)(uint64_t))String.LocalizationValue.init(stringInterpolation:))(v7);
  v22 = *(_QWORD *)(v8 - 128);
  v21 = *(_QWORD *)(v8 - 120);
  v23 = *(_QWORD *)(v8 - 144);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v23, v3, v21);
  if (qword_1004B8A10 != -1)
    swift_once(&qword_1004B8A10, sub_10002B2B8);
  v24 = qword_1004F4630;
  v25 = (id)qword_1004F4630;
  v26 = *(_QWORD *)(v8 - 136);
  static Locale.current.getter(v25);
  v27 = String.init(localized:table:bundle:locale:comment:)(v23, 0, 0, v24, v26, 0, 0, 256);
  *(_QWORD *)(v8 - 144) = v28;
  *(_QWORD *)(v8 - 136) = v27;
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v3, v21);
  v29 = (int *)type metadata accessor for Notice(0);
  v30 = (uint64_t)v0 + v29[5];
  v18((_QWORD *)v30, 1, 1, *(_QWORD *)(v8 - 176));
  v31 = (_QWORD *)((char *)v0 + v29[7]);
  *v31 = 0;
  v31[1] = 0;
  v32 = (_QWORD *)((char *)v0 + v29[8]);
  *v32 = 0;
  v32[1] = 0;
  v33 = (char *)v0 + v29[9];
  *(_QWORD *)v33 = 0;
  v33[8] = 1;
  v34 = v29[10];
  *((_BYTE *)v0 + v34) = 1;
  v35 = *(_QWORD *)(v8 - 168);
  *v0 = *(_QWORD *)(v8 - 160);
  v0[1] = v35;
  sub_1000A1E90((uint64_t)v6, v30);
  v36 = (_QWORD *)((char *)v0 + v29[6]);
  v37 = *(_QWORD *)(v8 - 152);
  *v36 = *(_QWORD *)(v8 - 112);
  v36[1] = v37;
  swift_bridgeObjectRelease(v31[1]);
  v38 = *(_QWORD *)(v8 - 144);
  *v31 = *(_QWORD *)(v8 - 136);
  v31[1] = v38;
  sub_10000DCF8(*v32, v32[1]);
  *v32 = 0;
  v32[1] = 0;
  *(_QWORD *)v33 = 0;
  v33[8] = 0;
  *((_BYTE *)v0 + v34) = 1;
  return sub_10000FE2C(v5, &qword_1004BDB80);
}

uint64_t Notice.thumbnail.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Notice(0);
  return sub_10000FEB4(v1 + *(int *)(v3 + 20), a1, &qword_1004BBCD8);
}

uint64_t Notice.thumbnail.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for Notice(0) + 20);
  return sub_1000A1E90(a1, v3);
}

CFRange (__swiftcall *Notice.thumbnail.modify())(__C::_NSRange)
{
  type metadata accessor for Notice(0);
  return CFRange.init(_:);
}

uint64_t Notice.message.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Notice(0) + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Notice.message.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for Notice(0) + 24));
  result = swift_bridgeObjectRelease(v5[1]);
  *v5 = a1;
  v5[1] = a2;
  return result;
}

CFRange (__swiftcall *Notice.message.modify())(__C::_NSRange)
{
  type metadata accessor for Notice(0);
  return CFRange.init(_:);
}

uint64_t Notice.headnote.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Notice(0) + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Notice.headnote.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for Notice(0) + 28));
  result = swift_bridgeObjectRelease(v5[1]);
  *v5 = a1;
  v5[1] = a2;
  return result;
}

CFRange (__swiftcall *Notice.headnote.modify())(__C::_NSRange)
{
  type metadata accessor for Notice(0);
  return CFRange.init(_:);
}

uint64_t Notice.link.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for Notice(0) + 32));
  v2 = *v1;
  sub_10000DCE8(*v1, v1[1]);
  return v2;
}

uint64_t Notice.link.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t result;

  v5 = (uint64_t *)(v2 + *(int *)(type metadata accessor for Notice(0) + 32));
  result = sub_10000DCF8(*v5, v5[1]);
  *v5 = a1;
  v5[1] = a2;
  return result;
}

CFRange (__swiftcall *Notice.link.modify())(__C::_NSRange)
{
  type metadata accessor for Notice(0);
  return CFRange.init(_:);
}

uint64_t Notice.hapticFeedback.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for Notice(0) + 36));
}

uint64_t Notice.hapticFeedback.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for Notice(0);
  v6 = v2 + *(int *)(result + 36);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

CFRange (__swiftcall *Notice.hapticFeedback.modify())(__C::_NSRange)
{
  type metadata accessor for Notice(0);
  return CFRange.init(_:);
}

uint64_t Notice.isDismissable.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Notice(0) + 40));
}

uint64_t Notice.isDismissable.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Notice(0);
  *(_BYTE *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

CFRange (__swiftcall *Notice.isDismissable.modify())(__C::_NSRange)
{
  type metadata accessor for Notice(0);
  return CFRange.init(_:);
}

uint64_t Notice.init(id:image:message:headnote:link:hapticFeedback:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void (*v19)(_QWORD *, uint64_t, uint64_t, uint64_t);
  int *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;

  v41 = a8;
  v35 = a5;
  v36 = a6;
  v33 = a2;
  v34 = a4;
  v40 = a12;
  v38 = a7;
  v39 = a11;
  v37 = a10;
  v15 = sub_1000057B4(&qword_1004BBCD8);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v17 = a3;
  v18 = type metadata accessor for Notice.Thumbnail(0);
  swift_storeEnumTagMultiPayload(v17, v18, 0);
  v19 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v19(v17, 0, 1, v18);
  v20 = (int *)type metadata accessor for Notice(0);
  v21 = (uint64_t)a9 + v20[5];
  v19((_QWORD *)v21, 1, 1, v18);
  v22 = (_QWORD *)((char *)a9 + v20[7]);
  *v22 = 0;
  v22[1] = 0;
  v23 = (_QWORD *)((char *)a9 + v20[8]);
  *v23 = 0;
  v23[1] = 0;
  v24 = (char *)a9 + v20[9];
  *(_QWORD *)v24 = 0;
  v24[8] = 1;
  v25 = v20[10];
  *((_BYTE *)a9 + v25) = 1;
  v26 = v33;
  *a9 = a1;
  a9[1] = v26;
  sub_1000A1E90((uint64_t)v17, v21);
  v27 = (_QWORD *)((char *)a9 + v20[6]);
  v28 = v35;
  *v27 = v34;
  v27[1] = v28;
  swift_bridgeObjectRelease(v22[1]);
  v29 = v38;
  *v22 = v36;
  v22[1] = v29;
  result = sub_10000DCF8(*v23, v23[1]);
  v31 = v37;
  *v23 = v41;
  v23[1] = v31;
  *(_QWORD *)v24 = v39;
  v24[8] = v40 & 1;
  *((_BYTE *)a9 + v25) = 1;
  return result;
}

uint64_t Notice.init(id:thumbnail:message:headnote:link:hapticFeedback:isDismissable:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, char a12, char a13)
{
  int *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t result;

  v16 = (int *)type metadata accessor for Notice(0);
  v17 = (uint64_t)a9 + v16[5];
  v18 = type metadata accessor for Notice.Thumbnail(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v19 = (_QWORD *)((char *)a9 + v16[7]);
  *v19 = 0;
  v19[1] = 0;
  v20 = (_QWORD *)((char *)a9 + v16[8]);
  *v20 = 0;
  v20[1] = 0;
  v21 = (char *)a9 + v16[9];
  *(_QWORD *)v21 = 0;
  v21[8] = 1;
  v22 = v16[10];
  *((_BYTE *)a9 + v22) = 1;
  *a9 = a1;
  a9[1] = a2;
  sub_1000A1E90(a3, v17);
  v23 = (_QWORD *)((char *)a9 + v16[6]);
  *v23 = a4;
  v23[1] = a5;
  swift_bridgeObjectRelease(v19[1]);
  *v19 = a6;
  v19[1] = a7;
  result = sub_10000DCF8(*v20, v20[1]);
  *v20 = a8;
  v20[1] = a10;
  *(_QWORD *)v21 = a11;
  v21[8] = a12 & 1;
  *((_BYTE *)a9 + v22) = a13;
  return result;
}

uint64_t Notice.init(id:symbol:message:headnote:link:hapticFeedback:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void (*v20)(_QWORD *, uint64_t, uint64_t, uint64_t);
  int *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;

  v35 = a5;
  v36 = a6;
  v34 = a2;
  v42 = a13;
  v40 = a12;
  v41 = a8;
  v38 = a11;
  v39 = a7;
  v37 = a10;
  sub_1000057B4(&qword_1004BBCD8);
  __chkstk_darwin();
  v18 = (uint64_t *)((char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v18 = Image.init(_internalSystemName:)(a3, a4);
  v19 = type metadata accessor for Notice.Thumbnail(0);
  swift_storeEnumTagMultiPayload(v18, v19, 0);
  v20 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
  v20(v18, 0, 1, v19);
  v21 = (int *)type metadata accessor for Notice(0);
  v22 = (uint64_t)a9 + v21[5];
  v20((_QWORD *)v22, 1, 1, v19);
  v23 = (_QWORD *)((char *)a9 + v21[7]);
  *v23 = 0;
  v23[1] = 0;
  v24 = (_QWORD *)((char *)a9 + v21[8]);
  *v24 = 0;
  v24[1] = 0;
  v25 = (char *)a9 + v21[9];
  *(_QWORD *)v25 = 0;
  v25[8] = 1;
  v26 = v21[10];
  *((_BYTE *)a9 + v26) = 1;
  v27 = v34;
  *a9 = a1;
  a9[1] = v27;
  sub_1000A1E90((uint64_t)v18, v22);
  v28 = (_QWORD *)((char *)a9 + v21[6]);
  v29 = v36;
  *v28 = v35;
  v28[1] = v29;
  swift_bridgeObjectRelease();
  v30 = v41;
  *v23 = v39;
  v23[1] = v30;
  result = sub_10000DCF8(*v24, v24[1]);
  v32 = v38;
  *v24 = v37;
  v24[1] = v32;
  *(_QWORD *)v25 = v40;
  v25[8] = v42 & 1;
  *((_BYTE *)a9 + v26) = 1;
  return result;
}

uint64_t Notice.withLink(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  sub_1000A2258(v3, a3, type metadata accessor for Notice);
  v7 = (uint64_t *)(a3 + *(int *)(type metadata accessor for Notice(0) + 32));
  v8 = *v7;
  v9 = v7[1];
  swift_retain(a2);
  result = sub_10000DCF8(v8, v9);
  *v7 = a1;
  v7[1] = a2;
  return result;
}

void Notice.Variant.id.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(_QWORD);
  char *v6;
  uint64_t v7;

  v1 = v0;
  v2 = type metadata accessor for Notice.Variant(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A2258(v1, (uint64_t)v4, v5);
  v6 = (char *)sub_1000A19A4 + 4 * byte_1003CB1D2[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }
}

uint64_t sub_1000A19A4()
{
  uint64_t v0;
  uint64_t v1;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 8));
  v1 = sub_1000057B4(&qword_1004BBCF0);
  sub_10000FE2C(v0 + *(int *)(v1 + 48), &qword_1004BDB80);
  return 0x506F546465646461;
}

uint64_t type metadata accessor for Notice.Variant(uint64_t a1)
{
  return sub_1000A1E5C(a1, (uint64_t *)&unk_1004BBEC0, (uint64_t)&nominal type descriptor for Notice.Variant);
}

uint64_t sub_1000A1B70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  void *v16;
  id v17;
  NSURL *v18;
  void *v19;
  void *v20;
  unsigned int v21;
  id v22;
  NSURL *v23;
  void *v24;
  void *v25;
  unint64_t v26;
  Class isa;
  uint64_t v29;
  char *v30;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v30 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000057B4(&qword_1004B99B0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v29 - v11;
  if (a2)
  {
    v13 = a2;
  }
  else
  {
    a1 = 0xD000000000000010;
    v13 = 0x80000001003A86B0;
  }
  swift_bridgeObjectRetain();
  v14 = sub_1000B8F50((uint64_t)_swiftEmptyArrayStorage);
  sub_100116AB8(a1, v13, 0xD000000000000032, 0x80000001003A86D0, (uint64_t)_swiftEmptyArrayStorage, v14, (uint64_t)_swiftEmptyArrayStorage, 1, (uint64_t)v12);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v14);
  sub_10000FEB4((uint64_t)v12, (uint64_t)v10, &qword_1004B99B0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    sub_10000FE2C((uint64_t)v12, &qword_1004B99B0);
  }
  else
  {
    v15 = v30;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v30, v10, v4);
    v16 = (void *)objc_opt_self(UIApplication);
    v17 = objc_msgSend(v16, "sharedApplication");
    URL._bridgeToObjectiveC()(v18);
    v20 = v19;
    v21 = objc_msgSend(v17, "canOpenURL:", v19);

    if (v21)
    {
      v22 = objc_msgSend(v16, "sharedApplication");
      URL._bridgeToObjectiveC()(v23);
      v25 = v24;
      v26 = sub_1000B8E1C((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for OpenExternalURLOptionsKey(0);
      sub_1000A44F4();
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v26);
      objc_msgSend(v22, "openURL:options:completionHandler:", v25, isa, 0);

    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v15, v4);
    v10 = v12;
  }
  return sub_10000FE2C((uint64_t)v10, &qword_1004B99B0);
}

uint64_t type metadata accessor for Notice.Thumbnail(uint64_t a1)
{
  return sub_1000A1E5C(a1, qword_1004BBE18, (uint64_t)&nominal type descriptor for Notice.Thumbnail);
}

uint64_t type metadata accessor for Notice(uint64_t a1)
{
  return sub_1000A1E5C(a1, (uint64_t *)&unk_1004BBD50, (uint64_t)&nominal type descriptor for Notice);
}

uint64_t sub_1000A1E5C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_1000A1E90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000057B4(&qword_1004BBCD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A1ED8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A1EFC()
{
  uint64_t v0;

  return sub_1000A1B70(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_1000A1F04()
{
  unint64_t result;

  result = qword_1004BBCE8;
  if (!qword_1004BBCE8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1004BBCE8);
  }
  return result;
}

uint64_t sub_1000A1F48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000057B4(&qword_1004BDB80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A1F90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Notice.Thumbnail(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _s9MusicCore6NoticeV9ThumbnailO21__derived_enum_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int EnumCaseMultiPayload;
  char *v19;
  uint64_t v20;
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v27 = type metadata accessor for Artwork(0);
  v4 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Notice.Thumbnail(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (uint64_t *)((char *)&v26 - v11);
  v13 = sub_1000057B4(&qword_1004BBF08);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = &v16[*(int *)(v14 + 48)];
  sub_1000A2258(a1, (uint64_t)v16, type metadata accessor for Notice.Thumbnail);
  sub_1000A2258(a2, (uint64_t)v17, type metadata accessor for Notice.Thumbnail);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16, v7);
  if (!EnumCaseMultiPayload)
  {
    sub_1000A2258((uint64_t)v16, (uint64_t)v12, type metadata accessor for Notice.Thumbnail);
    v23 = *v12;
    if (!swift_getEnumCaseMultiPayload(v17, v7))
    {
      v24 = *(_QWORD *)v17;
      v21 = static Image.== infix(_:_:)(v23, *(_QWORD *)v17);
      swift_release(v23);
      swift_release(v24);
      goto LABEL_12;
    }
    swift_release(v23);
    goto LABEL_10;
  }
  if (EnumCaseMultiPayload == 1)
  {
    sub_1000A2258((uint64_t)v16, (uint64_t)v10, type metadata accessor for Notice.Thumbnail);
    if (swift_getEnumCaseMultiPayload(v17, v7) == 1)
    {
      v19 = v17;
      v20 = v27;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v19, v27);
      v21 = static Artwork.== infix(_:_:)(v10, v6);
      v22 = *(void (**)(char *, uint64_t))(v4 + 8);
      v22(v6, v20);
      v22(v10, v20);
LABEL_12:
      sub_100034960((uint64_t)v16, type metadata accessor for Notice.Thumbnail);
      return v21 & 1;
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v27);
    goto LABEL_10;
  }
  if (swift_getEnumCaseMultiPayload(v17, v7) != 2)
  {
LABEL_10:
    sub_10000FE2C((uint64_t)v16, &qword_1004BBF08);
    v21 = 0;
    return v21 & 1;
  }
  sub_100034960((uint64_t)v16, type metadata accessor for Notice.Thumbnail);
  v21 = 1;
  return v21 & 1;
}

uint64_t sub_1000A2258(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s9MusicCore6NoticeV2eeoiySbAC_ACtFZ_0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  _QWORD *v81;
  uint64_t v82;

  v4 = type metadata accessor for Notice.Thumbnail(0);
  v75 = *(_QWORD *)(v4 - 8);
  v76 = v4;
  __chkstk_darwin(v4);
  v73 = (uint64_t)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000057B4(&qword_1004BBCD8);
  __chkstk_darwin(v6);
  v74 = (uint64_t)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000057B4(&qword_1004BBF00);
  __chkstk_darwin(v8);
  v10 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for Notice(0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v82 = (uint64_t)&v73 - v16;
  v17 = __chkstk_darwin(v15);
  v79 = (char *)&v73 - v18;
  v19 = __chkstk_darwin(v17);
  v80 = (char *)&v73 - v20;
  v21 = __chkstk_darwin(v19);
  v78 = (uint64_t)&v73 - v22;
  v23 = __chkstk_darwin(v21);
  v77 = (uint64_t)&v73 - v24;
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v73 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v73 - v28;
  v30 = *a1;
  v31 = a1[1];
  v32 = *a2;
  v33 = a2[1];
  v34 = *a1 == *a2;
  v81 = a2;
  if (v34 && v31 == v33)
  {
    sub_1000A2258((uint64_t)a1, (uint64_t)&v73 - v28, type metadata accessor for Notice);
    sub_1000A2258((uint64_t)a2, (uint64_t)v27, type metadata accessor for Notice);
  }
  else
  {
    v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, v32, v33, 0);
    sub_1000A2258((uint64_t)a1, (uint64_t)v29, type metadata accessor for Notice);
    sub_1000A2258((uint64_t)a2, (uint64_t)v27, type metadata accessor for Notice);
    if ((v35 & 1) == 0)
    {
      sub_100034960((uint64_t)v27, type metadata accessor for Notice);
      sub_100034960((uint64_t)v29, type metadata accessor for Notice);
      goto LABEL_13;
    }
  }
  v36 = v11[5];
  v37 = (uint64_t)&v27[v36];
  v38 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_10000FEB4((uint64_t)&v29[v36], (uint64_t)v10, &qword_1004BBCD8);
  sub_10000FEB4(v37, v38, &qword_1004BBCD8);
  v39 = v76;
  v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48);
  if (v40((uint64_t)v10, 1, v76) != 1)
  {
    v46 = v74;
    sub_10000FEB4((uint64_t)v10, v74, &qword_1004BBCD8);
    if (v40(v38, 1, v39) != 1)
    {
      v49 = v38;
      v50 = v73;
      sub_1000A1F90(v49, v73);
      v51 = _s9MusicCore6NoticeV9ThumbnailO21__derived_enum_equalsySbAE_AEtFZ_0(v46, v50);
      sub_100034960(v50, type metadata accessor for Notice.Thumbnail);
      sub_100034960((uint64_t)v27, type metadata accessor for Notice);
      sub_100034960((uint64_t)v29, type metadata accessor for Notice);
      sub_100034960(v46, type metadata accessor for Notice.Thumbnail);
      sub_10000FE2C((uint64_t)v10, &qword_1004BBCD8);
      v41 = v77;
      sub_1000A2258((uint64_t)a1, v77, type metadata accessor for Notice);
      v42 = (uint64_t)v81;
      v43 = v78;
      sub_1000A2258((uint64_t)v81, v78, type metadata accessor for Notice);
      v45 = (uint64_t)v79;
      v44 = (uint64_t)v80;
      if ((v51 & 1) != 0)
        goto LABEL_20;
LABEL_14:
      sub_100034960(v41, type metadata accessor for Notice);
      sub_100034960(v43, type metadata accessor for Notice);
      sub_1000A2258((uint64_t)a1, v44, type metadata accessor for Notice);
      sub_1000A2258(v42, v45, type metadata accessor for Notice);
      goto LABEL_15;
    }
    sub_100034960((uint64_t)v27, type metadata accessor for Notice);
    sub_100034960((uint64_t)v29, type metadata accessor for Notice);
    sub_100034960(v46, type metadata accessor for Notice.Thumbnail);
    goto LABEL_11;
  }
  sub_100034960((uint64_t)v27, type metadata accessor for Notice);
  sub_100034960((uint64_t)v29, type metadata accessor for Notice);
  if (v40(v38, 1, v39) != 1)
  {
LABEL_11:
    sub_10000FE2C((uint64_t)v10, &qword_1004BBF00);
LABEL_13:
    v44 = (uint64_t)v80;
    v42 = (uint64_t)v81;
    v43 = v78;
    v45 = (uint64_t)v79;
    v41 = v77;
    sub_1000A2258((uint64_t)a1, v77, type metadata accessor for Notice);
    sub_1000A2258(v42, v43, type metadata accessor for Notice);
    goto LABEL_14;
  }
  sub_10000FE2C((uint64_t)v10, &qword_1004BBCD8);
  v41 = v77;
  sub_1000A2258((uint64_t)a1, v77, type metadata accessor for Notice);
  v42 = (uint64_t)v81;
  v43 = v78;
  sub_1000A2258((uint64_t)v81, v78, type metadata accessor for Notice);
  v45 = (uint64_t)v79;
  v44 = (uint64_t)v80;
LABEL_20:
  v52 = v11[6];
  v53 = *(_QWORD *)(v41 + v52);
  v54 = *(_QWORD *)(v41 + v52 + 8);
  v55 = (_QWORD *)(v43 + v52);
  v56 = v55[1];
  if (v53 == *v55 && v54 == v56)
  {
    sub_100034960(v41, type metadata accessor for Notice);
    sub_100034960(v43, type metadata accessor for Notice);
    sub_1000A2258((uint64_t)a1, v44, type metadata accessor for Notice);
    sub_1000A2258(v42, v45, type metadata accessor for Notice);
    goto LABEL_24;
  }
  v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v53, v54, *v55, v56, 0);
  sub_100034960(v41, type metadata accessor for Notice);
  sub_100034960(v43, type metadata accessor for Notice);
  sub_1000A2258((uint64_t)a1, v44, type metadata accessor for Notice);
  sub_1000A2258(v42, v45, type metadata accessor for Notice);
  if ((v57 & 1) == 0)
  {
LABEL_15:
    sub_100034960(v45, type metadata accessor for Notice);
    sub_100034960(v44, type metadata accessor for Notice);
LABEL_16:
    sub_1000A2258((uint64_t)a1, v82, type metadata accessor for Notice);
    sub_1000A2258(v42, (uint64_t)v14, type metadata accessor for Notice);
    goto LABEL_17;
  }
LABEL_24:
  v58 = (uint64_t)v14;
  v59 = v11;
  v60 = v11[7];
  v61 = (_QWORD *)(v44 + v60);
  v62 = *(_QWORD *)(v44 + v60 + 8);
  v63 = (_QWORD *)(v45 + v60);
  v64 = v63[1];
  if (!v62)
  {
    swift_bridgeObjectRetain();
    sub_100034960(v45, type metadata accessor for Notice);
    sub_100034960(v44, type metadata accessor for Notice);
    if (!v64)
      goto LABEL_31;
    v65 = v64;
    goto LABEL_33;
  }
  if (!v64)
  {
    swift_bridgeObjectRetain();
    sub_100034960(v45, type metadata accessor for Notice);
    sub_100034960(v44, type metadata accessor for Notice);
    v65 = v62;
LABEL_33:
    swift_bridgeObjectRelease(v65);
    v14 = (char *)v58;
    goto LABEL_16;
  }
  if (*v61 == *v63 && v62 == v64)
  {
    swift_bridgeObjectRetain();
    sub_100034960(v45, type metadata accessor for Notice);
    sub_100034960(v44, type metadata accessor for Notice);
    swift_bridgeObjectRelease(v62);
LABEL_31:
    sub_1000A2258((uint64_t)a1, v82, type metadata accessor for Notice);
    v14 = (char *)v58;
    sub_1000A2258(v42, v58, type metadata accessor for Notice);
    goto LABEL_35;
  }
  v66 = _stringCompareWithSmolCheck(_:_:expecting:)(*v61, v62, *v63, v63[1], 0);
  swift_bridgeObjectRetain();
  sub_100034960(v45, type metadata accessor for Notice);
  sub_100034960(v44, type metadata accessor for Notice);
  swift_bridgeObjectRelease(v62);
  sub_1000A2258((uint64_t)a1, v82, type metadata accessor for Notice);
  v14 = (char *)v58;
  sub_1000A2258(v42, v58, type metadata accessor for Notice);
  if ((v66 & 1) == 0)
  {
LABEL_17:
    sub_100034960((uint64_t)v14, type metadata accessor for Notice);
    sub_100034960(v82, type metadata accessor for Notice);
    return 0;
  }
LABEL_35:
  v67 = (uint64_t *)(v82 + v59[9]);
  v68 = (uint64_t)v14;
  v69 = *v67;
  v70 = *((_BYTE *)v67 + 8);
  sub_100034960(v82, type metadata accessor for Notice);
  v71 = v68 + v59[9];
  v72 = *(_QWORD *)v71;
  v47 = *(unsigned __int8 *)(v71 + 8);
  sub_100034960(v68, type metadata accessor for Notice);
  if ((v70 & 1) == 0)
    return (v69 == v72) & ~(_DWORD)v47;
  return v47;
}

_QWORD *initializeBufferWithCopyOfBuffer for Notice(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  int EnumCaseMultiPayload;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (_QWORD *)((char *)a1 + v8);
    v10 = (_QWORD *)((char *)a2 + v8);
    v11 = type metadata accessor for Notice.Thumbnail(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      v14 = sub_1000057B4(&qword_1004BBCD8);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v11);
      if (EnumCaseMultiPayload == 1)
      {
        v18 = type metadata accessor for Artwork(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v9, v10, v18);
        swift_storeEnumTagMultiPayload(v9, v11, 1);
      }
      else if (EnumCaseMultiPayload)
      {
        memcpy(v9, v10, *(_QWORD *)(v12 + 64));
      }
      else
      {
        v17 = *v10;
        *v9 = *v10;
        swift_retain(v17);
        swift_storeEnumTagMultiPayload(v9, v11, 0);
      }
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v19 = a3[6];
    v20 = a3[7];
    v21 = (_QWORD *)((char *)v4 + v19);
    v22 = (_QWORD *)((char *)a2 + v19);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = (_QWORD *)((char *)v4 + v20);
    v25 = (_QWORD *)((char *)a2 + v20);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    v27 = a3[8];
    v28 = (_QWORD *)((char *)v4 + v27);
    v29 = (char *)a2 + v27;
    v30 = *(_QWORD *)((char *)a2 + v27);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v30)
    {
      v31 = *((_QWORD *)v29 + 1);
      *v28 = v30;
      v28[1] = v31;
      swift_retain(v31);
    }
    else
    {
      *(_OWORD *)v28 = *(_OWORD *)v29;
    }
    v32 = a3[9];
    v33 = a3[10];
    v34 = (char *)v4 + v32;
    v35 = (char *)a2 + v32;
    *(_QWORD *)v34 = *(_QWORD *)v35;
    v34[8] = v35[8];
    *((_BYTE *)v4 + v33) = *((_BYTE *)a2 + v33);
  }
  return v4;
}

double destroy for Notice(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  double result;
  _QWORD *v7;
  int EnumCaseMultiPayload;
  uint64_t v9;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = (_QWORD *)(a1 + a2[5]);
  v5 = type metadata accessor for Notice.Thumbnail(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4, v5);
    if (EnumCaseMultiPayload == 1)
    {
      v9 = type metadata accessor for Artwork(0);
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v4, v9);
    }
    else if (!EnumCaseMultiPayload)
    {
      swift_release(*v4);
    }
  }
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  v7 = (_QWORD *)(a1 + a2[8]);
  if (*v7)
    *(_QWORD *)&result = swift_release(v7[1]).n128_u64[0];
  return result;
}

_QWORD *initializeWithCopy for Notice(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t *, uint64_t, uint64_t);
  uint64_t v13;
  int EnumCaseMultiPayload;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (_QWORD *)((char *)a1 + v7);
  v9 = (_QWORD *)((char *)a2 + v7);
  v10 = type metadata accessor for Notice.Thumbnail(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    v13 = sub_1000057B4(&qword_1004BBCD8);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v10);
    if (EnumCaseMultiPayload == 1)
    {
      v16 = type metadata accessor for Artwork(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v8, v9, v16);
      swift_storeEnumTagMultiPayload(v8, v10, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(v8, v9, *(_QWORD *)(v11 + 64));
    }
    else
    {
      v15 = *v9;
      *v8 = *v9;
      swift_retain(v15);
      swift_storeEnumTagMultiPayload(v8, v10, 0);
    }
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v17 = a3[6];
  v18 = a3[7];
  v19 = (_QWORD *)((char *)a1 + v17);
  v20 = (_QWORD *)((char *)a2 + v17);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v22 = (_QWORD *)((char *)a1 + v18);
  v23 = (_QWORD *)((char *)a2 + v18);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = a3[8];
  v26 = (_QWORD *)((char *)a1 + v25);
  v27 = (char *)a2 + v25;
  v28 = *(_QWORD *)((char *)a2 + v25);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v28)
  {
    v29 = *((_QWORD *)v27 + 1);
    *v26 = v28;
    v26[1] = v29;
    swift_retain(v29);
  }
  else
  {
    *(_OWORD *)v26 = *(_OWORD *)v27;
  }
  v30 = a3[9];
  v31 = a3[10];
  v32 = (char *)a1 + v30;
  v33 = (char *)a2 + v30;
  *(_QWORD *)v32 = *(_QWORD *)v33;
  v32[8] = v33[8];
  *((_BYTE *)a1 + v31) = *((_BYTE *)a2 + v31);
  return a1;
}

_QWORD *assignWithCopy for Notice(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t *, uint64_t, uint64_t);
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  int EnumCaseMultiPayload;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v42;

  *a1 = *a2;
  v6 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v6);
  v7 = a3[5];
  v8 = (_QWORD *)((char *)a1 + v7);
  v9 = (_QWORD *)((char *)a2 + v7);
  v10 = type metadata accessor for Notice.Thumbnail(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      if (a1 == a2)
        goto LABEL_17;
      sub_100034960((uint64_t)v8, type metadata accessor for Notice.Thumbnail);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v10);
      if (EnumCaseMultiPayload == 1)
      {
        v42 = type metadata accessor for Artwork(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v8, v9, v42);
        swift_storeEnumTagMultiPayload(v8, v10, 1);
        goto LABEL_17;
      }
      if (!EnumCaseMultiPayload)
      {
        v19 = *v9;
        *v8 = *v9;
        swift_retain(v19);
        swift_storeEnumTagMultiPayload(v8, v10, 0);
        goto LABEL_17;
      }
      v17 = *(_QWORD *)(v11 + 64);
LABEL_9:
      memcpy(v8, v9, v17);
      goto LABEL_17;
    }
    sub_100034960((uint64_t)v8, type metadata accessor for Notice.Thumbnail);
LABEL_8:
    v17 = *(_QWORD *)(*(_QWORD *)(sub_1000057B4(&qword_1004BBCD8) - 8) + 64);
    goto LABEL_9;
  }
  if (v14)
    goto LABEL_8;
  v15 = swift_getEnumCaseMultiPayload(v9, v10);
  if (v15 == 1)
  {
    v20 = type metadata accessor for Artwork(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v8, v9, v20);
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else if (v15)
  {
    memcpy(v8, v9, *(_QWORD *)(v11 + 64));
  }
  else
  {
    v16 = *v9;
    *v8 = *v9;
    swift_retain(v16);
    swift_storeEnumTagMultiPayload(v8, v10, 0);
  }
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_17:
  v21 = a3[6];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  *v22 = *v23;
  v24 = v22[1];
  v22[1] = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v24);
  v25 = a3[7];
  v26 = (_QWORD *)((char *)a1 + v25);
  v27 = (_QWORD *)((char *)a2 + v25);
  *v26 = *v27;
  v28 = v26[1];
  v26[1] = v27[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v28);
  v29 = a3[8];
  v30 = (_QWORD *)((char *)a1 + v29);
  v31 = (char *)a2 + v29;
  v32 = *(_QWORD *)((char *)a1 + v29);
  v33 = *(_QWORD *)((char *)a2 + v29);
  if (!v32)
  {
    if (v33)
    {
      v36 = *((_QWORD *)v31 + 1);
      *v30 = v33;
      v30[1] = v36;
      swift_retain(v36);
      goto LABEL_24;
    }
LABEL_23:
    *(_OWORD *)v30 = *(_OWORD *)v31;
    goto LABEL_24;
  }
  if (!v33)
  {
    swift_release(v30[1]);
    goto LABEL_23;
  }
  v34 = *((_QWORD *)v31 + 1);
  v35 = v30[1];
  *v30 = v33;
  v30[1] = v34;
  swift_retain(v34);
  swift_release(v35);
LABEL_24:
  v37 = a3[9];
  v38 = (char *)a1 + v37;
  v39 = (char *)a2 + v37;
  v40 = *(_QWORD *)v39;
  v38[8] = v39[8];
  *(_QWORD *)v38 = v40;
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

_OWORD *initializeWithTake for Notice(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Notice.Thumbnail(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_1000057B4(&qword_1004BBCD8);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
    {
      v12 = type metadata accessor for Artwork(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v7, v8, v12);
      swift_storeEnumTagMultiPayload(v7, v9, 1);
    }
    else
    {
      memcpy(v7, v8, *(_QWORD *)(v10 + 64));
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  v14 = a3[8];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (uint64_t *)((char *)a2 + v14);
  v17 = *v16;
  if (*v16)
  {
    v18 = v16[1];
    *v15 = v17;
    v15[1] = v18;
  }
  else
  {
    *(_OWORD *)v15 = *(_OWORD *)v16;
  }
  v19 = a3[9];
  v20 = a3[10];
  v21 = (char *)a1 + v19;
  v22 = (char *)a2 + v19;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  *((_BYTE *)a1 + v20) = *((_BYTE *)a2 + v20);
  return a1;
}

_QWORD *assignWithTake for Notice(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Notice.Thumbnail(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      if (a1 == a2)
        goto LABEL_14;
      sub_100034960((uint64_t)v9, type metadata accessor for Notice.Thumbnail);
      if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
      {
        v18 = type metadata accessor for Artwork(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v9, v10, v18);
        swift_storeEnumTagMultiPayload(v9, v11, 1);
        goto LABEL_14;
      }
      v17 = *(_QWORD *)(v12 + 64);
LABEL_8:
      memcpy(v9, v10, v17);
      goto LABEL_14;
    }
    sub_100034960((uint64_t)v9, type metadata accessor for Notice.Thumbnail);
LABEL_7:
    v17 = *(_QWORD *)(*(_QWORD *)(sub_1000057B4(&qword_1004BBCD8) - 8) + 64);
    goto LABEL_8;
  }
  if (v15)
    goto LABEL_7;
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v16 = type metadata accessor for Artwork(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v9, v10, v16);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(v12 + 64));
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_14:
  v19 = a3[6];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  v23 = *v21;
  v22 = v21[1];
  v24 = v20[1];
  *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease(v24);
  v25 = a3[7];
  v26 = (_QWORD *)((char *)a1 + v25);
  v27 = (_QWORD *)((char *)a2 + v25);
  v29 = *v27;
  v28 = v27[1];
  v30 = v26[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease(v30);
  v31 = a3[8];
  v32 = (_QWORD *)((char *)a1 + v31);
  v33 = (char *)a2 + v31;
  v34 = *(_QWORD *)((char *)a1 + v31);
  v35 = *(_QWORD *)((char *)a2 + v31);
  if (!v34)
  {
    if (v35)
    {
      v38 = *((_QWORD *)v33 + 1);
      *v32 = v35;
      v32[1] = v38;
      goto LABEL_21;
    }
LABEL_20:
    *(_OWORD *)v32 = *(_OWORD *)v33;
    goto LABEL_21;
  }
  if (!v35)
  {
    swift_release(v32[1]);
    goto LABEL_20;
  }
  v36 = *((_QWORD *)v33 + 1);
  v37 = v32[1];
  *v32 = v35;
  v32[1] = v36;
  swift_release(v37);
LABEL_21:
  v39 = a3[9];
  v40 = a3[10];
  v41 = (char *)a1 + v39;
  v42 = (char *)a2 + v39;
  *(_QWORD *)v41 = *(_QWORD *)v42;
  v41[8] = v42[8];
  *((_BYTE *)a1 + v40) = *((_BYTE *)a2 + v40);
  return a1;
}

uint64_t getEnumTagSinglePayload for Notice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A3610);
}

uint64_t sub_1000A3610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1000057B4(&qword_1004BBCD8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for Notice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A369C);
}

uint64_t sub_1000A369C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1000057B4(&qword_1004BBCD8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

void sub_1000A3714(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_1003CB280;
  sub_1000A44A8(319, (unint64_t *)&unk_1004BBD60, type metadata accessor for Notice.Thumbnail);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_1003CB280;
    v4[3] = &unk_1003CB298;
    v4[4] = &unk_1003CB298;
    v4[5] = &unk_1003CB2B0;
    v4[6] = &unk_1003CB2C8;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for Notice.Thumbnail(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v10);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v11 = type metadata accessor for Artwork(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v9 = *a2;
      *a1 = *a2;
      swift_retain(v9);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t destroy for Notice.Thumbnail(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 1)
  {
    v4 = type metadata accessor for Artwork(0);
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  else if (!(_DWORD)result)
  {
    return swift_release(*a1);
  }
  return result;
}

uint64_t *initializeWithCopy for Notice.Thumbnail(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    v8 = type metadata accessor for Artwork(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = *a2;
    *a1 = *a2;
    swift_retain(v7);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

uint64_t *assignWithCopy for Notice.Thumbnail(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_100034960((uint64_t)a1, type metadata accessor for Notice.Thumbnail);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v8 = type metadata accessor for Artwork(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = *a2;
      *a1 = *a2;
      swift_retain(v7);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

void *initializeWithTake for Notice.Thumbnail(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for Artwork(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for Notice.Thumbnail(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_100034960((uint64_t)a1, type metadata accessor for Notice.Thumbnail);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for Artwork(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000A3B98(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for Artwork(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Notice.Variant(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v17);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v19 = a2[1];
      *a1 = *a2;
      a1[1] = v19;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v20 = a2[1];
      *a1 = *a2;
      a1[1] = v20;
      v21 = a2[2];
      v22 = a2[3];
      a1[2] = v21;
      a1[3] = v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      swift_bridgeObjectRetain();
      v10 = sub_1000057B4(&qword_1004BBCF0);
      v11 = *(int *)(v10 + 48);
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for Artwork(0);
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        v16 = sub_1000057B4(&qword_1004BDB80);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      *(uint64_t *)((char *)a1 + *(int *)(v10 + 64)) = *(uint64_t *)((char *)a2 + *(int *)(v10 + 64));
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t destroy for Notice.Variant(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((_DWORD)result)
  {
    case 2:
      v7 = *(_QWORD *)(a1 + 8);
      return swift_bridgeObjectRelease(v7);
    case 1:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      v7 = *(_QWORD *)(a1 + 24);
      return swift_bridgeObjectRelease(v7);
    case 0:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      v4 = a1 + *(int *)(sub_1000057B4(&qword_1004BBCF0) + 48);
      v5 = type metadata accessor for Artwork(0);
      v6 = *(_QWORD *)(v5 - 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
      if (!(_DWORD)result)
        return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
      break;
  }
  return result;
}

_QWORD *initializeWithCopy for Notice.Variant(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v15 = a2[1];
      *a1 = *a2;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      v16 = a1;
      v17 = a3;
      v18 = 2;
LABEL_11:
      swift_storeEnumTagMultiPayload(v16, v17, v18);
      return a1;
    case 1:
      v19 = a2[1];
      *a1 = *a2;
      a1[1] = v19;
      v20 = a2[2];
      v21 = a2[3];
      a1[2] = v20;
      a1[3] = v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v16 = a1;
      v17 = a3;
      v18 = 1;
      goto LABEL_11;
    case 0:
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      swift_bridgeObjectRetain();
      v8 = sub_1000057B4(&qword_1004BBCF0);
      v9 = *(int *)(v8 + 48);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for Artwork(0);
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        v14 = sub_1000057B4(&qword_1004BDB80);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      *(_QWORD *)((char *)a1 + *(int *)(v8 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v8 + 64));
      v16 = a1;
      v17 = a3;
      v18 = 0;
      goto LABEL_11;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_QWORD *assignWithCopy for Notice.Variant(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 == a2)
    return a1;
  sub_100034960((uint64_t)a1, type metadata accessor for Notice.Variant);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      v14 = a1;
      v15 = a3;
      v16 = 2;
LABEL_12:
      swift_storeEnumTagMultiPayload(v14, v15, v16);
      return a1;
    case 1:
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v14 = a1;
      v15 = a3;
      v16 = 1;
      goto LABEL_12;
    case 0:
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      v7 = sub_1000057B4(&qword_1004BBCF0);
      v8 = *(int *)(v7 + 48);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for Artwork(0);
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        v13 = sub_1000057B4(&qword_1004BDB80);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
      *(_QWORD *)((char *)a1 + *(int *)(v7 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v7 + 64));
      v14 = a1;
      v15 = a3;
      v16 = 0;
      goto LABEL_12;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_OWORD *initializeWithTake for Notice.Variant(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v6 = sub_1000057B4(&qword_1004BBCF0);
    v7 = *(int *)(v6 + 48);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for Artwork(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = sub_1000057B4(&qword_1004BDB80);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    *(_QWORD *)((char *)a1 + *(int *)(v6 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v6 + 64));
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

_OWORD *assignWithTake for Notice.Variant(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_100034960((uint64_t)a1, type metadata accessor for Notice.Variant);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      v6 = sub_1000057B4(&qword_1004BBCF0);
      v7 = *(int *)(v6 + 48);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for Artwork(0);
      v11 = *(_QWORD *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        v12 = sub_1000057B4(&qword_1004BDB80);
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
      *(_QWORD *)((char *)a1 + *(int *)(v6 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v6 + 64));
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

void sub_1000A4400(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _BYTE v4[32];
  _QWORD v5[3];

  sub_1000A44A8(319, (unint64_t *)&unk_1004BBED0, (uint64_t (*)(uint64_t))&type metadata accessor for Artwork);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout3(v4, &unk_1003CB280, *(_QWORD *)(v2 - 8) + 64, (char *)&value witness table for Builtin.Int64 + 64);
    v5[0] = v4;
    v5[1] = " ";
    v5[2] = &unk_1003CB298;
    swift_initEnumMetadataMultiPayload(a1, 256, 3, v5);
  }
}

void sub_1000A44A8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

unint64_t sub_1000A44F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1004BF780;
  if (!qword_1004BF780)
  {
    type metadata accessor for OpenExternalURLOptionsKey(255);
    result = swift_getWitnessTable(&unk_1003C9138, v1);
    atomic_store(result, (unint64_t *)&qword_1004BF780);
  }
  return result;
}

uint64_t sub_1000A4544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v8 = type metadata accessor for Notice(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Notice.variant(_:)(a1);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(a4 + 8))(v10, a2, a3, a4);
  return sub_1000A49A0((uint64_t)v10);
}

uint64_t sub_1000A45E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t PresentedViewState<A>.present(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)a1;
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  *(_OWORD *)(v2 + 72) = v3;
  *(_BYTE *)(v2 + 113) = *(_BYTE *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(v2 + 88) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v2 + 96) = v4;
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v2 + 104) = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000A4670, v7, v8);
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_1000057B4(&qword_1004C5640);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL(0);
  v2[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[6] = v5;
  v2[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MainActor(0);
  v2[8] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v2[9] = v8;
  v2[10] = v9;
  return swift_task_switch(sub_1002BB2F4, v8, v9);
}

uint64_t sub_1000A4670()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t KeyPath;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_BYTE *)(v0 + 113);
  v21 = *(_QWORD *)(v0 + 88);
  v22 = *(_QWORD *)(v0 + 96);
  v18 = *(_OWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 48);
  v17 = *(_QWORD *)(v0 + 56);
  v19 = *(_QWORD *)(v0 + 80);
  v20 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 104));
  v16 = v1 & 1;
  v3 = (uint64_t *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 96));
  swift_beginAccess(v3, v0 + 16, 1, 0);
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  v8 = v3[4];
  v9 = v3[5];
  v10 = (void *)v3[6];
  *v3 = v17;
  *(_OWORD *)(v3 + 1) = v18;
  v3[3] = v19;
  v3[4] = v16;
  v3[5] = v21;
  v3[6] = v22;
  sub_1000A47F8(v20);
  sub_1000A4848(v4, v5, v6, v7, v8, v9, v10);
  v11 = (_QWORD *)swift_task_alloc(16);
  *v11 = &type metadata for Alert;
  KeyPath = swift_getKeyPath(&unk_1003CB310);
  swift_task_dealloc(v11);
  v13 = (_QWORD *)swift_task_alloc(16);
  *v13 = &type metadata for Alert;
  v14 = swift_getKeyPath(&unk_1003CB348);
  swift_task_dealloc(v13);
  *(_BYTE *)(v0 + 112) = 1;
  swift_retain(v2);
  static Published.subscript.setter(v0 + 112, v2, KeyPath, v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A47F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(id *)(a1 + 48);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void sub_1000A4848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  if (a6)
  {
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);

  }
}

uint64_t sub_1000A4898(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1004BBF14);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10002E8E0;
  return PresentedViewState<A>.present(_:)(a1);
}

uint64_t sub_1000A48E8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = PresentedViewState.isPresented.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000A4914@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = PresentedViewState.isPresented.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000A4940(char *a1)
{
  return PresentedViewState.isPresented.setter(*a1);
}

uint64_t sub_1000A4964(char *a1)
{
  return PresentedViewState.isPresented.setter(*a1);
}

uint64_t sub_1000A4988()
{
  return 8;
}

_QWORD *sub_1000A4994(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1000A49A0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Notice(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Logger.actions.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1004B8A30 != -1)
    swift_once(&qword_1004B8A30, sub_1000A6660);
  v0 = type metadata accessor for Logger(0);
  return sub_100039D34(v0, (uint64_t)static Logger.actions);
}

uint64_t ActionDeclaring.init(context:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _BYTE v29[32];

  v28 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3);
  v8 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v26 - v11;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = __chkstk_darwin(v10);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v26 - v17;
  v27 = a1;
  sub_10000990C((uint64_t)a1, (uint64_t)v29);
  v19 = sub_1000057B4(&qword_1004BBF20);
  v20 = swift_dynamicCast(v12, v29, v19, AssociatedTypeWitness, 6);
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  if ((v20 & 1) != 0)
  {
    v21(v12, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v12, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, AssociatedTypeWitness);
    v22 = v28;
    (*(void (**)(char *, uint64_t, uint64_t))(a3 + 24))(v16, a2, a3);
    sub_10000970C(v27);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, AssociatedTypeWitness);
    v23 = 0;
    v24 = v22;
  }
  else
  {
    v23 = 1;
    v21(v12, 1, 1, AssociatedTypeWitness);
    sub_10000970C(v27);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    v24 = v28;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(v24, v23, 1, a2);
}

uint64_t AnyAction.init(identifier:contexts:resolver:logs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  void (*v54)(_BYTE *, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  Swift::String v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  Swift::String v73;
  uint64_t v74;
  uint64_t result;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (**v81)(uint64_t);
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  Swift::String v89;
  uint64_t *v90;
  uint64_t v91;
  void *v92;
  Swift::String v93;
  Swift::String v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  Swift::String v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  void *v105;
  Swift::String v106;
  Swift::String v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  _QWORD *v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  int *v132;
  _BYTE v133[32];
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;

  v124 = a4;
  v131 = *(_QWORD *)(a5 - 8);
  __chkstk_darwin(a1);
  v120 = (char *)&v113 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for AnyAction(0, v15, v16, v14);
  v130 = *(_QWORD *)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v122 = (uint64_t)&v113 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (int *)__chkstk_darwin(v18);
  v22 = (char *)&v113 - v21;
  v23 = (char *)&v113 + v20[10] - v21;
  *(_OWORD *)v23 = xmmword_1003C6C70;
  *((_OWORD *)v23 + 1) = 0u;
  *((_OWORD *)v23 + 2) = 0u;
  v125 = v20[11];
  *(uint64_t *)((char *)&v113 + v125 - v21) = 0;
  v24 = (uint64_t *)((char *)&v113 + v20[12] - v21);
  *v24 = 0;
  v24[1] = 0;
  v126 = v24;
  v25 = (uint64_t *)((char *)&v113 + v20[13] - v21);
  *v25 = 0;
  v25[1] = 0;
  v26 = (uint64_t *)((char *)&v113 + v20[14] - v21);
  *v26 = 0;
  v26[1] = 0;
  v129 = v26;
  v132 = v20;
  v27 = (uint64_t *)((char *)&v113 + v20[15] - v21);
  *v27 = 0;
  v27[1] = 0;
  v128 = v27;
  v28 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 24))(a5, a6);
  v127 = a3;
  if ((v28 & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    if (qword_1004B93A8 != -1)
      swift_once(&qword_1004B93A8, sub_10020D77C);
    v29 = v128;
    v30 = a7;
    if (static DeviceCapabilities.isInternalInstall == 1)
    {
      v137 = 0;
      v138 = 0xE000000000000000;
      _StringGuts.grow(_:)(32);
      v118 = v23;
      v31 = v25;
      v32 = v138;
      v33 = sub_100050D44(a1, a5, *(_QWORD *)(a6 + 8));
      v123 = a7;
      v34 = a5;
      v36 = v35;
      swift_bridgeObjectRelease(v32);
      v137 = v33;
      v138 = v36;
      v37._countAndFlagsBits = 0xD00000000000001ELL;
      v37._object = (void *)0x80000001003A8770;
      String.append(_:)(v37);
      v38 = v138;
      Array<A>.appendStringComponents(_:lineLength:bullet:)(v137, v138, 80, 120, 0xE100000000000000);
      v39 = v38;
      v25 = v31;
      v40 = v126;
      v41 = v125;
      v23 = v118;
      swift_bridgeObjectRelease(v39);
      v42 = v34;
      v30 = v123;
      (*(void (**)(uint64_t, uint64_t))(v131 + 8))(a1, v42);
      v44 = v129;
      v43 = v130;
LABEL_15:
      v52 = v132;
LABEL_18:
      sub_10000970C(v127);
      sub_1000A6750(*(_QWORD *)v23, *((_QWORD *)v23 + 1), *((_QWORD *)v23 + 2), *((_QWORD *)v23 + 3), *((void **)v23 + 4));

      sub_10000DCF8(*v40, v40[1]);
      sub_10000DCF8(*v25, v25[1]);
      sub_10000DCF8(*v44, v44[1]);
      sub_10000DCF8(*v29, v29[1]);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v43 + 56))(v30, 1, 1, v52);
    }
    (*(void (**)(uint64_t, uint64_t))(v131 + 8))(a1, a5);
    v43 = v130;
LABEL_14:
    v41 = v125;
    v44 = v129;
    v40 = v126;
    goto LABEL_15;
  }
  v121 = a2;
  v123 = a7;
  v119 = v25;
  v45 = a5;
  v46 = a3[3];
  v47 = a3[4];
  sub_1000096A0(a3, v46);
  v48 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v47 + 8))(a1, v45, *(_QWORD *)(a6 + 16), v46, v47);
  if (!v48)
  {
    swift_bridgeObjectRelease(v121);
    v137 = 0;
    v138 = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    v61 = v138;
    v62 = sub_100050D44(a1, v45, *(_QWORD *)(a6 + 8));
    v64 = v63;
    swift_bridgeObjectRelease(v61);
    v137 = v62;
    v138 = v64;
    v65._countAndFlagsBits = 0xD000000000000014;
    v65._object = (void *)0x80000001003A8710;
    String.append(_:)(v65);
    v66 = v138;
    Array<A>.appendStringComponents(_:lineLength:bullet:)(v137, v138, 80, 120, 0xE100000000000000);
    swift_bridgeObjectRelease(v66);
    (*(void (**)(uint64_t, uint64_t))(v131 + 8))(a1, v45);
    v25 = v119;
    v30 = v123;
    v43 = v130;
    v29 = v128;
    goto LABEL_14;
  }
  v50 = v48;
  v115 = a6;
  v116 = a1;
  v117 = v45;
  v51 = *(_QWORD *)(v121 + 16);
  v52 = v132;
  if (!v51)
  {
    swift_bridgeObjectRelease(v121);
    v30 = v123;
    v40 = v126;
LABEL_17:
    v137 = 0;
    v138 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    v67 = v138;
    v68 = v116;
    v69 = v117;
    v70 = sub_100050D44(v116, v117, *(_QWORD *)(v115 + 8));
    v72 = v71;
    swift_bridgeObjectRelease(v67);
    v137 = v70;
    v138 = v72;
    v73._countAndFlagsBits = 0xD000000000000016;
    v73._object = (void *)0x80000001003A8730;
    String.append(_:)(v73);
    v74 = v138;
    Array<A>.appendStringComponents(_:lineLength:bullet:)(v137, v138, 80, 120, 0xE100000000000000);
    swift_bridgeObjectRelease(v74);
    (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v68, v69);
    v44 = v129;
    v43 = v130;
    v25 = v119;
    v29 = v128;
    v41 = v125;
    goto LABEL_18;
  }
  v53 = v49;
  v118 = v23;
  v114 = v22;
  v54 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v49 + 8);
  v55 = v121 + 32;
  while (1)
  {
    sub_10000990C(v55, (uint64_t)v133);
    v56 = type metadata accessor for Optional(0, v50);
    v57 = *(_QWORD *)(v56 - 8);
    __chkstk_darwin(v56);
    v59 = (char *)&v113 - v58;
    v54(v133, v50, v53);
    v60 = *(_QWORD *)(v50 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v59, 1, v50) != 1)
      break;
    (*(void (**)(char *, uint64_t))(v57 + 8))(v59, v56);
    v134 = 0u;
    v135 = 0u;
    v136 = 0;
    sub_10000FE2C((uint64_t)&v134, &qword_1004BBF28);
    v55 += 32;
    if (!--v51)
    {
      swift_bridgeObjectRelease(v121);
      v30 = v123;
      v52 = v132;
      v22 = v114;
      v40 = v126;
      v23 = v118;
      goto LABEL_17;
    }
  }
  *((_QWORD *)&v135 + 1) = v50;
  v136 = v53;
  v76 = sub_1000407CC(&v134);
  (*(void (**)(_QWORD *, char *, uint64_t))(v60 + 32))(v76, v59, v50);
  swift_bridgeObjectRelease(v121);
  sub_100033620(&v134, (uint64_t)&v137);
  sub_1000444A8((uint64_t)&v137, (uint64_t)&v134);
  v77 = (uint64_t)v120;
  v78 = v116;
  v79 = v117;
  (*(void (**)(char *, uint64_t, uint64_t))(v131 + 16))(v120, v116, v117);
  v80 = v122;
  result = sub_1000A563C(&v134, v77, v79, v115, v122);
  v52 = v132;
  v81 = (uint64_t (**)(uint64_t))(v80 + v132[12]);
  if (*v81)
  {
    v82 = (*v81)(result);
    v85 = v129;
    v43 = v130;
    v22 = v114;
    v29 = v128;
    v40 = v126;
    v23 = v118;
    if (v83 != 1)
    {
      v98 = v82;
      v99 = v83;
      if ((v84 & 1) != 0)
      {
        sub_100033EC4(v82, v83);
        v111 = v78;
        v112 = v117;
        v102 = v122;
      }
      else
      {
        *(_QWORD *)&v134 = sub_100050D44(v78, v117, *(_QWORD *)(v115 + 8));
        *((_QWORD *)&v134 + 1) = v100;
        v101._countAndFlagsBits = 10272;
        v101._object = (void *)0xE200000000000000;
        String.append(_:)(v101);
        v102 = v122;
        v103 = (uint64_t *)(v122 + v52[9]);
        v104 = *v103;
        v105 = (void *)v103[1];
        swift_bridgeObjectRetain();
        v106._countAndFlagsBits = v104;
        v22 = v114;
        v106._object = v105;
        String.append(_:)(v106);
        v29 = v128;
        swift_bridgeObjectRelease(v105);
        v107._countAndFlagsBits = 539828265;
        v107._object = (void *)0xE400000000000000;
        String.append(_:)(v107);
        if (v99)
          v108 = v98;
        else
          v108 = 0xD000000000000013;
        if (!v99)
          v99 = 0x80000001003A8750;
        v109 = v99;
        String.append(_:)(*(Swift::String *)&v108);
        swift_bridgeObjectRelease(v99);
        v110 = *((_QWORD *)&v134 + 1);
        Array<A>.appendStringComponents(_:lineLength:bullet:)(v134, *((uint64_t *)&v134 + 1), 80, 120, 0xE100000000000000);
        v43 = v130;
        swift_bridgeObjectRelease(v110);
        v111 = v116;
        v112 = v117;
      }
      (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v111, v112);
      (*(void (**)(uint64_t, int *))(v43 + 8))(v102, v52);
      sub_10000970C(&v137);
      v25 = v119;
      v30 = v123;
      v41 = v125;
      v44 = v129;
      goto LABEL_18;
    }
    v86 = v78;
    v87 = v117;
    *(_QWORD *)&v134 = sub_100050D44(v86, v117, *(_QWORD *)(v115 + 8));
    *((_QWORD *)&v134 + 1) = v88;
    v89._countAndFlagsBits = 10272;
    v89._object = (void *)0xE200000000000000;
    String.append(_:)(v89);
    v90 = (uint64_t *)(v122 + v52[9]);
    v91 = *v90;
    v92 = (void *)v90[1];
    swift_bridgeObjectRetain();
    v93._countAndFlagsBits = v91;
    v93._object = v92;
    String.append(_:)(v93);
    swift_bridgeObjectRelease(v92);
    v94._countAndFlagsBits = 41;
    v94._object = (void *)0xE100000000000000;
    String.append(_:)(v94);
    v95 = *((_QWORD *)&v134 + 1);
    Array<A>.appendStringComponents(_:lineLength:bullet:)(v134, *((uint64_t *)&v134 + 1), 80, 9673954, 0xA300000000000000);
    swift_bridgeObjectRelease(v95);
    (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v116, v87);
    sub_10000970C(&v137);
    sub_1000A6750(*(_QWORD *)v23, *((_QWORD *)v23 + 1), *((_QWORD *)v23 + 2), *((_QWORD *)v23 + 3), *((void **)v23 + 4));

    sub_10000DCF8(*v40, v40[1]);
    sub_10000DCF8(*v119, v119[1]);
    sub_10000DCF8(*v85, v85[1]);
    sub_10000DCF8(*v29, v29[1]);
    v96 = v130;
    (*(void (**)(char *, uint64_t, int *))(v130 + 32))(v22, v122, v52);
    v97 = v123;
    (*(void (**)(uint64_t, char *, int *))(v96 + 16))(v123, v22, v52);
    (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v96 + 56))(v97, 0, 1, v52);
    sub_10000970C(v127);
    return (*(uint64_t (**)(char *, int *))(v96 + 8))(v22, v52);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A563C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  uint64_t DynamicType;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[40];
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v58 = a5;
  v8 = type metadata accessor for AnyAction(0, a3, a4, a4);
  v57 = *(_QWORD *)(v8 - 8);
  v9 = (int *)__chkstk_darwin(v8);
  v11 = (char *)&v48 - v10;
  v12 = (char *)&v48 + v9[10] - v10;
  *(_OWORD *)v12 = xmmword_1003C6C70;
  *((_OWORD *)v12 + 1) = 0u;
  *((_OWORD *)v12 + 2) = 0u;
  v51 = v9[11];
  *(_QWORD *)&v11[v51] = 0;
  v13 = (uint64_t *)((char *)&v48 + v9[12] - v10);
  *v13 = 0;
  v13[1] = 0;
  v14 = (uint64_t *)((char *)&v48 + v9[13] - v10);
  *v14 = 0;
  v14[1] = 0;
  v54 = v14;
  v15 = (uint64_t *)&v11[v9[14]];
  *v15 = 0;
  v15[1] = 0;
  v55 = v15;
  v16 = (uint64_t *)&v11[v9[15]];
  *v16 = 0;
  v16[1] = 0;
  v56 = v16;
  v50 = *(_QWORD *)(a3 - 8);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
  v52 = a2;
  v53 = a3;
  v17(v11, a2, a3);
  v18 = a1[3];
  v19 = sub_1000096A0(a1, v18);
  DynamicType = swift_getDynamicType(v19, v18, 1);
  v21 = a1[4];
  v63 = DynamicType;
  v64 = v21;
  v22 = sub_1000057B4(&qword_1004BC050);
  v23 = String.init<A>(describing:)(&v63, v22);
  v24 = (uint64_t *)&v11[*(int *)(v8 + 36)];
  *v24 = v23;
  v24[1] = v25;
  sub_1000444A8((uint64_t)a1, (uint64_t)v59);
  v26 = sub_1000057B4(&qword_1004BC058);
  v27 = sub_1000057B4(&qword_1004BC060);
  if ((swift_dynamicCast(&v60, v59, v26, v27, 6) & 1) != 0)
  {
    v28 = *((_QWORD *)&v61 + 1);
    v29 = v62;
    sub_1000096A0(&v60, *((uint64_t *)&v61 + 1));
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v29 + 8))(&v63, v28, v29);
    v30 = v64;
    v49 = v63;
    v31 = v65;
    v32 = v66;
    v34 = v67;
    v33 = v68;
    sub_10000970C(&v60);
  }
  else
  {
    v62 = 0;
    v60 = 0u;
    v61 = 0u;
    sub_10000FE2C((uint64_t)&v60, &qword_1004BC068);
    v49 = 0;
    v31 = 0;
    v32 = 0;
    v34 = 0;
    v33 = 0;
    v30 = 1;
  }
  sub_1000A6750(*(_QWORD *)v12, *((_QWORD *)v12 + 1), *((_QWORD *)v12 + 2), *((_QWORD *)v12 + 3), *((void **)v12 + 4));
  *(_QWORD *)v12 = v49;
  *((_QWORD *)v12 + 1) = v30;
  *((_QWORD *)v12 + 2) = v31;
  *((_QWORD *)v12 + 3) = v32;
  *((_QWORD *)v12 + 4) = v34;
  *((_QWORD *)v12 + 5) = v33;
  v35 = a1[3];
  v36 = a1[4];
  sub_1000096A0(a1, v35);
  v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 24))(v35, v36);
  (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v52, v53);
  v38 = v51;

  *(_QWORD *)&v11[v38] = v37;
  sub_1000444A8((uint64_t)a1, (uint64_t)&v60);
  v39 = swift_allocObject(&unk_10046F6B0, 56, 7);
  sub_100033620(&v60, v39 + 16);
  sub_10000DCF8(*v13, v13[1]);
  *v13 = (uint64_t)sub_1000A7894;
  v13[1] = v39;
  sub_1000444A8((uint64_t)a1, (uint64_t)&v60);
  v40 = swift_allocObject(&unk_10046F6D8, 56, 7);
  sub_100033620(&v60, v40 + 16);
  v41 = v54;
  sub_10000DCF8(*v54, v54[1]);
  *v41 = (uint64_t)&unk_1004BC070;
  v41[1] = v40;
  sub_1000444A8((uint64_t)a1, (uint64_t)&v60);
  v42 = swift_allocObject(&unk_10046F700, 56, 7);
  sub_100033620(&v60, v42 + 16);
  v43 = v55;
  sub_10000DCF8(*v55, v55[1]);
  *v43 = (uint64_t)&unk_1004BC078;
  v43[1] = v42;
  sub_1000444A8((uint64_t)a1, (uint64_t)&v60);
  v44 = swift_allocObject(&unk_10046F728, 56, 7);
  sub_100033620(&v60, v44 + 16);
  v45 = v56;
  sub_10000DCF8(*v56, v56[1]);
  *v45 = (uint64_t)sub_1000A7998;
  v45[1] = v44;
  v46 = v57;
  (*(void (**)(uint64_t, char *, uint64_t))(v57 + 16))(v58, v11, v8);
  sub_10000970C(a1);
  return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v11, v8);
}

uint64_t AnyAction.canPerform.getter(uint64_t result)
{
  uint64_t v1;
  uint64_t (**v2)(void);

  v2 = (uint64_t (**)(void))(v1 + *(int *)(result + 48));
  if (*v2)
    return (*v2)();
  __break(1u);
  return result;
}

uint64_t sub_1000A5A6C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[3];
  v2 = a1[4];
  sub_1000096A0(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

uint64_t sub_1000A5AAC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_1000A5AC4, 0, 0);
}

uint64_t sub_1000A5AC4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 16);
  v2 = v1[3];
  v3 = v1[4];
  sub_1000096A0(v1, v2);
  v4 = *(int **)(v3 + 32);
  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v0 + 24) = v5;
  *v5 = v0;
  v5[1] = sub_10003B488;
  return v7(v2, v3);
}

uint64_t sub_1000A5B3C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_1000A5B54, 0, 0);
}

uint64_t sub_1000A5B54()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 16);
  v2 = v1[3];
  v3 = v1[4];
  sub_1000096A0(v1, v2);
  v4 = *(int **)(v3 + 40);
  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v0 + 24) = v5;
  *v5 = v0;
  v5[1] = sub_10003ACB8;
  return v7(v2, v3);
}

uint64_t sub_1000A5BCC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[3];
  v2 = a1[4];
  sub_1000096A0(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 48))(v1, v2);
}

uint64_t AnyAction.displayConfiguration.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000A6798(v2 + *(int *)(a1 + 40), a2);
}

void *AnyAction.submenu.getter(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v2 = *(void **)(v1 + *(int *)(a1 + 44));
  v3 = v2;
  return v2;
}

uint64_t AnyAction.execute()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;

  v2[3] = a1;
  v2[4] = v1;
  v3 = *(_QWORD *)(a1 - 8);
  v2[5] = v3;
  v2[6] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for MainActor(0);
  v2[7] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v2[8] = v6;
  v2[9] = v7;
  return swift_task_switch(sub_1000A5CCC, v6, v7);
}

void sub_1000A5CCC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t (**v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;
  void (*v8)(void);
  uint64_t v9;
  __n128 v10;
  uint64_t (**v11)(__n128);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t WitnessTable;
  uint64_t v18;
  __n128 v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  __n128 v47;
  void (*v48)(void);
  uint64_t v49;
  uint64_t v50[2];

  v1 = v0[3];
  v2 = (uint64_t (**)(void))(v0[4] + *(int *)(v1 + 48));
  if (!*v2)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v3 = (*v2)();
  v5 = v4;
  sub_100033EC4(v3, v4);
  if (v5 == 1)
  {
    v6 = *(int **)(v0[4] + *(int *)(v0[3] + 52));
    if (v6)
    {
      v48 = (void (*)(void))((char *)v6 + *v6);
      v7 = (_QWORD *)swift_task_alloc(v6[1]);
      v0[10] = v7;
      *v7 = v0;
      v7[1] = sub_1000A6044;
      v8 = v48;
LABEL_15:
      v8();
      return;
    }
    goto LABEL_17;
  }
  v9 = v0[4];
  v10 = swift_release(v0[7]);
  v11 = (uint64_t (**)(__n128))(v9 + *(int *)(v1 + 48));
  if (*v11)
  {
    v12 = (*v11)(v10);
    v15 = v0[3];
    if (v13 == 1)
    {
      v16 = type metadata accessor for AnyAction.Error(0, *(_QWORD *)(v15 + 16), *(_QWORD *)(v15 + 24), v14);
      WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for AnyAction<A>.Error, v16);
      v18 = swift_allocError(v16, WitnessTable, 0, 0);
      *v20 = 0;
      v20[1] = 0;
    }
    else
    {
      v21 = v12;
      v22 = v13;
      v23 = type metadata accessor for AnyAction.Error(0, *(_QWORD *)(v15 + 16), *(_QWORD *)(v15 + 24), v14);
      v24 = swift_getWitnessTable(&protocol conformance descriptor for AnyAction<A>.Error, v23);
      v18 = swift_allocError(v23, v24, 0, 0);
      *v25 = v21;
      v25[1] = v22;
    }
    swift_willThrow(v19);
    if (qword_1004B8A30 != -1)
      swift_once(&qword_1004B8A30, sub_1000A6660);
    v27 = v0[5];
    v26 = v0[6];
    v29 = v0[3];
    v28 = v0[4];
    v30 = type metadata accessor for Logger(0);
    sub_100039D34(v30, (uint64_t)static Logger.actions);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v26, v28, v29);
    swift_errorRetain(v18);
    v31 = swift_errorRetain(v18);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter();
    v34 = os_log_type_enabled(v32, v33);
    v35 = v0[5];
    v36 = v0[6];
    v37 = v0[3];
    if (v34)
    {
      v38 = swift_slowAlloc(22, -1);
      v49 = swift_slowAlloc(64, -1);
      v50[0] = v49;
      *(_DWORD *)v38 = 136446466;
      v39 = (char *)sub_100050D44(v36, *(_QWORD *)(v37 + 16), *(_QWORD *)(*(_QWORD *)(v37 + 24) + 8));
      v41 = v40;
      *(_QWORD *)(v38 + 4) = sub_1000393D0(v39, v40, v50);
      swift_bridgeObjectRelease(v41);
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v36, v37);
      *(_WORD *)(v38 + 12) = 2082;
      v0[2] = v18;
      swift_errorRetain(v18);
      v42 = sub_1000057B4((uint64_t *)&unk_1004BD690);
      v43 = (char *)String.init<A>(describing:)(v0 + 2, v42);
      v45 = v44;
      *(_QWORD *)(v38 + 14) = sub_1000393D0(v43, v44, v50);
      swift_bridgeObjectRelease(v45);
      swift_errorRelease(v18);
      swift_errorRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Failed to perform action %{public}s with error %{public}s", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy(v49, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v38, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v35 + 8))(v0[6], v0[3]);
      swift_errorRelease(v18);
      swift_errorRelease(v18);
    }

    v46 = v0[6];
    swift_willThrow(v47);
    swift_task_dealloc(v46);
    v8 = (void (*)(void))v0[1];
    goto LABEL_15;
  }
LABEL_18:
  __break(1u);
}

uint64_t sub_1000A6044()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  *(_QWORD *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000A61D0;
  else
    v4 = sub_1000A60A4;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72));
}

void sub_1000A60A4()
{
  _QWORD *v0;
  int *v1;
  _QWORD *v2;
  void (*v3)(void);

  v1 = *(int **)(v0[4] + *(int *)(v0[3] + 56));
  if (v1)
  {
    v3 = (void (*)(void))((char *)v1 + *v1);
    v2 = (_QWORD *)swift_task_alloc(v1[1]);
    v0[12] = v2;
    *v2 = v0;
    v2[1] = sub_1000A6110;
    v3();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000A6110()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 96);
  *(_QWORD *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000A6418;
  else
    v4 = sub_1000A6170;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72));
}

uint64_t sub_1000A6170()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  void (**v4)(uint64_t);
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  result = swift_release(*(_QWORD *)(v0 + 56));
  v4 = (void (**)(uint64_t))(v2 + *(int *)(v1 + 60));
  if (*v4)
  {
    v5 = *(_QWORD *)(v0 + 48);
    (*v4)(result);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A61D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v25;
  uint64_t v26[2];

  swift_release(*(_QWORD *)(v0 + 56));
  v1 = *(_QWORD *)(v0 + 88);
  if (qword_1004B8A30 != -1)
    swift_once(&qword_1004B8A30, sub_1000A6660);
  v3 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v6 = type metadata accessor for Logger(0);
  sub_100039D34(v6, (uint64_t)static Logger.actions);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v4, v5);
  swift_errorRetain(v1);
  v7 = swift_errorRetain(v1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 40);
  v12 = *(_QWORD *)(v0 + 48);
  v13 = *(_QWORD *)(v0 + 24);
  if (v10)
  {
    v14 = swift_slowAlloc(22, -1);
    v25 = swift_slowAlloc(64, -1);
    v26[0] = v25;
    *(_DWORD *)v14 = 136446466;
    v15 = (char *)sub_100050D44(v12, *(_QWORD *)(v13 + 16), *(_QWORD *)(*(_QWORD *)(v13 + 24) + 8));
    v17 = v16;
    *(_QWORD *)(v14 + 4) = sub_1000393D0(v15, v16, v26);
    swift_bridgeObjectRelease(v17);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
    *(_WORD *)(v14 + 12) = 2082;
    *(_QWORD *)(v0 + 16) = v1;
    swift_errorRetain(v1);
    v18 = sub_1000057B4((uint64_t *)&unk_1004BD690);
    v19 = (char *)String.init<A>(describing:)(v0 + 16, v18);
    v21 = v20;
    *(_QWORD *)(v14 + 14) = sub_1000393D0(v19, v20, v26);
    swift_bridgeObjectRelease(v21);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to perform action %{public}s with error %{public}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v11 + 8))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 24));
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v22 = *(_QWORD *)(v0 + 48);
  swift_willThrow(v23);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A6418()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v25;
  uint64_t v26[2];

  swift_release(*(_QWORD *)(v0 + 56));
  v1 = *(_QWORD *)(v0 + 104);
  if (qword_1004B8A30 != -1)
    swift_once(&qword_1004B8A30, sub_1000A6660);
  v3 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v6 = type metadata accessor for Logger(0);
  sub_100039D34(v6, (uint64_t)static Logger.actions);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v4, v5);
  swift_errorRetain(v1);
  v7 = swift_errorRetain(v1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 40);
  v12 = *(_QWORD *)(v0 + 48);
  v13 = *(_QWORD *)(v0 + 24);
  if (v10)
  {
    v14 = swift_slowAlloc(22, -1);
    v25 = swift_slowAlloc(64, -1);
    v26[0] = v25;
    *(_DWORD *)v14 = 136446466;
    v15 = (char *)sub_100050D44(v12, *(_QWORD *)(v13 + 16), *(_QWORD *)(*(_QWORD *)(v13 + 24) + 8));
    v17 = v16;
    *(_QWORD *)(v14 + 4) = sub_1000393D0(v15, v16, v26);
    swift_bridgeObjectRelease(v17);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
    *(_WORD *)(v14 + 12) = 2082;
    *(_QWORD *)(v0 + 16) = v1;
    swift_errorRetain(v1);
    v18 = sub_1000057B4((uint64_t *)&unk_1004BD690);
    v19 = (char *)String.init<A>(describing:)(v0 + 16, v18);
    v21 = v20;
    *(_QWORD *)(v14 + 14) = sub_1000393D0(v19, v20, v26);
    swift_bridgeObjectRelease(v21);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to perform action %{public}s with error %{public}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v11 + 8))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 24));
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v22 = *(_QWORD *)(v0 + 48);
  swift_willThrow(v23);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A6660()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10004FD4C(v0, static Logger.actions);
  sub_100039D34(v0, (uint64_t)static Logger.actions);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001003A7200, 0x736E6F69746341, 0xE700000000000000);
}

uint64_t type metadata accessor for AnyAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100051E10(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyAction);
}

uint64_t static Logger.actions.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1004B8A30 != -1)
    swift_once(&qword_1004B8A30, sub_1000A6660);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100039D34(v2, (uint64_t)static Logger.actions);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

void sub_1000A6750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);

  }
}

uint64_t sub_1000A6798(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000057B4(&qword_1004BBF30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for AnyAction.Error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100051E10(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyAction.Error);
}

uint64_t sub_1000A67EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 48);
}

uint64_t sub_1000A67F4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1003CB4D0;
    v4[2] = &unk_1003CB4E8;
    v4[3] = &unk_1003CB500;
    v4[4] = &unk_1003CB518;
    v4[5] = &unk_1003CB518;
    v4[6] = &unk_1003CB518;
    v4[7] = &unk_1003CB518;
    swift_initStructMetadata(a1, 0, 8, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_1000A688C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  void **v22;
  void *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  id v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x1000F8) != 0
    || (v7 = *(_QWORD *)(v5 + 64),
        ((((((((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 23) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 16 > 0x18))
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v17 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v8 = (_QWORD *)(((unint64_t)v4 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    v9 = (_QWORD *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v8 = *v9;
    v10 = v9[1];
    v8[1] = v10;
    v11 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
    v12 = (_QWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8);
    v13 = v12[1];
    if (v13 >= 0xFFFFFFFF)
      LODWORD(v13) = -1;
    v14 = v13 - 1;
    swift_bridgeObjectRetain(v10);
    if (v14 < 0)
    {
      *v11 = *v12;
      v18 = v12[1];
      v11[1] = v18;
      v11[2] = v12[2];
      v19 = v12[3];
      v11[3] = v19;
      v20 = (void *)v12[4];
      v11[4] = v20;
      v11[5] = v12[5];
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      v21 = v20;
    }
    else
    {
      v15 = *(_OWORD *)v12;
      v16 = *((_OWORD *)v12 + 2);
      *((_OWORD *)v11 + 1) = *((_OWORD *)v12 + 1);
      *((_OWORD *)v11 + 2) = v16;
      *(_OWORD *)v11 = v15;
    }
    v22 = (void **)(((unint64_t)v12 + 55) & 0xFFFFFFFFFFFFFFF8);
    v23 = *v22;
    v24 = (_QWORD *)(((unint64_t)v11 + 55) & 0xFFFFFFFFFFFFF8);
    *v24 = *v22;
    v25 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
    v26 = (unint64_t *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
    v27 = *v26;
    v28 = v23;
    if (v27 < 0xFFFFFFFF)
    {
      *(_OWORD *)v25 = *(_OWORD *)v26;
    }
    else
    {
      v29 = v26[1];
      *(_QWORD *)v25 = v27;
      *(_QWORD *)(v25 + 8) = v29;
      swift_retain(v29);
    }
    v30 = (v25 + 23) & 0xFFFFFFFFFFFFFFF8;
    v31 = ((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v31 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v30 = *(_OWORD *)v31;
    }
    else
    {
      v32 = *(_QWORD *)(v31 + 8);
      *(_QWORD *)v30 = *(_QWORD *)v31;
      *(_QWORD *)(v30 + 8) = v32;
      swift_retain(v32);
    }
    v33 = (v30 + 23) & 0xFFFFFFFFFFFFFFF8;
    v34 = (v31 + 23) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v34 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v33 = *(_OWORD *)v34;
    }
    else
    {
      v35 = *(_QWORD *)(v34 + 8);
      *(_QWORD *)v33 = *(_QWORD *)v34;
      *(_QWORD *)(v33 + 8) = v35;
      swift_retain(v35);
    }
    v36 = (v33 + 23) & 0xFFFFFFFFFFFFFFF8;
    v37 = (v34 + 23) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v37 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v36 = *(_OWORD *)v37;
      return v4;
    }
    v17 = *(_QWORD *)(v37 + 8);
    *(_QWORD *)v36 = *(_QWORD *)v37;
    *(_QWORD *)(v36 + 8) = v17;
  }
  swift_retain(v17);
  return v4;
}

void sub_1000A6AF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = (a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + 8));
  v5 = (v4 + 23) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(v5 + 8);
  LODWORD(v7) = -1;
  if (v6 < 0xFFFFFFFF)
    v7 = *(_QWORD *)(v5 + 8);
  if ((int)v7 - 1 < 0)
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(*(_QWORD *)(v5 + 24));

  }
  v8 = (id *)((v5 + 55) & 0xFFFFFFFFFFFFFFF8);

  v9 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  if (*v9 >= 0xFFFFFFFFuLL)
    swift_release(v9[1]);
  v10 = (_QWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8);
  if (*v10 >= 0xFFFFFFFFuLL)
    swift_release(v10[1]);
  v11 = (_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  if (*v11 >= 0xFFFFFFFFuLL)
    swift_release(v11[1]);
  v12 = (_QWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  if (*v12 >= 0xFFFFFFFFuLL)
    swift_release(v12[1]);
}

uint64_t sub_1000A6BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  int v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  void **v20;
  void *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  id v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = v8[1];
  v7[1] = v9;
  v10 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  v12 = v11[1];
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  v13 = v12 - 1;
  swift_bridgeObjectRetain(v9);
  if (v13 < 0)
  {
    *v10 = *v11;
    v16 = v11[1];
    v10[1] = v16;
    v10[2] = v11[2];
    v17 = v11[3];
    v10[3] = v17;
    v18 = (void *)v11[4];
    v10[4] = v18;
    v10[5] = v11[5];
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v17);
    v19 = v18;
  }
  else
  {
    v14 = *(_OWORD *)v11;
    v15 = *((_OWORD *)v11 + 2);
    *((_OWORD *)v10 + 1) = *((_OWORD *)v11 + 1);
    *((_OWORD *)v10 + 2) = v15;
    *(_OWORD *)v10 = v14;
  }
  v20 = (void **)(((unint64_t)v11 + 55) & 0xFFFFFFFFFFFFFFF8);
  v21 = *v20;
  v22 = (_QWORD *)(((unint64_t)v10 + 55) & 0xFFFFFFFFFFFFF8);
  *v22 = *v20;
  v23 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = (unint64_t *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  v25 = *v24;
  v26 = v21;
  if (v25 < 0xFFFFFFFF)
  {
    *(_OWORD *)v23 = *(_OWORD *)v24;
  }
  else
  {
    v27 = v24[1];
    *(_QWORD *)v23 = v25;
    *(_QWORD *)(v23 + 8) = v27;
    swift_retain(v27);
  }
  v28 = (v23 + 23) & 0xFFFFFFFFFFFFFFF8;
  v29 = ((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v29 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v28 = *(_OWORD *)v29;
  }
  else
  {
    v30 = *(_QWORD *)(v29 + 8);
    *(_QWORD *)v28 = *(_QWORD *)v29;
    *(_QWORD *)(v28 + 8) = v30;
    swift_retain(v30);
  }
  v31 = (v28 + 23) & 0xFFFFFFFFFFFFFFF8;
  v32 = (v29 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v32 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v31 = *(_OWORD *)v32;
  }
  else
  {
    v33 = *(_QWORD *)(v32 + 8);
    *(_QWORD *)v31 = *(_QWORD *)v32;
    *(_QWORD *)(v31 + 8) = v33;
    swift_retain(v33);
  }
  v34 = (v31 + 23) & 0xFFFFFFFFFFFFFFF8;
  v35 = (v32 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v35 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v34 = *(_OWORD *)v35;
  }
  else
  {
    v36 = *(_QWORD *)(v35 + 8);
    *(_QWORD *)v34 = *(_QWORD *)v35;
    *(_QWORD *)(v34 + 8) = v36;
    swift_retain(v36);
  }
  return a1;
}

uint64_t sub_1000A6DDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  __int128 v22;
  __int128 v23;
  void **v24;
  void **v25;
  void *v26;
  void *v27;
  id v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  id v59;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = v8[1];
  v10 = v7[1];
  v7[1] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  v11 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v12 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  v13 = *(_QWORD *)(v11 + 8);
  LODWORD(v14) = -1;
  if (v13 >= 0xFFFFFFFF)
    LODWORD(v15) = -1;
  else
    v15 = *(_QWORD *)(v11 + 8);
  v16 = v15 - 1;
  if (v12[1] < 0xFFFFFFFFuLL)
    v14 = v12[1];
  v17 = v14 - 1;
  if ((v16 & 0x80000000) == 0)
  {
    if (v17 < 0)
    {
      *(_QWORD *)v11 = *v12;
      v18 = v12[1];
      *(_QWORD *)(v11 + 8) = v18;
      *(_QWORD *)(v11 + 16) = v12[2];
      v19 = v12[3];
      *(_QWORD *)(v11 + 24) = v19;
      v20 = (void *)v12[4];
      *(_QWORD *)(v11 + 32) = v20;
      *(_QWORD *)(v11 + 40) = v12[5];
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      v21 = v20;
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if ((v17 & 0x80000000) == 0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));

LABEL_11:
    v22 = *(_OWORD *)v12;
    v23 = *((_OWORD *)v12 + 2);
    *(_OWORD *)(v11 + 16) = *((_OWORD *)v12 + 1);
    *(_OWORD *)(v11 + 32) = v23;
    *(_OWORD *)v11 = v22;
    goto LABEL_12;
  }
  *(_QWORD *)v11 = *v12;
  v54 = v12[1];
  *(_QWORD *)(v11 + 8) = v54;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(v11 + 16) = v12[2];
  v55 = v12[3];
  v56 = *(_QWORD *)(v11 + 24);
  *(_QWORD *)(v11 + 24) = v55;
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRelease(v56);
  v57 = *(void **)(v11 + 32);
  v58 = (void *)v12[4];
  *(_QWORD *)(v11 + 32) = v58;
  v59 = v58;

  *(_QWORD *)(v11 + 40) = v12[5];
LABEL_12:
  v24 = (void **)((v11 + 55) & 0xFFFFFFFFFFFFFFF8);
  v25 = (void **)(((unint64_t)v12 + 55) & 0xFFFFFFFFFFFFFFF8);
  v26 = *v25;
  v27 = *v24;
  *v24 = *v25;
  v28 = v26;

  v29 = (_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  v30 = (unint64_t *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
  v31 = *v30;
  if (*v29 < 0xFFFFFFFFuLL)
  {
    if (v31 >= 0xFFFFFFFF)
    {
      v34 = v30[1];
      *v29 = v31;
      v29[1] = v34;
      swift_retain(v34);
      goto LABEL_19;
    }
  }
  else
  {
    if (v31 >= 0xFFFFFFFF)
    {
      v32 = v30[1];
      v33 = v29[1];
      *v29 = v31;
      v29[1] = v32;
      swift_retain(v32);
      swift_release(v33);
      goto LABEL_19;
    }
    swift_release(v29[1]);
  }
  *(_OWORD *)v29 = *(_OWORD *)v30;
LABEL_19:
  v35 = (_QWORD *)(((unint64_t)v29 + 23) & 0xFFFFFFFFFFFFFFF8);
  v36 = (unint64_t *)(((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFFFF8);
  v37 = *v36;
  if (*v35 < 0xFFFFFFFFuLL)
  {
    if (v37 >= 0xFFFFFFFF)
    {
      v40 = v36[1];
      *v35 = v37;
      v35[1] = v40;
      swift_retain(v40);
      goto LABEL_26;
    }
  }
  else
  {
    if (v37 >= 0xFFFFFFFF)
    {
      v38 = v36[1];
      v39 = v35[1];
      *v35 = v37;
      v35[1] = v38;
      swift_retain(v38);
      swift_release(v39);
      goto LABEL_26;
    }
    swift_release(v35[1]);
  }
  *(_OWORD *)v35 = *(_OWORD *)v36;
LABEL_26:
  v41 = (_QWORD *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF8);
  v42 = (unint64_t *)(((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF8);
  v43 = *v42;
  if (*v41 < 0xFFFFFFFFuLL)
  {
    if (v43 >= 0xFFFFFFFF)
    {
      v46 = v42[1];
      *v41 = v43;
      v41[1] = v46;
      swift_retain(v46);
      goto LABEL_33;
    }
  }
  else
  {
    if (v43 >= 0xFFFFFFFF)
    {
      v44 = v42[1];
      v45 = v41[1];
      *v41 = v43;
      v41[1] = v44;
      swift_retain(v44);
      swift_release(v45);
      goto LABEL_33;
    }
    swift_release(v41[1]);
  }
  *(_OWORD *)v41 = *(_OWORD *)v42;
LABEL_33:
  v47 = (_QWORD *)(((unint64_t)v41 + 23) & 0xFFFFFFFFFFFFFFF8);
  v48 = (unint64_t *)(((unint64_t)v42 + 23) & 0xFFFFFFFFFFFFFFF8);
  v49 = *v48;
  if (*v47 < 0xFFFFFFFFuLL)
  {
    if (v49 >= 0xFFFFFFFF)
    {
      v52 = v48[1];
      *v47 = v49;
      v47[1] = v52;
      swift_retain(v52);
      return a1;
    }
LABEL_39:
    *(_OWORD *)v47 = *(_OWORD *)v48;
    return a1;
  }
  if (v49 < 0xFFFFFFFF)
  {
    swift_release(v47[1]);
    goto LABEL_39;
  }
  v50 = v48[1];
  v51 = v47[1];
  *v47 = v49;
  v47[1] = v50;
  swift_retain(v50);
  swift_release(v51);
  return a1;
}

uint64_t sub_1000A715C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_OWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = (__int128 *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  v11 = *v10;
  v12 = v10[2];
  v9[1] = v10[1];
  v9[2] = v12;
  *v9 = v11;
  v13 = (_QWORD *)(((unint64_t)v9 + 55) & 0xFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)v10 + 55) & 0xFFFFFFFFFFFFF8);
  *v13 = *v14;
  v15 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  v16 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v16 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v15 = *(_OWORD *)v16;
  }
  else
  {
    v17 = *(_QWORD *)(v16 + 8);
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *(_QWORD *)(v15 + 8) = v17;
  }
  v18 = (v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v19 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v18 = *(_OWORD *)v19;
  }
  else
  {
    v20 = *(_QWORD *)(v19 + 8);
    *(_QWORD *)v18 = *(_QWORD *)v19;
    *(_QWORD *)(v18 + 8) = v20;
  }
  v21 = (v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v22 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v21 = *(_OWORD *)v22;
  }
  else
  {
    v23 = *(_QWORD *)(v22 + 8);
    *(_QWORD *)v21 = *(_QWORD *)v22;
    *(_QWORD *)(v21 + 8) = v23;
  }
  v24 = (v21 + 23) & 0xFFFFFFFFFFFFFFF8;
  v25 = (uint64_t *)((v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  v26 = *v25;
  if ((unint64_t)*v25 < 0xFFFFFFFF)
  {
    *(_OWORD *)v24 = *(_OWORD *)v25;
  }
  else
  {
    v27 = v25[1];
    *(_QWORD *)v24 = v26;
    *(_QWORD *)(v24 + 8) = v27;
  }
  return a1;
}

uint64_t sub_1000A72AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  void **v17;
  void **v18;
  void *v19;
  _QWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v45;
  void *v46;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = v7[1];
  v7[1] = v8[1];
  swift_bridgeObjectRelease(v9);
  v10 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_QWORD *)(v10 + 8);
  LODWORD(v13) = -1;
  if (v12 < 0xFFFFFFFF)
    v13 = *(_QWORD *)(v10 + 8);
  if ((int)v13 - 1 >= 0)
    goto LABEL_8;
  v14 = *(_QWORD *)(v11 + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  if ((int)v14 - 1 >= 0)
  {
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(*(_QWORD *)(v10 + 24));

LABEL_8:
    v15 = *(_OWORD *)v11;
    v16 = *(_OWORD *)(v11 + 32);
    *(_OWORD *)(v10 + 16) = *(_OWORD *)(v11 + 16);
    *(_OWORD *)(v10 + 32) = v16;
    *(_OWORD *)v10 = v15;
    goto LABEL_9;
  }
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
  swift_bridgeObjectRelease(v12);
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v11 + 16);
  v45 = *(_QWORD *)(v10 + 24);
  *(_QWORD *)(v10 + 24) = *(_QWORD *)(v11 + 24);
  swift_bridgeObjectRelease(v45);
  v46 = *(void **)(v10 + 32);
  *(_QWORD *)(v10 + 32) = *(_QWORD *)(v11 + 32);

  *(_QWORD *)(v10 + 40) = *(_QWORD *)(v11 + 40);
LABEL_9:
  v17 = (void **)((v10 + 55) & 0xFFFFFFFFFFFFFFF8);
  v18 = (void **)((v11 + 55) & 0xFFFFFFFFFFFFFFF8);
  v19 = *v17;
  *v17 = *v18;

  v20 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  v21 = (unint64_t *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  v22 = *v21;
  if (*v20 < 0xFFFFFFFFuLL)
  {
    if (v22 >= 0xFFFFFFFF)
    {
      v25 = v21[1];
      *v20 = v22;
      v20[1] = v25;
      goto LABEL_16;
    }
  }
  else
  {
    if (v22 >= 0xFFFFFFFF)
    {
      v23 = v21[1];
      v24 = v20[1];
      *v20 = v22;
      v20[1] = v23;
      swift_release(v24);
      goto LABEL_16;
    }
    swift_release(v20[1]);
  }
  *(_OWORD *)v20 = *(_OWORD *)v21;
LABEL_16:
  v26 = (_QWORD *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
  v27 = (unint64_t *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  v28 = *v27;
  if (*v26 < 0xFFFFFFFFuLL)
  {
    if (v28 >= 0xFFFFFFFF)
    {
      v31 = v27[1];
      *v26 = v28;
      v26[1] = v31;
      goto LABEL_23;
    }
  }
  else
  {
    if (v28 >= 0xFFFFFFFF)
    {
      v29 = v27[1];
      v30 = v26[1];
      *v26 = v28;
      v26[1] = v29;
      swift_release(v30);
      goto LABEL_23;
    }
    swift_release(v26[1]);
  }
  *(_OWORD *)v26 = *(_OWORD *)v27;
LABEL_23:
  v32 = (_QWORD *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8);
  v33 = (unint64_t *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF8);
  v34 = *v33;
  if (*v32 < 0xFFFFFFFFuLL)
  {
    if (v34 >= 0xFFFFFFFF)
    {
      v37 = v33[1];
      *v32 = v34;
      v32[1] = v37;
      goto LABEL_30;
    }
  }
  else
  {
    if (v34 >= 0xFFFFFFFF)
    {
      v35 = v33[1];
      v36 = v32[1];
      *v32 = v34;
      v32[1] = v35;
      swift_release(v36);
      goto LABEL_30;
    }
    swift_release(v32[1]);
  }
  *(_OWORD *)v32 = *(_OWORD *)v33;
LABEL_30:
  v38 = (_QWORD *)(((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF8);
  v39 = (unint64_t *)(((unint64_t)v33 + 23) & 0xFFFFFFFFFFFFFFF8);
  v40 = *v39;
  if (*v38 < 0xFFFFFFFFuLL)
  {
    if (v40 >= 0xFFFFFFFF)
    {
      v43 = v39[1];
      *v38 = v40;
      v38[1] = v43;
      return a1;
    }
LABEL_36:
    *(_OWORD *)v38 = *(_OWORD *)v39;
    return a1;
  }
  if (v40 < 0xFFFFFFFF)
  {
    swift_release(v38[1]);
    goto LABEL_36;
  }
  v41 = v39[1];
  v42 = v38[1];
  *v38 = v40;
  v38[1] = v41;
  swift_release(v42);
  return a1;
}

uint64_t sub_1000A758C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((((((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
               + 23) & 0xFFFFFFFFFFFFFFF8)
             + 23) & 0xFFFFFFFFFFFFFFF8)
           + 23) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1000A7638 + 4 * byte_1003CB420[v10]))();
  }
}

void sub_1000A76BC(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((((((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 55) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)
             + 23) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((((((((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 55) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8)
       + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((((((((((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1000A77E0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1000A7858);
}

void sub_1000A77E8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1000A77F0);
  JUMPOUT(0x1000A7858);
}

void sub_1000A7834()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1000A7858);
}

void sub_1000A783C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1000A7858);
}

uint64_t sub_1000A7844(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFF)
  {
    if (a2 < 0)
      JUMPOUT(0x1000A7850);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = (a2 - 1);
LABEL_6:
    JUMPOUT(0x1000A7858);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t sub_1000A7870()
{
  uint64_t v0;

  sub_10000970C((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000A7894()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[5];
  v2 = v0[6];
  sub_1000096A0(v0 + 2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

uint64_t sub_1000A78D8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_1004BC04C);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10002F6EC;
  v2[2] = v0 + 16;
  return swift_task_switch(sub_1000A5AC4, 0, 0);
}

uint64_t sub_1000A7938()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_1004BC044);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10002E8E0;
  v2[2] = v0 + 16;
  return swift_task_switch(sub_1000A5B54, 0, 0);
}

uint64_t sub_1000A7998()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[5];
  v2 = v0[6];
  sub_1000096A0(v0 + 2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 48))(v1, v2);
}

uint64_t ActionCondition.Result.failure.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a2 == 1)
    v2 = 0;
  else
    v2 = a1;
  sub_10004ECD4(a1, a2);
  return v2;
}

BOOL ActionCondition.Result.isTrue.getter(uint64_t a1, uint64_t a2)
{
  return a2 == 1;
}

uint64_t static ActionCondition.Result.failure(_:redactLog:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain(a2);
  return a1;
}

BOOL sub_1000A7A68(uint64_t a1, uint64_t a2)
{
  return _s9MusicCore15ActionConditionV6ResultO21__derived_enum_equalsySbAE_AEtFZ_0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
}

uint64_t ActionCondition.init(_:file:line:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  *a6 = result;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
  return result;
}

uint64_t ActionCondition.init(_:_:redactLog:file:line:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t (*a6)()@<X5>, uint64_t (*a7)()@<X6>, uint64_t (*a8)()@<X7>, uint64_t (**a9)()@<X8>)
{
  uint64_t result;

  result = swift_allocObject(&unk_10046F780, 49, 7);
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 40) = a4;
  *(_BYTE *)(result + 48) = a5;
  *a9 = sub_1000A7DC0;
  a9[1] = (uint64_t (*)())result;
  a9[2] = a6;
  a9[3] = a7;
  a9[4] = a8;
  return result;
}

BOOL ActionCondition.isTrue.getter()
{
  uint64_t (**v0)(void);
  uint64_t v1;
  uint64_t v2;
  _BOOL8 v3;

  v1 = (*v0)();
  v3 = v2 == 1;
  sub_100033EC4(v1, v2);
  return v3;
}

uint64_t static ActionConditionEvaluator.buildBlock(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v3 = a1 + 32;
    swift_bridgeObjectRetain(a1);
    v4 = 0;
    v15 = v3;
    v16 = v1;
    while (1)
    {
      v5 = *(_QWORD *)(v3 + 8 * v4);
      v6 = *(_QWORD *)(v5 + 16);
      if (v6)
        break;
LABEL_3:
      if (++v4 == v1)
      {
        swift_bridgeObjectRelease(a1);
        return 0;
      }
    }
    swift_bridgeObjectRetain_n(*(_QWORD *)(v3 + 8 * v4), 2);
    v7 = (uint64_t *)(v5 + 56);
    while (1)
    {
      v8 = *v7;
      v9 = (uint64_t (*)(uint64_t))*(v7 - 3);
      v10 = *(v7 - 2);
      swift_retain(v10);
      v11 = swift_bridgeObjectRetain(v8);
      v1 = v9(v11);
      v13 = v12;
      swift_bridgeObjectRelease(v8);
      swift_release(v10);
      if (v13 != 1)
        break;
      v7 += 5;
      if (!--v6)
      {
        swift_bridgeObjectRelease_n(v5, 2);
        v3 = v15;
        v1 = v16;
        goto LABEL_3;
      }
    }
    swift_bridgeObjectRelease(a1);
    swift_bridgeObjectRelease_n(v5, 2);
  }
  return v1;
}

uint64_t static ActionConditionEvaluator.buildExpression(_:)(__int128 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v8;

  v2 = sub_1000057B4(&qword_1004BC080);
  v3 = swift_allocObject(v2, 72, 7);
  v4 = *((_QWORD *)a1 + 1);
  v6 = *a1;
  v8 = a1[1];
  v5 = v8;
  *(_OWORD *)(v3 + 16) = xmmword_1003C64D0;
  *(_OWORD *)(v3 + 32) = v6;
  *(_OWORD *)(v3 + 48) = v5;
  *(_QWORD *)(v3 + 64) = *((_QWORD *)a1 + 4);
  swift_retain(v4);
  sub_1000795C8((uint64_t)&v8);
  return v3;
}

BOOL _s9MusicCore15ActionConditionV6ResultO21__derived_enum_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  char v9;
  char v10;

  if (a2 == 1)
    return a5 == 1;
  if (a5 == 1)
    return 0;
  if (a2)
  {
    if (a5)
    {
      if (a1 != a4 || a2 != a5)
      {
        v9 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 0);
        v10 = 0;
        if ((v9 & 1) == 0)
          return v10 & 1;
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (!a5)
    {
LABEL_14:
      v10 = ((a3 & 1) == 0) ^ a6;
      return v10 & 1;
    }
    sub_100033EC4(a1, 0);
  }
  v10 = 0;
  return v10 & 1;
}

uint64_t sub_1000A7D94()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 49, 7);
}

uint64_t sub_1000A7DC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  if (((*(uint64_t (**)(void))(v0 + 16))() & 1) != 0)
    return 0;
  swift_bridgeObjectRetain(v2);
  return v1;
}

uint64_t destroy for ActionCondition(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

_QWORD *initializeWithCopy for ActionCondition(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_retain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for ActionCondition(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v4);
  swift_release(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  return a1;
}

__n128 initializeWithTake for ActionCondition(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ActionCondition(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionCondition(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ActionCondition(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ActionCondition()
{
  return &type metadata for ActionCondition;
}

unint64_t destroy for ActionCondition.Result(uint64_t a1)
{
  unint64_t result;
  int v2;

  result = *(_QWORD *)(a1 + 8);
  v2 = -1;
  if (result < 0xFFFFFFFF)
    v2 = result;
  if (v2 - 1 < 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t _s9MusicCore15ActionConditionV6ResultOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF)
    v4 = *(_QWORD *)(a2 + 8);
  if ((int)v4 - 1 < 0)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    swift_bridgeObjectRetain(v3);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  }
  return a1;
}

uint64_t assignWithCopy for ActionCondition.Result(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v12;

  v4 = *(_QWORD *)(a1 + 8);
  LODWORD(v5) = -1;
  if (v4 >= 0xFFFFFFFF)
    LODWORD(v6) = -1;
  else
    v6 = *(_QWORD *)(a1 + 8);
  v7 = v6 - 1;
  if (*((_QWORD *)a2 + 1) < 0xFFFFFFFFuLL)
    v5 = *((_QWORD *)a2 + 1);
  v8 = v5 - 1;
  if (v7 < 0)
  {
    if (v8 < 0)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v12 = *((_QWORD *)a2 + 1);
      *(_QWORD *)(a1 + 8) = v12;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRelease(v4);
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
      return a1;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if ((v8 & 0x80000000) == 0)
  {
LABEL_11:
    v10 = *a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_OWORD *)a1 = v10;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v9 = *((_QWORD *)a2 + 1);
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t assignWithTake for ActionCondition.Result(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = -1;
  if (v4 < 0xFFFFFFFF)
    v5 = v4;
  if (v5 - 1 < 0)
  {
    v6 = *(_QWORD *)(a2 + 8);
    LODWORD(v7) = -1;
    if (v6 < 0xFFFFFFFF)
      v7 = *(_QWORD *)(a2 + 8);
    if ((int)v7 - 1 < 0)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v6;
      swift_bridgeObjectRelease(v4);
      goto LABEL_9;
    }
    swift_bridgeObjectRelease(v4);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_9:
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionCondition.Result(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  if ((v4 + 1) >= 2)
    return v4;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ActionCondition.Result(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

uint64_t sub_1000A8268(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

uint64_t sub_1000A828C(uint64_t result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
  }
  else if (a2)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ActionCondition.Result()
{
  return &type metadata for ActionCondition.Result;
}

ValueMetadata *type metadata accessor for ActionConditionEvaluator()
{
  return &type metadata for ActionConditionEvaluator;
}

void *ActionDisplayConfiguration.image.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 32);
  v2 = v1;
  return v1;
}

uint64_t ActionDisplayConfiguration.attributes.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t ActionDisplayConfiguration.init(title:subtitle:image:attributes:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
  return result;
}

void *ActionDisplayConfiguration.Attributes.disabled.unsafeMutableAddressor()
{
  return &static ActionDisplayConfiguration.Attributes.disabled;
}

void *ActionDisplayConfiguration.Attributes.destructive.unsafeMutableAddressor()
{
  return &static ActionDisplayConfiguration.Attributes.destructive;
}

void *ActionDisplayConfiguration.Attributes.hidden.unsafeMutableAddressor()
{
  return &static ActionDisplayConfiguration.Attributes.hidden;
}

unint64_t sub_1000A8340()
{
  unint64_t result;

  result = qword_1004BC088;
  if (!qword_1004BC088)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActionDisplayConfiguration.Attributes, &type metadata for ActionDisplayConfiguration.Attributes);
    atomic_store(result, (unint64_t *)&qword_1004BC088);
  }
  return result;
}

unint64_t sub_1000A8388()
{
  unint64_t result;

  result = qword_1004BC090;
  if (!qword_1004BC090)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActionDisplayConfiguration.Attributes, &type metadata for ActionDisplayConfiguration.Attributes);
    atomic_store(result, (unint64_t *)&qword_1004BC090);
  }
  return result;
}

unint64_t sub_1000A83D0()
{
  unint64_t result;

  result = qword_1004BC098;
  if (!qword_1004BC098)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActionDisplayConfiguration.Attributes, &type metadata for ActionDisplayConfiguration.Attributes);
    atomic_store(result, (unint64_t *)&qword_1004BC098);
  }
  return result;
}

unint64_t sub_1000A8418()
{
  unint64_t result;

  result = qword_1004BC0A0[0];
  if (!qword_1004BC0A0[0])
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActionDisplayConfiguration.Attributes, &type metadata for ActionDisplayConfiguration.Attributes);
    atomic_store(result, qword_1004BC0A0);
  }
  return result;
}

uint64_t sub_1000A845C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_10002D440(a1);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

void destroy for ActionDisplayConfiguration(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

}

_QWORD *initializeWithCopy for ActionDisplayConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v6 = (void *)a2[4];
  v5 = a2[5];
  a1[4] = v6;
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  v7 = v6;
  return a1;
}

_QWORD *assignWithCopy for ActionDisplayConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = (void *)a1[4];
  v9 = (void *)a2[4];
  a1[4] = v9;
  v10 = v9;

  a1[5] = a2[5];
  return a1;
}

_QWORD *assignWithTake for ActionDisplayConfiguration(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(a1[3]);
  v6 = (void *)a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);

  a1[5] = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionDisplayConfiguration(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ActionDisplayConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ActionDisplayConfiguration()
{
  return &type metadata for ActionDisplayConfiguration;
}

ValueMetadata *type metadata accessor for ActionDisplayConfiguration.Attributes()
{
  return &type metadata for ActionDisplayConfiguration.Attributes;
}

uint64_t ActionList.init(_:lookup:resolver:excluding:)(uint64_t isUniquelyReferenced_nonNull_native, char *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t WitnessTable;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char **v34;
  __int128 v35;
  char *v36;
  char *v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD v44[8];
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  char *v48;
  __int128 v49;
  _QWORD v50[4];
  _QWORD v51[4];
  _QWORD *v52;

  v8 = a4;
  v9 = isUniquelyReferenced_nonNull_native;
  v10 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16);
  v11 = _swiftEmptyArrayStorage;
  v47 = a3;
  if (v10)
  {
    v48 = a2;
    *(_QWORD *)&v49 = a4;
    v52 = _swiftEmptyArrayStorage;
    sub_100097364(0, v10, 0);
    v12 = v9 + 32;
    do
    {
      sub_10000990C(v12, (uint64_t)v51);
      sub_10000990C((uint64_t)v51, (uint64_t)v50);
      v13 = sub_1000057B4(&qword_1004BBF20);
      v14 = String.init<A>(describing:)(v50, v13);
      v16 = v15;
      v17 = String.components(wrappedToLineLength:bullet:)(80, 62, 0xE100000000000000, v14, v15);
      swift_bridgeObjectRelease(v16);
      sub_10000970C(v51);
      v11 = v52;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v52);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)sub_100097364(0, v11[2] + 1, 1);
        v11 = v52;
      }
      v19 = v11[2];
      v18 = v11[3];
      if (v19 >= v18 >> 1)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)sub_100097364((_QWORD *)(v18 > 1), v19 + 1, 1);
        v11 = v52;
      }
      v11[2] = v19 + 1;
      v11[v19 + 4] = v17;
      v12 += 32;
      --v10;
    }
    while (v10);
    v20 = v47;
    a2 = v48;
    v8 = v49;
  }
  else
  {
    v20 = a3;
  }
  v51[0] = v11;
  v50[0] = a2;
  __chkstk_darwin(isUniquelyReferenced_nonNull_native);
  v44[2] = a5;
  v44[3] = a6;
  v44[4] = v9;
  v44[5] = v20;
  v44[6] = v8;
  v44[7] = v51;
  type metadata accessor for ActionLookup.Group(255, a5, a6, v21);
  v22 = type metadata accessor for Array(0);
  v24 = type metadata accessor for ActionGroup(0, a5, a6, v23);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v22);
  v26 = Sequence.compactMap<A>(_:)(sub_1000A8FD8, v44, v22, v24, WitnessTable);
  v27 = v50[0];
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v27);
  v28 = v51[0];
  v29 = swift_bridgeObjectRetain();
  v30 = Array<A>.asciiBoxed()(v29);
  swift_bridgeObjectRelease(v28);
  v31 = *((_QWORD *)v30 + 2);
  if (v31)
  {
    v46 = v26;
    v32 = qword_1004B8A30;
    swift_bridgeObjectRetain();
    if (v32 != -1)
      swift_once(&qword_1004B8A30, sub_1000A6660);
    v33 = type metadata accessor for Logger(0);
    v45 = v30;
    v34 = (char **)(v30 + 40);
    *(_QWORD *)&v35 = 136446210;
    v49 = v35;
    v48 = (char *)&type metadata for Any + 8;
    do
    {
      v36 = *(v34 - 1);
      v37 = *v34;
      sub_100039D34(v33, (uint64_t)static Logger.actions);
      v38 = swift_bridgeObjectRetain_n(v37, 2);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.default.getter(v39);
      if (os_log_type_enabled(v39, v40))
      {
        v41 = swift_slowAlloc(12, -1);
        v42 = (_QWORD *)swift_slowAlloc(32, -1);
        v52 = v42;
        *(_DWORD *)v41 = v49;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v41 + 4) = sub_1000393D0(v36, v37, (uint64_t *)&v52);
        swift_bridgeObjectRelease_n(v37, 3);
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "%{public}s", (uint8_t *)v41, 0xCu);
        swift_arrayDestroy(v42, 1, v48);
        swift_slowDealloc(v42, -1, -1);
        swift_slowDealloc(v41, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v37, 2);
      }
      v34 += 2;
      --v31;
    }
    while (v31);
    v30 = v45;
    swift_bridgeObjectRelease(v45);
    v26 = v46;
    v20 = v47;
  }
  swift_bridgeObjectRelease(v30);
  sub_10000970C(v20);
  swift_bridgeObjectRelease(v51[0]);
  return v26;
}

uint64_t sub_1000A8AD8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v14 = *a1;
  v22 = _swiftEmptyArrayStorage;
  sub_1000444A8(a3, (uint64_t)v21);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = sub_1000A8C08(v14, a2, v21, a4, (uint64_t)&v22, a6, a7);
  v16 = v22;
  v17 = (_QWORD *)*a5;
  result = swift_isUniquelyReferenced_nonNull_native(*a5);
  *a5 = (uint64_t)v17;
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_10005E318(0, v17[2] + 1, 1, v17);
    v17 = (_QWORD *)result;
    *a5 = result;
  }
  v20 = v17[2];
  v19 = v17[3];
  if (v20 >= v19 >> 1)
  {
    result = (uint64_t)sub_10005E318((_QWORD *)(v19 > 1), v20 + 1, 1, v17);
    v17 = (_QWORD *)result;
    *a5 = result;
  }
  v17[2] = v20 + 1;
  v17[v20 + 4] = v16;
  *a8 = v15;
  return result;
}

uint64_t sub_1000A8C08(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t WitnessTable;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[10];

  v20[9] = a1;
  v20[2] = a6;
  v20[3] = a7;
  v20[4] = a5;
  v20[5] = a4;
  v20[6] = a2;
  v20[7] = a3;
  v13 = type metadata accessor for Array(0);
  v15 = type metadata accessor for AnyAction(0, a6, a7, v14);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v13);
  v17 = Sequence.compactMap<A>(_:)(sub_1000A9164, v20, v13, v15, WitnessTable);
  swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(a4);
  v18 = Array.count.getter(v17, v15);
  sub_10000970C(a3);
  if (v18 < 1)
  {
    swift_bridgeObjectRelease(v17);
    return 0;
  }
  return v17;
}

uint64_t sub_1000A8D0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t WitnessTable;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v36 = a2;
  v37 = a8;
  v14 = *(_QWORD *)(a6 - 8);
  __chkstk_darwin(a1);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v17 + 24))(v18, v17) & 1) != 0)
  {
    if (qword_1004B93A8 != -1)
      swift_once(&qword_1004B93A8, sub_10020D77C);
    if (static DeviceCapabilities.isInternalInstall != 1)
      goto LABEL_9;
    v38 = 0;
    v39 = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    v20 = v39;
    v21 = sub_100050D44(a1, a6, *(_QWORD *)(a7 + 8));
    v23 = v22;
    swift_bridgeObjectRelease(v20);
    v38 = v21;
    v39 = v23;
    v24 = 0xD00000000000001ELL;
    v25 = 0x80000001003A8770;
LABEL_8:
    String.append(_:)(*(Swift::String *)&v24);
    v32 = v39;
    Array<A>.appendStringComponents(_:lineLength:bullet:)(v38, v39, 80, 120, 0xE100000000000000);
    swift_bridgeObjectRelease(v32);
LABEL_9:
    v33 = type metadata accessor for AnyAction(0, a6, a7, v19);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v37, 1, 1, v33);
  }
  v38 = a3;
  v26 = type metadata accessor for Array(0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v26);
  if ((Sequence<>.contains(_:)(a1, v26, WitnessTable, *(_QWORD *)(*(_QWORD *)(a7 + 16) + 8)) & 1) != 0)
  {
    v38 = 0;
    v39 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    v28 = v39;
    v29 = sub_100050D44(a1, a6, *(_QWORD *)(a7 + 8));
    v31 = v30;
    swift_bridgeObjectRelease(v28);
    v38 = v29;
    v39 = v31;
    v25 = 0x80000001003A8790;
    v24 = 0xD000000000000016;
    goto LABEL_8;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, a6);
  sub_1000444A8(a5, (uint64_t)&v38);
  swift_bridgeObjectRetain();
  return AnyAction.init(identifier:contexts:resolver:logs:)((uint64_t)v16, a4, &v38, v36, a6, a7, v37);
}

uint64_t (*sub_1000A8F84(uint64_t (*result)(uint64_t a1), unint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;

  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a3 + 16) > a2)
  {
    v3 = result;
    v4 = a3 + 16 * a2;
    v5 = *(_QWORD *)(v4 + 40);
    *(_QWORD *)v3 = *(_QWORD *)(v4 + 32);
    *((_QWORD *)v3 + 1) = v5;
    swift_bridgeObjectRetain();
    return destroy for ActionError;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A8FD8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1000A8AD8(a1, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(uint64_t **)(v2 + 56), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t type metadata accessor for ActionGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100051E10(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ActionGroup);
}

uint64_t type metadata accessor for ActionList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100051E10(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ActionList);
}

uint64_t *sub_1000A9010(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    swift_retain(*(_QWORD *)(a3 + 8 * a2 + 32));
LABEL_5:
    *v3 = v4;
    return (uint64_t *)destroy for PresentationKind.NowPlayingDestination;
  }
  __break(1u);
  return result;
}

uint64_t destroy for PresentationKind.NowPlayingDestination(_QWORD *a1)
{
  return swift_release(*a1);
}

void (*sub_1000A9084(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return _s9ComponentC26VideoPresentationResetInfoVwxx;
  }
  __break(1u);
  return result;
}

uint64_t *sub_1000A90F0(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_unknownObjectRetain(*(_QWORD *)(a3 + 8 * a2 + 32));
LABEL_5:
    *v3 = v4;
    return (uint64_t *)sub_1000A915C;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A915C(_QWORD *a1)
{
  return swift_unknownObjectRelease(*a1);
}

uint64_t sub_1000A9164@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_1000A8D0C(a1, v2[4], v2[5], v2[6], v2[7], v2[2], v2[3], a2);
}

void ActionType.isHidden.getter(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1000A91B4@<X0>(char a1@<W8>)
{
  return a1 & 1;
}

uint64_t sub_1000A91C8()
{
  unint64_t v0;
  char v1;

  v0 = sub_1000A9294();
  v1 = FeatureFlagsKey.isEnabled.getter((uint64_t)&type metadata for Feature.Music, v0);
  return sub_1000A91B4(v1 ^ 1u);
}

unint64_t sub_1000A9250()
{
  unint64_t result;

  result = qword_1004BC1A8;
  if (!qword_1004BC1A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Feature.MediaPlayer, &type metadata for Feature.MediaPlayer);
    atomic_store(result, (unint64_t *)&qword_1004BC1A8);
  }
  return result;
}

unint64_t sub_1000A9294()
{
  unint64_t result;

  result = qword_1004BC1B0;
  if (!qword_1004BC1B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Feature.Music, &type metadata for Feature.Music);
    atomic_store(result, (unint64_t *)&qword_1004BC1B0);
  }
  return result;
}

_QWORD *static ActionType.modelActionLookup.getter()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t inited;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  _BYTE v23[40];
  _BYTE v24[32];
  _QWORD v25[12];

  v0 = (_BYTE *)sub_1000057B4(&qword_1004BACE8);
  v1 = swift_allocObject(v0, 40, 7);
  v22 = xmmword_1003C64D0;
  *(_OWORD *)(v1 + 16) = xmmword_1003C64D0;
  v21 = v1;
  *(_QWORD *)(v1 + 32) = &off_1004664F8;
  v2 = swift_allocObject(v0, 40, 7);
  *(_OWORD *)(v2 + 16) = xmmword_1003C64D0;
  v20 = v2;
  *(_QWORD *)(v2 + 32) = &off_100466520;
  v3 = swift_allocObject(v0, 40, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1003C64D0;
  *(_QWORD *)(v3 + 32) = &off_100466548;
  v4 = swift_allocObject(v0, 40, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1003C64D0;
  *(_QWORD *)(v4 + 32) = &off_100466570;
  v5 = swift_allocObject(v0, 40, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1003C64D0;
  *(_QWORD *)(v5 + 32) = &off_1004665A0;
  v6 = swift_allocObject(v0, 40, 7);
  *(_OWORD *)(v6 + 16) = xmmword_1003C64D0;
  *(_QWORD *)(v6 + 32) = &off_1004665C8;
  v7 = swift_allocObject(v0, 40, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1003C64D0;
  *(_QWORD *)(v7 + 32) = &off_1004665F0;
  v8 = swift_allocObject(v0, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1003C64D0;
  *(_QWORD *)(v8 + 32) = &off_100466618;
  v9 = swift_allocObject(v0, 40, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1003C64D0;
  *(_QWORD *)(v9 + 32) = &off_100466640;
  v10 = (_QWORD *)swift_allocObject(v0, 40, 7);
  *((_OWORD *)v10 + 1) = xmmword_1003C64D0;
  v10[4] = &off_100466668;
  if (qword_1004B93A8 != -1)
LABEL_25:
    swift_once(&qword_1004B93A8, sub_10020D77C);
  if (static DeviceCapabilities.isInternalInstall == 1)
  {
    inited = swift_initStackObject(v0, v23);
    *(_OWORD *)(inited + 16) = v22;
    *(_QWORD *)(inited + 32) = &off_100466690;
    sub_1000AA740((_QWORD *)inited);
  }
  v0 = v24;
  *(_QWORD *)&v22 = v25;
  v25[0] = v21;
  v25[1] = v20;
  v25[2] = v3;
  v25[3] = v4;
  v25[4] = v5;
  v25[5] = v6;
  v25[6] = v7;
  v25[7] = v8;
  v25[8] = v9;
  v25[9] = v10;
  v7 = 32;
  v25[10] = _swiftEmptyArrayStorage;
  v10 = _swiftEmptyArrayStorage;
  do
  {
    v3 = *(_QWORD *)&v24[v7];
    v4 = *(_QWORD *)(v3 + 16);
    v5 = v10[2];
    v6 = v5 + v4;
    if (__OFADD__(v5, v4))
    {
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(v10);
    if ((_DWORD)isUniquelyReferenced_nonNull_native && v6 <= v10[3] >> 1)
    {
      if (!*(_QWORD *)(v3 + 16))
        goto LABEL_5;
    }
    else
    {
      if (v5 <= v6)
        v13 = v5 + v4;
      else
        v13 = v5;
      v10 = sub_10005E438(isUniquelyReferenced_nonNull_native, v13, 1, v10);
      if (!*(_QWORD *)(v3 + 16))
      {
LABEL_5:
        if (v4)
          goto LABEL_22;
        goto LABEL_6;
      }
    }
    v14 = v10[2];
    if ((v10[3] >> 1) - v14 < v4)
      goto LABEL_23;
    v5 = (uint64_t)&v10[v14 + 4];
    v6 = v3 + 32;
    sub_1000057B4(&qword_1004BACF0);
    swift_arrayInitWithCopy(v5);
    if (v4)
    {
      v15 = v10[2];
      v16 = __OFADD__(v15, v4);
      v17 = v15 + v4;
      if (v16)
        goto LABEL_24;
      v10[2] = v17;
    }
LABEL_6:
    swift_bridgeObjectRelease(v3);
    v7 += 8;
  }
  while (v7 != 120);
  v18 = sub_1000057B4(&qword_1004BC1B8);
  swift_arrayDestroy(v25, 11, v18);
  return v10;
}

uint64_t static ActionLookupBuilder.buildExpression(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v5 = type metadata accessor for ActionLookup.Group(255, a2, a3, a4);
  v6 = type metadata accessor for _ContiguousArrayStorage(0, v5);
  v7 = swift_allocObject(v6, 40, 7);
  v8 = static Array._adoptStorage(_:count:)(v7, 1);
  *v9 = a1;
  v10 = sub_100050060(v8);
  swift_bridgeObjectRetain();
  return v10;
}

uint64_t static ActionLookupBuilder.buildBlock<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000A973C(a1, a2, a3, a4, a5, (uint64_t)sub_100051E40);
}

{
  return sub_1000A973C(a1, a2, a3, a4, a5, (uint64_t)sub_100050DD8);
}

uint64_t static ActionLookupBuilder.buildOptional<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  if (a1)
  {
    v5 = a1;
  }
  else
  {
    v6 = type metadata accessor for ActionLookup.Group(0, a3, a5, a4);
    v5 = static Array._allocateUninitialized(_:)(0, v6);
  }
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t sub_1000A973C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;
  _QWORD v12[8];

  v12[7] = a1;
  v12[2] = a2;
  v12[3] = a3;
  v12[4] = a4;
  v12[5] = a5;
  type metadata accessor for ActionLookup.Group(255, a3, a5, a4);
  v7 = type metadata accessor for Array(255);
  v8 = type metadata accessor for Array(0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v8);
  v10 = swift_getWitnessTable(&protocol conformance descriptor for [A], v7);
  return Sequence.flatMap<A>(_:)(a6, v12, v8, v7, WitnessTable, v10);
}

uint64_t static ActionType.socialActionLookup.getter()
{
  int64_t v0;
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  _QWORD v23[3];

  v1 = sub_1000057B4(&qword_1004BACE8);
  v2 = swift_allocObject(v1, 40, 7);
  *(_OWORD *)(v2 + 16) = xmmword_1003C64D0;
  *(_QWORD *)(v2 + 32) = &off_1004666B8;
  v3 = v2 + 32;
  v4 = swift_allocObject(v1, 40, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1003C64D0;
  *(_QWORD *)(v4 + 32) = &off_1004666E0;
  v5 = swift_allocObject(v1, 40, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1003C64D0;
  *(_QWORD *)(v5 + 32) = &off_100466708;
  v23[0] = v2;
  v23[1] = v4;
  v23[2] = v5;
  swift_bridgeObjectRetain();
  result = (uint64_t)sub_10005E438(0, 1, 1, _swiftEmptyArrayStorage);
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_37;
  v7 = (_QWORD *)result;
  v8 = *(_QWORD *)(result + 16);
  if (v8 >= *(_QWORD *)(result + 24) >> 1)
  {
    __break(1u);
    goto LABEL_11;
  }
  v9 = result + 8 * v8 + 32;
  sub_1000057B4(&qword_1004BACF0);
  swift_arrayInitWithCopy(v9);
  ++v7[2];
  swift_bridgeObjectRelease(v2);
  v2 = *(_QWORD *)(v4 + 16);
  v3 = v7[2];
  v0 = v3 + v2;
  if (__OFADD__(v3, v2))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v10 = v7[3];
  result = swift_bridgeObjectRetain();
  if (v0 <= (uint64_t)(v10 >> 1))
  {
    if (v2)
      goto LABEL_6;
LABEL_16:
    if (v2)
    {
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
LABEL_17:
    swift_bridgeObjectRelease(v4);
    v15 = *(_QWORD *)(v5 + 16);
    v16 = v7[2];
    v17 = v16 + v15;
    if (__OFADD__(v16, v15))
    {
      __break(1u);
    }
    else
    {
      v18 = v7[3];
      result = swift_bridgeObjectRetain();
      if (v17 <= (uint64_t)(v18 >> 1))
      {
        if (v15)
          goto LABEL_20;
LABEL_29:
        if (!v15)
          goto LABEL_30;
        goto LABEL_32;
      }
    }
    if (v16 <= v17)
      v21 = v16 + v15;
    else
      v21 = v16;
    result = (uint64_t)sub_10005E438((_QWORD *)1, v21, 1, v7);
    v7 = (_QWORD *)result;
    v16 = *(_QWORD *)(result + 16);
    if (*(_QWORD *)(v5 + 16))
    {
LABEL_20:
      if ((v7[3] >> 1) - v16 >= v15)
      {
        sub_1000057B4(&qword_1004BACF0);
        result = swift_arrayInitWithCopy(&v7[v16 + 4]);
        if (!v15)
        {
LABEL_30:
          swift_bridgeObjectRelease(v5);
          v22 = sub_1000057B4(&qword_1004BC1B8);
          swift_arrayDestroy(v23, 3, v22);
          return (uint64_t)v7;
        }
        v19 = v7[2];
        v12 = __OFADD__(v19, v15);
        v20 = v19 + v15;
        if (!v12)
        {
          v7[2] = v20;
          goto LABEL_30;
        }
        goto LABEL_36;
      }
      goto LABEL_34;
    }
    goto LABEL_29;
  }
LABEL_12:
  if (v3 <= v0)
    v14 = v0;
  else
    v14 = v3;
  result = (uint64_t)sub_10005E438((_QWORD *)1, v14, 1, v7);
  v7 = (_QWORD *)result;
  v3 = *(_QWORD *)(result + 16);
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_16;
LABEL_6:
  if ((v7[3] >> 1) - v3 < v2)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  sub_1000057B4(&qword_1004BACF0);
  result = swift_arrayInitWithCopy(&v7[v3 + 4]);
  if (!v2)
    goto LABEL_17;
  v11 = v7[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v7[2] = v13;
    goto LABEL_17;
  }
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t ActionType.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000A9B40 + 4 * word_1003CB87A[a1]))(0x62694C6F54646461, 0xEC00000079726172);
}

unint64_t sub_1000A9B40()
{
  return 0xD000000000000012;
}

uint64_t sub_1000AA080()
{
  return 0x6E556C6169636F73;
}

uint64_t sub_1000AA0B8()
{
  return 1953656691;
}

uint64_t sub_1000AA0C8()
{
  return 0x4C74736567677573;
}

uint64_t sub_1000AA0EC()
{
  return 0x6F7661466F646E75;
}

uint64_t sub_1000AA10C()
{
  return 0x676775536F646E75;
}

uint64_t sub_1000AA130()
{
  return 0x6C6C754677656976;
}

_UNKNOWN **static ActionType.allCases.getter()
{
  return &off_100466CC0;
}

uint64_t sub_1000AA164(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = ActionType.rawValue.getter(*a1);
  v5 = v4;
  v6 = ActionType.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_1000AA1EC()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6);
  v2 = ActionType.rawValue.getter(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000AA24C(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = ActionType.rawValue.getter(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000AA28C()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6);
  v2 = ActionType.rawValue.getter(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000AA2E8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s9MusicCore10ActionTypeO8rawValueACSgSS_tcfC_0(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_1000AA314@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = ActionType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_1000AA33C()
{
  char *v0;

  ActionType.isHidden.getter(*v0);
}

void sub_1000AA344(_QWORD *a1@<X8>)
{
  *a1 = &off_100466CC0;
}

uint64_t sub_1000AA354()
{
  unsigned __int8 *v0;

  return ActionType.rawValue.getter(*v0);
}

uint64_t sub_1000AA35C(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  int64_t v12;

  v2 = *(_QWORD *)(result + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v12 = v4 + v2;
  else
    v12 = v4;
  result = sub_10005DA98(result, v12, 1, v3);
  v3 = (_QWORD *)result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = v3[2];
  if ((v3[3] >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v8 = sub_1000057B4(&qword_1004B99B0);
  result = swift_arrayInitWithCopy((char *)v3+ ((*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * v7);
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease(v6);
    *v1 = v3;
    return result;
  }
  v9 = v3[2];
  v10 = __OFADD__(v9, v2);
  v11 = v9 + v2;
  if (!v10)
  {
    v3[2] = v11;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

_QWORD *sub_1000AA460(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  int64_t v12;

  v2 = result[2];
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= v3[3] >> 1)
  {
    if (v6[2])
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v12 = v4 + v2;
  else
    v12 = v4;
  result = sub_10005E0A4(result, v12, 1, v3);
  v3 = result;
  if (!v6[2])
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = v3[2];
  if ((v3[3] >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v8 = (uint64_t)&v3[11 * v7 + 4];
  sub_1000057B4(&qword_1004BAD00);
  result = (_QWORD *)swift_arrayInitWithCopy(v8);
  if (!v2)
  {
LABEL_14:
    result = (_QWORD *)swift_bridgeObjectRelease(v6);
    *v1 = v3;
    return result;
  }
  v9 = v3[2];
  v10 = __OFADD__(v9, v2);
  v11 = v9 + v2;
  if (!v10)
  {
    v3[2] = v11;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

_QWORD *sub_1000AA55C(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  int64_t v12;

  v2 = result[2];
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= v3[3] >> 1)
  {
    if (v6[2])
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v12 = v4 + v2;
  else
    v12 = v4;
  result = sub_10005E304(result, v12, 1, v3);
  v3 = result;
  if (!v6[2])
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = v3[2];
  if ((v3[3] >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v8 = (uint64_t)&v3[5 * v7 + 4];
  sub_1000057B4(&qword_1004BF5C0);
  result = (_QWORD *)swift_arrayInitWithCopy(v8);
  if (!v2)
  {
LABEL_14:
    result = (_QWORD *)swift_bridgeObjectRelease(v6);
    *v1 = v3;
    return result;
  }
  v9 = v3[2];
  v10 = __OFADD__(v9, v2);
  v11 = v9 + v2;
  if (!v10)
  {
    v3[2] = v11;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

char *sub_1000AA658(char *result)
{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  v2 = *((_QWORD *)result + 2);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= *((_QWORD *)v3 + 3) >> 1)
  {
    if (*((_QWORD *)v6 + 2))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v11 = v4 + v2;
  else
    v11 = v4;
  result = sub_10005DE58(result, v11, 1, v3);
  v3 = result;
  if (!*((_QWORD *)v6 + 2))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = *((_QWORD *)v3 + 2);
  if ((*((_QWORD *)v3 + 3) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = (char *)swift_arrayInitWithCopy(&v3[16 * v7 + 32]);
  if (!v2)
  {
LABEL_14:
    result = (char *)swift_bridgeObjectRelease(v6);
    *v1 = v3;
    return result;
  }
  v8 = *((_QWORD *)v3 + 2);
  v9 = __OFADD__(v8, v2);
  v10 = v8 + v2;
  if (!v9)
  {
    *((_QWORD *)v3 + 2) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

_QWORD *sub_1000AA740(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  int64_t v12;

  v2 = result[2];
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= v3[3] >> 1)
  {
    if (v6[2])
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v12 = v4 + v2;
  else
    v12 = v4;
  result = sub_10005E438(result, v12, 1, v3);
  v3 = result;
  if (!v6[2])
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = v3[2];
  if ((v3[3] >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v8 = (uint64_t)&v3[v7 + 4];
  sub_1000057B4(&qword_1004BACF0);
  result = (_QWORD *)swift_arrayInitWithCopy(v8);
  if (!v2)
  {
LABEL_14:
    result = (_QWORD *)swift_bridgeObjectRelease(v6);
    *v1 = v3;
    return result;
  }
  v9 = v3[2];
  v10 = __OFADD__(v9, v2);
  v11 = v9 + v2;
  if (!v10)
  {
    v3[2] = v11;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1000AA838(uint64_t a1)
{
  return sub_1000AAB5C(a1, sub_100112CBC);
}

uint64_t sub_1000AA844(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  int64_t v12;

  v2 = *(_QWORD *)(result + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v12 = v4 + v2;
  else
    v12 = v4;
  result = sub_10005DE30(result, v12, 1, v3);
  v3 = (_QWORD *)result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = v3[2];
  v8 = (v3[3] >> 1) - v7;
  result = type metadata accessor for URLQueryItem(0);
  if (v8 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy((char *)v3+ ((*(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(result - 8) + 72) * v7);
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v9 = v3[2];
  v10 = __OFADD__(v9, v2);
  v11 = v9 + v2;
  if (!v10)
  {
    v3[2] = v11;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1000AA944(uint64_t result)
{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  char *v24;
  _QWORD *v25;
  uint64_t (*v26)(uint64_t);
  uint64_t *v27;
  _BYTE v28[32];
  uint64_t v29;
  uint64_t v30;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v6 = result;
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v8 = *((_QWORD *)v3 + 3) >> 1, v8 < v5))
  {
    if (v4 <= v5)
      v9 = v4 + v2;
    else
      v9 = v4;
    v3 = sub_10005DE58(isUniquelyReferenced_nonNull_native, v9, 1, v3);
    v8 = *((_QWORD *)v3 + 3) >> 1;
  }
  v10 = *((_QWORD *)v3 + 2);
  v11 = v8 - v10;
  result = sub_100112668(&v29, &v3[16 * v10 + 32], v8 - v10, v6);
  if (result < v2)
    goto LABEL_15;
  if (result)
  {
    v12 = *((_QWORD *)v3 + 2);
    v13 = __OFADD__(v12, result);
    v14 = v12 + result;
    if (v13)
    {
      __break(1u);
      goto LABEL_32;
    }
    *((_QWORD *)v3 + 2) = v14;
  }
  if (result != v11)
  {
LABEL_13:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
LABEL_16:
  if (!v30)
    goto LABEL_13;
  v15 = v30 - 1;
  if (__OFSUB__(v30, 1))
    goto LABEL_34;
  v16 = *((_QWORD *)v3 + 2);
  v17 = v29;
  v18 = sub_1000A8F84((uint64_t (*)(uint64_t))v28, v30 - 1, v29);
  v21 = *v19;
  v20 = v19[1];
  swift_bridgeObjectRetain();
  result = ((uint64_t (*)(_BYTE *, _QWORD))v18)(v28, 0);
LABEL_20:
  while (1)
  {
    v22 = *((_QWORD *)v3 + 3);
    v23 = v22 >> 1;
    v5 = v16 + 1;
    if ((uint64_t)(v22 >> 1) < v16 + 1)
      break;
    if (v16 < v23)
      goto LABEL_22;
LABEL_19:
    *((_QWORD *)v3 + 2) = v16;
  }
  result = (uint64_t)sub_10005DE58((char *)(v22 > 1), v16 + 1, 1, v3);
  v3 = (char *)result;
  v23 = *(_QWORD *)(result + 24) >> 1;
  if (v16 >= v23)
    goto LABEL_19;
LABEL_22:
  v24 = &v3[16 * v16];
  *((_QWORD *)v24 + 4) = v21;
  *((_QWORD *)v24 + 5) = v20;
  if (!v15)
  {
LABEL_32:
    *((_QWORD *)v3 + 2) = v5;
    goto LABEL_13;
  }
  v25 = v24 + 56;
  while (1)
  {
    v13 = __OFSUB__(v15--, 1);
    if (v13)
      break;
    v26 = sub_1000A8F84((uint64_t (*)(uint64_t))v28, v15, v17);
    v21 = *v27;
    v20 = v27[1];
    swift_bridgeObjectRetain();
    result = ((uint64_t (*)(_BYTE *, _QWORD))v26)(v28, 0);
    if (v23 == v5)
    {
      v16 = v23;
      *((_QWORD *)v3 + 2) = v23;
      goto LABEL_20;
    }
    *(v25 - 1) = v21;
    *v25 = v20;
    ++v5;
    v25 += 2;
    if (!v15)
      goto LABEL_32;
  }
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_1000AAB50(uint64_t a1)
{
  return sub_1000AAB5C(a1, sub_100112E64);
}

uint64_t sub_1000AAB5C(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, uint64_t))
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = *v2;
  if (!((unint64_t)*v2 >> 62))
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    v8 = v7 + v5;
    if (!__OFADD__(v7, v5))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v6 < 0)
    v19 = *v2;
  else
    v19 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v2);
  v7 = _CocoaArrayWrapper.endIndex.getter(v19);
  swift_bridgeObjectRelease(v6);
  v8 = v7 + v5;
  if (__OFADD__(v7, v5))
    goto LABEL_29;
LABEL_5:
  v6 = *v2;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *v2 = v6;
  v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v7 = 1;
  }
  if ((unint64_t)v6 >> 62)
    goto LABEL_31;
  v11 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v11 <= v8)
      v11 = v8;
    swift_bridgeObjectRetain(v6);
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v11, 1, v6);
    swift_bridgeObjectRelease(*v2);
    *v2 = v6;
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = a2(v10 + 8 * *(_QWORD *)(v10 + 16) + 32, (*(_QWORD *)(v10 + 24) >> 1) - *(_QWORD *)(v10 + 16), a1);
    if (v13 >= v5)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v6 < 0)
      v20 = v6;
    else
      v20 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v11 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(v6);
  }
  if (v13 < 1)
    goto LABEL_19;
  v14 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v15 = __OFADD__(v14, v13);
  v16 = v14 + v13;
  if (!v15)
  {
    *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
LABEL_19:
    v17 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v17);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000AAD18(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v11 = v4 + v2;
  else
    v11 = v4;
  result = (uint64_t)sub_10005EBE8((char *)result, v11, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = *(_QWORD *)(v3 + 16);
  if ((*(_QWORD *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = (uint64_t)memcpy((void *)(v3 + 32 * v7 + 32), (const void *)(v6 + 32), 32 * v2);
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v8 = *(_QWORD *)(v3 + 16);
  v9 = __OFADD__(v8, v2);
  v10 = v8 + v2;
  if (!v9)
  {
    *(_QWORD *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1000AADF8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v4 < 0)
    v17 = *v1;
  else
    v17 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease();
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_29;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_31;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_10011301C(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0)
      v18 = v4;
    else
      v18 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    v15 = swift_bridgeObjectRelease();
    return specialized Array._endMutation()(v15);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ActionLookup.Group(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100051E10(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ActionLookup.Group);
}

uint64_t _s9MusicCore10ActionTypeO8rawValueACSgSS_tcfC_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_100466730, a1, a2, &unk_1004B9420);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x3A)
    return 58;
  else
    return v3;
}

unint64_t sub_1000AB010()
{
  unint64_t result;

  result = qword_1004BC1C0;
  if (!qword_1004BC1C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActionType, &type metadata for ActionType);
    atomic_store(result, (unint64_t *)&qword_1004BC1C0);
  }
  return result;
}

unint64_t sub_1000AB054(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1000AB080();
  result = sub_1000AB0C4();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1000AB080()
{
  unint64_t result;

  result = qword_1004BC1C8;
  if (!qword_1004BC1C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActionType, &type metadata for ActionType);
    atomic_store(result, (unint64_t *)&qword_1004BC1C8);
  }
  return result;
}

unint64_t sub_1000AB0C4()
{
  unint64_t result;

  result = qword_1004BC1D0;
  if (!qword_1004BC1D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActionType, &type metadata for ActionType);
    atomic_store(result, (unint64_t *)&qword_1004BC1D0);
  }
  return result;
}

unint64_t sub_1000AB10C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1004BC1D8;
  if (!qword_1004BC1D8)
  {
    v1 = sub_100009788(qword_1004BC1E0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1004BC1D8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ActionType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xC7)
    goto LABEL_17;
  if (a2 + 57 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 57) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 57;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 57;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 57;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x3A;
  v8 = v6 - 58;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ActionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 57 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 57) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xC7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xC6)
    return ((uint64_t (*)(void))((char *)&loc_1000AB234 + 4 * byte_1003CB8F3[v4]))();
  *a1 = a2 + 57;
  return ((uint64_t (*)(void))((char *)sub_1000AB268 + 4 * byte_1003CB8EE[v4]))();
}

uint64_t sub_1000AB268(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AB270(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000AB278);
  return result;
}

uint64_t sub_1000AB284(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000AB28CLL);
  *(_BYTE *)result = a2 + 57;
  return result;
}

uint64_t sub_1000AB290(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AB298(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ActionType()
{
  return &type metadata for ActionType;
}

uint64_t type metadata accessor for ActionLookup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100051E10(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ActionLookup);
}

uint64_t type metadata accessor for ActionLookupBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100051E10(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ActionLookupBuilder);
}

_QWORD *sub_1000AB2CC@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(unsigned __int8 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  _QWORD *result;
  _QWORD *v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  Swift::String v52;
  uint64_t v53;
  void *v54;
  Swift::String v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  __C::_NSRange v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  Swift::String v63;
  uint64_t v64;
  void *v65;
  Swift::String v66;
  Swift::String v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _QWORD *v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _OWORD v82[8];
  _OWORD v83[9];
  __int128 v84;
  void *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _OWORD v90[4];
  _QWORD v91[5];
  _BYTE v92[80];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  unsigned __int8 v97[17];

  v97[0] = a1;
  ActionType.isHidden.getter(a1);
  if ((v10 & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    if (qword_1004B93A8 != -1)
      swift_once(&qword_1004B93A8, sub_10020D77C);
    if ((static DeviceCapabilities.isInternalInstall & 1) == 0)
      goto LABEL_17;
    _StringGuts.grow(_:)(32);
    v11 = ActionType.rawValue.getter(a1);
    v13 = v12;
    swift_bridgeObjectRelease(0xE000000000000000);
    *(_QWORD *)v92 = v11;
    *(_QWORD *)&v92[8] = v13;
    v14 = 0xD00000000000001ELL;
    v15 = " - Action identifier is hidden";
    goto LABEL_13;
  }
  v16 = a3[3];
  v17 = a3[4];
  sub_1000096A0(a3, v16);
  v18 = *(uint64_t (**)(unsigned __int8 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v17 + 8);
  v19 = sub_1000AB0C4();
  v20 = v18(v97, &type metadata for ActionType, v19, v16, v17);
  if (!v20)
  {
    swift_bridgeObjectRelease(a2);
    _StringGuts.grow(_:)(22);
    v31 = ActionType.rawValue.getter(a1);
    v33 = v32;
    swift_bridgeObjectRelease(0xE000000000000000);
    *(_QWORD *)v92 = v31;
    *(_QWORD *)&v92[8] = v33;
    v14 = 0xD000000000000014;
    v15 = " - No implementation";
LABEL_13:
    v34 = (unint64_t)(v15 - 32) | 0x8000000000000000;
    String.append(_:)(*(Swift::String *)&v14);
    v35 = *(_QWORD *)&v92[8];
    v37 = *(_QWORD *)&v92[8];
    v36 = *(_QWORD *)v92;
LABEL_16:
    Array<A>.appendStringComponents(_:lineLength:bullet:)(v36, v37, 80, 120, 0xE100000000000000);
    swift_bridgeObjectRelease(v35);
LABEL_17:
    sub_10000970C(a3);
    sub_1000A6750(0, 1, 0, 0, 0);
    sub_10000DCF8(0, 0);
    sub_10000DCF8(0, 0);
    sub_10000DCF8(0, 0);
    sub_10000DCF8(0, 0);
    sub_1000B07C8(v92);
    return (_QWORD *)sub_10000FD10((uint64_t)v92, a5, &qword_1004BC4C0);
  }
  *(_QWORD *)&v79 = a4;
  v22 = *(_QWORD *)(a2 + 16);
  if (!v22)
  {
    swift_bridgeObjectRelease(a2);
LABEL_15:
    *(_QWORD *)v92 = 0;
    *(_QWORD *)&v92[8] = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    v38 = *(_QWORD *)&v92[8];
    v39 = ActionType.rawValue.getter(v97[0]);
    v41 = v40;
    swift_bridgeObjectRelease(v38);
    *(_QWORD *)v92 = v39;
    *(_QWORD *)&v92[8] = v41;
    v42._countAndFlagsBits = 0xD000000000000016;
    v42._object = (void *)0x80000001003A8730;
    String.append(_:)(v42);
    v35 = *(_QWORD *)&v92[8];
    v37 = *(_QWORD *)&v92[8];
    v36 = *(_QWORD *)v92;
    goto LABEL_16;
  }
  v23 = v20;
  v24 = v21;
  v76 = a3;
  v77 = a5;
  *(_QWORD *)&v80 = *(_QWORD *)(v21 + 8);
  *(_QWORD *)&v78 = a2;
  v25 = a2 + 32;
  while (1)
  {
    sub_10000990C(v25, (uint64_t)&v84);
    v26 = type metadata accessor for Optional(0, v23);
    v27 = *(_QWORD *)(v26 - 8);
    __chkstk_darwin(v26);
    v29 = (char *)&v72 - v28;
    ((void (*)(__int128 *, uint64_t, uint64_t))v80)(&v84, v23, v24);
    v30 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v29, 1, v23) != 1)
      break;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
    memset(v92, 0, 40);
    sub_10000FE2C((uint64_t)v92, &qword_1004BBF28);
    v25 += 32;
    if (!--v22)
    {
      swift_bridgeObjectRelease(v78);
      a3 = v76;
      a5 = v77;
      goto LABEL_15;
    }
  }
  *(_QWORD *)&v92[24] = v23;
  *(_QWORD *)&v92[32] = v24;
  v44 = sub_1000407CC(v92);
  (*(void (**)(_QWORD *, char *, uint64_t))(v30 + 32))(v44, v29, v23);
  swift_bridgeObjectRelease(v78);
  sub_100033620((__int128 *)v92, (uint64_t)v91);
  sub_1000444A8((uint64_t)v91, (uint64_t)&v84);
  v45 = v97[0];
  result = sub_1000AB9DC(&v84, v97[0], v92);
  v46 = v93;
  if ((_QWORD)v93)
  {
    v47 = *((_QWORD *)&v93 + 1);
    v48 = ((uint64_t (*)(_QWORD *))v93)(result);
    if (v49 != 1)
    {
      v60 = v48;
      v61 = v49;
      if ((v50 & 1) != 0)
      {
        sub_100033EC4(v48, v49);
        v64 = *(_QWORD *)&v92[8];
        v65 = *(void **)&v92[16];
      }
      else
      {
        *(_QWORD *)&v84 = ActionType.rawValue.getter(v45);
        *((_QWORD *)&v84 + 1) = v62;
        v63._countAndFlagsBits = 10272;
        v63._object = (void *)0xE200000000000000;
        String.append(_:)(v63);
        v64 = *(_QWORD *)&v92[8];
        v65 = *(void **)&v92[16];
        swift_bridgeObjectRetain();
        v66._countAndFlagsBits = v64;
        v66._object = v65;
        String.append(_:)(v66);
        swift_bridgeObjectRelease(v65);
        v67._countAndFlagsBits = 539828265;
        v67._object = (void *)0xE400000000000000;
        String.append(_:)(v67);
        if (v61)
          v68 = v60;
        else
          v68 = 0xD000000000000013;
        if (v61)
          v69 = v61;
        else
          v69 = 0x80000001003A8750;
        v70 = v69;
        String.append(_:)(*(Swift::String *)&v68);
        swift_bridgeObjectRelease(v69);
        v71 = *((_QWORD *)&v84 + 1);
        Array<A>.appendStringComponents(_:lineLength:bullet:)(v84, *((uint64_t *)&v84 + 1), 80, 120, 0xE100000000000000);
        swift_bridgeObjectRelease(v71);
      }
      LOBYTE(v84) = v92[0];
      *((_QWORD *)&v84 + 1) = v64;
      v85 = v65;
      v86 = *(_OWORD *)&v92[24];
      v87 = *(_OWORD *)&v92[40];
      v88 = *(_OWORD *)&v92[56];
      *(_QWORD *)&v89 = *(_QWORD *)&v92[72];
      *((_QWORD *)&v89 + 1) = v46;
      *(_QWORD *)&v90[0] = v47;
      *(_OWORD *)((char *)v90 + 8) = v94;
      *(_OWORD *)((char *)&v90[1] + 8) = v95;
      *(_OWORD *)((char *)&v90[2] + 8) = v96;
      sub_1000B0700(&v84);
      sub_10000970C(v91);
      a3 = v76;
      a5 = v77;
      goto LABEL_17;
    }
    *(_QWORD *)&v84 = ActionType.rawValue.getter(v45);
    *((_QWORD *)&v84 + 1) = v51;
    v52._countAndFlagsBits = 10272;
    v52._object = (void *)0xE200000000000000;
    String.append(_:)(v52);
    v53 = *(_QWORD *)&v92[8];
    v54 = *(void **)&v92[16];
    swift_bridgeObjectRetain();
    v55._countAndFlagsBits = v53;
    v55._object = v54;
    String.append(_:)(v55);
    swift_bridgeObjectRelease(v54);
    v56._countAndFlagsBits = 41;
    v56._object = (void *)0xE100000000000000;
    String.append(_:)(v56);
    v57 = *((_QWORD *)&v84 + 1);
    Array<A>.appendStringComponents(_:lineLength:bullet:)(v84, *((uint64_t *)&v84 + 1), 80, 9673954, 0xA300000000000000);
    swift_bridgeObjectRelease(v57);
    sub_10000970C(v91);
    sub_1000A6750(0, 1, 0, 0, 0);
    sub_10000DCF8(0, 0);
    sub_10000DCF8(0, 0);
    sub_10000DCF8(0, 0);
    sub_10000DCF8(0, 0);
    v82[1] = *(_OWORD *)&v92[32];
    v82[2] = *(_OWORD *)&v92[48];
    v82[3] = *(_OWORD *)&v92[64];
    v82[4] = v93;
    v82[5] = v94;
    v82[6] = v95;
    v82[7] = v96;
    v81 = *(_OWORD *)v92;
    v82[0] = *(_OWORD *)&v92[16];
    v80 = *(_OWORD *)((char *)v82 + 8);
    v79 = *(_OWORD *)((char *)&v82[1] + 8);
    v78 = *(_OWORD *)((char *)&v82[2] + 8);
    v83[6] = v94;
    v83[7] = v95;
    v75 = *(_OWORD *)((char *)&v82[3] + 8);
    v83[8] = v96;
    v83[2] = *(_OWORD *)&v92[32];
    v83[3] = *(_OWORD *)&v92[48];
    v73 = *(_OWORD *)((char *)&v82[5] + 8);
    v74 = *(_OWORD *)((char *)&v82[4] + 8);
    v83[4] = *(_OWORD *)&v92[64];
    v83[5] = v93;
    v72 = *(_OWORD *)((char *)&v82[6] + 8);
    v58 = *((_QWORD *)&v96 + 1);
    v83[0] = *(_OWORD *)v92;
    v83[1] = *(_OWORD *)&v92[16];
    v59.location = (Swift::Int)v83;
    CFRange.init(_:)(v59);
    sub_10000FD10((uint64_t)v83, v77, &qword_1004BC4C0);
    sub_1000B001C(&v81);
    sub_10000970C(v76);
    v84 = *(_OWORD *)v92;
    v86 = v80;
    v87 = v79;
    v88 = v78;
    v89 = v75;
    v90[0] = v74;
    v90[1] = v73;
    v90[2] = v72;
    v85 = *(void **)&v92[16];
    *(_QWORD *)&v90[3] = v58;
    return sub_1000B0700(&v84);
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_1000AB9DC@<X0>(_QWORD *a1@<X0>, char a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t DynamicType;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  __int128 v34;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)();
  uint64_t v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t (*v59)();
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v4 = a1[3];
  v5 = sub_1000096A0(a1, v4);
  DynamicType = swift_getDynamicType(v5, v4, 1);
  v7 = a1[4];
  *(_QWORD *)&v45 = DynamicType;
  *((_QWORD *)&v45 + 1) = v7;
  v8 = sub_1000057B4(&qword_1004BC050);
  v9 = String.init<A>(describing:)(&v45, v8);
  v11 = v10;
  sub_1000444A8((uint64_t)a1, (uint64_t)&v45);
  v12 = sub_1000057B4(&qword_1004BC058);
  v13 = sub_1000057B4(&qword_1004BC060);
  if (swift_dynamicCast(&v61, &v45, v12, v13, 6))
  {
    v14 = *((_QWORD *)&v62 + 1);
    v15 = v63;
    sub_1000096A0(&v61, *((uint64_t *)&v62 + 1));
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v15 + 8))(&v64, v14, v15);
    v16 = v64;
    v34 = v65;
    v33 = v66;
    v30 = v68;
    v31 = v67;
    sub_10000970C(&v61);
  }
  else
  {
    v63 = 0;
    v61 = 0u;
    v62 = 0u;
    sub_10000FE2C((uint64_t)&v61, &qword_1004BC068);
    v16 = 0;
    v33 = 0;
    v30 = 0;
    v31 = 0;
    v34 = 1uLL;
  }
  sub_1000A6750(0, 1, 0, 0, 0);
  v17 = a1[3];
  v18 = a1[4];
  sub_1000096A0(a1, v17);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 24))(v17, v18);
  sub_1000444A8((uint64_t)a1, (uint64_t)&v45);
  v27 = swift_allocObject(&unk_10046FD60, 56, 7);
  sub_100033620(&v45, v27 + 16);
  sub_10000DCF8(0, 0);
  sub_1000444A8((uint64_t)a1, (uint64_t)&v45);
  v29 = swift_allocObject(&unk_10046FD88, 56, 7);
  sub_100033620(&v45, v29 + 16);
  sub_10000DCF8(0, 0);
  sub_1000444A8((uint64_t)a1, (uint64_t)&v45);
  v28 = swift_allocObject(&unk_10046FDB0, 56, 7);
  sub_100033620(&v45, v28 + 16);
  sub_10000DCF8(0, 0);
  sub_1000444A8((uint64_t)a1, (uint64_t)&v45);
  v20 = swift_allocObject(&unk_10046FDD8, 56, 7);
  sub_100033620(&v45, v20 + 16);
  sub_10000DCF8(0, 0);
  LOBYTE(v36) = a2;
  *((_QWORD *)&v36 + 1) = v9;
  *(_QWORD *)&v37 = v11;
  *((_QWORD *)&v37 + 1) = v16;
  v38 = v34;
  *(_QWORD *)&v39 = v33;
  *((_QWORD *)&v39 + 1) = v31;
  *(_QWORD *)&v40 = v30;
  *((_QWORD *)&v40 + 1) = v19;
  *(_QWORD *)&v41 = sub_1000B0808;
  *((_QWORD *)&v41 + 1) = v27;
  *(_QWORD *)&v42 = &unk_1004BC070;
  *((_QWORD *)&v42 + 1) = v29;
  *(_QWORD *)&v43 = &unk_1004BC078;
  *((_QWORD *)&v43 + 1) = v28;
  *(_QWORD *)&v44 = sub_1000B08A8;
  *((_QWORD *)&v44 + 1) = v20;
  v21 = v37;
  *a3 = v36;
  a3[1] = v21;
  v22 = v44;
  v23 = v42;
  a3[7] = v43;
  a3[8] = v22;
  v24 = v40;
  a3[5] = v41;
  a3[6] = v23;
  v25 = v38;
  a3[3] = v39;
  a3[4] = v24;
  a3[2] = v25;
  sub_1000B001C(&v36);
  sub_10000970C(a1);
  LOBYTE(v45) = a2;
  *((_QWORD *)&v45 + 1) = v9;
  v46 = v11;
  v47 = v16;
  v48 = v34;
  v49 = v33;
  v50 = v31;
  v51 = v30;
  v52 = v19;
  v53 = sub_1000B0808;
  v54 = v27;
  v55 = &unk_1004BC070;
  v56 = v29;
  v57 = &unk_1004BC078;
  v58 = v28;
  v59 = sub_1000B08A8;
  v60 = v20;
  return sub_1000B0700(&v45);
}

uint64_t sub_1000ABD6C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;

  v1[3] = v0;
  v2 = type metadata accessor for MainActor(0);
  v1[4] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[5] = v4;
  v1[6] = v5;
  return swift_task_switch(sub_1000ABDD8, v4, v5);
}

void sub_1000ABDD8()
{
  _QWORD *v0;
  uint64_t (*v1)(void);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  void (*v7)(void);
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  BOOL v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  __n128 v37;
  void (*v38)(void);
  uint64_t v39[2];

  v1 = *(uint64_t (**)(void))(v0[3] + 80);
  if (v1)
  {
    v2 = v1();
    v4 = v3;
    sub_100033EC4(v2, v3);
    if (v4 != 1)
    {
      v8 = swift_release(v0[4]);
      v9 = ((uint64_t (*)(__n128))v1)(v8);
      if (v10 == 1)
      {
        v11 = sub_1000057B4(&qword_1004BC4E8);
        v12 = sub_10004FFFC(&qword_1004BC4F0, &qword_1004BC4E8, (uint64_t)&protocol conformance descriptor for AnyAction<A>.Error);
        v13 = swift_allocError(v11, v12, 0, 0);
        *v15 = 0;
        v15[1] = 0;
      }
      else
      {
        v16 = v9;
        v17 = v10;
        v18 = sub_1000057B4(&qword_1004BC4E8);
        v19 = sub_10004FFFC(&qword_1004BC4F0, &qword_1004BC4E8, (uint64_t)&protocol conformance descriptor for AnyAction<A>.Error);
        v13 = swift_allocError(v18, v19, 0, 0);
        *v20 = v16;
        v20[1] = v17;
      }
      swift_willThrow(v14);
      if (qword_1004B8A30 != -1)
        swift_once(&qword_1004B8A30, sub_1000A6660);
      v21 = (_QWORD *)v0[3];
      v22 = type metadata accessor for Logger(0);
      sub_100039D34(v22, (uint64_t)static Logger.actions);
      sub_1000B001C(v21);
      swift_errorRetain(v13);
      sub_1000B001C(v21);
      v23 = swift_errorRetain(v13);
      v24 = Logger.logObject.getter(v23);
      v25 = static os_log_type_t.error.getter();
      v26 = os_log_type_enabled(v24, v25);
      v27 = (unsigned __int8 *)v0[3];
      if (v26)
      {
        v28 = swift_slowAlloc(22, -1);
        v29 = swift_slowAlloc(64, -1);
        v39[0] = v29;
        *(_DWORD *)v28 = 136446466;
        v30 = (char *)ActionType.rawValue.getter(*v27);
        v32 = v31;
        *(_QWORD *)(v28 + 4) = sub_1000393D0(v30, v31, v39);
        swift_bridgeObjectRelease(v32);
        sub_1000B0700(v27);
        sub_1000B0700(v27);
        *(_WORD *)(v28 + 12) = 2082;
        v0[2] = v13;
        swift_errorRetain(v13);
        v33 = sub_1000057B4((uint64_t *)&unk_1004BD690);
        v34 = (char *)String.init<A>(describing:)(v0 + 2, v33);
        v36 = v35;
        *(_QWORD *)(v28 + 14) = sub_1000393D0(v34, v35, v39);
        swift_bridgeObjectRelease(v36);
        swift_errorRelease(v13);
        swift_errorRelease(v13);
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed to perform action %{public}s with error %{public}s", (uint8_t *)v28, 0x16u);
        swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v29, -1, -1);
        swift_slowDealloc(v28, -1, -1);
      }
      else
      {
        sub_1000B0700((_QWORD *)v0[3]);
        sub_1000B0700(v27);
        swift_errorRelease(v13);
        swift_errorRelease(v13);
      }

      swift_willThrow(v37);
      v7 = (void (*)(void))v0[1];
      goto LABEL_14;
    }
    v5 = *(int **)(v0[3] + 96);
    if (v5)
    {
      v38 = (void (*)(void))((char *)v5 + *v5);
      v6 = (_QWORD *)swift_task_alloc(v5[1]);
      v0[7] = v6;
      *v6 = v0;
      v6[1] = sub_1000AC118;
      v7 = v38;
LABEL_14:
      v7();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1000AC118()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 56);
  *(_QWORD *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000AC23C;
  else
    v4 = sub_1000AC178;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

void sub_1000AC178()
{
  uint64_t v0;
  int *v1;
  _QWORD *v2;
  void (*v3)(void);

  v1 = *(int **)(*(_QWORD *)(v0 + 24) + 112);
  if (v1)
  {
    v3 = (void (*)(void))((char *)v1 + *v1);
    v2 = (_QWORD *)swift_task_alloc(v1[1]);
    *(_QWORD *)(v0 + 72) = v2;
    *v2 = v0;
    v2[1] = sub_1000AC1DC;
    v3();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000AC1DC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000AC4B0;
  else
    v4 = sub_1000AC464;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t sub_1000AC23C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __n128 v18;
  uint64_t v20[2];

  swift_release(*(_QWORD *)(v0 + 32));
  v1 = *(_QWORD *)(v0 + 64);
  if (qword_1004B8A30 != -1)
    swift_once(&qword_1004B8A30, sub_1000A6660);
  v2 = *(_QWORD **)(v0 + 24);
  v3 = type metadata accessor for Logger(0);
  sub_100039D34(v3, (uint64_t)static Logger.actions);
  sub_1000B001C(v2);
  swift_errorRetain(v1);
  sub_1000B001C(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(unsigned __int8 **)(v0 + 24);
  if (v7)
  {
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(64, -1);
    v20[0] = v10;
    *(_DWORD *)v9 = 136446466;
    v11 = (char *)ActionType.rawValue.getter(*v8);
    v13 = v12;
    *(_QWORD *)(v9 + 4) = sub_1000393D0(v11, v12, v20);
    swift_bridgeObjectRelease(v13);
    sub_1000B0700(v8);
    sub_1000B0700(v8);
    *(_WORD *)(v9 + 12) = 2082;
    *(_QWORD *)(v0 + 16) = v1;
    swift_errorRetain(v1);
    v14 = sub_1000057B4((uint64_t *)&unk_1004BD690);
    v15 = (char *)String.init<A>(describing:)(v0 + 16, v14);
    v17 = v16;
    *(_QWORD *)(v9 + 14) = sub_1000393D0(v15, v16, v20);
    swift_bridgeObjectRelease(v17);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to perform action %{public}s with error %{public}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    sub_1000B0700(*(_QWORD **)(v0 + 24));
    sub_1000B0700(v8);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  swift_willThrow(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000AC464()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  void (*v3)(uint64_t);

  v1 = *(_QWORD *)(v0 + 24);
  result = swift_release(*(_QWORD *)(v0 + 32));
  v3 = *(void (**)(uint64_t))(v1 + 128);
  if (v3)
  {
    v3(result);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000AC4B0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __n128 v18;
  uint64_t v20[2];

  swift_release(*(_QWORD *)(v0 + 32));
  v1 = *(_QWORD *)(v0 + 80);
  if (qword_1004B8A30 != -1)
    swift_once(&qword_1004B8A30, sub_1000A6660);
  v2 = *(_QWORD **)(v0 + 24);
  v3 = type metadata accessor for Logger(0);
  sub_100039D34(v3, (uint64_t)static Logger.actions);
  sub_1000B001C(v2);
  swift_errorRetain(v1);
  sub_1000B001C(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(unsigned __int8 **)(v0 + 24);
  if (v7)
  {
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(64, -1);
    v20[0] = v10;
    *(_DWORD *)v9 = 136446466;
    v11 = (char *)ActionType.rawValue.getter(*v8);
    v13 = v12;
    *(_QWORD *)(v9 + 4) = sub_1000393D0(v11, v12, v20);
    swift_bridgeObjectRelease(v13);
    sub_1000B0700(v8);
    sub_1000B0700(v8);
    *(_WORD *)(v9 + 12) = 2082;
    *(_QWORD *)(v0 + 16) = v1;
    swift_errorRetain(v1);
    v14 = sub_1000057B4((uint64_t *)&unk_1004BD690);
    v15 = (char *)String.init<A>(describing:)(v0 + 16, v14);
    v17 = v16;
    *(_QWORD *)(v9 + 14) = sub_1000393D0(v15, v16, v20);
    swift_bridgeObjectRelease(v17);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to perform action %{public}s with error %{public}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    sub_1000B0700(*(_QWORD **)(v0 + 24));
    sub_1000B0700(v8);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  swift_willThrow(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t property wrapper backing initializer of Actionable.contexts(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = a1;
  v1 = sub_1000057B4(&qword_1004BC368);
  State.init(wrappedValue:)(&v4, &v3, v1);
  return v4;
}

uint64_t sub_1000AC714()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_1000057B4(&qword_1004BC520);
  State.wrappedValue.getter(&v2, v0);
  return v2;
}

uint64_t sub_1000AC758(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];

  v2 = v1[1];
  v5[1] = *v1;
  v5[2] = v2;
  v5[0] = a1;
  v3 = sub_1000057B4(&qword_1004BC520);
  return State.wrappedValue.setter(v5, v3);
}

uint64_t sub_1000AC7A0()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_1000057B4(&qword_1004BC528);
  Binding.wrappedValue.getter(&v2, v0);
  return v2;
}

uint64_t Actionable.init(lookup:excluding:resolver:preview:propertyLoader:hasLoadedModelProperties:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, char *a8@<X8>, uint64_t a9, unsigned __int8 a10, uint64_t a11, uint64_t a12)
{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t result;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD v36[2];

  v33 = a6;
  v34 = a7;
  v32 = a5;
  v31 = a10;
  v30 = a9;
  v17 = *(_QWORD *)(a11 - 8);
  __chkstk_darwin(a1);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = _swiftEmptyArrayStorage;
  v20 = sub_1000057B4(&qword_1004BC368);
  State.init(wrappedValue:)(v36, &v35, v20);
  v21 = v36[1];
  *(_QWORD *)a8 = v36[0];
  *((_QWORD *)a8 + 1) = v21;
  *((_QWORD *)a8 + 2) = a1;
  *((_QWORD *)a8 + 3) = a2;
  v22 = sub_1000444A8((uint64_t)a3, (uint64_t)(a8 + 32));
  a4(v22);
  sub_10000970C(a3);
  v24 = (int *)type metadata accessor for Actionable(0, a11, a12, v23);
  result = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 32))(&a8[v24[12]], v19, a11);
  v26 = &a8[v24[13]];
  v27 = v33;
  *(_QWORD *)v26 = v32;
  *((_QWORD *)v26 + 1) = v27;
  v28 = &a8[v24[14]];
  v29 = v30;
  *(_QWORD *)v28 = v34;
  *((_QWORD *)v28 + 1) = v29;
  v28[16] = v31;
  return result;
}

uint64_t type metadata accessor for Actionable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100051E10(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Actionable);
}

uint64_t Actionable.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t WitnessTable;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t OpaqueTypeConformance2;
  uint64_t v11;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25[16];
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29[16];
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;

  v23 = a1;
  v24 = a3;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Actionable<A>, a2);
  v6 = type metadata accessor for _ViewModifier_Content(255, a2, WitnessTable);
  v7 = sub_100009788(&qword_1004BC370);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v6);
  v33 = sub_100009788(&qword_1004BC378);
  v34 = &type metadata for Bool;
  v35 = sub_1000ACB60();
  v36 = &protocol witness table for Bool;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v33, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v11 = *(_QWORD *)(a2 + 24);
  v33 = v6;
  v34 = (void *)v7;
  v35 = v8;
  v36 = (void *)v9;
  v37 = OpaqueTypeConformance2;
  v38 = v11;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v33, &opaque type descriptor for <<opaque return type of View.contextMenu<A, B>(menuItems:preview:)>>, 0);
  v22 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v13 = __chkstk_darwin(OpaqueTypeMetadata2);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v21 - v16;
  v30 = v8;
  v31 = v11;
  v32 = v3;
  v26 = v8;
  v27 = v11;
  v28 = v3;
  v18 = swift_checkMetadataState(0, v6);
  View.contextMenu<A, B>(menuItems:preview:)(sub_1000ACC60, v29, sub_1000AD158, v25, v18, v7, v8, v9, OpaqueTypeConformance2, v11);
  v33 = v18;
  v34 = (void *)v7;
  v35 = v8;
  v36 = (void *)v9;
  v37 = OpaqueTypeConformance2;
  v38 = v11;
  swift_getOpaqueTypeConformance2(&v33, &opaque type descriptor for <<opaque return type of View.contextMenu<A, B>(menuItems:preview:)>>, 1);
  sub_10005B690((uint64_t)v15, OpaqueTypeMetadata2, (uint64_t)v17);
  v19 = *(void (**)(char *, uint64_t))(v22 + 8);
  v19(v15, OpaqueTypeMetadata2);
  sub_100055EDC((uint64_t)v17, OpaqueTypeMetadata2, v24);
  return ((uint64_t (*)(char *, uint64_t))v19)(v17, OpaqueTypeMetadata2);
}

unint64_t sub_1000ACB60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1004BC380;
  if (!qword_1004BC380)
  {
    v1 = sub_100009788(&qword_1004BC378);
    sub_1000ACBE4();
    sub_100004D8C(&qword_1004BC3A8, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1004BC380);
  }
  return result;
}

unint64_t sub_1000ACBE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1004BC388;
  if (!qword_1004BC388)
  {
    v1 = sub_100009788(&qword_1004BC390);
    sub_10004FFFC(&qword_1004BC398, &qword_1004BC3A0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_1004BC388);
  }
  return result;
}

uint64_t sub_1000ACC60@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = type metadata accessor for Actionable(0, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1);
  return sub_1000ACC94(v4, a2);
}

uint64_t sub_1000ACC94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t KeyPath;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t);
  char *v55;
  uint64_t v56;
  char v57;
  uint64_t v58;

  v49 = a2;
  v48 = type metadata accessor for TaskPriority(0);
  v45 = *(_QWORD *)(v48 - 8);
  v4 = __chkstk_darwin(v48);
  v46 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v4);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_1000057B4(&qword_1004BC390);
  v44 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v55 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_1000057B4(&qword_1004BC378);
  __chkstk_darwin(v56);
  v42 = v2;
  v43 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = *(_QWORD *)(v2 + 16);
  KeyPath = swift_getKeyPath(&unk_1003CBAC8);
  v54 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v54(v8, v2, a1);
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = (v11 + 32) & ~v11;
  v51 = v12 + v7;
  v13 = v11 | 7;
  v40 = v11 | 7;
  v14 = swift_allocObject(&unk_10046FE28, v12 + v7, v11 | 7);
  v15 = *(_QWORD *)(a1 + 24);
  v52 = *(_QWORD *)(a1 + 16);
  v53 = v15;
  *(_QWORD *)(v14 + 16) = v52;
  *(_QWORD *)(v14 + 24) = v15;
  v39 = v12;
  v50 = *(void (**)(uint64_t, char *, uint64_t))(v6 + 32);
  v50(v14 + v12, v8, a1);
  swift_bridgeObjectRetain();
  v16 = sub_1000057B4(&qword_1004BC1B8);
  v17 = sub_1000057B4(&qword_1004BC3A0);
  v18 = sub_10004FFFC(&qword_1004BC3C0, &qword_1004BC1B8, (uint64_t)&protocol conformance descriptor for [A]);
  v19 = sub_1000AFEA0(&qword_1004BC3C8, qword_1004BC1E0, (void (*)(void))sub_1000AB0C4, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v20 = sub_10004FFFC(&qword_1004BC398, &qword_1004BC3A0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  ForEach<>.init(_:id:content:)(&v58, KeyPath, sub_1000B0A84, v14, v16, v17, v18, v19, v20);
  v21 = v42;
  v54(v8, v42, a1);
  v22 = swift_allocObject(&unk_10046FE50, v51, v13);
  v23 = v53;
  *(_QWORD *)(v22 + 16) = v52;
  *(_QWORD *)(v22 + 24) = v23;
  v24 = ((uint64_t (*)(uint64_t, char *, uint64_t))v50)(v22 + v12, v8, a1);
  v25 = v46;
  static TaskPriority.userInitiated.getter(v24);
  v26 = (uint64_t)v43;
  v27 = &v43[*(int *)(v56 + 36)];
  v28 = type metadata accessor for _TaskModifier(0);
  v29 = v45;
  v30 = v48;
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(&v27[*(int *)(v28 + 20)], v25, v48);
  *(_QWORD *)v27 = &unk_1004BC510;
  *((_QWORD *)v27 + 1) = v22;
  v31 = v44;
  v32 = v55;
  v33 = v47;
  (*(void (**)(uint64_t, char *, uint64_t))(v44 + 16))(v26, v55, v47);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v25, v30);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v33);
  v57 = sub_1000AC7A0() & 1;
  v54(v8, v21, a1);
  v34 = swift_allocObject(&unk_10046FE78, v51, v40);
  v35 = v53;
  *(_QWORD *)(v34 + 16) = v52;
  *(_QWORD *)(v34 + 24) = v35;
  v50(v34 + v39, v8, a1);
  v36 = sub_1000ACB60();
  View.onChange<A>(of:initial:_:)(&v57, 0, sub_1000B0B74, v34, v56, &type metadata for Bool, v36, &protocol witness table for Bool);
  swift_release(v34);
  return sub_10000FE2C(v26, &qword_1004BC378);
}

uint64_t sub_1000AD0AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v6 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Actionable(0, v9, v10, v11);
  sub_10005B690(a1 + *(int *)(v12 + 48), a2, (uint64_t)v8);
  sub_100055EDC((uint64_t)v8, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a2);
}

uint64_t sub_1000AD158@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000AD0AC(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16), a1);
}

double sub_1000AD164@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  void (*v49)(char *, uint64_t);
  double result;
  uint64_t KeyPath;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;

  v60 = a5;
  v9 = type metadata accessor for Divider(0);
  v58 = *(_QWORD *)(v9 - 8);
  v59 = v9;
  v10 = __chkstk_darwin(v9);
  v57 = (char *)&KeyPath - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v53 = (char *)&KeyPath - v12;
  v14 = type metadata accessor for Actionable(0, a3, a4, v13);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v14);
  v18 = (char *)&KeyPath - v17;
  v19 = sub_1000057B4(&qword_1004BC530);
  v55 = *(_QWORD *)(v19 - 8);
  v56 = v19;
  v20 = __chkstk_darwin(v19);
  v54 = (char *)&KeyPath - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v61 = (char *)&KeyPath - v22;
  v23 = *a1;
  v24 = swift_allocObject(&unk_10046FCC0, 24, 7);
  *(_QWORD *)(v24 + 16) = _swiftEmptyArrayStorage;
  v62 = v23;
  KeyPath = swift_getKeyPath(&unk_1003CBBB0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a2, v14);
  v25 = *(unsigned __int8 *)(v15 + 80);
  v26 = (v25 + 32) & ~v25;
  v27 = (v16 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = swift_allocObject(&unk_10046FEF0, v27 + 8, v25 | 7);
  *(_QWORD *)(v28 + 16) = a3;
  *(_QWORD *)(v28 + 24) = a4;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v28 + v26, v18, v14);
  v52 = v24;
  *(_QWORD *)(v28 + v27) = v24;
  swift_bridgeObjectRetain();
  swift_retain(v24);
  v29 = sub_1000057B4(qword_1004BC1E0);
  v30 = sub_1000057B4(&qword_1004BC538);
  v31 = sub_10004FFFC(&qword_1004BC478, qword_1004BC1E0, (uint64_t)&protocol conformance descriptor for [A]);
  v32 = sub_1000AB0C4();
  v33 = sub_1000AFEA0(&qword_1004BC540, &qword_1004BC538, (void (*)(void))sub_1000AFF88, (uint64_t)&protocol conformance descriptor for <A> A?);
  v34 = v61;
  v35 = ForEach<>.init(_:id:content:)(&v62, KeyPath, sub_1000B0E00, v28, v29, v30, v31, v32, v33);
  v36 = v53;
  Divider.init()(v35);
  v37 = v54;
  v38 = v55;
  v39 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
  v40 = v34;
  v41 = v56;
  v39(v54, v40, v56);
  v42 = v57;
  v43 = v58;
  v44 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
  v45 = v59;
  v44(v57, v36, v59);
  v46 = v60;
  v39(v60, v37, v41);
  v47 = sub_1000057B4(&qword_1004BC548);
  v44(&v46[*(int *)(v47 + 48)], v42, v45);
  v48 = *(void (**)(char *, uint64_t))(v43 + 8);
  v48(v36, v45);
  v49 = *(void (**)(char *, uint64_t))(v38 + 8);
  v49(v61, v41);
  v48(v42, v45);
  v49(v37, v41);
  *(_QWORD *)&result = swift_release(v52).n128_u64[0];
  return result;
}

uint64_t sub_1000AD4C0@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  unsigned __int8 v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD v15[18];
  _BYTE v16[144];
  _BYTE v17[144];
  _OWORD v18[9];
  _OWORD v19[9];

  v7 = *a1;
  v8 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  v9 = sub_1000C9C48(v7, v8);
  swift_bridgeObjectRelease(v8);
  if ((v9 & 1) != 0)
    goto LABEL_3;
  v10 = a3 + 16;
  v11 = sub_1000AC714();
  sub_1000444A8(a2 + 32, (uint64_t)v19);
  swift_beginAccess(v10, v15, 33, 0);
  sub_1000AB2CC(v7, v11, v19, v10, (uint64_t)v16);
  swift_endAccess(v15);
  sub_10000FD10((uint64_t)v16, (uint64_t)v17, &qword_1004BC4C0);
  sub_10000FD10((uint64_t)v17, (uint64_t)v18, &qword_1004BC4C0);
  if (sub_1000B0004((uint64_t)v18) == 1)
  {
LABEL_3:
    v12 = sub_1000057B4(&qword_1004BC4A0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a4, 1, 1, v12);
  }
  else
  {
    v19[6] = v18[6];
    v19[7] = v18[7];
    v19[8] = v18[8];
    v19[2] = v18[2];
    v19[3] = v18[3];
    v19[4] = v18[4];
    v19[5] = v18[5];
    v19[0] = v18[0];
    v19[1] = v18[1];
    sub_10000FD10((uint64_t)v17, (uint64_t)v15, &qword_1004BC4C0);
    sub_1000B001C(v15);
    sub_1000AD660(a4);
    sub_1000B0188((uint64_t)v17);
    sub_1000B0188((uint64_t)v17);
    v14 = sub_1000057B4(&qword_1004BC4A0);
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a4, 0, 1, v14);
  }
}

uint64_t sub_1000AD660@<X0>(char *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  void *v16;
  uint64_t (*v17)(uint64_t);
  _QWORD *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  _QWORD v37[2];
  _QWORD *v38;
  char *v39;

  v2 = v1;
  v4 = sub_1000057B4(&qword_1004BAA00);
  __chkstk_darwin(v4);
  v6 = (_QWORD *)((char *)v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_1000057B4(&qword_1004BC3B0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v9);
  v14 = (char *)v37 - v13;
  v15 = v1[4];
  if (v15 < 2)
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(a1, 1, 1, v7);
  v16 = (void *)v1[7];
  if (!v16)
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(a1, 1, 1, v7);
  v39 = a1;
  v17 = (uint64_t (*)(uint64_t))v1[10];
  if (!v17)
  {
    __break(1u);
    return result;
  }
  v18 = (_QWORD *)v1[8];
  v37[1] = v1[3];
  v38 = v18;
  v19 = v16;
  v20 = swift_bridgeObjectRetain();
  v21 = v17(v20);
  v23 = v22;
  sub_100033EC4(v21, v22);
  if (v23 != 1)
  {
    swift_bridgeObjectRelease(v15);

    a1 = v39;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(a1, 1, 1, v7);
  }
  v24 = (_OWORD *)swift_allocObject(&unk_10046FD10, 160, 7);
  v25 = *((_OWORD *)v2 + 7);
  v24[7] = *((_OWORD *)v2 + 6);
  v24[8] = v25;
  v24[9] = *((_OWORD *)v2 + 8);
  v26 = *((_OWORD *)v2 + 3);
  v24[3] = *((_OWORD *)v2 + 2);
  v24[4] = v26;
  v27 = *((_OWORD *)v2 + 5);
  v24[5] = *((_OWORD *)v2 + 4);
  v24[6] = v27;
  v28 = *((_OWORD *)v2 + 1);
  v24[1] = *(_OWORD *)v2;
  v24[2] = v28;
  if ((v38 & 2) != 0)
  {
    sub_1000B001C(v2);
    static ButtonRole.destructive.getter(v6);
    v31 = type metadata accessor for ButtonRole(0);
    v30 = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v6, 0, 1, v31);
  }
  else
  {
    v29 = type metadata accessor for ButtonRole(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v6, 1, 1, v29);
    v30 = sub_1000B001C(v2);
  }
  v38 = v37;
  __chkstk_darwin(v30);
  v37[-4] = v32;
  v37[-3] = v15;
  v37[-2] = v19;
  v33 = sub_1000057B4(&qword_1004BA958);
  v34 = sub_10004FFFC(&qword_1004BA950, &qword_1004BA958, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  Button.init(role:action:label:)(v6, sub_1000B04A0, v24, sub_1000AF13C, &v37[-6], v33, v34);

  swift_bridgeObjectRelease(v15);
  v35 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v35(v14, v11, v7);
  v36 = v39;
  v35(v39, v14, v7);
  return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v36, 0, 1, v7);
}

uint64_t AnyAction.button.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  void *v18;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;

  v5 = sub_1000057B4(&qword_1004BAA00);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_1000057B4(&qword_1004BC3B0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v11 = __chkstk_darwin(v10);
  v12 = *(_QWORD *)(a1 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v16 = (uint64_t *)(v2 + *(int *)(a1 + 40));
  v17 = v16[1];
  v18 = (void *)v16[4];
  if (v17 < 2 || v18 == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, 1, 1, v8);
  v41 = v14;
  v42 = v15;
  v44 = a2;
  v21 = *v16;
  v39 = v16[5];
  v40 = v21;
  v43 = v18;
  swift_bridgeObjectRetain();
  v22 = AnyAction.canPerform.getter(a1);
  v24 = v23;
  sub_100033EC4(v22, v23);
  if (v24 != 1)
  {
    swift_bridgeObjectRelease(v17);

    a2 = v44;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, 1, 1, v8);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a1);
  v25 = *(unsigned __int8 *)(v12 + 80);
  v26 = (v25 + 32) & ~v25;
  v27 = swift_allocObject(&unk_10046FC18, v26 + v13, v25 | 7);
  *(_OWORD *)(v27 + 16) = *(_OWORD *)(a1 + 16);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v27 + v26, (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  v28 = v43;
  v29 = v40;
  if ((v39 & 2) != 0)
  {
    static ButtonRole.destructive.getter(v7);
    v32 = type metadata accessor for ButtonRole(0);
    v31 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v7, 0, 1, v32);
  }
  else
  {
    v30 = type metadata accessor for ButtonRole(0);
    v31 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v7, 1, 1, v30);
  }
  __chkstk_darwin(v31);
  *(&v39 - 4) = v29;
  *(&v39 - 3) = v17;
  *(&v39 - 2) = (uint64_t)v28;
  v33 = sub_1000057B4(&qword_1004BA958);
  v34 = sub_10004FFFC(&qword_1004BA950, &qword_1004BA958, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  v35 = v42;
  Button.init(role:action:label:)(v7, sub_1000AE9B4, v27, sub_1000AF13C, &v39 - 6, v33, v34);

  swift_bridgeObjectRelease(v17);
  v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
  v37 = v41;
  v36(v41, v35, v8);
  v38 = v44;
  v36(v44, v37, v8);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v38, 0, 1, v8);
}

uint64_t sub_1000ADC88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;

  v4[3] = a2;
  v4[4] = a3;
  v4[2] = a1;
  v5 = type metadata accessor for Actionable(0, a2, a3, a4);
  v4[5] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[6] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v4[7] = v7;
  v4[8] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MainActor(0);
  v4[9] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000ADD24, v10, v11);
}

uint64_t sub_1000ADD24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t (*)(), uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;

  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 16);
  v11 = *(_OWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 72));
  v6 = *(void (**)(uint64_t (*)(), uint64_t))(v5 + *(int *)(v4 + 52));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v5, v4);
  v7 = *(unsigned __int8 *)(v3 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = swift_allocObject(&unk_10046FEC8, v8 + v2, v7 | 7);
  *(_OWORD *)(v9 + 16) = v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v9 + v8, v1, v4);
  v6(sub_1000B0BE0, v9);
  swift_release(v9);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_1000ADE08(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;
  char *v14;
  void (*v15)(uint64_t (*)(), uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v9 = type metadata accessor for Actionable(0, a4, a5, a4);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v14 = (char *)&v19 - v13;
  if ((*a2 & 1) == 0)
  {
    v15 = *(void (**)(uint64_t (*)(), uint64_t))(a3 + *(int *)(v9 + 52));
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v14, a3, v9);
    v16 = *(unsigned __int8 *)(v10 + 80);
    v17 = (v16 + 32) & ~v16;
    v18 = swift_allocObject(&unk_10046FEA0, v17 + v11, v16 | 7);
    *(_QWORD *)(v18 + 16) = a4;
    *(_QWORD *)(v18 + 24) = a5;
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v18 + v17, v14, v9);
    v15(sub_1000B0BE0, v18);
    *(_QWORD *)&result = swift_release(v18).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000ADF10(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];

  v4 = sub_1000057B4(&qword_1004BC518);
  v5 = swift_allocObject(v4, 64, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1003C64D0;
  sub_10000990C(a1, v5 + 32);
  v6 = a2[1];
  v9[1] = *a2;
  v9[2] = v6;
  v9[0] = v5;
  v7 = sub_1000057B4(&qword_1004BC520);
  return State.wrappedValue.setter(v9, v7);
}

uint64_t static Actionable.menuBuilder(lookup:excluding:contexts:resolver:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15[2];
  uint64_t v16;

  v16 = a1;
  KeyPath = swift_getKeyPath(&unk_1003CBAC8);
  sub_1000444A8(a4, (uint64_t)v15);
  v8 = swift_allocObject(&unk_10046FC40, 72, 7);
  *(_QWORD *)(v8 + 16) = a3;
  sub_100033620(v15, v8 + 24);
  *(_QWORD *)(v8 + 64) = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = sub_1000057B4(&qword_1004BC1B8);
  v10 = sub_1000057B4(&qword_1004BC3B8);
  v11 = sub_10004FFFC(&qword_1004BC3C0, &qword_1004BC1B8, (uint64_t)&protocol conformance descriptor for [A]);
  v12 = sub_1000AFEA0(&qword_1004BC3C8, qword_1004BC1E0, (void (*)(void))sub_1000AB0C4, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v13 = sub_10004FFFC(qword_1004BC3D0, &qword_1004BC3B8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  return ForEach<>.init(_:id:content:)(&v16, KeyPath, sub_1000AF174, v8, v9, v10, v11, v12, v13);
}

double sub_1000AE100@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  void (*v42)(char *, uint64_t);
  double result;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  __int128 v52[2];
  uint64_t v53;

  v51 = a5;
  v9 = type metadata accessor for Divider(0);
  v10 = *(_QWORD *)(v9 - 8);
  v49 = v9;
  v50 = v10;
  v11 = __chkstk_darwin(v9);
  v48 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v44 - v13;
  v47 = sub_1000057B4(&qword_1004BC468);
  v15 = *(_QWORD *)(v47 - 8);
  v16 = __chkstk_darwin(v47);
  v46 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v19 = (char *)&v44 - v18;
  v20 = *a1;
  v21 = swift_allocObject(&unk_10046FCC0, 24, 7);
  *(_QWORD *)(v21 + 16) = _swiftEmptyArrayStorage;
  v45 = v21;
  v53 = v20;
  KeyPath = swift_getKeyPath(&unk_1003CBBB0);
  sub_1000444A8(a3, (uint64_t)v52);
  v23 = (_QWORD *)swift_allocObject(&unk_10046FCE8, 80, 7);
  v23[2] = a2;
  sub_100033620(v52, (uint64_t)(v23 + 3));
  v23[8] = v21;
  v23[9] = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain(v21);
  swift_bridgeObjectRetain();
  v24 = sub_1000057B4(qword_1004BC1E0);
  v25 = sub_1000057B4(&qword_1004BC470);
  v26 = sub_10004FFFC(&qword_1004BC478, qword_1004BC1E0, (uint64_t)&protocol conformance descriptor for [A]);
  v27 = sub_1000AB0C4();
  v28 = sub_1000AFEA0(&qword_1004BC480, &qword_1004BC470, (void (*)(void))sub_1000AFF04, (uint64_t)&protocol conformance descriptor for <A> A?);
  v44 = v19;
  v29 = ForEach<>.init(_:id:content:)(&v53, KeyPath, sub_1000AFE90, v23, v24, v25, v26, v27, v28);
  v30 = v14;
  Divider.init()(v29);
  v31 = v15;
  v32 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v33 = v46;
  v34 = v47;
  v32(v46, v19, v47);
  v35 = v49;
  v36 = v50;
  v37 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
  v38 = v48;
  v37(v48, v30, v49);
  v39 = v51;
  v32(v51, v33, v34);
  v40 = sub_1000057B4(&qword_1004BC4B8);
  v37(&v39[*(int *)(v40 + 48)], v38, v35);
  v41 = *(void (**)(char *, uint64_t))(v36 + 8);
  v41(v30, v35);
  v42 = *(void (**)(char *, uint64_t))(v31 + 8);
  v42(v44, v34);
  v41(v38, v35);
  v42(v33, v34);
  *(_QWORD *)&result = swift_release(v45).n128_u64[0];
  return result;
}

uint64_t sub_1000AE404@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  Swift::String v18;
  void *object;
  void *v20;
  uint64_t v21;
  Swift::String v22;
  unint64_t v23;
  Swift::String v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD v31[18];
  _OWORD v32[9];
  _OWORD v33[9];
  _QWORD v34[19];

  v28 = a6;
  v27 = sub_1000057B4(&qword_1004BC4A0);
  __chkstk_darwin(v27);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000057B4(&qword_1004BC490);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  a4 += 16;
  LOBYTE(a1) = *a1;
  sub_1000444A8(a3, (uint64_t)v34);
  swift_beginAccess(a4, v32, 33, 0);
  swift_bridgeObjectRetain();
  sub_1000AB2CC(a1, a2, v34, a4, (uint64_t)v33);
  swift_endAccess(v32);
  sub_10000FD10((uint64_t)v33, (uint64_t)v34, &qword_1004BC4C0);
  if ((sub_1000C9C48(a1, a5) & 1) != 0)
  {
    sub_1000B0188((uint64_t)v34);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v28, 1, 1, v13);
  }
  sub_10000FD10((uint64_t)v34, (uint64_t)v32, &qword_1004BC4C0);
  if (sub_1000B0004((uint64_t)v32) == 1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v28, 1, 1, v13);
  v33[6] = v32[6];
  v33[7] = v32[7];
  v33[8] = v32[8];
  v33[2] = v32[2];
  v33[3] = v32[3];
  v33[4] = v32[4];
  v33[5] = v32[5];
  v33[0] = v32[0];
  v33[1] = v32[1];
  sub_10000FD10((uint64_t)v34, (uint64_t)v31, &qword_1004BC4C0);
  sub_1000B001C(v31);
  sub_1000AD660(v12);
  v29 = 0x2E736E6F69746341;
  v30 = 0xE800000000000000;
  v18._countAndFlagsBits = ActionType.rawValue.getter(v32[0]);
  object = v18._object;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(object);
  v21 = v29;
  v20 = (void *)v30;
  if (qword_1004B8E20 != -1)
    swift_once(&qword_1004B8E20, sub_1001FB168);
  v29 = qword_1004C2A98;
  v30 = unk_1004C2AA0;
  swift_bridgeObjectRetain();
  v22._countAndFlagsBits = 46;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  v23 = v30;
  swift_bridgeObjectRetain();
  v24._countAndFlagsBits = v21;
  v24._object = v20;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v20);
  v25 = v30;
  sub_1000AFF88();
  _s7SwiftUI4ViewP9MusicCoreE23accessibilityIdentifieryQrAD013AccessibilityG0VF_0();
  swift_bridgeObjectRelease(v25);
  sub_1000B0188((uint64_t)v34);
  sub_1000B0188((uint64_t)v34);
  sub_10000FE2C((uint64_t)v12, &qword_1004BC4A0);
  v26 = v28;
  sub_10000FD10((uint64_t)v16, v28, &qword_1004BC490);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v26, 0, 1, v13);
}

uint64_t sub_1000AE714()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

double sub_1000AE730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  double result;
  uint64_t v23;

  v7 = type metadata accessor for AnyAction(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v11 = (char *)&v23 - v10;
  v12 = sub_1000057B4((uint64_t *)&unk_1004BFBC0);
  __chkstk_darwin(v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  type metadata accessor for MainActor(0);
  v17 = static MainActor.shared.getter(v16);
  v18 = *(unsigned __int8 *)(v8 + 80);
  v19 = (v18 + 48) & ~v18;
  v20 = (char *)swift_allocObject(&unk_10046FE00, v19 + v9, v18 | 7);
  *((_QWORD *)v20 + 2) = v17;
  *((_QWORD *)v20 + 3) = &protocol witness table for MainActor;
  *((_QWORD *)v20 + 4) = a2;
  *((_QWORD *)v20 + 5) = a3;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v20[v19], v11, v7);
  v21 = sub_1000E6084((uint64_t)v14, (uint64_t)&unk_1004BC500, (uint64_t)v20);
  *(_QWORD *)&result = swift_release(v21).n128_u64[0];
  return result;
}

uint64_t sub_1000AE894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for AnyAction(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = v4 + v9;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + v9, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v9 + v6[9] + 8));
  v12 = v4 + v9 + v6[10];
  v13 = *(_QWORD *)(v12 + 8);
  if (v13 != 1)
  {
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(*(_QWORD *)(v12 + 24));

  }
  v14 = (_QWORD *)(v11 + v6[12]);
  if (*v14)
    swift_release(v14[1]);
  v15 = (_QWORD *)(v11 + v6[13]);
  if (*v15)
    swift_release(v15[1]);
  v16 = (_QWORD *)(v11 + v6[14]);
  if (*v16)
    swift_release(v16[1]);
  v17 = (_QWORD *)(v11 + v6[15]);
  if (*v17)
    swift_release(v17[1]);
  return swift_deallocObject(v4, v9 + v10, v8 | 7);
}

double sub_1000AE9B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AnyAction(0, v5, v6, a4) - 8) + 80);
  return sub_1000AE730(v4 + ((v7 + 32) & ~v7), v5, v6, v8);
}

uint64_t sub_1000AEA04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  __n128 v5;
  _QWORD *v6;
  uint64_t (*v8)(void);

  v4[3] = a4;
  v4[4] = type metadata accessor for MainActor(0);
  v4[5] = static MainActor.shared.getter(v5);
  v8 = (uint64_t (*)(void))((char *)&dword_1004BC4E0 + dword_1004BC4E0);
  v6 = (_QWORD *)swift_task_alloc(unk_1004BC4E4);
  v4[6] = v6;
  *v6 = v4;
  v6[1] = sub_1000AEA84;
  return v8();
}

uint64_t sub_1000AEA84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc(v2);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  if (v0)
    v6 = sub_1000AEB3C;
  else
    v6 = sub_1000AEB0C;
  return swift_task_switch(v6, v5, v4);
}

uint64_t sub_1000AEB0C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000AEB3C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v20;

  swift_release(*(_QWORD *)(v0 + 40));
  if (qword_1004B8A30 != -1)
    swift_once(&qword_1004B8A30, sub_1000A6660);
  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD **)(v0 + 24);
  v3 = type metadata accessor for Logger(0);
  sub_100039D34(v3, (uint64_t)static Logger.actions);
  sub_1000B001C(v2);
  swift_errorRetain(v1);
  sub_1000B001C(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 56);
  v9 = *(unsigned __int8 **)(v0 + 24);
  if (v7)
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(64, -1);
    v20 = v11;
    *(_DWORD *)v10 = 136446466;
    v12 = (char *)ActionType.rawValue.getter(*v9);
    v14 = v13;
    *(_QWORD *)(v10 + 4) = sub_1000393D0(v12, v13, &v20);
    swift_bridgeObjectRelease(v14);
    sub_1000B0700(v9);
    sub_1000B0700(v9);
    *(_WORD *)(v10 + 12) = 2082;
    *(_QWORD *)(v0 + 16) = v8;
    swift_errorRetain(v8);
    v15 = sub_1000057B4((uint64_t *)&unk_1004BD690);
    v16 = (char *)String.init<A>(describing:)(v0 + 16, v15);
    v18 = v17;
    *(_QWORD *)(v10 + 14) = sub_1000393D0(v16, v17, &v20);
    swift_bridgeObjectRelease(v18);
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Action %{public}s failed: %{public}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 56));
    sub_1000B0700(v9);
    sub_1000B0700(v9);
    swift_errorRelease(v8);
    swift_errorRelease(v8);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000AED70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  _QWORD *v10;

  v6[4] = a5;
  v6[5] = a6;
  v6[3] = a4;
  v7 = type metadata accessor for AnyAction(0, a5, a6, a4);
  v6[6] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[7] = v8;
  v6[8] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[9] = type metadata accessor for MainActor(0);
  v6[10] = static MainActor.shared.getter(v9);
  v10 = (_QWORD *)swift_task_alloc(dword_1004BBF3C);
  v6[11] = v10;
  *v10 = v6;
  v10[1] = sub_1000AEE20;
  return AnyAction.execute()(v7);
}

uint64_t sub_1000AEE20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc(v2);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  if (v0)
    v6 = sub_1000AEEE0;
  else
    v6 = sub_1000AEEA8;
  return swift_task_switch(v6, v5, v4);
}

uint64_t sub_1000AEEA8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000AEEE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v26;
  uint64_t v27;

  swift_release(*(_QWORD *)(v0 + 80));
  if (qword_1004B8A30 != -1)
    swift_once(&qword_1004B8A30, sub_1000A6660);
  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = type metadata accessor for Logger(0);
  sub_100039D34(v6, (uint64_t)static Logger.actions);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain(v1);
  v7 = swift_errorRetain(v1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 96);
  v12 = *(_QWORD *)(v0 + 56);
  v13 = *(_QWORD *)(v0 + 64);
  v14 = *(_QWORD *)(v0 + 48);
  if (v10)
  {
    v16 = *(_QWORD *)(v0 + 32);
    v15 = *(_QWORD *)(v0 + 40);
    v17 = swift_slowAlloc(22, -1);
    v26 = swift_slowAlloc(64, -1);
    v27 = v26;
    *(_DWORD *)v17 = 136446466;
    v18 = (char *)sub_100050D44(v13, v16, *(_QWORD *)(v15 + 8));
    v20 = v19;
    *(_QWORD *)(v17 + 4) = sub_1000393D0(v18, v19, &v27);
    swift_bridgeObjectRelease(v20);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
    *(_WORD *)(v17 + 12) = 2082;
    *(_QWORD *)(v0 + 16) = v11;
    swift_errorRetain(v11);
    v21 = sub_1000057B4((uint64_t *)&unk_1004BD690);
    v22 = (char *)String.init<A>(describing:)(v0 + 16, v21);
    v24 = v23;
    *(_QWORD *)(v17 + 14) = sub_1000393D0(v22, v23, &v27);
    swift_bridgeObjectRelease(v24);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Action %{public}s failed: %{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    swift_errorRelease(v11);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 96));
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
    swift_errorRelease(v11);
    swift_errorRelease(v11);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000AF140()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  sub_10000970C(v0 + 3);
  swift_bridgeObjectRelease(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

double sub_1000AF174@<D0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;

  return sub_1000AE100(a1, *(_QWORD *)(v2 + 16), v2 + 24, *(_QWORD *)(v2 + 64), a2);
}

uint64_t sub_1000AF184(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of Actionable.body(content:)>>, 1);
}

uint64_t sub_1000AF1B8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_1003CBB50;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = &unk_1003CBB68;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    v4[5] = (char *)&value witness table for () + 64;
    v4[6] = &unk_1003CBB80;
    swift_initStructMetadata(a1, 0, 7, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_1000AF260(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void (*v30)(unint64_t, unint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64) + 7;
  v7 = *(_DWORD *)(v4 + 80) & 0x100000;
  v8 = *a2;
  *a1 = *a2;
  if (v5 > 7
    || v7 != 0
    || ((((v6 + ((v5 + 72) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    v11 = (uint64_t *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
  }
  else
  {
    v11 = a1;
    v31 = a2[1];
    a1[1] = v31;
    v12 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFF8);
    v13 = (uint64_t *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
    v14 = *v13;
    *v12 = *v13;
    v15 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
    v16 = (uint64_t *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
    v17 = *v16;
    *v15 = *v16;
    v18 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
    v19 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    v20 = *(_QWORD *)(v19 + 24);
    *(_QWORD *)(v18 + 24) = v20;
    *(_QWORD *)(v18 + 32) = *(_QWORD *)(v19 + 32);
    v30 = **(void (***)(unint64_t, unint64_t, uint64_t))(v20 - 8);
    v32 = v3;
    swift_bridgeObjectRetain(v8);
    swift_retain(v31);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v17);
    v30(v18, v19, v20);
    v21 = (v18 + v5 + 40) & ~v5;
    v22 = (v19 + v5 + 40) & ~v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v21, v22, v32);
    v23 = (_QWORD *)((v6 + v21) & 0xFFFFFFFFFFFFFFF8);
    v24 = (_QWORD *)((v6 + v22) & 0xFFFFFFFFFFFFFFF8);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    v26 = ((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8;
    v27 = ((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8;
    v28 = *(_QWORD *)v27;
    *(_QWORD *)v26 = *(_QWORD *)v27;
    v8 = *(_QWORD *)(v27 + 8);
    *(_QWORD *)(v26 + 8) = v8;
    *(_BYTE *)(v26 + 16) = *(_BYTE *)(v27 + 16);
    swift_retain(v25);
    swift_retain(v28);
  }
  swift_retain(v8);
  return v11;
}

double sub_1000AF428(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  double result;

  swift_bridgeObjectRelease(*a1);
  swift_release(a1[1]);
  v4 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease(*v4);
  v5 = (_QWORD *)(((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease(*v5);
  v6 = (_QWORD *)(((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  sub_10000970C(v6);
  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v8 = ((unint64_t)v6 + *(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t))(v7 + 8))(v8);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v9 + 8));
  v10 = (_QWORD *)((v9 + 23) & 0xFFFFFFFFFFFFFFF8);
  swift_release(*v10);
  *(_QWORD *)&result = swift_release(v10[1]).n128_u64[0];
  return result;
}

uint64_t *sub_1000AF4D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void (*v16)(unint64_t, unint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *a2;
  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFF8);
  v8 = (uint64_t *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  *v7 = *v8;
  v10 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8);
  v11 = (uint64_t *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  v12 = *v11;
  *v10 = *v11;
  v13 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_QWORD *)(v14 + 24);
  *(_QWORD *)(v13 + 24) = v15;
  *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
  v16 = **(void (***)(unint64_t, unint64_t, uint64_t))(v15 - 8);
  swift_bridgeObjectRetain(v5);
  swift_retain(v6);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v12);
  v16(v13, v14, v15);
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = (v18 + 40 + v13) & ~v18;
  v20 = (v18 + 40 + v14) & ~v18;
  (*(void (**)(uint64_t, uint64_t))(v17 + 16))(v19, v20);
  v21 = *(_QWORD *)(v17 + 64) + 7;
  v22 = (_QWORD *)((v21 + v19) & 0xFFFFFFFFFFFFFFF8);
  v23 = (_QWORD *)((v21 + v20) & 0xFFFFFFFFFFFFFFF8);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = ((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8;
  v26 = ((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8;
  v27 = *(_QWORD *)v26;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v28 = *(_QWORD *)(v26 + 8);
  *(_QWORD *)(v25 + 8) = v28;
  *(_BYTE *)(v25 + 16) = *(_BYTE *)(v26 + 16);
  swift_retain(v24);
  swift_retain(v27);
  swift_retain(v28);
  return a1;
}

uint64_t *sub_1000AF624(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v6);
  v7 = a1[1];
  v8 = a2[1];
  a1[1] = v8;
  swift_retain(v8);
  swift_release(v7);
  v9 = (uint64_t *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = (uint64_t *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFF8);
  v11 = *v9;
  *v9 = *v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v11);
  v12 = (uint64_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  v13 = (uint64_t *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8);
  v14 = *v12;
  *v12 = *v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v14);
  v15 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  sub_100040AF0(v15, v16);
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = ((unint64_t)v15 + v18 + 40) & ~v18;
  v20 = ((unint64_t)v16 + v18 + 40) & ~v18;
  (*(void (**)(uint64_t, uint64_t))(v17 + 24))(v19, v20);
  v21 = *(_QWORD *)(v17 + 64) + 7;
  v22 = (_QWORD *)((v21 + v19) & 0xFFFFFFFFFFFFFFF8);
  v23 = (_QWORD *)((v21 + v20) & 0xFFFFFFFFFFFFFFF8);
  v24 = v23[1];
  v25 = v22[1];
  *v22 = *v23;
  v22[1] = v24;
  swift_retain(v24);
  swift_release(v25);
  v26 = ((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8;
  v27 = ((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8;
  v28 = *(_QWORD *)v26;
  v29 = *(_QWORD *)v27;
  *(_QWORD *)v26 = *(_QWORD *)v27;
  swift_retain(v29);
  swift_release(v28);
  v30 = *(_QWORD *)(v27 + 8);
  v31 = *(_QWORD *)(v26 + 8);
  *(_QWORD *)(v26 + 8) = v30;
  swift_retain(v30);
  swift_release(v31);
  *(_BYTE *)(v26 + 16) = *(_BYTE *)(v27 + 16);
  return a1;
}

_OWORD *sub_1000AF790(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  unint64_t v19;
  unint64_t v20;
  char v21;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = (_QWORD *)(((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFF8);
  *v6 = *v7;
  v8 = ((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_OWORD *)v9;
  v11 = *(_OWORD *)(v9 + 16);
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
  *(_OWORD *)v8 = v10;
  *(_OWORD *)(v8 + 16) = v11;
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v13 + 40 + v8) & ~v13;
  v15 = (v13 + 40 + v9) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v14, v15);
  v16 = *(_QWORD *)(v12 + 64) + 7;
  v17 = (_OWORD *)((v16 + v14) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_OWORD *)((v16 + v15) & 0xFFFFFFFFFFFFFFF8);
  *v17 = *v18;
  v19 = ((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8;
  v20 = ((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(_BYTE *)(v20 + 16);
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *(_BYTE *)(v19 + 16) = v21;
  return a1;
}

uint64_t *sub_1000AF868(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  v8 = (uint64_t *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v9 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)v9;
  v9 += 15;
  v11 = *v8;
  *v8 = v10;
  swift_bridgeObjectRelease(v11);
  v12 = (uint64_t *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v13 = (v9 & 0xFFFFFFFFFFFFF8) + 15;
  v14 = *v12;
  *v12 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease(v14);
  v15 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  v16 = v13 & 0xFFFFFFFFFFFFFFF8;
  sub_10000970C((_QWORD *)v15);
  v17 = *(_OWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
  v18 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(_QWORD *)(v15 + 32) = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 32);
  *(_OWORD *)v15 = v17;
  *(_OWORD *)(v15 + 16) = v18;
  v19 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = (v20 + 40 + v15) & ~v20;
  v22 = (v20 + 40 + v16) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 40))(v21, v22);
  v23 = *(_QWORD *)(v19 + 64) + 7;
  v24 = (v23 + v21) & 0xFFFFFFFFFFFFFFF8;
  v25 = v23 + v22;
  v26 = *(_QWORD *)(v24 + 8);
  v27 = (v25 & 0xFFFFFFFFFFFFFFF8) + 23;
  *(_OWORD *)v24 = *(_OWORD *)(v25 & 0xFFFFFFFFFFFFFFF8);
  swift_release(v26);
  v28 = (v24 + 23) & 0xFFFFFFFFFFFFFFF8;
  v27 &= 0xFFFFFFFFFFFFFFF8;
  v29 = *(_QWORD *)v28;
  *(_QWORD *)v28 = *(_QWORD *)v27;
  swift_release(v29);
  v30 = *(_QWORD *)(v28 + 8);
  *(_QWORD *)(v28 + 8) = *(_QWORD *)(v27 + 8);
  swift_release(v30);
  *(_BYTE *)(v28 + 16) = *(_BYTE *)(v27 + 16);
  return a1;
}

uint64_t sub_1000AF9A4(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((((((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8)
                                                                        + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                      + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                    + v7
                                                                    + 40) & ~v7);
    }
    else
    {
      v14 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      return (v14 + 1);
    }
  }
  else
  {
    v8 = ((((*(_QWORD *)(v4 + 64) + ((v7 + 72) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 17;
    v9 = (a2 - v6 + 255) >> (8 * v8);
    if (v8 < 4)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1000AFA44 + 4 * byte_1003CBAB8[v12]))();
  }
}

void sub_1000AFAEC(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((((*(_QWORD *)(v5 + 64)
         + ((*(unsigned __int8 *)(v5 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
         + 7) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8)
     + 17;
  if (v6 >= a3)
  {
    v10 = 0;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X13 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_1000AFC24()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1000AFCA8);
}

void sub_1000AFC2C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1000AFC34);
  JUMPOUT(0x1000AFCA8);
}

void sub_1000AFC44()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1000AFCA8);
}

void sub_1000AFC4C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1000AFCA8);
}

void sub_1000AFC54(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if ((a3 & 0x80000000) == 0)
    {
      if ((a2 & 0x80000000) == 0)
        JUMPOUT(0x1000AFCA4);
      JUMPOUT(0x1000AFC9CLL);
    }
    JUMPOUT(0x1000AFC60);
  }
  JUMPOUT(0x1000AFCA8);
}

uint64_t sub_1000AFCC0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t OpaqueTypeConformance2;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *a1;
  v4 = a1[1];
  v6 = type metadata accessor for Actionable(255, *a1, v4, a4);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Actionable<A>, v6);
  v8 = type metadata accessor for _ViewModifier_Content(255, v6, WitnessTable);
  v9 = sub_100009788(&qword_1004BC370);
  v10 = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v8);
  v13 = sub_100009788(&qword_1004BC378);
  v14 = &type metadata for Bool;
  v15 = sub_1000ACB60();
  v16 = &protocol witness table for Bool;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v13, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v13 = v8;
  v14 = (void *)v9;
  v15 = v5;
  v16 = (void *)v10;
  v17 = OpaqueTypeConformance2;
  v18 = v4;
  return swift_getOpaqueTypeConformance2(&v13, &opaque type descriptor for <<opaque return type of View.contextMenu<A, B>(menuItems:preview:)>>, 1);
}

unint64_t sub_1000AFDB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1004BC458;
  if (!qword_1004BC458)
  {
    v1 = sub_100009788(&qword_1004BC460);
    sub_10004FFFC(qword_1004BC3D0, &qword_1004BC3B8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_1004BC458);
  }
  return result;
}

uint64_t sub_1000AFE30()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000AFE54()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  sub_10000970C(v0 + 3);
  swift_release(v0[8]);
  swift_bridgeObjectRelease(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1000AFE90@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_1000AE404(a1, v2[2], (uint64_t)(v2 + 3), v2[8], v2[9], a2);
}

uint64_t sub_1000AFEA0(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100009788(a2);
    a3();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000AFF04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1004BC488;
  if (!qword_1004BC488)
  {
    v1 = sub_100009788(&qword_1004BC490);
    sub_1000AFF88();
    sub_100004D8C((unint64_t *)&qword_1004BC4B0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1004BC488);
  }
  return result;
}

unint64_t sub_1000AFF88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1004BC498;
  if (!qword_1004BC498)
  {
    v1 = sub_100009788(&qword_1004BC4A0);
    sub_10004FFFC(&qword_1004BC4A8, &qword_1004BC3B0, (uint64_t)&protocol conformance descriptor for Button<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1004BC498);
  }
  return result;
}

uint64_t sub_1000B0004(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_1000B001C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = (void *)a1[7];
  v8 = (void *)a1[9];
  v7 = a1[10];
  v9 = a1[11];
  v12 = a1[13];
  v13 = a1[12];
  v14 = a1[15];
  v15 = a1[14];
  v16 = a1[17];
  v17 = a1[16];
  swift_bridgeObjectRetain();
  sub_1000B00E4(v2, v3, v4, v5, v6);
  v10 = v8;
  sub_10000DCE8(v7, v9);
  sub_10000DCE8(v13, v12);
  sub_10000DCE8(v15, v14);
  sub_10000DCE8(v17, v16);
  return a1;
}

uint64_t sub_1000B00E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7;
  uint64_t result;

  if (a2 != 1)
  {
    v7 = a5;
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t sub_1000B0120@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = a1;
  v9[1] = a2;
  v4 = sub_10002D3FC();
  swift_bridgeObjectRetain();
  result = Text.init<A>(_:)(v9, &type metadata for String, v4);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = v7 & 1;
  *(_QWORD *)(a3 + 24) = v8;
  return result;
}

uint64_t sub_1000B0188(uint64_t a1)
{
  sub_1000B01E0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(void **)(a1 + 56), *(_QWORD *)(a1 + 64), *(void **)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136));
  return a1;
}

uint64_t sub_1000B01E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRelease(a3);
    sub_1000A6750(a4, a5, a6, a7, a8);

    sub_10000DCF8(a11, a12);
    sub_10000DCF8(a13, a14);
    sub_10000DCF8(a15, a16);
    return sub_10000DCF8(a17, a18);
  }
  return result;
}

double sub_1000B02BC(__int128 *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  double result;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v2 = sub_1000057B4((uint64_t *)&unk_1004BFBC0);
  __chkstk_darwin(v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = a1[7];
  v34 = a1[6];
  v35 = v5;
  v36 = a1[8];
  v6 = a1[3];
  v30 = a1[2];
  v31 = v6;
  v7 = a1[5];
  v32 = a1[4];
  v33 = v7;
  v8 = a1[1];
  v28 = *a1;
  v29 = v8;
  v9 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v25 = v34;
  v26 = v35;
  v27 = v36;
  v21 = v30;
  v22 = v31;
  v23 = v32;
  v24 = v33;
  v19 = v28;
  v20 = v29;
  type metadata accessor for MainActor(0);
  sub_1000B001C(&v28);
  v11 = static MainActor.shared.getter(v10);
  v12 = swift_allocObject(&unk_10046FD38, 176, 7);
  *(_QWORD *)(v12 + 16) = v11;
  *(_QWORD *)(v12 + 24) = &protocol witness table for MainActor;
  v13 = v26;
  *(_OWORD *)(v12 + 128) = v25;
  *(_OWORD *)(v12 + 144) = v13;
  *(_OWORD *)(v12 + 160) = v27;
  v14 = v22;
  *(_OWORD *)(v12 + 64) = v21;
  *(_OWORD *)(v12 + 80) = v14;
  v15 = v24;
  *(_OWORD *)(v12 + 96) = v23;
  *(_OWORD *)(v12 + 112) = v15;
  v16 = v20;
  *(_OWORD *)(v12 + 32) = v19;
  *(_OWORD *)(v12 + 48) = v16;
  v17 = sub_1000E6084((uint64_t)v4, (uint64_t)&unk_1004BC4D0, v12);
  *(_QWORD *)&result = swift_release(v17).n128_u64[0];
  return result;
}

uint64_t sub_1000B0414()
{
  uint64_t v0;
  uint64_t v1;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  v1 = *(_QWORD *)(v0 + 48);
  if (v1 != 1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));

  }
  if (*(_QWORD *)(v0 + 96))
    swift_release(*(_QWORD *)(v0 + 104));
  if (*(_QWORD *)(v0 + 112))
    swift_release(*(_QWORD *)(v0 + 120));
  if (*(_QWORD *)(v0 + 128))
    swift_release(*(_QWORD *)(v0 + 136));
  if (*(_QWORD *)(v0 + 144))
    swift_release(*(_QWORD *)(v0 + 152));
  return swift_deallocObject(v0, 160, 7);
}

double sub_1000B04A0()
{
  uint64_t v0;

  return sub_1000B02BC((__int128 *)(v0 + 16));
}

uint64_t sub_1000B04A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[4];
  _BYTE v5[16];
  uint64_t v6;
  uint64_t v7;

  v1 = v0[3];
  v2 = v0[4];
  v6 = v0[2];
  v7 = v1;
  v4[2] = v2;
  return Label.init(title:icon:)(sub_1000B08B0, v5, sub_10005A5AC, v4, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
}

uint64_t sub_1000B050C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _QWORD *v12;

  v8 = a4[7];
  *(_OWORD *)(v4 + 112) = a4[6];
  *(_OWORD *)(v4 + 128) = v8;
  *(_OWORD *)(v4 + 144) = a4[8];
  v9 = a4[3];
  *(_OWORD *)(v4 + 48) = a4[2];
  *(_OWORD *)(v4 + 64) = v9;
  v10 = a4[5];
  *(_OWORD *)(v4 + 80) = a4[4];
  *(_OWORD *)(v4 + 96) = v10;
  v11 = a4[1];
  *(_OWORD *)(v4 + 16) = *a4;
  *(_OWORD *)(v4 + 32) = v11;
  v12 = (_QWORD *)swift_task_alloc(dword_1004BC4DC);
  *(_QWORD *)(v4 + 160) = v12;
  *v12 = v4;
  v12[1] = sub_1000B05A4;
  return sub_1000AEA04(a1, a2, a3, v4 + 16);
}

uint64_t sub_1000B05A4()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 160));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000B05EC()
{
  uint64_t v0;
  uint64_t v1;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  v1 = *(_QWORD *)(v0 + 64);
  if (v1 != 1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));

  }
  if (*(_QWORD *)(v0 + 112))
    swift_release(*(_QWORD *)(v0 + 120));
  if (*(_QWORD *)(v0 + 128))
    swift_release(*(_QWORD *)(v0 + 136));
  if (*(_QWORD *)(v0 + 144))
    swift_release(*(_QWORD *)(v0 + 152));
  if (*(_QWORD *)(v0 + 160))
    swift_release(*(_QWORD *)(v0 + 168));
  return swift_deallocObject(v0, 176, 7);
}

uint64_t sub_1000B0680(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_1004BC4CC);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_10002F6EC;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _OWORD *))((char *)&dword_1004BC4C8 + dword_1004BC4C8))(a1, v4, v5, (_OWORD *)(v1 + 32));
}

_QWORD *sub_1000B0700(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = (void *)a1[7];
  v8 = (void *)a1[9];
  v7 = a1[10];
  v9 = a1[11];
  v11 = a1[13];
  v12 = a1[12];
  v13 = a1[15];
  v14 = a1[14];
  v15 = a1[17];
  v16 = a1[16];
  swift_bridgeObjectRelease(a1[2]);
  sub_1000A6750(v2, v3, v4, v5, v6);

  sub_10000DCF8(v7, v9);
  sub_10000DCF8(v12, v11);
  sub_10000DCF8(v14, v13);
  sub_10000DCF8(v16, v15);
  return a1;
}

double sub_1000B07C8(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_1000B07E4()
{
  uint64_t v0;

  sub_10000970C((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000B0808()
{
  uint64_t v0;

  return sub_1000A5A6C((_QWORD *)(v0 + 16));
}

uint64_t sub_1000B0810()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_1004BC04C);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10002F6EC;
  return sub_1000A5AAC(v0 + 16);
}

uint64_t sub_1000B085C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_1004BC044);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10002E8E0;
  return sub_1000A5B3C(v0 + 16);
}

uint64_t sub_1000B08A8()
{
  uint64_t v0;

  return sub_1000A5BCC((_QWORD *)(v0 + 16));
}

uint64_t sub_1000B08B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000B0120(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1000B08B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v5 = *((_QWORD *)v4 + 4);
  v6 = (int *)type metadata accessor for AnyAction(0, v5, *((_QWORD *)v4 + 5), a4);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 48) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  swift_unknownObjectRelease(*((_QWORD *)v4 + 2));
  v11 = &v4[v9];
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(&v4[v9], v5);
  swift_bridgeObjectRelease(*(_QWORD *)&v4[v9 + 8 + v6[9]]);
  v12 = &v4[v9 + v6[10]];
  v13 = *((_QWORD *)v12 + 1);
  if (v13 != 1)
  {
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(*((_QWORD *)v12 + 3));

  }
  v14 = &v11[v6[12]];
  if (*(_QWORD *)v14)
    swift_release(*((_QWORD *)v14 + 1));
  v15 = &v11[v6[13]];
  if (*(_QWORD *)v15)
    swift_release(*((_QWORD *)v15 + 1));
  v16 = &v11[v6[14]];
  if (*(_QWORD *)v16)
    swift_release(*((_QWORD *)v16 + 1));
  v17 = &v11[v6[15]];
  if (*(_QWORD *)v17)
    swift_release(*((_QWORD *)v17 + 1));
  return swift_deallocObject(v4, v9 + v10, v8 | 7);
}

uint64_t sub_1000B09E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v7 = v4[4];
  v8 = v4[5];
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AnyAction(0, v7, v8, a4) - 8) + 80);
  v10 = v4[2];
  v11 = v4[3];
  v12 = (uint64_t)v4 + ((v9 + 48) & ~v9);
  v13 = (_QWORD *)swift_task_alloc(dword_1004BC4FC);
  *(_QWORD *)(v5 + 16) = v13;
  *v13 = v5;
  v13[1] = sub_10002F6EC;
  return sub_1000AED70(a1, v10, v11, v12, v7, v8);
}

double sub_1000B0A84@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Actionable(0, v6, v7, a2) - 8) + 80);
  return sub_1000AD164(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

uint64_t sub_1000B0AF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Actionable(0, v6, v7, a4) - 8) + 80);
  v9 = v4 + ((v8 + 32) & ~v8);
  v10 = (_QWORD *)swift_task_alloc(dword_1004BC50C);
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = sub_10002E8E0;
  return sub_1000ADC88(v9, v6, v7, v11);
}

double sub_1000B0B74(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(_QWORD *)(v4 + 16);
  v8 = *(_QWORD *)(v4 + 24);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Actionable(0, v7, v8, a4) - 8) + 80);
  return sub_1000ADE08(a1, a2, v4 + ((v9 + 32) & ~v9), v7, v8);
}

uint64_t sub_1000B0BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for Actionable(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v8 | 7;
  v12 = (char *)(v4 + v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v9));
  swift_release(*((_QWORD *)v12 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)v12 + 2));
  swift_bridgeObjectRelease(*((_QWORD *)v12 + 3));
  sub_10000970C((_QWORD *)v12 + 4);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(&v12[v6[12]], v5);
  swift_release(*(_QWORD *)&v12[v6[13] + 8]);
  v13 = &v12[v6[14]];
  swift_release(*(_QWORD *)v13);
  swift_release(*((_QWORD *)v13 + 1));
  return swift_deallocObject(v4, v10, v11);
}

uint64_t sub_1000B0CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Actionable(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4)- 8)+ 80);
  return sub_1000ADF10(a1, (_QWORD *)(v4 + ((v6 + 32) & ~v6)));
}

uint64_t sub_1000B0D14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for Actionable(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = v8 | 7;
  v11 = (*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (char *)(v4 + v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v9));
  swift_release(*((_QWORD *)v12 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)v12 + 2));
  swift_bridgeObjectRelease(*((_QWORD *)v12 + 3));
  sub_10000970C((_QWORD *)v12 + 4);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(&v12[v6[12]], v5);
  swift_release(*(_QWORD *)&v12[v6[13] + 8]);
  v13 = &v12[v6[14]];
  swift_release(*(_QWORD *)v13);
  swift_release(*((_QWORD *)v13 + 1));
  swift_release(*(_QWORD *)(v4 + v11));
  return swift_deallocObject(v4, v11 + 8, v10);
}

uint64_t sub_1000B0E00@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X3>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;

  v6 = *(_QWORD *)(type metadata accessor for Actionable(0, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a2) - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  return sub_1000AD4C0(a1, v3 + v7, *(_QWORD *)(v3 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFF8)), a3);
}

UIMenu ActionList.menu.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t v7;
  uint64_t v8;
  UIMenuElementSize preferredElementSize;
  Swift::String v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::OpaquePointer v15;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  UIImage_optional v20;

  v19 = a1;
  v17 = a2;
  v18 = a3;
  type metadata accessor for ActionGroup(255, a2, a3, a4);
  v4 = type metadata accessor for Array(0);
  v5 = sub_10000598C(0, &qword_1004BAA70, UIMenu_ptr);
  swift_bridgeObjectRetain();
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
  v7 = Sequence.compactMap<A>(_:)(sub_1000B1028, v16, v4, v5, WitnessTable);
  swift_bridgeObjectRelease(v19);
  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0)
      v12 = v7;
    else
      v12 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease(v7);
    if (v13 >= 1)
    {
      v14 = sub_10000598C(0, &qword_1004BC550, UIMenuElement_ptr);
      swift_bridgeObjectRetain();
      preferredElementSize = _bridgeCocoaArray<A>(_:)(v12, v14);
      swift_bridgeObjectRelease(v7);
      goto LABEL_4;
    }
  }
  else if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v8 = swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v8);
    sub_10000598C(0, &qword_1004BC550, UIMenuElement_ptr);
    preferredElementSize = v7;
LABEL_4:
    swift_bridgeObjectRelease(v7);
    v10._countAndFlagsBits = 0;
    v10._object = (void *)0xE000000000000000;
    v20.value.super.isa = 0;
    v20.is_nil = 0;
    return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v10, (Swift::String_optional)0, v20, 0, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, v15);
  }
  swift_bridgeObjectRelease(v7);
  return 0;
}

UIMenu sub_1000B1028@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, UIMenu *a3@<X8>)
{
  uint64_t v3;
  UIMenu result;

  result.super.super.isa = ActionGroup.menu.getter(*a1, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a2).super.super.isa;
  a3->super.super.isa = result.super.super.isa;
  return result;
}

UIMenu ActionGroup.menu.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  UIMenuElementSize preferredElementSize;
  Swift::String v8;
  uint64_t v10;
  uint64_t v11;
  Swift::OpaquePointer v12;
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  UIImage_optional v17;

  v16 = a1;
  v14 = a2;
  v15 = a3;
  type metadata accessor for AnyAction(255, a2, a3, a4);
  v4 = type metadata accessor for Array(0);
  v5 = sub_10000598C(0, &qword_1004BC550, UIMenuElement_ptr);
  swift_bridgeObjectRetain();
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
  preferredElementSize = Sequence.compactMap<A>(_:)(sub_1000B1800, v13, v4, v5, WitnessTable);
  swift_bridgeObjectRelease(v16);
  if ((unint64_t)preferredElementSize >> 62)
  {
    if (preferredElementSize < UIMenuElementSizeSmall)
      v10 = preferredElementSize;
    else
      v10 = preferredElementSize & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(preferredElementSize);
    if (v11 >= 1)
      goto LABEL_3;
  }
  else if (*(uint64_t *)((preferredElementSize & 0xFFFFFFFFFFFFF8) + 0x10) >= 1)
  {
LABEL_3:
    sub_10000598C(0, &qword_1004BAA70, UIMenu_ptr);
    v8._countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    v17.value.super.isa = 0;
    v17.is_nil = 0;
    return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v8, (Swift::String_optional)0, v17, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, v12);
  }
  swift_bridgeObjectRelease(preferredElementSize);
  return 0;
}

id ActionList.contextMenuConfiguration(identifier:previewProvider:)(uint64_t a1, void *(*a2)(), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  UIMenu v9;
  Class isa;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  objc_class *v15;
  void *v16;
  uint64_t v17;
  id v18;
  void **v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *(*v24)();
  uint64_t v25;

  v9.super.super.isa = ActionList.menu.getter(a4, a5, a6, a4).super.super.isa;
  if (v9.super.super.isa)
  {
    isa = v9.super.super.isa;
    v11 = swift_allocObject(&unk_10046FF58, 24, 7);
    *(_QWORD *)(v11 + 16) = isa;
    v12 = (void *)objc_opt_self(UIContextMenuConfiguration);
    v24 = a2;
    v25 = a3;
    v20 = _NSConcreteStackBlock;
    v21 = 1107296256;
    v22 = sub_10000DD84;
    v23 = &unk_10046FF70;
    v13 = _Block_copy(&v20);
    v14 = v25;
    swift_unknownObjectRetain(a1);
    v15 = isa;
    swift_retain_n(a3, 2);
    swift_release(v14);
    v24 = Artwork.Placeholder.image.getter;
    v25 = v11;
    v20 = _NSConcreteStackBlock;
    v21 = 1107296256;
    v22 = sub_1000B1884;
    v23 = &unk_10046FF98;
    v16 = _Block_copy(&v20);
    v17 = v25;
    swift_retain(v11);
    v18 = objc_msgSend(v12, "configurationWithIdentifier:previewProvider:actionProvider:", a1, v13, v16, swift_release(v17).n128_f64[0]);
    swift_unknownObjectRelease(a1);
    swift_release(a3);
    swift_release(v11);
    _Block_release(v16);
    _Block_release(v13);

  }
  else
  {
    return 0;
  }
  return v18;
}

id AnyAction.menuElement.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  id v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  Swift::String v34;
  void *v35;
  uint64_t v36;
  Swift::String v37;
  unint64_t v38;
  Swift::String v39;
  unint64_t v40;
  NSString v41;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;

  v2 = v1;
  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = __chkstk_darwin(a1);
  v7 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v43 - v9;
  v11 = (uint64_t *)(v1 + *(int *)(v8 + 40));
  v12 = v11[1];
  if (v12 == 1)
    return 0;
  v13 = *v11;
  v14 = v11[2];
  v15 = v11[3];
  v17 = (void *)v11[4];
  v16 = v11[5];
  v44 = v13;
  v45 = v16;
  v46 = v17;
  v47 = v14;
  v18 = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19 = AnyAction.canPerform.getter(a1);
  v21 = v20;
  sub_100033EC4(v19, v20);
  if (v21 != 1)
  {

    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v12);
    return 0;
  }
  v48 = v15;
  v22 = *(void **)(v2 + *(int *)(a1 + 44));
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v23(v10, v2, a1);
  if (!v22)
  {
    if (v12)
      v26 = v44;
    else
      v26 = 0;
    v27 = 0xE000000000000000;
    if (v12)
      v27 = v12;
    v43 = v27;
    v44 = v26;
    if ((v45 & 1) != 0)
    {
      if ((v45 & 2) != 0)
        v28 = 3;
      else
        v28 = 1;
    }
    else
    {
      if ((v45 & 2) == 0)
      {
        v28 = 0;
        if ((v45 & 4) == 0)
          goto LABEL_22;
        goto LABEL_21;
      }
      v28 = 2;
    }
    if ((v45 & 4) == 0)
    {
LABEL_22:
      v45 = sub_10000598C(0, &qword_1004BE630, UIAction_ptr);
      v23(v7, (uint64_t)v10, a1);
      v29 = *(unsigned __int8 *)(v4 + 80);
      v30 = (v29 + 32) & ~v29;
      v31 = swift_allocObject(&unk_10046FFD0, v30 + v5, v29 | 7);
      *(_OWORD *)(v31 + 16) = *(_OWORD *)(a1 + 16);
      (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v31 + v30, v7, a1);
      swift_bridgeObjectRetain();
      v32 = v48;
      swift_bridgeObjectRetain();
      v33 = v18;
      v25 = (id)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v44, v43, v47, v32, v46, 0, 0, 0, 0, v28, 0, sub_1000B1A1C, v31);
      v24 = *(void (**)(char *, uint64_t))(v4 + 8);
      goto LABEL_23;
    }
LABEL_21:
    v28 |= 4uLL;
    goto LABEL_22;
  }
  v24 = *(void (**)(char *, uint64_t))(v4 + 8);
  v25 = v22;
LABEL_23:
  v24(v10, a1);
  v49 = 0;
  v50 = 0xE000000000000000;
  v34._countAndFlagsBits = 0x2E736E6F69746341;
  v34._object = (void *)0xE800000000000000;
  String.append(_:)(v34);
  DefaultStringInterpolation.appendInterpolation<A>(_:)(v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8));
  v36 = v49;
  v35 = (void *)v50;
  if (qword_1004B8E20 != -1)
    swift_once(&qword_1004B8E20, sub_1001FB168);
  v49 = qword_1004C2A98;
  v50 = unk_1004C2AA0;
  swift_bridgeObjectRetain();
  v37._countAndFlagsBits = 46;
  v37._object = (void *)0xE100000000000000;
  String.append(_:)(v37);
  v38 = v50;
  swift_bridgeObjectRetain();
  v39._countAndFlagsBits = v36;
  v39._object = v35;
  String.append(_:)(v39);
  swift_bridgeObjectRelease(v38);
  swift_bridgeObjectRelease(v35);
  v40 = v50;
  v41 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v40);
  objc_msgSend(v25, "setAccessibilityIdentifier:", v41);

  swift_bridgeObjectRelease(v48);
  swift_bridgeObjectRelease(v12);

  return v25;
}

double sub_1000B1694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  double result;
  uint64_t v23;

  v7 = type metadata accessor for AnyAction(0, a3, a4, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v11 = (char *)&v23 - v10;
  v12 = sub_1000057B4((uint64_t *)&unk_1004BFBC0);
  __chkstk_darwin(v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a2, v7);
  type metadata accessor for MainActor(0);
  v17 = static MainActor.shared.getter(v16);
  v18 = *(unsigned __int8 *)(v8 + 80);
  v19 = (v18 + 48) & ~v18;
  v20 = (char *)swift_allocObject(&unk_10046FFF8, v19 + v9, v18 | 7);
  *((_QWORD *)v20 + 2) = v17;
  *((_QWORD *)v20 + 3) = &protocol witness table for MainActor;
  *((_QWORD *)v20 + 4) = a3;
  *((_QWORD *)v20 + 5) = a4;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v20[v19], v11, v7);
  v21 = sub_1000E6084((uint64_t)v14, (uint64_t)&unk_1004BC560, (uint64_t)v20);
  *(_QWORD *)&result = swift_release(v21).n128_u64[0];
  return result;
}

id sub_1000B1800@<X0>(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  id result;

  v4 = type metadata accessor for AnyAction(0, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1);
  result = AnyAction.menuElement.getter(v4);
  *a2 = result;
  return result;
}

uint64_t sub_1000B1848()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000B186C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000B187C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id sub_1000B1884(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, __n128);
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  void *v8;

  v4 = *(uint64_t (**)(uint64_t, __n128))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = sub_10000598C(0, &qword_1004BC550, UIMenuElement_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v5);
  v7 = swift_retain(v3);
  v8 = (void *)v4(v6, v7);
  swift_release(v3);
  swift_bridgeObjectRelease(v6);
  return v8;
}

uint64_t sub_1000B18FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for AnyAction(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = v4 + v9;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + v9, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v9 + v6[9] + 8));
  v12 = v4 + v9 + v6[10];
  v13 = *(_QWORD *)(v12 + 8);
  if (v13 != 1)
  {
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(*(_QWORD *)(v12 + 24));

  }
  v14 = (_QWORD *)(v11 + v6[12]);
  if (*v14)
    swift_release(v14[1]);
  v15 = (_QWORD *)(v11 + v6[13]);
  if (*v15)
    swift_release(v15[1]);
  v16 = (_QWORD *)(v11 + v6[14]);
  if (*v16)
    swift_release(v16[1]);
  v17 = (_QWORD *)(v11 + v6[15]);
  if (*v17)
    swift_release(v17[1]);
  return swift_deallocObject(v4, v9 + v10, v8 | 7);
}

double sub_1000B1A1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AnyAction(0, v6, v7, a4) - 8) + 80);
  return sub_1000B1694(a1, v4 + ((v8 + 32) & ~v8), v6, v7);
}

uint64_t sub_1000B1A74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v5 = *((_QWORD *)v4 + 4);
  v6 = (int *)type metadata accessor for AnyAction(0, v5, *((_QWORD *)v4 + 5), a4);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 48) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  swift_unknownObjectRelease(*((_QWORD *)v4 + 2));
  v11 = &v4[v9];
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(&v4[v9], v5);
  swift_bridgeObjectRelease(*(_QWORD *)&v4[v9 + 8 + v6[9]]);
  v12 = &v4[v9 + v6[10]];
  v13 = *((_QWORD *)v12 + 1);
  if (v13 != 1)
  {
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(*((_QWORD *)v12 + 3));

  }
  v14 = &v11[v6[12]];
  if (*(_QWORD *)v14)
    swift_release(*((_QWORD *)v14 + 1));
  v15 = &v11[v6[13]];
  if (*(_QWORD *)v15)
    swift_release(*((_QWORD *)v15 + 1));
  v16 = &v11[v6[14]];
  if (*(_QWORD *)v16)
    swift_release(*((_QWORD *)v16 + 1));
  v17 = &v11[v6[15]];
  if (*(_QWORD *)v17)
    swift_release(*((_QWORD *)v17 + 1));
  return swift_deallocObject(v4, v9 + v10, v8 | 7);
}

uint64_t sub_1000B1B9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v7 = v4[4];
  v8 = v4[5];
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AnyAction(0, v7, v8, a4) - 8) + 80);
  v10 = v4[2];
  v11 = v4[3];
  v12 = (uint64_t)v4 + ((v9 + 48) & ~v9);
  v13 = (_QWORD *)swift_task_alloc(dword_1004BC55C);
  *(_QWORD *)(v5 + 16) = v13;
  *v13 = v5;
  v13[1] = sub_10002E8E0;
  return sub_1000AED70(a1, v10, v11, v12, v7, v8);
}

double View.alertPresenting(_:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  double result;
  _QWORD v15[2];

  swift_retain(a1);
  v8 = sub_1000057B4(&qword_1004BC568);
  v9 = sub_10004FFFC(&qword_1004BC570, &qword_1004BC568, (uint64_t)&protocol conformance descriptor for PresentedViewState<A>);
  v10 = ObservedObject.init(wrappedValue:)(a1, v8, v9);
  v12 = v11;
  v15[0] = v10;
  v15[1] = v11;
  v13 = sub_1000B1D04();
  View.viewPresenting<A, B>(_:modifier:)(a1, (uint64_t)v15, a2, (uint64_t)&type metadata for Modifier, a3, v13, a4);
  *(_QWORD *)&result = swift_release(v12).n128_u64[0];
  return result;
}

unint64_t sub_1000B1D04()
{
  unint64_t result;

  result = qword_1004BC578;
  if (!qword_1004BC578)
  {
    result = swift_getWitnessTable(&unk_1003CBBE4, &type metadata for Modifier);
    atomic_store(result, (unint64_t *)&qword_1004BC578);
  }
  return result;
}

uint64_t sub_1000B1D48(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for ModifiedContent(255, *a1, &type metadata for Modifier);
  v2 = sub_100009788(&qword_1004BC580);
  v3 = type metadata accessor for ModifiedContent(255, v1, v2);
  sub_1000B1D04();
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
  sub_10004FFFC(&qword_1004BC588, &qword_1004BC580, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
}

_QWORD *initializeBufferWithCopyOfBuffer for Modifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for Modifier(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for Modifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

_QWORD *assignWithTake for Modifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for Modifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Modifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Modifier()
{
  return &type metadata for Modifier;
}

uint64_t sub_1000B1F34(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1003ED288, 1);
}

uint64_t sub_1000B1F44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t KeyPath;
  _QWORD *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t OpaqueTypeConformance2;
  uint64_t v83;
  void *v85;
  unint64_t v86;
  char *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  void *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  char v124[8];
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  void *v131;

  v6 = sub_1000057B4(&qword_1004BC5A8);
  v106 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v109 = (char *)&v89 - v10;
  v110 = sub_1000057B4(&qword_1004BC5B0);
  __chkstk_darwin(v110);
  v111 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000057B4(&qword_1004BC5B8);
  v108 = *(uint64_t **)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v107 = (char *)&v89 - v16;
  v17 = sub_1000057B4(&qword_1004BC5C0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v112 = (char *)&v89 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (uint64_t *)(a2 + *(_QWORD *)(*(_QWORD *)a2 + 96));
  v21 = swift_beginAccess(v20, v124, 0, 0);
  v22 = v20[5];
  if (v22)
  {
    v101 = v12;
    v102 = v18;
    v103 = v17;
    v104 = v6;
    v105 = a3;
    v24 = v20[1];
    v25 = v20[2];
    v26 = v20[3];
    v27 = v20[4];
    v28 = (void *)v20[6];
    v125 = *v20;
    v23 = v125;
    v126 = v24;
    v95 = v25;
    v127 = v25;
    v128 = v26;
    v129 = v27 & 1;
    v130 = v22;
    v131 = v28;
    v29 = v22;
    v99 = v28;
    v30 = v28;
    swift_bridgeObjectRetain();
    v97 = v26;
    swift_bridgeObjectRetain();
    v100 = v29;
    v31 = swift_bridgeObjectRetain();
    v32 = static Color.clear.getter(v31);
    v96 = v23;
    if (v24)
      v33 = v23;
    else
      v33 = 0;
    v34 = 0xE000000000000000;
    if (v24)
      v34 = v24;
    v98 = v27;
    v94 = v32;
    v93 = v24;
    v122 = v34;
    v123 = v32;
    v121 = v33;
    swift_bridgeObjectRetain();
    if ((v27 & 1) != 0)
    {
      v61 = sub_1000057B4(&qword_1004BC568);
      v62 = sub_10004FFFC(&qword_1004BC570, &qword_1004BC568, (uint64_t)&protocol conformance descriptor for PresentedViewState<A>);
      v63 = ObservedObject.projectedValue.getter(a1, a2, v61, v62);
      KeyPath = swift_getKeyPath(&unk_1003CBC38);
      ObservedObject.Wrapper.subscript.getter(&v113, KeyPath, v63, v62);
      swift_release(KeyPath);
      swift_release(v63);
      v108 = &v89;
      v66 = v113;
      v65 = v114;
      v67 = v115;
      v69 = __chkstk_darwin(v68);
      __chkstk_darwin(v69);
      v70 = sub_1000057B4(&qword_1004BC5C8);
      v90 = v70;
      v71 = sub_1000057B4(&qword_1004BC5D0);
      v72 = sub_10002D3FC();
      v91 = v72;
      v73 = sub_1000B3008();
      v92 = v73;
      v107 = (char *)sub_1000B3084();
      v86 = v73;
      v87 = v107;
      v85 = (void *)v72;
      ((void (*)(uint64_t *, void *, _QWORD *, uint64_t, _QWORD, uint64_t (*)(), void **, uint64_t (*)@<X0>(uint64_t *@<X8>), void **, void *, _QWORD *, uint64_t, uint64_t, void *))View.confirmationDialog<A, B, C>(_:isPresented:titleVisibility:actions:message:))(&v121, v66, v65, v67, 0, sub_1000B2FF0, &v85, sub_1000B32E8, &v85, &type metadata for Color, &type metadata for String, v70, v71, &protocol witness table for Color);
      swift_release(v65);
      swift_release(v66);
      swift_bridgeObjectRelease(v122);
      v74 = v106;
      v75 = v109;
      v76 = v104;
      (*(void (**)(char *, char *, uint64_t))(v106 + 32))(v109, v9, v104);
      v77 = v111;
      (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v111, v75, v76);
      swift_storeEnumTagMultiPayload(v77, v110, 1);
      v113 = &type metadata for Color;
      v114 = &type metadata for String;
      v78 = v90;
      v115 = v90;
      v116 = v71;
      v79 = v91;
      v117 = &protocol witness table for Color;
      v118 = v91;
      v80 = v92;
      v81 = v107;
      v119 = v92;
      v120 = v107;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v113, &opaque type descriptor for <<opaque return type of View.alert<A, B, C>(_:isPresented:actions:message:)>>, 1);
      v113 = &type metadata for Color;
      v114 = &type metadata for String;
      v115 = v78;
      v116 = v71;
      v117 = &protocol witness table for Color;
      v118 = v79;
      v119 = v80;
      v120 = v81;
      v83 = swift_getOpaqueTypeConformance2(&v113, &opaque type descriptor for <<opaque return type of View.confirmationDialog<A, B, C>(_:isPresented:titleVisibility:actions:message:)>>, 1);
      v59 = (uint64_t)v112;
      _ConditionalContent<>.init(storage:)(v77, v101, v76, OpaqueTypeConformance2, v83);
      swift_release(v94);
      sub_1000A4848(v96, v93, v95, v97, v98, v100, v99);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v75, v76);
    }
    else
    {
      v35 = sub_1000057B4(&qword_1004BC568);
      v36 = sub_10004FFFC(&qword_1004BC570, &qword_1004BC568, (uint64_t)&protocol conformance descriptor for PresentedViewState<A>);
      v37 = ObservedObject.projectedValue.getter(a1, a2, v35, v36);
      v38 = swift_getKeyPath(&unk_1003CBC38);
      ObservedObject.Wrapper.subscript.getter(&v113, v38, v37, v36);
      swift_release(v38);
      swift_release(v37);
      v109 = (char *)&v89;
      v40 = v113;
      v39 = v114;
      LODWORD(v106) = v115;
      v42 = __chkstk_darwin(v41);
      __chkstk_darwin(v42);
      v43 = sub_1000057B4(&qword_1004BC5C8);
      v89 = v43;
      v44 = sub_1000057B4(&qword_1004BC5D0);
      v90 = v44;
      v45 = sub_10002D3FC();
      v91 = v45;
      v46 = sub_1000B3008();
      v92 = v46;
      v47 = sub_1000B3084();
      v87 = (char *)v46;
      v88 = v47;
      v85 = &protocol witness table for Color;
      v86 = v45;
      ((void (*)(uint64_t *, void *, _QWORD *, _QWORD, uint64_t (*)(), void **, uint64_t (*)@<X0>(uint64_t *@<X8>), void **, void *, _QWORD *, uint64_t, uint64_t))View.alert<A, B, C>(_:isPresented:actions:message:))(&v121, v40, v39, v106, sub_1000B32E4, &v85, sub_1000B30E0, &v85, &type metadata for Color, &type metadata for String, v43, v44);
      swift_release(v39);
      swift_release(v40);
      swift_bridgeObjectRelease(v122);
      v48 = v108;
      v49 = v107;
      v50 = v15;
      v51 = v101;
      ((void (*)(char *, char *, uint64_t))v108[4])(v107, v50, v101);
      v52 = v111;
      ((void (*)(char *, char *, uint64_t))v48[2])(v111, v49, v51);
      swift_storeEnumTagMultiPayload(v52, v110, 0);
      v113 = &type metadata for Color;
      v114 = &type metadata for String;
      v53 = v89;
      v54 = v90;
      v115 = v89;
      v116 = v90;
      v55 = v91;
      v117 = &protocol witness table for Color;
      v118 = v91;
      v56 = v92;
      v119 = v92;
      v120 = (char *)v47;
      v57 = swift_getOpaqueTypeConformance2(&v113, &opaque type descriptor for <<opaque return type of View.alert<A, B, C>(_:isPresented:actions:message:)>>, 1);
      v113 = &type metadata for Color;
      v114 = &type metadata for String;
      v115 = v53;
      v116 = v54;
      v117 = &protocol witness table for Color;
      v118 = v55;
      v119 = v56;
      v120 = (char *)v47;
      v58 = swift_getOpaqueTypeConformance2(&v113, &opaque type descriptor for <<opaque return type of View.confirmationDialog<A, B, C>(_:isPresented:titleVisibility:actions:message:)>>, 1);
      v59 = (uint64_t)v112;
      _ConditionalContent<>.init(storage:)(v52, v51, v104, v57, v58);
      swift_release(v94);
      sub_1000A4848(v96, v93, v95, v97, v98, v100, v99);
      ((void (*)(char *, uint64_t))v48[1])(v49, v51);
    }
    a3 = v105;
    sub_10000FD10(v59, v105, &qword_1004BC5C0);
    v60 = 0;
    v17 = v103;
    v18 = v102;
  }
  else
  {
    v60 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v18 + 56))(a3, v60, 1, v17, v21);
}

uint64_t sub_1000B28A0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1003CBC60);
  v5 = swift_getKeyPath(&unk_1003CBC98);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_1000B2934(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1003CBC60);
  v5 = swift_getKeyPath(&unk_1003CBC98);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_1000B29BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;

  v7 = *(_QWORD *)(a1 + 40);
  swift_bridgeObjectRetain();
  v1 = sub_1000057B4(&qword_1004BC5F8);
  v2 = sub_1000057B4(&qword_1004BC5E8);
  v3 = sub_10004FFFC(&qword_1004BC600, &qword_1004BC5F8, (uint64_t)&protocol conformance descriptor for [A]);
  v4 = sub_10004FFFC(&qword_1004BC5E0, &qword_1004BC5E8, (uint64_t)&protocol conformance descriptor for Button<A>);
  v5 = sub_1000B30F8();
  return ((uint64_t (*)(uint64_t *, uint64_t (*)@<X0>(__int128 *@<X0>, uint64_t@<X8>), _QWORD, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, unint64_t))ForEach<>.init(_:content:))(&v7, sub_1000B2B14, 0, v1, &type metadata for String, v2, v3, v4, v5);
}

uint64_t sub_1000B2A94@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD v10[2];

  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v10[0] = *(_QWORD *)(a1 + 16);
    v10[1] = v3;
    v4 = sub_10002D3FC();
    swift_bridgeObjectRetain();
    result = Text.init<A>(_:)(v10, &type metadata for String, v4);
    v9 = v8 & 1;
  }
  else
  {
    result = 0;
    v6 = 0;
    v9 = 0;
    v7 = 0;
  }
  *a2 = result;
  a2[1] = v6;
  a2[2] = v9;
  a2[3] = v7;
  return result;
}

uint64_t sub_1000B2B14@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  __int128 v29;
  char v30;

  v4 = sub_1000057B4(&qword_1004BAA00);
  __chkstk_darwin(v4);
  v6 = (_QWORD *)((char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_1000057B4(&qword_1004BC5E8);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[1];
  v23 = *a1;
  v24 = v11;
  v25 = a1[2];
  v26 = *((_QWORD *)a1 + 6);
  v28 = v11;
  v22 = v11;
  sub_10000FD10((uint64_t)&v25, (uint64_t)&v27, &qword_1004BC610);
  sub_10000FD10((uint64_t)&v27, (uint64_t)&v30, &qword_1004BC610);
  v12 = v30;
  if (v30 == 2)
  {
    v13 = type metadata accessor for ButtonRole(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v6, 1, 1, v13);
    swift_bridgeObjectRetain();
  }
  else
  {
    v14 = swift_bridgeObjectRetain();
    if ((v12 & 1) != 0)
      static ButtonRole.destructive.getter(v6);
    else
      static ButtonRole.cancel.getter(v14);
    v15 = type metadata accessor for ButtonRole(0);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v6, 0, 1, v15);
  }
  v29 = v23;
  v16 = *((_QWORD *)&v25 + 1);
  v17 = v26;
  v18 = swift_allocObject(&unk_1004700A0, 72, 7);
  v19 = v24;
  *(_OWORD *)(v18 + 16) = v23;
  *(_OWORD *)(v18 + 32) = v19;
  *(_OWORD *)(v18 + 48) = v25;
  *(_QWORD *)(v18 + 64) = v26;
  sub_1000795C8((uint64_t)&v28);
  sub_1000795C8((uint64_t)&v29);
  sub_10000DCE8(v16, v17);
  v20 = sub_10002D3FC();
  Button<>.init<A>(_:role:action:)(&v22, v6, sub_1000B3178, v18, &type metadata for String, v20);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v10, v7);
}

double sub_1000B2D28(uint64_t a1)
{
  uint64_t v2;
  double result;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = sub_1000057B4((uint64_t *)&unk_1004BFBC0);
  __chkstk_darwin(v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 48);
    v8 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v5, 1, 1, v8);
    type metadata accessor for MainActor(0);
    swift_retain_n(v7, 2);
    v10 = static MainActor.shared.getter(v9);
    v11 = (_QWORD *)swift_allocObject(&unk_1004700C8, 48, 7);
    v11[2] = v10;
    v11[3] = &protocol witness table for MainActor;
    v11[4] = v6;
    v11[5] = v7;
    v12 = sub_1000E6084((uint64_t)v5, (uint64_t)&unk_1004BC620, (uint64_t)v11);
    sub_10000DCF8(v6, v7);
    *(_QWORD *)&result = swift_release(v12).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000B2E28(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  _QWORD *v4;
  __n128 v6;
  _QWORD *v7;
  uint64_t (*v9)(void);

  v4[2] = type metadata accessor for MainActor(0);
  v4[3] = static MainActor.shared.getter(v6);
  v9 = (uint64_t (*)(void))((char *)a4 + *a4);
  v7 = (_QWORD *)swift_task_alloc(a4[1]);
  v4[4] = v7;
  *v7 = v4;
  v7[1] = sub_1000B2EA4;
  return v9();
}

uint64_t sub_1000B2EA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 32));
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000B2F14, v2, v3);
}

uint64_t sub_1000B2F14()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B2F44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v6 = *v2;
  v5 = v2[1];
  v7 = static Alignment.center.getter();
  v9 = v8;
  v10 = a2 + *(int *)(sub_1000057B4(&qword_1004BC590) + 36);
  sub_1000B1F44(v6, v5, v10);
  v11 = (uint64_t *)(v10 + *(int *)(sub_1000057B4(&qword_1004BC598) + 36));
  *v11 = v7;
  v11[1] = v9;
  v12 = sub_1000057B4(&qword_1004BC5A0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a2, a1, v12);
}

uint64_t sub_1000B2FF0()
{
  uint64_t v0;

  return sub_1000B29BC(*(_QWORD *)(v0 + 16));
}

unint64_t sub_1000B3008()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1004BC5D8;
  if (!qword_1004BC5D8)
  {
    v1 = sub_100009788(&qword_1004BC5C8);
    sub_10004FFFC(&qword_1004BC5E0, &qword_1004BC5E8, (uint64_t)&protocol conformance descriptor for Button<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_1004BC5D8);
  }
  return result;
}

unint64_t sub_1000B3084()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1004BC5F0;
  if (!qword_1004BC5F0)
  {
    v1 = sub_100009788(&qword_1004BC5D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1004BC5F0);
  }
  return result;
}

uint64_t sub_1000B30E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1000B2A94(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1000B30F8()
{
  unint64_t result;

  result = qword_1004BC608;
  if (!qword_1004BC608)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Alert.Action, &type metadata for Alert.Action);
    atomic_store(result, (unint64_t *)&qword_1004BC608);
  }
  return result;
}

uint64_t sub_1000B313C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  if (v0[7])
    swift_release(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

double sub_1000B3178()
{
  uint64_t v0;

  return sub_1000B2D28(v0 + 16);
}

uint64_t sub_1000B3180()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000B31AC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1004BC61C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10002E8E0;
  return sub_1000B2E28(a1, v4, v5, v6);
}

uint64_t sub_1000B322C()
{
  return 8;
}

_QWORD *sub_1000B3238(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

unint64_t sub_1000B3248()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1004BC628;
  if (!qword_1004BC628)
  {
    v1 = sub_100009788(&qword_1004BC590);
    sub_10004FFFC(&qword_1004BC630, &qword_1004BC5A0, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_10004FFFC(&qword_1004BC638, &qword_1004BC598, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1004BC628);
  }
  return result;
}

id static UIAlertController.alertController(with:overrideStyle:)(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1000B381C(a1, a2, a3 & 1);
}

double sub_1000B32F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = sub_1000057B4((uint64_t *)&unk_1004BFBC0);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a2 + 40);
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 48);
    v9 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v6, 1, 1, v9);
    type metadata accessor for MainActor(0);
    swift_retain_n(v8, 2);
    v11 = static MainActor.shared.getter(v10);
    v12 = (_QWORD *)swift_allocObject(&unk_1004701D8, 48, 7);
    v12[2] = v11;
    v12[3] = &protocol witness table for MainActor;
    v12[4] = v7;
    v12[5] = v8;
    v13 = sub_1000E6084((uint64_t)v6, (uint64_t)&unk_1004BC648, (uint64_t)v12);
    sub_10000DCF8(v7, v8);
    *(_QWORD *)&result = swift_release(v13).n128_u64[0];
  }
  return result;
}

id static UIAlertAction.tapToRadar(title:description:screenshots:attachments:keywords:withDevicePrefix:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  id v28;
  NSURL *v29;
  void *v30;
  void *v31;
  unsigned int v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSString v37;
  void *v38;
  id v39;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD aBlock[5];
  uint64_t v47;

  v43 = a6;
  v44 = a7;
  v45 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v45 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = __chkstk_darwin(v45);
  v41 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v42 = (char *)&v41 - v17;
  v18 = sub_1000057B4(&qword_1004B99B0);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v41 - v22;
  if (qword_1004B93A8 != -1)
    swift_once(&qword_1004B93A8, sub_10020D77C);
  if (static DeviceCapabilities.isInternalInstall != 1)
    return 0;
  sub_100116AB8(a1, a2, a3, a4, a5, v43, v44, a8 & 1, (uint64_t)v23);
  sub_10002DBB0((uint64_t)v23, (uint64_t)v21);
  v24 = v45;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v21, 1, v45) == 1)
  {
    sub_10002DBF8((uint64_t)v23);
    v25 = (uint64_t)v21;
LABEL_9:
    sub_10002DBF8(v25);
    return 0;
  }
  v26 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v27 = v42;
  v26(v42, v21, v24);
  v28 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  URL._bridgeToObjectiveC()(v29);
  v31 = v30;
  v32 = objc_msgSend(v28, "canOpenURL:", v30);

  if (!v32)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v27, v24);
    v25 = (uint64_t)v23;
    goto LABEL_9;
  }
  v33 = v41;
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v41, v27, v24);
  v34 = *(unsigned __int8 *)(v14 + 80);
  v35 = (v34 + 16) & ~v34;
  v36 = swift_allocObject(&unk_100470138, v35 + v15, v34 | 7);
  v26((char *)(v36 + v35), v33, v24);
  v37 = String._bridgeToObjectiveC()();
  aBlock[4] = sub_1000B3B5C;
  v47 = v36;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000179E8;
  aBlock[3] = &unk_100470150;
  v38 = _Block_copy(aBlock);
  swift_release(v47);
  v39 = objc_msgSend((id)swift_getObjCClassFromMetadata(), "actionWithTitle:style:handler:", v37, 0, v38);
  _Block_release(v38);

  (*(void (**)(char *, uint64_t))(v14 + 8))(v27, v24);
  sub_10002DBF8((uint64_t)v23);
  return v39;
}

void sub_1000B3744()
{
  id v0;
  NSURL *v1;
  void *v2;
  void *v3;
  unint64_t v4;
  Class isa;

  v0 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  URL._bridgeToObjectiveC()(v1);
  v3 = v2;
  v4 = sub_1000B8E1C((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for OpenExternalURLOptionsKey(0);
  sub_1000A44F4();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v4);
  objc_msgSend(v0, "openURL:options:completionHandler:", v3, isa, 0);

}

id Alert.uiAlertController.getter()
{
  uint64_t v0;

  return sub_1000B381C(v0, 0, 1);
}

id sub_1000B381C(uint64_t a1, uint64_t a2, char a3)
{
  NSString v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSString v20;
  void *v21;
  id v22;
  id v24;
  id v25;
  uint64_t v26;
  _QWORD aBlock[5];
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[16];
  _BYTE v31[16];
  _QWORD v32[2];
  _QWORD v33[3];

  if ((a3 & 1) != 0)
    a2 = ~*(unsigned __int8 *)(a1 + 32) & 1;
  sub_1000B3BB0(a1, (uint64_t)v31);
  sub_1000B3BB0(a1 + 16, (uint64_t)v30);
  sub_1000B3BB0((uint64_t)v31, (uint64_t)v32);
  if (v32[1])
  {
    sub_1000795C8((uint64_t)v30);
    sub_1000795C8((uint64_t)v31);
    v5 = String._bridgeToObjectiveC()();
    sub_100072644((uint64_t)v31);
  }
  else
  {
    sub_1000795C8((uint64_t)v30);
    v5 = 0;
  }
  sub_1000B3BB0((uint64_t)v30, (uint64_t)v33);
  if (v33[1])
  {
    v6 = String._bridgeToObjectiveC()();
    sub_100072644((uint64_t)v30);
  }
  else
  {
    v6 = 0;
  }
  v7 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", v5, v6, a2);

  if (!a2)
    objc_msgSend(v7, "setModalPresentationStyle:", 7);
  v8 = *(_QWORD *)(a1 + 40);
  v29 = v8;
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v24 = (id)objc_opt_self(UIAlertAction);
    swift_bridgeObjectRetain();
    v10 = (uint64_t *)(v8 + 40);
    v25 = v7;
    do
    {
      v11 = *(v10 - 1);
      v12 = *v10;
      v14 = v10[1];
      v13 = v10[2];
      v15 = *((unsigned __int8 *)v10 + 24);
      v16 = v10[4];
      v17 = v10[5];
      v18 = 1;
      if ((v15 & 1) != 0)
        v18 = 2;
      if (v15 == 2)
        v18 = 0;
      v26 = v18;
      v19 = swift_allocObject(&unk_100470188, 72, 7);
      *(_QWORD *)(v19 + 16) = v11;
      *(_QWORD *)(v19 + 24) = v12;
      *(_QWORD *)(v19 + 32) = v14;
      *(_QWORD *)(v19 + 40) = v13;
      *(_BYTE *)(v19 + 48) = v15;
      *(_QWORD *)(v19 + 56) = v16;
      *(_QWORD *)(v19 + 64) = v17;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10000DCE8(v16, v17);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10000DCE8(v16, v17);
      v20 = String._bridgeToObjectiveC()();
      aBlock[4] = sub_1000B3C34;
      v28 = v19;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000179E8;
      aBlock[3] = &unk_1004701A0;
      v21 = _Block_copy(aBlock);
      v22 = objc_msgSend(v24, "actionWithTitle:style:handler:", v20, v26, v21, swift_release(v28).n128_f64[0]);
      _Block_release(v21);

      v7 = v25;
      objc_msgSend(v25, "addAction:", v22);
      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease(v12);

      sub_10000DCF8(v16, v17);
      v10 += 7;
      --v9;
    }
    while (v9);
    sub_1000B3C3C(&v29);
  }
  return v7;
}

uint64_t sub_1000B3AFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_1000B3B5C()
{
  type metadata accessor for URL(0);
  sub_1000B3744();
}

uint64_t sub_1000B3B98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000B3BA8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000B3BB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000057B4(&qword_1004BAE98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B3BF8()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  if (v0[7])
    swift_release(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

double sub_1000B3C34(uint64_t a1)
{
  uint64_t v1;

  return sub_1000B32F8(a1, v1 + 16);
}

_QWORD *sub_1000B3C3C(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

uint64_t sub_1000B3C64()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000B3C90(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1004BC644);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10002E8E0;
  return sub_1000B2E28(a1, v4, v5, v6);
}

uint64_t Alert.Action.init(id:title:role:perform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = a7;
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  result = __chkstk_darwin(v15);
  v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
  {
    v20 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
    a1 = UUID.uuidString.getter(v20);
    a2 = v21;
    result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  }
  *(_QWORD *)a8 = a1;
  *(_QWORD *)(a8 + 8) = a2;
  *(_QWORD *)(a8 + 16) = a3;
  *(_QWORD *)(a8 + 24) = a4;
  *(_BYTE *)(a8 + 32) = a5;
  v22 = v24;
  *(_QWORD *)(a8 + 40) = a6;
  *(_QWORD *)(a8 + 48) = v22;
  return result;
}

uint64_t Alert.init(title:message:image:style:actions:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(_QWORD *)a8 = result;
  *(_QWORD *)(a8 + 8) = a2;
  *(_QWORD *)(a8 + 16) = a3;
  *(_QWORD *)(a8 + 24) = a4;
  *(_BYTE *)(a8 + 32) = a6 & 1;
  *(_QWORD *)(a8 + 40) = a7;
  *(_QWORD *)(a8 + 48) = a5;
  return result;
}

uint64_t Alert.Action.role.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t Library.Menu.userSelectedIdentifiers.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
}

void *Alert.image.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 48);
  v2 = v1;
  return v1;
}

uint64_t Alert.Action.perform.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  sub_10000DCE8(v1, *(_QWORD *)(v0 + 48));
  return v1;
}

unint64_t sub_1000B3E74()
{
  unint64_t result;

  result = qword_1004BC650;
  if (!qword_1004BC650)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Alert.Style, &type metadata for Alert.Style);
    atomic_store(result, (unint64_t *)&qword_1004BC650);
  }
  return result;
}

unint64_t sub_1000B3EBC()
{
  unint64_t result;

  result = qword_1004BC658[0];
  if (!qword_1004BC658[0])
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Alert.Action.Role, &type metadata for Alert.Action.Role);
    atomic_store(result, qword_1004BC658);
  }
  return result;
}

void destroy for Alert(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));

}

uint64_t initializeWithCopy for Alert(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v7 = v6;
  return a1;
}

uint64_t assignWithCopy for Alert(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(void **)(a1 + 48);
  v11 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v11;
  v12 = v11;

  return a1;
}

uint64_t assignWithTake for Alert(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  v8 = *(void **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);

  return a1;
}

uint64_t getEnumTagSinglePayload for Alert(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Alert(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Alert()
{
  return &type metadata for Alert;
}

ValueMetadata *type metadata accessor for Alert.Style()
{
  return &type metadata for Alert.Style;
}

uint64_t destroy for Alert.Action(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  result = swift_bridgeObjectRelease(a1[3]);
  if (a1[5])
    return swift_release(a1[6]);
  return result;
}

uint64_t initializeWithCopy for Alert.Action(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = (_OWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  if (v6)
  {
    v8 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = v6;
    *(_QWORD *)(a1 + 48) = v8;
    swift_retain(v8);
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *v7;
  }
  return a1;
}

uint64_t assignWithCopy for Alert.Action(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  if (!v8)
  {
    if (v9)
    {
      v12 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = v9;
      *(_QWORD *)(a1 + 48) = v12;
      swift_retain(v12);
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    return a1;
  }
  if (!v9)
  {
    swift_release(*(_QWORD *)(a1 + 48));
    goto LABEL_7;
  }
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  swift_retain(v10);
  swift_release(v11);
  return a1;
}

uint64_t assignWithTake for Alert.Action(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  if (!v9)
  {
    if (v8)
    {
      v12 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = v8;
      *(_QWORD *)(a1 + 48) = v12;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    return a1;
  }
  if (!v8)
  {
    swift_release(*(_QWORD *)(a1 + 48));
    goto LABEL_7;
  }
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v10;
  swift_release(v11);
  return a1;
}

ValueMetadata *type metadata accessor for Alert.Action()
{
  return &type metadata for Alert.Action;
}

uint64_t _s9MusicCore5AlertV5StyleOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000B43E0 + 4 * byte_1003CBCC1[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000B4414 + 4 * byte_1003CBCBC[v4]))();
}

uint64_t sub_1000B4414(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B441C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000B4424);
  return result;
}

uint64_t sub_1000B4430(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000B4438);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000B443C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B4444(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Alert.Action.Role()
{
  return &type metadata for Alert.Action.Role;
}

uint64_t ArtworkVideoReportingController.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, 48, 7);
  ArtworkVideoReportingController.init()();
  return v1;
}

uint64_t *ArtworkVideoReportingController.init()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t TupleTypeMetadata2;
  uint64_t v4;

  v1 = *v0;
  *((_BYTE *)v0 + 16) = 0;
  v0[3] = 0;
  v0[4] = 0;
  v2 = *(_QWORD *)(v1 + 80);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v2, &type metadata for ComponentRenderEventSignposts, 0, 0);
  v4 = static Array._allocateUninitialized(_:)(0, TupleTypeMetadata2);
  v0[5] = Dictionary.init(dictionaryLiteral:)(v4, v2, &type metadata for ComponentRenderEventSignposts, *(_QWORD *)(v1 + 88));
  return v0;
}

uint64_t ArtworkVideoReportingController.isEnabled.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t ArtworkVideoReportingController.isEnabled.setter(char a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 16, v4, 1, 0);
  *(_BYTE *)(v1 + 16) = a1;
  return result;
}

void *CompoundRequestResponseInvalidation.onInvalidation.modify(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 16, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t BindingRequestResponseInvalidation.onInvalidation.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 24, v3, 0, 0);
  v1 = *(_QWORD *)(v0 + 24);
  sub_10000DCE8(v1, *(_QWORD *)(v0 + 32));
  return v1;
}

uint64_t BindingRequestResponseInvalidation.onInvalidation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  swift_beginAccess(v2 + 24, v8, 1, 0);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return sub_10000DCF8(v5, v6);
}

void *BindingRequestResponseInvalidation.onInvalidation.modify(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 24, a1, 33, 0);
  return &j__swift_endAccess;
}

void ArtworkVideoReportingController.componentWillAppear(at:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  Class isa;
  id v22;
  void (*v23)(char *, uint64_t, uint64_t);
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  char *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  int v41;
  uint64_t v42;
  _QWORD *v43;
  _BYTE v44[24];
  id v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  unsigned __int8 v51;
  _BYTE v52[32];

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(a1);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = v1 + 5;
  swift_beginAccess(v1 + 5, v52, 0, 0);
  v12 = v1[5];
  v13 = *(_QWORD *)(v3 + 88);
  swift_bridgeObjectRetain(v12);
  v42 = v13;
  Dictionary.subscript.getter(&v45, a1, v12, v4, &type metadata for ComponentRenderEventSignposts, v13);
  swift_bridgeObjectRelease(v12);
  v14 = v45;
  if (v45 == (id)1)
  {
    v38 = 0;
    v39 = 0;
    v36 = 0;
    v37 = 0;
    v40 = 0;
    v41 = 4;
LABEL_6:
    v20 = (void *)objc_opt_self(AMSMetrics);
    Date.init()();
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v22 = objc_msgSend(v20, "serverTimeFromDate:", isa);

    v23 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v14 = v22;
    v32 = v7;
    v23(v7, a1, v4);
    v24 = v40;
    v35 = v40;
    v25 = v39;
    v26 = v39;
    v27 = v36;
    v34 = v36;
    v28 = v4;
    v29 = v37;
    v33 = v37;
    v30 = v38;
    v16 = v38;
    v45 = v22;
    v46 = v25;
    v47 = v27;
    v48 = v29;
    v19 = v26;
    v49 = v30;
    v50 = v24;
    v51 = v41;
    swift_beginAccess(v43, v44, 33, 0);
    v31 = type metadata accessor for Dictionary(0, v28, &type metadata for ComponentRenderEventSignposts, v42);
    v17 = v33;
    Dictionary.subscript.setter(&v45, v32, v31);
    v18 = v34;
    swift_endAccess(v44);
    v15 = v35;
    goto LABEL_7;
  }
  v15 = v50;
  if (!v45)
  {
    v39 = v46;
    v40 = v50;
    v41 = v51;
    v37 = v48;
    v38 = v49;
    v36 = v47;
    goto LABEL_6;
  }
  v16 = v49;
  v17 = v48;
  v18 = v47;
  v19 = v46;
LABEL_7:

}

void ArtworkVideoReportingController.placeholderDidAppear(at:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Class isa;
  id v18;
  void (*v19)(char *, uint64_t, uint64_t);
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  int v34;
  id v35;
  uint64_t *v36;
  uint64_t v37;
  _BYTE v38[24];
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  unsigned __int8 v45;
  _BYTE v46[24];
  _BYTE v47[32];

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(a1);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(v1 + 2, v47, 0, 0);
  if (*((_BYTE *)v1 + 16) == 1)
  {
    v12 = v1 + 5;
    swift_beginAccess(v1 + 5, v46, 0, 0);
    v13 = v1[5];
    v14 = *(_QWORD *)(v3 + 88);
    swift_bridgeObjectRetain();
    v37 = v14;
    Dictionary.subscript.getter(&v39, a1, v13, v4, &type metadata for ComponentRenderEventSignposts, v14);
    swift_bridgeObjectRelease(v13);
    v15 = v39;
    if (v39 == (void *)1)
    {
      v36 = v12;
      v15 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v35 = 0;
      v34 = 4;
    }
    else
    {
      if (v40)
      {
        sub_1000B61C8(v39, v40, v41, v42, v43, v44);
        return;
      }
      v36 = v12;
      v31 = v41;
      v32 = v42;
      v33 = v43;
      v35 = v44;
      v34 = v45;
    }
    v16 = (void *)objc_opt_self(AMSMetrics);
    Date.init()(v16);
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v18 = objc_msgSend(v16, "serverTimeFromDate:", isa);

    v19 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v30 = v18;
    v19(v7, a1, v4);
    v20 = v35;
    v27 = v35;
    v29 = v15;
    v21 = v31;
    v28 = v31;
    v22 = v32;
    v23 = v32;
    v24 = v33;
    v25 = v33;
    v39 = v15;
    v40 = v18;
    v41 = v21;
    v42 = v22;
    v43 = v24;
    v44 = v20;
    v45 = v34;
    swift_beginAccess(v36, v38, 33, 0);
    v26 = type metadata accessor for Dictionary(0, v4, &type metadata for ComponentRenderEventSignposts, v37);
    Dictionary.subscript.setter(&v39, v7, v26);
    swift_endAccess(v38);

  }
}

void ArtworkVideoReportingController.videoArtworkWasSelectedForPlayback(at:isReadyForDisplay:)(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  __int128 v19;
  char v20;
  __int128 v21;
  void *v22;
  Class isa;
  id v24;
  void *v25;
  __int128 v26;
  void *v27;
  __int128 v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  int v37;
  _BYTE v38[24];
  void *v39;
  __int128 v40;
  __int128 v41;
  void *v42;
  char v43;
  char v44[24];
  void *v45;
  __int128 v46;
  __int128 v47;
  void *v48;
  char v49;
  char v50[32];

  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 80);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(a1);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(v2 + 2, v50, 0, 0);
  if (*((_BYTE *)v2 + 16) == 1)
  {
    v37 = a2;
    v14 = v2 + 5;
    swift_beginAccess(v2 + 5, v44, 0, 0);
    v15 = v2[5];
    v16 = *(_QWORD *)(v5 + 88);
    swift_bridgeObjectRetain();
    v36 = v16;
    Dictionary.subscript.getter(&v39, a1, v15, v6, &type metadata for ComponentRenderEventSignposts, v16);
    swift_bridgeObjectRelease(v15);
    v17 = v39;
    if (v39 == (void *)1)
    {
      v17 = 0;
      v18 = 0;
      v19 = 0uLL;
      v20 = 4;
      v21 = 0uLL;
    }
    else
    {
      v20 = v43;
      v18 = v42;
      v19 = v40;
      v21 = v41;
    }
    v45 = v17;
    v46 = v19;
    v47 = v21;
    v48 = v18;
    v49 = v20;
    v22 = (void *)objc_opt_self(AMSMetrics);
    Date.init()(v22);
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v24 = objc_msgSend(v22, "serverTimeFromDate:", isa);

    *((_QWORD *)&v46 + 1) = v24;
    sub_1000B4F0C();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
    v25 = v45;
    v26 = v46;
    v28 = v47;
    v27 = v48;
    v39 = v45;
    v40 = v46;
    v41 = v47;
    v42 = v48;
    v43 = v49;
    swift_beginAccess(v14, v38, 33, 0);
    v29 = type metadata accessor for Dictionary(0, v6, &type metadata for ComponentRenderEventSignposts, v36);
    v30 = v25;
    v31 = (id)v26;
    v32 = *((id *)&v26 + 1);
    v33 = (id)v28;
    v34 = *((id *)&v28 + 1);
    v35 = v27;
    Dictionary.subscript.setter(&v39, v9, v29);
    swift_endAccess(v38);

  }
}

void sub_1000B4F0C()
{
  __asm { BR              X10 }
}

uint64_t sub_1000B4F48()
{
  char v0;
  uint64_t v1;
  char v2;
  uint64_t result;
  char v4;

  v2 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C616974726170, 0xE700000000000000, 0x73756F6976657270, 0xEF6E776F6853796CLL, 0);
  result = swift_bridgeObjectRelease(0xE700000000000000);
  if ((v2 & 1) == 0)
  {
    if ((v0 & 1) != 0)
    {
      *(_BYTE *)(v1 + 48) = 0;
      return result;
    }
    if (*(_QWORD *)(v1 + 24))
    {
      v4 = 1;
    }
    else
    {
      if (!*(_QWORD *)(v1 + 8))
        return result;
      v4 = 2;
    }
    *(_BYTE *)(v1 + 48) = v4;
  }
  return result;
}

void ArtworkVideoReportingController.videoArtworkWillBeginLoading(at:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  Class isa;
  id v18;
  char *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t *v38;
  char *v39;
  _BYTE v40[24];
  void *v41;
  void *v42;
  void *v43;
  id v44;
  void *v45;
  void *v46;
  char v47;
  char v48[24];
  char v49[32];

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(a1);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(v1 + 2, v49, 0, 0);
  if (*((_BYTE *)v1 + 16) == 1)
  {
    v38 = v1 + 5;
    v39 = v7;
    swift_beginAccess(v1 + 5, v48, 0, 0);
    v12 = v1[5];
    v13 = *(_QWORD *)(v3 + 88);
    swift_bridgeObjectRetain(v12);
    v35 = v13;
    Dictionary.subscript.getter(&v41, a1, v12, v4, &type metadata for ComponentRenderEventSignposts, v13);
    swift_bridgeObjectRelease(v12);
    v14 = v41;
    v37 = a1;
    if (v41 == (void *)1)
    {
      v36 = 0;
      v34 = 0;
      v15 = 0;
      v33 = 0;
      v32 = 0;
      v14 = 0;
    }
    else
    {
      v36 = v46;
      v15 = v44;
      v34 = v45;
      v33 = v43;
      v32 = v42;
    }
    v16 = (void *)objc_opt_self(AMSMetrics);
    Date.init()();
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v18 = objc_msgSend(v16, "serverTimeFromDate:", isa);

    v19 = v39;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v39, v37, v4);
    v20 = v32;
    v41 = v14;
    v42 = v32;
    v21 = v33;
    v43 = v33;
    v44 = v18;
    v22 = v34;
    v23 = v36;
    v45 = v34;
    v46 = v36;
    v47 = 4;
    swift_beginAccess(v38, v40, 33, 0);
    v24 = type metadata accessor for Dictionary(0, v4, &type metadata for ComponentRenderEventSignposts, v35);
    v25 = v14;
    v26 = v20;
    v27 = v21;
    v28 = v18;
    v29 = v22;
    v30 = v23;
    Dictionary.subscript.setter(&v41, v19, v24);
    swift_endAccess(v40);

  }
}

void ArtworkVideoReportingController.videoArtworkDidCancelLoading(at:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  Class isa;
  id v21;
  id v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  id v32;
  char *v33;
  uint64_t v34;
  int v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t *v42;
  _BYTE v43[24];
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  unsigned __int8 v50;
  char v51[24];
  char v52[24];

  v2 = v1;
  v4 = *v1;
  v5 = *(_QWORD *)(*v1 + 80);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(v2 + 2, v52, 0, 0);
  if (*((_BYTE *)v2 + 16) == 1)
  {
    v42 = v2 + 5;
    swift_beginAccess(v2 + 5, v51, 0, 0);
    v13 = v2[5];
    v14 = *(_QWORD *)(v4 + 88);
    swift_bridgeObjectRetain();
    v41 = v14;
    Dictionary.subscript.getter(&v44, a1, v13, v5, &type metadata for ComponentRenderEventSignposts, v14);
    swift_bridgeObjectRelease(v13);
    v15 = v44;
    if (v44 != (void *)1)
    {
      v29 = v44;
      v35 = v50;
      v32 = v49;
      v34 = a1;
      v16 = v48;
      v30 = v48;
      v33 = v8;
      v17 = v47;
      v28 = v47;
      v31 = v6;
      v19 = v45;
      v18 = v46;
      v27 = (id)objc_opt_self(AMSMetrics);
      v38 = v16;
      v40 = v15;
      v39 = v19;
      v37 = v18;
      v36 = v17;
      Date.init()(v36);
      isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      v21 = objc_msgSend(v27, "serverTimeFromDate:", isa);

      v22 = v21;
      v23 = v33;
      v24 = v34;
      (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v33, v34, v5);
      v44 = v29;
      v45 = v19;
      v46 = v18;
      v47 = v28;
      v48 = v30;
      v49 = v21;
      v50 = v35;
      swift_beginAccess(v42, v43, 33, 0);
      v25 = type metadata accessor for Dictionary(0, v5, &type metadata for ComponentRenderEventSignposts, v41);
      Dictionary.subscript.setter(&v44, v23, v25);
      swift_endAccess(v43);
      sub_1000B58FC(v24);
      _s9MusicCore31ArtworkVideoReportingControllerC05videoC15DidStopPlayback2atyx_tF_0(v24);

    }
  }
}

void ArtworkVideoReportingController.videoArtworkDidStartPlayback(at:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  Class isa;
  id v21;
  id v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  void *v29;
  uint64_t v30;
  id v31;
  void *v32;
  char *v33;
  uint64_t v34;
  int v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t *v42;
  _BYTE v43[24];
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  unsigned __int8 v50;
  char v51[24];
  char v52[24];

  v2 = v1;
  v4 = *v1;
  v5 = *(_QWORD *)(*v1 + 80);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(v2 + 2, v52, 0, 0);
  if (*((_BYTE *)v2 + 16) == 1)
  {
    v42 = v2 + 5;
    swift_beginAccess(v2 + 5, v51, 0, 0);
    v13 = v2[5];
    v14 = *(_QWORD *)(v4 + 88);
    swift_bridgeObjectRetain();
    v41 = v14;
    Dictionary.subscript.getter(&v44, a1, v13, v5, &type metadata for ComponentRenderEventSignposts, v14);
    swift_bridgeObjectRelease(v13);
    v15 = v44;
    if (v44 != (void *)1)
    {
      v35 = v50;
      v16 = v49;
      v32 = v49;
      v31 = v48;
      v34 = a1;
      v17 = v47;
      v28 = v47;
      v33 = v8;
      v18 = v46;
      v29 = v46;
      v30 = v6;
      v19 = v45;
      v27 = (id)objc_opt_self(AMSMetrics);
      v38 = v16;
      v40 = v15;
      v39 = v19;
      v37 = v18;
      v36 = v17;
      Date.init()(v36);
      isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      v21 = objc_msgSend(v27, "serverTimeFromDate:", isa);

      v22 = v21;
      v23 = v33;
      v24 = v34;
      (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v33, v34, v5);
      v44 = v15;
      v45 = v19;
      v46 = v29;
      v47 = v28;
      v48 = v21;
      v49 = v32;
      v50 = v35;
      swift_beginAccess(v42, v43, 33, 0);
      v25 = type metadata accessor for Dictionary(0, v5, &type metadata for ComponentRenderEventSignposts, v41);
      Dictionary.subscript.setter(&v44, v23, v25);
      swift_endAccess(v43);
      sub_1000B58FC(v24);

    }
  }
}

void sub_1000B58FC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  uint64_t (*v17)(uint64_t, __n128);
  uint64_t v18;
  __n128 v19;
  NSObject *v20;
  void *v21;
  void *v22;
  char v23;
  char v24;
  NSObject *v25;
  void *v26;
  void *v27;
  id v28;
  NSObject *v29;
  NSObject *v30;
  id v31;
  id v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  NSObject *v38;
  id v39;
  id v40;
  NSObject *v41;
  id v42;
  NSObject *v43;
  id v44;
  id v45;
  NSObject *v46;
  id v47;
  NSObject *v48;
  NSObject *v49;
  os_log_type_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  char *v56;
  char *v57;
  char *v58;
  NSObject *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  os_log_t v65;
  uint64_t v66;
  id v67;
  NSObject *v68;
  NSObject *v69;
  id v70;
  NSObject *v71;
  NSObject *v72;
  id v73;
  id v74;
  NSObject *v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t, uint64_t);
  os_log_t v79;
  uint64_t v80;
  NSObject *v81;
  NSObject *v82;
  NSObject *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  void *v89;
  void *v90;
  id v91;
  int v92;
  uint64_t v93;
  char v94[24];
  char v95[24];
  char v96[24];
  NSObject *v97;
  void *v98;
  void *v99;
  NSObject *v100;
  void *v101;
  void *v102;
  NSObject *v103;
  void *v104;
  id v105;
  char v106;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(a1);
  v8 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v76 - v9;
  swift_beginAccess(v1 + 2, v96, 0, 0);
  if (*((_BYTE *)v1 + 16) == 1)
  {
    swift_beginAccess(v1 + 5, v95, 0, 0);
    v11 = v1[5];
    v12 = *(_QWORD *)(v3 + 88);
    swift_bridgeObjectRetain();
    Dictionary.subscript.getter(&v97, a1, v11, v4, &type metadata for ComponentRenderEventSignposts, v12);
    swift_bridgeObjectRelease(v11);
    v13 = v97;
    if (v97 != 1)
    {
      v87 = v8;
      v88 = v10;
      v15 = v98;
      v14 = v99;
      v16 = v100;
      v90 = v101;
      v91 = v102;
      v92 = v103;
      swift_beginAccess(v1 + 3, v94, 0, 0);
      v17 = (uint64_t (*)(_QWORD, __n128))v1[3];
      if (v17)
      {
        v86 = v5;
        v89 = v14;
        v18 = v1[4];
        v19 = swift_retain(v18);
        v20 = v17(a1, v19);
        v22 = v21;
        v24 = v23;
        sub_10000DCF8((uint64_t)v17, v18);
        if (v16)
        {
          v97 = v20;
          v98 = v22;
          v85 = (uint64_t)v22;
          LOBYTE(v99) = v24;
          v25 = v13;
          v100 = v13;
          v101 = v15;
          v14 = v89;
          v102 = v89;
          v103 = v16;
          v26 = v90;
          v104 = v90;
          v105 = v91;
          v106 = v92;
          if (v90)
          {
            v79 = v20;
            v81 = v91;
            v27 = v15;
            v28 = v26;
            v83 = v16;
            v29 = v16;
            v30 = v13;
            v84 = v27;
            v31 = v27;
            v32 = v14;
            objc_msgSend(v28, "doubleValue");
            v34 = v33;
            -[NSObject doubleValue](v29, "doubleValue");
            v36 = v35;
            v82 = v25;
            if (qword_1004B8C28 != -1)
              swift_once(&qword_1004B8C28, sub_10010FE5C);
            v37 = type metadata accessor for Logger(0);
            v80 = sub_100039D34(v37, (uint64_t)static Logger.motion);
            v78 = *(void (**)(_QWORD, _QWORD, _QWORD))(v86 + 16);
            v78(v88, a1, v4);
            swift_bridgeObjectRetain_n(v85, 2);
            v38 = v30;
            v39 = v31;
            v40 = v32;
            v41 = v29;
            v42 = v28;
            v43 = v81;
            v81 = v38;
            v44 = v39;
            v45 = v40;
            v46 = v41;
            v47 = v42;
            v48 = v43;
            v49 = Logger.logObject.getter(v48);
            v50 = static os_log_type_t.debug.getter();
            v51 = v50;
            if (os_log_type_enabled(v49, v50))
            {
              v52 = swift_slowAlloc(32, -1);
              LODWORD(v80) = v51;
              v53 = v52;
              v77 = swift_slowAlloc(64, -1);
              v93 = v77;
              *(_DWORD *)v53 = 136315650;
              v54 = v85;
              swift_bridgeObjectRetain();
              v55 = v45;
              v56 = (char *)Optional<A>.description.getter(v79, v54);
              v79 = v49;
              v58 = v57;
              swift_bridgeObjectRelease(v54);
              *(_QWORD *)(v53 + 4) = sub_1000393D0(v56, v58, &v93);

              v59 = v81;
              swift_bridgeObjectRelease_n(v54, 2);
              swift_bridgeObjectRelease(v58);
              *(_WORD *)(v53 + 12) = 2080;
              v60 = v87;
              v61 = v88;
              v78(v87, v88, v4);
              v62 = (char *)String.init<A>(describing:)(v60, v4);
              v64 = v63;
              *(_QWORD *)(v53 + 14) = sub_1000393D0(v62, v63, &v93);
              swift_bridgeObjectRelease(v64);
              (*(void (**)(char *, uint64_t))(v86 + 8))(v61, v4);
              *(_WORD *)(v53 + 22) = 2048;
              *(double *)(v53 + 24) = v34 - v36;
              v65 = v79;
              _os_log_impl((void *)&_mh_execute_header, v79, (os_log_type_t)v80, "Item with id: %s at index: %s loaded enough data to start playback in %f ms.", (uint8_t *)v53, 0x20u);
              v66 = v77;
              swift_arrayDestroy(v77, 2, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v66, -1, -1);
              swift_slowDealloc(v53, -1, -1);

            }
            else
            {

              v75 = v81;
              v54 = v85;
              swift_bridgeObjectRelease_n(v85, 2);
              (*(void (**)(char *, uint64_t))(v86 + 8))(v88, v4);

            }
            v15 = v84;
            v14 = v89;
            v26 = v90;
            v68 = v83;
            v69 = v82;
          }
          else
          {
            v70 = v91;
            v71 = v16;
            v72 = v13;
            v73 = v15;
            v74 = v14;
            v68 = v16;
            v69 = v13;
            v54 = v85;
          }
          if (qword_1004B8AE8 != -1)
            swift_once(&qword_1004B8AE8, sub_1000BF680);
          MetricsReportingController.recordComponentRenderEvent(_:)((uint64_t)&v97);

          swift_bridgeObjectRelease(v54);
          v67 = v91;

        }
        else
        {
          swift_bridgeObjectRelease(v22);
          v68 = 0;
          v14 = v89;
          v26 = v90;
          v67 = v91;
          v69 = v13;
        }
      }
      else
      {
        v26 = v90;
        v67 = v91;
        v68 = v16;
        v69 = v13;
      }
      sub_1000B61C8(v69, v15, v14, v68, v26, v67);
    }
  }
}

void _s9MusicCore31ArtworkVideoReportingControllerC05videoC15DidStopPlayback2atyx_tF_0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  char v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  _BYTE v24[24];
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  char v31;
  char v32[24];

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(a1);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v1 + 5;
  swift_beginAccess(v1 + 5, v32, 0, 0);
  v9 = v1[5];
  v10 = *(_QWORD *)(v3 + 88);
  swift_bridgeObjectRetain(v9);
  Dictionary.subscript.getter(&v25, a1, v9, v4, &type metadata for ComponentRenderEventSignposts, v10);
  swift_bridgeObjectRelease(v9);
  v11 = v25;
  if (v25 != (void *)1)
  {
    v22 = v26;
    v23 = v28;
    v13 = v29;
    v12 = v30;
    v14 = v31;

    if (v13)
    {

      v14 = 3;
    }

    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
    v16 = v22;
    v15 = v23;
    v25 = v11;
    v26 = v22;
    v27 = 0;
    v28 = v23;
    v29 = 0;
    v30 = 0;
    v31 = v14;
    swift_beginAccess(v8, v24, 33, 0);
    v17 = type metadata accessor for Dictionary(0, v4, &type metadata for ComponentRenderEventSignposts, v10);
    v18 = v11;
    v19 = v16;
    v20 = v15;
    Dictionary.subscript.setter(&v25, v7, v17);
    swift_endAccess(v24);

  }
}

uint64_t *ArtworkVideoReportingController.deinit()
{
  uint64_t *v0;

  sub_10000DCF8(v0[3], v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  return v0;
}

uint64_t ArtworkVideoReportingController.__deallocating_deinit()
{
  uint64_t *v0;

  sub_10000DCF8(v0[3], v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocClassInstance(v0, 48, 7);
}

void sub_1000B61C8(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  if (a1 != (void *)1)
  {

  }
}

uint64_t sub_1000B6228(uint64_t a1)
{
  _QWORD v2[3];

  v2[0] = &unk_1003CBE60;
  v2[1] = &unk_1003CBE78;
  v2[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_initClassMetadata2(a1, 0, 3, v2, a1 + 96);
}

uint64_t type metadata accessor for ArtworkVideoReportingController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100051E10(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ArtworkVideoReportingController);
}

void destroy for ComponentRenderEventSignposts(id *a1)
{

}

uint64_t initializeWithCopy for ComponentRenderEventSignposts(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(void **)(a2 + 16);
  v6 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(void **)(a2 + 32);
  v8 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v9 = v3;
  v10 = v4;
  v11 = v5;
  v12 = v6;
  v13 = v7;
  v14 = v8;
  return a1;
}

uint64_t assignWithCopy for ComponentRenderEventSignposts(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v9 = v8;

  v10 = *(void **)(a1 + 16);
  v11 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  v12 = v11;

  v13 = *(void **)(a1 + 24);
  v14 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v14;
  v15 = v14;

  v16 = *(void **)(a1 + 32);
  v17 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v17;
  v18 = v17;

  v19 = *(void **)(a1 + 40);
  v20 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v20;
  v21 = v20;

  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

__n128 initializeWithTake for ComponentRenderEventSignposts(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ComponentRenderEventSignposts(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  v6 = *(void **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);

  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for ComponentRenderEventSignposts(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 49))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ComponentRenderEventSignposts(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ComponentRenderEventSignposts()
{
  return &type metadata for ComponentRenderEventSignposts;
}

double CarNowPlayingMetrics.Data.timePlayed.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void CarNowPlayingMetrics.Data.timePlayed.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t ApplicationCapabilities.subscriptionCapabilities.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t CarNowPlayingMetrics.Data.tracksPlayed.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

CFRange (__swiftcall *UIView.Shadow.opacity.modify())(__C::_NSRange)
{
  return CFRange.init(_:);
}

double UIView.Shadow.radius.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void UIView.Shadow.radius.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t ApplicationCapabilities.allowedServices.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
}

uint64_t Library.Menu.Revision.selected.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 24));
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

CFRange (__swiftcall *UIView.Shadow.offset.modify())(__C::_NSRange)
{
  return CFRange.init(_:);
}

uint64_t QRCode.errorCorrectionLevel.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t CarNowPlayingMetrics.Data.sharedSessionMaxParticipants.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

CFRange (__swiftcall *Library.Menu.Request.excludedIdentifiers.modify())(__C::_NSRange)
{
  return CFRange.init(_:);
}

uint64_t CarNowPlayingMetrics.Data.init(timePlayed:tracksPlayed:rangeStartTime:sharedSessionIds:sharedSessionMaxParticipants:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  *(double *)a4 = a5;
  *(_QWORD *)(a4 + 8) = result;
  *(double *)(a4 + 16) = a6;
  *(_QWORD *)(a4 + 24) = a2;
  *(_QWORD *)(a4 + 32) = a3;
  return result;
}

uint64_t sub_1000B6600(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000B6638 + 4 * byte_1003CBEB0[a1]))(0x79616C50656D6974, 0xEA00000000006465);
}

uint64_t sub_1000B6638()
{
  return 0x6C50736B63617274;
}

uint64_t sub_1000B6658()
{
  return 0x61745365676E6172;
}

unint64_t sub_1000B667C()
{
  return 0xD000000000000010;
}

unint64_t sub_1000B6698()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_1000B66B8()
{
  unsigned __int8 *v0;

  return sub_1000B6600(*v0);
}

uint64_t sub_1000B66C0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000B7CD0(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000B66E4(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_1000B66F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B6908();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B6718(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B6908();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CarNowPlayingMetrics.Data.encode(to:)(_QWORD *a1)
{
  double *v1;
  uint64_t v2;
  double *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;

  v3 = v1;
  v5 = sub_1000057B4(&qword_1004BC6E8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_1000096A0(a1, v9);
  v11 = sub_1000B6908();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CarNowPlayingMetrics.Data.CodingKeys, &type metadata for CarNowPlayingMetrics.Data.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v25 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v25, v5, v12);
  if (!v2)
  {
    v13 = *((_QWORD *)v3 + 1);
    v24 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, &v24, v5);
    v14 = v3[2];
    v23 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(&v23, v5, v14);
    v22 = *((_QWORD *)v3 + 3);
    v21 = 3;
    v15 = sub_1000057B4(&qword_1004BC6F8);
    v16 = sub_1000B8B68(&qword_1004BC700, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> Set<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v5, v15, v16);
    v17 = *((_QWORD *)v3 + 4);
    v20 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v17, &v20, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1000B6908()
{
  unint64_t result;

  result = qword_1004BC6F0;
  if (!qword_1004BC6F0)
  {
    result = swift_getWitnessTable(&unk_1003CC090, &type metadata for CarNowPlayingMetrics.Data.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004BC6F0);
  }
  return result;
}

double CarNowPlayingMetrics.Data.init(from:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_1000B7F28(a1, v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1000B6990(_QWORD *a1)
{
  return CarNowPlayingMetrics.Data.encode(to:)(a1);
}

uint64_t static CarNowPlayingMetrics.persistedMetricsData(for:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  _BYTE v4[40];

  sub_1000B8170(a1 & 1, (uint64_t)v4);
  return sub_10000FD10((uint64_t)v4, a2, &qword_1004BC708);
}

uint64_t Logger.carMetrics.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1004B8A40 != -1)
    swift_once(&qword_1004B8A40, sub_1000B7BB8);
  v0 = type metadata accessor for Logger(0);
  return sub_100039D34(v0, (uint64_t)static Logger.carMetrics);
}

void static CarNowPlayingMetrics.storeMetricsData(_:for:)(uint64_t a1, char a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  unint64_t v7;
  NSString v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  NSData v13;
  unint64_t v14;
  NSString v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v2 = a2 & 1;
  sub_10000FD10(a1, (uint64_t)&v18, &qword_1004BC708);
  if (*((_QWORD *)&v19 + 1))
  {
    v21 = v18;
    v22 = v19;
    v23 = v20;
    v3 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
    v4 = JSONEncoder.init()();
    v16[0] = v21;
    v16[1] = v22;
    v17 = v23;
    v5 = sub_1000B8514();
    v9 = dispatch thunk of JSONEncoder.encode<A>(_:)(v16, &type metadata for CarNowPlayingMetrics.Data, v5);
    v11 = v10;
    swift_release(v4);
    v12 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v13.super.isa = Data._bridgeToObjectiveC()().super.isa;
    if (v2)
      v14 = 0x80000001003A8800;
    else
      v14 = 0x80000001003A8820;
    v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v14);
    objc_msgSend(v12, "setValue:forKey:", v13.super.isa, v15);

    sub_10000FC28(v9, v11);
  }
  else
  {
    v6 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    if (v2)
      v7 = 0x80000001003A8800;
    else
      v7 = 0x80000001003A8820;
    v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
    objc_msgSend(v6, "setValue:forKey:", 0, v8);

  }
}

void sub_1000B6DEC(char a1)
{
  uint64_t *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  double v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  double v39;
  uint64_t (*v40)(char *, uint64_t);
  uint64_t v41;
  double v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  os_log_type_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  _BYTE v80[40];
  __int128 v81;
  double v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;

  v76 = *v1;
  v2 = a1 & 1;
  v3 = sub_1000057B4((uint64_t *)&unk_1004BFBC0);
  __chkstk_darwin(v3);
  v5 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Calendar(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v75 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v72 - v14;
  if (qword_1004B8A40 != -1)
    swift_once(&qword_1004B8A40, sub_1000B7BB8);
  v16 = type metadata accessor for Logger(0);
  v77 = sub_100039D34(v16, (uint64_t)static Logger.carMetrics);
  v17 = Logger.logObject.getter(v77);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(12, -1);
    v72 = v9;
    v20 = v19;
    v21 = swift_slowAlloc(32, -1);
    v74 = v6;
    v73 = v5;
    v22 = v11;
    v23 = v21;
    *(_QWORD *)&v81 = v21;
    *(_DWORD *)v20 = 136446210;
    v80[0] = v2;
    v24 = (char *)String.init<A>(describing:)(v80, &type metadata for CarNowPlayingMetrics.EventType);
    v25 = v10;
    v26 = v7;
    v27 = v2;
    v29 = v28;
    *(_QWORD *)(v20 + 4) = sub_1000393D0(v24, v28, (uint64_t *)&v81);
    v30 = v29;
    v2 = v27;
    v7 = v26;
    v10 = v25;
    swift_bridgeObjectRelease(v30);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Reporting %{public}s playsSummary event if needed", (uint8_t *)v20, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    v31 = v23;
    v11 = v22;
    v5 = v73;
    v6 = v74;
    swift_slowDealloc(v31, -1, -1);
    v32 = v20;
    v9 = v72;
    swift_slowDealloc(v32, -1, -1);
  }

  if (qword_1004B8AE8 != -1)
    swift_once(&qword_1004B8AE8, sub_1000BF680);
  *(double *)&v33 = COERCE_DOUBLE(sub_1000C3EFC());
  if ((v34 & 1) != 0)
  {
    if (qword_1004B8A38 != -1)
      swift_once(&qword_1004B8A38, sub_1000B7BA4);
    v35 = *(double *)&qword_1004BC6E0;
  }
  else
  {
    v35 = *(double *)&v33;
  }
  sub_1000B8170(v2, (uint64_t)v80);
  v36 = sub_10000FD10((uint64_t)v80, (uint64_t)&v81, &qword_1004BC708);
  if ((_QWORD)v83)
  {
    v37 = v82;
    v84 = v83;
    v85 = v81;
    v38 = static Date.now.getter(v36);
    v39 = Date.timeIntervalSince1970.getter(v38);
    v40 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
    v41 = v40(v15, v10);
    v42 = (v39 - v37) * 1000.0;
    if (v35 < v42)
    {
      v43 = static Date.now.getter(v41);
      v44 = Date.timeIntervalSince1970.getter(v43);
      v45 = v40(v15, v10);
      v46 = static Calendar.current.getter(v45);
      v47 = v75;
      static Date.now.getter(v46);
      Calendar.startOfDay(for:)(v47);
      v40(v47, v10);
      v48 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      v49 = Date.timeIntervalSince1970.getter(v48);
      v40(v15, v10);
      v50 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v5, 1, 1, v50);
      type metadata accessor for MainActor(0);
      v52 = static MainActor.shared.getter(v51);
      v53 = swift_allocObject(&unk_1004707E0, 104, 7);
      *(_QWORD *)(v53 + 16) = v52;
      *(_QWORD *)(v53 + 24) = &protocol witness table for MainActor;
      *(_OWORD *)(v53 + 32) = v85;
      *(double *)(v53 + 48) = v37;
      *(_OWORD *)(v53 + 56) = v84;
      *(double *)(v53 + 72) = v49;
      *(_BYTE *)(v53 + 80) = v2;
      *(double *)(v53 + 88) = v44;
      *(_QWORD *)(v53 + 96) = v76;
      v54 = sub_1000E6084((uint64_t)v5, (uint64_t)&unk_1004BC7E0, v53);
      swift_release(v54);
      return;
    }
    v65 = v2;
    v66 = sub_1000B89DC((uint64_t)v80);
    v55 = Logger.logObject.getter(v66);
    v67 = static os_log_type_t.default.getter(v55);
    if (os_log_type_enabled(v55, v67))
    {
      v57 = swift_slowAlloc(32, -1);
      v68 = swift_slowAlloc(32, -1);
      v79 = v68;
      *(_DWORD *)v57 = 136446722;
      v78 = v65;
      v69 = (char *)String.init<A>(describing:)(&v78, &type metadata for CarNowPlayingMetrics.EventType);
      v71 = v70;
      *(_QWORD *)(v57 + 4) = sub_1000393D0(v69, v70, &v79);
      swift_bridgeObjectRelease(v71);
      *(_WORD *)(v57 + 12) = 2050;
      *(double *)(v57 + 14) = v42;
      *(_WORD *)(v57 + 22) = 2050;
      *(double *)(v57 + 24) = v35;
      _os_log_impl((void *)&_mh_execute_header, v55, v67, "❌ Failed to configure %{public}s playsSummary event: range=%{public}f ms isn't greater than post frequency=%{public}f ms", (uint8_t *)v57, 0x20u);
      swift_arrayDestroy(v68, 1, (char *)&type metadata for Any + 8);
      v64 = v68;
      goto LABEL_19;
    }
  }
  else
  {
    v55 = Logger.logObject.getter(v36);
    v56 = static os_log_type_t.default.getter(v55);
    if (os_log_type_enabled(v55, v56))
    {
      v57 = swift_slowAlloc(12, -1);
      v58 = swift_slowAlloc(32, -1);
      v59 = v2;
      v60 = v58;
      *(_QWORD *)&v85 = v58;
      *(_DWORD *)v57 = 136446210;
      LOBYTE(v84) = v59;
      v61 = (char *)String.init<A>(describing:)(&v84, &type metadata for CarNowPlayingMetrics.EventType);
      v63 = v62;
      *(_QWORD *)(v57 + 4) = sub_1000393D0(v61, v62, (uint64_t *)&v85);
      swift_bridgeObjectRelease(v63);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "❌ Failed to configure %{public}s playsSummary event: no persisted metrics data", (uint8_t *)v57, 0xCu);
      swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
      v64 = v60;
LABEL_19:
      swift_slowDealloc(v64, -1, -1);
      swift_slowDealloc(v57, -1, -1);
    }
  }

}

uint64_t sub_1000B746C(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)(v7 + 512) = a7;
  *(double *)(v7 + 488) = a1;
  *(double *)(v7 + 496) = a2;
  *(_QWORD *)(v7 + 480) = a6;
  v8 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v7 + 504) = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000B74E0, v10, v11);
}

uint64_t sub_1000B74E0()
{
  uint64_t v0;
  char v1;
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  swift_release(*(_QWORD *)(v0 + 504));
  if (qword_1004B8AE8 != -1)
    swift_once(&qword_1004B8AE8, sub_1000BF680);
  v1 = *(_BYTE *)(v0 + 512);
  v3 = *(double *)(v0 + 488);
  v2 = *(double *)(v0 + 496);
  v4 = *(_QWORD *)(v0 + 480);
  v5 = sub_1000057B4(&qword_1004C2C50);
  inited = swift_initStackObject(v5, v0 + 16);
  v7 = (_QWORD *)inited;
  *(_OWORD *)(inited + 16) = xmmword_1003C6CC0;
  strcpy((char *)(inited + 32), "totalDuration");
  *(_WORD *)(inited + 46) = -4864;
  *(double *)(inited + 48) = round(*(double *)v4 * 1000.0);
  *(_QWORD *)(inited + 72) = &type metadata for Double;
  *(_QWORD *)(inited + 80) = 0x6E756F4379616C70;
  *(_QWORD *)(inited + 88) = 0xE900000000000074;
  *(_QWORD *)(inited + 96) = *(_QWORD *)(v4 + 8);
  *(_QWORD *)(inited + 120) = &type metadata for Int;
  *(_QWORD *)(inited + 128) = 0x6D6954746E657665;
  *(_QWORD *)(inited + 136) = 0xE900000000000065;
  *(double *)(inited + 144) = round(v3 * 1000.0);
  *(_QWORD *)(inited + 168) = &type metadata for Double;
  *(_QWORD *)(inited + 176) = 0x707954746E657665;
  *(_QWORD *)(inited + 184) = 0xE900000000000065;
  strcpy((char *)(inited + 192), "playsSummary");
  *(_BYTE *)(inited + 205) = 0;
  *(_WORD *)(inited + 206) = -5120;
  *(_QWORD *)(inited + 216) = &type metadata for String;
  *(_QWORD *)(inited + 224) = 0x6F436E6F69746361;
  v8 = v1 & 1;
  v9 = 0x746F6F7465756C62;
  if (!v8)
    v9 = 0x79616C50726143;
  v10 = 0xE900000000000068;
  if (!v8)
    v10 = 0xE700000000000000;
  *(_QWORD *)(inited + 232) = 0xED0000747865746ELL;
  *(_QWORD *)(inited + 240) = v9;
  *(_QWORD *)(inited + 248) = v10;
  *(_QWORD *)(inited + 264) = &type metadata for String;
  strcpy((char *)(inited + 272), "rangeStartTime");
  *(_BYTE *)(inited + 287) = -18;
  *(double *)(inited + 288) = round(*(double *)(v4 + 16) * 1000.0);
  *(_QWORD *)(inited + 312) = &type metadata for Double;
  strcpy((char *)(inited + 320), "rangeEndTime");
  *(_BYTE *)(inited + 333) = 0;
  *(_WORD *)(inited + 334) = -5120;
  *(double *)(inited + 336) = round(v2 * 1000.0);
  *(_QWORD *)(inited + 360) = &type metadata for Double;
  *(_QWORD *)(inited + 368) = 0xD000000000000013;
  *(_QWORD *)(inited + 376) = 0x80000001003A88D0;
  *(_QWORD *)(inited + 384) = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 16);
  *(_QWORD *)(inited + 408) = &type metadata for Int;
  *(_QWORD *)(inited + 416) = 0xD000000000000018;
  *(_QWORD *)(inited + 424) = 0x80000001003A88F0;
  v11 = sub_1000C5CE4(*(_QWORD *)(v4 + 32));
  v7[57] = &type metadata for String;
  v7[54] = v11;
  v7[55] = v12;
  v13 = sub_1000B8CE8((uint64_t)v7);
  v14 = swift_allocObject(&unk_100470808, 17, 7);
  *(_BYTE *)(v14 + 16) = v8;
  MetricsReportingController.recordCarPlayCustomEvent(with:properties:shouldSuppressUserInfo:completionHandler:)(0xD000000000000014, 0x80000001003A88B0, v13, 0, (uint64_t)sub_1000B8ADC, v14);
  swift_release(v14);
  swift_bridgeObjectRelease(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000B77F4(uint64_t a1, char a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  id v25;
  unint64_t v26;
  NSString v27;
  NSObject *oslog;
  uint64_t v29;
  uint64_t v30;

  v2 = a2 & 1;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1004B8A40 != -1)
      swift_once(&qword_1004B8A40, sub_1000B7BB8);
    v4 = type metadata accessor for Logger(0);
    sub_100039D34(v4, (uint64_t)static Logger.carMetrics);
    swift_errorRetain(a1);
    v5 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v5);
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      v7 = swift_slowAlloc(22, -1);
      v8 = swift_slowAlloc(64, -1);
      v30 = v8;
      *(_DWORD *)v7 = 136446466;
      LOBYTE(v29) = v2;
      v9 = (char *)String.init<A>(describing:)(&v29, &type metadata for CarNowPlayingMetrics.EventType);
      v11 = v10;
      *(_QWORD *)(v7 + 4) = sub_1000393D0(v9, v10, &v30);
      swift_bridgeObjectRelease(v11);
      *(_WORD *)(v7 + 12) = 2082;
      v29 = a1;
      swift_errorRetain(a1);
      v12 = sub_1000057B4((uint64_t *)&unk_1004BD690);
      v13 = (char *)String.init<A>(describing:)(&v29, v12);
      v15 = v14;
      *(_QWORD *)(v7 + 14) = sub_1000393D0(v13, v14, &v30);
      swift_bridgeObjectRelease(v15);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v6, "❌ Failed to report %{public}s playsSummary event with error=%{public}s", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  else
  {
    if (qword_1004B8A40 != -1)
      swift_once(&qword_1004B8A40, sub_1000B7BB8);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_100039D34(v16, (uint64_t)static Logger.carMetrics);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v30 = v21;
      *(_DWORD *)v20 = 136446210;
      LOBYTE(v29) = v2;
      v22 = (char *)String.init<A>(describing:)(&v29, &type metadata for CarNowPlayingMetrics.EventType);
      v24 = v23;
      *(_QWORD *)(v20 + 4) = sub_1000393D0(v22, v23, &v30);
      swift_bridgeObjectRelease(v24);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "✅ Reported %{public}s playsSummary event", (uint8_t *)v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }

    v25 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    if (v2)
      v26 = 0x80000001003A8800;
    else
      v26 = 0x80000001003A8820;
    v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v26);
    objc_msgSend(v25, "setValue:forKey:", 0, v27);

  }
}

void sub_1000B7BA4()
{
  qword_1004BC6E0 = 0x4194997000000000;
}

uint64_t sub_1000B7BB8()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10004FD4C(v0, static Logger.carMetrics);
  sub_100039D34(v0, (uint64_t)static Logger.carMetrics);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001003A7200, 0x697274654D726143, 0xEA00000000007363);
}

uint64_t static Logger.carMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1004B8A40 != -1)
    swift_once(&qword_1004B8A40, sub_1000B7BB8);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100039D34(v2, (uint64_t)static Logger.carMetrics);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

void sub_1000B7CA0(double **a1, uint64_t a2, uint64_t a3, double (*a4)(void))
{
  double v5;
  double *v6;

  v5 = a4();
  v6 = *a1;
  *v6 = v5;
  *a1 = v6 + 1;
}

uint64_t sub_1000B7CD0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x79616C50656D6974 && a2 == 0xEA00000000006465)
  {
    v5 = 0xEA00000000006465;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79616C50656D6974, 0xEA00000000006465, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6C50736B63617274 && a2 == 0xEC00000064657961)
  {
    v7 = 0xEC00000064657961;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C50736B63617274, 0xEC00000064657961, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x61745365676E6172 && a2 == 0xEE00656D69547472)
  {
    v8 = 0xEE00656D69547472;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61745365676E6172, 0xEE00656D69547472, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000010)
  {
    v9 = 0x80000001003A8870;
    if (a2 == 0x80000001003A8870)
      goto LABEL_25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001003A8870, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0xD00000000000001CLL && a2 == 0x80000001003A8890)
  {
    swift_bridgeObjectRelease(0x80000001003A8890);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x80000001003A8890, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1000B7F28@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;

  v5 = sub_1000057B4(&qword_1004BC7F0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_1000096A0(a1, v9);
  v11 = sub_1000B6908();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CarNowPlayingMetrics.Data.CodingKeys, &type metadata for CarNowPlayingMetrics.Data.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_10000970C(a1);
  v28 = 0;
  KeyedDecodingContainer.decode(_:forKey:)(&v28, v5);
  v13 = v12;
  v27 = 1;
  v14 = KeyedDecodingContainer.decode(_:forKey:)(&v27, v5);
  v26 = 2;
  KeyedDecodingContainer.decode(_:forKey:)(&v26, v5);
  v16 = v15;
  v17 = sub_1000057B4(&qword_1004BC6F8);
  v25 = 3;
  v18 = sub_1000B8B68(&qword_1004BC7F8, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> Set<A>);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v23, v17, &v25, v5, v17, v18);
  v19 = v23;
  v24 = 4;
  swift_bridgeObjectRetain();
  v20 = KeyedDecodingContainer.decode(_:forKey:)(&v24, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_10000970C(a1);
  result = swift_bridgeObjectRelease(v19);
  *a2 = v13;
  a2[1] = v14;
  a2[2] = v16;
  a2[3] = v19;
  a2[4] = v20;
  return result;
}

void sub_1000B8170(char a1@<W0>, uint64_t a2@<X8>)
{
  id v4;
  unint64_t v5;
  NSString v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  _OWORD v22[2];

  v4 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  if ((a1 & 1) != 0)
    v5 = 0x80000001003A8800;
  else
    v5 = 0x80000001003A8820;
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  v7 = objc_msgSend(v4, "valueForKey:", v6);

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)(v7);
    swift_unknownObjectRelease(v7);
  }
  else
  {
    memset(v22, 0, sizeof(v22));
  }
  sub_10000FD10((uint64_t)v22, (uint64_t)&v17, &qword_1004BE030);
  if (!v19)
  {
    sub_1000B8AE4((uint64_t)&v17);
    goto LABEL_11;
  }
  if ((swift_dynamicCast(v21, &v17, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) == 0)
  {
LABEL_11:
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v13 = 0uLL;
    goto LABEL_12;
  }
  v9 = v21[0];
  v8 = v21[1];
  v10 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v11 = JSONDecoder.init()();
  v12 = sub_1000B8B24();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for CarNowPlayingMetrics.Data, v9, v8, &type metadata for CarNowPlayingMetrics.Data, v12);
  sub_10000FC28(v9, v8);
  swift_release(v11);
  v13 = v17;
  v14 = v18;
  v15 = v19;
  v16 = v20;
LABEL_12:
  *(_OWORD *)a2 = v13;
  *(_QWORD *)(a2 + 16) = v14;
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)(a2 + 32) = v16;
}

unint64_t sub_1000B8514()
{
  unint64_t result;

  result = qword_1004BC710;
  if (!qword_1004BC710)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CarNowPlayingMetrics.Data, &type metadata for CarNowPlayingMetrics.Data);
    atomic_store(result, (unint64_t *)&qword_1004BC710);
  }
  return result;
}

unint64_t sub_1000B855C()
{
  unint64_t result;

  result = qword_1004BC718;
  if (!qword_1004BC718)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CarNowPlayingMetrics.EventType, &type metadata for CarNowPlayingMetrics.EventType);
    atomic_store(result, (unint64_t *)&qword_1004BC718);
  }
  return result;
}

ValueMetadata *type metadata accessor for CarNowPlayingMetrics()
{
  return &type metadata for CarNowPlayingMetrics;
}

uint64_t storeEnumTagSinglePayload for CarNowPlayingMetrics.EventType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000B85FC + 4 * byte_1003CBEBA[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000B8630 + 4 * byte_1003CBEB5[v4]))();
}

uint64_t sub_1000B8630(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B8638(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000B8640);
  return result;
}

uint64_t sub_1000B864C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000B8654);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000B8658(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B8660(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CarNowPlayingMetrics.EventType()
{
  return &type metadata for CarNowPlayingMetrics.EventType;
}

uint64_t destroy for CarNowPlayingMetrics.Data(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for CarNowPlayingMetrics.Data(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *assignWithCopy for CarNowPlayingMetrics.Data(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = a2[3];
  v5 = a1[3];
  a1[3] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[4] = a2[4];
  return a1;
}

_QWORD *assignWithTake for CarNowPlayingMetrics.Data(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRelease(v4);
  a1[4] = a2[4];
  return a1;
}

uint64_t getEnumTagSinglePayload for CarNowPlayingMetrics.Data(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CarNowPlayingMetrics.Data(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CarNowPlayingMetrics.Data()
{
  return &type metadata for CarNowPlayingMetrics.Data;
}

uint64_t type metadata accessor for CarNowPlayingMetrics.Reporter()
{
  return objc_opt_self(_TtCO9MusicCore20CarNowPlayingMetrics8Reporter);
}

uint64_t storeEnumTagSinglePayload for CarNowPlayingMetrics.Data.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1000B8884 + 4 * byte_1003CBEC4[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000B88B8 + 4 * byte_1003CBEBF[v4]))();
}

uint64_t sub_1000B88B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B88C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000B88C8);
  return result;
}

uint64_t sub_1000B88D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000B88DCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000B88E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B88E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CarNowPlayingMetrics.Data.CodingKeys()
{
  return &type metadata for CarNowPlayingMetrics.Data.CodingKeys;
}

unint64_t sub_1000B8908()
{
  unint64_t result;

  result = qword_1004BC7C0;
  if (!qword_1004BC7C0)
  {
    result = swift_getWitnessTable(&unk_1003CC068, &type metadata for CarNowPlayingMetrics.Data.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004BC7C0);
  }
  return result;
}

unint64_t sub_1000B8950()
{
  unint64_t result;

  result = qword_1004BC7C8;
  if (!qword_1004BC7C8)
  {
    result = swift_getWitnessTable(&unk_1003CBFD8, &type metadata for CarNowPlayingMetrics.Data.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004BC7C8);
  }
  return result;
}

unint64_t sub_1000B8998()
{
  unint64_t result;

  result = qword_1004BC7D0;
  if (!qword_1004BC7D0)
  {
    result = swift_getWitnessTable(&unk_1003CC000, &type metadata for CarNowPlayingMetrics.Data.CodingKeys);
    atomic_store(result, &qword_1004BC7D0);
  }
  return result;
}

uint64_t sub_1000B89DC(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  return a1;
}

uint64_t sub_1000B8A04()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_1000B8A30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  char v7;
  double v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(double *)(v1 + 72);
  v7 = *(_BYTE *)(v1 + 80);
  v8 = *(double *)(v1 + 88);
  v9 = (_QWORD *)swift_task_alloc(dword_1004BC7DC);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10002E8E0;
  return sub_1000B746C(v6, v8, a1, v4, v5, v1 + 32, v7);
}

uint64_t sub_1000B8ACC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

void sub_1000B8ADC(uint64_t a1)
{
  uint64_t v1;

  sub_1000B77F4(a1, *(_BYTE *)(v1 + 16));
}

uint64_t sub_1000B8AE4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000057B4(&qword_1004BE030);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000B8B24()
{
  unint64_t result;

  result = qword_1004BC7E8;
  if (!qword_1004BC7E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CarNowPlayingMetrics.Data, &type metadata for CarNowPlayingMetrics.Data);
    atomic_store(result, (unint64_t *)&qword_1004BC7E8);
  }
  return result;
}

uint64_t sub_1000B8B68(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100009788(&qword_1004BC6F8);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000B8BC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000057B4((uint64_t *)&unk_1004BC8B0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v10 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_1000277A0(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (_QWORD *)(v4[7] + 16 * result);
    *v14 = v10;
    v14[1] = v9;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000B8CE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000057B4(&qword_1004BC8A0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10000FEB4(v7, (uint64_t)&v16, &qword_1004BC8A8);
    v8 = v16;
    v9 = v17;
    result = sub_1000277A0(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_100007EE4(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000B8E1C(uint64_t a1)
{
  return sub_1000B9870(a1, &qword_1004BC858, &qword_1004BC860, (uint64_t (*)(uint64_t))sub_1000C55D0);
}

unint64_t sub_1000B8E38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000057B4(&qword_1004BC880);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (void **)(a1 + 48);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 2);
    v8 = (uint64_t)*(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain();
    v10 = v9;
    result = sub_1000277A0(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v10;
    v14 = v4[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v4[2] = v16;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000B8F50(uint64_t a1)
{
  return sub_1000B8F5C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1000277A0);
}

unint64_t sub_1000B8F5C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t result;
  char v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v6 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000057B4(&qword_1004BC888);
  v5 = static _DictionaryStorage.allocate(capacity:)(v3);
  v6 = (_QWORD *)v5;
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v6;
  }
  swift_retain(v5);
  v8 = (unint64_t *)(a1 + 56);
  while (1)
  {
    v9 = *(v8 - 3);
    v10 = *(v8 - 2);
    v11 = *(v8 - 1);
    v12 = *v8;
    swift_bridgeObjectRetain();
    sub_100026084(v11, v12);
    result = a2(v9, v10);
    if ((v14 & 1) != 0)
      break;
    *(_QWORD *)((char *)v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v15 = (_QWORD *)(v6[6] + 16 * result);
    *v15 = v9;
    v15[1] = v10;
    v16 = (uint64_t *)(v6[7] + 16 * result);
    *v16 = v11;
    v16[1] = v12;
    v17 = v6[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
      goto LABEL_11;
    v8 += 4;
    v6[2] = v19;
    if (!--v7)
    {
      swift_release(v6);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000B9094(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000057B4((uint64_t *)&unk_1004BE690);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10000FEB4(v7, (uint64_t)v16, &qword_1004BC8C0);
    result = sub_100027770((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v4[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_100007EE4(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 72;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000B91D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000057B4((uint64_t *)&unk_1004BC890);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_1000277A0(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000B92EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000057B4(&qword_1004BC878);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 2);
    v8 = *((_QWORD *)v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain();
    result = sub_1000277A0(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_BYTE *)(v4[7] + result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 24;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000B93FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = sub_1000057B4(&qword_1004BC868);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v25 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v25);
    return (unint64_t)v8;
  }
  sub_1000057B4(&qword_1004BC870);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = (uint64_t)&v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v27 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10000FEB4(v13, (uint64_t)v5, &qword_1004BC868);
    result = sub_1000C562C((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for UUID(0);
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    v20 = v8[7];
    v21 = type metadata accessor for PushNotificationObserver.RegisteredHandler(0);
    result = sub_1000BB190(v10, v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v17);
    v22 = v8[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_12;
    v8[2] = v24;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v25 = v27;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1000B95AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000057B4(&qword_1004BC850);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v7 = *v6;
    v8 = (id)*(v6 - 1);
    swift_unknownObjectRetain(v7);
    result = sub_1000C5690((uint64_t)v8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = 8 * result;
    *(_QWORD *)(v4[6] + v11) = v8;
    *(_QWORD *)(v4[7] + v11) = v7;
    v12 = v4[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4[2] = v14;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000B96B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = sub_1000057B4(&qword_1004BC818);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v26 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v26);
    return (unint64_t)v8;
  }
  sub_1000057B4(&qword_1004BC820);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = (char *)v5 + *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v28 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10000FEB4(v13, (uint64_t)v5, &qword_1004BC818);
    v15 = *v5;
    v16 = v5[1];
    result = sub_1000277A0(*v5, v16);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v20 = (uint64_t *)(v8[6] + 16 * result);
    *v20 = v15;
    v20[1] = v16;
    v21 = v8[7];
    v22 = type metadata accessor for SocialProfile(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v19, v10, v22);
    v23 = v8[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_12;
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v26 = v28;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1000B9854(uint64_t a1)
{
  return sub_1000B9870(a1, &qword_1004BC838, (uint64_t *)&unk_1004BC840, (uint64_t (*)(uint64_t))sub_1000C55D0);
}

unint64_t sub_1000B9870(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    v9 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000057B4(a2);
  v8 = static _DictionaryStorage.allocate(capacity:)(v5);
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v9;
  }
  v11 = v8 + 64;
  v12 = a1 + 32;
  swift_retain(v8);
  while (1)
  {
    sub_10000FEB4(v12, (uint64_t)&v19, a3);
    v13 = v19;
    result = a4(v19);
    if ((v15 & 1) != 0)
      break;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v9[6] + 8 * result) = v13;
    result = (unint64_t)sub_100007EE4(&v20, (_OWORD *)(v9[7] + 32 * result));
    v16 = v9[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      goto LABEL_11;
    v9[2] = v18;
    v12 += 40;
    if (!--v10)
    {
      swift_release(v9);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000B9998(uint64_t a1)
{
  return sub_1000B9870(a1, &qword_1004BC828, &qword_1004BC830, (uint64_t (*)(uint64_t))sub_100027674);
}

void *MPModelObject.metricsDictionary.getter()
{
  void *v0;
  id v1;
  char *v2;
  char *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t ObjectType;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD v31[2];
  __int128 v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[104];
  _BYTE v37[176];

  objc_allocWithZone((Class)type metadata accessor for ModelObjectBackedStoreItemMetadata());
  v1 = v0;
  v2 = ModelObjectBackedStoreItemMetadata.init(modelObject:)(v1);
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, "effectiveStorePlatformDictionary");

    if (v4)
    {
      v5 = (void *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v4, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
      swift_bridgeObjectRelease(0);

      return v5;
    }
  }
  objc_opt_self(MPModelGenericObject);
  v6 = (void *)swift_dynamicCastObjCClass(v1);
  if (v6)
  {
    v7 = objc_msgSend(v6, "anyObject");
    goto LABEL_8;
  }
  objc_opt_self(MPModelStoreBrowseContentItem);
  v8 = (void *)swift_dynamicCastObjCClass(v1);
  if (v8)
  {
    v7 = objc_msgSend(v8, "innerObject");
LABEL_8:
    v9 = v7;
    if (v9)
      goto LABEL_10;
  }
  v9 = v1;
LABEL_10:
  ObjectType = swift_getObjectType();
  v11 = objc_msgSend(v9, "identifiers");
  v12 = sub_1000BAB38(ObjectType, 2, 0, v11);
  v14 = v13;

  if (v14)
  {
    v15 = sub_1000057B4(&qword_1004BC800);
    inited = swift_initStackObject(v15, v36);
    *(_OWORD *)(inited + 16) = xmmword_1003C64D0;
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(MPStoreItemMetadataStorePlatformDictionaryKeyStoreID);
    v35 = v17;
    AnyHashable.init<A>(_:)((_QWORD *)(inited + 32), &v34, &type metadata for String, &protocol witness table for String);
    *(_QWORD *)(inited + 96) = &type metadata for String;
    *(_QWORD *)(inited + 72) = v12;
    *(_QWORD *)(inited + 80) = v14;
    v5 = (void *)sub_1000B9094(inited);
    swift_bridgeObjectRelease(0);
    objc_opt_self(MPModelRadioStation);
    if (swift_dynamicCastObjCClass(v1) && v5)
    {
      *(_QWORD *)&v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(MPStoreItemMetadataStorePlatformDictionaryKeyKind);
      *((_QWORD *)&v32 + 1) = v18;
      AnyHashable.init<A>(_:)(&v34, &v32, &type metadata for String, &protocol witness table for String);
      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(MPStoreItemMetadataItemKindRadioStation);
      v33 = &type metadata for String;
      *(_QWORD *)&v32 = v19;
      *((_QWORD *)&v32 + 1) = v20;
      sub_100007EE4(&v32, v31);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
      sub_1000B9F34(v31, (uint64_t)&v34, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease(0x8000000000000000);
      sub_10000FC6C((uint64_t)&v34);
    }
  }
  else
  {
    objc_opt_self(MPModelPlaylist);
    v5 = (void *)swift_dynamicCastObjCClass(v1);
    if (v5)
    {
      v22 = MPModelPropertyPlaylistType;
      v23 = v1;
      if (objc_msgSend(v5, "hasLoadedValueForKey:", v22) && objc_msgSend(v5, "type") == (id)9)
      {
        v24 = sub_1000057B4(&qword_1004BC800);
        v25 = swift_initStackObject(v24, v37);
        *(_OWORD *)(v25 + 16) = xmmword_1003C6BD0;
        v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(MPStoreItemMetadataStorePlatformDictionaryKeyStoreID);
        v35 = v26;
        AnyHashable.init<A>(_:)((_QWORD *)(v25 + 32), &v34, &type metadata for String, &protocol witness table for String);
        *(_QWORD *)(v25 + 96) = &type metadata for String;
        strcpy((char *)(v25 + 72), "FavoriteSongs");
        *(_WORD *)(v25 + 86) = -4864;
        v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(MPStoreItemMetadataStorePlatformDictionaryKeyKind);
        v35 = v27;
        AnyHashable.init<A>(_:)((_QWORD *)(v25 + 104), &v34, &type metadata for String, &protocol witness table for String);
        v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(MPStoreItemMetadataItemKindPlaylist);
        *(_QWORD *)(v25 + 168) = &type metadata for String;
        *(_QWORD *)(v25 + 144) = v28;
        *(_QWORD *)(v25 + 152) = v29;
        v5 = (void *)sub_1000B9094(v25);
        swift_bridgeObjectRelease(0);

      }
      else
      {

        return 0;
      }
    }
  }
  return v5;
}

void *sub_1000B9DA4()
{
  return MPModelObject.metricsDictionary.getter();
}

uint64_t sub_1000B9DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;

  v6 = v5;
  v12 = *v5;
  v14 = sub_1000277A0(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1001D4FE0();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (_QWORD *)(v20[7] + 16 * v14);
      v22 = v21[1];
      *v21 = a1;
      v21[1] = a2;
      return swift_bridgeObjectRelease(v22);
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v26 = (uint64_t *)(v20[6] + 16 * v14);
    *v26 = a3;
    v26[1] = a4;
    v27 = (_QWORD *)(v20[7] + 16 * v14);
    *v27 = a1;
    v27[1] = a2;
    v28 = v20[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (!v29)
    {
      v20[2] = v30;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_1001D2C6C(v17, a5 & 1);
  v24 = sub_1000277A0(a3, a4);
  if ((v18 & 1) == (v25 & 1))
  {
    v14 = v24;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

_OWORD *sub_1000B9F34(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_100027770(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_QWORD *)(v16[7] + 32 * v10);
        sub_10000970C(v17);
        return sub_100007EE4(a1, v17);
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1001D5180();
      goto LABEL_7;
    }
    sub_1001D2F78(v13, a3 & 1);
    v19 = sub_100027770(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10000FCD4(a2, (uint64_t)v21);
      return sub_1000BA8EC(v10, (uint64_t)v21, a1, v16);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

uint64_t sub_1000BA06C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1000277A0(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1001D54F0();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_bridgeObjectRelease(*(_QWORD *)(v19 + 8 * v12));
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_1001D3550(v15, a4 & 1);
  v21 = sub_1000277A0(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1000BA1C8(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_1000C562C(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7];
        v22 = type metadata accessor for PushNotificationObserver.RegisteredHandler(0);
        return sub_1000BB1D4(a1, v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v14);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_1001D56A4();
      goto LABEL_7;
    }
    sub_1001D3864(v17, a3 & 1);
    v24 = sub_1000C562C(a2);
    if ((v18 & 1) == (v25 & 1))
    {
      v14 = v24;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_1000BA964(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

_OWORD *sub_1000BA348(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_1000277A0(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(v18[7] + 32 * v12);
        sub_10000970C(v19);
        return sub_100007EE4(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1001D596C();
      goto LABEL_7;
    }
    sub_1001D3C80(v15, a4 & 1);
    v21 = sub_1000277A0(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1000BAA14(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_1000BA478(uint64_t a1, Swift::UInt a2, Swift::UInt a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  char v20;
  Swift::UInt *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1000C56C0(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1001D5B50();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v18[7] + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v21 = (Swift::UInt *)(v18[6] + 16 * v12);
    *v21 = a2;
    v21[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v22 = v18[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      return;
    }
    goto LABEL_14;
  }
  sub_1001D3F7C(v15, a4 & 1);
  v19 = sub_1000C56C0(a2, a3);
  if ((v16 & 1) == (v20 & 1))
  {
    v12 = v19;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  type metadata accessor for MPCPlayerRequestTracklistRange(0);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v25);
  __break(1u);
}

id sub_1000BA5B0(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id result;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;

  v4 = v3;
  v7 = *v3;
  v9 = sub_1000C5690((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_1001D5CE0();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];
      result = (id)swift_unknownObjectRelease(*(_QWORD *)(v16 + 8 * v9));
      *(_QWORD *)(v16 + 8 * v9) = a1;
      return result;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v20 = 8 * v9;
    *(_QWORD *)(v15[6] + v20) = a2;
    *(_QWORD *)(v15[7] + v20) = a1;
    v21 = v15[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v15[2] = v23;
      return a2;
    }
    goto LABEL_14;
  }
  sub_1001D4258(v12, a3 & 1);
  v18 = sub_1000C5690((uint64_t)a2);
  if ((v13 & 1) == (v19 & 1))
  {
    v9 = v18;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v24 = sub_10000598C(0, &qword_1004BC808, MPCPlayerPath_ptr);
  result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
  return result;
}

uint64_t sub_1000BA710(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_1000C562C(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7];
        v22 = sub_1000057B4(&qword_1004BF1E0);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v14, a1, v22);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_1001D5E88();
      goto LABEL_7;
    }
    sub_1001D452C(v17, a3 & 1);
    v24 = sub_1000C562C(a2);
    if ((v18 & 1) == (v25 & 1))
    {
      v14 = v24;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_1000BAA7C(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

unint64_t sub_1000BA89C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = (_QWORD *)(a6[7] + 16 * result);
  *v7 = a4;
  v7[1] = a5;
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

_OWORD *sub_1000BA8EC(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = sub_100007EE4(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

uint64_t sub_1000BA964(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v10 = a4[7];
  v11 = type metadata accessor for PushNotificationObserver.RegisteredHandler(0);
  result = sub_1000BB190(a3, v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

_OWORD *sub_1000BAA14(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_100007EE4(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t sub_1000BAA7C(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v10 = a4[7];
  v11 = sub_1000057B4(&qword_1004BF1E0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a3, v11);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

uint64_t sub_1000BAB38(uint64_t a1, uint64_t a2, unsigned __int8 a3, void *a4)
{
  char v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  Class isa;
  id v31;

  v5 = a2;
  if (a3 > 1u)
    __asm { BR              X9 }
  v7 = sub_10000598C(0, &qword_1004BC8C8, MPModelPlaylist_ptr);
  if (!swift_dynamicCastMetatype(a1, v7))
  {
    v10 = sub_10000598C(0, &qword_1004BC8D0, MPModelSocialPerson_ptr);
    if (swift_dynamicCastMetatype(a1, v10))
    {
      if ((v5 & 1) != 0)
      {
        v8 = MPIdentifierSet.bestLibraryIdentifier.getter();
        if (v11)
          return v8;
      }
      if ((v5 & 2) == 0)
        return 0;
      v17 = objc_msgSend(a4, "universalStore");
      if (!v17)
        return MPIdentifierSet.bestStoreIdentifier.getter();
      v14 = v17;
      v15 = objc_msgSend(v17, "socialProfileID");
      goto LABEL_24;
    }
    v12 = sub_10000598C(0, qword_1004BC8D8, MPModelRadioStation_ptr);
    if (!swift_dynamicCastMetatype(a1, v12))
    {
      if ((v5 & 1) != 0)
      {
        v8 = MPIdentifierSet.bestLibraryIdentifier.getter();
        if (v16)
          return v8;
      }
      if ((v5 & 2) == 0)
        return 0;
      return MPIdentifierSet.bestStoreIdentifier.getter();
    }
    if ((v5 & 2) == 0)
      return 0;
    v23 = objc_msgSend(a4, "radio");
    if (!v23)
      return 0;
    v24 = v23;
    v25 = objc_msgSend(v23, "stationStringID");
    if (v25)
    {
      v26 = v25;
      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v28 = v27;

      v29 = HIBYTE(v28) & 0xF;
      if ((v28 & 0x2000000000000000) == 0)
        v29 = v19 & 0xFFFFFFFFFFFFLL;
      if (v29)
      {
LABEL_40:
        swift_unknownObjectRelease(v24);
        return v19;
      }
      swift_bridgeObjectRelease(v28);
    }
    if (!objc_msgSend(v24, "stationID")
      || (objc_msgSend(v24, "stationID"),
          isa = Int64._bridgeToObjectiveC()().super.super.isa,
          v31 = (id)MPStoreItemMetadataStringNormalizeStoreIDValue(),
          isa,
          !v31))
    {
      swift_unknownObjectRelease(v24);
      return 0;
    }
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);

    goto LABEL_40;
  }
  if ((v5 & 1) != 0)
  {
    v8 = MPIdentifierSet.bestLibraryIdentifier.getter();
    if (v9)
      return v8;
  }
  if ((v5 & 2) == 0)
    return 0;
  v13 = objc_msgSend(a4, "universalStore");
  if (!v13)
    return MPIdentifierSet.bestStoreIdentifier.getter();
  v14 = v13;
  v15 = objc_msgSend(v13, "globalPlaylistID");
LABEL_24:
  v18 = v15;
  swift_unknownObjectRelease(v14);
  if (!v18)
    return MPIdentifierSet.bestStoreIdentifier.getter();
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  v22 = HIBYTE(v21) & 0xF;
  if ((v21 & 0x2000000000000000) == 0)
    v22 = v19 & 0xFFFFFFFFFFFFLL;
  if (!v22)
  {
    swift_bridgeObjectRelease(v21);
    return MPIdentifierSet.bestStoreIdentifier.getter();
  }
  return v19;
}

unint64_t sub_1000BAFB0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *i;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_1000057B4((uint64_t *)&unk_1004C1EC0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (i = (_QWORD *)(a1 + 40); ; i += 2)
    {
      v5 = *((_BYTE *)i - 8);
      v6 = *i;
      result = sub_1000C55D4(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_BYTE *)(v3[6] + result) = v5;
      *(_QWORD *)(v3[7] + 8 * result) = v6;
      v9 = v3[2];
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (v10)
        goto LABEL_10;
      v3[2] = v11;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_1000BB084(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  sub_1000057B4(&qword_1004BC810);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  v4 = *(_BYTE *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  result = sub_1000C55D4(v4);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v9 = (_QWORD *)(a1 + 72);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v4;
    v10 = (_QWORD *)(v3[7] + 16 * result);
    *v10 = v6;
    v10[1] = v5;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    if (!--v1)
      goto LABEL_8;
    v14 = v9 + 3;
    v4 = *((_BYTE *)v9 - 16);
    v6 = *(v9 - 1);
    v15 = *v9;
    swift_bridgeObjectRetain();
    result = sub_1000C55D4(v4);
    v9 = v14;
    v5 = v15;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000BB190(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PushNotificationObserver.RegisteredHandler(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BB1D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PushNotificationObserver.RegisteredHandler(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BB218(uint64_t a1)
{
  char *v2;

  v2 = (char *)&value witness table for Builtin.UnknownObject + 64;
  return swift_initClassMetadata2(a1, 0, 1, &v2, a1 + 96);
}

uint64_t sub_1000BB25C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BB278()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for MetricsEventSampler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100051E10(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MetricsEventSampler);
}

uint64_t MetricsEvent.Click.init(targetIdentifier:targetType:actionType:actionURL:locations:actionContext:actionDetails:page:snapshotImpressions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, uint64_t a11, unsigned __int16 a12, uint64_t a13, uint64_t a14)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t *v35;
  int *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  unsigned int (*v42)(uint64_t *, uint64_t, int *);
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t *v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  uint64_t result;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  _QWORD *v61;
  _BYTE v62[4];
  int v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t *v71;
  _BYTE *v72;
  uint64_t v73;

  v73 = a8;
  v68 = a6;
  v69 = a7;
  v64 = a5;
  v63 = a4;
  v67 = a12;
  v66 = a11;
  v65 = a10;
  v18 = sub_1000057B4(&qword_1004B99B0);
  __chkstk_darwin(v18);
  v70 = &v62[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = sub_1000057B4(&qword_1004BA730);
  v21 = __chkstk_darwin(v20);
  v72 = &v62[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = __chkstk_darwin(v21);
  v71 = (uint64_t *)&v62[-v24];
  v25 = __chkstk_darwin(v23);
  v27 = (uint64_t *)&v62[-v26];
  v28 = __chkstk_darwin(v25);
  v30 = (uint64_t *)&v62[-v29];
  v31 = __chkstk_darwin(v28);
  v33 = &v62[-v32];
  __chkstk_darwin(v31);
  v35 = (uint64_t *)&v62[-v34];
  v36 = (int *)type metadata accessor for MetricsEvent.Click(0);
  *(_BYTE *)(a9 + v36[18]) = 0;
  v37 = (_QWORD *)(a9 + v36[19]);
  *v37 = 0;
  v37[1] = 0;
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 16) = a3;
  *(_BYTE *)(a9 + 17) = v63;
  sub_10000FD10(v64, a9 + v36[7], &qword_1004B99B0);
  *(_QWORD *)(a9 + v36[8]) = v68;
  v38 = (_QWORD *)(a9 + v36[9]);
  v39 = v73;
  *v38 = v69;
  v38[1] = v39;
  v40 = a9 + v36[10];
  *(_OWORD *)v40 = v65;
  *(_QWORD *)(v40 + 16) = v66;
  *(_WORD *)(v40 + 24) = v67;
  v73 = a13;
  sub_10000FEB4(a13, (uint64_t)v35, &qword_1004BA730);
  v41 = (int *)type metadata accessor for MetricsEvent.Page(0);
  v42 = *(unsigned int (**)(uint64_t *, uint64_t, int *))(*((_QWORD *)v41 - 1) + 48);
  if (v42(v35, 1, v41) == 1)
  {
    sub_10000FE2C((uint64_t)v35, &qword_1004BA730);
    v43 = 0;
    v44 = 0;
  }
  else
  {
    v43 = *v35;
    v44 = v35[1];
    swift_bridgeObjectRetain();
    sub_100034960((uint64_t)v35, type metadata accessor for MetricsEvent.Page);
  }
  v45 = (_QWORD *)(a9 + v36[12]);
  *v45 = v43;
  v45[1] = v44;
  v46 = v73;
  sub_10000FEB4(v73, (uint64_t)v33, &qword_1004BA730);
  if (v42((uint64_t *)v33, 1, v41) == 1)
  {
    sub_10000FE2C((uint64_t)v33, &qword_1004BA730);
    v47 = 0;
    v48 = 0;
  }
  else
  {
    v47 = *((_QWORD *)v33 + 2);
    v48 = *((_QWORD *)v33 + 3);
    swift_bridgeObjectRetain();
    sub_100034960((uint64_t)v33, type metadata accessor for MetricsEvent.Page);
  }
  v49 = (_QWORD *)(a9 + v36[13]);
  *v49 = v47;
  v49[1] = v48;
  sub_10000FEB4(v46, (uint64_t)v30, &qword_1004BA730);
  if (v42(v30, 1, v41) == 1)
  {
    sub_10000FE2C((uint64_t)v30, &qword_1004BA730);
    v50 = type metadata accessor for URL(0);
    v51 = v70;
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v70, 1, 1, v50);
  }
  else
  {
    v51 = v70;
    sub_10000FEB4((uint64_t)v30 + v41[6], (uint64_t)v70, &qword_1004B99B0);
    sub_100034960((uint64_t)v30, type metadata accessor for MetricsEvent.Page);
  }
  sub_10000FD10((uint64_t)v51, a9 + v36[14], &qword_1004B99B0);
  sub_10000FEB4(v46, (uint64_t)v27, &qword_1004BA730);
  if (v42(v27, 1, v41) == 1)
  {
    sub_10000FE2C((uint64_t)v27, &qword_1004BA730);
    v52 = 0;
  }
  else
  {
    v52 = *(uint64_t *)((char *)v27 + v41[7]);
    swift_bridgeObjectRetain();
    sub_100034960((uint64_t)v27, type metadata accessor for MetricsEvent.Page);
  }
  *(_QWORD *)(a9 + v36[15]) = v52;
  v53 = v71;
  sub_10000FEB4(v46, (uint64_t)v71, &qword_1004BA730);
  v54 = v42(v53, 1, v41);
  v55 = (uint64_t)v72;
  if (v54 == 1)
  {
    sub_10000FE2C((uint64_t)v53, &qword_1004BA730);
    v56 = 1;
  }
  else
  {
    v56 = *((_BYTE *)v53 + v41[9]);
    sub_100034960((uint64_t)v53, type metadata accessor for MetricsEvent.Page);
  }
  *(_BYTE *)(a9 + v36[16]) = v56;
  sub_10000FD10(v73, v55, &qword_1004BA730);
  if (v42((uint64_t *)v55, 1, v41) == 1)
  {
    result = sub_10000FE2C(v55, &qword_1004BA730);
    v58 = 0;
    v59 = 0;
  }
  else
  {
    v60 = (uint64_t *)(v55 + v41[8]);
    v58 = *v60;
    v59 = v60[1];
    swift_bridgeObjectRetain();
    result = sub_100034960(v55, type metadata accessor for MetricsEvent.Page);
  }
  v61 = (_QWORD *)(a9 + v36[17]);
  *v61 = v58;
  v61[1] = v59;
  *(_QWORD *)(a9 + v36[11]) = a14;
  return result;
}

uint64_t type metadata accessor for MetricsEvent.Click(uint64_t a1)
{
  return sub_1000A1E5C(a1, qword_1004BCAE8, (uint64_t)&nominal type descriptor for MetricsEvent.Click);
}

uint64_t type metadata accessor for MetricsEvent.Page(uint64_t a1)
{
  return sub_1000A1E5C(a1, qword_1004BCA40, (uint64_t)&nominal type descriptor for MetricsEvent.Page);
}

uint64_t *MetricsReportingController.shared.unsafeMutableAddressor()
{
  if (qword_1004B8AE8 != -1)
    swift_once(&qword_1004B8AE8, sub_1000BF680);
  return &static MetricsReportingController.shared;
}

uint64_t MetricsEvent.ComponentRender.init(componentIdentifier:componentType:componentAppearTime:componentPlaceholderAppearTime:componentMotionActivationTime:componentRequestTime:componentEndTime:componentInterruptTime:preloadStatus:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, char a11)
{
  *(_QWORD *)a9 = result;
  *(_QWORD *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  *(_QWORD *)(a9 + 64) = a10;
  *(_BYTE *)(a9 + 72) = a11;
  return result;
}

uint64_t sub_1000BB844(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  id *v22;
  id v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  double v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  double v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  double v47;
  char *v50;
  char v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  double v62;
  char v63;
  char v64[24];

  v61 = a1;
  v2 = sub_1000057B4(&qword_1004BCBD0);
  v3 = __chkstk_darwin(v2);
  v59 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v60 = (char *)&v52 - v6;
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v52 - v8;
  __chkstk_darwin(v7);
  v11 = (char *)&v52 - v10;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v52 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v52 - v20;
  v22 = (id *)(v1 + 16);
  swift_beginAccess(v1 + 16, v64, 0, 0);
  v23 = *(id *)(v1 + 16);
  v24 = sub_1000CC570();

  if ((v24 & 1) != 0)
    return 1;
  v53 = v19;
  v54 = v16;
  v55 = v11;
  v56 = v9;
  v57 = v13;
  v58 = v21;
  v26 = sub_1000CC648();
  v25 = 1;
  if (v26)
  {
    v27 = (void *)v26;
    v62 = 0.0;
    v63 = 1;
    static Double._conditionallyBridgeFromObjectiveC(_:result:)(v26, &v62);

    if ((v63 & 1) == 0)
    {
      v28 = v62;
      v29 = sub_1000CC4AC();
      if (v29)
      {
        v30 = (void *)v29;
        v62 = 0.0;
        v63 = 1;
        static Double._conditionallyBridgeFromObjectiveC(_:result:)(v29, &v62);

        if ((v63 & 1) == 0)
        {
          v32 = v62;
          Date.init()(v31);
          v33 = *v22;
          v34 = (uint64_t)v56;
          sub_1000CC610((uint64_t)v56);

          v35 = v57;
          v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48);
          v37 = v12;
          if (v36(v34, 1, v12))
          {
            sub_10000FE2C(v34, &qword_1004BCBD0);
            v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56);
            v39 = (uint64_t)v55;
            v38(v55, 1, 1, v37);
          }
          else
          {
            v40 = v54;
            (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v54, v34, v12);
            v41 = sub_10000FE2C(v34, &qword_1004BCBD0);
            v39 = (uint64_t)v55;
            Date.addingTimeInterval(_:)(v41, v32 / 1000.0);
            v42 = *(void (**)(char *, uint64_t))(v35 + 8);
            v42(v40, v12);
            v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56);
            v38((char *)v39, 0, 1, v37);
            if (v36(v39, 1, v37) != 1)
            {
              v50 = v53;
              (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v53, v39, v37);
              v45 = v58;
              v51 = static Date.< infix(_:_:)(v58, v50);
              v42(v50, v37);
              v43 = (uint64_t)v59;
              v44 = (uint64_t)v60;
              if ((v51 & 1) != 0)
              {
                v25 = 1;
                goto LABEL_20;
              }
LABEL_11:
              v46 = sub_1000C5B80(0x20000000000001uLL);
              if (v46 == 0x20000000000000)
              {
                if (v28 < 1.0)
                {
LABEL_13:
                  v25 = 0;
LABEL_19:
                  v42 = *(void (**)(char *, uint64_t))(v35 + 8);
LABEL_20:
                  v42(v45, v37);
                  return v25;
                }
              }
              else
              {
                v47 = (double)v46 * 1.11022302e-16 + 0.0;
                if (v47 <= 0.0 || v47 > v28)
                  goto LABEL_13;
              }
              (*(void (**)(uint64_t, char *, uint64_t))(v35 + 16))(v44, v45, v37);
              v25 = 1;
              v38((char *)v44, 0, 1, v37);
              swift_beginAccess(v22, &v62, 33, 0);
              sub_10000FEB4(v44, v43, &qword_1004BCBD0);
              sub_1000CC62C(v43);
              swift_endAccess(&v62);
              sub_10000FE2C(v44, &qword_1004BCBD0);
              goto LABEL_19;
            }
          }
          v43 = (uint64_t)v59;
          v44 = (uint64_t)v60;
          sub_10000FE2C(v39, &qword_1004BCBD0);
          v45 = v58;
          goto LABEL_11;
        }
      }
    }
  }
  return v25;
}

uint64_t sub_1000BBC78(void (*a1)(char *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  id *v22;
  id v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  double v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  double v32;
  char *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  int v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  void (*v45)(char *, uint64_t, uint64_t, uint64_t);
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  double v50;
  char *v52;
  char v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  void (*v63)(char *, uint64_t, uint64_t, uint64_t);
  double v64;
  char v65;
  char v66[24];

  v63 = a1;
  v2 = sub_1000057B4(&qword_1004BCBD0);
  v3 = __chkstk_darwin(v2);
  v61 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v62 = (char *)&v54 - v6;
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v54 - v8;
  __chkstk_darwin(v7);
  v11 = (char *)&v54 - v10;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v54 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v54 - v20;
  v22 = (id *)(v1 + 16);
  swift_beginAccess(v1 + 16, v66, 0, 0);
  v23 = *(id *)(v1 + 16);
  v24 = sub_1000CCA18();

  if ((v24 & 1) != 0)
    return 1;
  v55 = v19;
  v56 = v16;
  v57 = v11;
  v58 = v9;
  v59 = v21;
  v60 = v13;
  v26 = sub_1000C5500();
  v25 = 1;
  if (v26)
  {
    v27 = (void *)v26;
    v64 = 0.0;
    v65 = 1;
    static Double._conditionallyBridgeFromObjectiveC(_:result:)(v26, &v64);

    if ((v65 & 1) == 0)
    {
      v28 = v64;
      v29 = sub_1000C5500();
      if (v29)
      {
        v30 = (void *)v29;
        v64 = 0.0;
        v65 = 1;
        static Double._conditionallyBridgeFromObjectiveC(_:result:)(v29, &v64);

        if ((v65 & 1) == 0)
        {
          v32 = v64;
          v33 = v59;
          Date.init()(v31);
          v34 = *v22;
          v35 = (uint64_t)v58;
          sub_1000CCA34((uint64_t)v58);

          v36 = v60;
          v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 48);
          v38 = v12;
          v39 = v37(v35, 1, v12);
          v40 = v33;
          if (v39)
          {
            sub_10000FE2C(v35, &qword_1004BCBD0);
            v41 = (uint64_t)v57;
            v63 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56);
            v63(v57, 1, 1, v38);
          }
          else
          {
            v42 = v56;
            (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v56, v35, v38);
            v43 = sub_10000FE2C(v35, &qword_1004BCBD0);
            v41 = (uint64_t)v57;
            Date.addingTimeInterval(_:)(v43, v32 / 1000.0);
            v44 = *(void (**)(char *, uint64_t))(v36 + 8);
            v44(v42, v38);
            v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56);
            v45((char *)v41, 0, 1, v38);
            v46 = v37(v41, 1, v38);
            v63 = v45;
            if (v46 != 1)
            {
              v52 = v55;
              (*(void (**)(char *, uint64_t, uint64_t))(v36 + 32))(v55, v41, v38);
              v53 = static Date.< infix(_:_:)(v40, v52);
              v44(v52, v38);
              v47 = (uint64_t)v61;
              v48 = (uint64_t)v62;
              if ((v53 & 1) != 0)
              {
                v25 = 1;
                goto LABEL_18;
              }
LABEL_11:
              v49 = sub_1000C5B80(0x20000000000001uLL);
              if (v49 == 0x20000000000000)
              {
                if (v28 < 1.0)
                {
                  v25 = 0;
LABEL_17:
                  v44 = *(void (**)(char *, uint64_t))(v36 + 8);
LABEL_18:
                  v44(v40, v38);
                  return v25;
                }
              }
              else
              {
                v25 = 0;
                v50 = (double)v49 * 1.11022302e-16 + 0.0;
                if (v50 <= 0.0 || v50 > v28)
                  goto LABEL_17;
              }
              (*(void (**)(uint64_t, char *, uint64_t))(v36 + 16))(v48, v40, v38);
              v25 = 1;
              v63((char *)v48, 0, 1, v38);
              swift_beginAccess(v22, &v64, 33, 0);
              sub_10000FEB4(v48, v47, &qword_1004BCBD0);
              sub_1000CCB18(v47);
              swift_endAccess(&v64);
              sub_10000FE2C(v48, &qword_1004BCBD0);
              goto LABEL_17;
            }
          }
          v47 = (uint64_t)v61;
          v48 = (uint64_t)v62;
          sub_10000FE2C(v41, &qword_1004BCBD0);
          goto LABEL_11;
        }
      }
    }
  }
  return v25;
}

uint64_t MetricsEvent.TargetType.init(contentItem:)(void *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  switch((unint64_t)objc_msgSend(a1, "itemType"))
  {
    case 1uLL:

      result = 0;
      break;
    case 2uLL:

      result = 3;
      break;
    case 4uLL:

      result = 16;
      break;
    case 7uLL:

      result = 20;
      break;
    default:
      v3 = static os_log_type_t.error.getter();
      v4 = sub_1000057B4(&qword_1004BBCE0);
      v5 = swift_allocObject(v4, 72, 7);
      *(_OWORD *)(v5 + 16) = xmmword_1003C64D0;
      v11 = objc_msgSend(a1, "itemType");
      type metadata accessor for MPModelStoreBrowseContentItemType(0);
      v7 = String.init<A>(describing:)(&v11, v6);
      v9 = v8;
      *(_QWORD *)(v5 + 56) = &type metadata for String;
      *(_QWORD *)(v5 + 64) = sub_1000A1F04();
      *(_QWORD *)(v5 + 32) = v7;
      *(_QWORD *)(v5 + 40) = v9;
      sub_10000598C(0, (unint64_t *)&qword_1004BC960, OS_os_log_ptr);
      v10 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v10, "MPModelStoreBrowseContentItem.Kind.targetType: Returning nil for [targetType for this kind not yet implemented] self=%@", 119, 2, v5);

      swift_bridgeObjectRelease(v5);
      result = 24;
      break;
  }
  return result;
}

uint64_t MetricsEvent.TargetType.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000BC290 + 4 * byte_1003CC1B7[a1]))(0x6D75626C41, 0xE500000000000000);
}

uint64_t sub_1000BC290()
{
  return 0x7465446D75626C41;
}

uint64_t sub_1000BC2B0()
{
  return 7368801;
}

uint64_t sub_1000BC2C0()
{
  return 0x747369747241;
}

uint64_t sub_1000BC2D4()
{
  return 0x72656E6E6162;
}

uint64_t sub_1000BC2E8()
{
  return 0x6E6F74747562;
}

uint64_t sub_1000BC2FC()
{
  return 0x6954656C62627562;
}

uint64_t sub_1000BC31C()
{
  return 1685217603;
}

unint64_t sub_1000BC32C()
{
  return 0xD000000000000011;
}

uint64_t sub_1000BC348()
{
  return 0x7265746C6966;
}

uint64_t sub_1000BC35C()
{
  return 0x7449726564616548;
}

uint64_t sub_1000BC378()
{
  return 0x7473694C746E6948;
}

uint64_t sub_1000BC398()
{
  return 7955819;
}

uint64_t sub_1000BC3A8()
{
  return 1802398060;
}

uint64_t sub_1000BC3B8()
{
  return 0x6E694C636972796CLL;
}

uint64_t sub_1000BC3D4()
{
  return 0x6D6574497473694CLL;
}

uint64_t sub_1000BC3EC()
{
  return 0x7473696C79616C50;
}

uint64_t sub_1000BC418()
{
  return 0x4C746E65746E6F43;
}

uint64_t sub_1000BC43C()
{
  return 0x726564696C73;
}

uint64_t sub_1000BC450()
{
  return 1735290707;
}

uint64_t sub_1000BC460()
{
  return 0x6C6C65737055;
}

uint64_t sub_1000BC474()
{
  return 0x657449666C656853;
}

uint64_t sub_1000BC494()
{
  return 0x6D65744964697247;
}

uint64_t sub_1000BC4AC(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000BE8A4(a1, a2, a3, a4, (uint64_t (*)(uint64_t))MetricsEvent.TargetType.rawValue.getter);
}

Swift::Int sub_1000BC4B8(uint64_t a1, uint64_t a2)
{
  return sub_1000BE93C(a1, a2, (uint64_t (*)(uint64_t))MetricsEvent.TargetType.rawValue.getter);
}

uint64_t sub_1000BC4C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BE9AC(a1, a2, a3, (uint64_t (*)(_QWORD))MetricsEvent.TargetType.rawValue.getter);
}

Swift::Int sub_1000BC4D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BE9F8(a1, a2, a3, (uint64_t (*)(uint64_t))MetricsEvent.TargetType.rawValue.getter);
}

uint64_t sub_1000BC4DC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s9MusicCore12MetricsEventV10TargetTypeO8rawValueAESgSS_tcfC_0(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_1000BC508@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = MetricsEvent.TargetType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t MetricsEvent.Page.init(pageIdentifier:pageType:pageURL:pageDetails:searchTerm:pageDisplayType:extRefUrl:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, char a10, uint64_t a11, uint64_t a12)
{
  int *v17;
  uint64_t result;
  _QWORD *v19;
  _QWORD *v20;

  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  v17 = (int *)type metadata accessor for MetricsEvent.Page(0);
  result = sub_10000FD10(a5, (uint64_t)a9 + v17[6], &qword_1004B99B0);
  *(_QWORD *)((char *)a9 + v17[7]) = a6;
  v19 = (_QWORD *)((char *)a9 + v17[8]);
  *v19 = a7;
  v19[1] = a8;
  *((_BYTE *)a9 + v17[9]) = a10 & 1;
  v20 = (_QWORD *)((char *)a9 + v17[10]);
  *v20 = a11;
  v20[1] = a12;
  return result;
}

uint64_t static MetricsEvent.Page.contextualActionMenu(storeID:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  int *v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  if (a2)
    v4 = a1;
  else
    v4 = 0xD000000000000014;
  if (a2)
    v5 = a2;
  else
    v5 = 0x80000001003A89A0;
  v6 = (int *)type metadata accessor for MetricsEvent.Page(0);
  v7 = (char *)a3 + v6[6];
  v8 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *a3 = v4;
  a3[1] = v5;
  a3[2] = 0xD000000000000014;
  a3[3] = 0x80000001003A89A0;
  *(unint64_t *)((char *)a3 + v6[7]) = 0;
  v9 = (unint64_t *)((char *)a3 + v6[8]);
  *v9 = 0;
  v9[1] = 0;
  *((_BYTE *)a3 + v6[9]) = 1;
  v10 = (unint64_t *)((char *)a3 + v6[10]);
  *v10 = 0;
  v10[1] = 0;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000BC6B0()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_10004FD4C((uint64_t)v0, static MetricsEvent.Page.libraryMenuSelection);
  v1 = (_QWORD *)sub_100039D34((uint64_t)v0, (uint64_t)static MetricsEvent.Page.libraryMenuSelection);
  v2 = (char *)v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *v1 = 0xD000000000000014;
  v1[1] = 0x80000001003A8F60;
  v1[2] = 0x7972617262694CLL;
  v1[3] = 0xE700000000000000;
  *(_QWORD *)((char *)v1 + v0[7]) = 0;
  v5 = (_QWORD *)((char *)v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.libraryMenuSelection.unsafeMutableAddressor()
{
  return sub_1000BC8B8(&qword_1004B8A48, (uint64_t)static MetricsEvent.Page.libraryMenuSelection, (uint64_t)sub_1000BC6B0);
}

uint64_t static MetricsEvent.Page.libraryMenuSelection.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BC914(&qword_1004B8A48, (uint64_t)static MetricsEvent.Page.libraryMenuSelection, (uint64_t)sub_1000BC6B0, a1);
}

uint64_t sub_1000BC7C0()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_10004FD4C((uint64_t)v0, static MetricsEvent.Page.libraryMenuEdit);
  v1 = (_QWORD *)sub_100039D34((uint64_t)v0, (uint64_t)static MetricsEvent.Page.libraryMenuEdit);
  v2 = (char *)v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *v1 = 0x4D7972617262694CLL;
  v1[1] = 0xEF74696445756E65;
  v1[2] = 0x72656B636950;
  v1[3] = 0xE600000000000000;
  *(_QWORD *)((char *)v1 + v0[7]) = 0;
  v5 = (_QWORD *)((char *)v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.libraryMenuEdit.unsafeMutableAddressor()
{
  return sub_1000BC8B8(&qword_1004B8A50, (uint64_t)static MetricsEvent.Page.libraryMenuEdit, (uint64_t)sub_1000BC7C0);
}

uint64_t sub_1000BC8B8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (*a1 != -1)
    swift_once(a1, a3);
  v4 = type metadata accessor for MetricsEvent.Page(0);
  return sub_100039D34(v4, a2);
}

uint64_t static MetricsEvent.Page.libraryMenuEdit.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BC914(&qword_1004B8A50, (uint64_t)static MetricsEvent.Page.libraryMenuEdit, (uint64_t)sub_1000BC7C0, a1);
}

uint64_t sub_1000BC914@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  if (*a1 != -1)
    swift_once(a1, a3);
  v6 = type metadata accessor for MetricsEvent.Page(0);
  v7 = sub_100039D34(v6, a2);
  return sub_1000C5F68(v7, a4);
}

uint64_t sub_1000BC960()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_10004FD4C((uint64_t)v0, static MetricsEvent.Page.libraryMadeForYou);
  v1 = (_QWORD *)sub_100039D34((uint64_t)v0, (uint64_t)static MetricsEvent.Page.libraryMadeForYou);
  v2 = (char *)v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *v1 = 0x59726F466564614DLL;
  v1[1] = 0xEA0000000000756FLL;
  v1[2] = 0x7972617262694CLL;
  v1[3] = 0xE700000000000000;
  *(_QWORD *)((char *)v1 + v0[7]) = 0;
  v5 = (_QWORD *)((char *)v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.libraryMadeForYou.unsafeMutableAddressor()
{
  return sub_1000BC8B8(&qword_1004B8A58, (uint64_t)static MetricsEvent.Page.libraryMadeForYou, (uint64_t)sub_1000BC960);
}

uint64_t static MetricsEvent.Page.libraryMadeForYou.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BC914(&qword_1004B8A58, (uint64_t)static MetricsEvent.Page.libraryMadeForYou, (uint64_t)sub_1000BC960, a1);
}

uint64_t sub_1000BCA70()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_10004FD4C((uint64_t)v0, static MetricsEvent.Page.libraryAlbumsList);
  v1 = (_QWORD *)sub_100039D34((uint64_t)v0, (uint64_t)static MetricsEvent.Page.libraryAlbumsList);
  v2 = (char *)v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *v1 = 0xD000000000000011;
  v1[1] = 0x80000001003A8F40;
  v1[2] = 1836019538;
  v1[3] = 0xE400000000000000;
  *(_QWORD *)((char *)v1 + v0[7]) = 0;
  v5 = (_QWORD *)((char *)v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.libraryAlbumsList.unsafeMutableAddressor()
{
  return sub_1000BC8B8(&qword_1004B8A60, (uint64_t)static MetricsEvent.Page.libraryAlbumsList, (uint64_t)sub_1000BCA70);
}

uint64_t static MetricsEvent.Page.libraryAlbumsList.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BC914(&qword_1004B8A60, (uint64_t)static MetricsEvent.Page.libraryAlbumsList, (uint64_t)sub_1000BCA70, a1);
}

uint64_t sub_1000BCB78()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_10004FD4C((uint64_t)v0, static MetricsEvent.Page.libraryArtistsList);
  v1 = (_QWORD *)sub_100039D34((uint64_t)v0, (uint64_t)static MetricsEvent.Page.libraryArtistsList);
  v2 = (char *)v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *v1 = 0xD000000000000012;
  v1[1] = 0x80000001003A8F20;
  v1[2] = 1836019538;
  v1[3] = 0xE400000000000000;
  *(_QWORD *)((char *)v1 + v0[7]) = 0;
  v5 = (_QWORD *)((char *)v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.libraryArtistsList.unsafeMutableAddressor()
{
  return sub_1000BC8B8(&qword_1004B8A68, (uint64_t)static MetricsEvent.Page.libraryArtistsList, (uint64_t)sub_1000BCB78);
}

uint64_t static MetricsEvent.Page.libraryArtistsList.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BC914(&qword_1004B8A68, (uint64_t)static MetricsEvent.Page.libraryArtistsList, (uint64_t)sub_1000BCB78, a1);
}

uint64_t sub_1000BCC80()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_10004FD4C((uint64_t)v0, static MetricsEvent.Page.libraryCompilationsList);
  v1 = (_QWORD *)sub_100039D34((uint64_t)v0, (uint64_t)static MetricsEvent.Page.libraryCompilationsList);
  v2 = (char *)v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *v1 = 0xD000000000000017;
  v1[1] = 0x80000001003A8F00;
  v1[2] = 1836019538;
  v1[3] = 0xE400000000000000;
  *(_QWORD *)((char *)v1 + v0[7]) = 0;
  v5 = (_QWORD *)((char *)v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.libraryCompilationsList.unsafeMutableAddressor()
{
  return sub_1000BC8B8(&qword_1004B8A70, (uint64_t)static MetricsEvent.Page.libraryCompilationsList, (uint64_t)sub_1000BCC80);
}

uint64_t static MetricsEvent.Page.libraryCompilationsList.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BC914(&qword_1004B8A70, (uint64_t)static MetricsEvent.Page.libraryCompilationsList, (uint64_t)sub_1000BCC80, a1);
}

uint64_t sub_1000BCD88()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_10004FD4C((uint64_t)v0, static MetricsEvent.Page.libraryComposersList);
  v1 = (_QWORD *)sub_100039D34((uint64_t)v0, (uint64_t)static MetricsEvent.Page.libraryComposersList);
  v2 = (char *)v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *v1 = 0xD000000000000014;
  v1[1] = 0x80000001003A8EE0;
  v1[2] = 1836019538;
  v1[3] = 0xE400000000000000;
  *(_QWORD *)((char *)v1 + v0[7]) = 0;
  v5 = (_QWORD *)((char *)v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.libraryComposersList.unsafeMutableAddressor()
{
  return sub_1000BC8B8(&qword_1004B8A78, (uint64_t)static MetricsEvent.Page.libraryComposersList, (uint64_t)sub_1000BCD88);
}

uint64_t static MetricsEvent.Page.libraryComposersList.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BC914(&qword_1004B8A78, (uint64_t)static MetricsEvent.Page.libraryComposersList, (uint64_t)sub_1000BCD88, a1);
}

uint64_t sub_1000BCE90()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_10004FD4C((uint64_t)v0, static MetricsEvent.Page.libraryGenresList);
  v1 = (_QWORD *)sub_100039D34((uint64_t)v0, (uint64_t)static MetricsEvent.Page.libraryGenresList);
  v2 = (char *)v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *v1 = 0xD000000000000011;
  v1[1] = 0x80000001003A8EC0;
  v1[2] = 1836019538;
  v1[3] = 0xE400000000000000;
  *(_QWORD *)((char *)v1 + v0[7]) = 0;
  v5 = (_QWORD *)((char *)v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.libraryGenresList.unsafeMutableAddressor()
{
  return sub_1000BC8B8(&qword_1004B8A80, (uint64_t)static MetricsEvent.Page.libraryGenresList, (uint64_t)sub_1000BCE90);
}

uint64_t static MetricsEvent.Page.libraryGenresList.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BC914(&qword_1004B8A80, (uint64_t)static MetricsEvent.Page.libraryGenresList, (uint64_t)sub_1000BCE90, a1);
}

uint64_t sub_1000BCF98()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_10004FD4C((uint64_t)v0, static MetricsEvent.Page.libraryMusicVideosList);
  v1 = (_QWORD *)sub_100039D34((uint64_t)v0, (uint64_t)static MetricsEvent.Page.libraryMusicVideosList);
  v2 = (char *)v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *v1 = 0xD000000000000016;
  v1[1] = 0x80000001003A8EA0;
  v1[2] = 1836019538;
  v1[3] = 0xE400000000000000;
  *(_QWORD *)((char *)v1 + v0[7]) = 0;
  v5 = (_QWORD *)((char *)v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.libraryMusicVideosList.unsafeMutableAddressor()
{
  return sub_1000BC8B8(&qword_1004B8A88, (uint64_t)static MetricsEvent.Page.libraryMusicVideosList, (uint64_t)sub_1000BCF98);
}

uint64_t static MetricsEvent.Page.libraryMusicVideosList.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BC914(&qword_1004B8A88, (uint64_t)static MetricsEvent.Page.libraryMusicVideosList, (uint64_t)sub_1000BCF98, a1);
}

uint64_t sub_1000BD0A0()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_10004FD4C((uint64_t)v0, static MetricsEvent.Page.libraryPlaylistsList);
  v1 = (_QWORD *)sub_100039D34((uint64_t)v0, (uint64_t)static MetricsEvent.Page.libraryPlaylistsList);
  v2 = (char *)v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *v1 = 0xD000000000000014;
  v1[1] = 0x80000001003A8E80;
  v1[2] = 1836019538;
  v1[3] = 0xE400000000000000;
  *(_QWORD *)((char *)v1 + v0[7]) = 0;
  v5 = (_QWORD *)((char *)v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.libraryPlaylistsList.unsafeMutableAddressor()
{
  return sub_1000BC8B8(&qword_1004B8A90, (uint64_t)static MetricsEvent.Page.libraryPlaylistsList, (uint64_t)sub_1000BD0A0);
}

uint64_t static MetricsEvent.Page.libraryPlaylistsList.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BC914(&qword_1004B8A90, (uint64_t)static MetricsEvent.Page.libraryPlaylistsList, (uint64_t)sub_1000BD0A0, a1);
}

uint64_t sub_1000BD1A8()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_10004FD4C((uint64_t)v0, static MetricsEvent.Page.librarySongsList);
  v1 = (_QWORD *)sub_100039D34((uint64_t)v0, (uint64_t)static MetricsEvent.Page.librarySongsList);
  v2 = (char *)v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *v1 = 0xD000000000000010;
  v1[1] = 0x80000001003A8E60;
  v1[2] = 1836019538;
  v1[3] = 0xE400000000000000;
  *(_QWORD *)((char *)v1 + v0[7]) = 0;
  v5 = (_QWORD *)((char *)v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.librarySongsList.unsafeMutableAddressor()
{
  return sub_1000BC8B8(&qword_1004B8A98, (uint64_t)static MetricsEvent.Page.librarySongsList, (uint64_t)sub_1000BD1A8);
}

uint64_t static MetricsEvent.Page.librarySongsList.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BC914(&qword_1004B8A98, (uint64_t)static MetricsEvent.Page.librarySongsList, (uint64_t)sub_1000BD1A8, a1);
}

uint64_t sub_1000BD2B0()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_10004FD4C((uint64_t)v0, static MetricsEvent.Page.libraryRecentlyAdded);
  v1 = (_QWORD *)sub_100039D34((uint64_t)v0, (uint64_t)static MetricsEvent.Page.libraryRecentlyAdded);
  v2 = (char *)v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *v1 = 0xD000000000000018;
  v1[1] = 0x80000001003A8E40;
  v1[2] = 1836019538;
  v1[3] = 0xE400000000000000;
  *(_QWORD *)((char *)v1 + v0[7]) = 0;
  v5 = (_QWORD *)((char *)v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.libraryRecentlyAdded.unsafeMutableAddressor()
{
  return sub_1000BC8B8(&qword_1004B8AA0, (uint64_t)static MetricsEvent.Page.libraryRecentlyAdded, (uint64_t)sub_1000BD2B0);
}

uint64_t static MetricsEvent.Page.libraryRecentlyAdded.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BC914(&qword_1004B8AA0, (uint64_t)static MetricsEvent.Page.libraryRecentlyAdded, (uint64_t)sub_1000BD2B0, a1);
}

uint64_t sub_1000BD3B8()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_10004FD4C((uint64_t)v0, static MetricsEvent.Page.libraryRecentlyDownloaded);
  v1 = (_QWORD *)sub_100039D34((uint64_t)v0, (uint64_t)static MetricsEvent.Page.libraryRecentlyDownloaded);
  v2 = (char *)v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *v1 = 0xD00000000000001DLL;
  v1[1] = 0x80000001003A8E20;
  v1[2] = 1836019538;
  v1[3] = 0xE400000000000000;
  *(_QWORD *)((char *)v1 + v0[7]) = 0;
  v5 = (_QWORD *)((char *)v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.libraryRecentlyDownloaded.unsafeMutableAddressor()
{
  return sub_1000BC8B8(&qword_1004B8AA8, (uint64_t)static MetricsEvent.Page.libraryRecentlyDownloaded, (uint64_t)sub_1000BD3B8);
}

uint64_t static MetricsEvent.Page.libraryRecentlyDownloaded.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BC914(&qword_1004B8AA8, (uint64_t)static MetricsEvent.Page.libraryRecentlyDownloaded, (uint64_t)sub_1000BD3B8, a1);
}

uint64_t sub_1000BD4C0()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_10004FD4C((uint64_t)v0, static MetricsEvent.Page.libraryAlbumDetail);
  v1 = sub_100039D34((uint64_t)v0, (uint64_t)static MetricsEvent.Page.libraryAlbumDetail);
  v2 = v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  strcpy((char *)v1, "LibraryAlbum");
  *(_BYTE *)(v1 + 13) = 0;
  *(_WORD *)(v1 + 14) = -5120;
  *(_QWORD *)(v1 + 16) = 0x6D75626C41;
  *(_QWORD *)(v1 + 24) = 0xE500000000000000;
  *(_QWORD *)(v1 + v0[7]) = 0;
  v5 = (_QWORD *)(v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *(_BYTE *)(v1 + v0[9]) = 1;
  v6 = (_QWORD *)(v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.libraryAlbumDetail.unsafeMutableAddressor()
{
  return sub_1000BC8B8(&qword_1004B8AB0, (uint64_t)static MetricsEvent.Page.libraryAlbumDetail, (uint64_t)sub_1000BD4C0);
}

uint64_t static MetricsEvent.Page.libraryAlbumDetail.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BC914(&qword_1004B8AB0, (uint64_t)static MetricsEvent.Page.libraryAlbumDetail, (uint64_t)sub_1000BD4C0, a1);
}

uint64_t sub_1000BD5D0()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_10004FD4C((uint64_t)v0, static MetricsEvent.Page.libraryArtistDetail);
  v1 = sub_100039D34((uint64_t)v0, (uint64_t)static MetricsEvent.Page.libraryArtistDetail);
  v2 = v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  strcpy((char *)v1, "LibraryArtist");
  *(_WORD *)(v1 + 14) = -4864;
  *(_QWORD *)(v1 + 16) = 0x747369747241;
  *(_QWORD *)(v1 + 24) = 0xE600000000000000;
  *(_QWORD *)(v1 + v0[7]) = 0;
  v5 = (_QWORD *)(v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *(_BYTE *)(v1 + v0[9]) = 1;
  v6 = (_QWORD *)(v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.libraryArtistDetail.unsafeMutableAddressor()
{
  return sub_1000BC8B8(&qword_1004B8AB8, (uint64_t)static MetricsEvent.Page.libraryArtistDetail, (uint64_t)sub_1000BD5D0);
}

uint64_t static MetricsEvent.Page.libraryArtistDetail.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BC914(&qword_1004B8AB8, (uint64_t)static MetricsEvent.Page.libraryArtistDetail, (uint64_t)sub_1000BD5D0, a1);
}

uint64_t sub_1000BD6E4()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_10004FD4C((uint64_t)v0, static MetricsEvent.Page.libraryPlaylistDetail);
  v1 = (_QWORD *)sub_100039D34((uint64_t)v0, (uint64_t)static MetricsEvent.Page.libraryPlaylistDetail);
  v2 = (char *)v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *v1 = 0x507972617262694CLL;
  v1[1] = 0xEF7473696C79616CLL;
  v1[2] = 0x7473696C79616C50;
  v1[3] = 0xE800000000000000;
  *(_QWORD *)((char *)v1 + v0[7]) = 0;
  v5 = (_QWORD *)((char *)v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.libraryPlaylistDetail.unsafeMutableAddressor()
{
  return sub_1000BC8B8(&qword_1004B8AC0, (uint64_t)static MetricsEvent.Page.libraryPlaylistDetail, (uint64_t)sub_1000BD6E4);
}

uint64_t static MetricsEvent.Page.libraryPlaylistDetail.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BC914(&qword_1004B8AC0, (uint64_t)static MetricsEvent.Page.libraryPlaylistDetail, (uint64_t)sub_1000BD6E4, a1);
}

uint64_t sub_1000BD7FC()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_10004FD4C((uint64_t)v0, static MetricsEvent.Page.libraryComposerDetail);
  v1 = (_QWORD *)sub_100039D34((uint64_t)v0, (uint64_t)static MetricsEvent.Page.libraryComposerDetail);
  v2 = (char *)v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *v1 = 0x437972617262694CLL;
  v1[1] = 0xEF7265736F706D6FLL;
  v1[2] = 0x747369747241;
  v1[3] = 0xE600000000000000;
  *(_QWORD *)((char *)v1 + v0[7]) = 0;
  v5 = (_QWORD *)((char *)v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.libraryComposerDetail.unsafeMutableAddressor()
{
  return sub_1000BC8B8(&qword_1004B8AC8, (uint64_t)static MetricsEvent.Page.libraryComposerDetail, (uint64_t)sub_1000BD7FC);
}

uint64_t static MetricsEvent.Page.libraryComposerDetail.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BC914(&qword_1004B8AC8, (uint64_t)static MetricsEvent.Page.libraryComposerDetail, (uint64_t)sub_1000BD7FC, a1);
}

uint64_t sub_1000BD910()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_10004FD4C((uint64_t)v0, static MetricsEvent.Page.libraryGenreDetail);
  v1 = (_QWORD *)sub_100039D34((uint64_t)v0, (uint64_t)static MetricsEvent.Page.libraryGenreDetail);
  v2 = (char *)v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *v1 = 0xD000000000000012;
  v1[1] = 0x80000001003A8E00;
  v1[2] = 0x65726E6547;
  v1[3] = 0xE500000000000000;
  *(_QWORD *)((char *)v1 + v0[7]) = 0;
  v5 = (_QWORD *)((char *)v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.libraryGenreDetail.unsafeMutableAddressor()
{
  return sub_1000BC8B8(&qword_1004B8AD0, (uint64_t)static MetricsEvent.Page.libraryGenreDetail, (uint64_t)sub_1000BD910);
}

uint64_t static MetricsEvent.Page.libraryGenreDetail.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BC914(&qword_1004B8AD0, (uint64_t)static MetricsEvent.Page.libraryGenreDetail, (uint64_t)sub_1000BD910, a1);
}

uint64_t sub_1000BDA1C()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_10004FD4C((uint64_t)v0, static MetricsEvent.Page.playlistCreation);
  v1 = (_QWORD *)sub_100039D34((uint64_t)v0, (uint64_t)static MetricsEvent.Page.playlistCreation);
  v2 = (char *)v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *v1 = 0x6C79616C5077654ELL;
  v1[1] = 0xEB00000000747369;
  v1[2] = 0x7473696C79616C50;
  v1[3] = 0xE800000000000000;
  *(_QWORD *)((char *)v1 + v0[7]) = 0;
  v5 = (_QWORD *)((char *)v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v1 + v0[9]) = 0;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.playlistCreation.unsafeMutableAddressor()
{
  return sub_1000BC8B8(&qword_1004B8AD8, (uint64_t)static MetricsEvent.Page.playlistCreation, (uint64_t)sub_1000BDA1C);
}

uint64_t static MetricsEvent.Page.playlistCreation.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BC914(&qword_1004B8AD8, (uint64_t)static MetricsEvent.Page.playlistCreation, (uint64_t)sub_1000BDA1C, a1);
}

uint64_t sub_1000BDB2C()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_10004FD4C((uint64_t)v0, static MetricsEvent.Page.playlistPicker);
  v1 = sub_100039D34((uint64_t)v0, (uint64_t)static MetricsEvent.Page.playlistPicker);
  v2 = v1 + v0[6];
  v3 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  strcpy((char *)v1, "PlaylistPicker");
  *(_BYTE *)(v1 + 15) = -18;
  *(_QWORD *)(v1 + 16) = 0x72656B636950;
  *(_QWORD *)(v1 + 24) = 0xE600000000000000;
  *(_QWORD *)(v1 + v0[7]) = 0;
  v5 = (_QWORD *)(v1 + v0[8]);
  *v5 = 0;
  v5[1] = 0;
  *(_BYTE *)(v1 + v0[9]) = 0;
  v6 = (_QWORD *)(v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t MetricsEvent.Page.playlistPicker.unsafeMutableAddressor()
{
  return sub_1000BC8B8(&qword_1004B8AE0, (uint64_t)static MetricsEvent.Page.playlistPicker, (uint64_t)sub_1000BDB2C);
}

uint64_t static MetricsEvent.Page.playlistPicker.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BC914(&qword_1004B8AE0, (uint64_t)static MetricsEvent.Page.playlistPicker, (uint64_t)sub_1000BDB2C, a1);
}

uint64_t MetricsEvent.Page.metricsPageProperties.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;

  v3 = sub_1000057B4(&qword_1004B99B0);
  __chkstk_darwin(v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v6 = v1[1];
  v8 = v1[3];
  v19 = v1[2];
  v9 = (int *)type metadata accessor for MetricsEvent.Page(0);
  sub_10000FEB4((uint64_t)v1 + v9[6], (uint64_t)v5, &qword_1004B99B0);
  v10 = *(uint64_t *)((char *)v1 + v9[7]);
  v11 = (uint64_t *)((char *)v1 + v9[10]);
  v12 = v11[1];
  v20 = *v11;
  v13 = (int *)type metadata accessor for MetricsPageProperties(0);
  v14 = (uint64_t)a1 + v13[6];
  v15 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v16 = v13[7];
  *(_QWORD *)((char *)a1 + v16) = 0;
  v17 = (_QWORD *)((char *)a1 + v13[8]);
  *v17 = 0;
  v17[1] = 0;
  *a1 = v7;
  a1[1] = v6;
  a1[2] = v19;
  a1[3] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000C5FAC((uint64_t)v5, v14);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + v16));
  *(_QWORD *)((char *)a1 + v16) = v10;
  result = swift_bridgeObjectRelease(v17[1]);
  *v17 = v20;
  v17[1] = v12;
  return result;
}

BOOL MetricsEvent.Page.DisplayType.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100466F80, v2);
  swift_bridgeObjectRelease(object);
  return v3 != 0;
}

uint64_t MetricsEvent.Page.DisplayType.rawValue.getter()
{
  return 0x7765695664726163;
}

Swift::Int sub_1000BDDFC()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0x7765695664726163, 0xE800000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1000BDE4C(uint64_t a1)
{
  return String.hash(into:)(a1, 0x7765695664726163, 0xE800000000000000);
}

Swift::Int sub_1000BDE64()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0x7765695664726163, 0xE800000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1000BDEB0@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100466FB8, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_1000BDF00(_QWORD *a1@<X8>)
{
  *a1 = 0x7765695664726163;
  a1[1] = 0xE800000000000000;
}

uint64_t MetricsEvent.Click.init(targetIdentifier:targetType:actionType:actionURL:locations:actionContext:actionDetails:pageIdentifier:pageType:pageURL:pageDetails:pageDisplayType:snapshotImpressions:searchTerm:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, uint64_t a11, __int16 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  int *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t result;
  _QWORD *v35;

  v28 = (int *)type metadata accessor for MetricsEvent.Click(0);
  *(_BYTE *)(a9 + v28[18]) = 0;
  v29 = (_QWORD *)(a9 + v28[19]);
  *v29 = 0;
  v29[1] = 0;
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 16) = a3;
  *(_BYTE *)(a9 + 17) = a4;
  sub_10000FD10(a5, a9 + v28[7], &qword_1004B99B0);
  *(_QWORD *)(a9 + v28[8]) = a6;
  v30 = (_QWORD *)(a9 + v28[9]);
  *v30 = a7;
  v30[1] = a8;
  v31 = a9 + v28[10];
  *(_OWORD *)v31 = a10;
  *(_QWORD *)(v31 + 16) = a11;
  *(_WORD *)(v31 + 24) = a12;
  v32 = (_QWORD *)(a9 + v28[12]);
  *v32 = a13;
  v32[1] = a14;
  v33 = (_QWORD *)(a9 + v28[13]);
  *v33 = a15;
  v33[1] = a16;
  result = sub_10000FD10(a17, a9 + v28[14], &qword_1004B99B0);
  *(_QWORD *)(a9 + v28[15]) = a18;
  *(_BYTE *)(a9 + v28[16]) = a19 & 1;
  *(_QWORD *)(a9 + v28[11]) = a20;
  v35 = (_QWORD *)(a9 + v28[17]);
  *v35 = a21;
  v35[1] = a22;
  return result;
}

uint64_t MetricsEvent.Click.init(targetIdentifier:targetType:actionType:actionURL:locations:actionContext:actionDetails:metricsPageProperties:snapshotImpressions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, uint64_t a11, unsigned __int16 a12, uint64_t *a13, uint64_t a14)
{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t result;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v43 = a7;
  v44 = a8;
  v38 = a5;
  v36 = a3;
  v37 = a4;
  v42 = a12;
  v40 = a11;
  v41 = a6;
  v39 = a10;
  v45 = a14;
  v17 = sub_1000057B4(&qword_1004B99B0);
  __chkstk_darwin(v17);
  v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a13[1];
  v21 = a13[2];
  v22 = a13[3];
  v34 = *a13;
  v35 = v21;
  v23 = type metadata accessor for MetricsPageProperties(0);
  sub_10000FEB4((uint64_t)a13 + *(int *)(v23 + 24), (uint64_t)v19, &qword_1004B99B0);
  v24 = *(uint64_t *)((char *)a13 + *(int *)(v23 + 28));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100034960((uint64_t)a13, type metadata accessor for MetricsPageProperties);
  v25 = (int *)type metadata accessor for MetricsEvent.Click(0);
  *(_BYTE *)(a9 + v25[18]) = 0;
  v26 = (_QWORD *)(a9 + v25[19]);
  *v26 = 0;
  v26[1] = 0;
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 16) = v36;
  *(_BYTE *)(a9 + 17) = v37;
  sub_10000FD10(v38, a9 + v25[7], &qword_1004B99B0);
  *(_QWORD *)(a9 + v25[8]) = v41;
  v27 = (_QWORD *)(a9 + v25[9]);
  v28 = v44;
  *v27 = v43;
  v27[1] = v28;
  v29 = a9 + v25[10];
  *(_OWORD *)v29 = v39;
  *(_QWORD *)(v29 + 16) = v40;
  *(_WORD *)(v29 + 24) = v42;
  v30 = (_QWORD *)(a9 + v25[12]);
  *v30 = v34;
  v30[1] = v20;
  v31 = (_QWORD *)(a9 + v25[13]);
  *v31 = v35;
  v31[1] = v22;
  result = sub_10000FD10((uint64_t)v19, a9 + v25[14], &qword_1004B99B0);
  *(_QWORD *)(a9 + v25[15]) = v24;
  *(_BYTE *)(a9 + v25[16]) = 1;
  *(_QWORD *)(a9 + v25[11]) = v45;
  v33 = (_QWORD *)(a9 + v25[17]);
  *v33 = 0;
  v33[1] = 0;
  return result;
}

uint64_t MetricsEvent.Click.isSharedContent.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MetricsEvent.Click(0) + 72));
}

uint64_t MetricsEvent.Click.isSharedContent.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for MetricsEvent.Click(0);
  *(_BYTE *)(v1 + *(int *)(result + 72)) = a1;
  return result;
}

CFRange (__swiftcall *MetricsEvent.Click.isSharedContent.modify())(__C::_NSRange)
{
  type metadata accessor for MetricsEvent.Click(0);
  return CFRange.init(_:);
}

uint64_t MetricsEvent.Click.dataRecoDataSetId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for MetricsEvent.Click(0) + 76));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricsEvent.Click.dataRecoDataSetId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for MetricsEvent.Click(0) + 76));
  result = swift_bridgeObjectRelease(v5[1]);
  *v5 = a1;
  v5[1] = a2;
  return result;
}

CFRange (__swiftcall *MetricsEvent.Click.dataRecoDataSetId.modify())(__C::_NSRange)
{
  type metadata accessor for MetricsEvent.Click(0);
  return CFRange.init(_:);
}

uint64_t MetricsEvent.Click.ActionType.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000BE418 + 4 * word_1003CC1D0[a1]))(0x6E6F69746361, 0xE600000000000000);
}

uint64_t sub_1000BE418()
{
  return 0x6574617669746361;
}

uint64_t sub_1000BE430()
{
  return 6579297;
}

uint64_t sub_1000BE440()
{
  return 0x62694C6F54646461;
}

uint64_t sub_1000BE460()
{
  return 0x6575516F54646461;
}

uint64_t sub_1000BE480()
{
  return 0x7473756A6461;
}

uint64_t sub_1000BE490()
{
  return 0x616C506E69676562;
}

uint64_t sub_1000BE4B4()
{
  return 0x6C65636E6163;
}

uint64_t sub_1000BE4C4()
{
  return 0x726F62616C6C6F63;
}

uint64_t sub_1000BE4E4()
{
  return 0x657461657263;
}

uint64_t sub_1000BE4F4()
{
  return 0x7453657461657263;
}

unint64_t sub_1000BE518()
{
  return 0xD000000000000015;
}

unint64_t sub_1000BE6DC()
{
  return 0xD000000000000012;
}

uint64_t sub_1000BE6F8()
{
  return 0x6F4374726F706572;
}

uint64_t sub_1000BE71C()
{
  return 0x686372616573;
}

uint64_t sub_1000BE72C()
{
  return 0x7463656C6573;
}

uint64_t sub_1000BE73C()
{
  return 0x6572616873;
}

uint64_t sub_1000BE750()
{
  return 0x694C646572616873;
}

uint64_t sub_1000BE774()
{
  return 0x72794C6572616873;
}

uint64_t sub_1000BE794()
{
  return 0x6972794C776F6873;
}

uint64_t sub_1000BE7B4()
{
  return 0x74696D627573;
}

uint64_t sub_1000BE7C4()
{
  return 0x656C67676F74;
}

uint64_t sub_1000BE7D4()
{
  return 0x75626C4177656976;
}

uint64_t sub_1000BE7F4()
{
  return 0x6974724177656976;
}

uint64_t sub_1000BE814()
{
  return 0x6465724377656976;
}

uint64_t sub_1000BE834()
{
  return 0x79616C5077656976;
}

uint64_t sub_1000BE854()
{
  return 0x77656976657270;
}

uint64_t sub_1000BE86C()
{
  return 0x6573756170;
}

uint64_t sub_1000BE880()
{
  return 0x68736572666572;
}

uint64_t sub_1000BE898(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000BE8A4(a1, a2, a3, a4, (uint64_t (*)(uint64_t))MetricsEvent.Click.ActionType.rawValue.getter);
}

uint64_t sub_1000BE8A4(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;

  v6 = *a2;
  v7 = a5(*a1);
  v9 = v8;
  v10 = a5(v6);
  if (v7 == v10 && v9 == v11)
  {
    v14 = 1;
    v13 = v9;
  }
  else
  {
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
  }
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v13);
  return v14 & 1;
}

Swift::Int sub_1000BE930(uint64_t a1, uint64_t a2)
{
  return sub_1000BE93C(a1, a2, (uint64_t (*)(uint64_t))MetricsEvent.Click.ActionType.rawValue.getter);
}

Swift::Int sub_1000BE93C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[9];

  v5 = *v3;
  Hasher.init(_seed:)(v10);
  v6 = a3(v5);
  v8 = v7;
  String.hash(into:)(v10, v6, v7);
  swift_bridgeObjectRelease(v8);
  return Hasher._finalize()();
}

uint64_t sub_1000BE9A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BE9AC(a1, a2, a3, (uint64_t (*)(_QWORD))MetricsEvent.Click.ActionType.rawValue.getter);
}

uint64_t sub_1000BE9AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = a4(*v4);
  v8 = v7;
  String.hash(into:)(a1, v6, v7);
  return swift_bridgeObjectRelease(v8);
}

Swift::Int sub_1000BE9EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BE9F8(a1, a2, a3, (uint64_t (*)(uint64_t))MetricsEvent.Click.ActionType.rawValue.getter);
}

Swift::Int sub_1000BE9F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[9];

  v6 = *v4;
  Hasher.init(_seed:)(v11);
  v7 = a4(v6);
  v9 = v8;
  String.hash(into:)(v11, v7, v8);
  swift_bridgeObjectRelease(v9);
  return Hasher._finalize()();
}

uint64_t sub_1000BEA58@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s9MusicCore12MetricsEventV5ClickV10ActionTypeO8rawValueAGSgSS_tcfC_0(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_1000BEA84@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = MetricsEvent.Click.ActionType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t MetricsEvent.Click.ActionContext.rawValue.getter(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = 0x6472616F6279656BLL;
  switch(a2)
  {
    case 0uLL:
      break;
    case 1uLL:
      v2 = 0x79726F7473;
      break;
    case 2uLL:
      v2 = 1701998445;
      break;
    case 3uLL:
      v2 = 0x636972796CLL;
      break;
    case 4uLL:
      v2 = 0x6B63617274;
      break;
    case 5uLL:
    case 8uLL:
      v2 = 0xD000000000000010;
      break;
    case 6uLL:
      v2 = 0xD000000000000015;
      break;
    case 7uLL:
      v2 = 0x6E654D6570697773;
      break;
    default:
      v2 = a1;
      break;
  }
  sub_100053C34(a1, a2);
  return v2;
}

uint64_t sub_1000BEBC4(uint64_t *a1, uint64_t a2)
{
  return _s9MusicCore12MetricsEventV5ClickV13ActionContextO21__derived_enum_equalsySbAG_AGtFZ_0(*a1, a1[1], *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

void MetricsEvent.Click.ActionDetails.dictionary.getter(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  __asm { BR              X10 }
}

unint64_t sub_1000BEC1C()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v5;

  v1 = sub_1000057B4(&qword_1004BC968);
  inited = swift_initStackObject(v1, &v5);
  *(_OWORD *)(inited + 16) = xmmword_1003C64D0;
  strcpy((char *)(inited + 32), "actionSubType");
  *(_WORD *)(inited + 46) = -4864;
  *(_QWORD *)(inited + 48) = MetricsEvent.Click.ActionType.rawValue.getter(v0);
  *(_QWORD *)(inited + 56) = v3;
  return sub_1000B8BC8(inited);
}

uint64_t MetricsEvent.ComponentRender.PreloadStatus.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000BF110 + 4 * byte_1003CC239[a1]))(1819047270, 0xE400000000000000);
}

uint64_t sub_1000BF110()
{
  return 0x6C616974726170;
}

uint64_t sub_1000BF128()
{
  return 0x6C6F686563616C70;
}

uint64_t sub_1000BF148()
{
  return 0x73756F6976657270;
}

void sub_1000BF16C(char *a1)
{
  sub_100048A58(*a1);
}

void sub_1000BF178()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_1000BF1BC()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6C616974726170, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

void sub_1000BF240()
{
  __asm { BR              X10 }
}

uint64_t sub_1000BF274(uint64_t a1)
{
  String.hash(into:)(a1, 0x6C616974726170, 0xE700000000000000);
  return swift_bridgeObjectRelease(0xE700000000000000);
}

void sub_1000BF2E4()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_1000BF324()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6C616974726170, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

unint64_t sub_1000BF3A8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s9MusicCore12MetricsEventV15ComponentRenderV13PreloadStatusO8rawValueAGSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BF3D4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1000BF3FC + 4 * byte_1003CC249[*v0]))();
}

void sub_1000BF3FC(_QWORD *a1@<X8>)
{
  *a1 = 0x6C616974726170;
  a1[1] = 0xE700000000000000;
}

void sub_1000BF418(_QWORD *a1@<X8>)
{
  *a1 = 0x6C6F686563616C70;
  a1[1] = 0xEB00000000726564;
}

void sub_1000BF43C(_QWORD *a1@<X8>)
{
  *a1 = 0x73756F6976657270;
  a1[1] = 0xEF6E776F6853796CLL;
}

uint64_t SharePlayTogetherSession.Participant.id.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(v2[1]);
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t MetricsEvent.ComponentRender.componentType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t MetricsEvent.ComponentRender.componentType.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

void *Library.Menu.Request.mediaPickerConfiguration.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 24);
  v2 = v1;
  return v1;
}

void MPCPlaybackEngine.Configuration.fallbackPlaybackIntent.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
}

void GroupActivitiesManager.Activity.Metadata.previewImage.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
}

void *MetricsEvent.ComponentRender.componentMotionActivationTime.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 40);
  v2 = v1;
  return v1;
}

void MetricsEvent.ComponentRender.componentMotionActivationTime.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = a1;
}

CFRange (__swiftcall *Library.Menu.Request.filtersToAvailableContentGroups.modify())(__C::_NSRange)
{
  return CFRange.init(_:);
}

id PlaylistCovers.Cover.Representation.textColor.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 48);
}

void MetricsEvent.ComponentRender.componentRequestTime.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = a1;
}

void *MetricsEvent.ComponentRender.componentEndTime.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 56);
  v2 = v1;
  return v1;
}

void MetricsEvent.ComponentRender.componentEndTime.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = a1;
}

CFRange (__swiftcall *PresentationSource.configurationHandler.modify())(__C::_NSRange)
{
  return CFRange.init(_:);
}

void *MetricsEvent.ComponentRender.componentInterruptTime.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 64);
  v2 = v1;
  return v1;
}

void MetricsEvent.ComponentRender.componentInterruptTime.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = a1;
}

CFRange (__swiftcall *MetricsEvent.ComponentRender.componentInterruptTime.modify())(__C::_NSRange)
{
  return CFRange.init(_:);
}

uint64_t MetricsEvent.ComponentRender.preloadStatus.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t MetricsEvent.ComponentRender.preloadStatus.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 72) = result;
  return result;
}

CFRange (__swiftcall *LibraryModelRequest.scopedContainers.modify())(__C::_NSRange)
{
  return CFRange.init(_:);
}

id sub_1000BF680()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MetricsReportingController()), "init");
  static MetricsReportingController.shared = (uint64_t)result;
  return result;
}

id static MetricsReportingController.shared.getter()
{
  if (qword_1004B8AE8 != -1)
    swift_once(&qword_1004B8AE8, sub_1000BF680);
  return (id)static MetricsReportingController.shared;
}

void MetricsReportingController.recordPerformanceMetrics(for:)(void *a1)
{
  id v1;
  id v2;
  MusicCore::MetricsEvent::LoadUrl v3;

  if (a1)
  {
    v1 = objc_msgSend(a1, "performanceMetrics");
    if (v1)
    {
      v2 = v1;
      sub_1000C6044(v2, (uint64_t)&v3);
      MetricsReportingController.recordLoadUrlEvent(_:)(&v3);
      sub_1000C6490(&v3);

    }
  }
}

void MetricsReportingController.recordPageEvent(_:pageContext:sharedListeningContext:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  id v25;
  id v26;
  NSString v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  NSString v31;
  NSString v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  NSString v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  Class isa;
  NSString v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  _QWORD *v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  id v53;
  NSString v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  NSDictionary v59;
  NSString v60;
  uint64_t *v61;
  uint64_t v62;
  char **v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t inited;
  unint64_t v67;
  Class v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  Class v72;
  unint64_t v73;
  char v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  Class v81;
  unint64_t v82;
  unint64_t v83;
  Class v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  Class v91;
  void *v92;
  void *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  id v97;
  id v98;
  id v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110[80];
  _QWORD aBlock[5];
  uint64_t v112;

  v101 = a5;
  v104 = a4;
  v9 = sub_1000057B4(&qword_1004B99B0);
  __chkstk_darwin(v9);
  v11 = (char *)&v100 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (unint64_t *)((char *)&v100 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = sub_10000598C(0, (unint64_t *)&qword_1004BD060, OS_dispatch_queue_ptr);
  *v15 = static OS_dispatch_queue.main.getter(v16, v17, v18, v19, v20, v21, v22, v23, v100, v101, v102, v103, v104, v105, v106);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  v24 = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
  if ((v24 & 1) != 0)
  {
    v25 = objc_msgSend(objc_allocWithZone((Class)SSMetricsPageEvent), "init");
    v100 = a6;
    v102 = v11;
    v26 = v25;
    if (a3)
      v27 = String._bridgeToObjectiveC()();
    else
      v27 = 0;
    objc_msgSend(v25, "setPageContext:", v27, v100);

    v29 = *a1;
    v28 = a1[1];
    v30 = v25;
    swift_bridgeObjectRetain();
    v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v28);
    v32 = String._bridgeToObjectiveC()();
    objc_msgSend(v30, "setProperty:forBodyKey:", v31, v32);

    v34 = a1[2];
    v33 = a1[3];
    v105 = a1;
    v35 = v30;
    v36 = String._bridgeToObjectiveC()();
    objc_msgSend(v35, "setPageType:", v36);

    v103 = OBJC_IVAR____TtC9MusicCore26MetricsReportingController_metricsConfiguration;
    v37 = *(void **)&v106[OBJC_IVAR____TtC9MusicCore26MetricsReportingController_metricsConfiguration];
    if (v37)
    {
      v38 = sub_1000057B4(&qword_1004BC978);
      v39 = swift_allocObject(v38, 96, 7);
      *(_OWORD *)(v39 + 16) = xmmword_1003C6BD0;
      *(_QWORD *)(v39 + 32) = v34;
      *(_QWORD *)(v39 + 40) = v33;
      *(_QWORD *)(v39 + 88) = &type metadata for String;
      *(_QWORD *)(v39 + 56) = &type metadata for String;
      *(_QWORD *)(v39 + 64) = v29;
      *(_QWORD *)(v39 + 72) = v28;
      v40 = v35;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v41 = v37;
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v39);
      v43 = objc_msgSend(v41, "compoundStringWithElements:", isa);

      if (v43)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
        v45 = v44;

        v43 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v45);
      }
    }
    else
    {
      v46 = v35;
      v43 = 0;
    }
    v47 = v105;
    v48 = (uint64_t)v102;
    objc_msgSend(v35, "setPageDescription:", v43);

    v49 = (int *)type metadata accessor for MetricsEvent.Page(0);
    sub_10000FEB4((uint64_t)v47 + v49[6], v48, &qword_1004B99B0);
    v50 = type metadata accessor for URL(0);
    v51 = *(_QWORD *)(v50 - 8);
    v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v48, 1, v50);
    v53 = v35;
    if (v52 == 1)
    {
      sub_10000FE2C(v48, &qword_1004B99B0);
      v54 = 0;
    }
    else
    {
      URL.absoluteString.getter();
      v56 = v55;
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v48, v50);
      v54 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v56);
    }
    objc_msgSend(v53, "setPageURL:", v54);

    v57 = *(_QWORD *)((char *)v47 + v49[7]);
    v58 = v53;
    if (v57)
    {
      swift_bridgeObjectRetain();
      v59.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v57);
    }
    else
    {
      v59.super.isa = 0;
    }
    v60 = String._bridgeToObjectiveC()();
    objc_msgSend(v53, "setProperty:forBodyKey:", v59.super.isa, v60);

    swift_unknownObjectRelease(v59.super.isa);
    v61 = (_QWORD *)((char *)v47 + v49[8]);
    v62 = v61[1];
    v63 = &selRef_startWithCompletionHandler_;
    if (v62)
    {
      v64 = *v61;
      v65 = sub_1000057B4(&qword_1004C2C50);
      inited = swift_initStackObject(v65, &v107);
      *(_OWORD *)(inited + 16) = xmmword_1003C64D0;
      *(_QWORD *)(inited + 32) = 0x6554686372616573;
      *(_QWORD *)(inited + 40) = 0xEA00000000006D72;
      *(_QWORD *)(inited + 72) = &type metadata for String;
      *(_QWORD *)(inited + 48) = v64;
      *(_QWORD *)(inited + 56) = v62;
      v63 = &selRef_startWithCompletionHandler_;
      swift_bridgeObjectRetain();
      v67 = sub_1000B8CE8(inited);
      v68 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v67);
      objc_msgSend(v53, "addPropertiesWithDictionary:", v68);

    }
    if ((*((_BYTE *)v47 + v49[9]) & 1) == 0)
    {
      v69 = sub_1000057B4(&qword_1004C2C50);
      v70 = swift_initStackObject(v69, &v108);
      *(_OWORD *)(v70 + 16) = xmmword_1003C64D0;
      *(_QWORD *)(v70 + 32) = 0x7073694465676170;
      *(_QWORD *)(v70 + 40) = 0xEF6570795479616CLL;
      *(_QWORD *)(v70 + 72) = &type metadata for String;
      *(_QWORD *)(v70 + 48) = 0x7765695664726163;
      *(_QWORD *)(v70 + 56) = 0xE800000000000000;
      v71 = sub_1000B8CE8(v70);
      v72 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v71);
      objc_msgSend(v53, v63[438], v72);

    }
    if (v57)
    {
      if (*(_QWORD *)(v57 + 16))
      {
        v73 = sub_1000277A0(0x4974655361746164, 0xE900000000000064);
        if ((v74 & 1) != 0)
        {
          v75 = (uint64_t *)(*(_QWORD *)(v57 + 56) + 16 * v73);
          v77 = *v75;
          v76 = v75[1];
          v78 = sub_1000057B4(&qword_1004C2C50);
          v79 = swift_initStackObject(v78, &v109);
          *(_OWORD *)(v79 + 16) = xmmword_1003C64D0;
          *(_QWORD *)(v79 + 32) = 0x4974655361746164;
          *(_QWORD *)(v79 + 40) = 0xE900000000000064;
          *(_QWORD *)(v79 + 72) = &type metadata for String;
          *(_QWORD *)(v79 + 48) = v77;
          *(_QWORD *)(v79 + 56) = v76;
          v47 = v105;
          swift_bridgeObjectRetain();
          v80 = sub_1000B8CE8(v79);
          v81 = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v80);
          objc_msgSend(v53, "addPropertiesWithDictionary:", v81);

        }
      }
    }
    if (v104 != 2)
    {
      v82 = sub_1000C5DE8(v104 & 1, v101, v100);
      if (v82)
      {
        v83 = v82;
        v84 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v83);
        objc_msgSend(v53, "addPropertiesWithDictionary:", v84);

      }
    }
    v85 = (_QWORD *)((char *)v47 + v49[10]);
    v86 = v85[1];
    if (v86)
    {
      v87 = *v85;
      v88 = sub_1000057B4(&qword_1004C2C50);
      v89 = swift_initStackObject(v88, v110);
      *(_OWORD *)(v89 + 16) = xmmword_1003C64D0;
      *(_QWORD *)(v89 + 32) = 0x7255666552747865;
      *(_QWORD *)(v89 + 40) = 0xE90000000000006CLL;
      *(_QWORD *)(v89 + 72) = &type metadata for String;
      *(_QWORD *)(v89 + 48) = v87;
      *(_QWORD *)(v89 + 56) = v86;
      swift_bridgeObjectRetain();
      v90 = sub_1000B8CE8(v89);
      v91 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v90);
      objc_msgSend(v53, "addPropertiesWithDictionary:", v91);

    }
    v92 = v106;
    v93 = *(void **)&v106[v103];
    v94 = swift_allocObject(&unk_1004709A8, 32, 7);
    *(_QWORD *)(v94 + 16) = v92;
    *(_QWORD *)(v94 + 24) = v53;
    aBlock[4] = sub_1000C6544;
    v112 = v94;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100011FD0;
    aBlock[3] = &unk_1004709C0;
    v95 = _Block_copy(aBlock);
    v96 = v112;
    v97 = v93;
    v98 = v92;
    v99 = v53;
    objc_msgSend(v99, "setStandardPropertiesWith:completionHandler:", v97, v95, swift_release(v96).n128_f64[0]);
    _Block_release(v95);

  }
  else
  {
    __break(1u);
  }
}

void MetricsReportingController.recordImpressionsEvent(_:with:pageContext:sharedListeningContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  id v29;
  NSString v30;
  uint64_t v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  NSString v33;
  uint64_t v34;
  NSString v35;
  NSString v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t inited;
  unint64_t v40;
  Class isa;
  unint64_t v42;
  unint64_t v43;
  Class v44;
  void *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  void **aBlock;
  uint64_t v59;
  uint64_t (*v60)(uint64_t);
  void *v61;
  double (*v62)();
  uint64_t v63;
  char v64[88];

  v56 = a5;
  v54 = a6;
  v55 = a7;
  v10 = sub_1000057B4(&qword_1004BC980);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v53 - v14;
  v16 = type metadata accessor for DispatchPredicate(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (uint64_t *)((char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = sub_10000598C(0, (unint64_t *)&qword_1004BD060, OS_dispatch_queue_ptr);
  *v19 = static OS_dispatch_queue.main.getter(v20, v21, v22, v23, v24, v25, v26, v27, v53, v54, v55, v56, v57, aBlock, v59);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v17 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v16);
  v28 = _dispatchPreconditionTest(_:)(v19);
  (*(void (**)(_QWORD *, uint64_t))(v17 + 8))(v19, v16);
  if ((v28 & 1) != 0)
  {
    v29 = objc_msgSend(objc_allocWithZone((Class)SSMetricsBaseEvent), "init");
    if (a4)
      v30 = String._bridgeToObjectiveC()();
    else
      v30 = 0;
    objc_msgSend(v29, "setPageContext:", v30);

    sub_10000FEB4(a2, (uint64_t)v15, &qword_1004BC980);
    v31 = type metadata accessor for MetricsPageProperties(0);
    v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48);
    if (v32(v15, 1, v31) == 1)
    {
      sub_10000FE2C((uint64_t)v15, &qword_1004BC980);
      v33 = 0;
    }
    else
    {
      v34 = *((_QWORD *)v15 + 1);
      swift_bridgeObjectRetain();
      sub_100034960((uint64_t)v15, type metadata accessor for MetricsPageProperties);
      v33 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v34);
    }
    v35 = String._bridgeToObjectiveC()();
    objc_msgSend(v29, "setProperty:forBodyKey:", v33, v35);
    swift_unknownObjectRelease(v33);

    sub_10000FEB4(a2, (uint64_t)v13, &qword_1004BC980);
    if (v32(v13, 1, v31) == 1)
    {
      sub_10000FE2C((uint64_t)v13, &qword_1004BC980);
      v36 = 0;
    }
    else
    {
      v37 = *((_QWORD *)v13 + 3);
      swift_bridgeObjectRetain();
      sub_100034960((uint64_t)v13, type metadata accessor for MetricsPageProperties);
      v36 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v37);
    }
    objc_msgSend(v29, "setPageType:", v36);

    objc_msgSend(v29, "setEventType:", SSMetricsEventTypeImpressions);
    v38 = sub_1000057B4(&qword_1004C2C50);
    inited = swift_initStackObject(v38, v64);
    *(_OWORD *)(inited + 16) = xmmword_1003C64D0;
    *(_QWORD *)(inited + 32) = 0x6973736572706D69;
    *(_QWORD *)(inited + 40) = 0xEB00000000736E6FLL;
    *(_QWORD *)(inited + 72) = sub_1000057B4(&qword_1004BC988);
    *(_QWORD *)(inited + 48) = a1;
    swift_bridgeObjectRetain();
    v40 = sub_1000B8CE8(inited);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v40);
    objc_msgSend(v29, "addPropertiesWithDictionary:", isa);

    if (v56 != 2)
    {
      v42 = sub_1000C5DE8(v56 & 1, v54, v55);
      if (v42)
      {
        v43 = v42;
        v44 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v43);
        objc_msgSend(v29, "addPropertiesWithDictionary:", v44);

      }
    }
    v45 = v57;
    v46 = *(void **)&v57[OBJC_IVAR____TtC9MusicCore26MetricsReportingController_metricsConfiguration];
    v47 = swift_allocObject(&unk_1004709F8, 32, 7);
    *(_QWORD *)(v47 + 16) = v45;
    *(_QWORD *)(v47 + 24) = v29;
    v62 = sub_1000C6584;
    v63 = v47;
    aBlock = _NSConcreteStackBlock;
    v59 = 1107296256;
    v60 = sub_100011FD0;
    v61 = &unk_100470A10;
    v48 = _Block_copy(&aBlock);
    v49 = v63;
    v50 = v46;
    v51 = v45;
    v52 = v29;
    objc_msgSend(v52, "setStandardPropertiesWith:completionHandler:", v50, v48, swift_release(v49).n128_f64[0]);
    _Block_release(v48);

  }
  else
  {
    __break(1u);
  }
}

double sub_1000C04D4(void *a1, void *a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v8;
  id v9;
  id v10;
  double result;

  sub_10000598C(0, (unint64_t *)&qword_1004BD060, OS_dispatch_queue_ptr);
  v8 = swift_allocObject(a3, 32, 7);
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  v9 = a1;
  v10 = a2;
  static OS_dispatch_queue.asyncOnMainIfNeeded(_:)(a4, v8);
  *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  return result;
}

void MetricsReportingController.recordSearchEvent(_:pageContext:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  id v23;
  id v24;
  NSString v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSString v34;
  NSString v35;
  uint64_t v36;
  uint64_t v37;
  NSString v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSString v43;
  NSString v44;
  id v45;
  uint64_t *v46;
  unint64_t v47;
  id v48;
  NSString v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  NSString v53;
  uint64_t v54;
  id v55;
  NSDictionary v56;
  NSString v57;
  uint64_t v58;
  id v59;
  NSString v60;
  NSString v61;
  uint64_t v62;
  id v63;
  NSArray v64;
  NSString v65;
  NSString v66;
  void *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  id v71;
  char *v72;
  id v73;
  void **aBlock;
  uint64_t v75;
  uint64_t (*v76)(uint64_t);
  void *v77;
  double (*v78)();
  uint64_t v79;
  uint64_t v80;

  v4 = v3;
  v7 = sub_1000057B4(&qword_1004B99B0);
  __chkstk_darwin(v7);
  v9 = (char *)&aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (void ***)((char *)&aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = sub_10000598C(0, (unint64_t *)&qword_1004BD060, OS_dispatch_queue_ptr);
  *v13 = static OS_dispatch_queue.main.getter(v14, v15, v16, v17, v18, v19, v20, v21, aBlock, v75, v76, v77, v78, v79, v80);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  v22 = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v22 & 1) != 0)
  {
    v23 = objc_msgSend(objc_allocWithZone((Class)SSMetricsSearchEvent), "init");
    v24 = v23;
    if (a3)
      v25 = String._bridgeToObjectiveC()();
    else
      v25 = 0;
    objc_msgSend(v23, "setPageContext:", v25);

    v26 = (int *)type metadata accessor for MetricsEvent.Click(0);
    v27 = 0;
    v28 = a1 + v26[10];
    v29 = *(unsigned __int16 *)(v28 + 24);
    if (v29 >> 8 <= 0xFE)
    {
      MetricsEvent.Click.ActionDetails.dictionary.getter(*(_QWORD *)v28, *(_QWORD *)(v28 + 8), *(_QWORD *)(v28 + 16), v29);
      if (v30)
      {
        aBlock = v30;
        v31 = sub_1000057B4(&qword_1004BC990);
        v27 = _bridgeAnythingToObjectiveC<A>(_:)(&aBlock, v31);
        sub_10000FE2C((uint64_t)&aBlock, &qword_1004BC990);
      }
      else
      {
        v27 = 0;
      }
    }
    objc_msgSend(v23, "setActionDetails:", v27);
    swift_unknownObjectRelease(v27);
    MetricsEvent.Click.ActionType.rawValue.getter(*(_BYTE *)(a1 + 17));
    v33 = v32;
    v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v33);
    objc_msgSend(v23, "setActionType:", v34);

    v35 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setTargetIdentifier:", v35);

    sub_10000FEB4(a1 + v26[7], (uint64_t)v9, &qword_1004B99B0);
    v36 = type metadata accessor for URL(0);
    v37 = *(_QWORD *)(v36 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v9, 1, v36) == 1)
    {
      sub_10000FE2C((uint64_t)v9, &qword_1004B99B0);
      v38 = 0;
    }
    else
    {
      URL.absoluteString.getter();
      v40 = v39;
      (*(void (**)(char *, uint64_t))(v37 + 8))(v9, v36);
      v38 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v40);
    }
    objc_msgSend(v23, "setTargetURL:", v38);

    MetricsEvent.TargetType.rawValue.getter(*(_BYTE *)(a1 + 16));
    v42 = v41;
    v43 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v42);
    objc_msgSend(v23, "setTargetType:", v43);

    v44 = *(NSString *)(a1 + v26[13] + 8);
    v45 = v23;
    if (v44)
      v44 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setPageType:", v44);

    v46 = (uint64_t *)(a1 + v26[9]);
    v47 = v46[1];
    if (v47 == 9)
    {
      v48 = v23;
      v49 = 0;
    }
    else
    {
      MetricsEvent.Click.ActionContext.rawValue.getter(*v46, v47);
      v51 = v50;
      v52 = v23;
      v49 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v51);
    }
    v53 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v49, v53);

    swift_unknownObjectRelease(v49);
    v54 = *(_QWORD *)(a1 + v26[15]);
    v55 = v23;
    if (v54)
    {
      swift_bridgeObjectRetain();
      v56.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v54);
    }
    else
    {
      v56.super.isa = 0;
    }
    v57 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v56.super.isa, v57);

    swift_unknownObjectRelease(v56.super.isa);
    v58 = *(_QWORD *)(a1 + v26[12] + 8);
    v59 = v23;
    if (v58)
    {
      swift_bridgeObjectRetain();
      v60 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v58);
    }
    else
    {
      v60 = 0;
    }
    v61 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v60, v61);

    swift_unknownObjectRelease(v60);
    v62 = *(_QWORD *)(a1 + v26[8]);
    v63 = v23;
    if (v62)
    {
      swift_bridgeObjectRetain();
      sub_1000057B4((uint64_t *)&unk_1004BF820);
      v64.super.isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v62);
    }
    else
    {
      v64.super.isa = 0;
    }
    v65 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v64.super.isa, v65);

    swift_unknownObjectRelease(v64.super.isa);
    if (*(_QWORD *)(a1 + v26[17] + 8))
      v66 = String._bridgeToObjectiveC()();
    else
      v66 = 0;
    objc_msgSend(v23, "setSearchTerm:", v66);

    v67 = *(void **)&v4[OBJC_IVAR____TtC9MusicCore26MetricsReportingController_metricsConfiguration];
    v68 = swift_allocObject(&unk_100470A48, 32, 7);
    *(_QWORD *)(v68 + 16) = v4;
    *(_QWORD *)(v68 + 24) = v23;
    v78 = sub_1000C65AC;
    v79 = v68;
    aBlock = _NSConcreteStackBlock;
    v75 = 1107296256;
    v76 = sub_100011FD0;
    v77 = &unk_100470A60;
    v69 = _Block_copy(&aBlock);
    v70 = v79;
    v71 = v67;
    v72 = v4;
    v73 = v23;
    objc_msgSend(v73, "setStandardPropertiesWith:completionHandler:", v71, v69, swift_release(v70).n128_f64[0]);
    _Block_release(v69);

  }
  else
  {
    __break(1u);
  }
}

void MetricsReportingController.recordClickEvent(_:pageContext:sharedListeningContext:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, unint64_t a5, unint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  id v28;
  NSString v29;
  uint64_t v30;
  uint64_t v31;
  NSString v32;
  uint64_t v33;
  uint64_t v34;
  NSString v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  NSString v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  NSArray v46;
  NSString v47;
  uint64_t *v48;
  unint64_t v49;
  id v50;
  NSString v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  NSString v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Class isa;
  uint64_t v62;
  uint64_t inited;
  unint64_t v64;
  Class v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  Class v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  Class v79;
  unint64_t v80;
  unint64_t v81;
  Class v82;
  NSString v83;
  id v84;
  id v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  NSString v90;
  NSString v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  NSString v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  id v102;
  Class v103;
  NSString v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  id v111;
  NSString v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  NSDictionary v117;
  NSString v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  Class v122;
  void *v123;
  void *v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  id v128;
  id v129;
  id v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t (*v135)(char *, uint64_t, uint64_t);
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143[80];
  _QWORD aBlock[5];
  uint64_t v145;

  v138 = a3;
  v132 = a5;
  v133 = a6;
  v9 = sub_1000057B4(&qword_1004B99B0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v131 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v131 - v13;
  v15 = type metadata accessor for DispatchPredicate(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (uint64_t *)((char *)&v131 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = sub_10000598C(0, (unint64_t *)&qword_1004BD060, OS_dispatch_queue_ptr);
  *v18 = static OS_dispatch_queue.main.getter(v19, v20, v21, v22, v23, v24, v25, v26, v131, v132, v133, v134, v135, v136, v137);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  v27 = _dispatchPreconditionTest(_:)(v18);
  (*(void (**)(_QWORD *, uint64_t))(v16 + 8))(v18, v15);
  if ((v27 & 1) != 0)
  {
    v134 = a2;
    v28 = objc_msgSend(objc_allocWithZone((Class)SSMetricsClickEvent), "init");
    v29 = String._bridgeToObjectiveC()();
    objc_msgSend(v28, "setTargetIdentifier:", v29);

    MetricsEvent.TargetType.rawValue.getter(*(_BYTE *)(a1 + 16));
    v31 = v30;
    v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v31);
    objc_msgSend(v28, "setTargetType:", v32);

    MetricsEvent.Click.ActionType.rawValue.getter(*(_BYTE *)(a1 + 17));
    v34 = v33;
    v35 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v34);
    objc_msgSend(v28, "setActionType:", v35);

    v36 = (int *)type metadata accessor for MetricsEvent.Click(0);
    sub_10000FEB4(a1 + v36[7], (uint64_t)v14, &qword_1004B99B0);
    v37 = type metadata accessor for URL(0);
    v38 = *(_QWORD *)(v37 - 8);
    v135 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
    v39 = v135(v14, 1, v37);
    v136 = v37;
    v131 = v38;
    if (v39 == 1)
    {
      sub_10000FE2C((uint64_t)v14, &qword_1004B99B0);
      v40 = 0;
    }
    else
    {
      URL.absoluteString.getter();
      v41 = v38;
      v43 = v42;
      (*(void (**)(char *, uint64_t))(v41 + 8))(v14, v37);
      v40 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v43);
    }
    objc_msgSend(v28, "setTargetURL:", v40, v131);

    v44 = *(_QWORD *)(a1 + v36[8]);
    v45 = v28;
    if (v44)
    {
      swift_bridgeObjectRetain();
      sub_1000057B4((uint64_t *)&unk_1004BF820);
      v46.super.isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v44);
    }
    else
    {
      v46.super.isa = 0;
    }
    v47 = String._bridgeToObjectiveC()();
    objc_msgSend(v28, "setProperty:forBodyKey:", v46.super.isa, v47);

    swift_unknownObjectRelease(v46.super.isa);
    v48 = (uint64_t *)(a1 + v36[9]);
    v49 = v48[1];
    if (v49 == 9)
    {
      v50 = v28;
      v51 = 0;
    }
    else
    {
      MetricsEvent.Click.ActionContext.rawValue.getter(*v48, v49);
      v53 = v52;
      v54 = v28;
      v51 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v53);
    }
    v55 = String._bridgeToObjectiveC()();
    objc_msgSend(v28, "setProperty:forBodyKey:", v51, v55);

    swift_unknownObjectRelease(v51);
    v56 = a1 + v36[10];
    v57 = *(unsigned __int16 *)(v56 + 24);
    if (v57 >> 8 <= 0xFE
      && (MetricsEvent.Click.ActionDetails.dictionary.getter(*(_QWORD *)v56, *(_QWORD *)(v56 + 8), *(_QWORD *)(v56 + 16), v57), v58))
    {
      aBlock[0] = v58;
      v59 = sub_1000057B4(&qword_1004BC990);
      v60 = _bridgeAnythingToObjectiveC<A>(_:)(aBlock, v59);
      sub_10000FE2C((uint64_t)aBlock, &qword_1004BC990);
    }
    else
    {
      v60 = 0;
    }
    objc_msgSend(v28, "setActionDetails:", v60);
    swift_unknownObjectRelease(v60);
    isa = *(Class *)(a1 + v36[11]);
    v137 = v12;
    if (isa)
    {
      sub_1000057B4((uint64_t *)&unk_1004BCFF0);
      isa = Array._bridgeToObjectiveC()().super.isa;
    }
    objc_msgSend(v28, "setImpressions:", isa);
    swift_unknownObjectRelease(isa);
    if (*(_BYTE *)(a1 + v36[18]) == 1)
    {
      v62 = sub_1000057B4(&qword_1004C2C50);
      inited = swift_initStackObject(v62, &v140);
      *(_OWORD *)(inited + 16) = xmmword_1003C64D0;
      strcpy((char *)(inited + 32), "sharedContent");
      *(_WORD *)(inited + 46) = -4864;
      *(_QWORD *)(inited + 72) = &type metadata for Bool;
      *(_BYTE *)(inited + 48) = 1;
      v64 = sub_1000B8CE8(inited);
      v65 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v64);
      objc_msgSend(v28, "addPropertiesWithDictionary:", v65);

    }
    v66 = (uint64_t *)(a1 + v36[19]);
    v67 = v66[1];
    if (v67)
    {
      v68 = *v66;
      v69 = sub_1000057B4(&qword_1004C2C50);
      v70 = swift_initStackObject(v69, &v141);
      *(_OWORD *)(v70 + 16) = xmmword_1003C64D0;
      *(_QWORD *)(v70 + 32) = 0xD000000000000013;
      *(_QWORD *)(v70 + 40) = 0x80000001003A8A20;
      *(_QWORD *)(v70 + 72) = &type metadata for String;
      *(_QWORD *)(v70 + 48) = v68;
      *(_QWORD *)(v70 + 56) = v67;
      swift_bridgeObjectRetain();
      v71 = sub_1000B8CE8(v70);
      v72 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v71);
      objc_msgSend(v28, "addPropertiesWithDictionary:", v72);

    }
    v73 = (uint64_t *)(a1 + v36[17]);
    v74 = v73[1];
    if (v74)
    {
      v75 = *v73;
      v76 = sub_1000057B4(&qword_1004C2C50);
      v77 = swift_initStackObject(v76, &v142);
      *(_OWORD *)(v77 + 16) = xmmword_1003C64D0;
      *(_QWORD *)(v77 + 32) = 0x6554686372616573;
      *(_QWORD *)(v77 + 40) = 0xEA00000000006D72;
      *(_QWORD *)(v77 + 72) = &type metadata for String;
      *(_QWORD *)(v77 + 48) = v75;
      *(_QWORD *)(v77 + 56) = v74;
      swift_bridgeObjectRetain();
      v78 = sub_1000B8CE8(v77);
      v79 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v78);
      objc_msgSend(v28, "addPropertiesWithDictionary:", v79);

    }
    if (a4 != 2)
    {
      v80 = sub_1000C5DE8(a4 & 1, v132, v133);
      if (v80)
      {
        v81 = v80;
        v82 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v81);
        objc_msgSend(v28, "addPropertiesWithDictionary:", v82);

      }
    }
    v83 = (NSString)v138;
    if (v138)
    {
      v84 = v28;
      v83 = String._bridgeToObjectiveC()();
    }
    else
    {
      v85 = v28;
    }
    objc_msgSend(v28, "setPageContext:", v83);

    v86 = (uint64_t *)(a1 + v36[12]);
    v88 = *v86;
    v87 = v86[1];
    if (v87)
    {
      v89 = v28;
      swift_bridgeObjectRetain();
      v90 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v87);
      v91 = String._bridgeToObjectiveC()();
      objc_msgSend(v89, "setProperty:forBodyKey:", v90, v91);

    }
    v92 = (uint64_t *)(a1 + v36[13]);
    v93 = *v92;
    v94 = v92[1];
    if (v94)
    {
      v95 = v28;
      v96 = String._bridgeToObjectiveC()();
      objc_msgSend(v95, "setPageType:", v96);

    }
    v138 = OBJC_IVAR____TtC9MusicCore26MetricsReportingController_metricsConfiguration;
    v97 = *(void **)&v139[OBJC_IVAR____TtC9MusicCore26MetricsReportingController_metricsConfiguration];
    if (v97)
    {
      v98 = sub_1000057B4(&qword_1004BC978);
      v99 = swift_allocObject(v98, 96, 7);
      *(_OWORD *)(v99 + 16) = xmmword_1003C6BD0;
      v100 = sub_1000057B4(&qword_1004BAE98);
      *(_QWORD *)(v99 + 32) = v93;
      *(_QWORD *)(v99 + 40) = v94;
      *(_QWORD *)(v99 + 88) = v100;
      *(_QWORD *)(v99 + 56) = v100;
      *(_QWORD *)(v99 + 64) = v88;
      *(_QWORD *)(v99 + 72) = v87;
      swift_bridgeObjectRetain();
      v101 = v28;
      swift_bridgeObjectRetain();
      v102 = v97;
      v103 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v99);
      v104 = objc_msgSend(v102, "compoundStringWithElements:", v103);

      if (v104)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
        v106 = v105;

        v104 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v106);
      }
    }
    else
    {
      v107 = v28;
      v104 = 0;
    }
    v109 = v136;
    v108 = (uint64_t)v137;
    objc_msgSend(v28, "setPageDescription:", v104);

    sub_10000FEB4(a1 + v36[14], v108, &qword_1004B99B0);
    v110 = v135((char *)v108, 1, v109);
    v111 = v28;
    if (v110 == 1)
    {
      sub_10000FE2C(v108, &qword_1004B99B0);
      v112 = 0;
    }
    else
    {
      URL.absoluteString.getter();
      v114 = v113;
      (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v108, v109);
      v112 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v114);
    }
    objc_msgSend(v111, "setPageURL:", v112);

    v115 = *(_QWORD *)(a1 + v36[15]);
    v116 = v111;
    if (v115)
    {
      swift_bridgeObjectRetain();
      v117.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v115);
    }
    else
    {
      v117.super.isa = 0;
    }
    v118 = String._bridgeToObjectiveC()();
    objc_msgSend(v111, "setProperty:forBodyKey:", v117.super.isa, v118);

    swift_unknownObjectRelease(v117.super.isa);
    if ((*(_BYTE *)(a1 + v36[16]) & 1) == 0)
    {
      v119 = sub_1000057B4(&qword_1004C2C50);
      v120 = swift_initStackObject(v119, v143);
      *(_OWORD *)(v120 + 16) = xmmword_1003C64D0;
      *(_QWORD *)(v120 + 32) = 0x7073694465676170;
      *(_QWORD *)(v120 + 40) = 0xEF6570795479616CLL;
      *(_QWORD *)(v120 + 72) = &type metadata for String;
      *(_QWORD *)(v120 + 48) = 0x7765695664726163;
      *(_QWORD *)(v120 + 56) = 0xE800000000000000;
      v121 = sub_1000B8CE8(v120);
      v122 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v121);
      objc_msgSend(v111, "addPropertiesWithDictionary:", v122);

    }
    v123 = v139;
    v124 = *(void **)&v139[v138];
    v125 = swift_allocObject(&unk_100470A98, 32, 7);
    *(_QWORD *)(v125 + 16) = v123;
    *(_QWORD *)(v125 + 24) = v111;
    aBlock[4] = sub_1000C65D4;
    v145 = v125;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100011FD0;
    aBlock[3] = &unk_100470AB0;
    v126 = _Block_copy(aBlock);
    v127 = v145;
    v128 = v124;
    v129 = v123;
    v130 = v111;
    objc_msgSend(v130, "setStandardPropertiesWith:completionHandler:", v128, v126, swift_release(v127).n128_f64[0]);
    _Block_release(v126);

  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall MetricsReportingController.recordLoadUrlEvent(_:)(MusicCore::MetricsEvent::LoadUrl *a1)
{
  char *v1;
  id v3;
  _BOOL8 cachedResponse;
  id v5;
  id v6;
  NSString v7;
  NSString v8;
  NSString v9;
  NSString v10;
  NSString v11;
  NSString v12;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v15;
  uint64_t inited;
  unint64_t v17;
  Class isa;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  char *v25;
  uint64_t v26;
  _QWORD aBlock[5];
  uint64_t v28;
  _BYTE v29[16];
  _BYTE v30[16];
  _BYTE v31[16];
  _BYTE v32[16];
  _BYTE v33[16];
  _BYTE v34[16];
  _BYTE v35[16];
  _BYTE v36[16];
  _BYTE v37[16];
  _BYTE v38[16];
  _BYTE v39[16];
  _BYTE v40[16];
  _BYTE v41[16];
  _BYTE v42[16];
  _BYTE v43[16];
  _BYTE v44[16];
  double v45;
  char v46;
  double v47;
  char v48;
  double v49;
  char v50;
  double v51;
  char v52;
  double v53;
  char v54;
  double v55;
  char v56;
  double v57;
  char v58;
  double v59;
  char v60;
  double v61;
  char v62;
  _QWORD v63[2];
  uint64_t v64;
  char v65;
  _QWORD v66[2];
  _QWORD v67[2];
  _QWORD v68[2];
  _QWORD v69[2];
  _QWORD v70[2];

  v3 = objc_msgSend(objc_allocWithZone((Class)SSMetricsLoadURLEvent), "init");
  cachedResponse = a1->cachedResponse;
  objc_msgSend(v3, "setCachedResponse:", cachedResponse);
  v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v6 = objc_msgSend(v5, "bundleIdentifier");

  objc_msgSend(v3, "setOriginalApp:", v6);
  sub_10000FD10((uint64_t)a1, (uint64_t)v44, &qword_1004BC998);
  sub_10000FD10((uint64_t)v44, (uint64_t)&v45, &qword_1004BC998);
  if ((v46 & 1) == 0)
    objc_msgSend(v3, "setDomainLookupStartTime:", v45);
  sub_10000FD10((uint64_t)&a1->domainLookupEndTime, (uint64_t)v43, &qword_1004BC998);
  sub_10000FD10((uint64_t)v43, (uint64_t)&v47, &qword_1004BC998);
  if ((v48 & 1) == 0)
    objc_msgSend(v3, "setDomainLookupEndTime:", v47);
  sub_10000FD10((uint64_t)&a1->connectionStartTime, (uint64_t)v42, &qword_1004BC998);
  sub_10000FD10((uint64_t)v42, (uint64_t)&v49, &qword_1004BC998);
  if ((v50 & 1) == 0)
    objc_msgSend(v3, "setConnectionStartTime:", v49);
  sub_10000FD10((uint64_t)&a1->secureConnectionStartTime, (uint64_t)v41, &qword_1004BC998);
  sub_10000FD10((uint64_t)v41, (uint64_t)&v51, &qword_1004BC998);
  if ((v52 & 1) == 0)
    objc_msgSend(v3, "setSecureConnectionStartTime:", v51);
  sub_10000FD10((uint64_t)&a1->connectionEndTime, (uint64_t)v40, &qword_1004BC998);
  sub_10000FD10((uint64_t)v40, (uint64_t)&v53, &qword_1004BC998);
  if ((v54 & 1) == 0)
    objc_msgSend(v3, "setConnectionEndTime:", v53);
  sub_10000FD10((uint64_t)&a1->requestStartTime, (uint64_t)v39, &qword_1004BC998);
  sub_10000FD10((uint64_t)v39, (uint64_t)&v55, &qword_1004BC998);
  if ((v56 & 1) == 0)
    objc_msgSend(v3, "setRequestStartTime:", v55);
  sub_10000FD10((uint64_t)&a1->responseStartTime, (uint64_t)v38, &qword_1004BC998);
  sub_10000FD10((uint64_t)v38, (uint64_t)&v57, &qword_1004BC998);
  if ((v58 & 1) == 0)
    objc_msgSend(v3, "setResponseStartTime:", v57);
  sub_10000FD10((uint64_t)&a1->responseEndTime, (uint64_t)v37, &qword_1004BC998);
  sub_10000FD10((uint64_t)v37, (uint64_t)&v59, &qword_1004BC998);
  if ((v60 & 1) == 0)
    objc_msgSend(v3, "setResponseEndTime:", v59);
  sub_10000FD10((uint64_t)&a1->fetchStartTime, (uint64_t)v36, &qword_1004BC998);
  sub_10000FD10((uint64_t)v36, (uint64_t)&v61, &qword_1004BC998);
  if ((v62 & 1) == 0)
    objc_msgSend(v3, "setFetchStartTime:", v61);
  sub_10000FD10((uint64_t)&a1->requestUrl, (uint64_t)v35, &qword_1004BAE98);
  sub_10000FD10((uint64_t)v35, (uint64_t)v63, &qword_1004BAE98);
  if (v63[1])
  {
    v7 = String._bridgeToObjectiveC()();
    objc_msgSend(v3, "setRequestURL:", v7);

  }
  sub_10000FD10((uint64_t)&a1->redirectCount, (uint64_t)v34, &qword_1004BC9A0);
  sub_10000FD10((uint64_t)v34, (uint64_t)&v64, &qword_1004BC9A0);
  if ((v65 & 1) == 0)
  {
    if (v64 < 0)
      goto LABEL_41;
    objc_msgSend(v3, "setRedirectCount:");
  }
  sub_10000FD10((uint64_t)&a1->appleTimingApp, (uint64_t)v33, &qword_1004BAE98);
  sub_10000FD10((uint64_t)v33, (uint64_t)v66, &qword_1004BAE98);
  if (v66[1])
  {
    v8 = String._bridgeToObjectiveC()();
    objc_msgSend(v3, "setAppleTimingApp:", v8);

  }
  sub_10000FD10((uint64_t)&a1->connectionType, (uint64_t)v32, &qword_1004BAE98);
  sub_10000FD10((uint64_t)v32, (uint64_t)v67, &qword_1004BAE98);
  if (v67[1])
  {
    v9 = String._bridgeToObjectiveC()();
    objc_msgSend(v3, "setConnectionType:", v9);

  }
  sub_10000FD10((uint64_t)&a1->edgeNodeCacheStatus, (uint64_t)v31, &qword_1004BAE98);
  sub_10000FD10((uint64_t)v31, (uint64_t)v68, &qword_1004BAE98);
  if (v68[1])
  {
    v10 = String._bridgeToObjectiveC()();
    objc_msgSend(v3, "setEdgeNodeCacheStatus:", v10);

  }
  sub_10000FD10((uint64_t)&a1->responseDate, (uint64_t)v30, &qword_1004BAE98);
  sub_10000FD10((uint64_t)v30, (uint64_t)v69, &qword_1004BAE98);
  if (v69[1])
  {
    v11 = String._bridgeToObjectiveC()();
    objc_msgSend(v3, "setResponseDate:", v11);

  }
  sub_10000FD10((uint64_t)&a1->resolvedIPAddress, (uint64_t)v29, &qword_1004BAE98);
  sub_10000FD10((uint64_t)v29, (uint64_t)v70, &qword_1004BAE98);
  if (v70[1])
  {
    v12 = String._bridgeToObjectiveC()();
    objc_msgSend(v3, "setResolvedIPAddress:", v12);

  }
  object = a1->environmentDataCenter.value._object;
  if (object)
  {
    countAndFlagsBits = a1->environmentDataCenter.value._countAndFlagsBits;
    v15 = sub_1000057B4(&qword_1004C2C50);
    inited = swift_initStackObject(v15, &v26);
    *(_OWORD *)(inited + 16) = xmmword_1003C64D0;
    *(_QWORD *)(inited + 32) = 0xD000000000000015;
    *(_QWORD *)(inited + 40) = 0x80000001003A8A40;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = countAndFlagsBits;
    *(_QWORD *)(inited + 56) = object;
    swift_bridgeObjectRetain();
    v17 = sub_1000B8CE8(inited);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v17);
    objc_msgSend(v3, "addPropertiesWithDictionary:", isa);

  }
  objc_msgSend(v3, "setCachedResponse:", cachedResponse);
  objc_msgSend(v3, "setConnectionReused:", a1->connectionReused);
  objc_msgSend(v3, "setStatusCode:", a1->statusCode);
  if (a1->requestMessageSize < 0)
  {
    __break(1u);
  }
  else
  {
    objc_msgSend(v3, "setRequestMessageSize:");
    if ((a1->responseMessageSize & 0x8000000000000000) == 0)
    {
      objc_msgSend(v3, "setResponseMessageSize:");
      v19 = *(void **)&v1[OBJC_IVAR____TtC9MusicCore26MetricsReportingController_metricsConfiguration];
      v20 = swift_allocObject(&unk_100470AE8, 32, 7);
      *(_QWORD *)(v20 + 16) = v3;
      *(_QWORD *)(v20 + 24) = v1;
      aBlock[4] = sub_1000C65FC;
      v28 = v20;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100011FD0;
      aBlock[3] = &unk_100470B00;
      v21 = _Block_copy(aBlock);
      v22 = v28;
      v23 = v19;
      v24 = v3;
      v25 = v1;
      objc_msgSend(v24, "setStandardPropertiesWith:completionHandler:", v23, v21, swift_release(v22).n128_f64[0]);
      _Block_release(v21);

      return;
    }
  }
  __break(1u);
LABEL_41:
  __break(1u);
}

void sub_1000C1EEC(void *a1)
{
  if (sub_1000CAA60())
    sub_1000C4C70(a1, (uint64_t)CFRange.init(_:), 0);
}

void MetricsReportingController.recordComponentRenderEvent(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  id v15;
  uint64_t v16;
  NSString v17;
  NSString v18;
  NSString v19;
  uint64_t v20;
  uint64_t v21;
  NSString v22;
  id v23;
  NSString v24;
  id v25;
  NSString v26;
  id v27;
  NSString v28;
  id v29;
  NSString v30;
  id v31;
  NSString v32;
  id v33;
  NSString v34;
  _QWORD v35[7];
  char v36;
  char v37;
  unsigned __int8 v38;
  char v39;

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (_QWORD *)((char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_10000598C(0, (unint64_t *)&qword_1004BD060, OS_dispatch_queue_ptr);
  *v5 = static OS_dispatch_queue.main.getter(v6, v7, v8, v9, v10, v11, v12, v13, v35[0], v35[1], v35[2], v35[3], v35[4], v35[5], v35[6]);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v14 = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v14 & 1) != 0)
  {
    v15 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for Music_SSMetricsComponentRenderEvent()), "init");
    v16 = *(_QWORD *)(a1 + 8);
    if (v16)
    {
      swift_bridgeObjectRetain();
      v17 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v16);
    }
    else
    {
      v17 = 0;
    }
    v18 = String._bridgeToObjectiveC()();
    objc_msgSend(v15, "setProperty:forBodyKey:", v17, v18);
    swift_unknownObjectRelease(v17);

    sub_10000FD10(a1 + 16, (uint64_t)&v37, &qword_1004BC9A8);
    sub_10000FD10((uint64_t)&v37, (uint64_t)&v38, &qword_1004BC9A8);
    if (v38 == 24)
    {
      v19 = 0;
    }
    else
    {
      MetricsEvent.TargetType.rawValue.getter(v38);
      v21 = v20;
      v19 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v21);
    }
    v22 = String._bridgeToObjectiveC()();
    objc_msgSend(v15, "setProperty:forBodyKey:", v19, v22);
    swift_unknownObjectRelease(v19);

    v23 = *(id *)(a1 + 24);
    v24 = String._bridgeToObjectiveC()();
    objc_msgSend(v15, "setProperty:forBodyKey:", v23, v24);

    v25 = *(id *)(a1 + 32);
    v26 = String._bridgeToObjectiveC()();
    objc_msgSend(v15, "setProperty:forBodyKey:", v25, v26);

    v27 = *(id *)(a1 + 40);
    v28 = String._bridgeToObjectiveC()();
    objc_msgSend(v15, "setProperty:forBodyKey:", v27, v28);

    v29 = *(id *)(a1 + 48);
    v30 = String._bridgeToObjectiveC()();
    objc_msgSend(v15, "setProperty:forBodyKey:", v29, v30);

    v31 = *(id *)(a1 + 56);
    v32 = String._bridgeToObjectiveC()();
    objc_msgSend(v15, "setProperty:forBodyKey:", v31, v32);

    v33 = *(id *)(a1 + 64);
    v34 = String._bridgeToObjectiveC()();
    objc_msgSend(v15, "setProperty:forBodyKey:", v33, v34);

    sub_10000FD10(a1 + 72, (uint64_t)&v36, &qword_1004BC9B0);
    sub_10000FD10((uint64_t)&v36, (uint64_t)&v39, &qword_1004BC9B0);
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x1000C249CLL);
}

void MetricsReportingController.recordPageRenderEvent<A>(_:pageContext:)(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  char *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  id v23;
  void *v24;
  char v25;
  id v26;
  uint64_t v27;
  double v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  NSString v33;
  uint64_t v34;
  id v35;
  id v36;
  NSString v37;
  uint64_t v38;
  id v39;
  id v40;
  NSString v41;
  uint64_t v42;
  id v43;
  id v44;
  NSString v45;
  uint64_t v46;
  id v47;
  id v48;
  NSString v49;
  uint64_t v50;
  id v51;
  id v52;
  NSString v53;
  uint64_t v54;
  id v55;
  id v56;
  NSString v57;
  double v58;
  id v59;
  id v60;
  uint64_t v61;
  NSString v62;
  double v63;
  id v64;
  id v65;
  uint64_t v66;
  NSString v67;
  NSString v68;
  double v69;
  id v70;
  id v71;
  uint64_t v72;
  NSString v73;
  unsigned __int8 v74;
  NSString v75;
  uint64_t v76;
  NSString v77;
  id *v78;
  id v79;
  uint64_t v80;
  NSString v81;
  id v82;
  uint64_t v83;
  NSString v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  id v92;
  NSString v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  NSString v98;
  uint64_t v99;
  NSString v100;
  void *v101;
  void *v102;
  uint64_t v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  __n128 v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  void *v114;
  char *v115;
  uint64_t v116;
  id v117;
  _QWORD v118[3];
  _QWORD v119[3];
  _QWORD v120[3];
  _QWORD v121[3];
  _QWORD v122[3];
  _QWORD v123[3];
  char v124[24];
  char v125[32];

  v4 = v3;
  v112 = a2;
  v7 = sub_1000057B4(&qword_1004B99B0);
  __chkstk_darwin(v7);
  v9 = (char *)&v111 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v111 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = sub_10000598C(0, (unint64_t *)&qword_1004BD060, OS_dispatch_queue_ptr);
  *v13 = static OS_dispatch_queue.main.getter(v14, v15, v16, v17, v18, v19, v20, v21, v111, v112, v113, v114, v115, v116, v117);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  v22 = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v22 & 1) != 0)
  {
    v113 = v9;
    v115 = v4;
    v23 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for Music_SSMetricsPageRenderEvent()), "init");
    swift_beginAccess(a1 + 16, v125, 0, 0);
    v24 = *(void **)(a1 + 16);
    swift_beginAccess(a1 + 24, v124, 0, 0);
    v25 = *(_BYTE *)(a1 + 32);
    v114 = a3;
    if ((v25 & 1) != 0)
    {
      v26 = v24;
      v27 = 0;
    }
    else
    {
      v28 = *(double *)(a1 + 24);
      v29 = (void *)objc_opt_self(AMSMetrics);
      v30 = v24;
      v31 = objc_msgSend(v29, "serverTimeFromTimeInterval:", v28);
      v32 = objc_msgSend(v31, "unsignedLongLongValue");

      v123[0] = v32;
      v27 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v123, &type metadata for UInt64);
    }
    v33 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v27, v33);
    swift_unknownObjectRelease(v27);

    swift_beginAccess(a1 + 40, v123, 0, 0);
    v34 = 0;
    if ((*(_BYTE *)(a1 + 48) & 1) == 0)
    {
      v35 = objc_msgSend((id)objc_opt_self(AMSMetrics), "serverTimeFromTimeInterval:", *(double *)(a1 + 40));
      v36 = objc_msgSend(v35, "unsignedLongLongValue");

      v122[0] = v36;
      v34 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v122, &type metadata for UInt64);
    }
    v37 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v34, v37);
    swift_unknownObjectRelease(v34);

    swift_beginAccess(a1 + 56, v122, 0, 0);
    v38 = 0;
    if ((*(_BYTE *)(a1 + 64) & 1) == 0)
    {
      v39 = objc_msgSend((id)objc_opt_self(AMSMetrics), "serverTimeFromTimeInterval:", *(double *)(a1 + 56));
      v40 = objc_msgSend(v39, "unsignedLongLongValue");

      v121[0] = v40;
      v38 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v121, &type metadata for UInt64);
    }
    v41 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v38, v41);
    swift_unknownObjectRelease(v38);

    swift_beginAccess(a1 + 72, v121, 0, 0);
    v42 = 0;
    if ((*(_BYTE *)(a1 + 80) & 1) == 0)
    {
      v43 = objc_msgSend((id)objc_opt_self(AMSMetrics), "serverTimeFromTimeInterval:", *(double *)(a1 + 72));
      v44 = objc_msgSend(v43, "unsignedLongLongValue");

      v120[0] = v44;
      v42 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v120, &type metadata for UInt64);
    }
    v45 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v42, v45);
    swift_unknownObjectRelease(v42);

    swift_beginAccess(a1 + 88, v120, 0, 0);
    v46 = 0;
    if ((*(_BYTE *)(a1 + 96) & 1) == 0)
    {
      v47 = objc_msgSend((id)objc_opt_self(AMSMetrics), "serverTimeFromTimeInterval:", *(double *)(a1 + 88));
      v48 = objc_msgSend(v47, "unsignedLongLongValue");

      v119[0] = v48;
      v46 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v119, &type metadata for UInt64);
    }
    v49 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v46, v49);
    swift_unknownObjectRelease(v46);

    swift_beginAccess(a1 + 104, v119, 0, 0);
    v50 = 0;
    if ((*(_BYTE *)(a1 + 112) & 1) == 0)
    {
      v51 = objc_msgSend((id)objc_opt_self(AMSMetrics), "serverTimeFromTimeInterval:", *(double *)(a1 + 104));
      v52 = objc_msgSend(v51, "unsignedLongLongValue");

      v118[0] = v52;
      v50 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v118, &type metadata for UInt64);
    }
    v53 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v50, v53);
    swift_unknownObjectRelease(v50);

    swift_beginAccess(a1 + 120, v118, 0, 0);
    v54 = 0;
    if ((*(_BYTE *)(a1 + 128) & 1) == 0)
    {
      v55 = objc_msgSend((id)objc_opt_self(AMSMetrics), "serverTimeFromTimeInterval:", *(double *)(a1 + 120));
      v56 = objc_msgSend(v55, "unsignedLongLongValue");

      v116 = (uint64_t)v56;
      v54 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v116, &type metadata for UInt64);
    }
    v57 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v54, v57);
    swift_unknownObjectRelease(v54);

    if (v24)
    {
      objc_msgSend(v24, "requestStartTime");
      v59 = objc_msgSend((id)objc_opt_self(AMSMetrics), "serverTimeFromTimeInterval:", v58);
      v60 = objc_msgSend(v59, "unsignedLongLongValue");

      v116 = (uint64_t)v60;
      v61 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v116, &type metadata for UInt64);
      v62 = String._bridgeToObjectiveC()();
      objc_msgSend(v23, "setProperty:forBodyKey:", v61, v62);
      swift_unknownObjectRelease(v61);

      objc_msgSend(v24, "responseStartTime");
      v64 = objc_msgSend((id)objc_opt_self(AMSMetrics), "serverTimeFromTimeInterval:", v63);
      v65 = objc_msgSend(v64, "unsignedLongLongValue");

      v116 = (uint64_t)v65;
      v66 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v116, &type metadata for UInt64);
    }
    else
    {
      v67 = String._bridgeToObjectiveC()();
      objc_msgSend(v23, "setProperty:forBodyKey:", 0, v67);

      v66 = 0;
    }
    v68 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v66, v68);
    swift_unknownObjectRelease(v66);

    if (v24)
    {
      objc_msgSend(v24, "responseEndTime");
      v70 = objc_msgSend((id)objc_opt_self(AMSMetrics), "serverTimeFromTimeInterval:", v69);
      v71 = objc_msgSend(v70, "unsignedLongLongValue");

      v116 = (uint64_t)v71;
      v72 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v116, &type metadata for UInt64);
      v73 = String._bridgeToObjectiveC()();
      objc_msgSend(v23, "setProperty:forBodyKey:", v72, v73);
      swift_unknownObjectRelease(v72);

      v74 = objc_msgSend(v24, "cachedResponse");
    }
    else
    {
      v75 = String._bridgeToObjectiveC()();
      objc_msgSend(v23, "setProperty:forBodyKey:", 0, v75);

      v74 = 0;
    }
    LOBYTE(v116) = v74;
    v76 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v116, &type metadata for Bool);
    v77 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v76, v77);
    swift_unknownObjectRelease(v76);

    v78 = (id *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 160));
    v79 = v78[1];
    v116 = (uint64_t)*v78;
    v117 = v79;
    swift_bridgeObjectRetain_n(v79, 2);
    v80 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v116, &type metadata for String);
    v81 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v80, v81);
    swift_bridgeObjectRelease(v79);
    swift_unknownObjectRelease(v80);

    v82 = v78[3];
    v116 = (uint64_t)v78[2];
    v117 = v82;
    swift_bridgeObjectRetain_n(v82, 2);
    v83 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v116, &type metadata for String);
    v84 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v83, v84);
    swift_bridgeObjectRelease(v82);
    swift_unknownObjectRelease(v83);

    v85 = type metadata accessor for MetricsPageProperties(0);
    v86 = (uint64_t)v113;
    sub_10000FEB4((uint64_t)v78 + *(int *)(v85 + 24), (uint64_t)v113, &qword_1004B99B0);
    v87 = type metadata accessor for URL(0);
    v88 = *(_QWORD *)(v87 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(v86, 1, v87) == 1)
    {
      sub_10000FE2C(v86, &qword_1004B99B0);
      v89 = 0;
      v90 = 0;
    }
    else
    {
      v91 = URL.absoluteString.getter();
      v90 = v92;
      (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v86, v87);
      v116 = v91;
      v117 = v90;
      swift_bridgeObjectRetain();
      v89 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v116, &type metadata for String);
    }
    v93 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v89, v93);
    swift_bridgeObjectRelease(v90);
    swift_unknownObjectRelease(v89);

    v94 = *(uint64_t *)((char *)v78 + *(int *)(v85 + 28));
    if (v94)
    {
      v116 = *(uint64_t *)((char *)v78 + *(int *)(v85 + 28));
      swift_bridgeObjectRetain_n(v94, 2);
      v95 = sub_1000057B4(&qword_1004BC990);
      v96 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v116, v95);
    }
    else
    {
      v96 = 0;
    }
    v97 = v114;
    v98 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v96, v98);
    swift_bridgeObjectRelease(v94);
    swift_unknownObjectRelease(v96);

    if (v97)
    {
      v116 = v112;
      v117 = v97;
      swift_bridgeObjectRetain_n(v97, 2);
      v99 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v116, &type metadata for String);
    }
    else
    {
      v99 = 0;
    }
    v100 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "setProperty:forBodyKey:", v99, v100);
    swift_bridgeObjectRelease(v97);
    swift_unknownObjectRelease(v99);

    v101 = v115;
    v102 = *(void **)&v115[OBJC_IVAR____TtC9MusicCore26MetricsReportingController_metricsConfiguration];
    v103 = swift_allocObject(&unk_100470B88, 32, 7);
    *(_QWORD *)(v103 + 16) = v101;
    *(_QWORD *)(v103 + 24) = v23;
    v104 = v102;
    v105 = v23;
    v106 = v104;
    v107 = v105;
    swift_retain(v103);
    v108 = v101;
    v109 = v107;
    sub_1000CD570(v102, v109, v109, (uint64_t)v102, (uint64_t)sub_1000C664C, v103);

    swift_release_n(v103, 2, v110);
  }
  else
  {
    __break(1u);
  }
}

void sub_1000C3204(uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(void *))
{
  if ((a4(a2) & 1) != 0)
    sub_1000C4C70(a2, (uint64_t)CFRange.init(_:), 0);
}

void MetricsReportingController.recordCustomEvent(with:properties:sharedListeningContext:shouldSuppressUserInfo:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, unint64_t a5, unint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  id v25;
  NSString v26;
  Class isa;
  unint64_t v28;
  unint64_t v29;
  Class v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v33 = a6;
  v32 = a5;
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (uint64_t *)((char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = sub_10000598C(0, (unint64_t *)&qword_1004BD060, OS_dispatch_queue_ptr);
  *v15 = static OS_dispatch_queue.main.getter(v16, v17, v18, v19, v20, v21, v22, v23, v31, v32, v33, v34, v35, v36, v37);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  v24 = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
  if ((v24 & 1) != 0)
  {
    v25 = objc_msgSend(objc_allocWithZone((Class)SSMetricsCustomEvent), "init");
    v26 = String._bridgeToObjectiveC()();
    objc_msgSend(v25, "setTopic:", v26);

    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v25, "addPropertiesWithDictionary:", isa);

    objc_msgSend(v25, "setShouldSuppressUserInfo:", a7 & 1);
    objc_msgSend(v25, "setShouldSuppressDSIDHeader:", a7 & 1);
    if (a4 != 2)
    {
      v28 = sub_1000C5DE8(a4 & 1, v32, v33);
      if (v28)
      {
        v29 = v28;
        v30 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v29);
        objc_msgSend(v25, "addPropertiesWithDictionary:", v30);

      }
    }
    sub_1000C4C70(v25, a8, a9);

  }
  else
  {
    __break(1u);
  }
}

void MetricsReportingController.recordCarPlayCustomEvent(with:properties:shouldSuppressUserInfo:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  id v25;
  void *v26;
  Class isa;
  uint64_t v28;
  uint64_t inited;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  Class v35;
  void *v36;
  void *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  _QWORD *v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  void **aBlock;
  uint64_t v53;
  uint64_t (*v54)(uint64_t);
  void *v55;
  void (*v56)();
  _QWORD *v57;
  char v58[88];

  v50 = a2;
  v48 = a1;
  v49 = a5;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (uint64_t *)((char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = sub_10000598C(0, (unint64_t *)&qword_1004BD060, OS_dispatch_queue_ptr);
  *v15 = static OS_dispatch_queue.main.getter(v16, v17, v18, v19, v20, v21, v22, v23, v47, v48, v49, v50, v51, aBlock, v53);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  v24 = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
  if ((v24 & 1) != 0)
  {
    v25 = objc_msgSend(objc_allocWithZone((Class)SSMetricsCustomEvent), "init");
    v47 = a6;
    v26 = v25;
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v26, "addPropertiesWithDictionary:", isa);

    objc_msgSend(v26, "setShouldSuppressUserInfo:", a4 & 1);
    objc_msgSend(v26, "setShouldSuppressDSIDHeader:", a4 & 1);
    v28 = sub_1000057B4(&qword_1004C2C50);
    inited = swift_initStackObject(v28, v58);
    *(_OWORD *)(inited + 16) = xmmword_1003C64D0;
    strcpy((char *)(inited + 32), "clientEventId");
    *(_WORD *)(inited + 46) = -4864;
    v30 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
    v31 = UUID.uuidString.getter(v30);
    v33 = v32;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = v31;
    *(_QWORD *)(inited + 56) = v33;
    v34 = sub_1000B8CE8(inited);
    v35 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v34);
    objc_msgSend(v26, "addPropertiesWithDictionary:", v35);

    v36 = v51;
    v37 = *(void **)&v51[OBJC_IVAR____TtC9MusicCore26MetricsReportingController_metricsConfiguration];
    v38 = (_QWORD *)swift_allocObject(&unk_100470BB0, 64, 7);
    v40 = v47;
    v39 = v48;
    v38[2] = v26;
    v38[3] = v39;
    v41 = v49;
    v38[4] = v50;
    v38[5] = v36;
    v38[6] = v41;
    v38[7] = v40;
    v56 = sub_1000C67AC;
    v57 = v38;
    aBlock = _NSConcreteStackBlock;
    v53 = 1107296256;
    v54 = sub_100011FD0;
    v55 = &unk_100470BC8;
    v42 = _Block_copy(&aBlock);
    v43 = v57;
    v44 = v37;
    v45 = v26;
    swift_bridgeObjectRetain();
    v46 = v36;
    swift_retain(v40);
    objc_msgSend(v45, "setStandardPropertiesWith:completionHandler:", v44, v42, swift_release(v43).n128_f64[0]);
    _Block_release(v42);

  }
  else
  {
    __break(1u);
  }
}

void sub_1000C37CC(void *a1, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSString v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22[5];
  uint64_t v23;

  v12 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setTopic:", v12);

  if (qword_1004B8A40 != -1)
    swift_once(&qword_1004B8A40, sub_1000B7BB8);
  v13 = type metadata accessor for Logger(0);
  sub_100039D34(v13, (uint64_t)static Logger.carMetrics);
  v14 = swift_bridgeObjectRetain_n(a3, 2);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v22[0] = v18;
    *(_DWORD *)v17 = 136446210;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v17 + 4) = sub_1000393D0(a2, a3, v22);
    swift_bridgeObjectRelease_n(a3, 3);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Inserting carPlay custom event with topic=%{public}s in metrics controller", (uint8_t *)v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
  }
  v19 = *(void **)(a4 + OBJC_IVAR____TtC9MusicCore26MetricsReportingController_carFocusedMetricsController);
  v22[4] = a5;
  v23 = a6;
  v22[0] = (uint64_t)_NSConcreteStackBlock;
  v22[1] = 1107296256;
  v22[2] = (uint64_t)sub_1000148C8;
  v22[3] = (uint64_t)&unk_100471228;
  v20 = _Block_copy(v22);
  v21 = v23;
  swift_retain(a6);
  objc_msgSend(v19, "insertEvent:withCompletionHandler:", a1, v20, swift_release(v21).n128_f64[0]);
  _Block_release(v20);
}

Swift::Void __swiftcall MetricsReportingController.reportEventForLocalEvaluation(with:)(Swift::OpaquePointer with)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  id v14;
  Class isa;
  _QWORD var30[7];

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (_QWORD *)((char *)var30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_10000598C(0, (unint64_t *)&qword_1004BD060, OS_dispatch_queue_ptr);
  *v4 = static OS_dispatch_queue.main.getter(v5, v6, v7, v8, v9, v10, v11, v12, var30[0], var30[1], var30[2], var30[3], var30[4], var30[5], var30[6]);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v13 = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v13 & 1) != 0)
  {
    v14 = objc_msgSend(objc_allocWithZone((Class)SSMetricsCustomEvent), "init");
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v14, "addPropertiesWithDictionary:", isa);

  }
  else
  {
    __break(1u);
  }
}

uint64_t MetricsReportingController.flushUnreportedEvents()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 120) = v0;
  return swift_task_switch(sub_1000C3B44, 0, 0);
}

uint64_t sub_1000C3B44()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;

  if (qword_1004B8AF0 != -1)
    swift_once(&qword_1004B8AF0, sub_1000D0434);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100039D34(v1, (uint64_t)qword_1004F4850);
  v0[16] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[MetricsReportingController] Attempting to flush unreported events", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v0 + 2;
  v7 = v0[15];

  v8 = *(void **)(v7 + OBJC_IVAR____TtC9MusicCore26MetricsReportingController_metricsController);
  v0[2] = v0;
  v0[3] = sub_1000C3C94;
  v9 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v10 = v0 + 10;
  v10[1] = 0x40000000;
  v10[2] = sub_1000C3E88;
  v10[3] = &unk_100470BF0;
  v10[4] = v9;
  objc_msgSend(v8, "flushUnreportedEventsWithCompletionHandler:", v10);
  return swift_continuation_await(v6);
}

uint64_t sub_1000C3C94()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 136) = v1;
  if (v1)
    v2 = sub_1000C3CFC;
  else
    v2 = sub_1000C3CF4;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000C3CF4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C3CFC(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v2 = *(_QWORD *)(v1 + 136);
  swift_willThrow(a1);
  swift_errorRetain(v2);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v1 + 136);
    v7 = swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v15 = v8;
    *(_DWORD *)v7 = 136446210;
    *(_QWORD *)(v1 + 80) = v6;
    swift_errorRetain(v6);
    v9 = sub_1000057B4((uint64_t *)&unk_1004BD690);
    v10 = (char *)String.init<A>(describing:)(v1 + 80, v9);
    v12 = v11;
    *(_QWORD *)(v7 + 4) = sub_1000393D0(v10, v11, &v15);
    swift_bridgeObjectRelease(v12);
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[MetricsReportingController] Failed to flush unreported events with error=%{public}s", (uint8_t *)v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v6);
  }
  else
  {
    v13 = *(_QWORD *)(v1 + 136);
    swift_errorRelease(v13);
    swift_errorRelease(v13);
    swift_errorRelease(v13);

  }
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_1000C3E88(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (a2)
  {
    v4 = sub_1000057B4((uint64_t *)&unk_1004BD690);
    v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0, 0);
    *v6 = a2;
    v7 = a2;
    swift_continuation_throwingResumeWithError(v2, v5);
  }
  else
  {
    swift_continuation_throwingResume(*(_QWORD *)(a1 + 32));
  }
}

uint64_t sub_1000C3EFC()
{
  uint64_t v0;
  void *v1;
  id v2;
  NSString v3;
  id v4;
  _OWORD v6[2];
  __int128 v7;
  __int128 v8;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC9MusicCore26MetricsReportingController_metricsConfiguration);
  if (!v1)
  {
    v7 = 0u;
    v8 = 0u;
LABEL_11:
    sub_10000FE2C((uint64_t)&v7, &qword_1004BE030);
    return 0;
  }
  v2 = v1;
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "valueForConfigurationKey:", v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v4);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_10000FD10((uint64_t)v6, (uint64_t)&v7, &qword_1004BE030);
  if (!*((_QWORD *)&v8 + 1))
    goto LABEL_11;
  if (swift_dynamicCast(v6, &v7, (char *)&type metadata for Any + 8, &type metadata for Double, 6))
    return *(_QWORD *)&v6[0];
  else
    return 0;
}

char *sub_1000C402C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSString *v28;
  uint64_t v29;
  uint64_t v30;
  objc_super v32;

  v1 = OBJC_IVAR____TtC9MusicCore26MetricsReportingController_componentRenderEventSampler;
  v2 = sub_1000057B4(&qword_1004B9488);
  v3 = swift_allocObject(v2, 24, 7);
  v4 = (void *)objc_opt_self(NSUserDefaults);
  v5 = v0;
  *(_QWORD *)(v3 + 16) = objc_msgSend(v4, "standardUserDefaults");
  *(_QWORD *)&v0[v1] = v3;
  v6 = OBJC_IVAR____TtC9MusicCore26MetricsReportingController_pageRenderEventSampler;
  v7 = sub_1000057B4((uint64_t *)&unk_1004B9490);
  v8 = swift_allocObject(v7, 24, 7);
  *(_QWORD *)(v8 + 16) = objc_msgSend(v4, "standardUserDefaults");
  *(_QWORD *)&v5[v6] = v8;
  *(_QWORD *)&v5[OBJC_IVAR____TtC9MusicCore26MetricsReportingController_metricsConfiguration] = 0;
  v9 = OBJC_IVAR____TtC9MusicCore26MetricsReportingController_metricsController;
  *(_QWORD *)&v5[v9] = objc_msgSend(objc_allocWithZone((Class)SSMetricsController), "init");
  v10 = OBJC_IVAR____TtC9MusicCore26MetricsReportingController_carFocusedMetricsController;
  *(_QWORD *)&v5[v10] = objc_msgSend(objc_allocWithZone((Class)SSMetricsController), "init");
  v11 = OBJC_IVAR____TtC9MusicCore26MetricsReportingController_carMetricsReporter;
  v12 = type metadata accessor for CarNowPlayingMetrics.Reporter();
  *(_QWORD *)&v5[v11] = swift_allocObject(v12, 16, 7);
  *(_QWORD *)&v5[OBJC_IVAR____TtC9MusicCore26MetricsReportingController_backgroundObserver] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC9MusicCore26MetricsReportingController_urlBagObserver] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC9MusicCore26MetricsReportingController_pageHistory] = _swiftEmptyArrayStorage;

  v32.receiver = v5;
  v32.super_class = (Class)type metadata accessor for MetricsReportingController();
  v13 = objc_msgSendSuper2(&v32, "init");
  v14 = qword_1004B8BC0;
  v15 = (char *)v13;
  if (v14 != -1)
    swift_once(&qword_1004B8BC0, sub_1000E30D8);
  v16 = static BagProvider.shared;
  v17 = swift_allocObject(&unk_100471198, 24, 7);
  swift_unknownObjectWeakInit(v17 + 16, v15);
  v18 = type metadata accessor for BagProvider.Observer();
  v19 = swift_allocObject(v18, 40, 7);
  v20 = swift_weakInit(v19 + 16, 0);
  *(_QWORD *)(v19 + 24) = 0;
  *(_QWORD *)(v19 + 32) = 0;
  swift_weakAssign(v20, v16);
  v21 = *(_QWORD *)(v19 + 24);
  v22 = *(_QWORD *)(v19 + 32);
  *(_QWORD *)(v19 + 24) = sub_1000C99E8;
  *(_QWORD *)(v19 + 32) = v17;
  swift_retain_n(v17, 3);
  v23 = sub_10000DCF8(v21, v22);
  __chkstk_darwin(v23);
  UnfairLock.locked<A>(_:)(sub_1000C99F0);
  sub_1000E34B8(0);
  v24 = swift_release(v17);
  swift_release_n(v17, 2, v24);
  v25 = *(_QWORD *)&v15[OBJC_IVAR____TtC9MusicCore26MetricsReportingController_urlBagObserver];
  *(_QWORD *)&v15[OBJC_IVAR____TtC9MusicCore26MetricsReportingController_urlBagObserver] = v19;
  swift_release(v25);
  v26 = swift_allocObject(&unk_100471198, 24, 7);
  swift_unknownObjectWeakInit(v26 + 16, v15);
  v27 = type metadata accessor for NotificationObserver();
  swift_allocObject(v27, 64, 7);
  v28 = UISceneDidEnterBackgroundNotification;
  swift_retain(v26);
  v29 = NotificationObserver.init(name:object:dispatchOnMainThread:usesLocalNotificationCenter:handler:)(v28, 0, 1, 1, (uint64_t)sub_1000C9A0C, v26);
  swift_release(v26);

  v30 = *(_QWORD *)&v15[OBJC_IVAR____TtC9MusicCore26MetricsReportingController_backgroundObserver];
  *(_QWORD *)&v15[OBJC_IVAR____TtC9MusicCore26MetricsReportingController_backgroundObserver] = v29;
  swift_release(v30);
  return v15;
}

double sub_1000C4418(void *a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  double result;

  sub_10000598C(0, (unint64_t *)&qword_1004BD060, OS_dispatch_queue_ptr);
  v4 = swift_allocObject(&unk_100471210, 32, 7);
  *(_QWORD *)(v4 + 16) = a2;
  *(_QWORD *)(v4 + 24) = a1;
  swift_retain(a2);
  v5 = a1;
  static OS_dispatch_queue.asyncOnMainIfNeeded(_:)(sub_1000C9BCC, v4);
  *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  return result;
}

void sub_1000C449C(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  _BYTE v6[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    sub_1000C48BC(a2);

  }
}

uint64_t sub_1000C44F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *Strong;
  _QWORD *v15;
  uint64_t v16;
  _BYTE v19[24];

  v3 = sub_1000057B4((uint64_t *)&unk_1004BFBC0);
  __chkstk_darwin(v3);
  v5 = &v19[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_1004B8AF0 != -1)
    swift_once(&qword_1004B8AF0, sub_1000D0434);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100039D34(v6, (uint64_t)qword_1004F4850);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = a2 + 16;
  static TaskPriority.low.getter();
  v12 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v5, 0, 1, v12);
  v13 = swift_allocObject(&unk_100471198, 24, 7);
  swift_beginAccess(v11, v19, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v11);
  swift_unknownObjectWeakInit(v13 + 16, Strong);

  v15 = (_QWORD *)swift_allocObject(&unk_1004711E8, 40, 7);
  v15[2] = 0;
  v15[3] = 0;
  v15[4] = v13;
  v16 = sub_10004DE78((uint64_t)v5, (uint64_t)&unk_1004BCBC0, (uint64_t)v15);
  swift_release(v16);
  return sub_10000FE2C((uint64_t)v5, (uint64_t *)&unk_1004BFBC0);
}

uint64_t sub_1000C46CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 88) = a4;
  return swift_task_switch(sub_1000C46E4, 0, 0);
}

uint64_t sub_1000C46E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = *(_QWORD *)(v0 + 88) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    v4 = *(_QWORD *)(Strong + OBJC_IVAR____TtC9MusicCore26MetricsReportingController_carMetricsReporter);
    swift_retain(v4);

    sub_1000B6DEC(0);
    swift_release(v4);
  }
  v5 = *(_QWORD *)(v0 + 88) + 16;
  swift_beginAccess(v5, v0 + 40, 0, 0);
  v6 = swift_unknownObjectWeakLoadStrong(v5);
  if (v6)
  {
    v7 = (void *)v6;
    v8 = *(_QWORD *)(v6 + OBJC_IVAR____TtC9MusicCore26MetricsReportingController_carMetricsReporter);
    swift_retain(v8);

    sub_1000B6DEC(1);
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v0 + 88) + 16;
  swift_beginAccess(v9, v0 + 64, 0, 0);
  v10 = swift_unknownObjectWeakLoadStrong(v9);
  *(_QWORD *)(v0 + 96) = v10;
  if (!v10)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v11 = v10;
  v12 = (_QWORD *)swift_task_alloc(dword_1004BC9BC);
  *(_QWORD *)(v0 + 104) = v12;
  *v12 = v0;
  v12[1] = sub_1000C4850;
  v12[15] = v11;
  return swift_task_switch(sub_1000C3B44, 0, 0);
}

uint64_t sub_1000C4850()
{
  uint64_t *v0;
  void *v1;
  uint64_t v3;

  v1 = *(void **)(*v0 + 96);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 104));

  return (*(uint64_t (**)(void))(v3 + 8))();
}

void sub_1000C48BC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  id v17;
  void *v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char isUniquelyReferenced_nonNull_native;
  int v26;
  id v27;
  Class isa;
  id v29;
  void *v30;
  id v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _QWORD v39[5];
  _OWORD v40[2];

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_10000598C(0, (unint64_t *)&qword_1004BD060, OS_dispatch_queue_ptr);
  *v7 = static OS_dispatch_queue.main.getter(v8, v9, v10, v11, v12, v13, v14, v15, v34, v35, v36, *((_QWORD *)&v36 + 1), v37, *((_QWORD *)&v37 + 1), v38);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v16 = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    return;
  }
  v17 = objc_msgSend(a1, "dictionaryForBagKey:", SSMetricsURLBagKey);
  if (v17)
  {
    v18 = v17;
    v19 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v17, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

    if (!*(_QWORD *)(v19 + 16))
    {
      swift_bridgeObjectRelease(v19);
      return;
    }
    v20 = objc_msgSend(a1, "dictionaryForBagKey:", SSVURLBagKeyMusicCommon);
    if (v20)
    {
      v21 = v20;
      v22 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v20, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

      *(_QWORD *)&v36 = 0xD000000000000023;
      *((_QWORD *)&v36 + 1) = 0x80000001003A8D60;
      AnyHashable.init<A>(_:)(v39, &v36, &type metadata for String, &protocol witness table for String);
      if (*(_QWORD *)(v22 + 16) && (v23 = sub_100027770((uint64_t)v39), (v24 & 1) != 0))
      {
        sub_10000990C(*(_QWORD *)(v22 + 56) + 32 * v23, (uint64_t)&v36);
      }
      else
      {
        v36 = 0u;
        v37 = 0u;
      }
      swift_bridgeObjectRelease(v22);
      sub_10000FC6C((uint64_t)v39);
      if (*((_QWORD *)&v37 + 1))
      {
        sub_100007EE4(&v36, v40);
        strcpy((char *)&v36, "postFrequency");
        HIWORD(v36) = -4864;
        AnyHashable.init<A>(_:)(v39, &v36, &type metadata for String, &protocol witness table for String);
        sub_10000990C((uint64_t)v40, (uint64_t)&v36);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
        v35 = v19;
        sub_1000B9F34(&v36, (uint64_t)v39, isUniquelyReferenced_nonNull_native);
        v19 = v35;
        swift_bridgeObjectRelease(0x8000000000000000);
        sub_10000FC6C((uint64_t)v39);
        sub_10000970C(v40);
        v26 = 1;
        goto LABEL_14;
      }
      sub_10000FE2C((uint64_t)&v36, &qword_1004BE030);
    }
    v26 = 0;
LABEL_14:
    v27 = objc_allocWithZone((Class)SSMetricsConfiguration);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v19);
    v29 = objc_msgSend(v27, "initWithGlobalConfiguration:", isa);

    if (v29)
    {
      v30 = *(void **)(v2 + OBJC_IVAR____TtC9MusicCore26MetricsReportingController_metricsConfiguration);
      *(_QWORD *)(v2 + OBJC_IVAR____TtC9MusicCore26MetricsReportingController_metricsConfiguration) = v29;
      v31 = v29;

      objc_msgSend(v31, "setDisableEventDecoration:", objc_msgSend(v31, "_decorateITMLEvents") ^ 1);
      v32 = *(void **)(v2 + OBJC_IVAR____TtC9MusicCore26MetricsReportingController_metricsController);
      objc_msgSend(v32, "setGlobalConfiguration:", v31);
      objc_msgSend(v32, "setFlushTimerEnabled:", 1);
      if (v26)
      {
        v33 = *(void **)(v2 + OBJC_IVAR____TtC9MusicCore26MetricsReportingController_carFocusedMetricsController);
        objc_msgSend(v33, "setGlobalConfiguration:", v31);
        objc_msgSend(v33, "setFlushTimerEnabled:", 1);
      }

    }
  }
}

void sub_1000C4C70(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  Class isa;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void **aBlock;
  uint64_t v39;
  void (*v40)(uint64_t, void *);
  void *v41;
  uint64_t (*v42)();
  uint64_t v43;
  char v44[80];

  v4 = v3;
  v37 = a2;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (uint64_t *)((char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_10000598C(0, (unint64_t *)&qword_1004BD060, OS_dispatch_queue_ptr);
  *v14 = static OS_dispatch_queue.main.getter(v15, v16, v17, v18, v19, v20, v21, v22, v36, v37, aBlock, v39, v40, v41, v42);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  v23 = _dispatchPreconditionTest(_:)(v14);
  (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v14, v11);
  if ((v23 & 1) != 0)
  {
    sub_1000C4F0C(a1);
    v24 = sub_1000057B4(&qword_1004C2C50);
    inited = swift_initStackObject(v24, v44);
    *(_OWORD *)(inited + 16) = xmmword_1003C64D0;
    strcpy((char *)(inited + 32), "clientEventId");
    *(_WORD *)(inited + 46) = -4864;
    v26 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
    v27 = UUID.uuidString.getter(v26);
    v29 = v28;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = v27;
    *(_QWORD *)(inited + 56) = v29;
    v30 = sub_1000B8CE8(inited);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v30);
    objc_msgSend(a1, "addPropertiesWithDictionary:", isa);

    v32 = *(void **)(v4 + OBJC_IVAR____TtC9MusicCore26MetricsReportingController_metricsController);
    v33 = swift_allocObject(&unk_100471260, 32, 7);
    *(_QWORD *)(v33 + 16) = v37;
    *(_QWORD *)(v33 + 24) = a3;
    v42 = sub_10001122C;
    v43 = v33;
    aBlock = _NSConcreteStackBlock;
    v39 = 1107296256;
    v40 = sub_1000148C8;
    v41 = &unk_100471278;
    v34 = _Block_copy(&aBlock);
    v35 = v43;
    swift_retain(a3);
    objc_msgSend(v32, "insertEvent:withCompletionHandler:", a1, v34, swift_release(v35).n128_f64[0]);
    _Block_release(v34);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000C4F0C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Class isa;
  NSString v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;

  v2 = v1;
  v4 = objc_msgSend(a1, "eventType");
  if (!v4)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(SSMetricsEventTypePage);
    v11 = v15;
    return swift_bridgeObjectRelease(v11);
  }
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v8 = v7;

  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(SSMetricsEventTypePage);
  v11 = v10;
  if (!v8)
    return swift_bridgeObjectRelease(v11);
  if (v6 == v9 && v8 == v10)
  {
    swift_bridgeObjectRelease_n(v8, 2);
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v9, v10, 0);
    swift_bridgeObjectRelease(v8);
    result = swift_bridgeObjectRelease(v11);
    if ((v13 & 1) == 0)
      return result;
  }
  v16 = OBJC_IVAR____TtC9MusicCore26MetricsReportingController_pageHistory;
  v17 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9MusicCore26MetricsReportingController_pageHistory);
  swift_bridgeObjectRetain();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v17);
  v19 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setProperty:forBodyKey:", isa, v19);

  result = sub_1000CABC4();
  if (v20)
  {
    v21 = result;
    v22 = v20;
    v23 = *(_QWORD *)(v2 + v16);
    if (*(_QWORD *)(v23 + 16) >= 5uLL)
    {
      swift_bridgeObjectRetain();
      v24 = sub_1000C512C(4, v23);
      v25 = *(_QWORD *)(v2 + v16);
      *(_QWORD *)(v2 + v16) = v24;
      swift_bridgeObjectRelease(v25);
      v23 = *(_QWORD *)(v2 + v16);
    }
    result = swift_isUniquelyReferenced_nonNull_native(v23);
    *(_QWORD *)(v2 + v16) = v23;
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_10005DE58(0, *(_QWORD *)(v23 + 16) + 1, 1, (char *)v23);
      v23 = result;
      *(_QWORD *)(v2 + v16) = result;
    }
    v26 = *(_QWORD *)(v23 + 16);
    v27 = *(_QWORD *)(v23 + 24);
    v28 = v26 + 1;
    if (v26 >= v27 >> 1)
    {
      v30 = (char *)v23;
      v31 = *(_QWORD *)(v23 + 16);
      result = (uint64_t)sub_10005DE58((char *)(v27 > 1), v26 + 1, 1, v30);
      v26 = v31;
      v23 = result;
      *(_QWORD *)(v2 + v16) = result;
    }
    *(_QWORD *)(v23 + 16) = v28;
    v29 = v23 + 16 * v26;
    *(_QWORD *)(v29 + 32) = v21;
    *(_QWORD *)(v29 + 40) = v22;
  }
  return result;
}

uint64_t sub_1000C512C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;

  if (result < 0)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v3 = result;
  if (!result)
  {
    swift_bridgeObjectRelease(a2);
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  if (*(_QWORD *)(a2 + 16) >= result)
    v4 = result;
  else
    v4 = *(_QWORD *)(a2 + 16);
  sub_100097348(0, v4, 0);
  v5 = *(_QWORD *)(a2 + 16);
  if (!v5)
    goto LABEL_31;
  result = swift_bridgeObjectRetain();
  v6 = 0;
  v7 = 0;
  v8 = -v5;
  v20 = v5;
  do
  {
LABEL_8:
    if (v7 >= *(_QWORD *)(a2 + 16))
      goto LABEL_39;
    v9 = (uint64_t *)(a2 + 32 + 16 * v7);
    v11 = *v9;
    v10 = v9[1];
    v12 = _swiftEmptyArrayStorage[2];
    if ((uint64_t)v12 < v3)
    {
      ++v7;
LABEL_22:
      v15 = _swiftEmptyArrayStorage[3];
      v21 = v12 + 1;
      result = swift_bridgeObjectRetain();
      if (v12 >= v15 >> 1)
        result = (uint64_t)sub_100097348((char *)(v15 > 1), v21, 1);
      _swiftEmptyArrayStorage[2] = v21;
      v16 = &_swiftEmptyArrayStorage[2 * v12];
      v16[4] = v11;
      v16[5] = v10;
    }
    else
    {
      result = swift_bridgeObjectRetain();
      if (v6 >= v12)
        goto LABEL_40;
      v13 = &_swiftEmptyArrayStorage[2 * v6 + 4];
      result = swift_bridgeObjectRelease(v13[1]);
      *v13 = v11;
      v13[1] = v10;
      if ((uint64_t)++v6 >= v3)
      {
        if (v7 + 1 == v20)
        {
LABEL_30:
          swift_bridgeObjectRelease(a2);
          goto LABEL_31;
        }
        v14 = (uint64_t *)(a2 + 56 + 16 * v7);
        v7 += 2;
        while (v7 - 1 < *(_QWORD *)(a2 + 16))
        {
          v11 = *(v14 - 1);
          v10 = *v14;
          v12 = _swiftEmptyArrayStorage[2];
          if ((uint64_t)v12 < v3)
          {
            v6 = 0;
            goto LABEL_22;
          }
          swift_bridgeObjectRetain();
          result = swift_bridgeObjectRelease(_swiftEmptyArrayStorage[5]);
          _swiftEmptyArrayStorage[4] = v11;
          _swiftEmptyArrayStorage[5] = v10;
          if (v3 > 1)
          {
            v6 = 1;
            if (v8 + v7)
              goto LABEL_8;
            swift_bridgeObjectRelease(a2);
            v6 = 1;
            goto LABEL_34;
          }
          ++v7;
          v14 += 2;
          if (v8 + v7 == 1)
            goto LABEL_30;
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      ++v7;
    }
  }
  while (v7 != v20);
  swift_bridgeObjectRelease(a2);
  if (!v6)
  {
LABEL_31:
    swift_bridgeObjectRelease(a2);
    return (uint64_t)_swiftEmptyArrayStorage;
  }
LABEL_34:
  v17 = _swiftEmptyArrayStorage[2];
  result = (uint64_t)sub_100097348(0, v17, 0);
  if (v17 < (uint64_t)v6)
    goto LABEL_42;
  if ((v6 & 0x8000000000000000) == 0)
  {
    v18 = _swiftEmptyArrayStorage[2];
    if (v18 >= v6 && v18 >= v17)
    {
      swift_retain(_swiftEmptyArrayStorage);
      sub_1000C6674(v19, (uint64_t)&_swiftEmptyArrayStorage[4], v6, (2 * v17) | 1);
      swift_bridgeObjectRelease(a2);
      swift_release(_swiftEmptyArrayStorage);
      sub_1000C6674((uint64_t)_swiftEmptyArrayStorage, (uint64_t)&_swiftEmptyArrayStorage[4], 0, (2 * v6) | 1);
      swift_release(_swiftEmptyArrayStorage);
      return (uint64_t)_swiftEmptyArrayStorage;
    }
    goto LABEL_44;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

id MetricsReportingController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MetricsReportingController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000C5500()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD v6[2];
  _OWORD v7[2];

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "propertyForBodyKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v2);
    swift_unknownObjectRelease(v2);
    sub_100007EE4(v6, v7);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  v3 = sub_1000057B4(&qword_1004BE030);
  v4 = sub_10000598C(0, &qword_1004BCBD8, NSNumber_ptr);
  if (swift_dynamicCast(v6, v7, v3, v4, 6))
    return *(_QWORD *)&v6[0];
  else
    return 0;
}

unint64_t sub_1000C55D4(unsigned __int8 a1)
{
  Swift::Int v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return sub_1000C5814(a1, v2);
}

unint64_t sub_1000C562C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_1000C9ADC(&qword_1004C05C0, (uint64_t)&protocol conformance descriptor for UUID);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_1000C58B4(a1, v7);
}

unint64_t sub_1000C5690(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1000C59EC(a1, v4);
}

unint64_t sub_1000C56C0(Swift::UInt a1, Swift::UInt a2)
{
  Swift::Int v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  v4 = Hasher._finalize()();
  return sub_1000C5B04(a1, a2, v4);
}

unint64_t sub_1000C572C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  Hasher.init(_seed:)(v7);
  String.hash(into:)(v7, v2, v4);
  v5 = Hasher._finalize()();
  swift_bridgeObjectRelease(v4);
  return sub_100027850(a1, v5);
}

unint64_t sub_1000C57B8(unsigned __int8 a1)
{
  Swift::Int v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(a1 + 1);
  v2 = Hasher._finalize()();
  return sub_1000C5814(a1, v2);
}

unint64_t sub_1000C5814(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_1000C58B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v18 = a1;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_1000C9ADC(&qword_1004BCBC8, (uint64_t)&protocol conformance descriptor for UUID);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_1000C59EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v7;
  char v8;
  uint64_t v9;
  id v10;
  char v11;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_10000598C(0, &qword_1004BC808, MPCPlayerPath_ptr);
    v7 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v8 = static NSObject.== infix(_:_:)(v7, a1);

    if ((v8 & 1) == 0)
    {
      v9 = ~v4;
      for (i = (i + 1) & v9; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v9)
      {
        v10 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v11 = static NSObject.== infix(_:_:)(v10, a1);

        if ((v11 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_1000C5B04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v5 = -1 << *(_BYTE *)(v3 + 32);
  result = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = ~v5;
    do
    {
      v8 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * result);
      v10 = *v8;
      v9 = v8[1];
      if (v10 == a1 && v9 == a2)
        break;
      result = (result + 1) & v7;
    }
    while (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t sub_1000C5B80(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if (result)
  {
    v1 = result;
    v3 = 0;
    swift_stdlib_random(&v3, 8);
    result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          v3 = 0;
          swift_stdlib_random(&v3, 8);
        }
        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _s9MusicCore12MetricsEventV5ClickV13ActionContextO21__derived_enum_equalsySbAG_AGtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;

  switch(a2)
  {
    case 0:
      if (a4)
        goto LABEL_24;
      result = 1;
      break;
    case 1:
      if (a4 != 1)
        goto LABEL_24;
      result = 1;
      break;
    case 2:
      if (a4 != 2)
        goto LABEL_24;
      result = 1;
      break;
    case 3:
      if (a4 != 3)
        goto LABEL_24;
      result = 1;
      break;
    case 4:
      if (a4 != 4)
        goto LABEL_24;
      result = 1;
      break;
    case 5:
      if (a4 != 5)
        goto LABEL_24;
      result = 1;
      break;
    case 6:
      if (a4 != 6)
        goto LABEL_24;
      result = 1;
      break;
    case 7:
      if (a4 != 7)
        goto LABEL_24;
      result = 1;
      break;
    case 8:
      if (a4 != 8)
        goto LABEL_24;
      result = 1;
      break;
    default:
      if (a4 < 9)
      {
LABEL_24:
        result = 0;
      }
      else if (a1 == a3 && a2 == a4)
      {
        result = 1;
      }
      else
      {
        result = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0);
      }
      break;
  }
  return result;
}

uint64_t sub_1000C5CE4(unint64_t a1)
{
  if (a1 <= 1)
    return dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  if (a1 - 5 > 0xFFFFFFFFFFFFFFFCLL)
    return 3419442;
  if (a1 - 8 > 0xFFFFFFFFFFFFFFFCLL)
    return 3616053;
  if (a1 - 11 > 0xFFFFFFFFFFFFFFFCLL)
    return 808529208;
  if (a1 - 16 > 0xFFFFFFFFFFFFFFFALL)
    return 0x35312D3131;
  if (a1 - 21 > 0xFFFFFFFFFFFFFFFALL)
    return 0x30322D3631;
  if (a1 - 26 >= 0xFFFFFFFFFFFFFFFBLL)
    return 0x35322D3132;
  return 2831922;
}

unint64_t sub_1000C5DE8(char a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE v13[80];

  v6 = sub_1000057B4(&qword_1004C2C50);
  if ((a1 & 1) != 0)
  {
    inited = swift_initStackObject(v6, &v12);
    *(_OWORD *)(inited + 16) = xmmword_1003C6280;
    strcpy((char *)(inited + 32), "sharedActivity");
    *(_BYTE *)(inited + 47) = -18;
    *(_BYTE *)(inited + 48) = 1;
    *(_QWORD *)(inited + 72) = &type metadata for Bool;
    *(_QWORD *)(inited + 80) = 0xD00000000000001CLL;
    *(_QWORD *)(inited + 88) = 0x80000001003A8DE0;
    *(_QWORD *)(inited + 96) = sub_1000C5CE4(a2);
    *(_QWORD *)(inited + 104) = v8;
    *(_QWORD *)(inited + 120) = &type metadata for String;
    *(_QWORD *)(inited + 128) = 0xD000000000000018;
    *(_QWORD *)(inited + 136) = 0x80000001003A88F0;
    v9 = sub_1000C5CE4(a3);
    *(_QWORD *)(inited + 168) = &type metadata for String;
    *(_QWORD *)(inited + 144) = v9;
    *(_QWORD *)(inited + 152) = v10;
  }
  else
  {
    inited = swift_initStackObject(v6, v13);
    *(_OWORD *)(inited + 16) = xmmword_1003C64D0;
    strcpy((char *)(inited + 32), "sharedActivity");
    *(_BYTE *)(inited + 47) = -18;
    *(_QWORD *)(inited + 72) = &type metadata for Bool;
    *(_BYTE *)(inited + 48) = 0;
  }
  return sub_1000B8CE8(inited);
}

uint64_t _s9MusicCore12MetricsEventV10TargetTypeO8rawValueAESgSS_tcfC_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_100466D20, a1, a2, &unk_1004B9430);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x18)
    return 24;
  else
    return v3;
}

uint64_t sub_1000C5F68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MetricsEvent.Page(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C5FAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000057B4(&qword_1004B99B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t _s9MusicCore12MetricsEventV5ClickV10ActionTypeO8rawValueAGSgSS_tcfC_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_100466FF0, a1, a2, &unk_1004B9440);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x30)
    return 48;
  else
    return v3;
}

double sub_1000C6044@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  id v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double result;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 v65;
  unsigned __int8 v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  double v70;

  objc_msgSend(a1, "domainLookupStartTime");
  v70 = v4;
  objc_msgSend(a1, "domainLookupEndTime");
  v6 = v5;
  objc_msgSend(a1, "connectionStartTime");
  v8 = v7;
  objc_msgSend(a1, "secureConnectionStartTime");
  v10 = v9;
  objc_msgSend(a1, "connectionEndTime");
  v12 = v11;
  objc_msgSend(a1, "requestStartTime");
  v14 = v13;
  objc_msgSend(a1, "responseStartTime");
  v16 = v15;
  objc_msgSend(a1, "responseEndTime");
  v18 = v17;
  objc_msgSend(a1, "fetchStartTime");
  v20 = v19;
  v69 = objc_msgSend(a1, "redirectCount");
  v21 = objc_msgSend(a1, "requestUrl");
  if (v21)
  {
    v22 = v21;
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v67 = v24;
    v68 = v23;

  }
  else
  {
    v67 = 0;
    v68 = 0;
  }
  v66 = objc_msgSend(a1, "cachedResponse");
  v65 = objc_msgSend(a1, "connectionReused");
  v25 = objc_msgSend(a1, "appleTimingApp");
  if (v25)
  {
    v26 = v25;
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v63 = v28;
    v64 = v27;

  }
  else
  {
    v63 = 0;
    v64 = 0;
  }
  v29 = objc_msgSend(a1, "connectionType");
  if (v29)
  {
    v30 = v29;
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v61 = v32;
    v62 = v31;

  }
  else
  {
    v61 = 0;
    v62 = 0;
  }
  v33 = objc_msgSend(a1, "edgeNodeCacheStatus");
  if (v33)
  {
    v34 = v33;
    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    v59 = v36;
    v60 = v35;

  }
  else
  {
    v59 = 0;
    v60 = 0;
  }
  v37 = objc_msgSend(a1, "environmentDataCenter");
  if (v37)
  {
    v38 = v37;
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    v55 = v40;
    v57 = v39;

  }
  else
  {
    v55 = 0;
    v57 = 0;
  }
  v41 = objc_msgSend(a1, "responseDate", v55, v57);
  if (v41)
  {
    v42 = v41;
    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
    v45 = v44;

  }
  else
  {
    v43 = 0;
    v45 = 0;
  }
  v46 = objc_msgSend(a1, "statusCode");
  v47 = objc_msgSend(a1, "requestMessageSize");
  v48 = objc_msgSend(a1, "responseMessageSize");
  v49 = objc_msgSend(a1, "resolvedIPAddress");
  if (v49)
  {
    v50 = v49;
    v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
    v53 = v52;

  }
  else
  {

    v51 = 0;
    v53 = 0;
  }
  result = v70;
  *(double *)a2 = v70;
  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = v6;
  *(_BYTE *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = v8;
  *(_BYTE *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = v10;
  *(_BYTE *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = v12;
  *(_BYTE *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = v14;
  *(_BYTE *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = v16;
  *(_BYTE *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = v18;
  *(_BYTE *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = v20;
  *(_BYTE *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = v69;
  *(_BYTE *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = v68;
  *(_QWORD *)(a2 + 168) = v67;
  *(_BYTE *)(a2 + 176) = v66;
  *(_BYTE *)(a2 + 177) = v65;
  *(_QWORD *)(a2 + 184) = v64;
  *(_QWORD *)(a2 + 192) = v63;
  *(_QWORD *)(a2 + 200) = v62;
  *(_QWORD *)(a2 + 208) = v61;
  *(_QWORD *)(a2 + 216) = v60;
  *(_QWORD *)(a2 + 224) = v59;
  *(_QWORD *)(a2 + 232) = v58;
  *(_QWORD *)(a2 + 240) = v56;
  *(_QWORD *)(a2 + 248) = v43;
  *(_QWORD *)(a2 + 256) = v45;
  *(_QWORD *)(a2 + 264) = v46;
  *(_QWORD *)(a2 + 272) = v47;
  *(_QWORD *)(a2 + 280) = v48;
  *(_QWORD *)(a2 + 288) = v51;
  *(_QWORD *)(a2 + 296) = v53;
  return result;
}

unint64_t _s9MusicCore12MetricsEventV15ComponentRenderV13PreloadStatusO8rawValueAGSgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100467490, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

_QWORD *sub_1000C6490(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[24];
  v3 = a1[26];
  v4 = a1[28];
  v5 = a1[30];
  v6 = a1[32];
  v7 = a1[37];
  swift_bridgeObjectRelease(a1[21]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t sub_1000C6518()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

double sub_1000C6544()
{
  uint64_t v0;

  return sub_1000C04D4(*(void **)(v0 + 16), *(void **)(v0 + 24), (uint64_t)&unk_1004713A0, (uint64_t (*)(void))sub_1000C9B98);
}

uint64_t sub_1000C656C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000C657C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

double sub_1000C6584()
{
  uint64_t v0;

  return sub_1000C04D4(*(void **)(v0 + 16), *(void **)(v0 + 24), (uint64_t)&unk_100471378, sub_1000C9C44);
}

double sub_1000C65AC()
{
  uint64_t v0;

  return sub_1000C04D4(*(void **)(v0 + 16), *(void **)(v0 + 24), (uint64_t)&unk_100471350, sub_1000C9C44);
}

double sub_1000C65D4()
{
  uint64_t v0;

  return sub_1000C04D4(*(void **)(v0 + 16), *(void **)(v0 + 24), (uint64_t)&unk_100471328, sub_1000C9C44);
}

double sub_1000C65FC()
{
  uint64_t v0;

  return sub_1000C04D4(*(void **)(v0 + 16), *(void **)(v0 + 24), (uint64_t)&unk_100471300, (uint64_t (*)(void))sub_1000C9B90);
}

double sub_1000C6624()
{
  uint64_t v0;

  return sub_1000C04D4(*(void **)(v0 + 16), *(void **)(v0 + 24), (uint64_t)&unk_1004712D8, (uint64_t (*)(void))sub_1000C9B68);
}

double sub_1000C664C()
{
  uint64_t v0;

  return sub_1000C04D4(*(void **)(v0 + 16), *(void **)(v0 + 24), (uint64_t)&unk_1004712B0, (uint64_t (*)(void))sub_1000C9B40);
}

void sub_1000C6674(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_18;
  }
  v7 = *v4;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v4);
  *v4 = v7;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *(_QWORD *)(v7 + 24) >> 1)
    goto LABEL_8;
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9)
        v12 = v8 + v6;
      else
        v12 = v8;
      isUniquelyReferenced_nonNull_native = sub_100097348(isUniquelyReferenced_nonNull_native, v12, 1);
      v7 = *v4;
      if (v5 != a3)
        goto LABEL_12;
    }
    goto LABEL_16;
  }
LABEL_12:
  v13 = *(_QWORD *)(v7 + 16);
  if ((*(_QWORD *)(v7 + 24) >> 1) - v13 < v6)
    goto LABEL_19;
  swift_arrayInitWithCopy(v7 + 16 * v13 + 32);
  if (v6 <= 0)
  {
LABEL_16:
    *v4 = v7;
    return;
  }
  v14 = *(_QWORD *)(v7 + 16);
  v15 = __OFADD__(v14, v6);
  v16 = v14 + v6;
  if (!v15)
  {
    *(_QWORD *)(v7 + 16) = v16;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
}

uint64_t sub_1000C6770()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

void sub_1000C67AC()
{
  uint64_t v0;

  sub_1000C37CC(*(void **)(v0 + 16), *(char **)(v0 + 24), *(char **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t type metadata accessor for MetricsReportingController()
{
  return objc_opt_self(_TtC9MusicCore26MetricsReportingController);
}

unint64_t sub_1000C67E0()
{
  unint64_t result;

  result = qword_1004BC9C8;
  if (!qword_1004BC9C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MetricsEvent.TargetType, &type metadata for MetricsEvent.TargetType);
    atomic_store(result, (unint64_t *)&qword_1004BC9C8);
  }
  return result;
}

unint64_t sub_1000C6828()
{
  unint64_t result;

  result = qword_1004BC9D0;
  if (!qword_1004BC9D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MetricsEvent.Page.DisplayType, &type metadata for MetricsEvent.Page.DisplayType);
    atomic_store(result, (unint64_t *)&qword_1004BC9D0);
  }
  return result;
}

unint64_t sub_1000C6870()
{
  unint64_t result;

  result = qword_1004BC9D8;
  if (!qword_1004BC9D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MetricsEvent.Click.ActionType, &type metadata for MetricsEvent.Click.ActionType);
    atomic_store(result, (unint64_t *)&qword_1004BC9D8);
  }
  return result;
}

unint64_t sub_1000C68B8()
{
  unint64_t result;

  result = qword_1004BC9E0;
  if (!qword_1004BC9E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MetricsEvent.ComponentRender.PreloadStatus, &type metadata for MetricsEvent.ComponentRender.PreloadStatus);
    atomic_store(result, (unint64_t *)&qword_1004BC9E0);
  }
  return result;
}

ValueMetadata *type metadata accessor for MetricsEvent()
{
  return &type metadata for MetricsEvent;
}

uint64_t getEnumTagSinglePayload for MetricsEvent.TargetType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE9)
    goto LABEL_17;
  if (a2 + 23 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 23) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 23;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 23;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 23;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x18;
  v8 = v6 - 24;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MetricsEvent.TargetType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 23 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 23) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE8)
    return ((uint64_t (*)(void))((char *)&loc_1000C69E8 + 4 * byte_1003CC25B[v4]))();
  *a1 = a2 + 23;
  return ((uint64_t (*)(void))((char *)sub_1000C6A1C + 4 * byte_1003CC256[v4]))();
}

uint64_t sub_1000C6A1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C6A24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C6A2CLL);
  return result;
}

uint64_t sub_1000C6A38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C6A40);
  *(_BYTE *)result = a2 + 23;
  return result;
}

uint64_t sub_1000C6A44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C6A4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MetricsEvent.TargetType()
{
  return &type metadata for MetricsEvent.TargetType;
}

_QWORD *initializeBufferWithCopyOfBuffer for MetricsEvent.Page(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for URL(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      v15 = sub_1000057B4(&qword_1004B99B0);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v17 = a3[8];
    *(_QWORD *)((char *)v4 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
    v18 = (_QWORD *)((char *)v4 + v17);
    v19 = (_QWORD *)((char *)a2 + v17);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = a3[10];
    *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    v22 = (_QWORD *)((char *)v4 + v21);
    v23 = (_QWORD *)((char *)a2 + v21);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for MetricsEvent.Page(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = a1 + a2[6];
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[10] + 8));
}

_QWORD *initializeWithCopy for MetricsEvent.Page(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    v14 = sub_1000057B4(&qword_1004B99B0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  v19 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MetricsEvent.Page(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  *a1 = *a2;
  v6 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v6);
  a1[2] = a2[2];
  v7 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v7);
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = sub_1000057B4(&qword_1004B99B0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  v17 = a3[7];
  v18 = *(_QWORD *)((char *)a1 + v17);
  *(_QWORD *)((char *)a1 + v17) = *(_QWORD *)((char *)a2 + v17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v18);
  v19 = a3[8];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  *v20 = *v21;
  v22 = v20[1];
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v22);
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v23 = a3[10];
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = (_QWORD *)((char *)a2 + v23);
  *v24 = *v25;
  v26 = v24[1];
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v26);
  return a1;
}

_OWORD *initializeWithTake for MetricsEvent.Page(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_1000057B4(&qword_1004B99B0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  v14 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  *(_OWORD *)((char *)a1 + v14) = *(_OWORD *)((char *)a2 + v14);
  return a1;
}

_QWORD *assignWithTake for MetricsEvent.Page(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = sub_1000057B4(&qword_1004B99B0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  v19 = a3[7];
  v20 = *(_QWORD *)((char *)a1 + v19);
  *(_QWORD *)((char *)a1 + v19) = *(_QWORD *)((char *)a2 + v19);
  swift_bridgeObjectRelease(v20);
  v21 = a3[8];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  v25 = *v23;
  v24 = v23[1];
  v26 = v22[1];
  *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease(v26);
  v27 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  v31 = *v29;
  v30 = v29[1];
  v32 = v28[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease(v32);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricsEvent.Page(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C7200);
}

uint64_t sub_1000C7200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1000057B4(&qword_1004B99B0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for MetricsEvent.Page(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C728C);
}

uint64_t sub_1000C728C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1000057B4(&qword_1004B99B0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

void sub_1000C7304(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_1003CC558;
  v4[1] = &unk_1003CC558;
  sub_1000C739C(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_1003CC570;
    v4[4] = &unk_1003CC588;
    v4[5] = (char *)&value witness table for Builtin.Int8 + 64;
    v4[6] = &unk_1003CC588;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
  }
}

void sub_1000C739C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1004C2370)
  {
    v2 = type metadata accessor for URL(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1004C2370);
  }
}

uint64_t storeEnumTagSinglePayload for MetricsEvent.Page.DisplayType(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000C7430 + 4 * byte_1003CC260[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000C7450 + 4 * byte_1003CC265[v4]))();
}

_BYTE *sub_1000C7430(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000C7450(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000C7458(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000C7460(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000C7468(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000C7470(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MetricsEvent.Page.DisplayType()
{
  return &type metadata for MetricsEvent.Page.DisplayType;
}

_QWORD *initializeBufferWithCopyOfBuffer for MetricsEvent.Click(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v51;
  unsigned int (*v52)(char *, uint64_t, uint64_t);

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
    v8 = a3[7];
    v9 = (void *)(a1 + v8);
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for URL(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      v14 = sub_1000057B4(&qword_1004B99B0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v16 = a3[9];
    *(_QWORD *)((char *)v4 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    v17 = (_QWORD *)((char *)v4 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = *(uint64_t *)((char *)a2 + v16 + 8);
    swift_bridgeObjectRetain();
    if (v19 > 9)
    {
      *v17 = *v18;
      v17[1] = v19;
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)v17 = *(_OWORD *)v18;
    }
    v20 = a3[10];
    v21 = (char *)v4 + v20;
    v22 = (uint64_t)a2 + v20;
    v23 = *(unsigned __int16 *)(v22 + 24);
    v52 = v13;
    if (v23 >> 8 <= 0xFE)
    {
      v24 = *(id *)v22;
      v25 = *(_QWORD *)(v22 + 8);
      v51 = v11;
      v26 = v12;
      v27 = *(_QWORD *)(v22 + 16);
      sub_10005561C(*(id *)v22, v25, v27, v23, SBYTE1(v23));
      *(_QWORD *)v21 = v24;
      *((_QWORD *)v21 + 1) = v25;
      *((_QWORD *)v21 + 2) = v27;
      v12 = v26;
      v11 = v51;
      *((_WORD *)v21 + 12) = v23;
    }
    else
    {
      *(_OWORD *)v21 = *(_OWORD *)v22;
      *(_OWORD *)(v21 + 10) = *(_OWORD *)(v22 + 10);
    }
    v28 = a3[12];
    *(_QWORD *)((char *)v4 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    v29 = (_QWORD *)((char *)v4 + v28);
    v30 = (uint64_t *)((char *)a2 + v28);
    v31 = v30[1];
    *v29 = *v30;
    v29[1] = v31;
    v32 = a3[13];
    v33 = a3[14];
    v34 = (_QWORD *)((char *)v4 + v32);
    v35 = (uint64_t *)((char *)a2 + v32);
    v36 = v35[1];
    *v34 = *v35;
    v34[1] = v36;
    v37 = (char *)v4 + v33;
    v38 = (char *)a2 + v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v52(v38, 1, v11))
    {
      v39 = sub_1000057B4(&qword_1004B99B0);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v37, v38, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v37, 0, 1, v11);
    }
    v40 = a3[16];
    *(_QWORD *)((char *)v4 + a3[15]) = *(uint64_t *)((char *)a2 + a3[15]);
    *((_BYTE *)v4 + v40) = *((_BYTE *)a2 + v40);
    v41 = a3[17];
    v42 = a3[18];
    v43 = (_QWORD *)((char *)v4 + v41);
    v44 = (uint64_t *)((char *)a2 + v41);
    v45 = v44[1];
    *v43 = *v44;
    v43[1] = v45;
    *((_BYTE *)v4 + v42) = *((_BYTE *)a2 + v42);
    v46 = a3[19];
    v47 = (_QWORD *)((char *)v4 + v46);
    v48 = (uint64_t *)((char *)a2 + v46);
    v49 = v48[1];
    *v47 = *v48;
    v47[1] = v49;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for MetricsEvent.Click(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[7];
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8]));
  v8 = *(_QWORD *)(a1 + a2[9] + 8);
  if (v8 >= 0xA)
    swift_bridgeObjectRelease(v8);
  v9 = a1 + a2[10];
  v10 = *(unsigned __int16 *)(v9 + 24);
  if (v10 >> 8 <= 0xFE)
    sub_10002F650(*(void **)v9, *(_QWORD *)(v9 + 8), *(_QWORD *)(v9 + 16), v10, SBYTE1(v10));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[13] + 8));
  v11 = a1 + a2[14];
  if (!v7(v11, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v11, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[15]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[17] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[19] + 8));
}

uint64_t initializeWithCopy for MetricsEvent.Click(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v49;
  unsigned int (*v50)(const void *, uint64_t, uint64_t);

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v7 = a3[7];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    v13 = sub_1000057B4(&qword_1004B99B0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  v17 = *(_QWORD *)(a2 + v14 + 8);
  swift_bridgeObjectRetain();
  if (v17 > 9)
  {
    *v15 = *v16;
    v15[1] = v17;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)v15 = *(_OWORD *)v16;
  }
  v18 = a3[10];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = *(unsigned __int16 *)(v20 + 24);
  v50 = v12;
  if (v21 >> 8 <= 0xFE)
  {
    v22 = *(id *)v20;
    v23 = *(_QWORD *)(v20 + 8);
    v49 = v10;
    v24 = v11;
    v25 = *(_QWORD *)(v20 + 16);
    sub_10005561C(*(id *)v20, v23, v25, v21, SBYTE1(v21));
    *(_QWORD *)v19 = v22;
    *(_QWORD *)(v19 + 8) = v23;
    *(_QWORD *)(v19 + 16) = v25;
    v11 = v24;
    v10 = v49;
    *(_WORD *)(v19 + 24) = v21;
  }
  else
  {
    *(_OWORD *)v19 = *(_OWORD *)v20;
    *(_OWORD *)(v19 + 10) = *(_OWORD *)(v20 + 10);
  }
  v26 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  v27 = (_QWORD *)(a1 + v26);
  v28 = (_QWORD *)(a2 + v26);
  v29 = v28[1];
  *v27 = *v28;
  v27[1] = v29;
  v30 = a3[13];
  v31 = a3[14];
  v32 = (_QWORD *)(a1 + v30);
  v33 = (_QWORD *)(a2 + v30);
  v34 = v33[1];
  *v32 = *v33;
  v32[1] = v34;
  v35 = (void *)(a1 + v31);
  v36 = (const void *)(a2 + v31);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v50(v36, 1, v10))
  {
    v37 = sub_1000057B4(&qword_1004B99B0);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v35, v36, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v35, 0, 1, v10);
  }
  v38 = a3[16];
  *(_QWORD *)(a1 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  *(_BYTE *)(a1 + v38) = *(_BYTE *)(a2 + v38);
  v39 = a3[17];
  v40 = a3[18];
  v41 = (_QWORD *)(a1 + v39);
  v42 = (_QWORD *)(a2 + v39);
  v43 = v42[1];
  *v41 = *v42;
  v41[1] = v43;
  *(_BYTE *)(a1 + v40) = *(_BYTE *)(a2 + v40);
  v44 = a3[19];
  v45 = (_QWORD *)(a1 + v44);
  v46 = (_QWORD *)(a2 + v44);
  v47 = v46[1];
  *v45 = *v46;
  v45[1] = v47;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MetricsEvent.Click(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  uint64_t v26;
  unsigned int v27;
  __int128 v28;
  __int128 v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t (*v68)(void *, uint64_t, uint64_t);
  uint64_t (*v69)(void *, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v7 = a3[7];
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = sub_1000057B4(&qword_1004B99B0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  v16 = a3[8];
  v17 = *(_QWORD *)(a1 + v16);
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v17);
  v18 = a3[9];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = *(_QWORD *)(a1 + v18 + 8);
  v22 = *(_QWORD *)(a2 + v18 + 8);
  if (v21 == 9)
  {
    if (v22 >= 0xA)
      goto LABEL_14;
    goto LABEL_18;
  }
  if (v22 == 9)
  {
    sub_100054900(v19);
LABEL_18:
    *(_OWORD *)v19 = *(_OWORD *)v20;
    goto LABEL_19;
  }
  if (v21 < 9)
  {
    if (v22 >= 9)
    {
LABEL_14:
      *(_QWORD *)v19 = *(_QWORD *)v20;
      *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
      swift_bridgeObjectRetain();
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v22 < 9)
  {
    sub_10000FE2C(v19, &qword_1004BA750);
    goto LABEL_18;
  }
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v21);
LABEL_19:
  v23 = a3[10];
  v24 = a1 + v23;
  v25 = (__int128 *)(a2 + v23);
  v26 = *(unsigned __int16 *)(a2 + v23 + 24);
  v27 = v26 >> 8;
  if (*(unsigned __int8 *)(a1 + v23 + 25) == 255)
  {
    if (v27 <= 0xFE)
    {
      v68 = v12;
      v70 = v11;
      v30 = *(void **)v25;
      v31 = *((_QWORD *)v25 + 1);
      v32 = *((_QWORD *)v25 + 2);
      sub_10005561C(v30, v31, v32, v26, SBYTE1(v26));
      *(_QWORD *)v24 = v30;
      *(_QWORD *)(v24 + 8) = v31;
      v12 = v68;
      v11 = v70;
      *(_QWORD *)(v24 + 16) = v32;
      *(_WORD *)(v24 + 24) = v26;
    }
    else
    {
      v28 = *v25;
      *(_OWORD *)(v24 + 10) = *(__int128 *)((char *)v25 + 10);
      *(_OWORD *)v24 = v28;
    }
  }
  else if (v27 <= 0xFE)
  {
    v69 = v12;
    v71 = v11;
    v33 = *(void **)v25;
    v34 = *((_QWORD *)v25 + 1);
    v35 = *((_QWORD *)v25 + 2);
    sub_10005561C(v33, v34, v35, v26, SBYTE1(v26));
    v36 = *(void **)v24;
    v37 = *(_QWORD *)(v24 + 8);
    v38 = *(_QWORD *)(v24 + 16);
    *(_QWORD *)v24 = v33;
    *(_QWORD *)(v24 + 8) = v34;
    v12 = v69;
    v11 = v71;
    *(_QWORD *)(v24 + 16) = v35;
    v39 = *(unsigned __int8 *)(v24 + 24);
    *(_BYTE *)(v24 + 24) = v26;
    v40 = *(_BYTE *)(v24 + 25);
    *(_BYTE *)(v24 + 25) = BYTE1(v26);
    sub_10002F650(v36, v37, v38, v39, v40);
  }
  else
  {
    sub_1000C8000(v24);
    v29 = *(__int128 *)((char *)v25 + 10);
    *(_OWORD *)v24 = *v25;
    *(_OWORD *)(v24 + 10) = v29;
  }
  v41 = a3[11];
  v42 = *(_QWORD *)(a1 + v41);
  *(_QWORD *)(a1 + v41) = *(_QWORD *)(a2 + v41);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v42);
  v43 = a3[12];
  v44 = (_QWORD *)(a1 + v43);
  v45 = (_QWORD *)(a2 + v43);
  *v44 = *v45;
  v46 = v44[1];
  v44[1] = v45[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v46);
  v47 = a3[13];
  v48 = (_QWORD *)(a1 + v47);
  v49 = (_QWORD *)(a2 + v47);
  *v48 = *v49;
  v50 = v48[1];
  v48[1] = v49[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v50);
  v51 = a3[14];
  v52 = (void *)(a1 + v51);
  v53 = (void *)(a2 + v51);
  v54 = v12((void *)(a1 + v51), 1, v10);
  v55 = v12(v53, 1, v10);
  if (!v54)
  {
    if (!v55)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v52, v53, v10);
      goto LABEL_32;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v52, v10);
    goto LABEL_31;
  }
  if (v55)
  {
LABEL_31:
    v56 = sub_1000057B4(&qword_1004B99B0);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v52, v53, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v52, 0, 1, v10);
LABEL_32:
  v57 = a3[15];
  v58 = *(_QWORD *)(a1 + v57);
  *(_QWORD *)(a1 + v57) = *(_QWORD *)(a2 + v57);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v58);
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  v59 = a3[17];
  v60 = (_QWORD *)(a1 + v59);
  v61 = (_QWORD *)(a2 + v59);
  *v60 = *v61;
  v62 = v60[1];
  v60[1] = v61[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v62);
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  v63 = a3[19];
  v64 = (_QWORD *)(a1 + v63);
  v65 = (_QWORD *)(a2 + v63);
  *v64 = *v65;
  v66 = v64[1];
  v64[1] = v65[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v66);
  return a1;
}

uint64_t sub_1000C8000(uint64_t a1)
{
  sub_10002F650(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(_BYTE *)(a1 + 25));
  return a1;
}

uint64_t initializeWithTake for MetricsEvent.Click(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v6 = a3[7];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    v12 = sub_1000057B4(&qword_1004B99B0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  v14 = a3[10];
  v15 = a3[11];
  v16 = (_OWORD *)(a1 + v14);
  v17 = (_OWORD *)(a2 + v14);
  *v16 = *v17;
  *(_OWORD *)((char *)v16 + 10) = *(_OWORD *)((char *)v17 + 10);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  v18 = a3[13];
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  v19 = a3[14];
  v20 = (void *)(a1 + v19);
  v21 = (const void *)(a2 + v19);
  if (v11((const void *)(a2 + v19), 1, v9))
  {
    v22 = sub_1000057B4(&qword_1004B99B0);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v20, v21, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v20, 0, 1, v9);
  }
  v23 = a3[16];
  *(_QWORD *)(a1 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  *(_BYTE *)(a1 + v23) = *(_BYTE *)(a2 + v23);
  v24 = a3[18];
  *(_OWORD *)(a1 + a3[17]) = *(_OWORD *)(a2 + a3[17]);
  *(_BYTE *)(a1 + v24) = *(_BYTE *)(a2 + v24);
  *(_OWORD *)(a1 + a3[19]) = *(_OWORD *)(a2 + a3[19]);
  return a1;
}

uint64_t assignWithTake for MetricsEvent.Click(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v8 = a3[7];
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v16 = sub_1000057B4(&qword_1004B99B0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  v17 = a3[8];
  v18 = *(_QWORD *)(a1 + v17);
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);
  swift_bridgeObjectRelease(v18);
  v19 = a3[9];
  v20 = a1 + v19;
  v21 = (_OWORD *)(a2 + v19);
  v22 = *(_QWORD *)(a1 + v19 + 8);
  v23 = *(_QWORD *)(a2 + v19 + 8);
  if (v22 == 9)
  {
LABEL_13:
    *(_OWORD *)v20 = *v21;
    goto LABEL_14;
  }
  if (v23 == 9)
  {
    sub_100054900(v20);
    goto LABEL_13;
  }
  if (v22 < 9)
    goto LABEL_13;
  if (v23 < 9)
  {
    sub_10000FE2C(v20, &qword_1004BA750);
    goto LABEL_13;
  }
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_QWORD *)(v20 + 8) = v23;
  swift_bridgeObjectRelease(v22);
LABEL_14:
  v24 = a3[10];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = *(unsigned __int16 *)(a1 + v24 + 24);
  if (v27 >> 8 > 0xFE)
  {
LABEL_17:
    *(_OWORD *)v25 = *(_OWORD *)v26;
    *(_OWORD *)(v25 + 10) = *(_OWORD *)(v26 + 10);
    goto LABEL_19;
  }
  v28 = *(unsigned __int16 *)(v26 + 24);
  if (v28 >> 8 > 0xFE)
  {
    sub_1000C8000(v25);
    goto LABEL_17;
  }
  v29 = *(_QWORD *)(v26 + 16);
  v30 = *(void **)v25;
  v31 = *(_QWORD *)(v25 + 8);
  v32 = *(_QWORD *)(v25 + 16);
  *(_OWORD *)v25 = *(_OWORD *)v26;
  *(_QWORD *)(v25 + 16) = v29;
  *(_WORD *)(v25 + 24) = v28;
  sub_10002F650(v30, v31, v32, v27, SBYTE1(v27));
LABEL_19:
  v33 = a3[11];
  v34 = *(_QWORD *)(a1 + v33);
  *(_QWORD *)(a1 + v33) = *(_QWORD *)(a2 + v33);
  swift_bridgeObjectRelease(v34);
  v35 = a3[12];
  v36 = (_QWORD *)(a1 + v35);
  v37 = (uint64_t *)(a2 + v35);
  v39 = *v37;
  v38 = v37[1];
  v40 = v36[1];
  *v36 = v39;
  v36[1] = v38;
  swift_bridgeObjectRelease(v40);
  v41 = a3[13];
  v42 = (_QWORD *)(a1 + v41);
  v43 = (uint64_t *)(a2 + v41);
  v45 = *v43;
  v44 = v43[1];
  v46 = v42[1];
  *v42 = v45;
  v42[1] = v44;
  swift_bridgeObjectRelease(v46);
  v47 = a3[14];
  v48 = (void *)(a1 + v47);
  v49 = (void *)(a2 + v47);
  v50 = v13((void *)(a1 + v47), 1, v11);
  v51 = v13(v49, 1, v11);
  if (!v50)
  {
    if (!v51)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v48, v49, v11);
      goto LABEL_25;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v48, v11);
    goto LABEL_24;
  }
  if (v51)
  {
LABEL_24:
    v52 = sub_1000057B4(&qword_1004B99B0);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v48, v49, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v48, 0, 1, v11);
LABEL_25:
  v53 = a3[15];
  v54 = *(_QWORD *)(a1 + v53);
  *(_QWORD *)(a1 + v53) = *(_QWORD *)(a2 + v53);
  swift_bridgeObjectRelease(v54);
  v55 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  v56 = (_QWORD *)(a1 + v55);
  v57 = (uint64_t *)(a2 + v55);
  v59 = *v57;
  v58 = v57[1];
  v60 = v56[1];
  *v56 = v59;
  v56[1] = v58;
  swift_bridgeObjectRelease(v60);
  v61 = a3[19];
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  v62 = (_QWORD *)(a1 + v61);
  v63 = (uint64_t *)(a2 + v61);
  v65 = *v63;
  v64 = v63[1];
  v66 = v62[1];
  *v62 = v65;
  v62[1] = v64;
  swift_bridgeObjectRelease(v66);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricsEvent.Click(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C8578);
}

uint64_t sub_1000C8578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1000057B4(&qword_1004B99B0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for MetricsEvent.Click(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C8604);
}

uint64_t sub_1000C8604(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1000057B4(&qword_1004B99B0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

void sub_1000C867C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  char *v14;
  void *v15;
  void *v16;
  void *v17;

  v4[0] = &unk_1003CC558;
  v4[1] = &unk_1003CC5B8;
  v4[2] = &unk_1003CC5D0;
  sub_1000C739C(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v6 = &unk_1003CC570;
    v7 = &unk_1003CC5E8;
    v8 = &unk_1003CC600;
    v9 = &unk_1003CC570;
    v10 = &unk_1003CC588;
    v11 = &unk_1003CC588;
    v12 = v5;
    v13 = &unk_1003CC570;
    v14 = (char *)&value witness table for Builtin.Int8 + 64;
    v15 = &unk_1003CC588;
    v16 = &unk_1003CC618;
    v17 = &unk_1003CC588;
    swift_initStructMetadata(a1, 256, 16, v4, a1 + 16);
  }
}

uint64_t getEnumTagSinglePayload for MetricsEvent.Click.ActionType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xD1)
    goto LABEL_17;
  if (a2 + 47 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 47) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 47;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 47;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 47;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x30;
  v8 = v6 - 48;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MetricsEvent.Click.ActionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 47 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 47) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xD1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xD0)
    return ((uint64_t (*)(void))((char *)&loc_1000C882C + 4 * byte_1003CC26F[v4]))();
  *a1 = a2 + 47;
  return ((uint64_t (*)(void))((char *)sub_1000C8860 + 4 * byte_1003CC26A[v4]))();
}

uint64_t sub_1000C8860(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C8868(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C8870);
  return result;
}

uint64_t sub_1000C887C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C8884);
  *(_BYTE *)result = a2 + 47;
  return result;
}

uint64_t sub_1000C8888(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C8890(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MetricsEvent.Click.ActionType()
{
  return &type metadata for MetricsEvent.Click.ActionType;
}

unint64_t destroy for MetricsEvent.Click.ActionContext(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t _s9MusicCore12MetricsEventV5ClickV13ActionContextOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain(v3);
  }
  return a1;
}

_QWORD *assignWithCopy for MetricsEvent.Click.ActionContext(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[1];
  v5 = a2[1];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_7;
  }
  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for MetricsEvent.Click.ActionContext(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 < 0xFFFFFFFF)
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricsEvent.Click.ActionContext(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFF6 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483639);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 8;
  if (v4 >= 0xA)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MetricsEvent.Click.ActionContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFF7)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483639;
    if (a3 >= 0x7FFFFFF7)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFF7)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 8;
  }
  return result;
}

uint64_t sub_1000C8AB8(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_1000C8AD0(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for MetricsEvent.Click.ActionContext()
{
  return &type metadata for MetricsEvent.Click.ActionContext;
}

void *destroy for MetricsEvent.Click.ActionDetails(uint64_t a1)
{
  return sub_10002F650(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(_BYTE *)(a1 + 25));
}

uint64_t initializeWithCopy for MetricsEvent.Click.ActionDetails(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 25);
  v7 = *(unsigned __int8 *)(a2 + 24);
  sub_10005561C(*(id *)a2, v4, v5, v7, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 25) = v6;
  return a1;
}

uint64_t assignWithCopy for MetricsEvent.Click.ActionDetails(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 25);
  v7 = *(unsigned __int8 *)(a2 + 24);
  sub_10005561C(*(id *)a2, v4, v5, v7, v6);
  v8 = *(void **)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v11 = *(unsigned __int8 *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v7;
  v12 = *(_BYTE *)(a1 + 25);
  *(_BYTE *)(a1 + 25) = v6;
  sub_10002F650(v8, v9, v10, v11, v12);
  return a1;
}

__n128 initializeWithTake for MetricsEvent.Click.ActionDetails(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for MetricsEvent.Click.ActionDetails(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int16 v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_WORD *)(a2 + 24);
  v5 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 25);
  v9 = *(unsigned __int8 *)(a1 + 24);
  *(_WORD *)(a1 + 24) = v4;
  sub_10002F650(v5, v7, v6, v9, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricsEvent.Click.ActionDetails(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 26))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 25);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MetricsEvent.Click.ActionDetails(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 26) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 26) = 0;
    if (a2)
      *(_BYTE *)(result + 25) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000C8CF0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 25) <= 3u)
    return *(unsigned __int8 *)(a1 + 25);
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t sub_1000C8D08(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 4;
    LOBYTE(a2) = 4;
    *(_BYTE *)(result + 24) = 0;
  }
  *(_BYTE *)(result + 25) = a2;
  return result;
}

ValueMetadata *type metadata accessor for MetricsEvent.Click.ActionDetails()
{
  return &type metadata for MetricsEvent.Click.ActionDetails;
}

id *destroy for MetricsEvent.Click.ActionDetails.SearchSource(id *result)
{
  id *v1;

  if ((unint64_t)*result >= 0xFFFFFFFF)
  {
    v1 = result;

    return (id *)swift_bridgeObjectRelease(v1[2]);
  }
  return result;
}

uint64_t _s9MusicCore12MetricsEventV5ClickV13ActionDetailsO12SearchSourceOwCP_0(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v3 = *(void **)a2;
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    v6 = v3;
    swift_bridgeObjectRetain(v5);
  }
  return a1;
}

uint64_t assignWithCopy for MetricsEvent.Click.ActionDetails.SearchSource(uint64_t a1, __int128 *a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  __int128 v11;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  if (*(_QWORD *)a1 < 0xFFFFFFFFuLL)
  {
    if ((unint64_t)v5 >= 0xFFFFFFFF)
    {
      *(_QWORD *)a1 = v5;
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      v9 = *((_QWORD *)a2 + 2);
      *(_QWORD *)(a1 + 16) = v9;
      v10 = v5;
      swift_bridgeObjectRetain(v9);
      return a1;
    }
LABEL_7:
    v11 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v11;
    return a1;
  }
  if ((unint64_t)v5 < 0xFFFFFFFF)
  {

    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
    goto LABEL_7;
  }
  *(_QWORD *)a1 = v5;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
  v7 = *((_QWORD *)a2 + 2);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

__n128 initializeWithTake for MetricsEvent.Click.ActionDetails.SearchSource(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for MetricsEvent.Click.ActionDetails.SearchSource(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(void **)a1;
  if (*(_QWORD *)a1 < 0xFFFFFFFFuLL)
    goto LABEL_5;
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {

    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricsEvent.Click.ActionDetails.SearchSource(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MetricsEvent.Click.ActionDetails.SearchSource(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

_QWORD *sub_1000C8FD8(_QWORD *result, int a2)
{
  uint64_t v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
    result[1] = 0;
    result[2] = 0;
  }
  else
  {
    if (!a2)
      return result;
    v2 = (a2 - 1);
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for MetricsEvent.Click.ActionDetails.SearchSource()
{
  return &type metadata for MetricsEvent.Click.ActionDetails.SearchSource;
}

uint64_t destroy for MetricsEvent.LoadUrl(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[21]);
  swift_bridgeObjectRelease(a1[24]);
  swift_bridgeObjectRelease(a1[26]);
  swift_bridgeObjectRelease(a1[28]);
  swift_bridgeObjectRelease(a1[30]);
  swift_bridgeObjectRelease(a1[32]);
  return swift_bridgeObjectRelease(a1[37]);
}

uint64_t initializeWithCopy for MetricsEvent.LoadUrl(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v3 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v3;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v4 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v4;
  *(_WORD *)(a1 + 176) = *(_WORD *)(a2 + 176);
  v5 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v5;
  v6 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v6;
  v7 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v7;
  v8 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v8;
  v9 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v9;
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  v10 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v10;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t assignWithCopy for MetricsEvent.LoadUrl(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = a2[6];
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  v8 = a2[8];
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_QWORD *)(a1 + 64) = v8;
  v9 = a2[10];
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  *(_QWORD *)(a1 + 80) = v9;
  v10 = a2[12];
  *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
  *(_QWORD *)(a1 + 96) = v10;
  v11 = a2[14];
  *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
  *(_QWORD *)(a1 + 112) = v11;
  v12 = a2[16];
  *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
  *(_QWORD *)(a1 + 128) = v12;
  v13 = a2[18];
  *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
  *(_QWORD *)(a1 + 144) = v13;
  *(_QWORD *)(a1 + 160) = a2[20];
  v14 = a2[21];
  v15 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 176) = *((_BYTE *)a2 + 176);
  *(_BYTE *)(a1 + 177) = *((_BYTE *)a2 + 177);
  *(_QWORD *)(a1 + 184) = a2[23];
  v16 = a2[24];
  v17 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_QWORD *)(a1 + 200) = a2[25];
  v18 = a2[26];
  v19 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(_QWORD *)(a1 + 216) = a2[27];
  v20 = a2[28];
  v21 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(_QWORD *)(a1 + 232) = a2[29];
  v22 = a2[30];
  v23 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  *(_QWORD *)(a1 + 248) = a2[31];
  v24 = a2[32];
  v25 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  *(_QWORD *)(a1 + 264) = a2[33];
  *(_QWORD *)(a1 + 272) = a2[34];
  *(_QWORD *)(a1 + 280) = a2[35];
  *(_QWORD *)(a1 + 288) = a2[36];
  v26 = a2[37];
  v27 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  return a1;
}

void *initializeWithTake for MetricsEvent.LoadUrl(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x130uLL);
}

uint64_t assignWithTake for MetricsEvent.LoadUrl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v5 = *(_QWORD *)(a2 + 168);
  v6 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v5;
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_BYTE *)(a1 + 177) = *(_BYTE *)(a2 + 177);
  v7 = *(_QWORD *)(a2 + 192);
  v8 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v7;
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 208);
  v10 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v9;
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a2 + 224);
  v12 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v11;
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a2 + 240);
  v14 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v13;
  swift_bridgeObjectRelease(v14);
  v15 = *(_QWORD *)(a2 + 256);
  v16 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v15;
  swift_bridgeObjectRelease(v16);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  v17 = *(_QWORD *)(a2 + 296);
  v18 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v17;
  swift_bridgeObjectRelease(v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricsEvent.LoadUrl(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 304))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 168);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MetricsEvent.LoadUrl(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 296) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 304) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 304) = 0;
    if (a2)
      *(_QWORD *)(result + 168) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MetricsEvent.LoadUrl()
{
  return &type metadata for MetricsEvent.LoadUrl;
}

void destroy for MetricsEvent.ComponentRender(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));

}

uint64_t initializeWithCopy for MetricsEvent.ComponentRender(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(void **)(a2 + 24);
  v5 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(void **)(a2 + 40);
  v7 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  v8 = *(void **)(a2 + 56);
  v9 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v9;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  swift_bridgeObjectRetain(v3);
  v10 = v4;
  v11 = v5;
  v12 = v6;
  v13 = v7;
  v14 = v8;
  v15 = v9;
  return a1;
}

uint64_t assignWithCopy for MetricsEvent.ComponentRender(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  id v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(void **)(a1 + 24);
  v7 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = v7;

  v9 = *(void **)(a1 + 32);
  v10 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v10;
  v11 = v10;

  v12 = *(void **)(a1 + 40);
  v13 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v13;
  v14 = v13;

  v15 = *(void **)(a2 + 48);
  v16 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v15;
  v17 = v15;

  v18 = *(void **)(a1 + 56);
  v19 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v19;
  v20 = v19;

  v21 = *(void **)(a1 + 64);
  v22 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v22;
  v23 = v22;

  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

__n128 initializeWithTake for MetricsEvent.ComponentRender(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for MetricsEvent.ComponentRender(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);

  v6 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  v7 = *(void **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);

  v8 = *(void **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);

  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricsEvent.ComponentRender(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 73))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MetricsEvent.ComponentRender(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 73) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MetricsEvent.ComponentRender()
{
  return &type metadata for MetricsEvent.ComponentRender;
}

uint64_t storeEnumTagSinglePayload for MetricsEvent.ComponentRender.PreloadStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000C9944 + 4 * byte_1003CC279[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000C9978 + 4 * byte_1003CC274[v4]))();
}

uint64_t sub_1000C9978(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C9980(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C9988);
  return result;
}

uint64_t sub_1000C9994(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C999CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000C99A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C99A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MetricsEvent.ComponentRender.PreloadStatus()
{
  return &type metadata for MetricsEvent.ComponentRender.PreloadStatus;
}

uint64_t sub_1000C99C4()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_1000C99E8(void *a1)
{
  uint64_t v1;

  return sub_1000C4418(a1, v1);
}

void sub_1000C99F0()
{
  uint64_t v0;

  sub_1000E363C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void ***)(v0 + 32));
}

uint64_t sub_1000C9A0C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000C44F4(a1, v1);
}

void sub_1000C9A18()
{
  uint64_t v0;

  sub_1000C449C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000C9A20()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000C9A4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_1004BCBBC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10002E8E0;
  v3[11] = v2;
  return swift_task_switch(sub_1000C46E4, 0, 0);
}

uint64_t sub_1000C9AB0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C9ADC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000C9B1C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000C9B40()
{
  uint64_t v0;

  sub_1000C3204(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), (uint64_t)&OBJC_IVAR____TtC9MusicCore26MetricsReportingController_pageRenderEventSampler, (uint64_t (*)(void *))sub_1000BBC78);
}

void sub_1000C9B68()
{
  uint64_t v0;

  sub_1000C3204(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), (uint64_t)&OBJC_IVAR____TtC9MusicCore26MetricsReportingController_componentRenderEventSampler, (uint64_t (*)(void *))sub_1000BB844);
}

void sub_1000C9B90()
{
  uint64_t v0;

  sub_1000C1EEC(*(void **)(v0 + 16));
}

void sub_1000C9B98()
{
  uint64_t v0;

  sub_1000C4C70(*(void **)(v0 + 24), (uint64_t)CFRange.init(_:), 0);
}

uint64_t sub_1000C9C48(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v5 = ActionType.rawValue.getter(*(_BYTE *)(a2 + 32));
  v7 = v6;
  v8 = ActionType.rawValue.getter(a1);
  if (v5 == v8 && v7 == v9)
  {
LABEL_20:
    swift_bridgeObjectRelease_n(v7, 2);
    return 1;
  }
  v11 = v9;
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v7);
  result = swift_bridgeObjectRelease(v11);
  if ((v12 & 1) != 0)
  {
LABEL_7:
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  if (v2 == 1)
  {
LABEL_17:
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  v14 = 33;
  while (1)
  {
    v15 = v14 - 31;
    if (__OFADD__(v14 - 32, 1))
      break;
    v16 = ActionType.rawValue.getter(*(_BYTE *)(a2 + v14));
    v7 = v17;
    v18 = ActionType.rawValue.getter(a1);
    if (v16 == v18 && v7 == v19)
    {
      swift_bridgeObjectRelease(a2);
      goto LABEL_20;
    }
    v21 = v19;
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v7, v18, v19, 0);
    swift_bridgeObjectRelease(v7);
    result = swift_bridgeObjectRelease(v21);
    if ((v22 & 1) != 0)
      goto LABEL_7;
    ++v14;
    if (v15 == v2)
      goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000C9D9C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  if (v7 == a1 && v8 == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0);
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v11 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v13 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v14 = *(v11 - 1);
    v15 = *v11;
    v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0) & 1) != 0)
      return 1;
    result = 0;
    v11 += 2;
    if (v13 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000C9E60(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  _BOOL8 v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 5; ; ++i)
  {
    v4 = i - 3;
    if (__OFADD__(i - 4, 1))
      break;
    v6 = *(_QWORD *)(a2 + 8 * i) == result;
    v5 = v6;
    v6 = v6 || v4 == v2;
    if (v6)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000C9EC4(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
  {
    swift_bridgeObjectRetain(a2);
    __asm { BR              X9 }
  }
  return 0;
}

double Double.toMilliseconds.getter(double a1)
{
  return a1 * 1000.0;
}

uint64_t MetricsPageProperties.init(pageIdentifier:pageType:pageURL:pageDetails:extRefUrl:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t result;

  v16 = (int *)type metadata accessor for MetricsPageProperties(0);
  v17 = (uint64_t)a9 + v16[6];
  v18 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v19 = v16[7];
  *(_QWORD *)((char *)a9 + v19) = 0;
  v20 = (_QWORD *)((char *)a9 + v16[8]);
  *v20 = 0;
  v20[1] = 0;
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  sub_1000C5FAC(a5, v17);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a9 + v19));
  *(_QWORD *)((char *)a9 + v19) = a6;
  result = swift_bridgeObjectRelease(v20[1]);
  *v20 = a7;
  v20[1] = a8;
  return result;
}

uint64_t type metadata accessor for MetricsPageProperties(uint64_t a1)
{
  uint64_t result;

  result = qword_1004BCC40;
  if (!qword_1004BCC40)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MetricsPageProperties);
  return result;
}

uint64_t sub_1000CA300(void *a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  __n128 v16;
  void *v17;
  id v18;
  Swift::Int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  uint64_t v25;
  void **aBlock;
  unint64_t v27;
  uint64_t (*v28)(uint64_t);
  void *v29;
  uint64_t (*v30)();
  uint64_t v31;
  unsigned __int8 v32;

  objc_opt_self(MPModelGenericObject);
  v2 = (void *)swift_dynamicCastObjCClass(a1);
  if (v2)
  {
    v3 = objc_msgSend(v2, "innermostModelObject");
LABEL_3:
    v4 = sub_1000CA300(v3);

    v5 = 0;
    v6 = 0;
LABEL_8:
    v32 = v4;
LABEL_9:
    sub_10000DCF8((uint64_t)v5, v6);
    return v4;
  }
  objc_opt_self(MPModelArtist);
  if (swift_dynamicCastObjCClass(a1))
  {

    v5 = 0;
    v6 = 0;
    v4 = 3;
    goto LABEL_8;
  }
  objc_opt_self(MPModelSocialPerson);
  if (swift_dynamicCastObjCClass(a1))
  {

    v5 = 0;
    v6 = 0;
    v4 = 4;
    goto LABEL_8;
  }
  objc_opt_self(MPModelAlbum);
  if (swift_dynamicCastObjCClass(a1))
  {

    v4 = 0;
    v5 = 0;
    v6 = 0;
    v32 = 0;
    goto LABEL_9;
  }
  objc_opt_self(MPModelComposer);
  if (swift_dynamicCastObjCClass(a1))
  {

    v5 = 0;
    v6 = 0;
    v4 = 8;
    goto LABEL_8;
  }
  objc_opt_self(MPModelCurator);
  if (swift_dynamicCastObjCClass(a1))
  {

    v5 = 0;
    v6 = 0;
    v4 = 10;
    goto LABEL_8;
  }
  objc_opt_self(MPModelGenre);
  if (swift_dynamicCastObjCClass(a1))
  {

    v5 = 0;
    v6 = 0;
    v4 = 11;
    goto LABEL_8;
  }
  objc_opt_self(MPModelPlaylist);
  if (swift_dynamicCastObjCClass(a1))
  {

    v5 = 0;
    v6 = 0;
    v4 = 1;
    goto LABEL_8;
  }
  objc_opt_self(MPModelRadioStation);
  if (swift_dynamicCastObjCClass(a1))
  {

    v5 = 0;
    v6 = 0;
    v4 = 12;
    goto LABEL_8;
  }
  objc_opt_self(MPModelSong);
  v8 = swift_dynamicCastObjCClass(a1);
  if (v8)
  {
    v9 = v8;
    v32 = 2;
    v10 = (void *)objc_opt_self(MPModelObject);
    v11 = swift_allocObject(&unk_100471AF0, 32, 7);
    *(_QWORD *)(v11 + 16) = v9;
    *(_QWORD *)(v11 + 24) = &v32;
    v12 = swift_allocObject(&unk_100471B18, 32, 7);
    *(_QWORD *)(v12 + 16) = sub_1000CFE54;
    *(_QWORD *)(v12 + 24) = v11;
    v25 = v11;
    v30 = sub_1000CFD00;
    v31 = v12;
    aBlock = _NSConcreteStackBlock;
    v27 = 1107296256;
    v28 = sub_100011BA4;
    v29 = &unk_100471B30;
    v13 = _Block_copy(&aBlock);
    v14 = v31;
    v15 = a1;
    swift_retain(v12);
    objc_msgSend(v10, "performWithoutEnforcement:", v13, swift_release(v14).n128_f64[0]);

    _Block_release(v13);
    LOBYTE(v15) = swift_isEscapingClosureAtFileLocation(v12, "", 127, 609, 53, 1, v16);
    swift_release(v12);
    if ((v15 & 1) == 0)
    {
      v5 = sub_1000CFE54;
      v4 = v32;
      v6 = v25;
      goto LABEL_9;
    }
    __break(1u);
  }
  else
  {
    objc_opt_self(MPModelTVShow);
    if (swift_dynamicCastObjCClass(a1))
    {

      v5 = 0;
      v6 = 0;
      v4 = 6;
      goto LABEL_8;
    }
    objc_opt_self(MPModelTVEpisode);
    if (swift_dynamicCastObjCClass(a1))
    {

      v5 = 0;
      v6 = 0;
      v4 = 7;
      goto LABEL_8;
    }
    objc_opt_self(MPModelMovie);
    if (swift_dynamicCastObjCClass(a1))
    {

      v5 = 0;
      v6 = 0;
      v4 = 5;
      goto LABEL_8;
    }
    objc_opt_self(MPModelPlaylistEntry);
    v17 = (void *)swift_dynamicCastObjCClass(a1);
    if (v17)
    {
      v18 = objc_msgSend(v17, "innermostModelObject");
      objc_opt_self(MPModelPlaylistEntry);
      if (swift_dynamicCastObjCClass(v18))
      {

        v5 = 0;
        v6 = 0;
        v4 = 17;
        goto LABEL_8;
      }
      v3 = v18;
      goto LABEL_3;
    }
    objc_opt_self(MPModelRecordLabel);
    if (swift_dynamicCastObjCClass(a1))
    {

      v5 = 0;
      v6 = 0;
      v4 = 19;
      goto LABEL_8;
    }
    objc_opt_self(MPModelCreditsArtist);
    if (swift_dynamicCastObjCClass(a1))
    {

      v5 = 0;
      v6 = 0;
      v4 = 9;
      goto LABEL_8;
    }
  }
  aBlock = 0;
  v27 = 0xE000000000000000;
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease(v27);
  aBlock = (void **)0xD00000000000002BLL;
  v27 = 0x80000001003A93F0;
  v19 = sub_1001ED4E4((uint64_t)&off_100465DC0);
  MPModelObject.humanDescription(including:)(v19);
  v21 = v20;
  v23 = v22;
  swift_bridgeObjectRelease(v19);
  v24._countAndFlagsBits = v21;
  v24._object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v23);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, aBlock, v27, "MusicCore/MetricsUtilities.swift", 32, 2, 635, 0);
  __break(1u);
  return result;
}

uint64_t MetricsContentType.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000CA894 + 4 * byte_1003CC6CA[a1]))(0x6D75626C61, 0xE500000000000000);
}

uint64_t sub_1000CA894()
{
  return 0x7473696C79616C70;
}

uint64_t sub_1000CAA20()
{
  return 0x497972617262696CLL;
}

uint64_t sub_1000CAA40()
{
  return 0x614C64726F636572;
}

BOOL sub_1000CAA60()
{
  void *v0;
  uint64_t ObjectType;
  void *v2;
  void *ObjCClassFromMetadata;
  double v4;
  double v5;
  double v6;
  _BOOL8 result;

  ObjectType = swift_getObjectType(v0);
  result = 1;
  if (!objc_msgSend(v0, "cachedResponse")
    || (v2 = (void *)swift_getObjCClassFromMetadata(ObjectType),
        objc_msgSend(v0, "xpSamplingPercentageCachedResponses"),
        (objc_msgSend(v2, "shouldReportCachedEventWithSamplingPercentage:") & 1) == 0))
  {
    if ((objc_msgSend(v0, "cachedResponse") & 1) != 0)
      return 0;
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(ObjectType);
    objc_msgSend(v0, "xpSessionDuration");
    v5 = v4;
    objc_msgSend(v0, "xpSamplingPercentageUsers");
    if ((objc_msgSend(ObjCClassFromMetadata, "shouldCollectTimingDataWithSessionDuration:samplingPercentage:", v5, v6) & 1) == 0)return 0;
  }
  return result;
}

id ModelObjectBackedStoreItemMetadata.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

id Double.toMillisecondsInServerTime.getter(double a1)
{
  id v1;
  id v2;

  v1 = objc_msgSend((id)objc_opt_self(AMSMetrics), "serverTimeFromTimeInterval:", a1);
  v2 = objc_msgSend(v1, "unsignedLongLongValue");

  return v2;
}

uint64_t sub_1000CABC4()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v4;
  _OWORD v5[2];
  _BYTE v6[24];
  uint64_t v7;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "propertyForBodyKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_1000CE5CC((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    if (swift_dynamicCast(&v4, v6, (char *)&type metadata for Any + 8, &type metadata for String, 6))
      return v4;
    else
      return 0;
  }
  else
  {
    sub_10000FE2C((uint64_t)v6, &qword_1004BE030);
    return 0;
  }
}

uint64_t SharePlayTogetherSession.Participant.displayName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 24));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t MetricsPageProperties.pageURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for MetricsPageProperties(0);
  return sub_10000FEB4(v1 + *(int *)(v3 + 24), a1, &qword_1004B99B0);
}

uint64_t MetricsPageProperties.pageURL.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for MetricsPageProperties(0) + 24);
  return sub_1000C5FAC(a1, v3);
}

CFRange (__swiftcall *MetricsPageProperties.pageURL.modify())(__C::_NSRange)
{
  type metadata accessor for MetricsPageProperties(0);
  return CFRange.init(_:);
}

uint64_t MetricsPageProperties.pageDetails.getter()
{
  type metadata accessor for MetricsPageProperties(0);
  return swift_bridgeObjectRetain();
}

uint64_t MetricsPageProperties.pageDetails.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for MetricsPageProperties(0) + 28);
  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + v3));
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

CFRange (__swiftcall *MetricsPageProperties.pageDetails.modify())(__C::_NSRange)
{
  type metadata accessor for MetricsPageProperties(0);
  return CFRange.init(_:);
}

uint64_t MetricsPageProperties.extRefUrl.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for MetricsPageProperties(0) + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricsPageProperties.extRefUrl.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for MetricsPageProperties(0) + 32));
  result = swift_bridgeObjectRelease(v5[1]);
  *v5 = a1;
  v5[1] = a2;
  return result;
}

CFRange (__swiftcall *MetricsPageProperties.extRefUrl.modify())(__C::_NSRange)
{
  type metadata accessor for MetricsPageProperties(0);
  return CFRange.init(_:);
}

uint64_t sub_1000CAEA8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = MetricsContentType.rawValue.getter(*a1);
  v5 = v4;
  v6 = MetricsContentType.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_1000CAF30()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6);
  v2 = MetricsContentType.rawValue.getter(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000CAF90(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = MetricsContentType.rawValue.getter(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000CAFD0()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6);
  v2 = MetricsContentType.rawValue.getter(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000CB02C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s9MusicCore18MetricsContentTypeO8rawValueACSgSS_tcfC_0(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_1000CB058@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = MetricsContentType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

char *sub_1000CB080()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD v20[5];
  __int128 v21;
  __int128 v22;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "valueForConfigurationKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    v21 = 0u;
    v22 = 0u;
  }
  sub_1000CE5CC((uint64_t)&v21, (uint64_t)v20);
  if (!v20[3])
  {
    sub_10000FE2C((uint64_t)v20, &qword_1004BE030);
    return 0;
  }
  v3 = sub_1000057B4(&qword_1004BCCE8);
  if ((swift_dynamicCast(&v18, v20, (char *)&type metadata for Any + 8, v3, 6) & 1) == 0)
    return 0;
  v4 = *(_QWORD *)(v18 + 16);
  if (v4)
  {
    v17 = v18;
    v5 = v18 + 32;
    v6 = (char *)_swiftEmptyArrayStorage;
    do
    {
      sub_10000990C(v5, (uint64_t)v20);
      v7 = sub_1000057B4((uint64_t *)&unk_1004BCFF0);
      if ((swift_dynamicCast(&v21, v20, (char *)&type metadata for Any + 8, v7, 6) & 1) != 0)
      {
        v8 = v21;
        v18 = 0x6D614E646C656966;
        v19 = 0xE900000000000065;
        AnyHashable.init<A>(_:)(v20, &v18, &type metadata for String, &protocol witness table for String);
        if (*(_QWORD *)(v8 + 16) && (v9 = sub_100027770((uint64_t)v20), (v10 & 1) != 0))
        {
          sub_10000990C(*(_QWORD *)(v8 + 56) + 32 * v9, (uint64_t)&v21);
        }
        else
        {
          v21 = 0u;
          v22 = 0u;
        }
        swift_bridgeObjectRelease(v8);
        sub_10000FC6C((uint64_t)v20);
        if (*((_QWORD *)&v22 + 1))
        {
          if ((swift_dynamicCast(&v18, &v21, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
          {
            v11 = v18;
            v12 = v19;
            if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
              v6 = sub_10005DE58(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
            v14 = *((_QWORD *)v6 + 2);
            v13 = *((_QWORD *)v6 + 3);
            if (v14 >= v13 >> 1)
              v6 = sub_10005DE58((char *)(v13 > 1), v14 + 1, 1, v6);
            *((_QWORD *)v6 + 2) = v14 + 1;
            v15 = &v6[16 * v14];
            *((_QWORD *)v15 + 4) = v11;
            *((_QWORD *)v15 + 5) = v12;
          }
        }
        else
        {
          sub_10000FE2C((uint64_t)&v21, &qword_1004BE030);
        }
      }
      v5 += 32;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease(v17);
  }
  else
  {
    swift_bridgeObjectRelease(v18);
    return (char *)_swiftEmptyArrayStorage;
  }
  return v6;
}

uint64_t SSMetricsMutableEvent.dictionaryRepresentation.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v4;

  v1 = objc_msgSend(objc_allocWithZone((Class)NSMutableDictionary), "init");
  objc_msgSend(v0, "appendPropertiesToBody:", v1);
  v4 = 0;
  v2 = v1;
  static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

  return v4;
}

uint64_t sub_1000CB3DC(void *a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  void *v2;
  NSString v5;
  NSString v6;
  NSString v7;
  id v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSString v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v21[2];
  _QWORD v22[3];
  uint64_t v23;

  v5 = String._bridgeToObjectiveC()();
  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setProperty:forBodyKey:", v5, v6);

  if (!a1)
    goto LABEL_7;
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(a1, "valueForConfigurationKey:", v7);

  if (v8)
  {
    _bridgeAnyObjectToAny(_:)(v8);
    swift_unknownObjectRelease(v8);
  }
  else
  {
    memset(v21, 0, sizeof(v21));
  }
  sub_1000CE5CC((uint64_t)v21, (uint64_t)v22);
  v9 = v23;
  if (v23)
  {
    v10 = sub_1000096A0(v22, v23);
    v11 = *(_QWORD *)(v9 - 8);
    __chkstk_darwin(v10);
    v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v11 + 16))(v13);
    v14 = _bridgeAnythingToObjectiveC<A>(_:)(v13, v9);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v9);
    sub_10000970C(v22);
  }
  else
  {
LABEL_7:
    v14 = 0;
  }
  v15 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setProperty:forBodyKey:", v14, v15);
  swift_unknownObjectRelease(v14);

  return a2(v16, v17, v18, v19);
}

double sub_1000CB5E0(void *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  double result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD aBlock[5];
  _QWORD *v34;

  v4 = v3;
  v27 = a2;
  v28 = a3;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v29 = *(_QWORD *)(v9 - 8);
  v30 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS.QoSClass(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000598C(0, (unint64_t *)&qword_1004BD060, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for DispatchQoS.QoSClass.userInitiated(_:), v12);
  v16 = (void *)static OS_dispatch_queue.global(qos:)(v15);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v17 = (_QWORD *)swift_allocObject(&unk_1004719D8, 48, 7);
  v17[2] = a1;
  v17[3] = v3;
  v18 = v28;
  v17[4] = v27;
  v17[5] = v18;
  aBlock[4] = sub_1000CFDAC;
  v34 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100011FD0;
  aBlock[3] = &unk_1004719F0;
  v19 = _Block_copy(aBlock);
  v20 = a1;
  v21 = v4;
  swift_retain(v18);
  static DispatchQoS.unspecified.getter(v22);
  v32 = _swiftEmptyArrayStorage;
  v23 = sub_100004D8C((unint64_t *)&qword_1004BE650, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_1000057B4(&qword_1004BCCD8);
  v25 = sub_1000CFDB8();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v24, v25, v6, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v30);
  *(_QWORD *)&result = swift_release(v34).n128_u64[0];
  return result;
}

void sub_1000CB858(uint64_t a1, void *a2, void (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  double v16;
  id v17;
  id v18;
  NSString v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t *v45;
  void (*v46)(uint64_t);
  uint64_t v47;
  int64_t v48;
  unint64_t v49;

  v5 = _s9MusicCore18DeviceCapabilitiesO9diskUsageSDyAC04DiskF8CategoryOs5Int64VGvgZ_0();
  v6 = sub_1000BB084((uint64_t)&off_100467710);
  v7 = sub_1000057B4(&qword_1004BCCE0);
  swift_arrayDestroy(&unk_100467730, 5, v7);
  v46 = a3;
  if (a1 && (v8 = sub_1000CB080()) != 0)
  {
    v9 = v8;
  }
  else
  {
    swift_bridgeObjectRelease(0);
    v9 = (char *)_swiftEmptyArrayStorage;
  }
  v10 = 0;
  v11 = v6 + 64;
  v12 = 1 << *(_BYTE *)(v6 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v6 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  v45 = (uint64_t *)(v9 + 72);
  v48 = v15;
  v49 = v6;
  while (1)
  {
    do
    {
      do
      {
        while (v14)
        {
          v20 = __clz(__rbit64(v14));
          v14 &= v14 - 1;
          v21 = v20 | (v10 << 6);
          if (*(_QWORD *)(v5 + 16))
            goto LABEL_28;
        }
        v22 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
LABEL_53:
          __break(1u);
          goto LABEL_54;
        }
        if (v22 >= v15)
          goto LABEL_51;
        v23 = *(_QWORD *)(v11 + 8 * v22);
        ++v10;
        if (!v23)
        {
          v10 = v22 + 1;
          if (v22 + 1 >= v15)
            goto LABEL_51;
          v23 = *(_QWORD *)(v11 + 8 * v10);
          if (!v23)
          {
            v10 = v22 + 2;
            if (v22 + 2 >= v15)
              goto LABEL_51;
            v23 = *(_QWORD *)(v11 + 8 * v10);
            if (!v23)
            {
              v24 = v22 + 3;
              if (v24 >= v15)
              {
LABEL_51:
                swift_bridgeObjectRelease(v5);
                swift_release(v6);
                v44 = swift_bridgeObjectRelease(v9);
                v46(v44);
                return;
              }
              v23 = *(_QWORD *)(v11 + 8 * v24);
              if (!v23)
              {
                while (1)
                {
                  v10 = v24 + 1;
                  if (__OFADD__(v24, 1))
                    goto LABEL_53;
                  if (v10 >= v15)
                    goto LABEL_51;
                  v23 = *(_QWORD *)(v11 + 8 * v10);
                  ++v24;
                  if (v23)
                    goto LABEL_27;
                }
              }
              v10 = v24;
            }
          }
        }
LABEL_27:
        v14 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v10 << 6);
      }
      while (!*(_QWORD *)(v5 + 16));
LABEL_28:
      v25 = (uint64_t *)(*(_QWORD *)(v6 + 56) + 16 * v21);
      v27 = *v25;
      v26 = v25[1];
      v28 = sub_1000C55D4(*(_BYTE *)(*(_QWORD *)(v6 + 48) + v21));
    }
    while ((v29 & 1) == 0);
    v16 = (double)(*(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28) / 0x100000);
    v30 = *((_QWORD *)v9 + 2);
    if (v30)
      break;
LABEL_10:
    v17 = objc_allocWithZone((Class)NSNumber);
    swift_bridgeObjectRetain();
    v18 = objc_msgSend(v17, "initWithDouble:", v16);
    v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v26);
    objc_msgSend(a2, "setProperty:forBodyKey:", v18, v19);

  }
  v31 = v11;
  v32 = *((_QWORD *)v9 + 4);
  v33 = *((_QWORD *)v9 + 5);
  v34 = v9;
  v35 = v32 == v27 && v33 == v26;
  if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)(v32, v33, v27, v26, 0) & 1) != 0)
    goto LABEL_8;
  if (v30 == 1)
    goto LABEL_9;
  v36 = *((_QWORD *)v9 + 6);
  v37 = *((_QWORD *)v9 + 7);
  v38 = v36 == v27 && v37 == v26;
  if (v38 || (_stringCompareWithSmolCheck(_:_:expecting:)(v36, v37, v27, v26, 0) & 1) != 0)
  {
LABEL_8:
    v16 = floor(v16 / 100.0) * 100.0;
LABEL_9:
    v9 = v34;
    v11 = v31;
    v15 = v48;
    v6 = v49;
    goto LABEL_10;
  }
  if (v30 == 2)
    goto LABEL_9;
  v39 = v45;
  v40 = 2;
  while (!__OFADD__(v40, 1))
  {
    v41 = *(v39 - 1);
    v42 = *v39;
    if (v41 == v27 && v42 == v26)
      goto LABEL_8;
    v47 = v40 + 1;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v41, v42, v27, v26, 0) & 1) != 0)
      goto LABEL_8;
    v39 += 2;
    ++v40;
    if (v47 == v30)
      goto LABEL_9;
  }
LABEL_54:
  __break(1u);
}

void sub_1000CBBC4(void *a1, _QWORD *a2, void (*a3)(void), uint64_t a4)
{
  void *v4;
  void *v7;
  uint64_t v9;
  void (*v10)(void **, _QWORD *);
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  id v15;
  _QWORD v16[2];
  void *v17;
  _QWORD *v18;

  v18 = a2;
  if (a2[2])
  {
    v7 = v4;
    v10 = (void (*)(void **, _QWORD *))a2[4];
    v9 = a2[5];
    swift_bridgeObjectRetain();
    swift_retain(v9);
    sub_1000602BC(0, 1);
    v11 = v18;
    v12 = (_QWORD *)swift_allocObject(&unk_100471960, 56, 7);
    v12[2] = v7;
    v12[3] = a1;
    v12[4] = v11;
    v12[5] = a3;
    v12[6] = a4;
    v17 = a1;
    v13 = swift_allocObject(&unk_100471988, 32, 7);
    *(_QWORD *)(v13 + 16) = sub_1000CFCFC;
    *(_QWORD *)(v13 + 24) = v12;
    v16[0] = sub_1000CFF50;
    v16[1] = v13;
    v14 = a1;
    swift_retain(a4);
    swift_retain(v12);
    v15 = v7;
    v10(&v17, v16);
    swift_release(v13);
    swift_release(v12);
    swift_release(v9);
  }
  else
  {
    a3();
  }
}

uint64_t sub_1000CBCF8(void *a1, uint64_t (*a2)(void), uint64_t a3, void *a4)
{
  id v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  Class isa;

  if (a1)
  {
    v6 = objc_msgSend(a1, "eventFields");
    if (v6)
    {
      v7 = v6;
      v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v6, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

      v9 = sub_100212EA8(v8);
      swift_bridgeObjectRelease(v8);
      if (v9)
      {
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v9);
        objc_msgSend(a4, "addPropertiesWithDictionary:", isa);

      }
    }
  }
  return a2();
}

double sub_1000CBDD4(uint64_t *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t (*)(), uint64_t, __n128))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  double result;

  v4 = *a1;
  v6 = *a2;
  v5 = a2[1];
  v7 = swift_allocObject(&unk_100471A28, 32, 7);
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = v5;
  v8 = swift_retain(v5);
  a3(v4, sub_10001122C, v7, v8);
  *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  return result;
}

uint64_t sub_1000CBE48(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, void *a4)
{
  id v6;
  id v7;
  NSString v8;

  v6 = objc_msgSend((id)objc_opt_self(ICDeviceInfo), "currentDeviceInfo");
  v7 = objc_msgSend(v6, "buildVersion");

  v8 = String._bridgeToObjectiveC()();
  objc_msgSend(a4, "setProperty:forBodyKey:", v7, v8);

  return a2();
}

void sub_1000CBFAC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  double v9;
  objc_super v10;
  _QWORD aBlock[5];
  uint64_t v12;

  aBlock[4] = a3;
  v12 = a4;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100011FD0;
  aBlock[3] = &unk_100471680;
  v7 = _Block_copy(aBlock);
  v8 = v12;
  swift_retain(a4);
  *(_QWORD *)&v9 = swift_release(v8).n128_u64[0];
  v10.receiver = a1;
  v10.super_class = (Class)SSMetricsBaseEvent;
  objc_msgSendSuper2(&v10, "setStandardPropertiesWith:completionHandler:", a2, v7, v9);
  _Block_release(v7);
}

void ICURLSession.enqueueDataRequestRecordingPerformanceMetrics(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[5];
  uint64_t v11;

  v7 = swift_allocObject(&unk_100471420, 32, 7);
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a3;
  v10[4] = sub_1000CDB64;
  v11 = v7;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_100021234;
  v10[3] = &unk_100471438;
  v8 = _Block_copy(v10);
  v9 = v11;
  swift_retain(a3);
  objc_msgSend(v3, "enqueueDataRequest:withCompletionHandler:", a1, v8, swift_release(v9).n128_f64[0]);
  _Block_release(v8);
}

uint64_t sub_1000CC1F0(void *a1, uint64_t a2, uint64_t (*a3)(void *, uint64_t), uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void *, uint64_t);
  void **aBlock;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  void *v37;
  void (*v38)();
  uint64_t v39;

  v32 = a4;
  v33 = a3;
  v31 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000598C(0, (unint64_t *)&qword_1004BD060, OS_dispatch_queue_ptr);
  v20 = (void *)static OS_dispatch_queue.main.getter(v12, v13, v14, v15, v16, v17, v18, v19, v30, v31, v32, v33, aBlock, v35, v36);
  v21 = swift_allocObject(&unk_100471A50, 24, 7);
  *(_QWORD *)(v21 + 16) = a1;
  v38 = sub_1000CFE28;
  v39 = v21;
  aBlock = _NSConcreteStackBlock;
  v35 = 1107296256;
  v36 = sub_100011FD0;
  v37 = &unk_100471A68;
  v22 = _Block_copy(&aBlock);
  v23 = v39;
  v24 = a1;
  swift_release(v23);
  static DispatchQoS.unspecified.getter(v25);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v26 = sub_100004D8C((unint64_t *)&qword_1004BE650, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v27 = sub_1000057B4(&qword_1004BCCD8);
  v28 = sub_1000CFDB8();
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v27, v28, v5, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v33(a1, v31);
}

void sub_1000CC404(id a1)
{
  id v2;
  id v3;
  MusicCore::MetricsEvent::LoadUrl v4;

  if (qword_1004B8AE8 == -1)
  {
    if (!a1)
      return;
  }
  else
  {
    swift_once(&qword_1004B8AE8, sub_1000BF680);
    if (!a1)
      return;
  }
  v2 = objc_msgSend(a1, "performanceMetrics");
  if (v2)
  {
    v3 = v2;
    sub_1000C6044(v3, (uint64_t)&v4);
    MetricsReportingController.recordLoadUrlEvent(_:)(&v4);
    sub_1000C6490(&v4);

  }
}

uint64_t sub_1000CC4AC()
{
  return sub_1000CC664();
}

uint64_t sub_1000CC4C8()
{
  return sub_1000CC58C(0xD000000000000017, 0x80000001003A91C0);
}

uint64_t sub_1000CC570()
{
  return sub_1000CC58C(0xD00000000000001CLL, 0x80000001003A9130);
}

uint64_t sub_1000CC58C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD v4[2];
  __int128 v5;
  uint64_t v6;

  v4[0] = a1;
  v4[1] = a2;
  v2 = sub_10002D3FC();
  NSUserDefaults.subscript.getter((uint64_t)v4, (uint64_t)&type metadata for String, v2, &v5);
  if (v6)
  {
    if ((swift_dynamicCast(v4, &v5, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
      return LOBYTE(v4[0]);
  }
  else
  {
    sub_10000FE2C((uint64_t)&v5, &qword_1004BE030);
  }
  return 0;
}

uint64_t sub_1000CC610@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCA50(0xD00000000000001CLL, 0x80000001003A93D0, a1);
}

uint64_t sub_1000CC62C(uint64_t a1)
{
  return sub_1000CCB34(a1, 0xD00000000000001CLL, 0x80000001003A93D0);
}

uint64_t sub_1000CC648()
{
  return sub_1000CC664();
}

uint64_t sub_1000CC664()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "propertyForBodyKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_1000CE5CC((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    v3 = sub_10000598C(0, &qword_1004BCBD8, NSNumber_ptr);
    if (swift_dynamicCast(&v5, v7, (char *)&type metadata for Any + 8, v3, 6))
      return v5;
    else
      return 0;
  }
  else
  {
    sub_10000FE2C((uint64_t)v7, &qword_1004BE030);
    return 0;
  }
}

uint64_t sub_1000CC778(void *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v7;
  id v8;
  NSString v9;
  id v10;
  id v11;
  __n128 v12;

  v7 = a1;
  swift_retain(a3);
  v8 = v3;
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v8, "setEventType:", v9);

  v10 = v8;
  v11 = v7;
  swift_retain(a3);
  sub_1000CF7A8(a1, v10, v10, (uint64_t)a1, a2, a3);

  return swift_release_n(a3, 2, v12);
}

id sub_1000CC9BC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Music_SSMetricsComponentRenderEvent();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000CCA18()
{
  return sub_1000CC58C(0xD000000000000017, 0x80000001003A9380);
}

uint64_t sub_1000CCA34@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCA50(0xD000000000000026, 0x80000001003A93A0, a1);
}

uint64_t sub_1000CCA50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  _QWORD v9[2];
  __int128 v10;
  uint64_t v11;

  v9[0] = a1;
  v9[1] = a2;
  v4 = sub_10002D3FC();
  NSUserDefaults.subscript.getter((uint64_t)v9, (uint64_t)&type metadata for String, v4, &v10);
  if (v11)
  {
    v5 = type metadata accessor for Date(0);
    v6 = swift_dynamicCast(a3, &v10, (char *)&type metadata for Any + 8, v5, 6);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a3, v6 ^ 1u, 1, v5);
  }
  else
  {
    sub_10000FE2C((uint64_t)&v10, &qword_1004BE030);
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a3, 1, 1, v8);
  }
}

uint64_t sub_1000CCB18(uint64_t a1)
{
  return sub_1000CCB34(a1, 0xD000000000000026, 0x80000001003A93A0);
}

uint64_t sub_1000CCB34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD v14[2];
  __int128 v15;
  __int128 v16;

  v6 = sub_1000057B4(&qword_1004BCBD0);
  __chkstk_darwin(v6);
  v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000FEB4(a1, (uint64_t)v8, &qword_1004BCBD0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_10000FE2C((uint64_t)v8, &qword_1004BCBD0);
    v15 = 0u;
    v16 = 0u;
  }
  else
  {
    *((_QWORD *)&v16 + 1) = v9;
    v11 = sub_1000407CC(&v15);
    (*(void (**)(_QWORD *, char *, uint64_t))(v10 + 32))(v11, v8, v9);
  }
  v14[0] = a2;
  v14[1] = a3;
  v12 = sub_10002D3FC();
  NSUserDefaults.subscript.setter((uint64_t)&v15, (uint64_t)v14, (uint64_t)&type metadata for String, v12);
  return sub_10000FE2C(a1, &qword_1004BCBD0);
}

id DeviceCapabilitiesObjC.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "init");
}

id Music_SSMetricsPageRenderEvent.__allocating_init(bodyDictionary:)(uint64_t a1)
{
  objc_class *v1;
  id v3;
  Class isa;
  id v5;

  v3 = objc_allocWithZone(v1);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v5 = objc_msgSend(v3, "initWithBodyDictionary:", isa);

  return v5;
}

id Music_SSMetricsPageRenderEvent.init(bodyDictionary:)(uint64_t a1)
{
  void *v1;
  objc_class *ObjectType;
  Class isa;
  id v5;
  objc_super v7;

  ObjectType = (objc_class *)swift_getObjectType(v1);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v7.receiver = v1;
  v7.super_class = ObjectType;
  v5 = objc_msgSendSuper2(&v7, "initWithBodyDictionary:", isa);

  return v5;
}

id DeviceCapabilitiesObjC.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000CCF48(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  char v27;
  int64_t v28;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v28 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v4 << 6);
      goto LABEL_25;
    }
    v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v11 >= v28)
      return 1;
    v12 = *(_QWORD *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      v4 = v11 + 1;
      if (v11 + 1 >= v28)
        return 1;
      v12 = *(_QWORD *)(v5 + 8 * v4);
      if (!v12)
      {
        v4 = v11 + 2;
        if (v11 + 2 >= v28)
          return 1;
        v12 = *(_QWORD *)(v5 + 8 * v4);
        if (!v12)
        {
          v4 = v11 + 3;
          if (v11 + 3 >= v28)
            return 1;
          v12 = *(_QWORD *)(v5 + 8 * v4);
          if (!v12)
            break;
        }
      }
    }
LABEL_24:
    v8 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_25:
    v14 = 16 * v10;
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + v14);
    v16 = *v15;
    v17 = v15[1];
    v18 = (uint64_t *)(*(_QWORD *)(v3 + 56) + v14);
    v20 = *v18;
    v19 = v18[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = sub_1000277A0(v16, v17);
    v23 = v22;
    swift_bridgeObjectRelease(v17);
    if ((v23 & 1) == 0)
    {
      swift_bridgeObjectRelease(v19);
      return 0;
    }
    v24 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v21);
    v25 = v24[1];
    if (*v24 == v20 && v25 == v19)
    {
      result = swift_bridgeObjectRelease(v19);
    }
    else
    {
      v27 = _stringCompareWithSmolCheck(_:_:expecting:)(*v24, v25, v20, v19, 0);
      result = swift_bridgeObjectRelease(v19);
      if ((v27 & 1) == 0)
        return 0;
    }
  }
  v13 = v11 + 4;
  if (v13 >= v28)
    return 1;
  v12 = *(_QWORD *)(v5 + 8 * v13);
  if (v12)
  {
    v4 = v13;
    goto LABEL_24;
  }
  while (1)
  {
    v4 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v4 >= v28)
      return 1;
    v12 = *(_QWORD *)(v5 + 8 * v4);
    ++v13;
    if (v12)
      goto LABEL_24;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t _s9MusicCore21MetricsPagePropertiesV23__derived_struct_equalsySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  void (*v35)(_BYTE *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _BYTE v47[4];
  int v48;
  _BYTE *v49;
  uint64_t v50;
  _BYTE *v51;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v47[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_1000057B4(&qword_1004BCCF0);
  __chkstk_darwin(v8);
  v10 = &v47[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_1000057B4(&qword_1004B99B0);
  v12 = __chkstk_darwin(v11);
  v14 = &v47[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = __chkstk_darwin(v12);
  v17 = &v47[-v16];
  __chkstk_darwin(v15);
  v19 = &v47[-v18];
  v20 = a1[1];
  v21 = a2[1];
  if (*a1 == *a2 && v20 == v21
    || (v22 = _stringCompareWithSmolCheck(_:_:expecting:)(*a1, v20, *a2, v21, 0), result = 0, (v22 & 1) != 0))
  {
    if ((v24 = a1[2], v25 = a1[3], v26 = a2[2], v27 = a2[3], v24 == v26) && v25 == v27
      || (v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v26, v27, 0), result = 0, (v28 & 1) != 0))
    {
      v51 = v14;
      v49 = v7;
      v29 = type metadata accessor for MetricsPageProperties(0);
      sub_10000FEB4((uint64_t)a1 + *(int *)(v29 + 24), (uint64_t)v19, &qword_1004B99B0);
      v50 = v29;
      sub_10000FEB4((uint64_t)a2 + *(int *)(v29 + 24), (uint64_t)v17, &qword_1004B99B0);
      v30 = (uint64_t)&v10[*(int *)(v8 + 48)];
      sub_10000FEB4((uint64_t)v19, (uint64_t)v10, &qword_1004B99B0);
      sub_10000FEB4((uint64_t)v17, v30, &qword_1004B99B0);
      v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
      if (v31((uint64_t)v10, 1, v4) == 1)
      {
        sub_10000FE2C((uint64_t)v17, &qword_1004B99B0);
        sub_10000FE2C((uint64_t)v19, &qword_1004B99B0);
        if (v31(v30, 1, v4) == 1)
        {
          sub_10000FE2C((uint64_t)v10, &qword_1004B99B0);
LABEL_16:
          v36 = v50;
          v37 = *(int *)(v50 + 28);
          v38 = *(_QWORD *)((char *)a1 + v37);
          v39 = *(_QWORD *)((char *)a2 + v37);
          if (v38)
          {
            if (v39)
            {
              swift_bridgeObjectRetain();
              v40 = swift_bridgeObjectRetain();
              v41 = sub_1000CCF48(v40, v39);
              swift_bridgeObjectRelease(v38);
              swift_bridgeObjectRelease(v39);
              if ((v41 & 1) != 0)
              {
LABEL_21:
                v42 = *(int *)(v36 + 32);
                v43 = (_QWORD *)((char *)a1 + v42);
                v44 = *(_QWORD *)((char *)a1 + v42 + 8);
                v45 = (_QWORD *)((char *)a2 + v42);
                v46 = v45[1];
                if (v44)
                {
                  if (v46
                    && (*v43 == *v45 && v44 == v46
                     || (_stringCompareWithSmolCheck(_:_:expecting:)(*v43, v44, *v45, v46, 0) & 1) != 0))
                  {
                    return 1;
                  }
                }
                else if (!v46)
                {
                  return 1;
                }
              }
            }
          }
          else if (!v39)
          {
            goto LABEL_21;
          }
          return 0;
        }
      }
      else
      {
        v32 = (uint64_t)v51;
        sub_10000FEB4((uint64_t)v10, (uint64_t)v51, &qword_1004B99B0);
        if (v31(v30, 1, v4) != 1)
        {
          v33 = v49;
          (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 32))(v49, v30, v4);
          v34 = sub_100004D8C(qword_1004BCCF8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
          v48 = dispatch thunk of static Equatable.== infix(_:_:)(v32, v33, v4, v34);
          v35 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
          v35(v33, v4);
          sub_10000FE2C((uint64_t)v17, &qword_1004B99B0);
          sub_10000FE2C((uint64_t)v19, &qword_1004B99B0);
          v35((_BYTE *)v32, v4);
          sub_10000FE2C((uint64_t)v10, &qword_1004B99B0);
          if ((v48 & 1) == 0)
            return 0;
          goto LABEL_16;
        }
        sub_10000FE2C((uint64_t)v17, &qword_1004B99B0);
        sub_10000FE2C((uint64_t)v19, &qword_1004B99B0);
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v32, v4);
      }
      sub_10000FE2C((uint64_t)v10, &qword_1004BCCF0);
      return 0;
    }
  }
  return result;
}

void sub_1000CD570(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v12;
  char v13;
  uint64_t v14;
  NSString v15;
  uint64_t v16;
  NSString v17;
  NSString v18;
  id v19;
  uint64_t v20;
  _QWORD *receiver;
  unint64_t v22;
  char v23;
  uint64_t v24;
  id v25;
  id v26;
  void *v27;
  Class isa;
  void *v29;
  uint64_t v30;
  objc_class *v31;
  objc_class *v32;
  NSString v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  id v37;
  id v38;
  NSString v39;
  void *v40;
  uint64_t v41;
  objc_super v42;
  objc_super v43[2];
  objc_super v44;
  __int128 aBlock;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;

  v12 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v13 = sub_1000CC58C(0xD000000000000017, 0x80000001003A9380);

  LOBYTE(aBlock) = v13 & 1;
  v14 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&aBlock, &type metadata for Bool);
  v15 = String._bridgeToObjectiveC()();
  objc_msgSend(a2, "setProperty:forBodyKey:", v14, v15);
  swift_unknownObjectRelease(v14);

  *(_QWORD *)&aBlock = 0x646E655265676170;
  *((_QWORD *)&aBlock + 1) = 0xEA00000000007265;
  v16 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&aBlock, &type metadata for String);
  v17 = String._bridgeToObjectiveC()();
  objc_msgSend(a2, "setProperty:forBodyKey:", v16, v17);
  swift_unknownObjectRelease(v16);

  if (!a1)
  {
    aBlock = 0u;
    v46 = 0u;
LABEL_16:
    sub_10000FE2C((uint64_t)&aBlock, &qword_1004BE030);
    goto LABEL_17;
  }
  v18 = String._bridgeToObjectiveC()();
  v19 = objc_msgSend(a1, "valueForConfigurationKey:", v18);

  if (v19)
  {
    _bridgeAnyObjectToAny(_:)(v19);
    swift_unknownObjectRelease(v19);
  }
  else
  {
    memset(v43, 0, sizeof(v43));
  }
  sub_1000CE5CC((uint64_t)v43, (uint64_t)&aBlock);
  if (!*((_QWORD *)&v46 + 1))
    goto LABEL_16;
  v20 = sub_1000057B4((uint64_t *)&unk_1004BF820);
  if (swift_dynamicCast(v43, &aBlock, (char *)&type metadata for Any + 8, v20, 6))
  {
    receiver = v43[0].receiver;
    if (*((_QWORD *)v43[0].receiver + 2)
      && (v22 = sub_1000277A0(0xD000000000000021, 0x80000001003A9330), (v23 & 1) != 0))
    {
      sub_10000990C(receiver[7] + 32 * v22, (uint64_t)&aBlock);
      v24 = sub_10000598C(0, &qword_1004BCBD8, NSNumber_ptr);
      if (swift_dynamicCast(v43, &aBlock, (char *)&type metadata for Any + 8, v24, 6))
        v25 = v43[0].receiver;
      else
        v25 = 0;
      if ((v13 & 1) == 0)
        goto LABEL_14;
    }
    else
    {
      v25 = 0;
      if ((v13 & 1) == 0)
      {
LABEL_14:
        if (v25)
        {
          v26 = v25;
          v27 = v25;
          isa = (Class)v25;
        }
        else
        {
          v27 = 0;
          isa = 0;
        }
        goto LABEL_22;
      }
    }
    v27 = v25;
    sub_10000598C(0, &qword_1004BCBD8, NSNumber_ptr);
    isa = NSNumber.init(floatLiteral:)(1.0).super.super.isa;
LABEL_22:
    v32 = isa;
    v33 = String._bridgeToObjectiveC()();
    objc_msgSend(a2, "setProperty:forBodyKey:", v32, v33);

    if (receiver[2])
    {
      v34 = sub_1000277A0(0xD000000000000019, 0x80000001003A9360);
      if ((v35 & 1) != 0)
      {
        sub_10000990C(receiver[7] + 32 * v34, (uint64_t)&aBlock);
      }
      else
      {
        aBlock = 0u;
        v46 = 0u;
      }
    }
    else
    {
      aBlock = 0u;
      v46 = 0u;
    }
    swift_bridgeObjectRelease(receiver);
    if (*((_QWORD *)&v46 + 1))
    {
      v36 = sub_10000598C(0, &qword_1004BCBD8, NSNumber_ptr);
      if (swift_dynamicCast(v43, &aBlock, (char *)&type metadata for Any + 8, v36, 6))
      {
        v37 = v43[0].receiver;
LABEL_32:
        v38 = v37;
        v39 = String._bridgeToObjectiveC()();
        objc_msgSend(a2, "setProperty:forBodyKey:", v38, v39);

        v47 = a5;
        v48 = a6;
        *(_QWORD *)&aBlock = _NSConcreteStackBlock;
        *((_QWORD *)&aBlock + 1) = 1107296256;
        *(_QWORD *)&v46 = sub_100011FD0;
        *((_QWORD *)&v46 + 1) = &unk_100471AB8;
        v40 = _Block_copy(&aBlock);
        v41 = v48;
        swift_retain(a6);
        swift_release(v41);
        v42.receiver = a3;
        v42.super_class = (Class)type metadata accessor for Music_SSMetricsPageRenderEvent();
        objc_msgSendSuper2(&v42, "setStandardPropertiesWith:completionHandler:", a4, v40);
        _Block_release(v40);

        return;
      }
    }
    else
    {
      sub_10000FE2C((uint64_t)&aBlock, &qword_1004BE030);
    }
    v37 = 0;
    goto LABEL_32;
  }
LABEL_17:
  v47 = a5;
  v48 = a6;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v46 = sub_100011FD0;
  *((_QWORD *)&v46 + 1) = &unk_100471A90;
  v29 = _Block_copy(&aBlock);
  v30 = v48;
  swift_retain(a6);
  swift_release(v30);
  v31 = (objc_class *)type metadata accessor for Music_SSMetricsPageRenderEvent();
  v44.receiver = a3;
  v44.super_class = v31;
  objc_msgSendSuper2(&v44, "setStandardPropertiesWith:completionHandler:", a4, v29);
  _Block_release(v29);
}

uint64_t _s9MusicCore18MetricsContentTypeO8rawValueACSgSS_tcfC_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_100467510, a1, a2, &unk_1004B9450);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x14)
    return 20;
  else
    return v3;
}

uint64_t sub_1000CDB40()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000CDB64(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000CC1F0(a1, a2, *(uint64_t (**)(void *, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1000CDB6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000CDB7C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1000CDB88()
{
  unint64_t result;

  result = qword_1004BCBE0;
  if (!qword_1004BCBE0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MetricsContentType, &type metadata for MetricsContentType);
    atomic_store(result, (unint64_t *)&qword_1004BCBE0);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MetricsPageProperties(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for URL(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      v15 = sub_1000057B4(&qword_1004B99B0);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v17 = a3[8];
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    v18 = (uint64_t *)((char *)v4 + v17);
    v19 = (uint64_t *)((char *)a2 + v17);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for MetricsPageProperties(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = a1 + a2[6];
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7]));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
}

_QWORD *initializeWithCopy for MetricsPageProperties(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    v14 = sub_1000057B4(&qword_1004B99B0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MetricsPageProperties(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  *a1 = *a2;
  v6 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v6);
  a1[2] = a2[2];
  v7 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v7);
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = sub_1000057B4(&qword_1004B99B0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  v17 = a3[7];
  v18 = *(_QWORD *)((char *)a1 + v17);
  *(_QWORD *)((char *)a1 + v17) = *(_QWORD *)((char *)a2 + v17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v18);
  v19 = a3[8];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  *v20 = *v21;
  v22 = v20[1];
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v22);
  return a1;
}

_OWORD *initializeWithTake for MetricsPageProperties(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_1000057B4(&qword_1004B99B0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  return a1;
}

_QWORD *assignWithTake for MetricsPageProperties(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = sub_1000057B4(&qword_1004B99B0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  v19 = a3[7];
  v20 = *(_QWORD *)((char *)a1 + v19);
  *(_QWORD *)((char *)a1 + v19) = *(_QWORD *)((char *)a2 + v19);
  swift_bridgeObjectRelease(v20);
  v21 = a3[8];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  v25 = *v23;
  v24 = v23[1];
  v26 = v22[1];
  *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease(v26);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricsPageProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CE29C);
}

uint64_t sub_1000CE29C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1000057B4(&qword_1004B99B0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for MetricsPageProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CE328);
}

uint64_t sub_1000CE328(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1000057B4(&qword_1004B99B0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

void sub_1000CE3A0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_1003CC7E8;
  v4[1] = &unk_1003CC7E8;
  sub_1000C739C(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_1003CC800;
    v4[4] = &unk_1003CC818;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

uint64_t getEnumTagSinglePayload for MetricsContentType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xED)
    goto LABEL_17;
  if (a2 + 19 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 19) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 19;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 19;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 19;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x14;
  v8 = v6 - 20;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MetricsContentType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 19 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 19) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xED)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEC)
    return ((uint64_t (*)(void))((char *)&loc_1000CE504 + 4 * byte_1003CC6E3[v4]))();
  *a1 = a2 + 19;
  return ((uint64_t (*)(void))((char *)sub_1000CE538 + 4 * byte_1003CC6DE[v4]))();
}

uint64_t sub_1000CE538(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CE540(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000CE548);
  return result;
}

uint64_t sub_1000CE554(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000CE55CLL);
  *(_BYTE *)result = a2 + 19;
  return result;
}

uint64_t sub_1000CE560(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CE568(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MetricsContentType()
{
  return &type metadata for MetricsContentType;
}

uint64_t type metadata accessor for Music_SSMetricsComponentRenderEvent()
{
  return objc_opt_self(_TtC9MusicCore35Music_SSMetricsComponentRenderEvent);
}

uint64_t type metadata accessor for Music_SSMetricsPageRenderEvent()
{
  return objc_opt_self(_TtC9MusicCore30Music_SSMetricsPageRenderEvent);
}

uint64_t sub_1000CE5C4()
{
  uint64_t v0;

  return sub_10018F734(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000CE5CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000057B4(&qword_1004BE030);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1000CE614(void (*a1)(void))
{
  void *v1;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  _BOOL8 v8;
  id v9;
  uint64_t v10;
  __n128 v11;
  unint64_t v12;
  id v13;
  NSString v14;
  id v15;
  id v16;
  id v17;
  NSString v18;
  NSString v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  id v24;
  id v25;
  unint64_t v26;

  v3 = objc_msgSend((id)objc_opt_self(ICUserIdentityStore), "defaultIdentityStore");
  v4 = objc_msgSend((id)objc_opt_self(ICUserIdentity), "activeAccount");
  v25 = 0;
  v5 = objc_msgSend(v3, "DSIDForUserIdentity:outError:", v4, &v25);

  v6 = v25;
  if (v5)
  {
    v7 = v25;
    objc_msgSend(v1, "setAccountIdentifier:", v5);
    v8 = objc_msgSend(v5, "longLongValue") != 0;
  }
  else
  {
    v9 = v25;
    v10 = _convertNSErrorToError(_:)(v6);

    swift_willThrow(v11);
    swift_errorRelease(v10);
    objc_msgSend(v1, "setAccountIdentifier:", 0);
    v8 = 1;
  }
  v12 = 0xEA00000000006465;
  v13 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithBool:", v8);
  v14 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setProperty:forBodyKey:", v13, v14);

  v15 = objc_msgSend((id)objc_opt_self(MPCloudServiceStatusController), "sharedController");
  v16 = objc_msgSend(v15, "musicSubscriptionStatus");

  if (v16)
  {
    switch((unint64_t)objc_msgSend(v16, "statusType"))
    {
      case 0uLL:

        v12 = 0xE700000000000000;
        break;
      case 1uLL:
      case 3uLL:

        break;
      case 2uLL:
        v17 = objc_msgSend(v16, "reasonType");

        if (v17 == (id)4)
          v12 = 0x80000001003A9310;
        else
          v12 = 0xED00006465626972;
        break;
      default:
        v25 = 0;
        v26 = 0xE000000000000000;
        _StringGuts.grow(_:)(24);
        v20._object = (void *)0x80000001003A92D0;
        v20._countAndFlagsBits = 0xD000000000000013;
        String.append(_:)(v20);
        objc_msgSend(v16, "statusType");
        v21._countAndFlagsBits = 0xD00000000000001DLL;
        v21._object = (void *)0x80000001003A92F0;
        String.append(_:)(v21);
        v22._countAndFlagsBits = 32;
        v22._object = (void *)0xE100000000000000;
        String.append(_:)(v22);
        v24 = objc_msgSend(v16, "statusType");
        type metadata accessor for ICMusicSubscriptionStatusType(0);
        _print_unlocked<A, B>(_:_:)(&v24, &v25, v23, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v25, v26, "MusicCore/MetricsUtilities.swift", 32, 2, 151, 0);
        __break(1u);
        JUMPOUT(0x1000CEA38);
    }
  }
  else
  {
    v12 = 0xE700000000000000;
  }
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  v19 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setProperty:forBodyKey:", v18, v19);

  a1();
}

uint64_t sub_1000CEA48(uint64_t (*a1)(void))
{
  void *v1;
  void *v2;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  NSString v11;
  char v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  NSString v16;
  NSString v17;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  v2 = v1;
  swift_getObjectType();
  v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), "Topic");
  objc_msgSend(v2, "setTopic:", v4);

  v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v6 = objc_msgSend(v5, "infoDictionary");

  if (!v6
    || (v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v6, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String), v6, !v7))
  {
    v7 = 0;
    v21 = 0u;
    v22 = 0u;
    v12 = 1;
LABEL_12:
    sub_10000FE2C((uint64_t)&v21, &qword_1004BE030);
    goto LABEL_13;
  }
  if (!*(_QWORD *)(v7 + 16))
  {
    v12 = 0;
    v21 = 0u;
    v22 = 0u;
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  v8 = sub_1000277A0(0xD000000000000012, 0x80000001003A9280);
  if ((v9 & 1) == 0)
  {
    v21 = 0u;
    v22 = 0u;
    swift_bridgeObjectRelease(v7);
    goto LABEL_11;
  }
  sub_10000990C(*(_QWORD *)(v7 + 56) + 32 * v8, (uint64_t)&v21);
  swift_bridgeObjectRelease(v7);
  if (!*((_QWORD *)&v22 + 1))
  {
LABEL_11:
    v12 = 0;
    goto LABEL_12;
  }
  if ((swift_dynamicCast(&v19, &v21, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
  {
    v10 = v20;
    v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v10);
    v12 = 0;
    goto LABEL_14;
  }
  v12 = 0;
LABEL_13:
  v11 = 0;
LABEL_14:
  objc_msgSend(v2, "setApplicationIdentifier:", v11);

  if ((v12 & 1) != 0)
  {
    v21 = 0u;
    v22 = 0u;
LABEL_23:
    sub_10000FE2C((uint64_t)&v21, &qword_1004BE030);
    goto LABEL_24;
  }
  if (*(_QWORD *)(v7 + 16) && (v13 = sub_1000277A0(0xD00000000000001ALL, 0x80000001003A9260), (v14 & 1) != 0))
  {
    sub_10000990C(*(_QWORD *)(v7 + 56) + 32 * v13, (uint64_t)&v21);
  }
  else
  {
    v21 = 0u;
    v22 = 0u;
  }
  swift_bridgeObjectRelease(v7);
  if (!*((_QWORD *)&v22 + 1))
    goto LABEL_23;
  if ((swift_dynamicCast(&v19, &v21, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
LABEL_24:
    v16 = 0;
    goto LABEL_25;
  }
  v15 = v20;
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
LABEL_25:
  v17 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setProperty:forBodyKey:", v16, v17);
  swift_unknownObjectRelease(v16);

  return a1();
}

void sub_1000CED3C(void (*a1)(void))
{
  void *v1;
  NSString v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  __n128 v9;
  NSString v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[5];
  uint64_t v14;

  v3 = objc_msgSend((id)objc_opt_self(ICStoreURLRequest), "currentConnectionTypeHeader");
  if (!v3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v5 = v4;
    v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  objc_msgSend(v1, "setConnection:", v3);

  v6 = objc_allocWithZone((Class)ICStoreRequestContext);
  v13[4] = CFRange.init(_:);
  v14 = 0;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_10001D2BC;
  v13[3] = &unk_1004719A0;
  v7 = _Block_copy(v13);
  v8 = objc_msgSend(v6, "initWithBlock:", v7);
  _Block_release(v7);
  v9 = swift_release(v14);
  if ((swift_isEscapingClosureAtFileLocation(0, "", 0, 0, 0, 1, v9) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v10 = objc_msgSend(v8, "userAgent");
    if (!v10)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v12 = v11;
      v10 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v12);
    }
    objc_msgSend(v1, "setUserAgent:", v10);

    a1();
  }
}

double sub_1000CEECC(void *a1, _QWORD *a2, void *a3, void (**a4)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void **, _QWORD *);
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  id v15;
  double result;
  _QWORD v17[2];
  void *v18;
  _QWORD *v19;

  v8 = swift_allocObject(&unk_1004718E8, 24, 7);
  *(_QWORD *)(v8 + 16) = a4;
  v19 = a2;
  if (a2[2])
  {
    v10 = (void (*)(void **, _QWORD *))a2[4];
    v9 = a2[5];
    _Block_copy(a4);
    swift_bridgeObjectRetain();
    swift_retain(v9);
    sub_1000602BC(0, 1);
    v11 = v19;
    v12 = (_QWORD *)swift_allocObject(&unk_100471910, 56, 7);
    v12[2] = a3;
    v12[3] = a1;
    v12[4] = v11;
    v12[5] = sub_1000CFF24;
    v12[6] = v8;
    v18 = a1;
    v13 = swift_allocObject(&unk_100471938, 32, 7);
    *(_QWORD *)(v13 + 16) = sub_1000CFCFC;
    *(_QWORD *)(v13 + 24) = v12;
    v17[0] = sub_1000CFD00;
    v17[1] = v13;
    v14 = a1;
    swift_retain(v8);
    swift_retain(v12);
    v15 = a3;
    v10(&v18, v17);
    swift_release(v8);
    swift_release(v13);
    swift_release(v12);
    *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  }
  else
  {
    _Block_copy(a4);
    a4[2](a4);
    *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000CF02C(void *a1, void *a2, void (**a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = sub_1000057B4(&qword_1004BAC48);
  v7 = swift_allocObject(v6, 144, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1003C6330;
  v8 = swift_allocObject(&unk_1004716B8, 24, 7);
  *(_QWORD *)(v8 + 16) = a2;
  v9 = swift_allocObject(&unk_1004716E0, 32, 7);
  *(_QWORD *)(v9 + 16) = sub_1000CFC28;
  *(_QWORD *)(v9 + 24) = v8;
  *(_QWORD *)(v7 + 32) = sub_1000CFC30;
  *(_QWORD *)(v7 + 40) = v9;
  v10 = swift_allocObject(&unk_100471708, 24, 7);
  *(_QWORD *)(v10 + 16) = a2;
  v11 = swift_allocObject(&unk_100471730, 32, 7);
  *(_QWORD *)(v11 + 16) = sub_1000CFC38;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v7 + 48) = sub_1000CFF20;
  *(_QWORD *)(v7 + 56) = v11;
  v12 = swift_allocObject(&unk_100471758, 24, 7);
  *(_QWORD *)(v12 + 16) = a2;
  v13 = swift_allocObject(&unk_100471780, 32, 7);
  *(_QWORD *)(v13 + 16) = sub_1000CFC58;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v7 + 64) = sub_1000CFF20;
  *(_QWORD *)(v7 + 72) = v13;
  v14 = swift_allocObject(&unk_1004717A8, 24, 7);
  *(_QWORD *)(v14 + 16) = a2;
  v15 = swift_allocObject(&unk_1004717D0, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_1000CFC80;
  *(_QWORD *)(v15 + 24) = v14;
  *(_QWORD *)(v7 + 80) = sub_1000CFF20;
  *(_QWORD *)(v7 + 88) = v15;
  v16 = swift_allocObject(&unk_1004717F8, 24, 7);
  *(_QWORD *)(v16 + 16) = a2;
  v17 = swift_allocObject(&unk_100471820, 32, 7);
  *(_QWORD *)(v17 + 16) = sub_1000CFCA8;
  *(_QWORD *)(v17 + 24) = v16;
  *(_QWORD *)(v7 + 96) = sub_1000CFF20;
  *(_QWORD *)(v7 + 104) = v17;
  v18 = swift_allocObject(&unk_100471848, 24, 7);
  *(_QWORD *)(v18 + 16) = a2;
  v19 = swift_allocObject(&unk_100471870, 32, 7);
  *(_QWORD *)(v19 + 16) = sub_1000CFCC8;
  *(_QWORD *)(v19 + 24) = v18;
  *(_QWORD *)(v7 + 112) = sub_1000CFF20;
  *(_QWORD *)(v7 + 120) = v19;
  v20 = swift_allocObject(&unk_100471898, 24, 7);
  *(_QWORD *)(v20 + 16) = a2;
  v21 = swift_allocObject(&unk_1004718C0, 32, 7);
  *(_QWORD *)(v21 + 16) = sub_1000CFCD0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v7 + 128) = sub_1000CFF20;
  *(_QWORD *)(v7 + 136) = v21;
  sub_1000CEECC(a1, (_QWORD *)v7, a2, a3);
  return swift_bridgeObjectRelease(v7);
}

double sub_1000CF2B4(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v6;
  NSString v7;
  id v8;
  NSString v9;
  uint64_t v10;
  double result;

  v3 = v2;
  v6 = objc_msgSend(v3, "windowHeight");
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "setProperty:forBodyKey:", v6, v7);

  v8 = objc_msgSend(v3, "windowWidth");
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "setProperty:forBodyKey:", v8, v9);

  sub_10000598C(0, (unint64_t *)&qword_1004BD060, OS_dispatch_queue_ptr);
  v10 = swift_allocObject(&unk_100471668, 32, 7);
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  swift_retain(a2);
  static OS_dispatch_queue.asyncOnMainIfNeeded(_:)(sub_10001122C, v10);
  *(_QWORD *)&result = swift_release(v10).n128_u64[0];
  return result;
}

void sub_1000CF3F8(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v12;
  char v13;
  NSString v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  void *v24;
  uint64_t v25;
  double v26;
  __int128 v27;
  __int128 v28;
  objc_super v29;
  __int128 aBlock;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  v12 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v13 = sub_1000CC58C(0xD000000000000017, 0x80000001003A91C0);

  objc_msgSend(a2, "setXPSamplingForced:", v13 & 1);
  if (!a1)
  {
    aBlock = 0u;
    v31 = 0u;
LABEL_23:
    sub_10000FE2C((uint64_t)&aBlock, &qword_1004BE030);
    goto LABEL_24;
  }
  v14 = String._bridgeToObjectiveC()();
  v15 = objc_msgSend(a1, "valueForConfigurationKey:", v14);

  if (v15)
  {
    _bridgeAnyObjectToAny(_:)(v15);
    swift_unknownObjectRelease(v15);
  }
  else
  {
    v27 = 0u;
    v28 = 0u;
  }
  sub_1000CE5CC((uint64_t)&v27, (uint64_t)&aBlock);
  if (!*((_QWORD *)&v31 + 1))
    goto LABEL_23;
  v16 = sub_1000057B4((uint64_t *)&unk_1004BF820);
  if (!swift_dynamicCast(&v27, &aBlock, (char *)&type metadata for Any + 8, v16, 6))
    goto LABEL_24;
  v17 = v27;
  if (*(_QWORD *)(v27 + 16))
  {
    v18 = sub_1000277A0(0xD000000000000017, 0x80000001003A9170);
    if ((v19 & 1) != 0)
    {
      sub_10000990C(*(_QWORD *)(v17 + 56) + 32 * v18, (uint64_t)&aBlock);
      if (swift_dynamicCast(&v27, &aBlock, (char *)&type metadata for Any + 8, &type metadata for Double, 6))objc_msgSend(a2, "setXPSamplingPercentageUsers:", *(double *)&v27);
    }
  }
  if (*(_QWORD *)(v17 + 16))
  {
    v20 = sub_1000277A0(0x446E6F6973736573, 0xEF6E6F6974617275);
    if ((v21 & 1) != 0)
    {
      sub_10000990C(*(_QWORD *)(v17 + 56) + 32 * v20, (uint64_t)&aBlock);
      if (swift_dynamicCast(&v27, &aBlock, (char *)&type metadata for Any + 8, &type metadata for Double, 6))objc_msgSend(a2, "setXPSessionDuration:", *(double *)&v27);
    }
  }
  if (*(_QWORD *)(v17 + 16) && (v22 = sub_1000277A0(0xD000000000000021, 0x80000001003A9190), (v23 & 1) != 0))
  {
    sub_10000990C(*(_QWORD *)(v17 + 56) + 32 * v22, (uint64_t)&aBlock);
  }
  else
  {
    aBlock = 0u;
    v31 = 0u;
  }
  swift_bridgeObjectRelease(v17);
  if (!*((_QWORD *)&v31 + 1))
    goto LABEL_23;
  if ((swift_dynamicCast(&v27, &aBlock, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
    objc_msgSend(a2, "setXPSamplingPercentageCachedResponses:", *(double *)&v27);
LABEL_24:
  if (objc_msgSend(a2, "xpSamplingForced", v27, v28))
  {
    objc_msgSend(a2, "setXPSamplingPercentageUsers:", 1.0);
    objc_msgSend(a2, "setXPSamplingPercentageCachedResponses:", 1.0);
  }
  v32 = a5;
  v33 = a6;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v31 = sub_100011FD0;
  *((_QWORD *)&v31 + 1) = &unk_1004715E0;
  v24 = _Block_copy(&aBlock);
  v25 = v33;
  swift_retain(a6);
  *(_QWORD *)&v26 = swift_release(v25).n128_u64[0];
  v29.receiver = a3;
  v29.super_class = (Class)SSMetricsLoadURLEvent;
  objc_msgSendSuper2(&v29, "setStandardPropertiesWith:completionHandler:", a4, v24, v26);
  _Block_release(v24);
}

void sub_1000CF7A8(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v12;
  char v13;
  Class isa;
  NSString v15;
  NSString v16;
  id v17;
  uint64_t v18;
  _QWORD *receiver;
  unint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  id v24;
  id v25;
  NSString v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  int v30;
  id v31;
  id v32;
  NSString v33;
  void *v34;
  uint64_t v35;
  objc_class *v36;
  objc_super v37[2];
  objc_super v38;
  __int128 aBlock;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v12 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v13 = sub_1000CC58C(0xD00000000000001CLL, 0x80000001003A9130);

  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v15 = String._bridgeToObjectiveC()();
  objc_msgSend(a2, "setProperty:forBodyKey:", isa, v15);

  if (!a1)
  {
    aBlock = 0u;
    v40 = 0u;
LABEL_10:
    sub_10000FE2C((uint64_t)&aBlock, &qword_1004BE030);
    goto LABEL_29;
  }
  v16 = String._bridgeToObjectiveC()();
  v17 = objc_msgSend(a1, "valueForConfigurationKey:", v16);

  if (v17)
  {
    _bridgeAnyObjectToAny(_:)(v17);
    swift_unknownObjectRelease(v17);
  }
  else
  {
    memset(v37, 0, sizeof(v37));
  }
  sub_1000CE5CC((uint64_t)v37, (uint64_t)&aBlock);
  if (!*((_QWORD *)&v40 + 1))
    goto LABEL_10;
  v18 = sub_1000057B4((uint64_t *)&unk_1004BF820);
  if (!swift_dynamicCast(v37, &aBlock, (char *)&type metadata for Any + 8, v18, 6))
    goto LABEL_29;
  receiver = v37[0].receiver;
  if ((v13 & 1) != 0)
  {
    *((_QWORD *)&v40 + 1) = &type metadata for Double;
    *(_QWORD *)&aBlock = 0x3FF0000000000000;
    goto LABEL_14;
  }
  if (*((_QWORD *)v37[0].receiver + 2))
  {
    v20 = sub_1000277A0(0xD000000000000026, 0x80000001003A90C0);
    if ((v21 & 1) != 0)
    {
      sub_10000990C(receiver[7] + 32 * v20, (uint64_t)&aBlock);
LABEL_14:
      v22 = sub_10000598C(0, &qword_1004BCBD8, NSNumber_ptr);
      v23 = swift_dynamicCast(v37, &aBlock, (char *)&type metadata for Any + 8, v22, 6);
      v24 = v37[0].receiver;
      if (!v23)
        v24 = 0;
      goto LABEL_18;
    }
  }
  aBlock = 0u;
  v40 = 0u;
  sub_10000FE2C((uint64_t)&aBlock, &qword_1004BE030);
  v24 = 0;
LABEL_18:
  v25 = v24;
  v26 = String._bridgeToObjectiveC()();
  objc_msgSend(a2, "setProperty:forBodyKey:", v25, v26);

  if (receiver[2])
  {
    v27 = sub_1000277A0(0xD00000000000001ELL, 0x80000001003A90F0);
    if ((v28 & 1) != 0)
    {
      sub_10000990C(receiver[7] + 32 * v27, (uint64_t)&aBlock);
    }
    else
    {
      aBlock = 0u;
      v40 = 0u;
    }
  }
  else
  {
    aBlock = 0u;
    v40 = 0u;
  }
  swift_bridgeObjectRelease(receiver);
  if (*((_QWORD *)&v40 + 1))
  {
    v29 = sub_10000598C(0, &qword_1004BCBD8, NSNumber_ptr);
    v30 = swift_dynamicCast(v37, &aBlock, (char *)&type metadata for Any + 8, v29, 6);
    v31 = v37[0].receiver;
    if (!v30)
      v31 = 0;
  }
  else
  {
    sub_10000FE2C((uint64_t)&aBlock, &qword_1004BE030);
    v31 = 0;
  }
  v32 = v31;
  v33 = String._bridgeToObjectiveC()();
  objc_msgSend(a2, "setProperty:forBodyKey:", v32, v33);

LABEL_29:
  v41 = a5;
  v42 = a6;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v40 = sub_100011FD0;
  *((_QWORD *)&v40 + 1) = &unk_100471590;
  v34 = _Block_copy(&aBlock);
  v35 = v42;
  swift_retain(a6);
  swift_release(v35);
  v36 = (objc_class *)type metadata accessor for Music_SSMetricsComponentRenderEvent();
  v38.receiver = a3;
  v38.super_class = v36;
  objc_msgSendSuper2(&v38, "setStandardPropertiesWith:completionHandler:", a4, v34);
  _Block_release(v34);
}

uint64_t sub_1000CFBF4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000CFC1C()
{
  uint64_t v0;

  sub_1000CBFAC(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1000CFC28(void *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v3;

  return sub_1000CBCF8(a1, a2, a3, *(void **)(v3 + 16));
}

double sub_1000CFC30(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_1000CBDD4(a1, a2, *(void (**)(uint64_t, uint64_t (*)(), uint64_t, __n128))(v2 + 16));
}

uint64_t sub_1000CFC38(void *a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  return sub_1000CB3DC(a1, a2);
}

void sub_1000CFC58(uint64_t a1, void (*a2)(void))
{
  sub_1000CE614(a2);
}

uint64_t sub_1000CFC80(uint64_t a1, uint64_t (*a2)(void))
{
  return sub_1000CEA48(a2);
}

double sub_1000CFCA8(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CB5E0(a1, a2, a3);
}

uint64_t sub_1000CFCC8(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v3;

  return sub_1000CBE48(a1, a2, a3, *(void **)(v3 + 16));
}

void sub_1000CFCD0(uint64_t a1, void (*a2)(void))
{
  sub_1000CED3C(a2);
}

uint64_t sub_1000CFD00()
{
  uint64_t v0;

  return static MPPropertySet.with(_:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1000CFD0C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_1000CFD48()
{
  uint64_t v0;

  sub_1000CBBC4(*(void **)(v0 + 24), *(_QWORD **)(v0 + 32), *(void (**)(void))(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_1000CFD78()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1000CFDAC()
{
  uint64_t v0;

  sub_1000CB858(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(void (**)(uint64_t))(v0 + 32));
}

unint64_t sub_1000CFDB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1004BE660;
  if (!qword_1004BE660)
  {
    v1 = sub_100009788(&qword_1004BCCD8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1004BE660);
  }
  return result;
}

uint64_t sub_1000CFE04()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000CFE28()
{
  uint64_t v0;

  sub_1000CC404(*(id *)(v0 + 16));
}

uint64_t sub_1000CFE30()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000CFE54()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t result;

  v1 = *(_BYTE **)(v0 + 24);
  result = sub_1000C9E60((uint64_t)objc_msgSend(*(id *)(v0 + 16), "cloudStatus"), (uint64_t)&off_1004677A8);
  if ((result & 1) != 0)
    *v1 = 18;
  return result;
}

uint64_t sub_1000CFE94()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void static MusicCoreAnalytics.sendEvent<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  void (*v15)(_BYTE *, uint64_t, uint64_t);
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void (*v27)(_BYTE *, uint64_t);
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  os_log_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(_BYTE *, uint64_t);
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSString v43;
  void *v44;
  uint64_t v45;
  __n128 v46;
  _BYTE v47[4];
  int v48;
  os_log_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t);
  void (*v52)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v53;
  uint64_t aBlock[5];
  uint64_t v55;

  v5 = a1;
  v6 = *(_QWORD *)(a2 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(a1);
  v53 = &v47[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = __chkstk_darwin(v8);
  v11 = &v47[-v10];
  __chkstk_darwin(v9);
  v13 = &v47[-v12];
  if (qword_1004B8AF0 != -1)
    swift_once(&qword_1004B8AF0, sub_1000D0434);
  v14 = type metadata accessor for Logger(0);
  sub_100039D34(v14, (uint64_t)qword_1004F4850);
  v15 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16);
  v15(v13, v5, a2);
  v52 = v15;
  v16 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v15)(v11, v5, a2);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  v19 = v18;
  if (os_log_type_enabled(v17, v18))
  {
    v20 = swift_slowAlloc(22, -1);
    v49 = v17;
    v21 = a3;
    v22 = v20;
    v50 = swift_slowAlloc(64, -1);
    aBlock[0] = v50;
    *(_DWORD *)v22 = 136315395;
    v51 = *(uint64_t (**)(uint64_t, uint64_t))(v21 + 8);
    v48 = v19;
    v23 = (char *)v51(a2, v21);
    v25 = v24;
    *(_QWORD *)(v22 + 4) = sub_1000393D0(v23, v24, aBlock);
    swift_bridgeObjectRelease(v25);
    v26 = v5;
    v27 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
    v27(v13, a2);
    *(_WORD *)(v22 + 12) = 2081;
    v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(a2, v21);
    v27(v11, a2);
    v5 = v26;
    v29 = sub_1000D0550();
    v30 = (char *)Dictionary.description.getter(v28, &type metadata for String, v29, &protocol witness table for String);
    v32 = v31;
    swift_bridgeObjectRelease(v28);
    *(_QWORD *)(v22 + 14) = sub_1000393D0(v30, v32, aBlock);
    swift_bridgeObjectRelease(v32);
    v33 = v49;
    _os_log_impl((void *)&_mh_execute_header, v49, (os_log_type_t)v48, "Send analytics event: %s, payload: %{private}s", (uint8_t *)v22, 0x16u);
    v34 = v50;
    swift_arrayDestroy(v50, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    v35 = v22;
    a3 = v21;
    swift_slowDealloc(v35, -1, -1);

    v51(a2, v21);
  }
  else
  {
    v37 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
    v37(v11, a2);
    v37(v13, a2);

    (*(void (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  }
  v38 = v36;
  v39 = v53;
  v52(v53, v5, a2);
  v40 = *(unsigned __int8 *)(v6 + 80);
  v41 = (v40 + 32) & ~v40;
  v42 = swift_allocObject(&unk_100471BC8, v41 + v7, v40 | 7);
  *(_QWORD *)(v42 + 16) = a2;
  *(_QWORD *)(v42 + 24) = a3;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v6 + 32))(v42 + v41, v39, a2);
  v43 = String._bridgeToObjectiveC()();
  aBlock[4] = (uint64_t)sub_1000D0500;
  v55 = v42;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000D03C0;
  aBlock[3] = (uint64_t)&unk_100471BE0;
  v44 = _Block_copy(aBlock);
  v45 = v55;
  swift_retain(v42);
  v46 = swift_release(v45);
  AnalyticsSendEventLazy(v43, v44, v46);
  _Block_release(v44);
  swift_release(v42);
  swift_bridgeObjectRelease(v38);

}

void static MusicCoreAnalytics.sendEvent(eventName:eventPayload:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v6;
  void *v7;
  uint64_t v8;
  __n128 v9;
  _QWORD v10[5];
  uint64_t v11;

  v6 = String._bridgeToObjectiveC()();
  v10[4] = a3;
  v11 = a4;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_1000D03C0;
  v10[3] = &unk_100471C08;
  v7 = _Block_copy(v10);
  v8 = v11;
  swift_retain(a4);
  v9 = swift_release(v8);
  AnalyticsSendEventLazy(v6, v7, v9);
  _Block_release(v7);

}

Class sub_1000D03C0(uint64_t a1)
{
  uint64_t (*v1)(__n128);
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  NSDictionary v5;

  v1 = *(uint64_t (**)(__n128))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v4 = v1(v3);
  swift_release(v2);
  if (v4)
  {
    sub_1000D0550();
    v5.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v5.super.isa = 0;
  }
  return v5.super.isa;
}

uint64_t sub_1000D0434()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10004FD4C(v0, qword_1004F4850);
  sub_100039D34(v0, (uint64_t)qword_1004F4850);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001003A7200, 0x7363697274654DLL, 0xE700000000000000);
}

uint64_t sub_1000D04A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1000D0500()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 24) + 16))();
}

uint64_t sub_1000D0538(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000D0548(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1000D0550()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1004BDD90;
  if (!qword_1004BDD90)
  {
    v1 = objc_opt_self(NSObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1004BDD90);
  }
  return result;
}

ValueMetadata *type metadata accessor for MusicCoreAnalytics()
{
  return &type metadata for MusicCoreAnalytics;
}

void *MetricsEvent.PageRender.performanceMetrics.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  _BYTE v4[24];

  swift_beginAccess(v0 + 16, v4, 0, 0);
  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

uint64_t MetricsEvent.PageRender.onScreenResourcesAppearEndTime.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 24, v2, 0, 0);
  return *(_QWORD *)(v0 + 24);
}

uint64_t MetricsEvent.PageRender.pageUserInteractiveTime.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 40, v2, 0, 0);
  return *(_QWORD *)(v0 + 40);
}

uint64_t MetricsEvent.PageRender.resourceRequestStartTime.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 56, v2, 0, 0);
  return *(_QWORD *)(v0 + 56);
}

uint64_t MetricsEvent.PageRender.pageEndTime.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 72, v2, 0, 0);
  return *(_QWORD *)(v0 + 72);
}

uint64_t MetricsEvent.PageRender.pageInterruptTime.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 88, v2, 0, 0);
  return *(_QWORD *)(v0 + 88);
}

uint64_t MetricsEvent.PageRender.pageAppearTime.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 104, v2, 0, 0);
  return *(_QWORD *)(v0 + 104);
}

uint64_t MetricsEvent.PageRender.pageRequestTime.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 120, v2, 0, 0);
  return *(_QWORD *)(v0 + 120);
}

uint64_t MetricsEvent.PageRender.request.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 152);
  swift_beginAccess(v4, v7, 0, 0);
  v5 = type metadata accessor for Optional(0, *(_QWORD *)(v3 + 80));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, v4, v5);
}

uint64_t MetricsEvent.PageRender.request.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 152);
  swift_beginAccess(v4, v7, 33, 0);
  v5 = type metadata accessor for Optional(0, *(_QWORD *)(v3 + 80));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
  return swift_endAccess(v7);
}

uint64_t (*MetricsEvent.PageRender.request.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + *(_QWORD *)(*(_QWORD *)v1 + 152), a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t MetricsEvent.PageRender.pageProperties.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000D0890(v1 + *(_QWORD *)(*(_QWORD *)v1 + 160), a1);
}

uint64_t sub_1000D0890(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MetricsPageProperties(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t MetricsEvent.PageRender.__allocating_init(pageProperties:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  MetricsEvent.PageRender.init(pageProperties:)(a1);
  return v3;
}

uint64_t *MetricsEvent.PageRender.init(pageProperties:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  v1[2] = 0;
  v1[3] = 0;
  *((_BYTE *)v1 + 32) = 1;
  v1[5] = 0;
  *((_BYTE *)v1 + 48) = 1;
  v1[7] = 0;
  *((_BYTE *)v1 + 64) = 1;
  v1[9] = 0;
  *((_BYTE *)v1 + 80) = 1;
  v1[11] = 0;
  *((_BYTE *)v1 + 96) = 1;
  v1[13] = 0;
  *((_BYTE *)v1 + 112) = 1;
  v1[15] = 0;
  *((_BYTE *)v1 + 128) = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 56))((uint64_t)v1 + *(_QWORD *)(v3 + 152), 1, 1);
  *((_BYTE *)v1 + *(_QWORD *)(*v1 + 168)) = 0;
  sub_1000D09B0(a1, (uint64_t)v1 + *(_QWORD *)(*v1 + 160));
  return v1;
}

uint64_t sub_1000D09B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MetricsPageProperties(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void MetricsEvent.PageRender.updatePerformanceMetrics(_:with:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE v13[24];
  _BYTE v14[24];

  swift_beginAccess(v3 + 16, v13, 1, 0);
  v7 = *(void **)(v3 + 16);
  *(_QWORD *)(v3 + 16) = a1;
  v8 = a1;

  v9 = *(void **)(v3 + 16);
  if (v9)
  {
    objc_msgSend(v9, "responseEndTime");
    v11 = v10;
    swift_beginAccess(v3 + 24, v14, 0, 0);
    if ((*(_BYTE *)(v3 + 32) & 1) == 0)
    {
      swift_beginAccess(v3 + 72, v12, 1, 0);
      *(_QWORD *)(v3 + 72) = v11;
      *(_BYTE *)(v3 + 80) = 0;
      sub_1000D0AB8(a2, a3);
    }
  }
}

double sub_1000D0AB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  double result;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 168);
  if ((*(_BYTE *)(v2 + v3) & 1) == 0)
  {
    *(_BYTE *)(v2 + v3) = 1;
    sub_1000851CC();
    v6 = (_QWORD *)swift_allocObject(&unk_100471D40, 40, 7);
    v6[2] = v2;
    v6[3] = a1;
    v6[4] = a2;
    swift_bridgeObjectRetain();
    swift_retain(v2);
    static OS_dispatch_queue.asyncOnMainIfNeeded(_:)((uint64_t (*)(void))sub_1000D126C, (uint64_t)v6);
    *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  }
  return result;
}

Swift::Void __swiftcall MetricsEvent.PageRender.markPageAppear()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  _BYTE v10[24];

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = swift_beginAccess(v1 + 104, v10, 1, 0);
  if (*(_BYTE *)(v1 + 112) == 1)
  {
    v7 = Date.init()(v6);
    v8 = Date.timeIntervalSince1970.getter(v7);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    *(double *)(v1 + 104) = v8;
    *(_BYTE *)(v1 + 112) = 0;
  }
}

Swift::Void __swiftcall MetricsEvent.PageRender.markPageRequest()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  _BYTE v10[24];

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = swift_beginAccess(v1 + 120, v10, 1, 0);
  if (*(_BYTE *)(v1 + 128) == 1)
  {
    v7 = Date.init()(v6);
    v8 = Date.timeIntervalSince1970.getter(v7);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    *(double *)(v1 + 120) = v8;
    *(_BYTE *)(v1 + 128) = 0;
  }
}

Swift::Void __swiftcall MetricsEvent.PageRender.markPageAsUserInteractive()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  _BYTE v10[24];

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = swift_beginAccess(v1 + 40, v10, 1, 0);
  if (*(_BYTE *)(v1 + 48) == 1)
  {
    v7 = Date.init()(v6);
    v8 = Date.timeIntervalSince1970.getter(v7);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    *(double *)(v1 + 40) = v8;
    *(_BYTE *)(v1 + 48) = 0;
  }
}

Swift::Void __swiftcall MetricsEvent.PageRender.markResourceRequestStartTime()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  _BYTE v10[24];

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = swift_beginAccess(v1 + 56, v10, 1, 0);
  if (*(_BYTE *)(v1 + 64) == 1)
  {
    v7 = Date.init()(v6);
    v8 = Date.timeIntervalSince1970.getter(v7);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    *(double *)(v1 + 56) = v8;
    *(_BYTE *)(v1 + 64) = 0;
  }
}

Swift::Void __swiftcall MetricsEvent.PageRender.markOnScreenResourcesAppearEndTime(with:)(Swift::String_optional with)
{
  uint64_t v1;
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  void *v13;
  _BYTE v15[24];
  _BYTE v16[24];
  _BYTE v17[24];

  v2 = v1;
  object = with.value._object;
  countAndFlagsBits = with.value._countAndFlagsBits;
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  swift_beginAccess(v2 + 24, v17, 1, 0);
  if (*(_BYTE *)(v2 + 32) == 1)
  {
    v10 = Date.init()(v9);
    v11 = Date.timeIntervalSince1970.getter(v10);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(double *)(v2 + 24) = v11;
    *(_BYTE *)(v2 + 32) = 0;
    *(_QWORD *)&v12 = swift_beginAccess(v2 + 16, v16, 0, 0).n128_u64[0];
    v13 = *(void **)(v2 + 16);
    if (v13)
    {
      objc_msgSend(v13, "responseEndTime", v12);
      swift_beginAccess(v2 + 72, v15, 1, 0);
      *(double *)(v2 + 72) = v11;
      *(_BYTE *)(v2 + 80) = 0;
      sub_1000D0AB8(countAndFlagsBits, (uint64_t)object);
    }
  }
}

Swift::Void __swiftcall MetricsEvent.PageRender.markPageDisappearanceAndRecordIfNecessary(with:)(Swift::String_optional with)
{
  uint64_t v1;
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  _BYTE v12[24];
  _BYTE v13[24];

  v2 = v1;
  object = with.value._object;
  countAndFlagsBits = with.value._countAndFlagsBits;
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess(v2 + 72, v13, 0, 0);
  if (*(_BYTE *)(v2 + 80) == 1)
  {
    swift_beginAccess(v2 + 88, v12, 1, 0);
    if (*(_BYTE *)(v2 + 96) == 1)
    {
      v10 = Date.init()(v9);
      v11 = Date.timeIntervalSince1970.getter(v10);
      (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
      *(double *)(v2 + 88) = v11;
      *(_BYTE *)(v2 + 96) = 0;
    }
  }
  sub_1000D0AB8(countAndFlagsBits, (uint64_t)object);
}

void sub_1000D1044(uint64_t a1, uint64_t a2, void *a3)
{
  if (qword_1004B8AE8 != -1)
    swift_once(&qword_1004B8AE8, sub_1000BF680);
  MetricsReportingController.recordPageRenderEvent<A>(_:pageContext:)(a1, a2, a3);
}

id *MetricsEvent.PageRender.deinit()
{
  id *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;

  v1 = *v0;

  v2 = (char *)v0 + *((_QWORD *)*v0 + 19);
  v3 = type metadata accessor for Optional(0, v1[10]);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  sub_1000D1120((uint64_t)v0 + *((_QWORD *)*v0 + 20));
  return v0;
}

uint64_t sub_1000D1120(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MetricsPageProperties(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t MetricsEvent.PageRender.__deallocating_deinit()
{
  uint64_t v0;

  MetricsEvent.PageRender.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000D1180(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[11];

  v5[0] = "\b";
  v5[1] = &unk_1003CC988;
  v5[2] = &unk_1003CC988;
  v5[3] = &unk_1003CC988;
  v5[4] = &unk_1003CC988;
  v5[5] = &unk_1003CC988;
  v5[6] = &unk_1003CC988;
  v5[7] = &unk_1003CC988;
  result = type metadata accessor for Optional(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v5[8] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for MetricsPageProperties(319);
    if (v4 <= 0x3F)
    {
      v5[9] = *(_QWORD *)(result - 8) + 64;
      v5[10] = &unk_1003CC9A0;
      result = swift_initClassMetadata2(a1, 0, 11, v5, a1 + 88);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for MetricsEvent.PageRender(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100051E10(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MetricsEvent.PageRender);
}

uint64_t sub_1000D1240()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000D126C()
{
  uint64_t v0;

  sub_1000D1044(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

__n128 static ApplicationCapabilities.shared.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  __n128 result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __n128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  if (qword_1004B8AF8 != -1)
    swift_once(&qword_1004B8AF8, sub_1000D365C);
  v2 = static ApplicationCapabilities.Controller.shared;
  KeyPath = swift_getKeyPath(&unk_1003CCA98);
  v4 = swift_getKeyPath(&unk_1003CCAC0);
  static Published.subscript.getter(&v16, v2, KeyPath, v4);
  swift_release(KeyPath);
  swift_release(v4);
  v5 = BYTE1(v16);
  v6 = BYTE2(v16);
  v7 = v22;
  v8 = v23;
  v9 = v24;
  v10 = v25;
  v12 = v17;
  result = v18;
  v13 = v19;
  v14 = v20;
  v15 = v21;
  *(_BYTE *)a1 = v16;
  *(_BYTE *)(a1 + 1) = v5;
  *(_BYTE *)(a1 + 2) = v6;
  *(_OWORD *)(a1 + 8) = v12;
  *(__n128 *)(a1 + 24) = result;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v14;
  *(_OWORD *)(a1 + 72) = v15;
  *(_BYTE *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 96) = v8;
  *(_BYTE *)(a1 + 104) = v9;
  *(_QWORD *)(a1 + 112) = v10;
  return result;
}

uint64_t *ApplicationCapabilities.Controller.shared.unsafeMutableAddressor()
{
  if (qword_1004B8AF8 != -1)
    swift_once(&qword_1004B8AF8, sub_1000D365C);
  return &static ApplicationCapabilities.Controller.shared;
}

__n128 ApplicationCapabilities.Controller.capabilities.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  __n128 result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __n128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  KeyPath = swift_getKeyPath(&unk_1003CCA98);
  v4 = swift_getKeyPath(&unk_1003CCAC0);
  static Published.subscript.getter(&v16, v1, KeyPath, v4);
  swift_release(v4);
  swift_release(KeyPath);
  v5 = BYTE1(v16);
  v6 = BYTE2(v16);
  v7 = v22;
  v8 = v23;
  v9 = v24;
  v10 = v25;
  v12 = v17;
  result = v18;
  v13 = v19;
  v14 = v20;
  v15 = v21;
  *(_BYTE *)a1 = v16;
  *(_BYTE *)(a1 + 1) = v5;
  *(_BYTE *)(a1 + 2) = v6;
  *(_OWORD *)(a1 + 8) = v12;
  *(__n128 *)(a1 + 24) = result;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v14;
  *(_OWORD *)(a1 + 72) = v15;
  *(_BYTE *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 96) = v8;
  *(_BYTE *)(a1 + 104) = v9;
  *(_QWORD *)(a1 + 112) = v10;
  return result;
}

uint64_t ApplicationCapabilities.hasNetworkConnectivity.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t ApplicationCapabilities.isCloudLibraryEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t Library.Menu.Request.filteringOptions.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t Library.Menu.Request.excludedIdentifiers.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 32));
}

uint64_t ApplicationCapabilities.Service.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000D14C8 + 4 * byte_1003CC9C0[a1]))(0x636973756DLL, 0xE500000000000000);
}

uint64_t sub_1000D14C8()
{
  return 0x646956636973756DLL;
}

unint64_t sub_1000D14E8()
{
  return 0xD000000000000013;
}

uint64_t ApplicationCapabilities.Service.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000D15FC + 4 * byte_1003CC9CB[a1]))(0x636973756DLL, 0xE500000000000000);
}

uint64_t sub_1000D15FC()
{
  return 0x646956636973756DLL;
}

unint64_t sub_1000D161C()
{
  return 0xD000000000000013;
}

Swift::Int sub_1000D1704()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6);
  v2 = ApplicationCapabilities.Service.rawValue.getter(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000D1764(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = ApplicationCapabilities.Service.rawValue.getter(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000D17A4()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6);
  v2 = ApplicationCapabilities.Service.rawValue.getter(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

unint64_t sub_1000D1800@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s9MusicCore23ApplicationCapabilitiesV7ServiceO8rawValueAESgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000D182C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = ApplicationCapabilities.Service.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000D1854(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = ApplicationCapabilities.Service.rawValue.getter(*a1);
  v5 = v4;
  v6 = ApplicationCapabilities.Service.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_1000D18DC()
{
  unsigned __int8 *v0;

  return ApplicationCapabilities.Service.rawValue.getter(*v0);
}

Swift::Void __swiftcall ApplicationCapabilities.setServiceEnabled(_:service:)(Swift::Bool _, MusicCore::ApplicationCapabilities::Service service)
{
  if (objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection"))
    __asm { BR              X11 }
  __break(1u);
  JUMPOUT(0x1000D19DCLL);
}

uint64_t ApplicationCapabilities.ratingWarning.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)(v1 + 72);
  v3 = *(_OWORD *)(v1 + 56);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 40);
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = v2;
  swift_bridgeObjectRetain(v3);
  return swift_bridgeObjectRetain(v2);
}

uint64_t ApplicationCapabilities.RatingWarning.threshold.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ApplicationCapabilities.RatingWarning.message.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 32));
  return v1;
}

uint64_t ApplicationCapabilities.RatingWarning.description.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  Swift::String v2;
  void *object;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  _QWORD v23[2];

  v1 = v0;
  strcpy((char *)v23, "RatingWarning(");
  HIBYTE(v23[1]) = -18;
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 10;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 0x6C6F687365726874;
  v5._object = (void *)0xEA00000000003D64;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(0xEA00000000003D64);
  v6 = v0[1];
  v7 = v1[2];
  swift_bridgeObjectRetain(v7);
  v8 = Optional<A>.description.getter(v6, v7);
  v10 = v9;
  swift_bridgeObjectRelease(v7);
  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v10);
  v12._countAndFlagsBits = 10;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13._countAndFlagsBits = 0x3D656C746974;
  v13._object = (void *)0xE600000000000000;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(0xE600000000000000);
  v15 = v1[3];
  v14 = v1[4];
  swift_bridgeObjectRetain(v14);
  v16 = Optional<A>.description.getter(v15, v14);
  v18 = v17;
  swift_bridgeObjectRelease(v14);
  v19._countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v18);
  v20._countAndFlagsBits = 10;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0x3D6567617373656DLL;
  v21._object = (void *)0xE800000000000000;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(0xE800000000000000);
  return v23[0];
}

uint64_t sub_1000D1C48(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return _s9MusicCore23ApplicationCapabilitiesV13RatingWarningV23__derived_struct_equalsySbAE_AEtFZ_0(v5, v7) & 1;
}

void *ApplicationCapabilities.subscriptionStatus.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 80);
  v2 = v1;
  return v1;
}

uint64_t ApplicationCapabilities.subscriptionState.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 88);
}

MusicCore::ApplicationCapabilities::SubscriptionState_optional __swiftcall ApplicationCapabilities.SubscriptionState.init(rawValue:)(Swift::String rawValue)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &off_100467900;
  return (MusicCore::ApplicationCapabilities::SubscriptionState_optional)sub_1000DC0F8(rawValue, v1);
}

uint64_t ApplicationCapabilities.SubscriptionState.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000D1D14 + 4 * byte_1003CC9D6[a1]))(0x6564696365646E75, 0xE900000000000064);
}

uint64_t sub_1000D1D14()
{
  return 0x63697373616C63;
}

uint64_t sub_1000D1D2C()
{
  return 0x6269726373627573;
}

uint64_t sub_1000D1D48()
{
  return 0x6275536563696F76;
}

uint64_t sub_1000D1D6C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100047FF4(*a1, *a2);
}

void sub_1000D1D78()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_1000D1DC8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x63697373616C63, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

void sub_1000D1E48()
{
  __asm { BR              X10 }
}

uint64_t sub_1000D1E88(uint64_t a1)
{
  String.hash(into:)(a1, 0x63697373616C63, 0xE700000000000000);
  return swift_bridgeObjectRelease(0xE700000000000000);
}

void sub_1000D1EF4()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_1000D1F40()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x63697373616C63, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

unint64_t sub_1000D1FC0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_100467900;
  result = sub_1000DC0F8(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_1000D1FF4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1000D2028 + 4 * byte_1003CC9E6[*v0]))();
}

void sub_1000D2028(_QWORD *a1@<X8>)
{
  *a1 = 0x63697373616C63;
  a1[1] = 0xE700000000000000;
}

void sub_1000D2044(_QWORD *a1@<X8>)
{
  *a1 = 0x6269726373627573;
  a1[1] = 0xEA00000000007265;
}

void sub_1000D2064(_QWORD *a1@<X8>)
{
  *a1 = 0x6275536563696F76;
  a1[1] = 0xEF72656269726373;
}

uint64_t Player.ReplaceCommand.replaceIntent.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000D2094(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;

  v2 = *(unsigned __int8 *)(a1 + 1);
  v3 = *(unsigned __int8 *)(a2 + 1);
  sub_1000481A8(*(_BYTE *)a1);
  return v4 & ~(v2 ^ v3) & 1;
}

uint64_t ApplicationCapabilities.Tabs.description.getter(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  Swift::String v13;
  void *object;
  Swift::String v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  void *v23;
  char v25;
  Swift::String v26;
  uint64_t v27;
  unint64_t v28;

  v27 = 0x2873626154;
  v28 = 0xE500000000000000;
  v6 = swift_bridgeObjectRetain();
  v7 = Array.description.getter(v6, &type metadata for TabIdentifier);
  v9 = v8;
  swift_bridgeObjectRelease(a1);
  v10._countAndFlagsBits = 10;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = v7;
  v11._object = v9;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v9);
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease(0xE000000000000000);
  v26._countAndFlagsBits = 0xD000000000000010;
  v26._object = (void *)0x80000001003A94C0;
  v25 = a2;
  v12 = sub_1000057B4(&qword_1004BCDB8);
  v13._countAndFlagsBits = String.init<A>(describing:)(&v25, v12);
  object = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(object);
  v15._countAndFlagsBits = 10;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  v16 = v26._object;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(v16);
  v26._countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease(v26._object);
  v26._countAndFlagsBits = 0xD000000000000012;
  v26._object = (void *)0x80000001003A94E0;
  v17 = swift_bridgeObjectRetain();
  v18 = Array.description.getter(v17, &type metadata for ApplicationCapabilities.Tabs.Configuration);
  v20 = v19;
  swift_bridgeObjectRelease(a3);
  v21._countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v20);
  v22._countAndFlagsBits = 10;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  v23 = v26._object;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(v23);
  return v27;
}

uint64_t static ApplicationCapabilities.Tabs.__derived_struct_equals(_:_:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  char v10;

  if ((sub_1000D2630(a1, a4) & 1) == 0)
    return 0;
  if (a2 != 6)
  {
    if (a5 == 6)
      return 0;
    sub_100047FF8(a2);
    if ((v10 & 1) == 0)
      return 0;
    return sub_1000D283C(a3, a6);
  }
  if (a5 == 6)
    return sub_1000D283C(a3, a6);
  return 0;
}

uint64_t sub_1000D2320(uint64_t a1, uint64_t a2)
{
  return sub_1000D2D74(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist.Variant, (unint64_t *)&qword_1004BD030, (uint64_t)&protocol conformance descriptor for Playlist.Variant);
}

uint64_t sub_1000D233C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X10 }
  }
  return 1;
}

uint64_t sub_1000D2630(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X10 }
  }
  return 1;
}

uint64_t sub_1000D283C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X10 }
  }
  return 1;
}

uint64_t sub_1000D2A94(uint64_t a1, uint64_t a2)
{
  return sub_1000D2ABC(a1, a2, (uint64_t)&qword_1004BD010, NSSortDescriptor_ptr);
}

uint64_t sub_1000D2AA8(uint64_t a1, uint64_t a2)
{
  return sub_1000D2ABC(a1, a2, (uint64_t)&qword_1004BD018, MPIdentifierSet_ptr);
}

uint64_t sub_1000D2ABC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t i;
  id v21;
  void *v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v8 = (unint64_t)a1 >> 62;
  if (!((unint64_t)a1 >> 62))
  {
    v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v10 = (unint64_t)a2 >> 62;
    if (!((unint64_t)a2 >> 62))
      goto LABEL_3;
LABEL_38:
    if (a2 < 0)
      v26 = a2;
    else
      v26 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v11 = (void *)_CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease();
    if ((void *)v9 == v11)
      goto LABEL_4;
    return 0;
  }
  if (a1 < 0)
    v25 = a1;
  else
    v25 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v9 = _CocoaArrayWrapper.endIndex.getter(v25);
  swift_bridgeObjectRelease();
  v10 = (unint64_t)a2 >> 62;
  if ((unint64_t)a2 >> 62)
    goto LABEL_38;
LABEL_3:
  v11 = *(void **)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if ((void *)v9 != v11)
    return 0;
LABEL_4:
  if (!v9)
    return 1;
  v12 = a1 & 0xFFFFFFFFFFFFFF8;
  v13 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a1 < 0)
    v12 = a1;
  if (v8)
    v13 = v12;
  v14 = a2 & 0xFFFFFFFFFFFFFF8;
  v15 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0)
    v14 = a2;
  if (v10)
    v15 = v14;
  if (v13 == v15)
    return 1;
  if (v9 < 0)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  v27 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_47:
    result = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    goto LABEL_18;
  }
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_49;
  }
  result = (uint64_t)*(id *)(a1 + 32);
LABEL_18:
  v11 = (void *)result;
  v10 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
  {
LABEL_49:
    v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
LABEL_21:
    v18 = v17;
    a4 = (_QWORD *)sub_10000598C(0, (unint64_t *)a3, a4);
    a3 = static NSObject.== infix(_:_:)(v11, v18);

    if ((a3 & 1) != 0)
    {
      v19 = 1 - v9;
      for (i = 5; ; ++i)
      {
        v9 = v19 + i == 5;
        if (v19 + i == 5)
          return v9;
        v24 = i - 4;
        if (v27)
        {
          a3 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1);
          if (v10)
            goto LABEL_23;
        }
        else
        {
          if (v24 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_45:
            __break(1u);
            goto LABEL_46;
          }
          a3 = (uint64_t)*(id *)(a1 + 8 * i);
          if (v10)
          {
LABEL_23:
            v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a2);
            goto LABEL_24;
          }
        }
        if (v24 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_45;
        v21 = *(id *)(a2 + 8 * i);
LABEL_24:
        v22 = v21;
        v23 = static NSObject.== infix(_:_:)(a3, v21);

        if ((v23 & 1) == 0)
          return v9;
      }
    }
    return 0;
  }
  if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v17 = *(id *)(a2 + 32);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000D2D44(uint64_t a1, uint64_t a2)
{
  return sub_1000D2ABC(a1, a2, (uint64_t)&qword_1004BD020, MPModelObject_ptr);
}

uint64_t sub_1000D2D58(uint64_t a1, uint64_t a2)
{
  return sub_1000D2D74(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist.Entry, &qword_1004BD028, (uint64_t)&protocol conformance descriptor for Playlist.Entry);
}

uint64_t sub_1000D2D74(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, unint64_t, uint64_t);
  uint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void (*v27)(uint64_t, uint64_t);
  BOOL v29;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, unint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);

  v10 = a3(0);
  v11 = __chkstk_darwin(v10);
  __chkstk_darwin(v11);
  v15 = (char *)&v31 - v14;
  v16 = *(_QWORD *)(a1 + 16);
  if (v16 == *(_QWORD *)(a2 + 16))
  {
    if (!v16 || a1 == a2)
    {
      v26 = 1;
    }
    else
    {
      v34 = v13;
      v35 = v12;
      v36 = a3;
      v17 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      v31 = *(_QWORD *)(v12 + 72);
      v32 = a1;
      v33 = *(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 16);
      v18 = v16 - 1;
      v19 = v13;
      do
      {
        v20 = v33;
        v33((uint64_t)v15, a1 + v17, v10);
        v21 = a2;
        v20(v19, a2 + v17, v10);
        v22 = a4;
        v23 = a4;
        v24 = a5;
        v25 = sub_100004D8C(v23, v36, a5);
        v26 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v19, v10, v25);
        v27 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
        v27(v19, v10);
        v27((uint64_t)v15, v10);
        v29 = v18-- != 0;
        if ((v26 & 1) == 0)
          break;
        v17 += v31;
        a5 = v24;
        a4 = v22;
        a2 = v21;
        a1 = v32;
      }
      while (v29);
    }
  }
  else
  {
    v26 = 0;
  }
  return v26 & 1;
}

uint64_t sub_1000D2F18(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  char v6;

  v2 = *(unsigned __int8 *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(unsigned __int8 *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  if ((sub_1000D2630(*(_QWORD *)a1, *(_QWORD *)a2) & 1) == 0)
    return 0;
  if (v2 != 6)
  {
    if (v4 == 6)
      return 0;
    sub_100047FF8(v2);
    if ((v6 & 1) == 0)
      return 0;
    return sub_1000D283C(v3, v5);
  }
  if (v4 == 6)
    return sub_1000D283C(v3, v5);
  return 0;
}

uint64_t sub_1000D2FA8()
{
  uint64_t v0;

  return ApplicationCapabilities.Tabs.description.getter(*(_QWORD *)v0, *(_BYTE *)(v0 + 8), *(_QWORD *)(v0 + 16));
}

uint64_t ApplicationCapabilities.tabs.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 112);
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v2);
  return v1;
}

void sub_1000D3000()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[512];
  _BYTE v22[8];
  id v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _BYTE v27[16];
  _BYTE v28[32];

  v1 = v0;
  v2 = sub_1000057B4(&qword_1004C2C50);
  inited = swift_initStackObject(v2, v21);
  *(_OWORD *)(inited + 16) = xmmword_1003C6CD0;
  *(_QWORD *)(inited + 32) = 0x64656E6769537369;
  *(_QWORD *)(inited + 40) = 0xEA00000000006E49;
  *(_BYTE *)(inited + 48) = *(_BYTE *)v0;
  *(_QWORD *)(inited + 72) = &type metadata for Bool;
  *(_QWORD *)(inited + 80) = 0xD000000000000016;
  *(_QWORD *)(inited + 88) = 0x80000001003A9CC0;
  *(_BYTE *)(inited + 96) = *(_BYTE *)(v0 + 1);
  *(_QWORD *)(inited + 120) = &type metadata for Bool;
  *(_QWORD *)(inited + 128) = 0xD000000000000015;
  *(_QWORD *)(inited + 136) = 0x80000001003A9CE0;
  *(_BYTE *)(inited + 144) = *(_BYTE *)(v0 + 2);
  *(_QWORD *)(inited + 168) = &type metadata for Bool;
  *(_QWORD *)(inited + 176) = 0xD000000000000018;
  *(_QWORD *)(inited + 184) = 0x80000001003A9D00;
  sub_1000D34C8(v0, (uint64_t *)(inited + 192));
  *(_QWORD *)(inited + 224) = 0x536465776F6C6C61;
  *(_QWORD *)(inited + 232) = 0xEF73656369767265;
  v4 = *(_QWORD *)(v0 + 24);
  v5 = sub_1000DBF08();
  v6 = swift_bridgeObjectRetain();
  v7 = Set.description.getter(v6, &type metadata for ApplicationCapabilities.Service, v5);
  v9 = v8;
  swift_bridgeObjectRelease(v4);
  *(_QWORD *)(inited + 240) = v7;
  *(_QWORD *)(inited + 248) = v9;
  *(_QWORD *)(inited + 264) = &type metadata for String;
  *(_QWORD *)(inited + 272) = 0xD000000000000012;
  *(_QWORD *)(inited + 280) = 0x80000001003A9D20;
  v10 = *(_QWORD *)(v1 + 32);
  v11 = swift_bridgeObjectRetain();
  v12 = Set.description.getter(v11, &type metadata for ApplicationCapabilities.Service, v5);
  v14 = v13;
  swift_bridgeObjectRelease(v10);
  *(_QWORD *)(inited + 288) = v12;
  *(_QWORD *)(inited + 296) = v14;
  *(_QWORD *)(inited + 312) = &type metadata for String;
  strcpy((char *)(inited + 320), "ratingWarning");
  *(_WORD *)(inited + 334) = -4864;
  v15 = *(_OWORD *)(v1 + 56);
  v24 = *(_OWORD *)(v1 + 40);
  v25 = v15;
  v26 = *(_QWORD *)(v1 + 72);
  sub_10000FD10((uint64_t)&v24 + 8, (uint64_t)v28, &qword_1004BAE98);
  sub_10000FD10((uint64_t)&v25 + 8, (uint64_t)v27, &qword_1004BAE98);
  sub_1000795C8((uint64_t)v28);
  sub_1000795C8((uint64_t)v27);
  v16 = ApplicationCapabilities.RatingWarning.description.getter();
  v18 = v17;
  sub_100072644((uint64_t)v28);
  sub_100072644((uint64_t)v27);
  *(_QWORD *)(inited + 336) = v16;
  *(_QWORD *)(inited + 344) = v18;
  *(_QWORD *)(inited + 360) = &type metadata for String;
  *(_QWORD *)(inited + 368) = 0xD000000000000012;
  *(_QWORD *)(inited + 376) = 0x80000001003A9D40;
  sub_10000FD10(v1 + 80, (uint64_t)&v23, (uint64_t *)&unk_1004BD080);
  sub_10000FD10((uint64_t)&v23, (uint64_t)v22, (uint64_t *)&unk_1004BD080);
  sub_10001B220(&v23);
  v19 = sub_1000057B4((uint64_t *)&unk_1004BD080);
  *(_QWORD *)(inited + 384) = String.init<A>(describing:)(v22, v19);
  *(_QWORD *)(inited + 392) = v20;
  *(_QWORD *)(inited + 408) = &type metadata for String;
  *(_QWORD *)(inited + 416) = 0xD000000000000011;
  *(_QWORD *)(inited + 424) = 0x80000001003A9D60;
  __asm { BR              X12 }
}

unint64_t sub_1000D32E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;

  v0[54] = 0x63697373616C63;
  v0[55] = 0xE700000000000000;
  v0[57] = v2;
  v0[58] = 1935827316;
  v0[59] = 0xE400000000000000;
  v4 = *(_QWORD *)(v1 + 96);
  *(_QWORD *)(v3 - 192) = v4;
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    sub_100097348(0, v5, 0);
    __asm { BR              X9 }
  }
  v0[63] = sub_1000057B4(&qword_1004BA5F8);
  v0[60] = _swiftEmptyArrayStorage;
  return sub_1000B8CE8((uint64_t)v0);
}

void sub_1000D34C8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  Swift::String v5;
  void *object;
  Swift::String v7;

  v3 = 0xE700000000000000;
  v4 = 0x6E776F6E6B6E75;
  switch(*(_QWORD *)(a1 + 16))
  {
    case 0:
      break;
    case 1:
      v4 = 0x64656C62616E65;
      break;
    case 2:
      v3 = 0xE800000000000000;
      v4 = 0x64656C6261736964;
      break;
    case 3:
      v3 = 0xE500000000000000;
      v4 = 0x6564696C67;
      break;
    default:
      v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease(object);
      v7._countAndFlagsBits = 62;
      v7._object = (void *)0xE100000000000000;
      String.append(_:)(v7);
      v4 = 0x3C6E776F6E6B6E75;
      v3 = 0xE800000000000000;
      break;
  }
  a2[3] = (uint64_t)&type metadata for String;
  *a2 = v4;
  a2[1] = v3;
}

BOOL sub_1000D35DC(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[7];
  uint64_t v13;
  _OWORD v14[7];
  uint64_t v15;

  v2 = *(_OWORD *)(a1 + 80);
  v12[4] = *(_OWORD *)(a1 + 64);
  v12[5] = v2;
  v12[6] = *(_OWORD *)(a1 + 96);
  v13 = *(_QWORD *)(a1 + 112);
  v3 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v3;
  v4 = *(_OWORD *)(a1 + 48);
  v12[2] = *(_OWORD *)(a1 + 32);
  v12[3] = v4;
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[3];
  v14[2] = a2[2];
  v14[3] = v7;
  v14[0] = v5;
  v14[1] = v6;
  v8 = a2[4];
  v9 = a2[5];
  v10 = a2[6];
  v15 = *((_QWORD *)a2 + 14);
  v14[5] = v9;
  v14[6] = v10;
  v14[4] = v8;
  return _s9MusicCore23ApplicationCapabilitiesV23__derived_struct_equalsySbAC_ACtFZ_0((unsigned __int8 *)v12, (unsigned __int8 *)v14);
}

uint64_t sub_1000D365C()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for ApplicationCapabilities.Controller(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_1000D36D8();
  static ApplicationCapabilities.Controller.shared = result;
  return result;
}

double static ApplicationCapabilities.Controller.shared.getter()
{
  double result;

  if (qword_1004B8AF8 != -1)
    swift_once(&qword_1004B8AF8, sub_1000D365C);
  *(_QWORD *)&result = swift_retain(static ApplicationCapabilities.Controller.shared).n128_u64[0];
  return result;
}

uint64_t sub_1000D36D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  NSString v26;
  uint64_t v27;
  void *v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _BYTE v40[32];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v1 = v0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_needsNetworkReachabilityUpdate) = 0;
  v2 = v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_stateHandler;
  *(_QWORD *)v2 = 0;
  *(_BYTE *)(v2 + 8) = 1;
  v3 = OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_lock;
  v4 = type metadata accessor for UnfairLock();
  swift_allocObject(v4, 24, 7);
  *(_QWORD *)(v0 + v3) = UnfairLock.init()();
  v5 = OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_storeBag;
  if (qword_1004B8BC0 != -1)
    swift_once(&qword_1004B8BC0, sub_1000E30D8);
  sub_1000057B4(&qword_1004BD040);
  UnfairLock.locked<A>(_:)((void (*)(void))sub_10002D3E4);
  *(_QWORD *)(v0 + v5) = v41;
  *(_QWORD *)(v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_profileObserver) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_bagObserver) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_bindings) = _swiftEmptyArrayStorage;
  result = UIApp;
  if (UIApp)
  {
    *(_BYTE *)(v0 + 16) = objc_msgSend(UIApp, "launchedToTest");
    v7 = type metadata accessor for MusicTabsDictionaryProvider();
    swift_allocObject(v7, 56, 7);
    v8 = sub_100213B4C(0x626154636973756DLL, 0xE900000000000073, (uint64_t)sub_1000D3AE0, 0);
    *(_QWORD *)(v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_musicTabsDictionaryProvider) = v8;
    swift_retain(v8);
    UnfairLock.locked<A>(_:)((void (*)(void))sub_10002D3E4);
    v9 = *(_BYTE *)(v0 + 16);
    swift_retain(v8);
    sub_1000DA254((void *)v41, (uint64_t)v8, v9, (uint64_t)&v41);
    v10 = v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities;
    v11 = v46;
    *(_OWORD *)(v10 + 64) = v45;
    *(_OWORD *)(v10 + 80) = v11;
    *(_OWORD *)(v10 + 96) = v47;
    *(_QWORD *)(v10 + 112) = v48;
    v12 = v42;
    *(_OWORD *)v10 = v41;
    *(_OWORD *)(v10 + 16) = v12;
    v13 = v44;
    v14 = v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller__capabilities;
    *(_OWORD *)(v10 + 32) = v43;
    *(_OWORD *)(v10 + 48) = v13;
    swift_beginAccess(v14, v40, 33, 0);
    v36 = v45;
    v37 = v46;
    v38 = v47;
    v39 = v48;
    v32 = v41;
    v33 = v42;
    v34 = v43;
    v35 = v44;
    sub_1000DBA38((uint64_t)&v41);
    Published.init(initialValue:)(&v32, &type metadata for ApplicationCapabilities);
    swift_endAccess(v40);
    v15 = swift_allocObject(&unk_100472158, 24, 7);
    swift_weakInit(v15 + 16, v1);
    swift_retain(v15);
    sub_1002139D0((uint64_t)sub_1000DBEB4, v15);
    swift_release_n(v15, 2, v16);
    UnfairLock.locked<A>(_:)((void (*)(void))sub_1000DBA20);
    sub_1000D3CA8();
    v17 = sub_10000598C(0, (unint64_t *)&qword_1004BD060, OS_dispatch_queue_ptr);
    v25 = (void *)static OS_dispatch_queue.main.getter(v17, v18, v19, v20, v21, v22, v23, v24, v32, *((_QWORD *)&v32 + 1), v33, *((_QWORD *)&v33 + 1), v34, *((_QWORD *)&v34 + 1), v35);
    v26 = String._bridgeToObjectiveC()();
    v27 = swift_allocObject(&unk_100472158, 24, 7);
    swift_weakInit(v27 + 16, v1);
    *(_QWORD *)&v34 = sub_1000DBEBC;
    *((_QWORD *)&v34 + 1) = v27;
    *(_QWORD *)&v32 = _NSConcreteStackBlock;
    *((_QWORD *)&v32 + 1) = 1107296256;
    *(_QWORD *)&v33 = sub_1000D45BC;
    *((_QWORD *)&v33 + 1) = &unk_100472210;
    v28 = _Block_copy(&v32);
    v29 = swift_release(*((_QWORD *)&v34 + 1));
    v30 = MSVLogAddStateHandler(v25, v26, v28, v29);
    swift_release(v8);
    _Block_release(v28);

    v31 = v1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_stateHandler;
    *(_QWORD *)v31 = v30;
    *(_BYTE *)(v31 + 8) = 0;
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000D3AE0()
{
  id v0;
  uint64_t v1;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = sub_1000D3B2C();

  return v1;
}

uint64_t sub_1000D3B2C()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  LOBYTE(v4) = 1;
  v0 = sub_1000DBC68();
  v1 = sub_10002D3FC();
  NSUserDefaults.subscript.getter((uint64_t)&_s3KeyON, v0, v1, &v5);
  if (v6)
  {
    v2 = sub_1000057B4(&qword_1004BD098);
    if (swift_dynamicCast(&v4, &v5, (char *)&type metadata for Any + 8, v2, 6))
      return v4;
    else
      return 0;
  }
  else
  {
    sub_10000FE2C((uint64_t)&v5, &qword_1004BE030);
    return 0;
  }
}

uint64_t property wrapper backing initializer of ApplicationCapabilities.Controller.capabilities(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  _OWORD v5[7];
  uint64_t v6;

  v1 = *(_OWORD *)(a1 + 80);
  v5[4] = *(_OWORD *)(a1 + 64);
  v5[5] = v1;
  v5[6] = *(_OWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 112);
  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v3 = *(_OWORD *)(a1 + 48);
  v5[2] = *(_OWORD *)(a1 + 32);
  v5[3] = v3;
  return Published.init(initialValue:)(v5, &type metadata for ApplicationCapabilities);
}

double sub_1000D3C24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  double result;
  uint64_t v5;
  _BYTE v6[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v5 = Strong;
    UnfairLock.locked<A>(_:)((void (*)(void))sub_1000DBA20);
    *(_QWORD *)&result = swift_release(v5).n128_u64[0];
  }
  return result;
}

double sub_1000D3CA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  __C::_NSRange v6;
  uint64_t v7;
  id v8;
  void *v9;
  __C::_NSRange v10;
  CFRange v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t inited;
  void *v16;
  __C::_NSRange v17;
  CFRange v18;
  void *v19;
  CFRange v20;
  void *v21;
  CFRange v22;
  void *v23;
  CFRange v24;
  void *v25;
  CFRange v26;
  uint64_t v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  void *v83;
  void *v84;
  uint64_t v85;
  __n128 v86;
  uint64_t v87;
  double result;
  uint64_t v89;
  uint64_t v90;
  id v91;
  id v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  CFRange v98;
  ValueMetadata *v99;
  _UNKNOWN **v100;

  v1 = v0;
  v2 = type metadata accessor for Whitetail.Binding();
  v3 = (void *)ICUserIdentityStoreDidChangeNotification;
  v4 = (void *)objc_opt_self(ICUserIdentityStore);
  v5 = v3;
  v6.length = (Swift::Int)objc_msgSend(v4, "defaultIdentityStore");
  v6.location = (Swift::Int)v5;
  v99 = &type metadata for NotificationTrigger;
  v100 = &protocol witness table for NotificationTrigger;
  v98 = CFRange.init(_:)(v6);
  v7 = swift_allocObject(&unk_100472158, 24, 7);
  v94 = v1;
  swift_weakInit(v7 + 16, v1);
  v96 = Whitetail.Binding.__allocating_init(_:needsInitialConfiguration:configurationBlock:)(&v98, 1, (uint64_t)sub_1000DBF4C, v7);
  v8 = objc_msgSend((id)objc_opt_self(MPCloudServiceStatusController), "sharedController");
  v9 = (void *)MPCloudServiceStatusControllerSubscriptionStatusDidChangeNotification;
  v10.location = MPCloudServiceStatusControllerSubscriptionStatusDidChangeNotification;
  v10.length = (Swift::Int)v8;
  v11 = CFRange.init(_:)(v10);
  v99 = &type metadata for NotificationTrigger;
  v100 = &protocol witness table for NotificationTrigger;
  v98 = v11;
  v12 = swift_allocObject(&unk_100472158, 24, 7);
  swift_weakInit(v12 + 16, v1);
  v13 = v9;
  v91 = v8;
  v95 = Whitetail.Binding.__allocating_init(_:needsInitialConfiguration:configurationBlock:)(&v98, 1, (uint64_t)sub_1000DBF54, v12);
  v92 = objc_msgSend((id)objc_opt_self(MPPlaybackUserDefaults), "standardUserDefaults");
  v14 = sub_1000057B4(&qword_1004BD090);
  inited = swift_initStackObject(v14, &v97);
  *(_OWORD *)(inited + 16) = xmmword_1003C6270;
  v16 = (void *)MPPlaybackUserDefaultsPreferredResolutionsDidChangeNotification;
  v17.location = MPPlaybackUserDefaultsPreferredResolutionsDidChangeNotification;
  v17.length = (Swift::Int)v92;
  v18 = CFRange.init(_:)(v17);
  *(_QWORD *)(inited + 56) = &type metadata for NotificationTrigger;
  *(_QWORD *)(inited + 64) = &protocol witness table for NotificationTrigger;
  *(CFRange *)(inited + 32) = v18;
  v19 = (void *)MPCloudControllerHasProperNetworkConditionsToShowCloudMediaDidChangeNotification;
  v20 = CFRange.init(_:)((__C::_NSRange)MPCloudControllerHasProperNetworkConditionsToShowCloudMediaDidChangeNotification);
  *(_QWORD *)(inited + 96) = &type metadata for NotificationTrigger;
  *(_QWORD *)(inited + 104) = &protocol witness table for NotificationTrigger;
  *(CFRange *)(inited + 72) = v20;
  v21 = (void *)RadioAvailabilityControllerRadioAvailableDidChangeNotification;
  v22 = CFRange.init(_:)((__C::_NSRange)RadioAvailabilityControllerRadioAvailableDidChangeNotification);
  *(_QWORD *)(inited + 136) = &type metadata for NotificationTrigger;
  *(_QWORD *)(inited + 144) = &protocol witness table for NotificationTrigger;
  *(CFRange *)(inited + 112) = v22;
  v23 = (void *)MPCloudServiceStatusControllerSubscriptionAvailabilityDidChangeNotification;
  v24 = CFRange.init(_:)((__C::_NSRange)MPCloudServiceStatusControllerSubscriptionAvailabilityDidChangeNotification);
  *(_QWORD *)(inited + 176) = &type metadata for NotificationTrigger;
  *(_QWORD *)(inited + 184) = &protocol witness table for NotificationTrigger;
  *(CFRange *)(inited + 152) = v24;
  v25 = (void *)MPCloudServiceStatusControllerCloudLibraryEnabledDidChangeNotification;
  v26 = CFRange.init(_:)((__C::_NSRange)MPCloudServiceStatusControllerCloudLibraryEnabledDidChangeNotification);
  *(_QWORD *)(inited + 216) = &type metadata for NotificationTrigger;
  *(_QWORD *)(inited + 224) = &protocol witness table for NotificationTrigger;
  *(CFRange *)(inited + 192) = v26;
  v27 = swift_allocObject(&unk_100472158, 24, 7);
  swift_weakInit(v27 + 16, v94);
  v90 = v2;
  swift_allocObject(v2, 48, 7);
  v28 = v16;
  v93 = v92;
  v29 = v19;
  v30 = v21;
  v31 = v23;
  v32 = v25;
  v33 = Whitetail.Binding.init(_:needsInitialConfiguration:configurationBlock:)(inited, 1, (uint64_t)sub_1000DBF54, v27);
  v34 = (uint64_t *)(v94 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_bindings);
  swift_beginAccess(v94 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_bindings, &v98, 33, 0);
  v35 = *v34;
  if ((unint64_t)*v34 >> 62)
  {
    if (v35 < 0)
      v89 = *v34;
    else
      v89 = v35 & 0xFFFFFFFFFFFFFF8;
    v37 = v96;
    swift_retain(v96);
    v38 = v95;
    swift_retain(v95);
    swift_retain(v33);
    swift_bridgeObjectRetain();
    v36 = _CocoaArrayWrapper.endIndex.getter(v89);
    swift_bridgeObjectRelease(v35);
    v40 = v36 + 3;
    if (!__OFADD__(v36, 3))
    {
LABEL_3:
      v41 = sub_1000D8954(v40, 1);
      specialized Array._endMutation()(v41);
      swift_retain(v37);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v42);
      v36 = *(_QWORD *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v39 = *(_QWORD *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v36 < v39 >> 1)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else
  {
    v36 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
    v37 = v96;
    swift_retain(v96);
    v38 = v95;
    swift_retain(v95);
    swift_retain(v33);
    v40 = v36 + 3;
    if (!__OFADD__(v36, 3))
      goto LABEL_3;
  }
  __break(1u);
LABEL_24:
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v36 + 1, 1);
LABEL_4:
  v43 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v36, v37);
  specialized Array._endMutation()(v43);
  swift_retain(v38);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v44);
  v46 = *(_QWORD *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v45 = *(_QWORD *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v46 >= v45 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1);
  v47 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v46, v38);
  specialized Array._endMutation()(v47);
  swift_retain(v33);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v48);
  v50 = *(_QWORD *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v49 = *(_QWORD *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v50 >= v49 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v50 + 1, 1);
  v51 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v50, v33);
  specialized Array._endMutation()(v51);
  swift_endAccess(&v98);
  swift_release(v37);
  swift_release(v33);
  v52 = v38;
  swift_release(v38);
  v53 = sub_1000DBC24();
  v55 = UserDefaultsKeyValueTrigger.init<A>(suiteName:key:)(0xD000000000000014, 0x80000001003A9D80, v54, (uint64_t)&type metadata for NSUserDefaults.MobileiPod, v53);
  v57 = v56;
  v59 = v58;
  v61 = v60;
  v99 = &type metadata for UserDefaultsKeyValueTrigger;
  v100 = &protocol witness table for UserDefaultsKeyValueTrigger;
  v62 = (_QWORD *)swift_allocObject(&unk_100472270, 48, 7);
  v98.location = (CFIndex)v62;
  v62[2] = v55;
  v62[3] = v57;
  v62[4] = v59;
  v62[5] = v61;
  v63 = swift_allocObject(&unk_100472158, 24, 7);
  swift_weakInit(v63 + 16, v94);
  v64 = Whitetail.Binding.__allocating_init(_:needsInitialConfiguration:configurationBlock:)(&v98, 1, (uint64_t)sub_1000DBF54, v63);
  swift_beginAccess(v34, &v98, 33, 0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v65);
  v67 = *(_QWORD *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v66 = *(_QWORD *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v67 >= v66 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1, v67 + 1, 1);
  v68 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v67, v64);
  specialized Array._endMutation()(v68);
  swift_endAccess(&v98);
  v69 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ApplicationCapabilities.Controller.ProfileObserver()), "init", v90);
  v70 = OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_profileObserver;
  v71 = *(void **)(v94 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_profileObserver);
  *(_QWORD *)(v94 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_profileObserver) = v69;

  v72 = *(_QWORD *)(v94 + v70);
  if (v72)
    swift_weakAssign(v72+ OBJC_IVAR____TtCCV9MusicCore23ApplicationCapabilities10ControllerP33_3C92A9FA31E0FE3D8D536795352BB0D115ProfileObserver_controller, v94);
  v73 = v52;
  if (qword_1004B8BC0 != -1)
    swift_once(&qword_1004B8BC0, sub_1000E30D8);
  v74 = static BagProvider.shared;
  v75 = swift_allocObject(&unk_100472158, 24, 7);
  swift_weakInit(v75 + 16, v94);
  v76 = type metadata accessor for BagProvider.Observer();
  v77 = swift_allocObject(v76, 40, 7);
  v78 = swift_weakInit(v77 + 16, 0);
  *(_QWORD *)(v77 + 24) = 0;
  *(_QWORD *)(v77 + 32) = 0;
  swift_weakAssign(v78, v74);
  v79 = *(_QWORD *)(v77 + 24);
  v80 = *(_QWORD *)(v77 + 32);
  *(_QWORD *)(v77 + 24) = sub_1000DBFA0;
  *(_QWORD *)(v77 + 32) = v75;
  swift_retain_n(v75, 3);
  v81 = sub_10000DCF8(v79, v80);
  v98.location = 0;
  __chkstk_darwin(v81);
  UnfairLock.locked<A>(_:)(sub_1000C99F0);
  if (v98.location)
  {
    v82 = (id)v98.location;
    sub_1000D65AC(v82, v75);

    v83 = v82;
    v84 = v82;
    v85 = v96;
  }
  else
  {
    sub_1000E34B8(0);
    v85 = v96;
    v84 = v91;
    v83 = v93;
  }

  swift_release_n(v75, 2, v86);
  swift_release(v33);
  swift_release(v73);
  swift_release(v85);
  swift_release(v75);
  v87 = *(_QWORD *)(v94 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_bagObserver);
  *(_QWORD *)(v94 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_bagObserver) = v77;
  *(_QWORD *)&result = swift_release(v87).n128_u64[0];
  return result;
}

uint64_t sub_1000D4498(char a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD v16[7];
  uint64_t v17;
  _BYTE v18[24];
  _OWORD v19[7];
  uint64_t v20;

  if ((a1 & 1) == 0)
    return 0;
  v5 = a4 + 16;
  swift_beginAccess(a4 + 16, v18, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (!Strong)
    return 0;
  v7 = Strong;
  KeyPath = swift_getKeyPath(&unk_1003CCA98);
  v9 = swift_getKeyPath(&unk_1003CCAC0);
  static Published.subscript.getter(v16, v7, KeyPath, v9);
  swift_release(KeyPath);
  swift_release(v9);
  v19[4] = v16[4];
  v19[5] = v16[5];
  v19[6] = v16[6];
  v20 = v17;
  v19[0] = v16[0];
  v19[1] = v16[1];
  v19[2] = v16[2];
  v19[3] = v16[3];
  sub_1000D3000();
  v11 = v10;
  sub_1000DBAB8(v19);
  sub_100117808(v11);
  v13 = v12;
  swift_bridgeObjectRelease(v11);
  v14 = a2(v13);
  swift_release(v7);
  swift_bridgeObjectRelease(v13);
  return v14;
}

uint64_t sub_1000D45BC(uint64_t a1, char a2, void *aBlock)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t (*)(uint64_t), uint64_t, __n128);
  void *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;

  v3 = a2 & 1;
  v5 = *(uint64_t (**)(uint64_t, uint64_t (*)(uint64_t), uint64_t, __n128))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v6 = _Block_copy(aBlock);
  v7 = swift_allocObject(&unk_100472248, 24, 7);
  *(_QWORD *)(v7 + 16) = v6;
  v8 = swift_retain(v4);
  v9 = v5(v3, sub_1000DBF00, v7, v8);
  swift_release(v4);
  swift_release(v7);
  return v9;
}

uint64_t sub_1000D4648(uint64_t a1, uint64_t a2)
{
  NSDictionary v3;
  uint64_t v4;

  if (a1)
    v3.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  else
    v3.super.isa = 0;
  v4 = (*(uint64_t (**)(uint64_t, Class))(a2 + 16))(a2, v3.super.isa);

  return v4;
}

__n128 sub_1000D46B0@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  __n128 result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __n128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1003CCA98);
  v5 = swift_getKeyPath(&unk_1003CCAC0);
  static Published.subscript.getter(&v17, v3, KeyPath, v5);
  swift_release(v5);
  swift_release(KeyPath);
  v6 = BYTE1(v17);
  v7 = BYTE2(v17);
  v8 = v23;
  v9 = v24;
  v10 = v25;
  v11 = v26;
  v13 = v18;
  result = v19;
  v14 = v20;
  v15 = v21;
  v16 = v22;
  *(_BYTE *)a2 = v17;
  *(_BYTE *)(a2 + 1) = v6;
  *(_BYTE *)(a2 + 2) = v7;
  *(_OWORD *)(a2 + 8) = v13;
  *(__n128 *)(a2 + 24) = result;
  *(_OWORD *)(a2 + 40) = v14;
  *(_OWORD *)(a2 + 56) = v15;
  *(_OWORD *)(a2 + 72) = v16;
  *(_BYTE *)(a2 + 88) = v8;
  *(_QWORD *)(a2 + 96) = v9;
  *(_BYTE *)(a2 + 104) = v10;
  *(_QWORD *)(a2 + 112) = v11;
  return result;
}

uint64_t sub_1000D4780(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  _BYTE v24[8];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;

  v2 = *a1;
  v19 = a1[2];
  v20 = a1[1];
  v3 = *((_QWORD *)a1 + 3);
  v17 = *((_QWORD *)a1 + 2);
  v18 = *((_QWORD *)a1 + 1);
  v4 = *((_QWORD *)a1 + 4);
  v16 = *((_QWORD *)a1 + 5);
  v6 = *((_QWORD *)a1 + 6);
  v5 = *((_QWORD *)a1 + 7);
  v8 = *((_QWORD *)a1 + 8);
  v7 = *((_QWORD *)a1 + 9);
  v9 = (void *)*((_QWORD *)a1 + 10);
  v10 = *((_QWORD *)a1 + 12);
  v14 = a1[104];
  v15 = a1[88];
  v11 = *((_QWORD *)a1 + 14);
  v21 = *a2;
  KeyPath = swift_getKeyPath(&unk_1003CCA98);
  v22 = swift_getKeyPath(&unk_1003CCAC0);
  v24[0] = v2;
  v24[1] = v20;
  v24[2] = v19;
  v25 = v18;
  v26 = v17;
  v27 = v3;
  v28 = v4;
  v29 = v16;
  v30 = v6;
  v31 = v5;
  v32 = v8;
  v33 = v7;
  v34 = v9;
  v35 = v15;
  v36 = v10;
  v37 = v14;
  v38 = v11;
  v12 = v9;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_retain(v21);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  return static Published.subscript.setter(v24, v21, KeyPath, v22);
}

uint64_t ApplicationCapabilities.Controller.$capabilities.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller__capabilities, v3, 33, 0);
  v1 = sub_1000057B4((uint64_t *)&unk_1004BCDC0);
  Published.projectedValue.getter(v1);
  return swift_endAccess(v3);
}

uint64_t sub_1000D492C(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(*a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller__capabilities, v3, 33, 0);
  v1 = sub_1000057B4((uint64_t *)&unk_1004BCDC0);
  Published.projectedValue.getter(v1);
  return swift_endAccess(v3);
}

uint64_t sub_1000D4990(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  void (*v11)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v4 = sub_1000057B4(&qword_1004BFBD0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v6);
  v10 = &v16[-v9 - 8];
  v11 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16);
  v11(&v16[-v9 - 8], a1, v4);
  v12 = *a2;
  v11(v8, v10, v4);
  swift_beginAccess(v12 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller__capabilities, v16, 33, 0);
  v13 = sub_1000057B4((uint64_t *)&unk_1004BCDC0);
  Published.projectedValue.setter(v8, v13);
  swift_endAccess(v16);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v10, v4);
}

Swift::Void __swiftcall ApplicationCapabilities.Controller.setNeedsNetworkReachabilityUpdate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE v9[16];
  uint64_t v10;
  char *v11;
  char v12;

  v1 = v0;
  v2 = sub_1000057B4((uint64_t *)&unk_1004BFBC0);
  __chkstk_darwin(v2);
  v4 = &v9[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = 0;
  v10 = v0;
  v11 = &v12;
  UnfairLock.locked<A>(_:)(sub_1000DAE68);
  if (v12 == 1)
  {
    static TaskPriority.userInitiated.getter(v5);
    v6 = type metadata accessor for TaskPriority(0);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v4, 0, 1, v6);
    v7 = (_QWORD *)swift_allocObject(&unk_100471D70, 40, 7);
    v7[2] = 0;
    v7[3] = 0;
    v7[4] = v1;
    swift_retain(v1);
    v8 = sub_10004DE78((uint64_t)v4, (uint64_t)&unk_1004BCDE0, (uint64_t)v7);
    swift_release(v8);
    sub_10000FE2C((uint64_t)v4, (uint64_t *)&unk_1004BFBC0);
  }
}

uint64_t sub_1000D4BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_1000D4BDC, 0, 0);
}

uint64_t sub_1000D4BDC()
{
  uint64_t v0;

  UnfairLock.locked<A>(_:)(sub_1000DBE00);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000D4C38(char *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  id v11;
  void *v12;
  unsigned int v13;
  uint64_t KeyPath;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  _BYTE v67[32];
  _BYTE v68[48];
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;

  v3 = sub_1000057B4((uint64_t *)&unk_1004BFBC0);
  __chkstk_darwin(v3);
  v5 = OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_needsNetworkReachabilityUpdate;
  if (a1[OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_needsNetworkReachabilityUpdate] == 1)
  {
    v66 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    v72 = v1;
    if (qword_1004B8B10 != -1)
      swift_once(&qword_1004B8B10, sub_1000D843C);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_100039D34(v6, (uint64_t)qword_1004BCD98);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Needs Network Reachability Update", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    a1[v5] = 0;
    v11 = objc_msgSend((id)objc_opt_self(MPCloudController), "sharedCloudController");
    if (v11)
    {
      v12 = v11;
      if ((objc_msgSend(v11, "shouldProhibitMusicActionForCurrentNetworkConditions") & 1) != 0)
        v13 = 0;
      else
        v13 = objc_msgSend(v12, "hasProperNetworkConditionsToShowCloudMedia");

    }
    else
    {
      v13 = 0;
    }
    KeyPath = swift_getKeyPath(&unk_1003CCA98);
    v15 = swift_getKeyPath(&unk_1003CCAC0);
    v65 = a1;
    static Published.subscript.getter(v67, a1, KeyPath, v15);
    swift_release(KeyPath);
    swift_release(v15);
    v16 = v67[1];
    v17 = *(_QWORD *)&v67[24];
    v18 = *(_QWORD *)v68;
    v19 = *(_QWORD *)&v68[24];
    v21 = *(_QWORD *)&v68[40];
    v20 = (void *)v69;
    v22 = v70;
    swift_bridgeObjectRelease(v71);
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v21);

    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter(v24);
    v26 = os_log_type_enabled(v24, v25);
    if (v13 == v16)
    {
      if (v26)
      {
        v57 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v57 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Network Reachability status does not differ from currently known capabilities.", v57, 2u);
        swift_slowDealloc(v57, -1, -1);
      }

    }
    else
    {
      v27 = v13;
      if (v26)
      {
        v28 = swift_slowAlloc(12, -1);
        v29 = swift_slowAlloc(32, -1);
        *(_QWORD *)v67 = v29;
        *(_DWORD *)v28 = 136315138;
        if (v13)
          v30 = 0x1000000000000012;
        else
          v30 = 0x1000000000000016;
        if (v13)
          v31 = (char *)0x80000001003A9C60;
        else
          v31 = (char *)0x80000001003A9C40;
        *(_QWORD *)(v28 + 4) = sub_1000393D0((char *)v30, v31, (uint64_t *)v67);
        swift_bridgeObjectRelease(v31);
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Updating Network Reachability to: %s", (uint8_t *)v28, 0xCu);
        swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v29, -1, -1);
        swift_slowDealloc(v28, -1, -1);
      }

      v32 = v65;
      v33 = &v65[OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities];
      v34 = *(_OWORD *)&v65[OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 96];
      v35 = *(_OWORD *)&v65[OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 64];
      v69 = *(_OWORD *)&v65[OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 80];
      v70 = v34;
      v37 = *(_OWORD *)&v65[OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 16];
      v36 = *(_OWORD *)&v65[OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 32];
      *(_OWORD *)v67 = *(_OWORD *)&v65[OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities];
      *(_OWORD *)&v67[16] = v37;
      v71 = *(_QWORD *)&v65[OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 112];
      v38 = v71;
      v39 = *(_OWORD *)&v65[OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 48];
      *(_OWORD *)v68 = v36;
      *(_OWORD *)&v68[16] = v39;
      *(_OWORD *)&v68[32] = v35;
      v40 = v34;
      v41 = BYTE8(v69);
      v43 = *((_QWORD *)&v35 + 1);
      v42 = (void *)v69;
      v44 = *(_QWORD *)&v67[24];
      v45 = v36;
      v46 = v67[2];
      v47 = *(_QWORD *)&v65[OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 24];
      v61 = *(_QWORD *)&v65[OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 32];
      v62 = v47;
      v48 = *(_QWORD *)&v65[OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 72];
      v63 = *(_QWORD *)&v65[OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 56];
      v64 = v48;
      v65 = *(char **)&v65[OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 80];
      v59 = *((_QWORD *)v33 + 12);
      v49 = *((_QWORD *)v33 + 14);
      *v33 = v67[0];
      v33[1] = v27;
      v33[2] = v46;
      *(_OWORD *)(v33 + 8) = *(_OWORD *)&v67[8];
      *((_QWORD *)v33 + 3) = v44;
      *((_QWORD *)v33 + 4) = v36;
      *(_OWORD *)(v33 + 40) = *(_OWORD *)&v68[8];
      v60 = *(_OWORD *)&v68[24];
      *(_OWORD *)(v33 + 56) = *(_OWORD *)&v68[24];
      *((_QWORD *)v33 + 9) = *((_QWORD *)&v35 + 1);
      *((_QWORD *)v33 + 10) = v42;
      v33[88] = v41;
      *((_QWORD *)v33 + 12) = v34;
      v33[104] = BYTE8(v34);
      *((_QWORD *)v33 + 14) = v38;
      sub_1000DBA38((uint64_t)v67);
      sub_1000DBA38((uint64_t)v67);
      v50 = v60;
      *(_QWORD *)&v60 = v42;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease(v49);
      swift_bridgeObjectRelease(v59);
      swift_bridgeObjectRelease(v61);
      swift_bridgeObjectRelease(v62);
      swift_bridgeObjectRelease(v63);
      swift_bridgeObjectRelease(v64);

      sub_1000D5354((uint64_t)v67);
      swift_bridgeObjectRelease(v38);
      swift_bridgeObjectRelease(v40);

      swift_bridgeObjectRelease(v43);
      swift_bridgeObjectRelease(v50);
      swift_bridgeObjectRelease(v45);
      swift_bridgeObjectRelease(v44);
      sub_1000DBAB8(v67);
      v51 = type metadata accessor for TaskPriority(0);
      v52 = (uint64_t)v66;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v66, 1, 1, v51);
      type metadata accessor for MainActor(0);
      v53 = swift_retain(v32);
      v54 = static MainActor.shared.getter(v53);
      v55 = (_QWORD *)swift_allocObject(&unk_1004721F8, 40, 7);
      v55[2] = v54;
      v55[3] = &protocol witness table for MainActor;
      v55[4] = v32;
      v56 = sub_1000E6084(v52, (uint64_t)&unk_1004BD050, (uint64_t)v55);
      swift_release(v56);
    }
  }
}

uint64_t sub_1000D520C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v4 + 16) = a4;
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 24) = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000D5278, v7, v8);
}

uint64_t sub_1000D5278()
{
  uint64_t v0;
  id v1;

  swift_release(*(_QWORD *)(v0 + 24));
  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_1004B8B68 != -1)
    swift_once(&qword_1004B8B68, sub_1000D87DC);
  objc_msgSend(v1, "postNotificationName:object:", static ApplicationCapabilities.NotificationNames.hasNetworkConnectivityDidChange, *(_QWORD *)(v0 + 16));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t *ApplicationCapabilities.NotificationNames.hasNetworkConnectivityDidChange.unsafeMutableAddressor()
{
  if (qword_1004B8B68 != -1)
    swift_once(&qword_1004B8B68, sub_1000D87DC);
  return &static ApplicationCapabilities.NotificationNames.hasNetworkConnectivityDidChange;
}

_QWORD *sub_1000D5354(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  void *v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  void *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v2 = v1;
  v4 = sub_1000057B4((uint64_t *)&unk_1004BFBC0);
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = &_swiftEmptySetSingleton;
  v7 = *(_OWORD *)(v1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 80);
  v45 = *(_OWORD *)(v1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 64);
  v46 = v7;
  v47 = *(_OWORD *)(v1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 96);
  v48 = *(_QWORD *)(v1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 112);
  v8 = *(_OWORD *)(v1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 16);
  v41 = *(_OWORD *)(v1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities);
  v42 = v8;
  v9 = *(_OWORD *)(v1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 48);
  v43 = *(_OWORD *)(v1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 32);
  v44 = v9;
  sub_1000DBA38((uint64_t)&v41);
  if (qword_1004B8C50 != -1)
    swift_once(&qword_1004B8C50, sub_1001132F0);
  if (static NSUserDefaults.mobileiPod)
  {
    v10 = sub_1000DBC24();
    v11 = sub_10002D3FC();
    NSUserDefaults.subscript.getter((uint64_t)&type metadata for NSUserDefaults.MobileiPod, v10, v11, &v38);
    if (v39)
    {
      if ((swift_dynamicCast((char *)&v37 + 7, &v38, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0
        && (v37 & 0x100000000000000) != 0)
      {
        __asm { BR              X10 }
      }
    }
    else
    {
      sub_10000FE2C((uint64_t)&v38, &qword_1004BE030);
    }
  }
  if (!_s9MusicCore23ApplicationCapabilitiesV23__derived_struct_equalsySbAC_ACtFZ_0((unsigned __int8 *)&v41, (unsigned __int8 *)a1))
  {
    if ((v41 & 1) != (*(_BYTE *)a1 & 1))
    {
      if (qword_1004B8B60 != -1)
        swift_once(&qword_1004B8B60, sub_1000D878C);
      sub_1001523B0(&v38, (id)static ApplicationCapabilities.NotificationNames.activeAccountDidChange);

    }
    v12 = *((_QWORD *)&v42 + 1);
    v13 = sub_1000E63A4(5u, *((uint64_t *)&v42 + 1)) & 1;
    v14 = *(_QWORD *)(a1 + 24);
    if (v13 != (sub_1000E63A4(5u, v14) & 1))
    {
      if (qword_1004B8B18 != -1)
        swift_once(&qword_1004B8B18, sub_1000D84BC);
      sub_1001523B0(&v38, (id)static ApplicationCapabilities.NotificationNames.allowsiTunesContentDidChange);

    }
    v15 = sub_1000E63A4(0, v12) & 1;
    if (v15 != (sub_1000E63A4(0, v14) & 1))
    {
      if (qword_1004B8B20 != -1)
        swift_once(&qword_1004B8B20, sub_1000D850C);
      sub_1001523B0(&v38, (id)static ApplicationCapabilities.NotificationNames.allowsMusicServiceDidChange);

    }
    v16 = sub_1000E63A4(3u, v12) & 1;
    if (v16 != (sub_1000E63A4(3u, v14) & 1))
    {
      if (qword_1004B8B28 != -1)
        swift_once(&qword_1004B8B28, sub_1000D855C);
      sub_1001523B0(&v38, (id)static ApplicationCapabilities.NotificationNames.allowsSocialContentDidChange);

    }
    v17 = sub_1000E63A4(9u, v12) & 1;
    if (v17 != (sub_1000E63A4(9u, v14) & 1))
    {
      if (qword_1004B8B48 != -1)
        swift_once(&qword_1004B8B48, sub_1000D869C);
      sub_1001523B0(&v38, (id)static ApplicationCapabilities.NotificationNames.allowsSharePlayTogetherDidChange);

    }
    v18 = sub_1000E63A4(4u, v12) & 1;
    if (v18 != (sub_1000E63A4(4u, v14) & 1))
    {
      if (qword_1004B8B30 != -1)
        swift_once(&qword_1004B8B30, sub_1000D85AC);
      sub_1001523B0(&v38, (id)static ApplicationCapabilities.NotificationNames.allowsRadioContentDidChange);

    }
    v19 = sub_1000E63A4(2u, v12) & 1;
    if (v19 != (sub_1000E63A4(2u, v14) & 1))
    {
      if (qword_1004B8B38 != -1)
        swift_once(&qword_1004B8B38, sub_1000D85FC);
      sub_1001523B0(&v38, (id)static ApplicationCapabilities.NotificationNames.allowsSubscriptionContentDidChange);

    }
    v20 = sub_1000E63A4(0xAu, v12) & 1;
    if (v20 != (sub_1000E63A4(0xAu, v14) & 1))
    {
      if (qword_1004B8B40 != -1)
        swift_once(&qword_1004B8B40, sub_1000D864C);
      sub_1001523B0(&v38, (id)static ApplicationCapabilities.NotificationNames.mliEnabledDidChange);

    }
    if ((BYTE1(v41) & 1) != (*(_BYTE *)(a1 + 1) & 1))
    {
      if (qword_1004B8B68 != -1)
        swift_once(&qword_1004B8B68, sub_1000D87DC);
      sub_1001523B0(&v38, (id)static ApplicationCapabilities.NotificationNames.hasNetworkConnectivityDidChange);

    }
    if ((BYTE2(v41) & 1) != (*(_BYTE *)(a1 + 2) & 1))
    {
      if (qword_1004B8B78 != -1)
        swift_once(&qword_1004B8B78, sub_1000D887C);
      sub_1001523B0(&v38, (id)static ApplicationCapabilities.NotificationNames.isCloudLibraryEnabledDidChange);

    }
    if (*((_QWORD *)&v43 + 1) != *(_QWORD *)(a1 + 40))
    {
      if (qword_1004B8B70 != -1)
        swift_once(&qword_1004B8B70, sub_1000D882C);
      sub_1001523B0(&v38, (id)static ApplicationCapabilities.NotificationNames.ratingWarningThresholdDidChange);

    }
    if ((sub_100047FF4(BYTE8(v46), *(unsigned __int8 *)(a1 + 88)) & 1) == 0)
    {
      if (qword_1004B8B58 != -1)
        swift_once(&qword_1004B8B58, sub_1000D873C);
      sub_1001523B0(&v38, (id)static ApplicationCapabilities.NotificationNames.userSubscriptionStateDidChange);

    }
    v21 = BYTE8(v47);
    v22 = v48;
    v23 = *(unsigned __int8 *)(a1 + 104);
    v24 = *(_QWORD *)(a1 + 112);
    if ((sub_1000D2630(v47, *(_QWORD *)(a1 + 96)) & 1) == 0)
      goto LABEL_65;
    if (v21 == 6)
    {
      if (v23 != 6)
        goto LABEL_65;
    }
    else
    {
      if (v23 == 6)
        goto LABEL_65;
      sub_100047FF8(v21);
      if ((v25 & 1) == 0)
        goto LABEL_65;
    }
    if ((sub_1000D283C(v22, v24) & 1) != 0)
    {
LABEL_68:
      if (*((_QWORD *)&v41 + 1) != *(_QWORD *)(a1 + 8))
      {
        if (qword_1004B8B80 != -1)
          swift_once(&qword_1004B8B80, sub_1000D88CC);
        sub_1001523B0(&v38, (id)static ApplicationCapabilities.NotificationNames.subscriptionCapabilitiesDidChange);

      }
      goto LABEL_72;
    }
LABEL_65:
    if (qword_1004B8B50 != -1)
      swift_once(&qword_1004B8B50, sub_1000D86EC);
    sub_1001523B0(&v38, (id)static ApplicationCapabilities.NotificationNames.supportedTabsDidChange);

    goto LABEL_68;
  }
LABEL_72:
  if (_s9MusicCore23ApplicationCapabilitiesV23__derived_struct_equalsySbAC_ACtFZ_0((unsigned __int8 *)&v41, (unsigned __int8 *)a1))
  {
    swift_bridgeObjectRelease(v40);
  }
  else
  {
    v26 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v6, 1, 1, v26);
    v27 = v40;
    type metadata accessor for MainActor(0);
    sub_1000DBA38((uint64_t)&v41);
    v28 = swift_retain(v2);
    v29 = static MainActor.shared.getter(v28);
    v30 = swift_allocObject(&unk_100472130, 168, 7);
    v31 = v46;
    *(_OWORD *)(v30 + 104) = v45;
    *(_OWORD *)(v30 + 120) = v31;
    *(_OWORD *)(v30 + 136) = v47;
    v32 = v42;
    *(_OWORD *)(v30 + 40) = v41;
    *(_OWORD *)(v30 + 56) = v32;
    v33 = v44;
    *(_OWORD *)(v30 + 72) = v43;
    *(_QWORD *)(v30 + 16) = v29;
    *(_QWORD *)(v30 + 24) = &protocol witness table for MainActor;
    *(_QWORD *)(v30 + 32) = v2;
    v34 = v48;
    *(_OWORD *)(v30 + 88) = v33;
    *(_QWORD *)(v30 + 152) = v34;
    *(_QWORD *)(v30 + 160) = v27;
    v35 = sub_1000E6084((uint64_t)v6, (uint64_t)&unk_1004BCFE0, v30);
    swift_release(v35);
  }
  return sub_1000DBAB8(&v41);
}

uint64_t *ApplicationCapabilities.NotificationNames.activeAccountDidChange.unsafeMutableAddressor()
{
  if (qword_1004B8B60 != -1)
    swift_once(&qword_1004B8B60, sub_1000D878C);
  return &static ApplicationCapabilities.NotificationNames.activeAccountDidChange;
}

uint64_t *ApplicationCapabilities.NotificationNames.allowsiTunesContentDidChange.unsafeMutableAddressor()
{
  if (qword_1004B8B18 != -1)
    swift_once(&qword_1004B8B18, sub_1000D84BC);
  return &static ApplicationCapabilities.NotificationNames.allowsiTunesContentDidChange;
}

uint64_t *ApplicationCapabilities.NotificationNames.allowsMusicServiceDidChange.unsafeMutableAddressor()
{
  if (qword_1004B8B20 != -1)
    swift_once(&qword_1004B8B20, sub_1000D850C);
  return &static ApplicationCapabilities.NotificationNames.allowsMusicServiceDidChange;
}

uint64_t *ApplicationCapabilities.NotificationNames.allowsSocialContentDidChange.unsafeMutableAddressor()
{
  if (qword_1004B8B28 != -1)
    swift_once(&qword_1004B8B28, sub_1000D855C);
  return &static ApplicationCapabilities.NotificationNames.allowsSocialContentDidChange;
}

uint64_t *ApplicationCapabilities.NotificationNames.allowsSharePlayTogetherDidChange.unsafeMutableAddressor()
{
  if (qword_1004B8B48 != -1)
    swift_once(&qword_1004B8B48, sub_1000D869C);
  return &static ApplicationCapabilities.NotificationNames.allowsSharePlayTogetherDidChange;
}

uint64_t *ApplicationCapabilities.NotificationNames.allowsRadioContentDidChange.unsafeMutableAddressor()
{
  if (qword_1004B8B30 != -1)
    swift_once(&qword_1004B8B30, sub_1000D85AC);
  return &static ApplicationCapabilities.NotificationNames.allowsRadioContentDidChange;
}

uint64_t *ApplicationCapabilities.NotificationNames.allowsSubscriptionContentDidChange.unsafeMutableAddressor()
{
  if (qword_1004B8B38 != -1)
    swift_once(&qword_1004B8B38, sub_1000D85FC);
  return &static ApplicationCapabilities.NotificationNames.allowsSubscriptionContentDidChange;
}

uint64_t *ApplicationCapabilities.NotificationNames.mliEnabledDidChange.unsafeMutableAddressor()
{
  if (qword_1004B8B40 != -1)
    swift_once(&qword_1004B8B40, sub_1000D864C);
  return &static ApplicationCapabilities.NotificationNames.mliEnabledDidChange;
}

uint64_t *ApplicationCapabilities.NotificationNames.isCloudLibraryEnabledDidChange.unsafeMutableAddressor()
{
  if (qword_1004B8B78 != -1)
    swift_once(&qword_1004B8B78, sub_1000D887C);
  return &static ApplicationCapabilities.NotificationNames.isCloudLibraryEnabledDidChange;
}

uint64_t *ApplicationCapabilities.NotificationNames.ratingWarningThresholdDidChange.unsafeMutableAddressor()
{
  if (qword_1004B8B70 != -1)
    swift_once(&qword_1004B8B70, sub_1000D882C);
  return &static ApplicationCapabilities.NotificationNames.ratingWarningThresholdDidChange;
}

uint64_t *ApplicationCapabilities.NotificationNames.userSubscriptionStateDidChange.unsafeMutableAddressor()
{
  if (qword_1004B8B58 != -1)
    swift_once(&qword_1004B8B58, sub_1000D873C);
  return &static ApplicationCapabilities.NotificationNames.userSubscriptionStateDidChange;
}

uint64_t *ApplicationCapabilities.NotificationNames.supportedTabsDidChange.unsafeMutableAddressor()
{
  if (qword_1004B8B50 != -1)
    swift_once(&qword_1004B8B50, sub_1000D86EC);
  return &static ApplicationCapabilities.NotificationNames.supportedTabsDidChange;
}

uint64_t *ApplicationCapabilities.NotificationNames.subscriptionCapabilitiesDidChange.unsafeMutableAddressor()
{
  if (qword_1004B8B80 != -1)
    swift_once(&qword_1004B8B80, sub_1000D88CC);
  return &static ApplicationCapabilities.NotificationNames.subscriptionCapabilitiesDidChange;
}

uint64_t sub_1000D6034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;

  v6[18] = a5;
  v6[19] = a6;
  v6[17] = a4;
  v7 = type metadata accessor for MainActor(0);
  v6[20] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000D60A4, v9, v10);
}

uint64_t sub_1000D60A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 144);
  swift_release(*(_QWORD *)(v0 + 160));
  KeyPath = swift_getKeyPath(&unk_1003CCA98);
  v5 = swift_getKeyPath(&unk_1003CCAC0);
  v6 = *(_OWORD *)(v3 + 48);
  v8 = *(_OWORD *)v3;
  v7 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v0 + 64) = v6;
  *(_OWORD *)(v0 + 16) = v8;
  *(_OWORD *)(v0 + 32) = v7;
  v10 = *(_OWORD *)(v3 + 80);
  v9 = *(_OWORD *)(v3 + 96);
  v11 = *(_OWORD *)(v3 + 64);
  *(_QWORD *)(v0 + 128) = *(_QWORD *)(v3 + 112);
  *(_OWORD *)(v0 + 96) = v10;
  *(_OWORD *)(v0 + 112) = v9;
  *(_OWORD *)(v0 + 80) = v11;
  sub_1000DBA38(v3);
  swift_retain(v2);
  static Published.subscript.setter(v0 + 16, v2, KeyPath, v5);
  swift_retain(v2);
  sub_1000DAAA8(v1, v2);
  v12 = swift_release(v2);
  return (*(uint64_t (**)(__n128))(v0 + 8))(v12);
}

_QWORD *sub_1000D6180(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v4;
  id v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v23[7];
  uint64_t v24;
  _OWORD v25[7];
  uint64_t v26;

  v2 = *(void **)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_storeBag);
  v3 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_musicTabsDictionaryProvider);
  v4 = *(_BYTE *)(a1 + 16);
  v5 = v2;
  swift_retain(v3);
  sub_1000DA254(v2, v3, v4, (uint64_t)v23);
  v6 = a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities;
  v7 = *(_OWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 64);
  v8 = *(_OWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 96);
  v25[5] = *(_OWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 80);
  v25[6] = v8;
  v26 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 112);
  v9 = v26;
  v10 = *(_OWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 16);
  v25[0] = *(_OWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities);
  v11 = *(_OWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 32);
  v25[1] = v10;
  v25[2] = v11;
  v25[3] = *(_OWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 48);
  v25[4] = v7;
  v12 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 24);
  v13 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 32);
  v14 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 56);
  v15 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 72);
  v16 = *(void **)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 80);
  v17 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 96);
  v18 = v23[3];
  *(_OWORD *)(v6 + 32) = v23[2];
  *(_OWORD *)(v6 + 48) = v18;
  v19 = v23[1];
  *(_OWORD *)v6 = v23[0];
  *(_OWORD *)(v6 + 16) = v19;
  *(_QWORD *)(v6 + 112) = v24;
  v20 = v23[6];
  v21 = v23[4];
  *(_OWORD *)(v6 + 80) = v23[5];
  *(_OWORD *)(v6 + 96) = v20;
  *(_OWORD *)(v6 + 64) = v21;
  sub_1000DBA38((uint64_t)v25);
  sub_1000DBA38((uint64_t)v23);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v15);

  sub_1000D5354((uint64_t)v25);
  sub_1000DBAB8(v23);
  return sub_1000DBAB8(v25);
}

double sub_1000D62E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  double result;
  uint64_t v4;
  id v5;
  id v6;
  char v7;
  char v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  _QWORD v13[3];
  void *v14;
  _BYTE v15[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v15, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v4 = Strong;
    v5 = objc_msgSend((id)objc_opt_self(ICUserIdentityStore), "defaultIdentityStore");
    v6 = sub_1000D6420();
    v8 = v7;

    v9 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    if ((v8 & 1) != 0)
    {
      v6 = 0;
      v13[1] = 0;
      v13[2] = 0;
      v14 = 0;
    }
    else
    {
      v14 = &type metadata for UInt64;
    }
    v13[0] = v6;
    v12 = 2;
    v10 = sub_1000DBC68();
    v11 = sub_10002D3FC();
    NSUserDefaults.subscript.setter((uint64_t)v13, (uint64_t)&v12, (uint64_t)&_s3KeyON, v10, v11);

    UnfairLock.locked<A>(_:)((void (*)(void))sub_1000DBA20);
    *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  }
  return result;
}

id sub_1000D6420()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v6;
  uint64_t v7;
  id v8;
  char v9;

  v1 = objc_msgSend((id)objc_opt_self(ICUserIdentity), "activeAccount");
  v8 = 0;
  v2 = objc_msgSend(v0, "DSIDForUserIdentity:outError:", v1, &v8);

  v3 = v8;
  if (v2)
  {
    v8 = 0;
    v9 = 1;
    v4 = v3;
    static UInt64._conditionallyBridgeFromObjectiveC(_:result:)(v2, &v8);

    return v8;
  }
  else
  {
    v6 = v8;
    v7 = _convertNSErrorToError(_:)(v3);

    swift_willThrow();
    swift_errorRelease(v7);
    return 0;
  }
}

double sub_1000D6528(uint64_t a1, void (*a2)(void))
{
  uint64_t v3;
  uint64_t Strong;
  double result;
  uint64_t v6;
  _BYTE v7[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v6 = Strong;
    UnfairLock.locked<A>(_:)(a2);
    *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  }
  return result;
}

void sub_1000D65AC(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSString v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v17, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    v6 = *(_QWORD *)(Strong + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_lock);
    __chkstk_darwin(Strong);
    swift_retain(v6);
    UnfairLock.locked<A>(_:)((void (*)(void))sub_1000DBFA8);
    swift_release(v6);
    UnfairLock.locked<A>(_:)((void (*)(void))sub_1000DBA20);
    v7 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v8 = String._bridgeToObjectiveC()();
    v9 = objc_msgSend(a1, "dictionaryForBagKey:", v8);

    if (v9
      && (v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v9, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable), v9, v11 = sub_100213278(v10), swift_bridgeObjectRelease(v10), v11))
    {
      *((_QWORD *)&v16 + 1) = sub_1000057B4(&qword_1004BD098);
      *(_QWORD *)&v15 = v11;
    }
    else
    {
      v15 = 0u;
      v16 = 0u;
    }
    v14 = 1;
    v12 = sub_1000DBC68();
    v13 = sub_10002D3FC();
    NSUserDefaults.subscript.setter((uint64_t)&v15, (uint64_t)&v14, (uint64_t)&_s3KeyON, v12, v13);
    swift_release(v5);

  }
}

uint64_t ApplicationCapabilities.Controller.updated()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 136) = a1;
  *(_QWORD *)(v2 + 144) = v1;
  return swift_task_switch(sub_1000D67B4, 0, 0);
}

uint64_t sub_1000D67B4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 152) = v1;
  *v1 = v0;
  v1[1] = sub_1000D683C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x2864657461647075, 0xE900000000000029, sub_1000DAEF4, *(_QWORD *)(v0 + 144), &type metadata for ApplicationCapabilities);
}

uint64_t sub_1000D683C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 152));
  return swift_task_switch(sub_1000D6890, 0, 0);
}

uint64_t sub_1000D6890()
{
  uint64_t v0;
  char v1;
  char v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v1 = *(_BYTE *)(v0 + 17);
  v2 = *(_BYTE *)(v0 + 18);
  v3 = *(_BYTE *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 112);
  v5 = *(_BYTE *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 136);
  v8 = *(_OWORD *)(v0 + 40);
  v9 = *(_OWORD *)(v0 + 24);
  v10 = *(_OWORD *)(v0 + 56);
  v11 = *(_OWORD *)(v0 + 72);
  v12 = *(_OWORD *)(v0 + 88);
  *(_BYTE *)v6 = *(_BYTE *)(v0 + 16);
  *(_BYTE *)(v6 + 1) = v1;
  *(_BYTE *)(v6 + 2) = v2;
  *(_OWORD *)(v6 + 8) = v9;
  *(_OWORD *)(v6 + 24) = v8;
  *(_OWORD *)(v6 + 40) = v10;
  *(_OWORD *)(v6 + 56) = v11;
  *(_OWORD *)(v6 + 72) = v12;
  *(_BYTE *)(v6 + 88) = v3;
  *(_QWORD *)(v6 + 96) = v4;
  *(_BYTE *)(v6 + 104) = v5;
  *(_QWORD *)(v6 + 112) = v7;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_1000D68F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double result;
  uint64_t v29;
  char *v30;
  void *v31;

  v4 = sub_1000057B4(&qword_1004BD038);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = __chkstk_darwin(v4);
  v8 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v29 - v9;
  if (qword_1004B8BC0 != -1)
    swift_once(&qword_1004B8BC0, sub_1000E30D8);
  v11 = static BagProvider.shared;
  v12 = swift_allocObject(&unk_100472158, 24, 7);
  swift_weakInit(v12 + 16, a2);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v13(v10, a1, v4);
  v13(v8, (uint64_t)v10, v4);
  v14 = *(unsigned __int8 *)(v5 + 80);
  v15 = (v14 + 24) & ~v14;
  v16 = swift_allocObject(&unk_100472180, v15 + v6, v14 | 7);
  *(_QWORD *)(v16 + 16) = v12;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v16 + v15, v10, v4);
  swift_retain_n(v12, 2);
  sub_1000057B4(&qword_1004BD040);
  UnfairLock.locked<A>(_:)((void (*)(void))sub_10002D3E4);
  v17 = v31;
  if (v31)
  {
    sub_1000D6BE8(v31, v12);
    swift_release(v12);
    swift_release(v16);

  }
  else
  {
    v19 = type metadata accessor for BagProvider.Observer();
    v20 = swift_allocObject(v19, 40, 7);
    v21 = swift_weakInit(v20 + 16, 0);
    *(_QWORD *)(v20 + 24) = 0;
    *(_QWORD *)(v20 + 32) = 0;
    swift_weakAssign(v21, v11);
    v22 = swift_allocObject(&unk_1004721A8, 24, 7);
    v30 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    v23 = v22;
    swift_weakInit(v22 + 16, v11);
    v24 = (_QWORD *)swift_allocObject(&unk_1004721D0, 48, 7);
    v24[2] = sub_1000DBD48;
    v24[3] = v16;
    v24[4] = v23;
    v24[5] = v20;
    v25 = *(_QWORD *)(v20 + 24);
    v26 = *(_QWORD *)(v20 + 32);
    *(_QWORD *)(v20 + 24) = sub_1000DBDC0;
    *(_QWORD *)(v20 + 32) = v24;
    swift_retain(v16);
    swift_retain(v20);
    v27 = sub_10000DCF8(v25, v26);
    __chkstk_darwin(v27);
    *(&v29 - 2) = v11;
    *(&v29 - 1) = v20;
    UnfairLock.locked<A>(_:)((void (*)(void))sub_1000DBDCC);
    v8 = v30;
    sub_1000E34B8(0);
    swift_release(v12);
    swift_release(v16);
    v18 = swift_release(v20);
  }
  (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v8, v4, v18);
  *(_QWORD *)&result = swift_release(v12).n128_u64[0];
  return result;
}

double sub_1000D6BE8(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  double result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[7];
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[7];
  uint64_t v16;

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, &v14, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v6 = Strong;
    v7 = *(_QWORD *)(Strong
                   + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_musicTabsDictionaryProvider);
    v8 = *(_BYTE *)(Strong + 16);
    a1;
    swift_retain(v7);
    v9 = sub_1000DA254(a1, v7, v8, (uint64_t)v15);
    v10 = *(_QWORD *)(v6 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_lock);
    __chkstk_darwin(v9);
    swift_retain(v10);
    UnfairLock.locked<A>(_:)((void (*)(void))sub_1000DBDE4);
    swift_release(v10);
    v12[4] = v15[4];
    v12[5] = v15[5];
    v12[6] = v15[6];
    v13 = v16;
    v12[0] = v15[0];
    v12[1] = v15[1];
    v12[2] = v15[2];
    v12[3] = v15[3];
    v11 = sub_1000057B4(&qword_1004BD038);
    CheckedContinuation.resume(returning:)(v12, v11);
    *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  }
  return result;
}

_QWORD *sub_1000D6D48(uint64_t a1, void *a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  id v21;
  void *v23;
  _OWORD v24[7];
  uint64_t v25;

  v6 = *(void **)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_storeBag);
  *(_QWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_storeBag) = a2;

  v7 = a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities;
  v8 = *(_OWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 80);
  v24[4] = *(_OWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 64);
  v24[5] = v8;
  v24[6] = *(_OWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 96);
  v25 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 112);
  v9 = v25;
  v10 = *(_OWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 16);
  v24[0] = *(_OWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities);
  v24[1] = v10;
  v11 = *(_OWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 48);
  v24[2] = *(_OWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 32);
  v24[3] = v11;
  v12 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 24);
  v13 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 32);
  v14 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 56);
  v15 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 72);
  v23 = *(void **)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 80);
  v16 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 96);
  v17 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v7 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v7 + 48) = v17;
  v18 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v7 = *(_OWORD *)a3;
  *(_OWORD *)(v7 + 16) = v18;
  *(_QWORD *)(v7 + 112) = *(_QWORD *)(a3 + 112);
  v19 = *(_OWORD *)(a3 + 96);
  v20 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v7 + 96) = v19;
  *(_OWORD *)(v7 + 64) = v20;
  sub_1000DBA38(a3);
  sub_1000DBA38(a3);
  v21 = a2;
  sub_1000DBA38((uint64_t)v24);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v15);

  sub_1000D5354((uint64_t)v24);
  sub_1000DBAB8((_QWORD *)a3);
  return sub_1000DBAB8(v24);
}

uint64_t ApplicationCapabilities.Controller.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v1 = v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller__capabilities;
  v2 = sub_1000057B4((uint64_t *)&unk_1004BCDC0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_lock));

  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 24);
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 32);
  v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 56);
  v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 72);
  v7 = *(void **)(v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 80);
  v8 = *(_QWORD *)(v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities + 96);
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_safeCapabilities
                                      + 112));
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_bagObserver));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_bindings));
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_musicTabsDictionaryProvider));
  return v0;
}

uint64_t ApplicationCapabilities.Controller.__deallocating_deinit()
{
  uint64_t v0;

  ApplicationCapabilities.Controller.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000D6FC0@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;

  result = ObservableObject<>.objectWillChange.getter(*v1);
  *a1 = result;
  return result;
}

Swift::Bool __swiftcall ApplicationCapabilities.Tabs.shouldShowLoadingUpsellBanner(for:)(MusicCore::TabIdentifier a1)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_QWORD *)(v1 + 16))
  {
    v2 = v1;
    swift_bridgeObjectRetain();
    __asm { BR              X9 }
  }
  return 0;
}

BOOL sub_1000D720C(_BOOL8 a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  __int128 v14;
  uint64_t v15;

  v4 = sub_1000057B4(&qword_1004B99B0);
  __chkstk_darwin(v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1004B8C50 != -1)
    swift_once(&qword_1004B8C50, sub_1001132F0);
  if (!static NSUserDefaults.mobileiPod)
    goto LABEL_10;
  v7 = sub_1000DBC24();
  v8 = sub_10002D3FC();
  NSUserDefaults.subscript.getter((uint64_t)&type metadata for NSUserDefaults.MobileiPod, v7, v8, &v14);
  if (!v15)
  {
    sub_10000FE2C((uint64_t)&v14, &qword_1004BE030);
LABEL_10:
    a1 = 1;
    goto LABEL_11;
  }
  if ((swift_dynamicCast(&v13, &v14, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) == 0
    || v13 != 1)
  {
    goto LABEL_10;
  }
  if (a1)
    a1 = objc_msgSend((id)a1, "statusType") == (id)1;
LABEL_11:
  v9 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  NSUserDefaults.applicationScriptURL.getter((uint64_t)v6);

  v10 = type metadata accessor for URL(0);
  LODWORD(v9) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v6, 1, v10);
  sub_10000FE2C((uint64_t)v6, &qword_1004B99B0);
  if ((_DWORD)v9 == 1 && objc_msgSend(a2, "hasLoadedSubscriptionAvailability"))
    return objc_msgSend(a2, "isSubscriptionAvailable") & a1;
  return a1;
}

uint64_t sub_1000D73E0(void *a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSString v6;
  _BOOL4 v7;
  NSString v8;
  id v9;
  id v10;
  id v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  unsigned __int8 v16;
  __int128 v17;
  uint64_t v18;

  if (a1)
  {
    v3 = a1;
    static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureMusicArtistActivityAllowed);
    v5 = v4;
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
    LODWORD(v3) = objc_msgSend(v3, "effectiveBoolValueForSetting:", v6);

    v7 = (_DWORD)v3 == 2;
    if (!a2)
      goto LABEL_12;
  }
  else
  {
    v7 = 1;
    if (!a2)
      goto LABEL_12;
  }
  if (qword_1004B8B00 != -1)
    swift_once(&qword_1004B8B00, sub_1000D7BD8);
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(a2, "dictionaryForBagKey:", v8);

  if (v9)
  {

    sub_10000598C(0, &qword_1004BD008, ICUserIdentityStore_ptr);
    v10 = static ICUserIdentityStore.activeAccountDSID.getter();

    if (v10 && !v7)
      return 1;
  }
LABEL_12:
  if (qword_1004B93A8 != -1)
    swift_once(&qword_1004B93A8, sub_10020D77C);
  if (static DeviceCapabilities.isInternalInstall != 1)
    return 0;
  v12 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v16 = 3;
  v13 = sub_1000DBC68();
  v14 = sub_10002D3FC();
  NSUserDefaults.subscript.getter((uint64_t)&_s3KeyON, v13, v14, &v17);

  if (!v18)
  {
    sub_10000FE2C((uint64_t)&v17, &qword_1004BE030);
    return 0;
  }
  result = swift_dynamicCast(&v16, &v17, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
  if ((_DWORD)result)
    return v16;
  return result;
}

uint64_t sub_1000D75F4()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  _QWORD v11[2];
  unsigned __int8 v12[40];
  __int128 v13;
  __int128 v14;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "dictionaryForBagKey:", v1);

  if (!v2
    || (v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable), v2, !v3))
  {
    v13 = 0u;
    v14 = 0u;
LABEL_7:
    sub_10000FE2C((uint64_t)&v13, &qword_1004BE030);
LABEL_8:
    v13 = 0u;
    v14 = 0u;
LABEL_9:
    sub_10000FE2C((uint64_t)&v13, &qword_1004BE030);
    return 2;
  }
  v11[0] = 6909037;
  v11[1] = 0xE300000000000000;
  AnyHashable.init<A>(_:)(v12, v11, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v3 + 16) && (v4 = sub_100027770((uint64_t)v12), (v5 & 1) != 0))
  {
    sub_10000990C(*(_QWORD *)(v3 + 56) + 32 * v4, (uint64_t)&v13);
  }
  else
  {
    v13 = 0u;
    v14 = 0u;
  }
  swift_bridgeObjectRelease(v3);
  sub_10000FC6C((uint64_t)v12);
  if (!*((_QWORD *)&v14 + 1))
    goto LABEL_7;
  v7 = sub_1000057B4((uint64_t *)&unk_1004BCFF0);
  if ((swift_dynamicCast(v12, &v13, (char *)&type metadata for Any + 8, v7, 6) & 1) == 0)
    goto LABEL_8;
  v8 = *(_QWORD *)v12;
  if (!*(_QWORD *)v12)
    goto LABEL_8;
  strcpy((char *)v11, "ismliEnabled");
  BYTE5(v11[1]) = 0;
  HIWORD(v11[1]) = -5120;
  AnyHashable.init<A>(_:)(v12, v11, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v8 + 16) && (v9 = sub_100027770((uint64_t)v12), (v10 & 1) != 0))
  {
    sub_10000990C(*(_QWORD *)(v8 + 56) + 32 * v9, (uint64_t)&v13);
  }
  else
  {
    v13 = 0u;
    v14 = 0u;
  }
  swift_bridgeObjectRelease(v8);
  sub_10000FC6C((uint64_t)v12);
  if (!*((_QWORD *)&v14 + 1))
    goto LABEL_9;
  if (swift_dynamicCast(v12, &v13, (char *)&type metadata for Any + 8, &type metadata for Bool, 6))
    return v12[0];
  else
    return 2;
}

uint64_t sub_1000D7820()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD v13[5];
  __int128 v14;
  __int128 v15;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "dictionaryForBagKey:", v1);

  if (!v2
    || (v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable), v2, !v3))
  {
    v14 = 0u;
    v15 = 0u;
LABEL_7:
    sub_10000FE2C((uint64_t)&v14, &qword_1004BE030);
LABEL_8:
    v14 = 0u;
    v15 = 0u;
LABEL_9:
    sub_10000FE2C((uint64_t)&v14, &qword_1004BE030);
    return 0;
  }
  v11 = 6909037;
  v12 = 0xE300000000000000;
  AnyHashable.init<A>(_:)(v13, &v11, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v3 + 16) && (v4 = sub_100027770((uint64_t)v13), (v5 & 1) != 0))
  {
    sub_10000990C(*(_QWORD *)(v3 + 56) + 32 * v4, (uint64_t)&v14);
  }
  else
  {
    v14 = 0u;
    v15 = 0u;
  }
  swift_bridgeObjectRelease(v3);
  sub_10000FC6C((uint64_t)v13);
  if (!*((_QWORD *)&v15 + 1))
    goto LABEL_7;
  v7 = sub_1000057B4((uint64_t *)&unk_1004BCFF0);
  if ((swift_dynamicCast(v13, &v14, (char *)&type metadata for Any + 8, v7, 6) & 1) == 0)
    goto LABEL_8;
  v8 = v13[0];
  if (!v13[0])
    goto LABEL_8;
  v11 = 0xD000000000000011;
  v12 = 0x80000001003A96B0;
  AnyHashable.init<A>(_:)(v13, &v11, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v8 + 16) && (v9 = sub_100027770((uint64_t)v13), (v10 & 1) != 0))
  {
    sub_10000990C(*(_QWORD *)(v8 + 56) + 32 * v9, (uint64_t)&v14);
  }
  else
  {
    v14 = 0u;
    v15 = 0u;
  }
  swift_bridgeObjectRelease(v8);
  sub_10000FC6C((uint64_t)v13);
  if (!*((_QWORD *)&v15 + 1))
    goto LABEL_9;
  result = swift_dynamicCast(v13, &v14, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  if ((_DWORD)result)
  {
    swift_bridgeObjectRelease(v13[1]);
    return 1;
  }
  return result;
}

void sub_1000D7A48(char a1)
{
  __asm { BR              X10 }
}

_UNKNOWN **sub_1000D7A90()
{
  return &off_100465EB0;
}

uint64_t sub_1000D7BD8()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(MPStoreSocialBagKey);
  qword_1004BCD80 = result;
  *(_QWORD *)algn_1004BCD88 = v1;
  return result;
}

uint64_t sub_1000D7C04@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, __int16 *a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t result;
  unsigned __int8 v9;
  unint64_t v10;
  char v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  Swift::String v15;
  _QWORD v16[5];
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v5 = *a1;
  v15._countAndFlagsBits = 25705;
  v15._object = (void *)0xE200000000000000;
  AnyHashable.init<A>(_:)(v16, &v15, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v5 + 16) && (v6 = sub_100027770((uint64_t)v16), (v7 & 1) != 0))
  {
    sub_10000990C(*(_QWORD *)(v5 + 56) + 32 * v6, (uint64_t)&v17);
  }
  else
  {
    v17 = 0u;
    v18 = 0u;
  }
  sub_10000FC6C((uint64_t)v16);
  if (*((_QWORD *)&v18 + 1))
  {
    result = swift_dynamicCast(&v15, &v17, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    if ((result & 1) != 0)
    {
      result = sub_1000E59E0(v15);
      if (result != 7)
      {
        v9 = result;
        v15._countAndFlagsBits = 0xD000000000000012;
        v15._object = (void *)0x80000001003A96D0;
        AnyHashable.init<A>(_:)(v16, &v15, &type metadata for String, &protocol witness table for String);
        if (*(_QWORD *)(v5 + 16) && (v10 = sub_100027770((uint64_t)v16), (v11 & 1) != 0))
        {
          sub_10000990C(*(_QWORD *)(v5 + 56) + 32 * v10, (uint64_t)&v17);
        }
        else
        {
          v17 = 0u;
          v18 = 0u;
        }
        sub_10000FC6C((uint64_t)v16);
        if (*((_QWORD *)&v18 + 1))
        {
          result = swift_dynamicCast(&v15, &v17, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
          if ((result & 1) != 0)
          {
            if (LOBYTE(v15._countAndFlagsBits) != 2)
            {
              v13 = v9;
              if ((v15._countAndFlagsBits & 1) != 0)
                v14 = 256;
              else
                v14 = 0;
LABEL_26:
              v12 = v14 | v13;
              goto LABEL_13;
            }
LABEL_22:
            if (*(_QWORD *)(a2 + 16))
            {
              swift_bridgeObjectRetain();
              v19 = a2;
              __asm { BR              X9 }
            }
            v14 = 0;
            v13 = v9;
            goto LABEL_26;
          }
        }
        else
        {
          result = sub_10000FE2C((uint64_t)&v17, &qword_1004BE030);
        }
        LOBYTE(v15._countAndFlagsBits) = 2;
        goto LABEL_22;
      }
    }
  }
  else
  {
    result = sub_10000FE2C((uint64_t)&v17, &qword_1004BE030);
  }
  v12 = 512;
LABEL_13:
  *a3 = v12;
  return result;
}

id sub_1000D80D0()
{
  void *v0;
  id result;
  void *v2;
  objc_super v3;

  result = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
  if (result)
  {
    v2 = result;
    objc_msgSend(result, "unregisterObserver:", v0);

    v3.receiver = v0;
    v3.super_class = (Class)type metadata accessor for ApplicationCapabilities.Controller.ProfileObserver();
    return objc_msgSendSuper2(&v3, "dealloc");
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000D8210(char *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v8;
  uint64_t Strong;
  uint64_t v10;
  char *v11;
  id v12;

  if (a4)
    v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a4, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  else
    v8 = 0;
  Strong = swift_weakLoadStrong(&a1[OBJC_IVAR____TtCCV9MusicCore23ApplicationCapabilities10ControllerP33_3C92A9FA31E0FE3D8D536795352BB0D115ProfileObserver_controller]);
  if (Strong)
  {
    v10 = Strong;
    v12 = a3;
    v11 = a1;
    UnfairLock.locked<A>(_:)(a5);
    swift_release(v10);
    swift_bridgeObjectRelease(v8);

  }
  else
  {
    swift_bridgeObjectRelease(v8);
  }
}

id sub_1000D8308()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)RadioAvailabilityController), "init");
  qword_1004BCD90 = (uint64_t)result;
  return result;
}

uint64_t sub_1000D8338(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000D8378 + 4 * byte_1003CCA53[a1]))(0xD00000000000001FLL, 0x80000001003A6C10);
}

uint64_t sub_1000D8378()
{
  uint64_t v0;

  return v0 + 16;
}

unint64_t sub_1000D83A0()
{
  return 0xD000000000000014;
}

void sub_1000D83BC(char *a1)
{
  sub_100047674(*a1);
}

void sub_1000D83C8()
{
  char *v0;

  sub_1000DDB6C(*v0);
}

void sub_1000D83D0(uint64_t a1)
{
  char *v1;

  sub_1000DE044(a1, *v1);
}

void sub_1000D83D8(uint64_t a1)
{
  char *v1;

  sub_1000DE5EC(a1, *v1);
}

unint64_t sub_1000D83E0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_100467980;
  result = sub_1000DC0F8(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_1000D8414@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1000D8338(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000D843C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10004FD4C(v0, qword_1004BCD98);
  sub_100039D34(v0, (uint64_t)qword_1004BCD98);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001003A7200, 0x6261706143707041, 0xEF73656974696C69);
}

NSString sub_1000D84BC()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static ApplicationCapabilities.NotificationNames.allowsiTunesContentDidChange = (uint64_t)result;
  return result;
}

id static ApplicationCapabilities.NotificationNames.allowsiTunesContentDidChange.getter()
{
  return sub_1000D891C(&qword_1004B8B18, (id *)&static ApplicationCapabilities.NotificationNames.allowsiTunesContentDidChange);
}

NSString sub_1000D850C()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static ApplicationCapabilities.NotificationNames.allowsMusicServiceDidChange = (uint64_t)result;
  return result;
}

id static ApplicationCapabilities.NotificationNames.allowsMusicServiceDidChange.getter()
{
  return sub_1000D891C(&qword_1004B8B20, (id *)&static ApplicationCapabilities.NotificationNames.allowsMusicServiceDidChange);
}

NSString sub_1000D855C()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static ApplicationCapabilities.NotificationNames.allowsSocialContentDidChange = (uint64_t)result;
  return result;
}

id static ApplicationCapabilities.NotificationNames.allowsSocialContentDidChange.getter()
{
  return sub_1000D891C(&qword_1004B8B28, (id *)&static ApplicationCapabilities.NotificationNames.allowsSocialContentDidChange);
}

NSString sub_1000D85AC()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static ApplicationCapabilities.NotificationNames.allowsRadioContentDidChange = (uint64_t)result;
  return result;
}

id static ApplicationCapabilities.NotificationNames.allowsRadioContentDidChange.getter()
{
  return sub_1000D891C(&qword_1004B8B30, (id *)&static ApplicationCapabilities.NotificationNames.allowsRadioContentDidChange);
}

NSString sub_1000D85FC()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static ApplicationCapabilities.NotificationNames.allowsSubscriptionContentDidChange = (uint64_t)result;
  return result;
}

id static ApplicationCapabilities.NotificationNames.allowsSubscriptionContentDidChange.getter()
{
  return sub_1000D891C(&qword_1004B8B38, (id *)&static ApplicationCapabilities.NotificationNames.allowsSubscriptionContentDidChange);
}

NSString sub_1000D864C()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static ApplicationCapabilities.NotificationNames.mliEnabledDidChange = (uint64_t)result;
  return result;
}

id static ApplicationCapabilities.NotificationNames.mliEnabledDidChange.getter()
{
  return sub_1000D891C(&qword_1004B8B40, (id *)&static ApplicationCapabilities.NotificationNames.mliEnabledDidChange);
}

NSString sub_1000D869C()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static ApplicationCapabilities.NotificationNames.allowsSharePlayTogetherDidChange = (uint64_t)result;
  return result;
}

id static ApplicationCapabilities.NotificationNames.allowsSharePlayTogetherDidChange.getter()
{
  return sub_1000D891C(&qword_1004B8B48, (id *)&static ApplicationCapabilities.NotificationNames.allowsSharePlayTogetherDidChange);
}

NSString sub_1000D86EC()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static ApplicationCapabilities.NotificationNames.supportedTabsDidChange = (uint64_t)result;
  return result;
}

id static ApplicationCapabilities.NotificationNames.supportedTabsDidChange.getter()
{
  return sub_1000D891C(&qword_1004B8B50, (id *)&static ApplicationCapabilities.NotificationNames.supportedTabsDidChange);
}

NSString sub_1000D873C()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static ApplicationCapabilities.NotificationNames.userSubscriptionStateDidChange = (uint64_t)result;
  return result;
}

id static ApplicationCapabilities.NotificationNames.userSubscriptionStateDidChange.getter()
{
  return sub_1000D891C(&qword_1004B8B58, (id *)&static ApplicationCapabilities.NotificationNames.userSubscriptionStateDidChange);
}

NSString sub_1000D878C()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static ApplicationCapabilities.NotificationNames.activeAccountDidChange = (uint64_t)result;
  return result;
}

id static ApplicationCapabilities.NotificationNames.activeAccountDidChange.getter()
{
  return sub_1000D891C(&qword_1004B8B60, (id *)&static ApplicationCapabilities.NotificationNames.activeAccountDidChange);
}

NSString sub_1000D87DC()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static ApplicationCapabilities.NotificationNames.hasNetworkConnectivityDidChange = (uint64_t)result;
  return result;
}

id static ApplicationCapabilities.NotificationNames.hasNetworkConnectivityDidChange.getter()
{
  return sub_1000D891C(&qword_1004B8B68, (id *)&static ApplicationCapabilities.NotificationNames.hasNetworkConnectivityDidChange);
}

NSString sub_1000D882C()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static ApplicationCapabilities.NotificationNames.ratingWarningThresholdDidChange = (uint64_t)result;
  return result;
}

id static ApplicationCapabilities.NotificationNames.ratingWarningThresholdDidChange.getter()
{
  return sub_1000D891C(&qword_1004B8B70, (id *)&static ApplicationCapabilities.NotificationNames.ratingWarningThresholdDidChange);
}

NSString sub_1000D887C()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static ApplicationCapabilities.NotificationNames.isCloudLibraryEnabledDidChange = (uint64_t)result;
  return result;
}

id static ApplicationCapabilities.NotificationNames.isCloudLibraryEnabledDidChange.getter()
{
  return sub_1000D891C(&qword_1004B8B78, (id *)&static ApplicationCapabilities.NotificationNames.isCloudLibraryEnabledDidChange);
}

NSString sub_1000D88CC()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static ApplicationCapabilities.NotificationNames.subscriptionCapabilitiesDidChange = (uint64_t)result;
  return result;
}

id static ApplicationCapabilities.NotificationNames.subscriptionCapabilitiesDidChange.getter()
{
  return sub_1000D891C(&qword_1004B8B80, (id *)&static ApplicationCapabilities.NotificationNames.subscriptionCapabilitiesDidChange);
}

id sub_1000D891C(_QWORD *a1, id *a2)
{
  if (*a1 != -1)
    swift_once();
  return *a2;
}

uint64_t sub_1000D8954(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *v2 = v5;
  v7 = 0;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    if (a1 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1)
      return result;
    v7 = 1;
  }
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v10 = v5;
    else
      v10 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 <= a1)
    v9 = a1;
  else
    v9 = v8;
  result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v9, a2 & 1, v5);
  *v2 = result;
  return result;
}

uint64_t _s9MusicCore23ApplicationCapabilitiesV13RatingWarningV23__derived_struct_equalsySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*a1 != *a2)
    return 0;
  v4 = a1[2];
  v5 = a2[2];
  if (!v4)
  {
    if (v5)
      return 0;
    goto LABEL_11;
  }
  if (!v5)
    return 0;
  v6 = a1[1];
  v7 = a2[1];
  v8 = v6 == v7 && v4 == v5;
  if (v8 || (v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v4, v7, v5, 0), result = 0, (v9 & 1) != 0))
  {
LABEL_11:
    v11 = a1[4];
    v12 = a2[4];
    if (v11)
    {
      if (v12)
      {
        v13 = a1[3];
        v14 = a2[3];
        if (v13 == v14 && v11 == v12)
          return 1;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(v13, v11, v14, v12, 0) & 1) != 0)
          return 1;
      }
    }
    else if (!v12)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

BOOL _s9MusicCore23ApplicationCapabilitiesV23__derived_struct_equalsySbAC_ACtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  __int128 v4;
  __int128 v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  char v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  _OWORD v19[2];
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;

  if (((*a1 ^ *a2) & 1) != 0)
    return 0;
  if (((a1[1] ^ a2[1]) & 1) != 0)
    return 0;
  if (((a1[2] ^ a2[2]) & 1) != 0)
    return 0;
  if (*((_QWORD *)a1 + 1) != *((_QWORD *)a2 + 1))
    return 0;
  if (*((_QWORD *)a1 + 2) != *((_QWORD *)a2 + 2))
    return 0;
  if ((sub_10014C638(*((_QWORD *)a1 + 3), *((_QWORD *)a2 + 3)) & 1) == 0)
    return 0;
  if ((sub_10014C638(*((_QWORD *)a1 + 4), *((_QWORD *)a2 + 4)) & 1) == 0)
    return 0;
  v4 = *(_OWORD *)(a1 + 56);
  v21[0] = *(_OWORD *)(a1 + 40);
  v21[1] = v4;
  v22 = *((_QWORD *)a1 + 9);
  v5 = *(_OWORD *)(a2 + 56);
  v19[0] = *(_OWORD *)(a2 + 40);
  v19[1] = v5;
  v20 = *((_QWORD *)a2 + 9);
  if ((_s9MusicCore23ApplicationCapabilitiesV13RatingWarningV23__derived_struct_equalsySbAE_AEtFZ_0(v21, v19) & 1) == 0)
    return 0;
  v6 = (void *)*((_QWORD *)a1 + 10);
  v7 = (void *)*((_QWORD *)a2 + 10);
  if (v6)
  {
    if (!v7)
      return 0;
    sub_10000598C(0, &qword_1004C2690, ICMusicSubscriptionStatus_ptr);
    v8 = v7;
    v9 = v6;
    v10 = static NSObject.== infix(_:_:)(v9, v8);

    if ((v10 & 1) == 0)
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  if ((sub_100047FF4(a1[88], a2[88]) & 1) == 0)
    return 0;
  v11 = *((_QWORD *)a1 + 12);
  v12 = a1[104];
  v13 = *((_QWORD *)a1 + 14);
  v14 = *((_QWORD *)a2 + 12);
  v15 = a2[104];
  v16 = *((_QWORD *)a2 + 14);
  if ((sub_1000D2630(v11, v14) & 1) == 0)
    return 0;
  if (v12 == 6)
  {
    if (v15 != 6)
      return 0;
  }
  else
  {
    if (v15 == 6)
      return 0;
    sub_100047FF8(v12);
    if ((v17 & 1) == 0)
      return 0;
  }
  return (sub_1000D283C(v13, v16) & 1) != 0;
}

char *sub_1000D8C78(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v11;
  __int128 v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3 = (char *)_swiftEmptyArrayStorage;
    v4 = 32;
    do
    {
      v5 = *(_BYTE *)(a1 + v4);
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
        v3 = sub_10005DC14(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
      v7 = *((_QWORD *)v3 + 2);
      v6 = *((_QWORD *)v3 + 3);
      if (v7 >= v6 >> 1)
        v3 = sub_10005DC14((char *)(v6 > 1), v7 + 1, 1, v3);
      *((_QWORD *)v3 + 2) = v7 + 1;
      v3[v7 + 32] = 0x5040302010100uLL >> (8 * v5);
      v4 += 2;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = (char *)_swiftEmptyArrayStorage;
  }
  if (qword_1004B8C50 != -1)
    swift_once(&qword_1004B8C50, sub_1001132F0);
  if (static NSUserDefaults.mobileiPod)
  {
    v8 = sub_1000DBC24();
    v9 = sub_10002D3FC();
    NSUserDefaults.subscript.getter((uint64_t)&type metadata for NSUserDefaults.MobileiPod, v8, v9, &v12);
    if (v13)
    {
      if ((swift_dynamicCast(&v11, &v12, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
      {
        if (!*((_QWORD *)v3 + 2))
          return v3;
LABEL_19:
        swift_bridgeObjectRetain();
        __asm { BR              X10 }
      }
    }
    else
    {
      sub_10000FE2C((uint64_t)&v12, &qword_1004BE030);
    }
  }
  if (*((_QWORD *)v3 + 2))
    goto LABEL_19;
  return v3;
}

uint64_t sub_1000D8FA8(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[9];

  if (!*(_QWORD *)(a1 + 16))
    return 1;
  if (*(_QWORD *)(a2 + 16))
  {
    v3 = *(_BYTE *)(a1 + 32);
    Hasher.init(_seed:)(v9);
    v4 = ApplicationCapabilities.Service.rawValue.getter(v3);
    v6 = v5;
    String.hash(into:)(v9, v4, v5);
    swift_bridgeObjectRelease(v6);
    v7 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(a2 + 32));
    if (((*(_QWORD *)(a2 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
      __asm { BR              X9 }
  }
  return 0;
}

void sub_1000D93AC(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSString v12;
  id v13;
  uint64_t v14;
  id v15;
  NSString v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  if (a1)
  {
    v3 = a1;
    v4 = String._bridgeToObjectiveC()();
    v5 = objc_msgSend(v3, "numberForBagKey:", v4);

    if (v5)
    {
      v19 = 0;
      v20 = 1;
      static Int._conditionallyBridgeFromObjectiveC(_:result:)(v5, &v19);

      if (v20)
        v6 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v6 = v19;
    }
    else
    {

      v6 = 0x7FFFFFFFFFFFFFFFLL;
    }
    v11 = v3;
    v12 = String._bridgeToObjectiveC()();
    v13 = objc_msgSend(v11, "stringForBagKey:", v12);

    if (v13)
    {
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v10 = v14;

    }
    else
    {

      v9 = 0;
      v10 = 0;
    }
    v15 = v11;
    v16 = String._bridgeToObjectiveC()();
    v17 = objc_msgSend(v15, "stringForBagKey:", v16);

    if (v17)
    {
      v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v8 = v18;

    }
    else
    {

      v7 = 0;
      v8 = 0;
    }
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v6 = 0x7FFFFFFFFFFFFFFFLL;
  }
  *a2 = v6;
  a2[1] = v9;
  a2[2] = v10;
  a2[3] = v7;
  a2[4] = v8;
}

void sub_1000D9594(char a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  int64_t v19;

  if (!a2)
  {
LABEL_25:
    sub_1000D7A48(a1);
    return;
  }
  v18 = a2 + 64;
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 64);
  v19 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v7 << 6);
      goto LABEL_18;
    }
    if (__OFADD__(v7++, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v7 >= v19)
      goto LABEL_23;
    v11 = *(_QWORD *)(v18 + 8 * v7);
    if (!v11)
      break;
LABEL_17:
    v6 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_18:
    v13 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v9);
    v14 = *v13;
    v15 = (void *)v13[1];
    v16 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17._countAndFlagsBits = v14;
    v17._object = v15;
    _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100465FC8, v17);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v16);
  }
  v12 = v7 + 1;
  if (v7 + 1 >= v19)
    goto LABEL_23;
  v11 = *(_QWORD *)(v18 + 8 * v12);
  if (v11)
    goto LABEL_16;
  v12 = v7 + 2;
  if (v7 + 2 >= v19)
    goto LABEL_23;
  v11 = *(_QWORD *)(v18 + 8 * v12);
  if (v11)
  {
LABEL_16:
    v7 = v12;
    goto LABEL_17;
  }
  v12 = v7 + 3;
  if (v7 + 3 < v19)
  {
    v11 = *(_QWORD *)(v18 + 8 * v12);
    if (!v11)
    {
      while (1)
      {
        v7 = v12 + 1;
        if (__OFADD__(v12, 1))
          break;
        if (v7 >= v19)
          goto LABEL_23;
        v11 = *(_QWORD *)(v18 + 8 * v7);
        ++v12;
        if (v11)
          goto LABEL_17;
      }
LABEL_27:
      __break(1u);
      JUMPOUT(0x1000D9A4CLL);
    }
    goto LABEL_16;
  }
LABEL_23:
  swift_release(a2);
  if (!_swiftEmptyArrayStorage[2])
  {
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    goto LABEL_25;
  }
}

_QWORD *sub_1000D9A6C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  unsigned __int8 v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unsigned __int8 v23;
  uint64_t v24;
  _QWORD v25[9];
  _QWORD *v26;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return _swiftEmptyArrayStorage;
  v3 = a2;
  v4 = 0;
  v5 = _swiftEmptyArrayStorage;
  v24 = a1 + 32;
  v20 = *(_QWORD *)(a1 + 16);
  do
  {
    if (v4 <= v2)
      v6 = v2;
    else
      v6 = v4;
    v21 = v6;
    v22 = v5;
    while (1)
    {
      if (v4 == v6)
      {
        __break(1u);
        JUMPOUT(0x1000DA1D0);
      }
      v7 = (unsigned __int8 *)(v24 + 2 * v4);
      v8 = *v7;
      ++v4;
      if (v8 == 2)
      {
        v9 = *(_QWORD *)(v3 + 24);
        if (!*(_QWORD *)(v9 + 16))
          goto LABEL_9;
        Hasher.init(_seed:)(v25);
        swift_bridgeObjectRetain();
        String.hash(into:)(v25, 0xD000000000000013, 0x80000001003A6B90);
        v11 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v9 + 32));
        if (((*(_QWORD *)(v9 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
          __asm { BR              X9 }
        goto LABEL_7;
      }
      if (v8 == 6)
      {
        v9 = *(_QWORD *)(v3 + 24);
        if (!*(_QWORD *)(v9 + 16))
          goto LABEL_9;
        Hasher.init(_seed:)(v25);
        swift_bridgeObjectRetain();
        String.hash(into:)(v25, 0x646956636973756DLL, 0xEB00000000736F65);
        v12 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v9 + 32));
        if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
          __asm { BR              X9 }
LABEL_7:
        v2 = v20;
        v5 = v22;
        goto LABEL_8;
      }
      if (v8 != 4)
        break;
      v9 = *(_QWORD *)(v3 + 24);
      if (!*(_QWORD *)(v9 + 16))
        goto LABEL_9;
      Hasher.init(_seed:)(v25);
      swift_bridgeObjectRetain();
      String.hash(into:)(v25, 0x6F69646172, 0xE500000000000000);
      v10 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v9 + 32));
      if (((*(_QWORD *)(v9 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
        __asm { BR              X9 }
      v3 = a2;
LABEL_8:
      v6 = v21;
      swift_bridgeObjectRelease(v9);
LABEL_9:
      if (v4 == v2)
        return v5;
    }
    v23 = v7[1];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
    v26 = v5;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1000972F4(0, v5[2] + 1, 1);
      v5 = v26;
    }
    v14 = v23;
    v16 = v5[2];
    v15 = v5[3];
    if (v16 >= v15 >> 1)
    {
      sub_1000972F4((char *)(v15 > 1), v16 + 1, 1);
      v14 = v23;
      v5 = v26;
    }
    v5[2] = v16 + 1;
    v17 = (char *)v5 + 2 * v16;
    v17[32] = v8;
    v17[33] = v14;
  }
  while (v4 != v2);
  return v5;
}

id sub_1000DA254@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  void *v7;
  id result;
  void *v9;
  unsigned __int8 v10;
  void *v11;
  id v12;
  char v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  char v20;
  char v21;
  id v22;
  id v23;
  NSString v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  NSString v28;
  uint64_t v29;
  uint64_t v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  NSString v34;
  uint64_t v35;
  uint64_t v36;
  NSString v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  NSString v41;
  uint64_t v42;
  uint64_t v43;
  NSString v44;
  id v45;
  char v46;
  char v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  id v54;
  unsigned __int8 v55;
  unsigned __int8 v56;
  id v57;
  _QWORD *v58;
  _QWORD *v59;
  os_unfair_lock_s *v60;
  os_unfair_lock_s *v61;
  os_unfair_lock_s *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  char v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  unsigned int v79;
  id v80;
  char v81;
  id v83;
  uint64_t v84;
  BOOL v85;
  unsigned __int8 v86;
  unsigned __int8 v87;
  __int128 v88;
  __int128 v89;
  _BYTE v90[40];
  void *v91;
  char v92;
  char *v93;
  char v94;
  uint64_t v95;
  _OWORD v96[2];
  uint64_t v97;

  v7 = (void *)objc_opt_self(MPCloudController);
  result = objc_msgSend(v7, "sharedCloudController");
  if (result)
  {
    v9 = result;
    v10 = objc_msgSend(result, "hasProperNetworkConditionsToShowCloudMedia");

    v86 = v10;
    v87 = 0;
    v88 = 0uLL;
    *(_QWORD *)&v89 = &_swiftEmptySetSingleton;
    *((_QWORD *)&v89 + 1) = &_swiftEmptySetSingleton;
    *(_QWORD *)v90 = 0x7FFFFFFFFFFFFFFFLL;
    memset(&v90[8], 0, 32);
    v11 = (void *)objc_opt_self(MPCloudServiceStatusController);
    v12 = objc_msgSend(v11, "sharedController");
    v80 = objc_msgSend(v12, "musicSubscriptionStatus");

    v92 = 1;
    v93 = sub_1000D8C78((uint64_t)_swiftEmptyArrayStorage);
    v94 = v13;
    v95 = v14;
    v15 = objc_msgSend(v11, "sharedController");
    v16 = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
    v83 = objc_msgSend(v7, "sharedCloudController");
    v17 = objc_msgSend(v15, "musicSubscriptionStatus");
    v18 = v17;
    v81 = a3;
    if (v17)
      v79 = objc_msgSend(v17, "capabilities") & 1;
    else
      v79 = 0;
    v19 = objc_msgSend((id)objc_opt_self(ICUserIdentityStore), "defaultIdentityStore");
    sub_1000D6420();
    v21 = v20;

    v85 = (v21 & 1) == 0;
    if (v18)
    {
      v22 = v18;
      *((_QWORD *)&v88 + 1) = objc_msgSend(v22, "statusType");
      v23 = objc_msgSend(v22, "capabilities");

      *(_QWORD *)&v88 = v23;
    }
    if (sub_1000D720C((_BOOL8)v18, v15))
      sub_100151D0C((unsigned __int8 *)v96, 2u);
    if (qword_1004B8B08 != -1)
      swift_once(&qword_1004B8B08, sub_1000D8308);
    if (objc_msgSend((id)qword_1004BCD90, "isRadioAvailable"))
      sub_100151D0C((unsigned __int8 *)v96, 4u);
    if ((sub_1000D73E0(v16, a1) & 1) != 0)
      sub_100151D0C((unsigned __int8 *)v96, 3u);
    if (a1)
    {
      v24 = String._bridgeToObjectiveC()();
      v25 = objc_msgSend(a1, "BOOLValueForBagKey:", v24);

      if (v25)
        sub_100151D0C((unsigned __int8 *)v96, 9u);
    }
    if (v16)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureGroupActivityAllowed);
      v27 = v26;
      v28 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v27);
      LODWORD(v27) = objc_msgSend(v16, "effectiveBoolValueForSetting:", v28);

      if ((_DWORD)v27 != 2)
        sub_100151D0C((unsigned __int8 *)v96, 6u);
      static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureMusicServiceAllowed);
      v30 = v29;
      v31 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v30);
      LODWORD(v30) = objc_msgSend(v16, "effectiveBoolValueForSetting:", v31);

      if ((_DWORD)v30 != 2)
        sub_100151D0C((unsigned __int8 *)v96, 0);
      static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureMusicVideosAllowed);
      v33 = v32;
      v34 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v33);
      LODWORD(v33) = objc_msgSend(v16, "effectiveBoolValueForSetting:", v34);

      if ((_DWORD)v33 != 2)
        sub_100151D0C((unsigned __int8 *)v96, 1u);
      static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureITunesAllowed);
      v36 = v35;
      v37 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v36);
      LODWORD(v36) = objc_msgSend(v16, "effectiveBoolValueForSetting:", v37);

      if ((_DWORD)v36 != 2)
        sub_100151D0C((unsigned __int8 *)v96, 5u);
      v91 = v18;
      v38 = v18;

      static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureAccountModificationAllowed);
      v40 = v39;
      v41 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v40);
      LODWORD(v40) = objc_msgSend(v16, "effectiveBoolValueForSetting:", v41);

      if ((_DWORD)v40 != 2)
        sub_100151D0C((unsigned __int8 *)v96, 8u);
      static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureExplicitContentAllowed);
      v43 = v42;
      v44 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v43);
      LODWORD(v43) = objc_msgSend(v16, "isBoolSettingLockedDownByRestrictions:", v44);

      if ((_DWORD)v43)
        sub_100151D0C((unsigned __int8 *)v96, 7u);
    }
    else
    {
      v91 = v18;
      v45 = v18;

    }
    swift_bridgeObjectRetain();
    v46 = sub_1000D8FA8((uint64_t)&off_100466048, v89);
    swift_bridgeObjectRelease(v89);
    if ((v46 & 1) != 0)
    {
      v47 = v79 ? 2 : 0;
      v92 = v47;
      if (v18)
      {
        v48 = v18;
        if (objc_msgSend(v48, "statusType") == (id)3)
        {
          if (qword_1004B8B10 != -1)
            swift_once(&qword_1004B8B10, sub_1000D843C);
          v49 = type metadata accessor for Logger(0);
          v50 = sub_100039D34(v49, (uint64_t)qword_1004BCD98);
          v51 = Logger.logObject.getter(v50);
          v52 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v51, v52))
          {
            v53 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v53 = 0;
            _os_log_impl((void *)&_mh_execute_header, v51, v52, "Unexpectedly found a Voice subscriber! 😡", v53, 2u);
            swift_slowDealloc(v53, -1, -1);
          }

        }
      }
    }
    if (a1 && (v88 & 1) != 0 && (sub_1000D75F4() & 1) != 0 && (sub_1000D7820() & 1) != 0)
      sub_100151D0C((unsigned __int8 *)v96, 0xAu);
    if (v83)
    {
      v54 = v83;
      if ((objc_msgSend(v54, "shouldProhibitMusicActionForCurrentNetworkConditions") & 1) != 0)
        v55 = 0;
      else
        v55 = objc_msgSend(v54, "hasProperNetworkConditionsToShowCloudMedia");

    }
    else
    {
      v55 = 0;
    }
    v86 = v55;
    v56 = objc_msgSend(v15, "isCloudLibraryEnabled");
    v87 = v56;
    v57 = a1;
    sub_1000D93AC(a1, (uint64_t *)v96);
    swift_bridgeObjectRelease(*(_QWORD *)&v90[16]);
    swift_bridgeObjectRelease(*(_QWORD *)&v90[32]);
    *(_OWORD *)v90 = v96[0];
    *(_OWORD *)&v90[16] = v96[1];
    *(_QWORD *)&v90[32] = v97;
    if ((v81 & 1) != 0)
    {
      sub_1000D7A48(2);
      v59 = v58;
    }
    else
    {
      v60 = *(os_unfair_lock_s **)(a2 + 16);
      v61 = v60 + 4;
      v62 = v60 + 11;
      os_unfair_lock_lock(v60 + 11);
      sub_10021485C(v61, a1, a2, &v84);
      os_unfair_lock_unlock(v62);
      v63 = v84;
      if (v84)
      {
        sub_1000D9594(v92, v84);
        v65 = v64;
        swift_bridgeObjectRelease(v63);
      }
      else
      {
        sub_1000D7A48(v92);
        v65 = v66;
      }
      v59 = sub_1000D9A6C(v65, (uint64_t)&v85);
      swift_bridgeObjectRelease(v65);
      v55 = v86;
      v56 = v87;
    }
    v67 = sub_1000D8C78((uint64_t)v59);
    v69 = v68;
    v71 = v70;

    swift_release(a2);
    swift_bridgeObjectRelease(v93);
    result = (id)swift_bridgeObjectRelease(v95);
    v72 = *(_QWORD *)&v90[32];
    v73 = v91;
    v74 = v92;
    v76 = v88;
    v75 = v89;
    v77 = *(_OWORD *)v90;
    v78 = *(_OWORD *)&v90[16];
    *(_BYTE *)a4 = v85;
    *(_BYTE *)(a4 + 1) = v55;
    *(_BYTE *)(a4 + 2) = v56;
    *(_OWORD *)(a4 + 8) = v76;
    *(_OWORD *)(a4 + 24) = v75;
    *(_OWORD *)(a4 + 40) = v77;
    *(_OWORD *)(a4 + 56) = v78;
    *(_QWORD *)(a4 + 72) = v72;
    *(_QWORD *)(a4 + 80) = v73;
    *(_BYTE *)(a4 + 88) = v74;
    *(_QWORD *)(a4 + 96) = v67;
    *(_BYTE *)(a4 + 104) = v69;
    *(_QWORD *)(a4 + 112) = v71;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000DAAA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  void **p_cache;
  _UNKNOWN **v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _UNKNOWN **v29;
  id v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  int64_t v39;
  id v40;
  uint64_t v41;

  v3 = a1;
  v36 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v37 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  p_cache = &OBJC_METACLASS____TtC16MusicMessagesApp25ArtworkComponentVideoView.cache;
  v35 = a2;
  v9 = CAStateController_ptr;
  while (1)
  {
    if (v6)
    {
      v11 = __clz(__rbit64(v6));
      v12 = (v6 - 1) & v6;
      v39 = v7;
      v13 = v11 | (v7 << 6);
      goto LABEL_24;
    }
    v14 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v14 >= v37)
      goto LABEL_28;
    v15 = *(_QWORD *)(v36 + 8 * v14);
    v16 = v7 + 1;
    if (!v15)
    {
      v16 = v7 + 2;
      if (v7 + 2 >= v37)
        goto LABEL_28;
      v15 = *(_QWORD *)(v36 + 8 * v16);
      if (!v15)
      {
        v16 = v7 + 3;
        if (v7 + 3 >= v37)
          goto LABEL_28;
        v15 = *(_QWORD *)(v36 + 8 * v16);
        if (!v15)
        {
          v16 = v7 + 4;
          if (v7 + 4 >= v37)
            goto LABEL_28;
          v15 = *(_QWORD *)(v36 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_23:
    v12 = (v15 - 1) & v15;
    v39 = v16;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
LABEL_24:
    v38 = v12;
    v18 = p_cache[354];
    v19 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v13);
    if (v18 != (void *)-1)
      swift_once(&qword_1004B8B10, sub_1000D843C);
    v20 = type metadata accessor for Logger(0);
    sub_100039D34(v20, (uint64_t)qword_1004BCD98);
    v21 = v19;
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      v41 = v25;
      *(_DWORD *)v24 = 136446210;
      v40 = v21;
      _s3__C4NameVMa_0(0);
      v26 = v3;
      v28 = v27;
      v29 = v9;
      v30 = v21;
      v31 = (char *)String.init<A>(describing:)(&v40, v28);
      v33 = v32;
      *(_QWORD *)(v24 + 4) = sub_1000393D0(v31, v32, &v41);

      v9 = v29;
      v34 = v33;
      v3 = v26;
      a2 = v35;
      p_cache = (void **)(&OBJC_METACLASS____TtC16MusicMessagesApp25ArtworkComponentVideoView + 16);
      swift_bridgeObjectRelease(v34);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Notifying changes for '%{public}s'", (uint8_t *)v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);

    }
    else
    {

    }
    v6 = v38;
    v7 = v39;
    v10 = objc_msgSend((id)objc_opt_self(v9[159]), "defaultCenter");
    objc_msgSend(v10, "postNotificationName:object:", v21, a2);

  }
  v17 = v7 + 5;
  if (v7 + 5 >= v37)
  {
LABEL_28:
    swift_release(v3);
    return;
  }
  v15 = *(_QWORD *)(v36 + 8 * v17);
  if (v15)
  {
    v16 = v7 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v37)
      goto LABEL_28;
    v15 = *(_QWORD *)(v36 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_23;
  }
LABEL_30:
  __break(1u);
}

unint64_t _s9MusicCore23ApplicationCapabilitiesV7ServiceO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004677D8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xB)
    return 11;
  else
    return v3;
}

void sub_1000DAE68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_needsNetworkReachabilityUpdate;
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_needsNetworkReachabilityUpdate) & 1) == 0)
  {
    **(_BYTE **)(v0 + 24) = 1;
    *(_BYTE *)(v1 + v2) = 1;
  }
}

uint64_t sub_1000DAE94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_1004BCDDC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10002F6EC;
  v3[2] = v2;
  return swift_task_switch(sub_1000D4BDC, 0, 0);
}

double sub_1000DAEF4(uint64_t a1)
{
  uint64_t v1;

  return sub_1000D68F8(a1, v1);
}

unint64_t sub_1000DAF00()
{
  unint64_t result;

  result = qword_1004BCE20;
  if (!qword_1004BCE20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApplicationCapabilities.Service, &type metadata for ApplicationCapabilities.Service);
    atomic_store(result, (unint64_t *)&qword_1004BCE20);
  }
  return result;
}

unint64_t sub_1000DAF48()
{
  unint64_t result;

  result = qword_1004BCE28;
  if (!qword_1004BCE28)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApplicationCapabilities.SubscriptionState, &type metadata for ApplicationCapabilities.SubscriptionState);
    atomic_store(result, (unint64_t *)&qword_1004BCE28);
  }
  return result;
}

uint64_t destroy for ApplicationCapabilities(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 96));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 112));
}

uint64_t initializeWithCopy for ApplicationCapabilities(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v4;
  v5 = *(void **)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v5;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ApplicationCapabilities(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v7);
  v8 = *(void **)(a1 + 80);
  v9 = *(void **)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v9;
  v10 = v9;

  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v11 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v12 = *(_QWORD *)(a2 + 112);
  v13 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t assignWithTake for ApplicationCapabilities(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v4);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
  v6 = *(void **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);

  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v7 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v8 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ApplicationCapabilities(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ApplicationCapabilities(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ApplicationCapabilities()
{
  return &type metadata for ApplicationCapabilities;
}

uint64_t getEnumTagSinglePayload for ApplicationCapabilities.Service(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ApplicationCapabilities.Service(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_1000DB418 + 4 * byte_1003CCA78[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1000DB44C + 4 * byte_1003CCA73[v4]))();
}

uint64_t sub_1000DB44C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DB454(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000DB45CLL);
  return result;
}

uint64_t sub_1000DB468(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000DB470);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1000DB474(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DB47C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ApplicationCapabilities.Service()
{
  return &type metadata for ApplicationCapabilities.Service;
}

uint64_t destroy for ApplicationCapabilities.RatingWarning(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for ApplicationCapabilities.RatingWarning(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ApplicationCapabilities.RatingWarning(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  a1[3] = a2[3];
  v5 = a2[4];
  v6 = a1[4];
  a1[4] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t assignWithTake for ApplicationCapabilities.RatingWarning(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ApplicationCapabilities.RatingWarning(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ApplicationCapabilities.RatingWarning(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ApplicationCapabilities.RatingWarning()
{
  return &type metadata for ApplicationCapabilities.RatingWarning;
}

ValueMetadata *type metadata accessor for ApplicationCapabilities.SubscriptionState()
{
  return &type metadata for ApplicationCapabilities.SubscriptionState;
}

uint64_t destroy for ApplicationCapabilities.Tabs(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return swift_bridgeObjectRelease(a1[2]);
}

uint64_t _s9MusicCore23ApplicationCapabilitiesV4TabsVwCP_0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for ApplicationCapabilities.Tabs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  v5 = a2[2];
  v6 = a1[2];
  a1[2] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t *assignWithTake for ApplicationCapabilities.Tabs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  v5 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v5);
  return a1;
}

ValueMetadata *type metadata accessor for ApplicationCapabilities.Tabs()
{
  return &type metadata for ApplicationCapabilities.Tabs;
}

uint64_t sub_1000DB7D4()
{
  return type metadata accessor for ApplicationCapabilities.Controller(0);
}

uint64_t type metadata accessor for ApplicationCapabilities.Controller(uint64_t a1)
{
  uint64_t result;

  result = qword_1004BCE68;
  if (!qword_1004BCE68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ApplicationCapabilities.Controller);
  return result;
}

void sub_1000DB818(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[11];

  v4[0] = &unk_1003CCDC0;
  sub_1000DB8D0();
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_1003CCDC0;
    v4[3] = &unk_1003CCDD8;
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[5] = &unk_1003CCDF0;
    v4[6] = &unk_1003CCE08;
    v4[7] = &unk_1003CCDF0;
    v4[8] = &unk_1003CCDF0;
    v4[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[10] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_updateClassMetadata2(a1, 256, 11, v4, a1 + 80);
  }
}

void sub_1000DB8D0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1004BCE78)
  {
    v0 = type metadata accessor for Published(0, &type metadata for ApplicationCapabilities);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1004BCE78);
  }
}

uint64_t type metadata accessor for ApplicationCapabilities.Controller.ProfileObserver()
{
  return objc_opt_self(_TtCCV9MusicCore23ApplicationCapabilities10ControllerP33_3C92A9FA31E0FE3D8D536795352BB0D115ProfileObserver);
}

ValueMetadata *type metadata accessor for ApplicationCapabilities.NotificationNames()
{
  return &type metadata for ApplicationCapabilities.NotificationNames;
}

uint64_t storeEnumTagSinglePayload for ApplicationCapabilities.Tabs.Configuration(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000DB9A0 + 4 * byte_1003CCA82[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_1000DB9D4 + 4 * byte_1003CCA7D[v4]))();
}

uint64_t sub_1000DB9D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1000DB9DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1000DB9E4);
  return result;
}

uint64_t sub_1000DB9F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x1000DB9F8);
  *(_BYTE *)(result + 1) = a2 + 1;
  return result;
}

uint64_t sub_1000DB9FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1000DBA04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ApplicationCapabilities.Tabs.Configuration()
{
  return &type metadata for ApplicationCapabilities.Tabs.Configuration;
}

_QWORD *sub_1000DBA20()
{
  uint64_t v0;

  return sub_1000D6180(v0);
}

uint64_t sub_1000DBA38(uint64_t a1)
{
  id v2;

  v2 = *(id *)(a1 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_1000DBAB8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[7];
  v5 = a1[9];
  v6 = (void *)a1[10];
  v7 = a1[12];
  swift_bridgeObjectRelease(a1[14]);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);

  return a1;
}

uint64_t sub_1000DBB34()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 136));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 152));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 160));
  return swift_deallocObject(v0, 168, 7);
}

uint64_t sub_1000DBBA0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (uint64_t)(v1 + 5);
  v8 = v1[20];
  v9 = (_QWORD *)swift_task_alloc(dword_1004BCFDC);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10002E8E0;
  return sub_1000D6034(a1, v4, v5, v6, v7, v8);
}

unint64_t sub_1000DBC24()
{
  unint64_t result;

  result = qword_1004BCFE8;
  if (!qword_1004BCFE8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NSUserDefaults.MobileiPod, &type metadata for NSUserDefaults.MobileiPod);
    atomic_store(result, (unint64_t *)&qword_1004BCFE8);
  }
  return result;
}

unint64_t sub_1000DBC68()
{
  unint64_t result;

  result = qword_1004BD000;
  if (!qword_1004BD000)
  {
    result = swift_getWitnessTable(&unk_1003CCEE4, &_s3KeyON);
    atomic_store(result, (unint64_t *)&qword_1004BD000);
  }
  return result;
}

uint64_t sub_1000DBCAC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000DBCD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  v1 = sub_1000057B4(&qword_1004BD038);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v0 + v4, v1, v7);
  return swift_deallocObject(v0, v5, v6);
}

double sub_1000DBD48(void *a1)
{
  uint64_t v1;

  sub_1000057B4(&qword_1004BD038);
  return sub_1000D6BE8(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1000DBD8C()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

double sub_1000DBDC0(uint64_t a1)
{
  uint64_t v1;

  return sub_1000E3204(a1, *(void (**)(void))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1000DBDCC()
{
  uint64_t v0;

  return sub_1000E3414(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

_QWORD *sub_1000DBDE4()
{
  uint64_t v0;

  return sub_1000D6D48(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

void sub_1000DBE00()
{
  char *v0;

  sub_1000D4C38(v0);
}

uint64_t sub_1000DBE1C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000DBE48(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1004BD04C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10002F6EC;
  return sub_1000D520C(a1, v4, v5, v6);
}

double sub_1000DBEB4(uint64_t a1)
{
  uint64_t v1;

  return sub_1000D3C24(a1, v1);
}

uint64_t sub_1000DBEBC(char a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v3;

  return sub_1000D4498(a1, a2, a3, v3);
}

uint64_t sub_1000DBEC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000DBED4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000DBEDC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000DBF00(uint64_t a1)
{
  uint64_t v1;

  return sub_1000D4648(a1, *(_QWORD *)(v1 + 16));
}

unint64_t sub_1000DBF08()
{
  unint64_t result;

  result = qword_1004BD070;
  if (!qword_1004BD070)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApplicationCapabilities.Service, &type metadata for ApplicationCapabilities.Service);
    atomic_store(result, (unint64_t *)&qword_1004BD070);
  }
  return result;
}

double sub_1000DBF4C()
{
  uint64_t v0;

  return sub_1000D62E4(v0);
}

double sub_1000DBF54()
{
  uint64_t v0;

  return sub_1000D6528(v0, (void (*)(void))sub_1000DBA20);
}

uint64_t sub_1000DBF74()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1000DBFA0(void *a1)
{
  uint64_t v1;

  sub_1000D65AC(a1, v1);
}

id sub_1000DBFA8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(void **)(v1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_storeBag);
  *(_QWORD *)(v1 + OBJC_IVAR____TtCV9MusicCore23ApplicationCapabilities10Controller_storeBag) = v2;

  return v2;
}

uint64_t _s9MusicCore23ApplicationCapabilitiesV17SubscriptionStateOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000DC030 + 4 * byte_1003CCA8C[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000DC064 + 4 * byte_1003CCA87[v4]))();
}

uint64_t sub_1000DC064(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DC06C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000DC074);
  return result;
}

uint64_t sub_1000DC080(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000DC088);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000DC08C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DC094(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s3KeyOMa()
{
  return &_s3KeyON;
}

unint64_t sub_1000DC0B4()
{
  unint64_t result;

  result = qword_1004BD0A0;
  if (!qword_1004BD0A0)
  {
    result = swift_getWitnessTable(&unk_1003CCEBC, &_s3KeyON);
    atomic_store(result, (unint64_t *)&qword_1004BD0A0);
  }
  return result;
}

unint64_t sub_1000DC0F8(Swift::String string, Swift::OpaquePointer cases)
{
  void *object;
  Swift::String v3;
  unint64_t v5;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease(object);
  if (v5 >= 4)
    return 4;
  else
    return v5;
}

void *BackgroundFetchManager.httpHeader.unsafeMutableAddressor()
{
  return &static BackgroundFetchManager.httpHeader;
}

unint64_t static BackgroundFetchManager.httpHeader.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_1000DC168()
{
  uint64_t Manager;
  uint64_t result;

  Manager = type metadata accessor for BackgroundFetchManager();
  result = swift_initStaticObject(Manager, &unk_1004B9468);
  static BackgroundFetchManager.shared = result;
  return result;
}

uint64_t *BackgroundFetchManager.shared.unsafeMutableAddressor()
{
  if (qword_1004B8B88 != -1)
    swift_once(&qword_1004B8B88, sub_1000DC168);
  return &static BackgroundFetchManager.shared;
}

uint64_t static BackgroundFetchManager.shared.getter()
{
  uint64_t v0;

  return swift_initStaticObject(v0, &unk_1004B9468);
}

uint64_t BackgroundFetchManager.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  swift_bridgeObjectRetain();
  v6 = sub_1000DC9E8();
  if (!*(_QWORD *)(v6 + 16) || (v7 = sub_1000277A0(a1, a2), (v8 & 1) == 0))
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v6);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v6);
  if (!*(_QWORD *)(v9 + 16) || (v10 = sub_1000277A0(7107189, 0xE300000000000000), (v11 & 1) == 0))
  {
    v17 = 0u;
    v18 = 0u;
    swift_bridgeObjectRelease(v9);
    goto LABEL_10;
  }
  sub_10000990C(*(_QWORD *)(v9 + 56) + 32 * v10, (uint64_t)&v17);
  swift_bridgeObjectRelease(v9);
  if (!*((_QWORD *)&v18 + 1))
  {
LABEL_10:
    sub_10000FE2C((uint64_t)&v17, &qword_1004BE030);
    goto LABEL_11;
  }
  if ((swift_dynamicCast(&v15, &v17, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
  {
    v12 = v16;
    URL.init(string:)(v15, v16);
    return swift_bridgeObjectRelease(v12);
  }
LABEL_11:
  v14 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a3, 1, 1, v14);
}

void (*BackgroundFetchManager.subscript.modify(uint64_t *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  size_t v6;
  void *v7;

  *a1 = a2;
  a1[1] = a3;
  v6 = *(_QWORD *)(*(_QWORD *)(sub_1000057B4(&qword_1004B99B0) - 8) + 64);
  a1[2] = (uint64_t)malloc(v6);
  v7 = malloc(v6);
  a1[3] = (uint64_t)v7;
  BackgroundFetchManager.subscript.getter(a2, a3, (uint64_t)v7);
  return sub_1000DC3B8;
}

void sub_1000DC3B8(uint64_t *a1, char a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (void *)a1[2];
  v3 = (void *)a1[3];
  v5 = *a1;
  v4 = a1[1];
  if ((a2 & 1) != 0)
  {
    sub_10002DBB0(a1[3], (uint64_t)v2);
    swift_bridgeObjectRetain();
    _s9MusicCore22BackgroundFetchManagerCy10Foundation3URLVSgSScis_0((uint64_t)v2, v5, v4);
    sub_10000FE2C((uint64_t)v3, &qword_1004B99B0);
  }
  else
  {
    swift_bridgeObjectRetain();
    _s9MusicCore22BackgroundFetchManagerCy10Foundation3URLVSgSScis_0((uint64_t)v3, v5, v4);
  }
  free(v3);
  free(v2);
}

Swift::Void __swiftcall BackgroundFetchManager.removeAll()()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "removeObjectForKey:", v1);

}

void sub_1000DC4C4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), int a4, int a5, int a6, dispatch_group_t group)
{
  if (a3)
    a1 = a3(a1, a2);
  if (a2)
  {
    __chkstk_darwin(a1);
    swift_errorRetain(a2);
    UnfairLock.locked<A>(_:)((void (*)(void))sub_1000DDB44);
    swift_errorRelease(a2);
  }
  dispatch_group_leave(group);
}

uint64_t sub_1000DC580(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  _BYTE v8[24];

  swift_beginAccess(a1, v8, 1, 0);
  v4 = (_QWORD *)*a1;
  swift_errorRetain(a2);
  result = swift_isUniquelyReferenced_nonNull_native(v4);
  *a1 = (uint64_t)v4;
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_10005E558(0, v4[2] + 1, 1, v4);
    v4 = (_QWORD *)result;
    *a1 = result;
  }
  v7 = v4[2];
  v6 = v4[3];
  if (v7 >= v6 >> 1)
  {
    result = (uint64_t)sub_10005E558((_QWORD *)(v6 > 1), v7 + 1, 1, v4);
    v4 = (_QWORD *)result;
    *a1 = result;
  }
  v4[2] = v7 + 1;
  v4[v7 + 4] = a2;
  return result;
}

uint64_t sub_1000DC650(uint64_t a1, uint64_t a2, void (*a3)())
{
  sub_1000057B4(&qword_1004BD158);
  UnfairLock.locked<A>(_:)((void (*)(void))sub_1000DDAEC);
  a3();
  return swift_bridgeObjectRelease();
}

void sub_1000DC6CC()
{
  void *v0;
  char v1;
  uint64_t v2;
  void *v3;
  char v4;

  if (qword_1004B8BC0 != -1)
    swift_once(&qword_1004B8BC0, sub_1000E30D8);
  sub_1000057B4(&qword_1004BD040);
  UnfairLock.locked<A>(_:)((void (*)(void))sub_10002D3E4);
  v0 = v3;
  if (v3 && (sub_1000DC7A8(v3, (uint64_t)&v3), v0, (v4 & 1) == 0))
  {
    v1 = 0;
    v2 = (uint64_t)v3;
  }
  else
  {
    v1 = 1;
    v2 = 0x4122750000000000;
  }
  qword_1004BD0B0 = v2;
  byte_1004BD0B8 = v1;
}

uint64_t sub_1000DC7A8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  __int128 *v17;
  char v18;
  _QWORD v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  static String._unconditionallyBridgeFromObjectiveC(_:)(ICURLBagKeyMusicCommon);
  v5 = v4;
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  v7 = objc_msgSend(a1, "valueForBagKey:", v6);

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)(v7);
    swift_unknownObjectRelease(v7);
  }
  else
  {
    v22 = 0u;
    v23 = 0u;
  }
  sub_1000CE5CC((uint64_t)&v22, (uint64_t)&v20);
  if (!*((_QWORD *)&v21 + 1))
    goto LABEL_15;
  v8 = sub_1000057B4((uint64_t *)&unk_1004BF820);
  result = swift_dynamicCast(&v22, &v20, (char *)&type metadata for Any + 8, v8, 6);
  if ((result & 1) == 0)
  {
LABEL_17:
    *(_QWORD *)a2 = 0;
    v18 = 1;
    goto LABEL_18;
  }
  v10 = v22;
  if (*(_QWORD *)(v22 + 16) && (v11 = sub_1000277A0(0xD00000000000001ELL, 0x80000001003A9E10), (v12 & 1) != 0))
  {
    sub_10000990C(*(_QWORD *)(v10 + 56) + 32 * v11, (uint64_t)&v20);
  }
  else
  {
    v20 = 0u;
    v21 = 0u;
  }
  swift_bridgeObjectRelease(v10);
  if (!*((_QWORD *)&v21 + 1))
  {
LABEL_15:
    v17 = &v20;
LABEL_16:
    result = sub_10000FE2C((uint64_t)v17, &qword_1004BE030);
    goto LABEL_17;
  }
  v13 = sub_1000057B4((uint64_t *)&unk_1004BCFF0);
  result = swift_dynamicCast(&v22, &v20, (char *)&type metadata for Any + 8, v13, 6);
  if ((result & 1) == 0)
    goto LABEL_17;
  v14 = v22;
  v19[0] = 0xD000000000000021;
  v19[1] = 0x80000001003A9E30;
  AnyHashable.init<A>(_:)(&v20, v19, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v14 + 16) && (v15 = sub_100027770((uint64_t)&v20), (v16 & 1) != 0))
  {
    sub_10000990C(*(_QWORD *)(v14 + 56) + 32 * v15, (uint64_t)&v22);
  }
  else
  {
    v22 = 0u;
    v23 = 0u;
  }
  swift_bridgeObjectRelease(v14);
  sub_10000FC6C((uint64_t)&v20);
  if (!*((_QWORD *)&v23 + 1))
  {
    v17 = &v22;
    goto LABEL_16;
  }
  result = swift_dynamicCast(a2, &v22, (char *)&type metadata for Any + 8, &type metadata for Double, 6);
  if ((result & 1) == 0)
    *(_QWORD *)a2 = 0;
  v18 = result ^ 1;
LABEL_18:
  *(_BYTE *)(a2 + 8) = v18;
  return result;
}

unint64_t sub_1000DC9E8()
{
  id v0;
  NSString v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "dictionaryForKey:", v1);

  if (v2)
  {
    v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    v4 = sub_100213650(v3);
    swift_bridgeObjectRelease(v3);
    if (v4)
      return v4;
  }
  else
  {

  }
  v6 = sub_1000B91D4((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(0);
  return v6;
}

uint64_t _s9MusicCore22BackgroundFetchManagerCy10Foundation3URLVSgSScis_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  Class isa;
  NSString v17;
  uint64_t v19;
  uint64_t inited;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  id v27;
  Class v28;
  NSString v29;
  _BYTE v31[128];
  unint64_t v32;

  v6 = sub_1000057B4(&qword_1004B99B0);
  __chkstk_darwin(v6);
  v8 = &v31[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v31[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10002DBB0(a1, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_10000FE2C((uint64_t)v8, &qword_1004B99B0);
    v32 = sub_1000DC9E8();
    v13 = sub_1001A051C(a2, a3);
    swift_bridgeObjectRelease(v13);
    v14 = v32;
    v15 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    sub_1000057B4((uint64_t *)&unk_1004BF820);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v14);
    v17 = String._bridgeToObjectiveC()();
    objc_msgSend(v15, "setObject:forKey:", isa, v17);

    sub_10000FE2C(a1, &qword_1004B99B0);
    return swift_bridgeObjectRelease(a3);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    v19 = sub_1000057B4(&qword_1004C2C50);
    inited = swift_initStackObject(v19, v31);
    *(_OWORD *)(inited + 16) = xmmword_1003C6BD0;
    *(_QWORD *)(inited + 32) = 7107189;
    *(_QWORD *)(inited + 40) = 0xE300000000000000;
    *(_QWORD *)(inited + 48) = URL.absoluteString.getter();
    *(_QWORD *)(inited + 56) = v21;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 80) = 1702125924;
    *(_QWORD *)(inited + 88) = 0xE400000000000000;
    *(_QWORD *)(inited + 120) = type metadata accessor for Date(0);
    v22 = sub_1000407CC((_QWORD *)(inited + 96));
    Date.init()(v22);
    v23 = sub_1000B8CE8(inited);
    v24 = sub_1000DC9E8();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v24);
    v32 = v24;
    sub_1000BA06C(v23, a2, a3, isUniquelyReferenced_nonNull_native);
    v26 = v32;
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(0x8000000000000000);
    v27 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    sub_1000057B4((uint64_t *)&unk_1004BF820);
    v28 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v26);
    v29 = String._bridgeToObjectiveC()();
    objc_msgSend(v27, "setObject:forKey:", v28, v29);

    sub_10000FE2C(a1, &qword_1004B99B0);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
}

void _s9MusicCore22BackgroundFetchManagerC14updateURLCache5queue20onDidReceiveResponse10completionySo012OS_dispatch_H0C_ySo13ICURLResponseCSg_s5Error_pSgtcSgySaysAM_pGctF_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  dispatch_group_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int64_t v37;
  unint64_t v38;
  int64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void (**v48)(dispatch_group_t, uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  double v53;
  char *v54;
  Swift::String v55;
  Swift::String v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  id v59;
  void *v60;
  id v61;
  uint64_t v62;
  void *v63;
  __n128 v64;
  id v65;
  Class isa;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  NSObject *v74;
  double v75;
  void *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  dispatch_group_t v89;
  _QWORD *v90;
  _QWORD *v91;
  char *v92;
  void (*v93)(char *, uint64_t);
  id v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  dispatch_group_t v117;
  char *v118;
  dispatch_group_t v119;
  uint64_t v120;
  void (**v121)(dispatch_group_t, uint64_t, uint64_t, uint64_t);
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  int64_t v126;
  __int128 aBlock;
  __int128 v128;
  void *v129;
  _QWORD *v130;
  _QWORD v131[2];

  v102 = a5;
  v101 = a4;
  v98 = a3;
  v97 = a2;
  v105 = a1;
  v109 = type metadata accessor for DispatchWorkItemFlags(0);
  v108 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v107 = (char *)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = type metadata accessor for DispatchQoS(0);
  v104 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106);
  v103 = (char *)&v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = type metadata accessor for URLRequest(0);
  v111 = *(_QWORD *)(v113 - 8);
  v7 = __chkstk_darwin(v113);
  v112 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v91 - v9;
  v11 = sub_1000057B4(&qword_1004BCBD0);
  __chkstk_darwin(v11);
  v13 = (dispatch_group_t)((char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for Date(0);
  v121 = *(void (***)(dispatch_group_t, uint64_t, uint64_t, uint64_t))(v14 - 8);
  v122 = v14;
  v15 = __chkstk_darwin(v14);
  v114 = (char *)&v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v91 - v17;
  v19 = sub_1000057B4(&qword_1004B99B0);
  __chkstk_darwin(v19);
  v21 = (char *)&v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = type metadata accessor for URL(0);
  v22 = *(_QWORD *)(v124 - 8);
  v23 = __chkstk_darwin(v124);
  v100 = (char *)&v91 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v123 = (char *)&v91 - v25;
  v117 = dispatch_group_create();
  v26 = type metadata accessor for UnfairLock();
  swift_allocObject(v26, 24, 7);
  v115 = UnfairLock.init()();
  v116 = swift_allocObject(&unk_1004723C0, 24, 7);
  *(_QWORD *)(v116 + 16) = _swiftEmptyArrayStorage;
  if (qword_1004B8B90 != -1)
LABEL_45:
    swift_once(&qword_1004B8B90, sub_1000DC6CC);
  v27 = *(double *)&qword_1004BD0B0;
  v28 = sub_1000DC9E8();
  v29 = v28;
  v30 = 0;
  v31 = v28 + 64;
  v32 = 1 << *(_BYTE *)(v28 + 32);
  v33 = -1;
  if (v32 < 64)
    v33 = ~(-1 << v32);
  v34 = v33 & *(_QWORD *)(v28 + 64);
  v126 = (unint64_t)(v32 + 63) >> 6;
  v125 = (char *)&type metadata for Any + 8;
  v99 = (void *)0x80000001003A9DA0;
  v119 = v13;
  v118 = v18;
  v110 = v21;
  v120 = v22;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          do
          {
            if (v34)
            {
              v35 = __clz(__rbit64(v34));
              v34 &= v34 - 1;
              v36 = v35 | (v30 << 6);
            }
            else
            {
              v37 = v30 + 1;
              if (__OFADD__(v30, 1))
              {
                __break(1u);
LABEL_44:
                __break(1u);
                goto LABEL_45;
              }
              if (v37 >= v126)
                goto LABEL_42;
              v38 = *(_QWORD *)(v31 + 8 * v37);
              ++v30;
              if (!v38)
              {
                v30 = v37 + 1;
                if (v37 + 1 >= v126)
                  goto LABEL_42;
                v38 = *(_QWORD *)(v31 + 8 * v30);
                if (!v38)
                {
                  v30 = v37 + 2;
                  if (v37 + 2 >= v126)
                    goto LABEL_42;
                  v38 = *(_QWORD *)(v31 + 8 * v30);
                  if (!v38)
                  {
                    v30 = v37 + 3;
                    if (v37 + 3 >= v126)
                      goto LABEL_42;
                    v38 = *(_QWORD *)(v31 + 8 * v30);
                    if (!v38)
                    {
                      v39 = v37 + 4;
                      if (v39 >= v126)
                      {
LABEL_42:
                        swift_release(v29);
                        v77 = (_QWORD *)swift_allocObject(&unk_100472460, 48, 7);
                        v78 = v115;
                        v79 = v116;
                        v77[2] = v115;
                        v77[3] = v79;
                        v80 = v102;
                        v77[4] = v101;
                        v77[5] = v80;
                        v129 = sub_1000DDA98;
                        v130 = v77;
                        *(_QWORD *)&aBlock = _NSConcreteStackBlock;
                        *((_QWORD *)&aBlock + 1) = 1107296256;
                        *(_QWORD *)&v128 = sub_100011FD0;
                        *((_QWORD *)&v128 + 1) = &unk_100472478;
                        v81 = _Block_copy(&aBlock);
                        swift_retain(v78);
                        swift_retain(v79);
                        swift_retain(v80);
                        v82 = v103;
                        static DispatchQoS.unspecified.getter(v83);
                        v131[0] = _swiftEmptyArrayStorage;
                        v84 = sub_1000DDAA4();
                        v85 = sub_1000057B4(&qword_1004BCCD8);
                        v86 = sub_1000CFDB8();
                        v87 = v107;
                        v88 = v109;
                        dispatch thunk of SetAlgebra.init<A>(_:)(v131, v85, v86, v109, v84);
                        v89 = v117;
                        OS_dispatch_group.notify(qos:flags:queue:execute:)(v82, v87, v105, v81);
                        _Block_release(v81);
                        swift_release(v78);

                        (*(void (**)(char *, uint64_t))(v108 + 8))(v87, v88);
                        (*(void (**)(char *, uint64_t))(v104 + 8))(v82, v106);
                        v90 = v130;
                        swift_release(v79);
                        swift_release(v90);
                        return;
                      }
                      v38 = *(_QWORD *)(v31 + 8 * v39);
                      if (!v38)
                      {
                        while (1)
                        {
                          v30 = v39 + 1;
                          if (__OFADD__(v39, 1))
                            goto LABEL_44;
                          if (v30 >= v126)
                            goto LABEL_42;
                          v38 = *(_QWORD *)(v31 + 8 * v30);
                          ++v39;
                          if (v38)
                            goto LABEL_23;
                        }
                      }
                      v30 = v39;
                    }
                  }
                }
              }
LABEL_23:
              v34 = (v38 - 1) & v38;
              v36 = __clz(__rbit64(v38)) + (v30 << 6);
            }
            v40 = *(_QWORD *)(*(_QWORD *)(v29 + 56) + 8 * v36);
          }
          while (!*(_QWORD *)(v40 + 16));
          swift_bridgeObjectRetain();
          v41 = sub_1000277A0(7107189, 0xE300000000000000);
          if ((v42 & 1) != 0)
          {
            sub_10000990C(*(_QWORD *)(v40 + 56) + 32 * v41, (uint64_t)&aBlock);
            if ((swift_dynamicCast(v131, &aBlock, v125, &type metadata for String, 6) & 1) != 0)
              break;
          }
          swift_bridgeObjectRelease();
        }
        URL.init(string:)(v131[0], v131[1]);
        swift_bridgeObjectRelease();
        v18 = (char *)v124;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v21, 1, v124) != 1)
          break;
        swift_bridgeObjectRelease();
        sub_10000FE2C((uint64_t)v21, &qword_1004B99B0);
      }
      (*(void (**)(char *, char *, char *))(v22 + 32))(v123, v21, v18);
      if (*(_QWORD *)(v40 + 16) && (v43 = sub_1000277A0(1702125924, 0xE400000000000000), (v44 & 1) != 0))
      {
        sub_10000990C(*(_QWORD *)(v40 + 56) + 32 * v43, (uint64_t)&aBlock);
      }
      else
      {
        aBlock = 0u;
        v128 = 0u;
      }
      v13 = (dispatch_group_t)v123;
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v128 + 1))
        break;
      sub_10000FE2C((uint64_t)&aBlock, &qword_1004BE030);
      v45 = (uint64_t)v119;
      v121[7](v119, 1, 1, v122);
LABEL_39:
      v22 = v120;
      (*(void (**)(dispatch_group_t, uint64_t))(v120 + 8))(v13, v124);
      sub_10000FE2C(v45, &qword_1004BCBD0);
    }
    v45 = (uint64_t)v119;
    v46 = v122;
    v47 = swift_dynamicCast(v119, &aBlock, (char *)&type metadata for Any + 8, v122, 6);
    v18 = (char *)v121;
    v121[7]((dispatch_group_t)v45, v47 ^ 1u, 1, v46);
    if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v18 + 6))(v45, 1, v46) == 1)
      goto LABEL_39;
    v48 = v121;
    v49 = v122;
    v50 = v118;
    v51 = ((uint64_t (*)(char *, uint64_t, uint64_t))v121[4])(v118, v45, v122);
    v52 = v114;
    Date.init()(v51);
    v53 = Date.timeIntervalSince(_:)(v50);
    v18 = (char *)v48[1];
    ((void (*)(char *, uint64_t))v18)(v52, v49);
    if (v53 < v27)
      break;
    ((void (*)(char *, uint64_t))v18)(v50, v49);
    v22 = v120;
    (*(void (**)(dispatch_group_t, uint64_t))(v120 + 8))(v13, v124);
LABEL_41:
    v21 = v110;
  }
  v96 = v18;
  v54 = v100;
  (*(void (**)(char *, dispatch_group_t, uint64_t))(v120 + 16))(v100, v13, v124);
  URLRequest.init(url:cachePolicy:timeoutInterval:)(v54, 0, 60.0);
  v55._countAndFlagsBits = 1702195828;
  v55._object = (void *)0xE400000000000000;
  v56._countAndFlagsBits = 0xD00000000000001ALL;
  v56._object = v99;
  URLRequest.addValue(_:forHTTPHeaderField:)(v55, v56);
  v57 = *(void (**)(char *, char *, uint64_t))(v111 + 16);
  v95 = v10;
  v58 = v113;
  v57(v112, v10, v113);
  v59 = objc_allocWithZone((Class)ICMusicKitRequestContext);
  v129 = sub_100114A60;
  v130 = 0;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v128 = sub_10001D2BC;
  *((_QWORD *)&v128 + 1) = &unk_1004723D8;
  v60 = _Block_copy(&aBlock);
  v61 = objc_msgSend(v59, "initWithBlock:", v60);
  v62 = v58;
  v63 = v61;
  _Block_release(v60);
  v64 = swift_release(v130);
  if ((swift_isEscapingClosureAtFileLocation(0, "", 0, 0, 0, 1, v64) & 1) == 0)
  {
    v65 = objc_allocWithZone((Class)ICMusicKitURLRequest);
    isa = URLRequest._bridgeToObjectiveC()().super.isa;
    v94 = objc_msgSend(v65, "initWithURLRequest:requestContext:", isa, v63);

    v93 = *(void (**)(char *, uint64_t))(v111 + 8);
    v93(v112, v62);
    v13 = v117;
    dispatch_group_enter(v117);
    v92 = (char *)objc_msgSend((id)objc_opt_self(ICURLSessionManager), "highPrioritySession");
    v67 = (_QWORD *)swift_allocObject(&unk_100472410, 56, 7);
    v68 = v97;
    v69 = v98;
    v67[2] = v97;
    v67[3] = v69;
    v70 = v115;
    v71 = v116;
    v67[4] = v115;
    v67[5] = v71;
    v67[6] = v13;
    v129 = sub_1000DDA54;
    v130 = v67;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v128 = sub_100021234;
    *((_QWORD *)&v128 + 1) = &unk_100472428;
    v72 = _Block_copy(&aBlock);
    v91 = v130;
    sub_10000DCE8(v68, v69);
    v73 = v70;
    v22 = v120;
    swift_retain(v73);
    swift_retain(v71);
    v74 = v13;
    *(_QWORD *)&v75 = swift_release(v91).n128_u64[0];
    v18 = v92;
    v76 = v94;
    objc_msgSend(v92, "enqueueDataRequest:withCompletionHandler:", v94, v72, v75);
    _Block_release(v72);

    v10 = v95;
    v93(v95, v113);
    ((void (*)(char *, uint64_t))v96)(v118, v122);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v123, v124);
    goto LABEL_41;
  }
  __break(1u);
}

uint64_t type metadata accessor for BackgroundFetchManager()
{
  return objc_opt_self(_TtC9MusicCore22BackgroundFetchManager);
}

uint64_t sub_1000DD9D4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000DD9F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000DDA08(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000DDA10()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));

  return swift_deallocObject(v0, 56, 7);
}

void sub_1000DDA54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000DC4C4(a1, a2, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(dispatch_group_t *)(v2 + 48));
}

uint64_t sub_1000DDA64()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000DDA98()
{
  uint64_t v0;

  return sub_1000DC650(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)())(v0 + 32));
}

unint64_t sub_1000DDAA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1004BE650;
  if (!qword_1004BE650)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_1004BE650);
  }
  return result;
}

uint64_t sub_1000DDAEC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  _BYTE v5[24];

  v3 = *(_QWORD **)(v1 + 16);
  swift_beginAccess(v3, v5, 0, 0);
  *a1 = *v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000DDB44()
{
  uint64_t v0;

  return sub_1000DC580(*(uint64_t **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1000DDB6C(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  __asm { BR              X10 }
}

Swift::Int sub_1000DDBCC()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, v0 + 16, 0x80000001003A6C30);
  swift_bridgeObjectRelease(0x80000001003A6C30);
  return Hasher._finalize()();
}

Swift::Int sub_1000DDC3C(char a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  if ((a1 & 1) != 0)
    v2 = 0xD000000000000018;
  else
    v2 = 0xD000000000000019;
  if ((a1 & 1) != 0)
    v3 = 0x80000001003A6CD0;
  else
    v3 = 0x80000001003A6CB0;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_1000DDCC0(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  __asm { BR              X10 }
}

Swift::Int sub_1000DDD1C()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, v0 + 11, 0x80000001003A6D20);
  swift_bridgeObjectRelease(0x80000001003A6D20);
  return Hasher._finalize()();
}

void sub_1000DDD8C(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  __asm { BR              X10 }
}

Swift::Int sub_1000DDDDC()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6F4E6E657473696CLL, 0xE900000000000077);
  swift_bridgeObjectRelease(0xE900000000000077);
  return Hasher._finalize()();
}

Swift::Int sub_1000DDE70(char a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  if ((a1 & 1) != 0)
    v2 = 0xD00000000000001CLL;
  else
    v2 = 0xD00000000000001DLL;
  if ((a1 & 1) != 0)
    v3 = 0x80000001003A6F90;
  else
    v3 = 0x80000001003A6F70;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_1000DDEF4(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  __asm { BR              X10 }
}

Swift::Int sub_1000DDF48()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6E776F6E6B6E75, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

Swift::Int sub_1000DDFC0(char a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  if ((a1 & 1) != 0)
    v2 = 0xD000000000000015;
  else
    v2 = 0xD000000000000019;
  if ((a1 & 1) != 0)
    v3 = 0x80000001003A7150;
  else
    v3 = 0x80000001003A7130;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_1000DE044(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1000DE090(uint64_t a1)
{
  uint64_t v1;

  String.hash(into:)(a1, v1 + 16, 0x80000001003A6C30);
  return swift_bridgeObjectRelease(0x80000001003A6C30);
}

void sub_1000DE0E8(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1000DE130(uint64_t a1)
{
  uint64_t v1;

  String.hash(into:)(a1, v1 + 11, 0x80000001003A6D20);
  return swift_bridgeObjectRelease(0x80000001003A6D20);
}

void sub_1000DE188(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_1000DE1D4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6F4E6E657473696CLL, 0xE900000000000077);
  swift_bridgeObjectRelease(0xE900000000000077);
  return Hasher._finalize()();
}

Swift::Int sub_1000DE268(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  if ((a2 & 1) != 0)
    v3 = 0xD000000000000015;
  else
    v3 = 0xD000000000000019;
  if ((a2 & 1) != 0)
    v4 = 0x80000001003A7150;
  else
    v4 = 0x80000001003A7130;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_1000DE2E8(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_1000DE338()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6E776F6E6B6E75, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

void sub_1000DE3B0(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_1000DE3FC()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x756F795F726F66, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

Swift::Int sub_1000DE4A4(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  if ((a2 & 1) != 0)
    v3 = 0xD000000000000018;
  else
    v3 = 0xD000000000000019;
  if ((a2 & 1) != 0)
    v4 = 0x80000001003A6CD0;
  else
    v4 = 0x80000001003A6CB0;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_1000DE524(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_1000DE57C()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, v0 + 11, 0x80000001003A6D20);
  swift_bridgeObjectRelease(0x80000001003A6D20);
  return Hasher._finalize()();
}

void sub_1000DE5EC(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_1000DE648()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, v0 + 16, 0x80000001003A6C30);
  swift_bridgeObjectRelease(0x80000001003A6C30);
  return Hasher._finalize()();
}

Swift::Int sub_1000DE6B8(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  if ((a2 & 1) != 0)
    v3 = 0xD00000000000001CLL;
  else
    v3 = 0xD00000000000001DLL;
  if ((a2 & 1) != 0)
    v4 = 0x80000001003A6F90;
  else
    v4 = 0x80000001003A6F70;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

id sub_1000DE738()
{
  uint64_t refreshed;
  _QWORD *v1;
  id result;

  refreshed = type metadata accessor for BackgroundRefreshController();
  v1 = (_QWORD *)swift_allocObject(refreshed, 40, 7);
  v1[2] = 0;
  v1[3] = 0;
  result = objc_msgSend(objc_allocWithZone((Class)ICCloudClient), "init");
  v1[4] = result;
  static BackgroundRefreshController.shared = (uint64_t)v1;
  return result;
}

uint64_t *BackgroundRefreshController.shared.unsafeMutableAddressor()
{
  if (qword_1004B8B98 != -1)
    swift_once(&qword_1004B8B98, sub_1000DE738);
  return &static BackgroundRefreshController.shared;
}

double static BackgroundRefreshController.shared.getter()
{
  double result;

  if (qword_1004B8B98 != -1)
    swift_once(&qword_1004B8B98, sub_1000DE738);
  *(_QWORD *)&result = swift_retain(static BackgroundRefreshController.shared).n128_u64[0];
  return result;
}

uint64_t CompoundRequestResponseInvalidation.onInvalidation.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 16, v3, 0, 0);
  v1 = *(_QWORD *)(v0 + 16);
  sub_10000DCE8(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t CompoundRequestResponseInvalidation.onInvalidation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  swift_beginAccess(v2 + 16, v8, 1, 0);
  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return sub_10000DCF8(v5, v6);
}

uint64_t (*BackgroundRefreshController.performanceMetricsRecorder.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 16, a1, 33, 0);
  return j__swift_endAccess;
}

Swift::Void __swiftcall BackgroundRefreshController.registerAllTasks()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  void *v4;
  void *v5;
  id v6;
  NSString v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  NSString v13;
  _QWORD aBlock[6];

  v0 = static os_log_type_t.default.getter();
  v1 = sub_1000057B4(&qword_1004BBCE0);
  v2 = swift_allocObject(v1, 72, 7);
  *(_OWORD *)(v2 + 16) = xmmword_1003C64D0;
  *(_QWORD *)(v2 + 56) = &type metadata for String;
  v3 = sub_1000A1F04();
  *(_QWORD *)(v2 + 64) = v3;
  *(_QWORD *)(v2 + 32) = 0xD00000000000002FLL;
  *(_QWORD *)(v2 + 40) = 0x80000001003A9E90;
  sub_10000598C(0, (unint64_t *)&qword_1004BC960, OS_os_log_ptr);
  v4 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)(v0, &_mh_execute_header, v4, "BackgroundRefreshController: REGISTER TASK: %@", 46, 2, v2);
  swift_bridgeObjectRelease();

  v5 = (void *)objc_opt_self(BGTaskScheduler);
  v6 = objc_msgSend(v5, "sharedScheduler");
  v7 = String._bridgeToObjectiveC()();
  aBlock[4] = sub_1000DEB5C;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000179E8;
  aBlock[3] = &unk_1004724A0;
  v8 = _Block_copy(aBlock);
  objc_msgSend(v6, "registerForTaskWithIdentifier:usingQueue:launchHandler:", v7, 0, v8);
  _Block_release(v8);

  v9 = static os_log_type_t.default.getter();
  v10 = swift_allocObject(v1, 72, 7);
  *(_OWORD *)(v10 + 16) = xmmword_1003C64D0;
  *(_QWORD *)(v10 + 56) = &type metadata for String;
  *(_QWORD *)(v10 + 64) = v3;
  *(_QWORD *)(v10 + 32) = 0xD000000000000041;
  *(_QWORD *)(v10 + 40) = 0x80000001003A9F20;
  v11 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v11, "BackgroundRefreshController: CANCEL DEPRECATED TASK: %@", 55, 2, v10);
  swift_bridgeObjectRelease();

  v12 = objc_msgSend(v5, "sharedScheduler");
  v13 = String._bridgeToObjectiveC()();
  objc_msgSend(v12, "cancelTaskRequestWithIdentifier:", v13);

}

double sub_1000DEB5C(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  if (qword_1004B8B98 != -1)
    swift_once(&qword_1004B8B98, sub_1000DE738);
  v2 = objc_opt_self(BGAppRefreshTask);
  v3 = (void *)swift_dynamicCastObjCClassUnconditional(a1, v2, 0, 0, 0);
  return sub_1000DEBD0(v3);
}

double sub_1000DEBD0(void *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  double result;

  v3 = *v1;
  v4 = static os_log_type_t.default.getter(a1);
  v5 = sub_1000057B4(&qword_1004BBCE0);
  v6 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v6 + 16) = xmmword_1003C64D0;
  *(_QWORD *)(v6 + 56) = &type metadata for String;
  *(_QWORD *)(v6 + 64) = sub_1000A1F04();
  *(_QWORD *)(v6 + 32) = 0xD00000000000002FLL;
  *(_QWORD *)(v6 + 40) = 0x80000001003A9E90;
  sub_10000598C(0, (unint64_t *)&qword_1004BC960, OS_os_log_ptr);
  v7 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v7, "BackgroundRefreshController: EXECUTING REFRESH SUBTASKS: %@", 59, 2, v6);
  swift_bridgeObjectRelease();

  v8 = swift_allocObject(&unk_100472638, 32, 7);
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = v3;
  v9 = a1;
  sub_1000DFEC0((uint64_t)sub_1000E21A8, v8);
  *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  return result;
}

uint64_t sub_1000DECF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000DED04(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

Swift::Void __swiftcall BackgroundRefreshController.scheduleAllTasks()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  char *v38;
  char *v39;
  double v40;
  char v41;
  id v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  char *v58;
  char v60;
  id v61;
  unint64_t v62;
  unint64_t v63;
  char v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  id v72;
  NSString v73;
  id v74;
  id v75;
  Class isa;
  uint64_t v77;
  void *v78;
  id v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t *v103;
  id v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  void (*v110)(char *, uint64_t, uint64_t);
  _QWORD *v111;
  __int128 aBlock;
  uint64_t (*v113)(uint64_t);
  void *v114;
  void (*v115)();
  uint64_t v116;

  v92 = *v0;
  v98 = type metadata accessor for DispatchWorkItemFlags(0);
  v97 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v96 = (char *)&v89 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for DispatchQoS(0);
  v94 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v93 = (char *)&v89 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1000057B4(&qword_1004BCBD0);
  v4 = __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v106 = (char *)&v89 - v7;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v99 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v101 = (char *)&v89 - v13;
  v14 = __chkstk_darwin(v12);
  v108 = (char *)&v89 - v15;
  v16 = __chkstk_darwin(v14);
  v18 = (uint64_t)&v89 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v89 - v20;
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v89 - v23;
  v25 = __chkstk_darwin(v22);
  v107 = (char *)&v89 - v26;
  v27 = __chkstk_darwin(v25);
  v29 = (char *)&v89 - v28;
  __chkstk_darwin(v27);
  v31 = (uint64_t)&v89 - v30;
  if (qword_1004B8BA8 != -1)
LABEL_47:
    swift_once(&qword_1004B8BA8, sub_1000E17A8);
  v32 = (char *)off_1004BD168;
  ((void (*)(void))static Date.distantFuture.getter)();
  v110 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v110(v29, v31, v8);
  v33 = (char *)*((_QWORD *)v32 + 2);
  v109 = v9;
  v100 = v33;
  if (v33)
  {
    v90 = v31;
    v105 = v18;
    v103 = v6;
    v104 = (id)objc_opt_self(NSUserDefaults);
    swift_bridgeObjectRetain();
    v91 = v32;
    v34 = v32 + 49;
    v102 = (char *)&type metadata for Any + 8;
    v35 = v33;
    do
    {
      v40 = *(double *)(v34 - 9);
      v41 = *v34;
      v42 = objc_msgSend(v104, "standardUserDefaults");
      LOBYTE(v111) = v41;
      v43 = sub_1000E18A0();
      v44 = sub_10002D3FC();
      NSUserDefaults.subscript.getter((uint64_t)&type metadata for BackgroundTaskConfiguration.UserDefaultsKey, v43, v44, &aBlock);

      if (v114)
      {
        v45 = (uint64_t)v106;
        v46 = swift_dynamicCast(v106, &aBlock, v102, v8, 6);
        v47 = v109;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v109 + 56))(v45, v46 ^ 1u, 1, v8);
      }
      else
      {
        sub_10000FE2C((uint64_t)&aBlock, &qword_1004BE030);
        v47 = v109;
        v45 = (uint64_t)v106;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v109 + 56))(v106, 1, 1, v8);
      }
      v48 = (uint64_t)v103;
      sub_1000E18E4(v45, (uint64_t)v103);
      v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v48, 1, v8);
      v50 = v105;
      if ((_DWORD)v49 == 1)
      {
        Date.init()(v49);
        sub_10000FE2C(v48, &qword_1004BCBD0);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 32))(v105, v48, v8);
      }
      sub_10000FE2C(v45, &qword_1004BCBD0);
      static Date.+ infix(_:_:)(v50, v40);
      v51 = *(uint64_t (**)(uint64_t, uint64_t))(v47 + 8);
      v52 = v51(v50, v8);
      v53 = v108;
      Date.init()(v52);
      if ((static Date.< infix(_:_:)(v21, v53) & 1) != 0)
      {
        v54 = v101;
        static Date.+ infix(_:_:)(v53, 3600.0);
        v51((uint64_t)v53, v8);
        v51((uint64_t)v21, v8);
        v36 = *(void (**)(char *, char *, uint64_t))(v47 + 32);
        v36(v21, v54, v8);
      }
      else
      {
        v51((uint64_t)v53, v8);
        v36 = *(void (**)(char *, char *, uint64_t))(v47 + 32);
      }
      v34 += 24;
      v36(v24, v21, v8);
      v37 = sub_100004D8C(&qword_1004BD1A8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      if ((dispatch thunk of static Comparable.< infix(_:_:)(v24, v29, v8, v37) & 1) != 0)
        v38 = v24;
      else
        v38 = v29;
      v39 = v107;
      v110(v107, (uint64_t)v38, v8);
      v51((uint64_t)v24, v8);
      v51((uint64_t)v29, v8);
      v36(v29, v39, v8);
      --v35;
    }
    while (v35);
    v32 = v91;
    swift_bridgeObjectRelease();
    v9 = v109;
    v33 = v100;
    v31 = v90;
  }
  v55 = swift_allocBox(v8);
  v56 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v108 = v57;
  v56(v57, v29, v8);
  v58 = *(char **)(v9 + 8);
  ((void (*)(uint64_t, uint64_t))v58)(v31, v8);
  if (!v33)
  {
    v65 = v101;
    v66 = v99;
    goto LABEL_36;
  }
  v29 = v33;
  v106 = v58;
  v107 = (char *)v55;
  v24 = v32;
  swift_bridgeObjectRetain();
  LOBYTE(v9) = 0;
  v31 = 50;
  v18 = 1;
  v21 = (char *)&type metadata for Bool;
  v6 = &qword_1004BE030;
  while (1)
  {
    if ((v9 & 1) != 0)
    {
      if (v29 == (char *)v18)
      {
        v67 = swift_bridgeObjectRelease();
LABEL_33:
        v65 = v101;
        Date.init()(v67);
        v68 = v108;
        (*(void (**)(char *, char *, uint64_t))(v109 + 40))(v108, v65, v8);
        LOBYTE(v33) = 1;
        v66 = v99;
        v58 = v106;
        v55 = (uint64_t)v107;
        goto LABEL_37;
      }
      v9 = 1;
      goto LABEL_21;
    }
    v60 = v32[v31];
    v61 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    LOBYTE(v111) = v60;
    v62 = sub_1000E18A0();
    v63 = sub_10002D3FC();
    NSUserDefaults.subscript.getter((uint64_t)&type metadata for BackgroundTaskConfiguration.UserDefaultsKey, v62, v63, &aBlock);

    if (!v114)
    {
      sub_10000FE2C((uint64_t)&aBlock, &qword_1004BE030);
      v29 = v100;
      if (v100 == (char *)v18)
      {
LABEL_34:
        swift_bridgeObjectRelease();
        goto LABEL_35;
      }
      goto LABEL_30;
    }
    v64 = swift_dynamicCast(&v111, &aBlock, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
    v29 = v100;
    if ((v64 & 1) == 0)
    {
      if (v100 == (char *)v18)
        goto LABEL_34;
LABEL_30:
      v9 = 0;
      goto LABEL_21;
    }
    v9 = v111;
    if (v100 == (char *)v18)
      break;
LABEL_21:
    v31 += 24;
    if (__OFADD__(v18++, 1))
    {
      __break(1u);
      goto LABEL_47;
    }
  }
  v67 = swift_bridgeObjectRelease();
  if ((_DWORD)v9)
    goto LABEL_33;
LABEL_35:
  LOBYTE(v33) = 0;
  v65 = v101;
  v66 = v99;
  v58 = v106;
  v55 = (uint64_t)v107;
LABEL_36:
  v68 = v108;
LABEL_37:
  v69 = ((uint64_t (*)(char *, char *, uint64_t))v110)(v65, v68, v8);
  static Date.distantFuture.getter(v69);
  v70 = static Date.< infix(_:_:)(v65, v66);
  ((void (*)(char *, uint64_t))v58)(v66, v8);
  ((void (*)(char *, uint64_t))v58)(v65, v8);
  if ((v33 & 1) != 0 || (v70 & 1) != 0)
  {
    v72 = objc_allocWithZone((Class)BGAppRefreshTaskRequest);
    v73 = String._bridgeToObjectiveC()();
    v74 = objc_msgSend(v72, "initWithIdentifier:", v73);

    v110(v65, (uint64_t)v68, v8);
    v75 = v74;
    isa = Date._bridgeToObjectiveC()().super.isa;
    ((void (*)(char *, uint64_t))v58)(v65, v8);
    objc_msgSend(v75, "setEarliestBeginDate:", isa);

    if (qword_1004B8BA0 != -1)
      swift_once(&qword_1004B8BA0, sub_1000E158C);
    v77 = swift_allocObject(&unk_1004724D8, 48, 7);
    *(_QWORD *)(v77 + 16) = v75;
    *(_QWORD *)(v77 + 24) = v55;
    *(_BYTE *)(v77 + 32) = (_BYTE)v33;
    *(_QWORD *)(v77 + 40) = v92;
    v115 = sub_1000E1958;
    v116 = v77;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v113 = sub_100011FD0;
    v114 = &unk_1004724F0;
    v78 = _Block_copy(&aBlock);
    v79 = v75;
    swift_retain(v55);
    v80 = v93;
    static DispatchQoS.unspecified.getter(v81);
    v111 = _swiftEmptyArrayStorage;
    v82 = sub_100004D8C((unint64_t *)&qword_1004BE650, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v83 = sub_1000057B4(&qword_1004BCCD8);
    v84 = sub_100009890((unint64_t *)&qword_1004BE660, &qword_1004BCCD8);
    v85 = v96;
    v86 = v83;
    v87 = v98;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v111, v86, v84, v98, v82);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v80, v85, v78);
    _Block_release(v78);

    (*(void (**)(char *, uint64_t))(v97 + 8))(v85, v87);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v80, v95);
    v88 = v116;
    swift_release(v55);
    v71 = v88;
  }
  else
  {
    v71 = v55;
  }
  swift_release(v71);
}

void sub_1000DF710(void *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __n128 v17;
  uint64_t v18;
  double v19;
  void *v20;
  void *v21;
  id v22;
  unsigned int v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  NSString v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  id v48;
  _BYTE v49[24];

  v47 = a3;
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = swift_projectBox(a2);
  v10 = static os_log_type_t.default.getter();
  v46 = sub_1000057B4(&qword_1004BBCE0);
  v11 = swift_allocObject(v46, 112, 7);
  v45 = xmmword_1003C6BD0;
  *(_OWORD *)(v11 + 16) = xmmword_1003C6BD0;
  v12 = objc_msgSend(a1, "identifier");
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  *(_QWORD *)(v11 + 56) = &type metadata for String;
  v16 = sub_1000A1F04();
  *(_QWORD *)(v11 + 64) = v16;
  *(_QWORD *)(v11 + 32) = v13;
  *(_QWORD *)(v11 + 40) = v15;
  v17 = swift_beginAccess(v9, v49, 0, 0);
  v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v8, v9, v5, v17);
  v19 = Date.timeIntervalSince1970.getter(v18);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if ((~*(_QWORD *)&v19 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v19 <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  if (v19 >= 9.22337204e18)
    goto LABEL_12;
  *(_QWORD *)(v11 + 96) = &type metadata for Int;
  *(_QWORD *)(v11 + 104) = &protocol witness table for Int;
  *(_QWORD *)(v11 + 72) = (uint64_t)v19;
  sub_10000598C(0, (unint64_t *)&qword_1004BC960, OS_os_log_ptr);
  v20 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v20, "BackgroundRefreshController: SCHEDULING TASK: %@ EARLIEST BEGIN DATE %{time_t}d", 79, 2, v11);
  swift_bridgeObjectRelease();

  v21 = (void *)objc_opt_self(BGTaskScheduler);
  v22 = objc_msgSend(v21, "sharedScheduler");
  v48 = 0;
  v23 = objc_msgSend(v22, "submitTaskRequest:error:", a1, &v48);

  v24 = v48;
  if (v23)
  {
    v25 = v48;
    if ((v47 & 1) == 0)
      return;
  }
  else
  {
    v26 = v48;
    v27 = (void *)_convertNSErrorToError(_:)(v24);

    v29 = swift_willThrow(v28);
    v30 = static os_log_type_t.error.getter(v29);
    v31 = swift_allocObject(v46, 112, 7);
    *(_OWORD *)(v31 + 16) = v45;
    v32 = objc_msgSend(a1, "identifier");
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v35 = v34;

    *(_QWORD *)(v31 + 56) = &type metadata for String;
    *(_QWORD *)(v31 + 64) = v16;
    *(_QWORD *)(v31 + 32) = v33;
    *(_QWORD *)(v31 + 40) = v35;
    v48 = v27;
    swift_errorRetain(v27);
    v36 = sub_1000057B4((uint64_t *)&unk_1004BD690);
    v37 = String.init<A>(describing:)(&v48, v36);
    *(_QWORD *)(v31 + 96) = &type metadata for String;
    *(_QWORD *)(v31 + 104) = v16;
    *(_QWORD *)(v31 + 72) = v37;
    *(_QWORD *)(v31 + 80) = v38;
    v39 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v39, "BackgroundRefreshController: SCHEDULING TASK: %@ ERROR %@", 57, 2, v31);
    swift_bridgeObjectRelease();

    swift_errorRelease(v27);
    if ((v47 & 1) == 0)
      return;
  }
  v40 = static os_log_type_t.default.getter();
  v41 = swift_allocObject(v46, 72, 7);
  *(_OWORD *)(v41 + 16) = xmmword_1003C64D0;
  *(_QWORD *)(v41 + 56) = &type metadata for String;
  *(_QWORD *)(v41 + 64) = v16;
  *(_QWORD *)(v41 + 32) = 0xD00000000000002FLL;
  *(_QWORD *)(v41 + 40) = 0x80000001003A9E90;
  v42 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v42, "BackgroundRefreshController: FORCING TASK: %@", 45, 2, v41);
  swift_bridgeObjectRelease();

  v43 = objc_msgSend(v21, "sharedScheduler");
  v44 = String._bridgeToObjectiveC()();
  objc_msgSend(v43, "_simulateLaunchForTaskWithIdentifier:", v44);

}

double sub_1000DFB78(char a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  uint64_t v19;
  _QWORD *v20;
  _QWORD aBlock[5];
  uint64_t v22;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v19 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1004B8BA0 != -1)
    swift_once(&qword_1004B8BA0, sub_1000E158C);
  v13 = swift_allocObject(&unk_1004727A0, 40, 7);
  *(_QWORD *)(v13 + 16) = a2;
  *(_BYTE *)(v13 + 24) = a1 & 1;
  *(_QWORD *)(v13 + 32) = a3;
  aBlock[4] = sub_1000E23C0;
  v22 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100011FD0;
  aBlock[3] = &unk_1004727B8;
  v14 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(a2);
  v20 = _swiftEmptyArrayStorage;
  v15 = sub_100004D8C((unint64_t *)&qword_1004BE650, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_1000057B4(&qword_1004BCCD8);
  v17 = sub_100009890((unint64_t *)&qword_1004BE660, &qword_1004BCCD8);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v16, v17, v6, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  *(_QWORD *)&result = swift_release(v22).n128_u64[0];
  return result;
}

void sub_1000DFD98(void *a1, char a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  id v8;

  if ((a2 & 1) != 0)
    v2 = 1702195828;
  else
    v2 = 0x65736C6166;
  if ((a2 & 1) != 0)
    v3 = 0xE400000000000000;
  else
    v3 = 0xE500000000000000;
  v4 = static os_log_type_t.error.getter(objc_msgSend(a1, "setTaskCompletedWithSuccess:", a2 & 1));
  v5 = sub_1000057B4(&qword_1004BBCE0);
  v6 = swift_allocObject(v5, 112, 7);
  *(_OWORD *)(v6 + 16) = xmmword_1003C6BD0;
  *(_QWORD *)(v6 + 56) = &type metadata for String;
  v7 = sub_1000A1F04();
  *(_QWORD *)(v6 + 32) = 0xD00000000000002FLL;
  *(_QWORD *)(v6 + 40) = 0x80000001003A9E90;
  *(_QWORD *)(v6 + 96) = &type metadata for String;
  *(_QWORD *)(v6 + 104) = v7;
  *(_QWORD *)(v6 + 64) = v7;
  *(_QWORD *)(v6 + 72) = v2;
  *(_QWORD *)(v6 + 80) = v3;
  sub_10000598C(0, (unint64_t *)&qword_1004BC960, OS_os_log_ptr);
  v8 = (id)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v8, "BackgroundRefreshController: COMPLETED REFRESH SUBTASKS: %@ SUCCESS: %@", 71, 2, v6);
  swift_bridgeObjectRelease();

}

void sub_1000DFEC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[5];
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  int v35;
  char *v36;
  char *v37;
  unint64_t v38;
  _QWORD aBlock[11];
  unsigned __int8 v40;

  v25[2] = a2;
  v25[1] = a1;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v27 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for DispatchQoS(0);
  v25[4] = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v25[3] = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000057B4(&qword_1004BCBD0);
  v6 = __chkstk_darwin(v5);
  v32 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = type metadata accessor for Date(0);
  v33 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v29 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v37 = (char *)v25 - v12;
  v13 = __chkstk_darwin(v11);
  v36 = (char *)v25 - v14;
  v15 = __chkstk_darwin(v13);
  v31 = (char *)v25 - v16;
  v17 = __chkstk_darwin(v15);
  v30 = (char *)v25 - v18;
  __chkstk_darwin(v17);
  v34 = (char *)v25 - v19;
  if (qword_1004B8AF8 != -1)
    swift_once(&qword_1004B8AF8, sub_1000D365C);
  v38 = 0xEA00000000007265;
  v20 = static ApplicationCapabilities.Controller.shared;
  KeyPath = swift_getKeyPath(&unk_1003CD0D0);
  v22 = swift_getKeyPath(&unk_1003CD0F8);
  static Published.subscript.getter(aBlock, v20, KeyPath, v22);
  swift_release(KeyPath);
  swift_release(v22);
  v23 = (void *)aBlock[10];
  v24 = v40;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v35 = 1;
  __asm { BR              X9 }
}

void sub_1000E09C8(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  UnfairLock.locked<A>(_:)((void (*)(void))sub_1000E232C);
  dispatch_group_leave(a4);
}

uint64_t sub_1000E0A2C(_BYTE *a1, char a2)
{
  char v4;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[24];

  swift_beginAccess(a1, v7, 0, 0);
  v4 = *a1 & a2;
  result = swift_beginAccess(a1, &v6, 1, 0);
  *a1 = v4;
  return result;
}

void sub_1000E0A94(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  id v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD aBlock[3];
  void *v33;
  uint64_t (*v34)(uint64_t, __n128);
  uint64_t v35;
  char v36;

  v31 = a1;
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1004B8BB0 != -1)
    v5 = swift_once(&qword_1004B8BB0, sub_1000E1B98);
  v8 = word_1004BD170;
  v9 = HIBYTE(word_1004BD170);
  v10 = qword_1004BD178;
  v11 = word_1004BD180;
  v12 = HIBYTE(word_1004BD180);
  HIDWORD(v29) = byte_1004BD182;
  Date.init()(v5);
  v13 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v33 = (void *)v3;
  v14 = sub_1000407CC(aBlock);
  (*(void (**)(_QWORD *, char *, uint64_t))(v4 + 16))(v14, v7, v3);
  v36 = v12;
  v15 = sub_1000E18A0();
  v16 = sub_10002D3FC();
  NSUserDefaults.subscript.setter((uint64_t)aBlock, (uint64_t)&v36, (uint64_t)&type metadata for BackgroundTaskConfiguration.UserDefaultsKey, v15, v16);

  v17 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  v18 = static os_log_type_t.default.getter(v17);
  v19 = sub_1000057B4(&qword_1004BBCE0);
  v20 = swift_allocObject(v19, 72, 7);
  v21 = v20;
  *(_OWORD *)(v20 + 16) = xmmword_1003C64D0;
  if (v8)
    v22 = 0xD000000000000018;
  else
    v22 = 0xD000000000000019;
  if (v8)
    v23 = 0x80000001003A6CD0;
  else
    v23 = 0x80000001003A6CB0;
  *(_QWORD *)(v20 + 56) = &type metadata for String;
  *(_QWORD *)(v20 + 64) = sub_1000A1F04();
  *(_QWORD *)(v21 + 32) = v22;
  *(_QWORD *)(v21 + 40) = v23;
  sub_10000598C(0, (unint64_t *)&qword_1004BC960, OS_os_log_ptr);
  v24 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v24, "BackgroundRefreshController: EXECUTING SUBTASK: %@", 50, 2, v21);
  swift_bridgeObjectRelease(v21);

  v25 = *(void **)(v30 + 32);
  v26 = swift_allocObject(&unk_100472728, 56, 7);
  *(_BYTE *)(v26 + 16) = v8;
  *(_BYTE *)(v26 + 17) = v9;
  *(_QWORD *)(v26 + 24) = v10;
  *(_BYTE *)(v26 + 32) = v11;
  *(_BYTE *)(v26 + 33) = v12;
  *(_BYTE *)(v26 + 34) = BYTE4(v29);
  *(_QWORD *)(v26 + 40) = v31;
  *(_QWORD *)(v26 + 48) = a2;
  v34 = sub_1000E22D0;
  v35 = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000148C8;
  v33 = &unk_100472740;
  v27 = _Block_copy(aBlock);
  v28 = v35;
  swift_retain(a2);
  objc_msgSend(v25, "updatePinnedSubscribedPlaylistsWithCompletion:", v27, swift_release(v28).n128_f64[0]);
  _Block_release(v27);
}

void sub_1000E0D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  char v11;
  uint64_t v12;
  char v13;
  id v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  char v32;
  _QWORD v33[4];

  v3 = v2;
  v31 = a1;
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1004B8BB8 != -1)
    v7 = swift_once(&qword_1004B8BB8, sub_1000E1C58);
  v10 = word_1004BD188;
  v11 = HIBYTE(word_1004BD188);
  v12 = qword_1004BD190;
  v13 = byte_1004BD199;
  v29 = byte_1004BD19A;
  v30 = byte_1004BD198;
  Date.init()(v7);
  v14 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v33[3] = v5;
  v15 = sub_1000407CC(v33);
  (*(void (**)(_QWORD *, char *, uint64_t))(v6 + 16))(v15, v9, v5);
  v32 = v13;
  v16 = sub_1000E18A0();
  v17 = sub_10002D3FC();
  NSUserDefaults.subscript.setter((uint64_t)v33, (uint64_t)&v32, (uint64_t)&type metadata for BackgroundTaskConfiguration.UserDefaultsKey, v16, v17);

  v18 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v19 = static os_log_type_t.default.getter(v18);
  v20 = sub_1000057B4(&qword_1004BBCE0);
  v21 = swift_allocObject(v20, 72, 7);
  v22 = v21;
  *(_OWORD *)(v21 + 16) = xmmword_1003C64D0;
  if (v10)
    v23 = 0xD000000000000018;
  else
    v23 = 0xD000000000000019;
  if (v10)
    v24 = 0x80000001003A6CD0;
  else
    v24 = 0x80000001003A6CB0;
  *(_QWORD *)(v21 + 56) = &type metadata for String;
  *(_QWORD *)(v21 + 64) = sub_1000A1F04();
  *(_QWORD *)(v22 + 32) = v23;
  *(_QWORD *)(v22 + 40) = v24;
  sub_10000598C(0, (unint64_t *)&qword_1004BC960, OS_os_log_ptr);
  v25 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v25, "BackgroundRefreshController: EXECUTING SUBTASK: %@", 50, 2, v22);
  swift_bridgeObjectRelease();

  if (qword_1004B8B88 != -1)
    swift_once(&qword_1004B8B88, sub_1000DC168);
  if (qword_1004B8BA0 != -1)
    swift_once(&qword_1004B8BA0, sub_1000E158C);
  v26 = qword_1004BD160;
  v27 = swift_allocObject(&unk_100472778, 56, 7);
  *(_BYTE *)(v27 + 16) = v10;
  *(_BYTE *)(v27 + 17) = v11;
  *(_QWORD *)(v27 + 24) = v12;
  *(_BYTE *)(v27 + 32) = v30;
  *(_BYTE *)(v27 + 33) = v13;
  *(_BYTE *)(v27 + 34) = v29;
  *(_QWORD *)(v27 + 40) = v31;
  *(_QWORD *)(v27 + 48) = a2;
  swift_retain(v3);
  swift_retain(a2);
  _s9MusicCore22BackgroundFetchManagerC14updateURLCache5queue20onDidReceiveResponse10completionySo012OS_dispatch_H0C_ySo13ICURLResponseCSg_s5Error_pSgtcSgySaysAM_pGctF_0(v26, (uint64_t)sub_1000E22DC, v3, (uint64_t)sub_1000E22E4, v27);
  swift_release(v3);
  swift_release(v27);
}

uint64_t sub_1000E108C(uint64_t a1, char a2, uint64_t a3, uint64_t (*a4)(BOOL))
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v28;

  v7 = 0xD000000000000018;
  if (a1)
  {
    v8 = swift_errorRetain(a1);
    v9 = static os_log_type_t.error.getter(v8);
    v10 = sub_1000057B4(&qword_1004BBCE0);
    v11 = swift_allocObject(v10, 112, 7);
    v12 = (_QWORD *)v11;
    *(_OWORD *)(v11 + 16) = xmmword_1003C6BD0;
    if ((a2 & 1) != 0)
    {
      v13 = 0x80000001003A6CD0;
    }
    else
    {
      v7 = 0xD000000000000019;
      v13 = 0x80000001003A6CB0;
    }
    *(_QWORD *)(v11 + 56) = &type metadata for String;
    v14 = sub_1000A1F04();
    v12[8] = v14;
    v12[4] = v7;
    v12[5] = v13;
    v28 = a1;
    swift_errorRetain(a1);
    v15 = sub_1000057B4((uint64_t *)&unk_1004BD690);
    v16 = String.init<A>(describing:)(&v28, v15);
    v12[12] = &type metadata for String;
    v12[13] = v14;
    v12[9] = v16;
    v12[10] = v17;
    sub_10000598C(0, (unint64_t *)&qword_1004BC960, OS_os_log_ptr);
    v18 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v18, "BackgroundRefreshController: COMPLETED SUBTASK: %@ ERROR %@", 59, 2, v12);
    swift_bridgeObjectRelease(v12);

    swift_errorRelease(a1);
  }
  else
  {
    v19 = ((uint64_t (*)(void))static os_log_type_t.error.getter)();
    v20 = sub_1000057B4(&qword_1004BBCE0);
    v21 = swift_allocObject(v20, 72, 7);
    v22 = v21;
    *(_OWORD *)(v21 + 16) = xmmword_1003C64D0;
    v23 = (a2 & 1) == 0;
    if ((a2 & 1) != 0)
      v24 = 0xD000000000000018;
    else
      v24 = 0xD000000000000019;
    if (v23)
      v25 = 0x80000001003A6CB0;
    else
      v25 = 0x80000001003A6CD0;
    *(_QWORD *)(v21 + 56) = &type metadata for String;
    *(_QWORD *)(v21 + 64) = sub_1000A1F04();
    *(_QWORD *)(v22 + 32) = v24;
    *(_QWORD *)(v22 + 40) = v25;
    sub_10000598C(0, (unint64_t *)&qword_1004BC960, OS_os_log_ptr);
    v26 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v26, "BackgroundRefreshController: COMPLETED SUBTASK: %@ SUCCESS", 58, 2, v22);
    swift_bridgeObjectRelease(v22);

  }
  return a4(a1 == 0);
}

uint64_t sub_1000E12D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  void (*v6)(uint64_t);
  uint64_t v7;
  _BYTE v8[24];

  result = swift_beginAccess(a3 + 16, v8, 0, 0);
  v6 = *(void (**)(uint64_t))(a3 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)(a3 + 24);
    swift_retain(v7);
    v6(a1);
    return swift_release(v7);
  }
  return result;
}

uint64_t sub_1000E133C(uint64_t a1, char a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t (*v30)(_QWORD);
  uint64_t v31;
  uint64_t v32;

  v7 = static os_log_type_t.default.getter(a1);
  v8 = sub_1000057B4(&qword_1004BBCE0);
  v9 = swift_allocObject(v8, 72, 7);
  v10 = (_QWORD *)v9;
  *(_OWORD *)(v9 + 16) = xmmword_1003C64D0;
  v11 = (a2 & 1) == 0;
  if ((a2 & 1) != 0)
    v12 = 0xD000000000000018;
  else
    v12 = 0xD000000000000019;
  if (v11)
    v13 = 0x80000001003A6CB0;
  else
    v13 = 0x80000001003A6CD0;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  v14 = sub_1000A1F04();
  v10[8] = v14;
  v10[4] = v12;
  v10[5] = v13;
  v15 = v13;
  sub_10000598C(0, (unint64_t *)&qword_1004BC960, OS_os_log_ptr);
  v16 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v16, "BackgroundRefreshController: COMPLETED SUBTASK: %@", 50, 2, v10);
  swift_bridgeObjectRelease();

  v17 = *(_QWORD *)(a1 + 16);
  if (v17)
  {
    v30 = a4;
    swift_bridgeObjectRetain();
    v18 = 0;
    v31 = v8;
    do
    {
      v19 = *(_QWORD *)(a1 + 8 * v18++ + 32);
      v20 = swift_errorRetain(v19);
      v21 = v17;
      v22 = static os_log_type_t.error.getter(v20);
      v23 = swift_allocObject(v31, 112, 7);
      *(_OWORD *)(v23 + 16) = xmmword_1003C6BD0;
      *(_QWORD *)(v23 + 56) = &type metadata for String;
      *(_QWORD *)(v23 + 64) = v14;
      *(_QWORD *)(v23 + 32) = v12;
      *(_QWORD *)(v23 + 40) = v15;
      v32 = v19;
      swift_errorRetain(v19);
      v24 = sub_1000057B4((uint64_t *)&unk_1004BD690);
      v25 = String.init<A>(describing:)(&v32, v24);
      *(_QWORD *)(v23 + 96) = &type metadata for String;
      *(_QWORD *)(v23 + 104) = v14;
      *(_QWORD *)(v23 + 72) = v25;
      *(_QWORD *)(v23 + 80) = v26;
      v27 = (void *)static OS_os_log.default.getter();
      v28 = v22;
      v17 = v21;
      os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v27, "BackgroundRefreshController: ERROR EXECUTING SUBTASK: %@ ERROR %@", 65, 2, v23);
      swift_bridgeObjectRelease();

      swift_errorRelease(v19);
    }
    while (v21 != v18);
    swift_bridgeObjectRelease();
    a4 = v30;
  }
  return a4(v17 == 0);
}

uint64_t sub_1000E158C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  _QWORD *v16;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000598C(0, (unint64_t *)&qword_1004BD060, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v10);
  v16 = _swiftEmptyArrayStorage;
  v11 = sub_100004D8C(&qword_1004BD260, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v12 = sub_1000057B4(&qword_1004BD268);
  v13 = sub_100009890(&qword_1004BD270, &qword_1004BD268);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v4, v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003ELL, 0x80000001003AA090, v9, v6, v3, 0);
  qword_1004BD160 = result;
  return result;
}

uint64_t BackgroundRefreshController.deinit()
{
  uint64_t v0;

  sub_10000DCF8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));

  return v0;
}

uint64_t BackgroundRefreshController.__deallocating_deinit()
{
  uint64_t v0;

  sub_10000DCF8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));

  return swift_deallocClassInstance(v0, 40, 7);
}

double sub_1000E17A8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  __int16 v5;
  char v6;
  double result;
  char v8;
  __int16 v9;

  v0 = sub_1000057B4(&qword_1004BD278);
  v1 = swift_allocObject(v0, 80, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1003C6BD0;
  if (qword_1004B8BB0 != -1)
    swift_once(&qword_1004B8BB0, sub_1000E1B98);
  v2 = HIBYTE(word_1004BD170);
  v3 = qword_1004BD178;
  v4 = word_1004BD180;
  v5 = *(__int16 *)((char *)&word_1004BD180 + 1);
  *(_BYTE *)(v1 + 32) = word_1004BD170;
  *(_BYTE *)(v1 + 33) = v2;
  *(_QWORD *)(v1 + 40) = v3;
  *(_BYTE *)(v1 + 48) = v4;
  *(_WORD *)(v1 + 49) = v5;
  if (qword_1004B8BB8 != -1)
    swift_once(&qword_1004B8BB8, sub_1000E1C58);
  v6 = HIBYTE(word_1004BD188);
  result = *(double *)&qword_1004BD190;
  v8 = byte_1004BD198;
  v9 = *(_WORD *)&byte_1004BD199;
  *(_BYTE *)(v1 + 56) = word_1004BD188;
  *(_BYTE *)(v1 + 57) = v6;
  *(double *)(v1 + 64) = result;
  *(_BYTE *)(v1 + 72) = v8;
  *(_WORD *)(v1 + 73) = v9;
  off_1004BD168 = (_UNKNOWN *)v1;
  return result;
}

unint64_t sub_1000E18A0()
{
  unint64_t result;

  result = qword_1004BD1A0;
  if (!qword_1004BD1A0)
  {
    result = swift_getWitnessTable(&unk_1003CD094, &type metadata for BackgroundTaskConfiguration.UserDefaultsKey);
    atomic_store(result, (unint64_t *)&qword_1004BD1A0);
  }
  return result;
}

uint64_t sub_1000E18E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000057B4(&qword_1004BCBD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E192C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1000E1958()
{
  uint64_t v0;

  sub_1000DF710(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32));
}

uint64_t type metadata accessor for BackgroundRefreshController()
{
  return objc_opt_self(_TtC9MusicCore27BackgroundRefreshController);
}

_QWORD *assignWithCopy for BackgroundRefreshController.PerformanceMetricsRecorder(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t assignWithTake for BackgroundRefreshController.PerformanceMetricsRecorder(uint64_t a1, _OWORD *a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for BackgroundRefreshController.PerformanceMetricsRecorder(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BackgroundRefreshController.PerformanceMetricsRecorder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BackgroundRefreshController.PerformanceMetricsRecorder()
{
  return &type metadata for BackgroundRefreshController.PerformanceMetricsRecorder;
}

uint64_t storeEnumTagSinglePayload for BackgroundTaskConfiguration.UserDefaultsKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000E1AD0 + 4 * byte_1003CCF88[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000E1B04 + 4 * byte_1003CCF83[v4]))();
}

uint64_t sub_1000E1B04(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E1B0C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000E1B14);
  return result;
}

uint64_t sub_1000E1B20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000E1B28);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000E1B2C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E1B34(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BackgroundTaskConfiguration.UserDefaultsKey()
{
  return &type metadata for BackgroundTaskConfiguration.UserDefaultsKey;
}

unint64_t sub_1000E1B54()
{
  unint64_t result;

  result = qword_1004BD258;
  if (!qword_1004BD258)
  {
    result = swift_getWitnessTable(&unk_1003CD06C, &type metadata for BackgroundTaskConfiguration.UserDefaultsKey);
    atomic_store(result, (unint64_t *)&qword_1004BD258);
  }
  return result;
}

void sub_1000E1B98()
{
  void *v0;

  if (qword_1004B8BC0 != -1)
    swift_once(&qword_1004B8BC0, sub_1000E30D8);
  sub_1000057B4(&qword_1004BD040);
  UnfairLock.locked<A>(_:)((void (*)(void))sub_10002D3E4);

  word_1004BD170 = 256;
  qword_1004BD178 = 0x40E5180000000000;
  word_1004BD180 = 257;
  byte_1004BD182 = 0;
}

void sub_1000E1C58()
{
  void *v0;
  char v1;
  uint64_t v2;
  void *v3;
  char v4;

  if (qword_1004B8BC0 != -1)
    swift_once(&qword_1004B8BC0, sub_1000E30D8);
  sub_1000057B4(&qword_1004BD040);
  UnfairLock.locked<A>(_:)((void (*)(void))sub_10002D3E4);
  v0 = v3;
  if (v3 && (sub_1000E1D44(v3, (uint64_t)&v3), v0, (v4 & 1) == 0))
  {
    v1 = 0;
    v2 = (uint64_t)v3;
  }
  else
  {
    v1 = 1;
    v2 = 0x40D5180000000000;
  }
  word_1004BD188 = 257;
  qword_1004BD190 = v2;
  byte_1004BD198 = v1;
  *(_WORD *)&byte_1004BD199 = 515;
}

void sub_1000E1D44(void *a1@<X0>, uint64_t a2@<X8>)
{
  NSString v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(a1, "dictionaryForBagKey:", v4);

  if (!v5)
    goto LABEL_12;
  v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v5, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  v7 = sub_100212EA8(v6);
  swift_bridgeObjectRelease();
  if (!v7)
    goto LABEL_12;
  if (!*(_QWORD *)(v7 + 16) || (v8 = sub_1000277A0(0xD00000000000001ELL, 0x80000001003A9E10), (v9 & 1) == 0))
  {
    v17 = 0u;
    v18 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  sub_10000990C(*(_QWORD *)(v7 + 56) + 32 * v8, (uint64_t)&v17);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v18 + 1))
    goto LABEL_11;
  v10 = sub_1000057B4((uint64_t *)&unk_1004BF820);
  if ((swift_dynamicCast(&v16, &v17, (char *)&type metadata for Any + 8, v10, 6) & 1) == 0)
  {
LABEL_12:
    *(_QWORD *)a2 = 0;
    v14 = 1;
    goto LABEL_13;
  }
  v11 = v16;
  if (*(_QWORD *)(v16 + 16) && (v12 = sub_1000277A0(0xD00000000000001DLL, 0x80000001003AA0D0), (v13 & 1) != 0))
  {
    sub_10000990C(*(_QWORD *)(v11 + 56) + 32 * v12, (uint64_t)&v17);
  }
  else
  {
    v17 = 0u;
    v18 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v18 + 1))
  {
LABEL_11:
    sub_10000FE2C((uint64_t)&v17, &qword_1004BE030);
    goto LABEL_12;
  }
  v15 = swift_dynamicCast(a2, &v17, (char *)&type metadata for Any + 8, &type metadata for Double, 6);
  if ((v15 & 1) == 0)
    *(_QWORD *)a2 = 0;
  v14 = v15 ^ 1;
LABEL_13:
  *(_BYTE *)(a2 + 8) = v14;
}

uint64_t sub_1000E1F28(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000E1F64 + 4 * byte_1003CCF8D[a1]))(0xD00000000000002FLL, 0x80000001003A6CF0);
}

uint64_t sub_1000E1F64()
{
  uint64_t v0;

  return v0 + 11;
}

unint64_t sub_1000E1F8C()
{
  return 0xD000000000000027;
}

uint64_t sub_1000E1FA8(char *a1, char *a2)
{
  return sub_100047F4C(*a1, *a2);
}

Swift::Int sub_1000E1FB4()
{
  char *v0;

  return sub_1000DDC3C(*v0);
}

uint64_t sub_1000E1FBC(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000018;
  else
    v2 = 0xD000000000000019;
  if (*v1)
    v3 = 0x80000001003A6CD0;
  else
    v3 = 0x80000001003A6CB0;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1000E201C(uint64_t a1)
{
  char *v1;

  return sub_1000DE4A4(a1, *v1);
}

uint64_t sub_1000E2024@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100467A00, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_1000E2080(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000018;
  else
    v2 = 0xD000000000000019;
  v3 = 0x80000001003A6CB0;
  if (*v1)
    v3 = 0x80000001003A6CD0;
  *a1 = v2;
  a1[1] = v3;
}

void sub_1000E20C4(char *a1)
{
  sub_100047E00(*a1);
}

void sub_1000E20D0()
{
  char *v0;

  sub_1000DDCC0(*v0);
}

void sub_1000E20D8(uint64_t a1)
{
  char *v1;

  sub_1000DE0E8(a1, *v1);
}

void sub_1000E20E0(uint64_t a1)
{
  char *v1;

  sub_1000DE524(a1, *v1);
}

unint64_t sub_1000E20E8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000E213C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000E2114@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1000E1F28(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1000E213C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100467A50, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t sub_1000E2184()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

double sub_1000E21A8(char a1)
{
  uint64_t v1;

  return sub_1000DFB78(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000E21B8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000E21C8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000E21FC()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  unsigned __int8 v3;

  v1 = *(uint64_t (**)(_QWORD))(v0 + 32);
  UnfairLock.locked<A>(_:)((void (*)(void))sub_1000E2348);
  return v1(v3);
}

void sub_1000E2268(uint64_t a1)
{
  uint64_t v1;

  sub_1000E09C8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(NSObject **)(v1 + 32));
}

uint64_t sub_1000E2278()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000E22AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000E22D0(uint64_t a1, __n128 a2)
{
  return sub_1000E22F0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, __n128))sub_1000E108C, a2);
}

uint64_t sub_1000E22DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000E12D4(a1, a2, v2);
}

uint64_t sub_1000E22E4(uint64_t a1, __n128 a2)
{
  return sub_1000E22F0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, __n128))sub_1000E133C, a2);
}

uint64_t sub_1000E22F0(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, __n128), __n128 a3)
{
  uint64_t v3;
  int v4;

  if (*(_BYTE *)(v3 + 17))
    v4 = 256;
  else
    v4 = 0;
  a3.n128_u64[0] = *(_QWORD *)(v3 + 24);
  return a2(a1, v4 | *(unsigned __int8 *)(v3 + 16), *(unsigned __int8 *)(v3 + 32) | (*(unsigned __int8 *)(v3 + 33) << 8) | (*(unsigned __int8 *)(v3 + 34) << 16), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), a3);
}

uint64_t sub_1000E232C()
{
  uint64_t v0;

  return sub_1000E0A2C(*(_BYTE **)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_1000E2348@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = *(_BYTE **)(v1 + 16);
  result = swift_beginAccess(v3, v5, 0, 0);
  *a1 = *v3;
  return result;
}

uint64_t sub_1000E239C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

void sub_1000E23C0()
{
  uint64_t v0;

  sub_1000DFD98(*(void **)(v0 + 16), *(_BYTE *)(v0 + 24));
}

__n128 initializeBufferWithCopyOfBuffer for BackgroundTaskConfiguration(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_DWORD *)(a1 + 15) = *(_DWORD *)(a2 + 15);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for BackgroundTaskConfiguration(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[19])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for BackgroundTaskConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 18) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 19) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 19) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for BackgroundTaskConfiguration()
{
  return &type metadata for BackgroundTaskConfiguration;
}

uint64_t storeEnumTagSinglePayload for BackgroundTaskConfiguration.Identifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000E24CC + 4 * byte_1003CCF96[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000E2500 + 4 * byte_1003CCF91[v4]))();
}

uint64_t sub_1000E2500(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E2508(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000E2510);
  return result;
}

uint64_t sub_1000E251C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000E2524);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000E2528(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E2530(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BackgroundTaskConfiguration.Identifier()
{
  return &type metadata for BackgroundTaskConfiguration.Identifier;
}

unint64_t sub_1000E2550()
{
  unint64_t result;

  result = qword_1004BD280[0];
  if (!qword_1004BD280[0])
  {
    result = swift_getWitnessTable(&unk_1003CD19C, &type metadata for BackgroundTaskConfiguration.Identifier);
    atomic_store(result, qword_1004BD280);
  }
  return result;
}

uint64_t BagControlledValue.init(fallback:reader:)@<X0>(uint64_t a1@<X0>, void (*a2)(void *)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  void (*v21)(void *);
  uint64_t v22;
  void *v23;

  v21 = a2;
  v22 = a1;
  v6 = type metadata accessor for Optional(0, a3);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v21 - v9;
  v11 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(v8);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1004B8BC0 != -1)
    swift_once(&qword_1004B8BC0, sub_1000E30D8);
  sub_1000057B4(&qword_1004BD040);
  UnfairLock.locked<A>(_:)((void (*)(void))sub_10002D3E4);
  v16 = v23;
  if (!v23)
    goto LABEL_6;
  v21(v23);

  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, a3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
LABEL_6:
    *(_BYTE *)(a4 + *(int *)(type metadata accessor for BagControlledValue(0, a3, v14, v15) + 28)) = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(a4, v22, a3);
  }
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v22, a3);
  v18 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v18(v13, v10, a3);
  *(_BYTE *)(a4 + *(int *)(type metadata accessor for BagControlledValue(0, a3, v19, v20) + 28)) = 0;
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v18)(a4, v13, a3);
}

uint64_t BagControlledValue.source.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 28));
}

uint64_t type metadata accessor for BagControlledValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100051E10(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BagControlledValue);
}

uint64_t sub_1000E27B4(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for BagControlledValue<A>.Source, a1);
}

uint64_t sub_1000E27C4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1003CD278;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 24);
    return 0;
  }
  return result;
}

_QWORD *sub_1000E2838(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 1) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(_QWORD *, _QWORD *))(v5 + 16))(a1, a2);
    *((_BYTE *)v4 + v6) = *((_BYTE *)a2 + v6);
  }
  else
  {
    v10 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v10 + ((v7 + 16) & ~v7));
    swift_retain(v10);
  }
  return v4;
}

uint64_t sub_1000E28C4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_1000E28D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t sub_1000E291C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t sub_1000E2964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t sub_1000E29AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t sub_1000E29F4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = v7 + 1;
  v10 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 >= 0xFE)
        return (*(uint64_t (**)(void))(v4 + 48))();
      v15 = *(unsigned __int8 *)(v7 + a1);
      if (v15 >= 2)
        return v15 - 1;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if ((_DWORD)v7 == -1)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1000E2ABC + 4 * byte_1003CD1D0[(v9 - 1)]))();
}

void sub_1000E2B1C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 1;
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = &dword_100000004;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v7 != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v7 + 1);
        if (v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if (v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t sub_1000E2CF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 8);
}

uint64_t sub_1000E2CF8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000E2D44 + 4 * byte_1003CD1E3[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000E2D78 + 4 * byte_1003CD1DE[v4]))();
}

uint64_t sub_1000E2D78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E2D80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000E2D88);
  return result;
}

uint64_t sub_1000E2D94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000E2D9CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000E2DA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E2DA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for BagControlledValue.Source(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100051E10(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BagControlledValue.Source);
}

uint64_t *BagProvider.shared.unsafeMutableAddressor()
{
  if (qword_1004B8BC0 != -1)
    swift_once(&qword_1004B8BC0, sub_1000E30D8);
  return &static BagProvider.shared;
}

uint64_t BagProvider.createObserver(handler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = type metadata accessor for BagProvider.Observer();
  v6 = swift_allocObject(v5, 40, 7);
  v7 = swift_weakInit(v6 + 16, 0);
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  swift_weakAssign(v7, v2);
  v8 = *(_QWORD *)(v6 + 24);
  v9 = *(_QWORD *)(v6 + 32);
  *(_QWORD *)(v6 + 24) = a1;
  *(_QWORD *)(v6 + 32) = a2;
  swift_retain(a2);
  sub_10000DCF8(v8, v9);
  UnfairLock.locked<A>(_:)(sub_1000C99F0);
  sub_1000E34B8(0);
  return v6;
}

uint64_t BagProvider.bag.getter()
{
  uint64_t v1;

  sub_1000057B4(&qword_1004BD040);
  UnfairLock.locked<A>(_:)((void (*)(void))sub_1000E36F4);
  return v1;
}

double BagProvider.getBag(completion:)(void (*a1)(), uint64_t a2)
{
  uint64_t v2;
  double result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  sub_1000057B4(&qword_1004BD040);
  UnfairLock.locked<A>(_:)((void (*)(void))sub_1000E36F4);
  if (v14)
  {
    a1();

  }
  else
  {
    v6 = type metadata accessor for BagProvider.Observer();
    v7 = swift_allocObject(v6, 40, 7);
    v8 = swift_weakInit(v7 + 16, 0);
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 32) = 0;
    swift_weakAssign(v8, v2);
    v9 = swift_allocObject(&unk_100472A68, 24, 7);
    swift_weakInit(v9 + 16, v2);
    v10 = (_QWORD *)swift_allocObject(&unk_100472A90, 48, 7);
    v10[2] = a1;
    v10[3] = a2;
    v10[4] = v9;
    v10[5] = v7;
    v11 = *(_QWORD *)(v7 + 24);
    v12 = *(_QWORD *)(v7 + 32);
    *(_QWORD *)(v7 + 24) = sub_1000DBDC0;
    *(_QWORD *)(v7 + 32) = v10;
    swift_retain(a2);
    swift_retain(v7);
    v13 = sub_10000DCF8(v11, v12);
    __chkstk_darwin(v13);
    UnfairLock.locked<A>(_:)((void (*)(void))sub_1000DBDCC);
    sub_1000E34B8(0);
    *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000E30D8()
{
  void *v0;
  uint64_t v1;
  uint64_t result;

  if (qword_1004B8C58 != -1)
    swift_once(&qword_1004B8C58, sub_1001143CC);
  v0 = (void *)static ICClientInfo.music;
  v1 = type metadata accessor for BagProvider(0);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  result = sub_1000E3970(v0);
  static BagProvider.shared = result;
  return result;
}

uint64_t type metadata accessor for BagProvider.Observer()
{
  return objc_opt_self(_TtCC9MusicCore11BagProvider8Observer);
}

double static BagProvider.shared.getter()
{
  double result;

  if (qword_1004B8BC0 != -1)
    swift_once(&qword_1004B8BC0, sub_1000E30D8);
  *(_QWORD *)&result = swift_retain(static BagProvider.shared).n128_u64[0];
  return result;
}

_BYTE *sub_1000E31AC@<X0>(_BYTE *result@<X0>, _QWORD *a2@<X8>)
{
  id *v3;
  id v4;

  v3 = (id *)&result[OBJC_IVAR____TtC9MusicCore11BagProvider_result];
  if (result[OBJC_IVAR____TtC9MusicCore11BagProvider_result + 8] == 1)
  {
    v4 = *v3;
    result = *v3;
  }
  else
  {
    v4 = 0;
  }
  *a2 = v4;
  return result;
}

double sub_1000E3204(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t Strong;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[31];

  v4 = a4 + 16;
  a2();
  swift_beginAccess(v4, v10, 0, 0);
  Strong = swift_weakLoadStrong(v4);
  if (Strong)
  {
    v7 = Strong;
    v8 = *(_QWORD *)(Strong + OBJC_IVAR____TtC9MusicCore11BagProvider_lock);
    swift_retain(v8);
    swift_release(v7);
    __chkstk_darwin(v9);
    sub_1000057B4((uint64_t *)&unk_1004BD620);
    UnfairLock.locked<A>(_:)((void (*)(void))sub_1000E4E90);
    *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  }
  return result;
}

void sub_1000E32E4(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE v13[24];
  _BYTE v14[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v14, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  v7 = Strong;
  if (!Strong)
    goto LABEL_5;
  v8 = (unint64_t *)(Strong + OBJC_IVAR____TtC9MusicCore11BagProvider_singleFireObservers);
  swift_beginAccess(Strong + OBJC_IVAR____TtC9MusicCore11BagProvider_singleFireObservers, v13, 33, 0);
  swift_retain(a2);
  v9 = sub_1000E4FC8(v8, a2);
  swift_release(a2);
  v10 = *v8;
  if (*v8 >> 62)
  {
    if (v10 < 0)
      v12 = *v8;
    else
      v12 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease(v10);
    if (v11 >= v9)
      goto LABEL_4;
  }
  else
  {
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v11 >= v9)
    {
LABEL_4:
      sub_1000603E0(v9, v11);
      swift_endAccess(v13);
      swift_release(v7);
LABEL_5:
      *a3 = v7 == 0;
      return;
    }
  }
  __break(1u);
}

uint64_t sub_1000E3414(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE v9[24];

  v3 = (_QWORD *)(a1 + OBJC_IVAR____TtC9MusicCore11BagProvider_singleFireObservers);
  swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore11BagProvider_singleFireObservers, v9, 33, 0);
  v4 = swift_retain(a2);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v4);
  v6 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v5 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v6 >= v5 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
  v7 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, a2);
  specialized Array._endMutation()(v7);
  return swift_endAccess(v9);
}

void sub_1000E34B8(char a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  _QWORD aBlock[5];
  uint64_t v10;

  v2 = v1;
  UnfairLock.locked<A>(_:)((void (*)(void))sub_1000E52E0);
  if (LOBYTE(aBlock[0]) == 1)
  {
    UnfairLock.locked<A>(_:)(sub_1000E5318);
    v4 = objc_msgSend((id)objc_opt_self(ICUserIdentity), "activeAccount");
    v5 = objc_msgSend(objc_allocWithZone((Class)ICStoreRequestContext), "initWithIdentity:clientInfo:", v4, *(_QWORD *)(v1 + 16));

    v6 = objc_msgSend((id)objc_opt_self(ICURLBagProvider), "sharedBagProvider");
    aBlock[4] = sub_1000E532C;
    v10 = v2;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100021234;
    aBlock[3] = &unk_100472B38;
    v7 = _Block_copy(aBlock);
    v8 = v10;
    swift_retain(v2);
    objc_msgSend(v6, "getBagForRequestContext:forceRefetch:withCompletionHandler:", v5, a1 & 1, v7, swift_release(v8).n128_f64[0]);
    _Block_release(v7);

  }
}

void sub_1000E363C(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v6;
  id v7;
  id *v8;
  id v9;
  void *v10;
  _BYTE v11[24];

  swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore11BagProvider_durableObservers, v11, 33, 0);
  v6 = sub_1000057B4(&qword_1004BD618);
  WeakArray.append(_:)(a2, v6);
  swift_endAccess(v11);
  v7 = 0;
  v8 = (id *)(a1 + OBJC_IVAR____TtC9MusicCore11BagProvider_result);
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC9MusicCore11BagProvider_result + 8) == 1)
  {
    v7 = *v8;
    v9 = *v8;
  }
  v10 = *a3;
  *a3 = v7;

}

id sub_1000E36F4@<X0>(_QWORD *a1@<X8>)
{
  return sub_1000E3708(a1);
}

id sub_1000E3708@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  id *v3;
  id v4;
  id result;

  v3 = (id *)(v1 + OBJC_IVAR____TtC9MusicCore11BagProvider_result);
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC9MusicCore11BagProvider_result + 8) == 1)
  {
    v4 = *v3;
    result = *v3;
  }
  else
  {
    v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_1000E3760()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000E3784()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

id BagProvider.clientInfo.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t sub_1000E37C0@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  _BYTE v14[24];
  _BYTE v15[24];

  v3 = sub_1000057B4(&qword_1004BD3B0);
  v4 = __chkstk_darwin(v3);
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v14[-v7];
  v9 = v1 + OBJC_IVAR____TtC9MusicCore11BagProvider____lazy_storage___signpost;
  swift_beginAccess(v1 + OBJC_IVAR____TtC9MusicCore11BagProvider____lazy_storage___signpost, v15, 0, 0);
  sub_1000E53C0(v9, (uint64_t)v8);
  v10 = type metadata accessor for Signpost(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1)
    return sub_1000E5494((uint64_t)v8, (uint64_t)a1);
  sub_1000E4B1C((uint64_t)v8);
  if (qword_1004B8C10 != -1)
    swift_once(&qword_1004B8C10, sub_10010FC5C);
  v12 = (id)static OS_os_log.musicBag;
  swift_retain(v1);
  Signpost.init(name:object:log:)((uint64_t)"Bag", 3, 2, v1, v12, a1);
  sub_1000E5408((uint64_t)a1, (uint64_t)v6);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
  swift_beginAccess(v9, v14, 33, 0);
  sub_1000E544C((uint64_t)v6, v9);
  return swift_endAccess(v14);
}

uint64_t sub_1000E3970(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  CFIndex location;
  uint64_t v19;
  id v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD v29[5];

  v2 = v1;
  v4 = type metadata accessor for Signpost(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v29[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 56))(v1 + OBJC_IVAR____TtC9MusicCore11BagProvider____lazy_storage___signpost, 1, 1);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC9MusicCore11BagProvider_bindings) = _swiftEmptyArrayStorage;
  v8 = OBJC_IVAR____TtC9MusicCore11BagProvider_lock;
  v9 = type metadata accessor for UnfairLock();
  swift_allocObject(v9, 24, 7);
  *(_QWORD *)(v1 + v8) = UnfairLock.init()();
  *(_QWORD *)(v1 + OBJC_IVAR____TtC9MusicCore11BagProvider_singleFireObservers) = _swiftEmptyArrayStorage;
  v10 = OBJC_IVAR____TtC9MusicCore11BagProvider_durableObservers;
  v11 = type metadata accessor for BagProvider.Observer();
  *(_QWORD *)(v2 + v10) = WeakArray.init(_:)((uint64_t)_swiftEmptyArrayStorage, v11);
  if (qword_1004B8C10 != -1)
    swift_once(&qword_1004B8C10, sub_10010FC5C);
  Logger.init(_:)((id)static OS_os_log.musicBag);
  *(_BYTE *)(v2 + OBJC_IVAR____TtC9MusicCore11BagProvider_isFetching) = 0;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC9MusicCore11BagProvider_deferReload) = 0;
  v12 = OBJC_IVAR____TtC9MusicCore11BagProvider_retry;
  *(_QWORD *)(v2 + v12) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for BagProvider.Retry()), "init");
  *(_QWORD *)(v2 + 16) = a1;
  v13 = v2 + OBJC_IVAR____TtC9MusicCore11BagProvider_result;
  *(_QWORD *)v13 = 0;
  *(_BYTE *)(v13 + 8) = 2;
  v14 = a1;
  sub_1000E37C0(v6);
  Signpost.begin(dso:)((uint64_t)&_mh_execute_header);
  sub_1000E5374((uint64_t)v6);
  sub_1000E34B8(0);
  type metadata accessor for Whitetail.Binding();
  if (qword_1004B8BC8 != -1)
    swift_once(&qword_1004B8BC8, sub_1000E4EA8);
  v16 = (void *)qword_1004BD390;
  v17 = qword_1004BD390;
  location = CFRange.init(_:)(*(__C::_NSRange *)(&v15 - 1)).location;
  v29[3] = &type metadata for DistributedNotificationTrigger;
  v29[4] = &protocol witness table for DistributedNotificationTrigger;
  v29[0] = location;
  v19 = swift_allocObject(&unk_100472A68, 24, 7);
  swift_weakInit(v19 + 16, v2);
  v20 = v16;
  v21 = Whitetail.Binding.__allocating_init(_:needsInitialConfiguration:configurationBlock:)(v29, 0, (uint64_t)sub_1000E54D8, v19);
  v22 = (_QWORD *)(v2 + OBJC_IVAR____TtC9MusicCore11BagProvider_bindings);
  swift_beginAccess(v2 + OBJC_IVAR____TtC9MusicCore11BagProvider_bindings, v29, 33, 0);
  swift_retain(v21);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v23);
  v25 = *(_QWORD *)((*v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v24 = *(_QWORD *)((*v22 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v25 >= v24 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
  v26 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v21);
  specialized Array._endMutation()(v26);
  swift_endAccess(v29);
  swift_release(v21);

  return v2;
}

double sub_1000E3C60(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  double result;
  uint64_t v4;
  _BYTE v5[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v4 = Strong;
    sub_1000E3CB4();
    *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  }
  return result;
}

void sub_1000E3CB4()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void *v5;
  char v6;

  UnfairLock.locked<A>(_:)((void (*)(void))sub_1000E54E0);

  if (v6 == 1)
  {
    UnfairLock.locked<A>(_:)(sub_1000E5520);
    __chkstk_darwin(v0);
    UnfairLock.locked<A>(_:)(sub_1000E5360);
    v1 = swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    v2 = Logger.logObject.getter(v1);
    v3 = static os_log_type_t.default.getter(v2);
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Notification triggered to update bag: storefrontChanged", v4, 2u);
      swift_slowDealloc(v4, -1, -1);
    }

    sub_1000E34B8(1);
  }
}

void sub_1000E3E28(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)();
  void *v12;
  char v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(void *, __n128);
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  id v24;
  char v25;
  char v26;
  uint64_t *v27;
  _QWORD v28[2];
  char *v29;
  uint64_t v30;
  uint64_t v31;

  v6 = type metadata accessor for Signpost(0);
  __chkstk_darwin(v6);
  v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a3 + OBJC_IVAR____TtC9MusicCore11BagProvider_lock);
  UnfairLock.locked<A>(_:)((void (*)(void))sub_1000E534C);
  if ((v31 & 1) != 0)
  {
    sub_1000E34B8(1);
    v11 = sub_1000E5560;
LABEL_23:
    UnfairLock.locked<A>(_:)(v11);
    return;
  }
  v12 = a1;
  if (!a1)
  {
    if (!a2)
      goto LABEL_25;
    swift_errorRetain(a2);
    v12 = (void *)_convertErrorToNSError(_:)(a2);
    v10 = swift_errorRelease(a2);
  }
  v31 = (uint64_t)_swiftEmptyArrayStorage;
  __chkstk_darwin(v10);
  v28[-4] = a3;
  v28[-3] = v12;
  v25 = v13;
  v26 = 1;
  v27 = &v31;
  v14 = a1;
  UnfairLock.locked<A>(_:)(sub_1000E5360);
  if (!a1)
  {
LABEL_22:
    swift_bridgeObjectRelease(v31);
    sub_1000E37C0(v8);
    Signpost.end(dso:)((uint64_t)&_mh_execute_header);

    sub_1000E5374((uint64_t)v8);
    v11 = sub_1000E53B0;
    goto LABEL_23;
  }
  v15 = v31;
  v29 = v8;
  v30 = v9;
  v28[1] = (char *)&type metadata for () + 8;
  if ((unint64_t)v31 >> 62)
  {
    if (v31 < 0)
      v23 = v31;
    else
      v23 = v31 & 0xFFFFFFFFFFFFFF8;
    v24 = v12;
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter(v23);
    if (v16)
      goto LABEL_9;
    goto LABEL_21;
  }
  v16 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
  v17 = v12;
  swift_bridgeObjectRetain();
  if (!v16)
  {
LABEL_21:

    swift_bridgeObjectRelease(v15);
    v8 = v29;
    goto LABEL_22;
  }
LABEL_9:
  if (v16 >= 1)
  {
    v18 = 0;
    while ((v15 & 0xC000000000000001) == 0)
    {
      v19 = *(_QWORD *)(v15 + 8 * v18 + 32);
      swift_retain(v19);
      v20 = *(void (**)(void *, __n128))(v19 + 24);
      if (v20)
        goto LABEL_16;
LABEL_11:
      ++v18;
      swift_release(v19);
      if (v16 == v18)
        goto LABEL_21;
    }
    v19 = specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v15);
    v20 = *(void (**)(void *, __n128))(v19 + 24);
    if (!v20)
      goto LABEL_11;
LABEL_16:
    v21 = *(_QWORD *)(v19 + 32);
    v22 = swift_retain(v21);
    v20(v12, v22);
    sub_10000DCF8((uint64_t)v20, v21);
    goto LABEL_11;
  }
  __break(1u);
LABEL_25:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001003AA440, "MusicCore/BagProvider.swift", 27, 2, 149, 0);
  __break(1u);
}

uint64_t sub_1000E4138(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore11BagProvider_durableObservers, v5, 33, 0);
  v3 = sub_1000057B4(&qword_1004BD618);
  WeakArray.remove(_:)(a2, v3);
  return swift_endAccess(v5);
}

double sub_1000E41B0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t Strong;
  char *v19;
  double result;

  v1 = v0;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC9MusicCore11BagProvider_result);
  if (!*(_BYTE *)(v0 + OBJC_IVAR____TtC9MusicCore11BagProvider_result + 8))
  {
    v12 = v2;
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = swift_slowAlloc(12, -1);
      *(_DWORD *)v15 = 134217984;
      *(_QWORD *)(v15 + 4) = objc_msgSend(v12, "code");

      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Error retrieving bag: %ld", (uint8_t *)v15, 0xCu);
      swift_slowDealloc(v15, -1, -1);
    }
    else
    {

    }
    v16 = *(char **)(v1 + OBJC_IVAR____TtC9MusicCore11BagProvider_retry);
    v17 = &v16[OBJC_IVAR____TtCC9MusicCore11BagProviderP33_D1F028703756EAFCB4E62A24E619467F5Retry_provider];
    Strong = swift_weakLoadStrong(&v16[OBJC_IVAR____TtCC9MusicCore11BagProviderP33_D1F028703756EAFCB4E62A24E619467F5Retry_provider]);
    swift_weakAssign(v17, v1);
    v19 = v16;
    swift_retain(v1);
    sub_1000E4680(Strong);

    swift_release(Strong);
    v11 = v1;
    goto LABEL_11;
  }
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC9MusicCore11BagProvider_result + 8) == 1)
  {
    v3 = v2;
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Successfully loaded a bag from iTunesCloud", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

    v7 = *(char **)(v1 + OBJC_IVAR____TtC9MusicCore11BagProvider_retry);
    v8 = &v7[OBJC_IVAR____TtCC9MusicCore11BagProviderP33_D1F028703756EAFCB4E62A24E619467F5Retry_provider];
    v9 = swift_weakLoadStrong(&v7[OBJC_IVAR____TtCC9MusicCore11BagProviderP33_D1F028703756EAFCB4E62A24E619467F5Retry_provider]);
    swift_weakAssign(v8, 0);
    v10 = v7;
    sub_1000E4680(v9);

    v11 = v9;
LABEL_11:
    *(_QWORD *)&result = swift_release(v11).n128_u64[0];
  }
  return result;
}

void sub_1000E43F0(uint64_t a1, void *a2, char a3, char a4, uint64_t *a5)
{
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20[24];
  char v21[24];

  v8 = a1 + OBJC_IVAR____TtC9MusicCore11BagProvider_result;
  v9 = *(void **)(a1 + OBJC_IVAR____TtC9MusicCore11BagProvider_result);
  *(_QWORD *)v8 = a2;
  *(_BYTE *)(v8 + 8) = a3;
  v10 = a2;

  sub_1000E41B0();
  if ((a4 & 1) != 0)
  {
    v11 = (uint64_t *)(a1 + OBJC_IVAR____TtC9MusicCore11BagProvider_durableObservers);
    swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore11BagProvider_durableObservers, v21, 0, 0);
    v12 = *v11;
    v13 = type metadata accessor for BagProvider.Observer();
    v14 = swift_bridgeObjectRetain();
    v17 = WeakArray.allElements.getter(v14, v13, v15, v16);
    swift_bridgeObjectRelease(v12);
    swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore11BagProvider_singleFireObservers, v20, 0, 0);
    v18 = swift_bridgeObjectRetain();
    sub_1000AA838(v18);
    v19 = *a5;
    *a5 = v17;
    swift_bridgeObjectRelease(v19);
  }
}

uint64_t BagProvider.Observer.deinit()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;

  Strong = swift_weakLoadStrong(v0 + 16);
  if (Strong)
  {
    v2 = Strong;
    __chkstk_darwin(Strong);
    UnfairLock.locked<A>(_:)((void (*)(void))sub_1000E45A8);
    swift_release(v2);
  }
  swift_weakDestroy(v0 + 16);
  sub_10000DCF8(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return v0;
}

uint64_t sub_1000E45A8()
{
  uint64_t v0;

  return sub_1000E4138(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t BagProvider.Observer.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;

  Strong = swift_weakLoadStrong(v0 + 16);
  if (Strong)
  {
    v2 = Strong;
    __chkstk_darwin(Strong);
    UnfairLock.locked<A>(_:)((void (*)(void))sub_1000E5578);
    swift_release(v2);
  }
  swift_weakDestroy(v0 + 16);
  sub_10000DCF8(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

void sub_1000E4680(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t Strong;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  char **v21;
  uint64_t v22;
  os_log_type_t v23;
  id v24;
  uint64_t v25;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v25 - v9;
  v11 = v2 + OBJC_IVAR____TtCC9MusicCore11BagProviderP33_D1F028703756EAFCB4E62A24E619467F5Retry_provider;
  Strong = swift_weakLoadStrong(v2 + OBJC_IVAR____TtCC9MusicCore11BagProviderP33_D1F028703756EAFCB4E62A24E619467F5Retry_provider);
  v13 = Strong;
  if (!a1)
  {
    if (!Strong)
      return;
    swift_release(Strong);
LABEL_7:
    v14 = swift_weakLoadStrong(v11);
    swift_release(v14);
    v15 = swift_weakLoadStrong(v11);
    v16 = v15;
    if (v14)
    {
      if (v15)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, v15 + OBJC_IVAR____TtC9MusicCore11BagProvider_logger, v4);
        v17 = swift_release(v16);
        v18 = Logger.logObject.getter(v17);
        v19 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v18, v19))
        {
          v21 = &selRef_registerObserver_;
          goto LABEL_19;
        }
        v20 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Beginning observation to retry loading bag", v20, 2u);
        v21 = &selRef_registerObserver_;
LABEL_14:
        swift_slowDealloc(v20, -1, -1);
LABEL_19:

        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
        goto LABEL_20;
      }
      v21 = &selRef_registerObserver_;
    }
    else
    {
      if (v15)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v15 + OBJC_IVAR____TtC9MusicCore11BagProvider_logger, v4);
        v22 = swift_release(v16);
        v18 = Logger.logObject.getter(v22);
        v23 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v18, v23))
        {
          v21 = &selRef_unregisterObserver_;
          v10 = v8;
          goto LABEL_19;
        }
        v20 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v23, "Stopping observation to retry loading bag", v20, 2u);
        v21 = &selRef_unregisterObserver_;
        v10 = v8;
        goto LABEL_14;
      }
      v21 = &selRef_unregisterObserver_;
    }
LABEL_20:
    v24 = objc_msgSend((id)objc_opt_self(ICEnvironmentMonitor), "sharedMonitor");
    objc_msgSend(v24, *v21, v2);

    return;
  }
  if (!Strong)
    goto LABEL_7;
  swift_release(Strong);
  if (v13 != a1)
    goto LABEL_7;
}

id sub_1000E49F4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BagProvider.Retry();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t BagProvider.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000E4B1C(v0 + OBJC_IVAR____TtC9MusicCore11BagProvider____lazy_storage___signpost);
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC9MusicCore11BagProvider_lock));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC9MusicCore11BagProvider_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  return v0;
}

uint64_t sub_1000E4B1C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000057B4(&qword_1004BD3B0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t BagProvider.__deallocating_deinit()
{
  uint64_t v0;

  BagProvider.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000E4B80()
{
  return type metadata accessor for BagProvider(0);
}

uint64_t type metadata accessor for BagProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_1004BD420;
  if (!qword_1004BD420)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BagProvider);
  return result;
}

void sub_1000E4BC4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[11];

  v6[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_1000E4C94(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v6[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4 = type metadata accessor for Logger(319);
    if (v5 <= 0x3F)
    {
      v6[6] = *(_QWORD *)(v4 - 8) + 64;
      v6[7] = "\t";
      v6[8] = &unk_1003CD2F8;
      v6[9] = &unk_1003CD2F8;
      v6[10] = (char *)&value witness table for Builtin.UnknownObject + 64;
      swift_updateClassMetadata2(a1, 256, 11, v6, a1 + 80);
    }
  }
}

void sub_1000E4C94(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1004BD430)
  {
    v2 = type metadata accessor for Signpost(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1004BD430);
  }
}

uint64_t type metadata accessor for BagProvider.Retry()
{
  return objc_opt_self(_TtCC9MusicCore11BagProviderP33_D1F028703756EAFCB4E62A24E619467F5Retry);
}

uint64_t initializeBufferWithCopyOfBuffer for BagProvider.Result(uint64_t a1, uint64_t a2)
{
  void *v3;
  char v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  v5 = v3;
  return a1;
}

uint64_t assignWithCopy for BagProvider.Result(uint64_t a1, uint64_t a2)
{
  void *v3;
  char v4;
  void *v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(_BYTE *)(a2 + 8);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  v6 = v3;

  return a1;
}

uint64_t initializeWithTake for BagProvider.Result(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for BagProvider.Result(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;

  return a1;
}

uint64_t getEnumTagSinglePayload for BagProvider.Result(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BagProvider.Result(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000E4E50(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_1000E4E68(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for BagProvider.Result()
{
  return &type metadata for BagProvider.Result;
}

void sub_1000E4E90(BOOL *a1@<X8>)
{
  uint64_t v1;

  sub_1000E32E4(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

NSString sub_1000E4EA8()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_1004BD390 = (uint64_t)result;
  return result;
}

uint64_t sub_1000E4EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((unint64_t)a1 >> 62)
    goto LABEL_13;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v4)
  {
    v5 = 0;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
        swift_unknownObjectRelease(v6);
        if (v6 == a2)
          return v5;
      }
      else if (*(_QWORD *)(a1 + 8 * v5 + 32) == a2)
      {
        return v5;
      }
      if (__OFADD__(v5, 1))
        break;
      if (++v5 == v4)
        return 0;
    }
    __break(1u);
LABEL_13:
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter(v8);
    swift_bridgeObjectRelease(a1);
  }
  return 0;
}

uint64_t sub_1000E4FC8(unint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t i;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = *a1;
  v6 = swift_bridgeObjectRetain();
  v7 = sub_1000E4EDC(v6, a2);
  v9 = v8;
  swift_bridgeObjectRelease(v5);
  if (v2)
    return v7;
  if ((v9 & 1) == 0)
  {
    v10 = v7 + 1;
    if (__OFADD__(v7, 1))
      goto LABEL_57;
    v9 = *a1;
    if (*a1 >> 62)
    {
LABEL_58:
      if ((v9 & 0x8000000000000000) != 0)
        v29 = v9;
      else
        v29 = v9 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v30 = _CocoaArrayWrapper.endIndex.getter(v29);
      swift_bridgeObjectRelease(v9);
      if (v10 != v30)
        goto LABEL_6;
    }
    else if (v10 != *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      for (i = v7 + 5; ; ++i)
      {
        v9 = i - 4;
        v12 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
          break;
        if ((v9 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
          goto LABEL_58;
        }
        if (v9 >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_48;
        if (*(_QWORD *)(v12 + 8 * i) != a2)
          goto LABEL_11;
LABEL_31:
        v10 = i - 3;
        if (__OFADD__(v9, 1))
          goto LABEL_49;
        v23 = *a1;
        if (*a1 >> 62)
        {
          if (v23 < 0)
            v26 = *a1;
          else
            v26 = v23 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain();
          v24 = _CocoaArrayWrapper.endIndex.getter(v26);
          swift_bridgeObjectRelease(v23);
        }
        else
        {
          v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        if (v10 == v24)
          return v7;
      }
      v25 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v12);
      swift_unknownObjectRelease(v25);
      if (v25 == a2)
        goto LABEL_31;
LABEL_11:
      if (v9 == v7)
      {
LABEL_30:
        if (__OFADD__(v7++, 1))
          goto LABEL_50;
        goto LABEL_31;
      }
      v10 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, *a1);
        v10 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
        {
LABEL_16:
          if ((v9 & 0x8000000000000000) != 0)
            goto LABEL_53;
          if (v9 >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_54;
          v14 = *(_QWORD *)(v10 + 8 * i);
          swift_retain(v14);
          goto LABEL_19;
        }
      }
      else
      {
        if ((v7 & 0x8000000000000000) != 0)
          goto LABEL_51;
        if (v7 >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_52;
        v13 = *(_QWORD *)(v10 + 8 * v7 + 32);
        swift_retain(v13);
        if ((v10 & 0xC000000000000001) == 0)
          goto LABEL_16;
      }
      v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v10);
      v10 = *a1;
LABEL_19:
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v10);
      *a1 = v10;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v10 < 0 || (v10 & 0x4000000000000000) != 0)
      {
        v10 = sub_10001118C(v10);
        *a1 = v10;
      }
      v16 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 8 * v7 + 0x20);
      *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 8 * v7 + 0x20) = v14;
      swift_release(v16);
      specialized Array._endMutation()(v17);
      v10 = *a1;
      v18 = swift_isUniquelyReferenced_nonNull_bridgeObject(*a1);
      *a1 = v10;
      if (!v18 || v10 < 0 || (v10 & 0x4000000000000000) != 0)
      {
        v10 = sub_10001118C(v10);
        *a1 = v10;
      }
      if ((v9 & 0x8000000000000000) != 0)
        goto LABEL_55;
      v19 = v10 & 0xFFFFFFFFFFFFFF8;
      if (v9 >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_56;
      v20 = *(_QWORD *)(v19 + 8 * i);
      *(_QWORD *)(v19 + 8 * i) = v13;
      swift_release(v20);
      specialized Array._endMutation()(v21);
      goto LABEL_30;
    }
    return v7;
  }
  v27 = *a1;
  if (!((unint64_t)v27 >> 62))
    return *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v27 < 0)
    v31 = v27;
  else
    v31 = v27 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v32 = _CocoaArrayWrapper.endIndex.getter(v31);
  swift_bridgeObjectRelease(v27);
  return v32;
}

void sub_1000E52E0(BOOL *a1@<X8>)
{
  uint64_t v1;

  *a1 = (*(_BYTE *)(v1 + OBJC_IVAR____TtC9MusicCore11BagProvider_isFetching) & 1) == 0
     && *(_BYTE *)(v1 + OBJC_IVAR____TtC9MusicCore11BagProvider_result + 8) != 1;
}

void sub_1000E5318()
{
  uint64_t v0;

  *(_BYTE *)(v0 + OBJC_IVAR____TtC9MusicCore11BagProvider_isFetching) = 1;
}

void sub_1000E532C(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000E3E28(a1, a2, v2);
}

uint64_t sub_1000E5334(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000E5344(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000E534C(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + OBJC_IVAR____TtC9MusicCore11BagProvider_deferReload);
}

void sub_1000E5360()
{
  sub_1000E553C();
}

uint64_t sub_1000E5374(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Signpost(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1000E53B0()
{
  uint64_t v0;

  *(_BYTE *)(v0 + OBJC_IVAR____TtC9MusicCore11BagProvider_isFetching) = 0;
}

uint64_t sub_1000E53C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000057B4(&qword_1004BD3B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E5408(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Signpost(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E544C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000057B4(&qword_1004BD3B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E5494(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Signpost(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double sub_1000E54D8()
{
  uint64_t v0;

  return sub_1000E3C60(v0);
}

id sub_1000E54E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  char v3;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC9MusicCore11BagProvider_result);
  v3 = *(_BYTE *)(v1 + OBJC_IVAR____TtC9MusicCore11BagProvider_result + 8);
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  return v2;
}

void sub_1000E5520()
{
  uint64_t v0;

  *(_BYTE *)(v0 + OBJC_IVAR____TtC9MusicCore11BagProvider_deferReload) = *(_BYTE *)(v0
                                                                                  + OBJC_IVAR____TtC9MusicCore11BagProvider_isFetching);
}

void sub_1000E553C()
{
  uint64_t v0;

  sub_1000E43F0(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_BYTE *)(v0 + 32), *(_BYTE *)(v0 + 33), *(uint64_t **)(v0 + 40));
}

void sub_1000E5560()
{
  sub_1000E53B0();
}

uint64_t sub_1000E5578()
{
  return sub_1000E45A8();
}

uint64_t TabIdentifier.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000E55C0 + 4 * byte_1003CD340[a1]))(0x7972617262696CLL, 0xE700000000000000);
}

uint64_t sub_1000E55C0()
{
  return 0x6F4E6E657473696CLL;
}

uint64_t sub_1000E55DC()
{
  return 0x6573776F7262;
}

uint64_t sub_1000E55F0()
{
  return 0x6F69646172;
}

uint64_t sub_1000E5604()
{
  return 0x686372616573;
}

uint64_t sub_1000E5618()
{
  return 0x736F65646976;
}

_UNKNOWN **static TabIdentifier.allCases.getter()
{
  return &off_100467B80;
}

void sub_1000E563C(char *a1)
{
  sub_100047FF8(*a1);
}

void sub_1000E5648()
{
  char *v0;

  sub_1000DDD8C(*v0);
}

void sub_1000E5650()
{
  __asm { BR              X10 }
}

uint64_t sub_1000E568C(uint64_t a1)
{
  String.hash(into:)(a1, 0x6F4E6E657473696CLL, 0xE900000000000077);
  return swift_bridgeObjectRelease(0xE900000000000077);
}

void sub_1000E570C(uint64_t a1)
{
  char *v1;

  sub_1000DE188(a1, *v1);
}

unint64_t sub_1000E5714@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s9MusicCore13TabIdentifierO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000E5740()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1000E5770 + 4 * byte_1003CD34C[*v0]))();
}

void sub_1000E5770(_QWORD *a1@<X8>)
{
  *a1 = 0x6F4E6E657473696CLL;
  a1[1] = 0xE900000000000077;
}

void sub_1000E5790(_QWORD *a1@<X8>)
{
  *a1 = 0x6573776F7262;
  a1[1] = 0xE600000000000000;
}

void sub_1000E57A8(_QWORD *a1@<X8>)
{
  *a1 = 0x6F69646172;
  a1[1] = 0xE500000000000000;
}

void sub_1000E57C0(_QWORD *a1@<X8>)
{
  *a1 = 0x686372616573;
  a1[1] = 0xE600000000000000;
}

void sub_1000E57D8(_QWORD *a1@<X8>)
{
  *a1 = 0x736F65646976;
  a1[1] = 0xE600000000000000;
}

void sub_1000E57F0(_QWORD *a1@<X8>)
{
  *a1 = &off_100467B80;
}

void sub_1000E5800(char *a1)
{
  sub_1000481A8(*a1);
}

void sub_1000E580C()
{
  char *v0;

  sub_1000DE3B0(0, *v0);
}

void sub_1000E5818()
{
  __asm { BR              X10 }
}

uint64_t sub_1000E5854(uint64_t a1)
{
  String.hash(into:)(a1, 0x756F795F726F66, 0xE700000000000000);
  return swift_bridgeObjectRelease(0xE700000000000000);
}

void sub_1000E58E8(uint64_t a1)
{
  char *v1;

  sub_1000DE3B0(a1, *v1);
}

unint64_t sub_1000E58F0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000E59E0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000E591C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1000E594C + 4 * byte_1003CD359[*v0]))();
}

void sub_1000E594C(_QWORD *a1@<X8>)
{
  *a1 = 0x756F795F726F66;
  a1[1] = 0xE700000000000000;
}

void sub_1000E5968(_QWORD *a1@<X8>)
{
  *a1 = 0x6E5F6E657473696CLL;
  a1[1] = 0xEA0000000000776FLL;
}

void sub_1000E5988(_QWORD *a1@<X8>)
{
  *a1 = 0x6573776F7262;
  a1[1] = 0xE600000000000000;
}

void sub_1000E59A0(_QWORD *a1@<X8>)
{
  *a1 = 0x6F69646172;
  a1[1] = 0xE500000000000000;
}

unint64_t sub_1000E59E0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100465F00, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7)
    return 7;
  else
    return v3;
}

unint64_t _s9MusicCore13TabIdentifierO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100467AD0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

unint64_t sub_1000E5A74()
{
  unint64_t result;

  result = qword_1004BD630;
  if (!qword_1004BD630)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TabIdentifier, &type metadata for TabIdentifier);
    atomic_store(result, (unint64_t *)&qword_1004BD630);
  }
  return result;
}

unint64_t sub_1000E5ABC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1004BD638;
  if (!qword_1004BD638)
  {
    v1 = sub_100009788(&qword_1004BD640);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1004BD638);
  }
  return result;
}

unint64_t sub_1000E5B0C()
{
  unint64_t result;

  result = qword_1004BD648;
  if (!qword_1004BD648)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TabIdentifier, &type metadata for TabIdentifier);
    atomic_store(result, (unint64_t *)&qword_1004BD648);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TabIdentifier(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TabIdentifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1000E5C2C + 4 * byte_1003CD365[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1000E5C60 + 4 * byte_1003CD360[v4]))();
}

uint64_t sub_1000E5C60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E5C68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000E5C70);
  return result;
}

uint64_t sub_1000E5C7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000E5C84);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1000E5C88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E5C90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TabIdentifier()
{
  return &type metadata for TabIdentifier;
}

uint64_t getEnumTagSinglePayload for BagTabIdentifier(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BagTabIdentifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1000E5D88 + 4 * byte_1003CD36F[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1000E5DBC + 4 * byte_1003CD36A[v4]))();
}

uint64_t sub_1000E5DBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E5DC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000E5DCCLL);
  return result;
}

uint64_t sub_1000E5DD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000E5DE0);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1000E5DE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E5DEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BagTabIdentifier()
{
  return &type metadata for BagTabIdentifier;
}

unint64_t sub_1000E5E0C()
{
  unint64_t result;

  result = qword_1004BD650;
  if (!qword_1004BD650)
  {
    result = swift_getWitnessTable(&unk_1003CD52C, &type metadata for BagTabIdentifier);
    atomic_store(result, (unint64_t *)&qword_1004BD650);
  }
  return result;
}

uint64_t Playlist.hasActiveCollaboration.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v18;
  uint64_t v20;

  v0 = sub_1000057B4(&qword_1004BD680);
  __chkstk_darwin(v0);
  v2 = (char *)&v20 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1000057B4(&qword_1004BD688);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v20 - v8;
  Playlist.collaboration.getter(v7);
  v10 = type metadata accessor for Playlist.Collaboration(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v2, 1, v10) == 1)
  {
    sub_10000FE2C((uint64_t)v2, &qword_1004BD680);
    v12 = type metadata accessor for Playlist.Collaborator.Status(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v9, 1, 1, v12);
LABEL_13:
    v18 = 0;
    goto LABEL_14;
  }
  Playlist.Collaboration.collaboratorStatus.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v2, v10);
  v13 = type metadata accessor for Playlist.Collaborator.Status(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v9, 1, v13) == 1)
    goto LABEL_13;
  sub_10000FEB4((uint64_t)v9, (uint64_t)v6, &qword_1004BD688);
  v15 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v6, v13);
  if (v15 != enum case for Playlist.Collaborator.Status.host(_:)
    && v15 != enum case for Playlist.Collaborator.Status.joined(_:)
    && v15 != enum case for Playlist.Collaborator.Status.pending(_:))
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v13);
    goto LABEL_13;
  }
  v18 = 1;
LABEL_14:
  sub_10000FE2C((uint64_t)v9, &qword_1004BD688);
  return v18;
}

uint64_t static Collaboration.Setup.contextualImageName(active:)(char a1)
{
  if ((a1 & 1) != 0)
    return 0x322E6E6F73726570;
  else
    return 0xD000000000000011;
}

uint64_t sub_1000E6084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E60DC(a1, a2, a3, (uint64_t)&unk_100473130, (uint64_t)&type metadata for () + 8, (uint64_t)&unk_1004BDA80);
}

uint64_t sub_1000E60A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E6248(a1, a2, a3, (uint64_t)&unk_100473338, (uint64_t *)&unk_1004BD620, (uint64_t)&unk_1004BDB90);
}

uint64_t sub_1000E60C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E60DC(a1, a2, a3, (uint64_t)&unk_1004730E0, (uint64_t)&type metadata for Bool, (uint64_t)&unk_1004BDA58);
}

uint64_t sub_1000E60DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD v25[4];

  v12 = type metadata accessor for TaskPriority(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a1, 1, v12) == 1)
  {
    sub_10000FE2C(a1, (uint64_t *)&unk_1004BFBC0);
    v14 = 7168;
    v15 = *(_QWORD *)(a3 + 16);
    if (v15)
    {
LABEL_3:
      v16 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType();
      swift_unknownObjectRetain(v15);
      v18 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
      v20 = v19;
      swift_unknownObjectRelease(v15);
      goto LABEL_6;
    }
  }
  else
  {
    v21 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
    v14 = v21 | 0x1C00;
    v15 = *(_QWORD *)(a3 + 16);
    if (v15)
      goto LABEL_3;
  }
  v18 = 0;
  v20 = 0;
LABEL_6:
  v22 = swift_allocObject(a4, 32, 7);
  *(_QWORD *)(v22 + 16) = a2;
  *(_QWORD *)(v22 + 24) = a3;
  if (v20 | v18)
  {
    v25[0] = 0;
    v25[1] = 0;
    v23 = v25;
    v25[2] = v18;
    v25[3] = v20;
  }
  else
  {
    v23 = 0;
  }
  return swift_task_create(v14, v23, a5, a6, v22);
}

uint64_t sub_1000E622C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E6248(a1, a2, a3, (uint64_t)&unk_100473108, &qword_1004BDA70, (uint64_t)&unk_1004BDA68);
}

uint64_t sub_1000E6248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD v27[4];

  v12 = type metadata accessor for TaskPriority(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a1, 1, v12) == 1)
  {
    sub_10000FE2C(a1, (uint64_t *)&unk_1004BFBC0);
    v15 = 7168;
    v16 = *(_QWORD *)(a3 + 16);
    if (v16)
    {
LABEL_3:
      v17 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType();
      swift_unknownObjectRetain(v16);
      v19 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v17);
      v21 = v20;
      swift_unknownObjectRelease(v16);
      goto LABEL_6;
    }
  }
  else
  {
    v22 = TaskPriority.rawValue.getter(v14);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
    v15 = v22 | 0x1C00;
    v16 = *(_QWORD *)(a3 + 16);
    if (v16)
      goto LABEL_3;
  }
  v19 = 0;
  v21 = 0;
LABEL_6:
  v23 = swift_allocObject(a4, 32, 7);
  *(_QWORD *)(v23 + 16) = a2;
  *(_QWORD *)(v23 + 24) = a3;
  v24 = sub_1000057B4(a5);
  if (v21 | v19)
  {
    v27[0] = 0;
    v27[1] = 0;
    v25 = v27;
    v27[2] = v19;
    v27[3] = v21;
  }
  else
  {
    v25 = 0;
  }
  return swift_task_create(v15, v25, v24, a6, v23);
}

uint64_t sub_1000E63A4(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[9];

  if (*(_QWORD *)(a2 + 16))
  {
    Hasher.init(_seed:)(v9);
    v4 = ApplicationCapabilities.Service.rawValue.getter(a1);
    v6 = v5;
    String.hash(into:)(v9, v4, v5);
    swift_bridgeObjectRelease(v6);
    v7 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(a2 + 32));
    if (((*(_QWORD *)(a2 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
      __asm { BR              X9 }
  }
  return 0;
}

uint64_t sub_1000E6770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  _QWORD v20[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20);
    String.hash(into:)(v20, a1, a2);
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = v11[1];
      v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0) & 1) != 0)
        return 1;
      v15 = ~v7;
      v16 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
      {
        while (1)
        {
          v17 = (_QWORD *)(v10 + 16 * v16);
          v18 = v17[1];
          v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
            break;
          result = 0;
          v16 = (v16 + 1) & v15;
          if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_1000E68A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for AudioVariant(0);
  v19 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (v7 = *(_QWORD *)(a2 + 40),
        v8 = sub_100004D8C(&qword_1004BDAB8, (uint64_t (*)(uint64_t))&type metadata accessor for AudioVariant, (uint64_t)&protocol conformance descriptor for AudioVariant), v9 = dispatch thunk of Hashable._rawHashValue(seed:)(v7, v4, v8), v10 = -1 << *(_BYTE *)(a2 + 32), v11 = v9 & ~v10, ((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0))
  {
    v12 = ~v10;
    v13 = *(_QWORD *)(v19 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
    do
    {
      v14(v6, *(_QWORD *)(a2 + 48) + v13 * v11, v4);
      v15 = sub_100004D8C(&qword_1004BDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for AudioVariant, (uint64_t)&protocol conformance descriptor for AudioVariant);
      v16 = dispatch thunk of static Equatable.== infix(_:_:)(v6, a1, v4, v15);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
      if ((v16 & 1) != 0)
        break;
      v11 = (v11 + 1) & v12;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t sub_1000E6A28(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[10];

  if (*(_QWORD *)(a2 + 16))
  {
    Hasher.init(_seed:)(v8);
    v4 = Library.Menu.Identifier.rawValue.getter(a1);
    String.hash(into:)(v8, v4, v5);
    swift_bridgeObjectRelease();
    v6 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(a2 + 32));
    if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
      __asm { BR              X9 }
  }
  return 0;
}

uint64_t sub_1000E6D8C(int a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  Hasher.init(_seed:)(&v24);
  v4 = SortOptions.ContentType.identifier.getter(a1);
  String.hash(into:)(&v24, v4, v5);
  swift_bridgeObjectRelease();
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(a2 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
    return 0;
  v9 = ~v7;
  while (1)
  {
    v10 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v8);
    v11 = v10 >> 6;
    if (v10 >> 6)
      break;
    if (a1 >= 0x40u)
    {
      Hasher.init(_seed:)(&v24);
      v21 = v26;
      v22 = v27;
      v23 = v28;
      v19 = v24;
      v20 = v25;
      v14 = (v10 & 1) == 0;
      if ((v10 & 1) != 0)
        v15 = 0xD000000000000011;
      else
        v15 = 0x646956636973756DLL;
      v16 = 0xEB00000000736F65;
      v13 = 0x80000001003AA820;
      goto LABEL_34;
    }
    if (((v10 ^ a1) & 1) == 0)
      return 1;
LABEL_4:
    v8 = (v8 + 1) & v9;
    if (((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
      return 0;
  }
  if (v11 == 1)
  {
    if ((a1 & 0xC0) != 0x40)
    {
      Hasher.init(_seed:)(&v24);
      v21 = v26;
      v22 = v27;
      v23 = v28;
      v19 = v24;
      v20 = v25;
      __asm { BR              X9 }
    }
    if (((v10 ^ a1) & 0x3F) == 0)
      return 1;
    goto LABEL_4;
  }
  if (v11 != 3)
  {
    Hasher.init(_seed:)(&v24);
    v21 = v26;
    v22 = v27;
    v23 = v28;
    v19 = v24;
    v20 = v25;
    if ((v10 & 1) != 0)
      v15 = 0xD000000000000018;
    else
      v15 = 0x7473696C79616C70;
    if ((v10 & 1) != 0)
      v17 = 0x80000001003AA7E0;
    else
      v17 = 0xE900000000000073;
    goto LABEL_37;
  }
  if (v10 != 192 || a1 != 192)
  {
    Hasher.init(_seed:)(&v24);
    v21 = v26;
    v22 = v27;
    v23 = v28;
    v19 = v24;
    v20 = v25;
    v12 = 0x7473696C79616C70;
    if (v10 == 193)
      v12 = 0x736569766F6DLL;
    v13 = 0xEE006C6961746544;
    if (v10 == 193)
      v13 = 0xE600000000000000;
    v14 = v10 == 192;
    if (v10 == 192)
      v15 = 0x73676E6F73;
    else
      v15 = v12;
    v16 = 0xE500000000000000;
LABEL_34:
    if (v14)
      v17 = v16;
    else
      v17 = v13;
LABEL_37:
    String.hash(into:)(&v19, v15, v17);
    swift_bridgeObjectRelease();
    Hasher._finalize()();
    Hasher.init(_seed:)(&v19);
    __asm { BR              X8 }
  }
  return 1;
}

BOOL sub_1000E7308(unsigned __int8 a1, uint64_t a2)
{
  Swift::UInt v3;
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  int v12;
  _QWORD v13[9];

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v3 = a1;
  Hasher.init(_seed:)(v13);
  Hasher._combine(_:)(v3);
  v4 = Hasher._finalize()();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(unsigned __int8 *)(v8 + v6) == (_DWORD)v3)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(unsigned __int8 *)(v8 + v11);
    result = v12 == (_DWORD)v3;
    if (v12 == (_DWORD)v3)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

void sub_1000E73F4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  NSString v3;

  v0 = type metadata accessor for Collaboration.ArtworkCachingReference();
  v1 = swift_allocObject(v0, 32, 7);
  *(_QWORD *)(v1 + 16) = 0xD000000000000027;
  *(_QWORD *)(v1 + 24) = 0x80000001003A7170;
  v2 = (void *)objc_opt_self(MPArtworkCatalog);
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setCacheLimit:forCacheIdentifier:cacheReference:", 100, v3, v1);

  static Collaboration.artworkCaching = v1;
}

uint64_t *Collaboration.artworkCaching.unsafeMutableAddressor()
{
  if (qword_1004B8BD0 != -1)
    swift_once(&qword_1004B8BD0, sub_1000E73F4);
  return &static Collaboration.artworkCaching;
}

double static Collaboration.artworkCaching.getter()
{
  double result;
  _BYTE v1[24];

  if (qword_1004B8BD0 != -1)
    swift_once(&qword_1004B8BD0, sub_1000E73F4);
  swift_beginAccess(&static Collaboration.artworkCaching, v1, 0, 0);
  *(_QWORD *)&result = swift_retain(static Collaboration.artworkCaching).n128_u64[0];
  return result;
}

double static Collaboration.artworkCaching.setter(uint64_t a1)
{
  uint64_t v2;
  double result;
  _BYTE v4[24];

  if (qword_1004B8BD0 != -1)
    swift_once(&qword_1004B8BD0, sub_1000E73F4);
  swift_beginAccess(&static Collaboration.artworkCaching, v4, 1, 0);
  v2 = static Collaboration.artworkCaching;
  static Collaboration.artworkCaching = a1;
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

uint64_t (*static Collaboration.artworkCaching.modify(uint64_t a1))(_QWORD)
{
  if (qword_1004B8BD0 != -1)
    swift_once(&qword_1004B8BD0, sub_1000E73F4);
  swift_beginAccess(&static Collaboration.artworkCaching, a1, 33, 0);
  return j__swift_endAccess;
}

id sub_1000E761C()
{
  id result;

  result = sub_1000E7638();
  static Collaboration.requiredProperties = (uint64_t)result;
  return result;
}

id sub_1000E7638()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Class isa;
  id v23;
  id v24;
  Class v25;
  Class v26;
  id v27;
  _BYTE v29[56];

  v0 = sub_1000057B4((uint64_t *)&unk_1004BDBA0);
  v1 = swift_allocObject(v0, 272, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1003C6CE0;
  *(_QWORD *)(v1 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistArtwork);
  *(_QWORD *)(v1 + 40) = v2;
  *(_QWORD *)(v1 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistIsOwner);
  *(_QWORD *)(v1 + 56) = v3;
  *(_QWORD *)(v1 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistEditorialArtwork);
  *(_QWORD *)(v1 + 72) = v4;
  *(_QWORD *)(v1 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistName);
  *(_QWORD *)(v1 + 88) = v5;
  *(_QWORD *)(v1 + 96) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistType);
  *(_QWORD *)(v1 + 104) = v6;
  *(_QWORD *)(v1 + 112) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistUserEditableComponents);
  *(_QWORD *)(v1 + 120) = v7;
  *(_QWORD *)(v1 + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistVisiblePlaylist);
  *(_QWORD *)(v1 + 136) = v8;
  *(_QWORD *)(v1 + 144) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistCuratorPlaylist);
  *(_QWORD *)(v1 + 152) = v9;
  *(_QWORD *)(v1 + 160) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistSubscribed);
  *(_QWORD *)(v1 + 168) = v10;
  *(_QWORD *)(v1 + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistIsCollaborative);
  *(_QWORD *)(v1 + 184) = v11;
  *(_QWORD *)(v1 + 192) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistCollaboratorStatus);
  *(_QWORD *)(v1 + 200) = v12;
  *(_QWORD *)(v1 + 208) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistCollaborationMode);
  *(_QWORD *)(v1 + 216) = v13;
  *(_QWORD *)(v1 + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistCollaboratorPermissions);
  *(_QWORD *)(v1 + 232) = v14;
  *(_QWORD *)(v1 + 240) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistCollaborationInvitationURL);
  *(_QWORD *)(v1 + 248) = v15;
  *(_QWORD *)(v1 + 256) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistCollaborationInvitationURLExpirationDate);
  *(_QWORD *)(v1 + 264) = v16;
  v17 = sub_1000057B4((uint64_t *)&unk_1004BD740);
  inited = swift_initStackObject(v17, v29);
  *(_OWORD *)(inited + 16) = xmmword_1003C64D0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelRelationshipPlaylistCurator);
  *(_QWORD *)(inited + 40) = v19;
  v20 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v20 + 16) = xmmword_1003C64D0;
  *(_QWORD *)(v20 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyCuratorName);
  *(_QWORD *)(v20 + 40) = v21;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v23 = objc_msgSend((id)objc_opt_self(MPPropertySet), "propertySetWithProperties:", isa);

  *(_QWORD *)(inited + 48) = v23;
  sub_1000B8E38(inited);
  v24 = objc_allocWithZone((Class)MPPropertySet);
  v25 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_10000598C(0, (unint64_t *)&qword_1004BDD80, MPPropertySet_ptr);
  v26 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v27 = objc_msgSend(v24, "initWithProperties:relationships:", v25, v26);

  return v27;
}

uint64_t *Collaboration.requiredProperties.unsafeMutableAddressor()
{
  if (qword_1004B8BD8 != -1)
    swift_once(&qword_1004B8BD8, sub_1000E761C);
  return &static Collaboration.requiredProperties;
}

id static Collaboration.requiredProperties.getter()
{
  _BYTE v1[24];

  if (qword_1004B8BD8 != -1)
    swift_once(&qword_1004B8BD8, sub_1000E761C);
  swift_beginAccess(&static Collaboration.requiredProperties, v1, 0, 0);
  return (id)static Collaboration.requiredProperties;
}

void static Collaboration.requiredProperties.setter(uint64_t a1)
{
  void *v2;
  _BYTE v3[24];

  if (qword_1004B8BD8 != -1)
    swift_once(&qword_1004B8BD8, sub_1000E761C);
  swift_beginAccess(&static Collaboration.requiredProperties, v3, 1, 0);
  v2 = (void *)static Collaboration.requiredProperties;
  static Collaboration.requiredProperties = a1;

}

uint64_t (*static Collaboration.requiredProperties.modify(uint64_t a1))(_QWORD)
{
  if (qword_1004B8BD8 != -1)
    swift_once(&qword_1004B8BD8, sub_1000E761C);
  swift_beginAccess(&static Collaboration.requiredProperties, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t static Collaboration.Setup.imageName(active:)(char a1)
{
  if ((a1 & 1) != 0)
    return 0x322E6E6F73726570;
  else
    return 0xD000000000000016;
}

void Collaboration.Error.errorDescription.getter(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1000E7B18()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[8];

  v6[0] = 0;
  v6[1] = 0xE000000000000000;
  swift_errorRetain(v0);
  _StringGuts.grow(_:)(25);
  v2._object = (void *)0x80000001003AA570;
  v2._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v2);
  v5 = v0;
  v3 = sub_1000057B4((uint64_t *)&unk_1004BD690);
  _print_unlocked<A, B>(_:_:)(&v5, v6, v3, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  sub_1000F2280(v0, v1, 0);
  return v6[0];
}

uint64_t sub_1000E7C90()
{
  uint64_t v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)&loc_1000E7C7C + 4 * byte_1003CD5A2[v0]))(0x636120726F6E694DLL, 0xED0000746E756F63);
}

void sub_1000E7CC8()
{
  JUMPOUT(0x1000E7C7CLL);
}

void sub_1000E7CE4()
{
  JUMPOUT(0x1000E7C7CLL);
}

double static Collaboration.Error.tapToRadarAlert()()
{
  uint64_t v0;
  double result;
  uint64_t v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[56];

  v0 = sub_1000057B4((uint64_t *)&unk_1004BFBC0);
  __chkstk_darwin(v0);
  v3 = &v9[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_1004B93A8 != -1)
    swift_once(&qword_1004B93A8, sub_10020D77C);
  if (static DeviceCapabilities.isInternalInstall == 1)
  {
    v4 = sub_1000B8F50((uint64_t)_swiftEmptyArrayStorage);
    sub_1000FE58C(0xD00000000000001FLL, 0x80000001003AA620, 0xD000000000000032, 0x80000001003A86D0, (uint64_t)_swiftEmptyArrayStorage, v4, (uint64_t)_swiftEmptyArrayStorage, 1, (uint64_t)v9);
    swift_bridgeObjectRelease();
    v5 = type metadata accessor for TaskPriority(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v3, 1, 1, v5);
    v6 = swift_allocObject(&unk_100472D28, 88, 7);
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    sub_10000FD10((uint64_t)v9, v6 + 32, &qword_1004BD6A8);
    v7 = sub_1000E6248((uint64_t)v3, (uint64_t)&unk_1004BD6B0, v6, (uint64_t)&unk_100473338, (uint64_t *)&unk_1004BD620, (uint64_t)&unk_1004BDB90);
    *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000E7F3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 72) = a1;
  *(_QWORD *)(v4 + 80) = a4;
  return swift_task_switch(sub_1000E7F54, 0, 0);
}

uint64_t sub_1000E7F54()
{
  uint64_t v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  sub_10000FD10(*(_QWORD *)(v0 + 80), v0 + 16, &qword_1004BD6A8);
  if (*(_QWORD *)(v0 + 24) && (v1 = *(int **)(v0 + 56)) != 0)
  {
    v4 = (uint64_t (*)(void))((char *)v1 + *v1);
    v2 = (_QWORD *)swift_task_alloc(v1[1]);
    *(_QWORD *)(v0 + 88) = v2;
    *v2 = v0;
    v2[1] = sub_1000E7FEC;
    return v4();
  }
  else
  {
    **(_BYTE **)(v0 + 72) = 1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000E7FEC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 88));
  return swift_task_switch(sub_1000E8040, 0, 0);
}

uint64_t sub_1000E8040()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 72) = 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000E8050()
{
  uint64_t v0;

  Collaboration.Error.errorDescription.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t Collaboration.Object.name.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v15;

  v1 = v0;
  v2 = type metadata accessor for Playlist(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Collaboration.Object(0);
  __chkstk_darwin();
  v8 = (id *)((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000F2670(v1, (uint64_t)v8);
  if (swift_getEnumCaseMultiPayload(v8, v6) == 1)
  {
    v9 = (*(uint64_t (**)(char *, id *, uint64_t))(v3 + 32))(v5, v8, v2);
    v10 = Playlist.name.getter(v9);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    v11 = *v8;
    v12 = objc_msgSend(*v8, "name");
    if (v12)
    {
      v13 = v12;
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);

    }
    else
    {

      return 0;
    }
  }
  return v10;
}

uint64_t Collaboration.Object.storeIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  uint64_t ObjectType;
  id v19;
  uint64_t v21;

  v1 = v0;
  v2 = type metadata accessor for Playlist(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Collaboration.Object(0);
  __chkstk_darwin();
  v8 = (void **)((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000F2670(v1, (uint64_t)v8);
  if (swift_getEnumCaseMultiPayload(v8, v6) != 1)
  {
    v13 = *v8;
    objc_opt_self(MPModelGenericObject);
    v14 = (void *)swift_dynamicCastObjCClass(v13);
    if (v14)
    {
      v15 = objc_msgSend(v14, "anyObject");
    }
    else
    {
      objc_opt_self(MPModelStoreBrowseContentItem);
      v16 = (void *)swift_dynamicCastObjCClass(v13);
      if (!v16)
        goto LABEL_10;
      v15 = objc_msgSend(v16, "innerObject");
    }
    v17 = v15;
    if (v17)
    {
LABEL_11:
      ObjectType = swift_getObjectType();
      v19 = objc_msgSend(v17, "identifiers");
      v10 = sub_1000BAB38(ObjectType, 3, 2u, v19);

      return v10;
    }
LABEL_10:
    v17 = v13;
    goto LABEL_11;
  }
  v9 = (*(uint64_t (**)(char *, void **, uint64_t))(v3 + 32))(v5, v8, v2);
  v10 = Playlist.catalogID.getter(v9);
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (!v12)
    return 0;
  return v10;
}

uint64_t Collaboration.Object.hasActiveCollaboration.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  char active;
  id v10;
  char *v11;
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for Playlist(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Collaboration.Object(0);
  __chkstk_darwin(v6);
  v8 = (id *)((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000F2670(v1, (uint64_t)v8);
  if (swift_getEnumCaseMultiPayload(v8, v6) == 1)
  {
    (*(void (**)(char *, id *, uint64_t))(v3 + 32))(v5, v8, v2);
    active = Playlist.hasActiveCollaboration.getter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    v10 = *v8;
    v11 = (char *)objc_msgSend(*v8, "collaboratorStatus");

    active = (unint64_t)(v11 - 2) < 3;
  }
  return active & 1;
}

BOOL MPModelPlaylist.hasActiveCollaboration.getter()
{
  void *v0;

  return (char *)objc_msgSend(v0, "collaboratorStatus") - 2 < (char *)3;
}

uint64_t Collaboration.Object.isOpenInvitation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  id v16;
  id v17;
  uint64_t v19;

  v1 = v0;
  v2 = sub_1000057B4(&qword_1004BD680);
  __chkstk_darwin(v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Playlist(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Collaboration.Object(0);
  __chkstk_darwin(v9);
  v11 = (id *)((char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000F2670(v1, (uint64_t)v11);
  if (swift_getEnumCaseMultiPayload(v11, v9) == 1)
  {
    v12 = (*(uint64_t (**)(char *, id *, uint64_t))(v6 + 32))(v8, v11, v5);
    Playlist.collaboration.getter(v12);
    v13 = type metadata accessor for Playlist.Collaboration(0);
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v4, 1, v13) == 1)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      sub_10000FE2C((uint64_t)v4, &qword_1004BD680);
      v15 = 0;
    }
    else
    {
      v15 = Playlist.Collaboration.isOpenInvitation.getter();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v4, v13);
    }
  }
  else
  {
    v16 = *v11;
    v17 = objc_msgSend(*v11, "collaborationMode");

    v15 = v17 == (id)1;
  }
  return v15 & 1;
}

uint64_t Playlist.Collaboration.isOpenInvitation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t *v20;
  char v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;

  v0 = type metadata accessor for Playlist.Collaboration.InvitationMode(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000057B4(&qword_1004BD6B8);
  __chkstk_darwin(v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000057B4(&qword_1004BD6C0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v25 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v25 - v15;
  Playlist.Collaboration.invitationMode.getter(v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v13, enum case for Playlist.Collaboration.InvitationMode.open(_:), v0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v1 + 56))(v13, 0, 1, v0);
  v17 = (uint64_t)&v6[*(int *)(v4 + 48)];
  sub_10000FEB4((uint64_t)v16, (uint64_t)v6, &qword_1004BD6C0);
  sub_10000FEB4((uint64_t)v13, v17, &qword_1004BD6C0);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  if (v18((uint64_t)v6, 1, v0) == 1)
  {
    sub_10000FE2C((uint64_t)v13, &qword_1004BD6C0);
    sub_10000FE2C((uint64_t)v16, &qword_1004BD6C0);
    v19 = v18(v17, 1, v0);
    if (v19 == 1)
      v20 = &qword_1004BD6C0;
    else
      v20 = &qword_1004BD6B8;
    if (v19 == 1)
      v21 = -1;
    else
      v21 = 0;
  }
  else
  {
    sub_10000FEB4((uint64_t)v6, (uint64_t)v10, &qword_1004BD6C0);
    if (v18(v17, 1, v0) == 1)
    {
      sub_10000FE2C((uint64_t)v13, &qword_1004BD6C0);
      sub_10000FE2C((uint64_t)v16, &qword_1004BD6C0);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v10, v0);
      v21 = 0;
      v20 = &qword_1004BD6B8;
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v3, v17, v0);
      v22 = sub_100004D8C((unint64_t *)&unk_1004BD6C8, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist.Collaboration.InvitationMode, (uint64_t)&protocol conformance descriptor for Playlist.Collaboration.InvitationMode);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v3, v0, v22);
      v23 = *(void (**)(char *, uint64_t))(v1 + 8);
      v23(v3, v0);
      v20 = &qword_1004BD6C0;
      sub_10000FE2C((uint64_t)v13, &qword_1004BD6C0);
      sub_10000FE2C((uint64_t)v16, &qword_1004BD6C0);
      v23(v10, v0);
    }
  }
  sub_10000FE2C((uint64_t)v6, v20);
  return v21 & 1;
}

uint64_t Collaboration.Object.collaborationURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  id *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = v1;
  v4 = sub_1000057B4(&qword_1004BD680);
  __chkstk_darwin(v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Playlist(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000057B4(&qword_1004B99B0);
  __chkstk_darwin(v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Collaboration.Object(0);
  __chkstk_darwin(v14);
  v16 = (id *)((char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000F2670(v2, (uint64_t)v16);
  if (swift_getEnumCaseMultiPayload(v16, v14) == 1)
  {
    v17 = (*(uint64_t (**)(char *, id *, uint64_t))(v8 + 32))(v10, v16, v7);
    Playlist.collaboration.getter(v17);
    v18 = type metadata accessor for Playlist.Collaboration(0);
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v6, 1, v18) == 1)
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      sub_10000FE2C((uint64_t)v6, &qword_1004BD680);
      v20 = type metadata accessor for URL(0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 1, 1, v20);
    }
    else
    {
      Playlist.Collaboration.invitationURL.getter();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v6, v18);
    }
  }
  else
  {
    v22 = *v16;
    v23 = objc_msgSend(*v16, "collaborationInvitationURL");
    if (v23)
    {
      v24 = v23;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v23);

      v25 = type metadata accessor for URL(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v13, 0, 1, v25);
    }
    else
    {

      v26 = type metadata accessor for URL(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v13, 1, 1, v26);
    }
    return sub_10000FD10((uint64_t)v13, a1, &qword_1004B99B0);
  }
}

void Collaboration.Object.artwork.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = v1;
  v4 = type metadata accessor for Playlist(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Collaboration.Object(0);
  __chkstk_darwin(v8);
  v10 = (void **)((char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000F2670(v2, (uint64_t)v10);
  if (swift_getEnumCaseMultiPayload(v10, v8) == 1)
  {
    v11 = (*(uint64_t (**)(char *, void **, uint64_t))(v5 + 32))(v7, v10, v4);
    Playlist.artwork.getter(v11);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    v12 = *v10;
    if (MPModelPlaylist.preferredArtworkCatalog.getter())
    {
      Artwork.init(_:)();

      v13 = type metadata accessor for Artwork(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a1, 0, 1, v13);
    }
    else
    {
      v14 = type metadata accessor for Artwork(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a1, 1, 1, v14);

    }
  }
}

void Collaboration.Object.lpImage.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void (*v13)(char *, void **, uint64_t);
  __n128 v14;
  uint64_t v15;
  NSString v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  double v22;
  id v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  NSString v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  id v36;
  double v37;
  NSString v38;
  id v39;
  id v40;
  uint64_t v41;
  id v42;
  char *v43;
  char v44[24];
  void **aBlock;
  uint64_t v46;
  double (*v47)(uint64_t, void *, uint64_t, uint64_t);
  void *v48;
  void *v49;
  uint64_t v50;

  v1 = type metadata accessor for Playlist(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  __chkstk_darwin();
  v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v43 = (char *)&v41 - v5;
  v6 = type metadata accessor for UTType(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Collaboration.Object(0);
  __chkstk_darwin();
  v12 = (void **)((char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v42 = objc_msgSend(objc_allocWithZone((Class)NSItemProvider), "init");
  sub_1000F2670(v0, (uint64_t)v12);
  if (swift_getEnumCaseMultiPayload(v12, v10) == 1)
  {
    v13 = *(void (**)(char *, void **, uint64_t))(v2 + 32);
    v13(v43, v12, v1);
    v15 = static UTType.png.getter(v14);
    UTType.identifier.getter(v15);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v17 = v43;
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v43, v1);
    v18 = *(unsigned __int8 *)(v2 + 80);
    v19 = (v18 + 16) & ~v18;
    v20 = swift_allocObject(&unk_100472D50, v19 + v3, v18 | 7);
    v13((char *)(v20 + v19), (void **)v4, v1);
    v49 = sub_1000F2714;
    v50 = v20;
    aBlock = _NSConcreteStackBlock;
    v46 = 1107296256;
    v47 = sub_1000E9458;
    v48 = &unk_100472D68;
    v21 = _Block_copy(&aBlock);
    *(_QWORD *)&v22 = swift_release(v50).n128_u64[0];
    v23 = v42;
    objc_msgSend(v42, "registerItemForTypeIdentifier:loadHandler:", v16, v21, v22);
    _Block_release(v21);

    (*(void (**)(char *, uint64_t))(v2 + 8))(v17, v1);
  }
  else
  {
    v24 = v6;
    v25 = v42;
    v26 = *v12;
    v27 = MPModelPlaylist.preferredArtworkCatalog.getter();
    if (v27)
    {
      v28 = v27;
      if (qword_1004B8BD0 != -1)
        swift_once(&qword_1004B8BD0, sub_1000E73F4);
      swift_beginAccess(&static Collaboration.artworkCaching, v44, 0, 0);
      v29 = static Collaboration.artworkCaching;
      v30 = swift_retain(static Collaboration.artworkCaching);
      v31 = static UTType.png.getter(v30);
      UTType.identifier.getter(v31);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v24);
      v32 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v33 = swift_allocObject(&unk_100472DA0, 32, 7);
      *(_QWORD *)(v33 + 16) = v28;
      *(_QWORD *)(v33 + 24) = v29;
      v49 = sub_1000F27BC;
      v50 = v33;
      aBlock = _NSConcreteStackBlock;
      v46 = 1107296256;
      v47 = sub_1000E9458;
      v48 = &unk_100472DB8;
      v34 = _Block_copy(&aBlock);
      v35 = v50;
      swift_retain(v29);
      v36 = v28;
      *(_QWORD *)&v37 = swift_release(v35).n128_u64[0];
      v23 = v25;
      objc_msgSend(v25, "registerItemForTypeIdentifier:loadHandler:", v32, v34, v37);
      _Block_release(v34);

      swift_release(v29);
    }
    else
    {

      v23 = v25;
    }
  }
  v38 = String._bridgeToObjectiveC()();
  v39 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v38);

  if (v39)
  {
    v40 = objc_msgSend(objc_allocWithZone((Class)LPImage), "initWithPlatformImage:", v39);

    objc_msgSend(objc_allocWithZone((Class)LPImage), "initWithItemProvider:properties:placeholderImage:", v23, 0, v40);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000E91EC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v9;
  NSString v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[5];
  uint64_t v16;

  if (result)
  {
    v9 = result;
    swift_retain(a2);
    v10 = String._bridgeToObjectiveC()();
    objc_msgSend(a5, "setCacheIdentifier:forCacheReference:", v10, a6);

    objc_msgSend(a5, "setFittingSize:", 300.0, 300.0);
    objc_msgSend(a5, "setDestinationScale:", 0.0);
    v11 = swift_allocObject(&unk_100473270, 32, 7);
    *(_QWORD *)(v11 + 16) = v9;
    *(_QWORD *)(v11 + 24) = a2;
    v12 = swift_allocObject(&unk_100473298, 32, 7);
    *(_QWORD *)(v12 + 16) = sub_1000F4914;
    *(_QWORD *)(v12 + 24) = v11;
    v15[4] = sub_1000F4920;
    v16 = v12;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 1107296256;
    v15[2] = sub_100021234;
    v15[3] = &unk_1004732B0;
    v13 = _Block_copy(v15);
    v14 = v16;
    sub_10000DCE8(v9, a2);
    swift_retain(v11);
    objc_msgSend(a5, "requestImageWithCompletion:", v13, swift_release(v14).n128_f64[0]);
    _Block_release(v13);
    swift_release(v11);
    return sub_10000DCF8(v9, a2);
  }
  return result;
}

void sub_1000E936C(void *a1, char a2, void (*a3)(Class, _QWORD))
{
  NSData *v5;
  Class isa;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;

  if ((a2 & 1) != 0)
  {
    v11 = a1;
    v10 = sub_1000057B4((uint64_t *)&unk_1004BD690);
    swift_willThrowTypedImpl(&v11, v10, &protocol self-conformance witness table for Error);
    a3(0, 0);
  }
  else
  {
    v5 = UIImagePNGRepresentation((UIImage *)a1);
    isa = (Class)v5;
    if (v5)
    {
      v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);
      v9 = v8;

      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10000FC28(v7, v9);
    }
    a3(isa, 0);
    swift_unknownObjectRelease(isa);
    sub_10000FCC0(a1, 0);
  }
}

double sub_1000E9458(uint64_t a1, void *aBlock, uint64_t ObjCClassMetadata, uint64_t a4)
{
  uint64_t v6;
  void (*v7)(void *, uint64_t, uint64_t, uint64_t, __n128);
  void *v8;
  uint64_t v9;
  __n128 v10;
  double result;

  v7 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, __n128))(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v8 = _Block_copy(aBlock);
  if (v8)
  {
    v9 = swift_allocObject(&unk_1004732E8, 24, 7);
    *(_QWORD *)(v9 + 16) = v8;
    v8 = sub_1000F494C;
    if (!ObjCClassMetadata)
      goto LABEL_4;
    goto LABEL_3;
  }
  v9 = 0;
  if (ObjCClassMetadata)
LABEL_3:
    ObjCClassMetadata = swift_getObjCClassMetadata(ObjCClassMetadata);
LABEL_4:
  if (a4)
    a4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a4, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  v10 = swift_retain(v6);
  v7(v8, v9, ObjCClassMetadata, a4, v10);
  swift_bridgeObjectRelease();
  sub_10000DCF8((uint64_t)v8, v9);
  *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  return result;
}

void sub_1000E953C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  if (a2)
    v5 = _convertErrorToNSError(_:)(a2);
  else
    v5 = 0;
  v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);

}

double sub_1000E9594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  double result;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v8 = type metadata accessor for Playlist(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin();
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000057B4((uint64_t *)&unk_1004BFBC0);
  __chkstk_darwin();
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v15 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a5, v8);
    v16 = *(unsigned __int8 *)(v9 + 80);
    v17 = (v16 + 32) & ~v16;
    v18 = (v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    v19 = swift_allocObject(&unk_100473310, v18 + 16, v16 | 7);
    *(_QWORD *)(v19 + 16) = 0;
    *(_QWORD *)(v19 + 24) = 0;
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v19 + v17, v11, v8);
    v20 = (_QWORD *)(v19 + v18);
    *v20 = a1;
    v20[1] = a2;
    swift_retain(a2);
    v21 = sub_1000E60DC((uint64_t)v14, (uint64_t)&unk_1004BDB68, v19, (uint64_t)&unk_100473130, (uint64_t)&type metadata for () + 8, (uint64_t)&unk_1004BDA80);
    *(_QWORD *)&result = swift_release(v21).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000E9714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v7 = sub_1000057B4(&qword_1004BDB70);
  v6[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000057B4(&qword_1004BDB78);
  v6[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000057B4(&qword_1004BDB80);
  v6[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000E97BC, 0, 0);
}

uint64_t sub_1000E97BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v2 = *(_QWORD *)(v1 + 56);
  Playlist.artwork.getter(a1);
  v3 = type metadata accessor for Artwork(0);
  *(_QWORD *)(v1 + 64) = v3;
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v1 + 72) = v4;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_10000FE2C(*(_QWORD *)(v1 + 56), &qword_1004BDB80);
    (*(void (**)(_QWORD, _QWORD))(v1 + 24))(0, 0);
    v5 = *(_QWORD *)(v1 + 48);
    v6 = *(_QWORD *)(v1 + 40);
    swift_task_dealloc(*(_QWORD *)(v1 + 56));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    v8 = *(_QWORD *)(v1 + 40);
    v9 = *(_QWORD *)(v1 + 48);
    v10 = type metadata accessor for Artwork.CropStyle(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
    v11 = type metadata accessor for Artwork.ImageFormat(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v8, 1, 1, v11);
    v12 = (_QWORD *)swift_task_alloc(async function pointer to Artwork.image(width:height:pixelLength:cropStyle:format:cacheOwner:)[1]);
    *(_QWORD *)(v1 + 80) = v12;
    *v12 = v1;
    v12[1] = sub_1000E9908;
    return Artwork.image(width:height:pixelLength:cropStyle:format:cacheOwner:)(*(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 40), 0, 0, 300.0, 300.0, 1.0);
  }
}

uint64_t sub_1000E9908(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *v2;
  v4 = (*v2)[10];
  (*v2)[11] = a1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v6 = v3[5];
    v5 = v3[6];
    swift_errorRelease(v1);
    sub_10000FE2C(v6, &qword_1004BDB70);
    sub_10000FE2C(v5, &qword_1004BDB78);
    v7 = sub_1000E9AA8;
  }
  else
  {
    v8 = v3[8];
    v9 = v3[9];
    v11 = v3[6];
    v10 = v3[7];
    sub_10000FE2C(v3[5], &qword_1004BDB70);
    sub_10000FE2C(v11, &qword_1004BDB78);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v8);
    v7 = sub_1000E99E8;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_1000E99E8()
{
  uint64_t v0;
  NSData *v1;
  NSData *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  NSData v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = UIImagePNGRepresentation((UIImage *)*(id *)(v0 + 88));
  if (v1)
  {
    v2 = v1;
    v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v5 = v4;

    v6.super.isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10000FC28(v3, v5);
  }
  else
  {
    v6.super.isa = 0;
  }
  v7 = *(void **)(v0 + 88);
  (*(void (**)(Class, _QWORD))(v0 + 24))(v6.super.isa, 0);

  swift_unknownObjectRelease(v6.super.isa);
  v8 = *(_QWORD *)(v0 + 48);
  v9 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E9AA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  (*(void (**)(_QWORD, _QWORD))(v0 + 24))(0, 0);
  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E9B0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  id *v14;
  uint64_t v15;
  char v16;
  id v17;
  unsigned __int8 v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;

  v1 = type metadata accessor for Playlist.EditableComponents(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000057B4((uint64_t *)&unk_1004BDAE0);
  __chkstk_darwin(v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Playlist(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Collaboration.Object(0);
  __chkstk_darwin(v12);
  v14 = (id *)((char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000F2670(v0, (uint64_t)v14);
  if (swift_getEnumCaseMultiPayload(v14, v12) == 1)
  {
    v15 = (*(uint64_t (**)(char *, id *, uint64_t))(v9 + 32))(v11, v14, v8);
    Playlist.editableComponents.getter(v15);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      sub_10000FE2C((uint64_t)v7, (uint64_t *)&unk_1004BDAE0);
      v16 = 0;
    }
    else
    {
      static Playlist.EditableComponents.tracklist.getter();
      v19 = sub_100004D8C((unint64_t *)&qword_1004BA388, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist.EditableComponents, (uint64_t)&protocol conformance descriptor for Playlist.EditableComponents);
      v16 = dispatch thunk of SetAlgebra.isSuperset(of:)(v4, v1, v19);
      v20 = *(void (**)(char *, uint64_t))(v2 + 8);
      v20(v4, v1);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      v20(v7, v1);
    }
  }
  else
  {
    v17 = *v14;
    v18 = objc_msgSend(*v14, "userEditableComponents");

    v16 = v18 & 1;
  }
  return v16 & 1;
}

id Collaboration.Object.isOwner.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  uint64_t v9;
  char v10;
  id v11;
  id v12;
  uint64_t v14;

  v1 = v0;
  v2 = type metadata accessor for Playlist(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Collaboration.Object(0);
  __chkstk_darwin(v6);
  v8 = (id *)((char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000F2670(v1, (uint64_t)v8);
  if (swift_getEnumCaseMultiPayload(v8, v6) == 1)
  {
    v9 = (*(uint64_t (**)(char *, id *, uint64_t))(v3 + 32))(v5, v8, v2);
    v10 = Playlist.isOwner.getter(v9);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    if (v10 == 2)
      return 0;
    else
      return (id)(v10 & 1);
  }
  else
  {
    v12 = *v8;
    v11 = objc_msgSend(*v8, "isOwner");

  }
  return v11;
}

uint64_t Collaboration.Object.ownerName.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v16;

  v1 = v0;
  v2 = type metadata accessor for Playlist(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Collaboration.Object(0);
  __chkstk_darwin();
  v8 = (id *)((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000F2670(v1, (uint64_t)v8);
  if (swift_getEnumCaseMultiPayload(v8, v6) == 1)
  {
    v9 = (*(uint64_t (**)(char *, id *, uint64_t))(v3 + 32))(v5, v8, v2);
    v10 = Playlist.curatorName.getter(v9);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    v11 = *v8;
    v12 = objc_msgSend(*v8, "curator");
    if (v12 && (v13 = v12, v14 = objc_msgSend(v12, "name"), v13, v14))
    {
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);

    }
    else
    {

      return 0;
    }
  }
  return v10;
}

uint64_t Collaboration.Object.musicItem.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v2 = v1;
  v4 = type metadata accessor for Collaboration.Object(0);
  __chkstk_darwin();
  v6 = (uint64_t *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000F2670(v2, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload(v6, v4) == 1)
  {
    v7 = type metadata accessor for Playlist(0);
    v8 = *(_QWORD *)(v7 - 8);
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v8 + 32))(a1, v6, v7);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
  else
  {
    v10 = *v6;
    type metadata accessor for Playlist(0);
    return dispatch thunk of LegacyModelObjectConvertible.init(_:)(v10);
  }
}

uint64_t Collaboration.Object.hasUnsupportedContent.getter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1[32] = v0;
  v2 = type metadata accessor for Playlist.Entry(0);
  v1[33] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[34] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[35] = swift_task_alloc(v4);
  v1[36] = swift_task_alloc(v4);
  v5 = sub_1000057B4((uint64_t *)&unk_1004BD6E0);
  v1[37] = v5;
  v1[38] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000057B4(&qword_1004B9ED0);
  v1[39] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000057B4(&qword_1004BD6F0);
  v1[40] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[41] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[42] = swift_task_alloc(v9);
  v1[43] = swift_task_alloc(v9);
  v10 = sub_1000057B4(&qword_1004BD6F8);
  v1[44] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v1[45] = v11;
  v1[46] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000057B4(&qword_1004BD700);
  v1[47] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000057B4(&qword_1004BD708);
  v1[48] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v1[49] = v14;
  v1[50] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Playlist(0);
  v1[51] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v1[52] = v16;
  v1[53] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Collaboration.Object(0);
  v1[54] = v17;
  v1[55] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000EA270, 0, 0);
}

uint64_t sub_1000EA270()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  _QWORD *v11;
  id v13;
  id v14;
  NSString v15;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  char v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  id v30;
  Class isa;
  id v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  id v37;
  Class v38;
  uint64_t v39;
  uint64_t inited;
  uint64_t v41;
  void *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  Class v47;
  Class v48;
  id v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;

  v1 = *(_QWORD *)(v0 + 432);
  v2 = *(_QWORD *)(v0 + 440);
  sub_1000F2670(*(_QWORD *)(v0 + 256), v2);
  if (swift_getEnumCaseMultiPayload(v2, v1) == 1)
  {
    v4 = *(_QWORD *)(v0 + 416);
    v3 = *(_QWORD *)(v0 + 424);
    v5 = *(_QWORD *)(v0 + 408);
    v6 = *(_QWORD *)(v0 + 376);
    v7 = *(_QWORD *)(v0 + 384);
    v8 = *(_QWORD *)(v0 + 264);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 32))(v3, *(_QWORD *)(v0 + 440), v5);
    MusicLibraryRequest.init()(v8, &protocol witness table for Playlist.Entry);
    KeyPath = swift_getKeyPath(&unk_1003CD5C0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v6, v3, v5);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v6, 0, 1, v5);
    v10 = sub_100004D8C(&qword_1004BD710, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist, (uint64_t)&protocol conformance descriptor for Playlist);
    MusicLibraryRequest<>.filter<A>(matching:equalTo:)(KeyPath, v6, v7, &protocol witness table for Playlist.Entry, v10);
    swift_release(KeyPath);
    sub_10000FE2C(v6, &qword_1004BD700);
    v11 = (_QWORD *)swift_task_alloc(async function pointer to MusicLibraryRequest.response()[1]);
    *(_QWORD *)(v0 + 488) = v11;
    *v11 = v0;
    v11[1] = sub_1000EAB78;
    return MusicLibraryRequest.response()(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 384));
  }
  v53 = **(void ***)(v0 + 440);
  *(_QWORD *)(v0 + 448) = v53;
  v13 = objc_msgSend(objc_allocWithZone((Class)MPModelLibraryRequest), "init");
  *(_QWORD *)(v0 + 456) = v13;
  v14 = v13;
  v15 = String._bridgeToObjectiveC()();
  objc_msgSend(v14, "setLabel:", v15);

  v16 = objc_msgSend((id)objc_opt_self(MPMediaLibrary), "deviceMediaLibrary");
  objc_msgSend(v14, "setMediaLibrary:", v16);

  v52 = sub_1000057B4((uint64_t *)&unk_1004BDDB0);
  v17 = swift_allocObject(v52, 56, 7);
  *(_OWORD *)(v17 + 16) = xmmword_1003C6CF0;
  *(_QWORD *)(v17 + 32) = objc_msgSend((id)objc_opt_self(MPModelSong), "kindWithVariants:", 7);
  v18 = (void *)objc_opt_self(NSUserDefaults);
  v19 = objc_msgSend(v18, "standardUserDefaults");
  strcpy((char *)(v0 + 232), "showAllTVShows");
  *(_BYTE *)(v0 + 247) = -18;
  v20 = sub_10002D3FC();
  NSUserDefaults.subscript.getter(v0 + 232, (uint64_t)&type metadata for String, v20, (_OWORD *)(v0 + 152));
  if (!*(_QWORD *)(v0 + 176))
  {
    sub_10000FE2C(v0 + 152, &qword_1004BE030);
    goto LABEL_8;
  }
  if ((swift_dynamicCast(v0 + 506, v0 + 152, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) == 0)
  {
LABEL_8:

    v22 = v0 + 216;
    goto LABEL_9;
  }
  v21 = *(_BYTE *)(v0 + 506);

  v22 = v0 + 216;
  if ((v21 & 1) != 0)
  {
    v23 = 3;
    goto LABEL_10;
  }
LABEL_9:
  v23 = 2;
LABEL_10:
  *(_QWORD *)(v17 + 40) = objc_msgSend((id)objc_opt_self(MPModelTVEpisode), "kindWithVariants:", v23);
  v24 = objc_msgSend(v18, "standardUserDefaults");
  strcpy((char *)(v0 + 216), "showAllTVShows");
  *(_BYTE *)(v0 + 231) = -18;
  v54 = v0 + 184;
  NSUserDefaults.subscript.getter(v22, (uint64_t)&type metadata for String, v20, (_OWORD *)(v0 + 184));
  if (!*(_QWORD *)(v0 + 208))
  {
    sub_10000FE2C(v54, &qword_1004BE030);
    goto LABEL_15;
  }
  if ((swift_dynamicCast(v0 + 505, v54, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) == 0)
  {
LABEL_15:

    v26 = v52;
    v27 = v53;
    goto LABEL_16;
  }
  v25 = *(_BYTE *)(v0 + 505);

  v26 = v52;
  v27 = v53;
  if ((v25 & 1) == 0)
  {
LABEL_16:
    v28 = 2;
    goto LABEL_17;
  }
  v28 = 3;
LABEL_17:
  v29 = (void *)objc_opt_self(MPModelPlaylistEntry);
  v30 = objc_msgSend((id)objc_opt_self(MPModelMovie), "kindWithVariants:", v28);
  *(_QWORD *)(v17 + 48) = v30;
  specialized Array._endMutation()(v30);
  sub_1000057B4((uint64_t *)&unk_1004BD730);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v32 = objc_msgSend(v29, "kindWithKinds:", isa);
  *(_QWORD *)(v0 + 464) = v32;

  v33 = (void *)objc_opt_self(MPModelPlaylist);
  v34 = v14;
  v35 = objc_msgSend(v33, "kindWithVariants:playlistEntryKind:options:", 215, v32, 0);
  objc_msgSend(v34, "setSectionKind:", v35);

  objc_msgSend(v34, "setItemKind:", v32);
  v36 = swift_allocObject(v26, 40, 7);
  *(_OWORD *)(v36 + 16) = xmmword_1003C6240;
  *(_QWORD *)(v36 + 32) = v27;
  specialized Array._endMutation()(v36);
  sub_10000598C(0, &qword_1004BD020, MPModelObject_ptr);
  v37 = v27;
  v38 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v34, "setScopedContainers:", v38);

  v39 = sub_1000057B4((uint64_t *)&unk_1004BD740);
  inited = swift_initStackObject(v39, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_1003C6280;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelRelationshipPlaylistEntrySong);
  *(_QWORD *)(inited + 40) = v41;
  v42 = (void *)objc_opt_self(MPPropertySet);
  v43 = v34;
  *(_QWORD *)(inited + 48) = objc_msgSend(v42, "emptyPropertySet");
  *(_QWORD *)(inited + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelRelationshipPlaylistEntryTVEpisode);
  *(_QWORD *)(inited + 64) = v44;
  *(_QWORD *)(inited + 72) = objc_msgSend(v42, "emptyPropertySet");
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelRelationshipPlaylistEntryMovie);
  *(_QWORD *)(inited + 88) = v45;
  *(_QWORD *)(inited + 96) = objc_msgSend(v42, "emptyPropertySet");
  sub_1000B8E38(inited);
  v46 = objc_allocWithZone((Class)MPPropertySet);
  v47 = Array._bridgeToObjectiveC()().super.isa;
  sub_10000598C(0, (unint64_t *)&qword_1004BDD80, MPPropertySet_ptr);
  v48 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v49 = objc_msgSend(v46, "initWithProperties:relationships:", v47, v48);

  objc_msgSend(v43, "setItemProperties:", v49);
  v50 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 472) = v50;
  *(_QWORD *)(v50 + 16) = v43;
  v51 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 480) = v51;
  *v51 = v0;
  v51[1] = sub_1000EAA40;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 504, 0, 0, 0xD000000000000015, 0x80000001003AA6B0, sub_1000F284C, v50, &type metadata for Bool);
}

uint64_t sub_1000EAA40()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 472);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 480));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1000EAA9C, 0, 0);
}

uint64_t sub_1000EAA9C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unsigned int v14;

  v1 = *(void **)(v0 + 464);
  v2 = *(void **)(v0 + 448);

  v14 = *(unsigned __int8 *)(v0 + 504);
  v3 = *(_QWORD *)(v0 + 424);
  v4 = *(_QWORD *)(v0 + 400);
  v6 = *(_QWORD *)(v0 + 368);
  v5 = *(_QWORD *)(v0 + 376);
  v8 = *(_QWORD *)(v0 + 336);
  v7 = *(_QWORD *)(v0 + 344);
  v10 = *(_QWORD *)(v0 + 304);
  v9 = *(_QWORD *)(v0 + 312);
  v11 = *(_QWORD *)(v0 + 288);
  v13 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 440));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(v14);
}

uint64_t sub_1000EAB78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 488);
  *(_QWORD *)(*(_QWORD *)v1 + 496) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000EAF60;
  else
    v3 = sub_1000EABDC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000EABDC(__n128 a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD *, _QWORD);
  void (*v19)(uint64_t, uint64_t);
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v2 = v1[43];
  v3 = v1[41];
  v4 = v1[42];
  v5 = v1[40];
  v7 = v1[37];
  v6 = v1[38];
  MusicLibraryResponse.items.getter(v1[44], a1);
  v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v56(v4, v2, v5);
  v8 = sub_1000F2808(&qword_1004BD718, (uint64_t)&protocol conformance descriptor for MusicItemCollection<A>);
  dispatch thunk of Sequence.makeIterator()(v5, v8);
  v9 = (uint64_t *)(v6 + *(int *)(v7 + 36));
  v10 = *v9;
  v11 = sub_1000F2808((unint64_t *)&qword_1004BD720, (uint64_t)&protocol conformance descriptor for MusicItemCollection<A>);
  v54 = v1 + 31;
  dispatch thunk of Collection.endIndex.getter(v1 + 31, v5, v11);
  if (v10 == v1[31])
  {
LABEL_5:
    v26 = v1[41];
    v27 = v1[39];
    v28 = v1[33];
    v29 = v1[34];
    sub_10000FE2C(v1[38], (uint64_t *)&unk_1004BD6E0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v27, 1, 1, v28);
    v19 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
  }
  else
  {
    v52 = v1[41];
    v61 = v1[34];
    v53 = v1;
    v12 = v1 + 15;
    while (1)
    {
      v13 = v1[42];
      v14 = v1[40];
      v15 = v1[38];
      v16 = v1[36];
      v58 = v1[35];
      v17 = v1[33];
      v18 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read(v12, v9, v14, v11);
      (*(void (**)(uint64_t))(v61 + 16))(v16);
      v18(v12, 0);
      v56(v13, v15, v14);
      dispatch thunk of Collection.formIndex(after:)(v9, v14, v11);
      v19 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
      v19(v13, v14);
      v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v61 + 32);
      v21 = v20(v58, v16, v17);
      Playlist.Entry.catalogID.getter(v21);
      v23 = v22;
      swift_bridgeObjectRelease();
      if (!v23)
        break;
      v1 = v53;
      v24 = v53[40];
      (*(void (**)(_QWORD, _QWORD))(v61 + 8))(v53[35], v53[33]);
      v25 = *v9;
      dispatch thunk of Collection.endIndex.getter(v54, v24, v11);
      if (v25 == v53[31])
        goto LABEL_5;
    }
    v1 = v53;
    v30 = v53[39];
    v32 = v53[34];
    v31 = v53[35];
    v33 = v53[33];
    sub_10000FE2C(v53[38], (uint64_t *)&unk_1004BD6E0);
    v20(v30, v31, v33);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v32 + 56))(v30, 0, 1, v33);
  }
  v34 = v1[50];
  v59 = v1[51];
  v62 = v1[53];
  v36 = v1[48];
  v35 = v1[49];
  v37 = v1[45];
  v38 = v1[46];
  v39 = v1[44];
  v40 = v1[39];
  v41 = v1[34];
  v55 = v1[33];
  v57 = v1[52];
  v19(v1[43], v1[40]);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v39);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v62, v59);
  LODWORD(v62) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v40, 1, v55) != 1;
  sub_10000FE2C(v40, &qword_1004B9ED0);
  v42 = v1[53];
  v43 = v1[50];
  v45 = v1[46];
  v44 = v1[47];
  v47 = v1[42];
  v46 = v1[43];
  v49 = v1[38];
  v48 = v1[39];
  v50 = v1[36];
  v60 = v1[35];
  swift_task_dealloc(v1[55]);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v60);
  return ((uint64_t (*)(_QWORD))v1[1])(v62);
}

uint64_t sub_1000EAF60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 496);
  v3 = *(_QWORD *)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 424);
  v4 = *(_QWORD *)(v0 + 408);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 392) + 8))(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 384));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_errorRelease(v1);
  v5 = *(_QWORD *)(v0 + 424);
  v6 = *(_QWORD *)(v0 + 400);
  v8 = *(_QWORD *)(v0 + 368);
  v7 = *(_QWORD *)(v0 + 376);
  v10 = *(_QWORD *)(v0 + 336);
  v9 = *(_QWORD *)(v0 + 344);
  v12 = *(_QWORD *)(v0 + 304);
  v11 = *(_QWORD *)(v0 + 312);
  v13 = *(_QWORD *)(v0 + 288);
  v15 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 440));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

void sub_1000EB050(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD aBlock[5];
  uint64_t v12;

  v4 = sub_1000057B4(&qword_1004BE670);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = swift_allocObject(&unk_1004731A8, v8 + v6, v7 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_1000F487C;
  v12 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100021234;
  aBlock[3] = &unk_1004731C0;
  v10 = _Block_copy(aBlock);
  objc_msgSend(a2, "performWithResponseHandler:", v10, swift_release(v12).n128_f64[0]);
  _Block_release(v10);
}

void sub_1000EB180(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  __n128 v7;
  void (*v8)(void *, uint64_t, _BYTE *);
  char v9;
  uint64_t v10;
  _QWORD aBlock[5];
  uint64_t v12;
  char v13;

  v13 = 0;
  if (!a1)
  {
    v9 = 0;
    v8 = 0;
    v3 = 0;
    goto LABEL_6;
  }
  v1 = objc_msgSend(a1, "results");
  if (v1)
  {
    v2 = v1;
    v3 = swift_allocObject(&unk_1004731F8, 24, 7);
    *(_QWORD *)(v3 + 16) = &v13;
    v4 = swift_allocObject(&unk_100473220, 32, 7);
    *(_QWORD *)(v4 + 16) = sub_1000F48FC;
    *(_QWORD *)(v4 + 24) = v3;
    aBlock[4] = sub_10001122C;
    v12 = v4;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000EB3A4;
    aBlock[3] = &unk_100473238;
    v5 = _Block_copy(aBlock);
    v6 = v12;
    swift_retain(v4);
    objc_msgSend(v2, "enumerateItemsUsingBlock:", v5, swift_release(v6).n128_f64[0]);

    _Block_release(v5);
    LOBYTE(v2) = swift_isEscapingClosureAtFileLocation(v4, "", 128, 264, 62, 1, v7);
    swift_release(v4);
    if ((v2 & 1) == 0)
    {
      v8 = sub_1000F48FC;
      v9 = v13;
LABEL_6:
      LOBYTE(aBlock[0]) = v9;
      v10 = sub_1000057B4(&qword_1004BE670);
      CheckedContinuation.resume(returning:)(aBlock, v10);
      sub_10000DCF8((uint64_t)v8, v3);
      return;
    }
    __break(1u);
  }
  __break(1u);
}

void sub_1000EB310(void *a1, uint64_t a2, _BYTE *a3, _BYTE *a4)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v6 = objc_msgSend(a1, "anyObject");
  if (v6)
  {
    v9 = v6;
    MPModelObject.bestIdentifier(for:)(2, 1u);
    v8 = v7;
    swift_bridgeObjectRelease();
    if (!v8)
    {
      *a4 = 1;
      *a3 = 1;
    }

  }
}

uint64_t sub_1000EB3A4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (*v10)(void);
  id v11;
  uint64_t v13;

  v6 = type metadata accessor for IndexPath(0, a2, a3);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void (**)(void))(a1 + 32);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v11 = a2;
  v10();

  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t Collaboration.Object.duplicate()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1[2] = v0;
  v2 = type metadata accessor for MusicLibraryPlaylistResponse(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for MusicLibraryPlaylistRequest(0);
  v1[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[7] = v5;
  v1[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Playlist(0);
  v1[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[10] = v7;
  v1[11] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Collaboration.Object(0);
  v1[12] = v8;
  v1[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000EB534, 0, 0);
}

id sub_1000EB534()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  int EnumCaseMultiPayload;
  uint64_t *v4;
  uint64_t v5;
  uint64_t **v6;
  id result;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t **v12;

  v1 = v0[12];
  v2 = v0[13];
  sub_1000F2670(v0[2], v2);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v2, v1);
  v4 = (uint64_t *)v0[13];
  if (EnumCaseMultiPayload == 1)
  {
    v5 = v0[11];
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v0[10] + 32))(v5, v4, v0[9]);
    static MusicLibraryPlaylistRequest.duplicatingPlaylist(_:)(v5);
    v6 = (uint64_t **)swift_task_alloc(async function pointer to MusicLibraryPlaylistRequest.response()[1]);
    v0[19] = (uint64_t)v6;
    *v6 = v0;
    v6[1] = (uint64_t *)sub_1000EB78C;
    return (id)MusicLibraryPlaylistRequest.response()(v0[5]);
  }
  else
  {
    v8 = *v4;
    v0[14] = *v4;
    result = objc_msgSend((id)objc_opt_self(MPMediaLibrary), "deviceMediaLibrary");
    if (result)
    {
      v9 = result;
      v10 = objc_msgSend(objc_allocWithZone((Class)MPModelLibraryDuplicatePlaylistChangeRequest), "initWithLibrary:playlist:", result, v8);
      v0[15] = (uint64_t)v10;

      v11 = swift_task_alloc(32);
      v0[16] = v11;
      *(_QWORD *)(v11 + 16) = v10;
      v12 = (uint64_t **)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
      v0[17] = (uint64_t)v12;
      *v12 = v0;
      v12[1] = (uint64_t *)sub_1000EB6B4;
      return (id)withCheckedThrowingContinuation<A>(isolation:function:_:)(v12, 0, 0, 0x746163696C707564, 0xEB00000000292865, sub_1000F2854, v11, (char *)&type metadata for () + 8);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1000EB6B4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 136);
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000EB884;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 128));
    v4 = sub_1000EB720;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000EB720()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 120);

  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EB78C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000EB8FC;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v2[4] + 8))(v2[5], v2[3]);
    v4 = sub_1000EB800;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000EB800()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EB884()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);

  swift_task_dealloc(v2);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EB8FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000EB980(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD aBlock[5];
  uint64_t v12;

  v4 = sub_1000057B4((uint64_t *)&unk_1004BDAF0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = swift_allocObject(&unk_100473158, v8 + v6, v7 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_1000F4800;
  v12 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000EBB14;
  aBlock[3] = &unk_100473170;
  v10 = _Block_copy(aBlock);
  objc_msgSend(a2, "performWithResponseHandler:", v10, swift_release(v12).n128_f64[0]);
  _Block_release(v10);
}

uint64_t sub_1000EBAB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v5 = a2;
    swift_errorRetain(a2);
    v2 = sub_1000057B4((uint64_t *)&unk_1004BDAF0);
    return CheckedContinuation.resume(throwing:)(&v5, v2);
  }
  else
  {
    v4 = sub_1000057B4((uint64_t *)&unk_1004BDAF0);
    return CheckedContinuation.resume(returning:)(v4, v4);
  }
}

void sub_1000EBB14(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  id v7;

  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

uint64_t Collaboration.Manager.__allocating_init(coordinator:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, 56, 7);
  sub_100033620(a1, v3 + 16);
  return v3;
}

uint64_t Collaboration.Manager.init(coordinator:)(__int128 *a1)
{
  uint64_t v1;

  sub_100033620(a1, v1 + 16);
  return v1;
}

uint64_t GroupActivitiesManager.coordinator.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + 16;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_1000444A8(v3, a1);
}

id Collaboration.Manager.participantProfile.getter()
{
  id v0;
  id v1;
  id v2;
  id v3;

  v0 = objc_msgSend((id)objc_opt_self(ICMediaUserStateCenter), "shared");
  v1 = objc_msgSend(v0, "activeUserState");

  v2 = objc_msgSend(v1, "music");
  v3 = objc_msgSend(v2, "userProfile");

  return v3;
}

void Collaboration.Manager.supportsCollaboration(for:)(uint64_t a1)
{
  sub_1000F285C(a1);
}

uint64_t Collaboration.Manager.isCollaborationSupported(for:)(uint64_t a1)
{
  return sub_1000EBF58(a1);
}

uint64_t Logger.collaboration.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1004B8BE0 != -1)
    swift_once(&qword_1004B8BE0, sub_1000F19B0);
  v0 = type metadata accessor for Logger(0);
  return sub_100039D34(v0, (uint64_t)static Logger.collaboration);
}

void Collaboration.Manager.canCollaborate(for:)()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  id v8;
  void *v9;
  unsigned __int8 v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;

  if (qword_1004B8AF8 != -1)
    swift_once(&qword_1004B8AF8, sub_1000D365C);
  v0 = static ApplicationCapabilities.Controller.shared;
  KeyPath = swift_getKeyPath(&unk_1003CD5F0);
  v2 = swift_getKeyPath(&unk_1003CD618);
  static Published.subscript.getter(&v13, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  v3 = v15;
  if ((v14 & 1) == 0)
  {
    v4 = sub_1000F2BE0();
    swift_allocError(&type metadata for Collaboration.Error, v4, 0, 0);
    v7 = 3;
LABEL_10:
    *(_QWORD *)v5 = v7;
    goto LABEL_11;
  }
  if (!BYTE2(v13))
  {
    v12 = sub_1000F2BE0();
    swift_allocError(&type metadata for Collaboration.Error, v12, 0, 0);
    v7 = 6;
    goto LABEL_10;
  }
  v16 = v15;
  v8 = objc_msgSend((id)objc_opt_self(MPCloudController), "sharedCloudController");
  if (v8)
  {
    v9 = v8;
    v10 = objc_msgSend(v8, "isInitialImport");

    if ((v10 & 1) != 0)
    {
      v11 = sub_1000F2BE0();
      swift_allocError(&type metadata for Collaboration.Error, v11, 0, 0);
      *(_QWORD *)v5 = 7;
      v3 = v16;
LABEL_11:
      *(_QWORD *)(v5 + 8) = 0;
      *(_BYTE *)(v5 + 16) = 3;
      swift_willThrow(v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  else
  {
    __break(1u);
  }
}

uint64_t Collaboration.Manager.isCollaborationPossible(for:)(uint64_t a1)
{
  return sub_1000EBF58(a1);
}

uint64_t sub_1000EBF58(uint64_t a1)
{
  sub_1000F285C(a1);
  return 1;
}

uint64_t *Collaboration.Manager.DeepLinkType.actionKey.unsafeMutableAddressor()
{
  return &static Collaboration.Manager.DeepLinkType.actionKey;
}

uint64_t static Collaboration.Manager.DeepLinkType.actionKey.getter()
{
  return sub_1000EC198(&static Collaboration.Manager.DeepLinkType.actionKey);
}

uint64_t static Collaboration.Manager.DeepLinkType.actionKey.setter(uint64_t a1, uint64_t a2)
{
  return sub_1000EC1F8(a1, a2, &static Collaboration.Manager.DeepLinkType.actionKey, &qword_1004BD668);
}

uint64_t (*static Collaboration.Manager.DeepLinkType.actionKey.modify(uint64_t a1))(_QWORD)
{
  swift_beginAccess(&static Collaboration.Manager.DeepLinkType.actionKey, a1, 33, 0);
  return j_j__swift_endAccess;
}

void *Collaboration.Manager.DeepLinkType.profileKey.unsafeMutableAddressor()
{
  return &static Collaboration.Manager.DeepLinkType.profileKey;
}

uint64_t static Collaboration.Manager.DeepLinkType.profileKey.getter()
{
  return sub_1000EC198((uint64_t *)&static Collaboration.Manager.DeepLinkType.profileKey);
}

uint64_t sub_1000EC198(uint64_t *a1)
{
  uint64_t v2;
  _BYTE v4[24];

  swift_beginAccess(a1, v4, 0, 0);
  v2 = *a1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t static Collaboration.Manager.DeepLinkType.profileKey.setter(uint64_t a1, uint64_t a2)
{
  return sub_1000EC1F8(a1, a2, static Collaboration.Manager.DeepLinkType.profileKey, &static Collaboration.Manager.DeepLinkType.profileKey[1]);
}

uint64_t sub_1000EC1F8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v8;
  _BYTE v10[24];

  swift_beginAccess(a3, v10, 1, 0);
  v8 = *a4;
  *a3 = a1;
  *a4 = a2;
  return swift_bridgeObjectRelease(v8);
}

uint64_t (*static Collaboration.Manager.DeepLinkType.profileKey.modify(uint64_t a1))(_QWORD)
{
  swift_beginAccess(&static Collaboration.Manager.DeepLinkType.profileKey, a1, 33, 0);
  return j_j__swift_endAccess;
}

MusicCore::Collaboration::Manager::DeepLinkType_optional __swiftcall Collaboration.Manager.DeepLinkType.init(_:)(Swift::OpaquePointer a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  Swift::Int v10;
  MusicCore::Collaboration::Manager::DeepLinkType_optional v11;
  _BYTE v13[24];

  swift_beginAccess(&static Collaboration.Manager.DeepLinkType.actionKey, v13, 0, 0);
  if (!*((_QWORD *)a1._rawValue + 2))
    goto LABEL_10;
  v2 = qword_1004BD668;
  v3 = static Collaboration.Manager.DeepLinkType.actionKey;
  swift_bridgeObjectRetain();
  v4 = sub_1000277A0(v3, v2);
  if ((v5 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_10:
    swift_bridgeObjectRelease();
    return (MusicCore::Collaboration::Manager::DeepLinkType_optional)2;
  }
  v6 = (uint64_t *)(*((_QWORD *)a1._rawValue + 7) + 16 * v4);
  v7 = *v6;
  v8 = (void *)v6[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = v7;
  v9._object = v8;
  v10 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100467BA8, v9);
  swift_bridgeObjectRelease();
  if (v10 == 1)
    v11.value = MusicCore_Collaboration_Manager_DeepLinkType_pending;
  else
    v11.value = MusicCore_Collaboration_Manager_DeepLinkType_unknownDefault;
  if (v10)
    return v11;
  else
    return 0;
}

MusicCore::Collaboration::Manager::DeepLinkType_optional __swiftcall Collaboration.Manager.DeepLinkType.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  MusicCore::Collaboration::Manager::DeepLinkType_optional v4;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100467BA8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1)
    v4.value = MusicCore_Collaboration_Manager_DeepLinkType_pending;
  else
    v4.value = MusicCore_Collaboration_Manager_DeepLinkType_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t Collaboration.Manager.DeepLinkType.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x676E69646E6570;
  else
    return 1852403562;
}

uint64_t sub_1000EC3F8(char *a1, char *a2)
{
  return sub_1000487B4(*a1, *a2);
}

Swift::Int sub_1000EC404()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x676E69646E6570;
  else
    v2 = 1852403562;
  if (v1)
    v3 = 0xE700000000000000;
  else
    v3 = 0xE400000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1000EC47C(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x676E69646E6570;
  else
    v2 = 1852403562;
  if (*v1)
    v3 = 0xE700000000000000;
  else
    v3 = 0xE400000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1000EC4D0()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x676E69646E6570;
  else
    v2 = 1852403562;
  if (v1)
    v3 = 0xE700000000000000;
  else
    v3 = 0xE400000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1000EC544@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100467BA8, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_1000EC5A0(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1852403562;
  if (*v1)
    v2 = 0x676E69646E6570;
  v3 = 0xE400000000000000;
  if (*v1)
    v3 = 0xE700000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t Collaboration.Manager.queryItemsDictionary(for:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  Swift::Int v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _BYTE v22[24];

  v2 = sub_1000057B4(&qword_1004BD760);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = type metadata accessor for URLComponents(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  URLComponents.init(url:resolvingAgainstBaseURL:)(a1, 0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_10000FE2C((uint64_t)v4, &qword_1004BD760);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  v9 = URLComponents.queryItemsDictionary.getter();
  if (v9)
  {
    v10 = sub_1000F22A8((uint64_t)&off_100467BF8);
    swift_arrayDestroy(&unk_100467C18, 2, &type metadata for String);
    v11 = swift_beginAccess(&static Collaboration.Manager.DeepLinkType.actionKey, v22, 0, 0);
    if (*(_QWORD *)(v9 + 16))
    {
      v12 = qword_1004BD668;
      v13 = static Collaboration.Manager.DeepLinkType.actionKey;
      swift_bridgeObjectRetain();
      v14 = sub_1000277A0(v13, v12);
      if ((v15 & 1) != 0)
      {
        v16 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v14);
        v17 = *v16;
        v18 = v16[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v19 = sub_1000E6770(v17, v18, v10);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        swift_bridgeObjectRelease();
        if ((v19 & 1) != 0)
          return v9;
        goto LABEL_11;
      }
      swift_bridgeObjectRelease();
    }
    (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(v8, v5, v11);
    swift_bridgeObjectRelease();
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v9;
}

uint64_t Collaboration.Manager.start(_:isOpen:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t started;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;

  *(_BYTE *)(v3 + 328) = a3;
  *(_QWORD *)(v3 + 32) = a1;
  *(_QWORD *)(v3 + 40) = a2;
  v4 = sub_1000057B4(&qword_1004BD680);
  *(_QWORD *)(v3 + 48) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Playlist(0);
  *(_QWORD *)(v3 + 56) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 64) = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 72) = swift_task_alloc(v7);
  *(_QWORD *)(v3 + 80) = swift_task_alloc(v7);
  *(_QWORD *)(v3 + 88) = swift_task_alloc(v7);
  *(_QWORD *)(v3 + 96) = swift_task_alloc(v7);
  v8 = type metadata accessor for URL(0);
  *(_QWORD *)(v3 + 104) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v3 + 112) = v9;
  *(_QWORD *)(v3 + 120) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*(_QWORD *)(*(_QWORD *)(sub_1000057B4(&qword_1004B99B0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 128) = swift_task_alloc(v10);
  *(_QWORD *)(v3 + 136) = swift_task_alloc(v10);
  v11 = type metadata accessor for Playlist.Collaboration.InvitationMode(0);
  *(_QWORD *)(v3 + 144) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v3 + 152) = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 160) = swift_task_alloc(v13);
  *(_QWORD *)(v3 + 168) = swift_task_alloc(v13);
  v14 = sub_1000057B4((uint64_t *)&unk_1004BD770);
  *(_QWORD *)(v3 + 176) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  started = type metadata accessor for MusicCollaborativePlaylist.StartCollaborationRequest(0);
  *(_QWORD *)(v3 + 184) = started;
  v16 = *(_QWORD *)(started - 8);
  *(_QWORD *)(v3 + 192) = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 200) = swift_task_alloc(v17);
  *(_QWORD *)(v3 + 208) = swift_task_alloc(v17);
  v18 = type metadata accessor for Collaboration.Object(0);
  *(_QWORD *)(v3 + 216) = v18;
  *(_QWORD *)(v3 + 224) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v18 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v3 + 232) = static MainActor.shared.getter(v20);
  v21 = dispatch thunk of Actor.unownedExecutor.getter(v19, &protocol witness table for MainActor);
  *(_QWORD *)(v3 + 240) = v21;
  *(_QWORD *)(v3 + 248) = v22;
  return swift_task_switch(sub_1000EC9EC, v21, v22);
}

uint64_t sub_1000EC9EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  void (*v20)(uint64_t, void **, uint64_t);
  void (*v21)(uint64_t, uint64_t, uint64_t);
  unsigned int *v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  void *v32;
  void (*v33)(uint64_t, _QWORD, uint64_t);
  unsigned int *v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  if (qword_1004B8BE0 != -1)
    swift_once(&qword_1004B8BE0, sub_1000F19B0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100039D34(v1, (uint64_t)static Logger.collaboration);
  *(_QWORD *)(v0 + 256) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(unsigned __int8 *)(v0 + 328);
    v6 = swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 67240192;
    *(_DWORD *)(v6 + 4) = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Start called - isOpenInvite=%{BOOL,public}d", (uint8_t *)v6, 8u);
    swift_slowDealloc(v6, -1, -1);
  }
  v8 = *(_QWORD *)(v0 + 216);
  v7 = *(_QWORD *)(v0 + 224);
  v9 = *(_QWORD *)(v0 + 40);

  sub_1000F2670(v9, v7);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v7, v8);
  v11 = *(void ***)(v0 + 224);
  if (EnumCaseMultiPayload == 1)
  {
    v13 = *(_QWORD *)(v0 + 152);
    v12 = *(_QWORD *)(v0 + 160);
    v14 = *(_QWORD *)(v0 + 144);
    v16 = *(_QWORD *)(v0 + 88);
    v15 = *(_QWORD *)(v0 + 96);
    v17 = *(_QWORD *)(v0 + 56);
    v18 = *(_QWORD *)(v0 + 64);
    v19 = *(unsigned __int8 *)(v0 + 328);
    v20 = *(void (**)(uint64_t, void **, uint64_t))(v18 + 32);
    *(_QWORD *)(v0 + 296) = v20;
    v20(v15, v11, v17);
    v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
    *(_QWORD *)(v0 + 304) = v21;
    v21(v16, v15, v17);
    v22 = (unsigned int *)&enum case for Playlist.Collaboration.InvitationMode.open(_:);
    if (!v19)
      v22 = (unsigned int *)&enum case for Playlist.Collaboration.InvitationMode.requiresApproval(_:);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v13 + 104))(v12, *v22, v14);
    MusicCollaborativePlaylist.StartCollaborationRequest.init(playlist:invitationMode:)(v16, v12);
    v23 = (_QWORD *)swift_task_alloc(async function pointer to MusicCollaborativePlaylist.StartCollaborationRequest.response()[1]);
    *(_QWORD *)(v0 + 312) = v23;
    *v23 = v0;
    v23[1] = sub_1000ED398;
    return MusicCollaborativePlaylist.StartCollaborationRequest.response()(*(_QWORD *)(v0 + 80));
  }
  else
  {
    v25 = *(_QWORD *)(v0 + 184);
    v26 = *(_QWORD *)(v0 + 192);
    v28 = *(_QWORD *)(v0 + 168);
    v27 = *(_QWORD *)(v0 + 176);
    v29 = *(_QWORD *)(v0 + 144);
    v30 = *(_QWORD *)(v0 + 152);
    v31 = *(unsigned __int8 *)(v0 + 328);
    v32 = *v11;
    *(_QWORD *)(v0 + 264) = *v11;
    v33 = *(void (**)(uint64_t, _QWORD, uint64_t))(v30 + 104);
    if (v31)
      v34 = (unsigned int *)&enum case for Playlist.Collaboration.InvitationMode.open(_:);
    else
      v34 = (unsigned int *)&enum case for Playlist.Collaboration.InvitationMode.requiresApproval(_:);
    v33(v28, *v34, v29);
    v35 = v32;
    MusicCollaborativePlaylist.StartCollaborationRequest.init(playlist:invitationMode:)();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v27, 1, v25) == 1)
    {
      v36 = *(_QWORD *)(v0 + 176);
      swift_release(*(_QWORD *)(v0 + 232));
      sub_10000FE2C(v36, (uint64_t *)&unk_1004BD770);
      v37 = sub_1000F2BE0();
      swift_allocError(&type metadata for Collaboration.Error, v37, 0, 0);
      *(_OWORD *)v38 = xmmword_1003C6D00;
      *(_BYTE *)(v38 + 16) = 3;
      swift_willThrow((__n128)xmmword_1003C6D00);

      v40 = *(_QWORD *)(v0 + 200);
      v39 = *(_QWORD *)(v0 + 208);
      v42 = *(_QWORD *)(v0 + 168);
      v41 = *(_QWORD *)(v0 + 176);
      v43 = *(_QWORD *)(v0 + 160);
      v45 = *(_QWORD *)(v0 + 128);
      v44 = *(_QWORD *)(v0 + 136);
      v46 = *(_QWORD *)(v0 + 120);
      v47 = *(_QWORD *)(v0 + 96);
      v49 = *(_QWORD *)(v0 + 88);
      v50 = *(_QWORD *)(v0 + 80);
      v51 = *(_QWORD *)(v0 + 72);
      v52 = *(_QWORD *)(v0 + 48);
      swift_task_dealloc(*(_QWORD *)(v0 + 224));
      swift_task_dealloc(v39);
      swift_task_dealloc(v40);
      swift_task_dealloc(v41);
      swift_task_dealloc(v42);
      swift_task_dealloc(v43);
      swift_task_dealloc(v44);
      swift_task_dealloc(v45);
      swift_task_dealloc(v46);
      swift_task_dealloc(v47);
      swift_task_dealloc(v49);
      swift_task_dealloc(v50);
      swift_task_dealloc(v51);
      swift_task_dealloc(v52);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 32))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184));
      v48 = (_QWORD *)swift_task_alloc(async function pointer to MusicCollaborativePlaylist.StartCollaborationRequest.perform()[1]);
      *(_QWORD *)(v0 + 272) = v48;
      *v48 = v0;
      v48[1] = sub_1000ECDB8;
      return MusicCollaborativePlaylist.StartCollaborationRequest.perform()();
    }
  }
}

uint64_t sub_1000ECDB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 272);
  v3[35] = a1;
  v3[36] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1000ED9CC;
  else
    v5 = sub_1000ECE20;
  return swift_task_switch(v5, v3[30], v3[31]);
}

uint64_t sub_1000ECE20()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  void *v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  char *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72[2];

  v1 = objc_msgSend(*(id *)(v0 + 280), "collaborationInvitationURL", swift_release(*(_QWORD *)(v0 + 232)).n128_f64[0]);
  v2 = *(_QWORD *)(v0 + 136);
  if (v1)
  {
    v3 = v1;
    v5 = *(_QWORD *)(v0 + 112);
    v4 = *(_QWORD *)(v0 + 120);
    v6 = *(_QWORD *)(v0 + 104);
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v1);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v2, v4, v6);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v2, 0, 1, v6);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v2, 1, v6) != 1)
    {
      v7 = *(_QWORD *)(v0 + 280);
      v8 = *(_QWORD *)(v0 + 208);
      v9 = *(_QWORD *)(v0 + 216);
      v10 = *(_QWORD *)(v0 + 184);
      v11 = *(_QWORD *)(v0 + 192);
      v12 = *(_QWORD *)(v0 + 136);
      v13 = *(_QWORD **)(v0 + 32);

      sub_10000FE2C(v12, &qword_1004B99B0);
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v8, v10);
      *v13 = v7;
      swift_storeEnumTagMultiPayload(v13, v9, 0);
      v14 = *(_QWORD *)(v0 + 200);
      v15 = *(_QWORD *)(v0 + 208);
      v17 = *(_QWORD *)(v0 + 168);
      v16 = *(_QWORD *)(v0 + 176);
      v18 = *(_QWORD *)(v0 + 160);
      v20 = *(_QWORD *)(v0 + 128);
      v19 = *(_QWORD *)(v0 + 136);
      v21 = *(_QWORD *)(v0 + 120);
      v22 = *(_QWORD *)(v0 + 96);
      v65 = *(_QWORD *)(v0 + 88);
      v67 = *(_QWORD *)(v0 + 80);
      v69 = *(_QWORD *)(v0 + 72);
      v71 = *(_QWORD *)(v0 + 48);
      swift_task_dealloc(*(_QWORD *)(v0 + 224));
      swift_task_dealloc(v15);
      swift_task_dealloc(v14);
      swift_task_dealloc(v16);
      swift_task_dealloc(v17);
      swift_task_dealloc(v18);
      swift_task_dealloc(v19);
      swift_task_dealloc(v20);
      swift_task_dealloc(v21);
      swift_task_dealloc(v22);
      swift_task_dealloc(v65);
      swift_task_dealloc(v67);
      swift_task_dealloc(v69);
      swift_task_dealloc(v71);
      v23 = *(uint64_t (**)(void))(v0 + 8);
      return v23();
    }
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 112) + 56))(*(_QWORD *)(v0 + 136), 1, 1, *(_QWORD *)(v0 + 104));
  }
  v24 = *(void **)(v0 + 280);
  sub_10000FE2C(*(_QWORD *)(v0 + 136), &qword_1004B99B0);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.error.getter(v25);
  v27 = os_log_type_enabled(v25, v26);
  v28 = *(void **)(v0 + 280);
  if (v27)
  {
    v29 = swift_slowAlloc(12, -1);
    v30 = swift_slowAlloc(32, -1);
    v72[0] = v30;
    *(_DWORD *)v29 = 136446210;
    v31 = v28;
    v32 = objc_msgSend(v31, "description");
    v33 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v35 = v34;

    *(_QWORD *)(v29 + 4) = sub_1000393D0(v33, v35, v72);
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v25, v26, "invitationURL missing for=%{public}s", (uint8_t *)v29, 0xCu);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v29, -1, -1);
  }
  else
  {

  }
  v36 = sub_1000F2BE0();
  v37 = swift_allocError(&type metadata for Collaboration.Error, v36, 0, 0);
  *(_OWORD *)v38 = xmmword_1003C6CB0;
  *(_BYTE *)(v38 + 16) = 3;
  swift_willThrow((__n128)xmmword_1003C6CB0);

  swift_errorRetain(v37);
  v39 = swift_errorRetain(v37);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.error.getter(v40);
  if (os_log_type_enabled(v40, v41))
  {
    v42 = swift_slowAlloc(12, -1);
    v43 = swift_slowAlloc(32, -1);
    v72[0] = v43;
    *(_DWORD *)v42 = 136446210;
    *(_QWORD *)(v0 + 24) = v37;
    swift_errorRetain(v37);
    v44 = sub_1000057B4((uint64_t *)&unk_1004BD690);
    v45 = (char *)String.init<A>(describing:)(v0 + 24, v44);
    *(_QWORD *)(v42 + 4) = sub_1000393D0(v45, v46, v72);
    swift_bridgeObjectRelease();
    swift_errorRelease(v37);
    swift_errorRelease(v37);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Start failed with error=%{public}s", (uint8_t *)v42, 0xCu);
    swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v42, -1, -1);
  }
  else
  {
    swift_errorRelease(v37);
    swift_errorRelease(v37);
  }

  v47 = *(void **)(v0 + 264);
  v48 = *(_QWORD *)(v0 + 208);
  v49 = *(_QWORD *)(v0 + 184);
  v50 = *(_QWORD *)(v0 + 192);
  v51 = sub_1000F2BE0();
  swift_allocError(&type metadata for Collaboration.Error, v51, 0, 0);
  *(_QWORD *)v52 = v37;
  *(_QWORD *)(v52 + 8) = 0;
  *(_BYTE *)(v52 + 16) = 1;
  swift_willThrow(v53);

  (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v48, v49);
  v55 = *(_QWORD *)(v0 + 200);
  v54 = *(_QWORD *)(v0 + 208);
  v57 = *(_QWORD *)(v0 + 168);
  v56 = *(_QWORD *)(v0 + 176);
  v58 = *(_QWORD *)(v0 + 160);
  v60 = *(_QWORD *)(v0 + 128);
  v59 = *(_QWORD *)(v0 + 136);
  v61 = *(_QWORD *)(v0 + 120);
  v62 = *(_QWORD *)(v0 + 96);
  v64 = *(_QWORD *)(v0 + 88);
  v66 = *(_QWORD *)(v0 + 80);
  v68 = *(_QWORD *)(v0 + 72);
  v70 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v64);
  swift_task_dealloc(v66);
  swift_task_dealloc(v68);
  swift_task_dealloc(v70);
  v23 = *(uint64_t (**)(void))(v0 + 8);
  return v23();
}

uint64_t sub_1000ED398()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 312);
  *(_QWORD *)(*v1 + 320) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000EDC3C;
  else
    v4 = sub_1000ED3F8;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 240), *(_QWORD *)(v2 + 248));
}

uint64_t sub_1000ED3F8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(void);
  void (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86[2];

  v1 = v0[6];
  swift_release(v0[29]);
  Playlist.collaboration.getter(v2);
  v3 = type metadata accessor for Playlist.Collaboration(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v1, 1, v3);
  v6 = v0[16];
  v7 = v0[13];
  v8 = v0[14];
  v9 = v0[6];
  if (v5 == 1)
  {
    sub_10000FE2C(v0[6], &qword_1004BD680);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  }
  else
  {
    Playlist.Collaboration.invitationURL.getter();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v9, v3);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {
      v58 = (void (*)(uint64_t, uint64_t, uint64_t))v0[37];
      v84 = v0[27];
      v60 = v0[24];
      v59 = v0[25];
      v61 = v0[23];
      v62 = v0[12];
      v63 = v0[10];
      v65 = v0[7];
      v64 = v0[8];
      v66 = v0[4];
      sub_10000FE2C(v0[16], &qword_1004B99B0);
      (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v59, v61);
      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v62, v65);
      v58(v66, v63, v65);
      swift_storeEnumTagMultiPayload(v66, v84, 1);
      v67 = v0[25];
      v68 = v0[26];
      v70 = v0[21];
      v69 = v0[22];
      v71 = v0[20];
      v73 = v0[16];
      v72 = v0[17];
      v74 = v0[15];
      v75 = v0[12];
      v79 = v0[11];
      v81 = v0[10];
      v83 = v0[9];
      v85 = v0[6];
      swift_task_dealloc(v0[28]);
      swift_task_dealloc(v68);
      swift_task_dealloc(v67);
      swift_task_dealloc(v69);
      swift_task_dealloc(v70);
      swift_task_dealloc(v71);
      swift_task_dealloc(v72);
      swift_task_dealloc(v73);
      swift_task_dealloc(v74);
      swift_task_dealloc(v75);
      swift_task_dealloc(v79);
      swift_task_dealloc(v81);
      swift_task_dealloc(v83);
      swift_task_dealloc(v85);
      v57 = (uint64_t (*)(void))v0[1];
      return v57();
    }
  }
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[38];
  v12 = v0[9];
  v11 = v0[10];
  v13 = v0[7];
  sub_10000FE2C(v0[16], &qword_1004B99B0);
  v14 = v10(v12, v11, v13);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.error.getter(v15);
  v17 = os_log_type_enabled(v15, v16);
  v19 = v0[8];
  v18 = v0[9];
  v20 = v0[7];
  if (v17)
  {
    v21 = swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v86[0] = v22;
    *(_DWORD *)v21 = 136446210;
    v23 = sub_100004D8C(&qword_1004BB750, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist, (uint64_t)&protocol conformance descriptor for Playlist);
    v24 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v20, v23);
    *(_QWORD *)(v21 + 4) = sub_1000393D0(v24, v25, v86);
    swift_bridgeObjectRelease();
    v26 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v26(v18, v20);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "invitationURL missing for=%{public}s", (uint8_t *)v21, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);
  }
  else
  {
    v26 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v26(v0[9], v0[7]);
  }

  v27 = v0[10];
  v28 = v0[7];
  v29 = sub_1000F2BE0();
  v30 = swift_allocError(&type metadata for Collaboration.Error, v29, 0, 0);
  *(_OWORD *)v31 = xmmword_1003C6CB0;
  *(_BYTE *)(v31 + 16) = 3;
  swift_willThrow((__n128)xmmword_1003C6CB0);
  v26(v27, v28);
  swift_errorRetain(v30);
  v32 = swift_errorRetain(v30);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.error.getter(v33);
  if (os_log_type_enabled(v33, v34))
  {
    v35 = swift_slowAlloc(12, -1);
    v36 = swift_slowAlloc(32, -1);
    v86[0] = v36;
    *(_DWORD *)v35 = 136446210;
    v0[2] = v30;
    swift_errorRetain(v30);
    v37 = sub_1000057B4((uint64_t *)&unk_1004BD690);
    v38 = (char *)String.init<A>(describing:)(v0 + 2, v37);
    *(_QWORD *)(v35 + 4) = sub_1000393D0(v38, v39, v86);
    swift_bridgeObjectRelease();
    swift_errorRelease(v30);
    swift_errorRelease(v30);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Start failed with error=%{public}s", (uint8_t *)v35, 0xCu);
    swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v35, -1, -1);
  }
  else
  {
    swift_errorRelease(v30);
    swift_errorRelease(v30);
  }

  v40 = v0[24];
  v41 = v0[25];
  v42 = v0[23];
  v43 = v0[12];
  v44 = v0[7];
  v45 = v0[8];
  swift_allocError(&type metadata for Collaboration.Error, v29, 0, 0);
  *(_QWORD *)v46 = v30;
  *(_QWORD *)(v46 + 8) = 0;
  *(_BYTE *)(v46 + 16) = 1;
  swift_willThrow(v47);
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v41, v42);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v44);
  v49 = v0[25];
  v48 = v0[26];
  v51 = v0[21];
  v50 = v0[22];
  v52 = v0[20];
  v54 = v0[16];
  v53 = v0[17];
  v55 = v0[15];
  v56 = v0[12];
  v77 = v0[11];
  v78 = v0[10];
  v80 = v0[9];
  v82 = v0[6];
  swift_task_dealloc(v0[28]);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v80);
  swift_task_dealloc(v82);
  v57 = (uint64_t (*)(void))v0[1];
  return v57();
}

uint64_t sub_1000ED9CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  swift_release(*(_QWORD *)(v0 + 232));
  v1 = *(_QWORD *)(v0 + 288);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v31 = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)(v0 + 24) = v1;
    swift_errorRetain(v1);
    v7 = sub_1000057B4((uint64_t *)&unk_1004BD690);
    v8 = (char *)String.init<A>(describing:)(v0 + 24, v7);
    *(_QWORD *)(v5 + 4) = sub_1000393D0(v8, v9, &v31);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Start failed with error=%{public}s", (uint8_t *)v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v10 = *(void **)(v0 + 264);
  v11 = *(_QWORD *)(v0 + 208);
  v12 = *(_QWORD *)(v0 + 184);
  v13 = *(_QWORD *)(v0 + 192);
  v14 = sub_1000F2BE0();
  swift_allocError(&type metadata for Collaboration.Error, v14, 0, 0);
  *(_QWORD *)v15 = v1;
  *(_QWORD *)(v15 + 8) = 0;
  *(_BYTE *)(v15 + 16) = 1;
  swift_willThrow(v16);

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  v18 = *(_QWORD *)(v0 + 200);
  v17 = *(_QWORD *)(v0 + 208);
  v20 = *(_QWORD *)(v0 + 168);
  v19 = *(_QWORD *)(v0 + 176);
  v21 = *(_QWORD *)(v0 + 160);
  v23 = *(_QWORD *)(v0 + 128);
  v22 = *(_QWORD *)(v0 + 136);
  v24 = *(_QWORD *)(v0 + 120);
  v25 = *(_QWORD *)(v0 + 96);
  v27 = *(_QWORD *)(v0 + 88);
  v28 = *(_QWORD *)(v0 + 80);
  v29 = *(_QWORD *)(v0 + 72);
  v30 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EDC3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  swift_release(*(_QWORD *)(v0 + 232));
  v1 = *(_QWORD *)(v0 + 320);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v33 = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)(v0 + 16) = v1;
    swift_errorRetain(v1);
    v7 = sub_1000057B4((uint64_t *)&unk_1004BD690);
    v8 = (char *)String.init<A>(describing:)(v0 + 16, v7);
    *(_QWORD *)(v5 + 4) = sub_1000393D0(v8, v9, &v33);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Start failed with error=%{public}s", (uint8_t *)v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v10 = *(_QWORD *)(v0 + 192);
  v11 = *(_QWORD *)(v0 + 200);
  v12 = *(_QWORD *)(v0 + 184);
  v13 = *(_QWORD *)(v0 + 96);
  v14 = *(_QWORD *)(v0 + 56);
  v15 = *(_QWORD *)(v0 + 64);
  v16 = sub_1000F2BE0();
  swift_allocError(&type metadata for Collaboration.Error, v16, 0, 0);
  *(_QWORD *)v17 = v1;
  *(_QWORD *)(v17 + 8) = 0;
  *(_BYTE *)(v17 + 16) = 1;
  swift_willThrow(v18);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  v20 = *(_QWORD *)(v0 + 200);
  v19 = *(_QWORD *)(v0 + 208);
  v22 = *(_QWORD *)(v0 + 168);
  v21 = *(_QWORD *)(v0 + 176);
  v23 = *(_QWORD *)(v0 + 160);
  v25 = *(_QWORD *)(v0 + 128);
  v24 = *(_QWORD *)(v0 + 136);
  v26 = *(_QWORD *)(v0 + 120);
  v27 = *(_QWORD *)(v0 + 96);
  v29 = *(_QWORD *)(v0 + 88);
  v30 = *(_QWORD *)(v0 + 80);
  v31 = *(_QWORD *)(v0 + 72);
  v32 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Collaboration.Manager.validate(_:url:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v4 = type metadata accessor for MusicCollaborativePlaylist.JoinRequest(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Collaboration.Object(0);
  v3[9] = v6;
  v3[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000057B4(&qword_1004BD700);
  v3[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Playlist(0);
  v3[12] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[13] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[14] = swift_task_alloc(v10);
  v3[15] = swift_task_alloc(v10);
  v11 = type metadata accessor for URL(0);
  v3[16] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v3[17] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[18] = swift_task_alloc(v13);
  v3[19] = swift_task_alloc(v13);
  v14 = type metadata accessor for MainActor(0);
  v3[20] = static MainActor.shared.getter(v15);
  v16 = dispatch thunk of Actor.unownedExecutor.getter(v14, &protocol witness table for MainActor);
  v3[21] = v16;
  v3[22] = v17;
  return swift_task_switch(sub_1000EE00C, v16, v17);
}

uint64_t sub_1000EE00C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;

  if (qword_1004B8BE0 != -1)
    swift_once(&qword_1004B8BE0, sub_1000F19B0);
  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 184) = sub_100039D34(v5, (uint64_t)static Logger.collaboration);
  v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v6 = v41(v1, v4, v2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 152);
  v11 = *(_QWORD *)(v0 + 128);
  v12 = *(_QWORD *)(v0 + 136);
  if (v9)
  {
    v13 = swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v42 = v14;
    *(_DWORD *)v13 = 136446210;
    v15 = sub_100004D8C((unint64_t *)&qword_1004BD788, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v16 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v11, v15);
    *(_QWORD *)(v13 + 4) = sub_1000393D0(v16, v17, &v42);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Validate called with url=%{public}s", (uint8_t *)v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 128));
  }

  v18 = *(_QWORD *)(v0 + 72);
  v19 = *(_QWORD *)(v0 + 80);
  sub_1000F2670(*(_QWORD *)(v0 + 32), v19);
  if (swift_getEnumCaseMultiPayload(v19, v18) == 1)
  {
    v20 = *(_QWORD *)(v0 + 96);
    v21 = *(_QWORD *)(v0 + 104);
    v22 = *(_QWORD *)(v0 + 88);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v21 + 32))(v22, *(_QWORD *)(v0 + 80), v20);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v21 + 56))(v22, 0, 1, v20);
  }
  else
  {
    dispatch thunk of LegacyModelObjectConvertible.init(_:)(**(_QWORD **)(v0 + 80));
  }
  v23 = *(_QWORD *)(v0 + 96);
  v24 = *(_QWORD *)(v0 + 104);
  v25 = *(_QWORD *)(v0 + 88);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v25, 1, v23) == 1)
  {
    swift_release(*(_QWORD *)(v0 + 160));
    sub_10000FE2C(v25, &qword_1004BD700);
    v26 = sub_1000F2BE0();
    swift_allocError(&type metadata for Collaboration.Error, v26, 0, 0);
    *(_OWORD *)v27 = xmmword_1003C6D00;
    *(_BYTE *)(v27 + 16) = 3;
    swift_willThrow((__n128)xmmword_1003C6D00);
    v28 = *(_QWORD *)(v0 + 144);
    v30 = *(_QWORD *)(v0 + 112);
    v29 = *(_QWORD *)(v0 + 120);
    v32 = *(_QWORD *)(v0 + 80);
    v31 = *(_QWORD *)(v0 + 88);
    v33 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 152));
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v35 = *(_QWORD *)(v0 + 144);
    v37 = *(_QWORD *)(v0 + 120);
    v36 = *(_QWORD *)(v0 + 128);
    v38 = *(_QWORD *)(v0 + 112);
    v39 = *(_QWORD *)(v0 + 40);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v37, v25, v23);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v38, v37, v23);
    v41(v35, v39, v36);
    MusicCollaborativePlaylist.JoinRequest.init(playlist:invitationURL:)(v38, v35);
    v40 = (_QWORD *)swift_task_alloc(async function pointer to MusicCollaborativePlaylist.JoinRequest.validate()[1]);
    *(_QWORD *)(v0 + 192) = v40;
    *v40 = v0;
    v40[1] = sub_1000EE3BC;
    return MusicCollaborativePlaylist.JoinRequest.validate()(*(_QWORD *)(v0 + 24));
  }
}

uint64_t sub_1000EE3BC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 192);
  *(_QWORD *)(*v1 + 200) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000EE4E8;
  else
    v4 = sub_1000EE41C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 168), *(_QWORD *)(v2 + 176));
}

uint64_t sub_1000EE41C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v0 + 88);
  v12 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 64);
  v9 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 160));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3, v5);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EE4E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = swift_release(*(_QWORD *)(v0 + 160));
  (*(void (**)(uint64_t, uint64_t, __n128))(v3 + 8))(v2, v4, v5);
  swift_errorRetain(v1);
  v6 = swift_errorRetain(v1);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = *(_QWORD *)(v0 + 200);
    v10 = swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v30 = v11;
    *(_DWORD *)v10 = 136446210;
    *(_QWORD *)(v0 + 16) = v9;
    swift_errorRetain(v9);
    v12 = sub_1000057B4((uint64_t *)&unk_1004BD690);
    v13 = (char *)String.init<A>(describing:)(v0 + 16, v12);
    *(_QWORD *)(v10 + 4) = sub_1000393D0(v13, v14, &v30);
    swift_bridgeObjectRelease();
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Validate failed with error=%{public}s", (uint8_t *)v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 200);
    swift_errorRelease(v15);
    swift_errorRelease(v15);
  }

  v16 = *(_QWORD *)(v0 + 200);
  v17 = *(_QWORD *)(v0 + 120);
  v18 = *(_QWORD *)(v0 + 96);
  v19 = *(_QWORD *)(v0 + 104);
  v20 = sub_1000F2BE0();
  swift_allocError(&type metadata for Collaboration.Error, v20, 0, 0);
  *(_QWORD *)v21 = v16;
  *(_QWORD *)(v21 + 8) = 0;
  *(_BYTE *)(v21 + 16) = 1;
  swift_willThrow(v22);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
  v23 = *(_QWORD *)(v0 + 144);
  v25 = *(_QWORD *)(v0 + 112);
  v24 = *(_QWORD *)(v0 + 120);
  v27 = *(_QWORD *)(v0 + 80);
  v26 = *(_QWORD *)(v0 + 88);
  v28 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Collaboration.Manager.join(_:url:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;

  v2[3] = a1;
  v2[4] = a2;
  v3 = type metadata accessor for MusicCollaborativePlaylist.JoinRequest(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Collaboration.Object(0);
  v2[8] = v5;
  v2[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000057B4(&qword_1004BD700);
  v2[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Playlist(0);
  v2[11] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[12] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[13] = swift_task_alloc(v9);
  v2[14] = swift_task_alloc(v9);
  v2[15] = swift_task_alloc(v9);
  v10 = type metadata accessor for URL(0);
  v2[16] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[17] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[18] = swift_task_alloc(v12);
  v2[19] = swift_task_alloc(v12);
  v13 = type metadata accessor for MainActor(0);
  v2[20] = static MainActor.shared.getter(v14);
  v15 = dispatch thunk of Actor.unownedExecutor.getter(v13, &protocol witness table for MainActor);
  v2[21] = v15;
  v2[22] = v16;
  return swift_task_switch(sub_1000EE86C, v15, v16);
}

uint64_t sub_1000EE86C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;

  if (qword_1004B8BE0 != -1)
    swift_once(&qword_1004B8BE0, sub_1000F19B0);
  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 184) = sub_100039D34(v5, (uint64_t)static Logger.collaboration);
  v42 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v6 = v42(v1, v4, v2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 152);
  v11 = *(_QWORD *)(v0 + 128);
  v12 = *(_QWORD *)(v0 + 136);
  if (v9)
  {
    v13 = swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v43 = v14;
    *(_DWORD *)v13 = 136446210;
    v15 = sub_100004D8C((unint64_t *)&qword_1004BD788, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v16 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v11, v15);
    *(_QWORD *)(v13 + 4) = sub_1000393D0(v16, v17, &v43);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Join called with url=%{public}s", (uint8_t *)v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 128));
  }

  v18 = *(_QWORD *)(v0 + 64);
  v19 = *(_QWORD *)(v0 + 72);
  sub_1000F2670(*(_QWORD *)(v0 + 24), v19);
  if (swift_getEnumCaseMultiPayload(v19, v18) == 1)
  {
    v20 = *(_QWORD *)(v0 + 88);
    v21 = *(_QWORD *)(v0 + 96);
    v22 = *(_QWORD *)(v0 + 80);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v21 + 32))(v22, *(_QWORD *)(v0 + 72), v20);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v21 + 56))(v22, 0, 1, v20);
  }
  else
  {
    dispatch thunk of LegacyModelObjectConvertible.init(_:)(**(_QWORD **)(v0 + 72));
  }
  v23 = *(_QWORD *)(v0 + 88);
  v24 = *(_QWORD *)(v0 + 96);
  v25 = *(_QWORD *)(v0 + 80);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v25, 1, v23) == 1)
  {
    swift_release(*(_QWORD *)(v0 + 160));
    sub_10000FE2C(v25, &qword_1004BD700);
    v26 = sub_1000F2BE0();
    swift_allocError(&type metadata for Collaboration.Error, v26, 0, 0);
    *(_OWORD *)v27 = xmmword_1003C6D00;
    *(_BYTE *)(v27 + 16) = 3;
    swift_willThrow((__n128)xmmword_1003C6D00);
    v28 = *(_QWORD *)(v0 + 144);
    v30 = *(_QWORD *)(v0 + 112);
    v29 = *(_QWORD *)(v0 + 120);
    v31 = *(_QWORD *)(v0 + 104);
    v33 = *(_QWORD *)(v0 + 72);
    v32 = *(_QWORD *)(v0 + 80);
    v34 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(*(_QWORD *)(v0 + 152));
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v36 = *(_QWORD *)(v0 + 144);
    v38 = *(_QWORD *)(v0 + 120);
    v37 = *(_QWORD *)(v0 + 128);
    v39 = *(_QWORD *)(v0 + 112);
    v40 = *(_QWORD *)(v0 + 32);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v38, v25, v23);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v39, v38, v23);
    v42(v36, v40, v37);
    MusicCollaborativePlaylist.JoinRequest.init(playlist:invitationURL:)(v39, v36);
    v41 = (_QWORD *)swift_task_alloc(async function pointer to MusicCollaborativePlaylist.JoinRequest.response()[1]);
    *(_QWORD *)(v0 + 192) = v41;
    *v41 = v0;
    v41[1] = sub_1000EEC28;
    return MusicCollaborativePlaylist.JoinRequest.response()(*(_QWORD *)(v0 + 104));
  }
}

uint64_t sub_1000EEC28()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[21];
    v5 = v2[22];
    v6 = sub_1000EED78;
  }
  else
  {
    v7 = v2[13];
    v8 = v2[11];
    v9 = *(void (**)(uint64_t, uint64_t))(v2[12] + 8);
    v2[26] = v9;
    v9(v7, v8);
    v4 = v2[21];
    v5 = v2[22];
    v6 = sub_1000EECA0;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_1000EECA0()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 88);
  v11 = *(_QWORD *)(v0 + 104);
  v12 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 48);
  v8 = *(_QWORD *)(v0 + 56);
  v9 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 160));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  v1(v4, v6);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EED78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 200);
  swift_release(*(_QWORD *)(v0 + 160));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 200);
    v6 = swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v30 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 16) = v5;
    swift_errorRetain(v5);
    v8 = sub_1000057B4((uint64_t *)&unk_1004BD690);
    v9 = (char *)String.init<A>(describing:)(v0 + 16, v8);
    *(_QWORD *)(v6 + 4) = sub_1000393D0(v9, v10, &v30);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Join failed with error=%{public}s", (uint8_t *)v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 200);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
  }

  v12 = *(_QWORD *)(v0 + 200);
  v13 = *(_QWORD *)(v0 + 120);
  v14 = *(_QWORD *)(v0 + 88);
  v15 = *(_QWORD *)(v0 + 96);
  v17 = *(_QWORD *)(v0 + 48);
  v16 = *(_QWORD *)(v0 + 56);
  v18 = *(_QWORD *)(v0 + 40);
  v19 = sub_1000F2BE0();
  swift_allocError(&type metadata for Collaboration.Error, v19, 0, 0);
  *(_QWORD *)v20 = v12;
  *(_QWORD *)(v20 + 8) = 0;
  *(_BYTE *)(v20 + 16) = 1;
  swift_willThrow(v21);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  v22 = *(_QWORD *)(v0 + 144);
  v24 = *(_QWORD *)(v0 + 112);
  v23 = *(_QWORD *)(v0 + 120);
  v25 = *(_QWORD *)(v0 + 104);
  v27 = *(_QWORD *)(v0 + 72);
  v26 = *(_QWORD *)(v0 + 80);
  v28 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Collaboration.Manager.end(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;

  v2[3] = a1;
  v2[4] = a2;
  v3 = type metadata accessor for Playlist(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MusicCollaborativePlaylist.EndCollaborationRequest(0);
  v2[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[9] = v6;
  v2[10] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  v2[11] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v2[12] = v9;
  v2[13] = v10;
  return swift_task_switch(sub_1000EF070, v9, v10);
}

uint64_t sub_1000EF070()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  if (qword_1004B8BE0 != -1)
    swift_once(&qword_1004B8BE0, sub_1000F19B0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100039D34(v1, (uint64_t)static Logger.collaboration);
  v0[14] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "End called", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = v0[6];
  v6 = v0[7];
  v9 = v0[4];
  v8 = v0[5];

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v9, v8);
  MusicCollaborativePlaylist.EndCollaborationRequest.init(playlist:)(v6);
  v10 = (_QWORD *)swift_task_alloc(async function pointer to MusicCollaborativePlaylist.EndCollaborationRequest.response()[1]);
  v0[15] = v10;
  *v10 = v0;
  v10[1] = sub_1000EF1B0;
  return MusicCollaborativePlaylist.EndCollaborationRequest.response()(v0[3]);
}

uint64_t sub_1000EF1B0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000EF210;
  else
    v4 = sub_1000F4B28;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 96), *(_QWORD *)(v2 + 104));
}

uint64_t sub_1000EF210()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 128);
  swift_release(*(_QWORD *)(v0 + 88));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 128);
    v6 = swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v21 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 16) = v5;
    swift_errorRetain(v5);
    v8 = sub_1000057B4((uint64_t *)&unk_1004BD690);
    v9 = (char *)String.init<A>(describing:)(v0 + 16, v8);
    *(_QWORD *)(v6 + 4) = sub_1000393D0(v9, v10, &v21);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "End failed with error=%{public}s", (uint8_t *)v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 128);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
  }

  v12 = *(_QWORD *)(v0 + 128);
  v14 = *(_QWORD *)(v0 + 72);
  v13 = *(_QWORD *)(v0 + 80);
  v16 = *(_QWORD *)(v0 + 56);
  v15 = *(_QWORD *)(v0 + 64);
  v17 = sub_1000F2BE0();
  swift_allocError(&type metadata for Collaboration.Error, v17, 0, 0);
  *(_QWORD *)v18 = v12;
  *(_QWORD *)(v18 + 8) = 0;
  *(_BYTE *)(v18 + 16) = 1;
  swift_willThrow(v19);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  swift_task_dealloc(v13);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Collaboration.Manager.moderate(_:collaborator:in:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v3 + 24) = a2;
  *(_QWORD *)(v3 + 32) = a3;
  *(_BYTE *)(v3 + 193) = a1;
  v4 = type metadata accessor for MusicCollaborativePlaylist.PendingCollaboratorDecisionRequest(0);
  *(_QWORD *)(v3 + 40) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 48) = v5;
  *(_QWORD *)(v3 + 56) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Playlist(0);
  *(_QWORD *)(v3 + 64) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 72) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 80) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 88) = swift_task_alloc(v8);
  v9 = type metadata accessor for Playlist.Collaborator(0);
  *(_QWORD *)(v3 + 96) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v3 + 104) = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 112) = swift_task_alloc(v11);
  *(_QWORD *)(v3 + 120) = swift_task_alloc(v11);
  v12 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v3 + 128) = static MainActor.shared.getter(v13);
  v14 = dispatch thunk of Actor.unownedExecutor.getter(v12, &protocol witness table for MainActor);
  *(_QWORD *)(v3 + 136) = v14;
  *(_QWORD *)(v3 + 144) = v15;
  return swift_task_switch(sub_1000EF4F8, v14, v15);
}

uint64_t sub_1000EF4F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  os_log_type_t type;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;

  if (qword_1004B8BE0 != -1)
    swift_once(&qword_1004B8BE0, sub_1000F19B0);
  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 72);
  v8 = *(_QWORD *)(v0 + 24);
  v7 = *(_QWORD *)(v0 + 32);
  v9 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 152) = sub_100039D34(v9, (uint64_t)static Logger.collaboration);
  v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v42(v1, v8, v2);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v11 = v10(v4, v7, v5);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(_QWORD *)(v0 + 120);
  v17 = *(_QWORD *)(v0 + 96);
  v16 = *(_QWORD *)(v0 + 104);
  v18 = *(_QWORD *)(v0 + 88);
  v20 = *(_QWORD *)(v0 + 64);
  v19 = *(_QWORD *)(v0 + 72);
  if (v14)
  {
    type = v13;
    v21 = *(_BYTE *)(v0 + 193) & 1;
    v39 = *(_QWORD *)(v0 + 72);
    v22 = swift_slowAlloc(32, -1);
    v40 = swift_slowAlloc(96, -1);
    v43 = v40;
    *(_DWORD *)v22 = 136446722;
    *(_BYTE *)(v0 + 192) = v21;
    v23 = (char *)String.init<A>(describing:)(v0 + 192, &type metadata for Collaboration.Manager.Moderation);
    *(_QWORD *)(v22 + 4) = sub_1000393D0(v23, v24, &v43);
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2082;
    v25 = sub_100004D8C(&qword_1004BD7A8, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist.Collaborator, (uint64_t)&protocol conformance descriptor for Playlist.Collaborator);
    v26 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v17, v25);
    *(_QWORD *)(v22 + 14) = sub_1000393D0(v26, v27, &v43);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    *(_WORD *)(v22 + 22) = 2082;
    v28 = sub_100004D8C(&qword_1004BB750, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist, (uint64_t)&protocol conformance descriptor for Playlist);
    v29 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v20, v28);
    *(_QWORD *)(v22 + 24) = sub_1000393D0(v29, v30, &v43);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v18, v20);
    _os_log_impl((void *)&_mh_execute_header, v12, type, "    Moderate called for:\n        - type=%{public}s\n        - collaborator=%{public}s\n        - playlist=%{public}s", (uint8_t *)v22, 0x20u);
    swift_arrayDestroy(v40, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v16 + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96));
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  }

  v31 = *(_QWORD *)(v0 + 112);
  v32 = *(_QWORD *)(v0 + 80);
  v33 = *(_QWORD *)(v0 + 64);
  v34 = *(_QWORD *)(v0 + 32);
  v35 = *(_BYTE *)(v0 + 193);
  v42(v31, *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 96));
  v10(v32, v34, v33);
  MusicCollaborativePlaylist.PendingCollaboratorDecisionRequest.init(collaborator:playlist:)(v31, v32);
  if ((v35 & 1) != 0)
  {
    v38 = (_QWORD *)swift_task_alloc(async function pointer to MusicCollaborativePlaylist.PendingCollaboratorDecisionRequest.reject()[1]);
    *(_QWORD *)(v0 + 176) = v38;
    *v38 = v0;
    v38[1] = sub_1000EF954;
    return MusicCollaborativePlaylist.PendingCollaboratorDecisionRequest.reject()();
  }
  else
  {
    v36 = (_QWORD *)swift_task_alloc(async function pointer to MusicCollaborativePlaylist.PendingCollaboratorDecisionRequest.approve()[1]);
    *(_QWORD *)(v0 + 160) = v36;
    *v36 = v0;
    v36[1] = sub_1000EF860;
    return MusicCollaborativePlaylist.PendingCollaboratorDecisionRequest.approve()();
  }
}

uint64_t sub_1000EF860()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 160);
  *(_QWORD *)(*v1 + 168) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000EF9B4;
  else
    v4 = sub_1000EF8C0;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 136), *(_QWORD *)(v2 + 144));
}

uint64_t sub_1000EF8C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v7 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 128));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EF954()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 176);
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000EFBB4;
  else
    v4 = sub_1000F4B58;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 136), *(_QWORD *)(v2 + 144));
}

uint64_t sub_1000EF9B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 168);
  swift_release(*(_QWORD *)(v0 + 128));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v21 = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)(v0 + 16) = v1;
    swift_errorRetain(v1);
    v7 = sub_1000057B4((uint64_t *)&unk_1004BD690);
    v8 = (char *)String.init<A>(describing:)(v0 + 16, v7);
    *(_QWORD *)(v5 + 4) = sub_1000393D0(v8, v9, &v21);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Moderate failed with error=%{public}s", (uint8_t *)v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v11 = *(_QWORD *)(v0 + 112);
  v10 = *(_QWORD *)(v0 + 120);
  v12 = *(_QWORD *)(v0 + 88);
  v20 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 48);
  v14 = *(_QWORD *)(v0 + 56);
  v15 = *(_QWORD *)(v0 + 40);
  v16 = sub_1000F2BE0();
  swift_allocError(&type metadata for Collaboration.Error, v16, 0, 0);
  *(_QWORD *)v17 = v1;
  *(_QWORD *)(v17 + 8) = 0;
  *(_BYTE *)(v17 + 16) = 1;
  swift_willThrow(v18);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v20);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EFBB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 184);
  swift_release(*(_QWORD *)(v0 + 128));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v21 = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)(v0 + 16) = v1;
    swift_errorRetain(v1);
    v7 = sub_1000057B4((uint64_t *)&unk_1004BD690);
    v8 = (char *)String.init<A>(describing:)(v0 + 16, v7);
    *(_QWORD *)(v5 + 4) = sub_1000393D0(v8, v9, &v21);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Moderate failed with error=%{public}s", (uint8_t *)v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v11 = *(_QWORD *)(v0 + 112);
  v10 = *(_QWORD *)(v0 + 120);
  v12 = *(_QWORD *)(v0 + 88);
  v20 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 48);
  v14 = *(_QWORD *)(v0 + 56);
  v15 = *(_QWORD *)(v0 + 40);
  v16 = sub_1000F2BE0();
  swift_allocError(&type metadata for Collaboration.Error, v16, 0, 0);
  *(_QWORD *)v17 = v1;
  *(_QWORD *)(v17 + 8) = 0;
  *(_BYTE *)(v17 + 16) = 1;
  swift_willThrow(v18);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v20);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Collaboration.Manager.remove(collaborator:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v4 = type metadata accessor for MusicCollaborativePlaylist.RemoveCollaboratorRequest(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Playlist(0);
  v3[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[10] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[11] = swift_task_alloc(v8);
  v3[12] = swift_task_alloc(v8);
  v9 = type metadata accessor for Playlist.Collaborator(0);
  v3[13] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[14] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[15] = swift_task_alloc(v11);
  v3[16] = swift_task_alloc(v11);
  v12 = type metadata accessor for MainActor(0);
  v3[17] = static MainActor.shared.getter(v13);
  v14 = dispatch thunk of Actor.unownedExecutor.getter(v12, &protocol witness table for MainActor);
  v3[18] = v14;
  v3[19] = v15;
  return swift_task_switch(sub_1000EFEBC, v14, v15);
}

uint64_t sub_1000EFEBC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;

  if (qword_1004B8BE0 != -1)
    swift_once(&qword_1004B8BE0, sub_1000F19B0);
  v1 = v0[16];
  v2 = v0[13];
  v3 = v0[14];
  v4 = v0[12];
  v5 = v0[9];
  v6 = v0[10];
  v8 = v0[4];
  v7 = v0[5];
  v9 = type metadata accessor for Logger(0);
  v0[20] = sub_100039D34(v9, (uint64_t)static Logger.collaboration);
  v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v36(v1, v8, v2);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v11 = v10(v4, v7, v5);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  v14 = os_log_type_enabled(v12, v13);
  v15 = v0[16];
  v17 = v0[13];
  v16 = v0[14];
  v18 = v0[12];
  v20 = v0[9];
  v19 = v0[10];
  if (v14)
  {
    v34 = v0[10];
    v21 = swift_slowAlloc(22, -1);
    v35 = swift_slowAlloc(64, -1);
    v37 = v35;
    *(_DWORD *)v21 = 136446466;
    v22 = sub_100004D8C(&qword_1004BD7A8, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist.Collaborator, (uint64_t)&protocol conformance descriptor for Playlist.Collaborator);
    v23 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v17, v22);
    *(_QWORD *)(v21 + 4) = sub_1000393D0(v23, v24, &v37);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    *(_WORD *)(v21 + 12) = 2082;
    v25 = sub_100004D8C(&qword_1004BB750, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist, (uint64_t)&protocol conformance descriptor for Playlist);
    v26 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v20, v25);
    *(_QWORD *)(v21 + 14) = sub_1000393D0(v26, v27, &v37);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v18, v20);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "    Remove called for:\n        - collaborator=%{public}s\n        - playlist=%{public}s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v21, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v16 + 8))(v0[16], v0[13]);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  }

  v28 = v0[15];
  v29 = v0[11];
  v30 = v0[9];
  v31 = v0[5];
  v36(v28, v0[4], v0[13]);
  v10(v29, v31, v30);
  MusicCollaborativePlaylist.RemoveCollaboratorRequest.init(collaborator:playlist:)(v28, v29);
  v32 = (_QWORD *)swift_task_alloc(async function pointer to MusicCollaborativePlaylist.RemoveCollaboratorRequest.response()[1]);
  v0[21] = v32;
  *v32 = v0;
  v32[1] = sub_1000F01A0;
  return MusicCollaborativePlaylist.RemoveCollaboratorRequest.response()(v0[3]);
}

uint64_t sub_1000F01A0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 168);
  *(_QWORD *)(*v1 + 176) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000F0294;
  else
    v4 = sub_1000F0200;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 144), *(_QWORD *)(v2 + 152));
}

uint64_t sub_1000F0200()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 136));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F0294()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 176);
  swift_release(*(_QWORD *)(v0 + 136));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 176);
    v6 = swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v24 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 16) = v5;
    swift_errorRetain(v5);
    v8 = sub_1000057B4((uint64_t *)&unk_1004BD690);
    v9 = (char *)String.init<A>(describing:)(v0 + 16, v8);
    *(_QWORD *)(v6 + 4) = sub_1000393D0(v9, v10, &v24);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Remove failed with error=%{public}s", (uint8_t *)v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 176);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
  }

  v12 = *(_QWORD *)(v0 + 176);
  v13 = *(_QWORD *)(v0 + 120);
  v14 = *(_QWORD *)(v0 + 128);
  v16 = *(_QWORD *)(v0 + 88);
  v15 = *(_QWORD *)(v0 + 96);
  v18 = *(_QWORD *)(v0 + 56);
  v17 = *(_QWORD *)(v0 + 64);
  v19 = *(_QWORD *)(v0 + 48);
  v20 = sub_1000F2BE0();
  swift_allocError(&type metadata for Collaboration.Error, v20, 0, 0);
  *(_QWORD *)v21 = v12;
  *(_QWORD *)(v21 + 8) = 0;
  *(_BYTE *)(v21 + 16) = 1;
  swift_willThrow(v22);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Collaboration.Manager.resetInvitationURL(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;

  v2[3] = a1;
  v2[4] = a2;
  v3 = type metadata accessor for Playlist(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MusicCollaborativePlaylist.ResetInvitationLinkRequest(0);
  v2[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[9] = v6;
  v2[10] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  v2[11] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v2[12] = v9;
  v2[13] = v10;
  return swift_task_switch(sub_1000F0558, v9, v10);
}

uint64_t sub_1000F0558()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  if (qword_1004B8BE0 != -1)
    swift_once(&qword_1004B8BE0, sub_1000F19B0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100039D34(v1, (uint64_t)static Logger.collaboration);
  v0[14] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Reset URL called", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = v0[6];
  v6 = v0[7];
  v9 = v0[4];
  v8 = v0[5];

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v9, v8);
  MusicCollaborativePlaylist.ResetInvitationLinkRequest.init(playlist:)(v6);
  v10 = (_QWORD *)swift_task_alloc(async function pointer to MusicCollaborativePlaylist.ResetInvitationLinkRequest.response()[1]);
  v0[15] = v10;
  *v10 = v0;
  v10[1] = sub_1000F0698;
  return MusicCollaborativePlaylist.ResetInvitationLinkRequest.response()(v0[3]);
}

uint64_t sub_1000F0698()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000F075C;
  else
    v4 = sub_1000F06F8;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 96), *(_QWORD *)(v2 + 104));
}

uint64_t sub_1000F06F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 88));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F075C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 128);
  swift_release(*(_QWORD *)(v0 + 88));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 128);
    v6 = swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v21 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 16) = v5;
    swift_errorRetain(v5);
    v8 = sub_1000057B4((uint64_t *)&unk_1004BD690);
    v9 = (char *)String.init<A>(describing:)(v0 + 16, v8);
    *(_QWORD *)(v6 + 4) = sub_1000393D0(v9, v10, &v21);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Reset failed with error=%{public}s", (uint8_t *)v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 128);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
  }

  v12 = *(_QWORD *)(v0 + 128);
  v14 = *(_QWORD *)(v0 + 72);
  v13 = *(_QWORD *)(v0 + 80);
  v16 = *(_QWORD *)(v0 + 56);
  v15 = *(_QWORD *)(v0 + 64);
  v17 = sub_1000F2BE0();
  swift_allocError(&type metadata for Collaboration.Error, v17, 0, 0);
  *(_QWORD *)v18 = v12;
  *(_QWORD *)(v18 + 8) = 0;
  *(_BYTE *)(v18 + 16) = 1;
  swift_willThrow(v19);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  swift_task_dealloc(v13);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Collaboration.Manager.updateShareOption(_:for:)(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t updated;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v2 + 24) = a2;
  *(_BYTE *)(v2 + 168) = a1;
  v3 = type metadata accessor for Playlist.Collaboration.InvitationMode(0);
  *(_QWORD *)(v2 + 32) = v3;
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 40) = v4;
  *(_QWORD *)(v2 + 48) = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for MusicCollaborativePlaylist.UpdateInvitationModeRequest(0);
  *(_QWORD *)(v2 + 56) = updated;
  v6 = *(_QWORD *)(updated - 8);
  *(_QWORD *)(v2 + 64) = v6;
  *(_QWORD *)(v2 + 72) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000057B4(&qword_1004BD680);
  *(_QWORD *)(v2 + 80) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Playlist.Collaboration(0);
  *(_QWORD *)(v2 + 88) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v2 + 96) = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 104) = swift_task_alloc(v10);
  *(_QWORD *)(v2 + 112) = swift_task_alloc(v10);
  v11 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v2 + 120) = static MainActor.shared.getter(v12);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(v11, &protocol witness table for MainActor);
  *(_QWORD *)(v2 + 128) = v13;
  *(_QWORD *)(v2 + 136) = v14;
  return swift_task_switch(sub_1000F0A58, v13, v14);
}

uint64_t sub_1000F0A58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int *v27;
  _QWORD *v28;

  if (qword_1004B8BE0 != -1)
    swift_once(&qword_1004B8BE0, sub_1000F19B0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100039D34(v1, (uint64_t)static Logger.collaboration);
  *(_QWORD *)(v0 + 144) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(unsigned __int8 *)(v0 + 168);
    v6 = swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 67240192;
    *(_DWORD *)(v6 + 4) = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "updateShareOption called with isOpen=%{BOOL,public}d", (uint8_t *)v6, 8u);
    swift_slowDealloc(v6, -1, -1);
  }
  v7 = *(_QWORD *)(v0 + 88);
  v8 = *(_QWORD *)(v0 + 96);
  v9 = *(_QWORD *)(v0 + 80);

  Playlist.collaboration.getter(v10);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v7) == 1)
  {
    v11 = *(_QWORD *)(v0 + 80);
    swift_release(*(_QWORD *)(v0 + 120));
    sub_10000FE2C(v11, &qword_1004BD680);
    v12 = sub_1000F2BE0();
    swift_allocError(&type metadata for Collaboration.Error, v12, 0, 0);
    *(_OWORD *)v13 = xmmword_1003C6D00;
    *(_BYTE *)(v13 + 16) = 3;
    swift_willThrow((__n128)xmmword_1003C6D00);
    v14 = *(_QWORD *)(v0 + 104);
    v16 = *(_QWORD *)(v0 + 72);
    v15 = *(_QWORD *)(v0 + 80);
    v17 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(*(_QWORD *)(v0 + 112));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 104);
    v20 = *(_QWORD *)(v0 + 112);
    v21 = *(_QWORD *)(v0 + 88);
    v22 = *(_QWORD *)(v0 + 96);
    v24 = *(_QWORD *)(v0 + 40);
    v23 = *(_QWORD *)(v0 + 48);
    v25 = *(_QWORD *)(v0 + 32);
    v26 = *(unsigned __int8 *)(v0 + 168);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v22 + 32))(v20, *(_QWORD *)(v0 + 80), v21);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v19, v20, v21);
    v27 = (unsigned int *)&enum case for Playlist.Collaboration.InvitationMode.open(_:);
    if (!v26)
      v27 = (unsigned int *)&enum case for Playlist.Collaboration.InvitationMode.requiresApproval(_:);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v24 + 104))(v23, *v27, v25);
    MusicCollaborativePlaylist.UpdateInvitationModeRequest.init(collaboration:updatedInvitationMode:)(v19, v23);
    v28 = (_QWORD *)swift_task_alloc(async function pointer to MusicCollaborativePlaylist.UpdateInvitationModeRequest.response()[1]);
    *(_QWORD *)(v0 + 152) = v28;
    *v28 = v0;
    v28[1] = sub_1000F0CD8;
    return MusicCollaborativePlaylist.UpdateInvitationModeRequest.response()();
  }
}

uint64_t sub_1000F0CD8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 152);
  *(_QWORD *)(*v1 + 160) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000F0DE4;
  else
    v4 = sub_1000F0D38;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 128), *(_QWORD *)(v2 + 136));
}

uint64_t sub_1000F0D38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 48);
  v8 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 120));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v4);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F0DE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 120));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 160);
    v6 = swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v27 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 16) = v5;
    swift_errorRetain(v5);
    v8 = sub_1000057B4((uint64_t *)&unk_1004BD690);
    v9 = (char *)String.init<A>(describing:)(v0 + 16, v8);
    *(_QWORD *)(v6 + 4) = sub_1000393D0(v9, v10, &v27);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "updateShareOption failed with error=%{public}s", (uint8_t *)v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 160);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
  }

  v12 = *(_QWORD *)(v0 + 160);
  v13 = *(_QWORD *)(v0 + 112);
  v14 = *(_QWORD *)(v0 + 88);
  v15 = *(_QWORD *)(v0 + 96);
  v17 = *(_QWORD *)(v0 + 64);
  v16 = *(_QWORD *)(v0 + 72);
  v18 = *(_QWORD *)(v0 + 56);
  v19 = sub_1000F2BE0();
  swift_allocError(&type metadata for Collaboration.Error, v19, 0, 0);
  *(_QWORD *)v20 = v12;
  *(_QWORD *)(v20 + 8) = 0;
  *(_BYTE *)(v20 + 16) = 1;
  swift_willThrow(v21);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  v22 = *(_QWORD *)(v0 + 104);
  v24 = *(_QWORD *)(v0 + 72);
  v23 = *(_QWORD *)(v0 + 80);
  v25 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Collaboration.Manager.handleError(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[24];

  v2 = v1;
  if (qword_1004B8BE0 != -1)
    swift_once(&qword_1004B8BE0, sub_1000F19B0);
  v4 = type metadata accessor for Logger(0);
  sub_100039D34(v4, (uint64_t)static Logger.collaboration);
  swift_errorRetain(a1);
  v5 = swift_errorRetain(a1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138543362;
    swift_errorRetain(a1);
    v10 = _swift_stdlib_bridgeErrorToNSError(a1);
    *(_QWORD *)(v8 + 4) = v10;
    *v9 = v10;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Calling coordinator to handle error=%{public}@", (uint8_t *)v8, 0xCu);
    v11 = sub_1000057B4(&qword_1004C0DB0);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  swift_beginAccess(v2 + 16, v18, 0, 0);
  sub_1000444A8(v2 + 16, (uint64_t)v15);
  v12 = v16;
  v13 = v17;
  sub_1000096A0(v15, v16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 8))(a1, v12, v13);
  return sub_10000970C(v15);
}

uint64_t Collaboration.Manager.activityViewController(for:url:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSURL *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  NSURL *v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  NSString v30;
  uint64_t v31;
  NSString v32;
  uint64_t v33;
  NSString v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  Class isa;
  id v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  id v46;
  id v47;
  uint64_t result;
  uint64_t v49;
  id v50;
  uint64_t v51;
  _QWORD aBlock[5];
  uint64_t v53;

  type metadata accessor for Locale(0);
  __chkstk_darwin();
  v4 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for String.LocalizationValue(0);
  v5 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin();
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v9 = (char *)&v49 - v8;
  sub_1000057B4(&qword_1004B99B0);
  __chkstk_darwin();
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v11, a2, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  v15 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
  {
    URL._bridgeToObjectiveC()(v14);
    v15 = v16;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v12);
  }
  v17 = objc_msgSend(objc_allocWithZone((Class)NSItemProvider), "initWithContentsOfURL:", v15);

  if (v17)
  {
    v18 = objc_msgSend(objc_allocWithZone((Class)LPLinkMetadata), "init");
    URL._bridgeToObjectiveC()(v19);
    v21 = v20;
    objc_msgSend(v18, "setURL:", v20);

    v22 = objc_msgSend(objc_allocWithZone((Class)LPiTunesMediaPlaylistMetadata), "init");
    v23 = Collaboration.Object.name.getter();
    if (!v24)
    {
      v50 = v17;
      v25 = v4;
      String.LocalizationValue.init(stringLiteral:)(0xD000000000000011, 0x80000001003AA710);
      v26 = v5;
      v27 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v28 = v51;
      v27(v7, v9, v51);
      if (qword_1004B8A10 != -1)
        swift_once(&qword_1004B8A10, sub_10002B2B8);
      v29 = qword_1004F4630;
      static Locale.current.getter((id)qword_1004F4630);
      String.init(localized:table:bundle:locale:comment:)(v7, v23, 0, v29, v25, 0, 0, 256);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v28);
      v17 = v50;
    }
    v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    objc_msgSend(v22, "setName:", v30);

    Collaboration.Object.ownerName.getter();
    if (v31)
    {
      v32 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      v32 = 0;
    }
    objc_msgSend(v22, "setCurator:", v32);

    Collaboration.Object.storeIdentifier.getter();
    if (v33)
    {
      v34 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      v34 = 0;
    }
    objc_msgSend(v22, "setStoreIdentifier:", v34);

    Collaboration.Object.lpImage.getter();
    v36 = v35;
    objc_msgSend(v22, "setArtwork:", v35);

    objc_msgSend(v18, "setSpecialization:", v22);
    v37 = sub_1000057B4((uint64_t *)&unk_1004BDDB0);
    v38 = swift_allocObject(v37, 40, 7);
    *(_OWORD *)(v38 + 16) = xmmword_1003C6240;
    *(_QWORD *)(v38 + 32) = v17;
    aBlock[0] = v38;
    specialized Array._endMutation()(v38);
    v39 = objc_allocWithZone((Class)UIActivityItemsConfiguration);
    sub_10000598C(0, &qword_1004BD7D0, NSItemProvider_ptr);
    v40 = v17;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v42 = objc_msgSend(v39, "initWithItemProviders:", isa);

    v43 = swift_allocObject(&unk_100472DF0, 24, 7);
    *(_QWORD *)(v43 + 16) = v18;
    aBlock[4] = sub_1000F2C48;
    v53 = v43;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000F1834;
    aBlock[3] = &unk_100472E08;
    v44 = _Block_copy(aBlock);
    v45 = v53;
    v46 = v18;
    objc_msgSend(v42, "setPerItemMetadataProvider:", v44, swift_release(v45).n128_f64[0]);
    _Block_release(v44);
    v47 = objc_msgSend(objc_allocWithZone((Class)UIActivityViewController), "initWithActivityItemsConfiguration:", v42);
    objc_msgSend(v47, "setAllowsProminentActivity:", 0);

    return (uint64_t)v47;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000019, 0x80000001003AA6F0, "MusicCore/Collaboration.swift", 29, 2, 620, 0);
    __break(1u);
  }
  return result;
}

id sub_1000F1754@<X0>(uint64_t a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  id result;

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIActivityItemsConfigurationMetadataKeyLinkPresentationMetadata);
  if (v4 == v7 && v6 == v8)
  {
    swift_bridgeObjectRelease_n(v6, 2);
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 0);
    swift_bridgeObjectRelease();
    result = (id)swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
    {
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      return result;
    }
  }
  *(_QWORD *)(a3 + 24) = sub_10000598C(0, &qword_1004BDAC8, LPLinkMetadata_ptr);
  *(_QWORD *)a3 = a2;
  return a2;
}

id sub_1000F1834(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(_QWORD *__return_ptr, uint64_t, id);
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _QWORD v14[3];
  uint64_t v15;

  v6 = *(void (**)(_QWORD *__return_ptr, uint64_t, id))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = a3;
  v6(v14, a2, v7);
  swift_release(v5);

  v8 = v15;
  if (!v15)
    return 0;
  sub_1000096A0(v14, v15);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v11);
  v12 = (void *)_bridgeAnythingToObjectiveC<A>(_:)(v11, v8);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  sub_10000970C(v14);
  return v12;
}

uint64_t Collaboration.Manager.deinit()
{
  uint64_t v0;

  sub_10000970C((_QWORD *)(v0 + 16));
  return v0;
}

uint64_t Collaboration.Manager.__deallocating_deinit()
{
  uint64_t v0;

  sub_10000970C((_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t Collaboration.ArtworkCachingReference.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return v0;
}

uint64_t Collaboration.ArtworkCachingReference.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_1000F19B0()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_10004FD4C(v0, static Logger.collaboration);
  sub_100039D34(v0, (uint64_t)static Logger.collaboration);
  sub_10000598C(0, (unint64_t *)&qword_1004BC960, OS_os_log_ptr);
  v1 = OS_os_log.init(subsystem:category:)(0xD000000000000013, 0x80000001003A7200, 0x726F62616C6C6F43, 0xED00006E6F697461);
  return Logger.init(_:)(v1);
}

uint64_t static Logger.collaboration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1004B8BE0 != -1)
    swift_once(&qword_1004B8BE0, sub_1000F19B0);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100039D34(v2, (uint64_t)static Logger.collaboration);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t Playlist.Collaborator.isHost.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  int v16;
  uint64_t *v17;
  char v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;

  v0 = type metadata accessor for Playlist.Collaborator.Role(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin();
  v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000057B4(&qword_1004BD7D8);
  __chkstk_darwin();
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000057B4(&qword_1004BD7E0);
  __chkstk_darwin();
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v10 = (char *)&v22 - v9;
  v11 = __chkstk_darwin();
  v13 = (char *)&v22 - v12;
  Playlist.Collaborator.role.getter(v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v10, enum case for Playlist.Collaborator.Role.host(_:), v0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v1 + 56))(v10, 0, 1, v0);
  v14 = (uint64_t)&v6[*(int *)(v4 + 48)];
  sub_10000FEB4((uint64_t)v13, (uint64_t)v6, &qword_1004BD7E0);
  sub_10000FEB4((uint64_t)v10, v14, &qword_1004BD7E0);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  if (v15((uint64_t)v6, 1, v0) == 1)
  {
    sub_10000FE2C((uint64_t)v10, &qword_1004BD7E0);
    sub_10000FE2C((uint64_t)v13, &qword_1004BD7E0);
    v16 = v15(v14, 1, v0);
    if (v16 == 1)
      v17 = &qword_1004BD7E0;
    else
      v17 = &qword_1004BD7D8;
    if (v16 == 1)
      v18 = -1;
    else
      v18 = 0;
  }
  else
  {
    sub_10000FEB4((uint64_t)v6, (uint64_t)v8, &qword_1004BD7E0);
    if (v15(v14, 1, v0) == 1)
    {
      sub_10000FE2C((uint64_t)v10, &qword_1004BD7E0);
      sub_10000FE2C((uint64_t)v13, &qword_1004BD7E0);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v8, v0);
      v18 = 0;
      v17 = &qword_1004BD7D8;
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v3, v14, v0);
      v19 = sub_100004D8C(&qword_1004BD7E8, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist.Collaborator.Role, (uint64_t)&protocol conformance descriptor for Playlist.Collaborator.Role);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v3, v0, v19);
      v20 = *(void (**)(char *, uint64_t))(v1 + 8);
      v20(v3, v0);
      v17 = &qword_1004BD7E0;
      sub_10000FE2C((uint64_t)v10, &qword_1004BD7E0);
      sub_10000FE2C((uint64_t)v13, &qword_1004BD7E0);
      v20(v8, v0);
    }
  }
  sub_10000FE2C((uint64_t)v6, v17);
  return v18 & 1;
}

uint64_t Playlist.hasJoinedCollaboration.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  uint64_t v19;

  v0 = sub_1000057B4(&qword_1004BD680);
  __chkstk_darwin(v0);
  v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1000057B4(&qword_1004BD688);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v19 - v8;
  Playlist.collaboration.getter(v7);
  v10 = type metadata accessor for Playlist.Collaboration(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v2, 1, v10) == 1)
  {
    sub_10000FE2C((uint64_t)v2, &qword_1004BD680);
    v12 = type metadata accessor for Playlist.Collaborator.Status(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v9, 1, 1, v12);
LABEL_10:
    v17 = 0;
    goto LABEL_11;
  }
  Playlist.Collaboration.collaboratorStatus.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v2, v10);
  v13 = type metadata accessor for Playlist.Collaborator.Status(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v9, 1, v13) == 1)
    goto LABEL_10;
  sub_10000FEB4((uint64_t)v9, (uint64_t)v6, &qword_1004BD688);
  v15 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v6, v13);
  if (v15 != enum case for Playlist.Collaborator.Status.host(_:)
    && v15 != enum case for Playlist.Collaborator.Status.joined(_:))
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v13);
    goto LABEL_10;
  }
  v17 = 1;
LABEL_11:
  sub_10000FE2C((uint64_t)v9, &qword_1004BD688);
  return v17;
}

BOOL MPModelPlaylist.hasJoinedCollaboration.getter()
{
  void *v0;

  return (char *)objc_msgSend(v0, "collaboratorStatus") - 3 < (char *)2;
}

void *sub_1000F1FBC(void *__src, uint64_t a2, void *__dst)
{
  if (__dst)
  {
    if (__src)
      return memmove(__dst, __src, a2 - (_QWORD)__src);
  }
  return __src;
}

uint64_t sub_1000F1FE0(uint64_t (*a1)(void))
{
  return a1() & 1;
}

uint64_t sub_1000F2004@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_1000F202C(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_1000F2094;
  return v5(v2 + 32);
}

uint64_t sub_1000F2094()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_BYTE **)(*v0 + 16);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  *v2 = *(_BYTE *)(v1 + 32);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t _s9MusicCore13CollaborationO5SetupO5title6activeSSSb_tFZ_0(char a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[16];

  v2 = type metadata accessor for Locale(0);
  __chkstk_darwin(v2);
  v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for String.LocalizationValue(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v11 = &v17[-v10];
  if ((a1 & 1) != 0)
  {
    v12 = 0x80000001003AA8E0;
    v13 = 0x1000000000000017;
  }
  else
  {
    v13 = 0x726F62616C6C6F43;
    v12 = 0xAE00A680E2657461;
  }
  String.LocalizationValue.init(stringLiteral:)(v13, v12);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(v9, v11, v5);
  if (qword_1004B8A10 != -1)
    swift_once(&qword_1004B8A10, sub_10002B2B8);
  v14 = qword_1004F4630;
  static Locale.current.getter((id)qword_1004F4630);
  v15 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, v14, v4, 0, 0, 256);
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v5);
  return v15;
}

uint64_t sub_1000F2280(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 == 2)
    return swift_bridgeObjectRelease(a2);
  if (a3 <= 1u)
    return swift_errorRelease(result);
  return result;
}

Swift::Int sub_1000F22A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_1000057B4((uint64_t *)&unk_1004BDAD0);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v27 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v27 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      Hasher.init(_seed:)(v28);
      swift_bridgeObjectRetain();
      String.hash(into:)(v28, v8, v7);
      result = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = v16[1];
        v18 = *v16 == v8 && v17 == v7;
        if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, v7, 0), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease(v7);
          goto LABEL_4;
        }
        v19 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v19;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v20 = (_QWORD *)(v15 + 16 * v11);
          v21 = v20[1];
          if (*v20 != v8 || v21 != v7)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, v7, 0);
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v23 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v23 = v8;
      v23[1] = v7;
      v24 = *(_QWORD *)(v3 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v26;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

Swift::Int sub_1000F2448(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;
  Swift::Int result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _QWORD v19[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_1000057B4(&qword_1004BDA78);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = *(unsigned __int8 *)(v6 + v4);
      Hasher.init(_seed:)(v19);
      Hasher._combine(_:)(v7);
      result = Hasher._finalize()();
      v9 = -1 << *(_BYTE *)(v3 + 32);
      v10 = result & ~v9;
      v11 = v10 >> 6;
      v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
      v13 = 1 << v10;
      v14 = *(_QWORD *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(unsigned __int8 *)(v14 + v10) == (_DWORD)v7)
          goto LABEL_3;
        v15 = ~v9;
        while (1)
        {
          v10 = (v10 + 1) & v15;
          v11 = v10 >> 6;
          v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
          v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0)
            break;
          if (*(unsigned __int8 *)(v14 + v10) == (_DWORD)v7)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
      *(_BYTE *)(v14 + v10) = v7;
      v16 = *(_QWORD *)(v3 + 16);
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_1000F2588()
{
  _QWORD *v0;
  uint64_t v1;

  swift_unknownObjectRelease(v0[2]);
  v1 = v0[5];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[7]);
    if (v0[9])
      swift_release(v0[10]);
  }
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_1000F25D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_1004BD6A4);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10002E8E0;
  v4[9] = a1;
  v4[10] = v1 + 32;
  return swift_task_switch(sub_1000E7F54, 0, 0);
}

uint64_t type metadata accessor for Collaboration.Object(uint64_t a1)
{
  uint64_t result;

  result = qword_1004BD878;
  if (!qword_1004BD878)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Collaboration.Object);
  return result;
}

uint64_t sub_1000F2670(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Collaboration.Object(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F26B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Playlist(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

double sub_1000F2714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Playlist(0) - 8) + 80);
  return sub_1000E9594(a1, a2, a3, a4, v4 + ((v9 + 16) & ~v9));
}

uint64_t sub_1000F2778(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000F2788(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000F2790()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F27BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1000E91EC(a1, a2, a3, a4, *(void **)(v4 + 16), *(_QWORD *)(v4 + 24));
}

uint64_t sub_1000F27C4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[3];
  v2 = a1[4];
  sub_1000096A0(a1, v1);
  return dispatch thunk of LibraryPlaylistEntryInternalFilter.playlist.getter(v1, v2);
}

uint64_t sub_1000F2808(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_100009788(&qword_1004BD6F0);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000F284C(uint64_t a1)
{
  uint64_t v1;

  sub_1000EB050(a1, *(void **)(v1 + 16));
}

void sub_1000F2854(uint64_t a1)
{
  uint64_t v1;

  sub_1000EB980(a1, *(void **)(v1 + 16));
}

void sub_1000F285C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  int v12;
  uint64_t v13;
  void *v14;
  char active;
  id v16;
  char *v17;
  unint64_t v18;
  __n128 v19;
  __n128 *v20;
  __n128 *v21;
  __n128 *v22;
  unint64_t v23;
  __n128 *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[18];

  v2 = type metadata accessor for Playlist(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Collaboration.Object(0);
  __chkstk_darwin(v6);
  v8 = (id *)((char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1004B8AF8 != -1)
    swift_once(&qword_1004B8AF8, sub_1000D365C);
  v9 = static ApplicationCapabilities.Controller.shared;
  KeyPath = swift_getKeyPath(&unk_1003CD5F0);
  v11 = swift_getKeyPath(&unk_1003CD618);
  static Published.subscript.getter(v34, v9, KeyPath, v11);
  swift_release(KeyPath);
  swift_release(v11);
  v12 = BYTE1(v34[0]);
  v13 = v34[3];
  v32 = v34[4];
  v33 = v34[7];
  v14 = (void *)v34[10];
  v34[17] = v34[9];
  v31 = v34[12];
  v29 = v34[1];
  v30 = v34[14];
  sub_1000F2670(a1, (uint64_t)v8);
  if (swift_getEnumCaseMultiPayload(v8, v6) == 1)
  {
    (*(void (**)(char *, id *, uint64_t))(v3 + 32))(v5, v8, v2);
    active = Playlist.hasActiveCollaboration.getter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    if ((active & 1) != 0)
      goto LABEL_9;
  }
  else
  {
    v16 = *v8;
    v17 = (char *)objc_msgSend(*v8, "collaboratorStatus");

    if ((unint64_t)(v17 - 2) < 3)
      goto LABEL_9;
  }
  if (!v12)
  {
    v25 = sub_1000F2BE0();
    swift_allocError(&type metadata for Collaboration.Error, v25, 0, 0);
    v19 = (__n128)xmmword_1003C6C90;
    goto LABEL_18;
  }
  if ((sub_1000E9B0C() & 1) == 0)
  {
    v26 = sub_1000F2BE0();
    swift_allocError(&type metadata for Collaboration.Error, v26, 0, 0);
    v19 = (__n128)xmmword_1003C6D10;
    goto LABEL_18;
  }
LABEL_9:
  if ((sub_1000E63A4(3u, v13) & 1) == 0)
  {
    v23 = sub_1000F2BE0();
    swift_allocError(&type metadata for Collaboration.Error, v23, 0, 0);
    v19 = (__n128)xmmword_1003C6D20;
LABEL_18:
    *v24 = v19;
    v22 = v24 + 1;
    goto LABEL_19;
  }
  if (!v14 || (objc_msgSend(v14, "isMinorAccountHolder") & 1) != 0)
  {
    v18 = sub_1000F2BE0();
    swift_allocError(&type metadata for Collaboration.Error, v18, 0, 0);
    v21 = v20;
    v22 = v20 + 1;
    v21->n128_u64[0] = 0;
    v21->n128_u64[1] = 0;
LABEL_19:
    v22->n128_u8[0] = 3;
    swift_willThrow(v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return;
  }
  if ((v29 & 1) == 0)
  {
    v27 = sub_1000F2BE0();
    swift_allocError(&type metadata for Collaboration.Error, v27, 0, 0);
    v19 = (__n128)xmmword_1003C6C80;
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

unint64_t sub_1000F2BE0()
{
  unint64_t result;

  result = qword_1004BD758;
  if (!qword_1004BD758)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Collaboration.Error, &type metadata for Collaboration.Error);
    atomic_store(result, (unint64_t *)&qword_1004BD758);
  }
  return result;
}

uint64_t sub_1000F2C24()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_1000F2C48@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000F1754(a1, *(void **)(v2 + 16), a2);
}

unint64_t sub_1000F2C54()
{
  unint64_t result;

  result = qword_1004BD7F0;
  if (!qword_1004BD7F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Collaboration.Collaborator.Change, &type metadata for Collaboration.Collaborator.Change);
    atomic_store(result, (unint64_t *)&qword_1004BD7F0);
  }
  return result;
}

unint64_t sub_1000F2CA0()
{
  unint64_t result;

  result = qword_1004BD7F8;
  if (!qword_1004BD7F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Collaboration.Manager.DeepLinkType, &type metadata for Collaboration.Manager.DeepLinkType);
    atomic_store(result, (unint64_t *)&qword_1004BD7F8);
  }
  return result;
}

unint64_t sub_1000F2CE8()
{
  unint64_t result;

  result = qword_1004BD800;
  if (!qword_1004BD800)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Collaboration.Manager.Moderation, &type metadata for Collaboration.Manager.Moderation);
    atomic_store(result, (unint64_t *)&qword_1004BD800);
  }
  return result;
}

ValueMetadata *type metadata accessor for Collaboration()
{
  return &type metadata for Collaboration;
}

ValueMetadata *type metadata accessor for Collaboration.Collaborator()
{
  return &type metadata for Collaboration.Collaborator;
}

uint64_t storeEnumTagSinglePayload for Collaboration.Collaborator.Change(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000F2D98 + 4 * byte_1003CD5B1[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000F2DCC + 4 * byte_1003CD5AC[v4]))();
}

uint64_t sub_1000F2DCC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F2DD4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000F2DDCLL);
  return result;
}

uint64_t sub_1000F2DE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000F2DF0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000F2DF4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F2DFC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Collaboration.Collaborator.Change()
{
  return &type metadata for Collaboration.Collaborator.Change;
}

ValueMetadata *type metadata accessor for Collaboration.Setup()
{
  return &type metadata for Collaboration.Setup;
}

uint64_t sub_1000F2E2C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 == 2)
    return swift_bridgeObjectRetain();
  if (a3 <= 1u)
    return swift_errorRetain();
  return result;
}

uint64_t destroy for Collaboration.Error(uint64_t a1)
{
  return sub_1000F2280(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s9MusicCore13CollaborationO5ErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000F2E2C(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for Collaboration.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000F2E2C(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1000F2280(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for Collaboration.Error(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1000F2280(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for Collaboration.Error(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Collaboration.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000F2FD0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_1000F2FE8(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Collaboration.Error()
{
  return &type metadata for Collaboration.Error;
}

char *initializeBufferWithCopyOfBuffer for Collaboration.Object(char *a1, char **a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v11[(v5 + 16) & ~(unint64_t)v5];
    swift_retain(v11);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v7 = type metadata accessor for Playlist(0);
      (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = a3;
      v10 = 1;
    }
    else
    {
      v12 = *a2;
      *(_QWORD *)a1 = *a2;
      v13 = v12;
      v8 = a1;
      v9 = a3;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

void destroy for Collaboration.Object(id *a1, uint64_t a2)
{
  uint64_t v3;

  if (swift_getEnumCaseMultiPayload(a1, a2) == 1)
  {
    v3 = type metadata accessor for Playlist(0);
    (*(void (**)(id *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  else
  {

  }
}

void **initializeWithCopy for Collaboration.Object(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for Playlist(0);
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    v7 = a1;
    v8 = a3;
    v9 = 1;
  }
  else
  {
    v10 = *a2;
    *a1 = *a2;
    v11 = v10;
    v7 = a1;
    v8 = a3;
    v9 = 0;
  }
  swift_storeEnumTagMultiPayload(v7, v8, v9);
  return a1;
}

void **assignWithCopy for Collaboration.Object(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  if (a1 != a2)
  {
    sub_1000F324C((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for Playlist(0);
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = a1;
      v8 = a3;
      v9 = 1;
    }
    else
    {
      v10 = *a2;
      *a1 = *a2;
      v11 = v10;
      v7 = a1;
      v8 = a3;
      v9 = 0;
    }
    swift_storeEnumTagMultiPayload(v7, v8, v9);
  }
  return a1;
}

uint64_t sub_1000F324C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Collaboration.Object(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *initializeWithTake for Collaboration.Object(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for Playlist(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for Collaboration.Object(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_1000F324C((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for Playlist(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000F33B0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for Playlist(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for Collaboration.Manager()
{
  return objc_opt_self(_TtCO9MusicCore13Collaboration7Manager);
}

ValueMetadata *type metadata accessor for Collaboration.Manager.DeepLinkType()
{
  return &type metadata for Collaboration.Manager.DeepLinkType;
}

uint64_t _s9MusicCore13CollaborationO7ManagerC12DeepLinkTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000F34A4 + 4 * byte_1003CD5BB[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000F34D8 + 4 * byte_1003CD5B6[v4]))();
}

uint64_t sub_1000F34D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F34E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000F34E8);
  return result;
}

uint64_t sub_1000F34F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000F34FCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000F3500(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F3508(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Collaboration.Manager.Moderation()
{
  return &type metadata for Collaboration.Manager.Moderation;
}

uint64_t type metadata accessor for Collaboration.ArtworkCachingReference()
{
  return objc_opt_self(_TtCO9MusicCore13Collaboration23ArtworkCachingReference);
}

uint64_t sub_1000F3544(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1004BDA54);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10002F6EC;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1004BDA50 + dword_1004BDA50))(a1, v4);
}

uint64_t sub_1000F35B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1004BDA64);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10002E8E0;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1004BDA60 + dword_1004BDA60))(a1, v4);
}

void sub_1000F3624(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease(a1);
    if (v3)
    {
LABEL_3:
      sub_1000057B4(&qword_1004BDAA0);
      v4 = (_QWORD *)static _SetStorage.allocate(capacity:)(v3);
      v26 = a1;
      if (!v2)
        goto LABEL_4;
LABEL_11:
      if (a1 < 0)
        v7 = a1;
      else
        v7 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v5 = _CocoaArrayWrapper.endIndex.getter(v7);
      swift_bridgeObjectRelease(a1);
      if (!v5)
        return;
      goto LABEL_15;
    }
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
  }
  v4 = &_swiftEmptySetSingleton;
  v26 = a1;
  if (v2)
    goto LABEL_11;
LABEL_4:
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v5)
    return;
LABEL_15:
  v8 = 0;
  v9 = (char *)(v4 + 7);
  v25 = v5;
  while ((v26 & 0xC000000000000001) != 0)
  {
    v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v26);
    v11 = __OFADD__(v8++, 1);
    if (v11)
      goto LABEL_32;
LABEL_24:
    v27 = v10;
    v29 = v10;
    v12 = v4[5];
    v13 = type metadata accessor for AnyCancellable(0);
    v14 = sub_100004D8C(&qword_1004BDAA8, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
    v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v12, v13, v14);
    v16 = -1 << *((_BYTE *)v4 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    v19 = *(_QWORD *)&v9[8 * (v17 >> 6)];
    v20 = 1 << v17;
    if (((1 << v17) & v19) != 0)
    {
      v21 = ~v16;
      v22 = sub_100004D8C(&qword_1004BDAB0, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
      do
      {
        v28 = *(_QWORD *)(v4[6] + 8 * v17);
        if ((dispatch thunk of static Equatable.== infix(_:_:)(&v28, &v29, v13, v22) & 1) != 0)
        {
          swift_release(v27);
          v5 = v25;
          goto LABEL_17;
        }
        v17 = (v17 + 1) & v21;
        v18 = v17 >> 6;
        v19 = *(_QWORD *)&v9[8 * (v17 >> 6)];
        v20 = 1 << v17;
      }
      while ((v19 & (1 << v17)) != 0);
      v5 = v25;
    }
    *(_QWORD *)&v9[8 * v18] = v20 | v19;
    *(_QWORD *)(v4[6] + 8 * v17) = v27;
    v23 = v4[2];
    v11 = __OFADD__(v23, 1);
    v24 = v23 + 1;
    if (v11)
      goto LABEL_33;
    v4[2] = v24;
LABEL_17:
    if (v8 == v5)
      return;
  }
  if (v8 >= *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_34;
  swift_retain(*(_QWORD *)(v26 + 32 + 8 * v8));
  v11 = __OFADD__(v8++, 1);
  if (!v11)
    goto LABEL_24;
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
}

Swift::Int sub_1000F38B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int result;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_1000057B4(&qword_1004BDA98);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v24 = v1;
    v25 = a1 + 32;
    while (1)
    {
      v6 = *(unsigned __int8 *)(v25 + v4++);
      Hasher.init(_seed:)(v26);
      v7 = 0x657469726F766166;
      if (v6 != 1)
        v7 = 0x64616F6C6E776F64;
      if (v6)
        v8 = v7;
      else
        v8 = 7105633;
      if (v6)
        v9 = 0xE900000000000073;
      else
        v9 = 0xE300000000000000;
      String.hash(into:)(v26, v8, v9);
      swift_bridgeObjectRelease();
      result = Hasher._finalize()();
      v11 = ~(-1 << *(_BYTE *)(v3 + 32));
      v12 = result & v11;
      v13 = (result & (unint64_t)v11) >> 6;
      v14 = *(_QWORD *)(v5 + 8 * v13);
      v15 = 1 << (result & v11);
      if ((v15 & v14) != 0)
      {
        do
        {
          if (*(_BYTE *)(*(_QWORD *)(v3 + 48) + v12))
          {
            if (*(_BYTE *)(*(_QWORD *)(v3 + 48) + v12) == 1)
              v16 = 0x657469726F766166;
            else
              v16 = 0x64616F6C6E776F64;
            v17 = 0xE900000000000073;
            if (!v6)
            {
LABEL_18:
              v18 = 0xE300000000000000;
              v19 = 7105633;
              if (v16 != 7105633)
                goto LABEL_27;
              goto LABEL_26;
            }
          }
          else
          {
            v17 = 0xE300000000000000;
            v16 = 7105633;
            if (!v6)
              goto LABEL_18;
          }
          if (v6 == 1)
            v19 = 0x657469726F766166;
          else
            v19 = 0x64616F6C6E776F64;
          v18 = 0xE900000000000073;
          if (v16 != v19)
            goto LABEL_27;
LABEL_26:
          if (v17 == v18)
          {
            swift_bridgeObjectRelease_n(v17, 2);
            goto LABEL_4;
          }
LABEL_27:
          v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v19, v18, 0);
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          if ((v20 & 1) != 0)
            goto LABEL_4;
          v12 = (v12 + 1) & v11;
          v13 = v12 >> 6;
          v14 = *(_QWORD *)(v5 + 8 * (v12 >> 6));
          v15 = 1 << v12;
        }
        while ((v14 & (1 << v12)) != 0);
      }
      *(_QWORD *)(v5 + 8 * v13) = v15 | v14;
      *(_BYTE *)(*(_QWORD *)(v3 + 48) + v12) = v6;
      v21 = *(_QWORD *)(v3 + 16);
      v22 = __OFADD__(v21, 1);
      v23 = v21 + 1;
      if (v22)
        break;
      *(_QWORD *)(v3 + 16) = v23;
LABEL_4:
      if (v4 == v24)
        return v3;
    }
    __break(1u);
  }
  else
  {
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return result;
}

void *sub_1000F3B18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v5[10];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_1000057B4(&qword_1004BDA90);
    static _SetStorage.allocate(capacity:)(v1);
    v3 = *(unsigned __int8 *)(a1 + 32);
    Hasher.init(_seed:)(v5);
    __asm { BR              X8 }
  }
  return &_swiftEmptySetSingleton;
}

void *sub_1000F402C(uint64_t a1)
{
  uint64_t v1;
  int v3;
  __int128 v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_1000057B4(&qword_1004BDA88);
    static _SetStorage.allocate(capacity:)(v1);
    v3 = *(unsigned __int8 *)(a1 + 32);
    Hasher.init(_seed:)(&v5);
    __asm { BR              X8 }
  }
  return &_swiftEmptySetSingleton;
}

uint64_t sub_1000F47F4()
{
  return sub_1000F4820((uint64_t *)&unk_1004BDAF0);
}

uint64_t sub_1000F4800(uint64_t a1, uint64_t a2)
{
  return sub_1000F4890(a1, a2, (uint64_t *)&unk_1004BDAF0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000EBAB0);
}

uint64_t sub_1000F4814()
{
  return sub_1000F4820(&qword_1004BE670);
}

uint64_t sub_1000F4820(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = sub_1000057B4(a1);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = v5 + *(_QWORD *)(v3 + 64);
  v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v6, v7);
}

uint64_t sub_1000F487C(uint64_t a1, uint64_t a2)
{
  return sub_1000F4890(a1, a2, &qword_1004BE670, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000EB180);
}

uint64_t sub_1000F4890(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000057B4(a3) - 8) + 80);
  return a4(a1, a2, v4 + ((v7 + 16) & ~v7));
}

uint64_t sub_1000F48EC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000F48FC(void *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;

  sub_1000EB310(a1, a2, a3, *(_BYTE **)(v3 + 16));
}

uint64_t sub_1000F4904()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000F4914(void *a1, char a2)
{
  uint64_t v2;

  sub_1000E936C(a1, a2 & 1, *(void (**)(Class, _QWORD))(v2 + 16));
}

void sub_1000F4920(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_10010526C(a1, a2, *(void (**)(void *, uint64_t))(v2 + 16));
}

uint64_t sub_1000F4928()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000F494C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000E953C(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1000F4954()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for Playlist(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1000F49E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(type metadata accessor for Playlist(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = (uint64_t *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v10 = *v9;
  v11 = v9[1];
  v12 = (_QWORD *)swift_task_alloc(dword_1004BDB64);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_10002F6EC;
  return sub_1000E9714(a1, v6, v7, v8, v10, v11);
}

uint64_t sub_1000F4A94()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F4AB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1004BDB8C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10002F6EC;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1004BDB88 + dword_1004BDB88))(a1, v4);
}

double static Alert.enableCloudLibraryAlert(context:)@<D0>(char a1@<W0>, uint64_t a2@<X8>)
{
  __int128 v3;
  double result;
  _OWORD v5[2];
  __int128 v6;
  uint64_t v7;

  sub_1000FD26C(a1, (uint64_t)v5);
  v3 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v3;
  result = *(double *)&v6;
  *(_OWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 48) = v7;
  return result;
}

double static Alert.explicitRestrictedAlert(forPlayback:)@<D0>(char a1@<W0>, uint64_t a2@<X8>)
{
  __int128 v3;
  double result;
  _OWORD v5[2];
  __int128 v6;
  uint64_t v7;

  sub_1000FD460(a1, (uint64_t)v5);
  v3 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v3;
  result = *(double *)&v6;
  *(_OWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 48) = v7;
  return result;
}

double static Alert.confirmDelete(for:library:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  double result;
  _OWORD v10[2];
  __int128 v11;
  uint64_t v12;

  v5 = a1[3];
  v6 = a1[4];
  v7 = sub_1000096A0(a1, v5);
  sub_1000F6664((uint64_t)v7, a2, v5, v6, (uint64_t)v10);
  v8 = v10[1];
  *(_OWORD *)a3 = v10[0];
  *(_OWORD *)(a3 + 16) = v8;
  result = *(double *)&v11;
  *(_OWORD *)(a3 + 32) = v11;
  *(_QWORD *)(a3 + 48) = v12;
  return result;
}

double static Alert.cellularDataDisallowedAlert(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  double result;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  sub_1000FE198(a1, a2, (uint64_t *)v6);
  v4 = v6[1];
  *(_OWORD *)a3 = v6[0];
  *(_OWORD *)(a3 + 16) = v4;
  result = *(double *)&v7;
  *(_OWORD *)(a3 + 32) = v7;
  *(_QWORD *)(a3 + 48) = v8;
  return result;
}

double static Alert.dolbyAtmosDownloadsAlert(message:completion:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;
  uint64_t v10;

  sub_1000FDDF4(a1, a2, a3, a4, (uint64_t)v8);
  v6 = v8[1];
  *(_OWORD *)a5 = v8[0];
  *(_OWORD *)(a5 + 16) = v6;
  result = *(double *)&v9;
  *(_OWORD *)(a5 + 32) = v9;
  *(_QWORD *)(a5 + 48) = v10;
  return result;
}

uint64_t static Alert.Action.tapToRadar(title:description:screenshots:attachments:keywords:withDevicePrefix:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  _BYTE v11[56];

  sub_1000FE58C(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)v11);
  return sub_1000FE8E0((uint64_t)v11, a9);
}

double static Alert.cellularRestrictedAlert(model:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  double result;
  _OWORD v5[2];
  __int128 v6;
  uint64_t v7;

  sub_1000FE928(a1, v5);
  v3 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v3;
  result = *(double *)&v6;
  *(_OWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 48) = v7;
  return result;
}

uint64_t sub_1000F4D80()
{
  return swift_task_switch(sub_1000F4D94, 0, 0);
}

id sub_1000F4D94()
{
  uint64_t v0;
  id result;
  void *v2;

  result = objc_msgSend((id)objc_opt_self(MPNetworkObserver), "sharedNetworkObserver");
  if (result)
  {
    v2 = result;
    objc_msgSend(result, "setVideoCellularStreamingAllowed:", 1);

    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000F4DFC()
{
  return swift_task_switch(sub_1000F4E10, 0, 0);
}

id sub_1000F4E10()
{
  uint64_t v0;
  id result;
  void *v2;

  result = objc_msgSend((id)objc_opt_self(MPNetworkObserver), "sharedNetworkObserver");
  if (result)
  {
    v2 = result;
    objc_msgSend(result, "setMusicCellularStreamingAllowed:", 1);

    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

double static Alert.networkUnavailableAlert(model:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  double result;
  _OWORD v5[2];
  __int128 v6;
  uint64_t v7;

  sub_1000FF4E8(a1, (uint64_t *)v5);
  v3 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v3;
  result = *(double *)&v6;
  *(_OWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 48) = v7;
  return result;
}

uint64_t sub_1000F4EC0()
{
  return swift_task_switch(sub_100100018, 0, 0);
}

double static Alert.accountRequiredAlert()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v55 = type metadata accessor for UUID(0);
  v50 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v3 = (char *)&v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for String.LocalizationValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v45 - v12;
  String.LocalizationValue.init(stringLiteral:)(0xD000000000000010, 0x80000001003AA900);
  v14 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v14(v11, v13, v7);
  if (qword_1004B8A10 != -1)
    swift_once(&qword_1004B8A10, sub_10002B2B8);
  v15 = qword_1004F4630;
  static Locale.current.getter((id)qword_1004F4630);
  v16 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v15, v6, 0, 0, 256);
  v53 = v17;
  v54 = v16;
  v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v13, v7);
  String.LocalizationValue.init(stringLiteral:)(0xD00000000000004FLL, 0x80000001003AA920);
  v14(v11, v13, v7);
  v19 = qword_1004F4630;
  static Locale.current.getter((id)qword_1004F4630);
  v20 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v19, v6, 0, 0, 256);
  v51 = v21;
  v52 = v20;
  v18(v13, v7);
  String.LocalizationValue.init(stringLiteral:)(19279, 0xE200000000000000);
  v14(v11, v13, v7);
  v22 = qword_1004F4630;
  static Locale.current.getter((id)qword_1004F4630);
  v23 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v22, v6, 0, 0, 256);
  v48 = v24;
  v49 = v23;
  v18(v13, v7);
  v25 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v26 = UUID.uuidString.getter(v25);
  v46 = v27;
  v47 = v26;
  v28 = *(void (**)(char *, uint64_t))(v50 + 8);
  v29 = v55;
  v28(v3, v55);
  String.LocalizationValue.init(stringLiteral:)(0x73676E6974746553, 0xE800000000000000);
  v14(v11, v13, v7);
  v30 = qword_1004F4630;
  static Locale.current.getter((id)qword_1004F4630);
  v31 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v30, v6, 0, 0, 256);
  v33 = v32;
  v18(v13, v7);
  v34 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v35 = UUID.uuidString.getter(v34);
  v37 = v36;
  v28(v3, v29);
  v38 = sub_1000057B4(&qword_1004BF6E0);
  v39 = swift_allocObject(v38, 144, 7);
  *(_QWORD *)&result = 2;
  *(_OWORD *)(v39 + 16) = xmmword_1003C6BD0;
  *(_QWORD *)(v39 + 32) = v35;
  *(_QWORD *)(v39 + 40) = v37;
  *(_QWORD *)(v39 + 48) = v31;
  *(_QWORD *)(v39 + 56) = v33;
  *(_BYTE *)(v39 + 64) = 2;
  *(_QWORD *)(v39 + 72) = &unk_1004BDC10;
  *(_QWORD *)(v39 + 80) = 0;
  v41 = v46;
  *(_QWORD *)(v39 + 88) = v47;
  *(_QWORD *)(v39 + 96) = v41;
  v42 = v48;
  *(_QWORD *)(v39 + 104) = v49;
  *(_QWORD *)(v39 + 112) = v42;
  *(_BYTE *)(v39 + 120) = 2;
  *(_QWORD *)(v39 + 128) = 0;
  *(_QWORD *)(v39 + 136) = 0;
  v43 = v53;
  *(_QWORD *)a1 = v54;
  *(_QWORD *)(a1 + 8) = v43;
  v44 = v51;
  *(_QWORD *)(a1 + 16) = v52;
  *(_QWORD *)(a1 + 24) = v44;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v39;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t sub_1000F52A0()
{
  return swift_task_switch(sub_1000F52B4, 0, 0);
}

id sub_1000F52B4()
{
  uint64_t v0;
  id result;
  void *v2;

  result = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (result)
  {
    v2 = result;
    LSApplicationWorkspace.openSettings()();

    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

double static Alert.subscriptionRequiredAlert()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v55 = type metadata accessor for UUID(0);
  v50 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v3 = (char *)&v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for String.LocalizationValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v45 - v12;
  String.LocalizationValue.init(stringLiteral:)(0xD000000000000015, 0x80000001003AA970);
  v14 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v14(v11, v13, v7);
  if (qword_1004B8A10 != -1)
    swift_once(&qword_1004B8A10, sub_10002B2B8);
  v15 = qword_1004F4630;
  static Locale.current.getter((id)qword_1004F4630);
  v16 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v15, v6, 0, 0, 256);
  v53 = v17;
  v54 = v16;
  v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v13, v7);
  String.LocalizationValue.init(stringLiteral:)(0xD000000000000059, 0x80000001003AA990);
  v14(v11, v13, v7);
  v19 = qword_1004F4630;
  static Locale.current.getter((id)qword_1004F4630);
  v20 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v19, v6, 0, 0, 256);
  v51 = v21;
  v52 = v20;
  v18(v13, v7);
  String.LocalizationValue.init(stringLiteral:)(19279, 0xE200000000000000);
  v14(v11, v13, v7);
  v22 = qword_1004F4630;
  static Locale.current.getter((id)qword_1004F4630);
  v23 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v22, v6, 0, 0, 256);
  v48 = v24;
  v49 = v23;
  v18(v13, v7);
  v25 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v26 = UUID.uuidString.getter(v25);
  v46 = v27;
  v47 = v26;
  v28 = *(void (**)(char *, uint64_t))(v50 + 8);
  v29 = v55;
  v28(v3, v55);
  String.LocalizationValue.init(stringLiteral:)(0x73676E6974746553, 0xE800000000000000);
  v14(v11, v13, v7);
  v30 = qword_1004F4630;
  static Locale.current.getter((id)qword_1004F4630);
  v31 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v30, v6, 0, 0, 256);
  v33 = v32;
  v18(v13, v7);
  v34 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v35 = UUID.uuidString.getter(v34);
  v37 = v36;
  v28(v3, v29);
  v38 = sub_1000057B4(&qword_1004BF6E0);
  v39 = swift_allocObject(v38, 144, 7);
  *(_QWORD *)&result = 2;
  *(_OWORD *)(v39 + 16) = xmmword_1003C6BD0;
  *(_QWORD *)(v39 + 32) = v35;
  *(_QWORD *)(v39 + 40) = v37;
  *(_QWORD *)(v39 + 48) = v31;
  *(_QWORD *)(v39 + 56) = v33;
  *(_BYTE *)(v39 + 64) = 2;
  *(_QWORD *)(v39 + 72) = &unk_1004BDC18;
  *(_QWORD *)(v39 + 80) = 0;
  v41 = v46;
  *(_QWORD *)(v39 + 88) = v47;
  *(_QWORD *)(v39 + 96) = v41;
  v42 = v48;
  *(_QWORD *)(v39 + 104) = v49;
  *(_QWORD *)(v39 + 112) = v42;
  *(_BYTE *)(v39 + 120) = 2;
  *(_QWORD *)(v39 + 128) = 0;
  *(_QWORD *)(v39 + 136) = 0;
  v43 = v53;
  *(_QWORD *)a1 = v54;
  *(_QWORD *)(a1 + 8) = v43;
  v44 = v51;
  *(_QWORD *)(a1 + 16) = v52;
  *(_QWORD *)(a1 + 24) = v44;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v39;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t sub_1000F56DC()
{
  return swift_task_switch(sub_1000F56F0, 0, 0);
}

uint64_t sub_1000F56F0()
{
  uint64_t v0;
  id v1;
  void *v2;

  v1 = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (v1)
  {
    v2 = v1;
    LSApplicationWorkspace.openRestrictions()();

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F5748()
{
  return swift_task_switch(sub_1000F575C, 0, 0);
}

id sub_1000F575C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  id result;
  void *v5;
  NSString v6;
  void *v7;

  if (qword_1004B8AF8 != -1)
    swift_once(&qword_1004B8AF8, sub_1000D365C);
  v1 = static ApplicationCapabilities.Controller.shared;
  KeyPath = swift_getKeyPath(&unk_1003CD8E0);
  v3 = swift_getKeyPath(&unk_1003CD908);
  static Published.subscript.getter((_QWORD *)(v0 + 16), v1, KeyPath, v3);
  swift_release(v3);
  swift_release(KeyPath);
  v7 = *(void **)(v0 + 96);
  result = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
  if (result)
  {
    v5 = result;
    static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureExplicitContentAllowed);
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    objc_msgSend(v5, "setBoolValue:forSetting:", 1, v6);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

double static Alert.contentUnavailableAlert()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = type metadata accessor for UUID(0);
  v35 = *(_QWORD *)(v2 - 8);
  v36 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Locale(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for String.LocalizationValue(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v32 - v13;
  String.LocalizationValue.init(stringLiteral:)(0xD00000000000003FLL, 0x80000001003AA9F0);
  v15 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v15(v12, v14, v8);
  if (qword_1004B8A10 != -1)
    swift_once(&qword_1004B8A10, sub_10002B2B8);
  v16 = qword_1004F4630;
  static Locale.current.getter((id)qword_1004F4630);
  v17 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v16, v7, 0, 0, 256);
  v33 = v18;
  v34 = v17;
  v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v14, v8);
  String.LocalizationValue.init(stringLiteral:)(19279, 0xE200000000000000);
  v15(v12, v14, v8);
  v20 = qword_1004F4630;
  static Locale.current.getter((id)qword_1004F4630);
  v21 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v20, v7, 0, 0, 256);
  v23 = v22;
  v19(v14, v8);
  v24 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v25 = UUID.uuidString.getter(v24);
  v27 = v26;
  (*(void (**)(char *, uint64_t))(v35 + 8))(v4, v36);
  v28 = sub_1000057B4(&qword_1004BF6E0);
  v29 = swift_allocObject(v28, 88, 7);
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v29 + 16) = xmmword_1003C64D0;
  *(_QWORD *)(v29 + 32) = v25;
  *(_QWORD *)(v29 + 40) = v27;
  *(_QWORD *)(v29 + 48) = v21;
  *(_QWORD *)(v29 + 56) = v23;
  *(_BYTE *)(v29 + 64) = 2;
  *(_QWORD *)(v29 + 72) = 0;
  *(_QWORD *)(v29 + 80) = 0;
  v31 = v33;
  *(_QWORD *)a1 = v34;
  *(_QWORD *)(a1 + 8) = v31;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v29;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

double static Alert.userUploadRequiredAlert()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = type metadata accessor for UUID(0);
  v38 = *(_QWORD *)(v2 - 8);
  v39 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Locale(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for String.LocalizationValue(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v35 - v13;
  String.LocalizationValue.init(stringLiteral:)(0xD00000000000002CLL, 0x80000001003AAA30);
  v15 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v15(v12, v14, v8);
  if (qword_1004B8A10 != -1)
    swift_once(&qword_1004B8A10, sub_10002B2B8);
  v16 = qword_1004F4630;
  static Locale.current.getter((id)qword_1004F4630);
  v17 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v16, v7, 0, 0, 256);
  v36 = v18;
  v37 = v17;
  v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v14, v8);
  String.LocalizationValue.init(stringLiteral:)(0xD000000000000060, 0x80000001003AAA60);
  v15(v12, v14, v8);
  v20 = qword_1004F4630;
  static Locale.current.getter((id)qword_1004F4630);
  v35 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v20, v7, 0, 0, 256);
  v22 = v21;
  v19(v14, v8);
  String.LocalizationValue.init(stringLiteral:)(19279, 0xE200000000000000);
  v15(v12, v14, v8);
  v23 = qword_1004F4630;
  static Locale.current.getter((id)qword_1004F4630);
  v24 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v23, v7, 0, 0, 256);
  v26 = v25;
  v19(v14, v8);
  v27 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v28 = UUID.uuidString.getter(v27);
  v30 = v29;
  (*(void (**)(char *, uint64_t))(v38 + 8))(v4, v39);
  v31 = sub_1000057B4(&qword_1004BF6E0);
  v32 = swift_allocObject(v31, 88, 7);
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v32 + 16) = xmmword_1003C64D0;
  *(_QWORD *)(v32 + 32) = v28;
  *(_QWORD *)(v32 + 40) = v30;
  *(_QWORD *)(v32 + 48) = v24;
  *(_QWORD *)(v32 + 56) = v26;
  *(_BYTE *)(v32 + 64) = 2;
  *(_QWORD *)(v32 + 72) = 0;
  *(_QWORD *)(v32 + 80) = 0;
  v34 = v36;
  *(_QWORD *)a1 = v37;
  *(_QWORD *)(a1 + 8) = v34;
  *(_QWORD *)(a1 + 16) = v35;
  *(_QWORD *)(a1 + 24) = v22;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v32;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

double static Alert.ageVerificationFallbackAlert()@<D0>(uint64_t a1@<X8>)
{
  __int128 v2;
  double result;
  _OWORD v4[2];
  __int128 v5;
  uint64_t v6;

  sub_1000FF9AC((uint64_t)v4);
  v2 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v2;
  result = *(double *)&v5;
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  return result;
}

uint64_t sub_1000F5EB8()
{
  return swift_task_switch(sub_1000F5ECC, 0, 0);
}

uint64_t sub_1000F5ECC()
{
  uint64_t v0;

  if (qword_1004B8C88 != -1)
    swift_once(&qword_1004B8C88, sub_1001188CC);
  CloudLibrary.StatusObserver.enableCloudLibrary(completion:)(0, 0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static Alert.Action.cancel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1004B92F0 != -1)
    swift_once(&qword_1004B92F0, sub_10020C0C0);
  v7 = static String.cancelButtonTitle;
  v6 = qword_1004F5520;
  swift_bridgeObjectRetain();
  v8 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v9 = UUID.uuidString.getter(v8);
  v11 = v10;
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t sub_1000F6014(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_1000F602C, 0, 0);
}

uint64_t sub_1000F602C()
{
  uint64_t v0;
  void (*v1)(_QWORD);

  v1 = *(void (**)(_QWORD))(v0 + 16);
  if (v1)
    v1(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F6068(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_1000F6080, 0, 0);
}

id sub_1000F6080()
{
  uint64_t v0;
  id result;
  void *v2;
  uint64_t v3;

  result = objc_msgSend((id)objc_opt_self(MPNetworkObserver), "sharedNetworkObserver");
  if (result)
  {
    v2 = result;
    v3 = *(_QWORD *)(v0 + 16);
    objc_msgSend(result, "setMusicCellularDownloadingAllowed:", 1);

    if (v3)
      (*(void (**)(uint64_t))(v0 + 16))(1);
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000F60FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return swift_task_switch(sub_1000F6114, 0, 0);
}

uint64_t sub_1000F6114()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *(_QWORD **)(v0 + 24);
  v3 = v1[3];
  v2 = v1[4];
  v4 = sub_1000096A0(v1, v3);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to MusicLibrary.remove<A>(_:)[1]);
  *(_QWORD *)(v0 + 40) = v5;
  *v5 = v0;
  v5[1] = sub_1000F6188;
  return MusicLibrary.remove<A>(_:)(v4, v3, v2);
}

uint64_t sub_1000F6188()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 40);
  v3 = *v1;
  *(_QWORD *)(v3 + 48) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1000F61F4, 0, 0);
  else
    return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000F61F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v14;

  if (qword_1004B8A30 != -1)
    swift_once(&qword_1004B8A30, sub_1000A6660);
  v1 = *(_QWORD *)(v0 + 48);
  v2 = type metadata accessor for Logger(0);
  sub_100039D34(v2, (uint64_t)static Logger.actions);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 48);
  if (v6)
  {
    v8 = swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v14 = v9;
    *(_DWORD *)v8 = 136315138;
    *(_QWORD *)(v0 + 16) = v7;
    swift_errorRetain(v7);
    v10 = sub_1000057B4((uint64_t *)&unk_1004BD690);
    v11 = (char *)String.init<A>(describing:)(v0 + 16, v10);
    *(_QWORD *)(v8 + 4) = sub_1000393D0(v11, v12, &v14);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to delete item=%s", (uint8_t *)v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 48));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F63B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_1000F63D0, 0, 0);
}

uint64_t sub_1000F63D0()
{
  uint64_t v0;
  int *v1;
  id v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v1 = *(int **)(v0 + 16);
  v2 = objc_msgSend((id)objc_opt_self(MPPlaybackUserDefaults), "standardUserDefaults");
  objc_msgSend(v2, "setPrefersSpatialDownloads:", 1);

  v5 = (uint64_t (*)(uint64_t))((char *)v1 + *v1);
  v3 = (_QWORD *)swift_task_alloc(v1[1]);
  *(_QWORD *)(v0 + 32) = v3;
  *v3 = v0;
  v3[1] = sub_1000F6468;
  return v5(1);
}

uint64_t sub_1000F6468()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 32));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000F64B0(int *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD);

  v4 = (uint64_t (*)(_QWORD))((char *)a1 + *a1);
  v2 = (_QWORD *)swift_task_alloc(a1[1]);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10002F6EC;
  return v4(0);
}

uint64_t sub_1000F650C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v1 + 24) = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000F6578, v4, v5);
}

uint64_t sub_1000F6578()
{
  uint64_t v0;
  id v1;
  NSURL *v2;
  void *v3;
  void *v4;
  Class isa;

  swift_release(*(_QWORD *)(v0 + 24));
  v1 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  URL._bridgeToObjectiveC()(v2);
  v4 = v3;
  sub_1000B8E1C((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for OpenExternalURLOptionsKey(0);
  sub_100004D8C((unint64_t *)&qword_1004BF780, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_1003C9138);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v1, "openURL:options:completionHandler:", v4, isa, 0);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F6664@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42[2];
  _QWORD v43[5];

  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43[3] = a3;
  v43[4] = a4;
  v14 = (void (*)(char *, char *, uint64_t))sub_1000407CC(v43);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(v14, a1, a3);
  v15 = sub_1000FBD40(v14, a3, a4);
  v40 = v16;
  v41 = v15;
  v39 = v17;
  v19 = v18;
  sub_1000444A8((uint64_t)v43, (uint64_t)v42);
  v20 = swift_allocObject(&unk_1004734E0, 64, 7);
  sub_100033620(v42, v20 + 16);
  *(_QWORD *)(v20 + 56) = a2;
  swift_bridgeObjectRetain();
  swift_retain(a2);
  v21 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v22 = UUID.uuidString.getter(v21);
  v37 = v23;
  v38 = v22;
  v24 = *(void (**)(char *, uint64_t))(v11 + 8);
  v24(v13, v10);
  if (qword_1004B92F0 != -1)
    swift_once(&qword_1004B92F0, sub_10020C0C0);
  v26 = static String.cancelButtonTitle;
  v25 = qword_1004F5520;
  swift_bridgeObjectRetain();
  v27 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v28 = UUID.uuidString.getter(v27);
  v30 = v29;
  v24(v13, v10);
  swift_bridgeObjectRelease(v19);
  v31 = sub_1000057B4(&qword_1004BF6E0);
  v32 = swift_allocObject(v31, 144, 7);
  *(_OWORD *)(v32 + 16) = xmmword_1003C6BD0;
  v33 = v37;
  *(_QWORD *)(v32 + 32) = v38;
  *(_QWORD *)(v32 + 40) = v33;
  *(_QWORD *)(v32 + 48) = v39;
  *(_QWORD *)(v32 + 56) = v19;
  *(_BYTE *)(v32 + 64) = 2;
  *(_QWORD *)(v32 + 72) = &unk_1004BDC98;
  *(_QWORD *)(v32 + 80) = v20;
  *(_QWORD *)(v32 + 88) = v28;
  *(_QWORD *)(v32 + 96) = v30;
  *(_QWORD *)(v32 + 104) = v26;
  *(_QWORD *)(v32 + 112) = v25;
  *(_BYTE *)(v32 + 120) = 0;
  *(_QWORD *)(v32 + 128) = 0;
  *(_QWORD *)(v32 + 136) = 0;
  result = sub_10000970C(v43);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  v35 = v40;
  *(_QWORD *)(a5 + 16) = v41;
  *(_QWORD *)(a5 + 24) = v35;
  *(_BYTE *)(a5 + 32) = 1;
  *(_QWORD *)(a5 + 40) = v32;
  *(_QWORD *)(a5 + 48) = 0;
  return result;
}

uint64_t sub_1000F687C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  void (*v41)(_QWORD *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  uint64_t v46;
  id v47;
  char *v48;
  char *v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  char *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  char *v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  id v75;
  char *v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t);
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  id v86;
  char *v87;
  void (*v88)(char *, uint64_t);
  uint64_t v89;
  char *v90;
  void (*v91)(char *, char *, uint64_t);
  uint64_t v92;
  uint64_t v93;
  id v94;
  char *v95;
  void (*v96)(char *, uint64_t);
  uint64_t v97;
  char *v98;
  void (*v99)(char *, char *, uint64_t);
  uint64_t v100;
  uint64_t v101;
  id v102;
  char *v103;
  void (*v104)(char *, uint64_t);
  uint64_t v105;
  uint64_t *v106;
  char *v107;
  char *v108;
  void (*v109)(char *, char *, uint64_t);
  uint64_t v110;
  uint64_t v111;
  id v112;
  char *v113;
  void (*v114)(char *, uint64_t);
  uint64_t v115;
  uint64_t result;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  int v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(char *, uint64_t);
  char *v146;
  void (*v147)(char *, char *, uint64_t);
  uint64_t v148;
  uint64_t v149;
  id v150;
  char *v151;
  void (*v152)(char *, uint64_t);
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD v190[5];
  uint64_t v191;
  uint64_t v192;

  v188 = a1;
  v166 = type metadata accessor for Track(0);
  v161 = *(_QWORD *)(v166 - 8);
  v1 = __chkstk_darwin(v166);
  v159 = (char *)&v154 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __chkstk_darwin(v1);
  v160 = (char *)&v154 - v4;
  __chkstk_darwin(v3);
  v162 = (char *)&v154 - v5;
  v164 = type metadata accessor for Playlist.Entry.InternalItem(0);
  v163 = *(_QWORD *)(v164 - 8);
  __chkstk_darwin(v164);
  v165 = (char *)&v154 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = type metadata accessor for Playlist.Entry(0);
  v167 = *(_QWORD *)(v170 - 8);
  v7 = __chkstk_darwin(v170);
  v168 = (char *)&v154 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v169 = (char *)&v154 - v9;
  v174 = type metadata accessor for TVEpisode(0);
  v171 = *(_QWORD *)(v174 - 8);
  v10 = __chkstk_darwin(v174);
  v155 = (char *)&v154 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v173 = (char *)&v154 - v12;
  v177 = type metadata accessor for TVSeason(0);
  v172 = *(_QWORD *)(v177 - 8);
  __chkstk_darwin(v177);
  v176 = (char *)&v154 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = type metadata accessor for MusicMovie(0);
  v175 = *(_QWORD *)(v180 - 8);
  v14 = __chkstk_darwin(v180);
  v158 = (char *)&v154 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v179 = (char *)&v154 - v16;
  v17 = type metadata accessor for Song(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v157 = (char *)&v154 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v182 = (char *)&v154 - v21;
  v183 = type metadata accessor for Playlist(0);
  v181 = *(_QWORD *)(v183 - 8);
  __chkstk_darwin(v183);
  v185 = (char *)&v154 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for MusicVideo(0);
  v184 = *(_QWORD *)(v23 - 8);
  v24 = __chkstk_darwin(v23);
  v156 = (char *)&v154 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v27 = (char *)&v154 - v26;
  v28 = type metadata accessor for Locale(0);
  __chkstk_darwin(v28);
  v187 = (char *)&v154 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for String.LocalizationValue(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = __chkstk_darwin(v30);
  v34 = (char *)&v154 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v36 = (char *)&v154 - v35;
  v37 = type metadata accessor for Album(0);
  v186 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v39 = (char *)&v154 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190[3] = v17;
  v190[4] = &protocol witness table for Song;
  v40 = sub_1000407CC(v190);
  v178 = v18;
  v41 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v18 + 16);
  v42 = v188;
  v188 = v17;
  v41(v40, v42, v17);
  sub_1000444A8((uint64_t)v190, (uint64_t)&v189);
  v43 = sub_1000057B4(&qword_1004BDCA0);
  if (swift_dynamicCast(v39, &v189, v43, v37, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003DLL, 0x80000001003AB430);
    v44 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v44(v34, v36, v30);
    v45 = v34;
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v46 = qword_1004F4630;
    v47 = (id)qword_1004F4630;
    v48 = v187;
    static Locale.current.getter(v47);
    v188 = String.init(localized:table:bundle:locale:comment:)(v45, 0, 0, v46, v48, 0, 0, 256);
    v185 = v49;
    v50 = *(void (**)(char *, uint64_t))(v31 + 8);
    v50(v36, v30);
    String.LocalizationValue.init(stringLiteral:)(0x41206574656C6544, 0xEC0000006D75626CLL);
    v44(v45, v36, v30);
    v51 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v45, 0, 0, v51, v48, 0, 0, 256);
    v52 = v36;
    v53 = v188;
    v50(v52, v30);
    v54 = *(void (**)(char *, uint64_t))(v186 + 8);
    v55 = v39;
    goto LABEL_5;
  }
  v57 = v34;
  v186 = v30;
  v58 = v23;
  if ((swift_dynamicCast(v27, &v189, v43, v23, 0) & 1) != 0)
  {
    v188 = v23;
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000043, 0x80000001003AB3C0);
    v59 = v31;
    v60 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v61 = v57;
    v62 = v186;
    v60(v57, v36, v186);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v63 = qword_1004F4630;
    v64 = (id)qword_1004F4630;
    v65 = v187;
    static Locale.current.getter(v64);
    v66 = String.init(localized:table:bundle:locale:comment:)(v61, 0, 0, v63, v65, 0, 0, 256);
    v67 = *(void (**)(char *, uint64_t))(v59 + 8);
    v67(v36, v62);
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000012, 0x80000001003AB410);
    v60(v61, v36, v62);
    v68 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v61, 0, 0, v68, v65, 0, 0, 256);
    v69 = v36;
    v53 = v66;
    v67(v69, v62);
    (*(void (**)(char *, uint64_t))(v184 + 8))(v27, v188);
    goto LABEL_32;
  }
  v70 = v183;
  if (swift_dynamicCast(v185, &v189, v43, v183, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000040, 0x80000001003AB370);
    v71 = v31;
    v72 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v73 = v186;
    v72(v34, v36, v186);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v74 = qword_1004F4630;
    v75 = (id)qword_1004F4630;
    v76 = v187;
    static Locale.current.getter(v75);
    v77 = String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v74, v76, 0, 0, 256);
    v78 = *(void (**)(char *, uint64_t))(v71 + 8);
    v78(v36, v73);
    String.LocalizationValue.init(stringLiteral:)(0x50206574656C6544, 0xEF7473696C79616CLL);
    v72(v34, v36, v73);
    v79 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v79, v76, 0, 0, 256);
    v80 = v36;
    v53 = v77;
    v78(v80, v73);
    (*(void (**)(char *, uint64_t))(v181 + 8))(v185, v70);
    goto LABEL_32;
  }
  v81 = v34;
  if (swift_dynamicCast(v182, &v189, v43, v188, 0))
  {
    v82 = v36;
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003CLL, 0x80000001003AB330);
    v83 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v84 = v186;
    v83(v57, v36, v186);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v85 = qword_1004F4630;
    v86 = (id)qword_1004F4630;
    v87 = v187;
    static Locale.current.getter(v86);
    v53 = String.init(localized:table:bundle:locale:comment:)(v81, 0, 0, v85, v87, 0, 0, 256);
    v88 = *(void (**)(char *, uint64_t))(v31 + 8);
    v88(v82, v84);
    String.LocalizationValue.init(stringLiteral:)(0x53206574656C6544, 0xEB00000000676E6FLL);
    v83(v81, v82, v84);
    v89 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v81, 0, 0, v89, v87, 0, 0, 256);
    v88(v82, v84);
    (*(void (**)(char *, uint64_t))(v178 + 8))(v182, v188);
    goto LABEL_32;
  }
  if (swift_dynamicCast(v179, &v189, v43, v180, 0))
  {
    v90 = v36;
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003DLL, 0x80000001003AB2F0);
    v91 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v92 = v186;
    v91(v57, v36, v186);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v93 = qword_1004F4630;
    v94 = (id)qword_1004F4630;
    v95 = v187;
    static Locale.current.getter(v94);
    v53 = String.init(localized:table:bundle:locale:comment:)(v81, 0, 0, v93, v95, 0, 0, 256);
    v96 = *(void (**)(char *, uint64_t))(v31 + 8);
    v96(v90, v92);
    String.LocalizationValue.init(stringLiteral:)(0x4D206574656C6544, 0xEC0000006569766FLL);
    v91(v81, v90, v92);
    v97 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v81, 0, 0, v97, v95, 0, 0, 256);
    v96(v90, v92);
    (*(void (**)(char *, uint64_t))(v175 + 8))(v179, v180);
    goto LABEL_32;
  }
  if (swift_dynamicCast(v176, &v189, v43, v177, 0))
  {
    v98 = v36;
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003FLL, 0x80000001003AB2B0);
    v99 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v100 = v186;
    v99(v57, v36, v186);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v101 = qword_1004F4630;
    v102 = (id)qword_1004F4630;
    v103 = v187;
    static Locale.current.getter(v102);
    v53 = String.init(localized:table:bundle:locale:comment:)(v81, 0, 0, v101, v103, 0, 0, 256);
    v104 = *(void (**)(char *, uint64_t))(v31 + 8);
    v104(v98, v100);
    String.LocalizationValue.init(stringLiteral:)(0x54206574656C6544, 0xEE00776F68532056);
    v99(v81, v98, v100);
    v105 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v81, 0, 0, v105, v103, 0, 0, 256);
    v104(v98, v100);
    v54 = *(void (**)(char *, uint64_t))(v172 + 8);
    v55 = v176;
    v106 = &v192;
LABEL_30:
    v56 = *(v106 - 32);
    goto LABEL_31;
  }
  if (swift_dynamicCast(v173, &v189, v43, v174, 0))
  {
    v107 = v34;
    v108 = v36;
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000042, 0x80000001003AB240);
    v109 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v110 = v186;
    v109(v57, v36, v186);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v111 = qword_1004F4630;
    v112 = (id)qword_1004F4630;
    v113 = v187;
    static Locale.current.getter(v112);
    v53 = String.init(localized:table:bundle:locale:comment:)(v107, 0, 0, v111, v113, 0, 0, 256);
    v114 = *(void (**)(char *, uint64_t))(v31 + 8);
    v114(v108, v110);
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000011, 0x80000001003AB290);
    v109(v107, v108, v110);
    v115 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v107, 0, 0, v115, v113, 0, 0, 256);
    v114(v108, v110);
    v54 = *(void (**)(char *, uint64_t))(v171 + 8);
    v55 = v173;
    v106 = &v191;
    goto LABEL_30;
  }
  v117 = v169;
  v37 = v170;
  if (!swift_dynamicCast(v169, &v189, v43, v170, 0))
  {
    v128 = v162;
    v129 = v166;
    if ((swift_dynamicCast(v162, &v189, v43, v166, 0) & 1) != 0)
    {
      v130 = v161;
      v131 = v160;
      (*(void (**)(char *, char *, uint64_t))(v161 + 32))(v160, v128, v129);
      v132 = v159;
      (*(void (**)(char *, char *, uint64_t))(v130 + 16))(v159, v131, v129);
      v133 = (*(uint64_t (**)(char *, uint64_t))(v130 + 88))(v132, v129);
      if (v133 == enum case for Track.song(_:))
      {
        (*(void (**)(char *, uint64_t))(v130 + 96))(v132, v129);
        v134 = v178;
        v135 = v157;
        v136 = v188;
        (*(void (**)(char *, char *, uint64_t))(v178 + 32))(v157, v132, v188);
        v53 = sub_1000F687C(v135);
        (*(void (**)(char *, uint64_t))(v134 + 8))(v135, v136);
LABEL_44:
        (*(void (**)(char *, uint64_t))(v130 + 8))(v131, v129);
        goto LABEL_32;
      }
      if (v133 == enum case for Track.musicVideo(_:))
      {
        (*(void (**)(char *, uint64_t))(v130 + 96))(v132, v129);
        v139 = v184;
        v140 = (uint64_t)v156;
        (*(void (**)(char *, char *, uint64_t))(v184 + 32))(v156, v132, v58);
        v53 = sub_1000F7D98(v140);
        (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v140, v58);
        goto LABEL_44;
      }
      v145 = *(void (**)(char *, uint64_t))(v130 + 8);
      v145(v131, v129);
      v145(v132, v129);
    }
LABEL_55:
    sub_10000970C(&v189);
    v146 = v36;
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000037, 0x80000001003AB1A0);
    v147 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v148 = v186;
    v147(v81, v36, v186);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v149 = qword_1004F4630;
    v150 = (id)qword_1004F4630;
    v151 = v187;
    static Locale.current.getter(v150);
    v53 = String.init(localized:table:bundle:locale:comment:)(v81, 0, 0, v149, v151, 0, 0, 256);
    v152 = *(void (**)(char *, uint64_t))(v31 + 8);
    v152(v146, v148);
    String.LocalizationValue.init(stringLiteral:)(0x6574656C6544, 0xE600000000000000);
    v147(v81, v146, v148);
    v153 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v81, 0, 0, v153, v151, 0, 0, 256);
    v152(v146, v148);
    goto LABEL_33;
  }
  v118 = v167;
  v119 = v168;
  v120 = (*(uint64_t (**)(char *, char *, uint64_t))(v167 + 32))(v168, v117, v37);
  v121 = v165;
  Playlist.Entry.internalItem.getter(v120);
  v122 = v163;
  v123 = v164;
  v124 = (*(uint64_t (**)(char *, uint64_t))(v163 + 88))(v121, v164);
  if (v124 == enum case for Playlist.Entry.InternalItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v122 + 96))(v121, v123);
    v125 = v175;
    v126 = (uint64_t)v158;
    v127 = v180;
    (*(void (**)(char *, char *, uint64_t))(v175 + 32))(v158, v121, v180);
    v53 = sub_1000F92E0(v126);
    (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v126, v127);
    v54 = *(void (**)(char *, uint64_t))(v118 + 8);
    v55 = v119;
LABEL_5:
    v56 = v37;
LABEL_31:
    v54(v55, v56);
LABEL_32:
    sub_10000970C(&v189);
LABEL_33:
    sub_10000970C(v190);
    return v53;
  }
  if (v124 == enum case for Playlist.Entry.InternalItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v122 + 96))(v121, v123);
    v137 = v184;
    v138 = (uint64_t)v156;
    (*(void (**)(char *, char *, uint64_t))(v184 + 32))(v156, v121, v58);
    v53 = sub_1000F7D98(v138);
    (*(void (**)(uint64_t, uint64_t))(v137 + 8))(v138, v58);
LABEL_51:
    v54 = *(void (**)(char *, uint64_t))(v118 + 8);
    v55 = v119;
    goto LABEL_5;
  }
  if (v124 == enum case for Playlist.Entry.InternalItem.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v122 + 96))(v121, v123);
    v141 = v178;
    v142 = (uint64_t)v157;
    v143 = v188;
    (*(void (**)(char *, char *, uint64_t))(v178 + 32))(v157, v121, v188);
    v144 = sub_1000F687C(v142);
LABEL_50:
    v53 = v144;
    (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v142, v143);
    goto LABEL_51;
  }
  if (v124 == enum case for Playlist.Entry.InternalItem.tvEpisode(_:))
  {
    (*(void (**)(char *, uint64_t))(v122 + 96))(v121, v123);
    v141 = v171;
    v142 = (uint64_t)v155;
    v143 = v174;
    (*(void (**)(char *, char *, uint64_t))(v171 + 32))(v155, v121, v174);
    v144 = sub_1000FA830(v142);
    goto LABEL_50;
  }
  if (v124 != enum case for Playlist.Entry.InternalItem.uploadedAudio(_:)
    && v124 != enum case for Playlist.Entry.InternalItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v118 + 8))(v119, v37);
    (*(void (**)(char *, uint64_t))(v122 + 8))(v121, v123);
    goto LABEL_55;
  }
  (*(void (**)(char *, uint64_t))(v122 + 8))(v121, v123);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000036, 0x80000001003AB200, "MusicCore/Alert+Music.swift", 27, 2, 304, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000F7D98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  id v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  id v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t);
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  void (*v80)(char *, char *, uint64_t);
  uint64_t v81;
  id v82;
  char *v83;
  void (*v84)(char *, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(char *, char *, uint64_t);
  uint64_t v89;
  id v90;
  char *v91;
  void (*v92)(char *, uint64_t);
  uint64_t v93;
  void (*v94)(char *, char *, uint64_t);
  uint64_t v95;
  id v96;
  char *v97;
  void (*v98)(char *, uint64_t);
  uint64_t v99;
  void (*v100)(char *, uint64_t);
  char *v101;
  uint64_t *v102;
  void (*v103)(char *, char *, uint64_t);
  char *v104;
  uint64_t v105;
  id v106;
  char *v107;
  void (*v108)(char *, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t result;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  int v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  void (*v145)(char *, uint64_t);
  void (*v146)(char *, char *, uint64_t);
  uint64_t v147;
  id v148;
  char *v149;
  void (*v150)(char *, uint64_t);
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD v188[5];
  uint64_t v189;
  uint64_t v190;

  v186 = a1;
  v162 = type metadata accessor for Track(0);
  v159 = *(_QWORD *)(v162 - 8);
  v1 = __chkstk_darwin(v162);
  v157 = (char *)&v152 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __chkstk_darwin(v1);
  v158 = (char *)&v152 - v4;
  __chkstk_darwin(v3);
  v160 = (char *)&v152 - v5;
  v165 = type metadata accessor for Playlist.Entry.InternalItem(0);
  v164 = *(_QWORD *)(v165 - 8);
  __chkstk_darwin(v165);
  v161 = (char *)&v152 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = type metadata accessor for Playlist.Entry(0);
  v167 = *(_QWORD *)(v176 - 8);
  v7 = __chkstk_darwin(v176);
  v163 = (char *)&v152 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v166 = (char *)&v152 - v9;
  v171 = type metadata accessor for TVEpisode(0);
  v168 = *(_QWORD *)(v171 - 8);
  v10 = __chkstk_darwin(v171);
  v153 = (char *)&v152 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v170 = (char *)&v152 - v12;
  v174 = type metadata accessor for TVSeason(0);
  v169 = *(_QWORD *)(v174 - 8);
  __chkstk_darwin(v174);
  v173 = (char *)&v152 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = type metadata accessor for MusicMovie(0);
  v172 = *(_QWORD *)(v178 - 8);
  v14 = __chkstk_darwin(v178);
  v156 = (char *)&v152 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v177 = (char *)&v152 - v16;
  v181 = type metadata accessor for Song(0);
  v175 = *(_QWORD *)(v181 - 8);
  v17 = __chkstk_darwin(v181);
  v155 = (char *)&v152 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v180 = (char *)&v152 - v19;
  v183 = type metadata accessor for Playlist(0);
  v179 = *(_QWORD *)(v183 - 8);
  __chkstk_darwin(v183);
  v21 = (char *)&v152 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for MusicVideo(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v154 = (char *)&v152 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v27 = (char *)&v152 - v26;
  v28 = type metadata accessor for Locale(0);
  __chkstk_darwin(v28);
  v185 = (char *)&v152 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for String.LocalizationValue(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = __chkstk_darwin(v30);
  v34 = (char *)&v152 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v36 = (char *)&v152 - v35;
  v37 = type metadata accessor for Album(0);
  v184 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v39 = (char *)&v152 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188[3] = v22;
  v188[4] = &protocol witness table for MusicVideo;
  v40 = sub_1000407CC(v188);
  v182 = v23;
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v23 + 16))(v40, v186, v22);
  sub_1000444A8((uint64_t)v188, (uint64_t)&v187);
  v41 = sub_1000057B4(&qword_1004BDCA0);
  if (swift_dynamicCast(v39, &v187, v41, v37, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003DLL, 0x80000001003AB430);
    v42 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v42(v34, v36, v30);
    v43 = v30;
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v44 = qword_1004F4630;
    v45 = (id)qword_1004F4630;
    v46 = v185;
    static Locale.current.getter(v45);
    v47 = String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v44, v46, 0, 0, 256);
    v186 = v48;
    v49 = *(void (**)(char *, uint64_t))(v31 + 8);
    v49(v36, v43);
    String.LocalizationValue.init(stringLiteral:)(0x41206574656C6544, 0xEC0000006D75626CLL);
    v42(v34, v36, v43);
    v50 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v50, v46, 0, 0, 256);
    v51 = v36;
    v52 = v47;
    v49(v51, v43);
    (*(void (**)(char *, uint64_t))(v184 + 8))(v39, v37);
    goto LABEL_31;
  }
  if ((swift_dynamicCast(v27, &v187, v41, v22, 0) & 1) != 0)
  {
    v186 = v22;
    v53 = v36;
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000043, 0x80000001003AB3C0);
    v54 = v31;
    v55 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v56 = v30;
    v55(v34, v36, v30);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v57 = qword_1004F4630;
    v58 = (id)qword_1004F4630;
    v59 = v185;
    static Locale.current.getter(v58);
    v60 = String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v57, v59, 0, 0, 256);
    v61 = *(void (**)(char *, uint64_t))(v54 + 8);
    v61(v53, v56);
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000012, 0x80000001003AB410);
    v55(v34, v53, v56);
    v62 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    v63 = v59;
    v52 = v60;
    String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v62, v63, 0, 0, 256);
    v61(v53, v56);
    (*(void (**)(char *, uint64_t))(v182 + 8))(v27, v186);
    goto LABEL_31;
  }
  if (swift_dynamicCast(v21, &v187, v41, v183, 0))
  {
    v64 = v36;
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000040, 0x80000001003AB370);
    v65 = v31;
    v66 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v67 = v34;
    v68 = v34;
    v69 = v30;
    v66(v68, v64, v30);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v70 = qword_1004F4630;
    v71 = (id)qword_1004F4630;
    v72 = v185;
    static Locale.current.getter(v71);
    v73 = String.init(localized:table:bundle:locale:comment:)(v67, 0, 0, v70, v72, 0, 0, 256);
    v186 = v74;
    v75 = *(void (**)(char *, uint64_t))(v65 + 8);
    v75(v64, v69);
    String.LocalizationValue.init(stringLiteral:)(0x50206574656C6544, 0xEF7473696C79616CLL);
    v66(v67, v64, v69);
    v76 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    v77 = v67;
    v52 = v73;
    String.init(localized:table:bundle:locale:comment:)(v77, 0, 0, v76, v72, 0, 0, 256);
    v75(v64, v69);
    (*(void (**)(char *, uint64_t))(v179 + 8))(v21, v183);
    goto LABEL_31;
  }
  v78 = v36;
  if (swift_dynamicCast(v180, &v187, v41, v181, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003CLL, 0x80000001003AB330);
    v79 = v31;
    v80 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v80(v34, v36, v30);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v81 = qword_1004F4630;
    v82 = (id)qword_1004F4630;
    v83 = v185;
    static Locale.current.getter(v82);
    v52 = String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v81, v83, 0, 0, 256);
    v84 = *(void (**)(char *, uint64_t))(v79 + 8);
    v84(v78, v30);
    String.LocalizationValue.init(stringLiteral:)(0x53206574656C6544, 0xEB00000000676E6FLL);
    v80(v34, v78, v30);
    v85 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v85, v83, 0, 0, 256);
    v84(v78, v30);
    (*(void (**)(char *, uint64_t))(v175 + 8))(v180, v181);
    goto LABEL_31;
  }
  v86 = v176;
  v87 = v30;
  if (swift_dynamicCast(v177, &v187, v41, v178, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003DLL, 0x80000001003AB2F0);
    v88 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v88(v34, v36, v87);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v89 = qword_1004F4630;
    v90 = (id)qword_1004F4630;
    v91 = v185;
    static Locale.current.getter(v90);
    v52 = String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v89, v91, 0, 0, 256);
    v92 = *(void (**)(char *, uint64_t))(v31 + 8);
    v92(v78, v87);
    String.LocalizationValue.init(stringLiteral:)(0x4D206574656C6544, 0xEC0000006569766FLL);
    v88(v34, v78, v87);
    v93 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v93, v91, 0, 0, 256);
    v92(v78, v87);
    (*(void (**)(char *, uint64_t))(v172 + 8))(v177, v178);
    goto LABEL_31;
  }
  if (swift_dynamicCast(v173, &v187, v41, v174, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003FLL, 0x80000001003AB2B0);
    v94 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v94(v34, v36, v30);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v95 = qword_1004F4630;
    v96 = (id)qword_1004F4630;
    v97 = v185;
    static Locale.current.getter(v96);
    v52 = String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v95, v97, 0, 0, 256);
    v98 = *(void (**)(char *, uint64_t))(v31 + 8);
    v98(v78, v87);
    String.LocalizationValue.init(stringLiteral:)(0x54206574656C6544, 0xEE00776F68532056);
    v94(v34, v78, v87);
    v99 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v99, v97, 0, 0, 256);
    v98(v78, v87);
    v100 = *(void (**)(char *, uint64_t))(v169 + 8);
    v101 = v173;
    v102 = &v190;
LABEL_29:
    v110 = *(v102 - 32);
LABEL_30:
    v100(v101, v110);
LABEL_31:
    sub_10000970C(&v187);
LABEL_32:
    sub_10000970C(v188);
    return v52;
  }
  if (swift_dynamicCast(v170, &v187, v41, v171, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000042, 0x80000001003AB240);
    v103 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v104 = v34;
    v103(v34, v36, v30);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v105 = qword_1004F4630;
    v106 = (id)qword_1004F4630;
    v107 = v185;
    static Locale.current.getter(v106);
    v52 = String.init(localized:table:bundle:locale:comment:)(v104, 0, 0, v105, v107, 0, 0, 256);
    v108 = *(void (**)(char *, uint64_t))(v31 + 8);
    v108(v78, v87);
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000011, 0x80000001003AB290);
    v103(v104, v78, v87);
    v109 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v104, 0, 0, v109, v107, 0, 0, 256);
    v108(v78, v87);
    v100 = *(void (**)(char *, uint64_t))(v168 + 8);
    v101 = v170;
    v102 = &v189;
    goto LABEL_29;
  }
  v112 = v166;
  if (!swift_dynamicCast(v166, &v187, v41, v86, 0))
  {
    v122 = v160;
    v123 = v162;
    if ((swift_dynamicCast(v160, &v187, v41, v162, 0) & 1) != 0)
    {
      v124 = v159;
      v125 = v158;
      (*(void (**)(char *, char *, uint64_t))(v159 + 32))(v158, v122, v123);
      v126 = v157;
      (*(void (**)(char *, char *, uint64_t))(v124 + 16))(v157, v125, v123);
      v127 = (*(uint64_t (**)(char *, uint64_t))(v124 + 88))(v126, v123);
      if (v127 == enum case for Track.song(_:))
      {
        (*(void (**)(char *, uint64_t))(v124 + 96))(v126, v123);
        v128 = v175;
        v129 = v155;
        v130 = v125;
        v131 = v181;
        (*(void (**)(char *, char *, uint64_t))(v175 + 32))(v155, v126, v181);
        v52 = sub_1000F687C(v129);
        (*(void (**)(char *, uint64_t))(v128 + 8))(v129, v131);
        v100 = *(void (**)(char *, uint64_t))(v124 + 8);
        v101 = v130;
LABEL_43:
        v110 = v123;
        goto LABEL_30;
      }
      if (v127 == enum case for Track.musicVideo(_:))
      {
        (*(void (**)(char *, uint64_t))(v124 + 96))(v126, v123);
        v136 = v182;
        v137 = v154;
        (*(void (**)(char *, char *, uint64_t))(v182 + 32))(v154, v126, v22);
        v52 = sub_1000F7D98(v137);
        (*(void (**)(char *, uint64_t))(v136 + 8))(v137, v22);
        v100 = *(void (**)(char *, uint64_t))(v124 + 8);
        v101 = v125;
        goto LABEL_43;
      }
      v144 = v125;
      v145 = *(void (**)(char *, uint64_t))(v124 + 8);
      v145(v144, v123);
      v145(v126, v123);
    }
LABEL_54:
    sub_10000970C(&v187);
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000037, 0x80000001003AB1A0);
    v146 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v146(v34, v78, v87);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v147 = qword_1004F4630;
    v148 = (id)qword_1004F4630;
    v149 = v185;
    static Locale.current.getter(v148);
    v52 = String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v147, v149, 0, 0, 256);
    v150 = *(void (**)(char *, uint64_t))(v31 + 8);
    v150(v78, v87);
    String.LocalizationValue.init(stringLiteral:)(0x6574656C6544, 0xE600000000000000);
    v146(v34, v78, v87);
    v151 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v151, v149, 0, 0, 256);
    v150(v78, v87);
    goto LABEL_32;
  }
  v113 = v163;
  v114 = (*(uint64_t (**)(char *, char *, uint64_t))(v167 + 32))(v163, v112, v86);
  v115 = v161;
  Playlist.Entry.internalItem.getter(v114);
  v116 = v164;
  v117 = v165;
  v118 = (*(uint64_t (**)(char *, uint64_t))(v164 + 88))(v115, v165);
  if (v118 == enum case for Playlist.Entry.InternalItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v116 + 96))(v115, v117);
    v119 = v172;
    v120 = (uint64_t)v156;
    v121 = v178;
    (*(void (**)(char *, char *, uint64_t))(v172 + 32))(v156, v115, v178);
    v52 = sub_1000F92E0(v120);
    (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v120, v121);
    (*(void (**)(char *, uint64_t))(v167 + 8))(v113, v176);
    goto LABEL_31;
  }
  v132 = v113;
  v133 = v167;
  if (v118 == enum case for Playlist.Entry.InternalItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v164 + 96))(v115, v165);
    v134 = v182;
    v135 = v154;
    (*(void (**)(char *, char *, uint64_t))(v182 + 32))(v154, v115, v22);
    v52 = sub_1000F7D98(v135);
    (*(void (**)(char *, uint64_t))(v134 + 8))(v135, v22);
    v100 = *(void (**)(char *, uint64_t))(v133 + 8);
LABEL_50:
    v101 = v132;
    v110 = v86;
    goto LABEL_30;
  }
  v138 = v165;
  v139 = v164;
  if (v118 == enum case for Playlist.Entry.InternalItem.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v164 + 96))(v115, v165);
    v140 = v175;
    v141 = (uint64_t)v155;
    v142 = v181;
    (*(void (**)(char *, char *, uint64_t))(v175 + 32))(v155, v115, v181);
    v143 = sub_1000F687C(v141);
LABEL_49:
    v52 = v143;
    (*(void (**)(uint64_t, uint64_t))(v140 + 8))(v141, v142);
    v100 = *(void (**)(char *, uint64_t))(v133 + 8);
    goto LABEL_50;
  }
  if (v118 == enum case for Playlist.Entry.InternalItem.tvEpisode(_:))
  {
    (*(void (**)(char *, uint64_t))(v164 + 96))(v115, v165);
    v140 = v168;
    v141 = (uint64_t)v153;
    v142 = v171;
    (*(void (**)(char *, char *, uint64_t))(v168 + 32))(v153, v115, v171);
    v143 = sub_1000FA830(v141);
    goto LABEL_49;
  }
  if (v118 != enum case for Playlist.Entry.InternalItem.uploadedAudio(_:)
    && v118 != enum case for Playlist.Entry.InternalItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v167 + 8))(v132, v86);
    (*(void (**)(char *, uint64_t))(v139 + 8))(v115, v138);
    goto LABEL_54;
  }
  (*(void (**)(char *, uint64_t))(v164 + 8))(v115, v165);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000036, 0x80000001003AB200, "MusicCore/Alert+Music.swift", 27, 2, 304, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000F92E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  id v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  char *v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t);
  uint64_t v80;
  char *v81;
  uint64_t v82;
  void (*v83)(char *, char *, uint64_t);
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  char *v89;
  void (*v90)(char *, uint64_t);
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  void (*v95)(char *, char *, uint64_t);
  uint64_t v96;
  id v97;
  char *v98;
  void (*v99)(char *, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(char *, char *, uint64_t);
  uint64_t v104;
  id v105;
  char *v106;
  void (*v107)(char *, uint64_t);
  uint64_t v108;
  void (*v109)(char *, uint64_t);
  char *v110;
  uint64_t *v111;
  uint64_t v112;
  void (*v113)(char *, char *, uint64_t);
  uint64_t v114;
  id v115;
  char *v116;
  void (*v117)(char *, uint64_t);
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  int v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  void (*v152)(char *, uint64_t);
  uint64_t v153;
  uint64_t result;
  void (*v155)(char *, char *, uint64_t);
  uint64_t v156;
  id v157;
  char *v158;
  void (*v159)(char *, uint64_t);
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  char *v164;
  char *v165;
  char *v166;
  char *v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD v197[5];
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;

  v195 = a1;
  v172 = type metadata accessor for Track(0);
  v168 = *(_QWORD *)(v172 - 8);
  v1 = __chkstk_darwin(v172);
  v166 = (char *)&v161 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __chkstk_darwin(v1);
  v167 = (char *)&v161 - v4;
  __chkstk_darwin(v3);
  v169 = (char *)&v161 - v5;
  v170 = type metadata accessor for Playlist.Entry.InternalItem(0);
  v174 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170);
  v171 = (char *)&v161 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = type metadata accessor for Playlist.Entry(0);
  v175 = *(_QWORD *)(v178 - 8);
  v7 = __chkstk_darwin(v178);
  v173 = (char *)&v161 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v176 = (char *)&v161 - v9;
  v181 = type metadata accessor for TVEpisode(0);
  v177 = *(_QWORD *)(v181 - 8);
  v10 = __chkstk_darwin(v181);
  v162 = (char *)&v161 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v180 = (char *)&v161 - v12;
  v184 = type metadata accessor for TVSeason(0);
  v179 = *(_QWORD *)(v184 - 8);
  __chkstk_darwin(v184);
  v183 = (char *)&v161 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for MusicMovie(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v165 = (char *)&v161 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v186 = (char *)&v161 - v18;
  v189 = type metadata accessor for Song(0);
  v185 = *(_QWORD *)(v189 - 8);
  v19 = __chkstk_darwin(v189);
  v164 = (char *)&v161 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v188 = (char *)&v161 - v21;
  v190 = type metadata accessor for Playlist(0);
  v187 = *(_QWORD *)(v190 - 8);
  __chkstk_darwin(v190);
  v192 = (char *)&v161 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for MusicVideo(0);
  v191 = *(_QWORD *)(v23 - 8);
  v24 = __chkstk_darwin(v23);
  v163 = (char *)&v161 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v27 = (char *)&v161 - v26;
  v28 = type metadata accessor for Locale(0);
  __chkstk_darwin(v28);
  v194 = (char *)&v161 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for String.LocalizationValue(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = __chkstk_darwin(v30);
  v34 = (char *)&v161 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v36 = (char *)&v161 - v35;
  v37 = type metadata accessor for Album(0);
  v193 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v39 = (char *)&v161 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v197[3] = v14;
  v197[4] = sub_100004D8C(&qword_1004BDCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MusicMovie, (uint64_t)&protocol conformance descriptor for MusicMovie);
  v40 = sub_1000407CC(v197);
  v182 = v15;
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v15 + 16))(v40, v195, v14);
  sub_1000444A8((uint64_t)v197, (uint64_t)&v196);
  v41 = sub_1000057B4(&qword_1004BDCA0);
  if (swift_dynamicCast(v39, &v196, v41, v37, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003DLL, 0x80000001003AB430);
    v42 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v42(v34, v36, v30);
    v43 = v30;
    v44 = v36;
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v45 = qword_1004F4630;
    v46 = (id)qword_1004F4630;
    v47 = v194;
    static Locale.current.getter(v46);
    v192 = (char *)String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v45, v47, 0, 0, 256);
    v195 = v48;
    v49 = *(void (**)(char *, uint64_t))(v31 + 8);
    v49(v44, v43);
    String.LocalizationValue.init(stringLiteral:)(0x41206574656C6544, 0xEC0000006D75626CLL);
    v42(v34, v44, v43);
    v50 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v50, v47, 0, 0, 256);
    v51 = v44;
    v52 = (uint64_t)v192;
    v49(v51, v43);
    (*(void (**)(char *, uint64_t))(v193 + 8))(v39, v37);
    goto LABEL_49;
  }
  v193 = v31;
  v53 = v34;
  v54 = v23;
  if ((swift_dynamicCast(v27, &v196, v41, v23, 0) & 1) != 0)
  {
    v192 = (char *)v23;
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000043, 0x80000001003AB3C0);
    v55 = v193;
    v56 = *(void (**)(char *, char *, uint64_t))(v193 + 16);
    v57 = v34;
    v58 = v34;
    v59 = v30;
    v56(v58, v36, v30);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v60 = qword_1004F4630;
    v61 = (id)qword_1004F4630;
    v62 = v194;
    static Locale.current.getter(v61);
    v63 = String.init(localized:table:bundle:locale:comment:)(v53, 0, 0, v60, v62, 0, 0, 256);
    v195 = v64;
    v65 = *(void (**)(char *, uint64_t))(v55 + 8);
    v65(v36, v59);
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000012, 0x80000001003AB410);
    v56(v57, v36, v59);
    v66 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    v67 = v57;
    v52 = v63;
    String.init(localized:table:bundle:locale:comment:)(v67, 0, 0, v66, v62, 0, 0, 256);
    v65(v36, v59);
    (*(void (**)(char *, char *))(v191 + 8))(v27, v192);
    goto LABEL_49;
  }
  v68 = v190;
  if (swift_dynamicCast(v192, &v196, v41, v190, 0))
  {
    v69 = v36;
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000040, 0x80000001003AB370);
    v70 = v193;
    v71 = *(void (**)(char *, char *, uint64_t))(v193 + 16);
    v72 = v34;
    v73 = v34;
    v74 = v30;
    v71(v73, v69, v30);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v75 = qword_1004F4630;
    v76 = (id)qword_1004F4630;
    v77 = v194;
    static Locale.current.getter(v76);
    v78 = String.init(localized:table:bundle:locale:comment:)(v53, 0, 0, v75, v77, 0, 0, 256);
    v79 = *(void (**)(char *, uint64_t))(v70 + 8);
    v52 = v78;
    v79(v69, v74);
    String.LocalizationValue.init(stringLiteral:)(0x50206574656C6544, 0xEF7473696C79616CLL);
    v71(v72, v69, v74);
    v80 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v72, 0, 0, v80, v77, 0, 0, 256);
    v79(v69, v74);
    (*(void (**)(char *, uint64_t))(v187 + 8))(v192, v68);
    goto LABEL_49;
  }
  if (swift_dynamicCast(v188, &v196, v41, v189, 0))
  {
    v81 = v36;
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003CLL, 0x80000001003AB330);
    v82 = v193;
    v83 = *(void (**)(char *, char *, uint64_t))(v193 + 16);
    v84 = v53;
    v85 = v53;
    v86 = v30;
    v83(v85, v81, v30);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v87 = qword_1004F4630;
    v88 = (id)qword_1004F4630;
    v89 = v194;
    static Locale.current.getter(v88);
    v52 = String.init(localized:table:bundle:locale:comment:)(v84, 0, 0, v87, v89, 0, 0, 256);
    v90 = *(void (**)(char *, uint64_t))(v82 + 8);
    v90(v81, v86);
    String.LocalizationValue.init(stringLiteral:)(0x53206574656C6544, 0xEB00000000676E6FLL);
    v83(v84, v81, v86);
    v91 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v84, 0, 0, v91, v89, 0, 0, 256);
    v90(v81, v86);
    (*(void (**)(char *, uint64_t))(v185 + 8))(v188, v189);
    goto LABEL_49;
  }
  v92 = v30;
  v93 = v53;
  if (swift_dynamicCast(v186, &v196, v41, v14, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003DLL, 0x80000001003AB2F0);
    v94 = v193;
    v95 = *(void (**)(char *, char *, uint64_t))(v193 + 16);
    v95(v53, v36, v30);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v96 = qword_1004F4630;
    v97 = (id)qword_1004F4630;
    v98 = v194;
    static Locale.current.getter(v97);
    v192 = (char *)String.init(localized:table:bundle:locale:comment:)(v93, 0, 0, v96, v98, 0, 0, 256);
    v99 = *(void (**)(char *, uint64_t))(v94 + 8);
    v99(v36, v30);
    String.LocalizationValue.init(stringLiteral:)(0x4D206574656C6544, 0xEC0000006569766FLL);
    v95(v93, v36, v30);
    v100 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v93, 0, 0, v100, v98, 0, 0, 256);
    v99(v36, v30);
    v101 = v14;
    v52 = (uint64_t)v192;
    (*(void (**)(char *, uint64_t))(v182 + 8))(v186, v101);
    goto LABEL_49;
  }
  if (swift_dynamicCast(v183, &v196, v41, v184, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003FLL, 0x80000001003AB2B0);
    v102 = v193;
    v103 = *(void (**)(char *, char *, uint64_t))(v193 + 16);
    v103(v53, v36, v30);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v104 = qword_1004F4630;
    v105 = (id)qword_1004F4630;
    v106 = v194;
    static Locale.current.getter(v105);
    v52 = String.init(localized:table:bundle:locale:comment:)(v93, 0, 0, v104, v106, 0, 0, 256);
    v107 = *(void (**)(char *, uint64_t))(v102 + 8);
    v107(v36, v30);
    String.LocalizationValue.init(stringLiteral:)(0x54206574656C6544, 0xEE00776F68532056);
    v103(v93, v36, v30);
    v108 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v93, 0, 0, v108, v106, 0, 0, 256);
    v107(v36, v30);
    v109 = *(void (**)(char *, uint64_t))(v179 + 8);
    v110 = v183;
    v111 = &v200;
    goto LABEL_47;
  }
  if (swift_dynamicCast(v180, &v196, v41, v181, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000042, 0x80000001003AB240);
    v112 = v193;
    v113 = *(void (**)(char *, char *, uint64_t))(v193 + 16);
    v113(v93, v36, v30);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v114 = qword_1004F4630;
    v115 = (id)qword_1004F4630;
    v116 = v194;
    static Locale.current.getter(v115);
    v52 = String.init(localized:table:bundle:locale:comment:)(v93, 0, 0, v114, v116, 0, 0, 256);
    v117 = *(void (**)(char *, uint64_t))(v112 + 8);
    v117(v36, v30);
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000011, 0x80000001003AB290);
    v113(v93, v36, v30);
    v118 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v93, 0, 0, v118, v116, 0, 0, 256);
    v117(v36, v30);
    v109 = *(void (**)(char *, uint64_t))(v177 + 8);
    v110 = v180;
    v111 = &v199;
    goto LABEL_47;
  }
  v119 = v176;
  v120 = v178;
  if (!swift_dynamicCast(v176, &v196, v41, v178, 0))
  {
    v133 = v169;
    v134 = v41;
    v135 = v172;
    v136 = swift_dynamicCast(v169, &v196, v134, v172, 0);
    v137 = v193;
    if ((v136 & 1) != 0)
    {
      v138 = v168;
      v139 = v167;
      (*(void (**)(char *, char *, uint64_t))(v168 + 32))(v167, v133, v135);
      v140 = v166;
      (*(void (**)(char *, char *, uint64_t))(v138 + 16))(v166, v139, v135);
      v141 = (*(uint64_t (**)(char *, uint64_t))(v138 + 88))(v140, v135);
      if (v141 == enum case for Track.song(_:))
      {
        (*(void (**)(char *, uint64_t))(v138 + 96))(v140, v135);
        v142 = v139;
        v143 = v185;
        v144 = v164;
        v145 = v189;
        (*(void (**)(char *, char *, uint64_t))(v185 + 32))(v164, v140, v189);
        v52 = sub_1000F687C(v144);
        (*(void (**)(char *, uint64_t))(v143 + 8))(v144, v145);
        v109 = *(void (**)(char *, uint64_t))(v138 + 8);
        v110 = v142;
LABEL_39:
        v151 = v135;
LABEL_48:
        v109(v110, v151);
LABEL_49:
        sub_10000970C(&v196);
LABEL_50:
        sub_10000970C(v197);
        return v52;
      }
      if (v141 == enum case for Track.musicVideo(_:))
      {
        (*(void (**)(char *, uint64_t))(v138 + 96))(v140, v135);
        v149 = v191;
        v150 = v163;
        (*(void (**)(char *, char *, uint64_t))(v191 + 32))(v163, v140, v54);
        v52 = sub_1000F7D98(v150);
        (*(void (**)(char *, uint64_t))(v149 + 8))(v150, v54);
        v109 = *(void (**)(char *, uint64_t))(v138 + 8);
        v110 = v139;
        goto LABEL_39;
      }
      v152 = *(void (**)(char *, uint64_t))(v138 + 8);
      v152(v139, v135);
      v152(v140, v135);
    }
LABEL_54:
    sub_10000970C(&v196);
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000037, 0x80000001003AB1A0);
    v155 = *(void (**)(char *, char *, uint64_t))(v137 + 16);
    v155(v93, v36, v92);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v156 = qword_1004F4630;
    v157 = (id)qword_1004F4630;
    v158 = v194;
    static Locale.current.getter(v157);
    v52 = String.init(localized:table:bundle:locale:comment:)(v93, 0, 0, v156, v158, 0, 0, 256);
    v159 = *(void (**)(char *, uint64_t))(v137 + 8);
    v159(v36, v92);
    String.LocalizationValue.init(stringLiteral:)(0x6574656C6544, 0xE600000000000000);
    v155(v93, v36, v92);
    v160 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v93, 0, 0, v160, v158, 0, 0, 256);
    v159(v36, v92);
    goto LABEL_50;
  }
  v121 = v54;
  v122 = v175;
  v123 = v173;
  v124 = (*(uint64_t (**)(char *, char *, uint64_t))(v175 + 32))(v173, v119, v120);
  v125 = v171;
  Playlist.Entry.internalItem.getter(v124);
  v126 = v174;
  v127 = v170;
  v128 = (*(uint64_t (**)(char *, uint64_t))(v174 + 88))(v125, v170);
  if (v128 == enum case for Playlist.Entry.InternalItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v126 + 96))(v125, v127);
    v129 = v182;
    v130 = v165;
    (*(void (**)(char *, char *, uint64_t))(v182 + 32))(v165, v125, v14);
    v131 = sub_1000F92E0(v130);
    v132 = v14;
    v52 = v131;
    (*(void (**)(char *, uint64_t))(v129 + 8))(v130, v132);
    v109 = *(void (**)(char *, uint64_t))(v122 + 8);
    v110 = v123;
LABEL_46:
    v111 = &v198;
LABEL_47:
    v151 = *(v111 - 32);
    goto LABEL_48;
  }
  if (v128 == enum case for Playlist.Entry.InternalItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v174 + 96))(v125, v127);
    v146 = v191;
    v147 = (uint64_t)v163;
    (*(void (**)(char *, char *, uint64_t))(v191 + 32))(v163, v125, v121);
    v148 = sub_1000F7D98(v147);
LABEL_45:
    v52 = v148;
    (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v147, v121);
    v109 = *(void (**)(char *, uint64_t))(v175 + 8);
    v110 = v123;
    goto LABEL_46;
  }
  if (v128 == enum case for Playlist.Entry.InternalItem.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v174 + 96))(v125, v127);
    v146 = v185;
    v147 = (uint64_t)v164;
    v121 = v189;
    (*(void (**)(char *, char *, uint64_t))(v185 + 32))(v164, v125, v189);
    v148 = sub_1000F687C(v147);
    goto LABEL_45;
  }
  v153 = v174;
  if (v128 == enum case for Playlist.Entry.InternalItem.tvEpisode(_:))
  {
    (*(void (**)(char *, uint64_t))(v174 + 96))(v125, v127);
    v146 = v177;
    v147 = (uint64_t)v162;
    v121 = v181;
    (*(void (**)(char *, char *, uint64_t))(v177 + 32))(v162, v125, v181);
    v148 = sub_1000FA830(v147);
    goto LABEL_45;
  }
  if (v128 != enum case for Playlist.Entry.InternalItem.uploadedAudio(_:)
    && v128 != enum case for Playlist.Entry.InternalItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v175 + 8))(v123, v178);
    (*(void (**)(char *, uint64_t))(v153 + 8))(v125, v127);
    v137 = v193;
    goto LABEL_54;
  }
  (*(void (**)(char *, uint64_t))(v174 + 8))(v125, v127);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000036, 0x80000001003AB200, "MusicCore/Alert+Music.swift", 27, 2, 304, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000FA830(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  void (*v41)(_QWORD *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  id v47;
  char *v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  void (*v54)(char *, char *, uint64_t);
  char *v55;
  uint64_t v56;
  id v57;
  char *v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  char *v66;
  uint64_t v67;
  id v68;
  char *v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  void (*v76)(char *, char *, uint64_t);
  char *v77;
  uint64_t v78;
  id v79;
  char *v80;
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  char *v83;
  void (*v84)(char *, char *, uint64_t);
  uint64_t v85;
  id v86;
  char *v87;
  void (*v88)(char *, uint64_t);
  uint64_t v89;
  void (*v90)(char *, char *, uint64_t);
  uint64_t v91;
  id v92;
  char *v93;
  void (*v94)(char *, uint64_t);
  uint64_t v95;
  void (*v96)(char *, _QWORD);
  char *v97;
  uint64_t *v98;
  uint64_t result;
  void (*v100)(char *, char *, uint64_t);
  uint64_t v101;
  id v102;
  char *v103;
  uint64_t v104;
  void (*v105)(char *, uint64_t);
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  int v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(char *, uint64_t);
  uint64_t v135;
  void (*v136)(char *, char *, uint64_t);
  uint64_t v137;
  id v138;
  char *v139;
  void (*v140)(char *, uint64_t);
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD v178[5];
  uint64_t v179;
  uint64_t v180;

  v176 = a1;
  v153 = type metadata accessor for Track(0);
  v149 = *(_QWORD *)(v153 - 8);
  v1 = __chkstk_darwin(v153);
  v147 = (char *)&v142 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __chkstk_darwin(v1);
  v148 = (char *)&v142 - v4;
  __chkstk_darwin(v3);
  v150 = (char *)&v142 - v5;
  v151 = type metadata accessor for Playlist.Entry.InternalItem(0);
  v155 = *(_QWORD *)(v151 - 8);
  __chkstk_darwin(v151);
  v152 = (char *)&v142 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = type metadata accessor for Playlist.Entry(0);
  v156 = *(_QWORD *)(v159 - 8);
  v7 = __chkstk_darwin(v159);
  v154 = (char *)&v142 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v157 = (char *)&v142 - v9;
  v10 = type metadata accessor for TVEpisode(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v143 = (char *)&v142 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v161 = (char *)&v142 - v14;
  v164 = type metadata accessor for TVSeason(0);
  v160 = *(_QWORD *)(v164 - 8);
  __chkstk_darwin(v164);
  v163 = (char *)&v142 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = type metadata accessor for MusicMovie(0);
  v162 = *(_QWORD *)(v167 - 8);
  v16 = __chkstk_darwin(v167);
  v146 = (char *)&v142 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v166 = (char *)&v142 - v18;
  v170 = type metadata accessor for Song(0);
  v165 = *(_QWORD *)(v170 - 8);
  v19 = __chkstk_darwin(v170);
  v145 = (char *)&v142 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v169 = (char *)&v142 - v21;
  v171 = type metadata accessor for Playlist(0);
  v168 = *(_QWORD *)(v171 - 8);
  __chkstk_darwin(v171);
  v173 = (char *)&v142 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for MusicVideo(0);
  v172 = *(_QWORD *)(v23 - 8);
  v24 = __chkstk_darwin(v23);
  v144 = (char *)&v142 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v27 = (char *)&v142 - v26;
  v28 = type metadata accessor for Locale(0);
  __chkstk_darwin(v28);
  v175 = (char *)&v142 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for String.LocalizationValue(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = __chkstk_darwin(v30);
  v34 = (char *)&v142 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v36 = (char *)&v142 - v35;
  v37 = type metadata accessor for Album(0);
  v174 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v39 = (char *)&v142 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178[3] = v10;
  v178[4] = sub_100004D8C(&qword_1004BDCB0, (uint64_t (*)(uint64_t))&type metadata accessor for TVEpisode, (uint64_t)&protocol conformance descriptor for TVEpisode);
  v40 = sub_1000407CC(v178);
  v158 = v11;
  v41 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v11 + 16);
  v42 = v176;
  v176 = v10;
  v41(v40, v42, v10);
  sub_1000444A8((uint64_t)v178, (uint64_t)&v177);
  v43 = sub_1000057B4(&qword_1004BDCA0);
  if (swift_dynamicCast(v39, &v177, v43, v37, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003DLL, 0x80000001003AB430);
    v173 = *(char **)(v31 + 16);
    ((void (*)(char *, char *, uint64_t))v173)(v34, v36, v30);
    v44 = v36;
    v45 = v34;
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v46 = qword_1004F4630;
    v47 = (id)qword_1004F4630;
    v48 = v175;
    static Locale.current.getter(v47);
    v176 = String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v46, v48, 0, 0, 256);
    v49 = *(void (**)(char *, uint64_t))(v31 + 8);
    v49(v44, v30);
    String.LocalizationValue.init(stringLiteral:)(0x41206574656C6544, 0xEC0000006D75626CLL);
    ((void (*)(char *, char *, uint64_t))v173)(v45, v44, v30);
    v50 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v45, 0, 0, v50, v48, 0, 0, 256);
    v51 = v44;
    v52 = v176;
    v49(v51, v30);
    (*(void (**)(char *, uint64_t))(v174 + 8))(v39, v37);
    goto LABEL_26;
  }
  if ((swift_dynamicCast(v27, &v177, v43, v23, 0) & 1) != 0)
  {
    v174 = v23;
    v53 = v36;
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000043, 0x80000001003AB3C0);
    v54 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v55 = v34;
    v54(v34, v53, v30);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v56 = qword_1004F4630;
    v57 = (id)qword_1004F4630;
    v58 = v175;
    static Locale.current.getter(v57);
    v176 = String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v56, v58, 0, 0, 256);
    v59 = *(void (**)(char *, uint64_t))(v31 + 8);
    v59(v53, v30);
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000012, 0x80000001003AB410);
    v54(v55, v53, v30);
    v60 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v55, 0, 0, v60, v58, 0, 0, 256);
    v59(v53, v30);
    v61 = v27;
    v52 = v176;
    (*(void (**)(char *, uint64_t))(v172 + 8))(v61, v174);
    goto LABEL_26;
  }
  v62 = v171;
  if (swift_dynamicCast(v173, &v177, v43, v171, 0))
  {
    v63 = v36;
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000040, 0x80000001003AB370);
    v64 = v31;
    v65 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v66 = v34;
    v65(v34, v36, v30);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v67 = qword_1004F4630;
    v68 = (id)qword_1004F4630;
    v69 = v175;
    static Locale.current.getter(v68);
    v70 = String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v67, v69, 0, 0, 256);
    v71 = *(void (**)(char *, uint64_t))(v64 + 8);
    v71(v63, v30);
    String.LocalizationValue.init(stringLiteral:)(0x50206574656C6544, 0xEF7473696C79616CLL);
    v65(v66, v63, v30);
    v72 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v66, 0, 0, v72, v69, 0, 0, 256);
    v73 = v63;
    v52 = v70;
    v71(v73, v30);
    (*(void (**)(char *, uint64_t))(v168 + 8))(v173, v62);
    goto LABEL_26;
  }
  v74 = v30;
  v75 = v36;
  if (swift_dynamicCast(v169, &v177, v43, v170, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003CLL, 0x80000001003AB330);
    v76 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v77 = v34;
    v76(v34, v75, v74);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v78 = qword_1004F4630;
    v79 = (id)qword_1004F4630;
    v80 = v175;
    static Locale.current.getter(v79);
    v52 = String.init(localized:table:bundle:locale:comment:)(v77, 0, 0, v78, v80, 0, 0, 256);
    v81 = *(void (**)(char *, uint64_t))(v31 + 8);
    v81(v75, v74);
    String.LocalizationValue.init(stringLiteral:)(0x53206574656C6544, 0xEB00000000676E6FLL);
    v76(v77, v75, v74);
    v82 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v77, 0, 0, v82, v80, 0, 0, 256);
    v81(v75, v74);
    (*(void (**)(char *, uint64_t))(v165 + 8))(v169, v170);
    goto LABEL_26;
  }
  v83 = v34;
  if (swift_dynamicCast(v166, &v177, v43, v167, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003DLL, 0x80000001003AB2F0);
    v84 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v84(v34, v75, v74);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v85 = qword_1004F4630;
    v86 = (id)qword_1004F4630;
    v87 = v175;
    static Locale.current.getter(v86);
    v52 = String.init(localized:table:bundle:locale:comment:)(v83, 0, 0, v85, v87, 0, 0, 256);
    v88 = *(void (**)(char *, uint64_t))(v31 + 8);
    v88(v75, v74);
    String.LocalizationValue.init(stringLiteral:)(0x4D206574656C6544, 0xEC0000006569766FLL);
    v84(v83, v75, v74);
    v89 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v83, 0, 0, v89, v87, 0, 0, 256);
    v88(v75, v74);
    (*(void (**)(char *, uint64_t))(v162 + 8))(v166, v167);
    goto LABEL_26;
  }
  if (swift_dynamicCast(v163, &v177, v43, v164, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003FLL, 0x80000001003AB2B0);
    v90 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v90(v34, v75, v74);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v91 = qword_1004F4630;
    v92 = (id)qword_1004F4630;
    v93 = v175;
    static Locale.current.getter(v92);
    v52 = String.init(localized:table:bundle:locale:comment:)(v83, 0, 0, v91, v93, 0, 0, 256);
    v94 = *(void (**)(char *, uint64_t))(v31 + 8);
    v94(v75, v74);
    String.LocalizationValue.init(stringLiteral:)(0x54206574656C6544, 0xEE00776F68532056);
    v90(v83, v75, v74);
    v95 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v83, 0, 0, v95, v93, 0, 0, 256);
    v94(v75, v74);
    v96 = *(void (**)(char *, _QWORD))(v160 + 8);
    v97 = v163;
    v98 = &v180;
    goto LABEL_25;
  }
  if (swift_dynamicCast(v161, &v177, v43, v176, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000042, 0x80000001003AB240);
    v100 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v100(v34, v75, v74);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v101 = qword_1004F4630;
    v102 = (id)qword_1004F4630;
    v103 = v175;
    static Locale.current.getter(v102);
    v104 = String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v101, v103, 0, 0, 256);
    v105 = *(void (**)(char *, uint64_t))(v31 + 8);
    v52 = v104;
    v105(v75, v74);
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000011, 0x80000001003AB290);
    v100(v34, v75, v74);
    v106 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v106, v103, 0, 0, 256);
    v105(v75, v74);
    (*(void (**)(char *, uint64_t))(v158 + 8))(v161, v176);
    goto LABEL_26;
  }
  v107 = v23;
  v108 = v157;
  v109 = v159;
  if (!swift_dynamicCast(v157, &v177, v43, v159, 0))
  {
    v120 = v150;
    v121 = v153;
    if ((swift_dynamicCast(v150, &v177, v43, v153, 0) & 1) != 0)
    {
      v122 = v149;
      v123 = v148;
      (*(void (**)(char *, char *, uint64_t))(v149 + 32))(v148, v120, v121);
      v124 = v147;
      (*(void (**)(char *, char *, uint64_t))(v122 + 16))(v147, v123, v121);
      v125 = (*(uint64_t (**)(char *, uint64_t))(v122 + 88))(v124, v121);
      if (v125 == enum case for Track.song(_:))
      {
        (*(void (**)(char *, uint64_t))(v122 + 96))(v124, v121);
        v126 = v165;
        v127 = v145;
        v128 = v170;
        (*(void (**)(char *, char *, uint64_t))(v165 + 32))(v145, v124, v170);
        v129 = sub_1000F687C(v127);
LABEL_42:
        v52 = v129;
        (*(void (**)(char *, uint64_t))(v126 + 8))(v127, v128);
        (*(void (**)(char *, uint64_t))(v122 + 8))(v123, v121);
        goto LABEL_26;
      }
      if (v125 == enum case for Track.musicVideo(_:))
      {
        (*(void (**)(char *, uint64_t))(v122 + 96))(v124, v121);
        v126 = v172;
        v127 = v144;
        v128 = v107;
        (*(void (**)(char *, char *, uint64_t))(v172 + 32))(v144, v124, v107);
        v129 = sub_1000F7D98(v127);
        goto LABEL_42;
      }
      v134 = *(void (**)(char *, uint64_t))(v122 + 8);
      v134(v123, v121);
      v134(v124, v121);
    }
LABEL_53:
    sub_10000970C(&v177);
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000037, 0x80000001003AB1A0);
    v136 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v136(v83, v75, v74);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v137 = qword_1004F4630;
    v138 = (id)qword_1004F4630;
    v139 = v175;
    static Locale.current.getter(v138);
    v52 = String.init(localized:table:bundle:locale:comment:)(v83, 0, 0, v137, v139, 0, 0, 256);
    v140 = *(void (**)(char *, uint64_t))(v31 + 8);
    v140(v75, v74);
    String.LocalizationValue.init(stringLiteral:)(0x6574656C6544, 0xE600000000000000);
    v136(v83, v75, v74);
    v141 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v83, 0, 0, v141, v139, 0, 0, 256);
    v140(v75, v74);
    goto LABEL_27;
  }
  v110 = v156;
  v111 = v154;
  v112 = (*(uint64_t (**)(char *, char *, uint64_t))(v156 + 32))(v154, v108, v109);
  v113 = v152;
  Playlist.Entry.internalItem.getter(v112);
  v114 = v155;
  v115 = v151;
  v116 = (*(uint64_t (**)(char *, uint64_t))(v155 + 88))(v113, v151);
  if (v116 == enum case for Playlist.Entry.InternalItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v114 + 96))(v113, v115);
    v117 = v162;
    v118 = v146;
    v119 = v167;
    (*(void (**)(char *, char *, uint64_t))(v162 + 32))(v146, v113, v167);
    v52 = sub_1000F92E0(v118);
    (*(void (**)(char *, uint64_t))(v117 + 8))(v118, v119);
    v96 = *(void (**)(char *, _QWORD))(v110 + 8);
    v97 = v111;
LABEL_49:
    v98 = &v179;
LABEL_25:
    v96(v97, *(v98 - 32));
LABEL_26:
    sub_10000970C(&v177);
LABEL_27:
    sub_10000970C(v178);
    return v52;
  }
  if (v116 == enum case for Playlist.Entry.InternalItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v155 + 96))(v113, v115);
    v130 = v172;
    v131 = v144;
    v132 = v107;
    (*(void (**)(char *, char *, uint64_t))(v172 + 32))(v144, v113, v107);
    v133 = sub_1000F7D98(v131);
LABEL_48:
    v52 = v133;
    (*(void (**)(char *, uint64_t))(v130 + 8))(v131, v132);
    v96 = *(void (**)(char *, _QWORD))(v156 + 8);
    v97 = v111;
    goto LABEL_49;
  }
  if (v116 == enum case for Playlist.Entry.InternalItem.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v155 + 96))(v113, v115);
    v130 = v165;
    v131 = v145;
    v132 = v170;
    (*(void (**)(char *, char *, uint64_t))(v165 + 32))(v145, v113, v170);
    v133 = sub_1000F687C(v131);
    goto LABEL_48;
  }
  v135 = v155;
  if (v116 == enum case for Playlist.Entry.InternalItem.tvEpisode(_:))
  {
    (*(void (**)(char *, uint64_t))(v155 + 96))(v113, v115);
    v130 = v158;
    v131 = v143;
    v132 = v176;
    (*(void (**)(char *, char *, uint64_t))(v158 + 32))(v143, v113, v176);
    v133 = sub_1000FA830(v131);
    goto LABEL_48;
  }
  if (v116 != enum case for Playlist.Entry.InternalItem.uploadedAudio(_:)
    && v116 != enum case for Playlist.Entry.InternalItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v156 + 8))(v111, v159);
    (*(void (**)(char *, uint64_t))(v135 + 8))(v113, v115);
    goto LABEL_53;
  }
  (*(void (**)(char *, uint64_t))(v155 + 8))(v113, v115);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000036, 0x80000001003AB200, "MusicCore/Alert+Music.swift", 27, 2, 304, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000FBD40(void (*a1)(char *, char *, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  id v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  char *v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  char *v73;
  uint64_t v74;
  id v75;
  char *v76;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  char *v79;
  uint64_t v80;
  void (*v81)(char *, char *, uint64_t);
  uint64_t v82;
  id v83;
  char *v84;
  void (*v85)(char *, uint64_t);
  uint64_t v86;
  char *v87;
  uint64_t v88;
  void (*v89)(char *, char *, uint64_t);
  uint64_t v90;
  id v91;
  char *v92;
  void (*v93)(char *, uint64_t);
  uint64_t v94;
  void (*v95)(char *, uint64_t);
  char *v96;
  uint64_t *v97;
  uint64_t v98;
  void (*v99)(char *, char *, uint64_t);
  uint64_t v100;
  id v101;
  char *v102;
  void (*v103)(char *, uint64_t);
  uint64_t v104;
  uint64_t v105;
  void (*v106)(char *, char *, uint64_t);
  uint64_t v107;
  id v108;
  char *v109;
  void (*v110)(char *, uint64_t);
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  void (*v145)(char *, uint64_t);
  uint64_t v146;
  uint64_t result;
  void (*v148)(char *, char *, uint64_t);
  uint64_t v149;
  id v150;
  char *v151;
  void (*v152)(char *, uint64_t);
  uint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  void (*v188)(char *, char *, uint64_t);
  uint64_t v189;
  _QWORD v190[5];
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;

  v187 = a3;
  v188 = a1;
  v164 = type metadata accessor for Track(0);
  v160 = *(_QWORD *)(v164 - 8);
  v4 = __chkstk_darwin(v164);
  v158 = (char *)&v154 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v159 = (char *)&v154 - v7;
  __chkstk_darwin(v6);
  v161 = (char *)&v154 - v8;
  v162 = type metadata accessor for Playlist.Entry.InternalItem(0);
  v166 = *(_QWORD *)(v162 - 8);
  __chkstk_darwin(v162);
  v163 = (char *)&v154 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = type metadata accessor for Playlist.Entry(0);
  v167 = *(_QWORD *)(v170 - 8);
  v10 = __chkstk_darwin(v170);
  v165 = (char *)&v154 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v168 = (char *)&v154 - v12;
  v173 = type metadata accessor for TVEpisode(0);
  v169 = *(_QWORD *)(v173 - 8);
  v13 = __chkstk_darwin(v173);
  v154 = (char *)&v154 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v172 = (char *)&v154 - v15;
  v176 = type metadata accessor for TVSeason(0);
  v171 = *(_QWORD *)(v176 - 8);
  __chkstk_darwin(v176);
  v175 = (char *)&v154 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = type metadata accessor for MusicMovie(0);
  v174 = *(_QWORD *)(v179 - 8);
  v17 = __chkstk_darwin(v179);
  v157 = (char *)&v154 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v178 = (char *)&v154 - v19;
  v182 = type metadata accessor for Song(0);
  v177 = *(_QWORD *)(v182 - 8);
  v20 = __chkstk_darwin(v182);
  v156 = (char *)&v154 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v181 = (char *)&v154 - v22;
  v184 = type metadata accessor for Playlist(0);
  v180 = *(_QWORD *)(v184 - 8);
  __chkstk_darwin(v184);
  v24 = (char *)&v154 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for MusicVideo(0);
  v183 = *(_QWORD *)(v25 - 8);
  v26 = __chkstk_darwin(v25);
  v155 = (char *)&v154 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v29 = (char *)&v154 - v28;
  v30 = type metadata accessor for Locale(0);
  __chkstk_darwin(v30);
  v186 = (char *)&v154 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for String.LocalizationValue(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = __chkstk_darwin(v32);
  v36 = (char *)&v154 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v38 = (char *)&v154 - v37;
  v39 = type metadata accessor for Album(0);
  v185 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v41 = (char *)&v154 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190[3] = a2;
  v190[4] = v187;
  v42 = sub_1000407CC(v190);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v42, v188, a2);
  sub_1000444A8((uint64_t)v190, (uint64_t)&v189);
  v43 = sub_1000057B4(&qword_1004BDCA0);
  if (swift_dynamicCast(v41, &v189, v43, v39, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003DLL, 0x80000001003AB430);
    v188 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
    v188(v36, v38, v32);
    v44 = v32;
    v45 = v36;
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v46 = qword_1004F4630;
    v47 = (id)qword_1004F4630;
    v48 = v186;
    static Locale.current.getter(v47);
    v49 = String.init(localized:table:bundle:locale:comment:)(v45, 0, 0, v46, v48, 0, 0, 256);
    v187 = v50;
    v51 = *(void (**)(char *, uint64_t))(v33 + 8);
    v51(v38, v44);
    String.LocalizationValue.init(stringLiteral:)(0x41206574656C6544, 0xEC0000006D75626CLL);
    v188(v45, v38, v44);
    v52 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    v53 = v45;
    v54 = v49;
    String.init(localized:table:bundle:locale:comment:)(v53, 0, 0, v52, v48, 0, 0, 256);
    v51(v38, v44);
    (*(void (**)(char *, uint64_t))(v185 + 8))(v41, v39);
    goto LABEL_49;
  }
  v55 = v36;
  v56 = v25;
  if ((swift_dynamicCast(v29, &v189, v43, v25, 0) & 1) != 0)
  {
    v188 = (void (*)(char *, char *, uint64_t))v25;
    v57 = v38;
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000043, 0x80000001003AB3C0);
    v58 = v33;
    v59 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
    v60 = v55;
    v61 = v55;
    v62 = v32;
    v59(v61, v57, v32);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v63 = qword_1004F4630;
    v64 = (id)qword_1004F4630;
    v65 = v186;
    static Locale.current.getter(v64);
    v66 = String.init(localized:table:bundle:locale:comment:)(v60, 0, 0, v63, v65, 0, 0, 256);
    v67 = *(void (**)(char *, uint64_t))(v58 + 8);
    v67(v57, v62);
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000012, 0x80000001003AB410);
    v59(v60, v57, v62);
    v68 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v60, 0, 0, v68, v65, 0, 0, 256);
    v69 = v57;
    v54 = v66;
    v67(v69, v62);
    (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v183 + 8))(v29, v188);
    goto LABEL_49;
  }
  v70 = v32;
  if (swift_dynamicCast(v24, &v189, v43, v184, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000040, 0x80000001003AB370);
    v71 = v33;
    v72 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
    v73 = v55;
    v72(v55, v38, v70);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v74 = qword_1004F4630;
    v75 = (id)qword_1004F4630;
    v76 = v186;
    static Locale.current.getter(v75);
    v188 = (void (*)(char *, char *, uint64_t))String.init(localized:table:bundle:locale:comment:)(v55, 0, 0, v74, v76, 0, 0, 256);
    v77 = *(void (**)(char *, uint64_t))(v71 + 8);
    v77(v38, v70);
    String.LocalizationValue.init(stringLiteral:)(0x50206574656C6544, 0xEF7473696C79616CLL);
    v72(v73, v38, v70);
    v78 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v73, 0, 0, v78, v76, 0, 0, 256);
    v77(v38, v70);
    v79 = v24;
    v54 = (uint64_t)v188;
    (*(void (**)(char *, uint64_t))(v180 + 8))(v79, v184);
    goto LABEL_49;
  }
  if (swift_dynamicCast(v181, &v189, v43, v182, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003CLL, 0x80000001003AB330);
    v80 = v33;
    v81 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
    v81(v55, v38, v32);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v82 = qword_1004F4630;
    v83 = (id)qword_1004F4630;
    v84 = v186;
    static Locale.current.getter(v83);
    v54 = String.init(localized:table:bundle:locale:comment:)(v55, 0, 0, v82, v84, 0, 0, 256);
    v85 = *(void (**)(char *, uint64_t))(v80 + 8);
    v85(v38, v32);
    String.LocalizationValue.init(stringLiteral:)(0x53206574656C6544, 0xEB00000000676E6FLL);
    v81(v55, v38, v32);
    v86 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v55, 0, 0, v86, v84, 0, 0, 256);
    v85(v38, v32);
    (*(void (**)(char *, uint64_t))(v177 + 8))(v181, v182);
    goto LABEL_49;
  }
  v87 = v55;
  if (swift_dynamicCast(v178, &v189, v43, v179, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003DLL, 0x80000001003AB2F0);
    v88 = v33;
    v89 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
    v89(v55, v38, v70);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v90 = qword_1004F4630;
    v91 = (id)qword_1004F4630;
    v92 = v186;
    static Locale.current.getter(v91);
    v54 = String.init(localized:table:bundle:locale:comment:)(v55, 0, 0, v90, v92, 0, 0, 256);
    v93 = *(void (**)(char *, uint64_t))(v88 + 8);
    v93(v38, v70);
    String.LocalizationValue.init(stringLiteral:)(0x4D206574656C6544, 0xEC0000006569766FLL);
    v89(v55, v38, v70);
    v94 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v55, 0, 0, v94, v92, 0, 0, 256);
    v93(v38, v70);
    v95 = *(void (**)(char *, uint64_t))(v174 + 8);
    v96 = v178;
    v97 = &v194;
    goto LABEL_47;
  }
  if (swift_dynamicCast(v175, &v189, v43, v176, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003FLL, 0x80000001003AB2B0);
    v98 = v33;
    v99 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
    v99(v55, v38, v70);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v100 = qword_1004F4630;
    v101 = (id)qword_1004F4630;
    v102 = v186;
    static Locale.current.getter(v101);
    v54 = String.init(localized:table:bundle:locale:comment:)(v55, 0, 0, v100, v102, 0, 0, 256);
    v103 = *(void (**)(char *, uint64_t))(v98 + 8);
    v103(v38, v70);
    String.LocalizationValue.init(stringLiteral:)(0x54206574656C6544, 0xEE00776F68532056);
    v99(v55, v38, v70);
    v104 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v55, 0, 0, v104, v102, 0, 0, 256);
    v103(v38, v70);
    v95 = *(void (**)(char *, uint64_t))(v171 + 8);
    v96 = v175;
    v97 = &v193;
    goto LABEL_47;
  }
  if (swift_dynamicCast(v172, &v189, v43, v173, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000042, 0x80000001003AB240);
    v105 = v33;
    v106 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
    v106(v55, v38, v70);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v107 = qword_1004F4630;
    v108 = (id)qword_1004F4630;
    v109 = v186;
    static Locale.current.getter(v108);
    v54 = String.init(localized:table:bundle:locale:comment:)(v87, 0, 0, v107, v109, 0, 0, 256);
    v110 = *(void (**)(char *, uint64_t))(v105 + 8);
    v110(v38, v70);
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000011, 0x80000001003AB290);
    v106(v87, v38, v70);
    v111 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v87, 0, 0, v111, v109, 0, 0, 256);
    v110(v38, v70);
    v95 = *(void (**)(char *, uint64_t))(v169 + 8);
    v96 = v172;
    v97 = &v192;
    goto LABEL_47;
  }
  v112 = v168;
  v113 = v170;
  if (!swift_dynamicCast(v168, &v189, v43, v170, 0))
  {
    v125 = v161;
    v126 = v43;
    v127 = v164;
    v128 = v33;
    if ((swift_dynamicCast(v161, &v189, v126, v164, 0) & 1) != 0)
    {
      v129 = v160;
      v130 = v159;
      (*(void (**)(char *, char *, uint64_t))(v160 + 32))(v159, v125, v127);
      v131 = v158;
      (*(void (**)(char *, char *, uint64_t))(v129 + 16))(v158, v130, v127);
      v132 = (*(uint64_t (**)(char *, uint64_t))(v129 + 88))(v131, v127);
      if (v132 == enum case for Track.song(_:))
      {
        (*(void (**)(char *, uint64_t))(v129 + 96))(v131, v127);
        v133 = v177;
        v134 = (uint64_t)v156;
        v135 = v130;
        v136 = v182;
        (*(void (**)(char *, char *, uint64_t))(v177 + 32))(v156, v131, v182);
        v54 = sub_1000F687C(v134);
        (*(void (**)(uint64_t, uint64_t))(v133 + 8))(v134, v136);
        v95 = *(void (**)(char *, uint64_t))(v129 + 8);
        v96 = v135;
LABEL_39:
        v143 = v127;
LABEL_48:
        v95(v96, v143);
LABEL_49:
        sub_10000970C(&v189);
LABEL_50:
        sub_10000970C(v190);
        return v54;
      }
      if (v132 == enum case for Track.musicVideo(_:))
      {
        (*(void (**)(char *, uint64_t))(v129 + 96))(v131, v127);
        v141 = v183;
        v142 = (uint64_t)v155;
        (*(void (**)(char *, char *, uint64_t))(v183 + 32))(v155, v131, v56);
        v54 = sub_1000F7D98(v142);
        (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v142, v56);
        v95 = *(void (**)(char *, uint64_t))(v129 + 8);
        v96 = v130;
        goto LABEL_39;
      }
      v144 = v130;
      v145 = *(void (**)(char *, uint64_t))(v129 + 8);
      v145(v144, v127);
      v145(v131, v127);
    }
LABEL_54:
    sub_10000970C(&v189);
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000037, 0x80000001003AB1A0);
    v148 = *(void (**)(char *, char *, uint64_t))(v128 + 16);
    v148(v87, v38, v70);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v149 = qword_1004F4630;
    v150 = (id)qword_1004F4630;
    v151 = v186;
    static Locale.current.getter(v150);
    v54 = String.init(localized:table:bundle:locale:comment:)(v87, 0, 0, v149, v151, 0, 0, 256);
    v152 = *(void (**)(char *, uint64_t))(v128 + 8);
    v152(v38, v70);
    String.LocalizationValue.init(stringLiteral:)(0x6574656C6544, 0xE600000000000000);
    v148(v87, v38, v70);
    v153 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    String.init(localized:table:bundle:locale:comment:)(v87, 0, 0, v153, v151, 0, 0, 256);
    v152(v38, v70);
    goto LABEL_50;
  }
  v114 = v25;
  v115 = v167;
  v116 = v165;
  v117 = (*(uint64_t (**)(char *, char *, uint64_t))(v167 + 32))(v165, v112, v113);
  v118 = v163;
  Playlist.Entry.internalItem.getter(v117);
  v119 = v166;
  v120 = v162;
  v121 = (*(uint64_t (**)(char *, uint64_t))(v166 + 88))(v118, v162);
  if (v121 == enum case for Playlist.Entry.InternalItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v119 + 96))(v118, v120);
    v122 = v174;
    v123 = (uint64_t)v157;
    v124 = v179;
    (*(void (**)(char *, char *, uint64_t))(v174 + 32))(v157, v118, v179);
    v54 = sub_1000F92E0(v123);
    (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v123, v124);
    v95 = *(void (**)(char *, uint64_t))(v115 + 8);
LABEL_46:
    v96 = v116;
    v97 = &v191;
LABEL_47:
    v143 = *(v97 - 32);
    goto LABEL_48;
  }
  if (v121 == enum case for Playlist.Entry.InternalItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v166 + 96))(v118, v120);
    v137 = v183;
    v138 = (uint64_t)v155;
    v139 = v114;
    (*(void (**)(char *, char *, uint64_t))(v183 + 32))(v155, v118, v114);
    v140 = sub_1000F7D98(v138);
LABEL_45:
    v54 = v140;
    (*(void (**)(uint64_t, uint64_t))(v137 + 8))(v138, v139);
    v95 = *(void (**)(char *, uint64_t))(v167 + 8);
    goto LABEL_46;
  }
  if (v121 == enum case for Playlist.Entry.InternalItem.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v166 + 96))(v118, v120);
    v137 = v177;
    v138 = (uint64_t)v156;
    v139 = v182;
    (*(void (**)(char *, char *, uint64_t))(v177 + 32))(v156, v118, v182);
    v140 = sub_1000F687C(v138);
    goto LABEL_45;
  }
  v146 = v166;
  if (v121 == enum case for Playlist.Entry.InternalItem.tvEpisode(_:))
  {
    (*(void (**)(char *, uint64_t))(v166 + 96))(v118, v120);
    v137 = v169;
    v138 = (uint64_t)v154;
    v139 = v173;
    (*(void (**)(char *, char *, uint64_t))(v169 + 32))(v154, v118, v173);
    v140 = sub_1000FA830(v138);
    goto LABEL_45;
  }
  if (v121 != enum case for Playlist.Entry.InternalItem.uploadedAudio(_:)
    && v121 != enum case for Playlist.Entry.InternalItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v167 + 8))(v116, v170);
    (*(void (**)(char *, uint64_t))(v146 + 8))(v118, v120);
    v128 = v33;
    goto LABEL_54;
  }
  (*(void (**)(char *, uint64_t))(v166 + 8))(v118, v120);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000036, 0x80000001003AB200, "MusicCore/Alert+Music.swift", 27, 2, 304, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000FD26C@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1004B8C80 != -1)
    swift_once(&qword_1004B8C80, sub_100118700);
  v9 = static CloudLibrary.EnablementContext.action;
  v8 = unk_1004F49C0;
  swift_bridgeObjectRetain();
  v10 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v11 = UUID.uuidString.getter(v10);
  v13 = v12;
  v32 = *(void (**)(char *, uint64_t))(v5 + 8);
  v32(v7, v4);
  CloudLibrary.EnablementContext.title.getter(a1);
  v35 = v15;
  v36 = v14;
  CloudLibrary.EnablementContext.message.getter(a1);
  v33 = v17;
  v34 = v16;
  v18 = sub_1000057B4(&qword_1004BF6E0);
  v19 = swift_allocObject(v18, 144, 7);
  *(_OWORD *)(v19 + 16) = xmmword_1003C6BD0;
  *(_QWORD *)(v19 + 32) = v11;
  *(_QWORD *)(v19 + 40) = v13;
  *(_QWORD *)(v19 + 48) = v9;
  *(_QWORD *)(v19 + 56) = v8;
  *(_BYTE *)(v19 + 64) = 2;
  *(_QWORD *)(v19 + 72) = &unk_1004BDCC8;
  *(_QWORD *)(v19 + 80) = 0;
  v20 = qword_1004B92F0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = v4;
  if (v20 != -1)
    swift_once(&qword_1004B92F0, sub_10020C0C0);
  v22 = static String.cancelButtonTitle;
  v23 = qword_1004F5520;
  swift_bridgeObjectRetain();
  v24 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v25 = UUID.uuidString.getter(v24);
  v27 = v26;
  v32(v7, v21);
  *(_QWORD *)(v19 + 88) = v25;
  *(_QWORD *)(v19 + 96) = v27;
  *(_QWORD *)(v19 + 104) = v22;
  *(_QWORD *)(v19 + 112) = v23;
  *(_BYTE *)(v19 + 120) = 0;
  *(_QWORD *)(v19 + 128) = 0;
  *(_QWORD *)(v19 + 136) = 0;
  swift_bridgeObjectRelease(v8);
  result = swift_bridgeObjectRelease(v13);
  v29 = v35;
  *(_QWORD *)a2 = v36;
  *(_QWORD *)(a2 + 8) = v29;
  v30 = v33;
  *(_QWORD *)(a2 + 16) = v34;
  *(_QWORD *)(a2 + 24) = v30;
  *(_BYTE *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = v19;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

char *sub_1000FD460@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  unsigned __int8 v32;
  unint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *result;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  const char *v52;
  uint64_t v53;
  id v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  id v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  id v73;
  char *v74;
  unint64_t v75;
  uint64_t v76;
  id v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(char *, uint64_t);
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t (*v112)(char *, uint64_t);
  uint64_t v113;
  void (*v114)(char *, char *, uint64_t);
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  _QWORD v119[16];

  v111 = a2;
  v117 = type metadata accessor for UUID(0);
  v112 = *(uint64_t (**)(char *, uint64_t))(v117 - 8);
  __chkstk_darwin(v117);
  v116 = (char *)&v105 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v118 = (char *)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for String.LocalizationValue(0);
  v6 = *(_QWORD *)(v115 - 8);
  v7 = __chkstk_darwin(v115);
  v9 = (char *)&v105 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v105 - v10;
  if (qword_1004B8AF8 != -1)
    swift_once(&qword_1004B8AF8, sub_1000D365C);
  v12 = static ApplicationCapabilities.Controller.shared;
  KeyPath = swift_getKeyPath(&unk_1003CD8E0);
  v14 = swift_getKeyPath(&unk_1003CD908);
  static Published.subscript.getter(v119, v12, KeyPath, v14);
  swift_release(KeyPath);
  swift_release(v14);
  v15 = v119[3];
  v16 = v119[4];
  v17 = v119[7];
  v18 = v119[9];
  v19 = (void *)v119[10];
  v20 = v119[12];
  swift_bridgeObjectRelease(v119[14]);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v18);

  v21 = sub_1000E63A4(7u, v16);
  swift_bridgeObjectRelease(v16);
  if ((a1 & 1) != 0)
  {
    v22 = 0x80000001003AB670;
    v23 = 0xD000000000000012;
  }
  else
  {
    v22 = 0x80000001003AB470;
    v23 = 0x100000000000002DLL;
  }
  String.LocalizationValue.init(stringLiteral:)(v23, v22);
  v24 = v115;
  v114 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v114(v9, v11, v115);
  if (qword_1004B8A10 != -1)
    swift_once(&qword_1004B8A10, sub_10002B2B8);
  v25 = qword_1004F4630;
  v26 = (id)qword_1004F4630;
  v27 = v118;
  static Locale.current.getter(v26);
  v28 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, v25, v27, 0, 0, 256);
  v30 = v29;
  v31 = *(void (**)(char *, uint64_t))(v6 + 8);
  v31(v11, v24);
  v32 = objc_msgSend((id)objc_opt_self(AMSRestrictions), "allowAccountModifications");
  v113 = v30;
  if ((v32 & 1) != 0)
  {
    v110 = v28;
    v109 = v31;
    if ((v21 & 1) != 0)
    {
      if ((a1 & 1) != 0)
      {
        v33 = 0xD000000000000087;
        v34 = "This content is restricted from playing on this device. To change your Content Restrictions, go to Setting"
              "s and allow explicit content.";
      }
      else
      {
        v33 = 0xD000000000000061;
        v34 = "To add this to your library, change your Content Restrictions to allow a less restrictive rating.";
      }
      String.LocalizationValue.init(stringLiteral:)(v33, (unint64_t)(v34 - 32) | 0x8000000000000000);
      v114(v9, v11, v24);
      if (qword_1004B8A10 != -1)
        swift_once(&qword_1004B8A10, sub_10002B2B8);
      v53 = qword_1004F4630;
      v54 = (id)qword_1004F4630;
      v55 = v118;
      static Locale.current.getter(v54);
      v108 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, v53, v55, 0, 0, 256);
      v107 = v56;
      v31(v11, v24);
      String.LocalizationValue.init(stringLiteral:)(0x73676E6974746553, 0xE800000000000000);
      v114(v9, v11, v24);
      if (qword_1004B8A10 != -1)
        swift_once(&qword_1004B8A10, sub_10002B2B8);
      v57 = qword_1004F4630;
      v58 = (id)qword_1004F4630;
      v59 = v118;
      static Locale.current.getter(v58);
      v106 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, v57, v59, 0, 0, 256);
      v105 = v60;
      v31(v11, v24);
      v61 = v116;
      v62 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
      v63 = UUID.uuidString.getter(v62);
      v65 = v64;
      v66 = (void (*)(char *, uint64_t))*((_QWORD *)v112 + 1);
      v66(v61, v117);
      v43 = sub_10005DD14(0, 1, 1, (char *)_swiftEmptyArrayStorage);
      v68 = *((_QWORD *)v43 + 2);
      v67 = *((_QWORD *)v43 + 3);
      v112 = (uint64_t (*)(char *, uint64_t))v66;
      if (v68 >= v67 >> 1)
        v43 = sub_10005DD14((char *)(v67 > 1), v68 + 1, 1, v43);
      *((_QWORD *)v43 + 2) = v68 + 1;
      v69 = &v43[56 * v68];
      *((_QWORD *)v69 + 4) = v63;
      *((_QWORD *)v69 + 5) = v65;
      v70 = v105;
      *((_QWORD *)v69 + 6) = v106;
      *((_QWORD *)v69 + 7) = v70;
      v69[64] = 2;
      v71 = &unk_1004BDCC0;
    }
    else
    {
      if ((a1 & 1) != 0)
      {
        v51 = 0xD00000000000005BLL;
        v52 = "To play this item, change your Content Restrictions to allow a less restrictive rating now.";
      }
      else
      {
        v51 = 0xD000000000000065;
        v52 = "To add this to your library, change your Content Restrictions to allow a less restrictive rating now.";
      }
      String.LocalizationValue.init(stringLiteral:)(v51, (unint64_t)(v52 - 32) | 0x8000000000000000);
      v114(v9, v11, v24);
      if (qword_1004B8A10 != -1)
        swift_once(&qword_1004B8A10, sub_10002B2B8);
      v72 = qword_1004F4630;
      v73 = (id)qword_1004F4630;
      v74 = v118;
      static Locale.current.getter(v73);
      v108 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, v72, v74, 0, 0, 256);
      v107 = v75;
      v31(v11, v24);
      String.LocalizationValue.init(stringLiteral:)(0x776F6C6C41, 0xE500000000000000);
      v114(v9, v11, v24);
      if (qword_1004B8A10 != -1)
        swift_once(&qword_1004B8A10, sub_10002B2B8);
      v76 = qword_1004F4630;
      v77 = (id)qword_1004F4630;
      v78 = v118;
      static Locale.current.getter(v77);
      v106 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, v76, v78, 0, 0, 256);
      v105 = v79;
      v31(v11, v24);
      v80 = v116;
      v81 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
      v82 = UUID.uuidString.getter(v81);
      v84 = v83;
      v85 = (void (*)(char *, uint64_t))*((_QWORD *)v112 + 1);
      v85(v80, v117);
      v43 = sub_10005DD14(0, 1, 1, (char *)_swiftEmptyArrayStorage);
      v87 = *((_QWORD *)v43 + 2);
      v86 = *((_QWORD *)v43 + 3);
      v112 = (uint64_t (*)(char *, uint64_t))v85;
      if (v87 >= v86 >> 1)
        v43 = sub_10005DD14((char *)(v86 > 1), v87 + 1, 1, v43);
      *((_QWORD *)v43 + 2) = v87 + 1;
      v69 = &v43[56 * v87];
      *((_QWORD *)v69 + 4) = v82;
      *((_QWORD *)v69 + 5) = v84;
      v88 = v105;
      *((_QWORD *)v69 + 6) = v106;
      *((_QWORD *)v69 + 7) = v88;
      v69[64] = 2;
      v71 = &unk_1004BDCB8;
    }
    *((_QWORD *)v69 + 9) = v71;
    *((_QWORD *)v69 + 10) = 0;
    String.LocalizationValue.init(stringLiteral:)(0x776F4E20746F4ELL, 0xE700000000000000);
    v89 = v115;
    v114(v9, v11, v115);
    v90 = qword_1004F4630;
    v91 = (id)qword_1004F4630;
    v92 = v118;
    static Locale.current.getter(v91);
    v93 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, v90, v92, 0, 0, 256);
    v95 = v94;
    v109(v11, v89);
    v96 = v116;
    v97 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
    v98 = UUID.uuidString.getter(v97);
    v100 = v99;
    result = (char *)v112(v96, v117);
    v102 = *((_QWORD *)v43 + 2);
    v101 = *((_QWORD *)v43 + 3);
    if (v102 >= v101 >> 1)
    {
      result = sub_10005DD14((char *)(v101 > 1), v102 + 1, 1, v43);
      v43 = result;
    }
    v46 = v111;
    v47 = v108;
    v50 = v107;
    *((_QWORD *)v43 + 2) = v102 + 1;
    v103 = &v43[56 * v102];
    *((_QWORD *)v103 + 4) = v98;
    *((_QWORD *)v103 + 5) = v100;
    *((_QWORD *)v103 + 6) = v93;
    *((_QWORD *)v103 + 7) = v95;
    v103[64] = 2;
    v49 = v103 + 72;
    v28 = v110;
  }
  else
  {
    if (qword_1004B92E0 != -1)
      swift_once(&qword_1004B92E0, sub_10020C04C);
    v35 = static String.okButtonTitle;
    v36 = qword_1004F5500;
    swift_bridgeObjectRetain();
    v37 = v116;
    v38 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
    v39 = UUID.uuidString.getter(v38);
    v41 = v40;
    (*((void (**)(char *, uint64_t))v112 + 1))(v37, v117);
    result = sub_10005DD14(0, 1, 1, (char *)_swiftEmptyArrayStorage);
    v43 = result;
    v45 = *((_QWORD *)result + 2);
    v44 = *((_QWORD *)result + 3);
    v46 = v111;
    if (v45 >= v44 >> 1)
    {
      result = sub_10005DD14((char *)(v44 > 1), v45 + 1, 1, result);
      v43 = result;
    }
    v47 = 0;
    *((_QWORD *)v43 + 2) = v45 + 1;
    v48 = &v43[56 * v45];
    *((_QWORD *)v48 + 4) = v39;
    *((_QWORD *)v48 + 5) = v41;
    *((_QWORD *)v48 + 6) = v35;
    *((_QWORD *)v48 + 7) = v36;
    v48[64] = 2;
    v49 = v48 + 72;
    v50 = 0xE000000000000000;
  }
  *v49 = 0;
  v49[1] = 0;
  v104 = v113;
  *(_QWORD *)v46 = v28;
  *(_QWORD *)(v46 + 8) = v104;
  *(_QWORD *)(v46 + 16) = v47;
  *(_QWORD *)(v46 + 24) = v50;
  *(_BYTE *)(v46 + 32) = 0;
  *(_QWORD *)(v46 + 40) = v43;
  *(_QWORD *)(v46 + 48) = 0;
  return result;
}

uint64_t sub_1000FDDF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v54 = a2;
  v55 = a3;
  v53 = a1;
  v56 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Locale(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for String.LocalizationValue(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v44 - v18;
  String.LocalizationValue.init(stringLiteral:)(0x6E4F206E727554, 0xE700000000000000);
  v50 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v50(v17, v19, v13);
  if (qword_1004B8A10 != -1)
    swift_once(&qword_1004B8A10, sub_10002B2B8);
  v20 = qword_1004F4630;
  static Locale.current.getter((id)qword_1004F4630);
  v21 = String.init(localized:table:bundle:locale:comment:)(v17, 0, 0, v20, v12, 0, 0, 256);
  v51 = v22;
  v52 = v21;
  v49 = *(void (**)(char *, uint64_t))(v14 + 8);
  v49(v19, v13);
  v23 = swift_allocObject(&unk_100473440, 32, 7);
  *(_QWORD *)(v23 + 16) = v55;
  *(_QWORD *)(v23 + 24) = a4;
  v45 = v23;
  swift_retain(a4);
  v24 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v25 = UUID.uuidString.getter(v24);
  v47 = v26;
  v48 = v25;
  v27 = *(void (**)(char *, uint64_t))(v7 + 8);
  v27(v9, v56);
  if (qword_1004B9300 != -1)
    swift_once(&qword_1004B9300, sub_10020C180);
  v28 = qword_1004F5540;
  v46 = static String.notNowButtonTitle;
  v29 = swift_allocObject(&unk_100473468, 32, 7);
  *(_QWORD *)(v29 + 16) = v55;
  *(_QWORD *)(v29 + 24) = a4;
  swift_retain(a4);
  swift_bridgeObjectRetain();
  v30 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v31 = UUID.uuidString.getter(v30);
  v55 = v32;
  v27(v9, v56);
  String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ELL, 0x80000001003AB030);
  v50(v17, v19, v13);
  v33 = qword_1004F4630;
  static Locale.current.getter((id)qword_1004F4630);
  v34 = String.init(localized:table:bundle:locale:comment:)(v17, 0, 0, v33, v12, 0, 0, 256);
  v36 = v35;
  v49(v19, v13);
  v37 = sub_1000057B4(&qword_1004BF6E0);
  v38 = swift_allocObject(v37, 144, 7);
  *(_OWORD *)(v38 + 16) = xmmword_1003C6BD0;
  v39 = v47;
  *(_QWORD *)(v38 + 32) = v48;
  *(_QWORD *)(v38 + 40) = v39;
  v40 = v51;
  *(_QWORD *)(v38 + 48) = v52;
  *(_QWORD *)(v38 + 56) = v40;
  *(_BYTE *)(v38 + 64) = 2;
  v41 = v45;
  *(_QWORD *)(v38 + 72) = &unk_1004BDC58;
  *(_QWORD *)(v38 + 80) = v41;
  v42 = v55;
  *(_QWORD *)(v38 + 88) = v31;
  *(_QWORD *)(v38 + 96) = v42;
  *(_QWORD *)(v38 + 104) = v46;
  *(_QWORD *)(v38 + 112) = v28;
  *(_BYTE *)(v38 + 120) = 0;
  *(_QWORD *)(v38 + 128) = &unk_1004BDC68;
  *(_QWORD *)(v38 + 136) = v29;
  result = swift_bridgeObjectRetain();
  *(_QWORD *)a5 = v34;
  *(_QWORD *)(a5 + 8) = v36;
  *(_QWORD *)(a5 + 16) = v53;
  *(_QWORD *)(a5 + 24) = result;
  *(_BYTE *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 40) = v38;
  *(_QWORD *)(a5 + 48) = 0;
  return result;
}

id sub_1000FE198@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  id result;
  void *v22;
  int wapiCapability;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);

  v47 = a3;
  v5 = type metadata accessor for Locale(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for String.LocalizationValue(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v44 - v13;
  String.LocalizationValue.init(stringLiteral:)(0xD000000000000020, 0x80000001003AB050);
  v50 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v50(v12, v14, v8);
  if (qword_1004B8A10 != -1)
    swift_once(&qword_1004B8A10, sub_10002B2B8);
  v15 = qword_1004F4630;
  static Locale.current.getter((id)qword_1004F4630);
  v16 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v15, v7, 0, 0, 256);
  v48 = v17;
  v49 = v16;
  v18 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
  v19 = v18(v14, v8);
  result = (id)MobileGestalt_get_current_device(v19, v20);
  if (result)
  {
    v22 = result;
    wapiCapability = MobileGestalt_get_wapiCapability();

    if (wapiCapability)
    {
      v24 = 0x80000001003AB110;
      v25 = 0x100000000000008BLL;
    }
    else
    {
      v25 = 0x100000000000008CLL;
      v24 = 0x80000001003AB080;
    }
    String.LocalizationValue.init(stringLiteral:)(v25, v24);
    v50(v12, v14, v8);
    v26 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    v27 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v26, v7, 0, 0, 256);
    v45 = v28;
    v46 = v27;
    v29 = a1;
    v30 = a2;
    v18(v14, v8);
    v31 = sub_1000057B4(&qword_1004BF6E0);
    v32 = swift_allocObject(v31, 144, 7);
    *(_OWORD *)(v32 + 16) = xmmword_1003C6BD0;
    if (qword_1004B9300 != -1)
      swift_once(&qword_1004B9300, sub_10020C180);
    v33 = static String.notNowButtonTitle;
    v34 = qword_1004F5540;
    v35 = swift_allocObject(&unk_100473490, 32, 7);
    *(_QWORD *)(v35 + 16) = v29;
    *(_QWORD *)(v35 + 24) = v30;
    *(_QWORD *)(v32 + 32) = 0x6C65636E6163;
    *(_QWORD *)(v32 + 40) = 0xE600000000000000;
    *(_QWORD *)(v32 + 48) = v33;
    *(_QWORD *)(v32 + 56) = v34;
    *(_BYTE *)(v32 + 64) = 0;
    *(_QWORD *)(v32 + 72) = &unk_1004BDC78;
    *(_QWORD *)(v32 + 80) = v35;
    swift_bridgeObjectRetain();
    sub_10000DCE8(v29, v30);
    String.LocalizationValue.init(stringLiteral:)(0x6E4F206E727554, 0xE700000000000000);
    v50(v12, v14, v8);
    v36 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    v37 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v36, v7, 0, 0, 256);
    v39 = v38;
    v18(v14, v8);
    v40 = swift_allocObject(&unk_1004734B8, 32, 7);
    *(_QWORD *)(v40 + 16) = v29;
    *(_QWORD *)(v40 + 24) = v30;
    *(_QWORD *)(v32 + 88) = 0x6E4F6E727574;
    *(_QWORD *)(v32 + 96) = 0xE600000000000000;
    *(_QWORD *)(v32 + 104) = v37;
    *(_QWORD *)(v32 + 112) = v39;
    *(_BYTE *)(v32 + 120) = 2;
    *(_QWORD *)(v32 + 128) = &unk_1004BDC88;
    *(_QWORD *)(v32 + 136) = v40;
    result = (id)sub_10000DCE8(v29, v30);
    v41 = v47;
    v42 = v48;
    *v47 = v49;
    v41[1] = v42;
    v43 = v45;
    v41[2] = v46;
    v41[3] = v43;
    *((_BYTE *)v41 + 32) = 0;
    v41[5] = v32;
    v41[6] = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000FE58C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t result;
  uint64_t v26;
  char *v27;
  int64x2_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  __int128 v33;
  void (*v34)(char *, char *, uint64_t);
  id v35;
  NSURL *v36;
  void *v37;
  void *v38;
  unsigned int v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v52 = a8;
  v55 = a6;
  v56 = a7;
  v53 = a4;
  v54 = a5;
  v13 = type metadata accessor for UUID(0);
  v50 = *(_QWORD *)(v13 - 8);
  v51 = v13;
  __chkstk_darwin(v13);
  v49 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  v18 = __chkstk_darwin(v15);
  v48 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v47 - v19;
  v21 = sub_1000057B4(&qword_1004B99B0);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v47 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v22);
  v27 = (char *)&v47 - v26;
  if (qword_1004B93A8 != -1)
    result = swift_once(&qword_1004B93A8, sub_10020D77C);
  v28 = 0uLL;
  if (static DeviceCapabilities.isInternalInstall == 1)
  {
    sub_100116AB8(a1, a2, a3, v53, v54, v55, v56, v52 & 1, (uint64_t)v27);
    sub_10002DBB0((uint64_t)v27, (uint64_t)v24);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v24, 1, v15) == 1)
    {
      sub_10002DBF8((uint64_t)v27);
      v29 = (uint64_t)v24;
LABEL_10:
      result = sub_10002DBF8(v29);
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 0uLL;
      v28 = 0uLL;
      goto LABEL_11;
    }
    v34 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    v34(v20, v24, v15);
    v35 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
    URL._bridgeToObjectiveC()(v36);
    v38 = v37;
    v39 = objc_msgSend(v35, "canOpenURL:", v37);

    if (!v39)
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v15);
      v29 = (uint64_t)v27;
      goto LABEL_10;
    }
    v40 = v48;
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v48, v20, v15);
    v41 = *(unsigned __int8 *)(v16 + 80);
    v42 = (v41 + 16) & ~v41;
    v32 = swift_allocObject(&unk_100473418, v42 + v17, v41 | 7);
    v34((char *)(v32 + v42), v40, v15);
    v43 = v49;
    v44 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
    v30 = UUID.uuidString.getter(v44);
    v46 = v45;
    (*(void (**)(char *, uint64_t))(v50 + 8))(v43, v51);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v15);
    result = sub_10002DBF8((uint64_t)v27);
    v28 = vdupq_n_s64(0x52206120656C6946uLL);
    v28.i64[0] = v46;
    v33 = xmmword_1003C6D30;
    v31 = &unk_1004BDC48;
  }
  else
  {
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0uLL;
  }
LABEL_11:
  *(_QWORD *)a9 = v30;
  *(int64x2_t *)(a9 + 8) = v28;
  *(_OWORD *)(a9 + 24) = v33;
  *(_QWORD *)(a9 + 40) = v31;
  *(_QWORD *)(a9 + 48) = v32;
  return result;
}

uint64_t sub_1000FE8E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000057B4(&qword_1004BD6A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id sub_1000FE928@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  id result;
  void *v19;
  char wapiCapability;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  id v24;
  char *v25;
  void *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  id v37;
  char *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  id v46;
  id v47;
  void *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  void *v56;
  uint64_t v57;
  BOOL v58;
  id v59;
  id v60;
  uint64_t v61;
  id v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  char *v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  id v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  void (*v88)(char *, uint64_t);
  char *v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  id v112;
  uint64_t v113;
  void *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  char *v120;

  v4 = type metadata accessor for UUID(0);
  v119 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v109 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  __chkstk_darwin(v7);
  v120 = (char *)&v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v109 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v109 - v15;
  result = (id)MobileGestalt_get_current_device(v14, v17);
  if (!result)
  {
    __break(1u);
    return result;
  }
  v19 = result;
  wapiCapability = MobileGestalt_get_wapiCapability();

  v117 = v4;
  v118 = a2;
  if (!a1)
    goto LABEL_24;
  objc_opt_self(MPModelRadioStation);
  if (swift_dynamicCastObjCClass(a1) || (objc_opt_self(MPModelArtist), swift_dynamicCastObjCClass(a1)))
  {
    v21 = v6;
    if ((wapiCapability & 1) != 0)
    {
      String.LocalizationValue.init(stringLiteral:)(0xD00000000000001DLL, 0x80000001003AAC50);
      v22 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
      v22(v13, v16, v9);
      if (qword_1004B8A10 != -1)
        swift_once(&qword_1004B8A10, sub_10002B2B8);
      v23 = qword_1004F4630;
      v24 = (id)qword_1004F4630;
      v25 = v120;
      static Locale.current.getter(v24);
      v26 = (void *)String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, v23, v25, 0, 0, 256);
      v111 = v27;
      v112 = v26;
      v28 = *(void (**)(char *, uint64_t))(v10 + 8);
      v28(v16, v9);
      v29 = 0x80000001003AAFC0;
      v30 = 0x100000000000006ALL;
      goto LABEL_48;
    }
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ELL, 0x80000001003AAC00);
    v22 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v22(v13, v16, v9);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v31 = qword_1004F4630;
    v32 = (id)qword_1004F4630;
    v25 = v120;
    static Locale.current.getter(v32);
    v33 = (void *)String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, v31, v25, 0, 0, 256);
    v111 = v34;
    v112 = v33;
    v28 = *(void (**)(char *, uint64_t))(v10 + 8);
    v28(v16, v9);
    v30 = 0x100000000000006BLL;
    v35 = "To play Radio when you aren’t connected to Wi-Fi, turn on cellular playback in Music in the Settings app.";
LABEL_47:
    v29 = (unint64_t)(v35 - 32) | 0x8000000000000000;
LABEL_48:
    String.LocalizationValue.init(stringLiteral:)(v30, v29);
    v22(v13, v16, v9);
    v77 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    v78 = String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, v77, v25, 0, 0, 256);
    v109 = v79;
    v110 = v78;
    v28(v16, v9);
    String.LocalizationValue.init(stringLiteral:)(0x6E4F206E727554, 0xE700000000000000);
    v22(v13, v16, v9);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v80 = qword_1004F4630;
    v81 = (id)qword_1004F4630;
    v82 = v120;
    static Locale.current.getter(v81);
    v115 = String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, v80, v82, 0, 0, 256);
    v113 = v83;
    v72 = &unk_1004BDC28;
    goto LABEL_51;
  }
  objc_opt_self(MPModelTVEpisode);
  if (swift_dynamicCastObjCClass(a1) || (objc_opt_self(MPModelMovie), swift_dynamicCastObjCClass(a1)))
  {
    if ((wapiCapability & 1) == 0)
      goto LABEL_37;
LABEL_15:
    v21 = v6;
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ELL, 0x80000001003AAEA0);
    v22 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v22(v13, v16, v9);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v36 = qword_1004F4630;
    v37 = (id)qword_1004F4630;
    v38 = v120;
    static Locale.current.getter(v37);
    v39 = (void *)String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, v36, v38, 0, 0, 256);
    v111 = v40;
    v112 = v39;
    v28 = *(void (**)(char *, uint64_t))(v10 + 8);
    v28(v16, v9);
    v41 = 0x1000000000000087;
    v42 = "To stream videos when you aren’t connected to WLAN, turn on Cellular Data for streaming. You can change this a"
          "nytime in Settings > TV";
    goto LABEL_40;
  }
  objc_opt_self(MPModelMediaClip);
  v43 = swift_dynamicCastObjCClass(a1);
  if (!v43)
  {
LABEL_24:
    if ((wapiCapability & 1) != 0)
      goto LABEL_25;
LABEL_44:
    v21 = v6;
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000020, 0x80000001003AACA0);
    v22 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v22(v13, v16, v9);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v73 = qword_1004F4630;
    v74 = (id)qword_1004F4630;
    v25 = v120;
    static Locale.current.getter(v74);
    v75 = (void *)String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, v73, v25, 0, 0, 256);
    v111 = v76;
    v112 = v75;
    v28 = *(void (**)(char *, uint64_t))(v10 + 8);
    v28(v16, v9);
    v30 = 0x100000000000008BLL;
    v35 = "To stream music when you aren’t connected to Wi-Fi, turn on Cellular Data for streaming. You can change this a"
          "nytime in Settings > Music.";
    goto LABEL_47;
  }
  v44 = (void *)v43;
  v45 = MPModelRelationshipMediaClipStaticAssets;
  v46 = a1;
  if (!objc_msgSend(v44, "hasLoadedValueForKey:", v45)
    || (v47 = objc_msgSend(v44, "staticAssets")) == 0)
  {

    if ((wapiCapability & 1) != 0)
      goto LABEL_25;
    goto LABEL_44;
  }
  v48 = v47;
  v49 = sub_1000FFC88();
  v50 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v48, v49);

  v51 = v50;
  v116 = v50;
  v112 = v46;
  if (v50 >> 62)
  {
LABEL_55:
    if (v51 < 0)
      v107 = v116;
    else
      v107 = v51 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v108 = v107;
    v51 = v116;
    v52 = _CocoaArrayWrapper.endIndex.getter(v108);
    swift_bridgeObjectRelease();
    if (v52)
      goto LABEL_23;
LABEL_59:

    swift_bridgeObjectRelease();
    if ((wapiCapability & 1) == 0)
      goto LABEL_44;
LABEL_25:
    v21 = v6;
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000020, 0x80000001003AACA0);
    v22 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v22(v13, v16, v9);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v54 = qword_1004F4630;
    v55 = (id)qword_1004F4630;
    v25 = v120;
    static Locale.current.getter(v55);
    v56 = (void *)String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, v54, v25, 0, 0, 256);
    v111 = v57;
    v112 = v56;
    v28 = *(void (**)(char *, uint64_t))(v10 + 8);
    v28(v16, v9);
    v30 = 0x100000000000008ALL;
    v35 = "To stream music when you aren’t connected to WLAN, turn on Cellular Data for streaming. You can change this an"
          "ytime in Settings > Music.";
    goto LABEL_47;
  }
  v52 = *(_QWORD *)((v50 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v52)
    goto LABEL_59;
LABEL_23:
  v115 = v51 & 0xC000000000000001;
  v113 = v9;
  v114 = (void *)MPModelPropertyStaticAssetMediaType;
  v53 = 4;
  while (1)
  {
    if (v115)
      v59 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v53 - 4, v51);
    else
      v59 = *(id *)(v51 + 8 * v53);
    v51 = (uint64_t)v59;
    v9 = v53 - 3;
    if (__OFADD__(v53 - 4, 1))
    {
      __break(1u);
      goto LABEL_55;
    }
    if (objc_msgSend(v59, "hasLoadedValueForKey:", v114))
      break;

LABEL_29:
    ++v53;
    v58 = v9 == v52;
    v9 = v113;
    v51 = v116;
    if (v58)
      goto LABEL_59;
  }
  v60 = objc_msgSend((id)v51, "mediaType");

  if (v60 != (id)2)
    goto LABEL_29;

  swift_bridgeObjectRelease();
  v9 = v113;
  if ((wapiCapability & 1) != 0)
    goto LABEL_15;
LABEL_37:
  v21 = v6;
  String.LocalizationValue.init(stringLiteral:)(0xD00000000000001FLL, 0x80000001003AADF0);
  v22 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v22(v13, v16, v9);
  if (qword_1004B8A10 != -1)
    swift_once(&qword_1004B8A10, sub_10002B2B8);
  v61 = qword_1004F4630;
  v62 = (id)qword_1004F4630;
  v38 = v120;
  static Locale.current.getter(v62);
  v63 = (void *)String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, v61, v38, 0, 0, 256);
  v111 = v64;
  v112 = v63;
  v28 = *(void (**)(char *, uint64_t))(v10 + 8);
  v28(v16, v9);
  v41 = 0x1000000000000088;
  v42 = "To stream videos when you aren’t connected to Wi-Fi, turn on Cellular Data for streaming. You can change this an"
        "ytime in Settings > TV";
LABEL_40:
  String.LocalizationValue.init(stringLiteral:)(v41, (unint64_t)(v42 - 32) | 0x8000000000000000);
  v22(v13, v16, v9);
  v65 = qword_1004F4630;
  static Locale.current.getter((id)qword_1004F4630);
  v66 = String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, v65, v38, 0, 0, 256);
  v109 = v67;
  v110 = v66;
  v28(v16, v9);
  String.LocalizationValue.init(stringLiteral:)(0x6E4F206E727554, 0xE700000000000000);
  v22(v13, v16, v9);
  if (qword_1004B8A10 != -1)
    swift_once(&qword_1004B8A10, sub_10002B2B8);
  v68 = qword_1004F4630;
  v69 = (id)qword_1004F4630;
  v70 = v120;
  static Locale.current.getter(v69);
  v115 = String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, v68, v70, 0, 0, 256);
  v113 = v71;
  v72 = &unk_1004BDC38;
LABEL_51:
  v114 = v72;
  v28(v16, v9);
  v84 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v85 = v21;
  v86 = UUID.uuidString.getter(v84);
  v116 = v87;
  v88 = *(void (**)(char *, uint64_t))(v119 + 8);
  v89 = v21;
  v90 = v117;
  v88(v89, v117);
  String.LocalizationValue.init(stringLiteral:)(0x776F4E20746F4ELL, 0xE700000000000000);
  v22(v13, v16, v9);
  if (qword_1004B8A10 != -1)
    swift_once(&qword_1004B8A10, sub_10002B2B8);
  v91 = qword_1004F4630;
  v92 = (id)qword_1004F4630;
  v93 = v120;
  static Locale.current.getter(v92);
  v94 = String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, v91, v93, 0, 0, 256);
  v96 = v95;
  v28(v16, v9);
  v97 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v98 = UUID.uuidString.getter(v97);
  v100 = v99;
  v88(v85, v90);
  v101 = sub_1000057B4(&qword_1004BF6E0);
  result = (id)swift_allocObject(v101, 144, 7);
  *((_OWORD *)result + 1) = xmmword_1003C6BD0;
  v102 = v116;
  *((_QWORD *)result + 4) = v86;
  *((_QWORD *)result + 5) = v102;
  v103 = v113;
  *((_QWORD *)result + 6) = v115;
  *((_QWORD *)result + 7) = v103;
  *((_BYTE *)result + 64) = 2;
  *((_QWORD *)result + 9) = v114;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 11) = v98;
  *((_QWORD *)result + 12) = v100;
  *((_QWORD *)result + 13) = v94;
  *((_QWORD *)result + 14) = v96;
  *((_BYTE *)result + 120) = 0;
  *((_QWORD *)result + 16) = 0;
  *((_QWORD *)result + 17) = 0;
  v104 = v118;
  v105 = v111;
  *v118 = v112;
  v104[1] = v105;
  v106 = v109;
  v104[2] = v110;
  v104[3] = v106;
  *((_BYTE *)v104 + 32) = 0;
  v104[5] = result;
  v104[6] = 0;
  return result;
}

id sub_1000FF4E8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  id result;
  void *v19;
  int wapiCapability;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  int cellularDataCapability;
  uint64_t v25;
  unint64_t v26;
  const char *v27;
  const char *v28;
  unint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  uint64_t v33;
  id v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  id v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;

  v4 = type metadata accessor for UUID(0);
  v69 = *(_QWORD *)(v4 - 8);
  v70 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  __chkstk_darwin(v7);
  v71 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v62 - v15;
  result = (id)MobileGestalt_get_current_device(v14, v17);
  if (!result)
  {
    __break(1u);
    goto LABEL_30;
  }
  v19 = result;
  wapiCapability = MobileGestalt_get_wapiCapability();

  result = (id)MobileGestalt_get_current_device(v21, v22);
  if (!result)
  {
LABEL_30:
    __break(1u);
    return result;
  }
  v23 = result;
  cellularDataCapability = MobileGestalt_get_cellularDataCapability();

  v68 = a2;
  if (!a1)
  {
    if (wapiCapability)
    {
      if ((cellularDataCapability & 1) != 0)
        goto LABEL_10;
LABEL_20:
      v28 = "Connect to WLAN to Play Music";
      goto LABEL_21;
    }
    if ((cellularDataCapability & 1) != 0)
    {
LABEL_15:
      v26 = 0xD00000000000002ALL;
      v27 = "Connect to Wi-Fi or Cellular to Play Music";
      goto LABEL_23;
    }
LABEL_22:
    v26 = 0xD00000000000001ELL;
    v27 = "Connect to Wi-Fi to Play Music";
    goto LABEL_23;
  }
  objc_opt_self(MPModelRadioStation);
  v25 = swift_dynamicCastObjCClass(a1);
  if (!wapiCapability)
  {
    if (cellularDataCapability)
    {
      if (v25)
      {
        v26 = 0xD00000000000002ALL;
        v27 = "Connect to Wi-Fi or Cellular to Play Radio";
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v25)
    {
      v26 = 0xD00000000000001ELL;
      v27 = "Connect to Wi-Fi to Play Radio";
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (cellularDataCapability)
  {
    if (v25)
    {
      v26 = 0xD000000000000029;
      v27 = "Connect to WLAN or Cellular to Play Radio";
LABEL_23:
      v29 = (unint64_t)(v27 - 32) | 0x8000000000000000;
      goto LABEL_24;
    }
LABEL_10:
    v26 = 0xD000000000000029;
    v27 = "Connect to WLAN or Cellular to Play Music";
    goto LABEL_23;
  }
  if (!v25)
    goto LABEL_20;
  v28 = "Connect to WLAN to Play Radio";
LABEL_21:
  v29 = (unint64_t)(v28 - 32) | 0x8000000000000000;
  v26 = 0xD00000000000001DLL;
LABEL_24:
  String.LocalizationValue.init(stringLiteral:)(v26, v29);
  v30 = v10;
  v31 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v32 = v13;
  v31(v13, v16, v9);
  if (qword_1004B8A10 != -1)
    swift_once(&qword_1004B8A10, sub_10002B2B8);
  v33 = qword_1004F4630;
  v34 = (id)qword_1004F4630;
  v35 = v71;
  static Locale.current.getter(v34);
  v36 = String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, v33, v35, 0, 0, 256);
  v62 = v37;
  v63 = v36;
  v38 = *(void (**)(char *, uint64_t))(v30 + 8);
  v38(v16, v9);
  String.LocalizationValue.init(stringLiteral:)(0x73676E6974746553, 0xE800000000000000);
  v31(v13, v16, v9);
  if (qword_1004B8A10 != -1)
    swift_once(&qword_1004B8A10, sub_10002B2B8);
  v39 = qword_1004F4630;
  v40 = (id)qword_1004F4630;
  v41 = v71;
  static Locale.current.getter(v40);
  v42 = String.init(localized:table:bundle:locale:comment:)(v32, 0, 0, v39, v41, 0, 0, 256);
  v66 = v43;
  v67 = v42;
  v38(v16, v9);
  v44 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v45 = UUID.uuidString.getter(v44);
  v64 = v46;
  v65 = v45;
  v47 = v70;
  v48 = *(void (**)(char *, uint64_t))(v69 + 8);
  v48(v6, v70);
  String.LocalizationValue.init(stringLiteral:)(19279, 0xE200000000000000);
  v31(v32, v16, v9);
  v49 = qword_1004F4630;
  static Locale.current.getter((id)qword_1004F4630);
  v50 = String.init(localized:table:bundle:locale:comment:)(v32, 0, 0, v49, v41, 0, 0, 256);
  v52 = v51;
  v38(v16, v9);
  v53 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v54 = UUID.uuidString.getter(v53);
  v56 = v55;
  v48(v6, v47);
  v57 = sub_1000057B4(&qword_1004BF6E0);
  result = (id)swift_allocObject(v57, 144, 7);
  *((_OWORD *)result + 1) = xmmword_1003C6BD0;
  v58 = v64;
  *((_QWORD *)result + 4) = v65;
  *((_QWORD *)result + 5) = v58;
  v59 = v66;
  *((_QWORD *)result + 6) = v67;
  *((_QWORD *)result + 7) = v59;
  *((_BYTE *)result + 64) = 2;
  *((_QWORD *)result + 9) = &unk_1004BDC20;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 11) = v54;
  *((_QWORD *)result + 12) = v56;
  *((_QWORD *)result + 13) = v50;
  *((_QWORD *)result + 14) = v52;
  *((_BYTE *)result + 120) = 2;
  *((_QWORD *)result + 16) = 0;
  *((_QWORD *)result + 17) = 0;
  v60 = v68;
  v61 = v62;
  *v68 = v63;
  v60[1] = v61;
  v60[2] = 0;
  v60[3] = 0;
  *((_BYTE *)v60 + 32) = 0;
  v60[5] = (uint64_t)result;
  v60[6] = 0;
  return result;
}

uint64_t sub_1000FF9AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v2 = type metadata accessor for UUID(0);
  v37 = *(_QWORD *)(v2 - 8);
  v38 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Locale(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for String.LocalizationValue(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v34 - v13;
  String.LocalizationValue.init(stringLiteral:)(0xD000000000000024, 0x80000001003AAAD0);
  v15 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v15(v12, v14, v8);
  if (qword_1004B8A10 != -1)
    swift_once(&qword_1004B8A10, sub_10002B2B8);
  v16 = qword_1004F4630;
  static Locale.current.getter((id)qword_1004F4630);
  v17 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v16, v7, 0, 0, 256);
  v35 = v18;
  v36 = v17;
  v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v14, v8);
  String.LocalizationValue.init(stringLiteral:)(0xD000000000000057, 0x80000001003AAB00);
  v15(v12, v14, v8);
  v20 = qword_1004F4630;
  static Locale.current.getter((id)qword_1004F4630);
  v21 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v20, v7, 0, 0, 256);
  v23 = v22;
  v19(v14, v8);
  v24 = sub_1000057B4(&qword_1004BF6E0);
  v25 = swift_allocObject(v24, 88, 7);
  *(_OWORD *)(v25 + 16) = xmmword_1003C64D0;
  if (qword_1004B92F0 != -1)
    swift_once(&qword_1004B92F0, sub_10020C0C0);
  v26 = static String.cancelButtonTitle;
  v27 = qword_1004F5520;
  swift_bridgeObjectRetain();
  v28 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v29 = UUID.uuidString.getter(v28);
  v31 = v30;
  result = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v4, v38);
  *(_QWORD *)(v25 + 32) = v29;
  *(_QWORD *)(v25 + 40) = v31;
  *(_QWORD *)(v25 + 48) = v26;
  *(_QWORD *)(v25 + 56) = v27;
  *(_BYTE *)(v25 + 64) = 2;
  *(_QWORD *)(v25 + 72) = 0;
  *(_QWORD *)(v25 + 80) = 0;
  v33 = v35;
  *(_QWORD *)a1 = v36;
  *(_QWORD *)(a1 + 8) = v33;
  *(_QWORD *)(a1 + 16) = v21;
  *(_QWORD *)(a1 + 24) = v23;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v25;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

unint64_t sub_1000FFC88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1004BDC30;
  if (!qword_1004BDC30)
  {
    v1 = objc_opt_self(MPModelStaticAsset);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1004BDC30);
  }
  return result;
}

uint64_t sub_1000FFCC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000FFD24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_1004BDC44);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10002F6EC;
  return sub_1000F650C(v3);
}

uint64_t sub_1000FFD88()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000FFDAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_1004BDC54);
  v3 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_10002F6EC;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch(sub_1000F63D0, 0, 0);
}

uint64_t sub_1000FFE0C()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD);

  v2 = *(int **)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_1004BDC64);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10002E8E0;
  v6 = (uint64_t (*)(_QWORD))((char *)v2 + *v2);
  v4 = (_QWORD *)swift_task_alloc(v2[1]);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_10002F6EC;
  return v6(0);
}

uint64_t sub_1000FFE90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1004BDC74);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10002F6EC;
  v4[2] = v2;
  v4[3] = v3;
  return swift_task_switch(sub_1000F602C, 0, 0);
}

uint64_t sub_1000FFEF4()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000FFF20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1004BDC84);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10002F6EC;
  v4[2] = v2;
  v4[3] = v3;
  return swift_task_switch(sub_1000F6080, 0, 0);
}

uint64_t sub_1000FFF80()
{
  uint64_t v0;

  sub_10000970C((_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000FFFAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0 + 16;
  v3 = *(_QWORD *)(v0 + 56);
  v4 = (_QWORD *)swift_task_alloc(dword_1004BDC94);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10002F6EC;
  v4[3] = v2;
  v4[4] = v3;
  return swift_task_switch(sub_1000F6114, 0, 0);
}

uint64_t UInt32.formatName.getter(int a1)
{
  OSStatus Property;
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  UInt32 ioPropertyDataSize;
  uint64_t inSpecifier;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  id outPropertyData;

  inSpecifier = 0;
  v12 = 0;
  v14 = 0;
  v13 = 0;
  v15 = 0;
  v11 = a1;
  if (a1 == 1634492771)
    return 1128352833;
  outPropertyData = 0;
  ioPropertyDataSize = 8;
  Property = AudioFormatGetProperty(0x666E616Du, 0x28u, &inSpecifier, &ioPropertyDataSize, &outPropertyData);
  v3 = outPropertyData;
  if (Property != noErr.getter() && v3)
    return String.init(_:)(v3)._countAndFlagsBits;
  if (qword_1004B8C18 != -1)
    swift_once(&qword_1004B8C18, sub_10010FCD8);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100039D34(v4, (uint64_t)static Logger.audioFormat);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 67109120;
    *(_DWORD *)(v8 + 4) = Property;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "AudioFormatGetProperty kAudioFormatProperty_FormatName error: %d", (uint8_t *)v8, 8u);
    swift_slowDealloc(v8, -1, -1);
  }

  return 0;
}

_QWORD *sub_1001001C0()
{
  _QWORD *result;

  result = sub_1001001DC();
  static Datavault.music = (uint64_t)result;
  return result;
}

_QWORD *sub_1001001DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  id v18;
  NSString v19;
  id v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  _QWORD *v31;
  char *v33;
  _QWORD v34[3];

  v0 = sub_1000057B4(&qword_1004BDCE8);
  __chkstk_darwin(v0);
  v33 = (char *)&v34[-1] - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_1000057B4(&qword_1004B99B0);
  __chkstk_darwin(v2);
  v4 = (char *)&v34[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v34[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v34[-1] - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v34[-1] - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v34[-1] - v16;
  v18 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v19 = String._bridgeToObjectiveC()();
  v20 = objc_msgSend(v18, "containerURLForSecurityApplicationGroupIdentifier:", v19);

  if (!v20)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_5;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v20);

  v21 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v21(v4, v15, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_5:
    sub_10002DBF8((uint64_t)v4);
    return 0;
  }
  v22 = v6;
  v23 = v17;
  v21(v17, v4, v5);
  v24 = v12;
  URL.appendingPathComponent(_:isDirectory:)(0x6C75617661746164, 0xE900000000000074, 1);
  type metadata accessor for Datavault(0);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v12, v5);
  v31 = Datavault.__allocating_init(url:storageClass:)((uint64_t)v9, 0x707041636973754DLL, 0xE800000000000000);
  if (qword_1004B8BF0 != -1)
    swift_once(&qword_1004B8BF0, sub_100100A58);
  v25 = type metadata accessor for Logger(0);
  v26 = sub_100039D34(v25, (uint64_t)qword_1004BDCD0);
  v27 = *(_QWORD *)(v25 - 8);
  v28 = (uint64_t)v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v33, v26, v25);
  v29 = *(void (**)(char *, uint64_t))(v22 + 8);
  v29(v24, v5);
  v29(v23, v5);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v27 + 56))(v28, 0, 1, v25);
  v30 = (uint64_t)v31 + OBJC_IVAR____TtC14MusicUtilities9Datavault_logger;
  swift_beginAccess((char *)v31 + OBJC_IVAR____TtC14MusicUtilities9Datavault_logger, v34, 33, 0);
  sub_100100AD0(v28, v30);
  swift_endAccess(v34);
  return v31;
}

uint64_t *Datavault.music.unsafeMutableAddressor()
{
  if (qword_1004B8BE8 != -1)
    swift_once(&qword_1004B8BE8, sub_1001001C0);
  return &static Datavault.music;
}

double static Datavault.music.getter()
{
  double result;
  _BYTE v1[24];

  if (qword_1004B8BE8 != -1)
    swift_once(&qword_1004B8BE8, sub_1001001C0);
  swift_beginAccess(&static Datavault.music, v1, 0, 0);
  *(_QWORD *)&result = swift_retain(static Datavault.music).n128_u64[0];
  return result;
}

double static Datavault.music.setter(uint64_t a1)
{
  uint64_t v2;
  double result;
  _BYTE v4[24];

  if (qword_1004B8BE8 != -1)
    swift_once(&qword_1004B8BE8, sub_1001001C0);
  swift_beginAccess(&static Datavault.music, v4, 1, 0);
  v2 = static Datavault.music;
  static Datavault.music = a1;
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

uint64_t (*static Datavault.music.modify(uint64_t a1))(_QWORD)
{
  if (qword_1004B8BE8 != -1)
    swift_once(&qword_1004B8BE8, sub_1001001C0);
  swift_beginAccess(&static Datavault.music, a1, 33, 0);
  return j__swift_endAccess;
}

unint64_t sub_100100A1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1004BE0B0;
  if (!qword_1004BE0B0)
  {
    v1 = objc_opt_self(NSError);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1004BE0B0);
  }
  return result;
}

uint64_t sub_100100A58()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10004FD4C(v0, qword_1004BDCD0);
  sub_100039D34(v0, (uint64_t)qword_1004BDCD0);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001003A7200, 0x6C75617661746144, 0xE900000000000074);
}

uint64_t sub_100100AD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000057B4(&qword_1004BDCE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t NSDateComponents.lastUpdatedDateString.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v1 = sub_1000057B4(&qword_1004BCBD0);
  __chkstk_darwin(v1);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v21 - v9;
  v11 = type metadata accessor for DateComponents(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v0);
  v16 = static Date.now.getter(v15);
  DateComponents.date.getter(v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_100100E44((uint64_t)v3);
    v17 = 0;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v3, v4);
    Date.lastUpdatedDateString(relativeTo:)();
    v17 = v18;
    v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v8, v4);
    v19(v10, v4);
  }
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return v17;
}

uint64_t DateComponents.lastUpdatedDateString(relativeTo:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v0 = sub_1000057B4(&qword_1004BCBD0);
  __chkstk_darwin(v0);
  v2 = (char *)&v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  DateComponents.date.getter(v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_100100E44((uint64_t)v2);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v2, v3);
    Date.lastUpdatedDateString(relativeTo:)();
    v8 = v9;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  return v8;
}

uint64_t sub_100100E44(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000057B4(&qword_1004BCBD0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t DateComponents.lastUpdatedDateString.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v16;

  v0 = sub_1000057B4(&qword_1004BCBD0);
  __chkstk_darwin(v0);
  v2 = (char *)&v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v16 - v9;
  v11 = static Date.now.getter(v8);
  DateComponents.date.getter(v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_100100E44((uint64_t)v2);
    v12 = 0;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v3);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v2, v3);
    Date.lastUpdatedDateString(relativeTo:)();
    v12 = v13;
    v14 = *(void (**)(char *, uint64_t))(v4 + 8);
    v14(v7, v3);
    v14(v10, v3);
  }
  return v12;
}

void Date.lastUpdatedDateString(relativeTo:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  double v14;
  double v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  Swift::String v22;
  unint64_t v23;
  double v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;

  v1 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for String.LocalizationValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v31 - v12;
  v14 = Date.timeIntervalSince(_:)(v0);
  if (v14 <= 0.0)
    return;
  if (v14 < 3600.0)
  {
    v15 = v14 / 60.0;
    if ((~*(_QWORD *)&v15 & 0x7FF0000000000000) != 0)
    {
      if (v15 > -9.22337204e18)
      {
        if (v15 < 9.22337204e18)
        {
          v16 = (uint64_t)v15;
          if (!(uint64_t)v15)
          {
            String.LocalizationValue.init(stringLiteral:)(0x647055207473754ALL, 0xEC00000064657461);
            goto LABEL_21;
          }
          String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(13, 1);
          v17._countAndFlagsBits = 0x2064657461647055;
          v17._object = (void *)0xE800000000000000;
          String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v17);
          v32 = v16;
          String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v32, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
          v18 = 9;
          goto LABEL_8;
        }
        goto LABEL_34;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v14 >= 86400.0)
  {
    if (v14 >= 604800.0)
    {
      if (v14 >= 2592000.0)
        return;
      v28 = v14 / 604800.0;
      if ((~*(_QWORD *)&v28 & 0x7FF0000000000000) != 0)
      {
        if (v28 > -9.22337204e18)
        {
          if (v28 < 9.22337204e18)
          {
            v29 = (uint64_t)v28;
            String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(13, 1);
            v30._countAndFlagsBits = 0x2064657461647055;
            v30._object = (void *)0xE800000000000000;
            String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v30);
            v32 = v29;
            String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v32, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
            v18 = 19;
LABEL_8:
            v19 = v18 | 0x6F67612064;
LABEL_19:
            v23 = 0xE500000000000000;
            goto LABEL_20;
          }
LABEL_43:
          __break(1u);
          return;
        }
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    v24 = v14 / 86400.0;
    if ((~*(_QWORD *)&v24 & 0x7FF0000000000000) != 0)
    {
      if (v24 > -9.22337204e18)
      {
        if (v24 < 9.22337204e18)
        {
          v25 = (uint64_t)v24;
          String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(13, 1);
          v26._countAndFlagsBits = 0x2064657461647055;
          v26._object = (void *)0xE800000000000000;
          String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v26);
          v32 = v25;
          String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v32, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
          v19 = 0x6F67612064;
          goto LABEL_19;
        }
        goto LABEL_40;
      }
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v20 = v14 / 3600.0;
  if ((~*(_QWORD *)&v20 & 0x7FF0000000000000) == 0)
    goto LABEL_35;
  if (v20 <= -9.22337204e18)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v20 >= 9.22337204e18)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v21 = (uint64_t)v20;
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(14, 1);
  v22._countAndFlagsBits = 0x2064657461647055;
  v22._object = (void *)0xE800000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v22);
  v32 = v21;
  String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v32, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
  v19 = 0x6F6761207268;
  v23 = 0xE600000000000000;
LABEL_20:
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&v19);
  String.LocalizationValue.init(stringInterpolation:)(v3);
LABEL_21:
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  if (qword_1004B8A10 != -1)
    swift_once(&qword_1004B8A10, sub_10002B2B8);
  v27 = qword_1004F4630;
  static Locale.current.getter((id)qword_1004F4630);
  String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v27, v6, 0, 0, 256);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
}

uint64_t Date.lastUpdatedDateString.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v0 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date.now.getter(v2);
  Date.lastUpdatedDateString(relativeTo:)();
  v6 = v5;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return v6;
}

uint64_t static String.stringForTrackCountAndDuration(trackCount:duration:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  double v27;
  void (*v28)(char *, _QWORD, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;
  Swift::String v60;
  char *v61;
  uint64_t v62;
  Swift::String v63;
  Swift::String v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  id v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  _QWORD v80[2];
  _QWORD v81[2];
  _QWORD v82[3];

  v78 = a1;
  v7 = type metadata accessor for Locale(0);
  __chkstk_darwin(v7);
  v75 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  v76 = *(_QWORD *)(v9 - 8);
  v77 = v9;
  v10 = __chkstk_darwin(v9);
  v74 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v79 = (char *)&v71 - v12;
  v13 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Calendar.Component(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Calendar(0);
  v21 = __chkstk_darwin(v20);
  v24 = (char *)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = 0;
  v26 = 0;
  if ((a4 & 1) != 0)
  {
LABEL_32:
    if ((a2 & 1) != 0)
      goto LABEL_41;
    goto LABEL_33;
  }
  v27 = *(double *)&a3;
  if (*(double *)&a3 <= 0.0)
  {
    v25 = 0;
    v26 = 0;
    goto LABEL_32;
  }
  v72 = v22;
  v73 = v21;
  static Calendar.current.getter(v21);
  v28 = *(void (**)(char *, _QWORD, uint64_t))(v17 + 104);
  v28(v19, enum case for Calendar.Component.second(_:), v16);
  Calendar.maximumRange(of:)(v19);
  v30 = v29;
  v32 = v31;
  v33 = *(void (**)(char *, uint64_t))(v17 + 8);
  v33(v19, v16);
  if ((v32 & 1) != 0)
    goto LABEL_28;
  v28(v19, enum case for Calendar.Component.minute(_:), v16);
  Calendar.maximumRange(of:)(v19);
  v35 = v34;
  v37 = v36;
  result = ((uint64_t (*)(char *, uint64_t))v33)(v19, v16);
  if ((v37 & 1) != 0)
    goto LABEL_28;
  v39 = v30 * v35;
  if ((unsigned __int128)(v30 * (__int128)v35) >> 64 != (v30 * v35) >> 63)
  {
    __break(1u);
    goto LABEL_45;
  }
  if ((~a3 & 0x7FF0000000000000) == 0)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (*(double *)&a3 <= -9.22337204e18)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (*(double *)&a3 >= 9.22337204e18)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (!v39)
  {
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v40 = (uint64_t)*(double *)&a3;
  if ((uint64_t)*(double *)&a3 == 0x8000000000000000 && v39 == -1)
    goto LABEL_55;
  v41 = v40 / v39 * v39;
  if ((unsigned __int128)(v40 / v39 * (__int128)v39) >> 64 != v41 >> 63)
    goto LABEL_49;
  v42 = v40 % v39;
  if (__OFSUB__(v40, v41))
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (!v30)
  {
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v42 == 0x8000000000000000 && v30 == -1)
    goto LABEL_56;
  v44 = v42 / v30;
  v45 = v42 / v30 * v30;
  if ((unsigned __int128)(v44 * (__int128)v30) >> 64 != v45 >> 63)
    goto LABEL_52;
  v46 = __OFADD__(v41, v45);
  v47 = v41 + v45;
  if (v46)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  v46 = __OFSUB__(v40, v47);
  v48 = v40 - v47;
  if (v46)
  {
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  if (v30 >= 0)
    v49 = v30;
  else
    v49 = v30 + 1;
  if (v48 < v49 >> 1)
  {
LABEL_28:
    v51 = objc_msgSend((id)*NSDateFormatter.collectionsDurationFormatter.unsafeMutableAddressor(), "stringFromTimeInterval:", v27);
    v26 = v51;
    if (v51)
    {
      v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
      v54 = v53;

      v82[0] = v52;
      v82[1] = v54;
      v81[0] = 44;
      v81[1] = 0xE100000000000000;
      v80[0] = 0;
      v80[1] = 0xE000000000000000;
      v55 = sub_10002D3FC();
      v25 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v81, v80, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v55, v55, v55);
      v26 = v56;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v72 + 8))(v24, v73);
      if ((a2 & 1) != 0)
      {
LABEL_41:
        if (v26)
          return v25;
        return 0;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v72 + 8))(v24, v73);
      v25 = 0;
      if ((a2 & 1) != 0)
        goto LABEL_41;
    }
LABEL_33:
    if (v26)
    {
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(10, 2);
      v57._countAndFlagsBits = 0;
      v57._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v57);
      v82[0] = v78;
      String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(v82, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
      v58._countAndFlagsBits = 0x297328676E6F7320;
      v58._object = (void *)0xEA0000000000202CLL;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v58);
      v59._countAndFlagsBits = v25;
      v59._object = v26;
      String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v59);
      swift_bridgeObjectRelease();
      v60._countAndFlagsBits = 0;
      v60._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v60);
      v61 = v79;
    }
    else
    {
      v62 = v78;
      v61 = v79;
      if (v78 < 1)
        return 0;
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(8, 1);
      v63._countAndFlagsBits = 0;
      v63._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v63);
      v82[0] = v62;
      String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(v82, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
      v64._countAndFlagsBits = 0x297328676E6F7320;
      v64._object = (void *)0xE800000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v64);
    }
    String.LocalizationValue.init(stringInterpolation:)(v15);
    v66 = v76;
    v65 = v77;
    v67 = v74;
    (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v74, v61, v77);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v68 = qword_1004F4630;
    v69 = (id)qword_1004F4630;
    v70 = v75;
    static Locale.current.getter(v69);
    v25 = String.init(localized:table:bundle:locale:comment:)(v67, 0, 0, v68, v70, 0, 0, 256);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v61, v65);
    return v25;
  }
  v46 = __OFSUB__(v30, v48);
  v50 = v30 - v48;
  if (!v46)
  {
    v27 = *(double *)&a3 + (double)v50;
    goto LABEL_28;
  }
LABEL_57:
  __break(1u);
  return result;
}

uint64_t NSFileManager.musicAppGroupCachesURL.getter@<X0>(uint64_t a1@<X8>)
{
  return NSFileManager.groupCacheURL(for:)(a1);
}

Swift::Void __swiftcall LSApplicationWorkspace.openSettings()()
{
  sub_100101BA0(0x3A7366657270, 0xE600000000000000);
}

Swift::Void __swiftcall LSApplicationWorkspace.openRestrictions()()
{
  sub_100101BA0(0xD00000000000002BLL, 0x80000001003AB6E0);
}

uint64_t sub_100101BA0(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  NSURL *v14;
  void *v15;
  void *v16;
  Class isa;
  uint64_t v18;

  v5 = v2;
  v6 = sub_1000057B4(&qword_1004B99B0);
  __chkstk_darwin(v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.init(string:)(a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_10000FE2C((uint64_t)v8, &qword_1004B99B0);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
  URL._bridgeToObjectiveC()(v14);
  v16 = v15;
  sub_1000B8CE8((uint64_t)_swiftEmptyArrayStorage);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v5, "openSensitiveURL:withOptions:", v16, isa);

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

Swift::Void __swiftcall LSApplicationWorkspace.openAudioQuality()()
{
  sub_100101BA0(0xD000000000000032, 0x80000001003AB710);
}

Swift::Void __swiftcall LSApplicationWorkspace.openAtmos()()
{
  sub_100101BA0(0xD00000000000002BLL, 0x80000001003AB750);
}

Swift::Void __swiftcall LSApplicationWorkspace.openMusicSettings()()
{
  sub_100101BA0(0xD000000000000025, 0x80000001003AB780);
}

Swift::Void __swiftcall LSApplicationWorkspace.openAccountSettings()()
{
  sub_100101BA0(0xD000000000000018, 0x80000001003AB7B0);
}

Swift::Bool __swiftcall LSApplicationWorkspace.openNotificationSettings()()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unsigned __int8 v9;
  NSURL *v10;
  void *v11;
  void *v12;
  Class isa;
  uint64_t v15;

  v1 = v0;
  v2 = sub_1000057B4(&qword_1004B99B0);
  __chkstk_darwin(v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.init(string:)(0xD000000000000030, 0x80000001003AB7D0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_10000FE2C((uint64_t)v4, &qword_1004B99B0);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    URL._bridgeToObjectiveC()(v10);
    v12 = v11;
    sub_1000B8CE8((uint64_t)_swiftEmptyArrayStorage);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v9 = objc_msgSend(v1, "openSensitiveURL:withOptions:", v12, isa);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return v9;
}

Swift::Void __swiftcall LSApplicationWorkspace.openMusicHapticsSettings()()
{
  sub_100101BA0(0xD00000000000002ALL, 0x80000001003AB810);
}

uint64_t LSApplicationWorkspace.openiTunesStore(with:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t, uint64_t);
  id v24;
  id v25;
  void *v26;
  NSString v27;
  id v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  NSURL *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  Class isa;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  id v54;
  uint64_t v55;
  char *v56;
  id v57;
  char *v58;
  char *v59;
  uint64_t v60;
  id v61;
  _QWORD *v62;

  v4 = type metadata accessor for URLComponents(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v58 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000057B4(&qword_1004B99B0);
  v8 = __chkstk_darwin(v7);
  v59 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v52 - v10;
  v12 = type metadata accessor for URL(0);
  v60 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v56 = (char *)&v52 - v16;
  v17 = sub_1000057B4(&qword_1004BD760);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v52 - v21;
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v24 = (id)v23((char *)&v52 - v21, 1, 1, v4);
  if (a1)
  {
    v24 = objc_msgSend(a1, "universalStore");
    if (v24)
    {
      v25 = v24;
      v55 = a2;
      v53 = objc_msgSend(v24, "adamID");
      swift_unknownObjectRelease(v25);
      if (qword_1004B8BC0 != -1)
        swift_once(&qword_1004B8BC0, sub_1000E30D8);
      sub_1000057B4(&qword_1004BD040);
      UnfairLock.locked<A>(_:)((void (*)(void))sub_10002D3E4);
      v26 = v62;
      a2 = v55;
      if (v62)
      {
        v27 = String._bridgeToObjectiveC()();
        v54 = v26;
        v28 = objc_msgSend(v26, "urlForBagKey:", v27);

        if (v28)
        {
          static URL._unconditionallyBridgeFromObjectiveC(_:)(v28);

          v29 = v60;
          v30 = *(void (**)(char *, char *, uint64_t))(v60 + 32);
          v30(v11, v15, v12);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v11, 0, 1, v12);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v11, 1, v12) != 1)
          {
            v31 = v56;
            v30(v56, v11, v12);
            URLComponents.init(url:resolvingAgainstBaseURL:)(v31, 0);
            sub_1001025B4((uint64_t)v20, (uint64_t)v22);
            v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
            v33 = v32(v22, 1, v4);
            if ((_DWORD)v33 || (v34 = (_QWORD *)URLComponents.queryItems.getter(v33)) == 0)
            {
              swift_bridgeObjectRelease();
              v34 = _swiftEmptyArrayStorage;
            }
            v37 = v60;
            v62 = v34;
            v47 = sub_1000057B4(&qword_1004BACD0);
            v48 = type metadata accessor for URLQueryItem(0);
            v49 = swift_allocObject(v47, ((*(unsigned __int8 *)(*(_QWORD *)(v48 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v48 - 8) + 80))+ 2 * *(_QWORD *)(*(_QWORD *)(v48 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v48 - 8) + 80) | 7);
            *(_OWORD *)(v49 + 16) = xmmword_1003C6BD0;
            v61 = v53;
            v50 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
            URLQueryItem.init(name:value:)(25705, 0xE200000000000000, v50, v51);
            swift_bridgeObjectRelease();
            URLQueryItem.init(name:value:)(7368801, 0xE300000000000000, 0x73656E757469, 0xE600000000000000);
            sub_1000AA844(v49);
            if (v32(v22, 1, v4))
            {

              swift_bridgeObjectRelease();
            }
            else
            {
              URLComponents.queryItems.setter(v62);

            }
            a2 = v55;
            v36 = (uint64_t)v59;
            (*(void (**)(char *, uint64_t))(v37 + 8))(v56, v12);
            goto LABEL_16;
          }
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v60 + 56))(v11, 1, 1, v12);
        }

        v24 = (id)sub_10000FE2C((uint64_t)v11, &qword_1004B99B0);
        a2 = v55;
      }
    }
  }
  URLComponents.init()(v24);
  v23(v20, 0, 1, v4);
  sub_1001025B4((uint64_t)v20, (uint64_t)v22);
  v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (!v32(v22, 1, v4))
    URLComponents.scheme.setter(0x73736D7469, 0xE500000000000000);
  v35 = v32(v22, 1, v4);
  v36 = (uint64_t)v59;
  v37 = v60;
  if (!v35)
    URLComponents.host.setter(0, 0xE000000000000000);
LABEL_16:
  if (v32(v22, 1, v4))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56))(v36, 1, 1, v12);
  }
  else
  {
    v38 = v58;
    v39 = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 16))(v58, v22, v4);
    URLComponents.url.getter(v39);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v38, v4);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v36, 1, v12) != 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(a2, v36, v12);
      URL._bridgeToObjectiveC()(v42);
      v44 = v43;
      sub_1000B8CE8((uint64_t)_swiftEmptyArrayStorage);
      v45 = a2;
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v57, "openSensitiveURL:withOptions:", v44, isa);

      a2 = v45;
      v40 = 0;
      goto LABEL_20;
    }
  }
  sub_10000FE2C(v36, &qword_1004B99B0);
  v40 = 1;
LABEL_20:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56))(a2, v40, 1, v12);
  return sub_10000FE2C((uint64_t)v22, &qword_1004BD760);
}

uint64_t sub_1001025B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000057B4(&qword_1004BD760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t LSApplicationWorkspace.openiTunesStore(with:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  NSString v26;
  id v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  NSURL *v46;
  void *v47;
  void *v48;
  Class isa;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;

  v57 = a1;
  v1 = type metadata accessor for URLComponents(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v55 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000057B4(&qword_1004B99B0);
  v5 = __chkstk_darwin(v4);
  v56 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v50 - v7;
  v9 = type metadata accessor for URL(0);
  v59 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v54 = (char *)&v50 - v13;
  v14 = sub_1000057B4(&qword_1004BD760);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v50 - v18;
  v58 = v2;
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
  v21 = v20((char *)&v50 - v18, 1, 1, v1);
  v22 = Album.catalogID.getter(v21);
  if (v23)
  {
    v24 = v23;
    v51 = v22;
    if (qword_1004B8BC0 != -1)
      swift_once(&qword_1004B8BC0, sub_1000E30D8);
    sub_1000057B4(&qword_1004BD040);
    UnfairLock.locked<A>(_:)((void (*)(void))sub_10002D3E4);
    v25 = v60;
    if (v60)
    {
      v26 = String._bridgeToObjectiveC()();
      v52 = v25;
      v27 = objc_msgSend(v25, "urlForBagKey:", v26);

      if (v27)
      {
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v27);

        v28 = v59;
        v29 = *(void (**)(char *, char *, uint64_t))(v59 + 32);
        v29(v8, v12, v9);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v8, 0, 1, v9);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v8, 1, v9) != 1)
        {
          v30 = v54;
          v29(v54, v8, v9);
          URLComponents.init(url:resolvingAgainstBaseURL:)(v30, 0);
          sub_1001025B4((uint64_t)v17, (uint64_t)v19);
          v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 48);
          v32 = v31(v19, 1, v1);
          if ((_DWORD)v32 || (v33 = (_QWORD *)URLComponents.queryItems.getter(v32)) == 0)
          {
            swift_bridgeObjectRelease();
            v33 = _swiftEmptyArrayStorage;
          }
          v37 = (uint64_t)v56;
          v36 = v57;
          v60 = v33;
          v39 = sub_1000057B4(&qword_1004BACD0);
          v40 = type metadata accessor for URLQueryItem(0);
          v41 = swift_allocObject(v39, ((*(unsigned __int8 *)(*(_QWORD *)(v40 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v40 - 8) + 80))+ 2 * *(_QWORD *)(*(_QWORD *)(v40 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v40 - 8) + 80) | 7);
          *(_OWORD *)(v41 + 16) = xmmword_1003C6BD0;
          URLQueryItem.init(name:value:)(25705, 0xE200000000000000, v51, v24);
          swift_bridgeObjectRelease();
          URLQueryItem.init(name:value:)(7368801, 0xE300000000000000, 0x73656E757469, 0xE600000000000000);
          sub_1000AA844(v41);
          if (v31(v19, 1, v1))
          {

            swift_bridgeObjectRelease();
          }
          else
          {
            URLComponents.queryItems.setter(v60);

          }
          v38 = v59;
          (*(void (**)(char *, uint64_t))(v59 + 8))(v54, v9);
          v34 = v58;
          goto LABEL_21;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v59 + 56))(v8, 1, 1, v9);
      }

      swift_bridgeObjectRelease();
      v22 = sub_10000FE2C((uint64_t)v8, &qword_1004B99B0);
    }
    else
    {
      v22 = swift_bridgeObjectRelease();
    }
  }
  URLComponents.init()(v22);
  v20(v17, 0, 1, v1);
  sub_1001025B4((uint64_t)v17, (uint64_t)v19);
  v34 = v58;
  v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 48);
  if (!v31(v19, 1, v1))
    URLComponents.scheme.setter(0x73736D7469, 0xE500000000000000);
  v35 = v31(v19, 1, v1);
  v37 = (uint64_t)v56;
  v36 = v57;
  v38 = v59;
  if (!v35)
    URLComponents.host.setter(0, 0xE000000000000000);
LABEL_21:
  if (v31(v19, 1, v1))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56))(v37, 1, 1, v9);
  }
  else
  {
    v42 = v55;
    v43 = (*(uint64_t (**)(char *, char *, uint64_t))(v34 + 16))(v55, v19, v1);
    URLComponents.url.getter(v43);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v42, v1);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v37, 1, v9) != 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v36, v37, v9);
      URL._bridgeToObjectiveC()(v46);
      v48 = v47;
      sub_1000B8CE8((uint64_t)_swiftEmptyArrayStorage);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v53, "openSensitiveURL:withOptions:", v48, isa);

      v44 = 0;
      goto LABEL_25;
    }
  }
  sub_10000FE2C(v37, &qword_1004B99B0);
  v44 = 1;
LABEL_25:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56))(v36, v44, 1, v9);
  return sub_10000FE2C((uint64_t)v19, &qword_1004BD760);
}

Swift::Void __swiftcall LSApplicationWorkspace.openMusic(tabIdentifier:)(MusicCore::TabIdentifier_optional tabIdentifier)
{
  void *v1;
  void *v2;
  int value;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  NSURL *v12;
  void *v13;
  void *v14;
  Class isa;
  _QWORD v16[4];

  v2 = v1;
  value = tabIdentifier.value;
  v5 = sub_1000057B4(&qword_1004B99B0);
  __chkstk_darwin(v5);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[2] = 0x2F2F3A636973756DLL;
  v16[3] = 0xE800000000000000;
  if (value != 6)
  {
    v16[0] = 0x6261743F2F626174;
    v16[1] = 0xE90000000000003DLL;
    __asm { BR              X11 }
  }
  URL.init(string:)(0x2F2F3A636973756DLL, 0xE800000000000000);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_10000FE2C((uint64_t)v7, &qword_1004B99B0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    URL._bridgeToObjectiveC()(v12);
    v14 = v13;
    sub_1000B8CE8((uint64_t)_swiftEmptyArrayStorage);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v2, "openSensitiveURL:withOptions:", v14, isa);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

id static MPModelPlaylistEntry.defaultMusicKind.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  id v7;
  char v8;
  uint64_t v9;
  void *v10;
  id v11;
  Class isa;
  id v13;
  char v15[16];
  __int128 v16;
  uint64_t v17;

  v0 = sub_1000057B4((uint64_t *)&unk_1004BDDB0);
  v1 = swift_allocObject(v0, 56, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1003C6CF0;
  *(_QWORD *)(v1 + 32) = objc_msgSend((id)objc_opt_self(MPModelSong), "kindWithVariants:", 7);
  v2 = (void *)objc_opt_self(NSUserDefaults);
  v3 = objc_msgSend(v2, "standardUserDefaults");
  strcpy(v15, "showAllTVShows");
  v15[15] = -18;
  v4 = sub_10002D3FC();
  NSUserDefaults.subscript.getter((uint64_t)v15, (uint64_t)&type metadata for String, v4, &v16);
  if (!v17)
  {
    sub_1000B8AE4((uint64_t)&v16);
    goto LABEL_6;
  }
  if ((swift_dynamicCast(v15, &v16, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) == 0)
  {
LABEL_6:

    goto LABEL_7;
  }
  v5 = v15[0];

  if ((v5 & 1) != 0)
  {
    v6 = 3;
    goto LABEL_8;
  }
LABEL_7:
  v6 = 2;
LABEL_8:
  *(_QWORD *)(v1 + 40) = objc_msgSend((id)objc_opt_self(MPModelTVEpisode), "kindWithVariants:", v6);
  v7 = objc_msgSend(v2, "standardUserDefaults");
  strcpy(v15, "showAllTVShows");
  v15[15] = -18;
  NSUserDefaults.subscript.getter((uint64_t)v15, (uint64_t)&type metadata for String, v4, &v16);
  if (!v17)
  {
    sub_1000B8AE4((uint64_t)&v16);
    goto LABEL_13;
  }
  if ((swift_dynamicCast(v15, &v16, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) == 0)
  {
LABEL_13:

    goto LABEL_14;
  }
  v8 = v15[0];

  if ((v8 & 1) == 0)
  {
LABEL_14:
    v9 = 2;
    goto LABEL_15;
  }
  v9 = 3;
LABEL_15:
  v10 = (void *)objc_opt_self(MPModelPlaylistEntry);
  v11 = objc_msgSend((id)objc_opt_self(MPModelMovie), "kindWithVariants:", v9);
  *(_QWORD *)(v1 + 48) = v11;
  *(_QWORD *)&v16 = v1;
  specialized Array._endMutation()(v11);
  sub_1000057B4((uint64_t *)&unk_1004BD730);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v13 = objc_msgSend(v10, "kindWithKinds:", isa);

  return v13;
}

void *MPModelObject.isCloudLibraryRequired.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *result;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_opt_self(MPModelSong);
  result = (void *)swift_dynamicCastObjCClass(v0, v1);
  if (result)
    return (void *)(objc_msgSend(result, "isLibraryAdded") ^ 1);
  v3 = objc_opt_self(MPModelAlbum);
  result = (void *)swift_dynamicCastObjCClass(v0, v3);
  if (result)
    return (void *)(objc_msgSend(result, "isLibraryAdded") ^ 1);
  v4 = objc_opt_self(MPModelPlaylist);
  result = (void *)swift_dynamicCastObjCClass(v0, v4);
  if (result)
    return (void *)(objc_msgSend(result, "isLibraryAdded") ^ 1);
  return result;
}

id static MPModelPlaylist.defaultMusicKind.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  id v7;
  char v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  Class isa;
  id v14;
  id v15;
  char v17[16];
  __int128 v18;
  uint64_t v19;

  v0 = sub_1000057B4((uint64_t *)&unk_1004BDDB0);
  v1 = swift_allocObject(v0, 56, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1003C6CF0;
  *(_QWORD *)(v1 + 32) = objc_msgSend((id)objc_opt_self(MPModelSong), "kindWithVariants:", 7);
  v2 = (void *)objc_opt_self(NSUserDefaults);
  v3 = objc_msgSend(v2, "standardUserDefaults");
  strcpy(v17, "showAllTVShows");
  v17[15] = -18;
  v4 = sub_10002D3FC();
  NSUserDefaults.subscript.getter((uint64_t)v17, (uint64_t)&type metadata for String, v4, &v18);
  if (!v19)
  {
    sub_1000B8AE4((uint64_t)&v18);
    goto LABEL_6;
  }
  if ((swift_dynamicCast(v17, &v18, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) == 0)
  {
LABEL_6:

    goto LABEL_7;
  }
  v5 = v17[0];

  if ((v5 & 1) != 0)
  {
    v6 = 3;
    goto LABEL_8;
  }
LABEL_7:
  v6 = 2;
LABEL_8:
  *(_QWORD *)(v1 + 40) = objc_msgSend((id)objc_opt_self(MPModelTVEpisode), "kindWithVariants:", v6);
  v7 = objc_msgSend(v2, "standardUserDefaults");
  strcpy(v17, "showAllTVShows");
  v17[15] = -18;
  NSUserDefaults.subscript.getter((uint64_t)v17, (uint64_t)&type metadata for String, v4, &v18);
  if (!v19)
  {
    sub_1000B8AE4((uint64_t)&v18);
    goto LABEL_13;
  }
  if ((swift_dynamicCast(v17, &v18, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) == 0)
  {
LABEL_13:

    goto LABEL_14;
  }
  v8 = v17[0];

  if ((v8 & 1) == 0)
  {
LABEL_14:
    v9 = 2;
    goto LABEL_15;
  }
  v9 = 3;
LABEL_15:
  v10 = (void *)objc_opt_self(MPModelPlaylist);
  v11 = (void *)objc_opt_self(MPModelPlaylistEntry);
  v12 = objc_msgSend((id)objc_opt_self(MPModelMovie), "kindWithVariants:", v9);
  *(_QWORD *)(v1 + 48) = v12;
  *(_QWORD *)&v18 = v1;
  specialized Array._endMutation()(v12);
  sub_1000057B4((uint64_t *)&unk_1004BD730);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v11, "kindWithKinds:", isa);

  v15 = objc_msgSend(v10, "kindWithPlaylistEntryKind:options:", v14, 0);
  return v15;
}

id static MPModelTVEpisode.defaultMusicKind.getter()
{
  return sub_1001034A0(MPModelTVEpisode_ptr);
}

id static MPModelMovie.defaultMusicKind.getter()
{
  return sub_1001034A0(MPModelMovie_ptr);
}

id sub_1001034A0(_QWORD *a1)
{
  id v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  char v7[16];
  __int128 v8;
  uint64_t v9;

  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  strcpy(v7, "showAllTVShows");
  v7[15] = -18;
  v3 = sub_10002D3FC();
  NSUserDefaults.subscript.getter((uint64_t)v7, (uint64_t)&type metadata for String, v3, &v8);
  if (!v9)
  {
    sub_1000B8AE4((uint64_t)&v8);
    goto LABEL_6;
  }
  if ((swift_dynamicCast(v7, &v8, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) == 0)
  {
LABEL_6:

    goto LABEL_7;
  }
  v4 = v7[0];

  if ((v4 & 1) == 0)
  {
LABEL_7:
    v5 = 2;
    return objc_msgSend((id)objc_opt_self(*a1), "kindWithVariants:", v5);
  }
  v5 = 3;
  return objc_msgSend((id)objc_opt_self(*a1), "kindWithVariants:", v5);
}

id static MPModelArtist.defaultMusicKind.getter()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  id v4;

  v0 = (void *)objc_opt_self(MPModelArtist);
  v1 = (void *)objc_opt_self(MPModelAlbum);
  v2 = objc_msgSend((id)objc_opt_self(MPModelSong), "kindWithVariants:", 3);
  v3 = objc_msgSend(v1, "kindWithSongKind:", v2);

  v4 = objc_msgSend(v0, "kindWithAlbumKind:", v3);
  return v4;
}

id static MPModelAlbum.defaultMusicKind.getter()
{
  void *v0;
  id v1;
  id v2;

  v0 = (void *)objc_opt_self(MPModelAlbum);
  v1 = objc_msgSend((id)objc_opt_self(MPModelSong), "kindWithVariants:", 3);
  v2 = objc_msgSend(v0, "kindWithSongKind:", v1);

  return v2;
}

id static MPModelTVShow.defaultMusicKind.getter()
{
  id v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  char v10[16];
  __int128 v11;
  uint64_t v12;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  strcpy(v10, "showAllTVShows");
  v10[15] = -18;
  v1 = sub_10002D3FC();
  NSUserDefaults.subscript.getter((uint64_t)v10, (uint64_t)&type metadata for String, v1, &v11);
  if (!v12)
  {
    sub_1000B8AE4((uint64_t)&v11);
    goto LABEL_6;
  }
  if ((swift_dynamicCast(v10, &v11, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) == 0)
  {
LABEL_6:

    goto LABEL_7;
  }
  v2 = v10[0];

  if ((v2 & 1) == 0)
  {
LABEL_7:
    v3 = 2;
    goto LABEL_8;
  }
  v3 = 3;
LABEL_8:
  v4 = (void *)objc_opt_self(MPModelTVShow);
  v5 = (void *)objc_opt_self(MPModelTVSeason);
  v6 = objc_msgSend((id)objc_opt_self(MPModelTVEpisode), "kindWithVariants:", v3);
  v7 = objc_msgSend(v5, "kindWithEpisodeKind:", v6);

  v8 = objc_msgSend(v4, "kindWithSeasonKind:", v7);
  return v8;
}

id static MPModelTVSeason.defaultMusicKind.getter()
{
  id v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  char v8[16];
  __int128 v9;
  uint64_t v10;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  strcpy(v8, "showAllTVShows");
  v8[15] = -18;
  v1 = sub_10002D3FC();
  NSUserDefaults.subscript.getter((uint64_t)v8, (uint64_t)&type metadata for String, v1, &v9);
  if (!v10)
  {
    sub_1000B8AE4((uint64_t)&v9);
    goto LABEL_6;
  }
  if ((swift_dynamicCast(v8, &v9, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) == 0)
  {
LABEL_6:

    goto LABEL_7;
  }
  v2 = v8[0];

  if ((v2 & 1) == 0)
  {
LABEL_7:
    v3 = 2;
    goto LABEL_8;
  }
  v3 = 3;
LABEL_8:
  v4 = (void *)objc_opt_self(MPModelTVSeason);
  v5 = objc_msgSend((id)objc_opt_self(MPModelTVEpisode), "kindWithVariants:", v3);
  v6 = objc_msgSend(v4, "kindWithEpisodeKind:", v5);

  return v6;
}

id MPModelObject.innermostModelObject.getter()
{
  void *v0;

  return v0;
}

id MPModelPlaylistEntry.innermostModelObject.getter()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id result;
  id v5;

  v1 = objc_msgSend(v0, "type");
  if (v1 == (id)3)
  {
    v3 = objc_msgSend(v5, "movie");
    goto LABEL_7;
  }
  if (v1 == (id)2)
  {
    v3 = objc_msgSend(v5, "tvEpisode");
LABEL_7:
    result = v3;
    v2 = v5;
    if (result)
      return result;
    return v2;
  }
  v2 = v5;
  if (v1 == (id)1)
  {
    v3 = objc_msgSend(v5, "song");
    goto LABEL_7;
  }
  return v2;
}

id MPModelGenericObject.innermostModelObject.getter()
{
  void *v0;
  id result;
  id v2;
  void *v3;
  id v4;
  id v5;

  switch((unint64_t)objc_msgSend(v0, "type"))
  {
    case 1uLL:
      result = objc_msgSend(v5, "song");
      if (!result)
        goto LABEL_37;
      break;
    case 2uLL:
      result = objc_msgSend(v5, "album");
      if (!result)
        goto LABEL_37;
      break;
    case 3uLL:
      result = objc_msgSend(v5, "artist");
      if (!result)
        goto LABEL_37;
      break;
    case 4uLL:
      result = objc_msgSend(v5, "playlist");
      if (!result)
        goto LABEL_37;
      break;
    case 5uLL:
      v2 = objc_msgSend(v5, "playlistEntry");
      if (!v2)
        goto LABEL_37;
      v3 = v2;
      v4 = objc_msgSend(v2, "innermostModelObject");

      result = v4;
      break;
    case 6uLL:
      result = objc_msgSend(v5, "tvEpisode");
      if (!result)
        goto LABEL_37;
      break;
    case 7uLL:
      result = objc_msgSend(v5, "season");
      if (!result)
        goto LABEL_37;
      break;
    case 8uLL:
      result = objc_msgSend(v5, "show");
      if (!result)
        goto LABEL_37;
      break;
    case 9uLL:
      result = objc_msgSend(v5, "movie");
      if (!result)
        goto LABEL_37;
      break;
    case 0xAuLL:
      result = objc_msgSend(v5, "mediaClip");
      if (!result)
        goto LABEL_37;
      break;
    case 0xBuLL:
      result = objc_msgSend(v5, "podcast");
      if (!result)
        goto LABEL_37;
      break;
    case 0xCuLL:
      result = objc_msgSend(v5, "podcastEpisode");
      if (!result)
        goto LABEL_37;
      break;
    case 0xDuLL:
      result = objc_msgSend(v5, "radioStation");
      if (!result)
        goto LABEL_37;
      break;
    case 0xFuLL:
      result = objc_msgSend(v5, "genre");
      if (!result)
        goto LABEL_37;
      break;
    case 0x10uLL:
      result = objc_msgSend(v5, "curator");
      if (!result)
        goto LABEL_37;
      break;
    case 0x11uLL:
      result = objc_msgSend(v5, "socialPerson");
      if (!result)
        goto LABEL_37;
      break;
    case 0x13uLL:
      result = objc_msgSend(v5, "recordLabel");
      if (!result)
        goto LABEL_37;
      break;
    case 0x14uLL:
      result = objc_msgSend(v5, "creditsArtist");
      if (!result)
        goto LABEL_37;
      break;
    default:
LABEL_37:
      result = v5;
      break;
  }
  return result;
}

id MPModelStoreBrowseContentItem.innermostModelObject.getter()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id v5;

  v1 = objc_msgSend(v0, "innerObject");
  if (!v1)
    return v5;
  v2 = v1;
  v3 = objc_msgSend(v1, "innermostModelObject");

  return v3;
}

uint64_t MPModelSong.nowPlayingTitle(radioStation:)(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  id v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v27[16];

  v2 = v1;
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v27[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v27[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = &v27[-v12];
  v14 = objc_msgSend(v2, "title");
  if (v14)
  {
    v15 = v14;
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v18 = v17;

    v19 = HIBYTE(v18) & 0xF;
    if ((v18 & 0x2000000000000000) == 0)
      v19 = v16 & 0xFFFFFFFFFFFFLL;
    if (v19)
      return v16;
    swift_bridgeObjectRelease();
  }
  if (!a1)
    goto LABEL_12;
  v20 = objc_msgSend(a1, "name");
  if (!v20)
    goto LABEL_12;
  v21 = v20;
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  v24 = HIBYTE(v23) & 0xF;
  if ((v23 & 0x2000000000000000) == 0)
    v24 = v16 & 0xFFFFFFFFFFFFLL;
  if (!v24)
  {
    swift_bridgeObjectRelease();
LABEL_12:
    String.LocalizationValue.init(stringLiteral:)(0x206E776F6E6B6E55, 0xED0000656C746954);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v11, v13, v7);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v25 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    v16 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v25, v6, 0, 0, 256);
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v13, v7);
  }
  return v16;
}

uint64_t MPModelSong.preferredBylineAttribution(with:radioStation:)(uint64_t a1, id a2)
{
  void *v2;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;

  if (a2 && (v4 = objc_msgSend(a2, "attributionLabel")) != 0)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);

  }
  else
  {
    v7 = v2;
    v8 = sub_1001047B0(a1, v7);

    if (*((_QWORD *)v8 + 2))
    {
      v9 = sub_1000057B4(&qword_1004BA5F8);
      v10 = sub_1001048F0();
      v6 = BidirectionalCollection<>.joined(separator:)(0x209480E220, 0xA500000000000000, v9, v10);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return v6;
}

void sub_1001041A0(unsigned __int8 *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  id v17;
  unsigned int v18;
  id v19;
  uint64_t *v20;
  void *v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;

  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v47 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for String.LocalizationValue(0);
  v46 = *(_QWORD *)(v48 - 8);
  v8 = __chkstk_darwin(v48);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v45 - v11;
  v13 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a1;
  v17 = sub_1001044F0(v16);
  v18 = objc_msgSend(a2, "hasLoadedValuesForPropertySet:", v17);

  if (!v18)
  {
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  if (v16 == 2)
  {
    v19 = objc_msgSend(a2, "artist");
    v20 = a3;
    if (!v19)
      goto LABEL_21;
    v21 = v19;
    v22 = objc_msgSend(v19, "name");

    if (!v22)
      goto LABEL_21;
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v25 = v24;

    v26 = HIBYTE(v25) & 0xF;
    if ((v25 & 0x2000000000000000) == 0)
      v26 = v23 & 0xFFFFFFFFFFFFLL;
    if (v26)
    {
      *a3 = v23;
      a3[1] = v25;
      return;
    }
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    *v20 = 0;
    v20[1] = 0;
    return;
  }
  v20 = a3;
  if ((v16 & 1) == 0 && !objc_msgSend(a2, "shouldShowComposer"))
    goto LABEL_21;
  v27 = objc_msgSend(a2, "composer");
  if (!v27)
    goto LABEL_21;
  v28 = v27;
  v29 = objc_msgSend(v27, "name");

  if (!v29)
    goto LABEL_21;
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  v32 = v31;

  v33 = HIBYTE(v32) & 0xF;
  if ((v32 & 0x2000000000000000) == 0)
    v33 = v30 & 0xFFFFFFFFFFFFLL;
  if (!v33)
    goto LABEL_20;
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(3, 1);
  v34._countAndFlagsBits = 2128194;
  v34._object = (void *)0xE300000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v34);
  v35._countAndFlagsBits = v30;
  v35._object = (void *)v32;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v35);
  swift_bridgeObjectRelease();
  v36._countAndFlagsBits = 0;
  v36._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v36);
  String.LocalizationValue.init(stringInterpolation:)(v15);
  v37 = v46;
  v38 = v48;
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v10, v12, v48);
  if (qword_1004B8A10 != -1)
    swift_once(&qword_1004B8A10, sub_10002B2B8);
  v39 = qword_1004F4630;
  v40 = (id)qword_1004F4630;
  v41 = v47;
  static Locale.current.getter(v40);
  v42 = String.init(localized:table:bundle:locale:comment:)(v10, 0, 0, v39, v41, 0, 0, 256);
  v44 = v43;
  (*(void (**)(char *, uint64_t))(v37 + 8))(v12, v38);
  *a3 = v42;
  a3[1] = v44;
}

id sub_1001044F0(char a1)
{
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  id v8;
  id v9;
  NSArray v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Class v20;
  id v21;
  Class v22;
  id v23;
  _BYTE v25[56];
  _BYTE v26[56];

  if (a1 == 2)
  {
    v1 = sub_1000057B4((uint64_t *)&unk_1004BD740);
    inited = swift_initStackObject(v1, v25);
    *(_OWORD *)(inited + 16) = xmmword_1003C64D0;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelRelationshipSongArtist);
    *(_QWORD *)(inited + 40) = v3;
    v4 = sub_1000057B4((uint64_t *)&unk_1004BDBA0);
    v5 = swift_allocObject(v4, 48, 7);
    *(_OWORD *)(v5 + 16) = xmmword_1003C64D0;
    *(_QWORD *)(v5 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyArtistName);
    *(_QWORD *)(v5 + 40) = v6;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v8 = objc_msgSend((id)objc_opt_self(MPPropertySet), "propertySetWithProperties:", isa);

    *(_QWORD *)(inited + 48) = v8;
    sub_1000B8E38(inited);
    v9 = objc_allocWithZone((Class)MPPropertySet);
    v10.super.isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    if ((a1 & 1) == 0)
    {
      v11 = sub_1000057B4((uint64_t *)&unk_1004BDBA0);
      v12 = swift_allocObject(v11, 48, 7);
      *(_OWORD *)(v12 + 16) = xmmword_1003C64D0;
      *(_QWORD *)(v12 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertySongShouldShowComposer);
      *(_QWORD *)(v12 + 40) = v13;
    }
    v14 = sub_1000057B4((uint64_t *)&unk_1004BD740);
    v15 = swift_initStackObject(v14, v26);
    *(_OWORD *)(v15 + 16) = xmmword_1003C64D0;
    *(_QWORD *)(v15 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelRelationshipSongComposer);
    *(_QWORD *)(v15 + 40) = v16;
    v17 = sub_1000057B4((uint64_t *)&unk_1004BDBA0);
    v18 = swift_allocObject(v17, 48, 7);
    *(_OWORD *)(v18 + 16) = xmmword_1003C64D0;
    *(_QWORD *)(v18 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyComposerName);
    *(_QWORD *)(v18 + 40) = v19;
    v20 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v21 = objc_msgSend((id)objc_opt_self(MPPropertySet), "propertySetWithProperties:", v20);

    *(_QWORD *)(v15 + 48) = v21;
    sub_1000B8E38(v15);
    v9 = objc_allocWithZone((Class)MPPropertySet);
    v10.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  sub_100104AF8();
  v22 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v23 = objc_msgSend(v9, "initWithProperties:relationships:", v10.super.isa, v22);

  return v23;
}

char *sub_1001047B0(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return (char *)_swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  v5 = 0;
  v6 = (char *)_swiftEmptyArrayStorage;
  do
  {
    v16 = *(_BYTE *)(a1 + v5 + 32);
    sub_1001041A0(&v16, a2, &v14);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v6;
    }
    v8 = v15;
    if (v15)
    {
      v9 = v14;
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
        v6 = sub_10005DE58(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
      v11 = *((_QWORD *)v6 + 2);
      v10 = *((_QWORD *)v6 + 3);
      if (v11 >= v10 >> 1)
        v6 = sub_10005DE58((char *)(v10 > 1), v11 + 1, 1, v6);
      *((_QWORD *)v6 + 2) = v11 + 1;
      v7 = &v6[16 * v11];
      *((_QWORD *)v7 + 4) = v9;
      *((_QWORD *)v7 + 5) = v8;
    }
    ++v5;
  }
  while (v3 != v5);
  swift_bridgeObjectRelease();
  return v6;
}

unint64_t sub_1001048F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1004BDD10;
  if (!qword_1004BDD10)
  {
    v1 = sub_100009788(&qword_1004BA5F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1004BDD10);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SongBylineAttributionComponent(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
  {
    v6 = *a1;
    v7 = v6 >= 2;
    v8 = (v6 + 2147483646) & 0x7FFFFFFF;
    if (!v7)
      v8 = -1;
    if (v8 + 1 >= 2)
      return v8;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 2;
    if (a2 + 2 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_10010498C + 4 * byte_1003CD940[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for SongBylineAttributionComponent(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFE)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100104A44 + 4 * byte_1003CD94A[v5]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100104A78 + 4 * byte_1003CD945[v5]))();
}

uint64_t sub_100104A78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100104A80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100104A88);
  return result;
}

uint64_t sub_100104A94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100104A9CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100104AA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100104AA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100104AB4(unsigned __int8 *a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;

  v1 = *a1;
  v2 = v1 >= 2;
  v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2)
    return (v3 + 1);
  else
    return 0;
}

_BYTE *sub_100104AD0(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 1;
  return result;
}

ValueMetadata *type metadata accessor for SongBylineAttributionComponent()
{
  return &type metadata for SongBylineAttributionComponent;
}

unint64_t sub_100104AF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1004BDD80;
  if (!qword_1004BDD80)
  {
    v1 = objc_opt_self(MPPropertySet);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1004BDD80);
  }
  return result;
}

uint64_t sub_100104B38(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  double v29;

  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for String.LocalizationValue(0);
  v9 = *(_QWORD *)(v28 - 8);
  v10 = __chkstk_darwin(v28);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v27 - v13;
  v15 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = 0;
  if ((a2 & 0x8000000000000000) == 0 && a1 >= 1)
  {
    String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(10, 3);
    v19._countAndFlagsBits = 0;
    v19._object = (void *)0xE000000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v19);
    v29 = *(double *)&a1;
    String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v29, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
    v20._countAndFlagsBits = 0x2F7469622DLL;
    v20._object = (void *)0xE500000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v20);
    v29 = (double)a2 / 1000.0;
    String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v29, 6712357, 0xE300000000000000, &type metadata for Double, &protocol witness table for Double);
    v21._countAndFlagsBits = 0x207A486B20;
    v21._object = (void *)0xE500000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v21);
    v22._countAndFlagsBits = UInt32.formatName.getter(a3);
    String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v22);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v23);
    String.LocalizationValue.init(stringInterpolation:)(v17);
    v24 = v28;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v28);
    if (qword_1004B8A10 != -1)
      swift_once(&qword_1004B8A10, sub_10002B2B8);
    v25 = qword_1004F4630;
    static Locale.current.getter((id)qword_1004F4630);
    v18 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v25, v8, 0, 0, 256);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v24);
  }
  return v18;
}

uint64_t _sSo27MPNowPlayingInfoAudioFormatC9MusicCoreE12inputDetailsSSSgvg_0()
{
  void *v0;

  return sub_100104B38((uint64_t)objc_msgSend(v0, "bitDepth"), (uint64_t)objc_msgSend(v0, "sampleRate"), (int)objc_msgSend(v0, "codec"));
}

void *MPIdentifierSet.Purpose.Options.catalog.unsafeMutableAddressor()
{
  return &static MPIdentifierSet.Purpose.Options.catalog;
}

uint64_t MPModelObject.bestIdentifier(for:)(uint64_t a1, unsigned __int8 a2)
{
  void *v2;
  void *v3;
  void *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t ObjectType;

  v3 = v2;
  objc_opt_self(MPModelGenericObject);
  v6 = (void *)swift_dynamicCastObjCClass(v3);
  if (v6)
  {
    v7 = objc_msgSend(v6, "anyObject");
    goto LABEL_5;
  }
  objc_opt_self(MPModelStoreBrowseContentItem);
  v8 = (void *)swift_dynamicCastObjCClass(v3);
  if (v8)
  {
    v7 = objc_msgSend(v8, "innerObject");
LABEL_5:
    v9 = v7;
    if (v9)
      goto LABEL_7;
  }
  v9 = v3;
LABEL_7:
  if (a2 == 1)
  {
    v10 = objc_msgSend(v9, "identifiers");
    if (a1 == 2)
    {
      ObjectType = swift_getObjectType();
      v12 = sub_1000BAB38(ObjectType, 2, 1u, v10);
    }
    else if (a1 == 1 || (v11 = swift_getObjectType(), v12 = sub_1000BAB38(v11, 2, 1u, v10), !v13))
    {
      sub_10010654C(v9);
    }
    v16 = v12;

  }
  else
  {
    v14 = swift_getObjectType();
    v15 = objc_msgSend(v9, "identifiers");
    v16 = sub_1000BAB38(v14, a1, a2, v15);

  }
  return v16;
}

void MPArtworkCatalog.requestImage(_:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[5];
  uint64_t v9;

  v5 = swift_allocObject(&unk_1004735A0, 32, 7);
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v8[4] = sub_1000F4920;
  v9 = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_100021234;
  v8[3] = &unk_1004735B8;
  v6 = _Block_copy(v8);
  v7 = v9;
  swift_retain(a2);
  objc_msgSend(v2, "requestImageWithCompletion:", v6, swift_release(v7).n128_f64[0]);
  _Block_release(v6);
}

uint64_t static MPModelPlaylistVariants.allPlaylists.getter()
{
  return 215;
}

uint64_t MPArtworkCatalog.getImage()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = v0;
  return swift_task_switch(sub_1001050A0, 0, 0);
}

uint64_t sub_1001050A0()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0 + 2;
  v2 = (void *)v0[16];
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_100105134;
  v3 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v4 = v0 + 10;
  v4[1] = 0x40000000;
  v4[2] = sub_1001051E0;
  v4[3] = &unk_1004735E0;
  v4[4] = v3;
  objc_msgSend(v2, "requestImageWithCompletion:", v4);
  return swift_continuation_await(v1);
}

uint64_t sub_100105134()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 136) = v1;
  if (v1)
    v2 = sub_1001051A4;
  else
    v2 = sub_100105194;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100105194()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 120));
}

uint64_t sub_1001051A4()
{
  uint64_t v0;

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1001051E0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  id v9;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_1000057B4((uint64_t *)&unk_1004BD690);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    swift_continuation_throwingResumeWithError(v3, v6);
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    v9 = a2;
    swift_continuation_throwingResume(v3);
  }
  else
  {
    __break(1u);
  }
}

void sub_10010526C(void *a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;

  if (a1)
  {
    v9 = a1;
    a3(a1, 0);

  }
  else
  {
    v6 = sub_10010C6FC();
    v7 = swift_allocError(&_s12LoadingErrorON, v6, 0, 0);
    *v8 = a2;
    swift_errorRetain(a2);
    a3((void *)v7, 1);
    swift_errorRelease(v7);
  }
}

void *MPArtworkCatalog.image(from:size:)(void *a1, double a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  dispatch_semaphore_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  __n128 v17;
  void *v18;
  id v19;
  _QWORD aBlock[5];
  uint64_t v22;

  v6 = type metadata accessor for DispatchTime(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = swift_allocObject(&unk_100473608, 24, 7);
  *(_QWORD *)(v10 + 16) = 0;
  objc_msgSend(a1, "setDestinationScale:", 0.0);
  objc_msgSend(a1, "setFittingSize:", a2, a3);
  v11 = dispatch_semaphore_create(0);
  v12 = swift_allocObject(&unk_100473630, 32, 7);
  *(_QWORD *)(v12 + 16) = v10;
  *(_QWORD *)(v12 + 24) = v11;
  v13 = swift_allocObject(&unk_100473658, 32, 7);
  *(_QWORD *)(v13 + 16) = sub_10010B028;
  *(_QWORD *)(v13 + 24) = v12;
  aBlock[4] = sub_10010C97C;
  v22 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100021234;
  aBlock[3] = &unk_100473670;
  v14 = _Block_copy(aBlock);
  v15 = v22;
  swift_retain(v10);
  v16 = v11;
  swift_retain(v12);
  objc_msgSend(a1, "requestImageWithCompletion:", v14, swift_release(v15).n128_f64[0]);
  _Block_release(v14);
  v17 = swift_release(v12);
  static DispatchTime.distantFuture.getter(v17);
  OS_dispatch_semaphore.wait(timeout:)(v9);

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_beginAccess(v10 + 16, aBlock, 0, 0);
  v18 = *(void **)(v10 + 16);
  v19 = v18;
  swift_release(v10);
  return v18;
}

Swift::Int sub_10010550C(void *a1, char a2, uint64_t a3)
{
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  _QWORD v9[3];

  v4 = a1;
  if ((a2 & 1) != 0)
  {
    v9[0] = a1;
    v6 = sub_1000057B4((uint64_t *)&unk_1004BD690);
    swift_willThrowTypedImpl(v9, v6, &protocol self-conformance witness table for Error);
    v4 = 0;
  }
  else
  {
    v5 = a1;
  }
  swift_beginAccess(a3 + 16, v9, 1, 0);
  v7 = *(void **)(a3 + 16);
  *(_QWORD *)(a3 + 16) = v4;

  return OS_dispatch_semaphore.signal()();
}

double MPArtworkCatalog.setDestination<A>(_:for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  double result;
  _QWORD v15[5];
  _QWORD *v16;

  v10 = _bridgeAnythingToObjectiveC<A>(_:)(a1, a5);
  v11 = (_QWORD *)swift_allocObject(&unk_1004736A8, 40, 7);
  v11[2] = a5;
  v11[3] = a3;
  v11[4] = a4;
  v15[4] = sub_10010B058;
  v16 = v11;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  v15[2] = sub_10001491C;
  v15[3] = &unk_1004736C0;
  v12 = _Block_copy(v15);
  v13 = v16;
  swift_retain(a4);
  objc_msgSend(v5, "setDestination:forRepresentationKinds:configurationBlock:", v10, a2, v12, swift_release(v13).n128_f64[0]);
  _Block_release(v12);
  *(_QWORD *)&result = swift_unknownObjectRelease(v10).n128_u64[0];
  return result;
}

uint64_t sub_100105684(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE v13[32];

  v8 = *(_QWORD *)(a5 - 8);
  v9 = __chkstk_darwin();
  v11 = &v13[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000990C(v9, (uint64_t)v13);
  swift_dynamicCast(v11, v13, (char *)&type metadata for Any + 8, a5, 7);
  a3(v11, a2);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v11, a5);
}

uint64_t MPArtworkCatalog.originalSize.getter()
{
  void *v0;
  id v1;
  uint64_t v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v9;
  _BYTE v10[32];

  v1 = objc_msgSend(v0, "token");
  _bridgeAnyObjectToAny(_:)(v1);
  swift_unknownObjectRelease(v1);
  v2 = sub_10000598C(0, &qword_1004BDCF8, MPStoreArtworkRequestToken_ptr);
  if ((swift_dynamicCast(&v9, v10, (char *)&type metadata for Any + 8, v2, 6) & 1) != 0)
  {
    v3 = v9;
    v4 = objc_msgSend(v9, "imageArtworkInfo");
    if (v4)
    {
      v5 = v4;
      objc_msgSend(v4, "originalSize");
      v7 = v6;

      return v7;
    }

  }
  return 0;
}

uint64_t MPArtworkCatalog.expectedRatio.getter()
{
  double v0;
  double v1;
  char v2;
  uint64_t result;

  v0 = COERCE_DOUBLE(MPArtworkCatalog.originalSize.getter());
  if ((v2 & 1) != 0 || v1 <= 0.0)
    *(double *)&result = 0.0;
  else
    *(double *)&result = v0 / v1;
  return result;
}

id static MPArtworkCatalog.monogram(for:layoutDirection:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  return sub_10010B33C(a1, a2, a3, a4 & 1);
}

id static MPMediaLibrary.device.getter()
{
  uint64_t v0;
  id result;

  result = objc_msgSend((id)swift_getObjCClassFromMetadata(v0), "deviceMediaLibrary");
  if (!result)
    __break(1u);
  return result;
}

id MPMediaLibrary.canCreatePlaylists.getter()
{
  uint64_t v0;
  id result;
  void *v2;
  char v3;

  result = objc_msgSend((id)objc_opt_self(MPMediaLibrary), "deviceMediaLibrary");
  if (result)
  {
    v2 = result;
    sub_10000598C(0, (unint64_t *)&unk_1004BDD00, MPMediaLibrary_ptr);
    v3 = static NSObject.== infix(_:_:)(v0, v2);

    return (id)(v3 & 1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *MPMediaPickerConfiguration.musicTypeIdentifiers.getter()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v3 = NSBundle.exportedTypeDeclarations.getter();

  if (!v3)
    return (char *)_swiftEmptyArrayStorage;
  v4 = objc_msgSend(v1, "typeIdentifiers");
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, &type metadata for String);

  v6 = *(_QWORD *)(v5 + 16);
  swift_bridgeObjectRelease();
  if (v6)
  {
    v7 = objc_msgSend(v1, "typeIdentifiers");
    v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, &type metadata for String);

    swift_bridgeObjectRetain();
    v9 = sub_10010B1EC(v8, v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v3, 2);
    sub_10010AD88((uint64_t)v9);
    v11 = v10;
    swift_bridgeObjectRelease();
    return (char *)v11;
  }
  swift_bridgeObjectRelease();
  if (objc_msgSend(v1, "mediaTypes"))
    return sub_100105C5C((__int16)objc_msgSend(v1, "mediaTypes"));
  else
    return (char *)_swiftEmptyArrayStorage;
}

uint64_t sub_100105A8C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  _BYTE v19[32];
  uint64_t v20;
  uint64_t v21;
  char *v22;

  v2 = a2;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    v5 = 0;
    v6 = (char *)_swiftEmptyArrayStorage;
    v22 = (char *)&type metadata for Any + 8;
    do
    {
      v8 = *(_QWORD *)(a1 + 8 * v5 + 32);
      v9 = *(_QWORD *)(v8 + 16);
      swift_bridgeObjectRetain();
      if (!v9
        || (v10 = sub_1000277A0(0xD000000000000010, 0x80000001003ABAB0), (v11 & 1) == 0)
        || (sub_10000990C(*(_QWORD *)(v8 + 56) + 32 * v10, (uint64_t)v19),
            (swift_dynamicCast(&v20, v19, v22, &type metadata for String, 6) & 1) == 0))
      {
        v20 = 0;
        v21 = 0;
      }
      swift_bridgeObjectRelease();
      v12 = v21;
      if (v21)
      {
        v13 = v20;
        if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
          v6 = sub_10005DE58(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
        v15 = *((_QWORD *)v6 + 2);
        v14 = *((_QWORD *)v6 + 3);
        if (v15 >= v14 >> 1)
          v6 = sub_10005DE58((char *)(v14 > 1), v15 + 1, 1, v6);
        *((_QWORD *)v6 + 2) = v15 + 1;
        v7 = &v6[16 * v15];
        *((_QWORD *)v7 + 4) = v13;
        *((_QWORD *)v7 + 5) = v12;
      }
      ++v5;
    }
    while (v3 != v5);
    swift_bridgeObjectRelease();
    v2 = a2;
  }
  else
  {
    v6 = (char *)_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  v16 = sub_10010B064((uint64_t)v6);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *v2 = v16;
  return result;
}

char *sub_100105C5C(__int16 a1)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;

  if ((a1 & 1) == 0)
  {
    v2 = (char *)_swiftEmptyArrayStorage;
    if ((a1 & 0x800) == 0)
      return v2;
    goto LABEL_7;
  }
  v2 = sub_10005DE58(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  v4 = *((_QWORD *)v2 + 2);
  v3 = *((_QWORD *)v2 + 3);
  if (v4 >= v3 >> 1)
    v2 = sub_10005DE58((char *)(v3 > 1), v4 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v4 + 1;
  v5 = &v2[16 * v4];
  *((_QWORD *)v5 + 4) = 0xD000000000000014;
  *((_QWORD *)v5 + 5) = 0x80000001003ABAF0;
  if ((a1 & 0x800) != 0)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10005DE58(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
    v7 = *((_QWORD *)v2 + 2);
    v6 = *((_QWORD *)v2 + 3);
    if (v7 >= v6 >> 1)
      v2 = sub_10005DE58((char *)(v6 > 1), v7 + 1, 1, v2);
    *((_QWORD *)v2 + 2) = v7 + 1;
    v8 = &v2[16 * v7];
    *((_QWORD *)v8 + 4) = 0xD00000000000001BLL;
    *((_QWORD *)v8 + 5) = 0x80000001003ABAD0;
  }
  return v2;
}

id MPMediaPickerConfiguration.supportsCatalogContent.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  char v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  if (qword_1004B8AF8 != -1)
    swift_once(&qword_1004B8AF8, sub_1000D365C);
  v1 = static ApplicationCapabilities.Controller.shared;
  KeyPath = swift_getKeyPath(&unk_1003CD9E0);
  v3 = swift_getKeyPath(&unk_1003CDA08);
  static Published.subscript.getter(&v7, v1, KeyPath, v3);
  swift_release(KeyPath);
  swift_release(v3);
  v4 = v8;
  v5 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if ((v4 & 1) != 0)
    return objc_msgSend(v0, "showsCatalogContent");
  else
    return 0;
}

id MPMediaPickerConfiguration.supportsCloudLibrary.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  __int16 v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  if (qword_1004B8AF8 != -1)
    swift_once(&qword_1004B8AF8, sub_1000D365C);
  v1 = static ApplicationCapabilities.Controller.shared;
  KeyPath = swift_getKeyPath(&unk_1003CD9E0);
  v3 = swift_getKeyPath(&unk_1003CDA08);
  static Published.subscript.getter(&v7, v1, KeyPath, v3);
  swift_release(KeyPath);
  swift_release(v3);
  v4 = v8;
  v5 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if ((v4 & 0x100) != 0)
    return objc_msgSend(v0, "showsCloudItems");
  else
    return 0;
}

void *MPIdentifierSet.Purpose.Options.local.unsafeMutableAddressor()
{
  return &static MPIdentifierSet.Purpose.Options.local;
}

void *MPIdentifierSet.Purpose.Options.all.unsafeMutableAddressor()
{
  return &static MPIdentifierSet.Purpose.Options.all;
}

unint64_t MPIdentifierSet.publicLoggingDescription.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  Swift::String v30;
  Swift::String v31;

  v1 = MPIdentifierSet.bestLibraryIdentifier.getter();
  if (v2)
  {
    String.append(_:)(*(Swift::String *)&v1);
    swift_bridgeObjectRelease();
    v3._countAndFlagsBits = 59;
    v3._object = (void *)0xE100000000000000;
    String.append(_:)(v3);
    v4 = sub_10005DE58(0, 1, 1, (char *)_swiftEmptyArrayStorage);
    v6 = *((_QWORD *)v4 + 2);
    v5 = *((_QWORD *)v4 + 3);
    if (v6 >= v5 >> 1)
      v4 = sub_10005DE58((char *)(v5 > 1), v6 + 1, 1, v4);
    *((_QWORD *)v4 + 2) = v6 + 1;
    v7 = &v4[16 * v6];
    *((_QWORD *)v7 + 4) = 0x507972617262696CLL;
    *((_QWORD *)v7 + 5) = 0xEB000000003D4449;
  }
  else
  {
    v4 = (char *)_swiftEmptyArrayStorage;
  }
  v8 = objc_msgSend(v0, "universalStore");
  if (v8)
  {
    v9 = v8;
    v10 = objc_msgSend(v8, "globalPlaylistID");
    swift_unknownObjectRelease(v9);
    if (v10)
    {
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      v13 = v12;

      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      v14._countAndFlagsBits = v11;
      v14._object = v13;
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v15._countAndFlagsBits = 59;
      v15._object = (void *)0xE100000000000000;
      String.append(_:)(v15);
      if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
        v4 = sub_10005DE58(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
      v17 = *((_QWORD *)v4 + 2);
      v16 = *((_QWORD *)v4 + 3);
      if (v17 >= v16 >> 1)
        v4 = sub_10005DE58((char *)(v16 > 1), v17 + 1, 1, v4);
      *((_QWORD *)v4 + 2) = v17 + 1;
      v18 = &v4[16 * v17];
      *((_QWORD *)v18 + 4) = 0xD000000000000011;
      *((_QWORD *)v18 + 5) = 0x80000001003AB8B0;
    }
  }
  v19 = MPIdentifierSet.bestStoreIdentifier.getter();
  if (v20)
  {
    String.append(_:)(*(Swift::String *)&v19);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 59;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
      v4 = sub_10005DE58(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
    v23 = *((_QWORD *)v4 + 2);
    v22 = *((_QWORD *)v4 + 3);
    if (v23 >= v22 >> 1)
      v4 = sub_10005DE58((char *)(v22 > 1), v23 + 1, 1, v4);
    *((_QWORD *)v4 + 2) = v23 + 1;
    v24 = &v4[16 * v23];
    *((_QWORD *)v24 + 4) = 0x3D65726F7473;
    *((_QWORD *)v24 + 5) = 0xE600000000000000;
  }
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v25 = sub_1000057B4(&qword_1004BA5F8);
  v26 = sub_1001048F0();
  v27 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v25, v26);
  v29 = v28;
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = v27;
  v30._object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._countAndFlagsBits = 62;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  return 0xD000000000000010;
}

uint64_t MPIdentifierSet.bestLibraryIdentifier.getter()
{
  void *v0;
  id v1;
  void *v2;
  Class isa;
  id v4;
  uint64_t v5;

  v1 = objc_msgSend(v0, "library");
  if (!v1)
    return 0;
  v2 = v1;
  if (!objc_msgSend(v1, "persistentID")
    || (objc_msgSend(v2, "persistentID"),
        isa = Int64._bridgeToObjectiveC()().super.super.isa,
        v4 = (id)MPStoreItemMetadataStringNormalizeStoreIDValue(),
        isa,
        !v4))
  {
    swift_unknownObjectRelease(v2);
    return 0;
  }
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);

  swift_unknownObjectRelease(v2);
  return v5;
}

uint64_t MPIdentifierSet.bestStoreIdentifier.getter()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  Class isa;
  id v8;

  v1 = objc_msgSend(v0, "universalStore");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = objc_msgSend(v1, "subscriptionAdamID");
  v4 = objc_msgSend(v2, "purchasedAdamID");
  v5 = objc_msgSend(v2, "adamID");
  if (!v3 && !v4)
  {
    v6 = (uint64_t)v5;
    if (!v5)
    {
      swift_unknownObjectRelease(v2);
      return v6;
    }
  }
  isa = Int64._bridgeToObjectiveC()().super.super.isa;
  v8 = (id)MPStoreItemMetadataStringNormalizeStoreIDValue();

  if (!v8)
  {
    swift_unknownObjectRelease(v2);
    return 0;
  }
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);

  swift_unknownObjectRelease(v2);
  return v6;
}

void static MPIdentifierSet.bestPlayabilityIdentifier<A>(for:options:identifiers:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 == 2)
  {
    sub_1001068D4((uint64_t)a1, a3);
  }
  else if (a2 == 1 || (sub_1001068D4((uint64_t)a1, a3), !v7))
  {
    sub_1001066D4(a1, (uint64_t)a3, a4);
  }
}

void sub_10010654C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  __n128 v8;
  _QWORD aBlock[5];
  uint64_t v10;
  char v11;

  v11 = 2;
  v2 = objc_opt_self(MPModelObject);
  v3 = swift_allocObject(&unk_100473F50, 32, 7);
  *(_QWORD *)(v3 + 16) = &v11;
  *(_QWORD *)(v3 + 24) = a1;
  v4 = swift_allocObject(&unk_100473F78, 32, 7);
  *(_QWORD *)(v4 + 16) = sub_10010C764;
  *(_QWORD *)(v4 + 24) = v3;
  aBlock[4] = sub_10005B69C;
  v10 = v4;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100011BA4;
  aBlock[3] = &unk_100473F90;
  v5 = _Block_copy(aBlock);
  v6 = v10;
  v7 = a1;
  swift_retain(v4);
  objc_msgSend((id)v2, "performWithoutEnforcement:", v5, swift_release(v6).n128_f64[0]);
  _Block_release(v5);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation(v4, "", 129, 235, 53, 1, v8);
  swift_release(v4);
  if ((v2 & 1) != 0)
  {
    __break(1u);
  }
  else if (v11 != 2 && (v11 & 1) != 0)
  {
    MPIdentifierSet.bestLibraryIdentifier.getter();
    swift_release(v3);
  }
  else
  {
    swift_release(v3);
  }
}

void sub_1001066D4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  __n128 v11;
  _QWORD aBlock[5];
  uint64_t v13;
  char v14;

  v14 = 2;
  v5 = objc_opt_self(MPModelObject);
  v6 = (_QWORD *)swift_allocObject(&unk_100473ED8, 40, 7);
  v6[2] = a3;
  v6[3] = &v14;
  v6[4] = a1;
  v7 = swift_allocObject(&unk_100473F00, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_10010C6E0;
  *(_QWORD *)(v7 + 24) = v6;
  aBlock[4] = sub_10005B69C;
  v13 = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100011BA4;
  aBlock[3] = &unk_100473F18;
  v8 = _Block_copy(aBlock);
  v9 = v13;
  v10 = a1;
  swift_retain(v7);
  objc_msgSend((id)v5, "performWithoutEnforcement:", v8, swift_release(v9).n128_f64[0]);
  _Block_release(v8);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation(v7, "", 129, 235, 53, 1, v11);
  swift_release(v7);
  if ((v5 & 1) != 0)
  {
    __break(1u);
  }
  else if (v14 != 2 && (v14 & 1) != 0)
  {
    MPIdentifierSet.bestLibraryIdentifier.getter();
    swift_release(v6);
  }
  else
  {
    swift_release(v6);
  }
}

uint64_t sub_100106864(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v2 = a2;
  ObjectType = swift_getObjectType(a2);
  result = swift_conformsToProtocol2(ObjectType, &protocol descriptor for LibraryAddable);
  if (result)
    v6 = result;
  else
    v6 = 0;
  if (!result)
    v2 = 0;
  if (v2)
  {
    v7 = swift_getObjectType(v2);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v7, v6);
    v8 = result & 1;
  }
  else
  {
    v8 = 2;
  }
  *a1 = v8;
  return result;
}

uint64_t sub_1001068D4(uint64_t a1, void *a2)
{
  uint64_t ObjectType;

  sub_10000598C(0, &qword_1004BD018, MPIdentifierSet_ptr);
  ObjectType = swift_getObjectType();
  return static MPIdentifierSet.bestIdentifier<A>(for:purpose:identifiers:)(ObjectType, 2, 1u, a2);
}

uint64_t static MPIdentifierSet.bestIdentifier<A>(for:purpose:identifiers:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, void *a4)
{
  char v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  Class isa;
  id v31;

  v5 = a2;
  if (a3 > 1u)
    __asm { BR              X9 }
  v7 = sub_10000598C(0, &qword_1004BC8C8, MPModelPlaylist_ptr);
  if (!swift_dynamicCastMetatype(a1, v7))
  {
    v10 = sub_10000598C(0, &qword_1004BC8D0, MPModelSocialPerson_ptr);
    if (swift_dynamicCastMetatype(a1, v10))
    {
      if ((v5 & 1) != 0)
      {
        v8 = MPIdentifierSet.bestLibraryIdentifier.getter();
        if (v11)
          return v8;
      }
      if ((v5 & 2) == 0)
        return 0;
      v17 = objc_msgSend(a4, "universalStore");
      if (!v17)
        return MPIdentifierSet.bestStoreIdentifier.getter();
      v14 = v17;
      v15 = objc_msgSend(v17, "socialProfileID");
      goto LABEL_24;
    }
    v12 = sub_10000598C(0, qword_1004BC8D8, MPModelRadioStation_ptr);
    if (!swift_dynamicCastMetatype(a1, v12))
    {
      if ((v5 & 1) != 0)
      {
        v8 = MPIdentifierSet.bestLibraryIdentifier.getter();
        if (v16)
          return v8;
      }
      if ((v5 & 2) == 0)
        return 0;
      return MPIdentifierSet.bestStoreIdentifier.getter();
    }
    if ((v5 & 2) == 0)
      return 0;
    v23 = objc_msgSend(a4, "radio");
    if (!v23)
      return 0;
    v24 = v23;
    v25 = objc_msgSend(v23, "stationStringID");
    if (v25)
    {
      v26 = v25;
      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v28 = v27;

      v29 = HIBYTE(v28) & 0xF;
      if ((v28 & 0x2000000000000000) == 0)
        v29 = v19 & 0xFFFFFFFFFFFFLL;
      if (v29)
      {
LABEL_40:
        swift_unknownObjectRelease(v24);
        return v19;
      }
      swift_bridgeObjectRelease();
    }
    if (!objc_msgSend(v24, "stationID")
      || (objc_msgSend(v24, "stationID"),
          isa = Int64._bridgeToObjectiveC()().super.super.isa,
          v31 = (id)MPStoreItemMetadataStringNormalizeStoreIDValue(),
          isa,
          !v31))
    {
      swift_unknownObjectRelease(v24);
      return 0;
    }
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);

    goto LABEL_40;
  }
  if ((v5 & 1) != 0)
  {
    v8 = MPIdentifierSet.bestLibraryIdentifier.getter();
    if (v9)
      return v8;
  }
  if ((v5 & 2) == 0)
    return 0;
  v13 = objc_msgSend(a4, "universalStore");
  if (!v13)
    return MPIdentifierSet.bestStoreIdentifier.getter();
  v14 = v13;
  v15 = objc_msgSend(v13, "globalPlaylistID");
LABEL_24:
  v18 = v15;
  swift_unknownObjectRelease(v14);
  if (!v18)
    return MPIdentifierSet.bestStoreIdentifier.getter();
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  v22 = HIBYTE(v21) & 0xF;
  if ((v21 & 0x2000000000000000) == 0)
    v22 = v19 & 0xFFFFFFFFFFFFLL;
  if (!v22)
  {
    swift_bridgeObjectRelease();
    return MPIdentifierSet.bestStoreIdentifier.getter();
  }
  return v19;
}

void MPIdentifierSet.init(kind:deviceLibraryPID:)(void *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  __n128 v9;
  _QWORD v10[5];
  uint64_t v11;

  v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v5 = swift_allocObject(&unk_1004736F8, 24, 7);
  *(_QWORD *)(v5 + 16) = a2;
  v6 = swift_allocObject(&unk_100473720, 32, 7);
  *(_QWORD *)(v6 + 16) = sub_10010B4BC;
  *(_QWORD *)(v6 + 24) = v5;
  v10[4] = sub_10001122C;
  v11 = v6;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_10001D2BC;
  v10[3] = &unk_100473738;
  v7 = _Block_copy(v10);
  v8 = v11;
  swift_retain(v6);
  objc_msgSend(v4, "initWithModelKind:block:", a1, v7, swift_release(v8).n128_f64[0]);

  _Block_release(v7);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation(v6, "", 129, 335, 36, 1, v9);
  swift_release(v5);
  swift_release(v6);
  if ((a1 & 1) != 0)
    __break(1u);
}

void sub_100106EE4(void *a1, uint64_t a2)
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  __n128 v11;
  char isEscapingClosureAtFileLocation;
  _QWORD v13[5];
  uint64_t v14;

  v4 = objc_msgSend((id)objc_opt_self(MPMediaLibrary), "deviceMediaLibrary");
  if (!v4)
    goto LABEL_6;
  v5 = v4;
  v6 = objc_msgSend(v4, "uniqueIdentifier");

  if (v6)
  {
    v7 = swift_allocObject(&unk_100473E60, 24, 7);
    *(_QWORD *)(v7 + 16) = a2;
    v8 = swift_allocObject(&unk_100473E88, 32, 7);
    *(_QWORD *)(v8 + 16) = sub_10010C69C;
    *(_QWORD *)(v8 + 24) = v7;
    v13[4] = sub_10005B69C;
    v14 = v8;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256;
    v13[2] = sub_100107060;
    v13[3] = &unk_100473EA0;
    v9 = _Block_copy(v13);
    v10 = v14;
    swift_retain(v8);
    objc_msgSend(a1, "setLibraryIdentifiersWithDatabaseID:block:", v6, v9, swift_release(v10).n128_f64[0]);

    _Block_release(v9);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v8, "", 129, 338, 78, 1, v11);
    swift_release(v7);
    swift_release(v8);
    if ((isEscapingClosureAtFileLocation & 1) != 0)
    {
      __break(1u);
LABEL_6:
      __break(1u);
    }
  }
}

uint64_t sub_100107060(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain(a2);
  v3(a2);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_10010709C(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t LibraryAddable.hasLoadedLibraryAddedProperty.getter()
{
  void *v0;

  if ((objc_msgSend(v0, "hasLoadedValueForKey:", MPModelPropertyAlbumLibraryAdded) & 1) != 0
    || (objc_msgSend(v0, "hasLoadedValueForKey:", MPModelPropertyMovieLibraryAdded) & 1) != 0
    || (objc_msgSend(v0, "hasLoadedValueForKey:", MPModelPropertyPlaylistLibraryAdded) & 1) != 0
    || (objc_msgSend(v0, "hasLoadedValueForKey:", MPModelPropertySongLibraryAdded) & 1) != 0
    || (objc_msgSend(v0, "hasLoadedValueForKey:", MPModelPropertyTVEpisodeLibraryAdded) & 1) != 0
    || (objc_msgSend(v0, "hasLoadedValueForKey:", MPModelPropertyTVSeasonLibraryAdded) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return (uint64_t)objc_msgSend(v0, "hasLoadedValueForKey:", MPModelPropertyArtistLibraryAdded);
  }
}

BOOL LibraryAddable.isUserLibraryAddable.getter()
{
  uint64_t v0;
  id v1;
  char *v2;

  v1 = objc_msgSend(objc_allocWithZone((Class)MPLibraryAddStatusObserver), "init");
  objc_msgSend(v1, "configureWithModelObject:", v0);
  v2 = (char *)objc_msgSend(v1, "currentStatus");

  return (unint64_t)(v2 - 1) < 3;
}

id sub_10010720C()
{
  void *v0;

  return objc_msgSend(v0, "isLibraryAdded");
}

BOOL PlaylistAddable.isPlaylistAddEligible.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;

  v5 = objc_opt_self(MPModelSong);
  v6 = (void *)swift_dynamicCastObjCClass(v2, v5);
  return (!v6 || (objc_msgSend(v6, "isArtistUploadedContent") & 1) == 0)
      && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2 + 8) + 16))(a1) & 1) != 0;
}

Swift::String_optional __swiftcall MPModelObject.genericModelRelationshipKey()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  Swift::String_optional result;

  objc_opt_self(MPModelAlbum);
  if (swift_dynamicCastObjCClass(v0))
  {
    v1 = &MPModelRelationshipGenericAlbum;
  }
  else
  {
    objc_opt_self(MPModelArtist);
    if (swift_dynamicCastObjCClass(v0))
    {
      v1 = &MPModelRelationshipGenericArtist;
    }
    else
    {
      objc_opt_self(MPModelComposer);
      if (swift_dynamicCastObjCClass(v0))
      {
        v1 = &MPModelRelationshipGenericComposer;
      }
      else
      {
        objc_opt_self(MPModelCurator);
        if (swift_dynamicCastObjCClass(v0))
        {
          v1 = &MPModelRelationshipGenericCurator;
        }
        else
        {
          objc_opt_self(MPModelGenre);
          if (swift_dynamicCastObjCClass(v0))
          {
            v1 = &MPModelRelationshipGenericGenre;
          }
          else
          {
            objc_opt_self(MPModelMovie);
            if (swift_dynamicCastObjCClass(v0))
            {
              v1 = &MPModelRelationshipGenericMovie;
            }
            else
            {
              objc_opt_self(MPModelPlaylist);
              if (swift_dynamicCastObjCClass(v0))
              {
                v1 = &MPModelRelationshipGenericPlaylist;
              }
              else
              {
                objc_opt_self(MPModelRadioStation);
                if (swift_dynamicCastObjCClass(v0))
                {
                  v1 = &MPModelRelationshipGenericRadioStation;
                }
                else
                {
                  objc_opt_self(MPModelSong);
                  if (swift_dynamicCastObjCClass(v0))
                  {
                    v1 = &MPModelRelationshipGenericSong;
                  }
                  else
                  {
                    objc_opt_self(MPModelTVEpisode);
                    if (swift_dynamicCastObjCClass(v0))
                    {
                      v1 = &MPModelRelationshipGenericTVEpisode;
                    }
                    else
                    {
                      objc_opt_self(MPModelTVSeason);
                      if (swift_dynamicCastObjCClass(v0))
                      {
                        v1 = &MPModelRelationshipGenericTVSeason;
                      }
                      else
                      {
                        objc_opt_self(MPModelTVShow);
                        v2 = swift_dynamicCastObjCClass(v0);
                        if (!v2)
                        {
                          v3 = 0;
                          goto LABEL_27;
                        }
                        v1 = &MPModelRelationshipGenericTVShow;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
LABEL_27:
  result.value._object = v3;
  result.value._countAndFlagsBits = v2;
  return result;
}

uint64_t MPModelObject.MediaKitPlayableKind.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001074D8
                                                            + 4 * asc_1003CD990[a1]))(0x73676E6F73, 0xE500000000000000);
}

uint64_t sub_1001074D8()
{
  return 0x6F736970652D7674;
}

uint64_t sub_1001074F8()
{
  return 0x73776F68732D7674;
}

uint64_t sub_100107510()
{
  return 0x646564616F6C7075;
}

uint64_t sub_100107544()
{
  return 0x736E6F6974617473;
}

uint64_t sub_10010755C()
{
  return 0x69762D636973756DLL;
}

uint64_t sub_10010757C()
{
  return 0x6F6D2D636973756DLL;
}

uint64_t sub_10010759C()
{
  return 0x7473696C79616C70;
}

uint64_t sub_1001075B8()
{
  return 0x736D75626C61;
}

uint64_t sub_1001075CC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = *a2;
  v3 = MPModelObject.MediaKitPlayableKind.rawValue.getter(*a1);
  v5 = v4;
  v6 = MPModelObject.MediaKitPlayableKind.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_100107654()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = MPModelObject.MediaKitPlayableKind.rawValue.getter(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1001076B4(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = MPModelObject.MediaKitPlayableKind.rawValue.getter(*v1);
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease();
}

